
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd8c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  0800bf60  0800bf60  0001bf60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c56c  0800c56c  000225b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c56c  0800c56c  0001c56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c574  0800c574  000225b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c574  0800c574  0001c574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c578  0800c578  0001c578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000025b4  20000000  0800c57c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  200025b4  0800eb30  000225b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ac0  0800eb30  00022ac0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000225b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc58  00000000  00000000  000225e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c9c  00000000  00000000  0003e23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001828  00000000  00000000  00041ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001688  00000000  00000000  00043700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028000  00000000  00000000  00044d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e67d  00000000  00000000  0006cd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5952  00000000  00000000  0008b405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00170d57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076b4  00000000  00000000  00170da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200025b4 	.word	0x200025b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bf44 	.word	0x0800bf44

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200025b8 	.word	0x200025b8
 800020c:	0800bf44 	.word	0x0800bf44

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b974 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <FEB_BMS_Precharge_Open>:
extern CAN_HandleTypeDef hcan1;
extern UART_HandleTypeDef huart2;

// ********************************** Functions **********************************

void FEB_BMS_Precharge_Open(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <FEB_BMS_Precharge_Open+0x14>)
 8000fd6:	f005 f991 	bl	80062fc <HAL_GPIO_WritePin>
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40020800 	.word	0x40020800

08000fe4 <FEB_BMS_Precharge_Close>:

void FEB_BMS_Precharge_Close(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2104      	movs	r1, #4
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <FEB_BMS_Precharge_Close+0x14>)
 8000fee:	f005 f985 	bl	80062fc <HAL_GPIO_WritePin>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40020800 	.word	0x40020800

08000ffc <FEB_BMS_Shutdown_Startup>:
extern CAN_HandleTypeDef hcan1;
extern UART_HandleTypeDef huart2;

// ********************************** Functions **********************************

void FEB_BMS_Shutdown_Startup(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	2102      	movs	r1, #2
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <FEB_BMS_Shutdown_Startup+0x14>)
 8001006:	f005 f979 	bl	80062fc <HAL_GPIO_WritePin>
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40020800 	.word	0x40020800

08001014 <FEB_BMS_Shutdown_Initiate>:

void FEB_BMS_Shutdown_Initiate(void) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b0a0      	sub	sp, #128	; 0x80
 8001018:	af00      	add	r7, sp, #0
	// Shutdown Circuit
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	2102      	movs	r1, #2
 800101e:	480a      	ldr	r0, [pc, #40]	; (8001048 <FEB_BMS_Shutdown_Initiate+0x34>)
 8001020:	f005 f96c 	bl	80062fc <HAL_GPIO_WritePin>

	// Broadcast Message
	char str[128];
	sprintf(str, "Shutdown!\n");
 8001024:	463b      	mov	r3, r7
 8001026:	4909      	ldr	r1, [pc, #36]	; (800104c <FEB_BMS_Shutdown_Initiate+0x38>)
 8001028:	4618      	mov	r0, r3
 800102a:	f008 fdb1 	bl	8009b90 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 100);
 800102e:	463b      	mov	r3, r7
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff f8ed 	bl	8000210 <strlen>
 8001036:	4603      	mov	r3, r0
 8001038:	b29a      	uxth	r2, r3
 800103a:	4639      	mov	r1, r7
 800103c:	2364      	movs	r3, #100	; 0x64
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <FEB_BMS_Shutdown_Initiate+0x3c>)
 8001040:	f007 fc95 	bl	800896e <HAL_UART_Transmit>
	if (FEB_LTC6811_Balance_Cells_State == 1) {
		FEB_LTC6811_Clear_Balance_Cells();
	}

	// Do nothing
	while (1) {}
 8001044:	e7fe      	b.n	8001044 <FEB_BMS_Shutdown_Initiate+0x30>
 8001046:	bf00      	nop
 8001048:	40020800 	.word	0x40020800
 800104c:	0800bf60 	.word	0x0800bf60
 8001050:	20002a60 	.word	0x20002a60

08001054 <FEB_BMS_State_Validate>:

#include "FEB_BMS_State.h"

// ********************************** Functions **********************************

void FEB_BMS_State_Validate(void) {
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
	if (FEB_CAN_CHARGER_START_CHARGE == 1 && FEB_LTC6811_Balance_Cells_State == 1) {
		FEB_BMS_Shutdown_Initiate();
	}
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <FEB_CAN_Init>:
uint8_t FEB_CAN_RxData[8];
uint32_t FEB_CAN_TxMailbox;

// ******************** CAN ********************

void FEB_CAN_Init() {
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	FEB_CAN_Filter_Config();
 8001068:	f000 f814 	bl	8001094 <FEB_CAN_Filter_Config>
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800106c:	4807      	ldr	r0, [pc, #28]	; (800108c <FEB_CAN_Init+0x28>)
 800106e:	f004 faf3 	bl	8005658 <HAL_CAN_Start>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <FEB_CAN_Init+0x18>
		FEB_BMS_Shutdown_Initiate();
 8001078:	f7ff ffcc 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
	}
	HAL_CAN_ActivateNotification(&hcan1, FEB_CAN_FIFO_Interrupt);
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <FEB_CAN_Init+0x2c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	4802      	ldr	r0, [pc, #8]	; (800108c <FEB_CAN_Init+0x28>)
 8001084:	f004 fc3e 	bl	8005904 <HAL_CAN_ActivateNotification>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200028e0 	.word	0x200028e0
 8001090:	20000000 	.word	0x20000000

08001094 <FEB_CAN_Filter_Config>:

void FEB_CAN_Filter_Config() {
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
	uint8_t bank = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	71fb      	strb	r3, [r7, #7]
	bank = FEB_CAN_IVT_Filter_Config(&hcan1, FEB_CAN_FIFO_Assignment, bank);
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <FEB_CAN_Filter_Config+0x38>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	79fa      	ldrb	r2, [r7, #7]
 80010a4:	4619      	mov	r1, r3
 80010a6:	480a      	ldr	r0, [pc, #40]	; (80010d0 <FEB_CAN_Filter_Config+0x3c>)
 80010a8:	f000 f8ea 	bl	8001280 <FEB_CAN_IVT_Filter_Config>
 80010ac:	4603      	mov	r3, r0
 80010ae:	71fb      	strb	r3, [r7, #7]
	bank = FEB_CAN_Charger_Filter_Config(&hcan1, FEB_CAN_FIFO_Assignment, bank);
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <FEB_CAN_Filter_Config+0x38>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	79fa      	ldrb	r2, [r7, #7]
 80010b6:	4619      	mov	r1, r3
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <FEB_CAN_Filter_Config+0x3c>)
 80010ba:	f000 f834 	bl	8001126 <FEB_CAN_Charger_Filter_Config>
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200025ec 	.word	0x200025ec
 80010d0:	200028e0 	.word	0x200028e0

080010d4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, FEB_CAN_FIFO_Assignment, &FEB_CAN_RxHeader, FEB_CAN_RxData) == HAL_OK) {
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80010e4:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f004 fafa 	bl	80056e0 <HAL_CAN_GetRxMessage>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d107      	bne.n	8001102 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
		FEB_CAN_IVT_Store_Msg(&FEB_CAN_RxHeader, FEB_CAN_RxData);
 80010f2:	4907      	ldr	r1, [pc, #28]	; (8001110 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80010f4:	4807      	ldr	r0, [pc, #28]	; (8001114 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80010f6:	f000 f903 	bl	8001300 <FEB_CAN_IVT_Store_Msg>
		FEB_CAN_Charger_Store_Msg(&FEB_CAN_RxHeader, FEB_CAN_RxData);
 80010fa:	4905      	ldr	r1, [pc, #20]	; (8001110 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80010fe:	f000 f845 	bl	800118c <FEB_CAN_Charger_Store_Msg>
	}
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200025ec 	.word	0x200025ec
 8001110:	200025f0 	.word	0x200025f0
 8001114:	200025d0 	.word	0x200025d0

08001118 <FEB_CAN_Charger_Init>:

// ********************************** Functions **********************************

// ******************** Startup ********************

void FEB_CAN_Charger_Init() {
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
	if (FEB_CAN_CHARGER_START_CHARGE == 0) {
		return;
 800111c:	bf00      	nop
	FEB_CAN_Charger_BMS_Message.max_voltage = (uint16_t) (MAX_VOLTAGE * CELLS_PER_BANK * NUM_BANKS * 10);
	FEB_CAN_Charger_BMS_Message.max_current = (uint16_t) (MAX_CHARGING_CURRENT * 10);
	FEB_CAN_Charger_BMS_Message.control = 0;

	FEB_CAN_Charger_State_Bool = 0;
}
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <FEB_CAN_Charger_Filter_Config>:

// ******************** CAN ********************

uint8_t FEB_CAN_Charger_Filter_Config(CAN_HandleTypeDef* hcan, uint8_t FIFO_Assignment, uint8_t bank) {
 8001126:	b580      	push	{r7, lr}
 8001128:	b08c      	sub	sp, #48	; 0x30
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	460b      	mov	r3, r1
 8001130:	70fb      	strb	r3, [r7, #3]
 8001132:	4613      	mov	r3, r2
 8001134:	70bb      	strb	r3, [r7, #2]
	CAN_FilterTypeDef my_can_filter_config;

	my_can_filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8001136:	2301      	movs	r3, #1
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
	my_can_filter_config.FilterBank = bank;
 800113a:	78bb      	ldrb	r3, [r7, #2]
 800113c:	61fb      	str	r3, [r7, #28]
	my_can_filter_config.FilterFIFOAssignment = FIFO_Assignment;
 800113e:	78fb      	ldrb	r3, [r7, #3]
 8001140:	61bb      	str	r3, [r7, #24]
	my_can_filter_config.FilterIdHigh = FEB_CAN_CHARGER_CHARGER_ID >> 13; 			// First 16 bits
 8001142:	f24c 73fa 	movw	r3, #51194	; 0xc7fa
 8001146:	60bb      	str	r3, [r7, #8]
	my_can_filter_config.FilterIdLow = (FEB_CAN_CHARGER_CHARGER_ID & 0x1FFF) << 3;	// Last 13 bits
 8001148:	f248 7328 	movw	r3, #34600	; 0x8728
 800114c:	60fb      	str	r3, [r7, #12]
	my_can_filter_config.FilterMaskIdHigh = 0xFFFF; 								// Mask first 16 bits
 800114e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001152:	613b      	str	r3, [r7, #16]
	my_can_filter_config.FilterMaskIdLow = 0xFFF8;									// Mask last 13 bits
 8001154:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001158:	617b      	str	r3, [r7, #20]
	my_can_filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
	my_can_filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 800115e:	2301      	movs	r3, #1
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
	my_can_filter_config.SlaveStartFilterBank = 27;
 8001162:	231b      	movs	r3, #27
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_CAN_ConfigFilter(hcan, &my_can_filter_config)) {
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	4619      	mov	r1, r3
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f004 f993 	bl	8005498 <HAL_CAN_ConfigFilter>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <FEB_CAN_Charger_Filter_Config+0x56>
		Error_Handler();
 8001178:	f003 f9c8 	bl	800450c <Error_Handler>
	}

	return ++bank;
 800117c:	78bb      	ldrb	r3, [r7, #2]
 800117e:	3301      	adds	r3, #1
 8001180:	70bb      	strb	r3, [r7, #2]
 8001182:	78bb      	ldrb	r3, [r7, #2]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3730      	adds	r7, #48	; 0x30
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <FEB_CAN_Charger_Store_Msg>:
	if (HAL_CAN_AddTxMessage(hcan, &FEB_CAN_TxHeader, FEB_CAN_TxData, &FEB_CAN_TxMailbox) != HAL_OK) {
	  Error_Handler();
	}
}

void FEB_CAN_Charger_Store_Msg(CAN_RxHeaderTypeDef* pHeader, uint8_t RxData[]) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
	switch(pHeader->ExtId) {
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	4a17      	ldr	r2, [pc, #92]	; (80011f8 <FEB_CAN_Charger_Store_Msg+0x6c>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d127      	bne.n	80011f0 <FEB_CAN_Charger_Store_Msg+0x64>
	    	case FEB_CAN_CHARGER_CHARGER_ID:
	    		FEB_CAN_Charger_Charger_Message.operating_voltage = (RxData[0] << 8) + RxData[1];
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	4413      	add	r3, r2
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <FEB_CAN_Charger_Store_Msg+0x70>)
 80011b8:	801a      	strh	r2, [r3, #0]
	    		FEB_CAN_Charger_Charger_Message.operating_current = (RxData[2] << 8) + RxData[3];
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	3302      	adds	r3, #2
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	3303      	adds	r3, #3
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	4413      	add	r3, r2
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <FEB_CAN_Charger_Store_Msg+0x70>)
 80011d4:	805a      	strh	r2, [r3, #2]
	    		FEB_CAN_Charger_Charger_Message.status = RxData[4];
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	3304      	adds	r3, #4
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <FEB_CAN_Charger_Store_Msg+0x70>)
 80011e0:	809a      	strh	r2, [r3, #4]
				FEB_CAN_Charger_Validate_Status(RxData[4]);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	3304      	adds	r3, #4
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 f809 	bl	8001200 <FEB_CAN_Charger_Validate_Status>
				break;
 80011ee:	bf00      	nop
	}
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	18ff50e5 	.word	0x18ff50e5
 80011fc:	200025f8 	.word	0x200025f8

08001200 <FEB_CAN_Charger_Validate_Status>:



// ******************** Charger Process Data ********************

void FEB_CAN_Charger_Validate_Status(uint8_t status) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
	// Failure bits, 0 (no error), 1 (error)
	uint8_t hardware_failure 			= (status >> 7) & 0b1;
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	09db      	lsrs	r3, r3, #7
 800120e:	73fb      	strb	r3, [r7, #15]
	uint8_t temperature_failure 		= (status >> 6) & 0b1;
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	099b      	lsrs	r3, r3, #6
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	73bb      	strb	r3, [r7, #14]
	uint8_t input_voltage_failure 		= (status >> 5) & 0b1;
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	b2db      	uxtb	r3, r3
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	737b      	strb	r3, [r7, #13]
	uint8_t starting_state_failure 		= (status >> 4) & 0b1;
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	091b      	lsrs	r3, r3, #4
 800122c:	b2db      	uxtb	r3, r3
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	733b      	strb	r3, [r7, #12]
	uint8_t communication_state_failure = (status >> 3) & 0b1;
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	08db      	lsrs	r3, r3, #3
 8001238:	b2db      	uxtb	r3, r3
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	72fb      	strb	r3, [r7, #11]

	if (hardware_failure == 1 			||
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d00b      	beq.n	800125e <FEB_CAN_Charger_Validate_Status+0x5e>
 8001246:	7bbb      	ldrb	r3, [r7, #14]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d008      	beq.n	800125e <FEB_CAN_Charger_Validate_Status+0x5e>
		temperature_failure == 1 		||
 800124c:	7b7b      	ldrb	r3, [r7, #13]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d005      	beq.n	800125e <FEB_CAN_Charger_Validate_Status+0x5e>
		input_voltage_failure == 1		||
 8001252:	7b3b      	ldrb	r3, [r7, #12]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d002      	beq.n	800125e <FEB_CAN_Charger_Validate_Status+0x5e>
		starting_state_failure == 1		||
 8001258:	7afb      	ldrb	r3, [r7, #11]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d101      	bne.n	8001262 <FEB_CAN_Charger_Validate_Status+0x62>
		communication_state_failure == 1) {
		FEB_BMS_Shutdown_Initiate();
 800125e:	f7ff fed9 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
	}
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <FEB_CAN_Charger_Process>:

void FEB_CAN_Charger_Process(CAN_HandleTypeDef* hcan) {
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
	if (FEB_CAN_CHARGER_START_CHARGE == 0 || FEB_CAN_Charger_State_Bool == 1) {
		return;
 8001272:	bf00      	nop
	if (FEB_LTC6811_Cells_Charged() == 1) {
		FEB_CAN_Charger_Stop_Charge(hcan);
	} else {
		FEB_CAN_Charger_Transmit(hcan);
	}
}
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <FEB_CAN_IVT_Filter_Config>:
// ********************************** Functions **********************************


// ******************** CAN ********************

uint8_t FEB_CAN_IVT_Filter_Config(CAN_HandleTypeDef* hcan, uint8_t FIFO_Assignment, uint8_t bank) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b08e      	sub	sp, #56	; 0x38
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	70fb      	strb	r3, [r7, #3]
 800128c:	4613      	mov	r3, r2
 800128e:	70bb      	strb	r3, [r7, #2]
	for (int i = 0; i < 4; i++, bank++) {
 8001290:	2300      	movs	r3, #0
 8001292:	637b      	str	r3, [r7, #52]	; 0x34
 8001294:	e029      	b.n	80012ea <FEB_CAN_IVT_Filter_Config+0x6a>
		CAN_FilterTypeDef filter_config;

		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8001296:	2301      	movs	r3, #1
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
		filter_config.FilterBank = bank;
 800129a:	78bb      	ldrb	r3, [r7, #2]
 800129c:	623b      	str	r3, [r7, #32]
		filter_config.FilterFIFOAssignment = FIFO_Assignment;
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	61fb      	str	r3, [r7, #28]
		filter_config.FilterIdHigh = FEB_CAN_IVT_Filter_ID_Arr[i] << 5;
 80012a2:	4a16      	ldr	r2, [pc, #88]	; (80012fc <FEB_CAN_IVT_Filter_Config+0x7c>)
 80012a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012aa:	015b      	lsls	r3, r3, #5
 80012ac:	60fb      	str	r3, [r7, #12]
		filter_config.FilterIdLow = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
		filter_config.FilterMaskIdHigh = 0x7FF << 5;
 80012b2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80012b6:	617b      	str	r3, [r7, #20]
		filter_config.FilterMaskIdLow = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 80012c0:	2301      	movs	r3, #1
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.SlaveStartFilterBank = 27;
 80012c4:	231b      	movs	r3, #27
 80012c6:	633b      	str	r3, [r7, #48]	; 0x30

		if(HAL_CAN_ConfigFilter(hcan, &filter_config)) {
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	4619      	mov	r1, r3
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f004 f8e2 	bl	8005498 <HAL_CAN_ConfigFilter>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <FEB_CAN_IVT_Filter_Config+0x5e>
			Error_Handler();
 80012da:	f003 f917 	bl	800450c <Error_Handler>
	for (int i = 0; i < 4; i++, bank++) {
 80012de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e0:	3301      	adds	r3, #1
 80012e2:	637b      	str	r3, [r7, #52]	; 0x34
 80012e4:	78bb      	ldrb	r3, [r7, #2]
 80012e6:	3301      	adds	r3, #1
 80012e8:	70bb      	strb	r3, [r7, #2]
 80012ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	ddd2      	ble.n	8001296 <FEB_CAN_IVT_Filter_Config+0x16>
		}
	}
	return bank;
 80012f0:	78bb      	ldrb	r3, [r7, #2]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3738      	adds	r7, #56	; 0x38
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000004 	.word	0x20000004

08001300 <FEB_CAN_IVT_Store_Msg>:

void FEB_CAN_IVT_Store_Msg(CAN_RxHeaderTypeDef* pHeader, uint8_t RxData[]) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
	uint32_t value;
    switch(pHeader->StdId) {
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f2a3 5321 	subw	r3, r3, #1313	; 0x521
 8001312:	2b03      	cmp	r3, #3
 8001314:	d87e      	bhi.n	8001414 <FEB_CAN_IVT_Store_Msg+0x114>
 8001316:	a201      	add	r2, pc, #4	; (adr r2, 800131c <FEB_CAN_IVT_Store_Msg+0x1c>)
 8001318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131c:	0800132d 	.word	0x0800132d
 8001320:	08001367 	.word	0x08001367
 8001324:	080013a1 	.word	0x080013a1
 8001328:	080013db 	.word	0x080013db
    	case FEB_CAN_IVT_CURRENT_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	3302      	adds	r3, #2
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	061a      	lsls	r2, r3, #24
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	3303      	adds	r3, #3
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	041b      	lsls	r3, r3, #16
 800133c:	441a      	add	r2, r3
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	3304      	adds	r3, #4
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	4413      	add	r3, r2
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	3205      	adds	r2, #5
 800134c:	7812      	ldrb	r2, [r2, #0]
 800134e:	4413      	add	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
    	    FEB_CAN_IVT_MESSAGE.IVT_Current = unsignedToSignedLong(value);
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f000 f8f2 	bl	800153c <unsignedToSignedLong>
 8001358:	4603      	mov	r3, r0
 800135a:	4a30      	ldr	r2, [pc, #192]	; (800141c <FEB_CAN_IVT_Store_Msg+0x11c>)
 800135c:	6013      	str	r3, [r2, #0]
    	    FEB_CAN_IVT_FLAG.IVT_Current = 1;
 800135e:	4b30      	ldr	r3, [pc, #192]	; (8001420 <FEB_CAN_IVT_Store_Msg+0x120>)
 8001360:	2201      	movs	r2, #1
 8001362:	701a      	strb	r2, [r3, #0]
    		break;
 8001364:	e056      	b.n	8001414 <FEB_CAN_IVT_Store_Msg+0x114>
    	case FEB_CAN_IVT_VOLTAGE1_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	3302      	adds	r3, #2
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	061a      	lsls	r2, r3, #24
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	3303      	adds	r3, #3
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	041b      	lsls	r3, r3, #16
 8001376:	441a      	add	r2, r3
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	3304      	adds	r3, #4
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	4413      	add	r3, r2
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	3205      	adds	r2, #5
 8001386:	7812      	ldrb	r2, [r2, #0]
 8001388:	4413      	add	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]
    	    FEB_CAN_IVT_MESSAGE.IVT_Voltage1 = unsignedToSignedLong(value);
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f000 f8d5 	bl	800153c <unsignedToSignedLong>
 8001392:	4603      	mov	r3, r0
 8001394:	4a21      	ldr	r2, [pc, #132]	; (800141c <FEB_CAN_IVT_Store_Msg+0x11c>)
 8001396:	6053      	str	r3, [r2, #4]
    	    FEB_CAN_IVT_FLAG.IVT_Voltage1 = 1;
 8001398:	4b21      	ldr	r3, [pc, #132]	; (8001420 <FEB_CAN_IVT_Store_Msg+0x120>)
 800139a:	2201      	movs	r2, #1
 800139c:	705a      	strb	r2, [r3, #1]
    		break;
 800139e:	e039      	b.n	8001414 <FEB_CAN_IVT_Store_Msg+0x114>
    	case FEB_CAN_IVT_VOLTAGE2_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	3302      	adds	r3, #2
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	061a      	lsls	r2, r3, #24
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	3303      	adds	r3, #3
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	041b      	lsls	r3, r3, #16
 80013b0:	441a      	add	r2, r3
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	3304      	adds	r3, #4
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	4413      	add	r3, r2
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	3205      	adds	r2, #5
 80013c0:	7812      	ldrb	r2, [r2, #0]
 80013c2:	4413      	add	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]
    	    FEB_CAN_IVT_MESSAGE.IVT_Voltage2 = unsignedToSignedLong(value);
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f000 f8b8 	bl	800153c <unsignedToSignedLong>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4a13      	ldr	r2, [pc, #76]	; (800141c <FEB_CAN_IVT_Store_Msg+0x11c>)
 80013d0:	6093      	str	r3, [r2, #8]
    	    FEB_CAN_IVT_FLAG.IVT_Voltage2 = 1;
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <FEB_CAN_IVT_Store_Msg+0x120>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	709a      	strb	r2, [r3, #2]
    		break;
 80013d8:	e01c      	b.n	8001414 <FEB_CAN_IVT_Store_Msg+0x114>
    	case FEB_CAN_IVT_VOLTAGE3_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	3302      	adds	r3, #2
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	061a      	lsls	r2, r3, #24
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	3303      	adds	r3, #3
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	041b      	lsls	r3, r3, #16
 80013ea:	441a      	add	r2, r3
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	3304      	adds	r3, #4
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	4413      	add	r3, r2
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	3205      	adds	r2, #5
 80013fa:	7812      	ldrb	r2, [r2, #0]
 80013fc:	4413      	add	r3, r2
 80013fe:	60fb      	str	r3, [r7, #12]
    		FEB_CAN_IVT_MESSAGE.IVT_Voltage3 = unsignedToSignedLong(value);
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f000 f89b 	bl	800153c <unsignedToSignedLong>
 8001406:	4603      	mov	r3, r0
 8001408:	4a04      	ldr	r2, [pc, #16]	; (800141c <FEB_CAN_IVT_Store_Msg+0x11c>)
 800140a:	60d3      	str	r3, [r2, #12]
    		FEB_CAN_IVT_FLAG.IVT_Voltage3 = 1;
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <FEB_CAN_IVT_Store_Msg+0x120>)
 800140e:	2201      	movs	r2, #1
 8001410:	70da      	strb	r2, [r3, #3]
    		break;
 8001412:	bf00      	nop
    }
}
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20002604 	.word	0x20002604
 8001420:	20002600 	.word	0x20002600
 8001424:	00000000 	.word	0x00000000

08001428 <FEB_CAN_IVT_Process>:

// ******************** IVT Process Data  ********************

void FEB_CAN_IVT_Process(void) {
 8001428:	b5b0      	push	{r4, r5, r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
	if (FEB_CAN_CHARGER_START_CHARGE == 1 || FEB_LTC6811_Balance_Cells_State == 1) {
		return;
	}
	if (FEB_CAN_IVT_FLAG.IVT_Current == 1) {
 800142e:	4b40      	ldr	r3, [pc, #256]	; (8001530 <FEB_CAN_IVT_Process+0x108>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d124      	bne.n	8001480 <FEB_CAN_IVT_Process+0x58>
		FEB_CAN_IVT_FLAG.IVT_Current = 0;
 8001436:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <FEB_CAN_IVT_Process+0x108>)
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
		float Ivt_Current_A = (float) FEB_CAN_IVT_MESSAGE.IVT_Voltage3 * 0.001;
 800143c:	4b3d      	ldr	r3, [pc, #244]	; (8001534 <FEB_CAN_IVT_Process+0x10c>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	ee07 3a90 	vmov	s15, r3
 8001444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001448:	ee17 0a90 	vmov	r0, s15
 800144c:	f7ff f89c 	bl	8000588 <__aeabi_f2d>
 8001450:	a333      	add	r3, pc, #204	; (adr r3, 8001520 <FEB_CAN_IVT_Process+0xf8>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	f7ff f8ef 	bl	8000638 <__aeabi_dmul>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f7ff fbe1 	bl	8000c28 <__aeabi_d2f>
 8001466:	4603      	mov	r3, r0
 8001468:	607b      	str	r3, [r7, #4]
		if (Ivt_Current_A > MAX_OPERATING_CURRENT) {
 800146a:	edd7 7a01 	vldr	s15, [r7, #4]
 800146e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001538 <FEB_CAN_IVT_Process+0x110>
 8001472:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147a:	dd01      	ble.n	8001480 <FEB_CAN_IVT_Process+0x58>
			FEB_BMS_Shutdown_Initiate();
 800147c:	f7ff fdca 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
		}
	}
	if (FEB_CAN_IVT_FLAG.IVT_Voltage1 == 1) {
 8001480:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <FEB_CAN_IVT_Process+0x108>)
 8001482:	785b      	ldrb	r3, [r3, #1]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d102      	bne.n	800148e <FEB_CAN_IVT_Process+0x66>
		FEB_CAN_IVT_FLAG.IVT_Voltage1 = 0;
 8001488:	4b29      	ldr	r3, [pc, #164]	; (8001530 <FEB_CAN_IVT_Process+0x108>)
 800148a:	2200      	movs	r2, #0
 800148c:	705a      	strb	r2, [r3, #1]
		// Do something

	}
	if (FEB_CAN_IVT_FLAG.IVT_Voltage2 == 1) {
 800148e:	4b28      	ldr	r3, [pc, #160]	; (8001530 <FEB_CAN_IVT_Process+0x108>)
 8001490:	789b      	ldrb	r3, [r3, #2]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d102      	bne.n	800149c <FEB_CAN_IVT_Process+0x74>
		FEB_CAN_IVT_FLAG.IVT_Voltage2 = 0;
 8001496:	4b26      	ldr	r3, [pc, #152]	; (8001530 <FEB_CAN_IVT_Process+0x108>)
 8001498:	2200      	movs	r2, #0
 800149a:	709a      	strb	r2, [r3, #2]
		// Do Something
	}
	if (FEB_CAN_IVT_FLAG.IVT_Voltage3 == 1) {
 800149c:	4b24      	ldr	r3, [pc, #144]	; (8001530 <FEB_CAN_IVT_Process+0x108>)
 800149e:	78db      	ldrb	r3, [r3, #3]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d138      	bne.n	8001516 <FEB_CAN_IVT_Process+0xee>
		FEB_CAN_IVT_FLAG.IVT_Voltage3 = 0;
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <FEB_CAN_IVT_Process+0x108>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	70da      	strb	r2, [r3, #3]
		float Ivt_Voltage_V = ((float) FEB_CAN_IVT_MESSAGE.IVT_Voltage3) * 0.001;
 80014aa:	4b22      	ldr	r3, [pc, #136]	; (8001534 <FEB_CAN_IVT_Process+0x10c>)
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	ee07 3a90 	vmov	s15, r3
 80014b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b6:	ee17 0a90 	vmov	r0, s15
 80014ba:	f7ff f865 	bl	8000588 <__aeabi_f2d>
 80014be:	a318      	add	r3, pc, #96	; (adr r3, 8001520 <FEB_CAN_IVT_Process+0xf8>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8b8 	bl	8000638 <__aeabi_dmul>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	f7ff fbaa 	bl	8000c28 <__aeabi_d2f>
 80014d4:	4603      	mov	r3, r0
 80014d6:	603b      	str	r3, [r7, #0]
		if (Ivt_Voltage_V > FEB_LTC6811_Total_Bank_Voltage() * 0.9) {
 80014d8:	6838      	ldr	r0, [r7, #0]
 80014da:	f7ff f855 	bl	8000588 <__aeabi_f2d>
 80014de:	4604      	mov	r4, r0
 80014e0:	460d      	mov	r5, r1
 80014e2:	f000 fd07 	bl	8001ef4 <FEB_LTC6811_Total_Bank_Voltage>
 80014e6:	ee10 3a10 	vmov	r3, s0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f84c 	bl	8000588 <__aeabi_f2d>
 80014f0:	a30d      	add	r3, pc, #52	; (adr r3, 8001528 <FEB_CAN_IVT_Process+0x100>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	f7ff f89f 	bl	8000638 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4620      	mov	r0, r4
 8001500:	4629      	mov	r1, r5
 8001502:	f7ff fb29 	bl	8000b58 <__aeabi_dcmpgt>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <FEB_CAN_IVT_Process+0xea>
			// Broadcast Message
			FEB_BMS_Precharge_Close();
 800150c:	f7ff fd6a 	bl	8000fe4 <FEB_BMS_Precharge_Close>
 8001510:	e001      	b.n	8001516 <FEB_CAN_IVT_Process+0xee>
		} else {
			FEB_BMS_Precharge_Open();
 8001512:	f7ff fd5b 	bl	8000fcc <FEB_BMS_Precharge_Open>
		}
	}
}
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bdb0      	pop	{r4, r5, r7, pc}
 800151c:	f3af 8000 	nop.w
 8001520:	d2f1a9fc 	.word	0xd2f1a9fc
 8001524:	3f50624d 	.word	0x3f50624d
 8001528:	cccccccd 	.word	0xcccccccd
 800152c:	3feccccc 	.word	0x3feccccc
 8001530:	20002600 	.word	0x20002600
 8001534:	20002604 	.word	0x20002604
 8001538:	425c0000 	.word	0x425c0000

0800153c <unsignedToSignedLong>:

long unsignedToSignedLong(uint32_t value) {
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	return (value & 0x7FFFFFFF) - (value & (0b1 << 31));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800154a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <FEB_Fan_Init>:
static uint8_t FEB_Fan_3_Speed = 0;		// 0-255
static uint8_t FEB_Fan_4_Speed = 0;		// 0-255

// ********************************** Initialize **********************************

void FEB_Fan_Init(void) {
 800155a:	b580      	push	{r7, lr}
 800155c:	af00      	add	r7, sp, #0
	FEB_Fan_PWM_Start();
 800155e:	f000 f807 	bl	8001570 <FEB_Fan_PWM_Start>
	FEB_Fan_Init_Speed_Set();
 8001562:	f000 f81d 	bl	80015a0 <FEB_Fan_Init_Speed_Set>
	FEB_Fan_Reset_Shift_Register();
 8001566:	f000 f88b 	bl	8001680 <FEB_Fan_Reset_Shift_Register>
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <FEB_Fan_PWM_Start>:

// ********************************** PWM **********************************

void FEB_Fan_PWM_Start(void) {
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001574:	2100      	movs	r1, #0
 8001576:	4808      	ldr	r0, [pc, #32]	; (8001598 <FEB_Fan_PWM_Start+0x28>)
 8001578:	f006 fb7c 	bl	8007c74 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800157c:	2104      	movs	r1, #4
 800157e:	4806      	ldr	r0, [pc, #24]	; (8001598 <FEB_Fan_PWM_Start+0x28>)
 8001580:	f006 fb78 	bl	8007c74 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001584:	2100      	movs	r1, #0
 8001586:	4805      	ldr	r0, [pc, #20]	; (800159c <FEB_Fan_PWM_Start+0x2c>)
 8001588:	f006 fb74 	bl	8007c74 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800158c:	2104      	movs	r1, #4
 800158e:	4803      	ldr	r0, [pc, #12]	; (800159c <FEB_Fan_PWM_Start+0x2c>)
 8001590:	f006 fb70 	bl	8007c74 <HAL_TIM_PWM_Start>
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20002988 	.word	0x20002988
 800159c:	200029d0 	.word	0x200029d0

080015a0 <FEB_Fan_Init_Speed_Set>:

void FEB_Fan_Init_Speed_Set(void) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	FEB_Fan_1_Speed_Set(255);
 80015a4:	20ff      	movs	r0, #255	; 0xff
 80015a6:	f000 f80b 	bl	80015c0 <FEB_Fan_1_Speed_Set>
	FEB_Fan_2_Speed_Set(255);
 80015aa:	20ff      	movs	r0, #255	; 0xff
 80015ac:	f000 f820 	bl	80015f0 <FEB_Fan_2_Speed_Set>
	FEB_Fan_3_Speed_Set(255);
 80015b0:	20ff      	movs	r0, #255	; 0xff
 80015b2:	f000 f835 	bl	8001620 <FEB_Fan_3_Speed_Set>
	FEB_Fan_4_Speed_Set(255);
 80015b6:	20ff      	movs	r0, #255	; 0xff
 80015b8:	f000 f84a 	bl	8001650 <FEB_Fan_4_Speed_Set>
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}

080015c0 <FEB_Fan_1_Speed_Set>:

void FEB_Fan_1_Speed_Set(uint8_t speed) {
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
	FEB_Fan_1_Speed = speed;
 80015ca:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <FEB_Fan_1_Speed_Set+0x28>)
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, FEB_Fan_1_Speed);
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <FEB_Fan_1_Speed_Set+0x28>)
 80015d2:	781a      	ldrb	r2, [r3, #0]
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <FEB_Fan_1_Speed_Set+0x2c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20002614 	.word	0x20002614
 80015ec:	20002988 	.word	0x20002988

080015f0 <FEB_Fan_2_Speed_Set>:

void FEB_Fan_2_Speed_Set(uint8_t speed) {
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
	FEB_Fan_2_Speed = speed;
 80015fa:	4a07      	ldr	r2, [pc, #28]	; (8001618 <FEB_Fan_2_Speed_Set+0x28>)
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, FEB_Fan_2_Speed);
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <FEB_Fan_2_Speed_Set+0x28>)
 8001602:	781a      	ldrb	r2, [r3, #0]
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <FEB_Fan_2_Speed_Set+0x2c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	639a      	str	r2, [r3, #56]	; 0x38
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20002615 	.word	0x20002615
 800161c:	20002988 	.word	0x20002988

08001620 <FEB_Fan_3_Speed_Set>:

void FEB_Fan_3_Speed_Set(uint8_t speed) {
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
	FEB_Fan_3_Speed = speed;
 800162a:	4a07      	ldr	r2, [pc, #28]	; (8001648 <FEB_Fan_3_Speed_Set+0x28>)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, FEB_Fan_3_Speed);
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <FEB_Fan_3_Speed_Set+0x28>)
 8001632:	781a      	ldrb	r2, [r3, #0]
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <FEB_Fan_3_Speed_Set+0x2c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	639a      	str	r2, [r3, #56]	; 0x38
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20002616 	.word	0x20002616
 800164c:	200029d0 	.word	0x200029d0

08001650 <FEB_Fan_4_Speed_Set>:

void FEB_Fan_4_Speed_Set(uint8_t speed) {
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
	FEB_Fan_4_Speed = speed;
 800165a:	4a07      	ldr	r2, [pc, #28]	; (8001678 <FEB_Fan_4_Speed_Set+0x28>)
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, FEB_Fan_4_Speed);
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <FEB_Fan_4_Speed_Set+0x28>)
 8001662:	781a      	ldrb	r2, [r3, #0]
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <FEB_Fan_4_Speed_Set+0x2c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	635a      	str	r2, [r3, #52]	; 0x34
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20002617 	.word	0x20002617
 800167c:	200029d0 	.word	0x200029d0

08001680 <FEB_Fan_Reset_Shift_Register>:

// ********************************** Tachometer **********************************

void FEB_Fan_Reset_Shift_Register(void) {
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	f44f 7100 	mov.w	r1, #512	; 0x200
 800168a:	4807      	ldr	r0, [pc, #28]	; (80016a8 <FEB_Fan_Reset_Shift_Register+0x28>)
 800168c:	f004 fe36 	bl	80062fc <HAL_GPIO_WritePin>
	FEB_Timer_Delay_Micro(1);
 8001690:	2001      	movs	r0, #1
 8001692:	f001 f8a3 	bl	80027dc <FEB_Timer_Delay_Micro>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001696:	2201      	movs	r2, #1
 8001698:	f44f 7100 	mov.w	r1, #512	; 0x200
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <FEB_Fan_Reset_Shift_Register+0x28>)
 800169e:	f004 fe2d 	bl	80062fc <HAL_GPIO_WritePin>
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40020800 	.word	0x40020800

080016ac <FEB_LTC6811_Setup>:
// Set accumulator
static Accumulator accumulator;

// ********************************** Functions **********************************

void FEB_LTC6811_Setup(void) {
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af06      	add	r7, sp, #24
	FEB_LTC6811_Config_Cell_Discharge();
 80016b2:	f000 f83f 	bl	8001734 <FEB_LTC6811_Config_Cell_Discharge>

	LTC6811_init_cfg(NUM_IC, accumulator.IC_config);
 80016b6:	4917      	ldr	r1, [pc, #92]	; (8001714 <FEB_LTC6811_Setup+0x68>)
 80016b8:	2002      	movs	r0, #2
 80016ba:	f001 f96d 	bl	8002998 <LTC6811_init_cfg>
	for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 80016be:	2300      	movs	r3, #0
 80016c0:	71fb      	strb	r3, [r7, #7]
 80016c2:	e018      	b.n	80016f6 <FEB_LTC6811_Setup+0x4a>
		LTC6811_set_cfgr(current_ic, accumulator.IC_config, REFON, ADCOPT, GPIOBITS_A, DCCBITS_A, DCTOBITS, UV, OV);
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <FEB_LTC6811_Setup+0x6c>)
 80016c6:	7819      	ldrb	r1, [r3, #0]
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <FEB_LTC6811_Setup+0x70>)
 80016ca:	781c      	ldrb	r4, [r3, #0]
 80016cc:	4b14      	ldr	r3, [pc, #80]	; (8001720 <FEB_LTC6811_Setup+0x74>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	4a14      	ldr	r2, [pc, #80]	; (8001724 <FEB_LTC6811_Setup+0x78>)
 80016d2:	8812      	ldrh	r2, [r2, #0]
 80016d4:	79f8      	ldrb	r0, [r7, #7]
 80016d6:	9204      	str	r2, [sp, #16]
 80016d8:	9303      	str	r3, [sp, #12]
 80016da:	4b13      	ldr	r3, [pc, #76]	; (8001728 <FEB_LTC6811_Setup+0x7c>)
 80016dc:	9302      	str	r3, [sp, #8]
 80016de:	4b13      	ldr	r3, [pc, #76]	; (800172c <FEB_LTC6811_Setup+0x80>)
 80016e0:	9301      	str	r3, [sp, #4]
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <FEB_LTC6811_Setup+0x84>)
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	4623      	mov	r3, r4
 80016e8:	460a      	mov	r2, r1
 80016ea:	490a      	ldr	r1, [pc, #40]	; (8001714 <FEB_LTC6811_Setup+0x68>)
 80016ec:	f001 f963 	bl	80029b6 <LTC6811_set_cfgr>
	for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	3301      	adds	r3, #1
 80016f4:	71fb      	strb	r3, [r7, #7]
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d9e3      	bls.n	80016c4 <FEB_LTC6811_Setup+0x18>
	}
	LTC6811_reset_crc_count(NUM_IC, accumulator.IC_config);
 80016fc:	4905      	ldr	r1, [pc, #20]	; (8001714 <FEB_LTC6811_Setup+0x68>)
 80016fe:	2002      	movs	r0, #2
 8001700:	f001 f93b 	bl	800297a <LTC6811_reset_crc_count>
	LTC6811_init_reg_limits(NUM_IC, accumulator.IC_config);
 8001704:	4903      	ldr	r1, [pc, #12]	; (8001714 <FEB_LTC6811_Setup+0x68>)
 8001706:	2002      	movs	r0, #2
 8001708:	f001 f882 	bl	8002810 <LTC6811_init_reg_limits>
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	bd90      	pop	{r4, r7, pc}
 8001714:	20002640 	.word	0x20002640
 8001718:	2000001d 	.word	0x2000001d
 800171c:	20002630 	.word	0x20002630
 8001720:	20000026 	.word	0x20000026
 8001724:	20000028 	.word	0x20000028
 8001728:	2000002c 	.word	0x2000002c
 800172c:	20002634 	.word	0x20002634
 8001730:	20000020 	.word	0x20000020

08001734 <FEB_LTC6811_Config_Cell_Discharge>:

void FEB_LTC6811_Config_Cell_Discharge(void) {
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NUM_IC; i++) {
 800173a:	2300      	movs	r3, #0
 800173c:	71fb      	strb	r3, [r7, #7]
 800173e:	e016      	b.n	800176e <FEB_LTC6811_Config_Cell_Discharge+0x3a>
		for (uint8_t j = 0; j < CELLS_PER_DAUGHTER_BOARD; j++) {
 8001740:	2300      	movs	r3, #0
 8001742:	71bb      	strb	r3, [r7, #6]
 8001744:	e00d      	b.n	8001762 <FEB_LTC6811_Config_Cell_Discharge+0x2e>
			FEB_LTC6811_Cell_Discharge[i][j] = 0;
 8001746:	79fa      	ldrb	r2, [r7, #7]
 8001748:	79b9      	ldrb	r1, [r7, #6]
 800174a:	480e      	ldr	r0, [pc, #56]	; (8001784 <FEB_LTC6811_Config_Cell_Discharge+0x50>)
 800174c:	4613      	mov	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4403      	add	r3, r0
 8001756:	440b      	add	r3, r1
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < CELLS_PER_DAUGHTER_BOARD; j++) {
 800175c:	79bb      	ldrb	r3, [r7, #6]
 800175e:	3301      	adds	r3, #1
 8001760:	71bb      	strb	r3, [r7, #6]
 8001762:	79bb      	ldrb	r3, [r7, #6]
 8001764:	2b0b      	cmp	r3, #11
 8001766:	d9ee      	bls.n	8001746 <FEB_LTC6811_Config_Cell_Discharge+0x12>
	for (uint8_t i = 0; i < NUM_IC; i++) {
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	3301      	adds	r3, #1
 800176c:	71fb      	strb	r3, [r7, #7]
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d9e5      	bls.n	8001740 <FEB_LTC6811_Config_Cell_Discharge+0xc>
		}
	}
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20002618 	.word	0x20002618

08001788 <FEB_LTC6811_Poll_Voltage>:

// ******************** Read Voltage ********************

void FEB_LTC6811_Poll_Voltage(void) {
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	FEB_LTC6811_Start_Cell_ADC_Measurement();
 800178c:	f000 f806 	bl	800179c <FEB_LTC6811_Start_Cell_ADC_Measurement>
	FEB_LTC6811_Read_Cell_Voltage_Registers();
 8001790:	f000 f812 	bl	80017b8 <FEB_LTC6811_Read_Cell_Voltage_Registers>
	FEB_LTC6811_Store_Voltage();
 8001794:	f000 f81e 	bl	80017d4 <FEB_LTC6811_Store_Voltage>
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}

0800179c <FEB_LTC6811_Start_Cell_ADC_Measurement>:

void FEB_LTC6811_Start_Cell_ADC_Measurement(void) {
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 80017a0:	2002      	movs	r0, #2
 80017a2:	f001 f946 	bl	8002a32 <wakeup_sleep>
	LTC6811_adcv(ADC_CONVERSION_MODE, ADC_DCP, CELL_CH_TO_CONVERT);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2101      	movs	r1, #1
 80017aa:	2002      	movs	r0, #2
 80017ac:	f001 f88c 	bl	80028c8 <LTC6811_adcv>
	LTC6811_pollAdc();
 80017b0:	f001 f8dc 	bl	800296c <LTC6811_pollAdc>
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <FEB_LTC6811_Read_Cell_Voltage_Registers>:

void FEB_LTC6811_Read_Cell_Voltage_Registers(void) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 80017bc:	2002      	movs	r0, #2
 80017be:	f001 f938 	bl	8002a32 <wakeup_sleep>
	LTC6811_rdcv(SEL_ALL_REG, NUM_IC, accumulator.IC_config);
 80017c2:	4a03      	ldr	r2, [pc, #12]	; (80017d0 <FEB_LTC6811_Read_Cell_Voltage_Registers+0x18>)
 80017c4:	2102      	movs	r1, #2
 80017c6:	2000      	movs	r0, #0
 80017c8:	f001 f8a3 	bl	8002912 <LTC6811_rdcv>
}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20002640 	.word	0x20002640

080017d4 <FEB_LTC6811_Store_Voltage>:

void FEB_LTC6811_Store_Voltage(void) {
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
    for (uint16_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 80017da:	2300      	movs	r3, #0
 80017dc:	80fb      	strh	r3, [r7, #6]
 80017de:	e1b8      	b.n	8001b52 <FEB_LTC6811_Store_Voltage+0x37e>
    	accumulator.banks[bank_idx].cells[16].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[0]);
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4ad3      	ldr	r2, [pc, #844]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 80017e6:	21e8      	movs	r1, #232	; 0xe8
 80017e8:	fb01 f303 	mul.w	r3, r1, r3
 80017ec:	4413      	add	r3, r2
 80017ee:	331e      	adds	r3, #30
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	88fc      	ldrh	r4, [r7, #6]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 f9b7 	bl	8001b68 <FEB_LTC6811_Convert_Voltage>
 80017fa:	eef0 7a40 	vmov.f32	s15, s0
 80017fe:	4acd      	ldr	r2, [pc, #820]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 8001800:	4623      	mov	r3, r4
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	4423      	add	r3, r4
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4413      	add	r3, r2
 800180a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800180e:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[15].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[1]);
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4ac7      	ldr	r2, [pc, #796]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 8001818:	21e8      	movs	r1, #232	; 0xe8
 800181a:	fb01 f303 	mul.w	r3, r1, r3
 800181e:	4413      	add	r3, r2
 8001820:	3320      	adds	r3, #32
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	88fc      	ldrh	r4, [r7, #6]
 8001826:	4618      	mov	r0, r3
 8001828:	f000 f99e 	bl	8001b68 <FEB_LTC6811_Convert_Voltage>
 800182c:	eef0 7a40 	vmov.f32	s15, s0
 8001830:	4ac0      	ldr	r2, [pc, #768]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 8001832:	4623      	mov	r3, r4
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	4423      	add	r3, r4
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	4413      	add	r3, r2
 800183c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8001840:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[14].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[2]);
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4aba      	ldr	r2, [pc, #744]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 800184a:	21e8      	movs	r1, #232	; 0xe8
 800184c:	fb01 f303 	mul.w	r3, r1, r3
 8001850:	4413      	add	r3, r2
 8001852:	3322      	adds	r3, #34	; 0x22
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	88fc      	ldrh	r4, [r7, #6]
 8001858:	4618      	mov	r0, r3
 800185a:	f000 f985 	bl	8001b68 <FEB_LTC6811_Convert_Voltage>
 800185e:	eef0 7a40 	vmov.f32	s15, s0
 8001862:	4ab4      	ldr	r2, [pc, #720]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 8001864:	4623      	mov	r3, r4
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	4423      	add	r3, r4
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	4413      	add	r3, r2
 800186e:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8001872:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[13].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[3]);
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4aae      	ldr	r2, [pc, #696]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 800187c:	21e8      	movs	r1, #232	; 0xe8
 800187e:	fb01 f303 	mul.w	r3, r1, r3
 8001882:	4413      	add	r3, r2
 8001884:	3324      	adds	r3, #36	; 0x24
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	88fc      	ldrh	r4, [r7, #6]
 800188a:	4618      	mov	r0, r3
 800188c:	f000 f96c 	bl	8001b68 <FEB_LTC6811_Convert_Voltage>
 8001890:	eef0 7a40 	vmov.f32	s15, s0
 8001894:	4aa7      	ldr	r2, [pc, #668]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 8001896:	4623      	mov	r3, r4
 8001898:	011b      	lsls	r3, r3, #4
 800189a:	4423      	add	r3, r4
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	4413      	add	r3, r2
 80018a0:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80018a4:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[12].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[6]);
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4aa1      	ldr	r2, [pc, #644]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 80018ae:	21e8      	movs	r1, #232	; 0xe8
 80018b0:	fb01 f303 	mul.w	r3, r1, r3
 80018b4:	4413      	add	r3, r2
 80018b6:	332a      	adds	r3, #42	; 0x2a
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	88fc      	ldrh	r4, [r7, #6]
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 f953 	bl	8001b68 <FEB_LTC6811_Convert_Voltage>
 80018c2:	eef0 7a40 	vmov.f32	s15, s0
 80018c6:	4a9b      	ldr	r2, [pc, #620]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 80018c8:	4623      	mov	r3, r4
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	4423      	add	r3, r4
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4413      	add	r3, r2
 80018d2:	f503 730d 	add.w	r3, r3, #564	; 0x234
 80018d6:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[11].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[7]);
 80018da:	88fb      	ldrh	r3, [r7, #6]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4a95      	ldr	r2, [pc, #596]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 80018e0:	21e8      	movs	r1, #232	; 0xe8
 80018e2:	fb01 f303 	mul.w	r3, r1, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	332c      	adds	r3, #44	; 0x2c
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	88fc      	ldrh	r4, [r7, #6]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 f93a 	bl	8001b68 <FEB_LTC6811_Convert_Voltage>
 80018f4:	eef0 7a40 	vmov.f32	s15, s0
 80018f8:	4a8e      	ldr	r2, [pc, #568]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 80018fa:	4623      	mov	r3, r4
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	4423      	add	r3, r4
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	4413      	add	r3, r2
 8001904:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8001908:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[10].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[8]);
 800190c:	88fb      	ldrh	r3, [r7, #6]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4a88      	ldr	r2, [pc, #544]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 8001912:	21e8      	movs	r1, #232	; 0xe8
 8001914:	fb01 f303 	mul.w	r3, r1, r3
 8001918:	4413      	add	r3, r2
 800191a:	332e      	adds	r3, #46	; 0x2e
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	88fc      	ldrh	r4, [r7, #6]
 8001920:	4618      	mov	r0, r3
 8001922:	f000 f921 	bl	8001b68 <FEB_LTC6811_Convert_Voltage>
 8001926:	eef0 7a40 	vmov.f32	s15, s0
 800192a:	4a82      	ldr	r2, [pc, #520]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 800192c:	4623      	mov	r3, r4
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	4423      	add	r3, r4
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	4413      	add	r3, r2
 8001936:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800193a:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[9].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[9]);
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4a7c      	ldr	r2, [pc, #496]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 8001944:	21e8      	movs	r1, #232	; 0xe8
 8001946:	fb01 f303 	mul.w	r3, r1, r3
 800194a:	4413      	add	r3, r2
 800194c:	3330      	adds	r3, #48	; 0x30
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	88fc      	ldrh	r4, [r7, #6]
 8001952:	4618      	mov	r0, r3
 8001954:	f000 f908 	bl	8001b68 <FEB_LTC6811_Convert_Voltage>
 8001958:	eef0 7a40 	vmov.f32	s15, s0
 800195c:	4a75      	ldr	r2, [pc, #468]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 800195e:	4623      	mov	r3, r4
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	4423      	add	r3, r4
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	4413      	add	r3, r2
 8001968:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800196c:	edc3 7a00 	vstr	s15, [r3]

    	accumulator.banks[bank_idx].cells[8].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[0]);
 8001970:	88fb      	ldrh	r3, [r7, #6]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	3301      	adds	r3, #1
 8001976:	4a6f      	ldr	r2, [pc, #444]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 8001978:	21e8      	movs	r1, #232	; 0xe8
 800197a:	fb01 f303 	mul.w	r3, r1, r3
 800197e:	4413      	add	r3, r2
 8001980:	331e      	adds	r3, #30
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	88fc      	ldrh	r4, [r7, #6]
 8001986:	4618      	mov	r0, r3
 8001988:	f000 f8ee 	bl	8001b68 <FEB_LTC6811_Convert_Voltage>
 800198c:	eef0 7a40 	vmov.f32	s15, s0
 8001990:	4a68      	ldr	r2, [pc, #416]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 8001992:	4623      	mov	r3, r4
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	4423      	add	r3, r4
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	4413      	add	r3, r2
 800199c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80019a0:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[7].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[1]);
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	3301      	adds	r3, #1
 80019aa:	4a62      	ldr	r2, [pc, #392]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 80019ac:	21e8      	movs	r1, #232	; 0xe8
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	3320      	adds	r3, #32
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	88fc      	ldrh	r4, [r7, #6]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 f8d4 	bl	8001b68 <FEB_LTC6811_Convert_Voltage>
 80019c0:	eef0 7a40 	vmov.f32	s15, s0
 80019c4:	4a5b      	ldr	r2, [pc, #364]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 80019c6:	4623      	mov	r3, r4
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	4423      	add	r3, r4
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	4413      	add	r3, r2
 80019d0:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80019d4:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[6].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[2]);
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	3301      	adds	r3, #1
 80019de:	4a55      	ldr	r2, [pc, #340]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 80019e0:	21e8      	movs	r1, #232	; 0xe8
 80019e2:	fb01 f303 	mul.w	r3, r1, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	3322      	adds	r3, #34	; 0x22
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	88fc      	ldrh	r4, [r7, #6]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 f8ba 	bl	8001b68 <FEB_LTC6811_Convert_Voltage>
 80019f4:	eef0 7a40 	vmov.f32	s15, s0
 80019f8:	4a4e      	ldr	r2, [pc, #312]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 80019fa:	4623      	mov	r3, r4
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	4423      	add	r3, r4
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	4413      	add	r3, r2
 8001a04:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001a08:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[5].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[3]);
 8001a0c:	88fb      	ldrh	r3, [r7, #6]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	3301      	adds	r3, #1
 8001a12:	4a48      	ldr	r2, [pc, #288]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 8001a14:	21e8      	movs	r1, #232	; 0xe8
 8001a16:	fb01 f303 	mul.w	r3, r1, r3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3324      	adds	r3, #36	; 0x24
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	88fc      	ldrh	r4, [r7, #6]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 f8a0 	bl	8001b68 <FEB_LTC6811_Convert_Voltage>
 8001a28:	eef0 7a40 	vmov.f32	s15, s0
 8001a2c:	4a41      	ldr	r2, [pc, #260]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 8001a2e:	4623      	mov	r3, r4
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	4423      	add	r3, r4
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	4413      	add	r3, r2
 8001a38:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001a3c:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[4].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[4]);
 8001a40:	88fb      	ldrh	r3, [r7, #6]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	3301      	adds	r3, #1
 8001a46:	4a3b      	ldr	r2, [pc, #236]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 8001a48:	21e8      	movs	r1, #232	; 0xe8
 8001a4a:	fb01 f303 	mul.w	r3, r1, r3
 8001a4e:	4413      	add	r3, r2
 8001a50:	3326      	adds	r3, #38	; 0x26
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	88fc      	ldrh	r4, [r7, #6]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 f886 	bl	8001b68 <FEB_LTC6811_Convert_Voltage>
 8001a5c:	eef0 7a40 	vmov.f32	s15, s0
 8001a60:	4a34      	ldr	r2, [pc, #208]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 8001a62:	4623      	mov	r3, r4
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	4423      	add	r3, r4
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001a70:	edc3 7a00 	vstr	s15, [r3]
      	accumulator.banks[bank_idx].cells[3].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[6]);
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	3301      	adds	r3, #1
 8001a7a:	4a2e      	ldr	r2, [pc, #184]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 8001a7c:	21e8      	movs	r1, #232	; 0xe8
 8001a7e:	fb01 f303 	mul.w	r3, r1, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	332a      	adds	r3, #42	; 0x2a
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	88fc      	ldrh	r4, [r7, #6]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 f86c 	bl	8001b68 <FEB_LTC6811_Convert_Voltage>
 8001a90:	eef0 7a40 	vmov.f32	s15, s0
 8001a94:	4a27      	ldr	r2, [pc, #156]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 8001a96:	4623      	mov	r3, r4
 8001a98:	011b      	lsls	r3, r3, #4
 8001a9a:	4423      	add	r3, r4
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8001aa4:	edc3 7a00 	vstr	s15, [r3]
      	accumulator.banks[bank_idx].cells[2].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[7]);
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	3301      	adds	r3, #1
 8001aae:	4a21      	ldr	r2, [pc, #132]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 8001ab0:	21e8      	movs	r1, #232	; 0xe8
 8001ab2:	fb01 f303 	mul.w	r3, r1, r3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	332c      	adds	r3, #44	; 0x2c
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	88fc      	ldrh	r4, [r7, #6]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 f852 	bl	8001b68 <FEB_LTC6811_Convert_Voltage>
 8001ac4:	eef0 7a40 	vmov.f32	s15, s0
 8001ac8:	4a1a      	ldr	r2, [pc, #104]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 8001aca:	4623      	mov	r3, r4
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	4423      	add	r3, r4
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001ad8:	edc3 7a00 	vstr	s15, [r3]
      	accumulator.banks[bank_idx].cells[1].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[8]);
 8001adc:	88fb      	ldrh	r3, [r7, #6]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	4a14      	ldr	r2, [pc, #80]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 8001ae4:	21e8      	movs	r1, #232	; 0xe8
 8001ae6:	fb01 f303 	mul.w	r3, r1, r3
 8001aea:	4413      	add	r3, r2
 8001aec:	332e      	adds	r3, #46	; 0x2e
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	88fc      	ldrh	r4, [r7, #6]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 f838 	bl	8001b68 <FEB_LTC6811_Convert_Voltage>
 8001af8:	eef0 7a40 	vmov.f32	s15, s0
 8001afc:	4a0d      	ldr	r2, [pc, #52]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 8001afe:	4623      	mov	r3, r4
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	4423      	add	r3, r4
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	4413      	add	r3, r2
 8001b08:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8001b0c:	edc3 7a00 	vstr	s15, [r3]
      	accumulator.banks[bank_idx].cells[0].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[9]);
 8001b10:	88fb      	ldrh	r3, [r7, #6]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	3301      	adds	r3, #1
 8001b16:	4a07      	ldr	r2, [pc, #28]	; (8001b34 <FEB_LTC6811_Store_Voltage+0x360>)
 8001b18:	21e8      	movs	r1, #232	; 0xe8
 8001b1a:	fb01 f303 	mul.w	r3, r1, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	3330      	adds	r3, #48	; 0x30
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	88fc      	ldrh	r4, [r7, #6]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f81e 	bl	8001b68 <FEB_LTC6811_Convert_Voltage>
 8001b2c:	eef0 7a40 	vmov.f32	s15, s0
 8001b30:	e002      	b.n	8001b38 <FEB_LTC6811_Store_Voltage+0x364>
 8001b32:	bf00      	nop
 8001b34:	20002640 	.word	0x20002640
 8001b38:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <FEB_LTC6811_Store_Voltage+0x390>)
 8001b3a:	4623      	mov	r3, r4
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	4423      	add	r3, r4
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	4413      	add	r3, r2
 8001b44:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8001b48:	edc3 7a00 	vstr	s15, [r3]
    for (uint16_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	80fb      	strh	r3, [r7, #6]
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f43f ae43 	beq.w	80017e0 <FEB_LTC6811_Store_Voltage+0xc>
    }
}
 8001b5a:	bf00      	nop
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd90      	pop	{r4, r7, pc}
 8001b64:	20002640 	.word	0x20002640

08001b68 <FEB_LTC6811_Convert_Voltage>:

/*
 * @param value := Voltage (100uV) from LTC6811
 */
float FEB_LTC6811_Convert_Voltage(uint16_t value) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	80fb      	strh	r3, [r7, #6]
	// Check for error: value = 2^16 - 1
	if (value == 65535) {
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d101      	bne.n	8001b80 <FEB_LTC6811_Convert_Voltage+0x18>
		return -42;
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <FEB_LTC6811_Convert_Voltage+0x50>)
 8001b7e:	e00f      	b.n	8001ba0 <FEB_LTC6811_Convert_Voltage+0x38>
	}
	return value * 0.0001;
 8001b80:	88fb      	ldrh	r3, [r7, #6]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fcee 	bl	8000564 <__aeabi_i2d>
 8001b88:	a309      	add	r3, pc, #36	; (adr r3, 8001bb0 <FEB_LTC6811_Convert_Voltage+0x48>)
 8001b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8e:	f7fe fd53 	bl	8000638 <__aeabi_dmul>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4610      	mov	r0, r2
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f7ff f845 	bl	8000c28 <__aeabi_d2f>
 8001b9e:	4603      	mov	r3, r0
}
 8001ba0:	ee07 3a90 	vmov	s15, r3
 8001ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	eb1c432d 	.word	0xeb1c432d
 8001bb4:	3f1a36e2 	.word	0x3f1a36e2
 8001bb8:	c2280000 	.word	0xc2280000

08001bbc <FEB_LTC6811_Get_IC>:

// ******************** Voltage Cell Balance ********************

uint8_t FEB_LTC6811_Get_IC(uint8_t bank, uint8_t cell) {
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	460a      	mov	r2, r1
 8001bc6:	71fb      	strb	r3, [r7, #7]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	71bb      	strb	r3, [r7, #6]
	if (cell < 9) {
 8001bcc:	79bb      	ldrb	r3, [r7, #6]
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d805      	bhi.n	8001bde <FEB_LTC6811_Get_IC+0x22>
		return bank * 2 + 1;
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	3301      	adds	r3, #1
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	e002      	b.n	8001be4 <FEB_LTC6811_Get_IC+0x28>
	} else {
		return bank * 2;
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	b2db      	uxtb	r3, r3
	}
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <FEB_LTC6811_Cell_Idx>:

uint8_t FEB_LTC6811_Cell_Idx(uint8_t cell) {
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
	return FEB_LTC6811_Cell_Idx_Map[cell];
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	4a03      	ldr	r2, [pc, #12]	; (8001c0c <FEB_LTC6811_Cell_Idx+0x1c>)
 8001bfe:	5cd3      	ldrb	r3, [r2, r3]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	2000000c 	.word	0x2000000c

08001c10 <FEB_LTC6811_Balance_Cells>:
	// Set target voltage
	FEB_LTC6811_Target_Voltage = lowest_voltage;
	FEB_LTC6811_Target_Voltage_Set = 1;
}

void FEB_LTC6811_Balance_Cells(void) {
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
	if (FEB_LTC6811_Balance_Cells_State == 0 || FEB_LTC6811_Cells_Balanced == 1) {
		return;
 8001c14:	bf00      	nop
	if (cells_balanced == 1) {
		FEB_LTC6811_Cells_Balanced = 1;
		FEB_LTC6811_Clear_Balance_Cells();
	}

}
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
	...

08001c20 <FEB_LTC6811_Configure_DCCBITS_A>:

void FEB_LTC6811_Clear_Balance_Cell(uint8_t bank, uint8_t cell) {
	FEB_LTC6811_Cell_Discharge[FEB_LTC6811_Get_IC(bank, cell)][FEB_LTC6811_Cell_Idx(cell)] = 0;
}

void FEB_LTC6811_Configure_DCCBITS_A(uint8_t ic) {
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < CELLS_PER_DAUGHTER_BOARD; i++) {
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	73fb      	strb	r3, [r7, #15]
 8001c2e:	e014      	b.n	8001c5a <FEB_LTC6811_Configure_DCCBITS_A+0x3a>
		DCCBITS_A[i] = FEB_LTC6811_Cell_Discharge[ic][i];
 8001c30:	79fa      	ldrb	r2, [r7, #7]
 8001c32:	7bf9      	ldrb	r1, [r7, #15]
 8001c34:	480e      	ldr	r0, [pc, #56]	; (8001c70 <FEB_LTC6811_Configure_DCCBITS_A+0x50>)
 8001c36:	4613      	mov	r3, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	4413      	add	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4403      	add	r3, r0
 8001c40:	440b      	add	r3, r1
 8001c42:	781a      	ldrb	r2, [r3, #0]
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	2a00      	cmp	r2, #0
 8001c48:	bf14      	ite	ne
 8001c4a:	2201      	movne	r2, #1
 8001c4c:	2200      	moveq	r2, #0
 8001c4e:	b2d1      	uxtb	r1, r2
 8001c50:	4a08      	ldr	r2, [pc, #32]	; (8001c74 <FEB_LTC6811_Configure_DCCBITS_A+0x54>)
 8001c52:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < CELLS_PER_DAUGHTER_BOARD; i++) {
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
 8001c56:	3301      	adds	r3, #1
 8001c58:	73fb      	strb	r3, [r7, #15]
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	2b0b      	cmp	r3, #11
 8001c5e:	d9e7      	bls.n	8001c30 <FEB_LTC6811_Configure_DCCBITS_A+0x10>
	}
}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20002618 	.word	0x20002618
 8001c74:	20002634 	.word	0x20002634

08001c78 <FEB_LTC6811_UART_Transmit_Discharge>:

void FEB_LTC6811_UART_Transmit_Discharge(void) {
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	f2ad 5d0c 	subw	sp, sp, #1292	; 0x50c
 8001c7e:	af00      	add	r7, sp, #0
	char UART_str[1024];
	char temp_str[256];

	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001c80:	2300      	movs	r3, #0
 8001c82:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 8001c86:	e067      	b.n	8001d58 <FEB_LTC6811_UART_Transmit_Discharge+0xe0>
		// Add bank_idx, cell_idx to {@code UART_Str}
		sprintf(UART_str, "%d", (bank_idx << UART_BITS_PER_MESSAGE) + UART_DISCHARGE_ID);
 8001c88:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	1c9a      	adds	r2, r3, #2
 8001c90:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001c94:	4935      	ldr	r1, [pc, #212]	; (8001d6c <FEB_LTC6811_UART_Transmit_Discharge+0xf4>)
 8001c96:	4618      	mov	r0, r3
 8001c98:	f007 ff7a 	bl	8009b90 <siprintf>


		// Add values to {@code UART_Str}
		for (uint16_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8001ca2:	e033      	b.n	8001d0c <FEB_LTC6811_UART_Transmit_Discharge+0x94>
			uint8_t state = FEB_LTC6811_Cell_Discharge[FEB_LTC6811_Get_IC(bank_idx, cell_idx)][FEB_LTC6811_Cell_Idx(cell_idx)];
 8001ca4:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff83 	bl	8001bbc <FEB_LTC6811_Get_IC>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	461c      	mov	r4, r3
 8001cba:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff95 	bl	8001bf0 <FEB_LTC6811_Cell_Idx>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4a29      	ldr	r2, [pc, #164]	; (8001d70 <FEB_LTC6811_UART_Transmit_Discharge+0xf8>)
 8001ccc:	4623      	mov	r3, r4
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4423      	add	r3, r4
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	f887 3503 	strb.w	r3, [r7, #1283]	; 0x503
			sprintf(temp_str, " %d", state);
 8001cde:	f897 2503 	ldrb.w	r2, [r7, #1283]	; 0x503
 8001ce2:	463b      	mov	r3, r7
 8001ce4:	4923      	ldr	r1, [pc, #140]	; (8001d74 <FEB_LTC6811_UART_Transmit_Discharge+0xfc>)
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f007 ff52 	bl	8009b90 <siprintf>
			strncat(UART_str, temp_str, strlen(temp_str));
 8001cec:	463b      	mov	r3, r7
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fa8e 	bl	8000210 <strlen>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	4639      	mov	r1, r7
 8001cf8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f007 ff67 	bl	8009bd0 <strncat>
		for (uint16_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001d02:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001d06:	3301      	adds	r3, #1
 8001d08:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8001d0c:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001d10:	2b10      	cmp	r3, #16
 8001d12:	d9c7      	bls.n	8001ca4 <FEB_LTC6811_UART_Transmit_Discharge+0x2c>
		}

		// Add '\n' to {@code UART_Str}
		sprintf(temp_str, "\n");
 8001d14:	463b      	mov	r3, r7
 8001d16:	4918      	ldr	r1, [pc, #96]	; (8001d78 <FEB_LTC6811_UART_Transmit_Discharge+0x100>)
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f007 ff39 	bl	8009b90 <siprintf>
		strncat(UART_str, temp_str, strlen(temp_str));
 8001d1e:	463b      	mov	r3, r7
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fa75 	bl	8000210 <strlen>
 8001d26:	4602      	mov	r2, r0
 8001d28:	4639      	mov	r1, r7
 8001d2a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f007 ff4e 	bl	8009bd0 <strncat>

		HAL_UART_Transmit(&huart2, (uint8_t*) UART_str, strlen(UART_str), 100);
 8001d34:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fa69 	bl	8000210 <strlen>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8001d46:	2364      	movs	r3, #100	; 0x64
 8001d48:	480c      	ldr	r0, [pc, #48]	; (8001d7c <FEB_LTC6811_UART_Transmit_Discharge+0x104>)
 8001d4a:	f006 fe10 	bl	800896e <HAL_UART_Transmit>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001d4e:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001d52:	3301      	adds	r3, #1
 8001d54:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 8001d58:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d093      	beq.n	8001c88 <FEB_LTC6811_UART_Transmit_Discharge+0x10>
	}
}
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	f207 570c 	addw	r7, r7, #1292	; 0x50c
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd90      	pop	{r4, r7, pc}
 8001d6c:	0800bf6c 	.word	0x0800bf6c
 8001d70:	20002618 	.word	0x20002618
 8001d74:	0800bf70 	.word	0x0800bf70
 8001d78:	0800bf74 	.word	0x0800bf74
 8001d7c:	20002a60 	.word	0x20002a60

08001d80 <FEB_LTC6811_Validate_Voltage>:

// ******************** Voltage Interface ********************

void FEB_LTC6811_Validate_Voltage(void) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001d86:	2300      	movs	r3, #0
 8001d88:	71fb      	strb	r3, [r7, #7]
 8001d8a:	e02c      	b.n	8001de6 <FEB_LTC6811_Validate_Voltage+0x66>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	71bb      	strb	r3, [r7, #6]
 8001d90:	e023      	b.n	8001dda <FEB_LTC6811_Validate_Voltage+0x5a>
			float voltage = accumulator.banks[bank_idx].cells[cell_idx].voltage;
 8001d92:	79fa      	ldrb	r2, [r7, #7]
 8001d94:	79b9      	ldrb	r1, [r7, #6]
 8001d96:	4818      	ldr	r0, [pc, #96]	; (8001df8 <FEB_LTC6811_Validate_Voltage+0x78>)
 8001d98:	4613      	mov	r3, r2
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	4413      	add	r3, r2
 8001d9e:	440b      	add	r3, r1
 8001da0:	333a      	adds	r3, #58	; 0x3a
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4403      	add	r3, r0
 8001da6:	3304      	adds	r3, #4
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	603b      	str	r3, [r7, #0]
			if (voltage < MIN_VOLTAGE || voltage > MAX_VOLTAGE) {
 8001dac:	edd7 7a00 	vldr	s15, [r7]
 8001db0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001db4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbc:	d408      	bmi.n	8001dd0 <FEB_LTC6811_Validate_Voltage+0x50>
 8001dbe:	edd7 7a00 	vldr	s15, [r7]
 8001dc2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001dc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dce:	dd01      	ble.n	8001dd4 <FEB_LTC6811_Validate_Voltage+0x54>
				FEB_BMS_Shutdown_Initiate();
 8001dd0:	f7ff f920 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001dd4:	79bb      	ldrb	r3, [r7, #6]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	71bb      	strb	r3, [r7, #6]
 8001dda:	79bb      	ldrb	r3, [r7, #6]
 8001ddc:	2b10      	cmp	r3, #16
 8001dde:	d9d8      	bls.n	8001d92 <FEB_LTC6811_Validate_Voltage+0x12>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	3301      	adds	r3, #1
 8001de4:	71fb      	strb	r3, [r7, #7]
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0cf      	beq.n	8001d8c <FEB_LTC6811_Validate_Voltage+0xc>
			}
		}
	}
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20002640 	.word	0x20002640

08001dfc <FEB_LTC6811_UART_Transmit_Voltage>:

void FEB_LTC6811_UART_Transmit_Voltage() {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	f5ad 6da1 	sub.w	sp, sp, #1288	; 0x508
 8001e02:	af00      	add	r7, sp, #0
	char UART_str[1024];
	char temp_str[256];

	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001e04:	2300      	movs	r3, #0
 8001e06:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 8001e0a:	e05e      	b.n	8001eca <FEB_LTC6811_UART_Transmit_Voltage+0xce>
		// Add bank_idx, cell_idx to {@code UART_Str}
		sprintf(UART_str, "%d", (bank_idx << UART_BITS_PER_MESSAGE) + UART_VOLTAGE_ID);
 8001e0c:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001e10:	00da      	lsls	r2, r3, #3
 8001e12:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e16:	4932      	ldr	r1, [pc, #200]	; (8001ee0 <FEB_LTC6811_UART_Transmit_Voltage+0xe4>)
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f007 feb9 	bl	8009b90 <siprintf>


		// Add values to {@code UART_Str}
		for (uint16_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8001e24:	e02b      	b.n	8001e7e <FEB_LTC6811_UART_Transmit_Voltage+0x82>
			float voltage = accumulator.banks[bank_idx].cells[cell_idx].voltage;
 8001e26:	f897 2507 	ldrb.w	r2, [r7, #1287]	; 0x507
 8001e2a:	f8b7 1504 	ldrh.w	r1, [r7, #1284]	; 0x504
 8001e2e:	482d      	ldr	r0, [pc, #180]	; (8001ee4 <FEB_LTC6811_UART_Transmit_Voltage+0xe8>)
 8001e30:	4613      	mov	r3, r2
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	4413      	add	r3, r2
 8001e36:	440b      	add	r3, r1
 8001e38:	333a      	adds	r3, #58	; 0x3a
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4403      	add	r3, r0
 8001e3e:	3304      	adds	r3, #4
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 8001e46:	6013      	str	r3, [r2, #0]

			sprintf(temp_str, " %f", voltage);
 8001e48:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8001e4c:	6818      	ldr	r0, [r3, #0]
 8001e4e:	f7fe fb9b 	bl	8000588 <__aeabi_f2d>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4638      	mov	r0, r7
 8001e58:	4923      	ldr	r1, [pc, #140]	; (8001ee8 <FEB_LTC6811_UART_Transmit_Voltage+0xec>)
 8001e5a:	f007 fe99 	bl	8009b90 <siprintf>
			strncat(UART_str, temp_str, strlen(temp_str));
 8001e5e:	463b      	mov	r3, r7
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe f9d5 	bl	8000210 <strlen>
 8001e66:	4602      	mov	r2, r0
 8001e68:	4639      	mov	r1, r7
 8001e6a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f007 feae 	bl	8009bd0 <strncat>
		for (uint16_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001e74:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001e78:	3301      	adds	r3, #1
 8001e7a:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8001e7e:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001e82:	2b10      	cmp	r3, #16
 8001e84:	d9cf      	bls.n	8001e26 <FEB_LTC6811_UART_Transmit_Voltage+0x2a>
		}

		// Add '\n' to {@code UART_Str}
		sprintf(temp_str, "\n");
 8001e86:	463b      	mov	r3, r7
 8001e88:	4918      	ldr	r1, [pc, #96]	; (8001eec <FEB_LTC6811_UART_Transmit_Voltage+0xf0>)
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f007 fe80 	bl	8009b90 <siprintf>
		strncat(UART_str, temp_str, strlen(temp_str));
 8001e90:	463b      	mov	r3, r7
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe f9bc 	bl	8000210 <strlen>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	4639      	mov	r1, r7
 8001e9c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f007 fe95 	bl	8009bd0 <strncat>

		HAL_UART_Transmit(&huart2, (uint8_t*) UART_str, strlen(UART_str), 100);
 8001ea6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe f9b0 	bl	8000210 <strlen>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8001eb8:	2364      	movs	r3, #100	; 0x64
 8001eba:	480d      	ldr	r0, [pc, #52]	; (8001ef0 <FEB_LTC6811_UART_Transmit_Voltage+0xf4>)
 8001ebc:	f006 fd57 	bl	800896e <HAL_UART_Transmit>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001ec0:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 8001eca:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d09c      	beq.n	8001e0c <FEB_LTC6811_UART_Transmit_Voltage+0x10>
	}
}
 8001ed2:	bf00      	nop
 8001ed4:	bf00      	nop
 8001ed6:	f507 67a1 	add.w	r7, r7, #1288	; 0x508
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	0800bf6c 	.word	0x0800bf6c
 8001ee4:	20002640 	.word	0x20002640
 8001ee8:	0800bf78 	.word	0x0800bf78
 8001eec:	0800bf74 	.word	0x0800bf74
 8001ef0:	20002a60 	.word	0x20002a60

08001ef4 <FEB_LTC6811_Total_Bank_Voltage>:

float FEB_LTC6811_Total_Bank_Voltage(void) {
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
	float total_voltage = 0;
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	607b      	str	r3, [r7, #4]

	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001f00:	2300      	movs	r3, #0
 8001f02:	70fb      	strb	r3, [r7, #3]
 8001f04:	e01e      	b.n	8001f44 <FEB_LTC6811_Total_Bank_Voltage+0x50>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001f06:	2300      	movs	r3, #0
 8001f08:	70bb      	strb	r3, [r7, #2]
 8001f0a:	e015      	b.n	8001f38 <FEB_LTC6811_Total_Bank_Voltage+0x44>
			total_voltage += accumulator.banks[bank_idx].cells[cell_idx].voltage;
 8001f0c:	78fa      	ldrb	r2, [r7, #3]
 8001f0e:	78b9      	ldrb	r1, [r7, #2]
 8001f10:	4813      	ldr	r0, [pc, #76]	; (8001f60 <FEB_LTC6811_Total_Bank_Voltage+0x6c>)
 8001f12:	4613      	mov	r3, r2
 8001f14:	011b      	lsls	r3, r3, #4
 8001f16:	4413      	add	r3, r2
 8001f18:	440b      	add	r3, r1
 8001f1a:	333a      	adds	r3, #58	; 0x3a
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4403      	add	r3, r0
 8001f20:	3304      	adds	r3, #4
 8001f22:	edd3 7a00 	vldr	s15, [r3]
 8001f26:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f2e:	edc7 7a01 	vstr	s15, [r7, #4]
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001f32:	78bb      	ldrb	r3, [r7, #2]
 8001f34:	3301      	adds	r3, #1
 8001f36:	70bb      	strb	r3, [r7, #2]
 8001f38:	78bb      	ldrb	r3, [r7, #2]
 8001f3a:	2b10      	cmp	r3, #16
 8001f3c:	d9e6      	bls.n	8001f0c <FEB_LTC6811_Total_Bank_Voltage+0x18>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001f3e:	78fb      	ldrb	r3, [r7, #3]
 8001f40:	3301      	adds	r3, #1
 8001f42:	70fb      	strb	r3, [r7, #3]
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0dd      	beq.n	8001f06 <FEB_LTC6811_Total_Bank_Voltage+0x12>
		}
	}

	return total_voltage;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	ee07 3a90 	vmov	s15, r3
}
 8001f50:	eeb0 0a67 	vmov.f32	s0, s15
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20002640 	.word	0x20002640

08001f64 <FEB_LTC6811_Clear_Voltage>:
		}
	}
	return 0;
}

void FEB_LTC6811_Clear_Voltage(void) {
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	71fb      	strb	r3, [r7, #7]
 8001f6e:	e019      	b.n	8001fa4 <FEB_LTC6811_Clear_Voltage+0x40>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001f70:	2300      	movs	r3, #0
 8001f72:	71bb      	strb	r3, [r7, #6]
 8001f74:	e010      	b.n	8001f98 <FEB_LTC6811_Clear_Voltage+0x34>
			accumulator.banks[bank_idx].cells[cell_idx].voltage = 0;
 8001f76:	79fa      	ldrb	r2, [r7, #7]
 8001f78:	79b9      	ldrb	r1, [r7, #6]
 8001f7a:	480f      	ldr	r0, [pc, #60]	; (8001fb8 <FEB_LTC6811_Clear_Voltage+0x54>)
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	011b      	lsls	r3, r3, #4
 8001f80:	4413      	add	r3, r2
 8001f82:	440b      	add	r3, r1
 8001f84:	333a      	adds	r3, #58	; 0x3a
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4403      	add	r3, r0
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001f92:	79bb      	ldrb	r3, [r7, #6]
 8001f94:	3301      	adds	r3, #1
 8001f96:	71bb      	strb	r3, [r7, #6]
 8001f98:	79bb      	ldrb	r3, [r7, #6]
 8001f9a:	2b10      	cmp	r3, #16
 8001f9c:	d9eb      	bls.n	8001f76 <FEB_LTC6811_Clear_Voltage+0x12>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	71fb      	strb	r3, [r7, #7]
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0e2      	beq.n	8001f70 <FEB_LTC6811_Clear_Voltage+0xc>
		}
	}
}
 8001faa:	bf00      	nop
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	20002640 	.word	0x20002640

08001fbc <FEB_LTC6811_Poll_Temperature>:

// ******************** Read Temperature ********************

void FEB_LTC6811_Poll_Temperature(void) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
	for (uint8_t channel = 0; channel <= 4; channel++) {
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	71fb      	strb	r3, [r7, #7]
 8001fc6:	e00e      	b.n	8001fe6 <FEB_LTC6811_Poll_Temperature+0x2a>
		FEB_LTC6811_Update_GPIO(channel);
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 f814 	bl	8001ff8 <FEB_LTC6811_Update_GPIO>
		FEB_LTC6811_Start_GPIO_ADC_Measurement();
 8001fd0:	f000 f880 	bl	80020d4 <FEB_LTC6811_Start_GPIO_ADC_Measurement>
		FEB_LTC6811_Read_Aux_Voltages();
 8001fd4:	f000 f88c 	bl	80020f0 <FEB_LTC6811_Read_Aux_Voltages>
		FEB_LTC6811_Store_Temperature(channel);
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 f896 	bl	800210c <FEB_LTC6811_Store_Temperature>
	for (uint8_t channel = 0; channel <= 4; channel++) {
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	71fb      	strb	r3, [r7, #7]
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d9ed      	bls.n	8001fc8 <FEB_LTC6811_Poll_Temperature+0xc>
	}
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <FEB_LTC6811_Update_GPIO>:

void FEB_LTC6811_Update_GPIO(uint8_t channel) {
 8001ff8:	b590      	push	{r4, r7, lr}
 8001ffa:	b08b      	sub	sp, #44	; 0x2c
 8001ffc:	af06      	add	r7, sp, #24
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
	GPIOBITS_A[0] = 0b1;					// ADC
 8002002:	4b2c      	ldr	r3, [pc, #176]	; (80020b4 <FEB_LTC6811_Update_GPIO+0xbc>)
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
	GPIOBITS_A[1] = 0b1;					// ADC
 8002008:	4b2a      	ldr	r3, [pc, #168]	; (80020b4 <FEB_LTC6811_Update_GPIO+0xbc>)
 800200a:	2201      	movs	r2, #1
 800200c:	705a      	strb	r2, [r3, #1]
	GPIOBITS_A[2] = (channel >> 0) & 0b1;	// MUX Select
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	bf14      	ite	ne
 8002018:	2301      	movne	r3, #1
 800201a:	2300      	moveq	r3, #0
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4b25      	ldr	r3, [pc, #148]	; (80020b4 <FEB_LTC6811_Update_GPIO+0xbc>)
 8002020:	709a      	strb	r2, [r3, #2]
	GPIOBITS_A[3] = (channel >> 1) & 0b1;	// MUX Select
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	085b      	lsrs	r3, r3, #1
 8002026:	b2db      	uxtb	r3, r3
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b00      	cmp	r3, #0
 800202e:	bf14      	ite	ne
 8002030:	2301      	movne	r3, #1
 8002032:	2300      	moveq	r3, #0
 8002034:	b2da      	uxtb	r2, r3
 8002036:	4b1f      	ldr	r3, [pc, #124]	; (80020b4 <FEB_LTC6811_Update_GPIO+0xbc>)
 8002038:	70da      	strb	r2, [r3, #3]
	GPIOBITS_A[4] = (channel >> 2) & 0b1;	// MUX Select
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	089b      	lsrs	r3, r3, #2
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	bf14      	ite	ne
 8002048:	2301      	movne	r3, #1
 800204a:	2300      	moveq	r3, #0
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <FEB_LTC6811_Update_GPIO+0xbc>)
 8002050:	711a      	strb	r2, [r3, #4]

    wakeup_sleep(NUM_IC);
 8002052:	2002      	movs	r0, #2
 8002054:	f000 fced 	bl	8002a32 <wakeup_sleep>
    for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 8002058:	2300      	movs	r3, #0
 800205a:	73fb      	strb	r3, [r7, #15]
 800205c:	e01c      	b.n	8002098 <FEB_LTC6811_Update_GPIO+0xa0>
    	FEB_LTC6811_Configure_DCCBITS_A(current_ic);
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fddd 	bl	8001c20 <FEB_LTC6811_Configure_DCCBITS_A>
		LTC6811_set_cfgr(current_ic, accumulator.IC_config, REFON, ADCOPT, GPIOBITS_A, DCCBITS_A, DCTOBITS, UV, OV);
 8002066:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <FEB_LTC6811_Update_GPIO+0xc0>)
 8002068:	7819      	ldrb	r1, [r3, #0]
 800206a:	4b14      	ldr	r3, [pc, #80]	; (80020bc <FEB_LTC6811_Update_GPIO+0xc4>)
 800206c:	781c      	ldrb	r4, [r3, #0]
 800206e:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <FEB_LTC6811_Update_GPIO+0xc8>)
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	4a14      	ldr	r2, [pc, #80]	; (80020c4 <FEB_LTC6811_Update_GPIO+0xcc>)
 8002074:	8812      	ldrh	r2, [r2, #0]
 8002076:	7bf8      	ldrb	r0, [r7, #15]
 8002078:	9204      	str	r2, [sp, #16]
 800207a:	9303      	str	r3, [sp, #12]
 800207c:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <FEB_LTC6811_Update_GPIO+0xd0>)
 800207e:	9302      	str	r3, [sp, #8]
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <FEB_LTC6811_Update_GPIO+0xd4>)
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <FEB_LTC6811_Update_GPIO+0xbc>)
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	4623      	mov	r3, r4
 800208a:	460a      	mov	r2, r1
 800208c:	4910      	ldr	r1, [pc, #64]	; (80020d0 <FEB_LTC6811_Update_GPIO+0xd8>)
 800208e:	f000 fc92 	bl	80029b6 <LTC6811_set_cfgr>
    for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	3301      	adds	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d9df      	bls.n	800205e <FEB_LTC6811_Update_GPIO+0x66>
    }
    wakeup_idle(NUM_IC);
 800209e:	2002      	movs	r0, #2
 80020a0:	f000 fcaa 	bl	80029f8 <wakeup_idle>
    LTC6811_wrcfg(NUM_IC, accumulator.IC_config);
 80020a4:	490a      	ldr	r1, [pc, #40]	; (80020d0 <FEB_LTC6811_Update_GPIO+0xd8>)
 80020a6:	2002      	movs	r0, #2
 80020a8:	f000 fbff 	bl	80028aa <LTC6811_wrcfg>
}
 80020ac:	bf00      	nop
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd90      	pop	{r4, r7, pc}
 80020b4:	20000020 	.word	0x20000020
 80020b8:	2000001d 	.word	0x2000001d
 80020bc:	20002630 	.word	0x20002630
 80020c0:	20000026 	.word	0x20000026
 80020c4:	20000028 	.word	0x20000028
 80020c8:	2000002c 	.word	0x2000002c
 80020cc:	20002634 	.word	0x20002634
 80020d0:	20002640 	.word	0x20002640

080020d4 <FEB_LTC6811_Start_GPIO_ADC_Measurement>:

void FEB_LTC6811_Start_GPIO_ADC_Measurement(void) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 80020d8:	2002      	movs	r0, #2
 80020da:	f000 fcaa 	bl	8002a32 <wakeup_sleep>
	LTC6811_adax(ADC_CONVERSION_MODE, AUX_CH_TO_CONVERT);
 80020de:	2100      	movs	r1, #0
 80020e0:	2002      	movs	r0, #2
 80020e2:	f000 fc04 	bl	80028ee <LTC6811_adax>
	LTC6811_pollAdc();
 80020e6:	f000 fc41 	bl	800296c <LTC6811_pollAdc>
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <FEB_LTC6811_Read_Aux_Voltages>:

void FEB_LTC6811_Read_Aux_Voltages(void) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 80020f4:	2002      	movs	r0, #2
 80020f6:	f000 fc9c 	bl	8002a32 <wakeup_sleep>
	LTC6811_rdaux(SEL_ALL_REG, NUM_IC, accumulator.IC_config);
 80020fa:	4a03      	ldr	r2, [pc, #12]	; (8002108 <FEB_LTC6811_Read_Aux_Voltages+0x18>)
 80020fc:	2102      	movs	r1, #2
 80020fe:	2000      	movs	r0, #0
 8002100:	f000 fc1e 	bl	8002940 <LTC6811_rdaux>
}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20002640 	.word	0x20002640

0800210c <FEB_LTC6811_Store_Temperature>:

void FEB_LTC6811_Store_Temperature(uint8_t channel) {
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
    for (uint16_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8002116:	2300      	movs	r3, #0
 8002118:	81fb      	strh	r3, [r7, #14]
 800211a:	e1cd      	b.n	80024b8 <FEB_LTC6811_Store_Temperature+0x3ac>
    	switch (channel) {
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	2b04      	cmp	r3, #4
 8002120:	f200 81c7 	bhi.w	80024b2 <FEB_LTC6811_Store_Temperature+0x3a6>
 8002124:	a201      	add	r2, pc, #4	; (adr r2, 800212c <FEB_LTC6811_Store_Temperature+0x20>)
 8002126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800212a:	bf00      	nop
 800212c:	08002141 	.word	0x08002141
 8002130:	0800220f 	.word	0x0800220f
 8002134:	080022dd 	.word	0x080022dd
 8002138:	080023ab 	.word	0x080023ab
 800213c:	0800247d 	.word	0x0800247d
    		case 0:
    			accumulator.banks[bank_idx].cells[12].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 8002140:	89fb      	ldrh	r3, [r7, #14]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	4acc      	ldr	r2, [pc, #816]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002146:	21e8      	movs	r1, #232	; 0xe8
 8002148:	fb01 f303 	mul.w	r3, r1, r3
 800214c:	4413      	add	r3, r2
 800214e:	3348      	adds	r3, #72	; 0x48
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	89fc      	ldrh	r4, [r7, #14]
 8002154:	4618      	mov	r0, r3
 8002156:	f000 f9bb 	bl	80024d0 <FEB_LTC6811_Convert_Temperature>
 800215a:	eef0 7a40 	vmov.f32	s15, s0
 800215e:	4ac6      	ldr	r2, [pc, #792]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002160:	4623      	mov	r3, r4
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	4423      	add	r3, r4
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4413      	add	r3, r2
 800216a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800216e:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[16].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 8002172:	89fb      	ldrh	r3, [r7, #14]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4ac0      	ldr	r2, [pc, #768]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002178:	21e8      	movs	r1, #232	; 0xe8
 800217a:	fb01 f303 	mul.w	r3, r1, r3
 800217e:	4413      	add	r3, r2
 8002180:	334a      	adds	r3, #74	; 0x4a
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	89fc      	ldrh	r4, [r7, #14]
 8002186:	4618      	mov	r0, r3
 8002188:	f000 f9a2 	bl	80024d0 <FEB_LTC6811_Convert_Temperature>
 800218c:	eef0 7a40 	vmov.f32	s15, s0
 8002190:	4ab9      	ldr	r2, [pc, #740]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002192:	4623      	mov	r3, r4
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	4423      	add	r3, r4
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4413      	add	r3, r2
 800219c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80021a0:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[4].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 80021a4:	89fb      	ldrh	r3, [r7, #14]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	3301      	adds	r3, #1
 80021aa:	4ab3      	ldr	r2, [pc, #716]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 80021ac:	21e8      	movs	r1, #232	; 0xe8
 80021ae:	fb01 f303 	mul.w	r3, r1, r3
 80021b2:	4413      	add	r3, r2
 80021b4:	3348      	adds	r3, #72	; 0x48
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	89fc      	ldrh	r4, [r7, #14]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f988 	bl	80024d0 <FEB_LTC6811_Convert_Temperature>
 80021c0:	eef0 7a40 	vmov.f32	s15, s0
 80021c4:	4aac      	ldr	r2, [pc, #688]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 80021c6:	4623      	mov	r3, r4
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	4423      	add	r3, r4
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	4413      	add	r3, r2
 80021d0:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 80021d4:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[8].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 80021d8:	89fb      	ldrh	r3, [r7, #14]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	3301      	adds	r3, #1
 80021de:	4aa6      	ldr	r2, [pc, #664]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 80021e0:	21e8      	movs	r1, #232	; 0xe8
 80021e2:	fb01 f303 	mul.w	r3, r1, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	334a      	adds	r3, #74	; 0x4a
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	89fc      	ldrh	r4, [r7, #14]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 f96e 	bl	80024d0 <FEB_LTC6811_Convert_Temperature>
 80021f4:	eef0 7a40 	vmov.f32	s15, s0
 80021f8:	4a9f      	ldr	r2, [pc, #636]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 80021fa:	4623      	mov	r3, r4
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	4423      	add	r3, r4
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	4413      	add	r3, r2
 8002204:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002208:	edc3 7a00 	vstr	s15, [r3]
    			break;
 800220c:	e151      	b.n	80024b2 <FEB_LTC6811_Store_Temperature+0x3a6>
    		case 1:
    			accumulator.banks[bank_idx].cells[11].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 800220e:	89fb      	ldrh	r3, [r7, #14]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4a99      	ldr	r2, [pc, #612]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002214:	21e8      	movs	r1, #232	; 0xe8
 8002216:	fb01 f303 	mul.w	r3, r1, r3
 800221a:	4413      	add	r3, r2
 800221c:	3348      	adds	r3, #72	; 0x48
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	89fc      	ldrh	r4, [r7, #14]
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f954 	bl	80024d0 <FEB_LTC6811_Convert_Temperature>
 8002228:	eef0 7a40 	vmov.f32	s15, s0
 800222c:	4a92      	ldr	r2, [pc, #584]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 800222e:	4623      	mov	r3, r4
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	4423      	add	r3, r4
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4413      	add	r3, r2
 8002238:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800223c:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[15].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 8002240:	89fb      	ldrh	r3, [r7, #14]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4a8c      	ldr	r2, [pc, #560]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002246:	21e8      	movs	r1, #232	; 0xe8
 8002248:	fb01 f303 	mul.w	r3, r1, r3
 800224c:	4413      	add	r3, r2
 800224e:	334a      	adds	r3, #74	; 0x4a
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	89fc      	ldrh	r4, [r7, #14]
 8002254:	4618      	mov	r0, r3
 8002256:	f000 f93b 	bl	80024d0 <FEB_LTC6811_Convert_Temperature>
 800225a:	eef0 7a40 	vmov.f32	s15, s0
 800225e:	4a86      	ldr	r2, [pc, #536]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002260:	4623      	mov	r3, r4
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	4423      	add	r3, r4
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4413      	add	r3, r2
 800226a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800226e:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[3].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 8002272:	89fb      	ldrh	r3, [r7, #14]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	3301      	adds	r3, #1
 8002278:	4a7f      	ldr	r2, [pc, #508]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 800227a:	21e8      	movs	r1, #232	; 0xe8
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	4413      	add	r3, r2
 8002282:	3348      	adds	r3, #72	; 0x48
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	89fc      	ldrh	r4, [r7, #14]
 8002288:	4618      	mov	r0, r3
 800228a:	f000 f921 	bl	80024d0 <FEB_LTC6811_Convert_Temperature>
 800228e:	eef0 7a40 	vmov.f32	s15, s0
 8002292:	4a79      	ldr	r2, [pc, #484]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002294:	4623      	mov	r3, r4
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	4423      	add	r3, r4
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4413      	add	r3, r2
 800229e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80022a2:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[7].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 80022a6:	89fb      	ldrh	r3, [r7, #14]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	3301      	adds	r3, #1
 80022ac:	4a72      	ldr	r2, [pc, #456]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 80022ae:	21e8      	movs	r1, #232	; 0xe8
 80022b0:	fb01 f303 	mul.w	r3, r1, r3
 80022b4:	4413      	add	r3, r2
 80022b6:	334a      	adds	r3, #74	; 0x4a
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	89fc      	ldrh	r4, [r7, #14]
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 f907 	bl	80024d0 <FEB_LTC6811_Convert_Temperature>
 80022c2:	eef0 7a40 	vmov.f32	s15, s0
 80022c6:	4a6c      	ldr	r2, [pc, #432]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 80022c8:	4623      	mov	r3, r4
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	4423      	add	r3, r4
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022d6:	edc3 7a00 	vstr	s15, [r3]
    			break;
 80022da:	e0ea      	b.n	80024b2 <FEB_LTC6811_Store_Temperature+0x3a6>
    		case 2:
    			accumulator.banks[bank_idx].cells[10].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 80022dc:	89fb      	ldrh	r3, [r7, #14]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	4a65      	ldr	r2, [pc, #404]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 80022e2:	21e8      	movs	r1, #232	; 0xe8
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	3348      	adds	r3, #72	; 0x48
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	89fc      	ldrh	r4, [r7, #14]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 f8ed 	bl	80024d0 <FEB_LTC6811_Convert_Temperature>
 80022f6:	eef0 7a40 	vmov.f32	s15, s0
 80022fa:	4a5f      	ldr	r2, [pc, #380]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 80022fc:	4623      	mov	r3, r4
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	4423      	add	r3, r4
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4413      	add	r3, r2
 8002306:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800230a:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[14].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 800230e:	89fb      	ldrh	r3, [r7, #14]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4a59      	ldr	r2, [pc, #356]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002314:	21e8      	movs	r1, #232	; 0xe8
 8002316:	fb01 f303 	mul.w	r3, r1, r3
 800231a:	4413      	add	r3, r2
 800231c:	334a      	adds	r3, #74	; 0x4a
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	89fc      	ldrh	r4, [r7, #14]
 8002322:	4618      	mov	r0, r3
 8002324:	f000 f8d4 	bl	80024d0 <FEB_LTC6811_Convert_Temperature>
 8002328:	eef0 7a40 	vmov.f32	s15, s0
 800232c:	4a52      	ldr	r2, [pc, #328]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 800232e:	4623      	mov	r3, r4
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	4423      	add	r3, r4
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	4413      	add	r3, r2
 8002338:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800233c:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[2].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 8002340:	89fb      	ldrh	r3, [r7, #14]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	3301      	adds	r3, #1
 8002346:	4a4c      	ldr	r2, [pc, #304]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002348:	21e8      	movs	r1, #232	; 0xe8
 800234a:	fb01 f303 	mul.w	r3, r1, r3
 800234e:	4413      	add	r3, r2
 8002350:	3348      	adds	r3, #72	; 0x48
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	89fc      	ldrh	r4, [r7, #14]
 8002356:	4618      	mov	r0, r3
 8002358:	f000 f8ba 	bl	80024d0 <FEB_LTC6811_Convert_Temperature>
 800235c:	eef0 7a40 	vmov.f32	s15, s0
 8002360:	4a45      	ldr	r2, [pc, #276]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002362:	4623      	mov	r3, r4
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	4423      	add	r3, r4
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8002370:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[6].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 8002374:	89fb      	ldrh	r3, [r7, #14]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	3301      	adds	r3, #1
 800237a:	4a3f      	ldr	r2, [pc, #252]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 800237c:	21e8      	movs	r1, #232	; 0xe8
 800237e:	fb01 f303 	mul.w	r3, r1, r3
 8002382:	4413      	add	r3, r2
 8002384:	334a      	adds	r3, #74	; 0x4a
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	89fc      	ldrh	r4, [r7, #14]
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f8a0 	bl	80024d0 <FEB_LTC6811_Convert_Temperature>
 8002390:	eef0 7a40 	vmov.f32	s15, s0
 8002394:	4a38      	ldr	r2, [pc, #224]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002396:	4623      	mov	r3, r4
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	4423      	add	r3, r4
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	4413      	add	r3, r2
 80023a0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80023a4:	edc3 7a00 	vstr	s15, [r3]
    			break;
 80023a8:	e083      	b.n	80024b2 <FEB_LTC6811_Store_Temperature+0x3a6>
    		case 3:
    			accumulator.banks[bank_idx].cells[9].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 80023aa:	89fb      	ldrh	r3, [r7, #14]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4a32      	ldr	r2, [pc, #200]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 80023b0:	21e8      	movs	r1, #232	; 0xe8
 80023b2:	fb01 f303 	mul.w	r3, r1, r3
 80023b6:	4413      	add	r3, r2
 80023b8:	3348      	adds	r3, #72	; 0x48
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	89fc      	ldrh	r4, [r7, #14]
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 f886 	bl	80024d0 <FEB_LTC6811_Convert_Temperature>
 80023c4:	eef0 7a40 	vmov.f32	s15, s0
 80023c8:	4a2b      	ldr	r2, [pc, #172]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 80023ca:	4623      	mov	r3, r4
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	4423      	add	r3, r4
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80023d8:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[13].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 80023dc:	89fb      	ldrh	r3, [r7, #14]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	4a25      	ldr	r2, [pc, #148]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 80023e2:	21e8      	movs	r1, #232	; 0xe8
 80023e4:	fb01 f303 	mul.w	r3, r1, r3
 80023e8:	4413      	add	r3, r2
 80023ea:	334a      	adds	r3, #74	; 0x4a
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	89fc      	ldrh	r4, [r7, #14]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 f86d 	bl	80024d0 <FEB_LTC6811_Convert_Temperature>
 80023f6:	eef0 7a40 	vmov.f32	s15, s0
 80023fa:	4a1f      	ldr	r2, [pc, #124]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 80023fc:	4623      	mov	r3, r4
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	4423      	add	r3, r4
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4413      	add	r3, r2
 8002406:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800240a:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[1].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 800240e:	89fb      	ldrh	r3, [r7, #14]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	3301      	adds	r3, #1
 8002414:	4a18      	ldr	r2, [pc, #96]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002416:	21e8      	movs	r1, #232	; 0xe8
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	4413      	add	r3, r2
 800241e:	3348      	adds	r3, #72	; 0x48
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	89fc      	ldrh	r4, [r7, #14]
 8002424:	4618      	mov	r0, r3
 8002426:	f000 f853 	bl	80024d0 <FEB_LTC6811_Convert_Temperature>
 800242a:	eef0 7a40 	vmov.f32	s15, s0
 800242e:	4a12      	ldr	r2, [pc, #72]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002430:	4623      	mov	r3, r4
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	4423      	add	r3, r4
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4413      	add	r3, r2
 800243a:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800243e:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[5].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 8002442:	89fb      	ldrh	r3, [r7, #14]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	3301      	adds	r3, #1
 8002448:	4a0b      	ldr	r2, [pc, #44]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 800244a:	21e8      	movs	r1, #232	; 0xe8
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	4413      	add	r3, r2
 8002452:	334a      	adds	r3, #74	; 0x4a
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	89fc      	ldrh	r4, [r7, #14]
 8002458:	4618      	mov	r0, r3
 800245a:	f000 f839 	bl	80024d0 <FEB_LTC6811_Convert_Temperature>
 800245e:	eef0 7a40 	vmov.f32	s15, s0
 8002462:	4a05      	ldr	r2, [pc, #20]	; (8002478 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002464:	4623      	mov	r3, r4
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	4423      	add	r3, r4
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4413      	add	r3, r2
 800246e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002472:	edc3 7a00 	vstr	s15, [r3]
    			break;
 8002476:	e01c      	b.n	80024b2 <FEB_LTC6811_Store_Temperature+0x3a6>
 8002478:	20002640 	.word	0x20002640
    		case 4:
    			accumulator.banks[bank_idx].cells[0].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 800247c:	89fb      	ldrh	r3, [r7, #14]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	3301      	adds	r3, #1
 8002482:	4a12      	ldr	r2, [pc, #72]	; (80024cc <FEB_LTC6811_Store_Temperature+0x3c0>)
 8002484:	21e8      	movs	r1, #232	; 0xe8
 8002486:	fb01 f303 	mul.w	r3, r1, r3
 800248a:	4413      	add	r3, r2
 800248c:	3348      	adds	r3, #72	; 0x48
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	89fc      	ldrh	r4, [r7, #14]
 8002492:	4618      	mov	r0, r3
 8002494:	f000 f81c 	bl	80024d0 <FEB_LTC6811_Convert_Temperature>
 8002498:	eef0 7a40 	vmov.f32	s15, s0
 800249c:	4a0b      	ldr	r2, [pc, #44]	; (80024cc <FEB_LTC6811_Store_Temperature+0x3c0>)
 800249e:	4623      	mov	r3, r4
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	4423      	add	r3, r4
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80024ac:	edc3 7a00 	vstr	s15, [r3]
    			break;
 80024b0:	bf00      	nop
    for (uint16_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 80024b2:	89fb      	ldrh	r3, [r7, #14]
 80024b4:	3301      	adds	r3, #1
 80024b6:	81fb      	strh	r3, [r7, #14]
 80024b8:	89fb      	ldrh	r3, [r7, #14]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f43f ae2e 	beq.w	800211c <FEB_LTC6811_Store_Temperature+0x10>
    	}
    }
}
 80024c0:	bf00      	nop
 80024c2:	bf00      	nop
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd90      	pop	{r4, r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20002640 	.word	0x20002640

080024d0 <FEB_LTC6811_Convert_Temperature>:

/*
 * @param value := Voltage (100uV) from LTC6811
 */
float FEB_LTC6811_Convert_Temperature(uint16_t value) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	80fb      	strh	r3, [r7, #6]
	// Check for error: value = 2^16 - 1
	if (value == 65535) {
 80024da:	88fb      	ldrh	r3, [r7, #6]
 80024dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d102      	bne.n	80024ea <FEB_LTC6811_Convert_Temperature+0x1a>
		return -42;
 80024e4:	eddf 7a10 	vldr	s15, [pc, #64]	; 8002528 <FEB_LTC6811_Convert_Temperature+0x58>
 80024e8:	e015      	b.n	8002516 <FEB_LTC6811_Convert_Temperature+0x46>
	}
	//return value * 0.0001;
	return FEB_LTC6811_Temp_LUT_Get_Temperature(value * 0.0001);
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe f839 	bl	8000564 <__aeabi_i2d>
 80024f2:	a30b      	add	r3, pc, #44	; (adr r3, 8002520 <FEB_LTC6811_Convert_Temperature+0x50>)
 80024f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f8:	f7fe f89e 	bl	8000638 <__aeabi_dmul>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4610      	mov	r0, r2
 8002502:	4619      	mov	r1, r3
 8002504:	f7fe fb90 	bl	8000c28 <__aeabi_d2f>
 8002508:	4603      	mov	r3, r0
 800250a:	ee00 3a10 	vmov	s0, r3
 800250e:	f000 f8fb 	bl	8002708 <FEB_LTC6811_Temp_LUT_Get_Temperature>
 8002512:	eef0 7a40 	vmov.f32	s15, s0
}
 8002516:	eeb0 0a67 	vmov.f32	s0, s15
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	eb1c432d 	.word	0xeb1c432d
 8002524:	3f1a36e2 	.word	0x3f1a36e2
 8002528:	c2280000 	.word	0xc2280000

0800252c <FEB_LTC6811_Validate_Temperature>:

// ******************** Temperature Interface ********************

void FEB_LTC6811_Validate_Temperature(void) {
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8002532:	2300      	movs	r3, #0
 8002534:	73fb      	strb	r3, [r7, #15]
 8002536:	e02f      	b.n	8002598 <FEB_LTC6811_Validate_Temperature+0x6c>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8002538:	2300      	movs	r3, #0
 800253a:	73bb      	strb	r3, [r7, #14]
 800253c:	e026      	b.n	800258c <FEB_LTC6811_Validate_Temperature+0x60>
			float temperature = accumulator.banks[bank_idx].cells[cell_idx].temperature;
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	7bb9      	ldrb	r1, [r7, #14]
 8002542:	4819      	ldr	r0, [pc, #100]	; (80025a8 <FEB_LTC6811_Validate_Temperature+0x7c>)
 8002544:	4613      	mov	r3, r2
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	4413      	add	r3, r2
 800254a:	440b      	add	r3, r1
 800254c:	333a      	adds	r3, #58	; 0x3a
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4403      	add	r3, r0
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	60bb      	str	r3, [r7, #8]
			float min_temperature = MIN_OPERATION_TEMPERATURE;
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <FEB_LTC6811_Validate_Temperature+0x80>)
 8002558:	607b      	str	r3, [r7, #4]
			float max_temperature = MAX_OPERATION_TEMPERATURE;
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <FEB_LTC6811_Validate_Temperature+0x84>)
 800255c:	603b      	str	r3, [r7, #0]
			if (FEB_CAN_CHARGER_START_CHARGE == 1) {
				min_temperature = MIN_CHARGING_TEMPERATURE;
				max_temperature = MAX_CHARGING_TEMPERATURE;
			}
			if (temperature < min_temperature || temperature > max_temperature) {
 800255e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002562:	edd7 7a01 	vldr	s15, [r7, #4]
 8002566:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800256a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256e:	d408      	bmi.n	8002582 <FEB_LTC6811_Validate_Temperature+0x56>
 8002570:	ed97 7a02 	vldr	s14, [r7, #8]
 8002574:	edd7 7a00 	vldr	s15, [r7]
 8002578:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800257c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002580:	dd01      	ble.n	8002586 <FEB_LTC6811_Validate_Temperature+0x5a>
				FEB_BMS_Shutdown_Initiate();
 8002582:	f7fe fd47 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8002586:	7bbb      	ldrb	r3, [r7, #14]
 8002588:	3301      	adds	r3, #1
 800258a:	73bb      	strb	r3, [r7, #14]
 800258c:	7bbb      	ldrb	r3, [r7, #14]
 800258e:	2b10      	cmp	r3, #16
 8002590:	d9d5      	bls.n	800253e <FEB_LTC6811_Validate_Temperature+0x12>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	3301      	adds	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0cc      	beq.n	8002538 <FEB_LTC6811_Validate_Temperature+0xc>
			}
		}
	}
}
 800259e:	bf00      	nop
 80025a0:	bf00      	nop
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20002640 	.word	0x20002640
 80025ac:	c1a00000 	.word	0xc1a00000
 80025b0:	42700000 	.word	0x42700000

080025b4 <FEB_LTC6811_UART_Transmit_Temperature>:

void FEB_LTC6811_UART_Transmit_Temperature() {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	f5ad 6da1 	sub.w	sp, sp, #1288	; 0x508
 80025ba:	af00      	add	r7, sp, #0
	char UART_Str[1024];
	char temp_str[256];

	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 80025bc:	2300      	movs	r3, #0
 80025be:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 80025c2:	e05e      	b.n	8002682 <FEB_LTC6811_UART_Transmit_Temperature+0xce>
		// Add bank_idx, cell_idx to {@code UART_Str}
		sprintf(UART_Str, "%d", (bank_idx << UART_BITS_PER_MESSAGE) + UART_TEMPERATURE_ID);
 80025c4:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80025d0:	4931      	ldr	r1, [pc, #196]	; (8002698 <FEB_LTC6811_UART_Transmit_Temperature+0xe4>)
 80025d2:	4618      	mov	r0, r3
 80025d4:	f007 fadc 	bl	8009b90 <siprintf>


		// Add values to {@code UART_Str}
		for (uint16_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 80025d8:	2300      	movs	r3, #0
 80025da:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 80025de:	e02a      	b.n	8002636 <FEB_LTC6811_UART_Transmit_Temperature+0x82>
			float temperature = accumulator.banks[bank_idx].cells[cell_idx].temperature;
 80025e0:	f897 2507 	ldrb.w	r2, [r7, #1287]	; 0x507
 80025e4:	f8b7 1504 	ldrh.w	r1, [r7, #1284]	; 0x504
 80025e8:	482c      	ldr	r0, [pc, #176]	; (800269c <FEB_LTC6811_UART_Transmit_Temperature+0xe8>)
 80025ea:	4613      	mov	r3, r2
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	4413      	add	r3, r2
 80025f0:	440b      	add	r3, r1
 80025f2:	333a      	adds	r3, #58	; 0x3a
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4403      	add	r3, r0
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 80025fe:	6013      	str	r3, [r2, #0]

			sprintf(temp_str, " %f", temperature);
 8002600:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8002604:	6818      	ldr	r0, [r3, #0]
 8002606:	f7fd ffbf 	bl	8000588 <__aeabi_f2d>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	4638      	mov	r0, r7
 8002610:	4923      	ldr	r1, [pc, #140]	; (80026a0 <FEB_LTC6811_UART_Transmit_Temperature+0xec>)
 8002612:	f007 fabd 	bl	8009b90 <siprintf>
			strncat(UART_Str, temp_str, strlen(temp_str));
 8002616:	463b      	mov	r3, r7
 8002618:	4618      	mov	r0, r3
 800261a:	f7fd fdf9 	bl	8000210 <strlen>
 800261e:	4602      	mov	r2, r0
 8002620:	4639      	mov	r1, r7
 8002622:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002626:	4618      	mov	r0, r3
 8002628:	f007 fad2 	bl	8009bd0 <strncat>
		for (uint16_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 800262c:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8002630:	3301      	adds	r3, #1
 8002632:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8002636:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 800263a:	2b10      	cmp	r3, #16
 800263c:	d9d0      	bls.n	80025e0 <FEB_LTC6811_UART_Transmit_Temperature+0x2c>
		}

		// Add '\n' to {@code UART_Str}
		sprintf(temp_str, "\n");
 800263e:	463b      	mov	r3, r7
 8002640:	4918      	ldr	r1, [pc, #96]	; (80026a4 <FEB_LTC6811_UART_Transmit_Temperature+0xf0>)
 8002642:	4618      	mov	r0, r3
 8002644:	f007 faa4 	bl	8009b90 <siprintf>
		strncat(UART_Str, temp_str, strlen(temp_str));
 8002648:	463b      	mov	r3, r7
 800264a:	4618      	mov	r0, r3
 800264c:	f7fd fde0 	bl	8000210 <strlen>
 8002650:	4602      	mov	r2, r0
 8002652:	4639      	mov	r1, r7
 8002654:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002658:	4618      	mov	r0, r3
 800265a:	f007 fab9 	bl	8009bd0 <strncat>
		HAL_UART_Transmit(&huart2, (uint8_t*) UART_Str, strlen(UART_Str), 100);
 800265e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002662:	4618      	mov	r0, r3
 8002664:	f7fd fdd4 	bl	8000210 <strlen>
 8002668:	4603      	mov	r3, r0
 800266a:	b29a      	uxth	r2, r3
 800266c:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8002670:	2364      	movs	r3, #100	; 0x64
 8002672:	480d      	ldr	r0, [pc, #52]	; (80026a8 <FEB_LTC6811_UART_Transmit_Temperature+0xf4>)
 8002674:	f006 f97b 	bl	800896e <HAL_UART_Transmit>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8002678:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 800267c:	3301      	adds	r3, #1
 800267e:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 8002682:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8002686:	2b00      	cmp	r3, #0
 8002688:	d09c      	beq.n	80025c4 <FEB_LTC6811_UART_Transmit_Temperature+0x10>
	}
}
 800268a:	bf00      	nop
 800268c:	bf00      	nop
 800268e:	f507 67a1 	add.w	r7, r7, #1288	; 0x508
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	0800bf6c 	.word	0x0800bf6c
 800269c:	20002640 	.word	0x20002640
 80026a0:	0800bf78 	.word	0x0800bf78
 80026a4:	0800bf74 	.word	0x0800bf74
 80026a8:	20002a60 	.word	0x20002a60

080026ac <FEB_LTC6811_Clear_Temperature>:

void FEB_LTC6811_Clear_Temperature(void) {
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 80026b2:	2300      	movs	r3, #0
 80026b4:	71fb      	strb	r3, [r7, #7]
 80026b6:	e018      	b.n	80026ea <FEB_LTC6811_Clear_Temperature+0x3e>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 80026b8:	2300      	movs	r3, #0
 80026ba:	71bb      	strb	r3, [r7, #6]
 80026bc:	e00f      	b.n	80026de <FEB_LTC6811_Clear_Temperature+0x32>
			accumulator.banks[bank_idx].cells[cell_idx].temperature = 0;
 80026be:	79fa      	ldrb	r2, [r7, #7]
 80026c0:	79b9      	ldrb	r1, [r7, #6]
 80026c2:	480f      	ldr	r0, [pc, #60]	; (8002700 <FEB_LTC6811_Clear_Temperature+0x54>)
 80026c4:	4613      	mov	r3, r2
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	4413      	add	r3, r2
 80026ca:	440b      	add	r3, r1
 80026cc:	333a      	adds	r3, #58	; 0x3a
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4403      	add	r3, r0
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 80026d8:	79bb      	ldrb	r3, [r7, #6]
 80026da:	3301      	adds	r3, #1
 80026dc:	71bb      	strb	r3, [r7, #6]
 80026de:	79bb      	ldrb	r3, [r7, #6]
 80026e0:	2b10      	cmp	r3, #16
 80026e2:	d9ec      	bls.n	80026be <FEB_LTC6811_Clear_Temperature+0x12>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	3301      	adds	r3, #1
 80026e8:	71fb      	strb	r3, [r7, #7]
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0e3      	beq.n	80026b8 <FEB_LTC6811_Clear_Temperature+0xc>
		}
	}
}
 80026f0:	bf00      	nop
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	20002640 	.word	0x20002640
 8002704:	00000000 	.word	0x00000000

08002708 <FEB_LTC6811_Temp_LUT_Get_Temperature>:

float FEB_LTC6811_TEMP_MAP[][2] = {{1.3, 120.0}, {1.301, 119.5}, {1.302, 119.0}, {1.303, 118.5}, {1.304, 118.0}, {1.305, 117.5}, {1.306, 117.0}, {1.307, 116.5}, {1.308, 116.0}, {1.309, 115.5}, {1.31, 115.0}, {1.311, 114.5}, {1.312, 114.0}, {1.313, 113.5}, {1.314, 113.0}, {1.315, 112.5}, {1.316, 112.0}, {1.317, 111.5}, {1.318, 111.0}, {1.319, 110.5}, {1.32, 110.0}, {1.321, 109.5}, {1.322, 109.0}, {1.323, 108.5}, {1.324, 108.0}, {1.325, 107.5}, {1.326, 107.0}, {1.327, 106.5}, {1.328, 106.0}, {1.329, 105.5}, {1.33, 105.0}, {1.331, 104.5}, {1.332, 104.0}, {1.333, 103.5}, {1.334, 103.0}, {1.335, 102.5}, {1.336, 102.0}, {1.337, 101.5}, {1.338, 101.0}, {1.339, 100.5}, {1.34, 100.0}, {1.341, 99.5}, {1.342, 99.0}, {1.343, 98.5}, {1.344, 98.0}, {1.345, 97.5}, {1.346, 97.0}, {1.347, 96.5}, {1.348, 96.0}, {1.349, 95.5}, {1.35, 95.0}, {1.351, 94.75}, {1.352, 94.5}, {1.353, 94.25}, {1.354, 94.0}, {1.355, 93.75}, {1.356, 93.5}, {1.357, 93.25}, {1.358, 93.0}, {1.359, 92.75}, {1.36, 92.5}, {1.361, 92.25}, {1.362, 92.0}, {1.363, 91.75}, {1.364, 91.5}, {1.365, 91.25}, {1.366, 91.0}, {1.367, 90.75}, {1.368, 90.5}, {1.369, 90.25}, {1.37, 90.0}, {1.371, 89.5}, {1.372, 89.0}, {1.373, 88.5}, {1.374, 88.0}, {1.375, 87.5}, {1.376, 87.0}, {1.377, 86.5}, {1.378, 86.0}, {1.379, 85.5}, {1.38, 85.0}, {1.381, 84.75}, {1.382, 84.5}, {1.383, 84.25}, {1.384, 84.0}, {1.385, 83.75}, {1.386, 83.5}, {1.387, 83.25}, {1.388, 83.0}, {1.389, 82.75}, {1.39, 82.5}, {1.391, 82.25}, {1.392, 82.0}, {1.393, 81.75}, {1.394, 81.5}, {1.395, 81.25}, {1.396, 81.0}, {1.397, 80.75}, {1.398, 80.5}, {1.399, 80.25}, {1.4, 80.0}, {1.401, 79.8333}, {1.402, 79.6667}, {1.403, 79.5}, {1.404, 79.3333}, {1.405, 79.1667}, {1.406, 79.0}, {1.407, 78.8333}, {1.408, 78.6667}, {1.409, 78.5}, {1.41, 78.3333}, {1.411, 78.1667}, {1.412, 78.0}, {1.413, 77.8333}, {1.414, 77.6667}, {1.415, 77.5}, {1.416, 77.3333}, {1.417, 77.1667}, {1.418, 77.0}, {1.419, 76.8333}, {1.42, 76.6667}, {1.421, 76.5}, {1.422, 76.3333}, {1.423, 76.1667}, {1.424, 76.0}, {1.425, 75.8333}, {1.426, 75.6667}, {1.427, 75.5}, {1.428, 75.3333}, {1.429, 75.1667}, {1.43, 75.0}, {1.431, 74.75}, {1.432, 74.5}, {1.433, 74.25}, {1.434, 74.0}, {1.435, 73.75}, {1.436, 73.5}, {1.437, 73.25}, {1.438, 73.0}, {1.439, 72.75}, {1.44, 72.5}, {1.441, 72.25}, {1.442, 72.0}, {1.443, 71.75}, {1.444, 71.5}, {1.445, 71.25}, {1.446, 71.0}, {1.447, 70.75}, {1.448, 70.5}, {1.449, 70.25}, {1.45, 70.0}, {1.451, 69.8333}, {1.452, 69.6667}, {1.453, 69.5}, {1.454, 69.3333}, {1.455, 69.1667}, {1.456, 69.0}, {1.457, 68.8333}, {1.458, 68.6667}, {1.459, 68.5}, {1.46, 68.3333}, {1.461, 68.1667}, {1.462, 68.0}, {1.463, 67.8333}, {1.464, 67.6667}, {1.465, 67.5}, {1.466, 67.3333}, {1.467, 67.1667}, {1.468, 67.0}, {1.469, 66.8333}, {1.47, 66.6667}, {1.471, 66.5}, {1.472, 66.3333}, {1.473, 66.1667}, {1.474, 66.0}, {1.475, 65.8333}, {1.476, 65.6667}, {1.477, 65.5}, {1.478, 65.3333}, {1.479, 65.1667}, {1.48, 65.0}, {1.481, 64.8333}, {1.482, 64.6667}, {1.483, 64.5}, {1.484, 64.3333}, {1.485, 64.1667}, {1.486, 64.0}, {1.487, 63.8333}, {1.488, 63.6667}, {1.489, 63.5}, {1.49, 63.3333}, {1.491, 63.1667}, {1.492, 63.0}, {1.493, 62.8333}, {1.494, 62.6667}, {1.495, 62.5}, {1.496, 62.3333}, {1.497, 62.1667}, {1.498, 62.0}, {1.499, 61.8333}, {1.5, 61.6667}, {1.501, 61.5}, {1.502, 61.3333}, {1.503, 61.1667}, {1.504, 61.0}, {1.505, 60.8333}, {1.506, 60.6667}, {1.507, 60.5}, {1.508, 60.3333}, {1.509, 60.1667}, {1.51, 60.0}, {1.511, 59.875}, {1.512, 59.75}, {1.513, 59.625}, {1.514, 59.5}, {1.515, 59.375}, {1.516, 59.25}, {1.517, 59.125}, {1.518, 59.0}, {1.519, 58.875}, {1.52, 58.75}, {1.521, 58.625}, {1.522, 58.5}, {1.523, 58.375}, {1.524, 58.25}, {1.525, 58.125}, {1.526, 58.0}, {1.527, 57.875}, {1.528, 57.75}, {1.529, 57.625}, {1.53, 57.5}, {1.531, 57.375}, {1.532, 57.25}, {1.533, 57.125}, {1.534, 57.0}, {1.535, 56.875}, {1.536, 56.75}, {1.537, 56.625}, {1.538, 56.5}, {1.539, 56.375}, {1.54, 56.25}, {1.541, 56.125}, {1.542, 56.0}, {1.543, 55.875}, {1.544, 55.75}, {1.545, 55.625}, {1.546, 55.5}, {1.547, 55.375}, {1.548, 55.25}, {1.549, 55.125}, {1.55, 55.0}, {1.551, 54.875}, {1.552, 54.75}, {1.553, 54.625}, {1.554, 54.5}, {1.555, 54.375}, {1.556, 54.25}, {1.557, 54.125}, {1.558, 54.0}, {1.559, 53.875}, {1.56, 53.75}, {1.561, 53.625}, {1.562, 53.5}, {1.563, 53.375}, {1.564, 53.25}, {1.565, 53.125}, {1.566, 53.0}, {1.567, 52.875}, {1.568, 52.75}, {1.569, 52.625}, {1.57, 52.5}, {1.571, 52.375}, {1.572, 52.25}, {1.573, 52.125}, {1.574, 52.0}, {1.575, 51.875}, {1.576, 51.75}, {1.577, 51.625}, {1.578, 51.5}, {1.579, 51.375}, {1.58, 51.25}, {1.581, 51.125}, {1.582, 51.0}, {1.583, 50.875}, {1.584, 50.75}, {1.585, 50.625}, {1.586, 50.5}, {1.587, 50.375}, {1.588, 50.25}, {1.589, 50.125}, {1.59, 50.0}, {1.591, 49.875}, {1.592, 49.75}, {1.593, 49.625}, {1.594, 49.5}, {1.595, 49.375}, {1.596, 49.25}, {1.597, 49.125}, {1.598, 49.0}, {1.599, 48.875}, {1.6, 48.75}, {1.601, 48.625}, {1.602, 48.5}, {1.603, 48.375}, {1.604, 48.25}, {1.605, 48.125}, {1.606, 48.0}, {1.607, 47.875}, {1.608, 47.75}, {1.609, 47.625}, {1.61, 47.5}, {1.611, 47.375}, {1.612, 47.25}, {1.613, 47.125}, {1.614, 47.0}, {1.615, 46.875}, {1.616, 46.75}, {1.617, 46.625}, {1.618, 46.5}, {1.619, 46.375}, {1.62, 46.25}, {1.621, 46.125}, {1.622, 46.0}, {1.623, 45.875}, {1.624, 45.75}, {1.625, 45.625}, {1.626, 45.5}, {1.627, 45.375}, {1.628, 45.25}, {1.629, 45.125}, {1.63, 45.0}, {1.631, 44.9}, {1.632, 44.8}, {1.633, 44.7}, {1.634, 44.6}, {1.635, 44.5}, {1.636, 44.4}, {1.637, 44.3}, {1.638, 44.2}, {1.639, 44.1}, {1.64, 44.0}, {1.641, 43.9}, {1.642, 43.8}, {1.643, 43.7}, {1.644, 43.6}, {1.645, 43.5}, {1.646, 43.4}, {1.647, 43.3}, {1.648, 43.2}, {1.649, 43.1}, {1.65, 43.0}, {1.651, 42.9}, {1.652, 42.8}, {1.653, 42.7}, {1.654, 42.6}, {1.655, 42.5}, {1.656, 42.4}, {1.657, 42.3}, {1.658, 42.2}, {1.659, 42.1}, {1.66, 42.0}, {1.661, 41.9}, {1.662, 41.8}, {1.663, 41.7}, {1.664, 41.6}, {1.665, 41.5}, {1.666, 41.4}, {1.667, 41.3}, {1.668, 41.2}, {1.669, 41.1}, {1.67, 41.0}, {1.671, 40.9}, {1.672, 40.8}, {1.673, 40.7}, {1.674, 40.6}, {1.675, 40.5}, {1.676, 40.4}, {1.677, 40.3}, {1.678, 40.2}, {1.679, 40.1}, {1.68, 40.0}, {1.681, 39.9167}, {1.682, 39.8333}, {1.683, 39.75}, {1.684, 39.6667}, {1.685, 39.5833}, {1.686, 39.5}, {1.687, 39.4167}, {1.688, 39.3333}, {1.689, 39.25}, {1.69, 39.1667}, {1.691, 39.0833}, {1.692, 39.0}, {1.693, 38.9167}, {1.694, 38.8333}, {1.695, 38.75}, {1.696, 38.6667}, {1.697, 38.5833}, {1.698, 38.5}, {1.699, 38.4167}, {1.7, 38.3333}, {1.701, 38.25}, {1.702, 38.1667}, {1.703, 38.0833}, {1.704, 38.0}, {1.705, 37.9167}, {1.706, 37.8333}, {1.707, 37.75}, {1.708, 37.6667}, {1.709, 37.5833}, {1.71, 37.5}, {1.711, 37.4167}, {1.712, 37.3333}, {1.713, 37.25}, {1.714, 37.1667}, {1.715, 37.0833}, {1.716, 37.0}, {1.717, 36.9167}, {1.718, 36.8333}, {1.719, 36.75}, {1.72, 36.6667}, {1.721, 36.5833}, {1.722, 36.5}, {1.723, 36.4167}, {1.724, 36.3333}, {1.725, 36.25}, {1.726, 36.1667}, {1.727, 36.0833}, {1.728, 36.0}, {1.729, 35.9167}, {1.73, 35.8333}, {1.731, 35.75}, {1.732, 35.6667}, {1.733, 35.5833}, {1.734, 35.5}, {1.735, 35.4167}, {1.736, 35.3333}, {1.737, 35.25}, {1.738, 35.1667}, {1.739, 35.0833}, {1.74, 35.0}, {1.741, 34.9167}, {1.742, 34.8333}, {1.743, 34.75}, {1.744, 34.6667}, {1.745, 34.5833}, {1.746, 34.5}, {1.747, 34.4167}, {1.748, 34.3333}, {1.749, 34.25}, {1.75, 34.1667}, {1.751, 34.0833}, {1.752, 34.0}, {1.753, 33.9167}, {1.754, 33.8333}, {1.755, 33.75}, {1.756, 33.6667}, {1.757, 33.5833}, {1.758, 33.5}, {1.759, 33.4167}, {1.76, 33.3333}, {1.761, 33.25}, {1.762, 33.1667}, {1.763, 33.0833}, {1.764, 33.0}, {1.765, 32.9167}, {1.766, 32.8333}, {1.767, 32.75}, {1.768, 32.6667}, {1.769, 32.5833}, {1.77, 32.5}, {1.771, 32.4167}, {1.772, 32.3333}, {1.773, 32.25}, {1.774, 32.1667}, {1.775, 32.0833}, {1.776, 32.0}, {1.777, 31.9167}, {1.778, 31.8333}, {1.779, 31.75}, {1.78, 31.6667}, {1.781, 31.5833}, {1.782, 31.5}, {1.783, 31.4167}, {1.784, 31.3333}, {1.785, 31.25}, {1.786, 31.1667}, {1.787, 31.0833}, {1.788, 31.0}, {1.789, 30.9167}, {1.79, 30.8333}, {1.791, 30.75}, {1.792, 30.6667}, {1.793, 30.5833}, {1.794, 30.5}, {1.795, 30.4167}, {1.796, 30.3333}, {1.797, 30.25}, {1.798, 30.1667}, {1.799, 30.0833}, {1.8, 30.0}, {1.801, 29.9167}, {1.802, 29.8333}, {1.803, 29.75}, {1.804, 29.6667}, {1.805, 29.5833}, {1.806, 29.5}, {1.807, 29.4167}, {1.808, 29.3333}, {1.809, 29.25}, {1.81, 29.1667}, {1.811, 29.0833}, {1.812, 29.0}, {1.813, 28.9167}, {1.814, 28.8333}, {1.815, 28.75}, {1.816, 28.6667}, {1.817, 28.5833}, {1.818, 28.5}, {1.819, 28.4167}, {1.82, 28.3333}, {1.821, 28.25}, {1.822, 28.1667}, {1.823, 28.0833}, {1.824, 28.0}, {1.825, 27.9167}, {1.826, 27.8333}, {1.827, 27.75}, {1.828, 27.6667}, {1.829, 27.5833}, {1.83, 27.5}, {1.831, 27.4167}, {1.832, 27.3333}, {1.833, 27.25}, {1.834, 27.1667}, {1.835, 27.0833}, {1.836, 27.0}, {1.837, 26.9167}, {1.838, 26.8333}, {1.839, 26.75}, {1.84, 26.6667}, {1.841, 26.5833}, {1.842, 26.5}, {1.843, 26.4167}, {1.844, 26.3333}, {1.845, 26.25}, {1.846, 26.1667}, {1.847, 26.0833}, {1.848, 26.0}, {1.849, 25.9167}, {1.85, 25.8333}, {1.851, 25.75}, {1.852, 25.6667}, {1.853, 25.5833}, {1.854, 25.5}, {1.855, 25.4167}, {1.856, 25.3333}, {1.857, 25.25}, {1.858, 25.1667}, {1.859, 25.0833}, {1.86, 25.0}, {1.861, 24.9167}, {1.862, 24.8333}, {1.863, 24.75}, {1.864, 24.6667}, {1.865, 24.5833}, {1.866, 24.5}, {1.867, 24.4167}, {1.868, 24.3333}, {1.869, 24.25}, {1.87, 24.1667}, {1.871, 24.0833}, {1.872, 24.0}, {1.873, 23.9167}, {1.874, 23.8333}, {1.875, 23.75}, {1.876, 23.6667}, {1.877, 23.5833}, {1.878, 23.5}, {1.879, 23.4167}, {1.88, 23.3333}, {1.881, 23.25}, {1.882, 23.1667}, {1.883, 23.0833}, {1.884, 23.0}, {1.885, 22.9167}, {1.886, 22.8333}, {1.887, 22.75}, {1.888, 22.6667}, {1.889, 22.5833}, {1.89, 22.5}, {1.891, 22.4167}, {1.892, 22.3333}, {1.893, 22.25}, {1.894, 22.1667}, {1.895, 22.0833}, {1.896, 22.0}, {1.897, 21.9167}, {1.898, 21.8333}, {1.899, 21.75}, {1.9, 21.6667}, {1.901, 21.5833}, {1.902, 21.5}, {1.903, 21.4167}, {1.904, 21.3333}, {1.905, 21.25}, {1.906, 21.1667}, {1.907, 21.0833}, {1.908, 21.0}, {1.909, 20.9167}, {1.91, 20.8333}, {1.911, 20.75}, {1.912, 20.6667}, {1.913, 20.5833}, {1.914, 20.5}, {1.915, 20.4167}, {1.916, 20.3333}, {1.917, 20.25}, {1.918, 20.1667}, {1.919, 20.0833}, {1.92, 20.0}, {1.921, 19.9286}, {1.922, 19.8571}, {1.923, 19.7857}, {1.924, 19.7143}, {1.925, 19.6429}, {1.926, 19.5714}, {1.927, 19.5}, {1.928, 19.4286}, {1.929, 19.3571}, {1.93, 19.2857}, {1.931, 19.2143}, {1.932, 19.1429}, {1.933, 19.0714}, {1.934, 19.0}, {1.935, 18.9286}, {1.936, 18.8571}, {1.937, 18.7857}, {1.938, 18.7143}, {1.939, 18.6429}, {1.94, 18.5714}, {1.941, 18.5}, {1.942, 18.4286}, {1.943, 18.3571}, {1.944, 18.2857}, {1.945, 18.2143}, {1.946, 18.1429}, {1.947, 18.0714}, {1.948, 18.0}, {1.949, 17.9286}, {1.95, 17.8571}, {1.951, 17.7857}, {1.952, 17.7143}, {1.953, 17.6429}, {1.954, 17.5714}, {1.955, 17.5}, {1.956, 17.4286}, {1.957, 17.3571}, {1.958, 17.2857}, {1.959, 17.2143}, {1.96, 17.1429}, {1.961, 17.0714}, {1.962, 17.0}, {1.963, 16.9286}, {1.964, 16.8571}, {1.965, 16.7857}, {1.966, 16.7143}, {1.967, 16.6429}, {1.968, 16.5714}, {1.969, 16.5}, {1.97, 16.4286}, {1.971, 16.3571}, {1.972, 16.2857}, {1.973, 16.2143}, {1.974, 16.1429}, {1.975, 16.0714}, {1.976, 16.0}, {1.977, 15.9286}, {1.978, 15.8571}, {1.979, 15.7857}, {1.98, 15.7143}, {1.981, 15.6429}, {1.982, 15.5714}, {1.983, 15.5}, {1.984, 15.4286}, {1.985, 15.3571}, {1.986, 15.2857}, {1.987, 15.2143}, {1.988, 15.1429}, {1.989, 15.0714}, {1.99, 15.0}, {1.991, 14.9167}, {1.992, 14.8333}, {1.993, 14.75}, {1.994, 14.6667}, {1.995, 14.5833}, {1.996, 14.5}, {1.997, 14.4167}, {1.998, 14.3333}, {1.999, 14.25}, {2.0, 14.1667}, {2.001, 14.0833}, {2.002, 14.0}, {2.003, 13.9167}, {2.004, 13.8333}, {2.005, 13.75}, {2.006, 13.6667}, {2.007, 13.5833}, {2.008, 13.5}, {2.009, 13.4167}, {2.01, 13.3333}, {2.011, 13.25}, {2.012, 13.1667}, {2.013, 13.0833}, {2.014, 13.0}, {2.015, 12.9167}, {2.016, 12.8333}, {2.017, 12.75}, {2.018, 12.6667}, {2.019, 12.5833}, {2.02, 12.5}, {2.021, 12.4167}, {2.022, 12.3333}, {2.023, 12.25}, {2.024, 12.1667}, {2.025, 12.0833}, {2.026, 12.0}, {2.027, 11.9167}, {2.028, 11.8333}, {2.029, 11.75}, {2.03, 11.6667}, {2.031, 11.5833}, {2.032, 11.5}, {2.033, 11.4167}, {2.034, 11.3333}, {2.035, 11.25}, {2.036, 11.1667}, {2.037, 11.0833}, {2.038, 11.0}, {2.039, 10.9167}, {2.04, 10.8333}, {2.041, 10.75}, {2.042, 10.6667}, {2.043, 10.5833}, {2.044, 10.5}, {2.045, 10.4167}, {2.046, 10.3333}, {2.047, 10.25}, {2.048, 10.1667}, {2.049, 10.0833}, {2.05, 10.0}, {2.051, 9.9167}, {2.052, 9.8333}, {2.053, 9.75}, {2.054, 9.6667}, {2.055, 9.5833}, {2.056, 9.5}, {2.057, 9.4167}, {2.058, 9.3333}, {2.059, 9.25}, {2.06, 9.1667}, {2.061, 9.0833}, {2.062, 9.0}, {2.063, 8.9167}, {2.064, 8.8333}, {2.065, 8.75}, {2.066, 8.6667}, {2.067, 8.5833}, {2.068, 8.5}, {2.069, 8.4167}, {2.07, 8.3333}, {2.071, 8.25}, {2.072, 8.1667}, {2.073, 8.0833}, {2.074, 8.0}, {2.075, 7.9167}, {2.076, 7.8333}, {2.077, 7.75}, {2.078, 7.6667}, {2.079, 7.5833}, {2.08, 7.5}, {2.081, 7.4167}, {2.082, 7.3333}, {2.083, 7.25}, {2.084, 7.1667}, {2.085, 7.0833}, {2.086, 7.0}, {2.087, 6.9167}, {2.088, 6.8333}, {2.089, 6.75}, {2.09, 6.6667}, {2.091, 6.5833}, {2.092, 6.5}, {2.093, 6.4167}, {2.094, 6.3333}, {2.095, 6.25}, {2.096, 6.1667}, {2.097, 6.0833}, {2.098, 6.0}, {2.099, 5.9167}, {2.1, 5.8333}, {2.101, 5.75}, {2.102, 5.6667}, {2.103, 5.5833}, {2.104, 5.5}, {2.105, 5.4167}, {2.106, 5.3333}, {2.107, 5.25}, {2.108, 5.1667}, {2.109, 5.0833}, {2.11, 5.0}, {2.111, 4.9167}, {2.112, 4.8333}, {2.113, 4.75}, {2.114, 4.6667}, {2.115, 4.5833}, {2.116, 4.5}, {2.117, 4.4167}, {2.118, 4.3333}, {2.119, 4.25}, {2.12, 4.1667}, {2.121, 4.0833}, {2.122, 4.0}, {2.123, 3.9167}, {2.124, 3.8333}, {2.125, 3.75}, {2.126, 3.6667}, {2.127, 3.5833}, {2.128, 3.5}, {2.129, 3.4167}, {2.13, 3.3333}, {2.131, 3.25}, {2.132, 3.1667}, {2.133, 3.0833}, {2.134, 3.0}, {2.135, 2.9167}, {2.136, 2.8333}, {2.137, 2.75}, {2.138, 2.6667}, {2.139, 2.5833}, {2.14, 2.5}, {2.141, 2.4167}, {2.142, 2.3333}, {2.143, 2.25}, {2.144, 2.1667}, {2.145, 2.0833}, {2.146, 2.0}, {2.147, 1.9167}, {2.148, 1.8333}, {2.149, 1.75}, {2.15, 1.6667}, {2.151, 1.5833}, {2.152, 1.5}, {2.153, 1.4167}, {2.154, 1.3333}, {2.155, 1.25}, {2.156, 1.1667}, {2.157, 1.0833}, {2.158, 1.0}, {2.159, 0.9167}, {2.16, 0.8333}, {2.161, 0.75}, {2.162, 0.6667}, {2.163, 0.5833}, {2.164, 0.5}, {2.165, 0.4167}, {2.166, 0.3333}, {2.167, 0.25}, {2.168, 0.1667}, {2.169, 0.0833}, {2.17, 0.0}, {2.171, -0.0833}, {2.172, -0.1667}, {2.173, -0.25}, {2.174, -0.3333}, {2.175, -0.4167}, {2.176, -0.5}, {2.177, -0.5833}, {2.178, -0.6667}, {2.179, -0.75}, {2.18, -0.8333}, {2.181, -0.9167}, {2.182, -1.0}, {2.183, -1.0833}, {2.184, -1.1667}, {2.185, -1.25}, {2.186, -1.3333}, {2.187, -1.4167}, {2.188, -1.5}, {2.189, -1.5833}, {2.19, -1.6667}, {2.191, -1.75}, {2.192, -1.8333}, {2.193, -1.9167}, {2.194, -2.0}, {2.195, -2.0833}, {2.196, -2.1667}, {2.197, -2.25}, {2.198, -2.3333}, {2.199, -2.4167}, {2.2, -2.5}, {2.201, -2.5833}, {2.202, -2.6667}, {2.203, -2.75}, {2.204, -2.8333}, {2.205, -2.9167}, {2.206, -3.0}, {2.207, -3.0833}, {2.208, -3.1667}, {2.209, -3.25}, {2.21, -3.3333}, {2.211, -3.4167}, {2.212, -3.5}, {2.213, -3.5833}, {2.214, -3.6667}, {2.215, -3.75}, {2.216, -3.8333}, {2.217, -3.9167}, {2.218, -4.0}, {2.219, -4.0833}, {2.22, -4.1667}, {2.221, -4.25}, {2.222, -4.3333}, {2.223, -4.4167}, {2.224, -4.5}, {2.225, -4.5833}, {2.226, -4.6667}, {2.227, -4.75}, {2.228, -4.8333}, {2.229, -4.9167}, {2.23, -5.0}, {2.231, -5.125}, {2.232, -5.25}, {2.233, -5.375}, {2.234, -5.5}, {2.235, -5.625}, {2.236, -5.75}, {2.237, -5.875}, {2.238, -6.0}, {2.239, -6.125}, {2.24, -6.25}, {2.241, -6.375}, {2.242, -6.5}, {2.243, -6.625}, {2.244, -6.75}, {2.245, -6.875}, {2.246, -7.0}, {2.247, -7.125}, {2.248, -7.25}, {2.249, -7.375}, {2.25, -7.5}, {2.251, -7.625}, {2.252, -7.75}, {2.253, -7.875}, {2.254, -8.0}, {2.255, -8.125}, {2.256, -8.25}, {2.257, -8.375}, {2.258, -8.5}, {2.259, -8.625}, {2.26, -8.75}, {2.261, -8.875}, {2.262, -9.0}, {2.263, -9.125}, {2.264, -9.25}, {2.265, -9.375}, {2.266, -9.5}, {2.267, -9.625}, {2.268, -9.75}, {2.269, -9.875}, {2.27, -10.0}, {2.271, -10.1}, {2.272, -10.2}, {2.273, -10.3}, {2.274, -10.4}, {2.275, -10.5}, {2.276, -10.6}, {2.277, -10.7}, {2.278, -10.8}, {2.279, -10.9}, {2.28, -11.0}, {2.281, -11.1}, {2.282, -11.2}, {2.283, -11.3}, {2.284, -11.4}, {2.285, -11.5}, {2.286, -11.6}, {2.287, -11.7}, {2.288, -11.8}, {2.289, -11.9}, {2.29, -12.0}, {2.291, -12.1}, {2.292, -12.2}, {2.293, -12.3}, {2.294, -12.4}, {2.295, -12.5}, {2.296, -12.6}, {2.297, -12.7}, {2.298, -12.8}, {2.299, -12.9}, {2.3, -13.0}, {2.301, -13.1}, {2.302, -13.2}, {2.303, -13.3}, {2.304, -13.4}, {2.305, -13.5}, {2.306, -13.6}, {2.307, -13.7}, {2.308, -13.8}, {2.309, -13.9}, {2.31, -14.0}, {2.311, -14.1}, {2.312, -14.2}, {2.313, -14.3}, {2.314, -14.4}, {2.315, -14.5}, {2.316, -14.6}, {2.317, -14.7}, {2.318, -14.8}, {2.319, -14.9}, {2.32, -15.0}, {2.321, -15.1667}, {2.322, -15.3333}, {2.323, -15.5}, {2.324, -15.6667}, {2.325, -15.8333}, {2.326, -16.0}, {2.327, -16.1667}, {2.328, -16.3333}, {2.329, -16.5}, {2.33, -16.6667}, {2.331, -16.8333}, {2.332, -17.0}, {2.333, -17.1667}, {2.334, -17.3333}, {2.335, -17.5}, {2.336, -17.6667}, {2.337, -17.8333}, {2.338, -18.0}, {2.339, -18.1667}, {2.34, -18.3333}, {2.341, -18.5}, {2.342, -18.6667}, {2.343, -18.8333}, {2.344, -19.0}, {2.345, -19.1667}, {2.346, -19.3333}, {2.347, -19.5}, {2.348, -19.6667}, {2.349, -19.8333}, {2.35, -20.0}, {2.351, -20.1667}, {2.352, -20.3333}, {2.353, -20.5}, {2.354, -20.6667}, {2.355, -20.8333}, {2.356, -21.0}, {2.357, -21.1667}, {2.358, -21.3333}, {2.359, -21.5}, {2.36, -21.6667}, {2.361, -21.8333}, {2.362, -22.0}, {2.363, -22.1667}, {2.364, -22.3333}, {2.365, -22.5}, {2.366, -22.6667}, {2.367, -22.8333}, {2.368, -23.0}, {2.369, -23.1667}, {2.37, -23.3333}, {2.371, -23.5}, {2.372, -23.6667}, {2.373, -23.8333}, {2.374, -24.0}, {2.375, -24.1667}, {2.376, -24.3333}, {2.377, -24.5}, {2.378, -24.6667}, {2.379, -24.8333}, {2.38, -25.0}, {2.381, -25.25}, {2.382, -25.5}, {2.383, -25.75}, {2.384, -26.0}, {2.385, -26.25}, {2.386, -26.5}, {2.387, -26.75}, {2.388, -27.0}, {2.389, -27.25}, {2.39, -27.5}, {2.391, -27.75}, {2.392, -28.0}, {2.393, -28.25}, {2.394, -28.5}, {2.395, -28.75}, {2.396, -29.0}, {2.397, -29.25}, {2.398, -29.5}, {2.399, -29.75}, {2.4, -30.0}, {2.401, -30.25}, {2.402, -30.5}, {2.403, -30.75}, {2.404, -31.0}, {2.405, -31.25}, {2.406, -31.5}, {2.407, -31.75}, {2.408, -32.0}, {2.409, -32.25}, {2.41, -32.5}, {2.411, -32.75}, {2.412, -33.0}, {2.413, -33.25}, {2.414, -33.5}, {2.415, -33.75}, {2.416, -34.0}, {2.417, -34.25}, {2.418, -34.5}, {2.419, -34.75}, {2.42, -35.0}, {2.421, -35.25}, {2.422, -35.5}, {2.423, -35.75}, {2.424, -36.0}, {2.425, -36.25}, {2.426, -36.5}, {2.427, -36.75}, {2.428, -37.0}, {2.429, -37.25}, {2.43, -37.5}, {2.431, -37.75}, {2.432, -38.0}, {2.433, -38.25}, {2.434, -38.5}, {2.435, -38.75}, {2.436, -39.0}, {2.437, -39.25}, {2.438, -39.5}, {2.439, -39.75}, {2.44, -40.0}};

// ********************************** Functions **********************************

float FEB_LTC6811_Temp_LUT_Get_Temperature(float voltage) {
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (voltage < FEB_LTC6811_TEMP_LUT_MIN_MAP_VOLT || voltage > FEB_LTC6811_TEMP_LUT_MAX_MAP_VOLT) {
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7fd ff38 	bl	8000588 <__aeabi_f2d>
 8002718:	a323      	add	r3, pc, #140	; (adr r3, 80027a8 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xa0>)
 800271a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271e:	f7fe f9fd 	bl	8000b1c <__aeabi_dcmplt>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10a      	bne.n	800273e <FEB_LTC6811_Temp_LUT_Get_Temperature+0x36>
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7fd ff2d 	bl	8000588 <__aeabi_f2d>
 800272e:	a324      	add	r3, pc, #144	; (adr r3, 80027c0 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xb8>)
 8002730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002734:	f7fe fa10 	bl	8000b58 <__aeabi_dcmpgt>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <FEB_LTC6811_Temp_LUT_Get_Temperature+0x3a>
		return -42.0;
 800273e:	4b1e      	ldr	r3, [pc, #120]	; (80027b8 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xb0>)
 8002740:	e028      	b.n	8002794 <FEB_LTC6811_Temp_LUT_Get_Temperature+0x8c>
	}

	uint16_t index = (uint16_t) round((voltage - FEB_LTC6811_TEMP_LUT_MIN_MAP_VOLT) / FEB_LTC6811_TEMP_LUT_RESOLUTION);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7fd ff20 	bl	8000588 <__aeabi_f2d>
 8002748:	a317      	add	r3, pc, #92	; (adr r3, 80027a8 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xa0>)
 800274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274e:	f7fd fdbb 	bl	80002c8 <__aeabi_dsub>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4610      	mov	r0, r2
 8002758:	4619      	mov	r1, r3
 800275a:	a315      	add	r3, pc, #84	; (adr r3, 80027b0 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xa8>)
 800275c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002760:	f7fe f894 	bl	800088c <__aeabi_ddiv>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	ec43 2b17 	vmov	d7, r2, r3
 800276c:	eeb0 0a47 	vmov.f32	s0, s14
 8002770:	eef0 0a67 	vmov.f32	s1, s15
 8002774:	f009 fba0 	bl	800beb8 <round>
 8002778:	ec53 2b10 	vmov	r2, r3, d0
 800277c:	4610      	mov	r0, r2
 800277e:	4619      	mov	r1, r3
 8002780:	f7fe fa32 	bl	8000be8 <__aeabi_d2uiz>
 8002784:	4603      	mov	r3, r0
 8002786:	81fb      	strh	r3, [r7, #14]
	return FEB_LTC6811_TEMP_MAP[index][1];
 8002788:	89fb      	ldrh	r3, [r7, #14]
 800278a:	4a0c      	ldr	r2, [pc, #48]	; (80027bc <FEB_LTC6811_Temp_LUT_Get_Temperature+0xb4>)
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4413      	add	r3, r2
 8002790:	3304      	adds	r3, #4
 8002792:	681b      	ldr	r3, [r3, #0]
}
 8002794:	ee07 3a90 	vmov	s15, r3
 8002798:	eeb0 0a67 	vmov.f32	s0, s15
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	f3af 8000 	nop.w
 80027a8:	cccccccd 	.word	0xcccccccd
 80027ac:	3ff4cccc 	.word	0x3ff4cccc
 80027b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80027b4:	3f50624d 	.word	0x3f50624d
 80027b8:	c2280000 	.word	0xc2280000
 80027bc:	20000030 	.word	0x20000030
 80027c0:	b851eb85 	.word	0xb851eb85
 80027c4:	4003851e 	.word	0x4003851e

080027c8 <FEB_Timer_Init>:

extern TIM_HandleTypeDef htim4;

// ********************************** Initialize **********************************

void FEB_Timer_Init(void) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim4);
 80027cc:	4802      	ldr	r0, [pc, #8]	; (80027d8 <FEB_Timer_Init+0x10>)
 80027ce:	f005 f98f 	bl	8007af0 <HAL_TIM_Base_Start>
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20002a18 	.word	0x20002a18

080027dc <FEB_Timer_Delay_Micro>:

// ********************************** Functions **********************************

void FEB_Timer_Delay_Micro(uint16_t delay) {
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80027e6:	4b09      	ldr	r3, [pc, #36]	; (800280c <FEB_Timer_Delay_Micro+0x30>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2200      	movs	r2, #0
 80027ec:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 80027ee:	bf00      	nop
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <FEB_Timer_Delay_Micro+0x30>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027f6:	88fb      	ldrh	r3, [r7, #6]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d3f9      	bcc.n	80027f0 <FEB_Timer_Delay_Micro+0x14>
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	20002a18 	.word	0x20002a18

08002810 <LTC6811_init_reg_limits>:

/* Initialize the Register limits */
void LTC6811_init_reg_limits(uint8_t total_ic, //The number of ICs in the system
							cell_asic *ic  //A two dimensional array where data will be written
							)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	6039      	str	r1, [r7, #0]
 800281a:	71fb      	strb	r3, [r7, #7]
  for (uint8_t cic=0; cic<total_ic; cic++)
 800281c:	2300      	movs	r3, #0
 800281e:	73fb      	strb	r3, [r7, #15]
 8002820:	e038      	b.n	8002894 <LTC6811_init_reg_limits+0x84>
  {
    ic[cic].ic_reg.cell_channels=12;
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	22e8      	movs	r2, #232	; 0xe8
 8002826:	fb02 f303 	mul.w	r3, r2, r3
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	4413      	add	r3, r2
 800282e:	220c      	movs	r2, #12
 8002830:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    ic[cic].ic_reg.stat_channels=4;
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	22e8      	movs	r2, #232	; 0xe8
 8002838:	fb02 f303 	mul.w	r3, r2, r3
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	4413      	add	r3, r2
 8002840:	2204      	movs	r2, #4
 8002842:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    ic[cic].ic_reg.aux_channels=6;
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	22e8      	movs	r2, #232	; 0xe8
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	4413      	add	r3, r2
 8002852:	2206      	movs	r2, #6
 8002854:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
    ic[cic].ic_reg.num_cv_reg=4;
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	22e8      	movs	r2, #232	; 0xe8
 800285c:	fb02 f303 	mul.w	r3, r2, r3
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	4413      	add	r3, r2
 8002864:	2204      	movs	r2, #4
 8002866:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
    ic[cic].ic_reg.num_gpio_reg=2;
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	22e8      	movs	r2, #232	; 0xe8
 800286e:	fb02 f303 	mul.w	r3, r2, r3
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	4413      	add	r3, r2
 8002876:	2202      	movs	r2, #2
 8002878:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    ic[cic].ic_reg.num_stat_reg=3;
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	22e8      	movs	r2, #232	; 0xe8
 8002880:	fb02 f303 	mul.w	r3, r2, r3
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	4413      	add	r3, r2
 8002888:	2203      	movs	r2, #3
 800288a:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
  for (uint8_t cic=0; cic<total_ic; cic++)
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	3301      	adds	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
 8002894:	7bfa      	ldrb	r2, [r7, #15]
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	429a      	cmp	r2, r3
 800289a:	d3c2      	bcc.n	8002822 <LTC6811_init_reg_limits+0x12>
  }
}
 800289c:	bf00      	nop
 800289e:	bf00      	nop
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <LTC6811_wrcfg>:
order so the last device's configuration is written first.
*/
void LTC6811_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic *ic //A two dimensional array of the configuration data that will be written
                  )
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	4603      	mov	r3, r0
 80028b2:	6039      	str	r1, [r7, #0]
 80028b4:	71fb      	strb	r3, [r7, #7]
  LTC681x_wrcfg(total_ic,ic);
 80028b6:	79fb      	ldrb	r3, [r7, #7]
 80028b8:	6839      	ldr	r1, [r7, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 f9c4 	bl	8002c48 <LTC681x_wrcfg>
}
 80028c0:	bf00      	nop
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <LTC6811_adcv>:
/* Starts cell voltage conversion */
void LTC6811_adcv(uint8_t MD, //ADC Mode
				  uint8_t DCP, //Discharge Permit
				  uint8_t CH //Cell Channels to be measured
				  )
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	71fb      	strb	r3, [r7, #7]
 80028d2:	460b      	mov	r3, r1
 80028d4:	71bb      	strb	r3, [r7, #6]
 80028d6:	4613      	mov	r3, r2
 80028d8:	717b      	strb	r3, [r7, #5]
  LTC681x_adcv(MD,DCP,CH);
 80028da:	797a      	ldrb	r2, [r7, #5]
 80028dc:	79b9      	ldrb	r1, [r7, #6]
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 fa30 	bl	8002d46 <LTC681x_adcv>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <LTC6811_adax>:

/* Start a GPIO and Vref2 Conversion */
void LTC6811_adax(uint8_t MD, //ADC Mode
				  uint8_t CHG //GPIO Channels to be measured
				  )
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	4603      	mov	r3, r0
 80028f6:	460a      	mov	r2, r1
 80028f8:	71fb      	strb	r3, [r7, #7]
 80028fa:	4613      	mov	r3, r2
 80028fc:	71bb      	strb	r3, [r7, #6]
  LTC681x_adax(MD,CHG);
 80028fe:	79ba      	ldrb	r2, [r7, #6]
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f000 fa49 	bl	8002d9c <LTC681x_adax>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <LTC6811_rdcv>:
*/
uint8_t LTC6811_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // The number of ICs in the system
                     cell_asic *ic // Array of the parsed cell codes
                    )
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b084      	sub	sp, #16
 8002916:	af00      	add	r7, sp, #0
 8002918:	4603      	mov	r3, r0
 800291a:	603a      	str	r2, [r7, #0]
 800291c:	71fb      	strb	r3, [r7, #7]
 800291e:	460b      	mov	r3, r1
 8002920:	71bb      	strb	r3, [r7, #6]
  int8_t pec_error = 0;
 8002922:	2300      	movs	r3, #0
 8002924:	73fb      	strb	r3, [r7, #15]
  pec_error = LTC681x_rdcv(reg,total_ic,ic);
 8002926:	79b9      	ldrb	r1, [r7, #6]
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f000 fa5a 	bl	8002de6 <LTC681x_rdcv>
 8002932:	4603      	mov	r3, r0
 8002934:	73fb      	strb	r3, [r7, #15]
  return(pec_error);
 8002936:	7bfb      	ldrb	r3, [r7, #15]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <LTC6811_rdaux>:
*/
int8_t LTC6811_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
                     uint8_t total_ic,//The number of ICs in the system
                     cell_asic *ic//A two dimensional array of the gpio voltage codes.
                     )
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	603a      	str	r2, [r7, #0]
 800294a:	71fb      	strb	r3, [r7, #7]
 800294c:	460b      	mov	r3, r1
 800294e:	71bb      	strb	r3, [r7, #6]
  int8_t pec_error = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	73fb      	strb	r3, [r7, #15]
  LTC681x_rdaux(reg,total_ic,ic);
 8002954:	79b9      	ldrb	r1, [r7, #6]
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f000 faf7 	bl	8002f4e <LTC681x_rdaux>
  return (pec_error);
 8002960:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <LTC6811_pollAdc>:
  return(LTC681x_pladc());
}

//This function will block operation until the ADC has finished it's conversion */
uint32_t LTC6811_pollAdc()
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  return(LTC681x_pollAdc());
 8002970:	f000 fcb8 	bl	80032e4 <LTC681x_pollAdc>
 8002974:	4603      	mov	r3, r0
}
 8002976:	4618      	mov	r0, r3
 8002978:	bd80      	pop	{r7, pc}

0800297a <LTC6811_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC6811_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that will store the data
							 )
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	4603      	mov	r3, r0
 8002982:	6039      	str	r1, [r7, #0]
 8002984:	71fb      	strb	r3, [r7, #7]
  LTC681x_reset_crc_count(total_ic,ic);
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	6839      	ldr	r1, [r7, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f000 fe92 	bl	80036b4 <LTC681x_reset_crc_count>
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <LTC6811_init_cfg>:

/* Helper function to initialize CFG variables.*/
void LTC6811_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that will store the data
					  )
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	6039      	str	r1, [r7, #0]
 80029a2:	71fb      	strb	r3, [r7, #7]
  LTC681x_init_cfg(total_ic,ic);
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	6839      	ldr	r1, [r7, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 fee9 	bl	8003780 <LTC681x_init_cfg>
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <LTC6811_set_cfgr>:
					  bool dcc[12],// The DCC bit
					  bool dcto[4],// The Dcto bit
					  uint16_t uv, // The UV bit
					  uint16_t  ov // The OV bit
					  )
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b088      	sub	sp, #32
 80029ba:	af06      	add	r7, sp, #24
 80029bc:	6039      	str	r1, [r7, #0]
 80029be:	4611      	mov	r1, r2
 80029c0:	461a      	mov	r2, r3
 80029c2:	4603      	mov	r3, r0
 80029c4:	71fb      	strb	r3, [r7, #7]
 80029c6:	460b      	mov	r3, r1
 80029c8:	71bb      	strb	r3, [r7, #6]
 80029ca:	4613      	mov	r3, r2
 80029cc:	717b      	strb	r3, [r7, #5]
  LTC681x_set_cfgr(nIC ,ic,refon,adcopt,gpio,dcc,dcto, uv, ov);
 80029ce:	7979      	ldrb	r1, [r7, #5]
 80029d0:	79ba      	ldrb	r2, [r7, #6]
 80029d2:	79f8      	ldrb	r0, [r7, #7]
 80029d4:	8c3b      	ldrh	r3, [r7, #32]
 80029d6:	9304      	str	r3, [sp, #16]
 80029d8:	8bbb      	ldrh	r3, [r7, #28]
 80029da:	9303      	str	r3, [sp, #12]
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	9302      	str	r3, [sp, #8]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	9301      	str	r3, [sp, #4]
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	460b      	mov	r3, r1
 80029ea:	6839      	ldr	r1, [r7, #0]
 80029ec:	f000 fef2 	bl	80037d4 <LTC681x_set_cfgr>
}
 80029f0:	bf00      	nop
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <wakeup_idle>:
                                0x585a, 0x8ba7, 0x4e3e, 0x450c, 0x8095
                               };

/* Wake isoSPI up from IDlE state and enters the READY state */
void wakeup_idle(uint8_t total_ic) //Number of ICs in the system
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<total_ic; i++)
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	e00b      	b.n	8002a20 <wakeup_idle+0x28>
	{
	   cs_low(CS_PIN);
 8002a08:	200a      	movs	r0, #10
 8002a0a:	f001 f93d 	bl	8003c88 <cs_low>
	   spi_read_byte(0xff);//Guarantees the isoSPI will be in ready mode
 8002a0e:	20ff      	movs	r0, #255	; 0xff
 8002a10:	f001 f9b0 	bl	8003d74 <spi_read_byte>
	   cs_high(CS_PIN);
 8002a14:	200a      	movs	r0, #10
 8002a16:	f001 f947 	bl	8003ca8 <cs_high>
	for (int i =0; i<total_ic; i++)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	dbef      	blt.n	8002a08 <wakeup_idle+0x10>
	}
}
 8002a28:	bf00      	nop
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <wakeup_sleep>:

/* Generic wakeup command to wake the LTC681x from sleep state */
void wakeup_sleep(uint8_t total_ic) //Number of ICs in the system
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b084      	sub	sp, #16
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	4603      	mov	r3, r0
 8002a3a:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<total_ic; i++)
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	e00f      	b.n	8002a62 <wakeup_sleep+0x30>
	{
	   cs_low(CS_PIN);
 8002a42:	200a      	movs	r0, #10
 8002a44:	f001 f920 	bl	8003c88 <cs_low>
	   delay_u(300); // Guarantees the LTC681x will be in standby
 8002a48:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002a4c:	f001 f93c 	bl	8003cc8 <delay_u>
	   cs_high(CS_PIN);
 8002a50:	200a      	movs	r0, #10
 8002a52:	f001 f929 	bl	8003ca8 <cs_high>
	   delay_u(10);
 8002a56:	200a      	movs	r0, #10
 8002a58:	f001 f936 	bl	8003cc8 <delay_u>
	for (int i =0; i<total_ic; i++)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	79fb      	ldrb	r3, [r7, #7]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	dbeb      	blt.n	8002a42 <wakeup_sleep+0x10>
	}
}
 8002a6a:	bf00      	nop
 8002a6c:	bf00      	nop
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <cmd_68>:

/* Generic function to write 68xx commands. Function calculates PEC for tx_cmd data. */
void cmd_68(uint8_t tx_cmd[2]) //The command to be transmitted
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	cmd[0] = tx_cmd[0];
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	723b      	strb	r3, [r7, #8]
	cmd[1] =  tx_cmd[1];
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	785b      	ldrb	r3, [r3, #1]
 8002a86:	727b      	strb	r3, [r7, #9]
	cmd_pec = pec15_calc(2, cmd);
 8002a88:	f107 0308 	add.w	r3, r7, #8
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	2002      	movs	r0, #2
 8002a90:	f000 f8a6 	bl	8002be0 <pec15_calc>
 8002a94:	4603      	mov	r3, r0
 8002a96:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8002a98:	89fb      	ldrh	r3, [r7, #14]
 8002a9a:	0a1b      	lsrs	r3, r3, #8
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8002aa2:	89fb      	ldrh	r3, [r7, #14]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 8002aa8:	200a      	movs	r0, #10
 8002aaa:	f001 f8ed 	bl	8003c88 <cs_low>
	spi_write_array(4,cmd);
 8002aae:	f107 0308 	add.w	r3, r7, #8
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	2004      	movs	r0, #4
 8002ab6:	f001 f913 	bl	8003ce0 <spi_write_array>
	cs_high(CS_PIN);
 8002aba:	200a      	movs	r0, #10
 8002abc:	f001 f8f4 	bl	8003ca8 <cs_high>
}
 8002ac0:	bf00      	nop
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
			  uint8_t tx_cmd[2], //The command to be transmitted
			  uint8_t data[] // Payload Data
			  )
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	73fb      	strb	r3, [r7, #15]
	const uint8_t BYTES_IN_REG = 6;
 8002ad6:	2306      	movs	r3, #6
 8002ad8:	773b      	strb	r3, [r7, #28]
	const uint8_t CMD_LEN = 4+(8*total_ic);
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	76fb      	strb	r3, [r7, #27]
	uint8_t *cmd;
	uint16_t data_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index;

	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8002ae4:	7efb      	ldrb	r3, [r7, #27]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f006 fae0 	bl	80090ac <malloc>
 8002aec:	4603      	mov	r3, r0
 8002aee:	617b      	str	r3, [r7, #20]
	cmd[0] = tx_cmd[0];
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	781a      	ldrb	r2, [r3, #0]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	701a      	strb	r2, [r3, #0]
	cmd[1] = tx_cmd[1];
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	3301      	adds	r3, #1
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	7852      	ldrb	r2, [r2, #1]
 8002b00:	701a      	strb	r2, [r3, #0]
	cmd_pec = pec15_calc(2, cmd);
 8002b02:	6979      	ldr	r1, [r7, #20]
 8002b04:	2002      	movs	r0, #2
 8002b06:	f000 f86b 	bl	8002be0 <pec15_calc>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8002b0e:	8a7b      	ldrh	r3, [r7, #18]
 8002b10:	0a1b      	lsrs	r3, r3, #8
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	3302      	adds	r3, #2
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t)(cmd_pec);
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	3303      	adds	r3, #3
 8002b20:	8a7a      	ldrh	r2, [r7, #18]
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 8002b26:	2304      	movs	r3, #4
 8002b28:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each LTC681x, this loops starts with the last IC on the stack.
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	77bb      	strb	r3, [r7, #30]
 8002b2e:	e042      	b.n	8002bb6 <write_68+0xee>
    {	                                                                            //The first configuration written is received by the last IC in the daisy chain
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8002b30:	2300      	movs	r3, #0
 8002b32:	777b      	strb	r3, [r7, #29]
 8002b34:	e016      	b.n	8002b64 <write_68+0x9c>
		{
			cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 8002b36:	7fbb      	ldrb	r3, [r7, #30]
 8002b38:	1e5a      	subs	r2, r3, #1
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	4413      	add	r3, r2
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	461a      	mov	r2, r3
 8002b44:	7f7b      	ldrb	r3, [r7, #29]
 8002b46:	4413      	add	r3, r2
 8002b48:	461a      	mov	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	441a      	add	r2, r3
 8002b4e:	7ffb      	ldrb	r3, [r7, #31]
 8002b50:	6979      	ldr	r1, [r7, #20]
 8002b52:	440b      	add	r3, r1
 8002b54:	7812      	ldrb	r2, [r2, #0]
 8002b56:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 8002b58:	7ffb      	ldrb	r3, [r7, #31]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8002b5e:	7f7b      	ldrb	r3, [r7, #29]
 8002b60:	3301      	adds	r3, #1
 8002b62:	777b      	strb	r3, [r7, #29]
 8002b64:	7f7a      	ldrb	r2, [r7, #29]
 8002b66:	7f3b      	ldrb	r3, [r7, #28]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d3e4      	bcc.n	8002b36 <write_68+0x6e>
		}

		data_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &data[(current_ic-1)*6]);    // Calculating the PEC for each ICs configuration register data
 8002b6c:	7fbb      	ldrb	r3, [r7, #30]
 8002b6e:	1e5a      	subs	r2, r3, #1
 8002b70:	4613      	mov	r3, r2
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	4413      	add	r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	461a      	mov	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	441a      	add	r2, r3
 8002b7e:	7f3b      	ldrb	r3, [r7, #28]
 8002b80:	4611      	mov	r1, r2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 f82c 	bl	8002be0 <pec15_calc>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	823b      	strh	r3, [r7, #16]
		cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 8002b8c:	8a3b      	ldrh	r3, [r7, #16]
 8002b8e:	0a1b      	lsrs	r3, r3, #8
 8002b90:	b299      	uxth	r1, r3
 8002b92:	7ffb      	ldrb	r3, [r7, #31]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	4413      	add	r3, r2
 8002b98:	b2ca      	uxtb	r2, r1
 8002b9a:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t)data_pec;
 8002b9c:	7ffb      	ldrb	r3, [r7, #31]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	8a3a      	ldrh	r2, [r7, #16]
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 8002baa:	7ffb      	ldrb	r3, [r7, #31]
 8002bac:	3302      	adds	r3, #2
 8002bae:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each LTC681x, this loops starts with the last IC on the stack.
 8002bb0:	7fbb      	ldrb	r3, [r7, #30]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	77bb      	strb	r3, [r7, #30]
 8002bb6:	7fbb      	ldrb	r3, [r7, #30]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1b9      	bne.n	8002b30 <write_68+0x68>
	}

	cs_low(CS_PIN);
 8002bbc:	200a      	movs	r0, #10
 8002bbe:	f001 f863 	bl	8003c88 <cs_low>
	spi_write_array(CMD_LEN, cmd);
 8002bc2:	7efb      	ldrb	r3, [r7, #27]
 8002bc4:	6979      	ldr	r1, [r7, #20]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f001 f88a 	bl	8003ce0 <spi_write_array>
	cs_high(CS_PIN);
 8002bcc:	200a      	movs	r0, #10
 8002bce:	f001 f86b 	bl	8003ca8 <cs_high>

	free(cmd);
 8002bd2:	6978      	ldr	r0, [r7, #20]
 8002bd4:	f006 fa72 	bl	80090bc <free>
}
 8002bd8:	bf00      	nop
 8002bda:	3720      	adds	r7, #32
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <pec15_calc>:

/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	6039      	str	r1, [r7, #0]
 8002bea:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder,addr;
	remainder = 16;//initialize the PEC
 8002bec:	2310      	movs	r3, #16
 8002bee:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	737b      	strb	r3, [r7, #13]
 8002bf4:	e019      	b.n	8002c2a <pec15_calc+0x4a>
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 8002bf6:	89fb      	ldrh	r3, [r7, #14]
 8002bf8:	09db      	lsrs	r3, r3, #7
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	7b7b      	ldrb	r3, [r7, #13]
 8002bfe:	6839      	ldr	r1, [r7, #0]
 8002c00:	440b      	add	r3, r1
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	4053      	eors	r3, r2
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	817b      	strh	r3, [r7, #10]
		remainder = (remainder<<8)^crc15Table[addr];
 8002c0e:	89fb      	ldrh	r3, [r7, #14]
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	b21a      	sxth	r2, r3
 8002c14:	897b      	ldrh	r3, [r7, #10]
 8002c16:	490b      	ldr	r1, [pc, #44]	; (8002c44 <pec15_calc+0x64>)
 8002c18:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002c1c:	b21b      	sxth	r3, r3
 8002c1e:	4053      	eors	r3, r2
 8002c20:	b21b      	sxth	r3, r3
 8002c22:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8002c24:	7b7b      	ldrb	r3, [r7, #13]
 8002c26:	3301      	adds	r3, #1
 8002c28:	737b      	strb	r3, [r7, #13]
 8002c2a:	7b7a      	ldrb	r2, [r7, #13]
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d3e1      	bcc.n	8002bf6 <pec15_calc+0x16>
	}

	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8002c32:	89fb      	ldrh	r3, [r7, #14]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	b29b      	uxth	r3, r3
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	0800bf7c 	.word	0x0800bf7c

08002c48 <LTC681x_wrcfg>:

/* Write the LTC681x CFGRA */
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[]  // A two dimensional array of the configuration data that will be written
                  )
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b0c4      	sub	sp, #272	; 0x110
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4602      	mov	r2, r0
 8002c50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c54:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c58:	6019      	str	r1, [r3, #0]
 8002c5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c5e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002c62:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = {0x00 , 0x01} ;
 8002c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c68:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t c_ic = 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8002c7e:	e048      	b.n	8002d12 <LTC681x_wrcfg+0xca>
	{
		if (ic->isospi_reverse == false)
 8002c80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c84:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8002c8e:	f083 0301 	eor.w	r3, r3, #1
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d004      	beq.n	8002ca2 <LTC681x_wrcfg+0x5a>
		{
			c_ic = current_ic;
 8002c98:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002c9c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8002ca0:	e00b      	b.n	8002cba <LTC681x_wrcfg+0x72>
		}
		else
		{
			c_ic = total_ic - current_ic - 1;
 8002ca2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002ca6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002caa:	781a      	ldrb	r2, [r3, #0]
 8002cac:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
		}

		for (uint8_t data = 0; data<6; data++)
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8002cc0:	e01e      	b.n	8002d00 <LTC681x_wrcfg+0xb8>
		{
			write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 8002cc2:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8002cc6:	22e8      	movs	r2, #232	; 0xe8
 8002cc8:	fb02 f303 	mul.w	r3, r2, r3
 8002ccc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002cd0:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002cd4:	6812      	ldr	r2, [r2, #0]
 8002cd6:	18d1      	adds	r1, r2, r3
 8002cd8:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8002cdc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002ce0:	5c89      	ldrb	r1, [r1, r2]
 8002ce2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002ce6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8002cea:	54d1      	strb	r1, [r2, r3]
			write_count++;
 8002cec:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		for (uint8_t data = 0; data<6; data++)
 8002cf6:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8002d00:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8002d04:	2b05      	cmp	r3, #5
 8002d06:	d9dc      	bls.n	8002cc2 <LTC681x_wrcfg+0x7a>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8002d08:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8002d12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d16:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002d1a:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d3ad      	bcc.n	8002c80 <LTC681x_wrcfg+0x38>
		}
	}
	write_68(total_ic, cmd, write_buffer);
 8002d24:	f107 0208 	add.w	r2, r7, #8
 8002d28:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002d2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d30:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff fec6 	bl	8002ac8 <write_68>
}
 8002d3c:	bf00      	nop
 8002d3e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <LTC681x_adcv>:
/* Starts ADC conversion for cell voltage */
void LTC681x_adcv( uint8_t MD, //ADC Mode
				   uint8_t DCP, //Discharge Permit
				   uint8_t CH //Cell Channels to be measured
                 )
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b084      	sub	sp, #16
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	71fb      	strb	r3, [r7, #7]
 8002d50:	460b      	mov	r3, r1
 8002d52:	71bb      	strb	r3, [r7, #6]
 8002d54:	4613      	mov	r3, r2
 8002d56:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[2];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	105b      	asrs	r3, r3, #1
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	3302      	adds	r3, #2
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	733b      	strb	r3, [r7, #12]
	md_bits = (MD & 0x01) << 7;
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	01db      	lsls	r3, r3, #7
 8002d70:	73fb      	strb	r3, [r7, #15]
	cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8002d72:	79bb      	ldrb	r3, [r7, #6]
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	797b      	ldrb	r3, [r7, #5]
 8002d80:	4413      	add	r3, r2
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	3360      	adds	r3, #96	; 0x60
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	737b      	strb	r3, [r7, #13]

	cmd_68(cmd);
 8002d8a:	f107 030c 	add.w	r3, r7, #12
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff fe70 	bl	8002a74 <cmd_68>
}
 8002d94:	bf00      	nop
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <LTC681x_adax>:

/* Start ADC Conversion for GPIO and Vref2  */
void LTC681x_adax(uint8_t MD, //ADC Mode
				  uint8_t CHG //GPIO Channels to be measured
				  )
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	460a      	mov	r2, r1
 8002da6:	71fb      	strb	r3, [r7, #7]
 8002da8:	4613      	mov	r3, r2
 8002daa:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	105b      	asrs	r3, r3, #1
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
 8002dba:	3304      	adds	r3, #4
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	01db      	lsls	r3, r3, #7
 8002dc4:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG ;
 8002dc6:	7bfa      	ldrb	r2, [r7, #15]
 8002dc8:	79bb      	ldrb	r3, [r7, #6]
 8002dca:	4413      	add	r3, r2
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	3360      	adds	r3, #96	; 0x60
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	727b      	strb	r3, [r7, #9]

	cmd_68(cmd);
 8002dd4:	f107 0308 	add.w	r3, r7, #8
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff fe4b 	bl	8002a74 <cmd_68>
}
 8002dde:	bf00      	nop
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <LTC681x_rdcv>:
*/
uint8_t LTC681x_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // The number of ICs in the system
                     cell_asic *ic // Array of the parsed cell codes
                    )
{
 8002de6:	b5b0      	push	{r4, r5, r7, lr}
 8002de8:	b088      	sub	sp, #32
 8002dea:	af02      	add	r7, sp, #8
 8002dec:	4603      	mov	r3, r0
 8002dee:	603a      	str	r2, [r7, #0]
 8002df0:	71fb      	strb	r3, [r7, #7]
 8002df2:	460b      	mov	r3, r1
 8002df4:	71bb      	strb	r3, [r7, #6]
	int8_t pec_error = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	75fb      	strb	r3, [r7, #23]
	uint8_t *cell_data;
	uint8_t c_ic = 0;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	75bb      	strb	r3, [r7, #22]
	cell_data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8002dfe:	79bb      	ldrb	r3, [r7, #6]
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	4618      	mov	r0, r3
 8002e04:	f006 f952 	bl	80090ac <malloc>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	60bb      	str	r3, [r7, #8]

	if (reg == 0)
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d14b      	bne.n	8002eaa <LTC681x_rdcv+0xc4>
	{
		for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8002e12:	2301      	movs	r3, #1
 8002e14:	757b      	strb	r3, [r7, #21]
 8002e16:	e041      	b.n	8002e9c <LTC681x_rdcv+0xb6>
		{
			LTC681x_rdcv_reg(cell_reg, total_ic,cell_data );
 8002e18:	79b9      	ldrb	r1, [r7, #6]
 8002e1a:	7d7b      	ldrb	r3, [r7, #21]
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 f93d 	bl	800309e <LTC681x_rdcv_reg>
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002e24:	2300      	movs	r3, #0
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	e031      	b.n	8002e8e <LTC681x_rdcv+0xa8>
			{
			if (ic->isospi_reverse == false)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8002e30:	f083 0301 	eor.w	r3, r3, #1
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d002      	beq.n	8002e40 <LTC681x_rdcv+0x5a>
			{
			  c_ic = current_ic;
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	75bb      	strb	r3, [r7, #22]
 8002e3e:	e006      	b.n	8002e4e <LTC681x_rdcv+0x68>
			}
			else
			{
			  c_ic = total_ic - current_ic - 1;
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	79ba      	ldrb	r2, [r7, #6]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	b2d8      	uxtb	r0, r3
												&ic[c_ic].cells.c_codes[0],
 8002e52:	7dbb      	ldrb	r3, [r7, #22]
 8002e54:	22e8      	movs	r2, #232	; 0xe8
 8002e56:	fb02 f303 	mul.w	r3, r2, r3
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8002e5e:	f103 041e 	add.w	r4, r3, #30
												&ic[c_ic].cells.pec_match[0]);
 8002e62:	7dbb      	ldrb	r3, [r7, #22]
 8002e64:	22e8      	movs	r2, #232	; 0xe8
 8002e66:	fb02 f303 	mul.w	r3, r2, r3
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8002e6e:	3342      	adds	r3, #66	; 0x42
 8002e70:	7d79      	ldrb	r1, [r7, #21]
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	4623      	mov	r3, r4
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	f000 f9c2 	bl	8003200 <parse_cells>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	7dfb      	ldrb	r3, [r7, #23]
 8002e82:	4413      	add	r3, r2
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	75fb      	strb	r3, [r7, #23]
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	79bb      	ldrb	r3, [r7, #6]
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	dbc9      	blt.n	8002e2a <LTC681x_rdcv+0x44>
		for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8002e96:	7d7b      	ldrb	r3, [r7, #21]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	757b      	strb	r3, [r7, #21]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8002ea2:	7d7a      	ldrb	r2, [r7, #21]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d9b7      	bls.n	8002e18 <LTC681x_rdcv+0x32>
 8002ea8:	e043      	b.n	8002f32 <LTC681x_rdcv+0x14c>
		}
	}

	else
	{
		LTC681x_rdcv_reg(reg, total_ic,cell_data);
 8002eaa:	79b9      	ldrb	r1, [r7, #6]
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 f8f4 	bl	800309e <LTC681x_rdcv_reg>

		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	e036      	b.n	8002f2a <LTC681x_rdcv+0x144>
		{
			if (ic->isospi_reverse == false)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8002ec2:	f083 0301 	eor.w	r3, r3, #1
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <LTC681x_rdcv+0xec>
			{
			c_ic = current_ic;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	75bb      	strb	r3, [r7, #22]
 8002ed0:	e006      	b.n	8002ee0 <LTC681x_rdcv+0xfa>
			}
			else
			{
			c_ic = total_ic - current_ic - 1;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	79ba      	ldrb	r2, [r7, #6]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	b2d8      	uxtb	r0, r3
 8002ee4:	7dbb      	ldrb	r3, [r7, #22]
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	189c      	adds	r4, r3, r2
											  &ic[c_ic].cells.c_codes[0],
 8002eee:	7dbb      	ldrb	r3, [r7, #22]
 8002ef0:	22e8      	movs	r2, #232	; 0xe8
 8002ef2:	fb02 f303 	mul.w	r3, r2, r3
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8002efa:	f103 051e 	add.w	r5, r3, #30
											  &ic[c_ic].cells.pec_match[0]);
 8002efe:	7dbb      	ldrb	r3, [r7, #22]
 8002f00:	22e8      	movs	r2, #232	; 0xe8
 8002f02:	fb02 f303 	mul.w	r3, r2, r3
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8002f0a:	3342      	adds	r3, #66	; 0x42
 8002f0c:	79f9      	ldrb	r1, [r7, #7]
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	462b      	mov	r3, r5
 8002f12:	4622      	mov	r2, r4
 8002f14:	f000 f974 	bl	8003200 <parse_cells>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	7dfb      	ldrb	r3, [r7, #23]
 8002f1e:	4413      	add	r3, r2
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	75fb      	strb	r3, [r7, #23]
		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	3301      	adds	r3, #1
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	79bb      	ldrb	r3, [r7, #6]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	dbc4      	blt.n	8002ebc <LTC681x_rdcv+0xd6>
		}
	}
	LTC681x_check_pec(total_ic,CELL,ic);
 8002f32:	79bb      	ldrb	r3, [r7, #6]
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	2101      	movs	r1, #1
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 fa17 	bl	800336c <LTC681x_check_pec>
	free(cell_data);
 8002f3e:	68b8      	ldr	r0, [r7, #8]
 8002f40:	f006 f8bc 	bl	80090bc <free>

	return(pec_error);
 8002f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bdb0      	pop	{r4, r5, r7, pc}

08002f4e <LTC681x_rdaux>:
*/
int8_t LTC681x_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
                     uint8_t total_ic,//The number of ICs in the system
                     cell_asic *ic//A two dimensional array of the gpio voltage codes.
                    )
{
 8002f4e:	b590      	push	{r4, r7, lr}
 8002f50:	b089      	sub	sp, #36	; 0x24
 8002f52:	af02      	add	r7, sp, #8
 8002f54:	4603      	mov	r3, r0
 8002f56:	603a      	str	r2, [r7, #0]
 8002f58:	71fb      	strb	r3, [r7, #7]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	71bb      	strb	r3, [r7, #6]
	uint8_t *data;
	int8_t pec_error = 0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	75fb      	strb	r3, [r7, #23]
	uint8_t c_ic =0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	75bb      	strb	r3, [r7, #22]
	data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8002f66:	79bb      	ldrb	r3, [r7, #6]
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f006 f89e 	bl	80090ac <malloc>
 8002f70:	4603      	mov	r3, r0
 8002f72:	60bb      	str	r3, [r7, #8]

	if (reg == 0)
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d147      	bne.n	800300a <LTC681x_rdaux+0xbc>
	{
		for (uint8_t gpio_reg = 1; gpio_reg<ic[0].ic_reg.num_gpio_reg+1; gpio_reg++) //Executes once for each of the LTC681x aux voltage registers
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	757b      	strb	r3, [r7, #21]
 8002f7e:	e03d      	b.n	8002ffc <LTC681x_rdaux+0xae>
		{
			LTC681x_rdaux_reg(gpio_reg, total_ic,data);                 //Reads the raw auxiliary register data into the data[] array
 8002f80:	79b9      	ldrb	r1, [r7, #6]
 8002f82:	7d7b      	ldrb	r3, [r7, #21]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 f8e7 	bl	800315a <LTC681x_rdaux_reg>
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	e02d      	b.n	8002fee <LTC681x_rdaux+0xa0>
			{
				if (ic->isospi_reverse == false)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8002f98:	f083 0301 	eor.w	r3, r3, #1
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <LTC681x_rdaux+0x5a>
				{
				  c_ic = current_ic;
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	75bb      	strb	r3, [r7, #22]
 8002fa6:	e006      	b.n	8002fb6 <LTC681x_rdaux+0x68>
				}
				else
				{
				  c_ic = total_ic - current_ic - 1;
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	79ba      	ldrb	r2, [r7, #6]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	75bb      	strb	r3, [r7, #22]
				}
				pec_error = parse_cells(current_ic,gpio_reg, data,
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	b2d8      	uxtb	r0, r3
										&ic[c_ic].aux.a_codes[0],
 8002fba:	7dbb      	ldrb	r3, [r7, #22]
 8002fbc:	22e8      	movs	r2, #232	; 0xe8
 8002fbe:	fb02 f303 	mul.w	r3, r2, r3
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	4413      	add	r3, r2
				pec_error = parse_cells(current_ic,gpio_reg, data,
 8002fc6:	f103 0448 	add.w	r4, r3, #72	; 0x48
										&ic[c_ic].aux.pec_match[0]);
 8002fca:	7dbb      	ldrb	r3, [r7, #22]
 8002fcc:	22e8      	movs	r2, #232	; 0xe8
 8002fce:	fb02 f303 	mul.w	r3, r2, r3
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	4413      	add	r3, r2
				pec_error = parse_cells(current_ic,gpio_reg, data,
 8002fd6:	335a      	adds	r3, #90	; 0x5a
 8002fd8:	7d79      	ldrb	r1, [r7, #21]
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	4623      	mov	r3, r4
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	f000 f90e 	bl	8003200 <parse_cells>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	75fb      	strb	r3, [r7, #23]
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	3301      	adds	r3, #1
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	79bb      	ldrb	r3, [r7, #6]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	dbcd      	blt.n	8002f92 <LTC681x_rdaux+0x44>
		for (uint8_t gpio_reg = 1; gpio_reg<ic[0].ic_reg.num_gpio_reg+1; gpio_reg++) //Executes once for each of the LTC681x aux voltage registers
 8002ff6:	7d7b      	ldrb	r3, [r7, #21]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	757b      	strb	r3, [r7, #21]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8003002:	7d7a      	ldrb	r2, [r7, #21]
 8003004:	429a      	cmp	r2, r3
 8003006:	d9bb      	bls.n	8002f80 <LTC681x_rdaux+0x32>
 8003008:	e03a      	b.n	8003080 <LTC681x_rdaux+0x132>
			}
		}
	}
	else
	{
		LTC681x_rdaux_reg(reg, total_ic, data);
 800300a:	79b9      	ldrb	r1, [r7, #6]
 800300c:	79fb      	ldrb	r3, [r7, #7]
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	4618      	mov	r0, r3
 8003012:	f000 f8a2 	bl	800315a <LTC681x_rdaux_reg>

		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	e02d      	b.n	8003078 <LTC681x_rdaux+0x12a>
		{
			if (ic->isospi_reverse == false)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8003022:	f083 0301 	eor.w	r3, r3, #1
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <LTC681x_rdaux+0xe4>
			{
			c_ic = current_ic;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	75bb      	strb	r3, [r7, #22]
 8003030:	e006      	b.n	8003040 <LTC681x_rdaux+0xf2>
			}
			else
			{
			c_ic = total_ic - current_ic - 1;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	79ba      	ldrb	r2, [r7, #6]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	b2db      	uxtb	r3, r3
 800303c:	3b01      	subs	r3, #1
 800303e:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = parse_cells(current_ic,reg, data,
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	b2d8      	uxtb	r0, r3
								  &ic[c_ic].aux.a_codes[0],
 8003044:	7dbb      	ldrb	r3, [r7, #22]
 8003046:	22e8      	movs	r2, #232	; 0xe8
 8003048:	fb02 f303 	mul.w	r3, r2, r3
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	4413      	add	r3, r2
			pec_error = parse_cells(current_ic,reg, data,
 8003050:	f103 0448 	add.w	r4, r3, #72	; 0x48
								  &ic[c_ic].aux.pec_match[0]);
 8003054:	7dbb      	ldrb	r3, [r7, #22]
 8003056:	22e8      	movs	r2, #232	; 0xe8
 8003058:	fb02 f303 	mul.w	r3, r2, r3
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	4413      	add	r3, r2
			pec_error = parse_cells(current_ic,reg, data,
 8003060:	335a      	adds	r3, #90	; 0x5a
 8003062:	79f9      	ldrb	r1, [r7, #7]
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	4623      	mov	r3, r4
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	f000 f8c9 	bl	8003200 <parse_cells>
 800306e:	4603      	mov	r3, r0
 8003070:	75fb      	strb	r3, [r7, #23]
		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	3301      	adds	r3, #1
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	79bb      	ldrb	r3, [r7, #6]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	429a      	cmp	r2, r3
 800307e:	dbcd      	blt.n	800301c <LTC681x_rdaux+0xce>
		}
	}
	LTC681x_check_pec(total_ic,AUX,ic);
 8003080:	79bb      	ldrb	r3, [r7, #6]
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	2102      	movs	r1, #2
 8003086:	4618      	mov	r0, r3
 8003088:	f000 f970 	bl	800336c <LTC681x_check_pec>
	free(data);
 800308c:	68b8      	ldr	r0, [r7, #8]
 800308e:	f006 f815 	bl	80090bc <free>

	return (pec_error);
 8003092:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003096:	4618      	mov	r0, r3
 8003098:	371c      	adds	r7, #28
 800309a:	46bd      	mov	sp, r7
 800309c:	bd90      	pop	{r4, r7, pc}

0800309e <LTC681x_rdcv_reg>:
/* Writes the command and reads the raw cell voltage register data */
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
                      uint8_t total_ic, //the number of ICs in the
                      uint8_t *data //An array of the unparsed cell codes
                     )
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b084      	sub	sp, #16
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	4603      	mov	r3, r0
 80030a6:	603a      	str	r2, [r7, #0]
 80030a8:	71fb      	strb	r3, [r7, #7]
 80030aa:	460b      	mov	r3, r1
 80030ac:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; //Number of bytes in each ICs register + 2 bytes for the PEC
 80030ae:	2308      	movs	r3, #8
 80030b0:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //1: RDCVA
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d104      	bne.n	80030c2 <LTC681x_rdcv_reg+0x24>
	{
		cmd[1] = 0x04;
 80030b8:	2304      	movs	r3, #4
 80030ba:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80030bc:	2300      	movs	r3, #0
 80030be:	723b      	strb	r3, [r7, #8]
 80030c0:	e026      	b.n	8003110 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 2) //2: RDCVB
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d104      	bne.n	80030d2 <LTC681x_rdcv_reg+0x34>
	{
		cmd[1] = 0x06;
 80030c8:	2306      	movs	r3, #6
 80030ca:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80030cc:	2300      	movs	r3, #0
 80030ce:	723b      	strb	r3, [r7, #8]
 80030d0:	e01e      	b.n	8003110 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 3) //3: RDCVC
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d104      	bne.n	80030e2 <LTC681x_rdcv_reg+0x44>
	{
		cmd[1] = 0x08;
 80030d8:	2308      	movs	r3, #8
 80030da:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80030dc:	2300      	movs	r3, #0
 80030de:	723b      	strb	r3, [r7, #8]
 80030e0:	e016      	b.n	8003110 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 4) //4: RDCVD
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d104      	bne.n	80030f2 <LTC681x_rdcv_reg+0x54>
	{
		cmd[1] = 0x0A;
 80030e8:	230a      	movs	r3, #10
 80030ea:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80030ec:	2300      	movs	r3, #0
 80030ee:	723b      	strb	r3, [r7, #8]
 80030f0:	e00e      	b.n	8003110 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 5) //4: RDCVE
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	2b05      	cmp	r3, #5
 80030f6:	d104      	bne.n	8003102 <LTC681x_rdcv_reg+0x64>
	{
		cmd[1] = 0x09;
 80030f8:	2309      	movs	r3, #9
 80030fa:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80030fc:	2300      	movs	r3, #0
 80030fe:	723b      	strb	r3, [r7, #8]
 8003100:	e006      	b.n	8003110 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 6) //4: RDCVF
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	2b06      	cmp	r3, #6
 8003106:	d103      	bne.n	8003110 <LTC681x_rdcv_reg+0x72>
	{
		cmd[1] = 0x0B;
 8003108:	230b      	movs	r3, #11
 800310a:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800310c:	2300      	movs	r3, #0
 800310e:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 8003110:	f107 0308 	add.w	r3, r7, #8
 8003114:	4619      	mov	r1, r3
 8003116:	2002      	movs	r0, #2
 8003118:	f7ff fd62 	bl	8002be0 <pec15_calc>
 800311c:	4603      	mov	r3, r0
 800311e:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8003120:	89bb      	ldrh	r3, [r7, #12]
 8003122:	0a1b      	lsrs	r3, r3, #8
 8003124:	b29b      	uxth	r3, r3
 8003126:	b2db      	uxtb	r3, r3
 8003128:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 800312a:	89bb      	ldrh	r3, [r7, #12]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 8003130:	200a      	movs	r0, #10
 8003132:	f000 fda9 	bl	8003c88 <cs_low>
	spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 8003136:	7bfa      	ldrb	r2, [r7, #15]
 8003138:	79bb      	ldrb	r3, [r7, #6]
 800313a:	fb12 f303 	smulbb	r3, r2, r3
 800313e:	b2db      	uxtb	r3, r3
 8003140:	f107 0008 	add.w	r0, r7, #8
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	2104      	movs	r1, #4
 8003148:	f000 fdde 	bl	8003d08 <spi_write_read>
	cs_high(CS_PIN);
 800314c:	200a      	movs	r0, #10
 800314e:	f000 fdab 	bl	8003ca8 <cs_high>
}
 8003152:	bf00      	nop
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <LTC681x_rdaux_reg>:
*/
void LTC681x_rdaux_reg(uint8_t reg, //Determines which GPIO voltage register is read back
                       uint8_t total_ic, //The number of ICs in the system
                       uint8_t *data //Array of the unparsed auxiliary codes
                      )
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	4603      	mov	r3, r0
 8003162:	603a      	str	r2, [r7, #0]
 8003164:	71fb      	strb	r3, [r7, #7]
 8003166:	460b      	mov	r3, r1
 8003168:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; // Number of bytes in the register + 2 bytes for the PEC
 800316a:	2308      	movs	r3, #8
 800316c:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //Read back auxiliary group A
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d104      	bne.n	800317e <LTC681x_rdaux_reg+0x24>
	{
		cmd[1] = 0x0C;
 8003174:	230c      	movs	r3, #12
 8003176:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003178:	2300      	movs	r3, #0
 800317a:	723b      	strb	r3, [r7, #8]
 800317c:	e01b      	b.n	80031b6 <LTC681x_rdaux_reg+0x5c>
	}
	else if (reg == 2)  //Read back auxiliary group B
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	2b02      	cmp	r3, #2
 8003182:	d104      	bne.n	800318e <LTC681x_rdaux_reg+0x34>
	{
		cmd[1] = 0x0E;
 8003184:	230e      	movs	r3, #14
 8003186:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003188:	2300      	movs	r3, #0
 800318a:	723b      	strb	r3, [r7, #8]
 800318c:	e013      	b.n	80031b6 <LTC681x_rdaux_reg+0x5c>
	}
	else if (reg == 3)  //Read back auxiliary group C
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	2b03      	cmp	r3, #3
 8003192:	d104      	bne.n	800319e <LTC681x_rdaux_reg+0x44>
	{
		cmd[1] = 0x0D;
 8003194:	230d      	movs	r3, #13
 8003196:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003198:	2300      	movs	r3, #0
 800319a:	723b      	strb	r3, [r7, #8]
 800319c:	e00b      	b.n	80031b6 <LTC681x_rdaux_reg+0x5c>
	}
	else if (reg == 4)  //Read back auxiliary group D
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d104      	bne.n	80031ae <LTC681x_rdaux_reg+0x54>
	{
		cmd[1] = 0x0F;
 80031a4:	230f      	movs	r3, #15
 80031a6:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80031a8:	2300      	movs	r3, #0
 80031aa:	723b      	strb	r3, [r7, #8]
 80031ac:	e003      	b.n	80031b6 <LTC681x_rdaux_reg+0x5c>
	}
	else          //Read back auxiliary group A
	{
		cmd[1] = 0x0C;
 80031ae:	230c      	movs	r3, #12
 80031b0:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80031b2:	2300      	movs	r3, #0
 80031b4:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 80031b6:	f107 0308 	add.w	r3, r7, #8
 80031ba:	4619      	mov	r1, r3
 80031bc:	2002      	movs	r0, #2
 80031be:	f7ff fd0f 	bl	8002be0 <pec15_calc>
 80031c2:	4603      	mov	r3, r0
 80031c4:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80031c6:	89bb      	ldrh	r3, [r7, #12]
 80031c8:	0a1b      	lsrs	r3, r3, #8
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 80031d0:	89bb      	ldrh	r3, [r7, #12]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 80031d6:	200a      	movs	r0, #10
 80031d8:	f000 fd56 	bl	8003c88 <cs_low>
	spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 80031dc:	7bfa      	ldrb	r2, [r7, #15]
 80031de:	79bb      	ldrb	r3, [r7, #6]
 80031e0:	fb12 f303 	smulbb	r3, r2, r3
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	f107 0008 	add.w	r0, r7, #8
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	2104      	movs	r1, #4
 80031ee:	f000 fd8b 	bl	8003d08 <spi_write_read>
	cs_high(CS_PIN);
 80031f2:	200a      	movs	r0, #10
 80031f4:	f000 fd58 	bl	8003ca8 <cs_high>
}
 80031f8:	bf00      	nop
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <parse_cells>:
					uint8_t cell_reg,  // Type of register
					uint8_t cell_data[], // Unparsed data
					uint16_t *cell_codes, // Parsed data
					uint8_t *ic_pec // PEC error
					)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b088      	sub	sp, #32
 8003204:	af00      	add	r7, sp, #0
 8003206:	60ba      	str	r2, [r7, #8]
 8003208:	607b      	str	r3, [r7, #4]
 800320a:	4603      	mov	r3, r0
 800320c:	73fb      	strb	r3, [r7, #15]
 800320e:	460b      	mov	r3, r1
 8003210:	73bb      	strb	r3, [r7, #14]
	const uint8_t BYT_IN_REG = 6;
 8003212:	2306      	movs	r3, #6
 8003214:	773b      	strb	r3, [r7, #28]
	const uint8_t CELL_IN_REG = 3;
 8003216:	2303      	movs	r3, #3
 8003218:	76fb      	strb	r3, [r7, #27]
	int8_t pec_error = 0;
 800321a:	2300      	movs	r3, #0
 800321c:	77fb      	strb	r3, [r7, #31]
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = current_ic*NUM_RX_BYT; //data counter
 800321e:	7bfb      	ldrb	r3, [r7, #15]
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	77bb      	strb	r3, [r7, #30]


	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8003224:	2300      	movs	r3, #0
 8003226:	777b      	strb	r3, [r7, #29]
 8003228:	e020      	b.n	800326c <parse_cells+0x6c>
	{																		// loops once for each of the 3 codes in the register

		parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each code is received as two bytes and is combined to
 800322a:	7fbb      	ldrb	r3, [r7, #30]
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	4413      	add	r3, r2
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	b29a      	uxth	r2, r3
 8003234:	7fbb      	ldrb	r3, [r7, #30]
 8003236:	3301      	adds	r3, #1
 8003238:	68b9      	ldr	r1, [r7, #8]
 800323a:	440b      	add	r3, r1
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	b29b      	uxth	r3, r3
 8003240:	021b      	lsls	r3, r3, #8
 8003242:	b29b      	uxth	r3, r3
 8003244:	4413      	add	r3, r2
 8003246:	82bb      	strh	r3, [r7, #20]
																				   // create the parsed code
		cell_codes[current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8003248:	7f7a      	ldrb	r2, [r7, #29]
 800324a:	7bbb      	ldrb	r3, [r7, #14]
 800324c:	3b01      	subs	r3, #1
 800324e:	7ef9      	ldrb	r1, [r7, #27]
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	4413      	add	r3, r2
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	4413      	add	r3, r2
 800325c:	8aba      	ldrh	r2, [r7, #20]
 800325e:	801a      	strh	r2, [r3, #0]

		data_counter = data_counter + 2;                       //Because the codes are two bytes, the data counter
 8003260:	7fbb      	ldrb	r3, [r7, #30]
 8003262:	3302      	adds	r3, #2
 8003264:	77bb      	strb	r3, [r7, #30]
	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8003266:	7f7b      	ldrb	r3, [r7, #29]
 8003268:	3301      	adds	r3, #1
 800326a:	777b      	strb	r3, [r7, #29]
 800326c:	7f7a      	ldrb	r2, [r7, #29]
 800326e:	7efb      	ldrb	r3, [r7, #27]
 8003270:	429a      	cmp	r2, r3
 8003272:	d3da      	bcc.n	800322a <parse_cells+0x2a>
															  //must increment by two for each parsed code
	}
	received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8003274:	7fbb      	ldrb	r3, [r7, #30]
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	4413      	add	r3, r2
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	021b      	lsls	r3, r3, #8
 800327e:	b21a      	sxth	r2, r3
 8003280:	7fbb      	ldrb	r3, [r7, #30]
 8003282:	3301      	adds	r3, #1
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	440b      	add	r3, r1
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	b21b      	sxth	r3, r3
 800328c:	4313      	orrs	r3, r2
 800328e:	b21b      	sxth	r3, r3
 8003290:	833b      	strh	r3, [r7, #24]
																			   //after the 6 cell voltage data bytes
	data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8003292:	7bfb      	ldrb	r3, [r7, #15]
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	461a      	mov	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	441a      	add	r2, r3
 800329c:	7f3b      	ldrb	r3, [r7, #28]
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff fc9d 	bl	8002be0 <pec15_calc>
 80032a6:	4603      	mov	r3, r0
 80032a8:	82fb      	strh	r3, [r7, #22]

	if (received_pec != data_pec)
 80032aa:	8b3a      	ldrh	r2, [r7, #24]
 80032ac:	8afb      	ldrh	r3, [r7, #22]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d008      	beq.n	80032c4 <parse_cells+0xc4>
	{
		pec_error = 1;                             //The pec_error variable is simply set negative if any PEC errors
 80032b2:	2301      	movs	r3, #1
 80032b4:	77fb      	strb	r3, [r7, #31]
		ic_pec[cell_reg-1]=1;
 80032b6:	7bbb      	ldrb	r3, [r7, #14]
 80032b8:	3b01      	subs	r3, #1
 80032ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032bc:	4413      	add	r3, r2
 80032be:	2201      	movs	r2, #1
 80032c0:	701a      	strb	r2, [r3, #0]
 80032c2:	e005      	b.n	80032d0 <parse_cells+0xd0>
	}
	else
	{
		ic_pec[cell_reg-1]=0;
 80032c4:	7bbb      	ldrb	r3, [r7, #14]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032ca:	4413      	add	r3, r2
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]
	}
	data_counter=data_counter+2;
 80032d0:	7fbb      	ldrb	r3, [r7, #30]
 80032d2:	3302      	adds	r3, #2
 80032d4:	77bb      	strb	r3, [r7, #30]

	return(pec_error);
 80032d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3720      	adds	r7, #32
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <LTC681x_pollAdc>:
	return(adc_state);
}

/* This function will block operation until the ADC has finished it's conversion */
uint32_t LTC681x_pollAdc()
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 80032ea:	2300      	movs	r3, #0
 80032ec:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 80032f6:	2307      	movs	r3, #7
 80032f8:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 80032fa:	2314      	movs	r3, #20
 80032fc:	717b      	strb	r3, [r7, #5]
	cmd_pec = pec15_calc(2, cmd);
 80032fe:	1d3b      	adds	r3, r7, #4
 8003300:	4619      	mov	r1, r3
 8003302:	2002      	movs	r0, #2
 8003304:	f7ff fc6c 	bl	8002be0 <pec15_calc>
 8003308:	4603      	mov	r3, r0
 800330a:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 800330c:	893b      	ldrh	r3, [r7, #8]
 800330e:	0a1b      	lsrs	r3, r3, #8
 8003310:	b29b      	uxth	r3, r3
 8003312:	b2db      	uxtb	r3, r3
 8003314:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t)(cmd_pec);
 8003316:	893b      	ldrh	r3, [r7, #8]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	71fb      	strb	r3, [r7, #7]

	cs_low(CS_PIN);
 800331c:	200a      	movs	r0, #10
 800331e:	f000 fcb3 	bl	8003c88 <cs_low>
	spi_write_array(4,cmd);
 8003322:	1d3b      	adds	r3, r7, #4
 8003324:	4619      	mov	r1, r3
 8003326:	2004      	movs	r0, #4
 8003328:	f000 fcda 	bl	8003ce0 <spi_write_array>
	while ((counter<200000)&&(finished == 0))
 800332c:	e00d      	b.n	800334a <LTC681x_pollAdc+0x66>
	{
		current_time = spi_read_byte(0xff);
 800332e:	20ff      	movs	r0, #255	; 0xff
 8003330:	f000 fd20 	bl	8003d74 <spi_read_byte>
 8003334:	4603      	mov	r3, r0
 8003336:	72bb      	strb	r3, [r7, #10]
		if (current_time>0)
 8003338:	7abb      	ldrb	r3, [r7, #10]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <LTC681x_pollAdc+0x60>
		{
			finished = 1;
 800333e:	2301      	movs	r3, #1
 8003340:	72fb      	strb	r3, [r7, #11]
 8003342:	e002      	b.n	800334a <LTC681x_pollAdc+0x66>
		}
		else
		{
			counter = counter + 10;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	330a      	adds	r3, #10
 8003348:	60fb      	str	r3, [r7, #12]
	while ((counter<200000)&&(finished == 0))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4a06      	ldr	r2, [pc, #24]	; (8003368 <LTC681x_pollAdc+0x84>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d802      	bhi.n	8003358 <LTC681x_pollAdc+0x74>
 8003352:	7afb      	ldrb	r3, [r7, #11]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0ea      	beq.n	800332e <LTC681x_pollAdc+0x4a>
		}
	}
	cs_high(CS_PIN);
 8003358:	200a      	movs	r0, #10
 800335a:	f000 fca5 	bl	8003ca8 <cs_high>

	return(counter);
 800335e:	68fb      	ldr	r3, [r7, #12]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	00030d3f 	.word	0x00030d3f

0800336c <LTC681x_check_pec>:
/* Helper function that increments PEC counters */
void LTC681x_check_pec(uint8_t total_ic, //Number of ICs in the system
					   uint8_t reg, //Type of Register
					   cell_asic *ic //A two dimensional array that stores the data
					   )
{
 800336c:	b480      	push	{r7}
 800336e:	b08b      	sub	sp, #44	; 0x2c
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	603a      	str	r2, [r7, #0]
 8003376:	71fb      	strb	r3, [r7, #7]
 8003378:	460b      	mov	r3, r1
 800337a:	71bb      	strb	r3, [r7, #6]
	switch (reg)
 800337c:	79bb      	ldrb	r3, [r7, #6]
 800337e:	2b04      	cmp	r3, #4
 8003380:	f200 8191 	bhi.w	80036a6 <LTC681x_check_pec+0x33a>
 8003384:	a201      	add	r2, pc, #4	; (adr r2, 800338c <LTC681x_check_pec+0x20>)
 8003386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338a:	bf00      	nop
 800338c:	080033a1 	.word	0x080033a1
 8003390:	0800349d 	.word	0x0800349d
 8003394:	0800354f 	.word	0x0800354f
 8003398:	080035fb 	.word	0x080035fb
 800339c:	0800341f 	.word	0x0800341f
	{
		case LTC681x_CFGR:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80033a0:	2300      	movs	r3, #0
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24
 80033a4:	e036      	b.n	8003414 <LTC681x_check_pec+0xa8>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].config.rx_pec_match;
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	22e8      	movs	r2, #232	; 0xe8
 80033aa:	fb02 f303 	mul.w	r3, r2, r3
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	4413      	add	r3, r2
 80033b2:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	22e8      	movs	r2, #232	; 0xe8
 80033ba:	fb02 f303 	mul.w	r3, r2, r3
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	4413      	add	r3, r2
 80033c2:	7b9b      	ldrb	r3, [r3, #14]
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	20e8      	movs	r0, #232	; 0xe8
 80033ca:	fb00 f303 	mul.w	r3, r0, r3
 80033ce:	6838      	ldr	r0, [r7, #0]
 80033d0:	4403      	add	r3, r0
 80033d2:	440a      	add	r2, r1
 80033d4:	b292      	uxth	r2, r2
 80033d6:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].config.rx_pec_match;
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	22e8      	movs	r2, #232	; 0xe8
 80033de:	fb02 f303 	mul.w	r3, r2, r3
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	4413      	add	r3, r2
 80033e6:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	22e8      	movs	r2, #232	; 0xe8
 80033ee:	fb02 f303 	mul.w	r3, r2, r3
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	4413      	add	r3, r2
 80033f6:	7b9b      	ldrb	r3, [r3, #14]
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	20e8      	movs	r0, #232	; 0xe8
 80033fe:	fb00 f303 	mul.w	r3, r0, r3
 8003402:	6838      	ldr	r0, [r7, #0]
 8003404:	4403      	add	r3, r0
 8003406:	440a      	add	r2, r1
 8003408:	b292      	uxth	r2, r2
 800340a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	3301      	adds	r3, #1
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003418:	429a      	cmp	r2, r3
 800341a:	dbc4      	blt.n	80033a6 <LTC681x_check_pec+0x3a>
		  }
		break;
 800341c:	e144      	b.n	80036a8 <LTC681x_check_pec+0x33c>

		case CFGRB:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800341e:	2300      	movs	r3, #0
 8003420:	623b      	str	r3, [r7, #32]
 8003422:	e036      	b.n	8003492 <LTC681x_check_pec+0x126>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configb.rx_pec_match;
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	22e8      	movs	r2, #232	; 0xe8
 8003428:	fb02 f303 	mul.w	r3, r2, r3
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	4413      	add	r3, r2
 8003430:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	22e8      	movs	r2, #232	; 0xe8
 8003438:	fb02 f303 	mul.w	r3, r2, r3
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	4413      	add	r3, r2
 8003440:	7f5b      	ldrb	r3, [r3, #29]
 8003442:	b29a      	uxth	r2, r3
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	20e8      	movs	r0, #232	; 0xe8
 8003448:	fb00 f303 	mul.w	r3, r0, r3
 800344c:	6838      	ldr	r0, [r7, #0]
 800344e:	4403      	add	r3, r0
 8003450:	440a      	add	r2, r1
 8003452:	b292      	uxth	r2, r2
 8003454:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configb.rx_pec_match;
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	22e8      	movs	r2, #232	; 0xe8
 800345c:	fb02 f303 	mul.w	r3, r2, r3
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	4413      	add	r3, r2
 8003464:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	22e8      	movs	r2, #232	; 0xe8
 800346c:	fb02 f303 	mul.w	r3, r2, r3
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	4413      	add	r3, r2
 8003474:	7f5b      	ldrb	r3, [r3, #29]
 8003476:	b29a      	uxth	r2, r3
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	20e8      	movs	r0, #232	; 0xe8
 800347c:	fb00 f303 	mul.w	r3, r0, r3
 8003480:	6838      	ldr	r0, [r7, #0]
 8003482:	4403      	add	r3, r0
 8003484:	440a      	add	r2, r1
 8003486:	b292      	uxth	r2, r2
 8003488:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	3301      	adds	r3, #1
 8003490:	623b      	str	r3, [r7, #32]
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	6a3a      	ldr	r2, [r7, #32]
 8003496:	429a      	cmp	r2, r3
 8003498:	dbc4      	blt.n	8003424 <LTC681x_check_pec+0xb8>
		  }
		break;
 800349a:	e105      	b.n	80036a8 <LTC681x_check_pec+0x33c>
		case CELL:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800349c:	2300      	movs	r3, #0
 800349e:	61fb      	str	r3, [r7, #28]
 80034a0:	e050      	b.n	8003544 <LTC681x_check_pec+0x1d8>
		  {
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 80034a2:	2300      	movs	r3, #0
 80034a4:	61bb      	str	r3, [r7, #24]
 80034a6:	e043      	b.n	8003530 <LTC681x_check_pec+0x1c4>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].cells.pec_match[i];
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	22e8      	movs	r2, #232	; 0xe8
 80034ac:	fb02 f303 	mul.w	r3, r2, r3
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	4413      	add	r3, r2
 80034b4:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	22e8      	movs	r2, #232	; 0xe8
 80034bc:	fb02 f303 	mul.w	r3, r2, r3
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	441a      	add	r2, r3
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	4413      	add	r3, r2
 80034c8:	3342      	adds	r3, #66	; 0x42
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	20e8      	movs	r0, #232	; 0xe8
 80034d2:	fb00 f303 	mul.w	r3, r0, r3
 80034d6:	6838      	ldr	r0, [r7, #0]
 80034d8:	4403      	add	r3, r0
 80034da:	440a      	add	r2, r1
 80034dc:	b292      	uxth	r2, r2
 80034de:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.cell_pec[i] = ic[current_ic].crc_count.cell_pec[i] + ic[current_ic].cells.pec_match[i];
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	22e8      	movs	r2, #232	; 0xe8
 80034e6:	fb02 f303 	mul.w	r3, r2, r3
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	441a      	add	r2, r3
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	3360      	adds	r3, #96	; 0x60
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	4413      	add	r3, r2
 80034f6:	8899      	ldrh	r1, [r3, #4]
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	22e8      	movs	r2, #232	; 0xe8
 80034fc:	fb02 f303 	mul.w	r3, r2, r3
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	441a      	add	r2, r3
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	4413      	add	r3, r2
 8003508:	3342      	adds	r3, #66	; 0x42
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	b29b      	uxth	r3, r3
 800350e:	69fa      	ldr	r2, [r7, #28]
 8003510:	20e8      	movs	r0, #232	; 0xe8
 8003512:	fb00 f202 	mul.w	r2, r0, r2
 8003516:	6838      	ldr	r0, [r7, #0]
 8003518:	4402      	add	r2, r0
 800351a:	440b      	add	r3, r1
 800351c:	b299      	uxth	r1, r3
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	3360      	adds	r3, #96	; 0x60
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	4413      	add	r3, r2
 8003526:	460a      	mov	r2, r1
 8003528:	809a      	strh	r2, [r3, #4]
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	3301      	adds	r3, #1
 800352e:	61bb      	str	r3, [r7, #24]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8003536:	461a      	mov	r2, r3
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	4293      	cmp	r3, r2
 800353c:	dbb4      	blt.n	80034a8 <LTC681x_check_pec+0x13c>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3301      	adds	r3, #1
 8003542:	61fb      	str	r3, [r7, #28]
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	69fa      	ldr	r2, [r7, #28]
 8003548:	429a      	cmp	r2, r3
 800354a:	dbaa      	blt.n	80034a2 <LTC681x_check_pec+0x136>
			}
		  }
		break;
 800354c:	e0ac      	b.n	80036a8 <LTC681x_check_pec+0x33c>
		case AUX:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800354e:	2300      	movs	r3, #0
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	e04d      	b.n	80035f0 <LTC681x_check_pec+0x284>
		  {
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8003554:	2300      	movs	r3, #0
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	e040      	b.n	80035dc <LTC681x_check_pec+0x270>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + (ic[current_ic].aux.pec_match[i]);
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	22e8      	movs	r2, #232	; 0xe8
 800355e:	fb02 f303 	mul.w	r3, r2, r3
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	4413      	add	r3, r2
 8003566:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	22e8      	movs	r2, #232	; 0xe8
 800356e:	fb02 f303 	mul.w	r3, r2, r3
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	441a      	add	r2, r3
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4413      	add	r3, r2
 800357a:	335a      	adds	r3, #90	; 0x5a
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	b29a      	uxth	r2, r3
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	20e8      	movs	r0, #232	; 0xe8
 8003584:	fb00 f303 	mul.w	r3, r0, r3
 8003588:	6838      	ldr	r0, [r7, #0]
 800358a:	4403      	add	r3, r0
 800358c:	440a      	add	r2, r1
 800358e:	b292      	uxth	r2, r2
 8003590:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.aux_pec[i] = ic[current_ic].crc_count.aux_pec[i] + (ic[current_ic].aux.pec_match[i]);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	22e8      	movs	r2, #232	; 0xe8
 8003598:	fb02 f303 	mul.w	r3, r2, r3
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	4413      	add	r3, r2
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	3268      	adds	r2, #104	; 0x68
 80035a4:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	22e8      	movs	r2, #232	; 0xe8
 80035ac:	fb02 f303 	mul.w	r3, r2, r3
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	441a      	add	r2, r3
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	4413      	add	r3, r2
 80035b8:	335a      	adds	r3, #90	; 0x5a
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	b29a      	uxth	r2, r3
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	20e8      	movs	r0, #232	; 0xe8
 80035c2:	fb00 f303 	mul.w	r3, r0, r3
 80035c6:	6838      	ldr	r0, [r7, #0]
 80035c8:	4403      	add	r3, r0
 80035ca:	440a      	add	r2, r1
 80035cc:	b291      	uxth	r1, r2
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	3268      	adds	r2, #104	; 0x68
 80035d2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	3301      	adds	r3, #1
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80035e2:	461a      	mov	r2, r3
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4293      	cmp	r3, r2
 80035e8:	dbb7      	blt.n	800355a <LTC681x_check_pec+0x1ee>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	3301      	adds	r3, #1
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	dbad      	blt.n	8003554 <LTC681x_check_pec+0x1e8>
			}
		  }

		break;
 80035f8:	e056      	b.n	80036a8 <LTC681x_check_pec+0x33c>
		case STAT:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	e04d      	b.n	800369c <LTC681x_check_pec+0x330>
		  {

			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8003600:	2300      	movs	r3, #0
 8003602:	60bb      	str	r3, [r7, #8]
 8003604:	e040      	b.n	8003688 <LTC681x_check_pec+0x31c>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].stat.pec_match[i];
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	22e8      	movs	r2, #232	; 0xe8
 800360a:	fb02 f303 	mul.w	r3, r2, r3
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	4413      	add	r3, r2
 8003612:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	22e8      	movs	r2, #232	; 0xe8
 800361a:	fb02 f303 	mul.w	r3, r2, r3
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	441a      	add	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	4413      	add	r3, r2
 8003626:	336b      	adds	r3, #107	; 0x6b
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	20e8      	movs	r0, #232	; 0xe8
 8003630:	fb00 f303 	mul.w	r3, r0, r3
 8003634:	6838      	ldr	r0, [r7, #0]
 8003636:	4403      	add	r3, r0
 8003638:	440a      	add	r2, r1
 800363a:	b292      	uxth	r2, r2
 800363c:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.stat_pec[i] = ic[current_ic].crc_count.stat_pec[i] + ic[current_ic].stat.pec_match[i];
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	22e8      	movs	r2, #232	; 0xe8
 8003644:	fb02 f303 	mul.w	r3, r2, r3
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	4413      	add	r3, r2
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	326c      	adds	r2, #108	; 0x6c
 8003650:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	22e8      	movs	r2, #232	; 0xe8
 8003658:	fb02 f303 	mul.w	r3, r2, r3
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	441a      	add	r2, r3
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	4413      	add	r3, r2
 8003664:	336b      	adds	r3, #107	; 0x6b
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	b29a      	uxth	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	20e8      	movs	r0, #232	; 0xe8
 800366e:	fb00 f303 	mul.w	r3, r0, r3
 8003672:	6838      	ldr	r0, [r7, #0]
 8003674:	4403      	add	r3, r0
 8003676:	440a      	add	r2, r1
 8003678:	b291      	uxth	r1, r2
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	326c      	adds	r2, #108	; 0x6c
 800367e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	3301      	adds	r3, #1
 8003686:	60bb      	str	r3, [r7, #8]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800368e:	3b01      	subs	r3, #1
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	429a      	cmp	r2, r3
 8003694:	dbb7      	blt.n	8003606 <LTC681x_check_pec+0x29a>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	3301      	adds	r3, #1
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	dbad      	blt.n	8003600 <LTC681x_check_pec+0x294>
			}
		  }
		break;
 80036a4:	e000      	b.n	80036a8 <LTC681x_check_pec+0x33c>
		default:
		break;
 80036a6:	bf00      	nop
	}
}
 80036a8:	bf00      	nop
 80036aa:	372c      	adds	r7, #44	; 0x2c
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <LTC681x_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC681x_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that stores the data
							 )
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	6039      	str	r1, [r7, #0]
 80036be:	71fb      	strb	r3, [r7, #7]
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	e051      	b.n	800376a <LTC681x_reset_crc_count+0xb6>
	{
		ic[current_ic].crc_count.pec_count = 0;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	22e8      	movs	r2, #232	; 0xe8
 80036ca:	fb02 f303 	mul.w	r3, r2, r3
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	4413      	add	r3, r2
 80036d2:	2200      	movs	r2, #0
 80036d4:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		ic[current_ic].crc_count.cfgr_pec = 0;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	22e8      	movs	r2, #232	; 0xe8
 80036dc:	fb02 f303 	mul.w	r3, r2, r3
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	4413      	add	r3, r2
 80036e4:	2200      	movs	r2, #0
 80036e6:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		for (int i=0; i<6; i++)
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	e00e      	b.n	800370e <LTC681x_reset_crc_count+0x5a>
		{
			ic[current_ic].crc_count.cell_pec[i]=0;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	22e8      	movs	r2, #232	; 0xe8
 80036f4:	fb02 f303 	mul.w	r3, r2, r3
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	441a      	add	r2, r3
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	3360      	adds	r3, #96	; 0x60
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	4413      	add	r3, r2
 8003704:	2200      	movs	r2, #0
 8003706:	809a      	strh	r2, [r3, #4]
		for (int i=0; i<6; i++)
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	3301      	adds	r3, #1
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	2b05      	cmp	r3, #5
 8003712:	dded      	ble.n	80036f0 <LTC681x_reset_crc_count+0x3c>

		}
		for (int i=0; i<4; i++)
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	e00d      	b.n	8003736 <LTC681x_reset_crc_count+0x82>
		{
			ic[current_ic].crc_count.aux_pec[i]=0;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	22e8      	movs	r2, #232	; 0xe8
 800371e:	fb02 f303 	mul.w	r3, r2, r3
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	4413      	add	r3, r2
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	3268      	adds	r2, #104	; 0x68
 800372a:	2100      	movs	r1, #0
 800372c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int i=0; i<4; i++)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	3301      	adds	r3, #1
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2b03      	cmp	r3, #3
 800373a:	ddee      	ble.n	800371a <LTC681x_reset_crc_count+0x66>
		}
		for (int i=0; i<2; i++)
 800373c:	2300      	movs	r3, #0
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	e00d      	b.n	800375e <LTC681x_reset_crc_count+0xaa>
		{
			ic[current_ic].crc_count.stat_pec[i]=0;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	22e8      	movs	r2, #232	; 0xe8
 8003746:	fb02 f303 	mul.w	r3, r2, r3
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	4413      	add	r3, r2
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	326c      	adds	r2, #108	; 0x6c
 8003752:	2100      	movs	r1, #0
 8003754:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int i=0; i<2; i++)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	3301      	adds	r3, #1
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b01      	cmp	r3, #1
 8003762:	ddee      	ble.n	8003742 <LTC681x_reset_crc_count+0x8e>
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	3301      	adds	r3, #1
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	429a      	cmp	r2, r3
 8003770:	dba9      	blt.n	80036c6 <LTC681x_reset_crc_count+0x12>
		}
	}
}
 8003772:	bf00      	nop
 8003774:	bf00      	nop
 8003776:	371c      	adds	r7, #28
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <LTC681x_init_cfg>:

/* Helper function to initialize CFG variables */
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that stores the data
					  )
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	6039      	str	r1, [r7, #0]
 800378a:	71fb      	strb	r3, [r7, #7]
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 800378c:	2300      	movs	r3, #0
 800378e:	73fb      	strb	r3, [r7, #15]
 8003790:	e015      	b.n	80037be <LTC681x_init_cfg+0x3e>
	{
		for (int j =0; j<6; j++)
 8003792:	2300      	movs	r3, #0
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	e00c      	b.n	80037b2 <LTC681x_init_cfg+0x32>
		{
		  ic[current_ic].config.tx_data[j] = 0;
 8003798:	7bfb      	ldrb	r3, [r7, #15]
 800379a:	22e8      	movs	r2, #232	; 0xe8
 800379c:	fb02 f303 	mul.w	r3, r2, r3
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	441a      	add	r2, r3
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	4413      	add	r3, r2
 80037a8:	2200      	movs	r2, #0
 80037aa:	701a      	strb	r2, [r3, #0]
		for (int j =0; j<6; j++)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	3301      	adds	r3, #1
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2b05      	cmp	r3, #5
 80037b6:	ddef      	ble.n	8003798 <LTC681x_init_cfg+0x18>
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
 80037ba:	3301      	adds	r3, #1
 80037bc:	73fb      	strb	r3, [r7, #15]
 80037be:	7bfa      	ldrb	r2, [r7, #15]
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d3e5      	bcc.n	8003792 <LTC681x_init_cfg+0x12>
		}
	}
}
 80037c6:	bf00      	nop
 80037c8:	bf00      	nop
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <LTC681x_set_cfgr>:
					 bool dcc[12], // The DCC bits
					 bool dcto[4], // The Dcto bits
					 uint16_t uv, // The UV value
					 uint16_t  ov // The OV value
					 )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6039      	str	r1, [r7, #0]
 80037dc:	4611      	mov	r1, r2
 80037de:	461a      	mov	r2, r3
 80037e0:	4603      	mov	r3, r0
 80037e2:	71fb      	strb	r3, [r7, #7]
 80037e4:	460b      	mov	r3, r1
 80037e6:	71bb      	strb	r3, [r7, #6]
 80037e8:	4613      	mov	r3, r2
 80037ea:	717b      	strb	r3, [r7, #5]
	LTC681x_set_cfgr_refon(nIC,ic,refon);
 80037ec:	79ba      	ldrb	r2, [r7, #6]
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	6839      	ldr	r1, [r7, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 f828 	bl	8003848 <LTC681x_set_cfgr_refon>
	LTC681x_set_cfgr_adcopt(nIC,ic,adcopt);
 80037f8:	797a      	ldrb	r2, [r7, #5]
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	6839      	ldr	r1, [r7, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 f856 	bl	80038b0 <LTC681x_set_cfgr_adcopt>
	LTC681x_set_cfgr_gpio(nIC,ic,gpio);
 8003804:	79fb      	ldrb	r3, [r7, #7]
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	6839      	ldr	r1, [r7, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f000 f884 	bl	8003918 <LTC681x_set_cfgr_gpio>
	LTC681x_set_cfgr_dis(nIC,ic,dcc);
 8003810:	79fb      	ldrb	r3, [r7, #7]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	6839      	ldr	r1, [r7, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f000 f8ce 	bl	80039b8 <LTC681x_set_cfgr_dis>
	LTC681x_set_cfgr_dcto(nIC,ic,dcto);
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	6839      	ldr	r1, [r7, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f000 f957 	bl	8003ad6 <LTC681x_set_cfgr_dcto>
	LTC681x_set_cfgr_uv(nIC, ic, uv);
 8003828:	8bba      	ldrh	r2, [r7, #28]
 800382a:	79fb      	ldrb	r3, [r7, #7]
 800382c:	6839      	ldr	r1, [r7, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f000 f9a1 	bl	8003b76 <LTC681x_set_cfgr_uv>
	LTC681x_set_cfgr_ov(nIC, ic, ov);
 8003834:	8c3a      	ldrh	r2, [r7, #32]
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	6839      	ldr	r1, [r7, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f000 f9e1 	bl	8003c02 <LTC681x_set_cfgr_ov>
}
 8003840:	bf00      	nop
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <LTC681x_set_cfgr_refon>:

/* Helper function to set the REFON bit */
void LTC681x_set_cfgr_refon(uint8_t nIC, cell_asic *ic, bool refon)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	6039      	str	r1, [r7, #0]
 8003852:	71fb      	strb	r3, [r7, #7]
 8003854:	4613      	mov	r3, r2
 8003856:	71bb      	strb	r3, [r7, #6]
	if (refon) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x04;
 8003858:	79bb      	ldrb	r3, [r7, #6]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d011      	beq.n	8003882 <LTC681x_set_cfgr_refon+0x3a>
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	22e8      	movs	r2, #232	; 0xe8
 8003862:	fb02 f303 	mul.w	r3, r2, r3
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	4413      	add	r3, r2
 800386a:	781a      	ldrb	r2, [r3, #0]
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	21e8      	movs	r1, #232	; 0xe8
 8003870:	fb01 f303 	mul.w	r3, r1, r3
 8003874:	6839      	ldr	r1, [r7, #0]
 8003876:	440b      	add	r3, r1
 8003878:	f042 0204 	orr.w	r2, r2, #4
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
}
 8003880:	e010      	b.n	80038a4 <LTC681x_set_cfgr_refon+0x5c>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
 8003882:	79fb      	ldrb	r3, [r7, #7]
 8003884:	22e8      	movs	r2, #232	; 0xe8
 8003886:	fb02 f303 	mul.w	r3, r2, r3
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	4413      	add	r3, r2
 800388e:	781a      	ldrb	r2, [r3, #0]
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	21e8      	movs	r1, #232	; 0xe8
 8003894:	fb01 f303 	mul.w	r3, r1, r3
 8003898:	6839      	ldr	r1, [r7, #0]
 800389a:	440b      	add	r3, r1
 800389c:	f022 0204 	bic.w	r2, r2, #4
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	701a      	strb	r2, [r3, #0]
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <LTC681x_set_cfgr_adcopt>:

/* Helper function to set the ADCOPT bit */
void LTC681x_set_cfgr_adcopt(uint8_t nIC, cell_asic *ic, bool adcopt)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	6039      	str	r1, [r7, #0]
 80038ba:	71fb      	strb	r3, [r7, #7]
 80038bc:	4613      	mov	r3, r2
 80038be:	71bb      	strb	r3, [r7, #6]
	if (adcopt) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x01;
 80038c0:	79bb      	ldrb	r3, [r7, #6]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d011      	beq.n	80038ea <LTC681x_set_cfgr_adcopt+0x3a>
 80038c6:	79fb      	ldrb	r3, [r7, #7]
 80038c8:	22e8      	movs	r2, #232	; 0xe8
 80038ca:	fb02 f303 	mul.w	r3, r2, r3
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	4413      	add	r3, r2
 80038d2:	781a      	ldrb	r2, [r3, #0]
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	21e8      	movs	r1, #232	; 0xe8
 80038d8:	fb01 f303 	mul.w	r3, r1, r3
 80038dc:	6839      	ldr	r1, [r7, #0]
 80038de:	440b      	add	r3, r1
 80038e0:	f042 0201 	orr.w	r2, r2, #1
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
}
 80038e8:	e010      	b.n	800390c <LTC681x_set_cfgr_adcopt+0x5c>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	22e8      	movs	r2, #232	; 0xe8
 80038ee:	fb02 f303 	mul.w	r3, r2, r3
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	4413      	add	r3, r2
 80038f6:	781a      	ldrb	r2, [r3, #0]
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	21e8      	movs	r1, #232	; 0xe8
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	6839      	ldr	r1, [r7, #0]
 8003902:	440b      	add	r3, r1
 8003904:	f022 0201 	bic.w	r2, r2, #1
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	701a      	strb	r2, [r3, #0]
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <LTC681x_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void LTC681x_set_cfgr_gpio(uint8_t nIC, cell_asic *ic,bool gpio[5])
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
 800391e:	4603      	mov	r3, r0
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
 8003924:	73fb      	strb	r3, [r7, #15]
	for (int i =0; i<5; i++)
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	e03b      	b.n	80039a4 <LTC681x_set_cfgr_gpio+0x8c>
	{
		if (gpio[i])ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|(0x01<<(i+3));
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	4413      	add	r3, r2
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d018      	beq.n	800396a <LTC681x_set_cfgr_gpio+0x52>
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	22e8      	movs	r2, #232	; 0xe8
 800393c:	fb02 f303 	mul.w	r3, r2, r3
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	4413      	add	r3, r2
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	b25a      	sxtb	r2, r3
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	3303      	adds	r3, #3
 800394c:	2101      	movs	r1, #1
 800394e:	fa01 f303 	lsl.w	r3, r1, r3
 8003952:	b25b      	sxtb	r3, r3
 8003954:	4313      	orrs	r3, r2
 8003956:	b259      	sxtb	r1, r3
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	22e8      	movs	r2, #232	; 0xe8
 800395c:	fb02 f303 	mul.w	r3, r2, r3
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	4413      	add	r3, r2
 8003964:	b2ca      	uxtb	r2, r1
 8003966:	701a      	strb	r2, [r3, #0]
 8003968:	e019      	b.n	800399e <LTC681x_set_cfgr_gpio+0x86>
		else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&(~(0x01<<(i+3)));
 800396a:	7bfb      	ldrb	r3, [r7, #15]
 800396c:	22e8      	movs	r2, #232	; 0xe8
 800396e:	fb02 f303 	mul.w	r3, r2, r3
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	4413      	add	r3, r2
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	b25a      	sxtb	r2, r3
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	3303      	adds	r3, #3
 800397e:	2101      	movs	r1, #1
 8003980:	fa01 f303 	lsl.w	r3, r1, r3
 8003984:	b25b      	sxtb	r3, r3
 8003986:	43db      	mvns	r3, r3
 8003988:	b25b      	sxtb	r3, r3
 800398a:	4013      	ands	r3, r2
 800398c:	b259      	sxtb	r1, r3
 800398e:	7bfb      	ldrb	r3, [r7, #15]
 8003990:	22e8      	movs	r2, #232	; 0xe8
 8003992:	fb02 f303 	mul.w	r3, r2, r3
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	4413      	add	r3, r2
 800399a:	b2ca      	uxtb	r2, r1
 800399c:	701a      	strb	r2, [r3, #0]
	for (int i =0; i<5; i++)
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	3301      	adds	r3, #1
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	ddc0      	ble.n	800392c <LTC681x_set_cfgr_gpio+0x14>
	}
}
 80039aa:	bf00      	nop
 80039ac:	bf00      	nop
 80039ae:	371c      	adds	r7, #28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <LTC681x_set_cfgr_dis>:

/* Helper function to control discharge */
void LTC681x_set_cfgr_dis(uint8_t nIC, cell_asic *ic,bool dcc[12])
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
 80039c4:	73fb      	strb	r3, [r7, #15]
	for (int i =0; i<8; i++)
 80039c6:	2300      	movs	r3, #0
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	e039      	b.n	8003a40 <LTC681x_set_cfgr_dis+0x88>
	{
		if (dcc[i])ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]|(0x01<<i);
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	4413      	add	r3, r2
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d017      	beq.n	8003a08 <LTC681x_set_cfgr_dis+0x50>
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	22e8      	movs	r2, #232	; 0xe8
 80039dc:	fb02 f303 	mul.w	r3, r2, r3
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	4413      	add	r3, r2
 80039e4:	791b      	ldrb	r3, [r3, #4]
 80039e6:	b25a      	sxtb	r2, r3
 80039e8:	2101      	movs	r1, #1
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	fa01 f303 	lsl.w	r3, r1, r3
 80039f0:	b25b      	sxtb	r3, r3
 80039f2:	4313      	orrs	r3, r2
 80039f4:	b259      	sxtb	r1, r3
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	22e8      	movs	r2, #232	; 0xe8
 80039fa:	fb02 f303 	mul.w	r3, r2, r3
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	4413      	add	r3, r2
 8003a02:	b2ca      	uxtb	r2, r1
 8003a04:	711a      	strb	r2, [r3, #4]
 8003a06:	e018      	b.n	8003a3a <LTC681x_set_cfgr_dis+0x82>
		else ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]& (~(0x01<<i));
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
 8003a0a:	22e8      	movs	r2, #232	; 0xe8
 8003a0c:	fb02 f303 	mul.w	r3, r2, r3
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	4413      	add	r3, r2
 8003a14:	791b      	ldrb	r3, [r3, #4]
 8003a16:	b25a      	sxtb	r2, r3
 8003a18:	2101      	movs	r1, #1
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a20:	b25b      	sxtb	r3, r3
 8003a22:	43db      	mvns	r3, r3
 8003a24:	b25b      	sxtb	r3, r3
 8003a26:	4013      	ands	r3, r2
 8003a28:	b259      	sxtb	r1, r3
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
 8003a2c:	22e8      	movs	r2, #232	; 0xe8
 8003a2e:	fb02 f303 	mul.w	r3, r2, r3
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	4413      	add	r3, r2
 8003a36:	b2ca      	uxtb	r2, r1
 8003a38:	711a      	strb	r2, [r3, #4]
	for (int i =0; i<8; i++)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	2b07      	cmp	r3, #7
 8003a44:	ddc2      	ble.n	80039cc <LTC681x_set_cfgr_dis+0x14>
	}
	for (int i =0; i<4; i++)
 8003a46:	2300      	movs	r3, #0
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	e03a      	b.n	8003ac2 <LTC681x_set_cfgr_dis+0x10a>
	{
		if (dcc[i+8])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<i);
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	3308      	adds	r3, #8
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	4413      	add	r3, r2
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d017      	beq.n	8003a8a <LTC681x_set_cfgr_dis+0xd2>
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
 8003a5c:	22e8      	movs	r2, #232	; 0xe8
 8003a5e:	fb02 f303 	mul.w	r3, r2, r3
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	4413      	add	r3, r2
 8003a66:	795b      	ldrb	r3, [r3, #5]
 8003a68:	b25a      	sxtb	r2, r3
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a72:	b25b      	sxtb	r3, r3
 8003a74:	4313      	orrs	r3, r2
 8003a76:	b259      	sxtb	r1, r3
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	22e8      	movs	r2, #232	; 0xe8
 8003a7c:	fb02 f303 	mul.w	r3, r2, r3
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	4413      	add	r3, r2
 8003a84:	b2ca      	uxtb	r2, r1
 8003a86:	715a      	strb	r2, [r3, #5]
 8003a88:	e018      	b.n	8003abc <LTC681x_set_cfgr_dis+0x104>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<i));
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	22e8      	movs	r2, #232	; 0xe8
 8003a8e:	fb02 f303 	mul.w	r3, r2, r3
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	4413      	add	r3, r2
 8003a96:	795b      	ldrb	r3, [r3, #5]
 8003a98:	b25a      	sxtb	r2, r3
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa2:	b25b      	sxtb	r3, r3
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	b25b      	sxtb	r3, r3
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	b259      	sxtb	r1, r3
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	22e8      	movs	r2, #232	; 0xe8
 8003ab0:	fb02 f303 	mul.w	r3, r2, r3
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	b2ca      	uxtb	r2, r1
 8003aba:	715a      	strb	r2, [r3, #5]
	for (int i =0; i<4; i++)
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	ddc1      	ble.n	8003a4c <LTC681x_set_cfgr_dis+0x94>
	}
}
 8003ac8:	bf00      	nop
 8003aca:	bf00      	nop
 8003acc:	371c      	adds	r7, #28
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <LTC681x_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic,bool dcto[4])
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b087      	sub	sp, #28
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	4603      	mov	r3, r0
 8003ade:	60b9      	str	r1, [r7, #8]
 8003ae0:	607a      	str	r2, [r7, #4]
 8003ae2:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<4;i++)
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	e03b      	b.n	8003b62 <LTC681x_set_cfgr_dcto+0x8c>
	{
		if(dcto[i])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<(i+4));
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	4413      	add	r3, r2
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d018      	beq.n	8003b28 <LTC681x_set_cfgr_dcto+0x52>
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	22e8      	movs	r2, #232	; 0xe8
 8003afa:	fb02 f303 	mul.w	r3, r2, r3
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	4413      	add	r3, r2
 8003b02:	795b      	ldrb	r3, [r3, #5]
 8003b04:	b25a      	sxtb	r2, r3
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b10:	b25b      	sxtb	r3, r3
 8003b12:	4313      	orrs	r3, r2
 8003b14:	b259      	sxtb	r1, r3
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
 8003b18:	22e8      	movs	r2, #232	; 0xe8
 8003b1a:	fb02 f303 	mul.w	r3, r2, r3
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	4413      	add	r3, r2
 8003b22:	b2ca      	uxtb	r2, r1
 8003b24:	715a      	strb	r2, [r3, #5]
 8003b26:	e019      	b.n	8003b5c <LTC681x_set_cfgr_dcto+0x86>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<(i+4)));
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	22e8      	movs	r2, #232	; 0xe8
 8003b2c:	fb02 f303 	mul.w	r3, r2, r3
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	4413      	add	r3, r2
 8003b34:	795b      	ldrb	r3, [r3, #5]
 8003b36:	b25a      	sxtb	r2, r3
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b42:	b25b      	sxtb	r3, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	b25b      	sxtb	r3, r3
 8003b48:	4013      	ands	r3, r2
 8003b4a:	b259      	sxtb	r1, r3
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	22e8      	movs	r2, #232	; 0xe8
 8003b50:	fb02 f303 	mul.w	r3, r2, r3
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	4413      	add	r3, r2
 8003b58:	b2ca      	uxtb	r2, r1
 8003b5a:	715a      	strb	r2, [r3, #5]
	for(int i =0;i<4;i++)
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2b03      	cmp	r3, #3
 8003b66:	ddc0      	ble.n	8003aea <LTC681x_set_cfgr_dcto+0x14>
	}
}
 8003b68:	bf00      	nop
 8003b6a:	bf00      	nop
 8003b6c:	371c      	adds	r7, #28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <LTC681x_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic *ic,uint16_t uv)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b085      	sub	sp, #20
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	6039      	str	r1, [r7, #0]
 8003b80:	71fb      	strb	r3, [r7, #7]
 8003b82:	4613      	mov	r3, r2
 8003b84:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (uv/16)-1;
 8003b86:	88bb      	ldrh	r3, [r7, #4]
 8003b88:	091b      	lsrs	r3, r3, #4
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	81fb      	strh	r3, [r7, #14]
	ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	22e8      	movs	r2, #232	; 0xe8
 8003b94:	fb02 f303 	mul.w	r3, r2, r3
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	89fa      	ldrh	r2, [r7, #14]
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	705a      	strb	r2, [r3, #1]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0xF0;
 8003ba2:	79fb      	ldrb	r3, [r7, #7]
 8003ba4:	22e8      	movs	r2, #232	; 0xe8
 8003ba6:	fb02 f303 	mul.w	r3, r2, r3
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	4413      	add	r3, r2
 8003bae:	789a      	ldrb	r2, [r3, #2]
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	21e8      	movs	r1, #232	; 0xe8
 8003bb4:	fb01 f303 	mul.w	r3, r1, r3
 8003bb8:	6839      	ldr	r1, [r7, #0]
 8003bba:	440b      	add	r3, r1
 8003bbc:	f022 020f 	bic.w	r2, r2, #15
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x0F00 & tmp)>>8);
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	22e8      	movs	r2, #232	; 0xe8
 8003bc8:	fb02 f303 	mul.w	r3, r2, r3
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	4413      	add	r3, r2
 8003bd0:	789b      	ldrb	r3, [r3, #2]
 8003bd2:	b25a      	sxtb	r2, r3
 8003bd4:	89fb      	ldrh	r3, [r7, #14]
 8003bd6:	0a1b      	lsrs	r3, r3, #8
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	b25b      	sxtb	r3, r3
 8003bdc:	f003 030f 	and.w	r3, r3, #15
 8003be0:	b25b      	sxtb	r3, r3
 8003be2:	4313      	orrs	r3, r2
 8003be4:	b259      	sxtb	r1, r3
 8003be6:	79fb      	ldrb	r3, [r7, #7]
 8003be8:	22e8      	movs	r2, #232	; 0xe8
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	b2ca      	uxtb	r2, r1
 8003bf4:	709a      	strb	r2, [r3, #2]
}
 8003bf6:	bf00      	nop
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <LTC681x_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void LTC681x_set_cfgr_ov(uint8_t nIC, cell_asic *ic,uint16_t ov)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b085      	sub	sp, #20
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	4603      	mov	r3, r0
 8003c0a:	6039      	str	r1, [r7, #0]
 8003c0c:	71fb      	strb	r3, [r7, #7]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (ov/16);
 8003c12:	88bb      	ldrh	r3, [r7, #4]
 8003c14:	091b      	lsrs	r3, r3, #4
 8003c16:	81fb      	strh	r3, [r7, #14]
	ic[nIC].config.tx_data[3] = 0x00FF & (tmp>>4);
 8003c18:	89fb      	ldrh	r3, [r7, #14]
 8003c1a:	091b      	lsrs	r3, r3, #4
 8003c1c:	b299      	uxth	r1, r3
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	22e8      	movs	r2, #232	; 0xe8
 8003c22:	fb02 f303 	mul.w	r3, r2, r3
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	4413      	add	r3, r2
 8003c2a:	b2ca      	uxtb	r2, r1
 8003c2c:	70da      	strb	r2, [r3, #3]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0x0F;
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	22e8      	movs	r2, #232	; 0xe8
 8003c32:	fb02 f303 	mul.w	r3, r2, r3
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	4413      	add	r3, r2
 8003c3a:	789a      	ldrb	r2, [r3, #2]
 8003c3c:	79fb      	ldrb	r3, [r7, #7]
 8003c3e:	21e8      	movs	r1, #232	; 0xe8
 8003c40:	fb01 f303 	mul.w	r3, r1, r3
 8003c44:	6839      	ldr	r1, [r7, #0]
 8003c46:	440b      	add	r3, r1
 8003c48:	f002 020f 	and.w	r2, r2, #15
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x000F & tmp)<<4);
 8003c50:	79fb      	ldrb	r3, [r7, #7]
 8003c52:	22e8      	movs	r2, #232	; 0xe8
 8003c54:	fb02 f303 	mul.w	r3, r2, r3
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	789b      	ldrb	r3, [r3, #2]
 8003c5e:	b25a      	sxtb	r2, r3
 8003c60:	89fb      	ldrh	r3, [r7, #14]
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	b25b      	sxtb	r3, r3
 8003c66:	4313      	orrs	r3, r2
 8003c68:	b259      	sxtb	r1, r3
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	22e8      	movs	r2, #232	; 0xe8
 8003c6e:	fb02 f303 	mul.w	r3, r2, r3
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	4413      	add	r3, r2
 8003c76:	b2ca      	uxtb	r2, r1
 8003c78:	709a      	strb	r2, [r3, #2]
}
 8003c7a:	bf00      	nop
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
	...

08003c88 <cs_low>:
#include "stm32f4xx_hal.h"

extern SPI_HandleTypeDef hspi1;

void cs_low(uint8_t pin)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8003c92:	2200      	movs	r2, #0
 8003c94:	2108      	movs	r1, #8
 8003c96:	4803      	ldr	r0, [pc, #12]	; (8003ca4 <cs_low+0x1c>)
 8003c98:	f002 fb30 	bl	80062fc <HAL_GPIO_WritePin>
}
 8003c9c:	bf00      	nop
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40020800 	.word	0x40020800

08003ca8 <cs_high>:

void cs_high(uint8_t pin)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	2108      	movs	r1, #8
 8003cb6:	4803      	ldr	r0, [pc, #12]	; (8003cc4 <cs_high+0x1c>)
 8003cb8:	f002 fb20 	bl	80062fc <HAL_GPIO_WritePin>
}
 8003cbc:	bf00      	nop
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40020800 	.word	0x40020800

08003cc8 <delay_u>:

void delay_u(uint16_t micro)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	80fb      	strh	r3, [r7, #6]
  HAL_Delay(1);
 8003cd2:	2001      	movs	r0, #1
 8003cd4:	f001 f84e 	bl	8004d74 <HAL_Delay>
}
 8003cd8:	bf00      	nop
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <spi_write_array>:
Writes an array of bytes out of the SPI port
*/
void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
                     uint8_t data[] //Array of bytes to be written on the SPI port
                    )
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	6039      	str	r1, [r7, #0]
 8003cea:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi1, data, len, 100);
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	2364      	movs	r3, #100	; 0x64
 8003cf2:	6839      	ldr	r1, [r7, #0]
 8003cf4:	4803      	ldr	r0, [pc, #12]	; (8003d04 <spi_write_array+0x24>)
 8003cf6:	f003 f98c 	bl	8007012 <HAL_SPI_Transmit>
}
 8003cfa:	bf00      	nop
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20002930 	.word	0x20002930

08003d08 <spi_write_read>:
void spi_write_read(uint8_t tx_Data[],//array of data to be written on SPI port
                    uint8_t tx_len, //length of the tx data arry
                    uint8_t *rx_data,//Input: array that will store the data read by the SPI port
                    uint8_t rx_len //Option: number of bytes to be read from the SPI port
                   )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	607a      	str	r2, [r7, #4]
 8003d12:	461a      	mov	r2, r3
 8003d14:	460b      	mov	r3, r1
 8003d16:	72fb      	strb	r3, [r7, #11]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	72bb      	strb	r3, [r7, #10]
  for (uint8_t i = 0; i < tx_len; i++)
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	75fb      	strb	r3, [r7, #23]
 8003d20:	e00a      	b.n	8003d38 <spi_write_read+0x30>
  {
    HAL_SPI_Transmit(&hspi1, &tx_Data[i], 1, 100);
 8003d22:	7dfb      	ldrb	r3, [r7, #23]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	18d1      	adds	r1, r2, r3
 8003d28:	2364      	movs	r3, #100	; 0x64
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	4810      	ldr	r0, [pc, #64]	; (8003d70 <spi_write_read+0x68>)
 8003d2e:	f003 f970 	bl	8007012 <HAL_SPI_Transmit>
  for (uint8_t i = 0; i < tx_len; i++)
 8003d32:	7dfb      	ldrb	r3, [r7, #23]
 8003d34:	3301      	adds	r3, #1
 8003d36:	75fb      	strb	r3, [r7, #23]
 8003d38:	7dfa      	ldrb	r2, [r7, #23]
 8003d3a:	7afb      	ldrb	r3, [r7, #11]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d3f0      	bcc.n	8003d22 <spi_write_read+0x1a>
  }

  for (uint8_t i = 0; i < rx_len; i++)
 8003d40:	2300      	movs	r3, #0
 8003d42:	75bb      	strb	r3, [r7, #22]
 8003d44:	e00a      	b.n	8003d5c <spi_write_read+0x54>
  {
	HAL_SPI_Receive(&hspi1, &rx_data[i], 1, 100);
 8003d46:	7dbb      	ldrb	r3, [r7, #22]
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	18d1      	adds	r1, r2, r3
 8003d4c:	2364      	movs	r3, #100	; 0x64
 8003d4e:	2201      	movs	r2, #1
 8003d50:	4807      	ldr	r0, [pc, #28]	; (8003d70 <spi_write_read+0x68>)
 8003d52:	f003 fa9a 	bl	800728a <HAL_SPI_Receive>
  for (uint8_t i = 0; i < rx_len; i++)
 8003d56:	7dbb      	ldrb	r3, [r7, #22]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	75bb      	strb	r3, [r7, #22]
 8003d5c:	7dba      	ldrb	r2, [r7, #22]
 8003d5e:	7abb      	ldrb	r3, [r7, #10]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d3f0      	bcc.n	8003d46 <spi_write_read+0x3e>
  }

}
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	20002930 	.word	0x20002930

08003d74 <spi_read_byte>:


uint8_t spi_read_byte(uint8_t tx_dat)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	71fb      	strb	r3, [r7, #7]
  uint8_t data;
  HAL_SPI_Receive(&hspi1, &data, 1, 100);
 8003d7e:	f107 010f 	add.w	r1, r7, #15
 8003d82:	2364      	movs	r3, #100	; 0x64
 8003d84:	2201      	movs	r2, #1
 8003d86:	4804      	ldr	r0, [pc, #16]	; (8003d98 <spi_read_byte+0x24>)
 8003d88:	f003 fa7f 	bl	800728a <HAL_SPI_Receive>
  return(data);
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	20002930 	.word	0x20002930

08003d9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003da0:	f000 ff76 	bl	8004c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003da4:	f000 f842 	bl	8003e2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003da8:	f000 fb46 	bl	8004438 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003dac:	f000 fb1a 	bl	80043e4 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8003db0:	f000 f8fc 	bl	8003fac <MX_CAN1_Init>
  MX_SPI1_Init();
 8003db4:	f000 f966 	bl	8004084 <MX_SPI1_Init>
  MX_CAN2_Init();
 8003db8:	f000 f92e 	bl	8004018 <MX_CAN2_Init>
  MX_TIM1_Init();
 8003dbc:	f000 f998 	bl	80040f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003dc0:	f000 fa42 	bl	8004248 <MX_TIM2_Init>
  MX_TIM4_Init();
 8003dc4:	f000 fac0 	bl	8004348 <MX_TIM4_Init>
  MX_ADC1_Init();
 8003dc8:	f000 f89e 	bl	8003f08 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  FEB_BMS_State_Validate();
 8003dcc:	f7fd f942 	bl	8001054 <FEB_BMS_State_Validate>
  FEB_LTC6811_Setup();
 8003dd0:	f7fd fc6c 	bl	80016ac <FEB_LTC6811_Setup>
  FEB_BMS_Shutdown_Startup();
 8003dd4:	f7fd f912 	bl	8000ffc <FEB_BMS_Shutdown_Startup>
  FEB_BMS_Precharge_Open();
 8003dd8:	f7fd f8f8 	bl	8000fcc <FEB_BMS_Precharge_Open>
  FEB_CAN_Init();
 8003ddc:	f7fd f942 	bl	8001064 <FEB_CAN_Init>
  FEB_CAN_Charger_Init();
 8003de0:	f7fd f99a 	bl	8001118 <FEB_CAN_Charger_Init>
  FEB_Fan_Init();
 8003de4:	f7fd fbb9 	bl	800155a <FEB_Fan_Init>
  FEB_Timer_Init();
 8003de8:	f7fe fcee 	bl	80027c8 <FEB_Timer_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// *********************** Reset State ***********************
	FEB_LTC6811_Clear_Voltage();
 8003dec:	f7fe f8ba 	bl	8001f64 <FEB_LTC6811_Clear_Voltage>
	FEB_LTC6811_Clear_Temperature();
 8003df0:	f7fe fc5c 	bl	80026ac <FEB_LTC6811_Clear_Temperature>

	// *********************** Cell Voltage ***********************
	FEB_LTC6811_Poll_Voltage();
 8003df4:	f7fd fcc8 	bl	8001788 <FEB_LTC6811_Poll_Voltage>
  	FEB_LTC6811_Validate_Voltage();
 8003df8:	f7fd ffc2 	bl	8001d80 <FEB_LTC6811_Validate_Voltage>
	FEB_LTC6811_UART_Transmit_Voltage();
 8003dfc:	f7fd fffe 	bl	8001dfc <FEB_LTC6811_UART_Transmit_Voltage>

	// *********************** Cell Temperature ***********************
	FEB_LTC6811_Poll_Temperature();
 8003e00:	f7fe f8dc 	bl	8001fbc <FEB_LTC6811_Poll_Temperature>
  	FEB_LTC6811_Validate_Temperature();
 8003e04:	f7fe fb92 	bl	800252c <FEB_LTC6811_Validate_Temperature>
	FEB_LTC6811_UART_Transmit_Temperature();
 8003e08:	f7fe fbd4 	bl	80025b4 <FEB_LTC6811_UART_Transmit_Temperature>

	// *********************** IVT ***********************
	FEB_CAN_IVT_Process();
 8003e0c:	f7fd fb0c 	bl	8001428 <FEB_CAN_IVT_Process>

	// *********************** Cell Balance ***********************
	FEB_LTC6811_Balance_Cells();
 8003e10:	f7fd fefe 	bl	8001c10 <FEB_LTC6811_Balance_Cells>
	FEB_LTC6811_UART_Transmit_Discharge();
 8003e14:	f7fd ff30 	bl	8001c78 <FEB_LTC6811_UART_Transmit_Discharge>

	// *********************** Charger ***********************
	FEB_CAN_Charger_Process(&hcan1);
 8003e18:	4803      	ldr	r0, [pc, #12]	; (8003e28 <main+0x8c>)
 8003e1a:	f7fd fa26 	bl	800126a <FEB_CAN_Charger_Process>

	if (FEB_CAN_CHARGER_START_CHARGE == 1) {
		HAL_Delay(1000);	// 1Hz
	} else {
		HAL_Delay(200);		// 5Hz
 8003e1e:	20c8      	movs	r0, #200	; 0xc8
 8003e20:	f000 ffa8 	bl	8004d74 <HAL_Delay>
	FEB_LTC6811_Clear_Voltage();
 8003e24:	e7e2      	b.n	8003dec <main+0x50>
 8003e26:	bf00      	nop
 8003e28:	200028e0 	.word	0x200028e0

08003e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b094      	sub	sp, #80	; 0x50
 8003e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e32:	f107 031c 	add.w	r3, r7, #28
 8003e36:	2234      	movs	r2, #52	; 0x34
 8003e38:	2100      	movs	r1, #0
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f005 f946 	bl	80090cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e40:	f107 0308 	add.w	r3, r7, #8
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	605a      	str	r2, [r3, #4]
 8003e4a:	609a      	str	r2, [r3, #8]
 8003e4c:	60da      	str	r2, [r3, #12]
 8003e4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e50:	2300      	movs	r3, #0
 8003e52:	607b      	str	r3, [r7, #4]
 8003e54:	4b2a      	ldr	r3, [pc, #168]	; (8003f00 <SystemClock_Config+0xd4>)
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	4a29      	ldr	r2, [pc, #164]	; (8003f00 <SystemClock_Config+0xd4>)
 8003e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	6413      	str	r3, [r2, #64]	; 0x40
 8003e60:	4b27      	ldr	r3, [pc, #156]	; (8003f00 <SystemClock_Config+0xd4>)
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e68:	607b      	str	r3, [r7, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	4b24      	ldr	r3, [pc, #144]	; (8003f04 <SystemClock_Config+0xd8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003e78:	4a22      	ldr	r2, [pc, #136]	; (8003f04 <SystemClock_Config+0xd8>)
 8003e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	4b20      	ldr	r3, [pc, #128]	; (8003f04 <SystemClock_Config+0xd8>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e88:	603b      	str	r3, [r7, #0]
 8003e8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e90:	2301      	movs	r3, #1
 8003e92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e94:	2310      	movs	r3, #16
 8003e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e98:	2302      	movs	r3, #2
 8003e9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003ea0:	2308      	movs	r3, #8
 8003ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003eac:	2302      	movs	r3, #2
 8003eae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003eb4:	f107 031c 	add.w	r3, r7, #28
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f002 fd83 	bl	80069c4 <HAL_RCC_OscConfig>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003ec4:	f000 fb22 	bl	800450c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ec8:	230f      	movs	r3, #15
 8003eca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ecc:	2302      	movs	r3, #2
 8003ece:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003ed4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003ed8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003eda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ede:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003ee0:	f107 0308 	add.w	r3, r7, #8
 8003ee4:	2104      	movs	r1, #4
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f002 fa22 	bl	8006330 <HAL_RCC_ClockConfig>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8003ef2:	f000 fb0b 	bl	800450c <Error_Handler>
  }
}
 8003ef6:	bf00      	nop
 8003ef8:	3750      	adds	r7, #80	; 0x50
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40023800 	.word	0x40023800
 8003f04:	40007000 	.word	0x40007000

08003f08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003f0e:	463b      	mov	r3, r7
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	605a      	str	r2, [r3, #4]
 8003f16:	609a      	str	r2, [r3, #8]
 8003f18:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003f1a:	4b21      	ldr	r3, [pc, #132]	; (8003fa0 <MX_ADC1_Init+0x98>)
 8003f1c:	4a21      	ldr	r2, [pc, #132]	; (8003fa4 <MX_ADC1_Init+0x9c>)
 8003f1e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003f20:	4b1f      	ldr	r3, [pc, #124]	; (8003fa0 <MX_ADC1_Init+0x98>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003f26:	4b1e      	ldr	r3, [pc, #120]	; (8003fa0 <MX_ADC1_Init+0x98>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003f2c:	4b1c      	ldr	r3, [pc, #112]	; (8003fa0 <MX_ADC1_Init+0x98>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003f32:	4b1b      	ldr	r3, [pc, #108]	; (8003fa0 <MX_ADC1_Init+0x98>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003f38:	4b19      	ldr	r3, [pc, #100]	; (8003fa0 <MX_ADC1_Init+0x98>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003f40:	4b17      	ldr	r3, [pc, #92]	; (8003fa0 <MX_ADC1_Init+0x98>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003f46:	4b16      	ldr	r3, [pc, #88]	; (8003fa0 <MX_ADC1_Init+0x98>)
 8003f48:	4a17      	ldr	r2, [pc, #92]	; (8003fa8 <MX_ADC1_Init+0xa0>)
 8003f4a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003f4c:	4b14      	ldr	r3, [pc, #80]	; (8003fa0 <MX_ADC1_Init+0x98>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003f52:	4b13      	ldr	r3, [pc, #76]	; (8003fa0 <MX_ADC1_Init+0x98>)
 8003f54:	2201      	movs	r2, #1
 8003f56:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003f58:	4b11      	ldr	r3, [pc, #68]	; (8003fa0 <MX_ADC1_Init+0x98>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003f60:	4b0f      	ldr	r3, [pc, #60]	; (8003fa0 <MX_ADC1_Init+0x98>)
 8003f62:	2201      	movs	r2, #1
 8003f64:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003f66:	480e      	ldr	r0, [pc, #56]	; (8003fa0 <MX_ADC1_Init+0x98>)
 8003f68:	f000 ff28 	bl	8004dbc <HAL_ADC_Init>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003f72:	f000 facb 	bl	800450c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003f76:	2308      	movs	r3, #8
 8003f78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f82:	463b      	mov	r3, r7
 8003f84:	4619      	mov	r1, r3
 8003f86:	4806      	ldr	r0, [pc, #24]	; (8003fa0 <MX_ADC1_Init+0x98>)
 8003f88:	f000 ff5c 	bl	8004e44 <HAL_ADC_ConfigChannel>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8003f92:	f000 fabb 	bl	800450c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003f96:	bf00      	nop
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	20002898 	.word	0x20002898
 8003fa4:	40012000 	.word	0x40012000
 8003fa8:	0f000001 	.word	0x0f000001

08003fac <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003fb0:	4b17      	ldr	r3, [pc, #92]	; (8004010 <MX_CAN1_Init+0x64>)
 8003fb2:	4a18      	ldr	r2, [pc, #96]	; (8004014 <MX_CAN1_Init+0x68>)
 8003fb4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8003fb6:	4b16      	ldr	r3, [pc, #88]	; (8004010 <MX_CAN1_Init+0x64>)
 8003fb8:	2210      	movs	r2, #16
 8003fba:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003fbc:	4b14      	ldr	r3, [pc, #80]	; (8004010 <MX_CAN1_Init+0x64>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003fc2:	4b13      	ldr	r3, [pc, #76]	; (8004010 <MX_CAN1_Init+0x64>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8003fc8:	4b11      	ldr	r3, [pc, #68]	; (8004010 <MX_CAN1_Init+0x64>)
 8003fca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003fce:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003fd0:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <MX_CAN1_Init+0x64>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003fd6:	4b0e      	ldr	r3, [pc, #56]	; (8004010 <MX_CAN1_Init+0x64>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003fdc:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <MX_CAN1_Init+0x64>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003fe2:	4b0b      	ldr	r3, [pc, #44]	; (8004010 <MX_CAN1_Init+0x64>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003fe8:	4b09      	ldr	r3, [pc, #36]	; (8004010 <MX_CAN1_Init+0x64>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003fee:	4b08      	ldr	r3, [pc, #32]	; (8004010 <MX_CAN1_Init+0x64>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003ff4:	4b06      	ldr	r3, [pc, #24]	; (8004010 <MX_CAN1_Init+0x64>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003ffa:	4805      	ldr	r0, [pc, #20]	; (8004010 <MX_CAN1_Init+0x64>)
 8003ffc:	f001 f950 	bl	80052a0 <HAL_CAN_Init>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8004006:	f000 fa81 	bl	800450c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800400a:	bf00      	nop
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	200028e0 	.word	0x200028e0
 8004014:	40006400 	.word	0x40006400

08004018 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800401c:	4b17      	ldr	r3, [pc, #92]	; (800407c <MX_CAN2_Init+0x64>)
 800401e:	4a18      	ldr	r2, [pc, #96]	; (8004080 <MX_CAN2_Init+0x68>)
 8004020:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8004022:	4b16      	ldr	r3, [pc, #88]	; (800407c <MX_CAN2_Init+0x64>)
 8004024:	2210      	movs	r2, #16
 8004026:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8004028:	4b14      	ldr	r3, [pc, #80]	; (800407c <MX_CAN2_Init+0x64>)
 800402a:	2200      	movs	r2, #0
 800402c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800402e:	4b13      	ldr	r3, [pc, #76]	; (800407c <MX_CAN2_Init+0x64>)
 8004030:	2200      	movs	r2, #0
 8004032:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8004034:	4b11      	ldr	r3, [pc, #68]	; (800407c <MX_CAN2_Init+0x64>)
 8004036:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800403a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800403c:	4b0f      	ldr	r3, [pc, #60]	; (800407c <MX_CAN2_Init+0x64>)
 800403e:	2200      	movs	r2, #0
 8004040:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8004042:	4b0e      	ldr	r3, [pc, #56]	; (800407c <MX_CAN2_Init+0x64>)
 8004044:	2200      	movs	r2, #0
 8004046:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8004048:	4b0c      	ldr	r3, [pc, #48]	; (800407c <MX_CAN2_Init+0x64>)
 800404a:	2200      	movs	r2, #0
 800404c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800404e:	4b0b      	ldr	r3, [pc, #44]	; (800407c <MX_CAN2_Init+0x64>)
 8004050:	2200      	movs	r2, #0
 8004052:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8004054:	4b09      	ldr	r3, [pc, #36]	; (800407c <MX_CAN2_Init+0x64>)
 8004056:	2200      	movs	r2, #0
 8004058:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800405a:	4b08      	ldr	r3, [pc, #32]	; (800407c <MX_CAN2_Init+0x64>)
 800405c:	2200      	movs	r2, #0
 800405e:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8004060:	4b06      	ldr	r3, [pc, #24]	; (800407c <MX_CAN2_Init+0x64>)
 8004062:	2200      	movs	r2, #0
 8004064:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8004066:	4805      	ldr	r0, [pc, #20]	; (800407c <MX_CAN2_Init+0x64>)
 8004068:	f001 f91a 	bl	80052a0 <HAL_CAN_Init>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8004072:	f000 fa4b 	bl	800450c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8004076:	bf00      	nop
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	20002908 	.word	0x20002908
 8004080:	40006800 	.word	0x40006800

08004084 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004088:	4b17      	ldr	r3, [pc, #92]	; (80040e8 <MX_SPI1_Init+0x64>)
 800408a:	4a18      	ldr	r2, [pc, #96]	; (80040ec <MX_SPI1_Init+0x68>)
 800408c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800408e:	4b16      	ldr	r3, [pc, #88]	; (80040e8 <MX_SPI1_Init+0x64>)
 8004090:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004094:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004096:	4b14      	ldr	r3, [pc, #80]	; (80040e8 <MX_SPI1_Init+0x64>)
 8004098:	2200      	movs	r2, #0
 800409a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800409c:	4b12      	ldr	r3, [pc, #72]	; (80040e8 <MX_SPI1_Init+0x64>)
 800409e:	2200      	movs	r2, #0
 80040a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80040a2:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <MX_SPI1_Init+0x64>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80040a8:	4b0f      	ldr	r3, [pc, #60]	; (80040e8 <MX_SPI1_Init+0x64>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80040ae:	4b0e      	ldr	r3, [pc, #56]	; (80040e8 <MX_SPI1_Init+0x64>)
 80040b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80040b6:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <MX_SPI1_Init+0x64>)
 80040b8:	2228      	movs	r2, #40	; 0x28
 80040ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040bc:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <MX_SPI1_Init+0x64>)
 80040be:	2200      	movs	r2, #0
 80040c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80040c2:	4b09      	ldr	r3, [pc, #36]	; (80040e8 <MX_SPI1_Init+0x64>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040c8:	4b07      	ldr	r3, [pc, #28]	; (80040e8 <MX_SPI1_Init+0x64>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <MX_SPI1_Init+0x64>)
 80040d0:	220a      	movs	r2, #10
 80040d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80040d4:	4804      	ldr	r0, [pc, #16]	; (80040e8 <MX_SPI1_Init+0x64>)
 80040d6:	f002 ff13 	bl	8006f00 <HAL_SPI_Init>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80040e0:	f000 fa14 	bl	800450c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80040e4:	bf00      	nop
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20002930 	.word	0x20002930
 80040ec:	40013000 	.word	0x40013000

080040f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b096      	sub	sp, #88	; 0x58
 80040f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	605a      	str	r2, [r3, #4]
 8004100:	609a      	str	r2, [r3, #8]
 8004102:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004104:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800410e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	605a      	str	r2, [r3, #4]
 8004118:	609a      	str	r2, [r3, #8]
 800411a:	60da      	str	r2, [r3, #12]
 800411c:	611a      	str	r2, [r3, #16]
 800411e:	615a      	str	r2, [r3, #20]
 8004120:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004122:	1d3b      	adds	r3, r7, #4
 8004124:	2220      	movs	r2, #32
 8004126:	2100      	movs	r1, #0
 8004128:	4618      	mov	r0, r3
 800412a:	f004 ffcf 	bl	80090cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800412e:	4b44      	ldr	r3, [pc, #272]	; (8004240 <MX_TIM1_Init+0x150>)
 8004130:	4a44      	ldr	r2, [pc, #272]	; (8004244 <MX_TIM1_Init+0x154>)
 8004132:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004134:	4b42      	ldr	r3, [pc, #264]	; (8004240 <MX_TIM1_Init+0x150>)
 8004136:	2200      	movs	r2, #0
 8004138:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800413a:	4b41      	ldr	r3, [pc, #260]	; (8004240 <MX_TIM1_Init+0x150>)
 800413c:	2200      	movs	r2, #0
 800413e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8004140:	4b3f      	ldr	r3, [pc, #252]	; (8004240 <MX_TIM1_Init+0x150>)
 8004142:	22ff      	movs	r2, #255	; 0xff
 8004144:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004146:	4b3e      	ldr	r3, [pc, #248]	; (8004240 <MX_TIM1_Init+0x150>)
 8004148:	2200      	movs	r2, #0
 800414a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800414c:	4b3c      	ldr	r3, [pc, #240]	; (8004240 <MX_TIM1_Init+0x150>)
 800414e:	2200      	movs	r2, #0
 8004150:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004152:	4b3b      	ldr	r3, [pc, #236]	; (8004240 <MX_TIM1_Init+0x150>)
 8004154:	2200      	movs	r2, #0
 8004156:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004158:	4839      	ldr	r0, [pc, #228]	; (8004240 <MX_TIM1_Init+0x150>)
 800415a:	f003 fc79 	bl	8007a50 <HAL_TIM_Base_Init>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8004164:	f000 f9d2 	bl	800450c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800416c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800416e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004172:	4619      	mov	r1, r3
 8004174:	4832      	ldr	r0, [pc, #200]	; (8004240 <MX_TIM1_Init+0x150>)
 8004176:	f003 ff07 	bl	8007f88 <HAL_TIM_ConfigClockSource>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8004180:	f000 f9c4 	bl	800450c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004184:	482e      	ldr	r0, [pc, #184]	; (8004240 <MX_TIM1_Init+0x150>)
 8004186:	f003 fd1b 	bl	8007bc0 <HAL_TIM_PWM_Init>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d001      	beq.n	8004194 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8004190:	f000 f9bc 	bl	800450c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004194:	2300      	movs	r3, #0
 8004196:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004198:	2300      	movs	r3, #0
 800419a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800419c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80041a0:	4619      	mov	r1, r3
 80041a2:	4827      	ldr	r0, [pc, #156]	; (8004240 <MX_TIM1_Init+0x150>)
 80041a4:	f004 fac8 	bl	8008738 <HAL_TIMEx_MasterConfigSynchronization>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80041ae:	f000 f9ad 	bl	800450c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041b2:	2360      	movs	r3, #96	; 0x60
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041ba:	2300      	movs	r3, #0
 80041bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80041be:	2300      	movs	r3, #0
 80041c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041c2:	2300      	movs	r3, #0
 80041c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80041c6:	2300      	movs	r3, #0
 80041c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80041ca:	2300      	movs	r3, #0
 80041cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041d2:	2200      	movs	r2, #0
 80041d4:	4619      	mov	r1, r3
 80041d6:	481a      	ldr	r0, [pc, #104]	; (8004240 <MX_TIM1_Init+0x150>)
 80041d8:	f003 fe14 	bl	8007e04 <HAL_TIM_PWM_ConfigChannel>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80041e2:	f000 f993 	bl	800450c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80041e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041ea:	2204      	movs	r2, #4
 80041ec:	4619      	mov	r1, r3
 80041ee:	4814      	ldr	r0, [pc, #80]	; (8004240 <MX_TIM1_Init+0x150>)
 80041f0:	f003 fe08 	bl	8007e04 <HAL_TIM_PWM_ConfigChannel>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80041fa:	f000 f987 	bl	800450c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80041fe:	2300      	movs	r3, #0
 8004200:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004202:	2300      	movs	r3, #0
 8004204:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004206:	2300      	movs	r3, #0
 8004208:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800420a:	2300      	movs	r3, #0
 800420c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800420e:	2300      	movs	r3, #0
 8004210:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004212:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004216:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004218:	2300      	movs	r3, #0
 800421a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800421c:	1d3b      	adds	r3, r7, #4
 800421e:	4619      	mov	r1, r3
 8004220:	4807      	ldr	r0, [pc, #28]	; (8004240 <MX_TIM1_Init+0x150>)
 8004222:	f004 fb05 	bl	8008830 <HAL_TIMEx_ConfigBreakDeadTime>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800422c:	f000 f96e 	bl	800450c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004230:	4803      	ldr	r0, [pc, #12]	; (8004240 <MX_TIM1_Init+0x150>)
 8004232:	f000 fb33 	bl	800489c <HAL_TIM_MspPostInit>

}
 8004236:	bf00      	nop
 8004238:	3758      	adds	r7, #88	; 0x58
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	20002988 	.word	0x20002988
 8004244:	40010000 	.word	0x40010000

08004248 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08e      	sub	sp, #56	; 0x38
 800424c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800424e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	605a      	str	r2, [r3, #4]
 8004258:	609a      	str	r2, [r3, #8]
 800425a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800425c:	f107 0320 	add.w	r3, r7, #32
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004266:	1d3b      	adds	r3, r7, #4
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	605a      	str	r2, [r3, #4]
 800426e:	609a      	str	r2, [r3, #8]
 8004270:	60da      	str	r2, [r3, #12]
 8004272:	611a      	str	r2, [r3, #16]
 8004274:	615a      	str	r2, [r3, #20]
 8004276:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004278:	4b32      	ldr	r3, [pc, #200]	; (8004344 <MX_TIM2_Init+0xfc>)
 800427a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800427e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004280:	4b30      	ldr	r3, [pc, #192]	; (8004344 <MX_TIM2_Init+0xfc>)
 8004282:	2200      	movs	r2, #0
 8004284:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004286:	4b2f      	ldr	r3, [pc, #188]	; (8004344 <MX_TIM2_Init+0xfc>)
 8004288:	2200      	movs	r2, #0
 800428a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 800428c:	4b2d      	ldr	r3, [pc, #180]	; (8004344 <MX_TIM2_Init+0xfc>)
 800428e:	22ff      	movs	r2, #255	; 0xff
 8004290:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004292:	4b2c      	ldr	r3, [pc, #176]	; (8004344 <MX_TIM2_Init+0xfc>)
 8004294:	2200      	movs	r2, #0
 8004296:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004298:	4b2a      	ldr	r3, [pc, #168]	; (8004344 <MX_TIM2_Init+0xfc>)
 800429a:	2200      	movs	r2, #0
 800429c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800429e:	4829      	ldr	r0, [pc, #164]	; (8004344 <MX_TIM2_Init+0xfc>)
 80042a0:	f003 fbd6 	bl	8007a50 <HAL_TIM_Base_Init>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80042aa:	f000 f92f 	bl	800450c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80042b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042b8:	4619      	mov	r1, r3
 80042ba:	4822      	ldr	r0, [pc, #136]	; (8004344 <MX_TIM2_Init+0xfc>)
 80042bc:	f003 fe64 	bl	8007f88 <HAL_TIM_ConfigClockSource>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80042c6:	f000 f921 	bl	800450c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80042ca:	481e      	ldr	r0, [pc, #120]	; (8004344 <MX_TIM2_Init+0xfc>)
 80042cc:	f003 fc78 	bl	8007bc0 <HAL_TIM_PWM_Init>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80042d6:	f000 f919 	bl	800450c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042da:	2300      	movs	r3, #0
 80042dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042de:	2300      	movs	r3, #0
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80042e2:	f107 0320 	add.w	r3, r7, #32
 80042e6:	4619      	mov	r1, r3
 80042e8:	4816      	ldr	r0, [pc, #88]	; (8004344 <MX_TIM2_Init+0xfc>)
 80042ea:	f004 fa25 	bl	8008738 <HAL_TIMEx_MasterConfigSynchronization>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80042f4:	f000 f90a 	bl	800450c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042f8:	2360      	movs	r3, #96	; 0x60
 80042fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80042fc:	2300      	movs	r3, #0
 80042fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004308:	1d3b      	adds	r3, r7, #4
 800430a:	2200      	movs	r2, #0
 800430c:	4619      	mov	r1, r3
 800430e:	480d      	ldr	r0, [pc, #52]	; (8004344 <MX_TIM2_Init+0xfc>)
 8004310:	f003 fd78 	bl	8007e04 <HAL_TIM_PWM_ConfigChannel>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800431a:	f000 f8f7 	bl	800450c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800431e:	1d3b      	adds	r3, r7, #4
 8004320:	2204      	movs	r2, #4
 8004322:	4619      	mov	r1, r3
 8004324:	4807      	ldr	r0, [pc, #28]	; (8004344 <MX_TIM2_Init+0xfc>)
 8004326:	f003 fd6d 	bl	8007e04 <HAL_TIM_PWM_ConfigChannel>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8004330:	f000 f8ec 	bl	800450c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004334:	4803      	ldr	r0, [pc, #12]	; (8004344 <MX_TIM2_Init+0xfc>)
 8004336:	f000 fab1 	bl	800489c <HAL_TIM_MspPostInit>

}
 800433a:	bf00      	nop
 800433c:	3738      	adds	r7, #56	; 0x38
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	200029d0 	.word	0x200029d0

08004348 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800434e:	f107 0308 	add.w	r3, r7, #8
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	605a      	str	r2, [r3, #4]
 8004358:	609a      	str	r2, [r3, #8]
 800435a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800435c:	463b      	mov	r3, r7
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004364:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <MX_TIM4_Init+0x94>)
 8004366:	4a1e      	ldr	r2, [pc, #120]	; (80043e0 <MX_TIM4_Init+0x98>)
 8004368:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 800436a:	4b1c      	ldr	r3, [pc, #112]	; (80043dc <MX_TIM4_Init+0x94>)
 800436c:	223f      	movs	r2, #63	; 0x3f
 800436e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004370:	4b1a      	ldr	r3, [pc, #104]	; (80043dc <MX_TIM4_Init+0x94>)
 8004372:	2200      	movs	r2, #0
 8004374:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004376:	4b19      	ldr	r3, [pc, #100]	; (80043dc <MX_TIM4_Init+0x94>)
 8004378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800437c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800437e:	4b17      	ldr	r3, [pc, #92]	; (80043dc <MX_TIM4_Init+0x94>)
 8004380:	2200      	movs	r2, #0
 8004382:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004384:	4b15      	ldr	r3, [pc, #84]	; (80043dc <MX_TIM4_Init+0x94>)
 8004386:	2200      	movs	r2, #0
 8004388:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800438a:	4814      	ldr	r0, [pc, #80]	; (80043dc <MX_TIM4_Init+0x94>)
 800438c:	f003 fb60 	bl	8007a50 <HAL_TIM_Base_Init>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8004396:	f000 f8b9 	bl	800450c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800439a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800439e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80043a0:	f107 0308 	add.w	r3, r7, #8
 80043a4:	4619      	mov	r1, r3
 80043a6:	480d      	ldr	r0, [pc, #52]	; (80043dc <MX_TIM4_Init+0x94>)
 80043a8:	f003 fdee 	bl	8007f88 <HAL_TIM_ConfigClockSource>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80043b2:	f000 f8ab 	bl	800450c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043b6:	2300      	movs	r3, #0
 80043b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043ba:	2300      	movs	r3, #0
 80043bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80043be:	463b      	mov	r3, r7
 80043c0:	4619      	mov	r1, r3
 80043c2:	4806      	ldr	r0, [pc, #24]	; (80043dc <MX_TIM4_Init+0x94>)
 80043c4:	f004 f9b8 	bl	8008738 <HAL_TIMEx_MasterConfigSynchronization>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80043ce:	f000 f89d 	bl	800450c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80043d2:	bf00      	nop
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20002a18 	.word	0x20002a18
 80043e0:	40000800 	.word	0x40000800

080043e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80043e8:	4b11      	ldr	r3, [pc, #68]	; (8004430 <MX_USART2_UART_Init+0x4c>)
 80043ea:	4a12      	ldr	r2, [pc, #72]	; (8004434 <MX_USART2_UART_Init+0x50>)
 80043ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80043ee:	4b10      	ldr	r3, [pc, #64]	; (8004430 <MX_USART2_UART_Init+0x4c>)
 80043f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80043f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80043f6:	4b0e      	ldr	r3, [pc, #56]	; (8004430 <MX_USART2_UART_Init+0x4c>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80043fc:	4b0c      	ldr	r3, [pc, #48]	; (8004430 <MX_USART2_UART_Init+0x4c>)
 80043fe:	2200      	movs	r2, #0
 8004400:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8004402:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <MX_USART2_UART_Init+0x4c>)
 8004404:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004408:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 800440a:	4b09      	ldr	r3, [pc, #36]	; (8004430 <MX_USART2_UART_Init+0x4c>)
 800440c:	2208      	movs	r2, #8
 800440e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004410:	4b07      	ldr	r3, [pc, #28]	; (8004430 <MX_USART2_UART_Init+0x4c>)
 8004412:	2200      	movs	r2, #0
 8004414:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004416:	4b06      	ldr	r3, [pc, #24]	; (8004430 <MX_USART2_UART_Init+0x4c>)
 8004418:	2200      	movs	r2, #0
 800441a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800441c:	4804      	ldr	r0, [pc, #16]	; (8004430 <MX_USART2_UART_Init+0x4c>)
 800441e:	f004 fa59 	bl	80088d4 <HAL_UART_Init>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8004428:	f000 f870 	bl	800450c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800442c:	bf00      	nop
 800442e:	bd80      	pop	{r7, pc}
 8004430:	20002a60 	.word	0x20002a60
 8004434:	40004400 	.word	0x40004400

08004438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800443e:	f107 030c 	add.w	r3, r7, #12
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	605a      	str	r2, [r3, #4]
 8004448:	609a      	str	r2, [r3, #8]
 800444a:	60da      	str	r2, [r3, #12]
 800444c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800444e:	2300      	movs	r3, #0
 8004450:	60bb      	str	r3, [r7, #8]
 8004452:	4b2b      	ldr	r3, [pc, #172]	; (8004500 <MX_GPIO_Init+0xc8>)
 8004454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004456:	4a2a      	ldr	r2, [pc, #168]	; (8004500 <MX_GPIO_Init+0xc8>)
 8004458:	f043 0304 	orr.w	r3, r3, #4
 800445c:	6313      	str	r3, [r2, #48]	; 0x30
 800445e:	4b28      	ldr	r3, [pc, #160]	; (8004500 <MX_GPIO_Init+0xc8>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	f003 0304 	and.w	r3, r3, #4
 8004466:	60bb      	str	r3, [r7, #8]
 8004468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800446a:	2300      	movs	r3, #0
 800446c:	607b      	str	r3, [r7, #4]
 800446e:	4b24      	ldr	r3, [pc, #144]	; (8004500 <MX_GPIO_Init+0xc8>)
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	4a23      	ldr	r2, [pc, #140]	; (8004500 <MX_GPIO_Init+0xc8>)
 8004474:	f043 0301 	orr.w	r3, r3, #1
 8004478:	6313      	str	r3, [r2, #48]	; 0x30
 800447a:	4b21      	ldr	r3, [pc, #132]	; (8004500 <MX_GPIO_Init+0xc8>)
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	607b      	str	r3, [r7, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004486:	2300      	movs	r3, #0
 8004488:	603b      	str	r3, [r7, #0]
 800448a:	4b1d      	ldr	r3, [pc, #116]	; (8004500 <MX_GPIO_Init+0xc8>)
 800448c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448e:	4a1c      	ldr	r2, [pc, #112]	; (8004500 <MX_GPIO_Init+0xc8>)
 8004490:	f043 0302 	orr.w	r3, r3, #2
 8004494:	6313      	str	r3, [r2, #48]	; 0x30
 8004496:	4b1a      	ldr	r3, [pc, #104]	; (8004500 <MX_GPIO_Init+0xc8>)
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	603b      	str	r3, [r7, #0]
 80044a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9, GPIO_PIN_RESET);
 80044a2:	2200      	movs	r2, #0
 80044a4:	f240 210e 	movw	r1, #526	; 0x20e
 80044a8:	4816      	ldr	r0, [pc, #88]	; (8004504 <MX_GPIO_Init+0xcc>)
 80044aa:	f001 ff27 	bl	80062fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 80044ae:	2200      	movs	r2, #0
 80044b0:	f240 4104 	movw	r1, #1028	; 0x404
 80044b4:	4814      	ldr	r0, [pc, #80]	; (8004508 <MX_GPIO_Init+0xd0>)
 80044b6:	f001 ff21 	bl	80062fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 PC3 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9;
 80044ba:	f240 230e 	movw	r3, #526	; 0x20e
 80044be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044c0:	2301      	movs	r3, #1
 80044c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c8:	2300      	movs	r3, #0
 80044ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044cc:	f107 030c 	add.w	r3, r7, #12
 80044d0:	4619      	mov	r1, r3
 80044d2:	480c      	ldr	r0, [pc, #48]	; (8004504 <MX_GPIO_Init+0xcc>)
 80044d4:	f001 fd7e 	bl	8005fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 80044d8:	f240 4304 	movw	r3, #1028	; 0x404
 80044dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044de:	2301      	movs	r3, #1
 80044e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044e6:	2300      	movs	r3, #0
 80044e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ea:	f107 030c 	add.w	r3, r7, #12
 80044ee:	4619      	mov	r1, r3
 80044f0:	4805      	ldr	r0, [pc, #20]	; (8004508 <MX_GPIO_Init+0xd0>)
 80044f2:	f001 fd6f 	bl	8005fd4 <HAL_GPIO_Init>

}
 80044f6:	bf00      	nop
 80044f8:	3720      	adds	r7, #32
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	40023800 	.word	0x40023800
 8004504:	40020800 	.word	0x40020800
 8004508:	40020400 	.word	0x40020400

0800450c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004510:	b672      	cpsid	i
}
 8004512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004514:	e7fe      	b.n	8004514 <Error_Handler+0x8>
	...

08004518 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800451e:	2300      	movs	r3, #0
 8004520:	607b      	str	r3, [r7, #4]
 8004522:	4b10      	ldr	r3, [pc, #64]	; (8004564 <HAL_MspInit+0x4c>)
 8004524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004526:	4a0f      	ldr	r2, [pc, #60]	; (8004564 <HAL_MspInit+0x4c>)
 8004528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800452c:	6453      	str	r3, [r2, #68]	; 0x44
 800452e:	4b0d      	ldr	r3, [pc, #52]	; (8004564 <HAL_MspInit+0x4c>)
 8004530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004536:	607b      	str	r3, [r7, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800453a:	2300      	movs	r3, #0
 800453c:	603b      	str	r3, [r7, #0]
 800453e:	4b09      	ldr	r3, [pc, #36]	; (8004564 <HAL_MspInit+0x4c>)
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	4a08      	ldr	r2, [pc, #32]	; (8004564 <HAL_MspInit+0x4c>)
 8004544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004548:	6413      	str	r3, [r2, #64]	; 0x40
 800454a:	4b06      	ldr	r3, [pc, #24]	; (8004564 <HAL_MspInit+0x4c>)
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004552:	603b      	str	r3, [r7, #0]
 8004554:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004556:	2007      	movs	r0, #7
 8004558:	f001 fcfa 	bl	8005f50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800455c:	bf00      	nop
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40023800 	.word	0x40023800

08004568 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b08a      	sub	sp, #40	; 0x28
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004570:	f107 0314 	add.w	r3, r7, #20
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	605a      	str	r2, [r3, #4]
 800457a:	609a      	str	r2, [r3, #8]
 800457c:	60da      	str	r2, [r3, #12]
 800457e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a17      	ldr	r2, [pc, #92]	; (80045e4 <HAL_ADC_MspInit+0x7c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d127      	bne.n	80045da <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800458a:	2300      	movs	r3, #0
 800458c:	613b      	str	r3, [r7, #16]
 800458e:	4b16      	ldr	r3, [pc, #88]	; (80045e8 <HAL_ADC_MspInit+0x80>)
 8004590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004592:	4a15      	ldr	r2, [pc, #84]	; (80045e8 <HAL_ADC_MspInit+0x80>)
 8004594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004598:	6453      	str	r3, [r2, #68]	; 0x44
 800459a:	4b13      	ldr	r3, [pc, #76]	; (80045e8 <HAL_ADC_MspInit+0x80>)
 800459c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a2:	613b      	str	r3, [r7, #16]
 80045a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <HAL_ADC_MspInit+0x80>)
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	4a0e      	ldr	r2, [pc, #56]	; (80045e8 <HAL_ADC_MspInit+0x80>)
 80045b0:	f043 0302 	orr.w	r3, r3, #2
 80045b4:	6313      	str	r3, [r2, #48]	; 0x30
 80045b6:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <HAL_ADC_MspInit+0x80>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80045c2:	2303      	movs	r3, #3
 80045c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045c6:	2303      	movs	r3, #3
 80045c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045ce:	f107 0314 	add.w	r3, r7, #20
 80045d2:	4619      	mov	r1, r3
 80045d4:	4805      	ldr	r0, [pc, #20]	; (80045ec <HAL_ADC_MspInit+0x84>)
 80045d6:	f001 fcfd 	bl	8005fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80045da:	bf00      	nop
 80045dc:	3728      	adds	r7, #40	; 0x28
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40012000 	.word	0x40012000
 80045e8:	40023800 	.word	0x40023800
 80045ec:	40020400 	.word	0x40020400

080045f0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08c      	sub	sp, #48	; 0x30
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045f8:	f107 031c 	add.w	r3, r7, #28
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	605a      	str	r2, [r3, #4]
 8004602:	609a      	str	r2, [r3, #8]
 8004604:	60da      	str	r2, [r3, #12]
 8004606:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a53      	ldr	r2, [pc, #332]	; (800475c <HAL_CAN_MspInit+0x16c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d146      	bne.n	80046a0 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004612:	4b53      	ldr	r3, [pc, #332]	; (8004760 <HAL_CAN_MspInit+0x170>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3301      	adds	r3, #1
 8004618:	4a51      	ldr	r2, [pc, #324]	; (8004760 <HAL_CAN_MspInit+0x170>)
 800461a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800461c:	4b50      	ldr	r3, [pc, #320]	; (8004760 <HAL_CAN_MspInit+0x170>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d10d      	bne.n	8004640 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004624:	2300      	movs	r3, #0
 8004626:	61bb      	str	r3, [r7, #24]
 8004628:	4b4e      	ldr	r3, [pc, #312]	; (8004764 <HAL_CAN_MspInit+0x174>)
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	4a4d      	ldr	r2, [pc, #308]	; (8004764 <HAL_CAN_MspInit+0x174>)
 800462e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004632:	6413      	str	r3, [r2, #64]	; 0x40
 8004634:	4b4b      	ldr	r3, [pc, #300]	; (8004764 <HAL_CAN_MspInit+0x174>)
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463c:	61bb      	str	r3, [r7, #24]
 800463e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004640:	2300      	movs	r3, #0
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	4b47      	ldr	r3, [pc, #284]	; (8004764 <HAL_CAN_MspInit+0x174>)
 8004646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004648:	4a46      	ldr	r2, [pc, #280]	; (8004764 <HAL_CAN_MspInit+0x174>)
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	6313      	str	r3, [r2, #48]	; 0x30
 8004650:	4b44      	ldr	r3, [pc, #272]	; (8004764 <HAL_CAN_MspInit+0x174>)
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	617b      	str	r3, [r7, #20]
 800465a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800465c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004662:	2302      	movs	r3, #2
 8004664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004666:	2300      	movs	r3, #0
 8004668:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800466a:	2303      	movs	r3, #3
 800466c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800466e:	2309      	movs	r3, #9
 8004670:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004672:	f107 031c 	add.w	r3, r7, #28
 8004676:	4619      	mov	r1, r3
 8004678:	483b      	ldr	r0, [pc, #236]	; (8004768 <HAL_CAN_MspInit+0x178>)
 800467a:	f001 fcab 	bl	8005fd4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800467e:	2200      	movs	r2, #0
 8004680:	2100      	movs	r1, #0
 8004682:	2014      	movs	r0, #20
 8004684:	f001 fc6f 	bl	8005f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004688:	2014      	movs	r0, #20
 800468a:	f001 fc88 	bl	8005f9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800468e:	2200      	movs	r2, #0
 8004690:	2100      	movs	r1, #0
 8004692:	2015      	movs	r0, #21
 8004694:	f001 fc67 	bl	8005f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8004698:	2015      	movs	r0, #21
 800469a:	f001 fc80 	bl	8005f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800469e:	e058      	b.n	8004752 <HAL_CAN_MspInit+0x162>
  else if(hcan->Instance==CAN2)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a31      	ldr	r2, [pc, #196]	; (800476c <HAL_CAN_MspInit+0x17c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d153      	bne.n	8004752 <HAL_CAN_MspInit+0x162>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80046aa:	2300      	movs	r3, #0
 80046ac:	613b      	str	r3, [r7, #16]
 80046ae:	4b2d      	ldr	r3, [pc, #180]	; (8004764 <HAL_CAN_MspInit+0x174>)
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	4a2c      	ldr	r2, [pc, #176]	; (8004764 <HAL_CAN_MspInit+0x174>)
 80046b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046b8:	6413      	str	r3, [r2, #64]	; 0x40
 80046ba:	4b2a      	ldr	r3, [pc, #168]	; (8004764 <HAL_CAN_MspInit+0x174>)
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046c2:	613b      	str	r3, [r7, #16]
 80046c4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80046c6:	4b26      	ldr	r3, [pc, #152]	; (8004760 <HAL_CAN_MspInit+0x170>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3301      	adds	r3, #1
 80046cc:	4a24      	ldr	r2, [pc, #144]	; (8004760 <HAL_CAN_MspInit+0x170>)
 80046ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80046d0:	4b23      	ldr	r3, [pc, #140]	; (8004760 <HAL_CAN_MspInit+0x170>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d10d      	bne.n	80046f4 <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80046d8:	2300      	movs	r3, #0
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	4b21      	ldr	r3, [pc, #132]	; (8004764 <HAL_CAN_MspInit+0x174>)
 80046de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e0:	4a20      	ldr	r2, [pc, #128]	; (8004764 <HAL_CAN_MspInit+0x174>)
 80046e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046e6:	6413      	str	r3, [r2, #64]	; 0x40
 80046e8:	4b1e      	ldr	r3, [pc, #120]	; (8004764 <HAL_CAN_MspInit+0x174>)
 80046ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046f4:	2300      	movs	r3, #0
 80046f6:	60bb      	str	r3, [r7, #8]
 80046f8:	4b1a      	ldr	r3, [pc, #104]	; (8004764 <HAL_CAN_MspInit+0x174>)
 80046fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fc:	4a19      	ldr	r2, [pc, #100]	; (8004764 <HAL_CAN_MspInit+0x174>)
 80046fe:	f043 0302 	orr.w	r3, r3, #2
 8004702:	6313      	str	r3, [r2, #48]	; 0x30
 8004704:	4b17      	ldr	r3, [pc, #92]	; (8004764 <HAL_CAN_MspInit+0x174>)
 8004706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004710:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004716:	2302      	movs	r3, #2
 8004718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800471a:	2300      	movs	r3, #0
 800471c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800471e:	2303      	movs	r3, #3
 8004720:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8004722:	2309      	movs	r3, #9
 8004724:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004726:	f107 031c 	add.w	r3, r7, #28
 800472a:	4619      	mov	r1, r3
 800472c:	4810      	ldr	r0, [pc, #64]	; (8004770 <HAL_CAN_MspInit+0x180>)
 800472e:	f001 fc51 	bl	8005fd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8004732:	2200      	movs	r2, #0
 8004734:	2100      	movs	r1, #0
 8004736:	2040      	movs	r0, #64	; 0x40
 8004738:	f001 fc15 	bl	8005f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800473c:	2040      	movs	r0, #64	; 0x40
 800473e:	f001 fc2e 	bl	8005f9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8004742:	2200      	movs	r2, #0
 8004744:	2100      	movs	r1, #0
 8004746:	2041      	movs	r0, #65	; 0x41
 8004748:	f001 fc0d 	bl	8005f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800474c:	2041      	movs	r0, #65	; 0x41
 800474e:	f001 fc26 	bl	8005f9e <HAL_NVIC_EnableIRQ>
}
 8004752:	bf00      	nop
 8004754:	3730      	adds	r7, #48	; 0x30
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	40006400 	.word	0x40006400
 8004760:	20002aa4 	.word	0x20002aa4
 8004764:	40023800 	.word	0x40023800
 8004768:	40020000 	.word	0x40020000
 800476c:	40006800 	.word	0x40006800
 8004770:	40020400 	.word	0x40020400

08004774 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b08a      	sub	sp, #40	; 0x28
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800477c:	f107 0314 	add.w	r3, r7, #20
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	605a      	str	r2, [r3, #4]
 8004786:	609a      	str	r2, [r3, #8]
 8004788:	60da      	str	r2, [r3, #12]
 800478a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a19      	ldr	r2, [pc, #100]	; (80047f8 <HAL_SPI_MspInit+0x84>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d12b      	bne.n	80047ee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004796:	2300      	movs	r3, #0
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	4b18      	ldr	r3, [pc, #96]	; (80047fc <HAL_SPI_MspInit+0x88>)
 800479c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479e:	4a17      	ldr	r2, [pc, #92]	; (80047fc <HAL_SPI_MspInit+0x88>)
 80047a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80047a4:	6453      	str	r3, [r2, #68]	; 0x44
 80047a6:	4b15      	ldr	r3, [pc, #84]	; (80047fc <HAL_SPI_MspInit+0x88>)
 80047a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	4b11      	ldr	r3, [pc, #68]	; (80047fc <HAL_SPI_MspInit+0x88>)
 80047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ba:	4a10      	ldr	r2, [pc, #64]	; (80047fc <HAL_SPI_MspInit+0x88>)
 80047bc:	f043 0301 	orr.w	r3, r3, #1
 80047c0:	6313      	str	r3, [r2, #48]	; 0x30
 80047c2:	4b0e      	ldr	r3, [pc, #56]	; (80047fc <HAL_SPI_MspInit+0x88>)
 80047c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80047ce:	23e0      	movs	r3, #224	; 0xe0
 80047d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d2:	2302      	movs	r3, #2
 80047d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047da:	2303      	movs	r3, #3
 80047dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80047de:	2305      	movs	r3, #5
 80047e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047e2:	f107 0314 	add.w	r3, r7, #20
 80047e6:	4619      	mov	r1, r3
 80047e8:	4805      	ldr	r0, [pc, #20]	; (8004800 <HAL_SPI_MspInit+0x8c>)
 80047ea:	f001 fbf3 	bl	8005fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80047ee:	bf00      	nop
 80047f0:	3728      	adds	r7, #40	; 0x28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	40013000 	.word	0x40013000
 80047fc:	40023800 	.word	0x40023800
 8004800:	40020000 	.word	0x40020000

08004804 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a1f      	ldr	r2, [pc, #124]	; (8004890 <HAL_TIM_Base_MspInit+0x8c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d10e      	bne.n	8004834 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004816:	2300      	movs	r3, #0
 8004818:	617b      	str	r3, [r7, #20]
 800481a:	4b1e      	ldr	r3, [pc, #120]	; (8004894 <HAL_TIM_Base_MspInit+0x90>)
 800481c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481e:	4a1d      	ldr	r2, [pc, #116]	; (8004894 <HAL_TIM_Base_MspInit+0x90>)
 8004820:	f043 0301 	orr.w	r3, r3, #1
 8004824:	6453      	str	r3, [r2, #68]	; 0x44
 8004826:	4b1b      	ldr	r3, [pc, #108]	; (8004894 <HAL_TIM_Base_MspInit+0x90>)
 8004828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004832:	e026      	b.n	8004882 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800483c:	d10e      	bne.n	800485c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800483e:	2300      	movs	r3, #0
 8004840:	613b      	str	r3, [r7, #16]
 8004842:	4b14      	ldr	r3, [pc, #80]	; (8004894 <HAL_TIM_Base_MspInit+0x90>)
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	4a13      	ldr	r2, [pc, #76]	; (8004894 <HAL_TIM_Base_MspInit+0x90>)
 8004848:	f043 0301 	orr.w	r3, r3, #1
 800484c:	6413      	str	r3, [r2, #64]	; 0x40
 800484e:	4b11      	ldr	r3, [pc, #68]	; (8004894 <HAL_TIM_Base_MspInit+0x90>)
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	613b      	str	r3, [r7, #16]
 8004858:	693b      	ldr	r3, [r7, #16]
}
 800485a:	e012      	b.n	8004882 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a0d      	ldr	r2, [pc, #52]	; (8004898 <HAL_TIM_Base_MspInit+0x94>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d10d      	bne.n	8004882 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004866:	2300      	movs	r3, #0
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <HAL_TIM_Base_MspInit+0x90>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	4a09      	ldr	r2, [pc, #36]	; (8004894 <HAL_TIM_Base_MspInit+0x90>)
 8004870:	f043 0304 	orr.w	r3, r3, #4
 8004874:	6413      	str	r3, [r2, #64]	; 0x40
 8004876:	4b07      	ldr	r3, [pc, #28]	; (8004894 <HAL_TIM_Base_MspInit+0x90>)
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	f003 0304 	and.w	r3, r3, #4
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]
}
 8004882:	bf00      	nop
 8004884:	371c      	adds	r7, #28
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40010000 	.word	0x40010000
 8004894:	40023800 	.word	0x40023800
 8004898:	40000800 	.word	0x40000800

0800489c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b08a      	sub	sp, #40	; 0x28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048a4:	f107 0314 	add.w	r3, r7, #20
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	605a      	str	r2, [r3, #4]
 80048ae:	609a      	str	r2, [r3, #8]
 80048b0:	60da      	str	r2, [r3, #12]
 80048b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a24      	ldr	r2, [pc, #144]	; (800494c <HAL_TIM_MspPostInit+0xb0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d11f      	bne.n	80048fe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048be:	2300      	movs	r3, #0
 80048c0:	613b      	str	r3, [r7, #16]
 80048c2:	4b23      	ldr	r3, [pc, #140]	; (8004950 <HAL_TIM_MspPostInit+0xb4>)
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	4a22      	ldr	r2, [pc, #136]	; (8004950 <HAL_TIM_MspPostInit+0xb4>)
 80048c8:	f043 0301 	orr.w	r3, r3, #1
 80048cc:	6313      	str	r3, [r2, #48]	; 0x30
 80048ce:	4b20      	ldr	r3, [pc, #128]	; (8004950 <HAL_TIM_MspPostInit+0xb4>)
 80048d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	613b      	str	r3, [r7, #16]
 80048d8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80048da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80048de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e0:	2302      	movs	r3, #2
 80048e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e4:	2300      	movs	r3, #0
 80048e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048e8:	2300      	movs	r3, #0
 80048ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80048ec:	2301      	movs	r3, #1
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048f0:	f107 0314 	add.w	r3, r7, #20
 80048f4:	4619      	mov	r1, r3
 80048f6:	4817      	ldr	r0, [pc, #92]	; (8004954 <HAL_TIM_MspPostInit+0xb8>)
 80048f8:	f001 fb6c 	bl	8005fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80048fc:	e022      	b.n	8004944 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004906:	d11d      	bne.n	8004944 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004908:	2300      	movs	r3, #0
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	4b10      	ldr	r3, [pc, #64]	; (8004950 <HAL_TIM_MspPostInit+0xb4>)
 800490e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004910:	4a0f      	ldr	r2, [pc, #60]	; (8004950 <HAL_TIM_MspPostInit+0xb4>)
 8004912:	f043 0301 	orr.w	r3, r3, #1
 8004916:	6313      	str	r3, [r2, #48]	; 0x30
 8004918:	4b0d      	ldr	r3, [pc, #52]	; (8004950 <HAL_TIM_MspPostInit+0xb4>)
 800491a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	60fb      	str	r3, [r7, #12]
 8004922:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004924:	2303      	movs	r3, #3
 8004926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004928:	2302      	movs	r3, #2
 800492a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492c:	2300      	movs	r3, #0
 800492e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004930:	2300      	movs	r3, #0
 8004932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004934:	2301      	movs	r3, #1
 8004936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004938:	f107 0314 	add.w	r3, r7, #20
 800493c:	4619      	mov	r1, r3
 800493e:	4805      	ldr	r0, [pc, #20]	; (8004954 <HAL_TIM_MspPostInit+0xb8>)
 8004940:	f001 fb48 	bl	8005fd4 <HAL_GPIO_Init>
}
 8004944:	bf00      	nop
 8004946:	3728      	adds	r7, #40	; 0x28
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	40010000 	.word	0x40010000
 8004950:	40023800 	.word	0x40023800
 8004954:	40020000 	.word	0x40020000

08004958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b08a      	sub	sp, #40	; 0x28
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004960:	f107 0314 	add.w	r3, r7, #20
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	605a      	str	r2, [r3, #4]
 800496a:	609a      	str	r2, [r3, #8]
 800496c:	60da      	str	r2, [r3, #12]
 800496e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a19      	ldr	r2, [pc, #100]	; (80049dc <HAL_UART_MspInit+0x84>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d12b      	bne.n	80049d2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800497a:	2300      	movs	r3, #0
 800497c:	613b      	str	r3, [r7, #16]
 800497e:	4b18      	ldr	r3, [pc, #96]	; (80049e0 <HAL_UART_MspInit+0x88>)
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	4a17      	ldr	r2, [pc, #92]	; (80049e0 <HAL_UART_MspInit+0x88>)
 8004984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004988:	6413      	str	r3, [r2, #64]	; 0x40
 800498a:	4b15      	ldr	r3, [pc, #84]	; (80049e0 <HAL_UART_MspInit+0x88>)
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004992:	613b      	str	r3, [r7, #16]
 8004994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	4b11      	ldr	r3, [pc, #68]	; (80049e0 <HAL_UART_MspInit+0x88>)
 800499c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499e:	4a10      	ldr	r2, [pc, #64]	; (80049e0 <HAL_UART_MspInit+0x88>)
 80049a0:	f043 0301 	orr.w	r3, r3, #1
 80049a4:	6313      	str	r3, [r2, #48]	; 0x30
 80049a6:	4b0e      	ldr	r3, [pc, #56]	; (80049e0 <HAL_UART_MspInit+0x88>)
 80049a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80049b2:	230c      	movs	r3, #12
 80049b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049b6:	2302      	movs	r3, #2
 80049b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049be:	2303      	movs	r3, #3
 80049c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80049c2:	2307      	movs	r3, #7
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049c6:	f107 0314 	add.w	r3, r7, #20
 80049ca:	4619      	mov	r1, r3
 80049cc:	4805      	ldr	r0, [pc, #20]	; (80049e4 <HAL_UART_MspInit+0x8c>)
 80049ce:	f001 fb01 	bl	8005fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80049d2:	bf00      	nop
 80049d4:	3728      	adds	r7, #40	; 0x28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	40004400 	.word	0x40004400
 80049e0:	40023800 	.word	0x40023800
 80049e4:	40020000 	.word	0x40020000

080049e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049ec:	e7fe      	b.n	80049ec <NMI_Handler+0x4>

080049ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049ee:	b480      	push	{r7}
 80049f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049f2:	e7fe      	b.n	80049f2 <HardFault_Handler+0x4>

080049f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049f8:	e7fe      	b.n	80049f8 <MemManage_Handler+0x4>

080049fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049fa:	b480      	push	{r7}
 80049fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049fe:	e7fe      	b.n	80049fe <BusFault_Handler+0x4>

08004a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a04:	e7fe      	b.n	8004a04 <UsageFault_Handler+0x4>

08004a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a06:	b480      	push	{r7}
 8004a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a0a:	bf00      	nop
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a18:	bf00      	nop
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a22:	b480      	push	{r7}
 8004a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a26:	bf00      	nop
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a34:	f000 f97e 	bl	8004d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a38:	bf00      	nop
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004a40:	4802      	ldr	r0, [pc, #8]	; (8004a4c <CAN1_RX0_IRQHandler+0x10>)
 8004a42:	f000 ff85 	bl	8005950 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004a46:	bf00      	nop
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	200028e0 	.word	0x200028e0

08004a50 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004a54:	4802      	ldr	r0, [pc, #8]	; (8004a60 <CAN1_RX1_IRQHandler+0x10>)
 8004a56:	f000 ff7b 	bl	8005950 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8004a5a:	bf00      	nop
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	200028e0 	.word	0x200028e0

08004a64 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004a68:	4802      	ldr	r0, [pc, #8]	; (8004a74 <CAN2_RX0_IRQHandler+0x10>)
 8004a6a:	f000 ff71 	bl	8005950 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8004a6e:	bf00      	nop
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	20002908 	.word	0x20002908

08004a78 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004a7c:	4802      	ldr	r0, [pc, #8]	; (8004a88 <CAN2_RX1_IRQHandler+0x10>)
 8004a7e:	f000 ff67 	bl	8005950 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8004a82:	bf00      	nop
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20002908 	.word	0x20002908

08004a8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
	return 1;
 8004a90:	2301      	movs	r3, #1
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <_kill>:

int _kill(int pid, int sig)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004aa6:	f004 fad7 	bl	8009058 <__errno>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2216      	movs	r2, #22
 8004aae:	601a      	str	r2, [r3, #0]
	return -1;
 8004ab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <_exit>:

void _exit (int status)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004ac4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f7ff ffe7 	bl	8004a9c <_kill>
	while (1) {}		/* Make sure we hang here */
 8004ace:	e7fe      	b.n	8004ace <_exit+0x12>

08004ad0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004adc:	2300      	movs	r3, #0
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	e00a      	b.n	8004af8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004ae2:	f3af 8000 	nop.w
 8004ae6:	4601      	mov	r1, r0
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	60ba      	str	r2, [r7, #8]
 8004aee:	b2ca      	uxtb	r2, r1
 8004af0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	3301      	adds	r3, #1
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	dbf0      	blt.n	8004ae2 <_read+0x12>
	}

return len;
 8004b00:	687b      	ldr	r3, [r7, #4]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3718      	adds	r7, #24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b086      	sub	sp, #24
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	60f8      	str	r0, [r7, #12]
 8004b12:	60b9      	str	r1, [r7, #8]
 8004b14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b16:	2300      	movs	r3, #0
 8004b18:	617b      	str	r3, [r7, #20]
 8004b1a:	e009      	b.n	8004b30 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	60ba      	str	r2, [r7, #8]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	dbf1      	blt.n	8004b1c <_write+0x12>
	}
	return len;
 8004b38:	687b      	ldr	r3, [r7, #4]
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <_close>:

int _close(int file)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b083      	sub	sp, #12
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
	return -1;
 8004b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b6a:	605a      	str	r2, [r3, #4]
	return 0;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <_isatty>:

int _isatty(int file)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
	return 1;
 8004b82:	2301      	movs	r3, #1
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
	return 0;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
	...

08004bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004bb4:	4a14      	ldr	r2, [pc, #80]	; (8004c08 <_sbrk+0x5c>)
 8004bb6:	4b15      	ldr	r3, [pc, #84]	; (8004c0c <_sbrk+0x60>)
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004bc0:	4b13      	ldr	r3, [pc, #76]	; (8004c10 <_sbrk+0x64>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d102      	bne.n	8004bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004bc8:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <_sbrk+0x64>)
 8004bca:	4a12      	ldr	r2, [pc, #72]	; (8004c14 <_sbrk+0x68>)
 8004bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bce:	4b10      	ldr	r3, [pc, #64]	; (8004c10 <_sbrk+0x64>)
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d207      	bcs.n	8004bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004bdc:	f004 fa3c 	bl	8009058 <__errno>
 8004be0:	4603      	mov	r3, r0
 8004be2:	220c      	movs	r2, #12
 8004be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004be6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bea:	e009      	b.n	8004c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bec:	4b08      	ldr	r3, [pc, #32]	; (8004c10 <_sbrk+0x64>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004bf2:	4b07      	ldr	r3, [pc, #28]	; (8004c10 <_sbrk+0x64>)
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	4a05      	ldr	r2, [pc, #20]	; (8004c10 <_sbrk+0x64>)
 8004bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3718      	adds	r7, #24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	20020000 	.word	0x20020000
 8004c0c:	00000400 	.word	0x00000400
 8004c10:	20002aa8 	.word	0x20002aa8
 8004c14:	20002ac0 	.word	0x20002ac0

08004c18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c1c:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <SystemInit+0x20>)
 8004c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c22:	4a05      	ldr	r2, [pc, #20]	; (8004c38 <SystemInit+0x20>)
 8004c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c2c:	bf00      	nop
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	e000ed00 	.word	0xe000ed00

08004c3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004c3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004c40:	480d      	ldr	r0, [pc, #52]	; (8004c78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004c42:	490e      	ldr	r1, [pc, #56]	; (8004c7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004c44:	4a0e      	ldr	r2, [pc, #56]	; (8004c80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c48:	e002      	b.n	8004c50 <LoopCopyDataInit>

08004c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c4e:	3304      	adds	r3, #4

08004c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c54:	d3f9      	bcc.n	8004c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c56:	4a0b      	ldr	r2, [pc, #44]	; (8004c84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004c58:	4c0b      	ldr	r4, [pc, #44]	; (8004c88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c5c:	e001      	b.n	8004c62 <LoopFillZerobss>

08004c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c60:	3204      	adds	r2, #4

08004c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c64:	d3fb      	bcc.n	8004c5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004c66:	f7ff ffd7 	bl	8004c18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c6a:	f004 f9fb 	bl	8009064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c6e:	f7ff f895 	bl	8003d9c <main>
  bx  lr    
 8004c72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004c74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c7c:	200025b4 	.word	0x200025b4
  ldr r2, =_sidata
 8004c80:	0800c57c 	.word	0x0800c57c
  ldr r2, =_sbss
 8004c84:	200025b4 	.word	0x200025b4
  ldr r4, =_ebss
 8004c88:	20002ac0 	.word	0x20002ac0

08004c8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c8c:	e7fe      	b.n	8004c8c <ADC_IRQHandler>
	...

08004c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c94:	4b0e      	ldr	r3, [pc, #56]	; (8004cd0 <HAL_Init+0x40>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a0d      	ldr	r2, [pc, #52]	; (8004cd0 <HAL_Init+0x40>)
 8004c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ca0:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <HAL_Init+0x40>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a0a      	ldr	r2, [pc, #40]	; (8004cd0 <HAL_Init+0x40>)
 8004ca6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004caa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004cac:	4b08      	ldr	r3, [pc, #32]	; (8004cd0 <HAL_Init+0x40>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a07      	ldr	r2, [pc, #28]	; (8004cd0 <HAL_Init+0x40>)
 8004cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cb8:	2003      	movs	r0, #3
 8004cba:	f001 f949 	bl	8005f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	f000 f808 	bl	8004cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004cc4:	f7ff fc28 	bl	8004518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	40023c00 	.word	0x40023c00

08004cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004cdc:	4b12      	ldr	r3, [pc, #72]	; (8004d28 <HAL_InitTick+0x54>)
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	4b12      	ldr	r3, [pc, #72]	; (8004d2c <HAL_InitTick+0x58>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f001 f961 	bl	8005fba <HAL_SYSTICK_Config>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e00e      	b.n	8004d20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b0f      	cmp	r3, #15
 8004d06:	d80a      	bhi.n	8004d1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d08:	2200      	movs	r2, #0
 8004d0a:	6879      	ldr	r1, [r7, #4]
 8004d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d10:	f001 f929 	bl	8005f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d14:	4a06      	ldr	r2, [pc, #24]	; (8004d30 <HAL_InitTick+0x5c>)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	e000      	b.n	8004d20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	200023d8 	.word	0x200023d8
 8004d2c:	200023e0 	.word	0x200023e0
 8004d30:	200023dc 	.word	0x200023dc

08004d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d38:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <HAL_IncTick+0x20>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	4b06      	ldr	r3, [pc, #24]	; (8004d58 <HAL_IncTick+0x24>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4413      	add	r3, r2
 8004d44:	4a04      	ldr	r2, [pc, #16]	; (8004d58 <HAL_IncTick+0x24>)
 8004d46:	6013      	str	r3, [r2, #0]
}
 8004d48:	bf00      	nop
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	200023e0 	.word	0x200023e0
 8004d58:	20002aac 	.word	0x20002aac

08004d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8004d60:	4b03      	ldr	r3, [pc, #12]	; (8004d70 <HAL_GetTick+0x14>)
 8004d62:	681b      	ldr	r3, [r3, #0]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	20002aac 	.word	0x20002aac

08004d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d7c:	f7ff ffee 	bl	8004d5c <HAL_GetTick>
 8004d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d8c:	d005      	beq.n	8004d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d8e:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <HAL_Delay+0x44>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	461a      	mov	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4413      	add	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d9a:	bf00      	nop
 8004d9c:	f7ff ffde 	bl	8004d5c <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d8f7      	bhi.n	8004d9c <HAL_Delay+0x28>
  {
  }
}
 8004dac:	bf00      	nop
 8004dae:	bf00      	nop
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	200023e0 	.word	0x200023e0

08004dbc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e033      	b.n	8004e3a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d109      	bne.n	8004dee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7ff fbc4 	bl	8004568 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	f003 0310 	and.w	r3, r3, #16
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d118      	bne.n	8004e2c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004e02:	f023 0302 	bic.w	r3, r3, #2
 8004e06:	f043 0202 	orr.w	r2, r3, #2
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f94a 	bl	80050a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	f023 0303 	bic.w	r3, r3, #3
 8004e22:	f043 0201 	orr.w	r2, r3, #1
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	641a      	str	r2, [r3, #64]	; 0x40
 8004e2a:	e001      	b.n	8004e30 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
	...

08004e44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <HAL_ADC_ConfigChannel+0x1c>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e113      	b.n	8005088 <HAL_ADC_ConfigChannel+0x244>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b09      	cmp	r3, #9
 8004e6e:	d925      	bls.n	8004ebc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68d9      	ldr	r1, [r3, #12]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	4613      	mov	r3, r2
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	4413      	add	r3, r2
 8004e84:	3b1e      	subs	r3, #30
 8004e86:	2207      	movs	r2, #7
 8004e88:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8c:	43da      	mvns	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	400a      	ands	r2, r1
 8004e94:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68d9      	ldr	r1, [r3, #12]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	4403      	add	r3, r0
 8004eae:	3b1e      	subs	r3, #30
 8004eb0:	409a      	lsls	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	60da      	str	r2, [r3, #12]
 8004eba:	e022      	b.n	8004f02 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6919      	ldr	r1, [r3, #16]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	461a      	mov	r2, r3
 8004eca:	4613      	mov	r3, r2
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	4413      	add	r3, r2
 8004ed0:	2207      	movs	r2, #7
 8004ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed6:	43da      	mvns	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	400a      	ands	r2, r1
 8004ede:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6919      	ldr	r1, [r3, #16]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	4403      	add	r3, r0
 8004ef8:	409a      	lsls	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	2b06      	cmp	r3, #6
 8004f08:	d824      	bhi.n	8004f54 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	3b05      	subs	r3, #5
 8004f1c:	221f      	movs	r2, #31
 8004f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f22:	43da      	mvns	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	400a      	ands	r2, r1
 8004f2a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	4618      	mov	r0, r3
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4413      	add	r3, r2
 8004f44:	3b05      	subs	r3, #5
 8004f46:	fa00 f203 	lsl.w	r2, r0, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	635a      	str	r2, [r3, #52]	; 0x34
 8004f52:	e04c      	b.n	8004fee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	2b0c      	cmp	r3, #12
 8004f5a:	d824      	bhi.n	8004fa6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	4613      	mov	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	3b23      	subs	r3, #35	; 0x23
 8004f6e:	221f      	movs	r2, #31
 8004f70:	fa02 f303 	lsl.w	r3, r2, r3
 8004f74:	43da      	mvns	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	400a      	ands	r2, r1
 8004f7c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	4613      	mov	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	3b23      	subs	r3, #35	; 0x23
 8004f98:	fa00 f203 	lsl.w	r2, r0, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	631a      	str	r2, [r3, #48]	; 0x30
 8004fa4:	e023      	b.n	8004fee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	3b41      	subs	r3, #65	; 0x41
 8004fb8:	221f      	movs	r2, #31
 8004fba:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbe:	43da      	mvns	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	400a      	ands	r2, r1
 8004fc6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	3b41      	subs	r3, #65	; 0x41
 8004fe2:	fa00 f203 	lsl.w	r2, r0, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004fee:	4b29      	ldr	r3, [pc, #164]	; (8005094 <HAL_ADC_ConfigChannel+0x250>)
 8004ff0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a28      	ldr	r2, [pc, #160]	; (8005098 <HAL_ADC_ConfigChannel+0x254>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d10f      	bne.n	800501c <HAL_ADC_ConfigChannel+0x1d8>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b12      	cmp	r3, #18
 8005002:	d10b      	bne.n	800501c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1d      	ldr	r2, [pc, #116]	; (8005098 <HAL_ADC_ConfigChannel+0x254>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d12b      	bne.n	800507e <HAL_ADC_ConfigChannel+0x23a>
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a1c      	ldr	r2, [pc, #112]	; (800509c <HAL_ADC_ConfigChannel+0x258>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d003      	beq.n	8005038 <HAL_ADC_ConfigChannel+0x1f4>
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b11      	cmp	r3, #17
 8005036:	d122      	bne.n	800507e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a11      	ldr	r2, [pc, #68]	; (800509c <HAL_ADC_ConfigChannel+0x258>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d111      	bne.n	800507e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800505a:	4b11      	ldr	r3, [pc, #68]	; (80050a0 <HAL_ADC_ConfigChannel+0x25c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a11      	ldr	r2, [pc, #68]	; (80050a4 <HAL_ADC_ConfigChannel+0x260>)
 8005060:	fba2 2303 	umull	r2, r3, r2, r3
 8005064:	0c9a      	lsrs	r2, r3, #18
 8005066:	4613      	mov	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005070:	e002      	b.n	8005078 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	3b01      	subs	r3, #1
 8005076:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1f9      	bne.n	8005072 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	40012300 	.word	0x40012300
 8005098:	40012000 	.word	0x40012000
 800509c:	10000012 	.word	0x10000012
 80050a0:	200023d8 	.word	0x200023d8
 80050a4:	431bde83 	.word	0x431bde83

080050a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80050b0:	4b79      	ldr	r3, [pc, #484]	; (8005298 <ADC_Init+0x1f0>)
 80050b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	431a      	orrs	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6859      	ldr	r1, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	021a      	lsls	r2, r3, #8
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005100:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6859      	ldr	r1, [r3, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689a      	ldr	r2, [r3, #8]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005122:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6899      	ldr	r1, [r3, #8]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513a:	4a58      	ldr	r2, [pc, #352]	; (800529c <ADC_Init+0x1f4>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d022      	beq.n	8005186 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800514e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6899      	ldr	r1, [r3, #8]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005170:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6899      	ldr	r1, [r3, #8]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	609a      	str	r2, [r3, #8]
 8005184:	e00f      	b.n	80051a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005194:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80051a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0202 	bic.w	r2, r2, #2
 80051b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6899      	ldr	r1, [r3, #8]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	7e1b      	ldrb	r3, [r3, #24]
 80051c0:	005a      	lsls	r2, r3, #1
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d01b      	beq.n	800520c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80051f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6859      	ldr	r1, [r3, #4]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	3b01      	subs	r3, #1
 8005200:	035a      	lsls	r2, r3, #13
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	605a      	str	r2, [r3, #4]
 800520a:	e007      	b.n	800521c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800521a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800522a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	3b01      	subs	r3, #1
 8005238:	051a      	lsls	r2, r3, #20
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005250:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6899      	ldr	r1, [r3, #8]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800525e:	025a      	lsls	r2, r3, #9
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	430a      	orrs	r2, r1
 8005266:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689a      	ldr	r2, [r3, #8]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005276:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6899      	ldr	r1, [r3, #8]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	029a      	lsls	r2, r3, #10
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	609a      	str	r2, [r3, #8]
}
 800528c:	bf00      	nop
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	40012300 	.word	0x40012300
 800529c:	0f000001 	.word	0x0f000001

080052a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e0ed      	b.n	800548e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d102      	bne.n	80052c4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7ff f996 	bl	80045f0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0201 	orr.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052d4:	f7ff fd42 	bl	8004d5c <HAL_GetTick>
 80052d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80052da:	e012      	b.n	8005302 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80052dc:	f7ff fd3e 	bl	8004d5c <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b0a      	cmp	r3, #10
 80052e8:	d90b      	bls.n	8005302 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2205      	movs	r2, #5
 80052fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e0c5      	b.n	800548e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0e5      	beq.n	80052dc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0202 	bic.w	r2, r2, #2
 800531e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005320:	f7ff fd1c 	bl	8004d5c <HAL_GetTick>
 8005324:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005326:	e012      	b.n	800534e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005328:	f7ff fd18 	bl	8004d5c <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b0a      	cmp	r3, #10
 8005334:	d90b      	bls.n	800534e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2205      	movs	r2, #5
 8005346:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e09f      	b.n	800548e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1e5      	bne.n	8005328 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	7e1b      	ldrb	r3, [r3, #24]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d108      	bne.n	8005376 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	e007      	b.n	8005386 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005384:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	7e5b      	ldrb	r3, [r3, #25]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d108      	bne.n	80053a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	e007      	b.n	80053b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	7e9b      	ldrb	r3, [r3, #26]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d108      	bne.n	80053ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0220 	orr.w	r2, r2, #32
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	e007      	b.n	80053da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0220 	bic.w	r2, r2, #32
 80053d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	7edb      	ldrb	r3, [r3, #27]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d108      	bne.n	80053f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0210 	bic.w	r2, r2, #16
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	e007      	b.n	8005404 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0210 	orr.w	r2, r2, #16
 8005402:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	7f1b      	ldrb	r3, [r3, #28]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d108      	bne.n	800541e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0208 	orr.w	r2, r2, #8
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	e007      	b.n	800542e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0208 	bic.w	r2, r2, #8
 800542c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	7f5b      	ldrb	r3, [r3, #29]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d108      	bne.n	8005448 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f042 0204 	orr.w	r2, r2, #4
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	e007      	b.n	8005458 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 0204 	bic.w	r2, r2, #4
 8005456:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	ea42 0103 	orr.w	r1, r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	1e5a      	subs	r2, r3, #1
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
	...

08005498 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054ae:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80054b0:	7cfb      	ldrb	r3, [r7, #19]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d003      	beq.n	80054be <HAL_CAN_ConfigFilter+0x26>
 80054b6:	7cfb      	ldrb	r3, [r7, #19]
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	f040 80be 	bne.w	800563a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80054be:	4b65      	ldr	r3, [pc, #404]	; (8005654 <HAL_CAN_ConfigFilter+0x1bc>)
 80054c0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80054c8:	f043 0201 	orr.w	r2, r3, #1
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80054d8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	021b      	lsls	r3, r3, #8
 80054ee:	431a      	orrs	r2, r3
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	f003 031f 	and.w	r3, r3, #31
 80054fe:	2201      	movs	r2, #1
 8005500:	fa02 f303 	lsl.w	r3, r2, r3
 8005504:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	43db      	mvns	r3, r3
 8005510:	401a      	ands	r2, r3
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d123      	bne.n	8005568 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	43db      	mvns	r3, r3
 800552a:	401a      	ands	r2, r3
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005542:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	3248      	adds	r2, #72	; 0x48
 8005548:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800555c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800555e:	6979      	ldr	r1, [r7, #20]
 8005560:	3348      	adds	r3, #72	; 0x48
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	440b      	add	r3, r1
 8005566:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	69db      	ldr	r3, [r3, #28]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d122      	bne.n	80055b6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	431a      	orrs	r2, r3
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005590:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	3248      	adds	r2, #72	; 0x48
 8005596:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80055aa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80055ac:	6979      	ldr	r1, [r7, #20]
 80055ae:	3348      	adds	r3, #72	; 0x48
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	440b      	add	r3, r1
 80055b4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d109      	bne.n	80055d2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	43db      	mvns	r3, r3
 80055c8:	401a      	ands	r2, r3
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80055d0:	e007      	b.n	80055e2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	431a      	orrs	r2, r3
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d109      	bne.n	80055fe <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	43db      	mvns	r3, r3
 80055f4:	401a      	ands	r2, r3
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80055fc:	e007      	b.n	800560e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	431a      	orrs	r2, r3
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d107      	bne.n	8005626 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	431a      	orrs	r2, r3
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800562c:	f023 0201 	bic.w	r2, r3, #1
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005636:	2300      	movs	r3, #0
 8005638:	e006      	b.n	8005648 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
  }
}
 8005648:	4618      	mov	r0, r3
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	40006400 	.word	0x40006400

08005658 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b01      	cmp	r3, #1
 800566a:	d12e      	bne.n	80056ca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0201 	bic.w	r2, r2, #1
 8005682:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005684:	f7ff fb6a 	bl	8004d5c <HAL_GetTick>
 8005688:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800568a:	e012      	b.n	80056b2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800568c:	f7ff fb66 	bl	8004d5c <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b0a      	cmp	r3, #10
 8005698:	d90b      	bls.n	80056b2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2205      	movs	r2, #5
 80056aa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e012      	b.n	80056d8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1e5      	bne.n	800568c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	e006      	b.n	80056d8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
  }
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056f4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80056f6:	7dfb      	ldrb	r3, [r7, #23]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d003      	beq.n	8005704 <HAL_CAN_GetRxMessage+0x24>
 80056fc:	7dfb      	ldrb	r3, [r7, #23]
 80056fe:	2b02      	cmp	r3, #2
 8005700:	f040 80f3 	bne.w	80058ea <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10e      	bne.n	8005728 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f003 0303 	and.w	r3, r3, #3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d116      	bne.n	8005746 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e0e7      	b.n	80058f8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d107      	bne.n	8005746 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e0d8      	b.n	80058f8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	331b      	adds	r3, #27
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	4413      	add	r3, r2
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0204 	and.w	r2, r3, #4
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10c      	bne.n	800577e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	331b      	adds	r3, #27
 800576c:	011b      	lsls	r3, r3, #4
 800576e:	4413      	add	r3, r2
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	0d5b      	lsrs	r3, r3, #21
 8005774:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	e00b      	b.n	8005796 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	331b      	adds	r3, #27
 8005786:	011b      	lsls	r3, r3, #4
 8005788:	4413      	add	r3, r2
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	08db      	lsrs	r3, r3, #3
 800578e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	331b      	adds	r3, #27
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	4413      	add	r3, r2
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0202 	and.w	r2, r3, #2
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	331b      	adds	r3, #27
 80057b4:	011b      	lsls	r3, r3, #4
 80057b6:	4413      	add	r3, r2
 80057b8:	3304      	adds	r3, #4
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 020f 	and.w	r2, r3, #15
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	331b      	adds	r3, #27
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	4413      	add	r3, r2
 80057d0:	3304      	adds	r3, #4
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	0a1b      	lsrs	r3, r3, #8
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	331b      	adds	r3, #27
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	4413      	add	r3, r2
 80057e8:	3304      	adds	r3, #4
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	0c1b      	lsrs	r3, r3, #16
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	011b      	lsls	r3, r3, #4
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	b2da      	uxtb	r2, r3
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	4413      	add	r3, r2
 8005814:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	0a1a      	lsrs	r2, r3, #8
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	3301      	adds	r3, #1
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	011b      	lsls	r3, r3, #4
 800582c:	4413      	add	r3, r2
 800582e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	0c1a      	lsrs	r2, r3, #16
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	3302      	adds	r3, #2
 800583a:	b2d2      	uxtb	r2, r2
 800583c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	011b      	lsls	r3, r3, #4
 8005846:	4413      	add	r3, r2
 8005848:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	0e1a      	lsrs	r2, r3, #24
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	3303      	adds	r3, #3
 8005854:	b2d2      	uxtb	r2, r2
 8005856:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	011b      	lsls	r3, r3, #4
 8005860:	4413      	add	r3, r2
 8005862:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	3304      	adds	r3, #4
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	011b      	lsls	r3, r3, #4
 8005878:	4413      	add	r3, r2
 800587a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	0a1a      	lsrs	r2, r3, #8
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	3305      	adds	r3, #5
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	011b      	lsls	r3, r3, #4
 8005892:	4413      	add	r3, r2
 8005894:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	0c1a      	lsrs	r2, r3, #16
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	3306      	adds	r3, #6
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	011b      	lsls	r3, r3, #4
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	0e1a      	lsrs	r2, r3, #24
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	3307      	adds	r3, #7
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d108      	bne.n	80058d6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68da      	ldr	r2, [r3, #12]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f042 0220 	orr.w	r2, r2, #32
 80058d2:	60da      	str	r2, [r3, #12]
 80058d4:	e007      	b.n	80058e6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	691a      	ldr	r2, [r3, #16]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f042 0220 	orr.w	r2, r2, #32
 80058e4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	e006      	b.n	80058f8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
  }
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	371c      	adds	r7, #28
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005914:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005916:	7bfb      	ldrb	r3, [r7, #15]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d002      	beq.n	8005922 <HAL_CAN_ActivateNotification+0x1e>
 800591c:	7bfb      	ldrb	r3, [r7, #15]
 800591e:	2b02      	cmp	r3, #2
 8005920:	d109      	bne.n	8005936 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6959      	ldr	r1, [r3, #20]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	683a      	ldr	r2, [r7, #0]
 800592e:	430a      	orrs	r2, r1
 8005930:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	e006      	b.n	8005944 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
  }
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b08a      	sub	sp, #40	; 0x28
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005958:	2300      	movs	r3, #0
 800595a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d07c      	beq.n	8005a90 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	d023      	beq.n	80059e8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2201      	movs	r2, #1
 80059a6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f983 	bl	8005cbe <HAL_CAN_TxMailbox0CompleteCallback>
 80059b8:	e016      	b.n	80059e8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d004      	beq.n	80059ce <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80059ca:	627b      	str	r3, [r7, #36]	; 0x24
 80059cc:	e00c      	b.n	80059e8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	f003 0308 	and.w	r3, r3, #8
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d004      	beq.n	80059e2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80059de:	627b      	str	r3, [r7, #36]	; 0x24
 80059e0:	e002      	b.n	80059e8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f989 	bl	8005cfa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d024      	beq.n	8005a3c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f963 	bl	8005cd2 <HAL_CAN_TxMailbox1CompleteCallback>
 8005a0c:	e016      	b.n	8005a3c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d004      	beq.n	8005a22 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a20:	e00c      	b.n	8005a3c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d004      	beq.n	8005a36 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a32:	627b      	str	r3, [r7, #36]	; 0x24
 8005a34:	e002      	b.n	8005a3c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f969 	bl	8005d0e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d024      	beq.n	8005a90 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005a4e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f943 	bl	8005ce6 <HAL_CAN_TxMailbox2CompleteCallback>
 8005a60:	e016      	b.n	8005a90 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d004      	beq.n	8005a76 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24
 8005a74:	e00c      	b.n	8005a90 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d004      	beq.n	8005a8a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a86:	627b      	str	r3, [r7, #36]	; 0x24
 8005a88:	e002      	b.n	8005a90 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f949 	bl	8005d22 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00c      	beq.n	8005ab4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f003 0310 	and.w	r3, r3, #16
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d007      	beq.n	8005ab4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005aaa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2210      	movs	r2, #16
 8005ab2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	f003 0304 	and.w	r3, r3, #4
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00b      	beq.n	8005ad6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f003 0308 	and.w	r3, r3, #8
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d006      	beq.n	8005ad6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2208      	movs	r2, #8
 8005ace:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f930 	bl	8005d36 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d009      	beq.n	8005af4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7fb faf0 	bl	80010d4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00c      	beq.n	8005b18 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	f003 0310 	and.w	r3, r3, #16
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d007      	beq.n	8005b18 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2210      	movs	r2, #16
 8005b16:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	f003 0320 	and.w	r3, r3, #32
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00b      	beq.n	8005b3a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f003 0308 	and.w	r3, r3, #8
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d006      	beq.n	8005b3a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2208      	movs	r2, #8
 8005b32:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f912 	bl	8005d5e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	f003 0310 	and.w	r3, r3, #16
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d009      	beq.n	8005b58 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d002      	beq.n	8005b58 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f8f9 	bl	8005d4a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00b      	beq.n	8005b7a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	f003 0310 	and.w	r3, r3, #16
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d006      	beq.n	8005b7a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2210      	movs	r2, #16
 8005b72:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f8fc 	bl	8005d72 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005b7a:	6a3b      	ldr	r3, [r7, #32]
 8005b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00b      	beq.n	8005b9c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	f003 0308 	and.w	r3, r3, #8
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d006      	beq.n	8005b9c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2208      	movs	r2, #8
 8005b94:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f8f5 	bl	8005d86 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d07b      	beq.n	8005c9e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d072      	beq.n	8005c96 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005bb0:	6a3b      	ldr	r3, [r7, #32]
 8005bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d008      	beq.n	8005bcc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	f043 0301 	orr.w	r3, r3, #1
 8005bca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d008      	beq.n	8005be8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	f043 0302 	orr.w	r3, r3, #2
 8005be6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d008      	beq.n	8005c04 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d003      	beq.n	8005c04 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	f043 0304 	orr.w	r3, r3, #4
 8005c02:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005c04:	6a3b      	ldr	r3, [r7, #32]
 8005c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d043      	beq.n	8005c96 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d03e      	beq.n	8005c96 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c1e:	2b60      	cmp	r3, #96	; 0x60
 8005c20:	d02b      	beq.n	8005c7a <HAL_CAN_IRQHandler+0x32a>
 8005c22:	2b60      	cmp	r3, #96	; 0x60
 8005c24:	d82e      	bhi.n	8005c84 <HAL_CAN_IRQHandler+0x334>
 8005c26:	2b50      	cmp	r3, #80	; 0x50
 8005c28:	d022      	beq.n	8005c70 <HAL_CAN_IRQHandler+0x320>
 8005c2a:	2b50      	cmp	r3, #80	; 0x50
 8005c2c:	d82a      	bhi.n	8005c84 <HAL_CAN_IRQHandler+0x334>
 8005c2e:	2b40      	cmp	r3, #64	; 0x40
 8005c30:	d019      	beq.n	8005c66 <HAL_CAN_IRQHandler+0x316>
 8005c32:	2b40      	cmp	r3, #64	; 0x40
 8005c34:	d826      	bhi.n	8005c84 <HAL_CAN_IRQHandler+0x334>
 8005c36:	2b30      	cmp	r3, #48	; 0x30
 8005c38:	d010      	beq.n	8005c5c <HAL_CAN_IRQHandler+0x30c>
 8005c3a:	2b30      	cmp	r3, #48	; 0x30
 8005c3c:	d822      	bhi.n	8005c84 <HAL_CAN_IRQHandler+0x334>
 8005c3e:	2b10      	cmp	r3, #16
 8005c40:	d002      	beq.n	8005c48 <HAL_CAN_IRQHandler+0x2f8>
 8005c42:	2b20      	cmp	r3, #32
 8005c44:	d005      	beq.n	8005c52 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005c46:	e01d      	b.n	8005c84 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	f043 0308 	orr.w	r3, r3, #8
 8005c4e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005c50:	e019      	b.n	8005c86 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	f043 0310 	orr.w	r3, r3, #16
 8005c58:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005c5a:	e014      	b.n	8005c86 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	f043 0320 	orr.w	r3, r3, #32
 8005c62:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005c64:	e00f      	b.n	8005c86 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005c6e:	e00a      	b.n	8005c86 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c76:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005c78:	e005      	b.n	8005c86 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005c82:	e000      	b.n	8005c86 <HAL_CAN_IRQHandler+0x336>
            break;
 8005c84:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	699a      	ldr	r2, [r3, #24]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005c94:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2204      	movs	r2, #4
 8005c9c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d008      	beq.n	8005cb6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	431a      	orrs	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f872 	bl	8005d9a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005cb6:	bf00      	nop
 8005cb8:	3728      	adds	r7, #40	; 0x28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005cda:	bf00      	nop
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b083      	sub	sp, #12
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005cee:	bf00      	nop
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b083      	sub	sp, #12
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b083      	sub	sp, #12
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005d3e:	bf00      	nop
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b083      	sub	sp, #12
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005d52:	bf00      	nop
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b083      	sub	sp, #12
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b083      	sub	sp, #12
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005d8e:	bf00      	nop
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005da2:	bf00      	nop
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
	...

08005db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f003 0307 	and.w	r3, r3, #7
 8005dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005dc0:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <__NVIC_SetPriorityGrouping+0x44>)
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005dcc:	4013      	ands	r3, r2
 8005dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005de2:	4a04      	ldr	r2, [pc, #16]	; (8005df4 <__NVIC_SetPriorityGrouping+0x44>)
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	60d3      	str	r3, [r2, #12]
}
 8005de8:	bf00      	nop
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	e000ed00 	.word	0xe000ed00

08005df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005dfc:	4b04      	ldr	r3, [pc, #16]	; (8005e10 <__NVIC_GetPriorityGrouping+0x18>)
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	0a1b      	lsrs	r3, r3, #8
 8005e02:	f003 0307 	and.w	r3, r3, #7
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	e000ed00 	.word	0xe000ed00

08005e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	db0b      	blt.n	8005e3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e26:	79fb      	ldrb	r3, [r7, #7]
 8005e28:	f003 021f 	and.w	r2, r3, #31
 8005e2c:	4907      	ldr	r1, [pc, #28]	; (8005e4c <__NVIC_EnableIRQ+0x38>)
 8005e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e32:	095b      	lsrs	r3, r3, #5
 8005e34:	2001      	movs	r0, #1
 8005e36:	fa00 f202 	lsl.w	r2, r0, r2
 8005e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e3e:	bf00      	nop
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	e000e100 	.word	0xe000e100

08005e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	4603      	mov	r3, r0
 8005e58:	6039      	str	r1, [r7, #0]
 8005e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	db0a      	blt.n	8005e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	490c      	ldr	r1, [pc, #48]	; (8005e9c <__NVIC_SetPriority+0x4c>)
 8005e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e6e:	0112      	lsls	r2, r2, #4
 8005e70:	b2d2      	uxtb	r2, r2
 8005e72:	440b      	add	r3, r1
 8005e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e78:	e00a      	b.n	8005e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	4908      	ldr	r1, [pc, #32]	; (8005ea0 <__NVIC_SetPriority+0x50>)
 8005e80:	79fb      	ldrb	r3, [r7, #7]
 8005e82:	f003 030f 	and.w	r3, r3, #15
 8005e86:	3b04      	subs	r3, #4
 8005e88:	0112      	lsls	r2, r2, #4
 8005e8a:	b2d2      	uxtb	r2, r2
 8005e8c:	440b      	add	r3, r1
 8005e8e:	761a      	strb	r2, [r3, #24]
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	e000e100 	.word	0xe000e100
 8005ea0:	e000ed00 	.word	0xe000ed00

08005ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b089      	sub	sp, #36	; 0x24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f003 0307 	and.w	r3, r3, #7
 8005eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	f1c3 0307 	rsb	r3, r3, #7
 8005ebe:	2b04      	cmp	r3, #4
 8005ec0:	bf28      	it	cs
 8005ec2:	2304      	movcs	r3, #4
 8005ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	3304      	adds	r3, #4
 8005eca:	2b06      	cmp	r3, #6
 8005ecc:	d902      	bls.n	8005ed4 <NVIC_EncodePriority+0x30>
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	3b03      	subs	r3, #3
 8005ed2:	e000      	b.n	8005ed6 <NVIC_EncodePriority+0x32>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ed8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee2:	43da      	mvns	r2, r3
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	401a      	ands	r2, r3
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005eec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef6:	43d9      	mvns	r1, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005efc:	4313      	orrs	r3, r2
         );
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3724      	adds	r7, #36	; 0x24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
	...

08005f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f1c:	d301      	bcc.n	8005f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e00f      	b.n	8005f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f22:	4a0a      	ldr	r2, [pc, #40]	; (8005f4c <SysTick_Config+0x40>)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	3b01      	subs	r3, #1
 8005f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f2a:	210f      	movs	r1, #15
 8005f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f30:	f7ff ff8e 	bl	8005e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f34:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <SysTick_Config+0x40>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f3a:	4b04      	ldr	r3, [pc, #16]	; (8005f4c <SysTick_Config+0x40>)
 8005f3c:	2207      	movs	r2, #7
 8005f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	e000e010 	.word	0xe000e010

08005f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7ff ff29 	bl	8005db0 <__NVIC_SetPriorityGrouping>
}
 8005f5e:	bf00      	nop
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b086      	sub	sp, #24
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	60b9      	str	r1, [r7, #8]
 8005f70:	607a      	str	r2, [r7, #4]
 8005f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f78:	f7ff ff3e 	bl	8005df8 <__NVIC_GetPriorityGrouping>
 8005f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	68b9      	ldr	r1, [r7, #8]
 8005f82:	6978      	ldr	r0, [r7, #20]
 8005f84:	f7ff ff8e 	bl	8005ea4 <NVIC_EncodePriority>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f8e:	4611      	mov	r1, r2
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7ff ff5d 	bl	8005e50 <__NVIC_SetPriority>
}
 8005f96:	bf00      	nop
 8005f98:	3718      	adds	r7, #24
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b082      	sub	sp, #8
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7ff ff31 	bl	8005e14 <__NVIC_EnableIRQ>
}
 8005fb2:	bf00      	nop
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b082      	sub	sp, #8
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7ff ffa2 	bl	8005f0c <SysTick_Config>
 8005fc8:	4603      	mov	r3, r0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
	...

08005fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b089      	sub	sp, #36	; 0x24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fea:	2300      	movs	r3, #0
 8005fec:	61fb      	str	r3, [r7, #28]
 8005fee:	e165      	b.n	80062bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	4013      	ands	r3, r2
 8006002:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	429a      	cmp	r2, r3
 800600a:	f040 8154 	bne.w	80062b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f003 0303 	and.w	r3, r3, #3
 8006016:	2b01      	cmp	r3, #1
 8006018:	d005      	beq.n	8006026 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006022:	2b02      	cmp	r3, #2
 8006024:	d130      	bne.n	8006088 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	005b      	lsls	r3, r3, #1
 8006030:	2203      	movs	r2, #3
 8006032:	fa02 f303 	lsl.w	r3, r2, r3
 8006036:	43db      	mvns	r3, r3
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	4013      	ands	r3, r2
 800603c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	fa02 f303 	lsl.w	r3, r2, r3
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	4313      	orrs	r3, r2
 800604e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	69ba      	ldr	r2, [r7, #24]
 8006054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800605c:	2201      	movs	r2, #1
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	fa02 f303 	lsl.w	r3, r2, r3
 8006064:	43db      	mvns	r3, r3
 8006066:	69ba      	ldr	r2, [r7, #24]
 8006068:	4013      	ands	r3, r2
 800606a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	091b      	lsrs	r3, r3, #4
 8006072:	f003 0201 	and.w	r2, r3, #1
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	fa02 f303 	lsl.w	r3, r2, r3
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	4313      	orrs	r3, r2
 8006080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f003 0303 	and.w	r3, r3, #3
 8006090:	2b03      	cmp	r3, #3
 8006092:	d017      	beq.n	80060c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	2203      	movs	r2, #3
 80060a0:	fa02 f303 	lsl.w	r3, r2, r3
 80060a4:	43db      	mvns	r3, r3
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	4013      	ands	r3, r2
 80060aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	689a      	ldr	r2, [r3, #8]
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	fa02 f303 	lsl.w	r3, r2, r3
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f003 0303 	and.w	r3, r3, #3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d123      	bne.n	8006118 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	08da      	lsrs	r2, r3, #3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	3208      	adds	r2, #8
 80060d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	f003 0307 	and.w	r3, r3, #7
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	220f      	movs	r2, #15
 80060e8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ec:	43db      	mvns	r3, r3
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	4013      	ands	r3, r2
 80060f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	691a      	ldr	r2, [r3, #16]
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	f003 0307 	and.w	r3, r3, #7
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	fa02 f303 	lsl.w	r3, r2, r3
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	4313      	orrs	r3, r2
 8006108:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	08da      	lsrs	r2, r3, #3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3208      	adds	r2, #8
 8006112:	69b9      	ldr	r1, [r7, #24]
 8006114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	005b      	lsls	r3, r3, #1
 8006122:	2203      	movs	r2, #3
 8006124:	fa02 f303 	lsl.w	r3, r2, r3
 8006128:	43db      	mvns	r3, r3
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	4013      	ands	r3, r2
 800612e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f003 0203 	and.w	r2, r3, #3
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	fa02 f303 	lsl.w	r3, r2, r3
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	4313      	orrs	r3, r2
 8006144:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 80ae 	beq.w	80062b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	4b5d      	ldr	r3, [pc, #372]	; (80062d4 <HAL_GPIO_Init+0x300>)
 8006160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006162:	4a5c      	ldr	r2, [pc, #368]	; (80062d4 <HAL_GPIO_Init+0x300>)
 8006164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006168:	6453      	str	r3, [r2, #68]	; 0x44
 800616a:	4b5a      	ldr	r3, [pc, #360]	; (80062d4 <HAL_GPIO_Init+0x300>)
 800616c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006176:	4a58      	ldr	r2, [pc, #352]	; (80062d8 <HAL_GPIO_Init+0x304>)
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	089b      	lsrs	r3, r3, #2
 800617c:	3302      	adds	r3, #2
 800617e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	f003 0303 	and.w	r3, r3, #3
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	220f      	movs	r2, #15
 800618e:	fa02 f303 	lsl.w	r3, r2, r3
 8006192:	43db      	mvns	r3, r3
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	4013      	ands	r3, r2
 8006198:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a4f      	ldr	r2, [pc, #316]	; (80062dc <HAL_GPIO_Init+0x308>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d025      	beq.n	80061ee <HAL_GPIO_Init+0x21a>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a4e      	ldr	r2, [pc, #312]	; (80062e0 <HAL_GPIO_Init+0x30c>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d01f      	beq.n	80061ea <HAL_GPIO_Init+0x216>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a4d      	ldr	r2, [pc, #308]	; (80062e4 <HAL_GPIO_Init+0x310>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d019      	beq.n	80061e6 <HAL_GPIO_Init+0x212>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a4c      	ldr	r2, [pc, #304]	; (80062e8 <HAL_GPIO_Init+0x314>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d013      	beq.n	80061e2 <HAL_GPIO_Init+0x20e>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a4b      	ldr	r2, [pc, #300]	; (80062ec <HAL_GPIO_Init+0x318>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d00d      	beq.n	80061de <HAL_GPIO_Init+0x20a>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a4a      	ldr	r2, [pc, #296]	; (80062f0 <HAL_GPIO_Init+0x31c>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d007      	beq.n	80061da <HAL_GPIO_Init+0x206>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a49      	ldr	r2, [pc, #292]	; (80062f4 <HAL_GPIO_Init+0x320>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d101      	bne.n	80061d6 <HAL_GPIO_Init+0x202>
 80061d2:	2306      	movs	r3, #6
 80061d4:	e00c      	b.n	80061f0 <HAL_GPIO_Init+0x21c>
 80061d6:	2307      	movs	r3, #7
 80061d8:	e00a      	b.n	80061f0 <HAL_GPIO_Init+0x21c>
 80061da:	2305      	movs	r3, #5
 80061dc:	e008      	b.n	80061f0 <HAL_GPIO_Init+0x21c>
 80061de:	2304      	movs	r3, #4
 80061e0:	e006      	b.n	80061f0 <HAL_GPIO_Init+0x21c>
 80061e2:	2303      	movs	r3, #3
 80061e4:	e004      	b.n	80061f0 <HAL_GPIO_Init+0x21c>
 80061e6:	2302      	movs	r3, #2
 80061e8:	e002      	b.n	80061f0 <HAL_GPIO_Init+0x21c>
 80061ea:	2301      	movs	r3, #1
 80061ec:	e000      	b.n	80061f0 <HAL_GPIO_Init+0x21c>
 80061ee:	2300      	movs	r3, #0
 80061f0:	69fa      	ldr	r2, [r7, #28]
 80061f2:	f002 0203 	and.w	r2, r2, #3
 80061f6:	0092      	lsls	r2, r2, #2
 80061f8:	4093      	lsls	r3, r2
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006200:	4935      	ldr	r1, [pc, #212]	; (80062d8 <HAL_GPIO_Init+0x304>)
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	089b      	lsrs	r3, r3, #2
 8006206:	3302      	adds	r3, #2
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800620e:	4b3a      	ldr	r3, [pc, #232]	; (80062f8 <HAL_GPIO_Init+0x324>)
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	43db      	mvns	r3, r3
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	4013      	ands	r3, r2
 800621c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	4313      	orrs	r3, r2
 8006230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006232:	4a31      	ldr	r2, [pc, #196]	; (80062f8 <HAL_GPIO_Init+0x324>)
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006238:	4b2f      	ldr	r3, [pc, #188]	; (80062f8 <HAL_GPIO_Init+0x324>)
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	43db      	mvns	r3, r3
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	4013      	ands	r3, r2
 8006246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d003      	beq.n	800625c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	4313      	orrs	r3, r2
 800625a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800625c:	4a26      	ldr	r2, [pc, #152]	; (80062f8 <HAL_GPIO_Init+0x324>)
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006262:	4b25      	ldr	r3, [pc, #148]	; (80062f8 <HAL_GPIO_Init+0x324>)
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	43db      	mvns	r3, r3
 800626c:	69ba      	ldr	r2, [r7, #24]
 800626e:	4013      	ands	r3, r2
 8006270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d003      	beq.n	8006286 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	4313      	orrs	r3, r2
 8006284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006286:	4a1c      	ldr	r2, [pc, #112]	; (80062f8 <HAL_GPIO_Init+0x324>)
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800628c:	4b1a      	ldr	r3, [pc, #104]	; (80062f8 <HAL_GPIO_Init+0x324>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	43db      	mvns	r3, r3
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	4013      	ands	r3, r2
 800629a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d003      	beq.n	80062b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80062a8:	69ba      	ldr	r2, [r7, #24]
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80062b0:	4a11      	ldr	r2, [pc, #68]	; (80062f8 <HAL_GPIO_Init+0x324>)
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	3301      	adds	r3, #1
 80062ba:	61fb      	str	r3, [r7, #28]
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	2b0f      	cmp	r3, #15
 80062c0:	f67f ae96 	bls.w	8005ff0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80062c4:	bf00      	nop
 80062c6:	bf00      	nop
 80062c8:	3724      	adds	r7, #36	; 0x24
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	40023800 	.word	0x40023800
 80062d8:	40013800 	.word	0x40013800
 80062dc:	40020000 	.word	0x40020000
 80062e0:	40020400 	.word	0x40020400
 80062e4:	40020800 	.word	0x40020800
 80062e8:	40020c00 	.word	0x40020c00
 80062ec:	40021000 	.word	0x40021000
 80062f0:	40021400 	.word	0x40021400
 80062f4:	40021800 	.word	0x40021800
 80062f8:	40013c00 	.word	0x40013c00

080062fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	460b      	mov	r3, r1
 8006306:	807b      	strh	r3, [r7, #2]
 8006308:	4613      	mov	r3, r2
 800630a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800630c:	787b      	ldrb	r3, [r7, #1]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006312:	887a      	ldrh	r2, [r7, #2]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006318:	e003      	b.n	8006322 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800631a:	887b      	ldrh	r3, [r7, #2]
 800631c:	041a      	lsls	r2, r3, #16
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	619a      	str	r2, [r3, #24]
}
 8006322:	bf00      	nop
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
	...

08006330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e0cc      	b.n	80064de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006344:	4b68      	ldr	r3, [pc, #416]	; (80064e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 030f 	and.w	r3, r3, #15
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	429a      	cmp	r2, r3
 8006350:	d90c      	bls.n	800636c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006352:	4b65      	ldr	r3, [pc, #404]	; (80064e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	b2d2      	uxtb	r2, r2
 8006358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800635a:	4b63      	ldr	r3, [pc, #396]	; (80064e8 <HAL_RCC_ClockConfig+0x1b8>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 030f 	and.w	r3, r3, #15
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	429a      	cmp	r2, r3
 8006366:	d001      	beq.n	800636c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e0b8      	b.n	80064de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b00      	cmp	r3, #0
 8006376:	d020      	beq.n	80063ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0304 	and.w	r3, r3, #4
 8006380:	2b00      	cmp	r3, #0
 8006382:	d005      	beq.n	8006390 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006384:	4b59      	ldr	r3, [pc, #356]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	4a58      	ldr	r2, [pc, #352]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 800638a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800638e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0308 	and.w	r3, r3, #8
 8006398:	2b00      	cmp	r3, #0
 800639a:	d005      	beq.n	80063a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800639c:	4b53      	ldr	r3, [pc, #332]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	4a52      	ldr	r2, [pc, #328]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 80063a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80063a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063a8:	4b50      	ldr	r3, [pc, #320]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	494d      	ldr	r1, [pc, #308]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d044      	beq.n	8006450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d107      	bne.n	80063de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ce:	4b47      	ldr	r3, [pc, #284]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d119      	bne.n	800640e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e07f      	b.n	80064de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d003      	beq.n	80063ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	d107      	bne.n	80063fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063ee:	4b3f      	ldr	r3, [pc, #252]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d109      	bne.n	800640e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e06f      	b.n	80064de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063fe:	4b3b      	ldr	r3, [pc, #236]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e067      	b.n	80064de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800640e:	4b37      	ldr	r3, [pc, #220]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f023 0203 	bic.w	r2, r3, #3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	4934      	ldr	r1, [pc, #208]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 800641c:	4313      	orrs	r3, r2
 800641e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006420:	f7fe fc9c 	bl	8004d5c <HAL_GetTick>
 8006424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006426:	e00a      	b.n	800643e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006428:	f7fe fc98 	bl	8004d5c <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	f241 3288 	movw	r2, #5000	; 0x1388
 8006436:	4293      	cmp	r3, r2
 8006438:	d901      	bls.n	800643e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e04f      	b.n	80064de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800643e:	4b2b      	ldr	r3, [pc, #172]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f003 020c 	and.w	r2, r3, #12
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	429a      	cmp	r2, r3
 800644e:	d1eb      	bne.n	8006428 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006450:	4b25      	ldr	r3, [pc, #148]	; (80064e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 030f 	and.w	r3, r3, #15
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	429a      	cmp	r2, r3
 800645c:	d20c      	bcs.n	8006478 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800645e:	4b22      	ldr	r3, [pc, #136]	; (80064e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	b2d2      	uxtb	r2, r2
 8006464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006466:	4b20      	ldr	r3, [pc, #128]	; (80064e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 030f 	and.w	r3, r3, #15
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	429a      	cmp	r2, r3
 8006472:	d001      	beq.n	8006478 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e032      	b.n	80064de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0304 	and.w	r3, r3, #4
 8006480:	2b00      	cmp	r3, #0
 8006482:	d008      	beq.n	8006496 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006484:	4b19      	ldr	r3, [pc, #100]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	4916      	ldr	r1, [pc, #88]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 8006492:	4313      	orrs	r3, r2
 8006494:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d009      	beq.n	80064b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064a2:	4b12      	ldr	r3, [pc, #72]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	00db      	lsls	r3, r3, #3
 80064b0:	490e      	ldr	r1, [pc, #56]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064b6:	f000 f855 	bl	8006564 <HAL_RCC_GetSysClockFreq>
 80064ba:	4602      	mov	r2, r0
 80064bc:	4b0b      	ldr	r3, [pc, #44]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	091b      	lsrs	r3, r3, #4
 80064c2:	f003 030f 	and.w	r3, r3, #15
 80064c6:	490a      	ldr	r1, [pc, #40]	; (80064f0 <HAL_RCC_ClockConfig+0x1c0>)
 80064c8:	5ccb      	ldrb	r3, [r1, r3]
 80064ca:	fa22 f303 	lsr.w	r3, r2, r3
 80064ce:	4a09      	ldr	r2, [pc, #36]	; (80064f4 <HAL_RCC_ClockConfig+0x1c4>)
 80064d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80064d2:	4b09      	ldr	r3, [pc, #36]	; (80064f8 <HAL_RCC_ClockConfig+0x1c8>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fe fbfc 	bl	8004cd4 <HAL_InitTick>

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	40023c00 	.word	0x40023c00
 80064ec:	40023800 	.word	0x40023800
 80064f0:	0800c17c 	.word	0x0800c17c
 80064f4:	200023d8 	.word	0x200023d8
 80064f8:	200023dc 	.word	0x200023dc

080064fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064fc:	b480      	push	{r7}
 80064fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006500:	4b03      	ldr	r3, [pc, #12]	; (8006510 <HAL_RCC_GetHCLKFreq+0x14>)
 8006502:	681b      	ldr	r3, [r3, #0]
}
 8006504:	4618      	mov	r0, r3
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	200023d8 	.word	0x200023d8

08006514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006518:	f7ff fff0 	bl	80064fc <HAL_RCC_GetHCLKFreq>
 800651c:	4602      	mov	r2, r0
 800651e:	4b05      	ldr	r3, [pc, #20]	; (8006534 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	0a9b      	lsrs	r3, r3, #10
 8006524:	f003 0307 	and.w	r3, r3, #7
 8006528:	4903      	ldr	r1, [pc, #12]	; (8006538 <HAL_RCC_GetPCLK1Freq+0x24>)
 800652a:	5ccb      	ldrb	r3, [r1, r3]
 800652c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006530:	4618      	mov	r0, r3
 8006532:	bd80      	pop	{r7, pc}
 8006534:	40023800 	.word	0x40023800
 8006538:	0800c18c 	.word	0x0800c18c

0800653c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006540:	f7ff ffdc 	bl	80064fc <HAL_RCC_GetHCLKFreq>
 8006544:	4602      	mov	r2, r0
 8006546:	4b05      	ldr	r3, [pc, #20]	; (800655c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	0b5b      	lsrs	r3, r3, #13
 800654c:	f003 0307 	and.w	r3, r3, #7
 8006550:	4903      	ldr	r1, [pc, #12]	; (8006560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006552:	5ccb      	ldrb	r3, [r1, r3]
 8006554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006558:	4618      	mov	r0, r3
 800655a:	bd80      	pop	{r7, pc}
 800655c:	40023800 	.word	0x40023800
 8006560:	0800c18c 	.word	0x0800c18c

08006564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006568:	b0ae      	sub	sp, #184	; 0xb8
 800656a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800656c:	2300      	movs	r3, #0
 800656e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006572:	2300      	movs	r3, #0
 8006574:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006578:	2300      	movs	r3, #0
 800657a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800657e:	2300      	movs	r3, #0
 8006580:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006584:	2300      	movs	r3, #0
 8006586:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800658a:	4bcb      	ldr	r3, [pc, #812]	; (80068b8 <HAL_RCC_GetSysClockFreq+0x354>)
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f003 030c 	and.w	r3, r3, #12
 8006592:	2b0c      	cmp	r3, #12
 8006594:	f200 8206 	bhi.w	80069a4 <HAL_RCC_GetSysClockFreq+0x440>
 8006598:	a201      	add	r2, pc, #4	; (adr r2, 80065a0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800659a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659e:	bf00      	nop
 80065a0:	080065d5 	.word	0x080065d5
 80065a4:	080069a5 	.word	0x080069a5
 80065a8:	080069a5 	.word	0x080069a5
 80065ac:	080069a5 	.word	0x080069a5
 80065b0:	080065dd 	.word	0x080065dd
 80065b4:	080069a5 	.word	0x080069a5
 80065b8:	080069a5 	.word	0x080069a5
 80065bc:	080069a5 	.word	0x080069a5
 80065c0:	080065e5 	.word	0x080065e5
 80065c4:	080069a5 	.word	0x080069a5
 80065c8:	080069a5 	.word	0x080069a5
 80065cc:	080069a5 	.word	0x080069a5
 80065d0:	080067d5 	.word	0x080067d5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065d4:	4bb9      	ldr	r3, [pc, #740]	; (80068bc <HAL_RCC_GetSysClockFreq+0x358>)
 80065d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80065da:	e1e7      	b.n	80069ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065dc:	4bb8      	ldr	r3, [pc, #736]	; (80068c0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80065de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80065e2:	e1e3      	b.n	80069ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065e4:	4bb4      	ldr	r3, [pc, #720]	; (80068b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065f0:	4bb1      	ldr	r3, [pc, #708]	; (80068b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d071      	beq.n	80066e0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065fc:	4bae      	ldr	r3, [pc, #696]	; (80068b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	099b      	lsrs	r3, r3, #6
 8006602:	2200      	movs	r2, #0
 8006604:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006608:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800660c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006614:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006618:	2300      	movs	r3, #0
 800661a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800661e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006622:	4622      	mov	r2, r4
 8006624:	462b      	mov	r3, r5
 8006626:	f04f 0000 	mov.w	r0, #0
 800662a:	f04f 0100 	mov.w	r1, #0
 800662e:	0159      	lsls	r1, r3, #5
 8006630:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006634:	0150      	lsls	r0, r2, #5
 8006636:	4602      	mov	r2, r0
 8006638:	460b      	mov	r3, r1
 800663a:	4621      	mov	r1, r4
 800663c:	1a51      	subs	r1, r2, r1
 800663e:	6439      	str	r1, [r7, #64]	; 0x40
 8006640:	4629      	mov	r1, r5
 8006642:	eb63 0301 	sbc.w	r3, r3, r1
 8006646:	647b      	str	r3, [r7, #68]	; 0x44
 8006648:	f04f 0200 	mov.w	r2, #0
 800664c:	f04f 0300 	mov.w	r3, #0
 8006650:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006654:	4649      	mov	r1, r9
 8006656:	018b      	lsls	r3, r1, #6
 8006658:	4641      	mov	r1, r8
 800665a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800665e:	4641      	mov	r1, r8
 8006660:	018a      	lsls	r2, r1, #6
 8006662:	4641      	mov	r1, r8
 8006664:	1a51      	subs	r1, r2, r1
 8006666:	63b9      	str	r1, [r7, #56]	; 0x38
 8006668:	4649      	mov	r1, r9
 800666a:	eb63 0301 	sbc.w	r3, r3, r1
 800666e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006670:	f04f 0200 	mov.w	r2, #0
 8006674:	f04f 0300 	mov.w	r3, #0
 8006678:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800667c:	4649      	mov	r1, r9
 800667e:	00cb      	lsls	r3, r1, #3
 8006680:	4641      	mov	r1, r8
 8006682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006686:	4641      	mov	r1, r8
 8006688:	00ca      	lsls	r2, r1, #3
 800668a:	4610      	mov	r0, r2
 800668c:	4619      	mov	r1, r3
 800668e:	4603      	mov	r3, r0
 8006690:	4622      	mov	r2, r4
 8006692:	189b      	adds	r3, r3, r2
 8006694:	633b      	str	r3, [r7, #48]	; 0x30
 8006696:	462b      	mov	r3, r5
 8006698:	460a      	mov	r2, r1
 800669a:	eb42 0303 	adc.w	r3, r2, r3
 800669e:	637b      	str	r3, [r7, #52]	; 0x34
 80066a0:	f04f 0200 	mov.w	r2, #0
 80066a4:	f04f 0300 	mov.w	r3, #0
 80066a8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80066ac:	4629      	mov	r1, r5
 80066ae:	024b      	lsls	r3, r1, #9
 80066b0:	4621      	mov	r1, r4
 80066b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80066b6:	4621      	mov	r1, r4
 80066b8:	024a      	lsls	r2, r1, #9
 80066ba:	4610      	mov	r0, r2
 80066bc:	4619      	mov	r1, r3
 80066be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066c2:	2200      	movs	r2, #0
 80066c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80066c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80066cc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80066d0:	f7fa fafa 	bl	8000cc8 <__aeabi_uldivmod>
 80066d4:	4602      	mov	r2, r0
 80066d6:	460b      	mov	r3, r1
 80066d8:	4613      	mov	r3, r2
 80066da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066de:	e067      	b.n	80067b0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066e0:	4b75      	ldr	r3, [pc, #468]	; (80068b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	099b      	lsrs	r3, r3, #6
 80066e6:	2200      	movs	r2, #0
 80066e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80066ec:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80066f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80066f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80066fa:	2300      	movs	r3, #0
 80066fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80066fe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006702:	4622      	mov	r2, r4
 8006704:	462b      	mov	r3, r5
 8006706:	f04f 0000 	mov.w	r0, #0
 800670a:	f04f 0100 	mov.w	r1, #0
 800670e:	0159      	lsls	r1, r3, #5
 8006710:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006714:	0150      	lsls	r0, r2, #5
 8006716:	4602      	mov	r2, r0
 8006718:	460b      	mov	r3, r1
 800671a:	4621      	mov	r1, r4
 800671c:	1a51      	subs	r1, r2, r1
 800671e:	62b9      	str	r1, [r7, #40]	; 0x28
 8006720:	4629      	mov	r1, r5
 8006722:	eb63 0301 	sbc.w	r3, r3, r1
 8006726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006728:	f04f 0200 	mov.w	r2, #0
 800672c:	f04f 0300 	mov.w	r3, #0
 8006730:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006734:	4649      	mov	r1, r9
 8006736:	018b      	lsls	r3, r1, #6
 8006738:	4641      	mov	r1, r8
 800673a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800673e:	4641      	mov	r1, r8
 8006740:	018a      	lsls	r2, r1, #6
 8006742:	4641      	mov	r1, r8
 8006744:	ebb2 0a01 	subs.w	sl, r2, r1
 8006748:	4649      	mov	r1, r9
 800674a:	eb63 0b01 	sbc.w	fp, r3, r1
 800674e:	f04f 0200 	mov.w	r2, #0
 8006752:	f04f 0300 	mov.w	r3, #0
 8006756:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800675a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800675e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006762:	4692      	mov	sl, r2
 8006764:	469b      	mov	fp, r3
 8006766:	4623      	mov	r3, r4
 8006768:	eb1a 0303 	adds.w	r3, sl, r3
 800676c:	623b      	str	r3, [r7, #32]
 800676e:	462b      	mov	r3, r5
 8006770:	eb4b 0303 	adc.w	r3, fp, r3
 8006774:	627b      	str	r3, [r7, #36]	; 0x24
 8006776:	f04f 0200 	mov.w	r2, #0
 800677a:	f04f 0300 	mov.w	r3, #0
 800677e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006782:	4629      	mov	r1, r5
 8006784:	028b      	lsls	r3, r1, #10
 8006786:	4621      	mov	r1, r4
 8006788:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800678c:	4621      	mov	r1, r4
 800678e:	028a      	lsls	r2, r1, #10
 8006790:	4610      	mov	r0, r2
 8006792:	4619      	mov	r1, r3
 8006794:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006798:	2200      	movs	r2, #0
 800679a:	673b      	str	r3, [r7, #112]	; 0x70
 800679c:	677a      	str	r2, [r7, #116]	; 0x74
 800679e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80067a2:	f7fa fa91 	bl	8000cc8 <__aeabi_uldivmod>
 80067a6:	4602      	mov	r2, r0
 80067a8:	460b      	mov	r3, r1
 80067aa:	4613      	mov	r3, r2
 80067ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80067b0:	4b41      	ldr	r3, [pc, #260]	; (80068b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	0c1b      	lsrs	r3, r3, #16
 80067b6:	f003 0303 	and.w	r3, r3, #3
 80067ba:	3301      	adds	r3, #1
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80067c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80067d2:	e0eb      	b.n	80069ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067d4:	4b38      	ldr	r3, [pc, #224]	; (80068b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067e0:	4b35      	ldr	r3, [pc, #212]	; (80068b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d06b      	beq.n	80068c4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067ec:	4b32      	ldr	r3, [pc, #200]	; (80068b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	099b      	lsrs	r3, r3, #6
 80067f2:	2200      	movs	r2, #0
 80067f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80067f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80067f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067fe:	663b      	str	r3, [r7, #96]	; 0x60
 8006800:	2300      	movs	r3, #0
 8006802:	667b      	str	r3, [r7, #100]	; 0x64
 8006804:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006808:	4622      	mov	r2, r4
 800680a:	462b      	mov	r3, r5
 800680c:	f04f 0000 	mov.w	r0, #0
 8006810:	f04f 0100 	mov.w	r1, #0
 8006814:	0159      	lsls	r1, r3, #5
 8006816:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800681a:	0150      	lsls	r0, r2, #5
 800681c:	4602      	mov	r2, r0
 800681e:	460b      	mov	r3, r1
 8006820:	4621      	mov	r1, r4
 8006822:	1a51      	subs	r1, r2, r1
 8006824:	61b9      	str	r1, [r7, #24]
 8006826:	4629      	mov	r1, r5
 8006828:	eb63 0301 	sbc.w	r3, r3, r1
 800682c:	61fb      	str	r3, [r7, #28]
 800682e:	f04f 0200 	mov.w	r2, #0
 8006832:	f04f 0300 	mov.w	r3, #0
 8006836:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800683a:	4659      	mov	r1, fp
 800683c:	018b      	lsls	r3, r1, #6
 800683e:	4651      	mov	r1, sl
 8006840:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006844:	4651      	mov	r1, sl
 8006846:	018a      	lsls	r2, r1, #6
 8006848:	4651      	mov	r1, sl
 800684a:	ebb2 0801 	subs.w	r8, r2, r1
 800684e:	4659      	mov	r1, fp
 8006850:	eb63 0901 	sbc.w	r9, r3, r1
 8006854:	f04f 0200 	mov.w	r2, #0
 8006858:	f04f 0300 	mov.w	r3, #0
 800685c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006860:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006864:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006868:	4690      	mov	r8, r2
 800686a:	4699      	mov	r9, r3
 800686c:	4623      	mov	r3, r4
 800686e:	eb18 0303 	adds.w	r3, r8, r3
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	462b      	mov	r3, r5
 8006876:	eb49 0303 	adc.w	r3, r9, r3
 800687a:	617b      	str	r3, [r7, #20]
 800687c:	f04f 0200 	mov.w	r2, #0
 8006880:	f04f 0300 	mov.w	r3, #0
 8006884:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006888:	4629      	mov	r1, r5
 800688a:	024b      	lsls	r3, r1, #9
 800688c:	4621      	mov	r1, r4
 800688e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006892:	4621      	mov	r1, r4
 8006894:	024a      	lsls	r2, r1, #9
 8006896:	4610      	mov	r0, r2
 8006898:	4619      	mov	r1, r3
 800689a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800689e:	2200      	movs	r2, #0
 80068a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80068a2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80068a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80068a8:	f7fa fa0e 	bl	8000cc8 <__aeabi_uldivmod>
 80068ac:	4602      	mov	r2, r0
 80068ae:	460b      	mov	r3, r1
 80068b0:	4613      	mov	r3, r2
 80068b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068b6:	e065      	b.n	8006984 <HAL_RCC_GetSysClockFreq+0x420>
 80068b8:	40023800 	.word	0x40023800
 80068bc:	00f42400 	.word	0x00f42400
 80068c0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068c4:	4b3d      	ldr	r3, [pc, #244]	; (80069bc <HAL_RCC_GetSysClockFreq+0x458>)
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	099b      	lsrs	r3, r3, #6
 80068ca:	2200      	movs	r2, #0
 80068cc:	4618      	mov	r0, r3
 80068ce:	4611      	mov	r1, r2
 80068d0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80068d4:	653b      	str	r3, [r7, #80]	; 0x50
 80068d6:	2300      	movs	r3, #0
 80068d8:	657b      	str	r3, [r7, #84]	; 0x54
 80068da:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80068de:	4642      	mov	r2, r8
 80068e0:	464b      	mov	r3, r9
 80068e2:	f04f 0000 	mov.w	r0, #0
 80068e6:	f04f 0100 	mov.w	r1, #0
 80068ea:	0159      	lsls	r1, r3, #5
 80068ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068f0:	0150      	lsls	r0, r2, #5
 80068f2:	4602      	mov	r2, r0
 80068f4:	460b      	mov	r3, r1
 80068f6:	4641      	mov	r1, r8
 80068f8:	1a51      	subs	r1, r2, r1
 80068fa:	60b9      	str	r1, [r7, #8]
 80068fc:	4649      	mov	r1, r9
 80068fe:	eb63 0301 	sbc.w	r3, r3, r1
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	f04f 0200 	mov.w	r2, #0
 8006908:	f04f 0300 	mov.w	r3, #0
 800690c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006910:	4659      	mov	r1, fp
 8006912:	018b      	lsls	r3, r1, #6
 8006914:	4651      	mov	r1, sl
 8006916:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800691a:	4651      	mov	r1, sl
 800691c:	018a      	lsls	r2, r1, #6
 800691e:	4651      	mov	r1, sl
 8006920:	1a54      	subs	r4, r2, r1
 8006922:	4659      	mov	r1, fp
 8006924:	eb63 0501 	sbc.w	r5, r3, r1
 8006928:	f04f 0200 	mov.w	r2, #0
 800692c:	f04f 0300 	mov.w	r3, #0
 8006930:	00eb      	lsls	r3, r5, #3
 8006932:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006936:	00e2      	lsls	r2, r4, #3
 8006938:	4614      	mov	r4, r2
 800693a:	461d      	mov	r5, r3
 800693c:	4643      	mov	r3, r8
 800693e:	18e3      	adds	r3, r4, r3
 8006940:	603b      	str	r3, [r7, #0]
 8006942:	464b      	mov	r3, r9
 8006944:	eb45 0303 	adc.w	r3, r5, r3
 8006948:	607b      	str	r3, [r7, #4]
 800694a:	f04f 0200 	mov.w	r2, #0
 800694e:	f04f 0300 	mov.w	r3, #0
 8006952:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006956:	4629      	mov	r1, r5
 8006958:	028b      	lsls	r3, r1, #10
 800695a:	4621      	mov	r1, r4
 800695c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006960:	4621      	mov	r1, r4
 8006962:	028a      	lsls	r2, r1, #10
 8006964:	4610      	mov	r0, r2
 8006966:	4619      	mov	r1, r3
 8006968:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800696c:	2200      	movs	r2, #0
 800696e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006970:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006972:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006976:	f7fa f9a7 	bl	8000cc8 <__aeabi_uldivmod>
 800697a:	4602      	mov	r2, r0
 800697c:	460b      	mov	r3, r1
 800697e:	4613      	mov	r3, r2
 8006980:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006984:	4b0d      	ldr	r3, [pc, #52]	; (80069bc <HAL_RCC_GetSysClockFreq+0x458>)
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	0f1b      	lsrs	r3, r3, #28
 800698a:	f003 0307 	and.w	r3, r3, #7
 800698e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006992:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006996:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800699a:	fbb2 f3f3 	udiv	r3, r2, r3
 800699e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80069a2:	e003      	b.n	80069ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80069a4:	4b06      	ldr	r3, [pc, #24]	; (80069c0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80069a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80069aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	37b8      	adds	r7, #184	; 0xb8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069ba:	bf00      	nop
 80069bc:	40023800 	.word	0x40023800
 80069c0:	00f42400 	.word	0x00f42400

080069c4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e28d      	b.n	8006ef2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f000 8083 	beq.w	8006aea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80069e4:	4b94      	ldr	r3, [pc, #592]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f003 030c 	and.w	r3, r3, #12
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	d019      	beq.n	8006a24 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80069f0:	4b91      	ldr	r3, [pc, #580]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	d106      	bne.n	8006a0a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80069fc:	4b8e      	ldr	r3, [pc, #568]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a08:	d00c      	beq.n	8006a24 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a0a:	4b8b      	ldr	r3, [pc, #556]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006a12:	2b0c      	cmp	r3, #12
 8006a14:	d112      	bne.n	8006a3c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a16:	4b88      	ldr	r3, [pc, #544]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a22:	d10b      	bne.n	8006a3c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a24:	4b84      	ldr	r3, [pc, #528]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d05b      	beq.n	8006ae8 <HAL_RCC_OscConfig+0x124>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d157      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e25a      	b.n	8006ef2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a44:	d106      	bne.n	8006a54 <HAL_RCC_OscConfig+0x90>
 8006a46:	4b7c      	ldr	r3, [pc, #496]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a7b      	ldr	r2, [pc, #492]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a50:	6013      	str	r3, [r2, #0]
 8006a52:	e01d      	b.n	8006a90 <HAL_RCC_OscConfig+0xcc>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a5c:	d10c      	bne.n	8006a78 <HAL_RCC_OscConfig+0xb4>
 8006a5e:	4b76      	ldr	r3, [pc, #472]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a75      	ldr	r2, [pc, #468]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a68:	6013      	str	r3, [r2, #0]
 8006a6a:	4b73      	ldr	r3, [pc, #460]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a72      	ldr	r2, [pc, #456]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a74:	6013      	str	r3, [r2, #0]
 8006a76:	e00b      	b.n	8006a90 <HAL_RCC_OscConfig+0xcc>
 8006a78:	4b6f      	ldr	r3, [pc, #444]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a6e      	ldr	r2, [pc, #440]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a82:	6013      	str	r3, [r2, #0]
 8006a84:	4b6c      	ldr	r3, [pc, #432]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a6b      	ldr	r2, [pc, #428]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d013      	beq.n	8006ac0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a98:	f7fe f960 	bl	8004d5c <HAL_GetTick>
 8006a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a9e:	e008      	b.n	8006ab2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006aa0:	f7fe f95c 	bl	8004d5c <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b64      	cmp	r3, #100	; 0x64
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e21f      	b.n	8006ef2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ab2:	4b61      	ldr	r3, [pc, #388]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d0f0      	beq.n	8006aa0 <HAL_RCC_OscConfig+0xdc>
 8006abe:	e014      	b.n	8006aea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac0:	f7fe f94c 	bl	8004d5c <HAL_GetTick>
 8006ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ac6:	e008      	b.n	8006ada <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ac8:	f7fe f948 	bl	8004d5c <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	2b64      	cmp	r3, #100	; 0x64
 8006ad4:	d901      	bls.n	8006ada <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e20b      	b.n	8006ef2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ada:	4b57      	ldr	r3, [pc, #348]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1f0      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x104>
 8006ae6:	e000      	b.n	8006aea <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d06f      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006af6:	4b50      	ldr	r3, [pc, #320]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f003 030c 	and.w	r3, r3, #12
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d017      	beq.n	8006b32 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006b02:	4b4d      	ldr	r3, [pc, #308]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006b0a:	2b08      	cmp	r3, #8
 8006b0c:	d105      	bne.n	8006b1a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006b0e:	4b4a      	ldr	r3, [pc, #296]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00b      	beq.n	8006b32 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b1a:	4b47      	ldr	r3, [pc, #284]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006b22:	2b0c      	cmp	r3, #12
 8006b24:	d11c      	bne.n	8006b60 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b26:	4b44      	ldr	r3, [pc, #272]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d116      	bne.n	8006b60 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b32:	4b41      	ldr	r3, [pc, #260]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0302 	and.w	r3, r3, #2
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d005      	beq.n	8006b4a <HAL_RCC_OscConfig+0x186>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d001      	beq.n	8006b4a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e1d3      	b.n	8006ef2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b4a:	4b3b      	ldr	r3, [pc, #236]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	00db      	lsls	r3, r3, #3
 8006b58:	4937      	ldr	r1, [pc, #220]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b5e:	e03a      	b.n	8006bd6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d020      	beq.n	8006baa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b68:	4b34      	ldr	r3, [pc, #208]	; (8006c3c <HAL_RCC_OscConfig+0x278>)
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b6e:	f7fe f8f5 	bl	8004d5c <HAL_GetTick>
 8006b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b74:	e008      	b.n	8006b88 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b76:	f7fe f8f1 	bl	8004d5c <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d901      	bls.n	8006b88 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e1b4      	b.n	8006ef2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b88:	4b2b      	ldr	r3, [pc, #172]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0302 	and.w	r3, r3, #2
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d0f0      	beq.n	8006b76 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b94:	4b28      	ldr	r3, [pc, #160]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	00db      	lsls	r3, r3, #3
 8006ba2:	4925      	ldr	r1, [pc, #148]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	600b      	str	r3, [r1, #0]
 8006ba8:	e015      	b.n	8006bd6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006baa:	4b24      	ldr	r3, [pc, #144]	; (8006c3c <HAL_RCC_OscConfig+0x278>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb0:	f7fe f8d4 	bl	8004d5c <HAL_GetTick>
 8006bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bb6:	e008      	b.n	8006bca <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bb8:	f7fe f8d0 	bl	8004d5c <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e193      	b.n	8006ef2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bca:	4b1b      	ldr	r3, [pc, #108]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0302 	and.w	r3, r3, #2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1f0      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0308 	and.w	r3, r3, #8
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d036      	beq.n	8006c50 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d016      	beq.n	8006c18 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bea:	4b15      	ldr	r3, [pc, #84]	; (8006c40 <HAL_RCC_OscConfig+0x27c>)
 8006bec:	2201      	movs	r2, #1
 8006bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bf0:	f7fe f8b4 	bl	8004d5c <HAL_GetTick>
 8006bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bf6:	e008      	b.n	8006c0a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bf8:	f7fe f8b0 	bl	8004d5c <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d901      	bls.n	8006c0a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e173      	b.n	8006ef2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c0a:	4b0b      	ldr	r3, [pc, #44]	; (8006c38 <HAL_RCC_OscConfig+0x274>)
 8006c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0f0      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x234>
 8006c16:	e01b      	b.n	8006c50 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c18:	4b09      	ldr	r3, [pc, #36]	; (8006c40 <HAL_RCC_OscConfig+0x27c>)
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c1e:	f7fe f89d 	bl	8004d5c <HAL_GetTick>
 8006c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c24:	e00e      	b.n	8006c44 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c26:	f7fe f899 	bl	8004d5c <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d907      	bls.n	8006c44 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e15c      	b.n	8006ef2 <HAL_RCC_OscConfig+0x52e>
 8006c38:	40023800 	.word	0x40023800
 8006c3c:	42470000 	.word	0x42470000
 8006c40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c44:	4b8a      	ldr	r3, [pc, #552]	; (8006e70 <HAL_RCC_OscConfig+0x4ac>)
 8006c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1ea      	bne.n	8006c26 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0304 	and.w	r3, r3, #4
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 8097 	beq.w	8006d8c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c62:	4b83      	ldr	r3, [pc, #524]	; (8006e70 <HAL_RCC_OscConfig+0x4ac>)
 8006c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10f      	bne.n	8006c8e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60bb      	str	r3, [r7, #8]
 8006c72:	4b7f      	ldr	r3, [pc, #508]	; (8006e70 <HAL_RCC_OscConfig+0x4ac>)
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	4a7e      	ldr	r2, [pc, #504]	; (8006e70 <HAL_RCC_OscConfig+0x4ac>)
 8006c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c7e:	4b7c      	ldr	r3, [pc, #496]	; (8006e70 <HAL_RCC_OscConfig+0x4ac>)
 8006c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c86:	60bb      	str	r3, [r7, #8]
 8006c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c8e:	4b79      	ldr	r3, [pc, #484]	; (8006e74 <HAL_RCC_OscConfig+0x4b0>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d118      	bne.n	8006ccc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c9a:	4b76      	ldr	r3, [pc, #472]	; (8006e74 <HAL_RCC_OscConfig+0x4b0>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a75      	ldr	r2, [pc, #468]	; (8006e74 <HAL_RCC_OscConfig+0x4b0>)
 8006ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ca6:	f7fe f859 	bl	8004d5c <HAL_GetTick>
 8006caa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cac:	e008      	b.n	8006cc0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cae:	f7fe f855 	bl	8004d5c <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d901      	bls.n	8006cc0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e118      	b.n	8006ef2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cc0:	4b6c      	ldr	r3, [pc, #432]	; (8006e74 <HAL_RCC_OscConfig+0x4b0>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d0f0      	beq.n	8006cae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d106      	bne.n	8006ce2 <HAL_RCC_OscConfig+0x31e>
 8006cd4:	4b66      	ldr	r3, [pc, #408]	; (8006e70 <HAL_RCC_OscConfig+0x4ac>)
 8006cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd8:	4a65      	ldr	r2, [pc, #404]	; (8006e70 <HAL_RCC_OscConfig+0x4ac>)
 8006cda:	f043 0301 	orr.w	r3, r3, #1
 8006cde:	6713      	str	r3, [r2, #112]	; 0x70
 8006ce0:	e01c      	b.n	8006d1c <HAL_RCC_OscConfig+0x358>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	2b05      	cmp	r3, #5
 8006ce8:	d10c      	bne.n	8006d04 <HAL_RCC_OscConfig+0x340>
 8006cea:	4b61      	ldr	r3, [pc, #388]	; (8006e70 <HAL_RCC_OscConfig+0x4ac>)
 8006cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cee:	4a60      	ldr	r2, [pc, #384]	; (8006e70 <HAL_RCC_OscConfig+0x4ac>)
 8006cf0:	f043 0304 	orr.w	r3, r3, #4
 8006cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8006cf6:	4b5e      	ldr	r3, [pc, #376]	; (8006e70 <HAL_RCC_OscConfig+0x4ac>)
 8006cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfa:	4a5d      	ldr	r2, [pc, #372]	; (8006e70 <HAL_RCC_OscConfig+0x4ac>)
 8006cfc:	f043 0301 	orr.w	r3, r3, #1
 8006d00:	6713      	str	r3, [r2, #112]	; 0x70
 8006d02:	e00b      	b.n	8006d1c <HAL_RCC_OscConfig+0x358>
 8006d04:	4b5a      	ldr	r3, [pc, #360]	; (8006e70 <HAL_RCC_OscConfig+0x4ac>)
 8006d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d08:	4a59      	ldr	r2, [pc, #356]	; (8006e70 <HAL_RCC_OscConfig+0x4ac>)
 8006d0a:	f023 0301 	bic.w	r3, r3, #1
 8006d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d10:	4b57      	ldr	r3, [pc, #348]	; (8006e70 <HAL_RCC_OscConfig+0x4ac>)
 8006d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d14:	4a56      	ldr	r2, [pc, #344]	; (8006e70 <HAL_RCC_OscConfig+0x4ac>)
 8006d16:	f023 0304 	bic.w	r3, r3, #4
 8006d1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d015      	beq.n	8006d50 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d24:	f7fe f81a 	bl	8004d5c <HAL_GetTick>
 8006d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d2a:	e00a      	b.n	8006d42 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d2c:	f7fe f816 	bl	8004d5c <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d901      	bls.n	8006d42 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e0d7      	b.n	8006ef2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d42:	4b4b      	ldr	r3, [pc, #300]	; (8006e70 <HAL_RCC_OscConfig+0x4ac>)
 8006d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0ee      	beq.n	8006d2c <HAL_RCC_OscConfig+0x368>
 8006d4e:	e014      	b.n	8006d7a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d50:	f7fe f804 	bl	8004d5c <HAL_GetTick>
 8006d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d56:	e00a      	b.n	8006d6e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d58:	f7fe f800 	bl	8004d5c <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d901      	bls.n	8006d6e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e0c1      	b.n	8006ef2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d6e:	4b40      	ldr	r3, [pc, #256]	; (8006e70 <HAL_RCC_OscConfig+0x4ac>)
 8006d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d1ee      	bne.n	8006d58 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d7a:	7dfb      	ldrb	r3, [r7, #23]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d105      	bne.n	8006d8c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d80:	4b3b      	ldr	r3, [pc, #236]	; (8006e70 <HAL_RCC_OscConfig+0x4ac>)
 8006d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d84:	4a3a      	ldr	r2, [pc, #232]	; (8006e70 <HAL_RCC_OscConfig+0x4ac>)
 8006d86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 80ad 	beq.w	8006ef0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d96:	4b36      	ldr	r3, [pc, #216]	; (8006e70 <HAL_RCC_OscConfig+0x4ac>)
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f003 030c 	and.w	r3, r3, #12
 8006d9e:	2b08      	cmp	r3, #8
 8006da0:	d060      	beq.n	8006e64 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d145      	bne.n	8006e36 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006daa:	4b33      	ldr	r3, [pc, #204]	; (8006e78 <HAL_RCC_OscConfig+0x4b4>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db0:	f7fd ffd4 	bl	8004d5c <HAL_GetTick>
 8006db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006db6:	e008      	b.n	8006dca <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006db8:	f7fd ffd0 	bl	8004d5c <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e093      	b.n	8006ef2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dca:	4b29      	ldr	r3, [pc, #164]	; (8006e70 <HAL_RCC_OscConfig+0x4ac>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1f0      	bne.n	8006db8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	69da      	ldr	r2, [r3, #28]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	431a      	orrs	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	019b      	lsls	r3, r3, #6
 8006de6:	431a      	orrs	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dec:	085b      	lsrs	r3, r3, #1
 8006dee:	3b01      	subs	r3, #1
 8006df0:	041b      	lsls	r3, r3, #16
 8006df2:	431a      	orrs	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df8:	061b      	lsls	r3, r3, #24
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e00:	071b      	lsls	r3, r3, #28
 8006e02:	491b      	ldr	r1, [pc, #108]	; (8006e70 <HAL_RCC_OscConfig+0x4ac>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e08:	4b1b      	ldr	r3, [pc, #108]	; (8006e78 <HAL_RCC_OscConfig+0x4b4>)
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e0e:	f7fd ffa5 	bl	8004d5c <HAL_GetTick>
 8006e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e14:	e008      	b.n	8006e28 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e16:	f7fd ffa1 	bl	8004d5c <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d901      	bls.n	8006e28 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e064      	b.n	8006ef2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e28:	4b11      	ldr	r3, [pc, #68]	; (8006e70 <HAL_RCC_OscConfig+0x4ac>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d0f0      	beq.n	8006e16 <HAL_RCC_OscConfig+0x452>
 8006e34:	e05c      	b.n	8006ef0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e36:	4b10      	ldr	r3, [pc, #64]	; (8006e78 <HAL_RCC_OscConfig+0x4b4>)
 8006e38:	2200      	movs	r2, #0
 8006e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e3c:	f7fd ff8e 	bl	8004d5c <HAL_GetTick>
 8006e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e42:	e008      	b.n	8006e56 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e44:	f7fd ff8a 	bl	8004d5c <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d901      	bls.n	8006e56 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e04d      	b.n	8006ef2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e56:	4b06      	ldr	r3, [pc, #24]	; (8006e70 <HAL_RCC_OscConfig+0x4ac>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1f0      	bne.n	8006e44 <HAL_RCC_OscConfig+0x480>
 8006e62:	e045      	b.n	8006ef0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d107      	bne.n	8006e7c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e040      	b.n	8006ef2 <HAL_RCC_OscConfig+0x52e>
 8006e70:	40023800 	.word	0x40023800
 8006e74:	40007000 	.word	0x40007000
 8006e78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e7c:	4b1f      	ldr	r3, [pc, #124]	; (8006efc <HAL_RCC_OscConfig+0x538>)
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d030      	beq.n	8006eec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d129      	bne.n	8006eec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d122      	bne.n	8006eec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006eac:	4013      	ands	r3, r2
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006eb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d119      	bne.n	8006eec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec2:	085b      	lsrs	r3, r3, #1
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d10f      	bne.n	8006eec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d107      	bne.n	8006eec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d001      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e000      	b.n	8006ef2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3718      	adds	r7, #24
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	40023800 	.word	0x40023800

08006f00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e07b      	b.n	800700a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d108      	bne.n	8006f2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f22:	d009      	beq.n	8006f38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	61da      	str	r2, [r3, #28]
 8006f2a:	e005      	b.n	8006f38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d106      	bne.n	8006f58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7fd fc0e 	bl	8004774 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006f80:	431a      	orrs	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	f003 0302 	and.w	r3, r3, #2
 8006f94:	431a      	orrs	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	431a      	orrs	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fbc:	ea42 0103 	orr.w	r1, r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	0c1b      	lsrs	r3, r3, #16
 8006fd6:	f003 0104 	and.w	r1, r3, #4
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fde:	f003 0210 	and.w	r2, r3, #16
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	69da      	ldr	r2, [r3, #28]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ff8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b088      	sub	sp, #32
 8007016:	af00      	add	r7, sp, #0
 8007018:	60f8      	str	r0, [r7, #12]
 800701a:	60b9      	str	r1, [r7, #8]
 800701c:	603b      	str	r3, [r7, #0]
 800701e:	4613      	mov	r3, r2
 8007020:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800702c:	2b01      	cmp	r3, #1
 800702e:	d101      	bne.n	8007034 <HAL_SPI_Transmit+0x22>
 8007030:	2302      	movs	r3, #2
 8007032:	e126      	b.n	8007282 <HAL_SPI_Transmit+0x270>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800703c:	f7fd fe8e 	bl	8004d5c <HAL_GetTick>
 8007040:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007042:	88fb      	ldrh	r3, [r7, #6]
 8007044:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b01      	cmp	r3, #1
 8007050:	d002      	beq.n	8007058 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007052:	2302      	movs	r3, #2
 8007054:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007056:	e10b      	b.n	8007270 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d002      	beq.n	8007064 <HAL_SPI_Transmit+0x52>
 800705e:	88fb      	ldrh	r3, [r7, #6]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d102      	bne.n	800706a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007068:	e102      	b.n	8007270 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2203      	movs	r2, #3
 800706e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	88fa      	ldrh	r2, [r7, #6]
 8007082:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	88fa      	ldrh	r2, [r7, #6]
 8007088:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070b0:	d10f      	bne.n	80070d2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070dc:	2b40      	cmp	r3, #64	; 0x40
 80070de:	d007      	beq.n	80070f0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070f8:	d14b      	bne.n	8007192 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d002      	beq.n	8007108 <HAL_SPI_Transmit+0xf6>
 8007102:	8afb      	ldrh	r3, [r7, #22]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d13e      	bne.n	8007186 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710c:	881a      	ldrh	r2, [r3, #0]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007118:	1c9a      	adds	r2, r3, #2
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007122:	b29b      	uxth	r3, r3
 8007124:	3b01      	subs	r3, #1
 8007126:	b29a      	uxth	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800712c:	e02b      	b.n	8007186 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f003 0302 	and.w	r3, r3, #2
 8007138:	2b02      	cmp	r3, #2
 800713a:	d112      	bne.n	8007162 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007140:	881a      	ldrh	r2, [r3, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714c:	1c9a      	adds	r2, r3, #2
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007156:	b29b      	uxth	r3, r3
 8007158:	3b01      	subs	r3, #1
 800715a:	b29a      	uxth	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007160:	e011      	b.n	8007186 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007162:	f7fd fdfb 	bl	8004d5c <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	429a      	cmp	r2, r3
 8007170:	d803      	bhi.n	800717a <HAL_SPI_Transmit+0x168>
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007178:	d102      	bne.n	8007180 <HAL_SPI_Transmit+0x16e>
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d102      	bne.n	8007186 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007184:	e074      	b.n	8007270 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800718a:	b29b      	uxth	r3, r3
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1ce      	bne.n	800712e <HAL_SPI_Transmit+0x11c>
 8007190:	e04c      	b.n	800722c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d002      	beq.n	80071a0 <HAL_SPI_Transmit+0x18e>
 800719a:	8afb      	ldrh	r3, [r7, #22]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d140      	bne.n	8007222 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	330c      	adds	r3, #12
 80071aa:	7812      	ldrb	r2, [r2, #0]
 80071ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b2:	1c5a      	adds	r2, r3, #1
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071bc:	b29b      	uxth	r3, r3
 80071be:	3b01      	subs	r3, #1
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80071c6:	e02c      	b.n	8007222 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f003 0302 	and.w	r3, r3, #2
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d113      	bne.n	80071fe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	330c      	adds	r3, #12
 80071e0:	7812      	ldrb	r2, [r2, #0]
 80071e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e8:	1c5a      	adds	r2, r3, #1
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	3b01      	subs	r3, #1
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80071fc:	e011      	b.n	8007222 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071fe:	f7fd fdad 	bl	8004d5c <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	683a      	ldr	r2, [r7, #0]
 800720a:	429a      	cmp	r2, r3
 800720c:	d803      	bhi.n	8007216 <HAL_SPI_Transmit+0x204>
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007214:	d102      	bne.n	800721c <HAL_SPI_Transmit+0x20a>
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d102      	bne.n	8007222 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007220:	e026      	b.n	8007270 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007226:	b29b      	uxth	r3, r3
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1cd      	bne.n	80071c8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	6839      	ldr	r1, [r7, #0]
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f000 fbcb 	bl	80079cc <SPI_EndRxTxTransaction>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d002      	beq.n	8007242 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2220      	movs	r2, #32
 8007240:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10a      	bne.n	8007260 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800724a:	2300      	movs	r3, #0
 800724c:	613b      	str	r3, [r7, #16]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	613b      	str	r3, [r7, #16]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	613b      	str	r3, [r7, #16]
 800725e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007264:	2b00      	cmp	r3, #0
 8007266:	d002      	beq.n	800726e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	77fb      	strb	r3, [r7, #31]
 800726c:	e000      	b.n	8007270 <HAL_SPI_Transmit+0x25e>
  }

error:
 800726e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007280:	7ffb      	ldrb	r3, [r7, #31]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3720      	adds	r7, #32
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b088      	sub	sp, #32
 800728e:	af02      	add	r7, sp, #8
 8007290:	60f8      	str	r0, [r7, #12]
 8007292:	60b9      	str	r1, [r7, #8]
 8007294:	603b      	str	r3, [r7, #0]
 8007296:	4613      	mov	r3, r2
 8007298:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072a6:	d112      	bne.n	80072ce <HAL_SPI_Receive+0x44>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10e      	bne.n	80072ce <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2204      	movs	r2, #4
 80072b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80072b8:	88fa      	ldrh	r2, [r7, #6]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	4613      	mov	r3, r2
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	68b9      	ldr	r1, [r7, #8]
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f000 f8f1 	bl	80074ac <HAL_SPI_TransmitReceive>
 80072ca:	4603      	mov	r3, r0
 80072cc:	e0ea      	b.n	80074a4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d101      	bne.n	80072dc <HAL_SPI_Receive+0x52>
 80072d8:	2302      	movs	r3, #2
 80072da:	e0e3      	b.n	80074a4 <HAL_SPI_Receive+0x21a>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072e4:	f7fd fd3a 	bl	8004d5c <HAL_GetTick>
 80072e8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d002      	beq.n	80072fc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80072f6:	2302      	movs	r3, #2
 80072f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072fa:	e0ca      	b.n	8007492 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d002      	beq.n	8007308 <HAL_SPI_Receive+0x7e>
 8007302:	88fb      	ldrh	r3, [r7, #6]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d102      	bne.n	800730e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800730c:	e0c1      	b.n	8007492 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2204      	movs	r2, #4
 8007312:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	88fa      	ldrh	r2, [r7, #6]
 8007326:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	88fa      	ldrh	r2, [r7, #6]
 800732c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007354:	d10f      	bne.n	8007376 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007364:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007374:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007380:	2b40      	cmp	r3, #64	; 0x40
 8007382:	d007      	beq.n	8007394 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007392:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d162      	bne.n	8007462 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800739c:	e02e      	b.n	80073fc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d115      	bne.n	80073d8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f103 020c 	add.w	r2, r3, #12
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b8:	7812      	ldrb	r2, [r2, #0]
 80073ba:	b2d2      	uxtb	r2, r2
 80073bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c2:	1c5a      	adds	r2, r3, #1
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	3b01      	subs	r3, #1
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073d6:	e011      	b.n	80073fc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073d8:	f7fd fcc0 	bl	8004d5c <HAL_GetTick>
 80073dc:	4602      	mov	r2, r0
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d803      	bhi.n	80073f0 <HAL_SPI_Receive+0x166>
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073ee:	d102      	bne.n	80073f6 <HAL_SPI_Receive+0x16c>
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d102      	bne.n	80073fc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80073fa:	e04a      	b.n	8007492 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007400:	b29b      	uxth	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1cb      	bne.n	800739e <HAL_SPI_Receive+0x114>
 8007406:	e031      	b.n	800746c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	2b01      	cmp	r3, #1
 8007414:	d113      	bne.n	800743e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68da      	ldr	r2, [r3, #12]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007420:	b292      	uxth	r2, r2
 8007422:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007428:	1c9a      	adds	r2, r3, #2
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007432:	b29b      	uxth	r3, r3
 8007434:	3b01      	subs	r3, #1
 8007436:	b29a      	uxth	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800743c:	e011      	b.n	8007462 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800743e:	f7fd fc8d 	bl	8004d5c <HAL_GetTick>
 8007442:	4602      	mov	r2, r0
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	429a      	cmp	r2, r3
 800744c:	d803      	bhi.n	8007456 <HAL_SPI_Receive+0x1cc>
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007454:	d102      	bne.n	800745c <HAL_SPI_Receive+0x1d2>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d102      	bne.n	8007462 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007460:	e017      	b.n	8007492 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007466:	b29b      	uxth	r3, r3
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1cd      	bne.n	8007408 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f000 fa45 	bl	8007900 <SPI_EndRxTransaction>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d002      	beq.n	8007482 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2220      	movs	r2, #32
 8007480:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007486:	2b00      	cmp	r3, #0
 8007488:	d002      	beq.n	8007490 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	75fb      	strb	r3, [r7, #23]
 800748e:	e000      	b.n	8007492 <HAL_SPI_Receive+0x208>
  }

error :
 8007490:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80074a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3718      	adds	r7, #24
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b08c      	sub	sp, #48	; 0x30
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
 80074b8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80074ba:	2301      	movs	r3, #1
 80074bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d101      	bne.n	80074d2 <HAL_SPI_TransmitReceive+0x26>
 80074ce:	2302      	movs	r3, #2
 80074d0:	e18a      	b.n	80077e8 <HAL_SPI_TransmitReceive+0x33c>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074da:	f7fd fc3f 	bl	8004d5c <HAL_GetTick>
 80074de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80074f0:	887b      	ldrh	r3, [r7, #2]
 80074f2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80074f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d00f      	beq.n	800751c <HAL_SPI_TransmitReceive+0x70>
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007502:	d107      	bne.n	8007514 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d103      	bne.n	8007514 <HAL_SPI_TransmitReceive+0x68>
 800750c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007510:	2b04      	cmp	r3, #4
 8007512:	d003      	beq.n	800751c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007514:	2302      	movs	r3, #2
 8007516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800751a:	e15b      	b.n	80077d4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d005      	beq.n	800752e <HAL_SPI_TransmitReceive+0x82>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d002      	beq.n	800752e <HAL_SPI_TransmitReceive+0x82>
 8007528:	887b      	ldrh	r3, [r7, #2]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d103      	bne.n	8007536 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007534:	e14e      	b.n	80077d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b04      	cmp	r3, #4
 8007540:	d003      	beq.n	800754a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2205      	movs	r2, #5
 8007546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	887a      	ldrh	r2, [r7, #2]
 800755a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	887a      	ldrh	r2, [r7, #2]
 8007560:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	887a      	ldrh	r2, [r7, #2]
 800756c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	887a      	ldrh	r2, [r7, #2]
 8007572:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800758a:	2b40      	cmp	r3, #64	; 0x40
 800758c:	d007      	beq.n	800759e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800759c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075a6:	d178      	bne.n	800769a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d002      	beq.n	80075b6 <HAL_SPI_TransmitReceive+0x10a>
 80075b0:	8b7b      	ldrh	r3, [r7, #26]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d166      	bne.n	8007684 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ba:	881a      	ldrh	r2, [r3, #0]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c6:	1c9a      	adds	r2, r3, #2
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	3b01      	subs	r3, #1
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075da:	e053      	b.n	8007684 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d11b      	bne.n	8007622 <HAL_SPI_TransmitReceive+0x176>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d016      	beq.n	8007622 <HAL_SPI_TransmitReceive+0x176>
 80075f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d113      	bne.n	8007622 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fe:	881a      	ldrh	r2, [r3, #0]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760a:	1c9a      	adds	r2, r3, #2
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007614:	b29b      	uxth	r3, r3
 8007616:	3b01      	subs	r3, #1
 8007618:	b29a      	uxth	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	f003 0301 	and.w	r3, r3, #1
 800762c:	2b01      	cmp	r3, #1
 800762e:	d119      	bne.n	8007664 <HAL_SPI_TransmitReceive+0x1b8>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007634:	b29b      	uxth	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d014      	beq.n	8007664 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68da      	ldr	r2, [r3, #12]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007644:	b292      	uxth	r2, r2
 8007646:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764c:	1c9a      	adds	r2, r3, #2
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007656:	b29b      	uxth	r3, r3
 8007658:	3b01      	subs	r3, #1
 800765a:	b29a      	uxth	r2, r3
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007660:	2301      	movs	r3, #1
 8007662:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007664:	f7fd fb7a 	bl	8004d5c <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007670:	429a      	cmp	r2, r3
 8007672:	d807      	bhi.n	8007684 <HAL_SPI_TransmitReceive+0x1d8>
 8007674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800767a:	d003      	beq.n	8007684 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007682:	e0a7      	b.n	80077d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007688:	b29b      	uxth	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1a6      	bne.n	80075dc <HAL_SPI_TransmitReceive+0x130>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007692:	b29b      	uxth	r3, r3
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1a1      	bne.n	80075dc <HAL_SPI_TransmitReceive+0x130>
 8007698:	e07c      	b.n	8007794 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <HAL_SPI_TransmitReceive+0x1fc>
 80076a2:	8b7b      	ldrh	r3, [r7, #26]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d16b      	bne.n	8007780 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	330c      	adds	r3, #12
 80076b2:	7812      	ldrb	r2, [r2, #0]
 80076b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ba:	1c5a      	adds	r2, r3, #1
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	3b01      	subs	r3, #1
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076ce:	e057      	b.n	8007780 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f003 0302 	and.w	r3, r3, #2
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d11c      	bne.n	8007718 <HAL_SPI_TransmitReceive+0x26c>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d017      	beq.n	8007718 <HAL_SPI_TransmitReceive+0x26c>
 80076e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d114      	bne.n	8007718 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	330c      	adds	r3, #12
 80076f8:	7812      	ldrb	r2, [r2, #0]
 80076fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007700:	1c5a      	adds	r2, r3, #1
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800770a:	b29b      	uxth	r3, r3
 800770c:	3b01      	subs	r3, #1
 800770e:	b29a      	uxth	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007714:	2300      	movs	r3, #0
 8007716:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	2b01      	cmp	r3, #1
 8007724:	d119      	bne.n	800775a <HAL_SPI_TransmitReceive+0x2ae>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800772a:	b29b      	uxth	r3, r3
 800772c:	2b00      	cmp	r3, #0
 800772e:	d014      	beq.n	800775a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68da      	ldr	r2, [r3, #12]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773a:	b2d2      	uxtb	r2, r2
 800773c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007742:	1c5a      	adds	r2, r3, #1
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800774c:	b29b      	uxth	r3, r3
 800774e:	3b01      	subs	r3, #1
 8007750:	b29a      	uxth	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007756:	2301      	movs	r3, #1
 8007758:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800775a:	f7fd faff 	bl	8004d5c <HAL_GetTick>
 800775e:	4602      	mov	r2, r0
 8007760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007766:	429a      	cmp	r2, r3
 8007768:	d803      	bhi.n	8007772 <HAL_SPI_TransmitReceive+0x2c6>
 800776a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007770:	d102      	bne.n	8007778 <HAL_SPI_TransmitReceive+0x2cc>
 8007772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007774:	2b00      	cmp	r3, #0
 8007776:	d103      	bne.n	8007780 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800777e:	e029      	b.n	80077d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007784:	b29b      	uxth	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1a2      	bne.n	80076d0 <HAL_SPI_TransmitReceive+0x224>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800778e:	b29b      	uxth	r3, r3
 8007790:	2b00      	cmp	r3, #0
 8007792:	d19d      	bne.n	80076d0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007796:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f000 f917 	bl	80079cc <SPI_EndRxTxTransaction>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d006      	beq.n	80077b2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2220      	movs	r2, #32
 80077ae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80077b0:	e010      	b.n	80077d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10b      	bne.n	80077d2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077ba:	2300      	movs	r3, #0
 80077bc:	617b      	str	r3, [r7, #20]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	617b      	str	r3, [r7, #20]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	617b      	str	r3, [r7, #20]
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	e000      	b.n	80077d4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80077d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3730      	adds	r7, #48	; 0x30
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b088      	sub	sp, #32
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	603b      	str	r3, [r7, #0]
 80077fc:	4613      	mov	r3, r2
 80077fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007800:	f7fd faac 	bl	8004d5c <HAL_GetTick>
 8007804:	4602      	mov	r2, r0
 8007806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007808:	1a9b      	subs	r3, r3, r2
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	4413      	add	r3, r2
 800780e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007810:	f7fd faa4 	bl	8004d5c <HAL_GetTick>
 8007814:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007816:	4b39      	ldr	r3, [pc, #228]	; (80078fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	015b      	lsls	r3, r3, #5
 800781c:	0d1b      	lsrs	r3, r3, #20
 800781e:	69fa      	ldr	r2, [r7, #28]
 8007820:	fb02 f303 	mul.w	r3, r2, r3
 8007824:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007826:	e054      	b.n	80078d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800782e:	d050      	beq.n	80078d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007830:	f7fd fa94 	bl	8004d5c <HAL_GetTick>
 8007834:	4602      	mov	r2, r0
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	69fa      	ldr	r2, [r7, #28]
 800783c:	429a      	cmp	r2, r3
 800783e:	d902      	bls.n	8007846 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d13d      	bne.n	80078c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	685a      	ldr	r2, [r3, #4]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007854:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800785e:	d111      	bne.n	8007884 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007868:	d004      	beq.n	8007874 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007872:	d107      	bne.n	8007884 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007882:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800788c:	d10f      	bne.n	80078ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800789c:	601a      	str	r2, [r3, #0]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80078be:	2303      	movs	r3, #3
 80078c0:	e017      	b.n	80078f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d101      	bne.n	80078cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80078c8:	2300      	movs	r3, #0
 80078ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	3b01      	subs	r3, #1
 80078d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	689a      	ldr	r2, [r3, #8]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	4013      	ands	r3, r2
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	429a      	cmp	r2, r3
 80078e0:	bf0c      	ite	eq
 80078e2:	2301      	moveq	r3, #1
 80078e4:	2300      	movne	r3, #0
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	461a      	mov	r2, r3
 80078ea:	79fb      	ldrb	r3, [r7, #7]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d19b      	bne.n	8007828 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3720      	adds	r7, #32
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	200023d8 	.word	0x200023d8

08007900 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af02      	add	r7, sp, #8
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007914:	d111      	bne.n	800793a <SPI_EndRxTransaction+0x3a>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800791e:	d004      	beq.n	800792a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007928:	d107      	bne.n	800793a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007938:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007942:	d12a      	bne.n	800799a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800794c:	d012      	beq.n	8007974 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	2200      	movs	r2, #0
 8007956:	2180      	movs	r1, #128	; 0x80
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f7ff ff49 	bl	80077f0 <SPI_WaitFlagStateUntilTimeout>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d02d      	beq.n	80079c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007968:	f043 0220 	orr.w	r2, r3, #32
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007970:	2303      	movs	r3, #3
 8007972:	e026      	b.n	80079c2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	2200      	movs	r2, #0
 800797c:	2101      	movs	r1, #1
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f7ff ff36 	bl	80077f0 <SPI_WaitFlagStateUntilTimeout>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d01a      	beq.n	80079c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800798e:	f043 0220 	orr.w	r2, r3, #32
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007996:	2303      	movs	r3, #3
 8007998:	e013      	b.n	80079c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2200      	movs	r2, #0
 80079a2:	2101      	movs	r1, #1
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f7ff ff23 	bl	80077f0 <SPI_WaitFlagStateUntilTimeout>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d007      	beq.n	80079c0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b4:	f043 0220 	orr.w	r2, r3, #32
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e000      	b.n	80079c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
	...

080079cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b088      	sub	sp, #32
 80079d0:	af02      	add	r7, sp, #8
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80079d8:	4b1b      	ldr	r3, [pc, #108]	; (8007a48 <SPI_EndRxTxTransaction+0x7c>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a1b      	ldr	r2, [pc, #108]	; (8007a4c <SPI_EndRxTxTransaction+0x80>)
 80079de:	fba2 2303 	umull	r2, r3, r2, r3
 80079e2:	0d5b      	lsrs	r3, r3, #21
 80079e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80079e8:	fb02 f303 	mul.w	r3, r2, r3
 80079ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079f6:	d112      	bne.n	8007a1e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2200      	movs	r2, #0
 8007a00:	2180      	movs	r1, #128	; 0x80
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f7ff fef4 	bl	80077f0 <SPI_WaitFlagStateUntilTimeout>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d016      	beq.n	8007a3c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a12:	f043 0220 	orr.w	r2, r3, #32
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e00f      	b.n	8007a3e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00a      	beq.n	8007a3a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	3b01      	subs	r3, #1
 8007a28:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a34:	2b80      	cmp	r3, #128	; 0x80
 8007a36:	d0f2      	beq.n	8007a1e <SPI_EndRxTxTransaction+0x52>
 8007a38:	e000      	b.n	8007a3c <SPI_EndRxTxTransaction+0x70>
        break;
 8007a3a:	bf00      	nop
  }

  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3718      	adds	r7, #24
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	200023d8 	.word	0x200023d8
 8007a4c:	165e9f81 	.word	0x165e9f81

08007a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d101      	bne.n	8007a62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e041      	b.n	8007ae6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d106      	bne.n	8007a7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f7fc fec4 	bl	8004804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2202      	movs	r2, #2
 8007a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	3304      	adds	r3, #4
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	4610      	mov	r0, r2
 8007a90:	f000 fb42 	bl	8008118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
	...

08007af0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d001      	beq.n	8007b08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e046      	b.n	8007b96 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a23      	ldr	r2, [pc, #140]	; (8007ba4 <HAL_TIM_Base_Start+0xb4>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d022      	beq.n	8007b60 <HAL_TIM_Base_Start+0x70>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b22:	d01d      	beq.n	8007b60 <HAL_TIM_Base_Start+0x70>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a1f      	ldr	r2, [pc, #124]	; (8007ba8 <HAL_TIM_Base_Start+0xb8>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d018      	beq.n	8007b60 <HAL_TIM_Base_Start+0x70>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a1e      	ldr	r2, [pc, #120]	; (8007bac <HAL_TIM_Base_Start+0xbc>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d013      	beq.n	8007b60 <HAL_TIM_Base_Start+0x70>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a1c      	ldr	r2, [pc, #112]	; (8007bb0 <HAL_TIM_Base_Start+0xc0>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d00e      	beq.n	8007b60 <HAL_TIM_Base_Start+0x70>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a1b      	ldr	r2, [pc, #108]	; (8007bb4 <HAL_TIM_Base_Start+0xc4>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d009      	beq.n	8007b60 <HAL_TIM_Base_Start+0x70>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a19      	ldr	r2, [pc, #100]	; (8007bb8 <HAL_TIM_Base_Start+0xc8>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d004      	beq.n	8007b60 <HAL_TIM_Base_Start+0x70>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a18      	ldr	r2, [pc, #96]	; (8007bbc <HAL_TIM_Base_Start+0xcc>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d111      	bne.n	8007b84 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f003 0307 	and.w	r3, r3, #7
 8007b6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2b06      	cmp	r3, #6
 8007b70:	d010      	beq.n	8007b94 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f042 0201 	orr.w	r2, r2, #1
 8007b80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b82:	e007      	b.n	8007b94 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f042 0201 	orr.w	r2, r2, #1
 8007b92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3714      	adds	r7, #20
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	40010000 	.word	0x40010000
 8007ba8:	40000400 	.word	0x40000400
 8007bac:	40000800 	.word	0x40000800
 8007bb0:	40000c00 	.word	0x40000c00
 8007bb4:	40010400 	.word	0x40010400
 8007bb8:	40014000 	.word	0x40014000
 8007bbc:	40001800 	.word	0x40001800

08007bc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d101      	bne.n	8007bd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e041      	b.n	8007c56 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d106      	bne.n	8007bec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f839 	bl	8007c5e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2202      	movs	r2, #2
 8007bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	3304      	adds	r3, #4
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	4610      	mov	r0, r2
 8007c00:	f000 fa8a 	bl	8008118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b083      	sub	sp, #12
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c66:	bf00      	nop
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
	...

08007c74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d109      	bne.n	8007c98 <HAL_TIM_PWM_Start+0x24>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	bf14      	ite	ne
 8007c90:	2301      	movne	r3, #1
 8007c92:	2300      	moveq	r3, #0
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	e022      	b.n	8007cde <HAL_TIM_PWM_Start+0x6a>
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	2b04      	cmp	r3, #4
 8007c9c:	d109      	bne.n	8007cb2 <HAL_TIM_PWM_Start+0x3e>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	bf14      	ite	ne
 8007caa:	2301      	movne	r3, #1
 8007cac:	2300      	moveq	r3, #0
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	e015      	b.n	8007cde <HAL_TIM_PWM_Start+0x6a>
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	2b08      	cmp	r3, #8
 8007cb6:	d109      	bne.n	8007ccc <HAL_TIM_PWM_Start+0x58>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	bf14      	ite	ne
 8007cc4:	2301      	movne	r3, #1
 8007cc6:	2300      	moveq	r3, #0
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	e008      	b.n	8007cde <HAL_TIM_PWM_Start+0x6a>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	bf14      	ite	ne
 8007cd8:	2301      	movne	r3, #1
 8007cda:	2300      	moveq	r3, #0
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d001      	beq.n	8007ce6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e07c      	b.n	8007de0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d104      	bne.n	8007cf6 <HAL_TIM_PWM_Start+0x82>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2202      	movs	r2, #2
 8007cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cf4:	e013      	b.n	8007d1e <HAL_TIM_PWM_Start+0xaa>
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	2b04      	cmp	r3, #4
 8007cfa:	d104      	bne.n	8007d06 <HAL_TIM_PWM_Start+0x92>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2202      	movs	r2, #2
 8007d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d04:	e00b      	b.n	8007d1e <HAL_TIM_PWM_Start+0xaa>
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b08      	cmp	r3, #8
 8007d0a:	d104      	bne.n	8007d16 <HAL_TIM_PWM_Start+0xa2>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d14:	e003      	b.n	8007d1e <HAL_TIM_PWM_Start+0xaa>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2202      	movs	r2, #2
 8007d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2201      	movs	r2, #1
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	4618      	mov	r0, r3
 8007d28:	f000 fce0 	bl	80086ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a2d      	ldr	r2, [pc, #180]	; (8007de8 <HAL_TIM_PWM_Start+0x174>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d004      	beq.n	8007d40 <HAL_TIM_PWM_Start+0xcc>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a2c      	ldr	r2, [pc, #176]	; (8007dec <HAL_TIM_PWM_Start+0x178>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d101      	bne.n	8007d44 <HAL_TIM_PWM_Start+0xd0>
 8007d40:	2301      	movs	r3, #1
 8007d42:	e000      	b.n	8007d46 <HAL_TIM_PWM_Start+0xd2>
 8007d44:	2300      	movs	r3, #0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d007      	beq.n	8007d5a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a22      	ldr	r2, [pc, #136]	; (8007de8 <HAL_TIM_PWM_Start+0x174>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d022      	beq.n	8007daa <HAL_TIM_PWM_Start+0x136>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d6c:	d01d      	beq.n	8007daa <HAL_TIM_PWM_Start+0x136>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a1f      	ldr	r2, [pc, #124]	; (8007df0 <HAL_TIM_PWM_Start+0x17c>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d018      	beq.n	8007daa <HAL_TIM_PWM_Start+0x136>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a1d      	ldr	r2, [pc, #116]	; (8007df4 <HAL_TIM_PWM_Start+0x180>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d013      	beq.n	8007daa <HAL_TIM_PWM_Start+0x136>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a1c      	ldr	r2, [pc, #112]	; (8007df8 <HAL_TIM_PWM_Start+0x184>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d00e      	beq.n	8007daa <HAL_TIM_PWM_Start+0x136>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a16      	ldr	r2, [pc, #88]	; (8007dec <HAL_TIM_PWM_Start+0x178>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d009      	beq.n	8007daa <HAL_TIM_PWM_Start+0x136>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a18      	ldr	r2, [pc, #96]	; (8007dfc <HAL_TIM_PWM_Start+0x188>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d004      	beq.n	8007daa <HAL_TIM_PWM_Start+0x136>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a16      	ldr	r2, [pc, #88]	; (8007e00 <HAL_TIM_PWM_Start+0x18c>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d111      	bne.n	8007dce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	f003 0307 	and.w	r3, r3, #7
 8007db4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2b06      	cmp	r3, #6
 8007dba:	d010      	beq.n	8007dde <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f042 0201 	orr.w	r2, r2, #1
 8007dca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dcc:	e007      	b.n	8007dde <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f042 0201 	orr.w	r2, r2, #1
 8007ddc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	40010000 	.word	0x40010000
 8007dec:	40010400 	.word	0x40010400
 8007df0:	40000400 	.word	0x40000400
 8007df4:	40000800 	.word	0x40000800
 8007df8:	40000c00 	.word	0x40000c00
 8007dfc:	40014000 	.word	0x40014000
 8007e00:	40001800 	.word	0x40001800

08007e04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e10:	2300      	movs	r3, #0
 8007e12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d101      	bne.n	8007e22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e1e:	2302      	movs	r3, #2
 8007e20:	e0ae      	b.n	8007f80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b0c      	cmp	r3, #12
 8007e2e:	f200 809f 	bhi.w	8007f70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007e32:	a201      	add	r2, pc, #4	; (adr r2, 8007e38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e38:	08007e6d 	.word	0x08007e6d
 8007e3c:	08007f71 	.word	0x08007f71
 8007e40:	08007f71 	.word	0x08007f71
 8007e44:	08007f71 	.word	0x08007f71
 8007e48:	08007ead 	.word	0x08007ead
 8007e4c:	08007f71 	.word	0x08007f71
 8007e50:	08007f71 	.word	0x08007f71
 8007e54:	08007f71 	.word	0x08007f71
 8007e58:	08007eef 	.word	0x08007eef
 8007e5c:	08007f71 	.word	0x08007f71
 8007e60:	08007f71 	.word	0x08007f71
 8007e64:	08007f71 	.word	0x08007f71
 8007e68:	08007f2f 	.word	0x08007f2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68b9      	ldr	r1, [r7, #8]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 f9f0 	bl	8008258 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	699a      	ldr	r2, [r3, #24]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f042 0208 	orr.w	r2, r2, #8
 8007e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	699a      	ldr	r2, [r3, #24]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f022 0204 	bic.w	r2, r2, #4
 8007e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6999      	ldr	r1, [r3, #24]
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	691a      	ldr	r2, [r3, #16]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	430a      	orrs	r2, r1
 8007ea8:	619a      	str	r2, [r3, #24]
      break;
 8007eaa:	e064      	b.n	8007f76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68b9      	ldr	r1, [r7, #8]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 fa40 	bl	8008338 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	699a      	ldr	r2, [r3, #24]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ec6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	699a      	ldr	r2, [r3, #24]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6999      	ldr	r1, [r3, #24]
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	021a      	lsls	r2, r3, #8
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	430a      	orrs	r2, r1
 8007eea:	619a      	str	r2, [r3, #24]
      break;
 8007eec:	e043      	b.n	8007f76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68b9      	ldr	r1, [r7, #8]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 fa95 	bl	8008424 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	69da      	ldr	r2, [r3, #28]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f042 0208 	orr.w	r2, r2, #8
 8007f08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	69da      	ldr	r2, [r3, #28]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f022 0204 	bic.w	r2, r2, #4
 8007f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	69d9      	ldr	r1, [r3, #28]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	691a      	ldr	r2, [r3, #16]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	61da      	str	r2, [r3, #28]
      break;
 8007f2c:	e023      	b.n	8007f76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68b9      	ldr	r1, [r7, #8]
 8007f34:	4618      	mov	r0, r3
 8007f36:	f000 fae9 	bl	800850c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	69da      	ldr	r2, [r3, #28]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	69da      	ldr	r2, [r3, #28]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	69d9      	ldr	r1, [r3, #28]
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	021a      	lsls	r2, r3, #8
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	61da      	str	r2, [r3, #28]
      break;
 8007f6e:	e002      	b.n	8007f76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	75fb      	strb	r3, [r7, #23]
      break;
 8007f74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3718      	adds	r7, #24
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d101      	bne.n	8007fa4 <HAL_TIM_ConfigClockSource+0x1c>
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	e0b4      	b.n	800810e <HAL_TIM_ConfigClockSource+0x186>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007fc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fdc:	d03e      	beq.n	800805c <HAL_TIM_ConfigClockSource+0xd4>
 8007fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fe2:	f200 8087 	bhi.w	80080f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fea:	f000 8086 	beq.w	80080fa <HAL_TIM_ConfigClockSource+0x172>
 8007fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ff2:	d87f      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ff4:	2b70      	cmp	r3, #112	; 0x70
 8007ff6:	d01a      	beq.n	800802e <HAL_TIM_ConfigClockSource+0xa6>
 8007ff8:	2b70      	cmp	r3, #112	; 0x70
 8007ffa:	d87b      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ffc:	2b60      	cmp	r3, #96	; 0x60
 8007ffe:	d050      	beq.n	80080a2 <HAL_TIM_ConfigClockSource+0x11a>
 8008000:	2b60      	cmp	r3, #96	; 0x60
 8008002:	d877      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x16c>
 8008004:	2b50      	cmp	r3, #80	; 0x50
 8008006:	d03c      	beq.n	8008082 <HAL_TIM_ConfigClockSource+0xfa>
 8008008:	2b50      	cmp	r3, #80	; 0x50
 800800a:	d873      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x16c>
 800800c:	2b40      	cmp	r3, #64	; 0x40
 800800e:	d058      	beq.n	80080c2 <HAL_TIM_ConfigClockSource+0x13a>
 8008010:	2b40      	cmp	r3, #64	; 0x40
 8008012:	d86f      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x16c>
 8008014:	2b30      	cmp	r3, #48	; 0x30
 8008016:	d064      	beq.n	80080e2 <HAL_TIM_ConfigClockSource+0x15a>
 8008018:	2b30      	cmp	r3, #48	; 0x30
 800801a:	d86b      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x16c>
 800801c:	2b20      	cmp	r3, #32
 800801e:	d060      	beq.n	80080e2 <HAL_TIM_ConfigClockSource+0x15a>
 8008020:	2b20      	cmp	r3, #32
 8008022:	d867      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x16c>
 8008024:	2b00      	cmp	r3, #0
 8008026:	d05c      	beq.n	80080e2 <HAL_TIM_ConfigClockSource+0x15a>
 8008028:	2b10      	cmp	r3, #16
 800802a:	d05a      	beq.n	80080e2 <HAL_TIM_ConfigClockSource+0x15a>
 800802c:	e062      	b.n	80080f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6818      	ldr	r0, [r3, #0]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	6899      	ldr	r1, [r3, #8]
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	685a      	ldr	r2, [r3, #4]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	f000 fb35 	bl	80086ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008050:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	609a      	str	r2, [r3, #8]
      break;
 800805a:	e04f      	b.n	80080fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6818      	ldr	r0, [r3, #0]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	6899      	ldr	r1, [r3, #8]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	685a      	ldr	r2, [r3, #4]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	f000 fb1e 	bl	80086ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	689a      	ldr	r2, [r3, #8]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800807e:	609a      	str	r2, [r3, #8]
      break;
 8008080:	e03c      	b.n	80080fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6818      	ldr	r0, [r3, #0]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	6859      	ldr	r1, [r3, #4]
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	461a      	mov	r2, r3
 8008090:	f000 fa92 	bl	80085b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2150      	movs	r1, #80	; 0x50
 800809a:	4618      	mov	r0, r3
 800809c:	f000 faeb 	bl	8008676 <TIM_ITRx_SetConfig>
      break;
 80080a0:	e02c      	b.n	80080fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6818      	ldr	r0, [r3, #0]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	6859      	ldr	r1, [r3, #4]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	461a      	mov	r2, r3
 80080b0:	f000 fab1 	bl	8008616 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2160      	movs	r1, #96	; 0x60
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 fadb 	bl	8008676 <TIM_ITRx_SetConfig>
      break;
 80080c0:	e01c      	b.n	80080fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6818      	ldr	r0, [r3, #0]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	6859      	ldr	r1, [r3, #4]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	461a      	mov	r2, r3
 80080d0:	f000 fa72 	bl	80085b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2140      	movs	r1, #64	; 0x40
 80080da:	4618      	mov	r0, r3
 80080dc:	f000 facb 	bl	8008676 <TIM_ITRx_SetConfig>
      break;
 80080e0:	e00c      	b.n	80080fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4619      	mov	r1, r3
 80080ec:	4610      	mov	r0, r2
 80080ee:	f000 fac2 	bl	8008676 <TIM_ITRx_SetConfig>
      break;
 80080f2:	e003      	b.n	80080fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	73fb      	strb	r3, [r7, #15]
      break;
 80080f8:	e000      	b.n	80080fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80080fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800810c:	7bfb      	ldrb	r3, [r7, #15]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
	...

08008118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a40      	ldr	r2, [pc, #256]	; (800822c <TIM_Base_SetConfig+0x114>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d013      	beq.n	8008158 <TIM_Base_SetConfig+0x40>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008136:	d00f      	beq.n	8008158 <TIM_Base_SetConfig+0x40>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a3d      	ldr	r2, [pc, #244]	; (8008230 <TIM_Base_SetConfig+0x118>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d00b      	beq.n	8008158 <TIM_Base_SetConfig+0x40>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a3c      	ldr	r2, [pc, #240]	; (8008234 <TIM_Base_SetConfig+0x11c>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d007      	beq.n	8008158 <TIM_Base_SetConfig+0x40>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a3b      	ldr	r2, [pc, #236]	; (8008238 <TIM_Base_SetConfig+0x120>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d003      	beq.n	8008158 <TIM_Base_SetConfig+0x40>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a3a      	ldr	r2, [pc, #232]	; (800823c <TIM_Base_SetConfig+0x124>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d108      	bne.n	800816a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800815e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	4313      	orrs	r3, r2
 8008168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a2f      	ldr	r2, [pc, #188]	; (800822c <TIM_Base_SetConfig+0x114>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d02b      	beq.n	80081ca <TIM_Base_SetConfig+0xb2>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008178:	d027      	beq.n	80081ca <TIM_Base_SetConfig+0xb2>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a2c      	ldr	r2, [pc, #176]	; (8008230 <TIM_Base_SetConfig+0x118>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d023      	beq.n	80081ca <TIM_Base_SetConfig+0xb2>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a2b      	ldr	r2, [pc, #172]	; (8008234 <TIM_Base_SetConfig+0x11c>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d01f      	beq.n	80081ca <TIM_Base_SetConfig+0xb2>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a2a      	ldr	r2, [pc, #168]	; (8008238 <TIM_Base_SetConfig+0x120>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d01b      	beq.n	80081ca <TIM_Base_SetConfig+0xb2>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a29      	ldr	r2, [pc, #164]	; (800823c <TIM_Base_SetConfig+0x124>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d017      	beq.n	80081ca <TIM_Base_SetConfig+0xb2>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a28      	ldr	r2, [pc, #160]	; (8008240 <TIM_Base_SetConfig+0x128>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d013      	beq.n	80081ca <TIM_Base_SetConfig+0xb2>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a27      	ldr	r2, [pc, #156]	; (8008244 <TIM_Base_SetConfig+0x12c>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d00f      	beq.n	80081ca <TIM_Base_SetConfig+0xb2>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a26      	ldr	r2, [pc, #152]	; (8008248 <TIM_Base_SetConfig+0x130>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d00b      	beq.n	80081ca <TIM_Base_SetConfig+0xb2>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a25      	ldr	r2, [pc, #148]	; (800824c <TIM_Base_SetConfig+0x134>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d007      	beq.n	80081ca <TIM_Base_SetConfig+0xb2>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a24      	ldr	r2, [pc, #144]	; (8008250 <TIM_Base_SetConfig+0x138>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d003      	beq.n	80081ca <TIM_Base_SetConfig+0xb2>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a23      	ldr	r2, [pc, #140]	; (8008254 <TIM_Base_SetConfig+0x13c>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d108      	bne.n	80081dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	4313      	orrs	r3, r2
 80081da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	689a      	ldr	r2, [r3, #8]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a0a      	ldr	r2, [pc, #40]	; (800822c <TIM_Base_SetConfig+0x114>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d003      	beq.n	8008210 <TIM_Base_SetConfig+0xf8>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a0c      	ldr	r2, [pc, #48]	; (800823c <TIM_Base_SetConfig+0x124>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d103      	bne.n	8008218 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	691a      	ldr	r2, [r3, #16]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	615a      	str	r2, [r3, #20]
}
 800821e:	bf00      	nop
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	40010000 	.word	0x40010000
 8008230:	40000400 	.word	0x40000400
 8008234:	40000800 	.word	0x40000800
 8008238:	40000c00 	.word	0x40000c00
 800823c:	40010400 	.word	0x40010400
 8008240:	40014000 	.word	0x40014000
 8008244:	40014400 	.word	0x40014400
 8008248:	40014800 	.word	0x40014800
 800824c:	40001800 	.word	0x40001800
 8008250:	40001c00 	.word	0x40001c00
 8008254:	40002000 	.word	0x40002000

08008258 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008258:	b480      	push	{r7}
 800825a:	b087      	sub	sp, #28
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	f023 0201 	bic.w	r2, r3, #1
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	699b      	ldr	r3, [r3, #24]
 800827e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f023 0303 	bic.w	r3, r3, #3
 800828e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	4313      	orrs	r3, r2
 8008298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	f023 0302 	bic.w	r3, r3, #2
 80082a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a20      	ldr	r2, [pc, #128]	; (8008330 <TIM_OC1_SetConfig+0xd8>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d003      	beq.n	80082bc <TIM_OC1_SetConfig+0x64>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4a1f      	ldr	r2, [pc, #124]	; (8008334 <TIM_OC1_SetConfig+0xdc>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d10c      	bne.n	80082d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	f023 0308 	bic.w	r3, r3, #8
 80082c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	697a      	ldr	r2, [r7, #20]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	f023 0304 	bic.w	r3, r3, #4
 80082d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a15      	ldr	r2, [pc, #84]	; (8008330 <TIM_OC1_SetConfig+0xd8>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d003      	beq.n	80082e6 <TIM_OC1_SetConfig+0x8e>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a14      	ldr	r2, [pc, #80]	; (8008334 <TIM_OC1_SetConfig+0xdc>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d111      	bne.n	800830a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	695b      	ldr	r3, [r3, #20]
 80082fa:	693a      	ldr	r2, [r7, #16]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	699b      	ldr	r3, [r3, #24]
 8008304:	693a      	ldr	r2, [r7, #16]
 8008306:	4313      	orrs	r3, r2
 8008308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	685a      	ldr	r2, [r3, #4]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	697a      	ldr	r2, [r7, #20]
 8008322:	621a      	str	r2, [r3, #32]
}
 8008324:	bf00      	nop
 8008326:	371c      	adds	r7, #28
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr
 8008330:	40010000 	.word	0x40010000
 8008334:	40010400 	.word	0x40010400

08008338 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008338:	b480      	push	{r7}
 800833a:	b087      	sub	sp, #28
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a1b      	ldr	r3, [r3, #32]
 8008346:	f023 0210 	bic.w	r2, r3, #16
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800836e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	021b      	lsls	r3, r3, #8
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	4313      	orrs	r3, r2
 800837a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	f023 0320 	bic.w	r3, r3, #32
 8008382:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	011b      	lsls	r3, r3, #4
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	4313      	orrs	r3, r2
 800838e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a22      	ldr	r2, [pc, #136]	; (800841c <TIM_OC2_SetConfig+0xe4>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d003      	beq.n	80083a0 <TIM_OC2_SetConfig+0x68>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a21      	ldr	r2, [pc, #132]	; (8008420 <TIM_OC2_SetConfig+0xe8>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d10d      	bne.n	80083bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	011b      	lsls	r3, r3, #4
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a17      	ldr	r2, [pc, #92]	; (800841c <TIM_OC2_SetConfig+0xe4>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d003      	beq.n	80083cc <TIM_OC2_SetConfig+0x94>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a16      	ldr	r2, [pc, #88]	; (8008420 <TIM_OC2_SetConfig+0xe8>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d113      	bne.n	80083f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	695b      	ldr	r3, [r3, #20]
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	693a      	ldr	r2, [r7, #16]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	685a      	ldr	r2, [r3, #4]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	621a      	str	r2, [r3, #32]
}
 800840e:	bf00      	nop
 8008410:	371c      	adds	r7, #28
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	40010000 	.word	0x40010000
 8008420:	40010400 	.word	0x40010400

08008424 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008424:	b480      	push	{r7}
 8008426:	b087      	sub	sp, #28
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a1b      	ldr	r3, [r3, #32]
 8008432:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a1b      	ldr	r3, [r3, #32]
 800843e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	69db      	ldr	r3, [r3, #28]
 800844a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f023 0303 	bic.w	r3, r3, #3
 800845a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	4313      	orrs	r3, r2
 8008464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800846c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	021b      	lsls	r3, r3, #8
 8008474:	697a      	ldr	r2, [r7, #20]
 8008476:	4313      	orrs	r3, r2
 8008478:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4a21      	ldr	r2, [pc, #132]	; (8008504 <TIM_OC3_SetConfig+0xe0>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d003      	beq.n	800848a <TIM_OC3_SetConfig+0x66>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a20      	ldr	r2, [pc, #128]	; (8008508 <TIM_OC3_SetConfig+0xe4>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d10d      	bne.n	80084a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008490:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	021b      	lsls	r3, r3, #8
 8008498:	697a      	ldr	r2, [r7, #20]
 800849a:	4313      	orrs	r3, r2
 800849c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a16      	ldr	r2, [pc, #88]	; (8008504 <TIM_OC3_SetConfig+0xe0>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d003      	beq.n	80084b6 <TIM_OC3_SetConfig+0x92>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a15      	ldr	r2, [pc, #84]	; (8008508 <TIM_OC3_SetConfig+0xe4>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d113      	bne.n	80084de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	011b      	lsls	r3, r3, #4
 80084cc:	693a      	ldr	r2, [r7, #16]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	699b      	ldr	r3, [r3, #24]
 80084d6:	011b      	lsls	r3, r3, #4
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	4313      	orrs	r3, r2
 80084dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	693a      	ldr	r2, [r7, #16]
 80084e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	685a      	ldr	r2, [r3, #4]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	697a      	ldr	r2, [r7, #20]
 80084f6:	621a      	str	r2, [r3, #32]
}
 80084f8:	bf00      	nop
 80084fa:	371c      	adds	r7, #28
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr
 8008504:	40010000 	.word	0x40010000
 8008508:	40010400 	.word	0x40010400

0800850c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800850c:	b480      	push	{r7}
 800850e:	b087      	sub	sp, #28
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a1b      	ldr	r3, [r3, #32]
 800851a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	69db      	ldr	r3, [r3, #28]
 8008532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800853a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008542:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	021b      	lsls	r3, r3, #8
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	4313      	orrs	r3, r2
 800854e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008556:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	031b      	lsls	r3, r3, #12
 800855e:	693a      	ldr	r2, [r7, #16]
 8008560:	4313      	orrs	r3, r2
 8008562:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a12      	ldr	r2, [pc, #72]	; (80085b0 <TIM_OC4_SetConfig+0xa4>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d003      	beq.n	8008574 <TIM_OC4_SetConfig+0x68>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a11      	ldr	r2, [pc, #68]	; (80085b4 <TIM_OC4_SetConfig+0xa8>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d109      	bne.n	8008588 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800857a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	695b      	ldr	r3, [r3, #20]
 8008580:	019b      	lsls	r3, r3, #6
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	4313      	orrs	r3, r2
 8008586:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	685a      	ldr	r2, [r3, #4]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	621a      	str	r2, [r3, #32]
}
 80085a2:	bf00      	nop
 80085a4:	371c      	adds	r7, #28
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	40010000 	.word	0x40010000
 80085b4:	40010400 	.word	0x40010400

080085b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b087      	sub	sp, #28
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6a1b      	ldr	r3, [r3, #32]
 80085c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6a1b      	ldr	r3, [r3, #32]
 80085ce:	f023 0201 	bic.w	r2, r3, #1
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	699b      	ldr	r3, [r3, #24]
 80085da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	011b      	lsls	r3, r3, #4
 80085e8:	693a      	ldr	r2, [r7, #16]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	f023 030a 	bic.w	r3, r3, #10
 80085f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	693a      	ldr	r2, [r7, #16]
 8008602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	621a      	str	r2, [r3, #32]
}
 800860a:	bf00      	nop
 800860c:	371c      	adds	r7, #28
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr

08008616 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008616:	b480      	push	{r7}
 8008618:	b087      	sub	sp, #28
 800861a:	af00      	add	r7, sp, #0
 800861c:	60f8      	str	r0, [r7, #12]
 800861e:	60b9      	str	r1, [r7, #8]
 8008620:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	f023 0210 	bic.w	r2, r3, #16
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	699b      	ldr	r3, [r3, #24]
 8008632:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6a1b      	ldr	r3, [r3, #32]
 8008638:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008640:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	031b      	lsls	r3, r3, #12
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	4313      	orrs	r3, r2
 800864a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008652:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	011b      	lsls	r3, r3, #4
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	4313      	orrs	r3, r2
 800865c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	693a      	ldr	r2, [r7, #16]
 8008668:	621a      	str	r2, [r3, #32]
}
 800866a:	bf00      	nop
 800866c:	371c      	adds	r7, #28
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008676:	b480      	push	{r7}
 8008678:	b085      	sub	sp, #20
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800868c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800868e:	683a      	ldr	r2, [r7, #0]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4313      	orrs	r3, r2
 8008694:	f043 0307 	orr.w	r3, r3, #7
 8008698:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	609a      	str	r2, [r3, #8]
}
 80086a0:	bf00      	nop
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b087      	sub	sp, #28
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]
 80086b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	021a      	lsls	r2, r3, #8
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	431a      	orrs	r2, r3
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	697a      	ldr	r2, [r7, #20]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	697a      	ldr	r2, [r7, #20]
 80086de:	609a      	str	r2, [r3, #8]
}
 80086e0:	bf00      	nop
 80086e2:	371c      	adds	r7, #28
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b087      	sub	sp, #28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	f003 031f 	and.w	r3, r3, #31
 80086fe:	2201      	movs	r2, #1
 8008700:	fa02 f303 	lsl.w	r3, r2, r3
 8008704:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6a1a      	ldr	r2, [r3, #32]
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	43db      	mvns	r3, r3
 800870e:	401a      	ands	r2, r3
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6a1a      	ldr	r2, [r3, #32]
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	f003 031f 	and.w	r3, r3, #31
 800871e:	6879      	ldr	r1, [r7, #4]
 8008720:	fa01 f303 	lsl.w	r3, r1, r3
 8008724:	431a      	orrs	r2, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	621a      	str	r2, [r3, #32]
}
 800872a:	bf00      	nop
 800872c:	371c      	adds	r7, #28
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
	...

08008738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008748:	2b01      	cmp	r3, #1
 800874a:	d101      	bne.n	8008750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800874c:	2302      	movs	r3, #2
 800874e:	e05a      	b.n	8008806 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2202      	movs	r2, #2
 800875c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008776:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	4313      	orrs	r3, r2
 8008780:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a21      	ldr	r2, [pc, #132]	; (8008814 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d022      	beq.n	80087da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800879c:	d01d      	beq.n	80087da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a1d      	ldr	r2, [pc, #116]	; (8008818 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d018      	beq.n	80087da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a1b      	ldr	r2, [pc, #108]	; (800881c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d013      	beq.n	80087da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a1a      	ldr	r2, [pc, #104]	; (8008820 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d00e      	beq.n	80087da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a18      	ldr	r2, [pc, #96]	; (8008824 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d009      	beq.n	80087da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a17      	ldr	r2, [pc, #92]	; (8008828 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d004      	beq.n	80087da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a15      	ldr	r2, [pc, #84]	; (800882c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d10c      	bne.n	80087f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	68ba      	ldr	r2, [r7, #8]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3714      	adds	r7, #20
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	40010000 	.word	0x40010000
 8008818:	40000400 	.word	0x40000400
 800881c:	40000800 	.word	0x40000800
 8008820:	40000c00 	.word	0x40000c00
 8008824:	40010400 	.word	0x40010400
 8008828:	40014000 	.word	0x40014000
 800882c:	40001800 	.word	0x40001800

08008830 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800883a:	2300      	movs	r3, #0
 800883c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008844:	2b01      	cmp	r3, #1
 8008846:	d101      	bne.n	800884c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008848:	2302      	movs	r3, #2
 800884a:	e03d      	b.n	80088c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	4313      	orrs	r3, r2
 8008860:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	4313      	orrs	r3, r2
 800886e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	4313      	orrs	r3, r2
 800887c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4313      	orrs	r3, r2
 800888a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	4313      	orrs	r3, r2
 8008898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	69db      	ldr	r3, [r3, #28]
 80088b2:	4313      	orrs	r3, r2
 80088b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3714      	adds	r7, #20
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d101      	bne.n	80088e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e03f      	b.n	8008966 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d106      	bne.n	8008900 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f7fc f82c 	bl	8004958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2224      	movs	r2, #36	; 0x24
 8008904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	68da      	ldr	r2, [r3, #12]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008916:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 f929 	bl	8008b70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	691a      	ldr	r2, [r3, #16]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800892c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	695a      	ldr	r2, [r3, #20]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800893c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68da      	ldr	r2, [r3, #12]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800894c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2220      	movs	r2, #32
 8008958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2220      	movs	r2, #32
 8008960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b08a      	sub	sp, #40	; 0x28
 8008972:	af02      	add	r7, sp, #8
 8008974:	60f8      	str	r0, [r7, #12]
 8008976:	60b9      	str	r1, [r7, #8]
 8008978:	603b      	str	r3, [r7, #0]
 800897a:	4613      	mov	r3, r2
 800897c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800897e:	2300      	movs	r3, #0
 8008980:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008988:	b2db      	uxtb	r3, r3
 800898a:	2b20      	cmp	r3, #32
 800898c:	d17c      	bne.n	8008a88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d002      	beq.n	800899a <HAL_UART_Transmit+0x2c>
 8008994:	88fb      	ldrh	r3, [r7, #6]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	e075      	b.n	8008a8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d101      	bne.n	80089ac <HAL_UART_Transmit+0x3e>
 80089a8:	2302      	movs	r3, #2
 80089aa:	e06e      	b.n	8008a8a <HAL_UART_Transmit+0x11c>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2200      	movs	r2, #0
 80089b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2221      	movs	r2, #33	; 0x21
 80089be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089c2:	f7fc f9cb 	bl	8004d5c <HAL_GetTick>
 80089c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	88fa      	ldrh	r2, [r7, #6]
 80089cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	88fa      	ldrh	r2, [r7, #6]
 80089d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089dc:	d108      	bne.n	80089f0 <HAL_UART_Transmit+0x82>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d104      	bne.n	80089f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80089e6:	2300      	movs	r3, #0
 80089e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	61bb      	str	r3, [r7, #24]
 80089ee:	e003      	b.n	80089f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089f4:	2300      	movs	r3, #0
 80089f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008a00:	e02a      	b.n	8008a58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	2180      	movs	r1, #128	; 0x80
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f000 f840 	bl	8008a92 <UART_WaitOnFlagUntilTimeout>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d001      	beq.n	8008a1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008a18:	2303      	movs	r3, #3
 8008a1a:	e036      	b.n	8008a8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10b      	bne.n	8008a3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	881b      	ldrh	r3, [r3, #0]
 8008a26:	461a      	mov	r2, r3
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	3302      	adds	r3, #2
 8008a36:	61bb      	str	r3, [r7, #24]
 8008a38:	e007      	b.n	8008a4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	781a      	ldrb	r2, [r3, #0]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	3301      	adds	r3, #1
 8008a48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	3b01      	subs	r3, #1
 8008a52:	b29a      	uxth	r2, r3
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1cf      	bne.n	8008a02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	2140      	movs	r1, #64	; 0x40
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f000 f810 	bl	8008a92 <UART_WaitOnFlagUntilTimeout>
 8008a72:	4603      	mov	r3, r0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d001      	beq.n	8008a7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	e006      	b.n	8008a8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2220      	movs	r2, #32
 8008a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008a84:	2300      	movs	r3, #0
 8008a86:	e000      	b.n	8008a8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008a88:	2302      	movs	r3, #2
  }
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3720      	adds	r7, #32
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b090      	sub	sp, #64	; 0x40
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	60f8      	str	r0, [r7, #12]
 8008a9a:	60b9      	str	r1, [r7, #8]
 8008a9c:	603b      	str	r3, [r7, #0]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008aa2:	e050      	b.n	8008b46 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008aaa:	d04c      	beq.n	8008b46 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d007      	beq.n	8008ac2 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ab2:	f7fc f953 	bl	8004d5c <HAL_GetTick>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d241      	bcs.n	8008b46 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	330c      	adds	r3, #12
 8008ac8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008acc:	e853 3f00 	ldrex	r3, [r3]
 8008ad0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	330c      	adds	r3, #12
 8008ae0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ae2:	637a      	str	r2, [r7, #52]	; 0x34
 8008ae4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ae8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008aea:	e841 2300 	strex	r3, r2, [r1]
 8008aee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1e5      	bne.n	8008ac2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	3314      	adds	r3, #20
 8008afc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	e853 3f00 	ldrex	r3, [r3]
 8008b04:	613b      	str	r3, [r7, #16]
   return(result);
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	f023 0301 	bic.w	r3, r3, #1
 8008b0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	3314      	adds	r3, #20
 8008b14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b16:	623a      	str	r2, [r7, #32]
 8008b18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1a:	69f9      	ldr	r1, [r7, #28]
 8008b1c:	6a3a      	ldr	r2, [r7, #32]
 8008b1e:	e841 2300 	strex	r3, r2, [r1]
 8008b22:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1e5      	bne.n	8008af6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2220      	movs	r2, #32
 8008b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2220      	movs	r2, #32
 8008b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e00f      	b.n	8008b66 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	4013      	ands	r3, r2
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	bf0c      	ite	eq
 8008b56:	2301      	moveq	r3, #1
 8008b58:	2300      	movne	r3, #0
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	79fb      	ldrb	r3, [r7, #7]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d09f      	beq.n	8008aa4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3740      	adds	r7, #64	; 0x40
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
	...

08008b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b74:	b0c0      	sub	sp, #256	; 0x100
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b8c:	68d9      	ldr	r1, [r3, #12]
 8008b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	ea40 0301 	orr.w	r3, r0, r1
 8008b98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b9e:	689a      	ldr	r2, [r3, #8]
 8008ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	431a      	orrs	r2, r3
 8008ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bac:	695b      	ldr	r3, [r3, #20]
 8008bae:	431a      	orrs	r2, r3
 8008bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb4:	69db      	ldr	r3, [r3, #28]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008bc8:	f021 010c 	bic.w	r1, r1, #12
 8008bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008bd6:	430b      	orrs	r3, r1
 8008bd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	695b      	ldr	r3, [r3, #20]
 8008be2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bea:	6999      	ldr	r1, [r3, #24]
 8008bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	ea40 0301 	orr.w	r3, r0, r1
 8008bf6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	4b8f      	ldr	r3, [pc, #572]	; (8008e3c <UART_SetConfig+0x2cc>)
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d005      	beq.n	8008c10 <UART_SetConfig+0xa0>
 8008c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	4b8d      	ldr	r3, [pc, #564]	; (8008e40 <UART_SetConfig+0x2d0>)
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d104      	bne.n	8008c1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c10:	f7fd fc94 	bl	800653c <HAL_RCC_GetPCLK2Freq>
 8008c14:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008c18:	e003      	b.n	8008c22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c1a:	f7fd fc7b 	bl	8006514 <HAL_RCC_GetPCLK1Freq>
 8008c1e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c26:	69db      	ldr	r3, [r3, #28]
 8008c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c2c:	f040 810c 	bne.w	8008e48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c34:	2200      	movs	r2, #0
 8008c36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c3a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008c3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008c42:	4622      	mov	r2, r4
 8008c44:	462b      	mov	r3, r5
 8008c46:	1891      	adds	r1, r2, r2
 8008c48:	65b9      	str	r1, [r7, #88]	; 0x58
 8008c4a:	415b      	adcs	r3, r3
 8008c4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008c52:	4621      	mov	r1, r4
 8008c54:	eb12 0801 	adds.w	r8, r2, r1
 8008c58:	4629      	mov	r1, r5
 8008c5a:	eb43 0901 	adc.w	r9, r3, r1
 8008c5e:	f04f 0200 	mov.w	r2, #0
 8008c62:	f04f 0300 	mov.w	r3, #0
 8008c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c72:	4690      	mov	r8, r2
 8008c74:	4699      	mov	r9, r3
 8008c76:	4623      	mov	r3, r4
 8008c78:	eb18 0303 	adds.w	r3, r8, r3
 8008c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c80:	462b      	mov	r3, r5
 8008c82:	eb49 0303 	adc.w	r3, r9, r3
 8008c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c96:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008c9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	18db      	adds	r3, r3, r3
 8008ca2:	653b      	str	r3, [r7, #80]	; 0x50
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	eb42 0303 	adc.w	r3, r2, r3
 8008caa:	657b      	str	r3, [r7, #84]	; 0x54
 8008cac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008cb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008cb4:	f7f8 f808 	bl	8000cc8 <__aeabi_uldivmod>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	460b      	mov	r3, r1
 8008cbc:	4b61      	ldr	r3, [pc, #388]	; (8008e44 <UART_SetConfig+0x2d4>)
 8008cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8008cc2:	095b      	lsrs	r3, r3, #5
 8008cc4:	011c      	lsls	r4, r3, #4
 8008cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008cd0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008cd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008cd8:	4642      	mov	r2, r8
 8008cda:	464b      	mov	r3, r9
 8008cdc:	1891      	adds	r1, r2, r2
 8008cde:	64b9      	str	r1, [r7, #72]	; 0x48
 8008ce0:	415b      	adcs	r3, r3
 8008ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ce4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ce8:	4641      	mov	r1, r8
 8008cea:	eb12 0a01 	adds.w	sl, r2, r1
 8008cee:	4649      	mov	r1, r9
 8008cf0:	eb43 0b01 	adc.w	fp, r3, r1
 8008cf4:	f04f 0200 	mov.w	r2, #0
 8008cf8:	f04f 0300 	mov.w	r3, #0
 8008cfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d08:	4692      	mov	sl, r2
 8008d0a:	469b      	mov	fp, r3
 8008d0c:	4643      	mov	r3, r8
 8008d0e:	eb1a 0303 	adds.w	r3, sl, r3
 8008d12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d16:	464b      	mov	r3, r9
 8008d18:	eb4b 0303 	adc.w	r3, fp, r3
 8008d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d2c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008d30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008d34:	460b      	mov	r3, r1
 8008d36:	18db      	adds	r3, r3, r3
 8008d38:	643b      	str	r3, [r7, #64]	; 0x40
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	eb42 0303 	adc.w	r3, r2, r3
 8008d40:	647b      	str	r3, [r7, #68]	; 0x44
 8008d42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008d46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008d4a:	f7f7 ffbd 	bl	8000cc8 <__aeabi_uldivmod>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	460b      	mov	r3, r1
 8008d52:	4611      	mov	r1, r2
 8008d54:	4b3b      	ldr	r3, [pc, #236]	; (8008e44 <UART_SetConfig+0x2d4>)
 8008d56:	fba3 2301 	umull	r2, r3, r3, r1
 8008d5a:	095b      	lsrs	r3, r3, #5
 8008d5c:	2264      	movs	r2, #100	; 0x64
 8008d5e:	fb02 f303 	mul.w	r3, r2, r3
 8008d62:	1acb      	subs	r3, r1, r3
 8008d64:	00db      	lsls	r3, r3, #3
 8008d66:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008d6a:	4b36      	ldr	r3, [pc, #216]	; (8008e44 <UART_SetConfig+0x2d4>)
 8008d6c:	fba3 2302 	umull	r2, r3, r3, r2
 8008d70:	095b      	lsrs	r3, r3, #5
 8008d72:	005b      	lsls	r3, r3, #1
 8008d74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d78:	441c      	add	r4, r3
 8008d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008d88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008d8c:	4642      	mov	r2, r8
 8008d8e:	464b      	mov	r3, r9
 8008d90:	1891      	adds	r1, r2, r2
 8008d92:	63b9      	str	r1, [r7, #56]	; 0x38
 8008d94:	415b      	adcs	r3, r3
 8008d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008d9c:	4641      	mov	r1, r8
 8008d9e:	1851      	adds	r1, r2, r1
 8008da0:	6339      	str	r1, [r7, #48]	; 0x30
 8008da2:	4649      	mov	r1, r9
 8008da4:	414b      	adcs	r3, r1
 8008da6:	637b      	str	r3, [r7, #52]	; 0x34
 8008da8:	f04f 0200 	mov.w	r2, #0
 8008dac:	f04f 0300 	mov.w	r3, #0
 8008db0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008db4:	4659      	mov	r1, fp
 8008db6:	00cb      	lsls	r3, r1, #3
 8008db8:	4651      	mov	r1, sl
 8008dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dbe:	4651      	mov	r1, sl
 8008dc0:	00ca      	lsls	r2, r1, #3
 8008dc2:	4610      	mov	r0, r2
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	4642      	mov	r2, r8
 8008dca:	189b      	adds	r3, r3, r2
 8008dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008dd0:	464b      	mov	r3, r9
 8008dd2:	460a      	mov	r2, r1
 8008dd4:	eb42 0303 	adc.w	r3, r2, r3
 8008dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008de8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008dec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008df0:	460b      	mov	r3, r1
 8008df2:	18db      	adds	r3, r3, r3
 8008df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008df6:	4613      	mov	r3, r2
 8008df8:	eb42 0303 	adc.w	r3, r2, r3
 8008dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008e06:	f7f7 ff5f 	bl	8000cc8 <__aeabi_uldivmod>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	4b0d      	ldr	r3, [pc, #52]	; (8008e44 <UART_SetConfig+0x2d4>)
 8008e10:	fba3 1302 	umull	r1, r3, r3, r2
 8008e14:	095b      	lsrs	r3, r3, #5
 8008e16:	2164      	movs	r1, #100	; 0x64
 8008e18:	fb01 f303 	mul.w	r3, r1, r3
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	00db      	lsls	r3, r3, #3
 8008e20:	3332      	adds	r3, #50	; 0x32
 8008e22:	4a08      	ldr	r2, [pc, #32]	; (8008e44 <UART_SetConfig+0x2d4>)
 8008e24:	fba2 2303 	umull	r2, r3, r2, r3
 8008e28:	095b      	lsrs	r3, r3, #5
 8008e2a:	f003 0207 	and.w	r2, r3, #7
 8008e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4422      	add	r2, r4
 8008e36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008e38:	e105      	b.n	8009046 <UART_SetConfig+0x4d6>
 8008e3a:	bf00      	nop
 8008e3c:	40011000 	.word	0x40011000
 8008e40:	40011400 	.word	0x40011400
 8008e44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008e52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008e56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008e5a:	4642      	mov	r2, r8
 8008e5c:	464b      	mov	r3, r9
 8008e5e:	1891      	adds	r1, r2, r2
 8008e60:	6239      	str	r1, [r7, #32]
 8008e62:	415b      	adcs	r3, r3
 8008e64:	627b      	str	r3, [r7, #36]	; 0x24
 8008e66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e6a:	4641      	mov	r1, r8
 8008e6c:	1854      	adds	r4, r2, r1
 8008e6e:	4649      	mov	r1, r9
 8008e70:	eb43 0501 	adc.w	r5, r3, r1
 8008e74:	f04f 0200 	mov.w	r2, #0
 8008e78:	f04f 0300 	mov.w	r3, #0
 8008e7c:	00eb      	lsls	r3, r5, #3
 8008e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e82:	00e2      	lsls	r2, r4, #3
 8008e84:	4614      	mov	r4, r2
 8008e86:	461d      	mov	r5, r3
 8008e88:	4643      	mov	r3, r8
 8008e8a:	18e3      	adds	r3, r4, r3
 8008e8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008e90:	464b      	mov	r3, r9
 8008e92:	eb45 0303 	adc.w	r3, r5, r3
 8008e96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ea6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008eaa:	f04f 0200 	mov.w	r2, #0
 8008eae:	f04f 0300 	mov.w	r3, #0
 8008eb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	008b      	lsls	r3, r1, #2
 8008eba:	4621      	mov	r1, r4
 8008ebc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ec0:	4621      	mov	r1, r4
 8008ec2:	008a      	lsls	r2, r1, #2
 8008ec4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008ec8:	f7f7 fefe 	bl	8000cc8 <__aeabi_uldivmod>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	460b      	mov	r3, r1
 8008ed0:	4b60      	ldr	r3, [pc, #384]	; (8009054 <UART_SetConfig+0x4e4>)
 8008ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8008ed6:	095b      	lsrs	r3, r3, #5
 8008ed8:	011c      	lsls	r4, r3, #4
 8008eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008ee4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008ee8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008eec:	4642      	mov	r2, r8
 8008eee:	464b      	mov	r3, r9
 8008ef0:	1891      	adds	r1, r2, r2
 8008ef2:	61b9      	str	r1, [r7, #24]
 8008ef4:	415b      	adcs	r3, r3
 8008ef6:	61fb      	str	r3, [r7, #28]
 8008ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008efc:	4641      	mov	r1, r8
 8008efe:	1851      	adds	r1, r2, r1
 8008f00:	6139      	str	r1, [r7, #16]
 8008f02:	4649      	mov	r1, r9
 8008f04:	414b      	adcs	r3, r1
 8008f06:	617b      	str	r3, [r7, #20]
 8008f08:	f04f 0200 	mov.w	r2, #0
 8008f0c:	f04f 0300 	mov.w	r3, #0
 8008f10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f14:	4659      	mov	r1, fp
 8008f16:	00cb      	lsls	r3, r1, #3
 8008f18:	4651      	mov	r1, sl
 8008f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f1e:	4651      	mov	r1, sl
 8008f20:	00ca      	lsls	r2, r1, #3
 8008f22:	4610      	mov	r0, r2
 8008f24:	4619      	mov	r1, r3
 8008f26:	4603      	mov	r3, r0
 8008f28:	4642      	mov	r2, r8
 8008f2a:	189b      	adds	r3, r3, r2
 8008f2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f30:	464b      	mov	r3, r9
 8008f32:	460a      	mov	r2, r1
 8008f34:	eb42 0303 	adc.w	r3, r2, r3
 8008f38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008f48:	f04f 0200 	mov.w	r2, #0
 8008f4c:	f04f 0300 	mov.w	r3, #0
 8008f50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008f54:	4649      	mov	r1, r9
 8008f56:	008b      	lsls	r3, r1, #2
 8008f58:	4641      	mov	r1, r8
 8008f5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f5e:	4641      	mov	r1, r8
 8008f60:	008a      	lsls	r2, r1, #2
 8008f62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008f66:	f7f7 feaf 	bl	8000cc8 <__aeabi_uldivmod>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	4b39      	ldr	r3, [pc, #228]	; (8009054 <UART_SetConfig+0x4e4>)
 8008f70:	fba3 1302 	umull	r1, r3, r3, r2
 8008f74:	095b      	lsrs	r3, r3, #5
 8008f76:	2164      	movs	r1, #100	; 0x64
 8008f78:	fb01 f303 	mul.w	r3, r1, r3
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	011b      	lsls	r3, r3, #4
 8008f80:	3332      	adds	r3, #50	; 0x32
 8008f82:	4a34      	ldr	r2, [pc, #208]	; (8009054 <UART_SetConfig+0x4e4>)
 8008f84:	fba2 2303 	umull	r2, r3, r2, r3
 8008f88:	095b      	lsrs	r3, r3, #5
 8008f8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f8e:	441c      	add	r4, r3
 8008f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f94:	2200      	movs	r2, #0
 8008f96:	673b      	str	r3, [r7, #112]	; 0x70
 8008f98:	677a      	str	r2, [r7, #116]	; 0x74
 8008f9a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008f9e:	4642      	mov	r2, r8
 8008fa0:	464b      	mov	r3, r9
 8008fa2:	1891      	adds	r1, r2, r2
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	415b      	adcs	r3, r3
 8008fa8:	60fb      	str	r3, [r7, #12]
 8008faa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008fae:	4641      	mov	r1, r8
 8008fb0:	1851      	adds	r1, r2, r1
 8008fb2:	6039      	str	r1, [r7, #0]
 8008fb4:	4649      	mov	r1, r9
 8008fb6:	414b      	adcs	r3, r1
 8008fb8:	607b      	str	r3, [r7, #4]
 8008fba:	f04f 0200 	mov.w	r2, #0
 8008fbe:	f04f 0300 	mov.w	r3, #0
 8008fc2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008fc6:	4659      	mov	r1, fp
 8008fc8:	00cb      	lsls	r3, r1, #3
 8008fca:	4651      	mov	r1, sl
 8008fcc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fd0:	4651      	mov	r1, sl
 8008fd2:	00ca      	lsls	r2, r1, #3
 8008fd4:	4610      	mov	r0, r2
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	4603      	mov	r3, r0
 8008fda:	4642      	mov	r2, r8
 8008fdc:	189b      	adds	r3, r3, r2
 8008fde:	66bb      	str	r3, [r7, #104]	; 0x68
 8008fe0:	464b      	mov	r3, r9
 8008fe2:	460a      	mov	r2, r1
 8008fe4:	eb42 0303 	adc.w	r3, r2, r3
 8008fe8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	663b      	str	r3, [r7, #96]	; 0x60
 8008ff4:	667a      	str	r2, [r7, #100]	; 0x64
 8008ff6:	f04f 0200 	mov.w	r2, #0
 8008ffa:	f04f 0300 	mov.w	r3, #0
 8008ffe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009002:	4649      	mov	r1, r9
 8009004:	008b      	lsls	r3, r1, #2
 8009006:	4641      	mov	r1, r8
 8009008:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800900c:	4641      	mov	r1, r8
 800900e:	008a      	lsls	r2, r1, #2
 8009010:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009014:	f7f7 fe58 	bl	8000cc8 <__aeabi_uldivmod>
 8009018:	4602      	mov	r2, r0
 800901a:	460b      	mov	r3, r1
 800901c:	4b0d      	ldr	r3, [pc, #52]	; (8009054 <UART_SetConfig+0x4e4>)
 800901e:	fba3 1302 	umull	r1, r3, r3, r2
 8009022:	095b      	lsrs	r3, r3, #5
 8009024:	2164      	movs	r1, #100	; 0x64
 8009026:	fb01 f303 	mul.w	r3, r1, r3
 800902a:	1ad3      	subs	r3, r2, r3
 800902c:	011b      	lsls	r3, r3, #4
 800902e:	3332      	adds	r3, #50	; 0x32
 8009030:	4a08      	ldr	r2, [pc, #32]	; (8009054 <UART_SetConfig+0x4e4>)
 8009032:	fba2 2303 	umull	r2, r3, r2, r3
 8009036:	095b      	lsrs	r3, r3, #5
 8009038:	f003 020f 	and.w	r2, r3, #15
 800903c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4422      	add	r2, r4
 8009044:	609a      	str	r2, [r3, #8]
}
 8009046:	bf00      	nop
 8009048:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800904c:	46bd      	mov	sp, r7
 800904e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009052:	bf00      	nop
 8009054:	51eb851f 	.word	0x51eb851f

08009058 <__errno>:
 8009058:	4b01      	ldr	r3, [pc, #4]	; (8009060 <__errno+0x8>)
 800905a:	6818      	ldr	r0, [r3, #0]
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop
 8009060:	200023e4 	.word	0x200023e4

08009064 <__libc_init_array>:
 8009064:	b570      	push	{r4, r5, r6, lr}
 8009066:	4d0d      	ldr	r5, [pc, #52]	; (800909c <__libc_init_array+0x38>)
 8009068:	4c0d      	ldr	r4, [pc, #52]	; (80090a0 <__libc_init_array+0x3c>)
 800906a:	1b64      	subs	r4, r4, r5
 800906c:	10a4      	asrs	r4, r4, #2
 800906e:	2600      	movs	r6, #0
 8009070:	42a6      	cmp	r6, r4
 8009072:	d109      	bne.n	8009088 <__libc_init_array+0x24>
 8009074:	4d0b      	ldr	r5, [pc, #44]	; (80090a4 <__libc_init_array+0x40>)
 8009076:	4c0c      	ldr	r4, [pc, #48]	; (80090a8 <__libc_init_array+0x44>)
 8009078:	f002 ff64 	bl	800bf44 <_init>
 800907c:	1b64      	subs	r4, r4, r5
 800907e:	10a4      	asrs	r4, r4, #2
 8009080:	2600      	movs	r6, #0
 8009082:	42a6      	cmp	r6, r4
 8009084:	d105      	bne.n	8009092 <__libc_init_array+0x2e>
 8009086:	bd70      	pop	{r4, r5, r6, pc}
 8009088:	f855 3b04 	ldr.w	r3, [r5], #4
 800908c:	4798      	blx	r3
 800908e:	3601      	adds	r6, #1
 8009090:	e7ee      	b.n	8009070 <__libc_init_array+0xc>
 8009092:	f855 3b04 	ldr.w	r3, [r5], #4
 8009096:	4798      	blx	r3
 8009098:	3601      	adds	r6, #1
 800909a:	e7f2      	b.n	8009082 <__libc_init_array+0x1e>
 800909c:	0800c574 	.word	0x0800c574
 80090a0:	0800c574 	.word	0x0800c574
 80090a4:	0800c574 	.word	0x0800c574
 80090a8:	0800c578 	.word	0x0800c578

080090ac <malloc>:
 80090ac:	4b02      	ldr	r3, [pc, #8]	; (80090b8 <malloc+0xc>)
 80090ae:	4601      	mov	r1, r0
 80090b0:	6818      	ldr	r0, [r3, #0]
 80090b2:	f000 b87f 	b.w	80091b4 <_malloc_r>
 80090b6:	bf00      	nop
 80090b8:	200023e4 	.word	0x200023e4

080090bc <free>:
 80090bc:	4b02      	ldr	r3, [pc, #8]	; (80090c8 <free+0xc>)
 80090be:	4601      	mov	r1, r0
 80090c0:	6818      	ldr	r0, [r3, #0]
 80090c2:	f000 b80b 	b.w	80090dc <_free_r>
 80090c6:	bf00      	nop
 80090c8:	200023e4 	.word	0x200023e4

080090cc <memset>:
 80090cc:	4402      	add	r2, r0
 80090ce:	4603      	mov	r3, r0
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d100      	bne.n	80090d6 <memset+0xa>
 80090d4:	4770      	bx	lr
 80090d6:	f803 1b01 	strb.w	r1, [r3], #1
 80090da:	e7f9      	b.n	80090d0 <memset+0x4>

080090dc <_free_r>:
 80090dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090de:	2900      	cmp	r1, #0
 80090e0:	d044      	beq.n	800916c <_free_r+0x90>
 80090e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090e6:	9001      	str	r0, [sp, #4]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f1a1 0404 	sub.w	r4, r1, #4
 80090ee:	bfb8      	it	lt
 80090f0:	18e4      	addlt	r4, r4, r3
 80090f2:	f001 fc0d 	bl	800a910 <__malloc_lock>
 80090f6:	4a1e      	ldr	r2, [pc, #120]	; (8009170 <_free_r+0x94>)
 80090f8:	9801      	ldr	r0, [sp, #4]
 80090fa:	6813      	ldr	r3, [r2, #0]
 80090fc:	b933      	cbnz	r3, 800910c <_free_r+0x30>
 80090fe:	6063      	str	r3, [r4, #4]
 8009100:	6014      	str	r4, [r2, #0]
 8009102:	b003      	add	sp, #12
 8009104:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009108:	f001 bc08 	b.w	800a91c <__malloc_unlock>
 800910c:	42a3      	cmp	r3, r4
 800910e:	d908      	bls.n	8009122 <_free_r+0x46>
 8009110:	6825      	ldr	r5, [r4, #0]
 8009112:	1961      	adds	r1, r4, r5
 8009114:	428b      	cmp	r3, r1
 8009116:	bf01      	itttt	eq
 8009118:	6819      	ldreq	r1, [r3, #0]
 800911a:	685b      	ldreq	r3, [r3, #4]
 800911c:	1949      	addeq	r1, r1, r5
 800911e:	6021      	streq	r1, [r4, #0]
 8009120:	e7ed      	b.n	80090fe <_free_r+0x22>
 8009122:	461a      	mov	r2, r3
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	b10b      	cbz	r3, 800912c <_free_r+0x50>
 8009128:	42a3      	cmp	r3, r4
 800912a:	d9fa      	bls.n	8009122 <_free_r+0x46>
 800912c:	6811      	ldr	r1, [r2, #0]
 800912e:	1855      	adds	r5, r2, r1
 8009130:	42a5      	cmp	r5, r4
 8009132:	d10b      	bne.n	800914c <_free_r+0x70>
 8009134:	6824      	ldr	r4, [r4, #0]
 8009136:	4421      	add	r1, r4
 8009138:	1854      	adds	r4, r2, r1
 800913a:	42a3      	cmp	r3, r4
 800913c:	6011      	str	r1, [r2, #0]
 800913e:	d1e0      	bne.n	8009102 <_free_r+0x26>
 8009140:	681c      	ldr	r4, [r3, #0]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	6053      	str	r3, [r2, #4]
 8009146:	4421      	add	r1, r4
 8009148:	6011      	str	r1, [r2, #0]
 800914a:	e7da      	b.n	8009102 <_free_r+0x26>
 800914c:	d902      	bls.n	8009154 <_free_r+0x78>
 800914e:	230c      	movs	r3, #12
 8009150:	6003      	str	r3, [r0, #0]
 8009152:	e7d6      	b.n	8009102 <_free_r+0x26>
 8009154:	6825      	ldr	r5, [r4, #0]
 8009156:	1961      	adds	r1, r4, r5
 8009158:	428b      	cmp	r3, r1
 800915a:	bf04      	itt	eq
 800915c:	6819      	ldreq	r1, [r3, #0]
 800915e:	685b      	ldreq	r3, [r3, #4]
 8009160:	6063      	str	r3, [r4, #4]
 8009162:	bf04      	itt	eq
 8009164:	1949      	addeq	r1, r1, r5
 8009166:	6021      	streq	r1, [r4, #0]
 8009168:	6054      	str	r4, [r2, #4]
 800916a:	e7ca      	b.n	8009102 <_free_r+0x26>
 800916c:	b003      	add	sp, #12
 800916e:	bd30      	pop	{r4, r5, pc}
 8009170:	20002ab0 	.word	0x20002ab0

08009174 <sbrk_aligned>:
 8009174:	b570      	push	{r4, r5, r6, lr}
 8009176:	4e0e      	ldr	r6, [pc, #56]	; (80091b0 <sbrk_aligned+0x3c>)
 8009178:	460c      	mov	r4, r1
 800917a:	6831      	ldr	r1, [r6, #0]
 800917c:	4605      	mov	r5, r0
 800917e:	b911      	cbnz	r1, 8009186 <sbrk_aligned+0x12>
 8009180:	f000 fcf6 	bl	8009b70 <_sbrk_r>
 8009184:	6030      	str	r0, [r6, #0]
 8009186:	4621      	mov	r1, r4
 8009188:	4628      	mov	r0, r5
 800918a:	f000 fcf1 	bl	8009b70 <_sbrk_r>
 800918e:	1c43      	adds	r3, r0, #1
 8009190:	d00a      	beq.n	80091a8 <sbrk_aligned+0x34>
 8009192:	1cc4      	adds	r4, r0, #3
 8009194:	f024 0403 	bic.w	r4, r4, #3
 8009198:	42a0      	cmp	r0, r4
 800919a:	d007      	beq.n	80091ac <sbrk_aligned+0x38>
 800919c:	1a21      	subs	r1, r4, r0
 800919e:	4628      	mov	r0, r5
 80091a0:	f000 fce6 	bl	8009b70 <_sbrk_r>
 80091a4:	3001      	adds	r0, #1
 80091a6:	d101      	bne.n	80091ac <sbrk_aligned+0x38>
 80091a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80091ac:	4620      	mov	r0, r4
 80091ae:	bd70      	pop	{r4, r5, r6, pc}
 80091b0:	20002ab4 	.word	0x20002ab4

080091b4 <_malloc_r>:
 80091b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091b8:	1ccd      	adds	r5, r1, #3
 80091ba:	f025 0503 	bic.w	r5, r5, #3
 80091be:	3508      	adds	r5, #8
 80091c0:	2d0c      	cmp	r5, #12
 80091c2:	bf38      	it	cc
 80091c4:	250c      	movcc	r5, #12
 80091c6:	2d00      	cmp	r5, #0
 80091c8:	4607      	mov	r7, r0
 80091ca:	db01      	blt.n	80091d0 <_malloc_r+0x1c>
 80091cc:	42a9      	cmp	r1, r5
 80091ce:	d905      	bls.n	80091dc <_malloc_r+0x28>
 80091d0:	230c      	movs	r3, #12
 80091d2:	603b      	str	r3, [r7, #0]
 80091d4:	2600      	movs	r6, #0
 80091d6:	4630      	mov	r0, r6
 80091d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091dc:	4e2e      	ldr	r6, [pc, #184]	; (8009298 <_malloc_r+0xe4>)
 80091de:	f001 fb97 	bl	800a910 <__malloc_lock>
 80091e2:	6833      	ldr	r3, [r6, #0]
 80091e4:	461c      	mov	r4, r3
 80091e6:	bb34      	cbnz	r4, 8009236 <_malloc_r+0x82>
 80091e8:	4629      	mov	r1, r5
 80091ea:	4638      	mov	r0, r7
 80091ec:	f7ff ffc2 	bl	8009174 <sbrk_aligned>
 80091f0:	1c43      	adds	r3, r0, #1
 80091f2:	4604      	mov	r4, r0
 80091f4:	d14d      	bne.n	8009292 <_malloc_r+0xde>
 80091f6:	6834      	ldr	r4, [r6, #0]
 80091f8:	4626      	mov	r6, r4
 80091fa:	2e00      	cmp	r6, #0
 80091fc:	d140      	bne.n	8009280 <_malloc_r+0xcc>
 80091fe:	6823      	ldr	r3, [r4, #0]
 8009200:	4631      	mov	r1, r6
 8009202:	4638      	mov	r0, r7
 8009204:	eb04 0803 	add.w	r8, r4, r3
 8009208:	f000 fcb2 	bl	8009b70 <_sbrk_r>
 800920c:	4580      	cmp	r8, r0
 800920e:	d13a      	bne.n	8009286 <_malloc_r+0xd2>
 8009210:	6821      	ldr	r1, [r4, #0]
 8009212:	3503      	adds	r5, #3
 8009214:	1a6d      	subs	r5, r5, r1
 8009216:	f025 0503 	bic.w	r5, r5, #3
 800921a:	3508      	adds	r5, #8
 800921c:	2d0c      	cmp	r5, #12
 800921e:	bf38      	it	cc
 8009220:	250c      	movcc	r5, #12
 8009222:	4629      	mov	r1, r5
 8009224:	4638      	mov	r0, r7
 8009226:	f7ff ffa5 	bl	8009174 <sbrk_aligned>
 800922a:	3001      	adds	r0, #1
 800922c:	d02b      	beq.n	8009286 <_malloc_r+0xd2>
 800922e:	6823      	ldr	r3, [r4, #0]
 8009230:	442b      	add	r3, r5
 8009232:	6023      	str	r3, [r4, #0]
 8009234:	e00e      	b.n	8009254 <_malloc_r+0xa0>
 8009236:	6822      	ldr	r2, [r4, #0]
 8009238:	1b52      	subs	r2, r2, r5
 800923a:	d41e      	bmi.n	800927a <_malloc_r+0xc6>
 800923c:	2a0b      	cmp	r2, #11
 800923e:	d916      	bls.n	800926e <_malloc_r+0xba>
 8009240:	1961      	adds	r1, r4, r5
 8009242:	42a3      	cmp	r3, r4
 8009244:	6025      	str	r5, [r4, #0]
 8009246:	bf18      	it	ne
 8009248:	6059      	strne	r1, [r3, #4]
 800924a:	6863      	ldr	r3, [r4, #4]
 800924c:	bf08      	it	eq
 800924e:	6031      	streq	r1, [r6, #0]
 8009250:	5162      	str	r2, [r4, r5]
 8009252:	604b      	str	r3, [r1, #4]
 8009254:	4638      	mov	r0, r7
 8009256:	f104 060b 	add.w	r6, r4, #11
 800925a:	f001 fb5f 	bl	800a91c <__malloc_unlock>
 800925e:	f026 0607 	bic.w	r6, r6, #7
 8009262:	1d23      	adds	r3, r4, #4
 8009264:	1af2      	subs	r2, r6, r3
 8009266:	d0b6      	beq.n	80091d6 <_malloc_r+0x22>
 8009268:	1b9b      	subs	r3, r3, r6
 800926a:	50a3      	str	r3, [r4, r2]
 800926c:	e7b3      	b.n	80091d6 <_malloc_r+0x22>
 800926e:	6862      	ldr	r2, [r4, #4]
 8009270:	42a3      	cmp	r3, r4
 8009272:	bf0c      	ite	eq
 8009274:	6032      	streq	r2, [r6, #0]
 8009276:	605a      	strne	r2, [r3, #4]
 8009278:	e7ec      	b.n	8009254 <_malloc_r+0xa0>
 800927a:	4623      	mov	r3, r4
 800927c:	6864      	ldr	r4, [r4, #4]
 800927e:	e7b2      	b.n	80091e6 <_malloc_r+0x32>
 8009280:	4634      	mov	r4, r6
 8009282:	6876      	ldr	r6, [r6, #4]
 8009284:	e7b9      	b.n	80091fa <_malloc_r+0x46>
 8009286:	230c      	movs	r3, #12
 8009288:	603b      	str	r3, [r7, #0]
 800928a:	4638      	mov	r0, r7
 800928c:	f001 fb46 	bl	800a91c <__malloc_unlock>
 8009290:	e7a1      	b.n	80091d6 <_malloc_r+0x22>
 8009292:	6025      	str	r5, [r4, #0]
 8009294:	e7de      	b.n	8009254 <_malloc_r+0xa0>
 8009296:	bf00      	nop
 8009298:	20002ab0 	.word	0x20002ab0

0800929c <__cvt>:
 800929c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092a0:	ec55 4b10 	vmov	r4, r5, d0
 80092a4:	2d00      	cmp	r5, #0
 80092a6:	460e      	mov	r6, r1
 80092a8:	4619      	mov	r1, r3
 80092aa:	462b      	mov	r3, r5
 80092ac:	bfbb      	ittet	lt
 80092ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80092b2:	461d      	movlt	r5, r3
 80092b4:	2300      	movge	r3, #0
 80092b6:	232d      	movlt	r3, #45	; 0x2d
 80092b8:	700b      	strb	r3, [r1, #0]
 80092ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80092c0:	4691      	mov	r9, r2
 80092c2:	f023 0820 	bic.w	r8, r3, #32
 80092c6:	bfbc      	itt	lt
 80092c8:	4622      	movlt	r2, r4
 80092ca:	4614      	movlt	r4, r2
 80092cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80092d0:	d005      	beq.n	80092de <__cvt+0x42>
 80092d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80092d6:	d100      	bne.n	80092da <__cvt+0x3e>
 80092d8:	3601      	adds	r6, #1
 80092da:	2102      	movs	r1, #2
 80092dc:	e000      	b.n	80092e0 <__cvt+0x44>
 80092de:	2103      	movs	r1, #3
 80092e0:	ab03      	add	r3, sp, #12
 80092e2:	9301      	str	r3, [sp, #4]
 80092e4:	ab02      	add	r3, sp, #8
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	ec45 4b10 	vmov	d0, r4, r5
 80092ec:	4653      	mov	r3, sl
 80092ee:	4632      	mov	r2, r6
 80092f0:	f000 fd0e 	bl	8009d10 <_dtoa_r>
 80092f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80092f8:	4607      	mov	r7, r0
 80092fa:	d102      	bne.n	8009302 <__cvt+0x66>
 80092fc:	f019 0f01 	tst.w	r9, #1
 8009300:	d022      	beq.n	8009348 <__cvt+0xac>
 8009302:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009306:	eb07 0906 	add.w	r9, r7, r6
 800930a:	d110      	bne.n	800932e <__cvt+0x92>
 800930c:	783b      	ldrb	r3, [r7, #0]
 800930e:	2b30      	cmp	r3, #48	; 0x30
 8009310:	d10a      	bne.n	8009328 <__cvt+0x8c>
 8009312:	2200      	movs	r2, #0
 8009314:	2300      	movs	r3, #0
 8009316:	4620      	mov	r0, r4
 8009318:	4629      	mov	r1, r5
 800931a:	f7f7 fbf5 	bl	8000b08 <__aeabi_dcmpeq>
 800931e:	b918      	cbnz	r0, 8009328 <__cvt+0x8c>
 8009320:	f1c6 0601 	rsb	r6, r6, #1
 8009324:	f8ca 6000 	str.w	r6, [sl]
 8009328:	f8da 3000 	ldr.w	r3, [sl]
 800932c:	4499      	add	r9, r3
 800932e:	2200      	movs	r2, #0
 8009330:	2300      	movs	r3, #0
 8009332:	4620      	mov	r0, r4
 8009334:	4629      	mov	r1, r5
 8009336:	f7f7 fbe7 	bl	8000b08 <__aeabi_dcmpeq>
 800933a:	b108      	cbz	r0, 8009340 <__cvt+0xa4>
 800933c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009340:	2230      	movs	r2, #48	; 0x30
 8009342:	9b03      	ldr	r3, [sp, #12]
 8009344:	454b      	cmp	r3, r9
 8009346:	d307      	bcc.n	8009358 <__cvt+0xbc>
 8009348:	9b03      	ldr	r3, [sp, #12]
 800934a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800934c:	1bdb      	subs	r3, r3, r7
 800934e:	4638      	mov	r0, r7
 8009350:	6013      	str	r3, [r2, #0]
 8009352:	b004      	add	sp, #16
 8009354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009358:	1c59      	adds	r1, r3, #1
 800935a:	9103      	str	r1, [sp, #12]
 800935c:	701a      	strb	r2, [r3, #0]
 800935e:	e7f0      	b.n	8009342 <__cvt+0xa6>

08009360 <__exponent>:
 8009360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009362:	4603      	mov	r3, r0
 8009364:	2900      	cmp	r1, #0
 8009366:	bfb8      	it	lt
 8009368:	4249      	neglt	r1, r1
 800936a:	f803 2b02 	strb.w	r2, [r3], #2
 800936e:	bfb4      	ite	lt
 8009370:	222d      	movlt	r2, #45	; 0x2d
 8009372:	222b      	movge	r2, #43	; 0x2b
 8009374:	2909      	cmp	r1, #9
 8009376:	7042      	strb	r2, [r0, #1]
 8009378:	dd2a      	ble.n	80093d0 <__exponent+0x70>
 800937a:	f10d 0407 	add.w	r4, sp, #7
 800937e:	46a4      	mov	ip, r4
 8009380:	270a      	movs	r7, #10
 8009382:	46a6      	mov	lr, r4
 8009384:	460a      	mov	r2, r1
 8009386:	fb91 f6f7 	sdiv	r6, r1, r7
 800938a:	fb07 1516 	mls	r5, r7, r6, r1
 800938e:	3530      	adds	r5, #48	; 0x30
 8009390:	2a63      	cmp	r2, #99	; 0x63
 8009392:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009396:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800939a:	4631      	mov	r1, r6
 800939c:	dcf1      	bgt.n	8009382 <__exponent+0x22>
 800939e:	3130      	adds	r1, #48	; 0x30
 80093a0:	f1ae 0502 	sub.w	r5, lr, #2
 80093a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80093a8:	1c44      	adds	r4, r0, #1
 80093aa:	4629      	mov	r1, r5
 80093ac:	4561      	cmp	r1, ip
 80093ae:	d30a      	bcc.n	80093c6 <__exponent+0x66>
 80093b0:	f10d 0209 	add.w	r2, sp, #9
 80093b4:	eba2 020e 	sub.w	r2, r2, lr
 80093b8:	4565      	cmp	r5, ip
 80093ba:	bf88      	it	hi
 80093bc:	2200      	movhi	r2, #0
 80093be:	4413      	add	r3, r2
 80093c0:	1a18      	subs	r0, r3, r0
 80093c2:	b003      	add	sp, #12
 80093c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80093ce:	e7ed      	b.n	80093ac <__exponent+0x4c>
 80093d0:	2330      	movs	r3, #48	; 0x30
 80093d2:	3130      	adds	r1, #48	; 0x30
 80093d4:	7083      	strb	r3, [r0, #2]
 80093d6:	70c1      	strb	r1, [r0, #3]
 80093d8:	1d03      	adds	r3, r0, #4
 80093da:	e7f1      	b.n	80093c0 <__exponent+0x60>

080093dc <_printf_float>:
 80093dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e0:	ed2d 8b02 	vpush	{d8}
 80093e4:	b08d      	sub	sp, #52	; 0x34
 80093e6:	460c      	mov	r4, r1
 80093e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80093ec:	4616      	mov	r6, r2
 80093ee:	461f      	mov	r7, r3
 80093f0:	4605      	mov	r5, r0
 80093f2:	f001 fa7b 	bl	800a8ec <_localeconv_r>
 80093f6:	f8d0 a000 	ldr.w	sl, [r0]
 80093fa:	4650      	mov	r0, sl
 80093fc:	f7f6 ff08 	bl	8000210 <strlen>
 8009400:	2300      	movs	r3, #0
 8009402:	930a      	str	r3, [sp, #40]	; 0x28
 8009404:	6823      	ldr	r3, [r4, #0]
 8009406:	9305      	str	r3, [sp, #20]
 8009408:	f8d8 3000 	ldr.w	r3, [r8]
 800940c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009410:	3307      	adds	r3, #7
 8009412:	f023 0307 	bic.w	r3, r3, #7
 8009416:	f103 0208 	add.w	r2, r3, #8
 800941a:	f8c8 2000 	str.w	r2, [r8]
 800941e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009422:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009426:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800942a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800942e:	9307      	str	r3, [sp, #28]
 8009430:	f8cd 8018 	str.w	r8, [sp, #24]
 8009434:	ee08 0a10 	vmov	s16, r0
 8009438:	4b9f      	ldr	r3, [pc, #636]	; (80096b8 <_printf_float+0x2dc>)
 800943a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800943e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009442:	f7f7 fb93 	bl	8000b6c <__aeabi_dcmpun>
 8009446:	bb88      	cbnz	r0, 80094ac <_printf_float+0xd0>
 8009448:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800944c:	4b9a      	ldr	r3, [pc, #616]	; (80096b8 <_printf_float+0x2dc>)
 800944e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009452:	f7f7 fb6d 	bl	8000b30 <__aeabi_dcmple>
 8009456:	bb48      	cbnz	r0, 80094ac <_printf_float+0xd0>
 8009458:	2200      	movs	r2, #0
 800945a:	2300      	movs	r3, #0
 800945c:	4640      	mov	r0, r8
 800945e:	4649      	mov	r1, r9
 8009460:	f7f7 fb5c 	bl	8000b1c <__aeabi_dcmplt>
 8009464:	b110      	cbz	r0, 800946c <_printf_float+0x90>
 8009466:	232d      	movs	r3, #45	; 0x2d
 8009468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800946c:	4b93      	ldr	r3, [pc, #588]	; (80096bc <_printf_float+0x2e0>)
 800946e:	4894      	ldr	r0, [pc, #592]	; (80096c0 <_printf_float+0x2e4>)
 8009470:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009474:	bf94      	ite	ls
 8009476:	4698      	movls	r8, r3
 8009478:	4680      	movhi	r8, r0
 800947a:	2303      	movs	r3, #3
 800947c:	6123      	str	r3, [r4, #16]
 800947e:	9b05      	ldr	r3, [sp, #20]
 8009480:	f023 0204 	bic.w	r2, r3, #4
 8009484:	6022      	str	r2, [r4, #0]
 8009486:	f04f 0900 	mov.w	r9, #0
 800948a:	9700      	str	r7, [sp, #0]
 800948c:	4633      	mov	r3, r6
 800948e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009490:	4621      	mov	r1, r4
 8009492:	4628      	mov	r0, r5
 8009494:	f000 f9d8 	bl	8009848 <_printf_common>
 8009498:	3001      	adds	r0, #1
 800949a:	f040 8090 	bne.w	80095be <_printf_float+0x1e2>
 800949e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094a2:	b00d      	add	sp, #52	; 0x34
 80094a4:	ecbd 8b02 	vpop	{d8}
 80094a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ac:	4642      	mov	r2, r8
 80094ae:	464b      	mov	r3, r9
 80094b0:	4640      	mov	r0, r8
 80094b2:	4649      	mov	r1, r9
 80094b4:	f7f7 fb5a 	bl	8000b6c <__aeabi_dcmpun>
 80094b8:	b140      	cbz	r0, 80094cc <_printf_float+0xf0>
 80094ba:	464b      	mov	r3, r9
 80094bc:	2b00      	cmp	r3, #0
 80094be:	bfbc      	itt	lt
 80094c0:	232d      	movlt	r3, #45	; 0x2d
 80094c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80094c6:	487f      	ldr	r0, [pc, #508]	; (80096c4 <_printf_float+0x2e8>)
 80094c8:	4b7f      	ldr	r3, [pc, #508]	; (80096c8 <_printf_float+0x2ec>)
 80094ca:	e7d1      	b.n	8009470 <_printf_float+0x94>
 80094cc:	6863      	ldr	r3, [r4, #4]
 80094ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80094d2:	9206      	str	r2, [sp, #24]
 80094d4:	1c5a      	adds	r2, r3, #1
 80094d6:	d13f      	bne.n	8009558 <_printf_float+0x17c>
 80094d8:	2306      	movs	r3, #6
 80094da:	6063      	str	r3, [r4, #4]
 80094dc:	9b05      	ldr	r3, [sp, #20]
 80094de:	6861      	ldr	r1, [r4, #4]
 80094e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80094e4:	2300      	movs	r3, #0
 80094e6:	9303      	str	r3, [sp, #12]
 80094e8:	ab0a      	add	r3, sp, #40	; 0x28
 80094ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80094ee:	ab09      	add	r3, sp, #36	; 0x24
 80094f0:	ec49 8b10 	vmov	d0, r8, r9
 80094f4:	9300      	str	r3, [sp, #0]
 80094f6:	6022      	str	r2, [r4, #0]
 80094f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80094fc:	4628      	mov	r0, r5
 80094fe:	f7ff fecd 	bl	800929c <__cvt>
 8009502:	9b06      	ldr	r3, [sp, #24]
 8009504:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009506:	2b47      	cmp	r3, #71	; 0x47
 8009508:	4680      	mov	r8, r0
 800950a:	d108      	bne.n	800951e <_printf_float+0x142>
 800950c:	1cc8      	adds	r0, r1, #3
 800950e:	db02      	blt.n	8009516 <_printf_float+0x13a>
 8009510:	6863      	ldr	r3, [r4, #4]
 8009512:	4299      	cmp	r1, r3
 8009514:	dd41      	ble.n	800959a <_printf_float+0x1be>
 8009516:	f1ab 0b02 	sub.w	fp, fp, #2
 800951a:	fa5f fb8b 	uxtb.w	fp, fp
 800951e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009522:	d820      	bhi.n	8009566 <_printf_float+0x18a>
 8009524:	3901      	subs	r1, #1
 8009526:	465a      	mov	r2, fp
 8009528:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800952c:	9109      	str	r1, [sp, #36]	; 0x24
 800952e:	f7ff ff17 	bl	8009360 <__exponent>
 8009532:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009534:	1813      	adds	r3, r2, r0
 8009536:	2a01      	cmp	r2, #1
 8009538:	4681      	mov	r9, r0
 800953a:	6123      	str	r3, [r4, #16]
 800953c:	dc02      	bgt.n	8009544 <_printf_float+0x168>
 800953e:	6822      	ldr	r2, [r4, #0]
 8009540:	07d2      	lsls	r2, r2, #31
 8009542:	d501      	bpl.n	8009548 <_printf_float+0x16c>
 8009544:	3301      	adds	r3, #1
 8009546:	6123      	str	r3, [r4, #16]
 8009548:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800954c:	2b00      	cmp	r3, #0
 800954e:	d09c      	beq.n	800948a <_printf_float+0xae>
 8009550:	232d      	movs	r3, #45	; 0x2d
 8009552:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009556:	e798      	b.n	800948a <_printf_float+0xae>
 8009558:	9a06      	ldr	r2, [sp, #24]
 800955a:	2a47      	cmp	r2, #71	; 0x47
 800955c:	d1be      	bne.n	80094dc <_printf_float+0x100>
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1bc      	bne.n	80094dc <_printf_float+0x100>
 8009562:	2301      	movs	r3, #1
 8009564:	e7b9      	b.n	80094da <_printf_float+0xfe>
 8009566:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800956a:	d118      	bne.n	800959e <_printf_float+0x1c2>
 800956c:	2900      	cmp	r1, #0
 800956e:	6863      	ldr	r3, [r4, #4]
 8009570:	dd0b      	ble.n	800958a <_printf_float+0x1ae>
 8009572:	6121      	str	r1, [r4, #16]
 8009574:	b913      	cbnz	r3, 800957c <_printf_float+0x1a0>
 8009576:	6822      	ldr	r2, [r4, #0]
 8009578:	07d0      	lsls	r0, r2, #31
 800957a:	d502      	bpl.n	8009582 <_printf_float+0x1a6>
 800957c:	3301      	adds	r3, #1
 800957e:	440b      	add	r3, r1
 8009580:	6123      	str	r3, [r4, #16]
 8009582:	65a1      	str	r1, [r4, #88]	; 0x58
 8009584:	f04f 0900 	mov.w	r9, #0
 8009588:	e7de      	b.n	8009548 <_printf_float+0x16c>
 800958a:	b913      	cbnz	r3, 8009592 <_printf_float+0x1b6>
 800958c:	6822      	ldr	r2, [r4, #0]
 800958e:	07d2      	lsls	r2, r2, #31
 8009590:	d501      	bpl.n	8009596 <_printf_float+0x1ba>
 8009592:	3302      	adds	r3, #2
 8009594:	e7f4      	b.n	8009580 <_printf_float+0x1a4>
 8009596:	2301      	movs	r3, #1
 8009598:	e7f2      	b.n	8009580 <_printf_float+0x1a4>
 800959a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800959e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095a0:	4299      	cmp	r1, r3
 80095a2:	db05      	blt.n	80095b0 <_printf_float+0x1d4>
 80095a4:	6823      	ldr	r3, [r4, #0]
 80095a6:	6121      	str	r1, [r4, #16]
 80095a8:	07d8      	lsls	r0, r3, #31
 80095aa:	d5ea      	bpl.n	8009582 <_printf_float+0x1a6>
 80095ac:	1c4b      	adds	r3, r1, #1
 80095ae:	e7e7      	b.n	8009580 <_printf_float+0x1a4>
 80095b0:	2900      	cmp	r1, #0
 80095b2:	bfd4      	ite	le
 80095b4:	f1c1 0202 	rsble	r2, r1, #2
 80095b8:	2201      	movgt	r2, #1
 80095ba:	4413      	add	r3, r2
 80095bc:	e7e0      	b.n	8009580 <_printf_float+0x1a4>
 80095be:	6823      	ldr	r3, [r4, #0]
 80095c0:	055a      	lsls	r2, r3, #21
 80095c2:	d407      	bmi.n	80095d4 <_printf_float+0x1f8>
 80095c4:	6923      	ldr	r3, [r4, #16]
 80095c6:	4642      	mov	r2, r8
 80095c8:	4631      	mov	r1, r6
 80095ca:	4628      	mov	r0, r5
 80095cc:	47b8      	blx	r7
 80095ce:	3001      	adds	r0, #1
 80095d0:	d12c      	bne.n	800962c <_printf_float+0x250>
 80095d2:	e764      	b.n	800949e <_printf_float+0xc2>
 80095d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80095d8:	f240 80e0 	bls.w	800979c <_printf_float+0x3c0>
 80095dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095e0:	2200      	movs	r2, #0
 80095e2:	2300      	movs	r3, #0
 80095e4:	f7f7 fa90 	bl	8000b08 <__aeabi_dcmpeq>
 80095e8:	2800      	cmp	r0, #0
 80095ea:	d034      	beq.n	8009656 <_printf_float+0x27a>
 80095ec:	4a37      	ldr	r2, [pc, #220]	; (80096cc <_printf_float+0x2f0>)
 80095ee:	2301      	movs	r3, #1
 80095f0:	4631      	mov	r1, r6
 80095f2:	4628      	mov	r0, r5
 80095f4:	47b8      	blx	r7
 80095f6:	3001      	adds	r0, #1
 80095f8:	f43f af51 	beq.w	800949e <_printf_float+0xc2>
 80095fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009600:	429a      	cmp	r2, r3
 8009602:	db02      	blt.n	800960a <_printf_float+0x22e>
 8009604:	6823      	ldr	r3, [r4, #0]
 8009606:	07d8      	lsls	r0, r3, #31
 8009608:	d510      	bpl.n	800962c <_printf_float+0x250>
 800960a:	ee18 3a10 	vmov	r3, s16
 800960e:	4652      	mov	r2, sl
 8009610:	4631      	mov	r1, r6
 8009612:	4628      	mov	r0, r5
 8009614:	47b8      	blx	r7
 8009616:	3001      	adds	r0, #1
 8009618:	f43f af41 	beq.w	800949e <_printf_float+0xc2>
 800961c:	f04f 0800 	mov.w	r8, #0
 8009620:	f104 091a 	add.w	r9, r4, #26
 8009624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009626:	3b01      	subs	r3, #1
 8009628:	4543      	cmp	r3, r8
 800962a:	dc09      	bgt.n	8009640 <_printf_float+0x264>
 800962c:	6823      	ldr	r3, [r4, #0]
 800962e:	079b      	lsls	r3, r3, #30
 8009630:	f100 8105 	bmi.w	800983e <_printf_float+0x462>
 8009634:	68e0      	ldr	r0, [r4, #12]
 8009636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009638:	4298      	cmp	r0, r3
 800963a:	bfb8      	it	lt
 800963c:	4618      	movlt	r0, r3
 800963e:	e730      	b.n	80094a2 <_printf_float+0xc6>
 8009640:	2301      	movs	r3, #1
 8009642:	464a      	mov	r2, r9
 8009644:	4631      	mov	r1, r6
 8009646:	4628      	mov	r0, r5
 8009648:	47b8      	blx	r7
 800964a:	3001      	adds	r0, #1
 800964c:	f43f af27 	beq.w	800949e <_printf_float+0xc2>
 8009650:	f108 0801 	add.w	r8, r8, #1
 8009654:	e7e6      	b.n	8009624 <_printf_float+0x248>
 8009656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009658:	2b00      	cmp	r3, #0
 800965a:	dc39      	bgt.n	80096d0 <_printf_float+0x2f4>
 800965c:	4a1b      	ldr	r2, [pc, #108]	; (80096cc <_printf_float+0x2f0>)
 800965e:	2301      	movs	r3, #1
 8009660:	4631      	mov	r1, r6
 8009662:	4628      	mov	r0, r5
 8009664:	47b8      	blx	r7
 8009666:	3001      	adds	r0, #1
 8009668:	f43f af19 	beq.w	800949e <_printf_float+0xc2>
 800966c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009670:	4313      	orrs	r3, r2
 8009672:	d102      	bne.n	800967a <_printf_float+0x29e>
 8009674:	6823      	ldr	r3, [r4, #0]
 8009676:	07d9      	lsls	r1, r3, #31
 8009678:	d5d8      	bpl.n	800962c <_printf_float+0x250>
 800967a:	ee18 3a10 	vmov	r3, s16
 800967e:	4652      	mov	r2, sl
 8009680:	4631      	mov	r1, r6
 8009682:	4628      	mov	r0, r5
 8009684:	47b8      	blx	r7
 8009686:	3001      	adds	r0, #1
 8009688:	f43f af09 	beq.w	800949e <_printf_float+0xc2>
 800968c:	f04f 0900 	mov.w	r9, #0
 8009690:	f104 0a1a 	add.w	sl, r4, #26
 8009694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009696:	425b      	negs	r3, r3
 8009698:	454b      	cmp	r3, r9
 800969a:	dc01      	bgt.n	80096a0 <_printf_float+0x2c4>
 800969c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800969e:	e792      	b.n	80095c6 <_printf_float+0x1ea>
 80096a0:	2301      	movs	r3, #1
 80096a2:	4652      	mov	r2, sl
 80096a4:	4631      	mov	r1, r6
 80096a6:	4628      	mov	r0, r5
 80096a8:	47b8      	blx	r7
 80096aa:	3001      	adds	r0, #1
 80096ac:	f43f aef7 	beq.w	800949e <_printf_float+0xc2>
 80096b0:	f109 0901 	add.w	r9, r9, #1
 80096b4:	e7ee      	b.n	8009694 <_printf_float+0x2b8>
 80096b6:	bf00      	nop
 80096b8:	7fefffff 	.word	0x7fefffff
 80096bc:	0800c198 	.word	0x0800c198
 80096c0:	0800c19c 	.word	0x0800c19c
 80096c4:	0800c1a4 	.word	0x0800c1a4
 80096c8:	0800c1a0 	.word	0x0800c1a0
 80096cc:	0800c1a8 	.word	0x0800c1a8
 80096d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096d4:	429a      	cmp	r2, r3
 80096d6:	bfa8      	it	ge
 80096d8:	461a      	movge	r2, r3
 80096da:	2a00      	cmp	r2, #0
 80096dc:	4691      	mov	r9, r2
 80096de:	dc37      	bgt.n	8009750 <_printf_float+0x374>
 80096e0:	f04f 0b00 	mov.w	fp, #0
 80096e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096e8:	f104 021a 	add.w	r2, r4, #26
 80096ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096ee:	9305      	str	r3, [sp, #20]
 80096f0:	eba3 0309 	sub.w	r3, r3, r9
 80096f4:	455b      	cmp	r3, fp
 80096f6:	dc33      	bgt.n	8009760 <_printf_float+0x384>
 80096f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096fc:	429a      	cmp	r2, r3
 80096fe:	db3b      	blt.n	8009778 <_printf_float+0x39c>
 8009700:	6823      	ldr	r3, [r4, #0]
 8009702:	07da      	lsls	r2, r3, #31
 8009704:	d438      	bmi.n	8009778 <_printf_float+0x39c>
 8009706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009708:	9a05      	ldr	r2, [sp, #20]
 800970a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800970c:	1a9a      	subs	r2, r3, r2
 800970e:	eba3 0901 	sub.w	r9, r3, r1
 8009712:	4591      	cmp	r9, r2
 8009714:	bfa8      	it	ge
 8009716:	4691      	movge	r9, r2
 8009718:	f1b9 0f00 	cmp.w	r9, #0
 800971c:	dc35      	bgt.n	800978a <_printf_float+0x3ae>
 800971e:	f04f 0800 	mov.w	r8, #0
 8009722:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009726:	f104 0a1a 	add.w	sl, r4, #26
 800972a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800972e:	1a9b      	subs	r3, r3, r2
 8009730:	eba3 0309 	sub.w	r3, r3, r9
 8009734:	4543      	cmp	r3, r8
 8009736:	f77f af79 	ble.w	800962c <_printf_float+0x250>
 800973a:	2301      	movs	r3, #1
 800973c:	4652      	mov	r2, sl
 800973e:	4631      	mov	r1, r6
 8009740:	4628      	mov	r0, r5
 8009742:	47b8      	blx	r7
 8009744:	3001      	adds	r0, #1
 8009746:	f43f aeaa 	beq.w	800949e <_printf_float+0xc2>
 800974a:	f108 0801 	add.w	r8, r8, #1
 800974e:	e7ec      	b.n	800972a <_printf_float+0x34e>
 8009750:	4613      	mov	r3, r2
 8009752:	4631      	mov	r1, r6
 8009754:	4642      	mov	r2, r8
 8009756:	4628      	mov	r0, r5
 8009758:	47b8      	blx	r7
 800975a:	3001      	adds	r0, #1
 800975c:	d1c0      	bne.n	80096e0 <_printf_float+0x304>
 800975e:	e69e      	b.n	800949e <_printf_float+0xc2>
 8009760:	2301      	movs	r3, #1
 8009762:	4631      	mov	r1, r6
 8009764:	4628      	mov	r0, r5
 8009766:	9205      	str	r2, [sp, #20]
 8009768:	47b8      	blx	r7
 800976a:	3001      	adds	r0, #1
 800976c:	f43f ae97 	beq.w	800949e <_printf_float+0xc2>
 8009770:	9a05      	ldr	r2, [sp, #20]
 8009772:	f10b 0b01 	add.w	fp, fp, #1
 8009776:	e7b9      	b.n	80096ec <_printf_float+0x310>
 8009778:	ee18 3a10 	vmov	r3, s16
 800977c:	4652      	mov	r2, sl
 800977e:	4631      	mov	r1, r6
 8009780:	4628      	mov	r0, r5
 8009782:	47b8      	blx	r7
 8009784:	3001      	adds	r0, #1
 8009786:	d1be      	bne.n	8009706 <_printf_float+0x32a>
 8009788:	e689      	b.n	800949e <_printf_float+0xc2>
 800978a:	9a05      	ldr	r2, [sp, #20]
 800978c:	464b      	mov	r3, r9
 800978e:	4442      	add	r2, r8
 8009790:	4631      	mov	r1, r6
 8009792:	4628      	mov	r0, r5
 8009794:	47b8      	blx	r7
 8009796:	3001      	adds	r0, #1
 8009798:	d1c1      	bne.n	800971e <_printf_float+0x342>
 800979a:	e680      	b.n	800949e <_printf_float+0xc2>
 800979c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800979e:	2a01      	cmp	r2, #1
 80097a0:	dc01      	bgt.n	80097a6 <_printf_float+0x3ca>
 80097a2:	07db      	lsls	r3, r3, #31
 80097a4:	d538      	bpl.n	8009818 <_printf_float+0x43c>
 80097a6:	2301      	movs	r3, #1
 80097a8:	4642      	mov	r2, r8
 80097aa:	4631      	mov	r1, r6
 80097ac:	4628      	mov	r0, r5
 80097ae:	47b8      	blx	r7
 80097b0:	3001      	adds	r0, #1
 80097b2:	f43f ae74 	beq.w	800949e <_printf_float+0xc2>
 80097b6:	ee18 3a10 	vmov	r3, s16
 80097ba:	4652      	mov	r2, sl
 80097bc:	4631      	mov	r1, r6
 80097be:	4628      	mov	r0, r5
 80097c0:	47b8      	blx	r7
 80097c2:	3001      	adds	r0, #1
 80097c4:	f43f ae6b 	beq.w	800949e <_printf_float+0xc2>
 80097c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80097cc:	2200      	movs	r2, #0
 80097ce:	2300      	movs	r3, #0
 80097d0:	f7f7 f99a 	bl	8000b08 <__aeabi_dcmpeq>
 80097d4:	b9d8      	cbnz	r0, 800980e <_printf_float+0x432>
 80097d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097d8:	f108 0201 	add.w	r2, r8, #1
 80097dc:	3b01      	subs	r3, #1
 80097de:	4631      	mov	r1, r6
 80097e0:	4628      	mov	r0, r5
 80097e2:	47b8      	blx	r7
 80097e4:	3001      	adds	r0, #1
 80097e6:	d10e      	bne.n	8009806 <_printf_float+0x42a>
 80097e8:	e659      	b.n	800949e <_printf_float+0xc2>
 80097ea:	2301      	movs	r3, #1
 80097ec:	4652      	mov	r2, sl
 80097ee:	4631      	mov	r1, r6
 80097f0:	4628      	mov	r0, r5
 80097f2:	47b8      	blx	r7
 80097f4:	3001      	adds	r0, #1
 80097f6:	f43f ae52 	beq.w	800949e <_printf_float+0xc2>
 80097fa:	f108 0801 	add.w	r8, r8, #1
 80097fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009800:	3b01      	subs	r3, #1
 8009802:	4543      	cmp	r3, r8
 8009804:	dcf1      	bgt.n	80097ea <_printf_float+0x40e>
 8009806:	464b      	mov	r3, r9
 8009808:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800980c:	e6dc      	b.n	80095c8 <_printf_float+0x1ec>
 800980e:	f04f 0800 	mov.w	r8, #0
 8009812:	f104 0a1a 	add.w	sl, r4, #26
 8009816:	e7f2      	b.n	80097fe <_printf_float+0x422>
 8009818:	2301      	movs	r3, #1
 800981a:	4642      	mov	r2, r8
 800981c:	e7df      	b.n	80097de <_printf_float+0x402>
 800981e:	2301      	movs	r3, #1
 8009820:	464a      	mov	r2, r9
 8009822:	4631      	mov	r1, r6
 8009824:	4628      	mov	r0, r5
 8009826:	47b8      	blx	r7
 8009828:	3001      	adds	r0, #1
 800982a:	f43f ae38 	beq.w	800949e <_printf_float+0xc2>
 800982e:	f108 0801 	add.w	r8, r8, #1
 8009832:	68e3      	ldr	r3, [r4, #12]
 8009834:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009836:	1a5b      	subs	r3, r3, r1
 8009838:	4543      	cmp	r3, r8
 800983a:	dcf0      	bgt.n	800981e <_printf_float+0x442>
 800983c:	e6fa      	b.n	8009634 <_printf_float+0x258>
 800983e:	f04f 0800 	mov.w	r8, #0
 8009842:	f104 0919 	add.w	r9, r4, #25
 8009846:	e7f4      	b.n	8009832 <_printf_float+0x456>

08009848 <_printf_common>:
 8009848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800984c:	4616      	mov	r6, r2
 800984e:	4699      	mov	r9, r3
 8009850:	688a      	ldr	r2, [r1, #8]
 8009852:	690b      	ldr	r3, [r1, #16]
 8009854:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009858:	4293      	cmp	r3, r2
 800985a:	bfb8      	it	lt
 800985c:	4613      	movlt	r3, r2
 800985e:	6033      	str	r3, [r6, #0]
 8009860:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009864:	4607      	mov	r7, r0
 8009866:	460c      	mov	r4, r1
 8009868:	b10a      	cbz	r2, 800986e <_printf_common+0x26>
 800986a:	3301      	adds	r3, #1
 800986c:	6033      	str	r3, [r6, #0]
 800986e:	6823      	ldr	r3, [r4, #0]
 8009870:	0699      	lsls	r1, r3, #26
 8009872:	bf42      	ittt	mi
 8009874:	6833      	ldrmi	r3, [r6, #0]
 8009876:	3302      	addmi	r3, #2
 8009878:	6033      	strmi	r3, [r6, #0]
 800987a:	6825      	ldr	r5, [r4, #0]
 800987c:	f015 0506 	ands.w	r5, r5, #6
 8009880:	d106      	bne.n	8009890 <_printf_common+0x48>
 8009882:	f104 0a19 	add.w	sl, r4, #25
 8009886:	68e3      	ldr	r3, [r4, #12]
 8009888:	6832      	ldr	r2, [r6, #0]
 800988a:	1a9b      	subs	r3, r3, r2
 800988c:	42ab      	cmp	r3, r5
 800988e:	dc26      	bgt.n	80098de <_printf_common+0x96>
 8009890:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009894:	1e13      	subs	r3, r2, #0
 8009896:	6822      	ldr	r2, [r4, #0]
 8009898:	bf18      	it	ne
 800989a:	2301      	movne	r3, #1
 800989c:	0692      	lsls	r2, r2, #26
 800989e:	d42b      	bmi.n	80098f8 <_printf_common+0xb0>
 80098a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098a4:	4649      	mov	r1, r9
 80098a6:	4638      	mov	r0, r7
 80098a8:	47c0      	blx	r8
 80098aa:	3001      	adds	r0, #1
 80098ac:	d01e      	beq.n	80098ec <_printf_common+0xa4>
 80098ae:	6823      	ldr	r3, [r4, #0]
 80098b0:	68e5      	ldr	r5, [r4, #12]
 80098b2:	6832      	ldr	r2, [r6, #0]
 80098b4:	f003 0306 	and.w	r3, r3, #6
 80098b8:	2b04      	cmp	r3, #4
 80098ba:	bf08      	it	eq
 80098bc:	1aad      	subeq	r5, r5, r2
 80098be:	68a3      	ldr	r3, [r4, #8]
 80098c0:	6922      	ldr	r2, [r4, #16]
 80098c2:	bf0c      	ite	eq
 80098c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098c8:	2500      	movne	r5, #0
 80098ca:	4293      	cmp	r3, r2
 80098cc:	bfc4      	itt	gt
 80098ce:	1a9b      	subgt	r3, r3, r2
 80098d0:	18ed      	addgt	r5, r5, r3
 80098d2:	2600      	movs	r6, #0
 80098d4:	341a      	adds	r4, #26
 80098d6:	42b5      	cmp	r5, r6
 80098d8:	d11a      	bne.n	8009910 <_printf_common+0xc8>
 80098da:	2000      	movs	r0, #0
 80098dc:	e008      	b.n	80098f0 <_printf_common+0xa8>
 80098de:	2301      	movs	r3, #1
 80098e0:	4652      	mov	r2, sl
 80098e2:	4649      	mov	r1, r9
 80098e4:	4638      	mov	r0, r7
 80098e6:	47c0      	blx	r8
 80098e8:	3001      	adds	r0, #1
 80098ea:	d103      	bne.n	80098f4 <_printf_common+0xac>
 80098ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098f4:	3501      	adds	r5, #1
 80098f6:	e7c6      	b.n	8009886 <_printf_common+0x3e>
 80098f8:	18e1      	adds	r1, r4, r3
 80098fa:	1c5a      	adds	r2, r3, #1
 80098fc:	2030      	movs	r0, #48	; 0x30
 80098fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009902:	4422      	add	r2, r4
 8009904:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009908:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800990c:	3302      	adds	r3, #2
 800990e:	e7c7      	b.n	80098a0 <_printf_common+0x58>
 8009910:	2301      	movs	r3, #1
 8009912:	4622      	mov	r2, r4
 8009914:	4649      	mov	r1, r9
 8009916:	4638      	mov	r0, r7
 8009918:	47c0      	blx	r8
 800991a:	3001      	adds	r0, #1
 800991c:	d0e6      	beq.n	80098ec <_printf_common+0xa4>
 800991e:	3601      	adds	r6, #1
 8009920:	e7d9      	b.n	80098d6 <_printf_common+0x8e>
	...

08009924 <_printf_i>:
 8009924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009928:	7e0f      	ldrb	r7, [r1, #24]
 800992a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800992c:	2f78      	cmp	r7, #120	; 0x78
 800992e:	4691      	mov	r9, r2
 8009930:	4680      	mov	r8, r0
 8009932:	460c      	mov	r4, r1
 8009934:	469a      	mov	sl, r3
 8009936:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800993a:	d807      	bhi.n	800994c <_printf_i+0x28>
 800993c:	2f62      	cmp	r7, #98	; 0x62
 800993e:	d80a      	bhi.n	8009956 <_printf_i+0x32>
 8009940:	2f00      	cmp	r7, #0
 8009942:	f000 80d8 	beq.w	8009af6 <_printf_i+0x1d2>
 8009946:	2f58      	cmp	r7, #88	; 0x58
 8009948:	f000 80a3 	beq.w	8009a92 <_printf_i+0x16e>
 800994c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009950:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009954:	e03a      	b.n	80099cc <_printf_i+0xa8>
 8009956:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800995a:	2b15      	cmp	r3, #21
 800995c:	d8f6      	bhi.n	800994c <_printf_i+0x28>
 800995e:	a101      	add	r1, pc, #4	; (adr r1, 8009964 <_printf_i+0x40>)
 8009960:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009964:	080099bd 	.word	0x080099bd
 8009968:	080099d1 	.word	0x080099d1
 800996c:	0800994d 	.word	0x0800994d
 8009970:	0800994d 	.word	0x0800994d
 8009974:	0800994d 	.word	0x0800994d
 8009978:	0800994d 	.word	0x0800994d
 800997c:	080099d1 	.word	0x080099d1
 8009980:	0800994d 	.word	0x0800994d
 8009984:	0800994d 	.word	0x0800994d
 8009988:	0800994d 	.word	0x0800994d
 800998c:	0800994d 	.word	0x0800994d
 8009990:	08009add 	.word	0x08009add
 8009994:	08009a01 	.word	0x08009a01
 8009998:	08009abf 	.word	0x08009abf
 800999c:	0800994d 	.word	0x0800994d
 80099a0:	0800994d 	.word	0x0800994d
 80099a4:	08009aff 	.word	0x08009aff
 80099a8:	0800994d 	.word	0x0800994d
 80099ac:	08009a01 	.word	0x08009a01
 80099b0:	0800994d 	.word	0x0800994d
 80099b4:	0800994d 	.word	0x0800994d
 80099b8:	08009ac7 	.word	0x08009ac7
 80099bc:	682b      	ldr	r3, [r5, #0]
 80099be:	1d1a      	adds	r2, r3, #4
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	602a      	str	r2, [r5, #0]
 80099c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099cc:	2301      	movs	r3, #1
 80099ce:	e0a3      	b.n	8009b18 <_printf_i+0x1f4>
 80099d0:	6820      	ldr	r0, [r4, #0]
 80099d2:	6829      	ldr	r1, [r5, #0]
 80099d4:	0606      	lsls	r6, r0, #24
 80099d6:	f101 0304 	add.w	r3, r1, #4
 80099da:	d50a      	bpl.n	80099f2 <_printf_i+0xce>
 80099dc:	680e      	ldr	r6, [r1, #0]
 80099de:	602b      	str	r3, [r5, #0]
 80099e0:	2e00      	cmp	r6, #0
 80099e2:	da03      	bge.n	80099ec <_printf_i+0xc8>
 80099e4:	232d      	movs	r3, #45	; 0x2d
 80099e6:	4276      	negs	r6, r6
 80099e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099ec:	485e      	ldr	r0, [pc, #376]	; (8009b68 <_printf_i+0x244>)
 80099ee:	230a      	movs	r3, #10
 80099f0:	e019      	b.n	8009a26 <_printf_i+0x102>
 80099f2:	680e      	ldr	r6, [r1, #0]
 80099f4:	602b      	str	r3, [r5, #0]
 80099f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80099fa:	bf18      	it	ne
 80099fc:	b236      	sxthne	r6, r6
 80099fe:	e7ef      	b.n	80099e0 <_printf_i+0xbc>
 8009a00:	682b      	ldr	r3, [r5, #0]
 8009a02:	6820      	ldr	r0, [r4, #0]
 8009a04:	1d19      	adds	r1, r3, #4
 8009a06:	6029      	str	r1, [r5, #0]
 8009a08:	0601      	lsls	r1, r0, #24
 8009a0a:	d501      	bpl.n	8009a10 <_printf_i+0xec>
 8009a0c:	681e      	ldr	r6, [r3, #0]
 8009a0e:	e002      	b.n	8009a16 <_printf_i+0xf2>
 8009a10:	0646      	lsls	r6, r0, #25
 8009a12:	d5fb      	bpl.n	8009a0c <_printf_i+0xe8>
 8009a14:	881e      	ldrh	r6, [r3, #0]
 8009a16:	4854      	ldr	r0, [pc, #336]	; (8009b68 <_printf_i+0x244>)
 8009a18:	2f6f      	cmp	r7, #111	; 0x6f
 8009a1a:	bf0c      	ite	eq
 8009a1c:	2308      	moveq	r3, #8
 8009a1e:	230a      	movne	r3, #10
 8009a20:	2100      	movs	r1, #0
 8009a22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a26:	6865      	ldr	r5, [r4, #4]
 8009a28:	60a5      	str	r5, [r4, #8]
 8009a2a:	2d00      	cmp	r5, #0
 8009a2c:	bfa2      	ittt	ge
 8009a2e:	6821      	ldrge	r1, [r4, #0]
 8009a30:	f021 0104 	bicge.w	r1, r1, #4
 8009a34:	6021      	strge	r1, [r4, #0]
 8009a36:	b90e      	cbnz	r6, 8009a3c <_printf_i+0x118>
 8009a38:	2d00      	cmp	r5, #0
 8009a3a:	d04d      	beq.n	8009ad8 <_printf_i+0x1b4>
 8009a3c:	4615      	mov	r5, r2
 8009a3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009a42:	fb03 6711 	mls	r7, r3, r1, r6
 8009a46:	5dc7      	ldrb	r7, [r0, r7]
 8009a48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009a4c:	4637      	mov	r7, r6
 8009a4e:	42bb      	cmp	r3, r7
 8009a50:	460e      	mov	r6, r1
 8009a52:	d9f4      	bls.n	8009a3e <_printf_i+0x11a>
 8009a54:	2b08      	cmp	r3, #8
 8009a56:	d10b      	bne.n	8009a70 <_printf_i+0x14c>
 8009a58:	6823      	ldr	r3, [r4, #0]
 8009a5a:	07de      	lsls	r6, r3, #31
 8009a5c:	d508      	bpl.n	8009a70 <_printf_i+0x14c>
 8009a5e:	6923      	ldr	r3, [r4, #16]
 8009a60:	6861      	ldr	r1, [r4, #4]
 8009a62:	4299      	cmp	r1, r3
 8009a64:	bfde      	ittt	le
 8009a66:	2330      	movle	r3, #48	; 0x30
 8009a68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a6c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009a70:	1b52      	subs	r2, r2, r5
 8009a72:	6122      	str	r2, [r4, #16]
 8009a74:	f8cd a000 	str.w	sl, [sp]
 8009a78:	464b      	mov	r3, r9
 8009a7a:	aa03      	add	r2, sp, #12
 8009a7c:	4621      	mov	r1, r4
 8009a7e:	4640      	mov	r0, r8
 8009a80:	f7ff fee2 	bl	8009848 <_printf_common>
 8009a84:	3001      	adds	r0, #1
 8009a86:	d14c      	bne.n	8009b22 <_printf_i+0x1fe>
 8009a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a8c:	b004      	add	sp, #16
 8009a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a92:	4835      	ldr	r0, [pc, #212]	; (8009b68 <_printf_i+0x244>)
 8009a94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009a98:	6829      	ldr	r1, [r5, #0]
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009aa0:	6029      	str	r1, [r5, #0]
 8009aa2:	061d      	lsls	r5, r3, #24
 8009aa4:	d514      	bpl.n	8009ad0 <_printf_i+0x1ac>
 8009aa6:	07df      	lsls	r7, r3, #31
 8009aa8:	bf44      	itt	mi
 8009aaa:	f043 0320 	orrmi.w	r3, r3, #32
 8009aae:	6023      	strmi	r3, [r4, #0]
 8009ab0:	b91e      	cbnz	r6, 8009aba <_printf_i+0x196>
 8009ab2:	6823      	ldr	r3, [r4, #0]
 8009ab4:	f023 0320 	bic.w	r3, r3, #32
 8009ab8:	6023      	str	r3, [r4, #0]
 8009aba:	2310      	movs	r3, #16
 8009abc:	e7b0      	b.n	8009a20 <_printf_i+0xfc>
 8009abe:	6823      	ldr	r3, [r4, #0]
 8009ac0:	f043 0320 	orr.w	r3, r3, #32
 8009ac4:	6023      	str	r3, [r4, #0]
 8009ac6:	2378      	movs	r3, #120	; 0x78
 8009ac8:	4828      	ldr	r0, [pc, #160]	; (8009b6c <_printf_i+0x248>)
 8009aca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ace:	e7e3      	b.n	8009a98 <_printf_i+0x174>
 8009ad0:	0659      	lsls	r1, r3, #25
 8009ad2:	bf48      	it	mi
 8009ad4:	b2b6      	uxthmi	r6, r6
 8009ad6:	e7e6      	b.n	8009aa6 <_printf_i+0x182>
 8009ad8:	4615      	mov	r5, r2
 8009ada:	e7bb      	b.n	8009a54 <_printf_i+0x130>
 8009adc:	682b      	ldr	r3, [r5, #0]
 8009ade:	6826      	ldr	r6, [r4, #0]
 8009ae0:	6961      	ldr	r1, [r4, #20]
 8009ae2:	1d18      	adds	r0, r3, #4
 8009ae4:	6028      	str	r0, [r5, #0]
 8009ae6:	0635      	lsls	r5, r6, #24
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	d501      	bpl.n	8009af0 <_printf_i+0x1cc>
 8009aec:	6019      	str	r1, [r3, #0]
 8009aee:	e002      	b.n	8009af6 <_printf_i+0x1d2>
 8009af0:	0670      	lsls	r0, r6, #25
 8009af2:	d5fb      	bpl.n	8009aec <_printf_i+0x1c8>
 8009af4:	8019      	strh	r1, [r3, #0]
 8009af6:	2300      	movs	r3, #0
 8009af8:	6123      	str	r3, [r4, #16]
 8009afa:	4615      	mov	r5, r2
 8009afc:	e7ba      	b.n	8009a74 <_printf_i+0x150>
 8009afe:	682b      	ldr	r3, [r5, #0]
 8009b00:	1d1a      	adds	r2, r3, #4
 8009b02:	602a      	str	r2, [r5, #0]
 8009b04:	681d      	ldr	r5, [r3, #0]
 8009b06:	6862      	ldr	r2, [r4, #4]
 8009b08:	2100      	movs	r1, #0
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	f7f6 fb88 	bl	8000220 <memchr>
 8009b10:	b108      	cbz	r0, 8009b16 <_printf_i+0x1f2>
 8009b12:	1b40      	subs	r0, r0, r5
 8009b14:	6060      	str	r0, [r4, #4]
 8009b16:	6863      	ldr	r3, [r4, #4]
 8009b18:	6123      	str	r3, [r4, #16]
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b20:	e7a8      	b.n	8009a74 <_printf_i+0x150>
 8009b22:	6923      	ldr	r3, [r4, #16]
 8009b24:	462a      	mov	r2, r5
 8009b26:	4649      	mov	r1, r9
 8009b28:	4640      	mov	r0, r8
 8009b2a:	47d0      	blx	sl
 8009b2c:	3001      	adds	r0, #1
 8009b2e:	d0ab      	beq.n	8009a88 <_printf_i+0x164>
 8009b30:	6823      	ldr	r3, [r4, #0]
 8009b32:	079b      	lsls	r3, r3, #30
 8009b34:	d413      	bmi.n	8009b5e <_printf_i+0x23a>
 8009b36:	68e0      	ldr	r0, [r4, #12]
 8009b38:	9b03      	ldr	r3, [sp, #12]
 8009b3a:	4298      	cmp	r0, r3
 8009b3c:	bfb8      	it	lt
 8009b3e:	4618      	movlt	r0, r3
 8009b40:	e7a4      	b.n	8009a8c <_printf_i+0x168>
 8009b42:	2301      	movs	r3, #1
 8009b44:	4632      	mov	r2, r6
 8009b46:	4649      	mov	r1, r9
 8009b48:	4640      	mov	r0, r8
 8009b4a:	47d0      	blx	sl
 8009b4c:	3001      	adds	r0, #1
 8009b4e:	d09b      	beq.n	8009a88 <_printf_i+0x164>
 8009b50:	3501      	adds	r5, #1
 8009b52:	68e3      	ldr	r3, [r4, #12]
 8009b54:	9903      	ldr	r1, [sp, #12]
 8009b56:	1a5b      	subs	r3, r3, r1
 8009b58:	42ab      	cmp	r3, r5
 8009b5a:	dcf2      	bgt.n	8009b42 <_printf_i+0x21e>
 8009b5c:	e7eb      	b.n	8009b36 <_printf_i+0x212>
 8009b5e:	2500      	movs	r5, #0
 8009b60:	f104 0619 	add.w	r6, r4, #25
 8009b64:	e7f5      	b.n	8009b52 <_printf_i+0x22e>
 8009b66:	bf00      	nop
 8009b68:	0800c1aa 	.word	0x0800c1aa
 8009b6c:	0800c1bb 	.word	0x0800c1bb

08009b70 <_sbrk_r>:
 8009b70:	b538      	push	{r3, r4, r5, lr}
 8009b72:	4d06      	ldr	r5, [pc, #24]	; (8009b8c <_sbrk_r+0x1c>)
 8009b74:	2300      	movs	r3, #0
 8009b76:	4604      	mov	r4, r0
 8009b78:	4608      	mov	r0, r1
 8009b7a:	602b      	str	r3, [r5, #0]
 8009b7c:	f7fb f816 	bl	8004bac <_sbrk>
 8009b80:	1c43      	adds	r3, r0, #1
 8009b82:	d102      	bne.n	8009b8a <_sbrk_r+0x1a>
 8009b84:	682b      	ldr	r3, [r5, #0]
 8009b86:	b103      	cbz	r3, 8009b8a <_sbrk_r+0x1a>
 8009b88:	6023      	str	r3, [r4, #0]
 8009b8a:	bd38      	pop	{r3, r4, r5, pc}
 8009b8c:	20002ab8 	.word	0x20002ab8

08009b90 <siprintf>:
 8009b90:	b40e      	push	{r1, r2, r3}
 8009b92:	b500      	push	{lr}
 8009b94:	b09c      	sub	sp, #112	; 0x70
 8009b96:	ab1d      	add	r3, sp, #116	; 0x74
 8009b98:	9002      	str	r0, [sp, #8]
 8009b9a:	9006      	str	r0, [sp, #24]
 8009b9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ba0:	4809      	ldr	r0, [pc, #36]	; (8009bc8 <siprintf+0x38>)
 8009ba2:	9107      	str	r1, [sp, #28]
 8009ba4:	9104      	str	r1, [sp, #16]
 8009ba6:	4909      	ldr	r1, [pc, #36]	; (8009bcc <siprintf+0x3c>)
 8009ba8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bac:	9105      	str	r1, [sp, #20]
 8009bae:	6800      	ldr	r0, [r0, #0]
 8009bb0:	9301      	str	r3, [sp, #4]
 8009bb2:	a902      	add	r1, sp, #8
 8009bb4:	f001 faae 	bl	800b114 <_svfiprintf_r>
 8009bb8:	9b02      	ldr	r3, [sp, #8]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	701a      	strb	r2, [r3, #0]
 8009bbe:	b01c      	add	sp, #112	; 0x70
 8009bc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bc4:	b003      	add	sp, #12
 8009bc6:	4770      	bx	lr
 8009bc8:	200023e4 	.word	0x200023e4
 8009bcc:	ffff0208 	.word	0xffff0208

08009bd0 <strncat>:
 8009bd0:	b530      	push	{r4, r5, lr}
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	7825      	ldrb	r5, [r4, #0]
 8009bd6:	4623      	mov	r3, r4
 8009bd8:	3401      	adds	r4, #1
 8009bda:	2d00      	cmp	r5, #0
 8009bdc:	d1fa      	bne.n	8009bd4 <strncat+0x4>
 8009bde:	3a01      	subs	r2, #1
 8009be0:	d304      	bcc.n	8009bec <strncat+0x1c>
 8009be2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009be6:	f803 4b01 	strb.w	r4, [r3], #1
 8009bea:	b904      	cbnz	r4, 8009bee <strncat+0x1e>
 8009bec:	bd30      	pop	{r4, r5, pc}
 8009bee:	2a00      	cmp	r2, #0
 8009bf0:	d1f5      	bne.n	8009bde <strncat+0xe>
 8009bf2:	701a      	strb	r2, [r3, #0]
 8009bf4:	e7f3      	b.n	8009bde <strncat+0xe>

08009bf6 <quorem>:
 8009bf6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bfa:	6903      	ldr	r3, [r0, #16]
 8009bfc:	690c      	ldr	r4, [r1, #16]
 8009bfe:	42a3      	cmp	r3, r4
 8009c00:	4607      	mov	r7, r0
 8009c02:	f2c0 8081 	blt.w	8009d08 <quorem+0x112>
 8009c06:	3c01      	subs	r4, #1
 8009c08:	f101 0814 	add.w	r8, r1, #20
 8009c0c:	f100 0514 	add.w	r5, r0, #20
 8009c10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c14:	9301      	str	r3, [sp, #4]
 8009c16:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	429a      	cmp	r2, r3
 8009c22:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009c26:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c2a:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c2e:	d331      	bcc.n	8009c94 <quorem+0x9e>
 8009c30:	f04f 0e00 	mov.w	lr, #0
 8009c34:	4640      	mov	r0, r8
 8009c36:	46ac      	mov	ip, r5
 8009c38:	46f2      	mov	sl, lr
 8009c3a:	f850 2b04 	ldr.w	r2, [r0], #4
 8009c3e:	b293      	uxth	r3, r2
 8009c40:	fb06 e303 	mla	r3, r6, r3, lr
 8009c44:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	ebaa 0303 	sub.w	r3, sl, r3
 8009c4e:	f8dc a000 	ldr.w	sl, [ip]
 8009c52:	0c12      	lsrs	r2, r2, #16
 8009c54:	fa13 f38a 	uxtah	r3, r3, sl
 8009c58:	fb06 e202 	mla	r2, r6, r2, lr
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	9b00      	ldr	r3, [sp, #0]
 8009c60:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009c64:	b292      	uxth	r2, r2
 8009c66:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009c6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c6e:	f8bd 3000 	ldrh.w	r3, [sp]
 8009c72:	4581      	cmp	r9, r0
 8009c74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c78:	f84c 3b04 	str.w	r3, [ip], #4
 8009c7c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009c80:	d2db      	bcs.n	8009c3a <quorem+0x44>
 8009c82:	f855 300b 	ldr.w	r3, [r5, fp]
 8009c86:	b92b      	cbnz	r3, 8009c94 <quorem+0x9e>
 8009c88:	9b01      	ldr	r3, [sp, #4]
 8009c8a:	3b04      	subs	r3, #4
 8009c8c:	429d      	cmp	r5, r3
 8009c8e:	461a      	mov	r2, r3
 8009c90:	d32e      	bcc.n	8009cf0 <quorem+0xfa>
 8009c92:	613c      	str	r4, [r7, #16]
 8009c94:	4638      	mov	r0, r7
 8009c96:	f001 f8c9 	bl	800ae2c <__mcmp>
 8009c9a:	2800      	cmp	r0, #0
 8009c9c:	db24      	blt.n	8009ce8 <quorem+0xf2>
 8009c9e:	3601      	adds	r6, #1
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	f04f 0c00 	mov.w	ip, #0
 8009ca6:	f858 2b04 	ldr.w	r2, [r8], #4
 8009caa:	f8d0 e000 	ldr.w	lr, [r0]
 8009cae:	b293      	uxth	r3, r2
 8009cb0:	ebac 0303 	sub.w	r3, ip, r3
 8009cb4:	0c12      	lsrs	r2, r2, #16
 8009cb6:	fa13 f38e 	uxtah	r3, r3, lr
 8009cba:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009cbe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cc8:	45c1      	cmp	r9, r8
 8009cca:	f840 3b04 	str.w	r3, [r0], #4
 8009cce:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009cd2:	d2e8      	bcs.n	8009ca6 <quorem+0xb0>
 8009cd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009cd8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cdc:	b922      	cbnz	r2, 8009ce8 <quorem+0xf2>
 8009cde:	3b04      	subs	r3, #4
 8009ce0:	429d      	cmp	r5, r3
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	d30a      	bcc.n	8009cfc <quorem+0x106>
 8009ce6:	613c      	str	r4, [r7, #16]
 8009ce8:	4630      	mov	r0, r6
 8009cea:	b003      	add	sp, #12
 8009cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf0:	6812      	ldr	r2, [r2, #0]
 8009cf2:	3b04      	subs	r3, #4
 8009cf4:	2a00      	cmp	r2, #0
 8009cf6:	d1cc      	bne.n	8009c92 <quorem+0x9c>
 8009cf8:	3c01      	subs	r4, #1
 8009cfa:	e7c7      	b.n	8009c8c <quorem+0x96>
 8009cfc:	6812      	ldr	r2, [r2, #0]
 8009cfe:	3b04      	subs	r3, #4
 8009d00:	2a00      	cmp	r2, #0
 8009d02:	d1f0      	bne.n	8009ce6 <quorem+0xf0>
 8009d04:	3c01      	subs	r4, #1
 8009d06:	e7eb      	b.n	8009ce0 <quorem+0xea>
 8009d08:	2000      	movs	r0, #0
 8009d0a:	e7ee      	b.n	8009cea <quorem+0xf4>
 8009d0c:	0000      	movs	r0, r0
	...

08009d10 <_dtoa_r>:
 8009d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d14:	ed2d 8b04 	vpush	{d8-d9}
 8009d18:	ec57 6b10 	vmov	r6, r7, d0
 8009d1c:	b093      	sub	sp, #76	; 0x4c
 8009d1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009d20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009d24:	9106      	str	r1, [sp, #24]
 8009d26:	ee10 aa10 	vmov	sl, s0
 8009d2a:	4604      	mov	r4, r0
 8009d2c:	9209      	str	r2, [sp, #36]	; 0x24
 8009d2e:	930c      	str	r3, [sp, #48]	; 0x30
 8009d30:	46bb      	mov	fp, r7
 8009d32:	b975      	cbnz	r5, 8009d52 <_dtoa_r+0x42>
 8009d34:	2010      	movs	r0, #16
 8009d36:	f7ff f9b9 	bl	80090ac <malloc>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	6260      	str	r0, [r4, #36]	; 0x24
 8009d3e:	b920      	cbnz	r0, 8009d4a <_dtoa_r+0x3a>
 8009d40:	4ba7      	ldr	r3, [pc, #668]	; (8009fe0 <_dtoa_r+0x2d0>)
 8009d42:	21ea      	movs	r1, #234	; 0xea
 8009d44:	48a7      	ldr	r0, [pc, #668]	; (8009fe4 <_dtoa_r+0x2d4>)
 8009d46:	f001 fae5 	bl	800b314 <__assert_func>
 8009d4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009d4e:	6005      	str	r5, [r0, #0]
 8009d50:	60c5      	str	r5, [r0, #12]
 8009d52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d54:	6819      	ldr	r1, [r3, #0]
 8009d56:	b151      	cbz	r1, 8009d6e <_dtoa_r+0x5e>
 8009d58:	685a      	ldr	r2, [r3, #4]
 8009d5a:	604a      	str	r2, [r1, #4]
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	4093      	lsls	r3, r2
 8009d60:	608b      	str	r3, [r1, #8]
 8009d62:	4620      	mov	r0, r4
 8009d64:	f000 fe20 	bl	800a9a8 <_Bfree>
 8009d68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	601a      	str	r2, [r3, #0]
 8009d6e:	1e3b      	subs	r3, r7, #0
 8009d70:	bfaa      	itet	ge
 8009d72:	2300      	movge	r3, #0
 8009d74:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009d78:	f8c8 3000 	strge.w	r3, [r8]
 8009d7c:	4b9a      	ldr	r3, [pc, #616]	; (8009fe8 <_dtoa_r+0x2d8>)
 8009d7e:	bfbc      	itt	lt
 8009d80:	2201      	movlt	r2, #1
 8009d82:	f8c8 2000 	strlt.w	r2, [r8]
 8009d86:	ea33 030b 	bics.w	r3, r3, fp
 8009d8a:	d11b      	bne.n	8009dc4 <_dtoa_r+0xb4>
 8009d8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d8e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009d92:	6013      	str	r3, [r2, #0]
 8009d94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d98:	4333      	orrs	r3, r6
 8009d9a:	f000 8592 	beq.w	800a8c2 <_dtoa_r+0xbb2>
 8009d9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009da0:	b963      	cbnz	r3, 8009dbc <_dtoa_r+0xac>
 8009da2:	4b92      	ldr	r3, [pc, #584]	; (8009fec <_dtoa_r+0x2dc>)
 8009da4:	e022      	b.n	8009dec <_dtoa_r+0xdc>
 8009da6:	4b92      	ldr	r3, [pc, #584]	; (8009ff0 <_dtoa_r+0x2e0>)
 8009da8:	9301      	str	r3, [sp, #4]
 8009daa:	3308      	adds	r3, #8
 8009dac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009dae:	6013      	str	r3, [r2, #0]
 8009db0:	9801      	ldr	r0, [sp, #4]
 8009db2:	b013      	add	sp, #76	; 0x4c
 8009db4:	ecbd 8b04 	vpop	{d8-d9}
 8009db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dbc:	4b8b      	ldr	r3, [pc, #556]	; (8009fec <_dtoa_r+0x2dc>)
 8009dbe:	9301      	str	r3, [sp, #4]
 8009dc0:	3303      	adds	r3, #3
 8009dc2:	e7f3      	b.n	8009dac <_dtoa_r+0x9c>
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	4650      	mov	r0, sl
 8009dca:	4659      	mov	r1, fp
 8009dcc:	f7f6 fe9c 	bl	8000b08 <__aeabi_dcmpeq>
 8009dd0:	ec4b ab19 	vmov	d9, sl, fp
 8009dd4:	4680      	mov	r8, r0
 8009dd6:	b158      	cbz	r0, 8009df0 <_dtoa_r+0xe0>
 8009dd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009dda:	2301      	movs	r3, #1
 8009ddc:	6013      	str	r3, [r2, #0]
 8009dde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f000 856b 	beq.w	800a8bc <_dtoa_r+0xbac>
 8009de6:	4883      	ldr	r0, [pc, #524]	; (8009ff4 <_dtoa_r+0x2e4>)
 8009de8:	6018      	str	r0, [r3, #0]
 8009dea:	1e43      	subs	r3, r0, #1
 8009dec:	9301      	str	r3, [sp, #4]
 8009dee:	e7df      	b.n	8009db0 <_dtoa_r+0xa0>
 8009df0:	ec4b ab10 	vmov	d0, sl, fp
 8009df4:	aa10      	add	r2, sp, #64	; 0x40
 8009df6:	a911      	add	r1, sp, #68	; 0x44
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f001 f8bd 	bl	800af78 <__d2b>
 8009dfe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009e02:	ee08 0a10 	vmov	s16, r0
 8009e06:	2d00      	cmp	r5, #0
 8009e08:	f000 8084 	beq.w	8009f14 <_dtoa_r+0x204>
 8009e0c:	ee19 3a90 	vmov	r3, s19
 8009e10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e14:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009e18:	4656      	mov	r6, sl
 8009e1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009e1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009e22:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009e26:	4b74      	ldr	r3, [pc, #464]	; (8009ff8 <_dtoa_r+0x2e8>)
 8009e28:	2200      	movs	r2, #0
 8009e2a:	4630      	mov	r0, r6
 8009e2c:	4639      	mov	r1, r7
 8009e2e:	f7f6 fa4b 	bl	80002c8 <__aeabi_dsub>
 8009e32:	a365      	add	r3, pc, #404	; (adr r3, 8009fc8 <_dtoa_r+0x2b8>)
 8009e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e38:	f7f6 fbfe 	bl	8000638 <__aeabi_dmul>
 8009e3c:	a364      	add	r3, pc, #400	; (adr r3, 8009fd0 <_dtoa_r+0x2c0>)
 8009e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e42:	f7f6 fa43 	bl	80002cc <__adddf3>
 8009e46:	4606      	mov	r6, r0
 8009e48:	4628      	mov	r0, r5
 8009e4a:	460f      	mov	r7, r1
 8009e4c:	f7f6 fb8a 	bl	8000564 <__aeabi_i2d>
 8009e50:	a361      	add	r3, pc, #388	; (adr r3, 8009fd8 <_dtoa_r+0x2c8>)
 8009e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e56:	f7f6 fbef 	bl	8000638 <__aeabi_dmul>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	4630      	mov	r0, r6
 8009e60:	4639      	mov	r1, r7
 8009e62:	f7f6 fa33 	bl	80002cc <__adddf3>
 8009e66:	4606      	mov	r6, r0
 8009e68:	460f      	mov	r7, r1
 8009e6a:	f7f6 fe95 	bl	8000b98 <__aeabi_d2iz>
 8009e6e:	2200      	movs	r2, #0
 8009e70:	9000      	str	r0, [sp, #0]
 8009e72:	2300      	movs	r3, #0
 8009e74:	4630      	mov	r0, r6
 8009e76:	4639      	mov	r1, r7
 8009e78:	f7f6 fe50 	bl	8000b1c <__aeabi_dcmplt>
 8009e7c:	b150      	cbz	r0, 8009e94 <_dtoa_r+0x184>
 8009e7e:	9800      	ldr	r0, [sp, #0]
 8009e80:	f7f6 fb70 	bl	8000564 <__aeabi_i2d>
 8009e84:	4632      	mov	r2, r6
 8009e86:	463b      	mov	r3, r7
 8009e88:	f7f6 fe3e 	bl	8000b08 <__aeabi_dcmpeq>
 8009e8c:	b910      	cbnz	r0, 8009e94 <_dtoa_r+0x184>
 8009e8e:	9b00      	ldr	r3, [sp, #0]
 8009e90:	3b01      	subs	r3, #1
 8009e92:	9300      	str	r3, [sp, #0]
 8009e94:	9b00      	ldr	r3, [sp, #0]
 8009e96:	2b16      	cmp	r3, #22
 8009e98:	d85a      	bhi.n	8009f50 <_dtoa_r+0x240>
 8009e9a:	9a00      	ldr	r2, [sp, #0]
 8009e9c:	4b57      	ldr	r3, [pc, #348]	; (8009ffc <_dtoa_r+0x2ec>)
 8009e9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea6:	ec51 0b19 	vmov	r0, r1, d9
 8009eaa:	f7f6 fe37 	bl	8000b1c <__aeabi_dcmplt>
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	d050      	beq.n	8009f54 <_dtoa_r+0x244>
 8009eb2:	9b00      	ldr	r3, [sp, #0]
 8009eb4:	3b01      	subs	r3, #1
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	2300      	movs	r3, #0
 8009eba:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ebe:	1b5d      	subs	r5, r3, r5
 8009ec0:	1e6b      	subs	r3, r5, #1
 8009ec2:	9305      	str	r3, [sp, #20]
 8009ec4:	bf45      	ittet	mi
 8009ec6:	f1c5 0301 	rsbmi	r3, r5, #1
 8009eca:	9304      	strmi	r3, [sp, #16]
 8009ecc:	2300      	movpl	r3, #0
 8009ece:	2300      	movmi	r3, #0
 8009ed0:	bf4c      	ite	mi
 8009ed2:	9305      	strmi	r3, [sp, #20]
 8009ed4:	9304      	strpl	r3, [sp, #16]
 8009ed6:	9b00      	ldr	r3, [sp, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	db3d      	blt.n	8009f58 <_dtoa_r+0x248>
 8009edc:	9b05      	ldr	r3, [sp, #20]
 8009ede:	9a00      	ldr	r2, [sp, #0]
 8009ee0:	920a      	str	r2, [sp, #40]	; 0x28
 8009ee2:	4413      	add	r3, r2
 8009ee4:	9305      	str	r3, [sp, #20]
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	9307      	str	r3, [sp, #28]
 8009eea:	9b06      	ldr	r3, [sp, #24]
 8009eec:	2b09      	cmp	r3, #9
 8009eee:	f200 8089 	bhi.w	800a004 <_dtoa_r+0x2f4>
 8009ef2:	2b05      	cmp	r3, #5
 8009ef4:	bfc4      	itt	gt
 8009ef6:	3b04      	subgt	r3, #4
 8009ef8:	9306      	strgt	r3, [sp, #24]
 8009efa:	9b06      	ldr	r3, [sp, #24]
 8009efc:	f1a3 0302 	sub.w	r3, r3, #2
 8009f00:	bfcc      	ite	gt
 8009f02:	2500      	movgt	r5, #0
 8009f04:	2501      	movle	r5, #1
 8009f06:	2b03      	cmp	r3, #3
 8009f08:	f200 8087 	bhi.w	800a01a <_dtoa_r+0x30a>
 8009f0c:	e8df f003 	tbb	[pc, r3]
 8009f10:	59383a2d 	.word	0x59383a2d
 8009f14:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009f18:	441d      	add	r5, r3
 8009f1a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009f1e:	2b20      	cmp	r3, #32
 8009f20:	bfc1      	itttt	gt
 8009f22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009f26:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009f2a:	fa0b f303 	lslgt.w	r3, fp, r3
 8009f2e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009f32:	bfda      	itte	le
 8009f34:	f1c3 0320 	rsble	r3, r3, #32
 8009f38:	fa06 f003 	lslle.w	r0, r6, r3
 8009f3c:	4318      	orrgt	r0, r3
 8009f3e:	f7f6 fb01 	bl	8000544 <__aeabi_ui2d>
 8009f42:	2301      	movs	r3, #1
 8009f44:	4606      	mov	r6, r0
 8009f46:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009f4a:	3d01      	subs	r5, #1
 8009f4c:	930e      	str	r3, [sp, #56]	; 0x38
 8009f4e:	e76a      	b.n	8009e26 <_dtoa_r+0x116>
 8009f50:	2301      	movs	r3, #1
 8009f52:	e7b2      	b.n	8009eba <_dtoa_r+0x1aa>
 8009f54:	900b      	str	r0, [sp, #44]	; 0x2c
 8009f56:	e7b1      	b.n	8009ebc <_dtoa_r+0x1ac>
 8009f58:	9b04      	ldr	r3, [sp, #16]
 8009f5a:	9a00      	ldr	r2, [sp, #0]
 8009f5c:	1a9b      	subs	r3, r3, r2
 8009f5e:	9304      	str	r3, [sp, #16]
 8009f60:	4253      	negs	r3, r2
 8009f62:	9307      	str	r3, [sp, #28]
 8009f64:	2300      	movs	r3, #0
 8009f66:	930a      	str	r3, [sp, #40]	; 0x28
 8009f68:	e7bf      	b.n	8009eea <_dtoa_r+0x1da>
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	9308      	str	r3, [sp, #32]
 8009f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	dc55      	bgt.n	800a020 <_dtoa_r+0x310>
 8009f74:	2301      	movs	r3, #1
 8009f76:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	9209      	str	r2, [sp, #36]	; 0x24
 8009f7e:	e00c      	b.n	8009f9a <_dtoa_r+0x28a>
 8009f80:	2301      	movs	r3, #1
 8009f82:	e7f3      	b.n	8009f6c <_dtoa_r+0x25c>
 8009f84:	2300      	movs	r3, #0
 8009f86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f88:	9308      	str	r3, [sp, #32]
 8009f8a:	9b00      	ldr	r3, [sp, #0]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	9302      	str	r3, [sp, #8]
 8009f90:	3301      	adds	r3, #1
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	9303      	str	r3, [sp, #12]
 8009f96:	bfb8      	it	lt
 8009f98:	2301      	movlt	r3, #1
 8009f9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	6042      	str	r2, [r0, #4]
 8009fa0:	2204      	movs	r2, #4
 8009fa2:	f102 0614 	add.w	r6, r2, #20
 8009fa6:	429e      	cmp	r6, r3
 8009fa8:	6841      	ldr	r1, [r0, #4]
 8009faa:	d93d      	bls.n	800a028 <_dtoa_r+0x318>
 8009fac:	4620      	mov	r0, r4
 8009fae:	f000 fcbb 	bl	800a928 <_Balloc>
 8009fb2:	9001      	str	r0, [sp, #4]
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	d13b      	bne.n	800a030 <_dtoa_r+0x320>
 8009fb8:	4b11      	ldr	r3, [pc, #68]	; (800a000 <_dtoa_r+0x2f0>)
 8009fba:	4602      	mov	r2, r0
 8009fbc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009fc0:	e6c0      	b.n	8009d44 <_dtoa_r+0x34>
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e7df      	b.n	8009f86 <_dtoa_r+0x276>
 8009fc6:	bf00      	nop
 8009fc8:	636f4361 	.word	0x636f4361
 8009fcc:	3fd287a7 	.word	0x3fd287a7
 8009fd0:	8b60c8b3 	.word	0x8b60c8b3
 8009fd4:	3fc68a28 	.word	0x3fc68a28
 8009fd8:	509f79fb 	.word	0x509f79fb
 8009fdc:	3fd34413 	.word	0x3fd34413
 8009fe0:	0800c1d9 	.word	0x0800c1d9
 8009fe4:	0800c1f0 	.word	0x0800c1f0
 8009fe8:	7ff00000 	.word	0x7ff00000
 8009fec:	0800c1d5 	.word	0x0800c1d5
 8009ff0:	0800c1cc 	.word	0x0800c1cc
 8009ff4:	0800c1a9 	.word	0x0800c1a9
 8009ff8:	3ff80000 	.word	0x3ff80000
 8009ffc:	0800c2e0 	.word	0x0800c2e0
 800a000:	0800c24b 	.word	0x0800c24b
 800a004:	2501      	movs	r5, #1
 800a006:	2300      	movs	r3, #0
 800a008:	9306      	str	r3, [sp, #24]
 800a00a:	9508      	str	r5, [sp, #32]
 800a00c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a010:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a014:	2200      	movs	r2, #0
 800a016:	2312      	movs	r3, #18
 800a018:	e7b0      	b.n	8009f7c <_dtoa_r+0x26c>
 800a01a:	2301      	movs	r3, #1
 800a01c:	9308      	str	r3, [sp, #32]
 800a01e:	e7f5      	b.n	800a00c <_dtoa_r+0x2fc>
 800a020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a022:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a026:	e7b8      	b.n	8009f9a <_dtoa_r+0x28a>
 800a028:	3101      	adds	r1, #1
 800a02a:	6041      	str	r1, [r0, #4]
 800a02c:	0052      	lsls	r2, r2, #1
 800a02e:	e7b8      	b.n	8009fa2 <_dtoa_r+0x292>
 800a030:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a032:	9a01      	ldr	r2, [sp, #4]
 800a034:	601a      	str	r2, [r3, #0]
 800a036:	9b03      	ldr	r3, [sp, #12]
 800a038:	2b0e      	cmp	r3, #14
 800a03a:	f200 809d 	bhi.w	800a178 <_dtoa_r+0x468>
 800a03e:	2d00      	cmp	r5, #0
 800a040:	f000 809a 	beq.w	800a178 <_dtoa_r+0x468>
 800a044:	9b00      	ldr	r3, [sp, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	dd32      	ble.n	800a0b0 <_dtoa_r+0x3a0>
 800a04a:	4ab7      	ldr	r2, [pc, #732]	; (800a328 <_dtoa_r+0x618>)
 800a04c:	f003 030f 	and.w	r3, r3, #15
 800a050:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a054:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a058:	9b00      	ldr	r3, [sp, #0]
 800a05a:	05d8      	lsls	r0, r3, #23
 800a05c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a060:	d516      	bpl.n	800a090 <_dtoa_r+0x380>
 800a062:	4bb2      	ldr	r3, [pc, #712]	; (800a32c <_dtoa_r+0x61c>)
 800a064:	ec51 0b19 	vmov	r0, r1, d9
 800a068:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a06c:	f7f6 fc0e 	bl	800088c <__aeabi_ddiv>
 800a070:	f007 070f 	and.w	r7, r7, #15
 800a074:	4682      	mov	sl, r0
 800a076:	468b      	mov	fp, r1
 800a078:	2503      	movs	r5, #3
 800a07a:	4eac      	ldr	r6, [pc, #688]	; (800a32c <_dtoa_r+0x61c>)
 800a07c:	b957      	cbnz	r7, 800a094 <_dtoa_r+0x384>
 800a07e:	4642      	mov	r2, r8
 800a080:	464b      	mov	r3, r9
 800a082:	4650      	mov	r0, sl
 800a084:	4659      	mov	r1, fp
 800a086:	f7f6 fc01 	bl	800088c <__aeabi_ddiv>
 800a08a:	4682      	mov	sl, r0
 800a08c:	468b      	mov	fp, r1
 800a08e:	e028      	b.n	800a0e2 <_dtoa_r+0x3d2>
 800a090:	2502      	movs	r5, #2
 800a092:	e7f2      	b.n	800a07a <_dtoa_r+0x36a>
 800a094:	07f9      	lsls	r1, r7, #31
 800a096:	d508      	bpl.n	800a0aa <_dtoa_r+0x39a>
 800a098:	4640      	mov	r0, r8
 800a09a:	4649      	mov	r1, r9
 800a09c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a0a0:	f7f6 faca 	bl	8000638 <__aeabi_dmul>
 800a0a4:	3501      	adds	r5, #1
 800a0a6:	4680      	mov	r8, r0
 800a0a8:	4689      	mov	r9, r1
 800a0aa:	107f      	asrs	r7, r7, #1
 800a0ac:	3608      	adds	r6, #8
 800a0ae:	e7e5      	b.n	800a07c <_dtoa_r+0x36c>
 800a0b0:	f000 809b 	beq.w	800a1ea <_dtoa_r+0x4da>
 800a0b4:	9b00      	ldr	r3, [sp, #0]
 800a0b6:	4f9d      	ldr	r7, [pc, #628]	; (800a32c <_dtoa_r+0x61c>)
 800a0b8:	425e      	negs	r6, r3
 800a0ba:	4b9b      	ldr	r3, [pc, #620]	; (800a328 <_dtoa_r+0x618>)
 800a0bc:	f006 020f 	and.w	r2, r6, #15
 800a0c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c8:	ec51 0b19 	vmov	r0, r1, d9
 800a0cc:	f7f6 fab4 	bl	8000638 <__aeabi_dmul>
 800a0d0:	1136      	asrs	r6, r6, #4
 800a0d2:	4682      	mov	sl, r0
 800a0d4:	468b      	mov	fp, r1
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	2502      	movs	r5, #2
 800a0da:	2e00      	cmp	r6, #0
 800a0dc:	d17a      	bne.n	800a1d4 <_dtoa_r+0x4c4>
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1d3      	bne.n	800a08a <_dtoa_r+0x37a>
 800a0e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	f000 8082 	beq.w	800a1ee <_dtoa_r+0x4de>
 800a0ea:	4b91      	ldr	r3, [pc, #580]	; (800a330 <_dtoa_r+0x620>)
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	4650      	mov	r0, sl
 800a0f0:	4659      	mov	r1, fp
 800a0f2:	f7f6 fd13 	bl	8000b1c <__aeabi_dcmplt>
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	d079      	beq.n	800a1ee <_dtoa_r+0x4de>
 800a0fa:	9b03      	ldr	r3, [sp, #12]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d076      	beq.n	800a1ee <_dtoa_r+0x4de>
 800a100:	9b02      	ldr	r3, [sp, #8]
 800a102:	2b00      	cmp	r3, #0
 800a104:	dd36      	ble.n	800a174 <_dtoa_r+0x464>
 800a106:	9b00      	ldr	r3, [sp, #0]
 800a108:	4650      	mov	r0, sl
 800a10a:	4659      	mov	r1, fp
 800a10c:	1e5f      	subs	r7, r3, #1
 800a10e:	2200      	movs	r2, #0
 800a110:	4b88      	ldr	r3, [pc, #544]	; (800a334 <_dtoa_r+0x624>)
 800a112:	f7f6 fa91 	bl	8000638 <__aeabi_dmul>
 800a116:	9e02      	ldr	r6, [sp, #8]
 800a118:	4682      	mov	sl, r0
 800a11a:	468b      	mov	fp, r1
 800a11c:	3501      	adds	r5, #1
 800a11e:	4628      	mov	r0, r5
 800a120:	f7f6 fa20 	bl	8000564 <__aeabi_i2d>
 800a124:	4652      	mov	r2, sl
 800a126:	465b      	mov	r3, fp
 800a128:	f7f6 fa86 	bl	8000638 <__aeabi_dmul>
 800a12c:	4b82      	ldr	r3, [pc, #520]	; (800a338 <_dtoa_r+0x628>)
 800a12e:	2200      	movs	r2, #0
 800a130:	f7f6 f8cc 	bl	80002cc <__adddf3>
 800a134:	46d0      	mov	r8, sl
 800a136:	46d9      	mov	r9, fp
 800a138:	4682      	mov	sl, r0
 800a13a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a13e:	2e00      	cmp	r6, #0
 800a140:	d158      	bne.n	800a1f4 <_dtoa_r+0x4e4>
 800a142:	4b7e      	ldr	r3, [pc, #504]	; (800a33c <_dtoa_r+0x62c>)
 800a144:	2200      	movs	r2, #0
 800a146:	4640      	mov	r0, r8
 800a148:	4649      	mov	r1, r9
 800a14a:	f7f6 f8bd 	bl	80002c8 <__aeabi_dsub>
 800a14e:	4652      	mov	r2, sl
 800a150:	465b      	mov	r3, fp
 800a152:	4680      	mov	r8, r0
 800a154:	4689      	mov	r9, r1
 800a156:	f7f6 fcff 	bl	8000b58 <__aeabi_dcmpgt>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	f040 8295 	bne.w	800a68a <_dtoa_r+0x97a>
 800a160:	4652      	mov	r2, sl
 800a162:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a166:	4640      	mov	r0, r8
 800a168:	4649      	mov	r1, r9
 800a16a:	f7f6 fcd7 	bl	8000b1c <__aeabi_dcmplt>
 800a16e:	2800      	cmp	r0, #0
 800a170:	f040 8289 	bne.w	800a686 <_dtoa_r+0x976>
 800a174:	ec5b ab19 	vmov	sl, fp, d9
 800a178:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	f2c0 8148 	blt.w	800a410 <_dtoa_r+0x700>
 800a180:	9a00      	ldr	r2, [sp, #0]
 800a182:	2a0e      	cmp	r2, #14
 800a184:	f300 8144 	bgt.w	800a410 <_dtoa_r+0x700>
 800a188:	4b67      	ldr	r3, [pc, #412]	; (800a328 <_dtoa_r+0x618>)
 800a18a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a18e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a194:	2b00      	cmp	r3, #0
 800a196:	f280 80d5 	bge.w	800a344 <_dtoa_r+0x634>
 800a19a:	9b03      	ldr	r3, [sp, #12]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	f300 80d1 	bgt.w	800a344 <_dtoa_r+0x634>
 800a1a2:	f040 826f 	bne.w	800a684 <_dtoa_r+0x974>
 800a1a6:	4b65      	ldr	r3, [pc, #404]	; (800a33c <_dtoa_r+0x62c>)
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	4640      	mov	r0, r8
 800a1ac:	4649      	mov	r1, r9
 800a1ae:	f7f6 fa43 	bl	8000638 <__aeabi_dmul>
 800a1b2:	4652      	mov	r2, sl
 800a1b4:	465b      	mov	r3, fp
 800a1b6:	f7f6 fcc5 	bl	8000b44 <__aeabi_dcmpge>
 800a1ba:	9e03      	ldr	r6, [sp, #12]
 800a1bc:	4637      	mov	r7, r6
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	f040 8245 	bne.w	800a64e <_dtoa_r+0x93e>
 800a1c4:	9d01      	ldr	r5, [sp, #4]
 800a1c6:	2331      	movs	r3, #49	; 0x31
 800a1c8:	f805 3b01 	strb.w	r3, [r5], #1
 800a1cc:	9b00      	ldr	r3, [sp, #0]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	9300      	str	r3, [sp, #0]
 800a1d2:	e240      	b.n	800a656 <_dtoa_r+0x946>
 800a1d4:	07f2      	lsls	r2, r6, #31
 800a1d6:	d505      	bpl.n	800a1e4 <_dtoa_r+0x4d4>
 800a1d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1dc:	f7f6 fa2c 	bl	8000638 <__aeabi_dmul>
 800a1e0:	3501      	adds	r5, #1
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	1076      	asrs	r6, r6, #1
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	e777      	b.n	800a0da <_dtoa_r+0x3ca>
 800a1ea:	2502      	movs	r5, #2
 800a1ec:	e779      	b.n	800a0e2 <_dtoa_r+0x3d2>
 800a1ee:	9f00      	ldr	r7, [sp, #0]
 800a1f0:	9e03      	ldr	r6, [sp, #12]
 800a1f2:	e794      	b.n	800a11e <_dtoa_r+0x40e>
 800a1f4:	9901      	ldr	r1, [sp, #4]
 800a1f6:	4b4c      	ldr	r3, [pc, #304]	; (800a328 <_dtoa_r+0x618>)
 800a1f8:	4431      	add	r1, r6
 800a1fa:	910d      	str	r1, [sp, #52]	; 0x34
 800a1fc:	9908      	ldr	r1, [sp, #32]
 800a1fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a202:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a206:	2900      	cmp	r1, #0
 800a208:	d043      	beq.n	800a292 <_dtoa_r+0x582>
 800a20a:	494d      	ldr	r1, [pc, #308]	; (800a340 <_dtoa_r+0x630>)
 800a20c:	2000      	movs	r0, #0
 800a20e:	f7f6 fb3d 	bl	800088c <__aeabi_ddiv>
 800a212:	4652      	mov	r2, sl
 800a214:	465b      	mov	r3, fp
 800a216:	f7f6 f857 	bl	80002c8 <__aeabi_dsub>
 800a21a:	9d01      	ldr	r5, [sp, #4]
 800a21c:	4682      	mov	sl, r0
 800a21e:	468b      	mov	fp, r1
 800a220:	4649      	mov	r1, r9
 800a222:	4640      	mov	r0, r8
 800a224:	f7f6 fcb8 	bl	8000b98 <__aeabi_d2iz>
 800a228:	4606      	mov	r6, r0
 800a22a:	f7f6 f99b 	bl	8000564 <__aeabi_i2d>
 800a22e:	4602      	mov	r2, r0
 800a230:	460b      	mov	r3, r1
 800a232:	4640      	mov	r0, r8
 800a234:	4649      	mov	r1, r9
 800a236:	f7f6 f847 	bl	80002c8 <__aeabi_dsub>
 800a23a:	3630      	adds	r6, #48	; 0x30
 800a23c:	f805 6b01 	strb.w	r6, [r5], #1
 800a240:	4652      	mov	r2, sl
 800a242:	465b      	mov	r3, fp
 800a244:	4680      	mov	r8, r0
 800a246:	4689      	mov	r9, r1
 800a248:	f7f6 fc68 	bl	8000b1c <__aeabi_dcmplt>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	d163      	bne.n	800a318 <_dtoa_r+0x608>
 800a250:	4642      	mov	r2, r8
 800a252:	464b      	mov	r3, r9
 800a254:	4936      	ldr	r1, [pc, #216]	; (800a330 <_dtoa_r+0x620>)
 800a256:	2000      	movs	r0, #0
 800a258:	f7f6 f836 	bl	80002c8 <__aeabi_dsub>
 800a25c:	4652      	mov	r2, sl
 800a25e:	465b      	mov	r3, fp
 800a260:	f7f6 fc5c 	bl	8000b1c <__aeabi_dcmplt>
 800a264:	2800      	cmp	r0, #0
 800a266:	f040 80b5 	bne.w	800a3d4 <_dtoa_r+0x6c4>
 800a26a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a26c:	429d      	cmp	r5, r3
 800a26e:	d081      	beq.n	800a174 <_dtoa_r+0x464>
 800a270:	4b30      	ldr	r3, [pc, #192]	; (800a334 <_dtoa_r+0x624>)
 800a272:	2200      	movs	r2, #0
 800a274:	4650      	mov	r0, sl
 800a276:	4659      	mov	r1, fp
 800a278:	f7f6 f9de 	bl	8000638 <__aeabi_dmul>
 800a27c:	4b2d      	ldr	r3, [pc, #180]	; (800a334 <_dtoa_r+0x624>)
 800a27e:	4682      	mov	sl, r0
 800a280:	468b      	mov	fp, r1
 800a282:	4640      	mov	r0, r8
 800a284:	4649      	mov	r1, r9
 800a286:	2200      	movs	r2, #0
 800a288:	f7f6 f9d6 	bl	8000638 <__aeabi_dmul>
 800a28c:	4680      	mov	r8, r0
 800a28e:	4689      	mov	r9, r1
 800a290:	e7c6      	b.n	800a220 <_dtoa_r+0x510>
 800a292:	4650      	mov	r0, sl
 800a294:	4659      	mov	r1, fp
 800a296:	f7f6 f9cf 	bl	8000638 <__aeabi_dmul>
 800a29a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a29c:	9d01      	ldr	r5, [sp, #4]
 800a29e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2a0:	4682      	mov	sl, r0
 800a2a2:	468b      	mov	fp, r1
 800a2a4:	4649      	mov	r1, r9
 800a2a6:	4640      	mov	r0, r8
 800a2a8:	f7f6 fc76 	bl	8000b98 <__aeabi_d2iz>
 800a2ac:	4606      	mov	r6, r0
 800a2ae:	f7f6 f959 	bl	8000564 <__aeabi_i2d>
 800a2b2:	3630      	adds	r6, #48	; 0x30
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	4640      	mov	r0, r8
 800a2ba:	4649      	mov	r1, r9
 800a2bc:	f7f6 f804 	bl	80002c8 <__aeabi_dsub>
 800a2c0:	f805 6b01 	strb.w	r6, [r5], #1
 800a2c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2c6:	429d      	cmp	r5, r3
 800a2c8:	4680      	mov	r8, r0
 800a2ca:	4689      	mov	r9, r1
 800a2cc:	f04f 0200 	mov.w	r2, #0
 800a2d0:	d124      	bne.n	800a31c <_dtoa_r+0x60c>
 800a2d2:	4b1b      	ldr	r3, [pc, #108]	; (800a340 <_dtoa_r+0x630>)
 800a2d4:	4650      	mov	r0, sl
 800a2d6:	4659      	mov	r1, fp
 800a2d8:	f7f5 fff8 	bl	80002cc <__adddf3>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	460b      	mov	r3, r1
 800a2e0:	4640      	mov	r0, r8
 800a2e2:	4649      	mov	r1, r9
 800a2e4:	f7f6 fc38 	bl	8000b58 <__aeabi_dcmpgt>
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	d173      	bne.n	800a3d4 <_dtoa_r+0x6c4>
 800a2ec:	4652      	mov	r2, sl
 800a2ee:	465b      	mov	r3, fp
 800a2f0:	4913      	ldr	r1, [pc, #76]	; (800a340 <_dtoa_r+0x630>)
 800a2f2:	2000      	movs	r0, #0
 800a2f4:	f7f5 ffe8 	bl	80002c8 <__aeabi_dsub>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	4640      	mov	r0, r8
 800a2fe:	4649      	mov	r1, r9
 800a300:	f7f6 fc0c 	bl	8000b1c <__aeabi_dcmplt>
 800a304:	2800      	cmp	r0, #0
 800a306:	f43f af35 	beq.w	800a174 <_dtoa_r+0x464>
 800a30a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a30c:	1e6b      	subs	r3, r5, #1
 800a30e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a310:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a314:	2b30      	cmp	r3, #48	; 0x30
 800a316:	d0f8      	beq.n	800a30a <_dtoa_r+0x5fa>
 800a318:	9700      	str	r7, [sp, #0]
 800a31a:	e049      	b.n	800a3b0 <_dtoa_r+0x6a0>
 800a31c:	4b05      	ldr	r3, [pc, #20]	; (800a334 <_dtoa_r+0x624>)
 800a31e:	f7f6 f98b 	bl	8000638 <__aeabi_dmul>
 800a322:	4680      	mov	r8, r0
 800a324:	4689      	mov	r9, r1
 800a326:	e7bd      	b.n	800a2a4 <_dtoa_r+0x594>
 800a328:	0800c2e0 	.word	0x0800c2e0
 800a32c:	0800c2b8 	.word	0x0800c2b8
 800a330:	3ff00000 	.word	0x3ff00000
 800a334:	40240000 	.word	0x40240000
 800a338:	401c0000 	.word	0x401c0000
 800a33c:	40140000 	.word	0x40140000
 800a340:	3fe00000 	.word	0x3fe00000
 800a344:	9d01      	ldr	r5, [sp, #4]
 800a346:	4656      	mov	r6, sl
 800a348:	465f      	mov	r7, fp
 800a34a:	4642      	mov	r2, r8
 800a34c:	464b      	mov	r3, r9
 800a34e:	4630      	mov	r0, r6
 800a350:	4639      	mov	r1, r7
 800a352:	f7f6 fa9b 	bl	800088c <__aeabi_ddiv>
 800a356:	f7f6 fc1f 	bl	8000b98 <__aeabi_d2iz>
 800a35a:	4682      	mov	sl, r0
 800a35c:	f7f6 f902 	bl	8000564 <__aeabi_i2d>
 800a360:	4642      	mov	r2, r8
 800a362:	464b      	mov	r3, r9
 800a364:	f7f6 f968 	bl	8000638 <__aeabi_dmul>
 800a368:	4602      	mov	r2, r0
 800a36a:	460b      	mov	r3, r1
 800a36c:	4630      	mov	r0, r6
 800a36e:	4639      	mov	r1, r7
 800a370:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a374:	f7f5 ffa8 	bl	80002c8 <__aeabi_dsub>
 800a378:	f805 6b01 	strb.w	r6, [r5], #1
 800a37c:	9e01      	ldr	r6, [sp, #4]
 800a37e:	9f03      	ldr	r7, [sp, #12]
 800a380:	1bae      	subs	r6, r5, r6
 800a382:	42b7      	cmp	r7, r6
 800a384:	4602      	mov	r2, r0
 800a386:	460b      	mov	r3, r1
 800a388:	d135      	bne.n	800a3f6 <_dtoa_r+0x6e6>
 800a38a:	f7f5 ff9f 	bl	80002cc <__adddf3>
 800a38e:	4642      	mov	r2, r8
 800a390:	464b      	mov	r3, r9
 800a392:	4606      	mov	r6, r0
 800a394:	460f      	mov	r7, r1
 800a396:	f7f6 fbdf 	bl	8000b58 <__aeabi_dcmpgt>
 800a39a:	b9d0      	cbnz	r0, 800a3d2 <_dtoa_r+0x6c2>
 800a39c:	4642      	mov	r2, r8
 800a39e:	464b      	mov	r3, r9
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	4639      	mov	r1, r7
 800a3a4:	f7f6 fbb0 	bl	8000b08 <__aeabi_dcmpeq>
 800a3a8:	b110      	cbz	r0, 800a3b0 <_dtoa_r+0x6a0>
 800a3aa:	f01a 0f01 	tst.w	sl, #1
 800a3ae:	d110      	bne.n	800a3d2 <_dtoa_r+0x6c2>
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	ee18 1a10 	vmov	r1, s16
 800a3b6:	f000 faf7 	bl	800a9a8 <_Bfree>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	9800      	ldr	r0, [sp, #0]
 800a3be:	702b      	strb	r3, [r5, #0]
 800a3c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3c2:	3001      	adds	r0, #1
 800a3c4:	6018      	str	r0, [r3, #0]
 800a3c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f43f acf1 	beq.w	8009db0 <_dtoa_r+0xa0>
 800a3ce:	601d      	str	r5, [r3, #0]
 800a3d0:	e4ee      	b.n	8009db0 <_dtoa_r+0xa0>
 800a3d2:	9f00      	ldr	r7, [sp, #0]
 800a3d4:	462b      	mov	r3, r5
 800a3d6:	461d      	mov	r5, r3
 800a3d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3dc:	2a39      	cmp	r2, #57	; 0x39
 800a3de:	d106      	bne.n	800a3ee <_dtoa_r+0x6de>
 800a3e0:	9a01      	ldr	r2, [sp, #4]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d1f7      	bne.n	800a3d6 <_dtoa_r+0x6c6>
 800a3e6:	9901      	ldr	r1, [sp, #4]
 800a3e8:	2230      	movs	r2, #48	; 0x30
 800a3ea:	3701      	adds	r7, #1
 800a3ec:	700a      	strb	r2, [r1, #0]
 800a3ee:	781a      	ldrb	r2, [r3, #0]
 800a3f0:	3201      	adds	r2, #1
 800a3f2:	701a      	strb	r2, [r3, #0]
 800a3f4:	e790      	b.n	800a318 <_dtoa_r+0x608>
 800a3f6:	4ba6      	ldr	r3, [pc, #664]	; (800a690 <_dtoa_r+0x980>)
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f7f6 f91d 	bl	8000638 <__aeabi_dmul>
 800a3fe:	2200      	movs	r2, #0
 800a400:	2300      	movs	r3, #0
 800a402:	4606      	mov	r6, r0
 800a404:	460f      	mov	r7, r1
 800a406:	f7f6 fb7f 	bl	8000b08 <__aeabi_dcmpeq>
 800a40a:	2800      	cmp	r0, #0
 800a40c:	d09d      	beq.n	800a34a <_dtoa_r+0x63a>
 800a40e:	e7cf      	b.n	800a3b0 <_dtoa_r+0x6a0>
 800a410:	9a08      	ldr	r2, [sp, #32]
 800a412:	2a00      	cmp	r2, #0
 800a414:	f000 80d7 	beq.w	800a5c6 <_dtoa_r+0x8b6>
 800a418:	9a06      	ldr	r2, [sp, #24]
 800a41a:	2a01      	cmp	r2, #1
 800a41c:	f300 80ba 	bgt.w	800a594 <_dtoa_r+0x884>
 800a420:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a422:	2a00      	cmp	r2, #0
 800a424:	f000 80b2 	beq.w	800a58c <_dtoa_r+0x87c>
 800a428:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a42c:	9e07      	ldr	r6, [sp, #28]
 800a42e:	9d04      	ldr	r5, [sp, #16]
 800a430:	9a04      	ldr	r2, [sp, #16]
 800a432:	441a      	add	r2, r3
 800a434:	9204      	str	r2, [sp, #16]
 800a436:	9a05      	ldr	r2, [sp, #20]
 800a438:	2101      	movs	r1, #1
 800a43a:	441a      	add	r2, r3
 800a43c:	4620      	mov	r0, r4
 800a43e:	9205      	str	r2, [sp, #20]
 800a440:	f000 fb6a 	bl	800ab18 <__i2b>
 800a444:	4607      	mov	r7, r0
 800a446:	2d00      	cmp	r5, #0
 800a448:	dd0c      	ble.n	800a464 <_dtoa_r+0x754>
 800a44a:	9b05      	ldr	r3, [sp, #20]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	dd09      	ble.n	800a464 <_dtoa_r+0x754>
 800a450:	42ab      	cmp	r3, r5
 800a452:	9a04      	ldr	r2, [sp, #16]
 800a454:	bfa8      	it	ge
 800a456:	462b      	movge	r3, r5
 800a458:	1ad2      	subs	r2, r2, r3
 800a45a:	9204      	str	r2, [sp, #16]
 800a45c:	9a05      	ldr	r2, [sp, #20]
 800a45e:	1aed      	subs	r5, r5, r3
 800a460:	1ad3      	subs	r3, r2, r3
 800a462:	9305      	str	r3, [sp, #20]
 800a464:	9b07      	ldr	r3, [sp, #28]
 800a466:	b31b      	cbz	r3, 800a4b0 <_dtoa_r+0x7a0>
 800a468:	9b08      	ldr	r3, [sp, #32]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	f000 80af 	beq.w	800a5ce <_dtoa_r+0x8be>
 800a470:	2e00      	cmp	r6, #0
 800a472:	dd13      	ble.n	800a49c <_dtoa_r+0x78c>
 800a474:	4639      	mov	r1, r7
 800a476:	4632      	mov	r2, r6
 800a478:	4620      	mov	r0, r4
 800a47a:	f000 fc0d 	bl	800ac98 <__pow5mult>
 800a47e:	ee18 2a10 	vmov	r2, s16
 800a482:	4601      	mov	r1, r0
 800a484:	4607      	mov	r7, r0
 800a486:	4620      	mov	r0, r4
 800a488:	f000 fb5c 	bl	800ab44 <__multiply>
 800a48c:	ee18 1a10 	vmov	r1, s16
 800a490:	4680      	mov	r8, r0
 800a492:	4620      	mov	r0, r4
 800a494:	f000 fa88 	bl	800a9a8 <_Bfree>
 800a498:	ee08 8a10 	vmov	s16, r8
 800a49c:	9b07      	ldr	r3, [sp, #28]
 800a49e:	1b9a      	subs	r2, r3, r6
 800a4a0:	d006      	beq.n	800a4b0 <_dtoa_r+0x7a0>
 800a4a2:	ee18 1a10 	vmov	r1, s16
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	f000 fbf6 	bl	800ac98 <__pow5mult>
 800a4ac:	ee08 0a10 	vmov	s16, r0
 800a4b0:	2101      	movs	r1, #1
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	f000 fb30 	bl	800ab18 <__i2b>
 800a4b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	4606      	mov	r6, r0
 800a4be:	f340 8088 	ble.w	800a5d2 <_dtoa_r+0x8c2>
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	4601      	mov	r1, r0
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	f000 fbe6 	bl	800ac98 <__pow5mult>
 800a4cc:	9b06      	ldr	r3, [sp, #24]
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	4606      	mov	r6, r0
 800a4d2:	f340 8081 	ble.w	800a5d8 <_dtoa_r+0x8c8>
 800a4d6:	f04f 0800 	mov.w	r8, #0
 800a4da:	6933      	ldr	r3, [r6, #16]
 800a4dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a4e0:	6918      	ldr	r0, [r3, #16]
 800a4e2:	f000 fac9 	bl	800aa78 <__hi0bits>
 800a4e6:	f1c0 0020 	rsb	r0, r0, #32
 800a4ea:	9b05      	ldr	r3, [sp, #20]
 800a4ec:	4418      	add	r0, r3
 800a4ee:	f010 001f 	ands.w	r0, r0, #31
 800a4f2:	f000 8092 	beq.w	800a61a <_dtoa_r+0x90a>
 800a4f6:	f1c0 0320 	rsb	r3, r0, #32
 800a4fa:	2b04      	cmp	r3, #4
 800a4fc:	f340 808a 	ble.w	800a614 <_dtoa_r+0x904>
 800a500:	f1c0 001c 	rsb	r0, r0, #28
 800a504:	9b04      	ldr	r3, [sp, #16]
 800a506:	4403      	add	r3, r0
 800a508:	9304      	str	r3, [sp, #16]
 800a50a:	9b05      	ldr	r3, [sp, #20]
 800a50c:	4403      	add	r3, r0
 800a50e:	4405      	add	r5, r0
 800a510:	9305      	str	r3, [sp, #20]
 800a512:	9b04      	ldr	r3, [sp, #16]
 800a514:	2b00      	cmp	r3, #0
 800a516:	dd07      	ble.n	800a528 <_dtoa_r+0x818>
 800a518:	ee18 1a10 	vmov	r1, s16
 800a51c:	461a      	mov	r2, r3
 800a51e:	4620      	mov	r0, r4
 800a520:	f000 fc14 	bl	800ad4c <__lshift>
 800a524:	ee08 0a10 	vmov	s16, r0
 800a528:	9b05      	ldr	r3, [sp, #20]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	dd05      	ble.n	800a53a <_dtoa_r+0x82a>
 800a52e:	4631      	mov	r1, r6
 800a530:	461a      	mov	r2, r3
 800a532:	4620      	mov	r0, r4
 800a534:	f000 fc0a 	bl	800ad4c <__lshift>
 800a538:	4606      	mov	r6, r0
 800a53a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d06e      	beq.n	800a61e <_dtoa_r+0x90e>
 800a540:	ee18 0a10 	vmov	r0, s16
 800a544:	4631      	mov	r1, r6
 800a546:	f000 fc71 	bl	800ae2c <__mcmp>
 800a54a:	2800      	cmp	r0, #0
 800a54c:	da67      	bge.n	800a61e <_dtoa_r+0x90e>
 800a54e:	9b00      	ldr	r3, [sp, #0]
 800a550:	3b01      	subs	r3, #1
 800a552:	ee18 1a10 	vmov	r1, s16
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	220a      	movs	r2, #10
 800a55a:	2300      	movs	r3, #0
 800a55c:	4620      	mov	r0, r4
 800a55e:	f000 fa45 	bl	800a9ec <__multadd>
 800a562:	9b08      	ldr	r3, [sp, #32]
 800a564:	ee08 0a10 	vmov	s16, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f000 81b1 	beq.w	800a8d0 <_dtoa_r+0xbc0>
 800a56e:	2300      	movs	r3, #0
 800a570:	4639      	mov	r1, r7
 800a572:	220a      	movs	r2, #10
 800a574:	4620      	mov	r0, r4
 800a576:	f000 fa39 	bl	800a9ec <__multadd>
 800a57a:	9b02      	ldr	r3, [sp, #8]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	4607      	mov	r7, r0
 800a580:	f300 808e 	bgt.w	800a6a0 <_dtoa_r+0x990>
 800a584:	9b06      	ldr	r3, [sp, #24]
 800a586:	2b02      	cmp	r3, #2
 800a588:	dc51      	bgt.n	800a62e <_dtoa_r+0x91e>
 800a58a:	e089      	b.n	800a6a0 <_dtoa_r+0x990>
 800a58c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a58e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a592:	e74b      	b.n	800a42c <_dtoa_r+0x71c>
 800a594:	9b03      	ldr	r3, [sp, #12]
 800a596:	1e5e      	subs	r6, r3, #1
 800a598:	9b07      	ldr	r3, [sp, #28]
 800a59a:	42b3      	cmp	r3, r6
 800a59c:	bfbf      	itttt	lt
 800a59e:	9b07      	ldrlt	r3, [sp, #28]
 800a5a0:	9607      	strlt	r6, [sp, #28]
 800a5a2:	1af2      	sublt	r2, r6, r3
 800a5a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a5a6:	bfb6      	itet	lt
 800a5a8:	189b      	addlt	r3, r3, r2
 800a5aa:	1b9e      	subge	r6, r3, r6
 800a5ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a5ae:	9b03      	ldr	r3, [sp, #12]
 800a5b0:	bfb8      	it	lt
 800a5b2:	2600      	movlt	r6, #0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	bfb7      	itett	lt
 800a5b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a5bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a5c0:	1a9d      	sublt	r5, r3, r2
 800a5c2:	2300      	movlt	r3, #0
 800a5c4:	e734      	b.n	800a430 <_dtoa_r+0x720>
 800a5c6:	9e07      	ldr	r6, [sp, #28]
 800a5c8:	9d04      	ldr	r5, [sp, #16]
 800a5ca:	9f08      	ldr	r7, [sp, #32]
 800a5cc:	e73b      	b.n	800a446 <_dtoa_r+0x736>
 800a5ce:	9a07      	ldr	r2, [sp, #28]
 800a5d0:	e767      	b.n	800a4a2 <_dtoa_r+0x792>
 800a5d2:	9b06      	ldr	r3, [sp, #24]
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	dc18      	bgt.n	800a60a <_dtoa_r+0x8fa>
 800a5d8:	f1ba 0f00 	cmp.w	sl, #0
 800a5dc:	d115      	bne.n	800a60a <_dtoa_r+0x8fa>
 800a5de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5e2:	b993      	cbnz	r3, 800a60a <_dtoa_r+0x8fa>
 800a5e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a5e8:	0d1b      	lsrs	r3, r3, #20
 800a5ea:	051b      	lsls	r3, r3, #20
 800a5ec:	b183      	cbz	r3, 800a610 <_dtoa_r+0x900>
 800a5ee:	9b04      	ldr	r3, [sp, #16]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	9304      	str	r3, [sp, #16]
 800a5f4:	9b05      	ldr	r3, [sp, #20]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	9305      	str	r3, [sp, #20]
 800a5fa:	f04f 0801 	mov.w	r8, #1
 800a5fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a600:	2b00      	cmp	r3, #0
 800a602:	f47f af6a 	bne.w	800a4da <_dtoa_r+0x7ca>
 800a606:	2001      	movs	r0, #1
 800a608:	e76f      	b.n	800a4ea <_dtoa_r+0x7da>
 800a60a:	f04f 0800 	mov.w	r8, #0
 800a60e:	e7f6      	b.n	800a5fe <_dtoa_r+0x8ee>
 800a610:	4698      	mov	r8, r3
 800a612:	e7f4      	b.n	800a5fe <_dtoa_r+0x8ee>
 800a614:	f43f af7d 	beq.w	800a512 <_dtoa_r+0x802>
 800a618:	4618      	mov	r0, r3
 800a61a:	301c      	adds	r0, #28
 800a61c:	e772      	b.n	800a504 <_dtoa_r+0x7f4>
 800a61e:	9b03      	ldr	r3, [sp, #12]
 800a620:	2b00      	cmp	r3, #0
 800a622:	dc37      	bgt.n	800a694 <_dtoa_r+0x984>
 800a624:	9b06      	ldr	r3, [sp, #24]
 800a626:	2b02      	cmp	r3, #2
 800a628:	dd34      	ble.n	800a694 <_dtoa_r+0x984>
 800a62a:	9b03      	ldr	r3, [sp, #12]
 800a62c:	9302      	str	r3, [sp, #8]
 800a62e:	9b02      	ldr	r3, [sp, #8]
 800a630:	b96b      	cbnz	r3, 800a64e <_dtoa_r+0x93e>
 800a632:	4631      	mov	r1, r6
 800a634:	2205      	movs	r2, #5
 800a636:	4620      	mov	r0, r4
 800a638:	f000 f9d8 	bl	800a9ec <__multadd>
 800a63c:	4601      	mov	r1, r0
 800a63e:	4606      	mov	r6, r0
 800a640:	ee18 0a10 	vmov	r0, s16
 800a644:	f000 fbf2 	bl	800ae2c <__mcmp>
 800a648:	2800      	cmp	r0, #0
 800a64a:	f73f adbb 	bgt.w	800a1c4 <_dtoa_r+0x4b4>
 800a64e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a650:	9d01      	ldr	r5, [sp, #4]
 800a652:	43db      	mvns	r3, r3
 800a654:	9300      	str	r3, [sp, #0]
 800a656:	f04f 0800 	mov.w	r8, #0
 800a65a:	4631      	mov	r1, r6
 800a65c:	4620      	mov	r0, r4
 800a65e:	f000 f9a3 	bl	800a9a8 <_Bfree>
 800a662:	2f00      	cmp	r7, #0
 800a664:	f43f aea4 	beq.w	800a3b0 <_dtoa_r+0x6a0>
 800a668:	f1b8 0f00 	cmp.w	r8, #0
 800a66c:	d005      	beq.n	800a67a <_dtoa_r+0x96a>
 800a66e:	45b8      	cmp	r8, r7
 800a670:	d003      	beq.n	800a67a <_dtoa_r+0x96a>
 800a672:	4641      	mov	r1, r8
 800a674:	4620      	mov	r0, r4
 800a676:	f000 f997 	bl	800a9a8 <_Bfree>
 800a67a:	4639      	mov	r1, r7
 800a67c:	4620      	mov	r0, r4
 800a67e:	f000 f993 	bl	800a9a8 <_Bfree>
 800a682:	e695      	b.n	800a3b0 <_dtoa_r+0x6a0>
 800a684:	2600      	movs	r6, #0
 800a686:	4637      	mov	r7, r6
 800a688:	e7e1      	b.n	800a64e <_dtoa_r+0x93e>
 800a68a:	9700      	str	r7, [sp, #0]
 800a68c:	4637      	mov	r7, r6
 800a68e:	e599      	b.n	800a1c4 <_dtoa_r+0x4b4>
 800a690:	40240000 	.word	0x40240000
 800a694:	9b08      	ldr	r3, [sp, #32]
 800a696:	2b00      	cmp	r3, #0
 800a698:	f000 80ca 	beq.w	800a830 <_dtoa_r+0xb20>
 800a69c:	9b03      	ldr	r3, [sp, #12]
 800a69e:	9302      	str	r3, [sp, #8]
 800a6a0:	2d00      	cmp	r5, #0
 800a6a2:	dd05      	ble.n	800a6b0 <_dtoa_r+0x9a0>
 800a6a4:	4639      	mov	r1, r7
 800a6a6:	462a      	mov	r2, r5
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	f000 fb4f 	bl	800ad4c <__lshift>
 800a6ae:	4607      	mov	r7, r0
 800a6b0:	f1b8 0f00 	cmp.w	r8, #0
 800a6b4:	d05b      	beq.n	800a76e <_dtoa_r+0xa5e>
 800a6b6:	6879      	ldr	r1, [r7, #4]
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	f000 f935 	bl	800a928 <_Balloc>
 800a6be:	4605      	mov	r5, r0
 800a6c0:	b928      	cbnz	r0, 800a6ce <_dtoa_r+0x9be>
 800a6c2:	4b87      	ldr	r3, [pc, #540]	; (800a8e0 <_dtoa_r+0xbd0>)
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a6ca:	f7ff bb3b 	b.w	8009d44 <_dtoa_r+0x34>
 800a6ce:	693a      	ldr	r2, [r7, #16]
 800a6d0:	3202      	adds	r2, #2
 800a6d2:	0092      	lsls	r2, r2, #2
 800a6d4:	f107 010c 	add.w	r1, r7, #12
 800a6d8:	300c      	adds	r0, #12
 800a6da:	f000 f90b 	bl	800a8f4 <memcpy>
 800a6de:	2201      	movs	r2, #1
 800a6e0:	4629      	mov	r1, r5
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	f000 fb32 	bl	800ad4c <__lshift>
 800a6e8:	9b01      	ldr	r3, [sp, #4]
 800a6ea:	f103 0901 	add.w	r9, r3, #1
 800a6ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	9305      	str	r3, [sp, #20]
 800a6f6:	f00a 0301 	and.w	r3, sl, #1
 800a6fa:	46b8      	mov	r8, r7
 800a6fc:	9304      	str	r3, [sp, #16]
 800a6fe:	4607      	mov	r7, r0
 800a700:	4631      	mov	r1, r6
 800a702:	ee18 0a10 	vmov	r0, s16
 800a706:	f7ff fa76 	bl	8009bf6 <quorem>
 800a70a:	4641      	mov	r1, r8
 800a70c:	9002      	str	r0, [sp, #8]
 800a70e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a712:	ee18 0a10 	vmov	r0, s16
 800a716:	f000 fb89 	bl	800ae2c <__mcmp>
 800a71a:	463a      	mov	r2, r7
 800a71c:	9003      	str	r0, [sp, #12]
 800a71e:	4631      	mov	r1, r6
 800a720:	4620      	mov	r0, r4
 800a722:	f000 fb9f 	bl	800ae64 <__mdiff>
 800a726:	68c2      	ldr	r2, [r0, #12]
 800a728:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800a72c:	4605      	mov	r5, r0
 800a72e:	bb02      	cbnz	r2, 800a772 <_dtoa_r+0xa62>
 800a730:	4601      	mov	r1, r0
 800a732:	ee18 0a10 	vmov	r0, s16
 800a736:	f000 fb79 	bl	800ae2c <__mcmp>
 800a73a:	4602      	mov	r2, r0
 800a73c:	4629      	mov	r1, r5
 800a73e:	4620      	mov	r0, r4
 800a740:	9207      	str	r2, [sp, #28]
 800a742:	f000 f931 	bl	800a9a8 <_Bfree>
 800a746:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a74a:	ea43 0102 	orr.w	r1, r3, r2
 800a74e:	9b04      	ldr	r3, [sp, #16]
 800a750:	430b      	orrs	r3, r1
 800a752:	464d      	mov	r5, r9
 800a754:	d10f      	bne.n	800a776 <_dtoa_r+0xa66>
 800a756:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a75a:	d02a      	beq.n	800a7b2 <_dtoa_r+0xaa2>
 800a75c:	9b03      	ldr	r3, [sp, #12]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	dd02      	ble.n	800a768 <_dtoa_r+0xa58>
 800a762:	9b02      	ldr	r3, [sp, #8]
 800a764:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a768:	f88b a000 	strb.w	sl, [fp]
 800a76c:	e775      	b.n	800a65a <_dtoa_r+0x94a>
 800a76e:	4638      	mov	r0, r7
 800a770:	e7ba      	b.n	800a6e8 <_dtoa_r+0x9d8>
 800a772:	2201      	movs	r2, #1
 800a774:	e7e2      	b.n	800a73c <_dtoa_r+0xa2c>
 800a776:	9b03      	ldr	r3, [sp, #12]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	db04      	blt.n	800a786 <_dtoa_r+0xa76>
 800a77c:	9906      	ldr	r1, [sp, #24]
 800a77e:	430b      	orrs	r3, r1
 800a780:	9904      	ldr	r1, [sp, #16]
 800a782:	430b      	orrs	r3, r1
 800a784:	d122      	bne.n	800a7cc <_dtoa_r+0xabc>
 800a786:	2a00      	cmp	r2, #0
 800a788:	ddee      	ble.n	800a768 <_dtoa_r+0xa58>
 800a78a:	ee18 1a10 	vmov	r1, s16
 800a78e:	2201      	movs	r2, #1
 800a790:	4620      	mov	r0, r4
 800a792:	f000 fadb 	bl	800ad4c <__lshift>
 800a796:	4631      	mov	r1, r6
 800a798:	ee08 0a10 	vmov	s16, r0
 800a79c:	f000 fb46 	bl	800ae2c <__mcmp>
 800a7a0:	2800      	cmp	r0, #0
 800a7a2:	dc03      	bgt.n	800a7ac <_dtoa_r+0xa9c>
 800a7a4:	d1e0      	bne.n	800a768 <_dtoa_r+0xa58>
 800a7a6:	f01a 0f01 	tst.w	sl, #1
 800a7aa:	d0dd      	beq.n	800a768 <_dtoa_r+0xa58>
 800a7ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a7b0:	d1d7      	bne.n	800a762 <_dtoa_r+0xa52>
 800a7b2:	2339      	movs	r3, #57	; 0x39
 800a7b4:	f88b 3000 	strb.w	r3, [fp]
 800a7b8:	462b      	mov	r3, r5
 800a7ba:	461d      	mov	r5, r3
 800a7bc:	3b01      	subs	r3, #1
 800a7be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a7c2:	2a39      	cmp	r2, #57	; 0x39
 800a7c4:	d071      	beq.n	800a8aa <_dtoa_r+0xb9a>
 800a7c6:	3201      	adds	r2, #1
 800a7c8:	701a      	strb	r2, [r3, #0]
 800a7ca:	e746      	b.n	800a65a <_dtoa_r+0x94a>
 800a7cc:	2a00      	cmp	r2, #0
 800a7ce:	dd07      	ble.n	800a7e0 <_dtoa_r+0xad0>
 800a7d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a7d4:	d0ed      	beq.n	800a7b2 <_dtoa_r+0xaa2>
 800a7d6:	f10a 0301 	add.w	r3, sl, #1
 800a7da:	f88b 3000 	strb.w	r3, [fp]
 800a7de:	e73c      	b.n	800a65a <_dtoa_r+0x94a>
 800a7e0:	9b05      	ldr	r3, [sp, #20]
 800a7e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a7e6:	4599      	cmp	r9, r3
 800a7e8:	d047      	beq.n	800a87a <_dtoa_r+0xb6a>
 800a7ea:	ee18 1a10 	vmov	r1, s16
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	220a      	movs	r2, #10
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	f000 f8fa 	bl	800a9ec <__multadd>
 800a7f8:	45b8      	cmp	r8, r7
 800a7fa:	ee08 0a10 	vmov	s16, r0
 800a7fe:	f04f 0300 	mov.w	r3, #0
 800a802:	f04f 020a 	mov.w	r2, #10
 800a806:	4641      	mov	r1, r8
 800a808:	4620      	mov	r0, r4
 800a80a:	d106      	bne.n	800a81a <_dtoa_r+0xb0a>
 800a80c:	f000 f8ee 	bl	800a9ec <__multadd>
 800a810:	4680      	mov	r8, r0
 800a812:	4607      	mov	r7, r0
 800a814:	f109 0901 	add.w	r9, r9, #1
 800a818:	e772      	b.n	800a700 <_dtoa_r+0x9f0>
 800a81a:	f000 f8e7 	bl	800a9ec <__multadd>
 800a81e:	4639      	mov	r1, r7
 800a820:	4680      	mov	r8, r0
 800a822:	2300      	movs	r3, #0
 800a824:	220a      	movs	r2, #10
 800a826:	4620      	mov	r0, r4
 800a828:	f000 f8e0 	bl	800a9ec <__multadd>
 800a82c:	4607      	mov	r7, r0
 800a82e:	e7f1      	b.n	800a814 <_dtoa_r+0xb04>
 800a830:	9b03      	ldr	r3, [sp, #12]
 800a832:	9302      	str	r3, [sp, #8]
 800a834:	9d01      	ldr	r5, [sp, #4]
 800a836:	ee18 0a10 	vmov	r0, s16
 800a83a:	4631      	mov	r1, r6
 800a83c:	f7ff f9db 	bl	8009bf6 <quorem>
 800a840:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a844:	9b01      	ldr	r3, [sp, #4]
 800a846:	f805 ab01 	strb.w	sl, [r5], #1
 800a84a:	1aea      	subs	r2, r5, r3
 800a84c:	9b02      	ldr	r3, [sp, #8]
 800a84e:	4293      	cmp	r3, r2
 800a850:	dd09      	ble.n	800a866 <_dtoa_r+0xb56>
 800a852:	ee18 1a10 	vmov	r1, s16
 800a856:	2300      	movs	r3, #0
 800a858:	220a      	movs	r2, #10
 800a85a:	4620      	mov	r0, r4
 800a85c:	f000 f8c6 	bl	800a9ec <__multadd>
 800a860:	ee08 0a10 	vmov	s16, r0
 800a864:	e7e7      	b.n	800a836 <_dtoa_r+0xb26>
 800a866:	9b02      	ldr	r3, [sp, #8]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	bfc8      	it	gt
 800a86c:	461d      	movgt	r5, r3
 800a86e:	9b01      	ldr	r3, [sp, #4]
 800a870:	bfd8      	it	le
 800a872:	2501      	movle	r5, #1
 800a874:	441d      	add	r5, r3
 800a876:	f04f 0800 	mov.w	r8, #0
 800a87a:	ee18 1a10 	vmov	r1, s16
 800a87e:	2201      	movs	r2, #1
 800a880:	4620      	mov	r0, r4
 800a882:	f000 fa63 	bl	800ad4c <__lshift>
 800a886:	4631      	mov	r1, r6
 800a888:	ee08 0a10 	vmov	s16, r0
 800a88c:	f000 face 	bl	800ae2c <__mcmp>
 800a890:	2800      	cmp	r0, #0
 800a892:	dc91      	bgt.n	800a7b8 <_dtoa_r+0xaa8>
 800a894:	d102      	bne.n	800a89c <_dtoa_r+0xb8c>
 800a896:	f01a 0f01 	tst.w	sl, #1
 800a89a:	d18d      	bne.n	800a7b8 <_dtoa_r+0xaa8>
 800a89c:	462b      	mov	r3, r5
 800a89e:	461d      	mov	r5, r3
 800a8a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8a4:	2a30      	cmp	r2, #48	; 0x30
 800a8a6:	d0fa      	beq.n	800a89e <_dtoa_r+0xb8e>
 800a8a8:	e6d7      	b.n	800a65a <_dtoa_r+0x94a>
 800a8aa:	9a01      	ldr	r2, [sp, #4]
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d184      	bne.n	800a7ba <_dtoa_r+0xaaa>
 800a8b0:	9b00      	ldr	r3, [sp, #0]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	9300      	str	r3, [sp, #0]
 800a8b6:	2331      	movs	r3, #49	; 0x31
 800a8b8:	7013      	strb	r3, [r2, #0]
 800a8ba:	e6ce      	b.n	800a65a <_dtoa_r+0x94a>
 800a8bc:	4b09      	ldr	r3, [pc, #36]	; (800a8e4 <_dtoa_r+0xbd4>)
 800a8be:	f7ff ba95 	b.w	8009dec <_dtoa_r+0xdc>
 800a8c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	f47f aa6e 	bne.w	8009da6 <_dtoa_r+0x96>
 800a8ca:	4b07      	ldr	r3, [pc, #28]	; (800a8e8 <_dtoa_r+0xbd8>)
 800a8cc:	f7ff ba8e 	b.w	8009dec <_dtoa_r+0xdc>
 800a8d0:	9b02      	ldr	r3, [sp, #8]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	dcae      	bgt.n	800a834 <_dtoa_r+0xb24>
 800a8d6:	9b06      	ldr	r3, [sp, #24]
 800a8d8:	2b02      	cmp	r3, #2
 800a8da:	f73f aea8 	bgt.w	800a62e <_dtoa_r+0x91e>
 800a8de:	e7a9      	b.n	800a834 <_dtoa_r+0xb24>
 800a8e0:	0800c24b 	.word	0x0800c24b
 800a8e4:	0800c1a8 	.word	0x0800c1a8
 800a8e8:	0800c1cc 	.word	0x0800c1cc

0800a8ec <_localeconv_r>:
 800a8ec:	4800      	ldr	r0, [pc, #0]	; (800a8f0 <_localeconv_r+0x4>)
 800a8ee:	4770      	bx	lr
 800a8f0:	20002538 	.word	0x20002538

0800a8f4 <memcpy>:
 800a8f4:	440a      	add	r2, r1
 800a8f6:	4291      	cmp	r1, r2
 800a8f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a8fc:	d100      	bne.n	800a900 <memcpy+0xc>
 800a8fe:	4770      	bx	lr
 800a900:	b510      	push	{r4, lr}
 800a902:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a906:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a90a:	4291      	cmp	r1, r2
 800a90c:	d1f9      	bne.n	800a902 <memcpy+0xe>
 800a90e:	bd10      	pop	{r4, pc}

0800a910 <__malloc_lock>:
 800a910:	4801      	ldr	r0, [pc, #4]	; (800a918 <__malloc_lock+0x8>)
 800a912:	f000 bd30 	b.w	800b376 <__retarget_lock_acquire_recursive>
 800a916:	bf00      	nop
 800a918:	20002abc 	.word	0x20002abc

0800a91c <__malloc_unlock>:
 800a91c:	4801      	ldr	r0, [pc, #4]	; (800a924 <__malloc_unlock+0x8>)
 800a91e:	f000 bd2b 	b.w	800b378 <__retarget_lock_release_recursive>
 800a922:	bf00      	nop
 800a924:	20002abc 	.word	0x20002abc

0800a928 <_Balloc>:
 800a928:	b570      	push	{r4, r5, r6, lr}
 800a92a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a92c:	4604      	mov	r4, r0
 800a92e:	460d      	mov	r5, r1
 800a930:	b976      	cbnz	r6, 800a950 <_Balloc+0x28>
 800a932:	2010      	movs	r0, #16
 800a934:	f7fe fbba 	bl	80090ac <malloc>
 800a938:	4602      	mov	r2, r0
 800a93a:	6260      	str	r0, [r4, #36]	; 0x24
 800a93c:	b920      	cbnz	r0, 800a948 <_Balloc+0x20>
 800a93e:	4b18      	ldr	r3, [pc, #96]	; (800a9a0 <_Balloc+0x78>)
 800a940:	4818      	ldr	r0, [pc, #96]	; (800a9a4 <_Balloc+0x7c>)
 800a942:	2166      	movs	r1, #102	; 0x66
 800a944:	f000 fce6 	bl	800b314 <__assert_func>
 800a948:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a94c:	6006      	str	r6, [r0, #0]
 800a94e:	60c6      	str	r6, [r0, #12]
 800a950:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a952:	68f3      	ldr	r3, [r6, #12]
 800a954:	b183      	cbz	r3, 800a978 <_Balloc+0x50>
 800a956:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a958:	68db      	ldr	r3, [r3, #12]
 800a95a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a95e:	b9b8      	cbnz	r0, 800a990 <_Balloc+0x68>
 800a960:	2101      	movs	r1, #1
 800a962:	fa01 f605 	lsl.w	r6, r1, r5
 800a966:	1d72      	adds	r2, r6, #5
 800a968:	0092      	lsls	r2, r2, #2
 800a96a:	4620      	mov	r0, r4
 800a96c:	f000 fb60 	bl	800b030 <_calloc_r>
 800a970:	b160      	cbz	r0, 800a98c <_Balloc+0x64>
 800a972:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a976:	e00e      	b.n	800a996 <_Balloc+0x6e>
 800a978:	2221      	movs	r2, #33	; 0x21
 800a97a:	2104      	movs	r1, #4
 800a97c:	4620      	mov	r0, r4
 800a97e:	f000 fb57 	bl	800b030 <_calloc_r>
 800a982:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a984:	60f0      	str	r0, [r6, #12]
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d1e4      	bne.n	800a956 <_Balloc+0x2e>
 800a98c:	2000      	movs	r0, #0
 800a98e:	bd70      	pop	{r4, r5, r6, pc}
 800a990:	6802      	ldr	r2, [r0, #0]
 800a992:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a996:	2300      	movs	r3, #0
 800a998:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a99c:	e7f7      	b.n	800a98e <_Balloc+0x66>
 800a99e:	bf00      	nop
 800a9a0:	0800c1d9 	.word	0x0800c1d9
 800a9a4:	0800c25c 	.word	0x0800c25c

0800a9a8 <_Bfree>:
 800a9a8:	b570      	push	{r4, r5, r6, lr}
 800a9aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a9ac:	4605      	mov	r5, r0
 800a9ae:	460c      	mov	r4, r1
 800a9b0:	b976      	cbnz	r6, 800a9d0 <_Bfree+0x28>
 800a9b2:	2010      	movs	r0, #16
 800a9b4:	f7fe fb7a 	bl	80090ac <malloc>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	6268      	str	r0, [r5, #36]	; 0x24
 800a9bc:	b920      	cbnz	r0, 800a9c8 <_Bfree+0x20>
 800a9be:	4b09      	ldr	r3, [pc, #36]	; (800a9e4 <_Bfree+0x3c>)
 800a9c0:	4809      	ldr	r0, [pc, #36]	; (800a9e8 <_Bfree+0x40>)
 800a9c2:	218a      	movs	r1, #138	; 0x8a
 800a9c4:	f000 fca6 	bl	800b314 <__assert_func>
 800a9c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9cc:	6006      	str	r6, [r0, #0]
 800a9ce:	60c6      	str	r6, [r0, #12]
 800a9d0:	b13c      	cbz	r4, 800a9e2 <_Bfree+0x3a>
 800a9d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a9d4:	6862      	ldr	r2, [r4, #4]
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a9dc:	6021      	str	r1, [r4, #0]
 800a9de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a9e2:	bd70      	pop	{r4, r5, r6, pc}
 800a9e4:	0800c1d9 	.word	0x0800c1d9
 800a9e8:	0800c25c 	.word	0x0800c25c

0800a9ec <__multadd>:
 800a9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9f0:	690d      	ldr	r5, [r1, #16]
 800a9f2:	4607      	mov	r7, r0
 800a9f4:	460c      	mov	r4, r1
 800a9f6:	461e      	mov	r6, r3
 800a9f8:	f101 0c14 	add.w	ip, r1, #20
 800a9fc:	2000      	movs	r0, #0
 800a9fe:	f8dc 3000 	ldr.w	r3, [ip]
 800aa02:	b299      	uxth	r1, r3
 800aa04:	fb02 6101 	mla	r1, r2, r1, r6
 800aa08:	0c1e      	lsrs	r6, r3, #16
 800aa0a:	0c0b      	lsrs	r3, r1, #16
 800aa0c:	fb02 3306 	mla	r3, r2, r6, r3
 800aa10:	b289      	uxth	r1, r1
 800aa12:	3001      	adds	r0, #1
 800aa14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aa18:	4285      	cmp	r5, r0
 800aa1a:	f84c 1b04 	str.w	r1, [ip], #4
 800aa1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aa22:	dcec      	bgt.n	800a9fe <__multadd+0x12>
 800aa24:	b30e      	cbz	r6, 800aa6a <__multadd+0x7e>
 800aa26:	68a3      	ldr	r3, [r4, #8]
 800aa28:	42ab      	cmp	r3, r5
 800aa2a:	dc19      	bgt.n	800aa60 <__multadd+0x74>
 800aa2c:	6861      	ldr	r1, [r4, #4]
 800aa2e:	4638      	mov	r0, r7
 800aa30:	3101      	adds	r1, #1
 800aa32:	f7ff ff79 	bl	800a928 <_Balloc>
 800aa36:	4680      	mov	r8, r0
 800aa38:	b928      	cbnz	r0, 800aa46 <__multadd+0x5a>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	4b0c      	ldr	r3, [pc, #48]	; (800aa70 <__multadd+0x84>)
 800aa3e:	480d      	ldr	r0, [pc, #52]	; (800aa74 <__multadd+0x88>)
 800aa40:	21b5      	movs	r1, #181	; 0xb5
 800aa42:	f000 fc67 	bl	800b314 <__assert_func>
 800aa46:	6922      	ldr	r2, [r4, #16]
 800aa48:	3202      	adds	r2, #2
 800aa4a:	f104 010c 	add.w	r1, r4, #12
 800aa4e:	0092      	lsls	r2, r2, #2
 800aa50:	300c      	adds	r0, #12
 800aa52:	f7ff ff4f 	bl	800a8f4 <memcpy>
 800aa56:	4621      	mov	r1, r4
 800aa58:	4638      	mov	r0, r7
 800aa5a:	f7ff ffa5 	bl	800a9a8 <_Bfree>
 800aa5e:	4644      	mov	r4, r8
 800aa60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa64:	3501      	adds	r5, #1
 800aa66:	615e      	str	r6, [r3, #20]
 800aa68:	6125      	str	r5, [r4, #16]
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa70:	0800c24b 	.word	0x0800c24b
 800aa74:	0800c25c 	.word	0x0800c25c

0800aa78 <__hi0bits>:
 800aa78:	0c03      	lsrs	r3, r0, #16
 800aa7a:	041b      	lsls	r3, r3, #16
 800aa7c:	b9d3      	cbnz	r3, 800aab4 <__hi0bits+0x3c>
 800aa7e:	0400      	lsls	r0, r0, #16
 800aa80:	2310      	movs	r3, #16
 800aa82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aa86:	bf04      	itt	eq
 800aa88:	0200      	lsleq	r0, r0, #8
 800aa8a:	3308      	addeq	r3, #8
 800aa8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aa90:	bf04      	itt	eq
 800aa92:	0100      	lsleq	r0, r0, #4
 800aa94:	3304      	addeq	r3, #4
 800aa96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aa9a:	bf04      	itt	eq
 800aa9c:	0080      	lsleq	r0, r0, #2
 800aa9e:	3302      	addeq	r3, #2
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	db05      	blt.n	800aab0 <__hi0bits+0x38>
 800aaa4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aaa8:	f103 0301 	add.w	r3, r3, #1
 800aaac:	bf08      	it	eq
 800aaae:	2320      	moveq	r3, #32
 800aab0:	4618      	mov	r0, r3
 800aab2:	4770      	bx	lr
 800aab4:	2300      	movs	r3, #0
 800aab6:	e7e4      	b.n	800aa82 <__hi0bits+0xa>

0800aab8 <__lo0bits>:
 800aab8:	6803      	ldr	r3, [r0, #0]
 800aaba:	f013 0207 	ands.w	r2, r3, #7
 800aabe:	4601      	mov	r1, r0
 800aac0:	d00b      	beq.n	800aada <__lo0bits+0x22>
 800aac2:	07da      	lsls	r2, r3, #31
 800aac4:	d423      	bmi.n	800ab0e <__lo0bits+0x56>
 800aac6:	0798      	lsls	r0, r3, #30
 800aac8:	bf49      	itett	mi
 800aaca:	085b      	lsrmi	r3, r3, #1
 800aacc:	089b      	lsrpl	r3, r3, #2
 800aace:	2001      	movmi	r0, #1
 800aad0:	600b      	strmi	r3, [r1, #0]
 800aad2:	bf5c      	itt	pl
 800aad4:	600b      	strpl	r3, [r1, #0]
 800aad6:	2002      	movpl	r0, #2
 800aad8:	4770      	bx	lr
 800aada:	b298      	uxth	r0, r3
 800aadc:	b9a8      	cbnz	r0, 800ab0a <__lo0bits+0x52>
 800aade:	0c1b      	lsrs	r3, r3, #16
 800aae0:	2010      	movs	r0, #16
 800aae2:	b2da      	uxtb	r2, r3
 800aae4:	b90a      	cbnz	r2, 800aaea <__lo0bits+0x32>
 800aae6:	3008      	adds	r0, #8
 800aae8:	0a1b      	lsrs	r3, r3, #8
 800aaea:	071a      	lsls	r2, r3, #28
 800aaec:	bf04      	itt	eq
 800aaee:	091b      	lsreq	r3, r3, #4
 800aaf0:	3004      	addeq	r0, #4
 800aaf2:	079a      	lsls	r2, r3, #30
 800aaf4:	bf04      	itt	eq
 800aaf6:	089b      	lsreq	r3, r3, #2
 800aaf8:	3002      	addeq	r0, #2
 800aafa:	07da      	lsls	r2, r3, #31
 800aafc:	d403      	bmi.n	800ab06 <__lo0bits+0x4e>
 800aafe:	085b      	lsrs	r3, r3, #1
 800ab00:	f100 0001 	add.w	r0, r0, #1
 800ab04:	d005      	beq.n	800ab12 <__lo0bits+0x5a>
 800ab06:	600b      	str	r3, [r1, #0]
 800ab08:	4770      	bx	lr
 800ab0a:	4610      	mov	r0, r2
 800ab0c:	e7e9      	b.n	800aae2 <__lo0bits+0x2a>
 800ab0e:	2000      	movs	r0, #0
 800ab10:	4770      	bx	lr
 800ab12:	2020      	movs	r0, #32
 800ab14:	4770      	bx	lr
	...

0800ab18 <__i2b>:
 800ab18:	b510      	push	{r4, lr}
 800ab1a:	460c      	mov	r4, r1
 800ab1c:	2101      	movs	r1, #1
 800ab1e:	f7ff ff03 	bl	800a928 <_Balloc>
 800ab22:	4602      	mov	r2, r0
 800ab24:	b928      	cbnz	r0, 800ab32 <__i2b+0x1a>
 800ab26:	4b05      	ldr	r3, [pc, #20]	; (800ab3c <__i2b+0x24>)
 800ab28:	4805      	ldr	r0, [pc, #20]	; (800ab40 <__i2b+0x28>)
 800ab2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ab2e:	f000 fbf1 	bl	800b314 <__assert_func>
 800ab32:	2301      	movs	r3, #1
 800ab34:	6144      	str	r4, [r0, #20]
 800ab36:	6103      	str	r3, [r0, #16]
 800ab38:	bd10      	pop	{r4, pc}
 800ab3a:	bf00      	nop
 800ab3c:	0800c24b 	.word	0x0800c24b
 800ab40:	0800c25c 	.word	0x0800c25c

0800ab44 <__multiply>:
 800ab44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab48:	4691      	mov	r9, r2
 800ab4a:	690a      	ldr	r2, [r1, #16]
 800ab4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	bfb8      	it	lt
 800ab54:	460b      	movlt	r3, r1
 800ab56:	460c      	mov	r4, r1
 800ab58:	bfbc      	itt	lt
 800ab5a:	464c      	movlt	r4, r9
 800ab5c:	4699      	movlt	r9, r3
 800ab5e:	6927      	ldr	r7, [r4, #16]
 800ab60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ab64:	68a3      	ldr	r3, [r4, #8]
 800ab66:	6861      	ldr	r1, [r4, #4]
 800ab68:	eb07 060a 	add.w	r6, r7, sl
 800ab6c:	42b3      	cmp	r3, r6
 800ab6e:	b085      	sub	sp, #20
 800ab70:	bfb8      	it	lt
 800ab72:	3101      	addlt	r1, #1
 800ab74:	f7ff fed8 	bl	800a928 <_Balloc>
 800ab78:	b930      	cbnz	r0, 800ab88 <__multiply+0x44>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	4b44      	ldr	r3, [pc, #272]	; (800ac90 <__multiply+0x14c>)
 800ab7e:	4845      	ldr	r0, [pc, #276]	; (800ac94 <__multiply+0x150>)
 800ab80:	f240 115d 	movw	r1, #349	; 0x15d
 800ab84:	f000 fbc6 	bl	800b314 <__assert_func>
 800ab88:	f100 0514 	add.w	r5, r0, #20
 800ab8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ab90:	462b      	mov	r3, r5
 800ab92:	2200      	movs	r2, #0
 800ab94:	4543      	cmp	r3, r8
 800ab96:	d321      	bcc.n	800abdc <__multiply+0x98>
 800ab98:	f104 0314 	add.w	r3, r4, #20
 800ab9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aba0:	f109 0314 	add.w	r3, r9, #20
 800aba4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aba8:	9202      	str	r2, [sp, #8]
 800abaa:	1b3a      	subs	r2, r7, r4
 800abac:	3a15      	subs	r2, #21
 800abae:	f022 0203 	bic.w	r2, r2, #3
 800abb2:	3204      	adds	r2, #4
 800abb4:	f104 0115 	add.w	r1, r4, #21
 800abb8:	428f      	cmp	r7, r1
 800abba:	bf38      	it	cc
 800abbc:	2204      	movcc	r2, #4
 800abbe:	9201      	str	r2, [sp, #4]
 800abc0:	9a02      	ldr	r2, [sp, #8]
 800abc2:	9303      	str	r3, [sp, #12]
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d80c      	bhi.n	800abe2 <__multiply+0x9e>
 800abc8:	2e00      	cmp	r6, #0
 800abca:	dd03      	ble.n	800abd4 <__multiply+0x90>
 800abcc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d05a      	beq.n	800ac8a <__multiply+0x146>
 800abd4:	6106      	str	r6, [r0, #16]
 800abd6:	b005      	add	sp, #20
 800abd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abdc:	f843 2b04 	str.w	r2, [r3], #4
 800abe0:	e7d8      	b.n	800ab94 <__multiply+0x50>
 800abe2:	f8b3 a000 	ldrh.w	sl, [r3]
 800abe6:	f1ba 0f00 	cmp.w	sl, #0
 800abea:	d024      	beq.n	800ac36 <__multiply+0xf2>
 800abec:	f104 0e14 	add.w	lr, r4, #20
 800abf0:	46a9      	mov	r9, r5
 800abf2:	f04f 0c00 	mov.w	ip, #0
 800abf6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800abfa:	f8d9 1000 	ldr.w	r1, [r9]
 800abfe:	fa1f fb82 	uxth.w	fp, r2
 800ac02:	b289      	uxth	r1, r1
 800ac04:	fb0a 110b 	mla	r1, sl, fp, r1
 800ac08:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ac0c:	f8d9 2000 	ldr.w	r2, [r9]
 800ac10:	4461      	add	r1, ip
 800ac12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ac16:	fb0a c20b 	mla	r2, sl, fp, ip
 800ac1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ac1e:	b289      	uxth	r1, r1
 800ac20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ac24:	4577      	cmp	r7, lr
 800ac26:	f849 1b04 	str.w	r1, [r9], #4
 800ac2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ac2e:	d8e2      	bhi.n	800abf6 <__multiply+0xb2>
 800ac30:	9a01      	ldr	r2, [sp, #4]
 800ac32:	f845 c002 	str.w	ip, [r5, r2]
 800ac36:	9a03      	ldr	r2, [sp, #12]
 800ac38:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ac3c:	3304      	adds	r3, #4
 800ac3e:	f1b9 0f00 	cmp.w	r9, #0
 800ac42:	d020      	beq.n	800ac86 <__multiply+0x142>
 800ac44:	6829      	ldr	r1, [r5, #0]
 800ac46:	f104 0c14 	add.w	ip, r4, #20
 800ac4a:	46ae      	mov	lr, r5
 800ac4c:	f04f 0a00 	mov.w	sl, #0
 800ac50:	f8bc b000 	ldrh.w	fp, [ip]
 800ac54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ac58:	fb09 220b 	mla	r2, r9, fp, r2
 800ac5c:	4492      	add	sl, r2
 800ac5e:	b289      	uxth	r1, r1
 800ac60:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ac64:	f84e 1b04 	str.w	r1, [lr], #4
 800ac68:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ac6c:	f8be 1000 	ldrh.w	r1, [lr]
 800ac70:	0c12      	lsrs	r2, r2, #16
 800ac72:	fb09 1102 	mla	r1, r9, r2, r1
 800ac76:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ac7a:	4567      	cmp	r7, ip
 800ac7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ac80:	d8e6      	bhi.n	800ac50 <__multiply+0x10c>
 800ac82:	9a01      	ldr	r2, [sp, #4]
 800ac84:	50a9      	str	r1, [r5, r2]
 800ac86:	3504      	adds	r5, #4
 800ac88:	e79a      	b.n	800abc0 <__multiply+0x7c>
 800ac8a:	3e01      	subs	r6, #1
 800ac8c:	e79c      	b.n	800abc8 <__multiply+0x84>
 800ac8e:	bf00      	nop
 800ac90:	0800c24b 	.word	0x0800c24b
 800ac94:	0800c25c 	.word	0x0800c25c

0800ac98 <__pow5mult>:
 800ac98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac9c:	4615      	mov	r5, r2
 800ac9e:	f012 0203 	ands.w	r2, r2, #3
 800aca2:	4606      	mov	r6, r0
 800aca4:	460f      	mov	r7, r1
 800aca6:	d007      	beq.n	800acb8 <__pow5mult+0x20>
 800aca8:	4c25      	ldr	r4, [pc, #148]	; (800ad40 <__pow5mult+0xa8>)
 800acaa:	3a01      	subs	r2, #1
 800acac:	2300      	movs	r3, #0
 800acae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800acb2:	f7ff fe9b 	bl	800a9ec <__multadd>
 800acb6:	4607      	mov	r7, r0
 800acb8:	10ad      	asrs	r5, r5, #2
 800acba:	d03d      	beq.n	800ad38 <__pow5mult+0xa0>
 800acbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800acbe:	b97c      	cbnz	r4, 800ace0 <__pow5mult+0x48>
 800acc0:	2010      	movs	r0, #16
 800acc2:	f7fe f9f3 	bl	80090ac <malloc>
 800acc6:	4602      	mov	r2, r0
 800acc8:	6270      	str	r0, [r6, #36]	; 0x24
 800acca:	b928      	cbnz	r0, 800acd8 <__pow5mult+0x40>
 800accc:	4b1d      	ldr	r3, [pc, #116]	; (800ad44 <__pow5mult+0xac>)
 800acce:	481e      	ldr	r0, [pc, #120]	; (800ad48 <__pow5mult+0xb0>)
 800acd0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800acd4:	f000 fb1e 	bl	800b314 <__assert_func>
 800acd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800acdc:	6004      	str	r4, [r0, #0]
 800acde:	60c4      	str	r4, [r0, #12]
 800ace0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ace4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ace8:	b94c      	cbnz	r4, 800acfe <__pow5mult+0x66>
 800acea:	f240 2171 	movw	r1, #625	; 0x271
 800acee:	4630      	mov	r0, r6
 800acf0:	f7ff ff12 	bl	800ab18 <__i2b>
 800acf4:	2300      	movs	r3, #0
 800acf6:	f8c8 0008 	str.w	r0, [r8, #8]
 800acfa:	4604      	mov	r4, r0
 800acfc:	6003      	str	r3, [r0, #0]
 800acfe:	f04f 0900 	mov.w	r9, #0
 800ad02:	07eb      	lsls	r3, r5, #31
 800ad04:	d50a      	bpl.n	800ad1c <__pow5mult+0x84>
 800ad06:	4639      	mov	r1, r7
 800ad08:	4622      	mov	r2, r4
 800ad0a:	4630      	mov	r0, r6
 800ad0c:	f7ff ff1a 	bl	800ab44 <__multiply>
 800ad10:	4639      	mov	r1, r7
 800ad12:	4680      	mov	r8, r0
 800ad14:	4630      	mov	r0, r6
 800ad16:	f7ff fe47 	bl	800a9a8 <_Bfree>
 800ad1a:	4647      	mov	r7, r8
 800ad1c:	106d      	asrs	r5, r5, #1
 800ad1e:	d00b      	beq.n	800ad38 <__pow5mult+0xa0>
 800ad20:	6820      	ldr	r0, [r4, #0]
 800ad22:	b938      	cbnz	r0, 800ad34 <__pow5mult+0x9c>
 800ad24:	4622      	mov	r2, r4
 800ad26:	4621      	mov	r1, r4
 800ad28:	4630      	mov	r0, r6
 800ad2a:	f7ff ff0b 	bl	800ab44 <__multiply>
 800ad2e:	6020      	str	r0, [r4, #0]
 800ad30:	f8c0 9000 	str.w	r9, [r0]
 800ad34:	4604      	mov	r4, r0
 800ad36:	e7e4      	b.n	800ad02 <__pow5mult+0x6a>
 800ad38:	4638      	mov	r0, r7
 800ad3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad3e:	bf00      	nop
 800ad40:	0800c3a8 	.word	0x0800c3a8
 800ad44:	0800c1d9 	.word	0x0800c1d9
 800ad48:	0800c25c 	.word	0x0800c25c

0800ad4c <__lshift>:
 800ad4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad50:	460c      	mov	r4, r1
 800ad52:	6849      	ldr	r1, [r1, #4]
 800ad54:	6923      	ldr	r3, [r4, #16]
 800ad56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad5a:	68a3      	ldr	r3, [r4, #8]
 800ad5c:	4607      	mov	r7, r0
 800ad5e:	4691      	mov	r9, r2
 800ad60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad64:	f108 0601 	add.w	r6, r8, #1
 800ad68:	42b3      	cmp	r3, r6
 800ad6a:	db0b      	blt.n	800ad84 <__lshift+0x38>
 800ad6c:	4638      	mov	r0, r7
 800ad6e:	f7ff fddb 	bl	800a928 <_Balloc>
 800ad72:	4605      	mov	r5, r0
 800ad74:	b948      	cbnz	r0, 800ad8a <__lshift+0x3e>
 800ad76:	4602      	mov	r2, r0
 800ad78:	4b2a      	ldr	r3, [pc, #168]	; (800ae24 <__lshift+0xd8>)
 800ad7a:	482b      	ldr	r0, [pc, #172]	; (800ae28 <__lshift+0xdc>)
 800ad7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ad80:	f000 fac8 	bl	800b314 <__assert_func>
 800ad84:	3101      	adds	r1, #1
 800ad86:	005b      	lsls	r3, r3, #1
 800ad88:	e7ee      	b.n	800ad68 <__lshift+0x1c>
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	f100 0114 	add.w	r1, r0, #20
 800ad90:	f100 0210 	add.w	r2, r0, #16
 800ad94:	4618      	mov	r0, r3
 800ad96:	4553      	cmp	r3, sl
 800ad98:	db37      	blt.n	800ae0a <__lshift+0xbe>
 800ad9a:	6920      	ldr	r0, [r4, #16]
 800ad9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ada0:	f104 0314 	add.w	r3, r4, #20
 800ada4:	f019 091f 	ands.w	r9, r9, #31
 800ada8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800adac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800adb0:	d02f      	beq.n	800ae12 <__lshift+0xc6>
 800adb2:	f1c9 0e20 	rsb	lr, r9, #32
 800adb6:	468a      	mov	sl, r1
 800adb8:	f04f 0c00 	mov.w	ip, #0
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	fa02 f209 	lsl.w	r2, r2, r9
 800adc2:	ea42 020c 	orr.w	r2, r2, ip
 800adc6:	f84a 2b04 	str.w	r2, [sl], #4
 800adca:	f853 2b04 	ldr.w	r2, [r3], #4
 800adce:	4298      	cmp	r0, r3
 800add0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800add4:	d8f2      	bhi.n	800adbc <__lshift+0x70>
 800add6:	1b03      	subs	r3, r0, r4
 800add8:	3b15      	subs	r3, #21
 800adda:	f023 0303 	bic.w	r3, r3, #3
 800adde:	3304      	adds	r3, #4
 800ade0:	f104 0215 	add.w	r2, r4, #21
 800ade4:	4290      	cmp	r0, r2
 800ade6:	bf38      	it	cc
 800ade8:	2304      	movcc	r3, #4
 800adea:	f841 c003 	str.w	ip, [r1, r3]
 800adee:	f1bc 0f00 	cmp.w	ip, #0
 800adf2:	d001      	beq.n	800adf8 <__lshift+0xac>
 800adf4:	f108 0602 	add.w	r6, r8, #2
 800adf8:	3e01      	subs	r6, #1
 800adfa:	4638      	mov	r0, r7
 800adfc:	612e      	str	r6, [r5, #16]
 800adfe:	4621      	mov	r1, r4
 800ae00:	f7ff fdd2 	bl	800a9a8 <_Bfree>
 800ae04:	4628      	mov	r0, r5
 800ae06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae0e:	3301      	adds	r3, #1
 800ae10:	e7c1      	b.n	800ad96 <__lshift+0x4a>
 800ae12:	3904      	subs	r1, #4
 800ae14:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae18:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae1c:	4298      	cmp	r0, r3
 800ae1e:	d8f9      	bhi.n	800ae14 <__lshift+0xc8>
 800ae20:	e7ea      	b.n	800adf8 <__lshift+0xac>
 800ae22:	bf00      	nop
 800ae24:	0800c24b 	.word	0x0800c24b
 800ae28:	0800c25c 	.word	0x0800c25c

0800ae2c <__mcmp>:
 800ae2c:	b530      	push	{r4, r5, lr}
 800ae2e:	6902      	ldr	r2, [r0, #16]
 800ae30:	690c      	ldr	r4, [r1, #16]
 800ae32:	1b12      	subs	r2, r2, r4
 800ae34:	d10e      	bne.n	800ae54 <__mcmp+0x28>
 800ae36:	f100 0314 	add.w	r3, r0, #20
 800ae3a:	3114      	adds	r1, #20
 800ae3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ae40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ae44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ae48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ae4c:	42a5      	cmp	r5, r4
 800ae4e:	d003      	beq.n	800ae58 <__mcmp+0x2c>
 800ae50:	d305      	bcc.n	800ae5e <__mcmp+0x32>
 800ae52:	2201      	movs	r2, #1
 800ae54:	4610      	mov	r0, r2
 800ae56:	bd30      	pop	{r4, r5, pc}
 800ae58:	4283      	cmp	r3, r0
 800ae5a:	d3f3      	bcc.n	800ae44 <__mcmp+0x18>
 800ae5c:	e7fa      	b.n	800ae54 <__mcmp+0x28>
 800ae5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae62:	e7f7      	b.n	800ae54 <__mcmp+0x28>

0800ae64 <__mdiff>:
 800ae64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae68:	460c      	mov	r4, r1
 800ae6a:	4606      	mov	r6, r0
 800ae6c:	4611      	mov	r1, r2
 800ae6e:	4620      	mov	r0, r4
 800ae70:	4690      	mov	r8, r2
 800ae72:	f7ff ffdb 	bl	800ae2c <__mcmp>
 800ae76:	1e05      	subs	r5, r0, #0
 800ae78:	d110      	bne.n	800ae9c <__mdiff+0x38>
 800ae7a:	4629      	mov	r1, r5
 800ae7c:	4630      	mov	r0, r6
 800ae7e:	f7ff fd53 	bl	800a928 <_Balloc>
 800ae82:	b930      	cbnz	r0, 800ae92 <__mdiff+0x2e>
 800ae84:	4b3a      	ldr	r3, [pc, #232]	; (800af70 <__mdiff+0x10c>)
 800ae86:	4602      	mov	r2, r0
 800ae88:	f240 2132 	movw	r1, #562	; 0x232
 800ae8c:	4839      	ldr	r0, [pc, #228]	; (800af74 <__mdiff+0x110>)
 800ae8e:	f000 fa41 	bl	800b314 <__assert_func>
 800ae92:	2301      	movs	r3, #1
 800ae94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ae98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae9c:	bfa4      	itt	ge
 800ae9e:	4643      	movge	r3, r8
 800aea0:	46a0      	movge	r8, r4
 800aea2:	4630      	mov	r0, r6
 800aea4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aea8:	bfa6      	itte	ge
 800aeaa:	461c      	movge	r4, r3
 800aeac:	2500      	movge	r5, #0
 800aeae:	2501      	movlt	r5, #1
 800aeb0:	f7ff fd3a 	bl	800a928 <_Balloc>
 800aeb4:	b920      	cbnz	r0, 800aec0 <__mdiff+0x5c>
 800aeb6:	4b2e      	ldr	r3, [pc, #184]	; (800af70 <__mdiff+0x10c>)
 800aeb8:	4602      	mov	r2, r0
 800aeba:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aebe:	e7e5      	b.n	800ae8c <__mdiff+0x28>
 800aec0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aec4:	6926      	ldr	r6, [r4, #16]
 800aec6:	60c5      	str	r5, [r0, #12]
 800aec8:	f104 0914 	add.w	r9, r4, #20
 800aecc:	f108 0514 	add.w	r5, r8, #20
 800aed0:	f100 0e14 	add.w	lr, r0, #20
 800aed4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800aed8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aedc:	f108 0210 	add.w	r2, r8, #16
 800aee0:	46f2      	mov	sl, lr
 800aee2:	2100      	movs	r1, #0
 800aee4:	f859 3b04 	ldr.w	r3, [r9], #4
 800aee8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aeec:	fa1f f883 	uxth.w	r8, r3
 800aef0:	fa11 f18b 	uxtah	r1, r1, fp
 800aef4:	0c1b      	lsrs	r3, r3, #16
 800aef6:	eba1 0808 	sub.w	r8, r1, r8
 800aefa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aefe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800af02:	fa1f f888 	uxth.w	r8, r8
 800af06:	1419      	asrs	r1, r3, #16
 800af08:	454e      	cmp	r6, r9
 800af0a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800af0e:	f84a 3b04 	str.w	r3, [sl], #4
 800af12:	d8e7      	bhi.n	800aee4 <__mdiff+0x80>
 800af14:	1b33      	subs	r3, r6, r4
 800af16:	3b15      	subs	r3, #21
 800af18:	f023 0303 	bic.w	r3, r3, #3
 800af1c:	3304      	adds	r3, #4
 800af1e:	3415      	adds	r4, #21
 800af20:	42a6      	cmp	r6, r4
 800af22:	bf38      	it	cc
 800af24:	2304      	movcc	r3, #4
 800af26:	441d      	add	r5, r3
 800af28:	4473      	add	r3, lr
 800af2a:	469e      	mov	lr, r3
 800af2c:	462e      	mov	r6, r5
 800af2e:	4566      	cmp	r6, ip
 800af30:	d30e      	bcc.n	800af50 <__mdiff+0xec>
 800af32:	f10c 0203 	add.w	r2, ip, #3
 800af36:	1b52      	subs	r2, r2, r5
 800af38:	f022 0203 	bic.w	r2, r2, #3
 800af3c:	3d03      	subs	r5, #3
 800af3e:	45ac      	cmp	ip, r5
 800af40:	bf38      	it	cc
 800af42:	2200      	movcc	r2, #0
 800af44:	441a      	add	r2, r3
 800af46:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800af4a:	b17b      	cbz	r3, 800af6c <__mdiff+0x108>
 800af4c:	6107      	str	r7, [r0, #16]
 800af4e:	e7a3      	b.n	800ae98 <__mdiff+0x34>
 800af50:	f856 8b04 	ldr.w	r8, [r6], #4
 800af54:	fa11 f288 	uxtah	r2, r1, r8
 800af58:	1414      	asrs	r4, r2, #16
 800af5a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800af5e:	b292      	uxth	r2, r2
 800af60:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800af64:	f84e 2b04 	str.w	r2, [lr], #4
 800af68:	1421      	asrs	r1, r4, #16
 800af6a:	e7e0      	b.n	800af2e <__mdiff+0xca>
 800af6c:	3f01      	subs	r7, #1
 800af6e:	e7ea      	b.n	800af46 <__mdiff+0xe2>
 800af70:	0800c24b 	.word	0x0800c24b
 800af74:	0800c25c 	.word	0x0800c25c

0800af78 <__d2b>:
 800af78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af7c:	4689      	mov	r9, r1
 800af7e:	2101      	movs	r1, #1
 800af80:	ec57 6b10 	vmov	r6, r7, d0
 800af84:	4690      	mov	r8, r2
 800af86:	f7ff fccf 	bl	800a928 <_Balloc>
 800af8a:	4604      	mov	r4, r0
 800af8c:	b930      	cbnz	r0, 800af9c <__d2b+0x24>
 800af8e:	4602      	mov	r2, r0
 800af90:	4b25      	ldr	r3, [pc, #148]	; (800b028 <__d2b+0xb0>)
 800af92:	4826      	ldr	r0, [pc, #152]	; (800b02c <__d2b+0xb4>)
 800af94:	f240 310a 	movw	r1, #778	; 0x30a
 800af98:	f000 f9bc 	bl	800b314 <__assert_func>
 800af9c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800afa0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800afa4:	bb35      	cbnz	r5, 800aff4 <__d2b+0x7c>
 800afa6:	2e00      	cmp	r6, #0
 800afa8:	9301      	str	r3, [sp, #4]
 800afaa:	d028      	beq.n	800affe <__d2b+0x86>
 800afac:	4668      	mov	r0, sp
 800afae:	9600      	str	r6, [sp, #0]
 800afb0:	f7ff fd82 	bl	800aab8 <__lo0bits>
 800afb4:	9900      	ldr	r1, [sp, #0]
 800afb6:	b300      	cbz	r0, 800affa <__d2b+0x82>
 800afb8:	9a01      	ldr	r2, [sp, #4]
 800afba:	f1c0 0320 	rsb	r3, r0, #32
 800afbe:	fa02 f303 	lsl.w	r3, r2, r3
 800afc2:	430b      	orrs	r3, r1
 800afc4:	40c2      	lsrs	r2, r0
 800afc6:	6163      	str	r3, [r4, #20]
 800afc8:	9201      	str	r2, [sp, #4]
 800afca:	9b01      	ldr	r3, [sp, #4]
 800afcc:	61a3      	str	r3, [r4, #24]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	bf14      	ite	ne
 800afd2:	2202      	movne	r2, #2
 800afd4:	2201      	moveq	r2, #1
 800afd6:	6122      	str	r2, [r4, #16]
 800afd8:	b1d5      	cbz	r5, 800b010 <__d2b+0x98>
 800afda:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800afde:	4405      	add	r5, r0
 800afe0:	f8c9 5000 	str.w	r5, [r9]
 800afe4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800afe8:	f8c8 0000 	str.w	r0, [r8]
 800afec:	4620      	mov	r0, r4
 800afee:	b003      	add	sp, #12
 800aff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aff4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aff8:	e7d5      	b.n	800afa6 <__d2b+0x2e>
 800affa:	6161      	str	r1, [r4, #20]
 800affc:	e7e5      	b.n	800afca <__d2b+0x52>
 800affe:	a801      	add	r0, sp, #4
 800b000:	f7ff fd5a 	bl	800aab8 <__lo0bits>
 800b004:	9b01      	ldr	r3, [sp, #4]
 800b006:	6163      	str	r3, [r4, #20]
 800b008:	2201      	movs	r2, #1
 800b00a:	6122      	str	r2, [r4, #16]
 800b00c:	3020      	adds	r0, #32
 800b00e:	e7e3      	b.n	800afd8 <__d2b+0x60>
 800b010:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b014:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b018:	f8c9 0000 	str.w	r0, [r9]
 800b01c:	6918      	ldr	r0, [r3, #16]
 800b01e:	f7ff fd2b 	bl	800aa78 <__hi0bits>
 800b022:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b026:	e7df      	b.n	800afe8 <__d2b+0x70>
 800b028:	0800c24b 	.word	0x0800c24b
 800b02c:	0800c25c 	.word	0x0800c25c

0800b030 <_calloc_r>:
 800b030:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b032:	fba1 2402 	umull	r2, r4, r1, r2
 800b036:	b94c      	cbnz	r4, 800b04c <_calloc_r+0x1c>
 800b038:	4611      	mov	r1, r2
 800b03a:	9201      	str	r2, [sp, #4]
 800b03c:	f7fe f8ba 	bl	80091b4 <_malloc_r>
 800b040:	9a01      	ldr	r2, [sp, #4]
 800b042:	4605      	mov	r5, r0
 800b044:	b930      	cbnz	r0, 800b054 <_calloc_r+0x24>
 800b046:	4628      	mov	r0, r5
 800b048:	b003      	add	sp, #12
 800b04a:	bd30      	pop	{r4, r5, pc}
 800b04c:	220c      	movs	r2, #12
 800b04e:	6002      	str	r2, [r0, #0]
 800b050:	2500      	movs	r5, #0
 800b052:	e7f8      	b.n	800b046 <_calloc_r+0x16>
 800b054:	4621      	mov	r1, r4
 800b056:	f7fe f839 	bl	80090cc <memset>
 800b05a:	e7f4      	b.n	800b046 <_calloc_r+0x16>

0800b05c <__ssputs_r>:
 800b05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b060:	688e      	ldr	r6, [r1, #8]
 800b062:	429e      	cmp	r6, r3
 800b064:	4682      	mov	sl, r0
 800b066:	460c      	mov	r4, r1
 800b068:	4690      	mov	r8, r2
 800b06a:	461f      	mov	r7, r3
 800b06c:	d838      	bhi.n	800b0e0 <__ssputs_r+0x84>
 800b06e:	898a      	ldrh	r2, [r1, #12]
 800b070:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b074:	d032      	beq.n	800b0dc <__ssputs_r+0x80>
 800b076:	6825      	ldr	r5, [r4, #0]
 800b078:	6909      	ldr	r1, [r1, #16]
 800b07a:	eba5 0901 	sub.w	r9, r5, r1
 800b07e:	6965      	ldr	r5, [r4, #20]
 800b080:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b084:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b088:	3301      	adds	r3, #1
 800b08a:	444b      	add	r3, r9
 800b08c:	106d      	asrs	r5, r5, #1
 800b08e:	429d      	cmp	r5, r3
 800b090:	bf38      	it	cc
 800b092:	461d      	movcc	r5, r3
 800b094:	0553      	lsls	r3, r2, #21
 800b096:	d531      	bpl.n	800b0fc <__ssputs_r+0xa0>
 800b098:	4629      	mov	r1, r5
 800b09a:	f7fe f88b 	bl	80091b4 <_malloc_r>
 800b09e:	4606      	mov	r6, r0
 800b0a0:	b950      	cbnz	r0, 800b0b8 <__ssputs_r+0x5c>
 800b0a2:	230c      	movs	r3, #12
 800b0a4:	f8ca 3000 	str.w	r3, [sl]
 800b0a8:	89a3      	ldrh	r3, [r4, #12]
 800b0aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0ae:	81a3      	strh	r3, [r4, #12]
 800b0b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0b8:	6921      	ldr	r1, [r4, #16]
 800b0ba:	464a      	mov	r2, r9
 800b0bc:	f7ff fc1a 	bl	800a8f4 <memcpy>
 800b0c0:	89a3      	ldrh	r3, [r4, #12]
 800b0c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b0c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0ca:	81a3      	strh	r3, [r4, #12]
 800b0cc:	6126      	str	r6, [r4, #16]
 800b0ce:	6165      	str	r5, [r4, #20]
 800b0d0:	444e      	add	r6, r9
 800b0d2:	eba5 0509 	sub.w	r5, r5, r9
 800b0d6:	6026      	str	r6, [r4, #0]
 800b0d8:	60a5      	str	r5, [r4, #8]
 800b0da:	463e      	mov	r6, r7
 800b0dc:	42be      	cmp	r6, r7
 800b0de:	d900      	bls.n	800b0e2 <__ssputs_r+0x86>
 800b0e0:	463e      	mov	r6, r7
 800b0e2:	6820      	ldr	r0, [r4, #0]
 800b0e4:	4632      	mov	r2, r6
 800b0e6:	4641      	mov	r1, r8
 800b0e8:	f000 f959 	bl	800b39e <memmove>
 800b0ec:	68a3      	ldr	r3, [r4, #8]
 800b0ee:	1b9b      	subs	r3, r3, r6
 800b0f0:	60a3      	str	r3, [r4, #8]
 800b0f2:	6823      	ldr	r3, [r4, #0]
 800b0f4:	4433      	add	r3, r6
 800b0f6:	6023      	str	r3, [r4, #0]
 800b0f8:	2000      	movs	r0, #0
 800b0fa:	e7db      	b.n	800b0b4 <__ssputs_r+0x58>
 800b0fc:	462a      	mov	r2, r5
 800b0fe:	f000 f968 	bl	800b3d2 <_realloc_r>
 800b102:	4606      	mov	r6, r0
 800b104:	2800      	cmp	r0, #0
 800b106:	d1e1      	bne.n	800b0cc <__ssputs_r+0x70>
 800b108:	6921      	ldr	r1, [r4, #16]
 800b10a:	4650      	mov	r0, sl
 800b10c:	f7fd ffe6 	bl	80090dc <_free_r>
 800b110:	e7c7      	b.n	800b0a2 <__ssputs_r+0x46>
	...

0800b114 <_svfiprintf_r>:
 800b114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b118:	4698      	mov	r8, r3
 800b11a:	898b      	ldrh	r3, [r1, #12]
 800b11c:	061b      	lsls	r3, r3, #24
 800b11e:	b09d      	sub	sp, #116	; 0x74
 800b120:	4607      	mov	r7, r0
 800b122:	460d      	mov	r5, r1
 800b124:	4614      	mov	r4, r2
 800b126:	d50e      	bpl.n	800b146 <_svfiprintf_r+0x32>
 800b128:	690b      	ldr	r3, [r1, #16]
 800b12a:	b963      	cbnz	r3, 800b146 <_svfiprintf_r+0x32>
 800b12c:	2140      	movs	r1, #64	; 0x40
 800b12e:	f7fe f841 	bl	80091b4 <_malloc_r>
 800b132:	6028      	str	r0, [r5, #0]
 800b134:	6128      	str	r0, [r5, #16]
 800b136:	b920      	cbnz	r0, 800b142 <_svfiprintf_r+0x2e>
 800b138:	230c      	movs	r3, #12
 800b13a:	603b      	str	r3, [r7, #0]
 800b13c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b140:	e0d1      	b.n	800b2e6 <_svfiprintf_r+0x1d2>
 800b142:	2340      	movs	r3, #64	; 0x40
 800b144:	616b      	str	r3, [r5, #20]
 800b146:	2300      	movs	r3, #0
 800b148:	9309      	str	r3, [sp, #36]	; 0x24
 800b14a:	2320      	movs	r3, #32
 800b14c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b150:	f8cd 800c 	str.w	r8, [sp, #12]
 800b154:	2330      	movs	r3, #48	; 0x30
 800b156:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b300 <_svfiprintf_r+0x1ec>
 800b15a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b15e:	f04f 0901 	mov.w	r9, #1
 800b162:	4623      	mov	r3, r4
 800b164:	469a      	mov	sl, r3
 800b166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b16a:	b10a      	cbz	r2, 800b170 <_svfiprintf_r+0x5c>
 800b16c:	2a25      	cmp	r2, #37	; 0x25
 800b16e:	d1f9      	bne.n	800b164 <_svfiprintf_r+0x50>
 800b170:	ebba 0b04 	subs.w	fp, sl, r4
 800b174:	d00b      	beq.n	800b18e <_svfiprintf_r+0x7a>
 800b176:	465b      	mov	r3, fp
 800b178:	4622      	mov	r2, r4
 800b17a:	4629      	mov	r1, r5
 800b17c:	4638      	mov	r0, r7
 800b17e:	f7ff ff6d 	bl	800b05c <__ssputs_r>
 800b182:	3001      	adds	r0, #1
 800b184:	f000 80aa 	beq.w	800b2dc <_svfiprintf_r+0x1c8>
 800b188:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b18a:	445a      	add	r2, fp
 800b18c:	9209      	str	r2, [sp, #36]	; 0x24
 800b18e:	f89a 3000 	ldrb.w	r3, [sl]
 800b192:	2b00      	cmp	r3, #0
 800b194:	f000 80a2 	beq.w	800b2dc <_svfiprintf_r+0x1c8>
 800b198:	2300      	movs	r3, #0
 800b19a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b19e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1a2:	f10a 0a01 	add.w	sl, sl, #1
 800b1a6:	9304      	str	r3, [sp, #16]
 800b1a8:	9307      	str	r3, [sp, #28]
 800b1aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1ae:	931a      	str	r3, [sp, #104]	; 0x68
 800b1b0:	4654      	mov	r4, sl
 800b1b2:	2205      	movs	r2, #5
 800b1b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1b8:	4851      	ldr	r0, [pc, #324]	; (800b300 <_svfiprintf_r+0x1ec>)
 800b1ba:	f7f5 f831 	bl	8000220 <memchr>
 800b1be:	9a04      	ldr	r2, [sp, #16]
 800b1c0:	b9d8      	cbnz	r0, 800b1fa <_svfiprintf_r+0xe6>
 800b1c2:	06d0      	lsls	r0, r2, #27
 800b1c4:	bf44      	itt	mi
 800b1c6:	2320      	movmi	r3, #32
 800b1c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1cc:	0711      	lsls	r1, r2, #28
 800b1ce:	bf44      	itt	mi
 800b1d0:	232b      	movmi	r3, #43	; 0x2b
 800b1d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1d6:	f89a 3000 	ldrb.w	r3, [sl]
 800b1da:	2b2a      	cmp	r3, #42	; 0x2a
 800b1dc:	d015      	beq.n	800b20a <_svfiprintf_r+0xf6>
 800b1de:	9a07      	ldr	r2, [sp, #28]
 800b1e0:	4654      	mov	r4, sl
 800b1e2:	2000      	movs	r0, #0
 800b1e4:	f04f 0c0a 	mov.w	ip, #10
 800b1e8:	4621      	mov	r1, r4
 800b1ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1ee:	3b30      	subs	r3, #48	; 0x30
 800b1f0:	2b09      	cmp	r3, #9
 800b1f2:	d94e      	bls.n	800b292 <_svfiprintf_r+0x17e>
 800b1f4:	b1b0      	cbz	r0, 800b224 <_svfiprintf_r+0x110>
 800b1f6:	9207      	str	r2, [sp, #28]
 800b1f8:	e014      	b.n	800b224 <_svfiprintf_r+0x110>
 800b1fa:	eba0 0308 	sub.w	r3, r0, r8
 800b1fe:	fa09 f303 	lsl.w	r3, r9, r3
 800b202:	4313      	orrs	r3, r2
 800b204:	9304      	str	r3, [sp, #16]
 800b206:	46a2      	mov	sl, r4
 800b208:	e7d2      	b.n	800b1b0 <_svfiprintf_r+0x9c>
 800b20a:	9b03      	ldr	r3, [sp, #12]
 800b20c:	1d19      	adds	r1, r3, #4
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	9103      	str	r1, [sp, #12]
 800b212:	2b00      	cmp	r3, #0
 800b214:	bfbb      	ittet	lt
 800b216:	425b      	neglt	r3, r3
 800b218:	f042 0202 	orrlt.w	r2, r2, #2
 800b21c:	9307      	strge	r3, [sp, #28]
 800b21e:	9307      	strlt	r3, [sp, #28]
 800b220:	bfb8      	it	lt
 800b222:	9204      	strlt	r2, [sp, #16]
 800b224:	7823      	ldrb	r3, [r4, #0]
 800b226:	2b2e      	cmp	r3, #46	; 0x2e
 800b228:	d10c      	bne.n	800b244 <_svfiprintf_r+0x130>
 800b22a:	7863      	ldrb	r3, [r4, #1]
 800b22c:	2b2a      	cmp	r3, #42	; 0x2a
 800b22e:	d135      	bne.n	800b29c <_svfiprintf_r+0x188>
 800b230:	9b03      	ldr	r3, [sp, #12]
 800b232:	1d1a      	adds	r2, r3, #4
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	9203      	str	r2, [sp, #12]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	bfb8      	it	lt
 800b23c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b240:	3402      	adds	r4, #2
 800b242:	9305      	str	r3, [sp, #20]
 800b244:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b310 <_svfiprintf_r+0x1fc>
 800b248:	7821      	ldrb	r1, [r4, #0]
 800b24a:	2203      	movs	r2, #3
 800b24c:	4650      	mov	r0, sl
 800b24e:	f7f4 ffe7 	bl	8000220 <memchr>
 800b252:	b140      	cbz	r0, 800b266 <_svfiprintf_r+0x152>
 800b254:	2340      	movs	r3, #64	; 0x40
 800b256:	eba0 000a 	sub.w	r0, r0, sl
 800b25a:	fa03 f000 	lsl.w	r0, r3, r0
 800b25e:	9b04      	ldr	r3, [sp, #16]
 800b260:	4303      	orrs	r3, r0
 800b262:	3401      	adds	r4, #1
 800b264:	9304      	str	r3, [sp, #16]
 800b266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b26a:	4826      	ldr	r0, [pc, #152]	; (800b304 <_svfiprintf_r+0x1f0>)
 800b26c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b270:	2206      	movs	r2, #6
 800b272:	f7f4 ffd5 	bl	8000220 <memchr>
 800b276:	2800      	cmp	r0, #0
 800b278:	d038      	beq.n	800b2ec <_svfiprintf_r+0x1d8>
 800b27a:	4b23      	ldr	r3, [pc, #140]	; (800b308 <_svfiprintf_r+0x1f4>)
 800b27c:	bb1b      	cbnz	r3, 800b2c6 <_svfiprintf_r+0x1b2>
 800b27e:	9b03      	ldr	r3, [sp, #12]
 800b280:	3307      	adds	r3, #7
 800b282:	f023 0307 	bic.w	r3, r3, #7
 800b286:	3308      	adds	r3, #8
 800b288:	9303      	str	r3, [sp, #12]
 800b28a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b28c:	4433      	add	r3, r6
 800b28e:	9309      	str	r3, [sp, #36]	; 0x24
 800b290:	e767      	b.n	800b162 <_svfiprintf_r+0x4e>
 800b292:	fb0c 3202 	mla	r2, ip, r2, r3
 800b296:	460c      	mov	r4, r1
 800b298:	2001      	movs	r0, #1
 800b29a:	e7a5      	b.n	800b1e8 <_svfiprintf_r+0xd4>
 800b29c:	2300      	movs	r3, #0
 800b29e:	3401      	adds	r4, #1
 800b2a0:	9305      	str	r3, [sp, #20]
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	f04f 0c0a 	mov.w	ip, #10
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2ae:	3a30      	subs	r2, #48	; 0x30
 800b2b0:	2a09      	cmp	r2, #9
 800b2b2:	d903      	bls.n	800b2bc <_svfiprintf_r+0x1a8>
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d0c5      	beq.n	800b244 <_svfiprintf_r+0x130>
 800b2b8:	9105      	str	r1, [sp, #20]
 800b2ba:	e7c3      	b.n	800b244 <_svfiprintf_r+0x130>
 800b2bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2c0:	4604      	mov	r4, r0
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	e7f0      	b.n	800b2a8 <_svfiprintf_r+0x194>
 800b2c6:	ab03      	add	r3, sp, #12
 800b2c8:	9300      	str	r3, [sp, #0]
 800b2ca:	462a      	mov	r2, r5
 800b2cc:	4b0f      	ldr	r3, [pc, #60]	; (800b30c <_svfiprintf_r+0x1f8>)
 800b2ce:	a904      	add	r1, sp, #16
 800b2d0:	4638      	mov	r0, r7
 800b2d2:	f7fe f883 	bl	80093dc <_printf_float>
 800b2d6:	1c42      	adds	r2, r0, #1
 800b2d8:	4606      	mov	r6, r0
 800b2da:	d1d6      	bne.n	800b28a <_svfiprintf_r+0x176>
 800b2dc:	89ab      	ldrh	r3, [r5, #12]
 800b2de:	065b      	lsls	r3, r3, #25
 800b2e0:	f53f af2c 	bmi.w	800b13c <_svfiprintf_r+0x28>
 800b2e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2e6:	b01d      	add	sp, #116	; 0x74
 800b2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ec:	ab03      	add	r3, sp, #12
 800b2ee:	9300      	str	r3, [sp, #0]
 800b2f0:	462a      	mov	r2, r5
 800b2f2:	4b06      	ldr	r3, [pc, #24]	; (800b30c <_svfiprintf_r+0x1f8>)
 800b2f4:	a904      	add	r1, sp, #16
 800b2f6:	4638      	mov	r0, r7
 800b2f8:	f7fe fb14 	bl	8009924 <_printf_i>
 800b2fc:	e7eb      	b.n	800b2d6 <_svfiprintf_r+0x1c2>
 800b2fe:	bf00      	nop
 800b300:	0800c3b4 	.word	0x0800c3b4
 800b304:	0800c3be 	.word	0x0800c3be
 800b308:	080093dd 	.word	0x080093dd
 800b30c:	0800b05d 	.word	0x0800b05d
 800b310:	0800c3ba 	.word	0x0800c3ba

0800b314 <__assert_func>:
 800b314:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b316:	4614      	mov	r4, r2
 800b318:	461a      	mov	r2, r3
 800b31a:	4b09      	ldr	r3, [pc, #36]	; (800b340 <__assert_func+0x2c>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4605      	mov	r5, r0
 800b320:	68d8      	ldr	r0, [r3, #12]
 800b322:	b14c      	cbz	r4, 800b338 <__assert_func+0x24>
 800b324:	4b07      	ldr	r3, [pc, #28]	; (800b344 <__assert_func+0x30>)
 800b326:	9100      	str	r1, [sp, #0]
 800b328:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b32c:	4906      	ldr	r1, [pc, #24]	; (800b348 <__assert_func+0x34>)
 800b32e:	462b      	mov	r3, r5
 800b330:	f000 f80e 	bl	800b350 <fiprintf>
 800b334:	f000 faa4 	bl	800b880 <abort>
 800b338:	4b04      	ldr	r3, [pc, #16]	; (800b34c <__assert_func+0x38>)
 800b33a:	461c      	mov	r4, r3
 800b33c:	e7f3      	b.n	800b326 <__assert_func+0x12>
 800b33e:	bf00      	nop
 800b340:	200023e4 	.word	0x200023e4
 800b344:	0800c3c5 	.word	0x0800c3c5
 800b348:	0800c3d2 	.word	0x0800c3d2
 800b34c:	0800c400 	.word	0x0800c400

0800b350 <fiprintf>:
 800b350:	b40e      	push	{r1, r2, r3}
 800b352:	b503      	push	{r0, r1, lr}
 800b354:	4601      	mov	r1, r0
 800b356:	ab03      	add	r3, sp, #12
 800b358:	4805      	ldr	r0, [pc, #20]	; (800b370 <fiprintf+0x20>)
 800b35a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b35e:	6800      	ldr	r0, [r0, #0]
 800b360:	9301      	str	r3, [sp, #4]
 800b362:	f000 f88f 	bl	800b484 <_vfiprintf_r>
 800b366:	b002      	add	sp, #8
 800b368:	f85d eb04 	ldr.w	lr, [sp], #4
 800b36c:	b003      	add	sp, #12
 800b36e:	4770      	bx	lr
 800b370:	200023e4 	.word	0x200023e4

0800b374 <__retarget_lock_init_recursive>:
 800b374:	4770      	bx	lr

0800b376 <__retarget_lock_acquire_recursive>:
 800b376:	4770      	bx	lr

0800b378 <__retarget_lock_release_recursive>:
 800b378:	4770      	bx	lr

0800b37a <__ascii_mbtowc>:
 800b37a:	b082      	sub	sp, #8
 800b37c:	b901      	cbnz	r1, 800b380 <__ascii_mbtowc+0x6>
 800b37e:	a901      	add	r1, sp, #4
 800b380:	b142      	cbz	r2, 800b394 <__ascii_mbtowc+0x1a>
 800b382:	b14b      	cbz	r3, 800b398 <__ascii_mbtowc+0x1e>
 800b384:	7813      	ldrb	r3, [r2, #0]
 800b386:	600b      	str	r3, [r1, #0]
 800b388:	7812      	ldrb	r2, [r2, #0]
 800b38a:	1e10      	subs	r0, r2, #0
 800b38c:	bf18      	it	ne
 800b38e:	2001      	movne	r0, #1
 800b390:	b002      	add	sp, #8
 800b392:	4770      	bx	lr
 800b394:	4610      	mov	r0, r2
 800b396:	e7fb      	b.n	800b390 <__ascii_mbtowc+0x16>
 800b398:	f06f 0001 	mvn.w	r0, #1
 800b39c:	e7f8      	b.n	800b390 <__ascii_mbtowc+0x16>

0800b39e <memmove>:
 800b39e:	4288      	cmp	r0, r1
 800b3a0:	b510      	push	{r4, lr}
 800b3a2:	eb01 0402 	add.w	r4, r1, r2
 800b3a6:	d902      	bls.n	800b3ae <memmove+0x10>
 800b3a8:	4284      	cmp	r4, r0
 800b3aa:	4623      	mov	r3, r4
 800b3ac:	d807      	bhi.n	800b3be <memmove+0x20>
 800b3ae:	1e43      	subs	r3, r0, #1
 800b3b0:	42a1      	cmp	r1, r4
 800b3b2:	d008      	beq.n	800b3c6 <memmove+0x28>
 800b3b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3bc:	e7f8      	b.n	800b3b0 <memmove+0x12>
 800b3be:	4402      	add	r2, r0
 800b3c0:	4601      	mov	r1, r0
 800b3c2:	428a      	cmp	r2, r1
 800b3c4:	d100      	bne.n	800b3c8 <memmove+0x2a>
 800b3c6:	bd10      	pop	{r4, pc}
 800b3c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3cc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b3d0:	e7f7      	b.n	800b3c2 <memmove+0x24>

0800b3d2 <_realloc_r>:
 800b3d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3d6:	4680      	mov	r8, r0
 800b3d8:	4614      	mov	r4, r2
 800b3da:	460e      	mov	r6, r1
 800b3dc:	b921      	cbnz	r1, 800b3e8 <_realloc_r+0x16>
 800b3de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3e2:	4611      	mov	r1, r2
 800b3e4:	f7fd bee6 	b.w	80091b4 <_malloc_r>
 800b3e8:	b92a      	cbnz	r2, 800b3f6 <_realloc_r+0x24>
 800b3ea:	f7fd fe77 	bl	80090dc <_free_r>
 800b3ee:	4625      	mov	r5, r4
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3f6:	f000 fc67 	bl	800bcc8 <_malloc_usable_size_r>
 800b3fa:	4284      	cmp	r4, r0
 800b3fc:	4607      	mov	r7, r0
 800b3fe:	d802      	bhi.n	800b406 <_realloc_r+0x34>
 800b400:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b404:	d812      	bhi.n	800b42c <_realloc_r+0x5a>
 800b406:	4621      	mov	r1, r4
 800b408:	4640      	mov	r0, r8
 800b40a:	f7fd fed3 	bl	80091b4 <_malloc_r>
 800b40e:	4605      	mov	r5, r0
 800b410:	2800      	cmp	r0, #0
 800b412:	d0ed      	beq.n	800b3f0 <_realloc_r+0x1e>
 800b414:	42bc      	cmp	r4, r7
 800b416:	4622      	mov	r2, r4
 800b418:	4631      	mov	r1, r6
 800b41a:	bf28      	it	cs
 800b41c:	463a      	movcs	r2, r7
 800b41e:	f7ff fa69 	bl	800a8f4 <memcpy>
 800b422:	4631      	mov	r1, r6
 800b424:	4640      	mov	r0, r8
 800b426:	f7fd fe59 	bl	80090dc <_free_r>
 800b42a:	e7e1      	b.n	800b3f0 <_realloc_r+0x1e>
 800b42c:	4635      	mov	r5, r6
 800b42e:	e7df      	b.n	800b3f0 <_realloc_r+0x1e>

0800b430 <__sfputc_r>:
 800b430:	6893      	ldr	r3, [r2, #8]
 800b432:	3b01      	subs	r3, #1
 800b434:	2b00      	cmp	r3, #0
 800b436:	b410      	push	{r4}
 800b438:	6093      	str	r3, [r2, #8]
 800b43a:	da08      	bge.n	800b44e <__sfputc_r+0x1e>
 800b43c:	6994      	ldr	r4, [r2, #24]
 800b43e:	42a3      	cmp	r3, r4
 800b440:	db01      	blt.n	800b446 <__sfputc_r+0x16>
 800b442:	290a      	cmp	r1, #10
 800b444:	d103      	bne.n	800b44e <__sfputc_r+0x1e>
 800b446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b44a:	f000 b94b 	b.w	800b6e4 <__swbuf_r>
 800b44e:	6813      	ldr	r3, [r2, #0]
 800b450:	1c58      	adds	r0, r3, #1
 800b452:	6010      	str	r0, [r2, #0]
 800b454:	7019      	strb	r1, [r3, #0]
 800b456:	4608      	mov	r0, r1
 800b458:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b45c:	4770      	bx	lr

0800b45e <__sfputs_r>:
 800b45e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b460:	4606      	mov	r6, r0
 800b462:	460f      	mov	r7, r1
 800b464:	4614      	mov	r4, r2
 800b466:	18d5      	adds	r5, r2, r3
 800b468:	42ac      	cmp	r4, r5
 800b46a:	d101      	bne.n	800b470 <__sfputs_r+0x12>
 800b46c:	2000      	movs	r0, #0
 800b46e:	e007      	b.n	800b480 <__sfputs_r+0x22>
 800b470:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b474:	463a      	mov	r2, r7
 800b476:	4630      	mov	r0, r6
 800b478:	f7ff ffda 	bl	800b430 <__sfputc_r>
 800b47c:	1c43      	adds	r3, r0, #1
 800b47e:	d1f3      	bne.n	800b468 <__sfputs_r+0xa>
 800b480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b484 <_vfiprintf_r>:
 800b484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b488:	460d      	mov	r5, r1
 800b48a:	b09d      	sub	sp, #116	; 0x74
 800b48c:	4614      	mov	r4, r2
 800b48e:	4698      	mov	r8, r3
 800b490:	4606      	mov	r6, r0
 800b492:	b118      	cbz	r0, 800b49c <_vfiprintf_r+0x18>
 800b494:	6983      	ldr	r3, [r0, #24]
 800b496:	b90b      	cbnz	r3, 800b49c <_vfiprintf_r+0x18>
 800b498:	f000 fb14 	bl	800bac4 <__sinit>
 800b49c:	4b89      	ldr	r3, [pc, #548]	; (800b6c4 <_vfiprintf_r+0x240>)
 800b49e:	429d      	cmp	r5, r3
 800b4a0:	d11b      	bne.n	800b4da <_vfiprintf_r+0x56>
 800b4a2:	6875      	ldr	r5, [r6, #4]
 800b4a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4a6:	07d9      	lsls	r1, r3, #31
 800b4a8:	d405      	bmi.n	800b4b6 <_vfiprintf_r+0x32>
 800b4aa:	89ab      	ldrh	r3, [r5, #12]
 800b4ac:	059a      	lsls	r2, r3, #22
 800b4ae:	d402      	bmi.n	800b4b6 <_vfiprintf_r+0x32>
 800b4b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4b2:	f7ff ff60 	bl	800b376 <__retarget_lock_acquire_recursive>
 800b4b6:	89ab      	ldrh	r3, [r5, #12]
 800b4b8:	071b      	lsls	r3, r3, #28
 800b4ba:	d501      	bpl.n	800b4c0 <_vfiprintf_r+0x3c>
 800b4bc:	692b      	ldr	r3, [r5, #16]
 800b4be:	b9eb      	cbnz	r3, 800b4fc <_vfiprintf_r+0x78>
 800b4c0:	4629      	mov	r1, r5
 800b4c2:	4630      	mov	r0, r6
 800b4c4:	f000 f96e 	bl	800b7a4 <__swsetup_r>
 800b4c8:	b1c0      	cbz	r0, 800b4fc <_vfiprintf_r+0x78>
 800b4ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4cc:	07dc      	lsls	r4, r3, #31
 800b4ce:	d50e      	bpl.n	800b4ee <_vfiprintf_r+0x6a>
 800b4d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4d4:	b01d      	add	sp, #116	; 0x74
 800b4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4da:	4b7b      	ldr	r3, [pc, #492]	; (800b6c8 <_vfiprintf_r+0x244>)
 800b4dc:	429d      	cmp	r5, r3
 800b4de:	d101      	bne.n	800b4e4 <_vfiprintf_r+0x60>
 800b4e0:	68b5      	ldr	r5, [r6, #8]
 800b4e2:	e7df      	b.n	800b4a4 <_vfiprintf_r+0x20>
 800b4e4:	4b79      	ldr	r3, [pc, #484]	; (800b6cc <_vfiprintf_r+0x248>)
 800b4e6:	429d      	cmp	r5, r3
 800b4e8:	bf08      	it	eq
 800b4ea:	68f5      	ldreq	r5, [r6, #12]
 800b4ec:	e7da      	b.n	800b4a4 <_vfiprintf_r+0x20>
 800b4ee:	89ab      	ldrh	r3, [r5, #12]
 800b4f0:	0598      	lsls	r0, r3, #22
 800b4f2:	d4ed      	bmi.n	800b4d0 <_vfiprintf_r+0x4c>
 800b4f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4f6:	f7ff ff3f 	bl	800b378 <__retarget_lock_release_recursive>
 800b4fa:	e7e9      	b.n	800b4d0 <_vfiprintf_r+0x4c>
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	9309      	str	r3, [sp, #36]	; 0x24
 800b500:	2320      	movs	r3, #32
 800b502:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b506:	f8cd 800c 	str.w	r8, [sp, #12]
 800b50a:	2330      	movs	r3, #48	; 0x30
 800b50c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b6d0 <_vfiprintf_r+0x24c>
 800b510:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b514:	f04f 0901 	mov.w	r9, #1
 800b518:	4623      	mov	r3, r4
 800b51a:	469a      	mov	sl, r3
 800b51c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b520:	b10a      	cbz	r2, 800b526 <_vfiprintf_r+0xa2>
 800b522:	2a25      	cmp	r2, #37	; 0x25
 800b524:	d1f9      	bne.n	800b51a <_vfiprintf_r+0x96>
 800b526:	ebba 0b04 	subs.w	fp, sl, r4
 800b52a:	d00b      	beq.n	800b544 <_vfiprintf_r+0xc0>
 800b52c:	465b      	mov	r3, fp
 800b52e:	4622      	mov	r2, r4
 800b530:	4629      	mov	r1, r5
 800b532:	4630      	mov	r0, r6
 800b534:	f7ff ff93 	bl	800b45e <__sfputs_r>
 800b538:	3001      	adds	r0, #1
 800b53a:	f000 80aa 	beq.w	800b692 <_vfiprintf_r+0x20e>
 800b53e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b540:	445a      	add	r2, fp
 800b542:	9209      	str	r2, [sp, #36]	; 0x24
 800b544:	f89a 3000 	ldrb.w	r3, [sl]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	f000 80a2 	beq.w	800b692 <_vfiprintf_r+0x20e>
 800b54e:	2300      	movs	r3, #0
 800b550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b554:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b558:	f10a 0a01 	add.w	sl, sl, #1
 800b55c:	9304      	str	r3, [sp, #16]
 800b55e:	9307      	str	r3, [sp, #28]
 800b560:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b564:	931a      	str	r3, [sp, #104]	; 0x68
 800b566:	4654      	mov	r4, sl
 800b568:	2205      	movs	r2, #5
 800b56a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b56e:	4858      	ldr	r0, [pc, #352]	; (800b6d0 <_vfiprintf_r+0x24c>)
 800b570:	f7f4 fe56 	bl	8000220 <memchr>
 800b574:	9a04      	ldr	r2, [sp, #16]
 800b576:	b9d8      	cbnz	r0, 800b5b0 <_vfiprintf_r+0x12c>
 800b578:	06d1      	lsls	r1, r2, #27
 800b57a:	bf44      	itt	mi
 800b57c:	2320      	movmi	r3, #32
 800b57e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b582:	0713      	lsls	r3, r2, #28
 800b584:	bf44      	itt	mi
 800b586:	232b      	movmi	r3, #43	; 0x2b
 800b588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b58c:	f89a 3000 	ldrb.w	r3, [sl]
 800b590:	2b2a      	cmp	r3, #42	; 0x2a
 800b592:	d015      	beq.n	800b5c0 <_vfiprintf_r+0x13c>
 800b594:	9a07      	ldr	r2, [sp, #28]
 800b596:	4654      	mov	r4, sl
 800b598:	2000      	movs	r0, #0
 800b59a:	f04f 0c0a 	mov.w	ip, #10
 800b59e:	4621      	mov	r1, r4
 800b5a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5a4:	3b30      	subs	r3, #48	; 0x30
 800b5a6:	2b09      	cmp	r3, #9
 800b5a8:	d94e      	bls.n	800b648 <_vfiprintf_r+0x1c4>
 800b5aa:	b1b0      	cbz	r0, 800b5da <_vfiprintf_r+0x156>
 800b5ac:	9207      	str	r2, [sp, #28]
 800b5ae:	e014      	b.n	800b5da <_vfiprintf_r+0x156>
 800b5b0:	eba0 0308 	sub.w	r3, r0, r8
 800b5b4:	fa09 f303 	lsl.w	r3, r9, r3
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	9304      	str	r3, [sp, #16]
 800b5bc:	46a2      	mov	sl, r4
 800b5be:	e7d2      	b.n	800b566 <_vfiprintf_r+0xe2>
 800b5c0:	9b03      	ldr	r3, [sp, #12]
 800b5c2:	1d19      	adds	r1, r3, #4
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	9103      	str	r1, [sp, #12]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	bfbb      	ittet	lt
 800b5cc:	425b      	neglt	r3, r3
 800b5ce:	f042 0202 	orrlt.w	r2, r2, #2
 800b5d2:	9307      	strge	r3, [sp, #28]
 800b5d4:	9307      	strlt	r3, [sp, #28]
 800b5d6:	bfb8      	it	lt
 800b5d8:	9204      	strlt	r2, [sp, #16]
 800b5da:	7823      	ldrb	r3, [r4, #0]
 800b5dc:	2b2e      	cmp	r3, #46	; 0x2e
 800b5de:	d10c      	bne.n	800b5fa <_vfiprintf_r+0x176>
 800b5e0:	7863      	ldrb	r3, [r4, #1]
 800b5e2:	2b2a      	cmp	r3, #42	; 0x2a
 800b5e4:	d135      	bne.n	800b652 <_vfiprintf_r+0x1ce>
 800b5e6:	9b03      	ldr	r3, [sp, #12]
 800b5e8:	1d1a      	adds	r2, r3, #4
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	9203      	str	r2, [sp, #12]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	bfb8      	it	lt
 800b5f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b5f6:	3402      	adds	r4, #2
 800b5f8:	9305      	str	r3, [sp, #20]
 800b5fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b6e0 <_vfiprintf_r+0x25c>
 800b5fe:	7821      	ldrb	r1, [r4, #0]
 800b600:	2203      	movs	r2, #3
 800b602:	4650      	mov	r0, sl
 800b604:	f7f4 fe0c 	bl	8000220 <memchr>
 800b608:	b140      	cbz	r0, 800b61c <_vfiprintf_r+0x198>
 800b60a:	2340      	movs	r3, #64	; 0x40
 800b60c:	eba0 000a 	sub.w	r0, r0, sl
 800b610:	fa03 f000 	lsl.w	r0, r3, r0
 800b614:	9b04      	ldr	r3, [sp, #16]
 800b616:	4303      	orrs	r3, r0
 800b618:	3401      	adds	r4, #1
 800b61a:	9304      	str	r3, [sp, #16]
 800b61c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b620:	482c      	ldr	r0, [pc, #176]	; (800b6d4 <_vfiprintf_r+0x250>)
 800b622:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b626:	2206      	movs	r2, #6
 800b628:	f7f4 fdfa 	bl	8000220 <memchr>
 800b62c:	2800      	cmp	r0, #0
 800b62e:	d03f      	beq.n	800b6b0 <_vfiprintf_r+0x22c>
 800b630:	4b29      	ldr	r3, [pc, #164]	; (800b6d8 <_vfiprintf_r+0x254>)
 800b632:	bb1b      	cbnz	r3, 800b67c <_vfiprintf_r+0x1f8>
 800b634:	9b03      	ldr	r3, [sp, #12]
 800b636:	3307      	adds	r3, #7
 800b638:	f023 0307 	bic.w	r3, r3, #7
 800b63c:	3308      	adds	r3, #8
 800b63e:	9303      	str	r3, [sp, #12]
 800b640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b642:	443b      	add	r3, r7
 800b644:	9309      	str	r3, [sp, #36]	; 0x24
 800b646:	e767      	b.n	800b518 <_vfiprintf_r+0x94>
 800b648:	fb0c 3202 	mla	r2, ip, r2, r3
 800b64c:	460c      	mov	r4, r1
 800b64e:	2001      	movs	r0, #1
 800b650:	e7a5      	b.n	800b59e <_vfiprintf_r+0x11a>
 800b652:	2300      	movs	r3, #0
 800b654:	3401      	adds	r4, #1
 800b656:	9305      	str	r3, [sp, #20]
 800b658:	4619      	mov	r1, r3
 800b65a:	f04f 0c0a 	mov.w	ip, #10
 800b65e:	4620      	mov	r0, r4
 800b660:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b664:	3a30      	subs	r2, #48	; 0x30
 800b666:	2a09      	cmp	r2, #9
 800b668:	d903      	bls.n	800b672 <_vfiprintf_r+0x1ee>
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d0c5      	beq.n	800b5fa <_vfiprintf_r+0x176>
 800b66e:	9105      	str	r1, [sp, #20]
 800b670:	e7c3      	b.n	800b5fa <_vfiprintf_r+0x176>
 800b672:	fb0c 2101 	mla	r1, ip, r1, r2
 800b676:	4604      	mov	r4, r0
 800b678:	2301      	movs	r3, #1
 800b67a:	e7f0      	b.n	800b65e <_vfiprintf_r+0x1da>
 800b67c:	ab03      	add	r3, sp, #12
 800b67e:	9300      	str	r3, [sp, #0]
 800b680:	462a      	mov	r2, r5
 800b682:	4b16      	ldr	r3, [pc, #88]	; (800b6dc <_vfiprintf_r+0x258>)
 800b684:	a904      	add	r1, sp, #16
 800b686:	4630      	mov	r0, r6
 800b688:	f7fd fea8 	bl	80093dc <_printf_float>
 800b68c:	4607      	mov	r7, r0
 800b68e:	1c78      	adds	r0, r7, #1
 800b690:	d1d6      	bne.n	800b640 <_vfiprintf_r+0x1bc>
 800b692:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b694:	07d9      	lsls	r1, r3, #31
 800b696:	d405      	bmi.n	800b6a4 <_vfiprintf_r+0x220>
 800b698:	89ab      	ldrh	r3, [r5, #12]
 800b69a:	059a      	lsls	r2, r3, #22
 800b69c:	d402      	bmi.n	800b6a4 <_vfiprintf_r+0x220>
 800b69e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6a0:	f7ff fe6a 	bl	800b378 <__retarget_lock_release_recursive>
 800b6a4:	89ab      	ldrh	r3, [r5, #12]
 800b6a6:	065b      	lsls	r3, r3, #25
 800b6a8:	f53f af12 	bmi.w	800b4d0 <_vfiprintf_r+0x4c>
 800b6ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6ae:	e711      	b.n	800b4d4 <_vfiprintf_r+0x50>
 800b6b0:	ab03      	add	r3, sp, #12
 800b6b2:	9300      	str	r3, [sp, #0]
 800b6b4:	462a      	mov	r2, r5
 800b6b6:	4b09      	ldr	r3, [pc, #36]	; (800b6dc <_vfiprintf_r+0x258>)
 800b6b8:	a904      	add	r1, sp, #16
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	f7fe f932 	bl	8009924 <_printf_i>
 800b6c0:	e7e4      	b.n	800b68c <_vfiprintf_r+0x208>
 800b6c2:	bf00      	nop
 800b6c4:	0800c52c 	.word	0x0800c52c
 800b6c8:	0800c54c 	.word	0x0800c54c
 800b6cc:	0800c50c 	.word	0x0800c50c
 800b6d0:	0800c3b4 	.word	0x0800c3b4
 800b6d4:	0800c3be 	.word	0x0800c3be
 800b6d8:	080093dd 	.word	0x080093dd
 800b6dc:	0800b45f 	.word	0x0800b45f
 800b6e0:	0800c3ba 	.word	0x0800c3ba

0800b6e4 <__swbuf_r>:
 800b6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6e6:	460e      	mov	r6, r1
 800b6e8:	4614      	mov	r4, r2
 800b6ea:	4605      	mov	r5, r0
 800b6ec:	b118      	cbz	r0, 800b6f6 <__swbuf_r+0x12>
 800b6ee:	6983      	ldr	r3, [r0, #24]
 800b6f0:	b90b      	cbnz	r3, 800b6f6 <__swbuf_r+0x12>
 800b6f2:	f000 f9e7 	bl	800bac4 <__sinit>
 800b6f6:	4b21      	ldr	r3, [pc, #132]	; (800b77c <__swbuf_r+0x98>)
 800b6f8:	429c      	cmp	r4, r3
 800b6fa:	d12b      	bne.n	800b754 <__swbuf_r+0x70>
 800b6fc:	686c      	ldr	r4, [r5, #4]
 800b6fe:	69a3      	ldr	r3, [r4, #24]
 800b700:	60a3      	str	r3, [r4, #8]
 800b702:	89a3      	ldrh	r3, [r4, #12]
 800b704:	071a      	lsls	r2, r3, #28
 800b706:	d52f      	bpl.n	800b768 <__swbuf_r+0x84>
 800b708:	6923      	ldr	r3, [r4, #16]
 800b70a:	b36b      	cbz	r3, 800b768 <__swbuf_r+0x84>
 800b70c:	6923      	ldr	r3, [r4, #16]
 800b70e:	6820      	ldr	r0, [r4, #0]
 800b710:	1ac0      	subs	r0, r0, r3
 800b712:	6963      	ldr	r3, [r4, #20]
 800b714:	b2f6      	uxtb	r6, r6
 800b716:	4283      	cmp	r3, r0
 800b718:	4637      	mov	r7, r6
 800b71a:	dc04      	bgt.n	800b726 <__swbuf_r+0x42>
 800b71c:	4621      	mov	r1, r4
 800b71e:	4628      	mov	r0, r5
 800b720:	f000 f93c 	bl	800b99c <_fflush_r>
 800b724:	bb30      	cbnz	r0, 800b774 <__swbuf_r+0x90>
 800b726:	68a3      	ldr	r3, [r4, #8]
 800b728:	3b01      	subs	r3, #1
 800b72a:	60a3      	str	r3, [r4, #8]
 800b72c:	6823      	ldr	r3, [r4, #0]
 800b72e:	1c5a      	adds	r2, r3, #1
 800b730:	6022      	str	r2, [r4, #0]
 800b732:	701e      	strb	r6, [r3, #0]
 800b734:	6963      	ldr	r3, [r4, #20]
 800b736:	3001      	adds	r0, #1
 800b738:	4283      	cmp	r3, r0
 800b73a:	d004      	beq.n	800b746 <__swbuf_r+0x62>
 800b73c:	89a3      	ldrh	r3, [r4, #12]
 800b73e:	07db      	lsls	r3, r3, #31
 800b740:	d506      	bpl.n	800b750 <__swbuf_r+0x6c>
 800b742:	2e0a      	cmp	r6, #10
 800b744:	d104      	bne.n	800b750 <__swbuf_r+0x6c>
 800b746:	4621      	mov	r1, r4
 800b748:	4628      	mov	r0, r5
 800b74a:	f000 f927 	bl	800b99c <_fflush_r>
 800b74e:	b988      	cbnz	r0, 800b774 <__swbuf_r+0x90>
 800b750:	4638      	mov	r0, r7
 800b752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b754:	4b0a      	ldr	r3, [pc, #40]	; (800b780 <__swbuf_r+0x9c>)
 800b756:	429c      	cmp	r4, r3
 800b758:	d101      	bne.n	800b75e <__swbuf_r+0x7a>
 800b75a:	68ac      	ldr	r4, [r5, #8]
 800b75c:	e7cf      	b.n	800b6fe <__swbuf_r+0x1a>
 800b75e:	4b09      	ldr	r3, [pc, #36]	; (800b784 <__swbuf_r+0xa0>)
 800b760:	429c      	cmp	r4, r3
 800b762:	bf08      	it	eq
 800b764:	68ec      	ldreq	r4, [r5, #12]
 800b766:	e7ca      	b.n	800b6fe <__swbuf_r+0x1a>
 800b768:	4621      	mov	r1, r4
 800b76a:	4628      	mov	r0, r5
 800b76c:	f000 f81a 	bl	800b7a4 <__swsetup_r>
 800b770:	2800      	cmp	r0, #0
 800b772:	d0cb      	beq.n	800b70c <__swbuf_r+0x28>
 800b774:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b778:	e7ea      	b.n	800b750 <__swbuf_r+0x6c>
 800b77a:	bf00      	nop
 800b77c:	0800c52c 	.word	0x0800c52c
 800b780:	0800c54c 	.word	0x0800c54c
 800b784:	0800c50c 	.word	0x0800c50c

0800b788 <__ascii_wctomb>:
 800b788:	b149      	cbz	r1, 800b79e <__ascii_wctomb+0x16>
 800b78a:	2aff      	cmp	r2, #255	; 0xff
 800b78c:	bf85      	ittet	hi
 800b78e:	238a      	movhi	r3, #138	; 0x8a
 800b790:	6003      	strhi	r3, [r0, #0]
 800b792:	700a      	strbls	r2, [r1, #0]
 800b794:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b798:	bf98      	it	ls
 800b79a:	2001      	movls	r0, #1
 800b79c:	4770      	bx	lr
 800b79e:	4608      	mov	r0, r1
 800b7a0:	4770      	bx	lr
	...

0800b7a4 <__swsetup_r>:
 800b7a4:	4b32      	ldr	r3, [pc, #200]	; (800b870 <__swsetup_r+0xcc>)
 800b7a6:	b570      	push	{r4, r5, r6, lr}
 800b7a8:	681d      	ldr	r5, [r3, #0]
 800b7aa:	4606      	mov	r6, r0
 800b7ac:	460c      	mov	r4, r1
 800b7ae:	b125      	cbz	r5, 800b7ba <__swsetup_r+0x16>
 800b7b0:	69ab      	ldr	r3, [r5, #24]
 800b7b2:	b913      	cbnz	r3, 800b7ba <__swsetup_r+0x16>
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	f000 f985 	bl	800bac4 <__sinit>
 800b7ba:	4b2e      	ldr	r3, [pc, #184]	; (800b874 <__swsetup_r+0xd0>)
 800b7bc:	429c      	cmp	r4, r3
 800b7be:	d10f      	bne.n	800b7e0 <__swsetup_r+0x3c>
 800b7c0:	686c      	ldr	r4, [r5, #4]
 800b7c2:	89a3      	ldrh	r3, [r4, #12]
 800b7c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7c8:	0719      	lsls	r1, r3, #28
 800b7ca:	d42c      	bmi.n	800b826 <__swsetup_r+0x82>
 800b7cc:	06dd      	lsls	r5, r3, #27
 800b7ce:	d411      	bmi.n	800b7f4 <__swsetup_r+0x50>
 800b7d0:	2309      	movs	r3, #9
 800b7d2:	6033      	str	r3, [r6, #0]
 800b7d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b7d8:	81a3      	strh	r3, [r4, #12]
 800b7da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7de:	e03e      	b.n	800b85e <__swsetup_r+0xba>
 800b7e0:	4b25      	ldr	r3, [pc, #148]	; (800b878 <__swsetup_r+0xd4>)
 800b7e2:	429c      	cmp	r4, r3
 800b7e4:	d101      	bne.n	800b7ea <__swsetup_r+0x46>
 800b7e6:	68ac      	ldr	r4, [r5, #8]
 800b7e8:	e7eb      	b.n	800b7c2 <__swsetup_r+0x1e>
 800b7ea:	4b24      	ldr	r3, [pc, #144]	; (800b87c <__swsetup_r+0xd8>)
 800b7ec:	429c      	cmp	r4, r3
 800b7ee:	bf08      	it	eq
 800b7f0:	68ec      	ldreq	r4, [r5, #12]
 800b7f2:	e7e6      	b.n	800b7c2 <__swsetup_r+0x1e>
 800b7f4:	0758      	lsls	r0, r3, #29
 800b7f6:	d512      	bpl.n	800b81e <__swsetup_r+0x7a>
 800b7f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7fa:	b141      	cbz	r1, 800b80e <__swsetup_r+0x6a>
 800b7fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b800:	4299      	cmp	r1, r3
 800b802:	d002      	beq.n	800b80a <__swsetup_r+0x66>
 800b804:	4630      	mov	r0, r6
 800b806:	f7fd fc69 	bl	80090dc <_free_r>
 800b80a:	2300      	movs	r3, #0
 800b80c:	6363      	str	r3, [r4, #52]	; 0x34
 800b80e:	89a3      	ldrh	r3, [r4, #12]
 800b810:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b814:	81a3      	strh	r3, [r4, #12]
 800b816:	2300      	movs	r3, #0
 800b818:	6063      	str	r3, [r4, #4]
 800b81a:	6923      	ldr	r3, [r4, #16]
 800b81c:	6023      	str	r3, [r4, #0]
 800b81e:	89a3      	ldrh	r3, [r4, #12]
 800b820:	f043 0308 	orr.w	r3, r3, #8
 800b824:	81a3      	strh	r3, [r4, #12]
 800b826:	6923      	ldr	r3, [r4, #16]
 800b828:	b94b      	cbnz	r3, 800b83e <__swsetup_r+0x9a>
 800b82a:	89a3      	ldrh	r3, [r4, #12]
 800b82c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b834:	d003      	beq.n	800b83e <__swsetup_r+0x9a>
 800b836:	4621      	mov	r1, r4
 800b838:	4630      	mov	r0, r6
 800b83a:	f000 fa05 	bl	800bc48 <__smakebuf_r>
 800b83e:	89a0      	ldrh	r0, [r4, #12]
 800b840:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b844:	f010 0301 	ands.w	r3, r0, #1
 800b848:	d00a      	beq.n	800b860 <__swsetup_r+0xbc>
 800b84a:	2300      	movs	r3, #0
 800b84c:	60a3      	str	r3, [r4, #8]
 800b84e:	6963      	ldr	r3, [r4, #20]
 800b850:	425b      	negs	r3, r3
 800b852:	61a3      	str	r3, [r4, #24]
 800b854:	6923      	ldr	r3, [r4, #16]
 800b856:	b943      	cbnz	r3, 800b86a <__swsetup_r+0xc6>
 800b858:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b85c:	d1ba      	bne.n	800b7d4 <__swsetup_r+0x30>
 800b85e:	bd70      	pop	{r4, r5, r6, pc}
 800b860:	0781      	lsls	r1, r0, #30
 800b862:	bf58      	it	pl
 800b864:	6963      	ldrpl	r3, [r4, #20]
 800b866:	60a3      	str	r3, [r4, #8]
 800b868:	e7f4      	b.n	800b854 <__swsetup_r+0xb0>
 800b86a:	2000      	movs	r0, #0
 800b86c:	e7f7      	b.n	800b85e <__swsetup_r+0xba>
 800b86e:	bf00      	nop
 800b870:	200023e4 	.word	0x200023e4
 800b874:	0800c52c 	.word	0x0800c52c
 800b878:	0800c54c 	.word	0x0800c54c
 800b87c:	0800c50c 	.word	0x0800c50c

0800b880 <abort>:
 800b880:	b508      	push	{r3, lr}
 800b882:	2006      	movs	r0, #6
 800b884:	f000 fa50 	bl	800bd28 <raise>
 800b888:	2001      	movs	r0, #1
 800b88a:	f7f9 f917 	bl	8004abc <_exit>
	...

0800b890 <__sflush_r>:
 800b890:	898a      	ldrh	r2, [r1, #12]
 800b892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b896:	4605      	mov	r5, r0
 800b898:	0710      	lsls	r0, r2, #28
 800b89a:	460c      	mov	r4, r1
 800b89c:	d458      	bmi.n	800b950 <__sflush_r+0xc0>
 800b89e:	684b      	ldr	r3, [r1, #4]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	dc05      	bgt.n	800b8b0 <__sflush_r+0x20>
 800b8a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	dc02      	bgt.n	800b8b0 <__sflush_r+0x20>
 800b8aa:	2000      	movs	r0, #0
 800b8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8b2:	2e00      	cmp	r6, #0
 800b8b4:	d0f9      	beq.n	800b8aa <__sflush_r+0x1a>
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b8bc:	682f      	ldr	r7, [r5, #0]
 800b8be:	602b      	str	r3, [r5, #0]
 800b8c0:	d032      	beq.n	800b928 <__sflush_r+0x98>
 800b8c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b8c4:	89a3      	ldrh	r3, [r4, #12]
 800b8c6:	075a      	lsls	r2, r3, #29
 800b8c8:	d505      	bpl.n	800b8d6 <__sflush_r+0x46>
 800b8ca:	6863      	ldr	r3, [r4, #4]
 800b8cc:	1ac0      	subs	r0, r0, r3
 800b8ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b8d0:	b10b      	cbz	r3, 800b8d6 <__sflush_r+0x46>
 800b8d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8d4:	1ac0      	subs	r0, r0, r3
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	4602      	mov	r2, r0
 800b8da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8dc:	6a21      	ldr	r1, [r4, #32]
 800b8de:	4628      	mov	r0, r5
 800b8e0:	47b0      	blx	r6
 800b8e2:	1c43      	adds	r3, r0, #1
 800b8e4:	89a3      	ldrh	r3, [r4, #12]
 800b8e6:	d106      	bne.n	800b8f6 <__sflush_r+0x66>
 800b8e8:	6829      	ldr	r1, [r5, #0]
 800b8ea:	291d      	cmp	r1, #29
 800b8ec:	d82c      	bhi.n	800b948 <__sflush_r+0xb8>
 800b8ee:	4a2a      	ldr	r2, [pc, #168]	; (800b998 <__sflush_r+0x108>)
 800b8f0:	40ca      	lsrs	r2, r1
 800b8f2:	07d6      	lsls	r6, r2, #31
 800b8f4:	d528      	bpl.n	800b948 <__sflush_r+0xb8>
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	6062      	str	r2, [r4, #4]
 800b8fa:	04d9      	lsls	r1, r3, #19
 800b8fc:	6922      	ldr	r2, [r4, #16]
 800b8fe:	6022      	str	r2, [r4, #0]
 800b900:	d504      	bpl.n	800b90c <__sflush_r+0x7c>
 800b902:	1c42      	adds	r2, r0, #1
 800b904:	d101      	bne.n	800b90a <__sflush_r+0x7a>
 800b906:	682b      	ldr	r3, [r5, #0]
 800b908:	b903      	cbnz	r3, 800b90c <__sflush_r+0x7c>
 800b90a:	6560      	str	r0, [r4, #84]	; 0x54
 800b90c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b90e:	602f      	str	r7, [r5, #0]
 800b910:	2900      	cmp	r1, #0
 800b912:	d0ca      	beq.n	800b8aa <__sflush_r+0x1a>
 800b914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b918:	4299      	cmp	r1, r3
 800b91a:	d002      	beq.n	800b922 <__sflush_r+0x92>
 800b91c:	4628      	mov	r0, r5
 800b91e:	f7fd fbdd 	bl	80090dc <_free_r>
 800b922:	2000      	movs	r0, #0
 800b924:	6360      	str	r0, [r4, #52]	; 0x34
 800b926:	e7c1      	b.n	800b8ac <__sflush_r+0x1c>
 800b928:	6a21      	ldr	r1, [r4, #32]
 800b92a:	2301      	movs	r3, #1
 800b92c:	4628      	mov	r0, r5
 800b92e:	47b0      	blx	r6
 800b930:	1c41      	adds	r1, r0, #1
 800b932:	d1c7      	bne.n	800b8c4 <__sflush_r+0x34>
 800b934:	682b      	ldr	r3, [r5, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d0c4      	beq.n	800b8c4 <__sflush_r+0x34>
 800b93a:	2b1d      	cmp	r3, #29
 800b93c:	d001      	beq.n	800b942 <__sflush_r+0xb2>
 800b93e:	2b16      	cmp	r3, #22
 800b940:	d101      	bne.n	800b946 <__sflush_r+0xb6>
 800b942:	602f      	str	r7, [r5, #0]
 800b944:	e7b1      	b.n	800b8aa <__sflush_r+0x1a>
 800b946:	89a3      	ldrh	r3, [r4, #12]
 800b948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b94c:	81a3      	strh	r3, [r4, #12]
 800b94e:	e7ad      	b.n	800b8ac <__sflush_r+0x1c>
 800b950:	690f      	ldr	r7, [r1, #16]
 800b952:	2f00      	cmp	r7, #0
 800b954:	d0a9      	beq.n	800b8aa <__sflush_r+0x1a>
 800b956:	0793      	lsls	r3, r2, #30
 800b958:	680e      	ldr	r6, [r1, #0]
 800b95a:	bf08      	it	eq
 800b95c:	694b      	ldreq	r3, [r1, #20]
 800b95e:	600f      	str	r7, [r1, #0]
 800b960:	bf18      	it	ne
 800b962:	2300      	movne	r3, #0
 800b964:	eba6 0807 	sub.w	r8, r6, r7
 800b968:	608b      	str	r3, [r1, #8]
 800b96a:	f1b8 0f00 	cmp.w	r8, #0
 800b96e:	dd9c      	ble.n	800b8aa <__sflush_r+0x1a>
 800b970:	6a21      	ldr	r1, [r4, #32]
 800b972:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b974:	4643      	mov	r3, r8
 800b976:	463a      	mov	r2, r7
 800b978:	4628      	mov	r0, r5
 800b97a:	47b0      	blx	r6
 800b97c:	2800      	cmp	r0, #0
 800b97e:	dc06      	bgt.n	800b98e <__sflush_r+0xfe>
 800b980:	89a3      	ldrh	r3, [r4, #12]
 800b982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b986:	81a3      	strh	r3, [r4, #12]
 800b988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b98c:	e78e      	b.n	800b8ac <__sflush_r+0x1c>
 800b98e:	4407      	add	r7, r0
 800b990:	eba8 0800 	sub.w	r8, r8, r0
 800b994:	e7e9      	b.n	800b96a <__sflush_r+0xda>
 800b996:	bf00      	nop
 800b998:	20400001 	.word	0x20400001

0800b99c <_fflush_r>:
 800b99c:	b538      	push	{r3, r4, r5, lr}
 800b99e:	690b      	ldr	r3, [r1, #16]
 800b9a0:	4605      	mov	r5, r0
 800b9a2:	460c      	mov	r4, r1
 800b9a4:	b913      	cbnz	r3, 800b9ac <_fflush_r+0x10>
 800b9a6:	2500      	movs	r5, #0
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	bd38      	pop	{r3, r4, r5, pc}
 800b9ac:	b118      	cbz	r0, 800b9b6 <_fflush_r+0x1a>
 800b9ae:	6983      	ldr	r3, [r0, #24]
 800b9b0:	b90b      	cbnz	r3, 800b9b6 <_fflush_r+0x1a>
 800b9b2:	f000 f887 	bl	800bac4 <__sinit>
 800b9b6:	4b14      	ldr	r3, [pc, #80]	; (800ba08 <_fflush_r+0x6c>)
 800b9b8:	429c      	cmp	r4, r3
 800b9ba:	d11b      	bne.n	800b9f4 <_fflush_r+0x58>
 800b9bc:	686c      	ldr	r4, [r5, #4]
 800b9be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d0ef      	beq.n	800b9a6 <_fflush_r+0xa>
 800b9c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b9c8:	07d0      	lsls	r0, r2, #31
 800b9ca:	d404      	bmi.n	800b9d6 <_fflush_r+0x3a>
 800b9cc:	0599      	lsls	r1, r3, #22
 800b9ce:	d402      	bmi.n	800b9d6 <_fflush_r+0x3a>
 800b9d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9d2:	f7ff fcd0 	bl	800b376 <__retarget_lock_acquire_recursive>
 800b9d6:	4628      	mov	r0, r5
 800b9d8:	4621      	mov	r1, r4
 800b9da:	f7ff ff59 	bl	800b890 <__sflush_r>
 800b9de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9e0:	07da      	lsls	r2, r3, #31
 800b9e2:	4605      	mov	r5, r0
 800b9e4:	d4e0      	bmi.n	800b9a8 <_fflush_r+0xc>
 800b9e6:	89a3      	ldrh	r3, [r4, #12]
 800b9e8:	059b      	lsls	r3, r3, #22
 800b9ea:	d4dd      	bmi.n	800b9a8 <_fflush_r+0xc>
 800b9ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9ee:	f7ff fcc3 	bl	800b378 <__retarget_lock_release_recursive>
 800b9f2:	e7d9      	b.n	800b9a8 <_fflush_r+0xc>
 800b9f4:	4b05      	ldr	r3, [pc, #20]	; (800ba0c <_fflush_r+0x70>)
 800b9f6:	429c      	cmp	r4, r3
 800b9f8:	d101      	bne.n	800b9fe <_fflush_r+0x62>
 800b9fa:	68ac      	ldr	r4, [r5, #8]
 800b9fc:	e7df      	b.n	800b9be <_fflush_r+0x22>
 800b9fe:	4b04      	ldr	r3, [pc, #16]	; (800ba10 <_fflush_r+0x74>)
 800ba00:	429c      	cmp	r4, r3
 800ba02:	bf08      	it	eq
 800ba04:	68ec      	ldreq	r4, [r5, #12]
 800ba06:	e7da      	b.n	800b9be <_fflush_r+0x22>
 800ba08:	0800c52c 	.word	0x0800c52c
 800ba0c:	0800c54c 	.word	0x0800c54c
 800ba10:	0800c50c 	.word	0x0800c50c

0800ba14 <std>:
 800ba14:	2300      	movs	r3, #0
 800ba16:	b510      	push	{r4, lr}
 800ba18:	4604      	mov	r4, r0
 800ba1a:	e9c0 3300 	strd	r3, r3, [r0]
 800ba1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba22:	6083      	str	r3, [r0, #8]
 800ba24:	8181      	strh	r1, [r0, #12]
 800ba26:	6643      	str	r3, [r0, #100]	; 0x64
 800ba28:	81c2      	strh	r2, [r0, #14]
 800ba2a:	6183      	str	r3, [r0, #24]
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	2208      	movs	r2, #8
 800ba30:	305c      	adds	r0, #92	; 0x5c
 800ba32:	f7fd fb4b 	bl	80090cc <memset>
 800ba36:	4b05      	ldr	r3, [pc, #20]	; (800ba4c <std+0x38>)
 800ba38:	6263      	str	r3, [r4, #36]	; 0x24
 800ba3a:	4b05      	ldr	r3, [pc, #20]	; (800ba50 <std+0x3c>)
 800ba3c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ba3e:	4b05      	ldr	r3, [pc, #20]	; (800ba54 <std+0x40>)
 800ba40:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ba42:	4b05      	ldr	r3, [pc, #20]	; (800ba58 <std+0x44>)
 800ba44:	6224      	str	r4, [r4, #32]
 800ba46:	6323      	str	r3, [r4, #48]	; 0x30
 800ba48:	bd10      	pop	{r4, pc}
 800ba4a:	bf00      	nop
 800ba4c:	0800bd61 	.word	0x0800bd61
 800ba50:	0800bd83 	.word	0x0800bd83
 800ba54:	0800bdbb 	.word	0x0800bdbb
 800ba58:	0800bddf 	.word	0x0800bddf

0800ba5c <_cleanup_r>:
 800ba5c:	4901      	ldr	r1, [pc, #4]	; (800ba64 <_cleanup_r+0x8>)
 800ba5e:	f000 b8af 	b.w	800bbc0 <_fwalk_reent>
 800ba62:	bf00      	nop
 800ba64:	0800b99d 	.word	0x0800b99d

0800ba68 <__sfmoreglue>:
 800ba68:	b570      	push	{r4, r5, r6, lr}
 800ba6a:	2268      	movs	r2, #104	; 0x68
 800ba6c:	1e4d      	subs	r5, r1, #1
 800ba6e:	4355      	muls	r5, r2
 800ba70:	460e      	mov	r6, r1
 800ba72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ba76:	f7fd fb9d 	bl	80091b4 <_malloc_r>
 800ba7a:	4604      	mov	r4, r0
 800ba7c:	b140      	cbz	r0, 800ba90 <__sfmoreglue+0x28>
 800ba7e:	2100      	movs	r1, #0
 800ba80:	e9c0 1600 	strd	r1, r6, [r0]
 800ba84:	300c      	adds	r0, #12
 800ba86:	60a0      	str	r0, [r4, #8]
 800ba88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ba8c:	f7fd fb1e 	bl	80090cc <memset>
 800ba90:	4620      	mov	r0, r4
 800ba92:	bd70      	pop	{r4, r5, r6, pc}

0800ba94 <__sfp_lock_acquire>:
 800ba94:	4801      	ldr	r0, [pc, #4]	; (800ba9c <__sfp_lock_acquire+0x8>)
 800ba96:	f7ff bc6e 	b.w	800b376 <__retarget_lock_acquire_recursive>
 800ba9a:	bf00      	nop
 800ba9c:	20002abd 	.word	0x20002abd

0800baa0 <__sfp_lock_release>:
 800baa0:	4801      	ldr	r0, [pc, #4]	; (800baa8 <__sfp_lock_release+0x8>)
 800baa2:	f7ff bc69 	b.w	800b378 <__retarget_lock_release_recursive>
 800baa6:	bf00      	nop
 800baa8:	20002abd 	.word	0x20002abd

0800baac <__sinit_lock_acquire>:
 800baac:	4801      	ldr	r0, [pc, #4]	; (800bab4 <__sinit_lock_acquire+0x8>)
 800baae:	f7ff bc62 	b.w	800b376 <__retarget_lock_acquire_recursive>
 800bab2:	bf00      	nop
 800bab4:	20002abe 	.word	0x20002abe

0800bab8 <__sinit_lock_release>:
 800bab8:	4801      	ldr	r0, [pc, #4]	; (800bac0 <__sinit_lock_release+0x8>)
 800baba:	f7ff bc5d 	b.w	800b378 <__retarget_lock_release_recursive>
 800babe:	bf00      	nop
 800bac0:	20002abe 	.word	0x20002abe

0800bac4 <__sinit>:
 800bac4:	b510      	push	{r4, lr}
 800bac6:	4604      	mov	r4, r0
 800bac8:	f7ff fff0 	bl	800baac <__sinit_lock_acquire>
 800bacc:	69a3      	ldr	r3, [r4, #24]
 800bace:	b11b      	cbz	r3, 800bad8 <__sinit+0x14>
 800bad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bad4:	f7ff bff0 	b.w	800bab8 <__sinit_lock_release>
 800bad8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800badc:	6523      	str	r3, [r4, #80]	; 0x50
 800bade:	4b13      	ldr	r3, [pc, #76]	; (800bb2c <__sinit+0x68>)
 800bae0:	4a13      	ldr	r2, [pc, #76]	; (800bb30 <__sinit+0x6c>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	62a2      	str	r2, [r4, #40]	; 0x28
 800bae6:	42a3      	cmp	r3, r4
 800bae8:	bf04      	itt	eq
 800baea:	2301      	moveq	r3, #1
 800baec:	61a3      	streq	r3, [r4, #24]
 800baee:	4620      	mov	r0, r4
 800baf0:	f000 f820 	bl	800bb34 <__sfp>
 800baf4:	6060      	str	r0, [r4, #4]
 800baf6:	4620      	mov	r0, r4
 800baf8:	f000 f81c 	bl	800bb34 <__sfp>
 800bafc:	60a0      	str	r0, [r4, #8]
 800bafe:	4620      	mov	r0, r4
 800bb00:	f000 f818 	bl	800bb34 <__sfp>
 800bb04:	2200      	movs	r2, #0
 800bb06:	60e0      	str	r0, [r4, #12]
 800bb08:	2104      	movs	r1, #4
 800bb0a:	6860      	ldr	r0, [r4, #4]
 800bb0c:	f7ff ff82 	bl	800ba14 <std>
 800bb10:	68a0      	ldr	r0, [r4, #8]
 800bb12:	2201      	movs	r2, #1
 800bb14:	2109      	movs	r1, #9
 800bb16:	f7ff ff7d 	bl	800ba14 <std>
 800bb1a:	68e0      	ldr	r0, [r4, #12]
 800bb1c:	2202      	movs	r2, #2
 800bb1e:	2112      	movs	r1, #18
 800bb20:	f7ff ff78 	bl	800ba14 <std>
 800bb24:	2301      	movs	r3, #1
 800bb26:	61a3      	str	r3, [r4, #24]
 800bb28:	e7d2      	b.n	800bad0 <__sinit+0xc>
 800bb2a:	bf00      	nop
 800bb2c:	0800c194 	.word	0x0800c194
 800bb30:	0800ba5d 	.word	0x0800ba5d

0800bb34 <__sfp>:
 800bb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb36:	4607      	mov	r7, r0
 800bb38:	f7ff ffac 	bl	800ba94 <__sfp_lock_acquire>
 800bb3c:	4b1e      	ldr	r3, [pc, #120]	; (800bbb8 <__sfp+0x84>)
 800bb3e:	681e      	ldr	r6, [r3, #0]
 800bb40:	69b3      	ldr	r3, [r6, #24]
 800bb42:	b913      	cbnz	r3, 800bb4a <__sfp+0x16>
 800bb44:	4630      	mov	r0, r6
 800bb46:	f7ff ffbd 	bl	800bac4 <__sinit>
 800bb4a:	3648      	adds	r6, #72	; 0x48
 800bb4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bb50:	3b01      	subs	r3, #1
 800bb52:	d503      	bpl.n	800bb5c <__sfp+0x28>
 800bb54:	6833      	ldr	r3, [r6, #0]
 800bb56:	b30b      	cbz	r3, 800bb9c <__sfp+0x68>
 800bb58:	6836      	ldr	r6, [r6, #0]
 800bb5a:	e7f7      	b.n	800bb4c <__sfp+0x18>
 800bb5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bb60:	b9d5      	cbnz	r5, 800bb98 <__sfp+0x64>
 800bb62:	4b16      	ldr	r3, [pc, #88]	; (800bbbc <__sfp+0x88>)
 800bb64:	60e3      	str	r3, [r4, #12]
 800bb66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bb6a:	6665      	str	r5, [r4, #100]	; 0x64
 800bb6c:	f7ff fc02 	bl	800b374 <__retarget_lock_init_recursive>
 800bb70:	f7ff ff96 	bl	800baa0 <__sfp_lock_release>
 800bb74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bb78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bb7c:	6025      	str	r5, [r4, #0]
 800bb7e:	61a5      	str	r5, [r4, #24]
 800bb80:	2208      	movs	r2, #8
 800bb82:	4629      	mov	r1, r5
 800bb84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bb88:	f7fd faa0 	bl	80090cc <memset>
 800bb8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bb90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bb94:	4620      	mov	r0, r4
 800bb96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb98:	3468      	adds	r4, #104	; 0x68
 800bb9a:	e7d9      	b.n	800bb50 <__sfp+0x1c>
 800bb9c:	2104      	movs	r1, #4
 800bb9e:	4638      	mov	r0, r7
 800bba0:	f7ff ff62 	bl	800ba68 <__sfmoreglue>
 800bba4:	4604      	mov	r4, r0
 800bba6:	6030      	str	r0, [r6, #0]
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	d1d5      	bne.n	800bb58 <__sfp+0x24>
 800bbac:	f7ff ff78 	bl	800baa0 <__sfp_lock_release>
 800bbb0:	230c      	movs	r3, #12
 800bbb2:	603b      	str	r3, [r7, #0]
 800bbb4:	e7ee      	b.n	800bb94 <__sfp+0x60>
 800bbb6:	bf00      	nop
 800bbb8:	0800c194 	.word	0x0800c194
 800bbbc:	ffff0001 	.word	0xffff0001

0800bbc0 <_fwalk_reent>:
 800bbc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbc4:	4606      	mov	r6, r0
 800bbc6:	4688      	mov	r8, r1
 800bbc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bbcc:	2700      	movs	r7, #0
 800bbce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bbd2:	f1b9 0901 	subs.w	r9, r9, #1
 800bbd6:	d505      	bpl.n	800bbe4 <_fwalk_reent+0x24>
 800bbd8:	6824      	ldr	r4, [r4, #0]
 800bbda:	2c00      	cmp	r4, #0
 800bbdc:	d1f7      	bne.n	800bbce <_fwalk_reent+0xe>
 800bbde:	4638      	mov	r0, r7
 800bbe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbe4:	89ab      	ldrh	r3, [r5, #12]
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d907      	bls.n	800bbfa <_fwalk_reent+0x3a>
 800bbea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bbee:	3301      	adds	r3, #1
 800bbf0:	d003      	beq.n	800bbfa <_fwalk_reent+0x3a>
 800bbf2:	4629      	mov	r1, r5
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	47c0      	blx	r8
 800bbf8:	4307      	orrs	r7, r0
 800bbfa:	3568      	adds	r5, #104	; 0x68
 800bbfc:	e7e9      	b.n	800bbd2 <_fwalk_reent+0x12>

0800bbfe <__swhatbuf_r>:
 800bbfe:	b570      	push	{r4, r5, r6, lr}
 800bc00:	460e      	mov	r6, r1
 800bc02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc06:	2900      	cmp	r1, #0
 800bc08:	b096      	sub	sp, #88	; 0x58
 800bc0a:	4614      	mov	r4, r2
 800bc0c:	461d      	mov	r5, r3
 800bc0e:	da08      	bge.n	800bc22 <__swhatbuf_r+0x24>
 800bc10:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bc14:	2200      	movs	r2, #0
 800bc16:	602a      	str	r2, [r5, #0]
 800bc18:	061a      	lsls	r2, r3, #24
 800bc1a:	d410      	bmi.n	800bc3e <__swhatbuf_r+0x40>
 800bc1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc20:	e00e      	b.n	800bc40 <__swhatbuf_r+0x42>
 800bc22:	466a      	mov	r2, sp
 800bc24:	f000 f902 	bl	800be2c <_fstat_r>
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	dbf1      	blt.n	800bc10 <__swhatbuf_r+0x12>
 800bc2c:	9a01      	ldr	r2, [sp, #4]
 800bc2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bc32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bc36:	425a      	negs	r2, r3
 800bc38:	415a      	adcs	r2, r3
 800bc3a:	602a      	str	r2, [r5, #0]
 800bc3c:	e7ee      	b.n	800bc1c <__swhatbuf_r+0x1e>
 800bc3e:	2340      	movs	r3, #64	; 0x40
 800bc40:	2000      	movs	r0, #0
 800bc42:	6023      	str	r3, [r4, #0]
 800bc44:	b016      	add	sp, #88	; 0x58
 800bc46:	bd70      	pop	{r4, r5, r6, pc}

0800bc48 <__smakebuf_r>:
 800bc48:	898b      	ldrh	r3, [r1, #12]
 800bc4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bc4c:	079d      	lsls	r5, r3, #30
 800bc4e:	4606      	mov	r6, r0
 800bc50:	460c      	mov	r4, r1
 800bc52:	d507      	bpl.n	800bc64 <__smakebuf_r+0x1c>
 800bc54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bc58:	6023      	str	r3, [r4, #0]
 800bc5a:	6123      	str	r3, [r4, #16]
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	6163      	str	r3, [r4, #20]
 800bc60:	b002      	add	sp, #8
 800bc62:	bd70      	pop	{r4, r5, r6, pc}
 800bc64:	ab01      	add	r3, sp, #4
 800bc66:	466a      	mov	r2, sp
 800bc68:	f7ff ffc9 	bl	800bbfe <__swhatbuf_r>
 800bc6c:	9900      	ldr	r1, [sp, #0]
 800bc6e:	4605      	mov	r5, r0
 800bc70:	4630      	mov	r0, r6
 800bc72:	f7fd fa9f 	bl	80091b4 <_malloc_r>
 800bc76:	b948      	cbnz	r0, 800bc8c <__smakebuf_r+0x44>
 800bc78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc7c:	059a      	lsls	r2, r3, #22
 800bc7e:	d4ef      	bmi.n	800bc60 <__smakebuf_r+0x18>
 800bc80:	f023 0303 	bic.w	r3, r3, #3
 800bc84:	f043 0302 	orr.w	r3, r3, #2
 800bc88:	81a3      	strh	r3, [r4, #12]
 800bc8a:	e7e3      	b.n	800bc54 <__smakebuf_r+0xc>
 800bc8c:	4b0d      	ldr	r3, [pc, #52]	; (800bcc4 <__smakebuf_r+0x7c>)
 800bc8e:	62b3      	str	r3, [r6, #40]	; 0x28
 800bc90:	89a3      	ldrh	r3, [r4, #12]
 800bc92:	6020      	str	r0, [r4, #0]
 800bc94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc98:	81a3      	strh	r3, [r4, #12]
 800bc9a:	9b00      	ldr	r3, [sp, #0]
 800bc9c:	6163      	str	r3, [r4, #20]
 800bc9e:	9b01      	ldr	r3, [sp, #4]
 800bca0:	6120      	str	r0, [r4, #16]
 800bca2:	b15b      	cbz	r3, 800bcbc <__smakebuf_r+0x74>
 800bca4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bca8:	4630      	mov	r0, r6
 800bcaa:	f000 f8d1 	bl	800be50 <_isatty_r>
 800bcae:	b128      	cbz	r0, 800bcbc <__smakebuf_r+0x74>
 800bcb0:	89a3      	ldrh	r3, [r4, #12]
 800bcb2:	f023 0303 	bic.w	r3, r3, #3
 800bcb6:	f043 0301 	orr.w	r3, r3, #1
 800bcba:	81a3      	strh	r3, [r4, #12]
 800bcbc:	89a0      	ldrh	r0, [r4, #12]
 800bcbe:	4305      	orrs	r5, r0
 800bcc0:	81a5      	strh	r5, [r4, #12]
 800bcc2:	e7cd      	b.n	800bc60 <__smakebuf_r+0x18>
 800bcc4:	0800ba5d 	.word	0x0800ba5d

0800bcc8 <_malloc_usable_size_r>:
 800bcc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bccc:	1f18      	subs	r0, r3, #4
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	bfbc      	itt	lt
 800bcd2:	580b      	ldrlt	r3, [r1, r0]
 800bcd4:	18c0      	addlt	r0, r0, r3
 800bcd6:	4770      	bx	lr

0800bcd8 <_raise_r>:
 800bcd8:	291f      	cmp	r1, #31
 800bcda:	b538      	push	{r3, r4, r5, lr}
 800bcdc:	4604      	mov	r4, r0
 800bcde:	460d      	mov	r5, r1
 800bce0:	d904      	bls.n	800bcec <_raise_r+0x14>
 800bce2:	2316      	movs	r3, #22
 800bce4:	6003      	str	r3, [r0, #0]
 800bce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcea:	bd38      	pop	{r3, r4, r5, pc}
 800bcec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bcee:	b112      	cbz	r2, 800bcf6 <_raise_r+0x1e>
 800bcf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bcf4:	b94b      	cbnz	r3, 800bd0a <_raise_r+0x32>
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	f000 f830 	bl	800bd5c <_getpid_r>
 800bcfc:	462a      	mov	r2, r5
 800bcfe:	4601      	mov	r1, r0
 800bd00:	4620      	mov	r0, r4
 800bd02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd06:	f000 b817 	b.w	800bd38 <_kill_r>
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	d00a      	beq.n	800bd24 <_raise_r+0x4c>
 800bd0e:	1c59      	adds	r1, r3, #1
 800bd10:	d103      	bne.n	800bd1a <_raise_r+0x42>
 800bd12:	2316      	movs	r3, #22
 800bd14:	6003      	str	r3, [r0, #0]
 800bd16:	2001      	movs	r0, #1
 800bd18:	e7e7      	b.n	800bcea <_raise_r+0x12>
 800bd1a:	2400      	movs	r4, #0
 800bd1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd20:	4628      	mov	r0, r5
 800bd22:	4798      	blx	r3
 800bd24:	2000      	movs	r0, #0
 800bd26:	e7e0      	b.n	800bcea <_raise_r+0x12>

0800bd28 <raise>:
 800bd28:	4b02      	ldr	r3, [pc, #8]	; (800bd34 <raise+0xc>)
 800bd2a:	4601      	mov	r1, r0
 800bd2c:	6818      	ldr	r0, [r3, #0]
 800bd2e:	f7ff bfd3 	b.w	800bcd8 <_raise_r>
 800bd32:	bf00      	nop
 800bd34:	200023e4 	.word	0x200023e4

0800bd38 <_kill_r>:
 800bd38:	b538      	push	{r3, r4, r5, lr}
 800bd3a:	4d07      	ldr	r5, [pc, #28]	; (800bd58 <_kill_r+0x20>)
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	4604      	mov	r4, r0
 800bd40:	4608      	mov	r0, r1
 800bd42:	4611      	mov	r1, r2
 800bd44:	602b      	str	r3, [r5, #0]
 800bd46:	f7f8 fea9 	bl	8004a9c <_kill>
 800bd4a:	1c43      	adds	r3, r0, #1
 800bd4c:	d102      	bne.n	800bd54 <_kill_r+0x1c>
 800bd4e:	682b      	ldr	r3, [r5, #0]
 800bd50:	b103      	cbz	r3, 800bd54 <_kill_r+0x1c>
 800bd52:	6023      	str	r3, [r4, #0]
 800bd54:	bd38      	pop	{r3, r4, r5, pc}
 800bd56:	bf00      	nop
 800bd58:	20002ab8 	.word	0x20002ab8

0800bd5c <_getpid_r>:
 800bd5c:	f7f8 be96 	b.w	8004a8c <_getpid>

0800bd60 <__sread>:
 800bd60:	b510      	push	{r4, lr}
 800bd62:	460c      	mov	r4, r1
 800bd64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd68:	f000 f894 	bl	800be94 <_read_r>
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	bfab      	itete	ge
 800bd70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd72:	89a3      	ldrhlt	r3, [r4, #12]
 800bd74:	181b      	addge	r3, r3, r0
 800bd76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bd7a:	bfac      	ite	ge
 800bd7c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bd7e:	81a3      	strhlt	r3, [r4, #12]
 800bd80:	bd10      	pop	{r4, pc}

0800bd82 <__swrite>:
 800bd82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd86:	461f      	mov	r7, r3
 800bd88:	898b      	ldrh	r3, [r1, #12]
 800bd8a:	05db      	lsls	r3, r3, #23
 800bd8c:	4605      	mov	r5, r0
 800bd8e:	460c      	mov	r4, r1
 800bd90:	4616      	mov	r6, r2
 800bd92:	d505      	bpl.n	800bda0 <__swrite+0x1e>
 800bd94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd98:	2302      	movs	r3, #2
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	f000 f868 	bl	800be70 <_lseek_r>
 800bda0:	89a3      	ldrh	r3, [r4, #12]
 800bda2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bda6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bdaa:	81a3      	strh	r3, [r4, #12]
 800bdac:	4632      	mov	r2, r6
 800bdae:	463b      	mov	r3, r7
 800bdb0:	4628      	mov	r0, r5
 800bdb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdb6:	f000 b817 	b.w	800bde8 <_write_r>

0800bdba <__sseek>:
 800bdba:	b510      	push	{r4, lr}
 800bdbc:	460c      	mov	r4, r1
 800bdbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdc2:	f000 f855 	bl	800be70 <_lseek_r>
 800bdc6:	1c43      	adds	r3, r0, #1
 800bdc8:	89a3      	ldrh	r3, [r4, #12]
 800bdca:	bf15      	itete	ne
 800bdcc:	6560      	strne	r0, [r4, #84]	; 0x54
 800bdce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bdd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bdd6:	81a3      	strheq	r3, [r4, #12]
 800bdd8:	bf18      	it	ne
 800bdda:	81a3      	strhne	r3, [r4, #12]
 800bddc:	bd10      	pop	{r4, pc}

0800bdde <__sclose>:
 800bdde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bde2:	f000 b813 	b.w	800be0c <_close_r>
	...

0800bde8 <_write_r>:
 800bde8:	b538      	push	{r3, r4, r5, lr}
 800bdea:	4d07      	ldr	r5, [pc, #28]	; (800be08 <_write_r+0x20>)
 800bdec:	4604      	mov	r4, r0
 800bdee:	4608      	mov	r0, r1
 800bdf0:	4611      	mov	r1, r2
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	602a      	str	r2, [r5, #0]
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	f7f8 fe87 	bl	8004b0a <_write>
 800bdfc:	1c43      	adds	r3, r0, #1
 800bdfe:	d102      	bne.n	800be06 <_write_r+0x1e>
 800be00:	682b      	ldr	r3, [r5, #0]
 800be02:	b103      	cbz	r3, 800be06 <_write_r+0x1e>
 800be04:	6023      	str	r3, [r4, #0]
 800be06:	bd38      	pop	{r3, r4, r5, pc}
 800be08:	20002ab8 	.word	0x20002ab8

0800be0c <_close_r>:
 800be0c:	b538      	push	{r3, r4, r5, lr}
 800be0e:	4d06      	ldr	r5, [pc, #24]	; (800be28 <_close_r+0x1c>)
 800be10:	2300      	movs	r3, #0
 800be12:	4604      	mov	r4, r0
 800be14:	4608      	mov	r0, r1
 800be16:	602b      	str	r3, [r5, #0]
 800be18:	f7f8 fe93 	bl	8004b42 <_close>
 800be1c:	1c43      	adds	r3, r0, #1
 800be1e:	d102      	bne.n	800be26 <_close_r+0x1a>
 800be20:	682b      	ldr	r3, [r5, #0]
 800be22:	b103      	cbz	r3, 800be26 <_close_r+0x1a>
 800be24:	6023      	str	r3, [r4, #0]
 800be26:	bd38      	pop	{r3, r4, r5, pc}
 800be28:	20002ab8 	.word	0x20002ab8

0800be2c <_fstat_r>:
 800be2c:	b538      	push	{r3, r4, r5, lr}
 800be2e:	4d07      	ldr	r5, [pc, #28]	; (800be4c <_fstat_r+0x20>)
 800be30:	2300      	movs	r3, #0
 800be32:	4604      	mov	r4, r0
 800be34:	4608      	mov	r0, r1
 800be36:	4611      	mov	r1, r2
 800be38:	602b      	str	r3, [r5, #0]
 800be3a:	f7f8 fe8e 	bl	8004b5a <_fstat>
 800be3e:	1c43      	adds	r3, r0, #1
 800be40:	d102      	bne.n	800be48 <_fstat_r+0x1c>
 800be42:	682b      	ldr	r3, [r5, #0]
 800be44:	b103      	cbz	r3, 800be48 <_fstat_r+0x1c>
 800be46:	6023      	str	r3, [r4, #0]
 800be48:	bd38      	pop	{r3, r4, r5, pc}
 800be4a:	bf00      	nop
 800be4c:	20002ab8 	.word	0x20002ab8

0800be50 <_isatty_r>:
 800be50:	b538      	push	{r3, r4, r5, lr}
 800be52:	4d06      	ldr	r5, [pc, #24]	; (800be6c <_isatty_r+0x1c>)
 800be54:	2300      	movs	r3, #0
 800be56:	4604      	mov	r4, r0
 800be58:	4608      	mov	r0, r1
 800be5a:	602b      	str	r3, [r5, #0]
 800be5c:	f7f8 fe8d 	bl	8004b7a <_isatty>
 800be60:	1c43      	adds	r3, r0, #1
 800be62:	d102      	bne.n	800be6a <_isatty_r+0x1a>
 800be64:	682b      	ldr	r3, [r5, #0]
 800be66:	b103      	cbz	r3, 800be6a <_isatty_r+0x1a>
 800be68:	6023      	str	r3, [r4, #0]
 800be6a:	bd38      	pop	{r3, r4, r5, pc}
 800be6c:	20002ab8 	.word	0x20002ab8

0800be70 <_lseek_r>:
 800be70:	b538      	push	{r3, r4, r5, lr}
 800be72:	4d07      	ldr	r5, [pc, #28]	; (800be90 <_lseek_r+0x20>)
 800be74:	4604      	mov	r4, r0
 800be76:	4608      	mov	r0, r1
 800be78:	4611      	mov	r1, r2
 800be7a:	2200      	movs	r2, #0
 800be7c:	602a      	str	r2, [r5, #0]
 800be7e:	461a      	mov	r2, r3
 800be80:	f7f8 fe86 	bl	8004b90 <_lseek>
 800be84:	1c43      	adds	r3, r0, #1
 800be86:	d102      	bne.n	800be8e <_lseek_r+0x1e>
 800be88:	682b      	ldr	r3, [r5, #0]
 800be8a:	b103      	cbz	r3, 800be8e <_lseek_r+0x1e>
 800be8c:	6023      	str	r3, [r4, #0]
 800be8e:	bd38      	pop	{r3, r4, r5, pc}
 800be90:	20002ab8 	.word	0x20002ab8

0800be94 <_read_r>:
 800be94:	b538      	push	{r3, r4, r5, lr}
 800be96:	4d07      	ldr	r5, [pc, #28]	; (800beb4 <_read_r+0x20>)
 800be98:	4604      	mov	r4, r0
 800be9a:	4608      	mov	r0, r1
 800be9c:	4611      	mov	r1, r2
 800be9e:	2200      	movs	r2, #0
 800bea0:	602a      	str	r2, [r5, #0]
 800bea2:	461a      	mov	r2, r3
 800bea4:	f7f8 fe14 	bl	8004ad0 <_read>
 800bea8:	1c43      	adds	r3, r0, #1
 800beaa:	d102      	bne.n	800beb2 <_read_r+0x1e>
 800beac:	682b      	ldr	r3, [r5, #0]
 800beae:	b103      	cbz	r3, 800beb2 <_read_r+0x1e>
 800beb0:	6023      	str	r3, [r4, #0]
 800beb2:	bd38      	pop	{r3, r4, r5, pc}
 800beb4:	20002ab8 	.word	0x20002ab8

0800beb8 <round>:
 800beb8:	ec51 0b10 	vmov	r0, r1, d0
 800bebc:	b570      	push	{r4, r5, r6, lr}
 800bebe:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800bec2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800bec6:	2c13      	cmp	r4, #19
 800bec8:	ee10 2a10 	vmov	r2, s0
 800becc:	460b      	mov	r3, r1
 800bece:	dc19      	bgt.n	800bf04 <round+0x4c>
 800bed0:	2c00      	cmp	r4, #0
 800bed2:	da09      	bge.n	800bee8 <round+0x30>
 800bed4:	3401      	adds	r4, #1
 800bed6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800beda:	d103      	bne.n	800bee4 <round+0x2c>
 800bedc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bee0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bee4:	2200      	movs	r2, #0
 800bee6:	e028      	b.n	800bf3a <round+0x82>
 800bee8:	4d15      	ldr	r5, [pc, #84]	; (800bf40 <round+0x88>)
 800beea:	4125      	asrs	r5, r4
 800beec:	ea01 0605 	and.w	r6, r1, r5
 800bef0:	4332      	orrs	r2, r6
 800bef2:	d00e      	beq.n	800bf12 <round+0x5a>
 800bef4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800bef8:	fa42 f404 	asr.w	r4, r2, r4
 800befc:	4423      	add	r3, r4
 800befe:	ea23 0305 	bic.w	r3, r3, r5
 800bf02:	e7ef      	b.n	800bee4 <round+0x2c>
 800bf04:	2c33      	cmp	r4, #51	; 0x33
 800bf06:	dd07      	ble.n	800bf18 <round+0x60>
 800bf08:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800bf0c:	d101      	bne.n	800bf12 <round+0x5a>
 800bf0e:	f7f4 f9dd 	bl	80002cc <__adddf3>
 800bf12:	ec41 0b10 	vmov	d0, r0, r1
 800bf16:	bd70      	pop	{r4, r5, r6, pc}
 800bf18:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800bf1c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800bf20:	40f5      	lsrs	r5, r6
 800bf22:	4228      	tst	r0, r5
 800bf24:	d0f5      	beq.n	800bf12 <round+0x5a>
 800bf26:	2101      	movs	r1, #1
 800bf28:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800bf2c:	fa01 f404 	lsl.w	r4, r1, r4
 800bf30:	1912      	adds	r2, r2, r4
 800bf32:	bf28      	it	cs
 800bf34:	185b      	addcs	r3, r3, r1
 800bf36:	ea22 0205 	bic.w	r2, r2, r5
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	4610      	mov	r0, r2
 800bf3e:	e7e8      	b.n	800bf12 <round+0x5a>
 800bf40:	000fffff 	.word	0x000fffff

0800bf44 <_init>:
 800bf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf46:	bf00      	nop
 800bf48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf4a:	bc08      	pop	{r3}
 800bf4c:	469e      	mov	lr, r3
 800bf4e:	4770      	bx	lr

0800bf50 <_fini>:
 800bf50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf52:	bf00      	nop
 800bf54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf56:	bc08      	pop	{r3}
 800bf58:	469e      	mov	lr, r3
 800bf5a:	4770      	bx	lr
