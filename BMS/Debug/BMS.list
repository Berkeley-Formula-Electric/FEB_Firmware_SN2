
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a19c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  0800a370  0800a370  0001a370  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a97c  0800a97c  000225a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a97c  0800a97c  0001a97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a984  0800a984  000225a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a984  0800a984  0001a984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a988  0800a988  0001a988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000025a4  20000000  0800a98c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  200025a4  0800cf30  000225a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000298c  0800cf30  0002298c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000225a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b15  00000000  00000000  000225d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ea  00000000  00000000  000370e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  0003a2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  0003b3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002550c  00000000  00000000  0003c398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001640e  00000000  00000000  000618a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0516  00000000  00000000  00077cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001481c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005724  00000000  00000000  00148218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200025a4 	.word	0x200025a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a354 	.word	0x0800a354

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200025a8 	.word	0x200025a8
 800020c:	0800a354 	.word	0x0800a354

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b974 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <FEB_BMS_Precharge_Open>:
extern CAN_HandleTypeDef hcan1;
extern UART_HandleTypeDef huart2;

// ********************************** Functions **********************************

void FEB_BMS_Precharge_Open(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <FEB_BMS_Precharge_Open+0x14>)
 8000fd6:	f004 fadb 	bl	8005590 <HAL_GPIO_WritePin>
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40020800 	.word	0x40020800

08000fe4 <FEB_BMS_Precharge_Close>:

void FEB_BMS_Precharge_Close(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2104      	movs	r1, #4
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <FEB_BMS_Precharge_Close+0x14>)
 8000fee:	f004 facf 	bl	8005590 <HAL_GPIO_WritePin>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40020800 	.word	0x40020800

08000ffc <FEB_BMS_Shutdown_Startup>:
extern CAN_HandleTypeDef hcan1;
extern UART_HandleTypeDef huart2;

// ********************************** Functions **********************************

void FEB_BMS_Shutdown_Startup(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	2102      	movs	r1, #2
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <FEB_BMS_Shutdown_Startup+0x14>)
 8001006:	f004 fac3 	bl	8005590 <HAL_GPIO_WritePin>
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40020800 	.word	0x40020800

08001014 <FEB_BMS_Shutdown_Initiate>:

void FEB_BMS_Shutdown_Initiate(void) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b0a0      	sub	sp, #128	; 0x80
 8001018:	af00      	add	r7, sp, #0
	// Shutdown Circuit
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	2102      	movs	r1, #2
 800101e:	480a      	ldr	r0, [pc, #40]	; (8001048 <FEB_BMS_Shutdown_Initiate+0x34>)
 8001020:	f004 fab6 	bl	8005590 <HAL_GPIO_WritePin>

	// Broadcast Message
	char str[128];
	sprintf(str, "Shutdown!\n");
 8001024:	463b      	mov	r3, r7
 8001026:	4909      	ldr	r1, [pc, #36]	; (800104c <FEB_BMS_Shutdown_Initiate+0x38>)
 8001028:	4618      	mov	r0, r3
 800102a:	f006 ffb9 	bl	8007fa0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 100);
 800102e:	463b      	mov	r3, r7
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff f8ed 	bl	8000210 <strlen>
 8001036:	4603      	mov	r3, r0
 8001038:	b29a      	uxth	r2, r3
 800103a:	4639      	mov	r1, r7
 800103c:	2364      	movs	r3, #100	; 0x64
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <FEB_BMS_Shutdown_Initiate+0x3c>)
 8001040:	f005 fe9d 	bl	8006d7e <HAL_UART_Transmit>
	if (FEB_LTC6811_Balance_Cells_State == 1) {
		FEB_LTC6811_Clear_Balance_Cells();
	}

	// Do nothing
	while (1) {}
 8001044:	e7fe      	b.n	8001044 <FEB_BMS_Shutdown_Initiate+0x30>
 8001046:	bf00      	nop
 8001048:	40020800 	.word	0x40020800
 800104c:	0800a370 	.word	0x0800a370
 8001050:	2000292c 	.word	0x2000292c

08001054 <FEB_BMS_State_Validate>:

#include "FEB_BMS_State.h"

// ********************************** Functions **********************************

void FEB_BMS_State_Validate(void) {
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
	if (FEB_CAN_CHARGER_START_CHARGE == 1 && FEB_LTC6811_Balance_Cells_State == 1) {
		FEB_BMS_Shutdown_Initiate();
	}
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <FEB_CAN_Init>:
uint8_t FEB_CAN_RxData[8];
uint32_t FEB_CAN_TxMailbox;

// ******************** CAN ********************

void FEB_CAN_Init() {
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	FEB_CAN_Filter_Config();
 8001068:	f000 f814 	bl	8001094 <FEB_CAN_Filter_Config>
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800106c:	4807      	ldr	r0, [pc, #28]	; (800108c <FEB_CAN_Init+0x28>)
 800106e:	f003 fc3d 	bl	80048ec <HAL_CAN_Start>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <FEB_CAN_Init+0x18>
		FEB_BMS_Shutdown_Initiate();
 8001078:	f7ff ffcc 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
	}
	HAL_CAN_ActivateNotification(&hcan1, FEB_CAN_FIFO_Interrupt);
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <FEB_CAN_Init+0x2c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	4802      	ldr	r0, [pc, #8]	; (800108c <FEB_CAN_Init+0x28>)
 8001084:	f003 fd88 	bl	8004b98 <HAL_CAN_ActivateNotification>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20002884 	.word	0x20002884
 8001090:	20000000 	.word	0x20000000

08001094 <FEB_CAN_Filter_Config>:

void FEB_CAN_Filter_Config() {
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
	uint8_t bank = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	71fb      	strb	r3, [r7, #7]
	bank = FEB_CAN_IVT_Filter_Config(&hcan1, FEB_CAN_FIFO_Assignment, bank);
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <FEB_CAN_Filter_Config+0x38>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	79fa      	ldrb	r2, [r7, #7]
 80010a4:	4619      	mov	r1, r3
 80010a6:	480a      	ldr	r0, [pc, #40]	; (80010d0 <FEB_CAN_Filter_Config+0x3c>)
 80010a8:	f000 f8ea 	bl	8001280 <FEB_CAN_IVT_Filter_Config>
 80010ac:	4603      	mov	r3, r0
 80010ae:	71fb      	strb	r3, [r7, #7]
	bank = FEB_CAN_Charger_Filter_Config(&hcan1, FEB_CAN_FIFO_Assignment, bank);
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <FEB_CAN_Filter_Config+0x38>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	79fa      	ldrb	r2, [r7, #7]
 80010b6:	4619      	mov	r1, r3
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <FEB_CAN_Filter_Config+0x3c>)
 80010ba:	f000 f834 	bl	8001126 <FEB_CAN_Charger_Filter_Config>
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200025dc 	.word	0x200025dc
 80010d0:	20002884 	.word	0x20002884

080010d4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, FEB_CAN_FIFO_Assignment, &FEB_CAN_RxHeader, FEB_CAN_RxData) == HAL_OK) {
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80010e4:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f003 fc44 	bl	8004974 <HAL_CAN_GetRxMessage>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d107      	bne.n	8001102 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
		FEB_CAN_IVT_Store_Msg(&FEB_CAN_RxHeader, FEB_CAN_RxData);
 80010f2:	4907      	ldr	r1, [pc, #28]	; (8001110 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80010f4:	4807      	ldr	r0, [pc, #28]	; (8001114 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80010f6:	f000 f903 	bl	8001300 <FEB_CAN_IVT_Store_Msg>
		FEB_CAN_Charger_Store_Msg(&FEB_CAN_RxHeader, FEB_CAN_RxData);
 80010fa:	4905      	ldr	r1, [pc, #20]	; (8001110 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80010fe:	f000 f845 	bl	800118c <FEB_CAN_Charger_Store_Msg>
	}
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200025dc 	.word	0x200025dc
 8001110:	200025e0 	.word	0x200025e0
 8001114:	200025c0 	.word	0x200025c0

08001118 <FEB_CAN_Charger_Init>:

// ********************************** Functions **********************************

// ******************** Startup ********************

void FEB_CAN_Charger_Init() {
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
	if (FEB_CAN_CHARGER_START_CHARGE == 0) {
		return;
 800111c:	bf00      	nop
	FEB_CAN_Charger_BMS_Message.max_voltage = (uint16_t) (MAX_VOLTAGE * CELLS_PER_BANK * NUM_BANKS * 10);
	FEB_CAN_Charger_BMS_Message.max_current = (uint16_t) (MAX_CHARGING_CURRENT * 10);
	FEB_CAN_Charger_BMS_Message.control = 0;

	FEB_CAN_Charger_State_Bool = 0;
}
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <FEB_CAN_Charger_Filter_Config>:

// ******************** CAN ********************

uint8_t FEB_CAN_Charger_Filter_Config(CAN_HandleTypeDef* hcan, uint8_t FIFO_Assignment, uint8_t bank) {
 8001126:	b580      	push	{r7, lr}
 8001128:	b08c      	sub	sp, #48	; 0x30
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	460b      	mov	r3, r1
 8001130:	70fb      	strb	r3, [r7, #3]
 8001132:	4613      	mov	r3, r2
 8001134:	70bb      	strb	r3, [r7, #2]
	CAN_FilterTypeDef my_can_filter_config;

	my_can_filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8001136:	2301      	movs	r3, #1
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
	my_can_filter_config.FilterBank = bank;
 800113a:	78bb      	ldrb	r3, [r7, #2]
 800113c:	61fb      	str	r3, [r7, #28]
	my_can_filter_config.FilterFIFOAssignment = FIFO_Assignment;
 800113e:	78fb      	ldrb	r3, [r7, #3]
 8001140:	61bb      	str	r3, [r7, #24]
	my_can_filter_config.FilterIdHigh = FEB_CAN_CHARGER_CHARGER_ID >> 13; 			// First 16 bits
 8001142:	f24c 73fa 	movw	r3, #51194	; 0xc7fa
 8001146:	60bb      	str	r3, [r7, #8]
	my_can_filter_config.FilterIdLow = (FEB_CAN_CHARGER_CHARGER_ID & 0x1FFF) << 3;	// Last 13 bits
 8001148:	f248 7328 	movw	r3, #34600	; 0x8728
 800114c:	60fb      	str	r3, [r7, #12]
	my_can_filter_config.FilterMaskIdHigh = 0xFFFF; 								// Mask first 16 bits
 800114e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001152:	613b      	str	r3, [r7, #16]
	my_can_filter_config.FilterMaskIdLow = 0xFFF8;									// Mask last 13 bits
 8001154:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001158:	617b      	str	r3, [r7, #20]
	my_can_filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
	my_can_filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 800115e:	2301      	movs	r3, #1
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
	my_can_filter_config.SlaveStartFilterBank = 27;
 8001162:	231b      	movs	r3, #27
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_CAN_ConfigFilter(hcan, &my_can_filter_config)) {
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	4619      	mov	r1, r3
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f003 fadd 	bl	800472c <HAL_CAN_ConfigFilter>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <FEB_CAN_Charger_Filter_Config+0x56>
		Error_Handler();
 8001178:	f002 fe72 	bl	8003e60 <Error_Handler>
	}

	return ++bank;
 800117c:	78bb      	ldrb	r3, [r7, #2]
 800117e:	3301      	adds	r3, #1
 8001180:	70bb      	strb	r3, [r7, #2]
 8001182:	78bb      	ldrb	r3, [r7, #2]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3730      	adds	r7, #48	; 0x30
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <FEB_CAN_Charger_Store_Msg>:
	if (HAL_CAN_AddTxMessage(hcan, &FEB_CAN_TxHeader, FEB_CAN_TxData, &FEB_CAN_TxMailbox) != HAL_OK) {
	  Error_Handler();
	}
}

void FEB_CAN_Charger_Store_Msg(CAN_RxHeaderTypeDef* pHeader, uint8_t RxData[]) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
	switch(pHeader->ExtId) {
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	4a17      	ldr	r2, [pc, #92]	; (80011f8 <FEB_CAN_Charger_Store_Msg+0x6c>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d127      	bne.n	80011f0 <FEB_CAN_Charger_Store_Msg+0x64>
	    	case FEB_CAN_CHARGER_CHARGER_ID:
	    		FEB_CAN_Charger_Charger_Message.operating_voltage = (RxData[0] << 8) + RxData[1];
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	4413      	add	r3, r2
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <FEB_CAN_Charger_Store_Msg+0x70>)
 80011b8:	801a      	strh	r2, [r3, #0]
	    		FEB_CAN_Charger_Charger_Message.operating_current = (RxData[2] << 8) + RxData[3];
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	3302      	adds	r3, #2
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	3303      	adds	r3, #3
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	4413      	add	r3, r2
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <FEB_CAN_Charger_Store_Msg+0x70>)
 80011d4:	805a      	strh	r2, [r3, #2]
	    		FEB_CAN_Charger_Charger_Message.status = RxData[4];
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	3304      	adds	r3, #4
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <FEB_CAN_Charger_Store_Msg+0x70>)
 80011e0:	809a      	strh	r2, [r3, #4]
				FEB_CAN_Charger_Validate_Status(RxData[4]);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	3304      	adds	r3, #4
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 f809 	bl	8001200 <FEB_CAN_Charger_Validate_Status>
				break;
 80011ee:	bf00      	nop
	}
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	18ff50e5 	.word	0x18ff50e5
 80011fc:	200025e8 	.word	0x200025e8

08001200 <FEB_CAN_Charger_Validate_Status>:



// ******************** Charger Process Data ********************

void FEB_CAN_Charger_Validate_Status(uint8_t status) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
	// Failure bits, 0 (no error), 1 (error)
	uint8_t hardware_failure 			= (status >> 7) & 0b1;
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	09db      	lsrs	r3, r3, #7
 800120e:	73fb      	strb	r3, [r7, #15]
	uint8_t temperature_failure 		= (status >> 6) & 0b1;
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	099b      	lsrs	r3, r3, #6
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	73bb      	strb	r3, [r7, #14]
	uint8_t input_voltage_failure 		= (status >> 5) & 0b1;
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	b2db      	uxtb	r3, r3
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	737b      	strb	r3, [r7, #13]
	uint8_t starting_state_failure 		= (status >> 4) & 0b1;
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	091b      	lsrs	r3, r3, #4
 800122c:	b2db      	uxtb	r3, r3
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	733b      	strb	r3, [r7, #12]
	uint8_t communication_state_failure = (status >> 3) & 0b1;
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	08db      	lsrs	r3, r3, #3
 8001238:	b2db      	uxtb	r3, r3
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	72fb      	strb	r3, [r7, #11]

	if (hardware_failure == 1 			||
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d00b      	beq.n	800125e <FEB_CAN_Charger_Validate_Status+0x5e>
 8001246:	7bbb      	ldrb	r3, [r7, #14]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d008      	beq.n	800125e <FEB_CAN_Charger_Validate_Status+0x5e>
		temperature_failure == 1 		||
 800124c:	7b7b      	ldrb	r3, [r7, #13]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d005      	beq.n	800125e <FEB_CAN_Charger_Validate_Status+0x5e>
		input_voltage_failure == 1		||
 8001252:	7b3b      	ldrb	r3, [r7, #12]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d002      	beq.n	800125e <FEB_CAN_Charger_Validate_Status+0x5e>
		starting_state_failure == 1		||
 8001258:	7afb      	ldrb	r3, [r7, #11]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d101      	bne.n	8001262 <FEB_CAN_Charger_Validate_Status+0x62>
		communication_state_failure == 1) {
		FEB_BMS_Shutdown_Initiate();
 800125e:	f7ff fed9 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
	}
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <FEB_CAN_Charger_Process>:

void FEB_CAN_Charger_Process(CAN_HandleTypeDef* hcan) {
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
	if (FEB_CAN_CHARGER_START_CHARGE == 0 || FEB_CAN_Charger_State_Bool == 1) {
		return;
 8001272:	bf00      	nop
	if (FEB_LTC6811_Cells_Charged() == 1) {
		FEB_CAN_Charger_Stop_Charge(hcan);
	} else {
		FEB_CAN_Charger_Transmit(hcan);
	}
}
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <FEB_CAN_IVT_Filter_Config>:
// ********************************** Functions **********************************


// ******************** CAN ********************

uint8_t FEB_CAN_IVT_Filter_Config(CAN_HandleTypeDef* hcan, uint8_t FIFO_Assignment, uint8_t bank) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b08e      	sub	sp, #56	; 0x38
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	70fb      	strb	r3, [r7, #3]
 800128c:	4613      	mov	r3, r2
 800128e:	70bb      	strb	r3, [r7, #2]
	for (int i = 0; i < 4; i++, bank++) {
 8001290:	2300      	movs	r3, #0
 8001292:	637b      	str	r3, [r7, #52]	; 0x34
 8001294:	e029      	b.n	80012ea <FEB_CAN_IVT_Filter_Config+0x6a>
		CAN_FilterTypeDef filter_config;

		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8001296:	2301      	movs	r3, #1
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
		filter_config.FilterBank = bank;
 800129a:	78bb      	ldrb	r3, [r7, #2]
 800129c:	623b      	str	r3, [r7, #32]
		filter_config.FilterFIFOAssignment = FIFO_Assignment;
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	61fb      	str	r3, [r7, #28]
		filter_config.FilterIdHigh = FEB_CAN_IVT_Filter_ID_Arr[i] << 5;
 80012a2:	4a16      	ldr	r2, [pc, #88]	; (80012fc <FEB_CAN_IVT_Filter_Config+0x7c>)
 80012a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012aa:	015b      	lsls	r3, r3, #5
 80012ac:	60fb      	str	r3, [r7, #12]
		filter_config.FilterIdLow = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
		filter_config.FilterMaskIdHigh = 0x7FF << 5;
 80012b2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80012b6:	617b      	str	r3, [r7, #20]
		filter_config.FilterMaskIdLow = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 80012c0:	2301      	movs	r3, #1
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.SlaveStartFilterBank = 27;
 80012c4:	231b      	movs	r3, #27
 80012c6:	633b      	str	r3, [r7, #48]	; 0x30

		if(HAL_CAN_ConfigFilter(hcan, &filter_config)) {
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	4619      	mov	r1, r3
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f003 fa2c 	bl	800472c <HAL_CAN_ConfigFilter>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <FEB_CAN_IVT_Filter_Config+0x5e>
			Error_Handler();
 80012da:	f002 fdc1 	bl	8003e60 <Error_Handler>
	for (int i = 0; i < 4; i++, bank++) {
 80012de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e0:	3301      	adds	r3, #1
 80012e2:	637b      	str	r3, [r7, #52]	; 0x34
 80012e4:	78bb      	ldrb	r3, [r7, #2]
 80012e6:	3301      	adds	r3, #1
 80012e8:	70bb      	strb	r3, [r7, #2]
 80012ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	ddd2      	ble.n	8001296 <FEB_CAN_IVT_Filter_Config+0x16>
		}
	}
	return bank;
 80012f0:	78bb      	ldrb	r3, [r7, #2]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3738      	adds	r7, #56	; 0x38
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000004 	.word	0x20000004

08001300 <FEB_CAN_IVT_Store_Msg>:

void FEB_CAN_IVT_Store_Msg(CAN_RxHeaderTypeDef* pHeader, uint8_t RxData[]) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
	uint32_t value;
    switch(pHeader->StdId) {
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f2a3 5321 	subw	r3, r3, #1313	; 0x521
 8001312:	2b03      	cmp	r3, #3
 8001314:	d87e      	bhi.n	8001414 <FEB_CAN_IVT_Store_Msg+0x114>
 8001316:	a201      	add	r2, pc, #4	; (adr r2, 800131c <FEB_CAN_IVT_Store_Msg+0x1c>)
 8001318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131c:	0800132d 	.word	0x0800132d
 8001320:	08001367 	.word	0x08001367
 8001324:	080013a1 	.word	0x080013a1
 8001328:	080013db 	.word	0x080013db
    	case FEB_CAN_IVT_CURRENT_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	3302      	adds	r3, #2
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	061a      	lsls	r2, r3, #24
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	3303      	adds	r3, #3
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	041b      	lsls	r3, r3, #16
 800133c:	441a      	add	r2, r3
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	3304      	adds	r3, #4
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	4413      	add	r3, r2
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	3205      	adds	r2, #5
 800134c:	7812      	ldrb	r2, [r2, #0]
 800134e:	4413      	add	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
    	    FEB_CAN_IVT_MESSAGE.IVT_Current = unsignedToSignedLong(value);
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f000 f8f2 	bl	800153c <unsignedToSignedLong>
 8001358:	4603      	mov	r3, r0
 800135a:	4a30      	ldr	r2, [pc, #192]	; (800141c <FEB_CAN_IVT_Store_Msg+0x11c>)
 800135c:	6013      	str	r3, [r2, #0]
    	    FEB_CAN_IVT_FLAG.IVT_Current = 1;
 800135e:	4b30      	ldr	r3, [pc, #192]	; (8001420 <FEB_CAN_IVT_Store_Msg+0x120>)
 8001360:	2201      	movs	r2, #1
 8001362:	701a      	strb	r2, [r3, #0]
    		break;
 8001364:	e056      	b.n	8001414 <FEB_CAN_IVT_Store_Msg+0x114>
    	case FEB_CAN_IVT_VOLTAGE1_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	3302      	adds	r3, #2
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	061a      	lsls	r2, r3, #24
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	3303      	adds	r3, #3
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	041b      	lsls	r3, r3, #16
 8001376:	441a      	add	r2, r3
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	3304      	adds	r3, #4
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	4413      	add	r3, r2
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	3205      	adds	r2, #5
 8001386:	7812      	ldrb	r2, [r2, #0]
 8001388:	4413      	add	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]
    	    FEB_CAN_IVT_MESSAGE.IVT_Voltage1 = unsignedToSignedLong(value);
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f000 f8d5 	bl	800153c <unsignedToSignedLong>
 8001392:	4603      	mov	r3, r0
 8001394:	4a21      	ldr	r2, [pc, #132]	; (800141c <FEB_CAN_IVT_Store_Msg+0x11c>)
 8001396:	6053      	str	r3, [r2, #4]
    	    FEB_CAN_IVT_FLAG.IVT_Voltage1 = 1;
 8001398:	4b21      	ldr	r3, [pc, #132]	; (8001420 <FEB_CAN_IVT_Store_Msg+0x120>)
 800139a:	2201      	movs	r2, #1
 800139c:	705a      	strb	r2, [r3, #1]
    		break;
 800139e:	e039      	b.n	8001414 <FEB_CAN_IVT_Store_Msg+0x114>
    	case FEB_CAN_IVT_VOLTAGE2_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	3302      	adds	r3, #2
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	061a      	lsls	r2, r3, #24
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	3303      	adds	r3, #3
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	041b      	lsls	r3, r3, #16
 80013b0:	441a      	add	r2, r3
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	3304      	adds	r3, #4
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	4413      	add	r3, r2
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	3205      	adds	r2, #5
 80013c0:	7812      	ldrb	r2, [r2, #0]
 80013c2:	4413      	add	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]
    	    FEB_CAN_IVT_MESSAGE.IVT_Voltage2 = unsignedToSignedLong(value);
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f000 f8b8 	bl	800153c <unsignedToSignedLong>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4a13      	ldr	r2, [pc, #76]	; (800141c <FEB_CAN_IVT_Store_Msg+0x11c>)
 80013d0:	6093      	str	r3, [r2, #8]
    	    FEB_CAN_IVT_FLAG.IVT_Voltage2 = 1;
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <FEB_CAN_IVT_Store_Msg+0x120>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	709a      	strb	r2, [r3, #2]
    		break;
 80013d8:	e01c      	b.n	8001414 <FEB_CAN_IVT_Store_Msg+0x114>
    	case FEB_CAN_IVT_VOLTAGE3_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	3302      	adds	r3, #2
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	061a      	lsls	r2, r3, #24
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	3303      	adds	r3, #3
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	041b      	lsls	r3, r3, #16
 80013ea:	441a      	add	r2, r3
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	3304      	adds	r3, #4
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	4413      	add	r3, r2
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	3205      	adds	r2, #5
 80013fa:	7812      	ldrb	r2, [r2, #0]
 80013fc:	4413      	add	r3, r2
 80013fe:	60fb      	str	r3, [r7, #12]
    		FEB_CAN_IVT_MESSAGE.IVT_Voltage3 = unsignedToSignedLong(value);
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f000 f89b 	bl	800153c <unsignedToSignedLong>
 8001406:	4603      	mov	r3, r0
 8001408:	4a04      	ldr	r2, [pc, #16]	; (800141c <FEB_CAN_IVT_Store_Msg+0x11c>)
 800140a:	60d3      	str	r3, [r2, #12]
    		FEB_CAN_IVT_FLAG.IVT_Voltage3 = 1;
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <FEB_CAN_IVT_Store_Msg+0x120>)
 800140e:	2201      	movs	r2, #1
 8001410:	70da      	strb	r2, [r3, #3]
    		break;
 8001412:	bf00      	nop
    }
}
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200025f4 	.word	0x200025f4
 8001420:	200025f0 	.word	0x200025f0
 8001424:	00000000 	.word	0x00000000

08001428 <FEB_CAN_IVT_Process>:

// ******************** IVT Process Data  ********************

void FEB_CAN_IVT_Process(void) {
 8001428:	b5b0      	push	{r4, r5, r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
	if (FEB_CAN_CHARGER_START_CHARGE == 1 || FEB_LTC6811_Balance_Cells_State == 1) {
		return;
	}
	if (FEB_CAN_IVT_FLAG.IVT_Current == 1) {
 800142e:	4b40      	ldr	r3, [pc, #256]	; (8001530 <FEB_CAN_IVT_Process+0x108>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d124      	bne.n	8001480 <FEB_CAN_IVT_Process+0x58>
		FEB_CAN_IVT_FLAG.IVT_Current = 0;
 8001436:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <FEB_CAN_IVT_Process+0x108>)
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
		float Ivt_Current_A = (float) FEB_CAN_IVT_MESSAGE.IVT_Voltage3 * 0.001;
 800143c:	4b3d      	ldr	r3, [pc, #244]	; (8001534 <FEB_CAN_IVT_Process+0x10c>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	ee07 3a90 	vmov	s15, r3
 8001444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001448:	ee17 0a90 	vmov	r0, s15
 800144c:	f7ff f89c 	bl	8000588 <__aeabi_f2d>
 8001450:	a333      	add	r3, pc, #204	; (adr r3, 8001520 <FEB_CAN_IVT_Process+0xf8>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	f7ff f8ef 	bl	8000638 <__aeabi_dmul>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f7ff fbe1 	bl	8000c28 <__aeabi_d2f>
 8001466:	4603      	mov	r3, r0
 8001468:	607b      	str	r3, [r7, #4]
		if (Ivt_Current_A > MAX_OPERATING_CURRENT) {
 800146a:	edd7 7a01 	vldr	s15, [r7, #4]
 800146e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001538 <FEB_CAN_IVT_Process+0x110>
 8001472:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147a:	dd01      	ble.n	8001480 <FEB_CAN_IVT_Process+0x58>
			FEB_BMS_Shutdown_Initiate();
 800147c:	f7ff fdca 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
		}
	}
	if (FEB_CAN_IVT_FLAG.IVT_Voltage1 == 1) {
 8001480:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <FEB_CAN_IVT_Process+0x108>)
 8001482:	785b      	ldrb	r3, [r3, #1]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d102      	bne.n	800148e <FEB_CAN_IVT_Process+0x66>
		FEB_CAN_IVT_FLAG.IVT_Voltage1 = 0;
 8001488:	4b29      	ldr	r3, [pc, #164]	; (8001530 <FEB_CAN_IVT_Process+0x108>)
 800148a:	2200      	movs	r2, #0
 800148c:	705a      	strb	r2, [r3, #1]
		// Do something

	}
	if (FEB_CAN_IVT_FLAG.IVT_Voltage2 == 1) {
 800148e:	4b28      	ldr	r3, [pc, #160]	; (8001530 <FEB_CAN_IVT_Process+0x108>)
 8001490:	789b      	ldrb	r3, [r3, #2]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d102      	bne.n	800149c <FEB_CAN_IVT_Process+0x74>
		FEB_CAN_IVT_FLAG.IVT_Voltage2 = 0;
 8001496:	4b26      	ldr	r3, [pc, #152]	; (8001530 <FEB_CAN_IVT_Process+0x108>)
 8001498:	2200      	movs	r2, #0
 800149a:	709a      	strb	r2, [r3, #2]
		// Do Something
	}
	if (FEB_CAN_IVT_FLAG.IVT_Voltage3 == 1) {
 800149c:	4b24      	ldr	r3, [pc, #144]	; (8001530 <FEB_CAN_IVT_Process+0x108>)
 800149e:	78db      	ldrb	r3, [r3, #3]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d138      	bne.n	8001516 <FEB_CAN_IVT_Process+0xee>
		FEB_CAN_IVT_FLAG.IVT_Voltage3 = 0;
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <FEB_CAN_IVT_Process+0x108>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	70da      	strb	r2, [r3, #3]
		float Ivt_Voltage_V = ((float) FEB_CAN_IVT_MESSAGE.IVT_Voltage3) * 0.001;
 80014aa:	4b22      	ldr	r3, [pc, #136]	; (8001534 <FEB_CAN_IVT_Process+0x10c>)
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	ee07 3a90 	vmov	s15, r3
 80014b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b6:	ee17 0a90 	vmov	r0, s15
 80014ba:	f7ff f865 	bl	8000588 <__aeabi_f2d>
 80014be:	a318      	add	r3, pc, #96	; (adr r3, 8001520 <FEB_CAN_IVT_Process+0xf8>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8b8 	bl	8000638 <__aeabi_dmul>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	f7ff fbaa 	bl	8000c28 <__aeabi_d2f>
 80014d4:	4603      	mov	r3, r0
 80014d6:	603b      	str	r3, [r7, #0]
		if (Ivt_Voltage_V > FEB_LTC6811_Total_Bank_Voltage() * 0.9) {
 80014d8:	6838      	ldr	r0, [r7, #0]
 80014da:	f7ff f855 	bl	8000588 <__aeabi_f2d>
 80014de:	4604      	mov	r4, r0
 80014e0:	460d      	mov	r5, r1
 80014e2:	f000 fbb1 	bl	8001c48 <FEB_LTC6811_Total_Bank_Voltage>
 80014e6:	ee10 3a10 	vmov	r3, s0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f84c 	bl	8000588 <__aeabi_f2d>
 80014f0:	a30d      	add	r3, pc, #52	; (adr r3, 8001528 <FEB_CAN_IVT_Process+0x100>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	f7ff f89f 	bl	8000638 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4620      	mov	r0, r4
 8001500:	4629      	mov	r1, r5
 8001502:	f7ff fb29 	bl	8000b58 <__aeabi_dcmpgt>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <FEB_CAN_IVT_Process+0xea>
			// Broadcast Message
			FEB_BMS_Precharge_Close();
 800150c:	f7ff fd6a 	bl	8000fe4 <FEB_BMS_Precharge_Close>
 8001510:	e001      	b.n	8001516 <FEB_CAN_IVT_Process+0xee>
		} else {
			FEB_BMS_Precharge_Open();
 8001512:	f7ff fd5b 	bl	8000fcc <FEB_BMS_Precharge_Open>
		}
	}
}
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bdb0      	pop	{r4, r5, r7, pc}
 800151c:	f3af 8000 	nop.w
 8001520:	d2f1a9fc 	.word	0xd2f1a9fc
 8001524:	3f50624d 	.word	0x3f50624d
 8001528:	cccccccd 	.word	0xcccccccd
 800152c:	3feccccc 	.word	0x3feccccc
 8001530:	200025f0 	.word	0x200025f0
 8001534:	200025f4 	.word	0x200025f4
 8001538:	425c0000 	.word	0x425c0000

0800153c <unsignedToSignedLong>:

long unsignedToSignedLong(uint32_t value) {
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	return (value & 0x7FFFFFFF) - (value & (0b1 << 31));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800154a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <FEB_LTC6811_Setup>:
// Set accumulator
static Accumulator accumulator;

// ********************************** Functions **********************************

void FEB_LTC6811_Setup(void) {
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b089      	sub	sp, #36	; 0x24
 8001560:	af06      	add	r7, sp, #24
	FEB_LTC6811_Config_Cell_Discharge();
 8001562:	f000 f83f 	bl	80015e4 <FEB_LTC6811_Config_Cell_Discharge>

	LTC6811_init_cfg(NUM_IC, accumulator.IC_config);
 8001566:	4917      	ldr	r1, [pc, #92]	; (80015c4 <FEB_LTC6811_Setup+0x68>)
 8001568:	2002      	movs	r0, #2
 800156a:	f001 f89d 	bl	80026a8 <LTC6811_init_cfg>
	for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 800156e:	2300      	movs	r3, #0
 8001570:	71fb      	strb	r3, [r7, #7]
 8001572:	e018      	b.n	80015a6 <FEB_LTC6811_Setup+0x4a>
		LTC6811_set_cfgr(current_ic, accumulator.IC_config, REFON, ADCOPT, GPIOBITS_A, DCCBITS_A, DCTOBITS, UV, OV);
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <FEB_LTC6811_Setup+0x6c>)
 8001576:	7819      	ldrb	r1, [r3, #0]
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <FEB_LTC6811_Setup+0x70>)
 800157a:	781c      	ldrb	r4, [r3, #0]
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <FEB_LTC6811_Setup+0x74>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <FEB_LTC6811_Setup+0x78>)
 8001582:	8812      	ldrh	r2, [r2, #0]
 8001584:	79f8      	ldrb	r0, [r7, #7]
 8001586:	9204      	str	r2, [sp, #16]
 8001588:	9303      	str	r3, [sp, #12]
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <FEB_LTC6811_Setup+0x7c>)
 800158c:	9302      	str	r3, [sp, #8]
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <FEB_LTC6811_Setup+0x80>)
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <FEB_LTC6811_Setup+0x84>)
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	4623      	mov	r3, r4
 8001598:	460a      	mov	r2, r1
 800159a:	490a      	ldr	r1, [pc, #40]	; (80015c4 <FEB_LTC6811_Setup+0x68>)
 800159c:	f001 f893 	bl	80026c6 <LTC6811_set_cfgr>
	for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	3301      	adds	r3, #1
 80015a4:	71fb      	strb	r3, [r7, #7]
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d9e3      	bls.n	8001574 <FEB_LTC6811_Setup+0x18>
	}
	LTC6811_reset_crc_count(NUM_IC, accumulator.IC_config);
 80015ac:	4905      	ldr	r1, [pc, #20]	; (80015c4 <FEB_LTC6811_Setup+0x68>)
 80015ae:	2002      	movs	r0, #2
 80015b0:	f001 f86b 	bl	800268a <LTC6811_reset_crc_count>
	LTC6811_init_reg_limits(NUM_IC, accumulator.IC_config);
 80015b4:	4903      	ldr	r1, [pc, #12]	; (80015c4 <FEB_LTC6811_Setup+0x68>)
 80015b6:	2002      	movs	r0, #2
 80015b8:	f000 ffb2 	bl	8002520 <LTC6811_init_reg_limits>
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd90      	pop	{r4, r7, pc}
 80015c4:	2000262c 	.word	0x2000262c
 80015c8:	2000000c 	.word	0x2000000c
 80015cc:	2000261c 	.word	0x2000261c
 80015d0:	20000016 	.word	0x20000016
 80015d4:	20000018 	.word	0x20000018
 80015d8:	2000001c 	.word	0x2000001c
 80015dc:	20002620 	.word	0x20002620
 80015e0:	20000010 	.word	0x20000010

080015e4 <FEB_LTC6811_Config_Cell_Discharge>:

void FEB_LTC6811_Config_Cell_Discharge(void) {
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NUM_IC; i++) {
 80015ea:	2300      	movs	r3, #0
 80015ec:	71fb      	strb	r3, [r7, #7]
 80015ee:	e016      	b.n	800161e <FEB_LTC6811_Config_Cell_Discharge+0x3a>
		for (uint8_t j = 0; j < CELLS_PER_DAUGHTER_BOARD; j++) {
 80015f0:	2300      	movs	r3, #0
 80015f2:	71bb      	strb	r3, [r7, #6]
 80015f4:	e00d      	b.n	8001612 <FEB_LTC6811_Config_Cell_Discharge+0x2e>
			FEB_LTC6811_Cell_Discharge[i][j] = 0;
 80015f6:	79fa      	ldrb	r2, [r7, #7]
 80015f8:	79b9      	ldrb	r1, [r7, #6]
 80015fa:	480e      	ldr	r0, [pc, #56]	; (8001634 <FEB_LTC6811_Config_Cell_Discharge+0x50>)
 80015fc:	4613      	mov	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4413      	add	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4403      	add	r3, r0
 8001606:	440b      	add	r3, r1
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < CELLS_PER_DAUGHTER_BOARD; j++) {
 800160c:	79bb      	ldrb	r3, [r7, #6]
 800160e:	3301      	adds	r3, #1
 8001610:	71bb      	strb	r3, [r7, #6]
 8001612:	79bb      	ldrb	r3, [r7, #6]
 8001614:	2b0b      	cmp	r3, #11
 8001616:	d9ee      	bls.n	80015f6 <FEB_LTC6811_Config_Cell_Discharge+0x12>
	for (uint8_t i = 0; i < NUM_IC; i++) {
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	3301      	adds	r3, #1
 800161c:	71fb      	strb	r3, [r7, #7]
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d9e5      	bls.n	80015f0 <FEB_LTC6811_Config_Cell_Discharge+0xc>
		}
	}
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20002604 	.word	0x20002604

08001638 <FEB_LTC6811_Poll_Voltage>:

// ******************** Read Voltage ********************

void FEB_LTC6811_Poll_Voltage(void) {
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	FEB_LTC6811_Start_Cell_ADC_Measurement();
 800163c:	f000 f806 	bl	800164c <FEB_LTC6811_Start_Cell_ADC_Measurement>
	FEB_LTC6811_Read_Cell_Voltage_Registers();
 8001640:	f000 f812 	bl	8001668 <FEB_LTC6811_Read_Cell_Voltage_Registers>
	FEB_LTC6811_Store_Voltage();
 8001644:	f000 f81e 	bl	8001684 <FEB_LTC6811_Store_Voltage>
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}

0800164c <FEB_LTC6811_Start_Cell_ADC_Measurement>:

void FEB_LTC6811_Start_Cell_ADC_Measurement(void) {
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 8001650:	2002      	movs	r0, #2
 8001652:	f001 f876 	bl	8002742 <wakeup_sleep>
	LTC6811_adcv(ADC_CONVERSION_MODE, ADC_DCP, CELL_CH_TO_CONVERT);
 8001656:	2200      	movs	r2, #0
 8001658:	2101      	movs	r1, #1
 800165a:	2002      	movs	r0, #2
 800165c:	f000 ffbc 	bl	80025d8 <LTC6811_adcv>
	LTC6811_pollAdc();
 8001660:	f001 f80c 	bl	800267c <LTC6811_pollAdc>
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}

08001668 <FEB_LTC6811_Read_Cell_Voltage_Registers>:

void FEB_LTC6811_Read_Cell_Voltage_Registers(void) {
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 800166c:	2002      	movs	r0, #2
 800166e:	f001 f868 	bl	8002742 <wakeup_sleep>
	LTC6811_rdcv(SEL_ALL_REG, NUM_IC, accumulator.IC_config);
 8001672:	4a03      	ldr	r2, [pc, #12]	; (8001680 <FEB_LTC6811_Read_Cell_Voltage_Registers+0x18>)
 8001674:	2102      	movs	r1, #2
 8001676:	2000      	movs	r0, #0
 8001678:	f000 ffd3 	bl	8002622 <LTC6811_rdcv>
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	2000262c 	.word	0x2000262c

08001684 <FEB_LTC6811_Store_Voltage>:

void FEB_LTC6811_Store_Voltage(void) {
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
    for (uint16_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 800168a:	2300      	movs	r3, #0
 800168c:	80fb      	strh	r3, [r7, #6]
 800168e:	e1b8      	b.n	8001a02 <FEB_LTC6811_Store_Voltage+0x37e>
    	accumulator.banks[bank_idx].cells[16].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[0]);
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4ad3      	ldr	r2, [pc, #844]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 8001696:	21e8      	movs	r1, #232	; 0xe8
 8001698:	fb01 f303 	mul.w	r3, r1, r3
 800169c:	4413      	add	r3, r2
 800169e:	331e      	adds	r3, #30
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	88fc      	ldrh	r4, [r7, #6]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 f9b7 	bl	8001a18 <FEB_LTC6811_Convert_Voltage>
 80016aa:	eef0 7a40 	vmov.f32	s15, s0
 80016ae:	4acd      	ldr	r2, [pc, #820]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 80016b0:	4623      	mov	r3, r4
 80016b2:	011b      	lsls	r3, r3, #4
 80016b4:	4423      	add	r3, r4
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	4413      	add	r3, r2
 80016ba:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80016be:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[15].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[1]);
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4ac7      	ldr	r2, [pc, #796]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 80016c8:	21e8      	movs	r1, #232	; 0xe8
 80016ca:	fb01 f303 	mul.w	r3, r1, r3
 80016ce:	4413      	add	r3, r2
 80016d0:	3320      	adds	r3, #32
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	88fc      	ldrh	r4, [r7, #6]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 f99e 	bl	8001a18 <FEB_LTC6811_Convert_Voltage>
 80016dc:	eef0 7a40 	vmov.f32	s15, s0
 80016e0:	4ac0      	ldr	r2, [pc, #768]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 80016e2:	4623      	mov	r3, r4
 80016e4:	011b      	lsls	r3, r3, #4
 80016e6:	4423      	add	r3, r4
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	4413      	add	r3, r2
 80016ec:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80016f0:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[14].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[2]);
 80016f4:	88fb      	ldrh	r3, [r7, #6]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4aba      	ldr	r2, [pc, #744]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 80016fa:	21e8      	movs	r1, #232	; 0xe8
 80016fc:	fb01 f303 	mul.w	r3, r1, r3
 8001700:	4413      	add	r3, r2
 8001702:	3322      	adds	r3, #34	; 0x22
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	88fc      	ldrh	r4, [r7, #6]
 8001708:	4618      	mov	r0, r3
 800170a:	f000 f985 	bl	8001a18 <FEB_LTC6811_Convert_Voltage>
 800170e:	eef0 7a40 	vmov.f32	s15, s0
 8001712:	4ab4      	ldr	r2, [pc, #720]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 8001714:	4623      	mov	r3, r4
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	4423      	add	r3, r4
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4413      	add	r3, r2
 800171e:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8001722:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[13].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[3]);
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	4aae      	ldr	r2, [pc, #696]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 800172c:	21e8      	movs	r1, #232	; 0xe8
 800172e:	fb01 f303 	mul.w	r3, r1, r3
 8001732:	4413      	add	r3, r2
 8001734:	3324      	adds	r3, #36	; 0x24
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	88fc      	ldrh	r4, [r7, #6]
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f96c 	bl	8001a18 <FEB_LTC6811_Convert_Voltage>
 8001740:	eef0 7a40 	vmov.f32	s15, s0
 8001744:	4aa7      	ldr	r2, [pc, #668]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 8001746:	4623      	mov	r3, r4
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	4423      	add	r3, r4
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	4413      	add	r3, r2
 8001750:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8001754:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[12].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[6]);
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4aa1      	ldr	r2, [pc, #644]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 800175e:	21e8      	movs	r1, #232	; 0xe8
 8001760:	fb01 f303 	mul.w	r3, r1, r3
 8001764:	4413      	add	r3, r2
 8001766:	332a      	adds	r3, #42	; 0x2a
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	88fc      	ldrh	r4, [r7, #6]
 800176c:	4618      	mov	r0, r3
 800176e:	f000 f953 	bl	8001a18 <FEB_LTC6811_Convert_Voltage>
 8001772:	eef0 7a40 	vmov.f32	s15, s0
 8001776:	4a9b      	ldr	r2, [pc, #620]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 8001778:	4623      	mov	r3, r4
 800177a:	011b      	lsls	r3, r3, #4
 800177c:	4423      	add	r3, r4
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	4413      	add	r3, r2
 8001782:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8001786:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[11].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[7]);
 800178a:	88fb      	ldrh	r3, [r7, #6]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4a95      	ldr	r2, [pc, #596]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 8001790:	21e8      	movs	r1, #232	; 0xe8
 8001792:	fb01 f303 	mul.w	r3, r1, r3
 8001796:	4413      	add	r3, r2
 8001798:	332c      	adds	r3, #44	; 0x2c
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	88fc      	ldrh	r4, [r7, #6]
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f93a 	bl	8001a18 <FEB_LTC6811_Convert_Voltage>
 80017a4:	eef0 7a40 	vmov.f32	s15, s0
 80017a8:	4a8e      	ldr	r2, [pc, #568]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 80017aa:	4623      	mov	r3, r4
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	4423      	add	r3, r4
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	4413      	add	r3, r2
 80017b4:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 80017b8:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[10].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[8]);
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4a88      	ldr	r2, [pc, #544]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 80017c2:	21e8      	movs	r1, #232	; 0xe8
 80017c4:	fb01 f303 	mul.w	r3, r1, r3
 80017c8:	4413      	add	r3, r2
 80017ca:	332e      	adds	r3, #46	; 0x2e
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	88fc      	ldrh	r4, [r7, #6]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 f921 	bl	8001a18 <FEB_LTC6811_Convert_Voltage>
 80017d6:	eef0 7a40 	vmov.f32	s15, s0
 80017da:	4a82      	ldr	r2, [pc, #520]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 80017dc:	4623      	mov	r3, r4
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	4423      	add	r3, r4
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4413      	add	r3, r2
 80017e6:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80017ea:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[9].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[9]);
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4a7c      	ldr	r2, [pc, #496]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 80017f4:	21e8      	movs	r1, #232	; 0xe8
 80017f6:	fb01 f303 	mul.w	r3, r1, r3
 80017fa:	4413      	add	r3, r2
 80017fc:	3330      	adds	r3, #48	; 0x30
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	88fc      	ldrh	r4, [r7, #6]
 8001802:	4618      	mov	r0, r3
 8001804:	f000 f908 	bl	8001a18 <FEB_LTC6811_Convert_Voltage>
 8001808:	eef0 7a40 	vmov.f32	s15, s0
 800180c:	4a75      	ldr	r2, [pc, #468]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 800180e:	4623      	mov	r3, r4
 8001810:	011b      	lsls	r3, r3, #4
 8001812:	4423      	add	r3, r4
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4413      	add	r3, r2
 8001818:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800181c:	edc3 7a00 	vstr	s15, [r3]

    	accumulator.banks[bank_idx].cells[8].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[0]);
 8001820:	88fb      	ldrh	r3, [r7, #6]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	3301      	adds	r3, #1
 8001826:	4a6f      	ldr	r2, [pc, #444]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 8001828:	21e8      	movs	r1, #232	; 0xe8
 800182a:	fb01 f303 	mul.w	r3, r1, r3
 800182e:	4413      	add	r3, r2
 8001830:	331e      	adds	r3, #30
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	88fc      	ldrh	r4, [r7, #6]
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f8ee 	bl	8001a18 <FEB_LTC6811_Convert_Voltage>
 800183c:	eef0 7a40 	vmov.f32	s15, s0
 8001840:	4a68      	ldr	r2, [pc, #416]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 8001842:	4623      	mov	r3, r4
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	4423      	add	r3, r4
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4413      	add	r3, r2
 800184c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001850:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[7].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[1]);
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	3301      	adds	r3, #1
 800185a:	4a62      	ldr	r2, [pc, #392]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 800185c:	21e8      	movs	r1, #232	; 0xe8
 800185e:	fb01 f303 	mul.w	r3, r1, r3
 8001862:	4413      	add	r3, r2
 8001864:	3320      	adds	r3, #32
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	88fc      	ldrh	r4, [r7, #6]
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f8d4 	bl	8001a18 <FEB_LTC6811_Convert_Voltage>
 8001870:	eef0 7a40 	vmov.f32	s15, s0
 8001874:	4a5b      	ldr	r2, [pc, #364]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 8001876:	4623      	mov	r3, r4
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	4423      	add	r3, r4
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	4413      	add	r3, r2
 8001880:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001884:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[6].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[2]);
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	3301      	adds	r3, #1
 800188e:	4a55      	ldr	r2, [pc, #340]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 8001890:	21e8      	movs	r1, #232	; 0xe8
 8001892:	fb01 f303 	mul.w	r3, r1, r3
 8001896:	4413      	add	r3, r2
 8001898:	3322      	adds	r3, #34	; 0x22
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	88fc      	ldrh	r4, [r7, #6]
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 f8ba 	bl	8001a18 <FEB_LTC6811_Convert_Voltage>
 80018a4:	eef0 7a40 	vmov.f32	s15, s0
 80018a8:	4a4e      	ldr	r2, [pc, #312]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 80018aa:	4623      	mov	r3, r4
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	4423      	add	r3, r4
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	4413      	add	r3, r2
 80018b4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80018b8:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[5].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[3]);
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	3301      	adds	r3, #1
 80018c2:	4a48      	ldr	r2, [pc, #288]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 80018c4:	21e8      	movs	r1, #232	; 0xe8
 80018c6:	fb01 f303 	mul.w	r3, r1, r3
 80018ca:	4413      	add	r3, r2
 80018cc:	3324      	adds	r3, #36	; 0x24
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	88fc      	ldrh	r4, [r7, #6]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 f8a0 	bl	8001a18 <FEB_LTC6811_Convert_Voltage>
 80018d8:	eef0 7a40 	vmov.f32	s15, s0
 80018dc:	4a41      	ldr	r2, [pc, #260]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 80018de:	4623      	mov	r3, r4
 80018e0:	011b      	lsls	r3, r3, #4
 80018e2:	4423      	add	r3, r4
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	4413      	add	r3, r2
 80018e8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80018ec:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[4].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[4]);
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	3301      	adds	r3, #1
 80018f6:	4a3b      	ldr	r2, [pc, #236]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 80018f8:	21e8      	movs	r1, #232	; 0xe8
 80018fa:	fb01 f303 	mul.w	r3, r1, r3
 80018fe:	4413      	add	r3, r2
 8001900:	3326      	adds	r3, #38	; 0x26
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	88fc      	ldrh	r4, [r7, #6]
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f886 	bl	8001a18 <FEB_LTC6811_Convert_Voltage>
 800190c:	eef0 7a40 	vmov.f32	s15, s0
 8001910:	4a34      	ldr	r2, [pc, #208]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 8001912:	4623      	mov	r3, r4
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	4423      	add	r3, r4
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	4413      	add	r3, r2
 800191c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001920:	edc3 7a00 	vstr	s15, [r3]
      	accumulator.banks[bank_idx].cells[3].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[6]);
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	3301      	adds	r3, #1
 800192a:	4a2e      	ldr	r2, [pc, #184]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 800192c:	21e8      	movs	r1, #232	; 0xe8
 800192e:	fb01 f303 	mul.w	r3, r1, r3
 8001932:	4413      	add	r3, r2
 8001934:	332a      	adds	r3, #42	; 0x2a
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	88fc      	ldrh	r4, [r7, #6]
 800193a:	4618      	mov	r0, r3
 800193c:	f000 f86c 	bl	8001a18 <FEB_LTC6811_Convert_Voltage>
 8001940:	eef0 7a40 	vmov.f32	s15, s0
 8001944:	4a27      	ldr	r2, [pc, #156]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 8001946:	4623      	mov	r3, r4
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	4423      	add	r3, r4
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	4413      	add	r3, r2
 8001950:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8001954:	edc3 7a00 	vstr	s15, [r3]
      	accumulator.banks[bank_idx].cells[2].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[7]);
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	3301      	adds	r3, #1
 800195e:	4a21      	ldr	r2, [pc, #132]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 8001960:	21e8      	movs	r1, #232	; 0xe8
 8001962:	fb01 f303 	mul.w	r3, r1, r3
 8001966:	4413      	add	r3, r2
 8001968:	332c      	adds	r3, #44	; 0x2c
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	88fc      	ldrh	r4, [r7, #6]
 800196e:	4618      	mov	r0, r3
 8001970:	f000 f852 	bl	8001a18 <FEB_LTC6811_Convert_Voltage>
 8001974:	eef0 7a40 	vmov.f32	s15, s0
 8001978:	4a1a      	ldr	r2, [pc, #104]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 800197a:	4623      	mov	r3, r4
 800197c:	011b      	lsls	r3, r3, #4
 800197e:	4423      	add	r3, r4
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	4413      	add	r3, r2
 8001984:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001988:	edc3 7a00 	vstr	s15, [r3]
      	accumulator.banks[bank_idx].cells[1].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[8]);
 800198c:	88fb      	ldrh	r3, [r7, #6]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	3301      	adds	r3, #1
 8001992:	4a14      	ldr	r2, [pc, #80]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 8001994:	21e8      	movs	r1, #232	; 0xe8
 8001996:	fb01 f303 	mul.w	r3, r1, r3
 800199a:	4413      	add	r3, r2
 800199c:	332e      	adds	r3, #46	; 0x2e
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	88fc      	ldrh	r4, [r7, #6]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 f838 	bl	8001a18 <FEB_LTC6811_Convert_Voltage>
 80019a8:	eef0 7a40 	vmov.f32	s15, s0
 80019ac:	4a0d      	ldr	r2, [pc, #52]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 80019ae:	4623      	mov	r3, r4
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	4423      	add	r3, r4
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	4413      	add	r3, r2
 80019b8:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80019bc:	edc3 7a00 	vstr	s15, [r3]
      	accumulator.banks[bank_idx].cells[0].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[9]);
 80019c0:	88fb      	ldrh	r3, [r7, #6]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	3301      	adds	r3, #1
 80019c6:	4a07      	ldr	r2, [pc, #28]	; (80019e4 <FEB_LTC6811_Store_Voltage+0x360>)
 80019c8:	21e8      	movs	r1, #232	; 0xe8
 80019ca:	fb01 f303 	mul.w	r3, r1, r3
 80019ce:	4413      	add	r3, r2
 80019d0:	3330      	adds	r3, #48	; 0x30
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	88fc      	ldrh	r4, [r7, #6]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f81e 	bl	8001a18 <FEB_LTC6811_Convert_Voltage>
 80019dc:	eef0 7a40 	vmov.f32	s15, s0
 80019e0:	e002      	b.n	80019e8 <FEB_LTC6811_Store_Voltage+0x364>
 80019e2:	bf00      	nop
 80019e4:	2000262c 	.word	0x2000262c
 80019e8:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <FEB_LTC6811_Store_Voltage+0x390>)
 80019ea:	4623      	mov	r3, r4
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	4423      	add	r3, r4
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	4413      	add	r3, r2
 80019f4:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 80019f8:	edc3 7a00 	vstr	s15, [r3]
    for (uint16_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	3301      	adds	r3, #1
 8001a00:	80fb      	strh	r3, [r7, #6]
 8001a02:	88fb      	ldrh	r3, [r7, #6]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f43f ae43 	beq.w	8001690 <FEB_LTC6811_Store_Voltage+0xc>
    }
}
 8001a0a:	bf00      	nop
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd90      	pop	{r4, r7, pc}
 8001a14:	2000262c 	.word	0x2000262c

08001a18 <FEB_LTC6811_Convert_Voltage>:

/*
 * @param value := Voltage (100uV) from LTC6811
 */
float FEB_LTC6811_Convert_Voltage(uint16_t value) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	80fb      	strh	r3, [r7, #6]
	// Check for error: value = 2^16 - 1
	if (value == 65535) {
 8001a22:	88fb      	ldrh	r3, [r7, #6]
 8001a24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d101      	bne.n	8001a30 <FEB_LTC6811_Convert_Voltage+0x18>
		return -42;
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <FEB_LTC6811_Convert_Voltage+0x50>)
 8001a2e:	e00f      	b.n	8001a50 <FEB_LTC6811_Convert_Voltage+0x38>
	}
	return value * 0.0001;
 8001a30:	88fb      	ldrh	r3, [r7, #6]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fd96 	bl	8000564 <__aeabi_i2d>
 8001a38:	a309      	add	r3, pc, #36	; (adr r3, 8001a60 <FEB_LTC6811_Convert_Voltage+0x48>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	f7fe fdfb 	bl	8000638 <__aeabi_dmul>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4610      	mov	r0, r2
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f7ff f8ed 	bl	8000c28 <__aeabi_d2f>
 8001a4e:	4603      	mov	r3, r0
}
 8001a50:	ee07 3a90 	vmov	s15, r3
 8001a54:	eeb0 0a67 	vmov.f32	s0, s15
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	eb1c432d 	.word	0xeb1c432d
 8001a64:	3f1a36e2 	.word	0x3f1a36e2
 8001a68:	c2280000 	.word	0xc2280000

08001a6c <FEB_LTC6811_Balance_Cells>:
	// Set target voltage
	FEB_LTC6811_Target_Voltage = lowest_voltage;
	FEB_LTC6811_Target_Voltage_Set = 1;
}

void FEB_LTC6811_Balance_Cells(void) {
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
	if (FEB_LTC6811_Balance_Cells_State == 0 || FEB_LTC6811_Cells_Balanced == 1) {
		return;
 8001a70:	bf00      	nop
	if (cells_balanced == 1) {
		FEB_LTC6811_Cells_Balanced = 1;
		FEB_LTC6811_Clear_Balance_Cells();
	}

}
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <FEB_LTC6811_Configure_DCCBITS_A>:

void FEB_LTC6811_Clear_Balance_Cell(uint8_t bank, uint8_t cell) {
	FEB_LTC6811_Cell_Discharge[FEB_LTC6811_Get_IC(bank, cell)][FEB_LTC6811_Cell_Idx(cell)] = 0;
}

void FEB_LTC6811_Configure_DCCBITS_A(uint8_t ic) {
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < CELLS_PER_DAUGHTER_BOARD; i++) {
 8001a86:	2300      	movs	r3, #0
 8001a88:	73fb      	strb	r3, [r7, #15]
 8001a8a:	e014      	b.n	8001ab6 <FEB_LTC6811_Configure_DCCBITS_A+0x3a>
		DCCBITS_A[i] = FEB_LTC6811_Cell_Discharge[ic][i];
 8001a8c:	79fa      	ldrb	r2, [r7, #7]
 8001a8e:	7bf9      	ldrb	r1, [r7, #15]
 8001a90:	480e      	ldr	r0, [pc, #56]	; (8001acc <FEB_LTC6811_Configure_DCCBITS_A+0x50>)
 8001a92:	4613      	mov	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4403      	add	r3, r0
 8001a9c:	440b      	add	r3, r1
 8001a9e:	781a      	ldrb	r2, [r3, #0]
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	2a00      	cmp	r2, #0
 8001aa4:	bf14      	ite	ne
 8001aa6:	2201      	movne	r2, #1
 8001aa8:	2200      	moveq	r2, #0
 8001aaa:	b2d1      	uxtb	r1, r2
 8001aac:	4a08      	ldr	r2, [pc, #32]	; (8001ad0 <FEB_LTC6811_Configure_DCCBITS_A+0x54>)
 8001aae:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < CELLS_PER_DAUGHTER_BOARD; i++) {
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	73fb      	strb	r3, [r7, #15]
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	2b0b      	cmp	r3, #11
 8001aba:	d9e7      	bls.n	8001a8c <FEB_LTC6811_Configure_DCCBITS_A+0x10>
	}
}
 8001abc:	bf00      	nop
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20002604 	.word	0x20002604
 8001ad0:	20002620 	.word	0x20002620

08001ad4 <FEB_LTC6811_Validate_Voltage>:

// ******************** Voltage Interface ********************

void FEB_LTC6811_Validate_Voltage(void) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001ada:	2300      	movs	r3, #0
 8001adc:	71fb      	strb	r3, [r7, #7]
 8001ade:	e02c      	b.n	8001b3a <FEB_LTC6811_Validate_Voltage+0x66>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	71bb      	strb	r3, [r7, #6]
 8001ae4:	e023      	b.n	8001b2e <FEB_LTC6811_Validate_Voltage+0x5a>
			float voltage = accumulator.banks[bank_idx].cells[cell_idx].voltage;
 8001ae6:	79fa      	ldrb	r2, [r7, #7]
 8001ae8:	79b9      	ldrb	r1, [r7, #6]
 8001aea:	4818      	ldr	r0, [pc, #96]	; (8001b4c <FEB_LTC6811_Validate_Voltage+0x78>)
 8001aec:	4613      	mov	r3, r2
 8001aee:	011b      	lsls	r3, r3, #4
 8001af0:	4413      	add	r3, r2
 8001af2:	440b      	add	r3, r1
 8001af4:	333a      	adds	r3, #58	; 0x3a
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	4403      	add	r3, r0
 8001afa:	3304      	adds	r3, #4
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	603b      	str	r3, [r7, #0]
			if (voltage < MIN_VOLTAGE || voltage > MAX_VOLTAGE) {
 8001b00:	edd7 7a00 	vldr	s15, [r7]
 8001b04:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001b08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b10:	d408      	bmi.n	8001b24 <FEB_LTC6811_Validate_Voltage+0x50>
 8001b12:	edd7 7a00 	vldr	s15, [r7]
 8001b16:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001b1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b22:	dd01      	ble.n	8001b28 <FEB_LTC6811_Validate_Voltage+0x54>
				FEB_BMS_Shutdown_Initiate();
 8001b24:	f7ff fa76 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001b28:	79bb      	ldrb	r3, [r7, #6]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	71bb      	strb	r3, [r7, #6]
 8001b2e:	79bb      	ldrb	r3, [r7, #6]
 8001b30:	2b10      	cmp	r3, #16
 8001b32:	d9d8      	bls.n	8001ae6 <FEB_LTC6811_Validate_Voltage+0x12>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	3301      	adds	r3, #1
 8001b38:	71fb      	strb	r3, [r7, #7]
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0cf      	beq.n	8001ae0 <FEB_LTC6811_Validate_Voltage+0xc>
			}
		}
	}
}
 8001b40:	bf00      	nop
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	2000262c 	.word	0x2000262c

08001b50 <FEB_LTC6811_UART_Transmit_Voltage>:

void FEB_LTC6811_UART_Transmit_Voltage() {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	f5ad 6da1 	sub.w	sp, sp, #1288	; 0x508
 8001b56:	af00      	add	r7, sp, #0
	char UART_str[1024];
	char temp_str[256];

	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 8001b5e:	e05e      	b.n	8001c1e <FEB_LTC6811_UART_Transmit_Voltage+0xce>
		// Add bank_idx, cell_idx to {@code UART_Str}
		sprintf(UART_str, "%d", (bank_idx << UART_BITS_PER_MESSAGE) + UART_VOLTAGE_ID);
 8001b60:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001b64:	005a      	lsls	r2, r3, #1
 8001b66:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001b6a:	4932      	ldr	r1, [pc, #200]	; (8001c34 <FEB_LTC6811_UART_Transmit_Voltage+0xe4>)
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f006 fa17 	bl	8007fa0 <siprintf>


		// Add values to {@code UART_Str}
		for (uint16_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001b72:	2300      	movs	r3, #0
 8001b74:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8001b78:	e02b      	b.n	8001bd2 <FEB_LTC6811_UART_Transmit_Voltage+0x82>
			float voltage = accumulator.banks[bank_idx].cells[cell_idx].voltage;
 8001b7a:	f897 2507 	ldrb.w	r2, [r7, #1287]	; 0x507
 8001b7e:	f8b7 1504 	ldrh.w	r1, [r7, #1284]	; 0x504
 8001b82:	482d      	ldr	r0, [pc, #180]	; (8001c38 <FEB_LTC6811_UART_Transmit_Voltage+0xe8>)
 8001b84:	4613      	mov	r3, r2
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	4413      	add	r3, r2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	333a      	adds	r3, #58	; 0x3a
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4403      	add	r3, r0
 8001b92:	3304      	adds	r3, #4
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 8001b9a:	6013      	str	r3, [r2, #0]

			sprintf(temp_str, " %f", voltage);
 8001b9c:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	f7fe fcf1 	bl	8000588 <__aeabi_f2d>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4638      	mov	r0, r7
 8001bac:	4923      	ldr	r1, [pc, #140]	; (8001c3c <FEB_LTC6811_UART_Transmit_Voltage+0xec>)
 8001bae:	f006 f9f7 	bl	8007fa0 <siprintf>
			strncat(UART_str, temp_str, strlen(temp_str));
 8001bb2:	463b      	mov	r3, r7
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fb2b 	bl	8000210 <strlen>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	4639      	mov	r1, r7
 8001bbe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f006 fa0c 	bl	8007fe0 <strncat>
		for (uint16_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001bc8:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001bcc:	3301      	adds	r3, #1
 8001bce:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8001bd2:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001bd6:	2b10      	cmp	r3, #16
 8001bd8:	d9cf      	bls.n	8001b7a <FEB_LTC6811_UART_Transmit_Voltage+0x2a>
		}

		// Add '\n' to {@code UART_Str}
		sprintf(temp_str, "\n");
 8001bda:	463b      	mov	r3, r7
 8001bdc:	4918      	ldr	r1, [pc, #96]	; (8001c40 <FEB_LTC6811_UART_Transmit_Voltage+0xf0>)
 8001bde:	4618      	mov	r0, r3
 8001be0:	f006 f9de 	bl	8007fa0 <siprintf>
		strncat(UART_str, temp_str, strlen(temp_str));
 8001be4:	463b      	mov	r3, r7
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fb12 	bl	8000210 <strlen>
 8001bec:	4602      	mov	r2, r0
 8001bee:	4639      	mov	r1, r7
 8001bf0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f006 f9f3 	bl	8007fe0 <strncat>

		HAL_UART_Transmit(&huart2, (uint8_t*) UART_str, strlen(UART_str), 100);
 8001bfa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fb06 	bl	8000210 <strlen>
 8001c04:	4603      	mov	r3, r0
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8001c0c:	2364      	movs	r3, #100	; 0x64
 8001c0e:	480d      	ldr	r0, [pc, #52]	; (8001c44 <FEB_LTC6811_UART_Transmit_Voltage+0xf4>)
 8001c10:	f005 f8b5 	bl	8006d7e <HAL_UART_Transmit>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001c14:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001c18:	3301      	adds	r3, #1
 8001c1a:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 8001c1e:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d09c      	beq.n	8001b60 <FEB_LTC6811_UART_Transmit_Voltage+0x10>
	}
}
 8001c26:	bf00      	nop
 8001c28:	bf00      	nop
 8001c2a:	f507 67a1 	add.w	r7, r7, #1288	; 0x508
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	0800a37c 	.word	0x0800a37c
 8001c38:	2000262c 	.word	0x2000262c
 8001c3c:	0800a380 	.word	0x0800a380
 8001c40:	0800a384 	.word	0x0800a384
 8001c44:	2000292c 	.word	0x2000292c

08001c48 <FEB_LTC6811_Total_Bank_Voltage>:

float FEB_LTC6811_Total_Bank_Voltage(void) {
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
	float total_voltage = 0;
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	607b      	str	r3, [r7, #4]

	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001c54:	2300      	movs	r3, #0
 8001c56:	70fb      	strb	r3, [r7, #3]
 8001c58:	e01e      	b.n	8001c98 <FEB_LTC6811_Total_Bank_Voltage+0x50>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	70bb      	strb	r3, [r7, #2]
 8001c5e:	e015      	b.n	8001c8c <FEB_LTC6811_Total_Bank_Voltage+0x44>
			total_voltage += accumulator.banks[bank_idx].cells[cell_idx].voltage;
 8001c60:	78fa      	ldrb	r2, [r7, #3]
 8001c62:	78b9      	ldrb	r1, [r7, #2]
 8001c64:	4813      	ldr	r0, [pc, #76]	; (8001cb4 <FEB_LTC6811_Total_Bank_Voltage+0x6c>)
 8001c66:	4613      	mov	r3, r2
 8001c68:	011b      	lsls	r3, r3, #4
 8001c6a:	4413      	add	r3, r2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	333a      	adds	r3, #58	; 0x3a
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4403      	add	r3, r0
 8001c74:	3304      	adds	r3, #4
 8001c76:	edd3 7a00 	vldr	s15, [r3]
 8001c7a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c82:	edc7 7a01 	vstr	s15, [r7, #4]
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001c86:	78bb      	ldrb	r3, [r7, #2]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	70bb      	strb	r3, [r7, #2]
 8001c8c:	78bb      	ldrb	r3, [r7, #2]
 8001c8e:	2b10      	cmp	r3, #16
 8001c90:	d9e6      	bls.n	8001c60 <FEB_LTC6811_Total_Bank_Voltage+0x18>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001c92:	78fb      	ldrb	r3, [r7, #3]
 8001c94:	3301      	adds	r3, #1
 8001c96:	70fb      	strb	r3, [r7, #3]
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0dd      	beq.n	8001c5a <FEB_LTC6811_Total_Bank_Voltage+0x12>
		}
	}

	return total_voltage;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	ee07 3a90 	vmov	s15, r3
}
 8001ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	2000262c 	.word	0x2000262c

08001cb8 <FEB_LTC6811_Clear_Voltage>:
		}
	}
	return 0;
}

void FEB_LTC6811_Clear_Voltage(void) {
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	71fb      	strb	r3, [r7, #7]
 8001cc2:	e019      	b.n	8001cf8 <FEB_LTC6811_Clear_Voltage+0x40>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	71bb      	strb	r3, [r7, #6]
 8001cc8:	e010      	b.n	8001cec <FEB_LTC6811_Clear_Voltage+0x34>
			accumulator.banks[bank_idx].cells[cell_idx].voltage = 0;
 8001cca:	79fa      	ldrb	r2, [r7, #7]
 8001ccc:	79b9      	ldrb	r1, [r7, #6]
 8001cce:	480f      	ldr	r0, [pc, #60]	; (8001d0c <FEB_LTC6811_Clear_Voltage+0x54>)
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	011b      	lsls	r3, r3, #4
 8001cd4:	4413      	add	r3, r2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	333a      	adds	r3, #58	; 0x3a
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4403      	add	r3, r0
 8001cde:	3304      	adds	r3, #4
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001ce6:	79bb      	ldrb	r3, [r7, #6]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	71bb      	strb	r3, [r7, #6]
 8001cec:	79bb      	ldrb	r3, [r7, #6]
 8001cee:	2b10      	cmp	r3, #16
 8001cf0:	d9eb      	bls.n	8001cca <FEB_LTC6811_Clear_Voltage+0x12>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	71fb      	strb	r3, [r7, #7]
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0e2      	beq.n	8001cc4 <FEB_LTC6811_Clear_Voltage+0xc>
		}
	}
}
 8001cfe:	bf00      	nop
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	2000262c 	.word	0x2000262c

08001d10 <FEB_LTC6811_Poll_Temperature>:

// ******************** Read Temperature ********************

void FEB_LTC6811_Poll_Temperature(void) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
	for (uint8_t channel = 0; channel <= 4; channel++) {
 8001d16:	2300      	movs	r3, #0
 8001d18:	71fb      	strb	r3, [r7, #7]
 8001d1a:	e00e      	b.n	8001d3a <FEB_LTC6811_Poll_Temperature+0x2a>
		FEB_LTC6811_Update_GPIO(channel);
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 f814 	bl	8001d4c <FEB_LTC6811_Update_GPIO>
		FEB_LTC6811_Start_GPIO_ADC_Measurement();
 8001d24:	f000 f880 	bl	8001e28 <FEB_LTC6811_Start_GPIO_ADC_Measurement>
		FEB_LTC6811_Read_Aux_Voltages();
 8001d28:	f000 f88c 	bl	8001e44 <FEB_LTC6811_Read_Aux_Voltages>
		FEB_LTC6811_Store_Temperature(channel);
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 f896 	bl	8001e60 <FEB_LTC6811_Store_Temperature>
	for (uint8_t channel = 0; channel <= 4; channel++) {
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	3301      	adds	r3, #1
 8001d38:	71fb      	strb	r3, [r7, #7]
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d9ed      	bls.n	8001d1c <FEB_LTC6811_Poll_Temperature+0xc>
	}
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <FEB_LTC6811_Update_GPIO>:

void FEB_LTC6811_Update_GPIO(uint8_t channel) {
 8001d4c:	b590      	push	{r4, r7, lr}
 8001d4e:	b08b      	sub	sp, #44	; 0x2c
 8001d50:	af06      	add	r7, sp, #24
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
	GPIOBITS_A[0] = 0b1;					// ADC
 8001d56:	4b2c      	ldr	r3, [pc, #176]	; (8001e08 <FEB_LTC6811_Update_GPIO+0xbc>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	701a      	strb	r2, [r3, #0]
	GPIOBITS_A[1] = 0b1;					// ADC
 8001d5c:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <FEB_LTC6811_Update_GPIO+0xbc>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	705a      	strb	r2, [r3, #1]
	GPIOBITS_A[2] = (channel >> 0) & 0b1;	// MUX Select
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	bf14      	ite	ne
 8001d6c:	2301      	movne	r3, #1
 8001d6e:	2300      	moveq	r3, #0
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4b25      	ldr	r3, [pc, #148]	; (8001e08 <FEB_LTC6811_Update_GPIO+0xbc>)
 8001d74:	709a      	strb	r2, [r3, #2]
	GPIOBITS_A[3] = (channel >> 1) & 0b1;	// MUX Select
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	085b      	lsrs	r3, r3, #1
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	bf14      	ite	ne
 8001d84:	2301      	movne	r3, #1
 8001d86:	2300      	moveq	r3, #0
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <FEB_LTC6811_Update_GPIO+0xbc>)
 8001d8c:	70da      	strb	r2, [r3, #3]
	GPIOBITS_A[4] = (channel >> 2) & 0b1;	// MUX Select
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	089b      	lsrs	r3, r3, #2
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	bf14      	ite	ne
 8001d9c:	2301      	movne	r3, #1
 8001d9e:	2300      	moveq	r3, #0
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4b19      	ldr	r3, [pc, #100]	; (8001e08 <FEB_LTC6811_Update_GPIO+0xbc>)
 8001da4:	711a      	strb	r2, [r3, #4]

    wakeup_sleep(NUM_IC);
 8001da6:	2002      	movs	r0, #2
 8001da8:	f000 fccb 	bl	8002742 <wakeup_sleep>
    for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 8001dac:	2300      	movs	r3, #0
 8001dae:	73fb      	strb	r3, [r7, #15]
 8001db0:	e01c      	b.n	8001dec <FEB_LTC6811_Update_GPIO+0xa0>
    	FEB_LTC6811_Configure_DCCBITS_A(current_ic);
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fe61 	bl	8001a7c <FEB_LTC6811_Configure_DCCBITS_A>
		LTC6811_set_cfgr(current_ic, accumulator.IC_config, REFON, ADCOPT, GPIOBITS_A, DCCBITS_A, DCTOBITS, UV, OV);
 8001dba:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <FEB_LTC6811_Update_GPIO+0xc0>)
 8001dbc:	7819      	ldrb	r1, [r3, #0]
 8001dbe:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <FEB_LTC6811_Update_GPIO+0xc4>)
 8001dc0:	781c      	ldrb	r4, [r3, #0]
 8001dc2:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <FEB_LTC6811_Update_GPIO+0xc8>)
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	4a14      	ldr	r2, [pc, #80]	; (8001e18 <FEB_LTC6811_Update_GPIO+0xcc>)
 8001dc8:	8812      	ldrh	r2, [r2, #0]
 8001dca:	7bf8      	ldrb	r0, [r7, #15]
 8001dcc:	9204      	str	r2, [sp, #16]
 8001dce:	9303      	str	r3, [sp, #12]
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <FEB_LTC6811_Update_GPIO+0xd0>)
 8001dd2:	9302      	str	r3, [sp, #8]
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <FEB_LTC6811_Update_GPIO+0xd4>)
 8001dd6:	9301      	str	r3, [sp, #4]
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <FEB_LTC6811_Update_GPIO+0xbc>)
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	4623      	mov	r3, r4
 8001dde:	460a      	mov	r2, r1
 8001de0:	4910      	ldr	r1, [pc, #64]	; (8001e24 <FEB_LTC6811_Update_GPIO+0xd8>)
 8001de2:	f000 fc70 	bl	80026c6 <LTC6811_set_cfgr>
    for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	3301      	adds	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d9df      	bls.n	8001db2 <FEB_LTC6811_Update_GPIO+0x66>
    }
    wakeup_idle(NUM_IC);
 8001df2:	2002      	movs	r0, #2
 8001df4:	f000 fc88 	bl	8002708 <wakeup_idle>
    LTC6811_wrcfg(NUM_IC, accumulator.IC_config);
 8001df8:	490a      	ldr	r1, [pc, #40]	; (8001e24 <FEB_LTC6811_Update_GPIO+0xd8>)
 8001dfa:	2002      	movs	r0, #2
 8001dfc:	f000 fbdd 	bl	80025ba <LTC6811_wrcfg>
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd90      	pop	{r4, r7, pc}
 8001e08:	20000010 	.word	0x20000010
 8001e0c:	2000000c 	.word	0x2000000c
 8001e10:	2000261c 	.word	0x2000261c
 8001e14:	20000016 	.word	0x20000016
 8001e18:	20000018 	.word	0x20000018
 8001e1c:	2000001c 	.word	0x2000001c
 8001e20:	20002620 	.word	0x20002620
 8001e24:	2000262c 	.word	0x2000262c

08001e28 <FEB_LTC6811_Start_GPIO_ADC_Measurement>:

void FEB_LTC6811_Start_GPIO_ADC_Measurement(void) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 8001e2c:	2002      	movs	r0, #2
 8001e2e:	f000 fc88 	bl	8002742 <wakeup_sleep>
	LTC6811_adax(ADC_CONVERSION_MODE, AUX_CH_TO_CONVERT);
 8001e32:	2100      	movs	r1, #0
 8001e34:	2002      	movs	r0, #2
 8001e36:	f000 fbe2 	bl	80025fe <LTC6811_adax>
	LTC6811_pollAdc();
 8001e3a:	f000 fc1f 	bl	800267c <LTC6811_pollAdc>
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <FEB_LTC6811_Read_Aux_Voltages>:

void FEB_LTC6811_Read_Aux_Voltages(void) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 8001e48:	2002      	movs	r0, #2
 8001e4a:	f000 fc7a 	bl	8002742 <wakeup_sleep>
	LTC6811_rdaux(SEL_ALL_REG, NUM_IC, accumulator.IC_config);
 8001e4e:	4a03      	ldr	r2, [pc, #12]	; (8001e5c <FEB_LTC6811_Read_Aux_Voltages+0x18>)
 8001e50:	2102      	movs	r1, #2
 8001e52:	2000      	movs	r0, #0
 8001e54:	f000 fbfc 	bl	8002650 <LTC6811_rdaux>
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	2000262c 	.word	0x2000262c

08001e60 <FEB_LTC6811_Store_Temperature>:

void FEB_LTC6811_Store_Temperature(uint8_t channel) {
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
    for (uint16_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	81fb      	strh	r3, [r7, #14]
 8001e6e:	e1cd      	b.n	800220c <FEB_LTC6811_Store_Temperature+0x3ac>
    	switch (channel) {
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	f200 81c7 	bhi.w	8002206 <FEB_LTC6811_Store_Temperature+0x3a6>
 8001e78:	a201      	add	r2, pc, #4	; (adr r2, 8001e80 <FEB_LTC6811_Store_Temperature+0x20>)
 8001e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e7e:	bf00      	nop
 8001e80:	08001e95 	.word	0x08001e95
 8001e84:	08001f63 	.word	0x08001f63
 8001e88:	08002031 	.word	0x08002031
 8001e8c:	080020ff 	.word	0x080020ff
 8001e90:	080021d1 	.word	0x080021d1
    		case 0:
    			accumulator.banks[bank_idx].cells[12].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 8001e94:	89fb      	ldrh	r3, [r7, #14]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4acc      	ldr	r2, [pc, #816]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001e9a:	21e8      	movs	r1, #232	; 0xe8
 8001e9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3348      	adds	r3, #72	; 0x48
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	89fc      	ldrh	r4, [r7, #14]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 f9bd 	bl	8002228 <FEB_LTC6811_Convert_Temperature>
 8001eae:	eef0 7a40 	vmov.f32	s15, s0
 8001eb2:	4ac6      	ldr	r2, [pc, #792]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001eb4:	4623      	mov	r3, r4
 8001eb6:	011b      	lsls	r3, r3, #4
 8001eb8:	4423      	add	r3, r4
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001ec2:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[16].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 8001ec6:	89fb      	ldrh	r3, [r7, #14]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4ac0      	ldr	r2, [pc, #768]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001ecc:	21e8      	movs	r1, #232	; 0xe8
 8001ece:	fb01 f303 	mul.w	r3, r1, r3
 8001ed2:	4413      	add	r3, r2
 8001ed4:	334a      	adds	r3, #74	; 0x4a
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	89fc      	ldrh	r4, [r7, #14]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 f9a4 	bl	8002228 <FEB_LTC6811_Convert_Temperature>
 8001ee0:	eef0 7a40 	vmov.f32	s15, s0
 8001ee4:	4ab9      	ldr	r2, [pc, #740]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001ee6:	4623      	mov	r3, r4
 8001ee8:	011b      	lsls	r3, r3, #4
 8001eea:	4423      	add	r3, r4
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4413      	add	r3, r2
 8001ef0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001ef4:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[4].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 8001ef8:	89fb      	ldrh	r3, [r7, #14]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	3301      	adds	r3, #1
 8001efe:	4ab3      	ldr	r2, [pc, #716]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001f00:	21e8      	movs	r1, #232	; 0xe8
 8001f02:	fb01 f303 	mul.w	r3, r1, r3
 8001f06:	4413      	add	r3, r2
 8001f08:	3348      	adds	r3, #72	; 0x48
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	89fc      	ldrh	r4, [r7, #14]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 f98a 	bl	8002228 <FEB_LTC6811_Convert_Temperature>
 8001f14:	eef0 7a40 	vmov.f32	s15, s0
 8001f18:	4aac      	ldr	r2, [pc, #688]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001f1a:	4623      	mov	r3, r4
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	4423      	add	r3, r4
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	4413      	add	r3, r2
 8001f24:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8001f28:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[8].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 8001f2c:	89fb      	ldrh	r3, [r7, #14]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	3301      	adds	r3, #1
 8001f32:	4aa6      	ldr	r2, [pc, #664]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001f34:	21e8      	movs	r1, #232	; 0xe8
 8001f36:	fb01 f303 	mul.w	r3, r1, r3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	334a      	adds	r3, #74	; 0x4a
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	89fc      	ldrh	r4, [r7, #14]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 f970 	bl	8002228 <FEB_LTC6811_Convert_Temperature>
 8001f48:	eef0 7a40 	vmov.f32	s15, s0
 8001f4c:	4a9f      	ldr	r2, [pc, #636]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001f4e:	4623      	mov	r3, r4
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	4423      	add	r3, r4
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f5c:	edc3 7a00 	vstr	s15, [r3]
    			break;
 8001f60:	e151      	b.n	8002206 <FEB_LTC6811_Store_Temperature+0x3a6>
    		case 1:
    			accumulator.banks[bank_idx].cells[11].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 8001f62:	89fb      	ldrh	r3, [r7, #14]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4a99      	ldr	r2, [pc, #612]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001f68:	21e8      	movs	r1, #232	; 0xe8
 8001f6a:	fb01 f303 	mul.w	r3, r1, r3
 8001f6e:	4413      	add	r3, r2
 8001f70:	3348      	adds	r3, #72	; 0x48
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	89fc      	ldrh	r4, [r7, #14]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 f956 	bl	8002228 <FEB_LTC6811_Convert_Temperature>
 8001f7c:	eef0 7a40 	vmov.f32	s15, s0
 8001f80:	4a92      	ldr	r2, [pc, #584]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001f82:	4623      	mov	r3, r4
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	4423      	add	r3, r4
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001f90:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[15].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 8001f94:	89fb      	ldrh	r3, [r7, #14]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4a8c      	ldr	r2, [pc, #560]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001f9a:	21e8      	movs	r1, #232	; 0xe8
 8001f9c:	fb01 f303 	mul.w	r3, r1, r3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	334a      	adds	r3, #74	; 0x4a
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	89fc      	ldrh	r4, [r7, #14]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f000 f93d 	bl	8002228 <FEB_LTC6811_Convert_Temperature>
 8001fae:	eef0 7a40 	vmov.f32	s15, s0
 8001fb2:	4a86      	ldr	r2, [pc, #536]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001fb4:	4623      	mov	r3, r4
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	4423      	add	r3, r4
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001fc2:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[3].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 8001fc6:	89fb      	ldrh	r3, [r7, #14]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	3301      	adds	r3, #1
 8001fcc:	4a7f      	ldr	r2, [pc, #508]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001fce:	21e8      	movs	r1, #232	; 0xe8
 8001fd0:	fb01 f303 	mul.w	r3, r1, r3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3348      	adds	r3, #72	; 0x48
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	89fc      	ldrh	r4, [r7, #14]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 f923 	bl	8002228 <FEB_LTC6811_Convert_Temperature>
 8001fe2:	eef0 7a40 	vmov.f32	s15, s0
 8001fe6:	4a79      	ldr	r2, [pc, #484]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001fe8:	4623      	mov	r3, r4
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	4423      	add	r3, r4
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8001ff6:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[7].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 8001ffa:	89fb      	ldrh	r3, [r7, #14]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	3301      	adds	r3, #1
 8002000:	4a72      	ldr	r2, [pc, #456]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 8002002:	21e8      	movs	r1, #232	; 0xe8
 8002004:	fb01 f303 	mul.w	r3, r1, r3
 8002008:	4413      	add	r3, r2
 800200a:	334a      	adds	r3, #74	; 0x4a
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	89fc      	ldrh	r4, [r7, #14]
 8002010:	4618      	mov	r0, r3
 8002012:	f000 f909 	bl	8002228 <FEB_LTC6811_Convert_Temperature>
 8002016:	eef0 7a40 	vmov.f32	s15, s0
 800201a:	4a6c      	ldr	r2, [pc, #432]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 800201c:	4623      	mov	r3, r4
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	4423      	add	r3, r4
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4413      	add	r3, r2
 8002026:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800202a:	edc3 7a00 	vstr	s15, [r3]
    			break;
 800202e:	e0ea      	b.n	8002206 <FEB_LTC6811_Store_Temperature+0x3a6>
    		case 2:
    			accumulator.banks[bank_idx].cells[10].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 8002030:	89fb      	ldrh	r3, [r7, #14]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4a65      	ldr	r2, [pc, #404]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 8002036:	21e8      	movs	r1, #232	; 0xe8
 8002038:	fb01 f303 	mul.w	r3, r1, r3
 800203c:	4413      	add	r3, r2
 800203e:	3348      	adds	r3, #72	; 0x48
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	89fc      	ldrh	r4, [r7, #14]
 8002044:	4618      	mov	r0, r3
 8002046:	f000 f8ef 	bl	8002228 <FEB_LTC6811_Convert_Temperature>
 800204a:	eef0 7a40 	vmov.f32	s15, s0
 800204e:	4a5f      	ldr	r2, [pc, #380]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 8002050:	4623      	mov	r3, r4
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	4423      	add	r3, r4
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800205e:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[14].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 8002062:	89fb      	ldrh	r3, [r7, #14]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4a59      	ldr	r2, [pc, #356]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 8002068:	21e8      	movs	r1, #232	; 0xe8
 800206a:	fb01 f303 	mul.w	r3, r1, r3
 800206e:	4413      	add	r3, r2
 8002070:	334a      	adds	r3, #74	; 0x4a
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	89fc      	ldrh	r4, [r7, #14]
 8002076:	4618      	mov	r0, r3
 8002078:	f000 f8d6 	bl	8002228 <FEB_LTC6811_Convert_Temperature>
 800207c:	eef0 7a40 	vmov.f32	s15, s0
 8002080:	4a52      	ldr	r2, [pc, #328]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 8002082:	4623      	mov	r3, r4
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	4423      	add	r3, r4
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8002090:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[2].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 8002094:	89fb      	ldrh	r3, [r7, #14]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	3301      	adds	r3, #1
 800209a:	4a4c      	ldr	r2, [pc, #304]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 800209c:	21e8      	movs	r1, #232	; 0xe8
 800209e:	fb01 f303 	mul.w	r3, r1, r3
 80020a2:	4413      	add	r3, r2
 80020a4:	3348      	adds	r3, #72	; 0x48
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	89fc      	ldrh	r4, [r7, #14]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 f8bc 	bl	8002228 <FEB_LTC6811_Convert_Temperature>
 80020b0:	eef0 7a40 	vmov.f32	s15, s0
 80020b4:	4a45      	ldr	r2, [pc, #276]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 80020b6:	4623      	mov	r3, r4
 80020b8:	011b      	lsls	r3, r3, #4
 80020ba:	4423      	add	r3, r4
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	4413      	add	r3, r2
 80020c0:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80020c4:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[6].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 80020c8:	89fb      	ldrh	r3, [r7, #14]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	3301      	adds	r3, #1
 80020ce:	4a3f      	ldr	r2, [pc, #252]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 80020d0:	21e8      	movs	r1, #232	; 0xe8
 80020d2:	fb01 f303 	mul.w	r3, r1, r3
 80020d6:	4413      	add	r3, r2
 80020d8:	334a      	adds	r3, #74	; 0x4a
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	89fc      	ldrh	r4, [r7, #14]
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 f8a2 	bl	8002228 <FEB_LTC6811_Convert_Temperature>
 80020e4:	eef0 7a40 	vmov.f32	s15, s0
 80020e8:	4a38      	ldr	r2, [pc, #224]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 80020ea:	4623      	mov	r3, r4
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	4423      	add	r3, r4
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80020f8:	edc3 7a00 	vstr	s15, [r3]
    			break;
 80020fc:	e083      	b.n	8002206 <FEB_LTC6811_Store_Temperature+0x3a6>
    		case 3:
    			accumulator.banks[bank_idx].cells[9].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 80020fe:	89fb      	ldrh	r3, [r7, #14]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4a32      	ldr	r2, [pc, #200]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 8002104:	21e8      	movs	r1, #232	; 0xe8
 8002106:	fb01 f303 	mul.w	r3, r1, r3
 800210a:	4413      	add	r3, r2
 800210c:	3348      	adds	r3, #72	; 0x48
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	89fc      	ldrh	r4, [r7, #14]
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f888 	bl	8002228 <FEB_LTC6811_Convert_Temperature>
 8002118:	eef0 7a40 	vmov.f32	s15, s0
 800211c:	4a2b      	ldr	r2, [pc, #172]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 800211e:	4623      	mov	r3, r4
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	4423      	add	r3, r4
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4413      	add	r3, r2
 8002128:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800212c:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[13].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 8002130:	89fb      	ldrh	r3, [r7, #14]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4a25      	ldr	r2, [pc, #148]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 8002136:	21e8      	movs	r1, #232	; 0xe8
 8002138:	fb01 f303 	mul.w	r3, r1, r3
 800213c:	4413      	add	r3, r2
 800213e:	334a      	adds	r3, #74	; 0x4a
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	89fc      	ldrh	r4, [r7, #14]
 8002144:	4618      	mov	r0, r3
 8002146:	f000 f86f 	bl	8002228 <FEB_LTC6811_Convert_Temperature>
 800214a:	eef0 7a40 	vmov.f32	s15, s0
 800214e:	4a1f      	ldr	r2, [pc, #124]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 8002150:	4623      	mov	r3, r4
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	4423      	add	r3, r4
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4413      	add	r3, r2
 800215a:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800215e:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[1].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 8002162:	89fb      	ldrh	r3, [r7, #14]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	3301      	adds	r3, #1
 8002168:	4a18      	ldr	r2, [pc, #96]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 800216a:	21e8      	movs	r1, #232	; 0xe8
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	4413      	add	r3, r2
 8002172:	3348      	adds	r3, #72	; 0x48
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	89fc      	ldrh	r4, [r7, #14]
 8002178:	4618      	mov	r0, r3
 800217a:	f000 f855 	bl	8002228 <FEB_LTC6811_Convert_Temperature>
 800217e:	eef0 7a40 	vmov.f32	s15, s0
 8002182:	4a12      	ldr	r2, [pc, #72]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 8002184:	4623      	mov	r3, r4
 8002186:	011b      	lsls	r3, r3, #4
 8002188:	4423      	add	r3, r4
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4413      	add	r3, r2
 800218e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002192:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[5].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 8002196:	89fb      	ldrh	r3, [r7, #14]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	3301      	adds	r3, #1
 800219c:	4a0b      	ldr	r2, [pc, #44]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 800219e:	21e8      	movs	r1, #232	; 0xe8
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	334a      	adds	r3, #74	; 0x4a
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	89fc      	ldrh	r4, [r7, #14]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f000 f83b 	bl	8002228 <FEB_LTC6811_Convert_Temperature>
 80021b2:	eef0 7a40 	vmov.f32	s15, s0
 80021b6:	4a05      	ldr	r2, [pc, #20]	; (80021cc <FEB_LTC6811_Store_Temperature+0x36c>)
 80021b8:	4623      	mov	r3, r4
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	4423      	add	r3, r4
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021c6:	edc3 7a00 	vstr	s15, [r3]
    			break;
 80021ca:	e01c      	b.n	8002206 <FEB_LTC6811_Store_Temperature+0x3a6>
 80021cc:	2000262c 	.word	0x2000262c
    		case 4:
    			accumulator.banks[bank_idx].cells[0].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 80021d0:	89fb      	ldrh	r3, [r7, #14]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	3301      	adds	r3, #1
 80021d6:	4a12      	ldr	r2, [pc, #72]	; (8002220 <FEB_LTC6811_Store_Temperature+0x3c0>)
 80021d8:	21e8      	movs	r1, #232	; 0xe8
 80021da:	fb01 f303 	mul.w	r3, r1, r3
 80021de:	4413      	add	r3, r2
 80021e0:	3348      	adds	r3, #72	; 0x48
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	89fc      	ldrh	r4, [r7, #14]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 f81e 	bl	8002228 <FEB_LTC6811_Convert_Temperature>
 80021ec:	eef0 7a40 	vmov.f32	s15, s0
 80021f0:	4a0b      	ldr	r2, [pc, #44]	; (8002220 <FEB_LTC6811_Store_Temperature+0x3c0>)
 80021f2:	4623      	mov	r3, r4
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	4423      	add	r3, r4
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8002200:	edc3 7a00 	vstr	s15, [r3]
    			break;
 8002204:	bf00      	nop
    for (uint16_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8002206:	89fb      	ldrh	r3, [r7, #14]
 8002208:	3301      	adds	r3, #1
 800220a:	81fb      	strh	r3, [r7, #14]
 800220c:	89fb      	ldrh	r3, [r7, #14]
 800220e:	2b00      	cmp	r3, #0
 8002210:	f43f ae2e 	beq.w	8001e70 <FEB_LTC6811_Store_Temperature+0x10>
    	}
    }
}
 8002214:	bf00      	nop
 8002216:	bf00      	nop
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	bd90      	pop	{r4, r7, pc}
 800221e:	bf00      	nop
 8002220:	2000262c 	.word	0x2000262c
 8002224:	00000000 	.word	0x00000000

08002228 <FEB_LTC6811_Convert_Temperature>:

/*
 * @param value := Voltage (100uV) from LTC6811
 */
float FEB_LTC6811_Convert_Temperature(uint16_t value) {
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	80fb      	strh	r3, [r7, #6]
	// Check for error: value = 2^16 - 1
	if (value == 65535) {
 8002232:	88fb      	ldrh	r3, [r7, #6]
 8002234:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002238:	4293      	cmp	r3, r2
 800223a:	d102      	bne.n	8002242 <FEB_LTC6811_Convert_Temperature+0x1a>
		return -42;
 800223c:	eddf 7a10 	vldr	s15, [pc, #64]	; 8002280 <FEB_LTC6811_Convert_Temperature+0x58>
 8002240:	e015      	b.n	800226e <FEB_LTC6811_Convert_Temperature+0x46>
	}
	//return value * 0.0001;
	return FEB_LTC6811_Temp_LUT_Get_Temperature(value * 0.0001);
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe f98d 	bl	8000564 <__aeabi_i2d>
 800224a:	a30b      	add	r3, pc, #44	; (adr r3, 8002278 <FEB_LTC6811_Convert_Temperature+0x50>)
 800224c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002250:	f7fe f9f2 	bl	8000638 <__aeabi_dmul>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4610      	mov	r0, r2
 800225a:	4619      	mov	r1, r3
 800225c:	f7fe fce4 	bl	8000c28 <__aeabi_d2f>
 8002260:	4603      	mov	r3, r0
 8002262:	ee00 3a10 	vmov	s0, r3
 8002266:	f000 f8fb 	bl	8002460 <FEB_LTC6811_Temp_LUT_Get_Temperature>
 800226a:	eef0 7a40 	vmov.f32	s15, s0
}
 800226e:	eeb0 0a67 	vmov.f32	s0, s15
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	eb1c432d 	.word	0xeb1c432d
 800227c:	3f1a36e2 	.word	0x3f1a36e2
 8002280:	c2280000 	.word	0xc2280000

08002284 <FEB_LTC6811_Validate_Temperature>:

// ******************** Temperature Interface ********************

void FEB_LTC6811_Validate_Temperature(void) {
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 800228a:	2300      	movs	r3, #0
 800228c:	73fb      	strb	r3, [r7, #15]
 800228e:	e02f      	b.n	80022f0 <FEB_LTC6811_Validate_Temperature+0x6c>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8002290:	2300      	movs	r3, #0
 8002292:	73bb      	strb	r3, [r7, #14]
 8002294:	e026      	b.n	80022e4 <FEB_LTC6811_Validate_Temperature+0x60>
			float temperature = accumulator.banks[bank_idx].cells[cell_idx].temperature;
 8002296:	7bfa      	ldrb	r2, [r7, #15]
 8002298:	7bb9      	ldrb	r1, [r7, #14]
 800229a:	4819      	ldr	r0, [pc, #100]	; (8002300 <FEB_LTC6811_Validate_Temperature+0x7c>)
 800229c:	4613      	mov	r3, r2
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	4413      	add	r3, r2
 80022a2:	440b      	add	r3, r1
 80022a4:	333a      	adds	r3, #58	; 0x3a
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4403      	add	r3, r0
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60bb      	str	r3, [r7, #8]
			float min_temperature = MIN_OPERATION_TEMPERATURE;
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <FEB_LTC6811_Validate_Temperature+0x80>)
 80022b0:	607b      	str	r3, [r7, #4]
			float max_temperature = MAX_OPERATION_TEMPERATURE;
 80022b2:	4b15      	ldr	r3, [pc, #84]	; (8002308 <FEB_LTC6811_Validate_Temperature+0x84>)
 80022b4:	603b      	str	r3, [r7, #0]
			if (FEB_CAN_CHARGER_START_CHARGE == 1) {
				min_temperature = MIN_CHARGING_TEMPERATURE;
				max_temperature = MAX_CHARGING_TEMPERATURE;
			}
			if (temperature < min_temperature || temperature > max_temperature) {
 80022b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80022ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80022be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c6:	d408      	bmi.n	80022da <FEB_LTC6811_Validate_Temperature+0x56>
 80022c8:	ed97 7a02 	vldr	s14, [r7, #8]
 80022cc:	edd7 7a00 	vldr	s15, [r7]
 80022d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d8:	dd01      	ble.n	80022de <FEB_LTC6811_Validate_Temperature+0x5a>
				FEB_BMS_Shutdown_Initiate();
 80022da:	f7fe fe9b 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 80022de:	7bbb      	ldrb	r3, [r7, #14]
 80022e0:	3301      	adds	r3, #1
 80022e2:	73bb      	strb	r3, [r7, #14]
 80022e4:	7bbb      	ldrb	r3, [r7, #14]
 80022e6:	2b10      	cmp	r3, #16
 80022e8:	d9d5      	bls.n	8002296 <FEB_LTC6811_Validate_Temperature+0x12>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
 80022ec:	3301      	adds	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0cc      	beq.n	8002290 <FEB_LTC6811_Validate_Temperature+0xc>
			}
		}
	}
}
 80022f6:	bf00      	nop
 80022f8:	bf00      	nop
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	2000262c 	.word	0x2000262c
 8002304:	c1a00000 	.word	0xc1a00000
 8002308:	42700000 	.word	0x42700000

0800230c <FEB_LTC6811_UART_Transmit_Temperature>:

void FEB_LTC6811_UART_Transmit_Temperature() {
 800230c:	b580      	push	{r7, lr}
 800230e:	f5ad 6da1 	sub.w	sp, sp, #1288	; 0x508
 8002312:	af00      	add	r7, sp, #0
	char UART_Str[1024];
	char temp_str[256];

	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8002314:	2300      	movs	r3, #0
 8002316:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 800231a:	e05e      	b.n	80023da <FEB_LTC6811_UART_Transmit_Temperature+0xce>
		// Add bank_idx, cell_idx to {@code UART_Str}
		sprintf(UART_Str, "%d", (bank_idx << UART_BITS_PER_MESSAGE) + UART_TEMPERATURE_ID);
 800231c:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002328:	4931      	ldr	r1, [pc, #196]	; (80023f0 <FEB_LTC6811_UART_Transmit_Temperature+0xe4>)
 800232a:	4618      	mov	r0, r3
 800232c:	f005 fe38 	bl	8007fa0 <siprintf>


		// Add values to {@code UART_Str}
		for (uint16_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8002330:	2300      	movs	r3, #0
 8002332:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8002336:	e02a      	b.n	800238e <FEB_LTC6811_UART_Transmit_Temperature+0x82>
			float temperature = accumulator.banks[bank_idx].cells[cell_idx].temperature;
 8002338:	f897 2507 	ldrb.w	r2, [r7, #1287]	; 0x507
 800233c:	f8b7 1504 	ldrh.w	r1, [r7, #1284]	; 0x504
 8002340:	482c      	ldr	r0, [pc, #176]	; (80023f4 <FEB_LTC6811_UART_Transmit_Temperature+0xe8>)
 8002342:	4613      	mov	r3, r2
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	4413      	add	r3, r2
 8002348:	440b      	add	r3, r1
 800234a:	333a      	adds	r3, #58	; 0x3a
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4403      	add	r3, r0
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 8002356:	6013      	str	r3, [r2, #0]

			sprintf(temp_str, " %f", temperature);
 8002358:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	f7fe f913 	bl	8000588 <__aeabi_f2d>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4638      	mov	r0, r7
 8002368:	4923      	ldr	r1, [pc, #140]	; (80023f8 <FEB_LTC6811_UART_Transmit_Temperature+0xec>)
 800236a:	f005 fe19 	bl	8007fa0 <siprintf>
			strncat(UART_Str, temp_str, strlen(temp_str));
 800236e:	463b      	mov	r3, r7
 8002370:	4618      	mov	r0, r3
 8002372:	f7fd ff4d 	bl	8000210 <strlen>
 8002376:	4602      	mov	r2, r0
 8002378:	4639      	mov	r1, r7
 800237a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800237e:	4618      	mov	r0, r3
 8002380:	f005 fe2e 	bl	8007fe0 <strncat>
		for (uint16_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8002384:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8002388:	3301      	adds	r3, #1
 800238a:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 800238e:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8002392:	2b10      	cmp	r3, #16
 8002394:	d9d0      	bls.n	8002338 <FEB_LTC6811_UART_Transmit_Temperature+0x2c>
		}

		// Add '\n' to {@code UART_Str}
		sprintf(temp_str, "\n");
 8002396:	463b      	mov	r3, r7
 8002398:	4918      	ldr	r1, [pc, #96]	; (80023fc <FEB_LTC6811_UART_Transmit_Temperature+0xf0>)
 800239a:	4618      	mov	r0, r3
 800239c:	f005 fe00 	bl	8007fa0 <siprintf>
		strncat(UART_Str, temp_str, strlen(temp_str));
 80023a0:	463b      	mov	r3, r7
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fd ff34 	bl	8000210 <strlen>
 80023a8:	4602      	mov	r2, r0
 80023aa:	4639      	mov	r1, r7
 80023ac:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80023b0:	4618      	mov	r0, r3
 80023b2:	f005 fe15 	bl	8007fe0 <strncat>
		HAL_UART_Transmit(&huart2, (uint8_t*) UART_Str, strlen(UART_Str), 100);
 80023b6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fd ff28 	bl	8000210 <strlen>
 80023c0:	4603      	mov	r3, r0
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80023c8:	2364      	movs	r3, #100	; 0x64
 80023ca:	480d      	ldr	r0, [pc, #52]	; (8002400 <FEB_LTC6811_UART_Transmit_Temperature+0xf4>)
 80023cc:	f004 fcd7 	bl	8006d7e <HAL_UART_Transmit>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 80023d0:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 80023d4:	3301      	adds	r3, #1
 80023d6:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 80023da:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d09c      	beq.n	800231c <FEB_LTC6811_UART_Transmit_Temperature+0x10>
	}
}
 80023e2:	bf00      	nop
 80023e4:	bf00      	nop
 80023e6:	f507 67a1 	add.w	r7, r7, #1288	; 0x508
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	0800a37c 	.word	0x0800a37c
 80023f4:	2000262c 	.word	0x2000262c
 80023f8:	0800a380 	.word	0x0800a380
 80023fc:	0800a384 	.word	0x0800a384
 8002400:	2000292c 	.word	0x2000292c

08002404 <FEB_LTC6811_Clear_Temperature>:

void FEB_LTC6811_Clear_Temperature(void) {
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 800240a:	2300      	movs	r3, #0
 800240c:	71fb      	strb	r3, [r7, #7]
 800240e:	e018      	b.n	8002442 <FEB_LTC6811_Clear_Temperature+0x3e>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8002410:	2300      	movs	r3, #0
 8002412:	71bb      	strb	r3, [r7, #6]
 8002414:	e00f      	b.n	8002436 <FEB_LTC6811_Clear_Temperature+0x32>
			accumulator.banks[bank_idx].cells[cell_idx].temperature = 0;
 8002416:	79fa      	ldrb	r2, [r7, #7]
 8002418:	79b9      	ldrb	r1, [r7, #6]
 800241a:	480f      	ldr	r0, [pc, #60]	; (8002458 <FEB_LTC6811_Clear_Temperature+0x54>)
 800241c:	4613      	mov	r3, r2
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	4413      	add	r3, r2
 8002422:	440b      	add	r3, r1
 8002424:	333a      	adds	r3, #58	; 0x3a
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4403      	add	r3, r0
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8002430:	79bb      	ldrb	r3, [r7, #6]
 8002432:	3301      	adds	r3, #1
 8002434:	71bb      	strb	r3, [r7, #6]
 8002436:	79bb      	ldrb	r3, [r7, #6]
 8002438:	2b10      	cmp	r3, #16
 800243a:	d9ec      	bls.n	8002416 <FEB_LTC6811_Clear_Temperature+0x12>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	3301      	adds	r3, #1
 8002440:	71fb      	strb	r3, [r7, #7]
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0e3      	beq.n	8002410 <FEB_LTC6811_Clear_Temperature+0xc>
		}
	}
}
 8002448:	bf00      	nop
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	2000262c 	.word	0x2000262c
 800245c:	00000000 	.word	0x00000000

08002460 <FEB_LTC6811_Temp_LUT_Get_Temperature>:

float FEB_LTC6811_TEMP_MAP[][2] = {{1.3, 120.0}, {1.301, 119.5}, {1.302, 119.0}, {1.303, 118.5}, {1.304, 118.0}, {1.305, 117.5}, {1.306, 117.0}, {1.307, 116.5}, {1.308, 116.0}, {1.309, 115.5}, {1.31, 115.0}, {1.311, 114.5}, {1.312, 114.0}, {1.313, 113.5}, {1.314, 113.0}, {1.315, 112.5}, {1.316, 112.0}, {1.317, 111.5}, {1.318, 111.0}, {1.319, 110.5}, {1.32, 110.0}, {1.321, 109.5}, {1.322, 109.0}, {1.323, 108.5}, {1.324, 108.0}, {1.325, 107.5}, {1.326, 107.0}, {1.327, 106.5}, {1.328, 106.0}, {1.329, 105.5}, {1.33, 105.0}, {1.331, 104.5}, {1.332, 104.0}, {1.333, 103.5}, {1.334, 103.0}, {1.335, 102.5}, {1.336, 102.0}, {1.337, 101.5}, {1.338, 101.0}, {1.339, 100.5}, {1.34, 100.0}, {1.341, 99.5}, {1.342, 99.0}, {1.343, 98.5}, {1.344, 98.0}, {1.345, 97.5}, {1.346, 97.0}, {1.347, 96.5}, {1.348, 96.0}, {1.349, 95.5}, {1.35, 95.0}, {1.351, 94.75}, {1.352, 94.5}, {1.353, 94.25}, {1.354, 94.0}, {1.355, 93.75}, {1.356, 93.5}, {1.357, 93.25}, {1.358, 93.0}, {1.359, 92.75}, {1.36, 92.5}, {1.361, 92.25}, {1.362, 92.0}, {1.363, 91.75}, {1.364, 91.5}, {1.365, 91.25}, {1.366, 91.0}, {1.367, 90.75}, {1.368, 90.5}, {1.369, 90.25}, {1.37, 90.0}, {1.371, 89.5}, {1.372, 89.0}, {1.373, 88.5}, {1.374, 88.0}, {1.375, 87.5}, {1.376, 87.0}, {1.377, 86.5}, {1.378, 86.0}, {1.379, 85.5}, {1.38, 85.0}, {1.381, 84.75}, {1.382, 84.5}, {1.383, 84.25}, {1.384, 84.0}, {1.385, 83.75}, {1.386, 83.5}, {1.387, 83.25}, {1.388, 83.0}, {1.389, 82.75}, {1.39, 82.5}, {1.391, 82.25}, {1.392, 82.0}, {1.393, 81.75}, {1.394, 81.5}, {1.395, 81.25}, {1.396, 81.0}, {1.397, 80.75}, {1.398, 80.5}, {1.399, 80.25}, {1.4, 80.0}, {1.401, 79.8333}, {1.402, 79.6667}, {1.403, 79.5}, {1.404, 79.3333}, {1.405, 79.1667}, {1.406, 79.0}, {1.407, 78.8333}, {1.408, 78.6667}, {1.409, 78.5}, {1.41, 78.3333}, {1.411, 78.1667}, {1.412, 78.0}, {1.413, 77.8333}, {1.414, 77.6667}, {1.415, 77.5}, {1.416, 77.3333}, {1.417, 77.1667}, {1.418, 77.0}, {1.419, 76.8333}, {1.42, 76.6667}, {1.421, 76.5}, {1.422, 76.3333}, {1.423, 76.1667}, {1.424, 76.0}, {1.425, 75.8333}, {1.426, 75.6667}, {1.427, 75.5}, {1.428, 75.3333}, {1.429, 75.1667}, {1.43, 75.0}, {1.431, 74.75}, {1.432, 74.5}, {1.433, 74.25}, {1.434, 74.0}, {1.435, 73.75}, {1.436, 73.5}, {1.437, 73.25}, {1.438, 73.0}, {1.439, 72.75}, {1.44, 72.5}, {1.441, 72.25}, {1.442, 72.0}, {1.443, 71.75}, {1.444, 71.5}, {1.445, 71.25}, {1.446, 71.0}, {1.447, 70.75}, {1.448, 70.5}, {1.449, 70.25}, {1.45, 70.0}, {1.451, 69.8333}, {1.452, 69.6667}, {1.453, 69.5}, {1.454, 69.3333}, {1.455, 69.1667}, {1.456, 69.0}, {1.457, 68.8333}, {1.458, 68.6667}, {1.459, 68.5}, {1.46, 68.3333}, {1.461, 68.1667}, {1.462, 68.0}, {1.463, 67.8333}, {1.464, 67.6667}, {1.465, 67.5}, {1.466, 67.3333}, {1.467, 67.1667}, {1.468, 67.0}, {1.469, 66.8333}, {1.47, 66.6667}, {1.471, 66.5}, {1.472, 66.3333}, {1.473, 66.1667}, {1.474, 66.0}, {1.475, 65.8333}, {1.476, 65.6667}, {1.477, 65.5}, {1.478, 65.3333}, {1.479, 65.1667}, {1.48, 65.0}, {1.481, 64.8333}, {1.482, 64.6667}, {1.483, 64.5}, {1.484, 64.3333}, {1.485, 64.1667}, {1.486, 64.0}, {1.487, 63.8333}, {1.488, 63.6667}, {1.489, 63.5}, {1.49, 63.3333}, {1.491, 63.1667}, {1.492, 63.0}, {1.493, 62.8333}, {1.494, 62.6667}, {1.495, 62.5}, {1.496, 62.3333}, {1.497, 62.1667}, {1.498, 62.0}, {1.499, 61.8333}, {1.5, 61.6667}, {1.501, 61.5}, {1.502, 61.3333}, {1.503, 61.1667}, {1.504, 61.0}, {1.505, 60.8333}, {1.506, 60.6667}, {1.507, 60.5}, {1.508, 60.3333}, {1.509, 60.1667}, {1.51, 60.0}, {1.511, 59.875}, {1.512, 59.75}, {1.513, 59.625}, {1.514, 59.5}, {1.515, 59.375}, {1.516, 59.25}, {1.517, 59.125}, {1.518, 59.0}, {1.519, 58.875}, {1.52, 58.75}, {1.521, 58.625}, {1.522, 58.5}, {1.523, 58.375}, {1.524, 58.25}, {1.525, 58.125}, {1.526, 58.0}, {1.527, 57.875}, {1.528, 57.75}, {1.529, 57.625}, {1.53, 57.5}, {1.531, 57.375}, {1.532, 57.25}, {1.533, 57.125}, {1.534, 57.0}, {1.535, 56.875}, {1.536, 56.75}, {1.537, 56.625}, {1.538, 56.5}, {1.539, 56.375}, {1.54, 56.25}, {1.541, 56.125}, {1.542, 56.0}, {1.543, 55.875}, {1.544, 55.75}, {1.545, 55.625}, {1.546, 55.5}, {1.547, 55.375}, {1.548, 55.25}, {1.549, 55.125}, {1.55, 55.0}, {1.551, 54.875}, {1.552, 54.75}, {1.553, 54.625}, {1.554, 54.5}, {1.555, 54.375}, {1.556, 54.25}, {1.557, 54.125}, {1.558, 54.0}, {1.559, 53.875}, {1.56, 53.75}, {1.561, 53.625}, {1.562, 53.5}, {1.563, 53.375}, {1.564, 53.25}, {1.565, 53.125}, {1.566, 53.0}, {1.567, 52.875}, {1.568, 52.75}, {1.569, 52.625}, {1.57, 52.5}, {1.571, 52.375}, {1.572, 52.25}, {1.573, 52.125}, {1.574, 52.0}, {1.575, 51.875}, {1.576, 51.75}, {1.577, 51.625}, {1.578, 51.5}, {1.579, 51.375}, {1.58, 51.25}, {1.581, 51.125}, {1.582, 51.0}, {1.583, 50.875}, {1.584, 50.75}, {1.585, 50.625}, {1.586, 50.5}, {1.587, 50.375}, {1.588, 50.25}, {1.589, 50.125}, {1.59, 50.0}, {1.591, 49.875}, {1.592, 49.75}, {1.593, 49.625}, {1.594, 49.5}, {1.595, 49.375}, {1.596, 49.25}, {1.597, 49.125}, {1.598, 49.0}, {1.599, 48.875}, {1.6, 48.75}, {1.601, 48.625}, {1.602, 48.5}, {1.603, 48.375}, {1.604, 48.25}, {1.605, 48.125}, {1.606, 48.0}, {1.607, 47.875}, {1.608, 47.75}, {1.609, 47.625}, {1.61, 47.5}, {1.611, 47.375}, {1.612, 47.25}, {1.613, 47.125}, {1.614, 47.0}, {1.615, 46.875}, {1.616, 46.75}, {1.617, 46.625}, {1.618, 46.5}, {1.619, 46.375}, {1.62, 46.25}, {1.621, 46.125}, {1.622, 46.0}, {1.623, 45.875}, {1.624, 45.75}, {1.625, 45.625}, {1.626, 45.5}, {1.627, 45.375}, {1.628, 45.25}, {1.629, 45.125}, {1.63, 45.0}, {1.631, 44.9}, {1.632, 44.8}, {1.633, 44.7}, {1.634, 44.6}, {1.635, 44.5}, {1.636, 44.4}, {1.637, 44.3}, {1.638, 44.2}, {1.639, 44.1}, {1.64, 44.0}, {1.641, 43.9}, {1.642, 43.8}, {1.643, 43.7}, {1.644, 43.6}, {1.645, 43.5}, {1.646, 43.4}, {1.647, 43.3}, {1.648, 43.2}, {1.649, 43.1}, {1.65, 43.0}, {1.651, 42.9}, {1.652, 42.8}, {1.653, 42.7}, {1.654, 42.6}, {1.655, 42.5}, {1.656, 42.4}, {1.657, 42.3}, {1.658, 42.2}, {1.659, 42.1}, {1.66, 42.0}, {1.661, 41.9}, {1.662, 41.8}, {1.663, 41.7}, {1.664, 41.6}, {1.665, 41.5}, {1.666, 41.4}, {1.667, 41.3}, {1.668, 41.2}, {1.669, 41.1}, {1.67, 41.0}, {1.671, 40.9}, {1.672, 40.8}, {1.673, 40.7}, {1.674, 40.6}, {1.675, 40.5}, {1.676, 40.4}, {1.677, 40.3}, {1.678, 40.2}, {1.679, 40.1}, {1.68, 40.0}, {1.681, 39.9167}, {1.682, 39.8333}, {1.683, 39.75}, {1.684, 39.6667}, {1.685, 39.5833}, {1.686, 39.5}, {1.687, 39.4167}, {1.688, 39.3333}, {1.689, 39.25}, {1.69, 39.1667}, {1.691, 39.0833}, {1.692, 39.0}, {1.693, 38.9167}, {1.694, 38.8333}, {1.695, 38.75}, {1.696, 38.6667}, {1.697, 38.5833}, {1.698, 38.5}, {1.699, 38.4167}, {1.7, 38.3333}, {1.701, 38.25}, {1.702, 38.1667}, {1.703, 38.0833}, {1.704, 38.0}, {1.705, 37.9167}, {1.706, 37.8333}, {1.707, 37.75}, {1.708, 37.6667}, {1.709, 37.5833}, {1.71, 37.5}, {1.711, 37.4167}, {1.712, 37.3333}, {1.713, 37.25}, {1.714, 37.1667}, {1.715, 37.0833}, {1.716, 37.0}, {1.717, 36.9167}, {1.718, 36.8333}, {1.719, 36.75}, {1.72, 36.6667}, {1.721, 36.5833}, {1.722, 36.5}, {1.723, 36.4167}, {1.724, 36.3333}, {1.725, 36.25}, {1.726, 36.1667}, {1.727, 36.0833}, {1.728, 36.0}, {1.729, 35.9167}, {1.73, 35.8333}, {1.731, 35.75}, {1.732, 35.6667}, {1.733, 35.5833}, {1.734, 35.5}, {1.735, 35.4167}, {1.736, 35.3333}, {1.737, 35.25}, {1.738, 35.1667}, {1.739, 35.0833}, {1.74, 35.0}, {1.741, 34.9167}, {1.742, 34.8333}, {1.743, 34.75}, {1.744, 34.6667}, {1.745, 34.5833}, {1.746, 34.5}, {1.747, 34.4167}, {1.748, 34.3333}, {1.749, 34.25}, {1.75, 34.1667}, {1.751, 34.0833}, {1.752, 34.0}, {1.753, 33.9167}, {1.754, 33.8333}, {1.755, 33.75}, {1.756, 33.6667}, {1.757, 33.5833}, {1.758, 33.5}, {1.759, 33.4167}, {1.76, 33.3333}, {1.761, 33.25}, {1.762, 33.1667}, {1.763, 33.0833}, {1.764, 33.0}, {1.765, 32.9167}, {1.766, 32.8333}, {1.767, 32.75}, {1.768, 32.6667}, {1.769, 32.5833}, {1.77, 32.5}, {1.771, 32.4167}, {1.772, 32.3333}, {1.773, 32.25}, {1.774, 32.1667}, {1.775, 32.0833}, {1.776, 32.0}, {1.777, 31.9167}, {1.778, 31.8333}, {1.779, 31.75}, {1.78, 31.6667}, {1.781, 31.5833}, {1.782, 31.5}, {1.783, 31.4167}, {1.784, 31.3333}, {1.785, 31.25}, {1.786, 31.1667}, {1.787, 31.0833}, {1.788, 31.0}, {1.789, 30.9167}, {1.79, 30.8333}, {1.791, 30.75}, {1.792, 30.6667}, {1.793, 30.5833}, {1.794, 30.5}, {1.795, 30.4167}, {1.796, 30.3333}, {1.797, 30.25}, {1.798, 30.1667}, {1.799, 30.0833}, {1.8, 30.0}, {1.801, 29.9167}, {1.802, 29.8333}, {1.803, 29.75}, {1.804, 29.6667}, {1.805, 29.5833}, {1.806, 29.5}, {1.807, 29.4167}, {1.808, 29.3333}, {1.809, 29.25}, {1.81, 29.1667}, {1.811, 29.0833}, {1.812, 29.0}, {1.813, 28.9167}, {1.814, 28.8333}, {1.815, 28.75}, {1.816, 28.6667}, {1.817, 28.5833}, {1.818, 28.5}, {1.819, 28.4167}, {1.82, 28.3333}, {1.821, 28.25}, {1.822, 28.1667}, {1.823, 28.0833}, {1.824, 28.0}, {1.825, 27.9167}, {1.826, 27.8333}, {1.827, 27.75}, {1.828, 27.6667}, {1.829, 27.5833}, {1.83, 27.5}, {1.831, 27.4167}, {1.832, 27.3333}, {1.833, 27.25}, {1.834, 27.1667}, {1.835, 27.0833}, {1.836, 27.0}, {1.837, 26.9167}, {1.838, 26.8333}, {1.839, 26.75}, {1.84, 26.6667}, {1.841, 26.5833}, {1.842, 26.5}, {1.843, 26.4167}, {1.844, 26.3333}, {1.845, 26.25}, {1.846, 26.1667}, {1.847, 26.0833}, {1.848, 26.0}, {1.849, 25.9167}, {1.85, 25.8333}, {1.851, 25.75}, {1.852, 25.6667}, {1.853, 25.5833}, {1.854, 25.5}, {1.855, 25.4167}, {1.856, 25.3333}, {1.857, 25.25}, {1.858, 25.1667}, {1.859, 25.0833}, {1.86, 25.0}, {1.861, 24.9167}, {1.862, 24.8333}, {1.863, 24.75}, {1.864, 24.6667}, {1.865, 24.5833}, {1.866, 24.5}, {1.867, 24.4167}, {1.868, 24.3333}, {1.869, 24.25}, {1.87, 24.1667}, {1.871, 24.0833}, {1.872, 24.0}, {1.873, 23.9167}, {1.874, 23.8333}, {1.875, 23.75}, {1.876, 23.6667}, {1.877, 23.5833}, {1.878, 23.5}, {1.879, 23.4167}, {1.88, 23.3333}, {1.881, 23.25}, {1.882, 23.1667}, {1.883, 23.0833}, {1.884, 23.0}, {1.885, 22.9167}, {1.886, 22.8333}, {1.887, 22.75}, {1.888, 22.6667}, {1.889, 22.5833}, {1.89, 22.5}, {1.891, 22.4167}, {1.892, 22.3333}, {1.893, 22.25}, {1.894, 22.1667}, {1.895, 22.0833}, {1.896, 22.0}, {1.897, 21.9167}, {1.898, 21.8333}, {1.899, 21.75}, {1.9, 21.6667}, {1.901, 21.5833}, {1.902, 21.5}, {1.903, 21.4167}, {1.904, 21.3333}, {1.905, 21.25}, {1.906, 21.1667}, {1.907, 21.0833}, {1.908, 21.0}, {1.909, 20.9167}, {1.91, 20.8333}, {1.911, 20.75}, {1.912, 20.6667}, {1.913, 20.5833}, {1.914, 20.5}, {1.915, 20.4167}, {1.916, 20.3333}, {1.917, 20.25}, {1.918, 20.1667}, {1.919, 20.0833}, {1.92, 20.0}, {1.921, 19.9286}, {1.922, 19.8571}, {1.923, 19.7857}, {1.924, 19.7143}, {1.925, 19.6429}, {1.926, 19.5714}, {1.927, 19.5}, {1.928, 19.4286}, {1.929, 19.3571}, {1.93, 19.2857}, {1.931, 19.2143}, {1.932, 19.1429}, {1.933, 19.0714}, {1.934, 19.0}, {1.935, 18.9286}, {1.936, 18.8571}, {1.937, 18.7857}, {1.938, 18.7143}, {1.939, 18.6429}, {1.94, 18.5714}, {1.941, 18.5}, {1.942, 18.4286}, {1.943, 18.3571}, {1.944, 18.2857}, {1.945, 18.2143}, {1.946, 18.1429}, {1.947, 18.0714}, {1.948, 18.0}, {1.949, 17.9286}, {1.95, 17.8571}, {1.951, 17.7857}, {1.952, 17.7143}, {1.953, 17.6429}, {1.954, 17.5714}, {1.955, 17.5}, {1.956, 17.4286}, {1.957, 17.3571}, {1.958, 17.2857}, {1.959, 17.2143}, {1.96, 17.1429}, {1.961, 17.0714}, {1.962, 17.0}, {1.963, 16.9286}, {1.964, 16.8571}, {1.965, 16.7857}, {1.966, 16.7143}, {1.967, 16.6429}, {1.968, 16.5714}, {1.969, 16.5}, {1.97, 16.4286}, {1.971, 16.3571}, {1.972, 16.2857}, {1.973, 16.2143}, {1.974, 16.1429}, {1.975, 16.0714}, {1.976, 16.0}, {1.977, 15.9286}, {1.978, 15.8571}, {1.979, 15.7857}, {1.98, 15.7143}, {1.981, 15.6429}, {1.982, 15.5714}, {1.983, 15.5}, {1.984, 15.4286}, {1.985, 15.3571}, {1.986, 15.2857}, {1.987, 15.2143}, {1.988, 15.1429}, {1.989, 15.0714}, {1.99, 15.0}, {1.991, 14.9167}, {1.992, 14.8333}, {1.993, 14.75}, {1.994, 14.6667}, {1.995, 14.5833}, {1.996, 14.5}, {1.997, 14.4167}, {1.998, 14.3333}, {1.999, 14.25}, {2.0, 14.1667}, {2.001, 14.0833}, {2.002, 14.0}, {2.003, 13.9167}, {2.004, 13.8333}, {2.005, 13.75}, {2.006, 13.6667}, {2.007, 13.5833}, {2.008, 13.5}, {2.009, 13.4167}, {2.01, 13.3333}, {2.011, 13.25}, {2.012, 13.1667}, {2.013, 13.0833}, {2.014, 13.0}, {2.015, 12.9167}, {2.016, 12.8333}, {2.017, 12.75}, {2.018, 12.6667}, {2.019, 12.5833}, {2.02, 12.5}, {2.021, 12.4167}, {2.022, 12.3333}, {2.023, 12.25}, {2.024, 12.1667}, {2.025, 12.0833}, {2.026, 12.0}, {2.027, 11.9167}, {2.028, 11.8333}, {2.029, 11.75}, {2.03, 11.6667}, {2.031, 11.5833}, {2.032, 11.5}, {2.033, 11.4167}, {2.034, 11.3333}, {2.035, 11.25}, {2.036, 11.1667}, {2.037, 11.0833}, {2.038, 11.0}, {2.039, 10.9167}, {2.04, 10.8333}, {2.041, 10.75}, {2.042, 10.6667}, {2.043, 10.5833}, {2.044, 10.5}, {2.045, 10.4167}, {2.046, 10.3333}, {2.047, 10.25}, {2.048, 10.1667}, {2.049, 10.0833}, {2.05, 10.0}, {2.051, 9.9167}, {2.052, 9.8333}, {2.053, 9.75}, {2.054, 9.6667}, {2.055, 9.5833}, {2.056, 9.5}, {2.057, 9.4167}, {2.058, 9.3333}, {2.059, 9.25}, {2.06, 9.1667}, {2.061, 9.0833}, {2.062, 9.0}, {2.063, 8.9167}, {2.064, 8.8333}, {2.065, 8.75}, {2.066, 8.6667}, {2.067, 8.5833}, {2.068, 8.5}, {2.069, 8.4167}, {2.07, 8.3333}, {2.071, 8.25}, {2.072, 8.1667}, {2.073, 8.0833}, {2.074, 8.0}, {2.075, 7.9167}, {2.076, 7.8333}, {2.077, 7.75}, {2.078, 7.6667}, {2.079, 7.5833}, {2.08, 7.5}, {2.081, 7.4167}, {2.082, 7.3333}, {2.083, 7.25}, {2.084, 7.1667}, {2.085, 7.0833}, {2.086, 7.0}, {2.087, 6.9167}, {2.088, 6.8333}, {2.089, 6.75}, {2.09, 6.6667}, {2.091, 6.5833}, {2.092, 6.5}, {2.093, 6.4167}, {2.094, 6.3333}, {2.095, 6.25}, {2.096, 6.1667}, {2.097, 6.0833}, {2.098, 6.0}, {2.099, 5.9167}, {2.1, 5.8333}, {2.101, 5.75}, {2.102, 5.6667}, {2.103, 5.5833}, {2.104, 5.5}, {2.105, 5.4167}, {2.106, 5.3333}, {2.107, 5.25}, {2.108, 5.1667}, {2.109, 5.0833}, {2.11, 5.0}, {2.111, 4.9167}, {2.112, 4.8333}, {2.113, 4.75}, {2.114, 4.6667}, {2.115, 4.5833}, {2.116, 4.5}, {2.117, 4.4167}, {2.118, 4.3333}, {2.119, 4.25}, {2.12, 4.1667}, {2.121, 4.0833}, {2.122, 4.0}, {2.123, 3.9167}, {2.124, 3.8333}, {2.125, 3.75}, {2.126, 3.6667}, {2.127, 3.5833}, {2.128, 3.5}, {2.129, 3.4167}, {2.13, 3.3333}, {2.131, 3.25}, {2.132, 3.1667}, {2.133, 3.0833}, {2.134, 3.0}, {2.135, 2.9167}, {2.136, 2.8333}, {2.137, 2.75}, {2.138, 2.6667}, {2.139, 2.5833}, {2.14, 2.5}, {2.141, 2.4167}, {2.142, 2.3333}, {2.143, 2.25}, {2.144, 2.1667}, {2.145, 2.0833}, {2.146, 2.0}, {2.147, 1.9167}, {2.148, 1.8333}, {2.149, 1.75}, {2.15, 1.6667}, {2.151, 1.5833}, {2.152, 1.5}, {2.153, 1.4167}, {2.154, 1.3333}, {2.155, 1.25}, {2.156, 1.1667}, {2.157, 1.0833}, {2.158, 1.0}, {2.159, 0.9167}, {2.16, 0.8333}, {2.161, 0.75}, {2.162, 0.6667}, {2.163, 0.5833}, {2.164, 0.5}, {2.165, 0.4167}, {2.166, 0.3333}, {2.167, 0.25}, {2.168, 0.1667}, {2.169, 0.0833}, {2.17, 0.0}, {2.171, -0.0833}, {2.172, -0.1667}, {2.173, -0.25}, {2.174, -0.3333}, {2.175, -0.4167}, {2.176, -0.5}, {2.177, -0.5833}, {2.178, -0.6667}, {2.179, -0.75}, {2.18, -0.8333}, {2.181, -0.9167}, {2.182, -1.0}, {2.183, -1.0833}, {2.184, -1.1667}, {2.185, -1.25}, {2.186, -1.3333}, {2.187, -1.4167}, {2.188, -1.5}, {2.189, -1.5833}, {2.19, -1.6667}, {2.191, -1.75}, {2.192, -1.8333}, {2.193, -1.9167}, {2.194, -2.0}, {2.195, -2.0833}, {2.196, -2.1667}, {2.197, -2.25}, {2.198, -2.3333}, {2.199, -2.4167}, {2.2, -2.5}, {2.201, -2.5833}, {2.202, -2.6667}, {2.203, -2.75}, {2.204, -2.8333}, {2.205, -2.9167}, {2.206, -3.0}, {2.207, -3.0833}, {2.208, -3.1667}, {2.209, -3.25}, {2.21, -3.3333}, {2.211, -3.4167}, {2.212, -3.5}, {2.213, -3.5833}, {2.214, -3.6667}, {2.215, -3.75}, {2.216, -3.8333}, {2.217, -3.9167}, {2.218, -4.0}, {2.219, -4.0833}, {2.22, -4.1667}, {2.221, -4.25}, {2.222, -4.3333}, {2.223, -4.4167}, {2.224, -4.5}, {2.225, -4.5833}, {2.226, -4.6667}, {2.227, -4.75}, {2.228, -4.8333}, {2.229, -4.9167}, {2.23, -5.0}, {2.231, -5.125}, {2.232, -5.25}, {2.233, -5.375}, {2.234, -5.5}, {2.235, -5.625}, {2.236, -5.75}, {2.237, -5.875}, {2.238, -6.0}, {2.239, -6.125}, {2.24, -6.25}, {2.241, -6.375}, {2.242, -6.5}, {2.243, -6.625}, {2.244, -6.75}, {2.245, -6.875}, {2.246, -7.0}, {2.247, -7.125}, {2.248, -7.25}, {2.249, -7.375}, {2.25, -7.5}, {2.251, -7.625}, {2.252, -7.75}, {2.253, -7.875}, {2.254, -8.0}, {2.255, -8.125}, {2.256, -8.25}, {2.257, -8.375}, {2.258, -8.5}, {2.259, -8.625}, {2.26, -8.75}, {2.261, -8.875}, {2.262, -9.0}, {2.263, -9.125}, {2.264, -9.25}, {2.265, -9.375}, {2.266, -9.5}, {2.267, -9.625}, {2.268, -9.75}, {2.269, -9.875}, {2.27, -10.0}, {2.271, -10.1}, {2.272, -10.2}, {2.273, -10.3}, {2.274, -10.4}, {2.275, -10.5}, {2.276, -10.6}, {2.277, -10.7}, {2.278, -10.8}, {2.279, -10.9}, {2.28, -11.0}, {2.281, -11.1}, {2.282, -11.2}, {2.283, -11.3}, {2.284, -11.4}, {2.285, -11.5}, {2.286, -11.6}, {2.287, -11.7}, {2.288, -11.8}, {2.289, -11.9}, {2.29, -12.0}, {2.291, -12.1}, {2.292, -12.2}, {2.293, -12.3}, {2.294, -12.4}, {2.295, -12.5}, {2.296, -12.6}, {2.297, -12.7}, {2.298, -12.8}, {2.299, -12.9}, {2.3, -13.0}, {2.301, -13.1}, {2.302, -13.2}, {2.303, -13.3}, {2.304, -13.4}, {2.305, -13.5}, {2.306, -13.6}, {2.307, -13.7}, {2.308, -13.8}, {2.309, -13.9}, {2.31, -14.0}, {2.311, -14.1}, {2.312, -14.2}, {2.313, -14.3}, {2.314, -14.4}, {2.315, -14.5}, {2.316, -14.6}, {2.317, -14.7}, {2.318, -14.8}, {2.319, -14.9}, {2.32, -15.0}, {2.321, -15.1667}, {2.322, -15.3333}, {2.323, -15.5}, {2.324, -15.6667}, {2.325, -15.8333}, {2.326, -16.0}, {2.327, -16.1667}, {2.328, -16.3333}, {2.329, -16.5}, {2.33, -16.6667}, {2.331, -16.8333}, {2.332, -17.0}, {2.333, -17.1667}, {2.334, -17.3333}, {2.335, -17.5}, {2.336, -17.6667}, {2.337, -17.8333}, {2.338, -18.0}, {2.339, -18.1667}, {2.34, -18.3333}, {2.341, -18.5}, {2.342, -18.6667}, {2.343, -18.8333}, {2.344, -19.0}, {2.345, -19.1667}, {2.346, -19.3333}, {2.347, -19.5}, {2.348, -19.6667}, {2.349, -19.8333}, {2.35, -20.0}, {2.351, -20.1667}, {2.352, -20.3333}, {2.353, -20.5}, {2.354, -20.6667}, {2.355, -20.8333}, {2.356, -21.0}, {2.357, -21.1667}, {2.358, -21.3333}, {2.359, -21.5}, {2.36, -21.6667}, {2.361, -21.8333}, {2.362, -22.0}, {2.363, -22.1667}, {2.364, -22.3333}, {2.365, -22.5}, {2.366, -22.6667}, {2.367, -22.8333}, {2.368, -23.0}, {2.369, -23.1667}, {2.37, -23.3333}, {2.371, -23.5}, {2.372, -23.6667}, {2.373, -23.8333}, {2.374, -24.0}, {2.375, -24.1667}, {2.376, -24.3333}, {2.377, -24.5}, {2.378, -24.6667}, {2.379, -24.8333}, {2.38, -25.0}, {2.381, -25.25}, {2.382, -25.5}, {2.383, -25.75}, {2.384, -26.0}, {2.385, -26.25}, {2.386, -26.5}, {2.387, -26.75}, {2.388, -27.0}, {2.389, -27.25}, {2.39, -27.5}, {2.391, -27.75}, {2.392, -28.0}, {2.393, -28.25}, {2.394, -28.5}, {2.395, -28.75}, {2.396, -29.0}, {2.397, -29.25}, {2.398, -29.5}, {2.399, -29.75}, {2.4, -30.0}, {2.401, -30.25}, {2.402, -30.5}, {2.403, -30.75}, {2.404, -31.0}, {2.405, -31.25}, {2.406, -31.5}, {2.407, -31.75}, {2.408, -32.0}, {2.409, -32.25}, {2.41, -32.5}, {2.411, -32.75}, {2.412, -33.0}, {2.413, -33.25}, {2.414, -33.5}, {2.415, -33.75}, {2.416, -34.0}, {2.417, -34.25}, {2.418, -34.5}, {2.419, -34.75}, {2.42, -35.0}, {2.421, -35.25}, {2.422, -35.5}, {2.423, -35.75}, {2.424, -36.0}, {2.425, -36.25}, {2.426, -36.5}, {2.427, -36.75}, {2.428, -37.0}, {2.429, -37.25}, {2.43, -37.5}, {2.431, -37.75}, {2.432, -38.0}, {2.433, -38.25}, {2.434, -38.5}, {2.435, -38.75}, {2.436, -39.0}, {2.437, -39.25}, {2.438, -39.5}, {2.439, -39.75}, {2.44, -40.0}};

// ********************************** Functions **********************************

float FEB_LTC6811_Temp_LUT_Get_Temperature(float voltage) {
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	ed87 0a01 	vstr	s0, [r7, #4]
	if (voltage < FEB_LTC6811_TEMP_LUT_MIN_MAP_VOLT || voltage > FEB_LTC6811_TEMP_LUT_MAX_MAP_VOLT) {
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7fe f88c 	bl	8000588 <__aeabi_f2d>
 8002470:	a323      	add	r3, pc, #140	; (adr r3, 8002500 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xa0>)
 8002472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002476:	f7fe fb51 	bl	8000b1c <__aeabi_dcmplt>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10a      	bne.n	8002496 <FEB_LTC6811_Temp_LUT_Get_Temperature+0x36>
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7fe f881 	bl	8000588 <__aeabi_f2d>
 8002486:	a324      	add	r3, pc, #144	; (adr r3, 8002518 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xb8>)
 8002488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248c:	f7fe fb64 	bl	8000b58 <__aeabi_dcmpgt>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <FEB_LTC6811_Temp_LUT_Get_Temperature+0x3a>
		return -42.0;
 8002496:	4b1e      	ldr	r3, [pc, #120]	; (8002510 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xb0>)
 8002498:	e028      	b.n	80024ec <FEB_LTC6811_Temp_LUT_Get_Temperature+0x8c>
	}

	uint16_t index = (uint16_t) round((voltage - FEB_LTC6811_TEMP_LUT_MIN_MAP_VOLT) / FEB_LTC6811_TEMP_LUT_RESOLUTION);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7fe f874 	bl	8000588 <__aeabi_f2d>
 80024a0:	a317      	add	r3, pc, #92	; (adr r3, 8002500 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xa0>)
 80024a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a6:	f7fd ff0f 	bl	80002c8 <__aeabi_dsub>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	a315      	add	r3, pc, #84	; (adr r3, 8002508 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xa8>)
 80024b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b8:	f7fe f9e8 	bl	800088c <__aeabi_ddiv>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	ec43 2b17 	vmov	d7, r2, r3
 80024c4:	eeb0 0a47 	vmov.f32	s0, s14
 80024c8:	eef0 0a67 	vmov.f32	s1, s15
 80024cc:	f007 fefc 	bl	800a2c8 <round>
 80024d0:	ec53 2b10 	vmov	r2, r3, d0
 80024d4:	4610      	mov	r0, r2
 80024d6:	4619      	mov	r1, r3
 80024d8:	f7fe fb86 	bl	8000be8 <__aeabi_d2uiz>
 80024dc:	4603      	mov	r3, r0
 80024de:	81fb      	strh	r3, [r7, #14]
	return FEB_LTC6811_TEMP_MAP[index][1];
 80024e0:	89fb      	ldrh	r3, [r7, #14]
 80024e2:	4a0c      	ldr	r2, [pc, #48]	; (8002514 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xb4>)
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	4413      	add	r3, r2
 80024e8:	3304      	adds	r3, #4
 80024ea:	681b      	ldr	r3, [r3, #0]
}
 80024ec:	ee07 3a90 	vmov	s15, r3
 80024f0:	eeb0 0a67 	vmov.f32	s0, s15
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	f3af 8000 	nop.w
 8002500:	cccccccd 	.word	0xcccccccd
 8002504:	3ff4cccc 	.word	0x3ff4cccc
 8002508:	d2f1a9fc 	.word	0xd2f1a9fc
 800250c:	3f50624d 	.word	0x3f50624d
 8002510:	c2280000 	.word	0xc2280000
 8002514:	20000020 	.word	0x20000020
 8002518:	b851eb85 	.word	0xb851eb85
 800251c:	4003851e 	.word	0x4003851e

08002520 <LTC6811_init_reg_limits>:

/* Initialize the Register limits */
void LTC6811_init_reg_limits(uint8_t total_ic, //The number of ICs in the system
							cell_asic *ic  //A two dimensional array where data will be written
							)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	6039      	str	r1, [r7, #0]
 800252a:	71fb      	strb	r3, [r7, #7]
  for (uint8_t cic=0; cic<total_ic; cic++)
 800252c:	2300      	movs	r3, #0
 800252e:	73fb      	strb	r3, [r7, #15]
 8002530:	e038      	b.n	80025a4 <LTC6811_init_reg_limits+0x84>
  {
    ic[cic].ic_reg.cell_channels=12;
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	22e8      	movs	r2, #232	; 0xe8
 8002536:	fb02 f303 	mul.w	r3, r2, r3
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	4413      	add	r3, r2
 800253e:	220c      	movs	r2, #12
 8002540:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    ic[cic].ic_reg.stat_channels=4;
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	22e8      	movs	r2, #232	; 0xe8
 8002548:	fb02 f303 	mul.w	r3, r2, r3
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	4413      	add	r3, r2
 8002550:	2204      	movs	r2, #4
 8002552:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    ic[cic].ic_reg.aux_channels=6;
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	22e8      	movs	r2, #232	; 0xe8
 800255a:	fb02 f303 	mul.w	r3, r2, r3
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	4413      	add	r3, r2
 8002562:	2206      	movs	r2, #6
 8002564:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
    ic[cic].ic_reg.num_cv_reg=4;
 8002568:	7bfb      	ldrb	r3, [r7, #15]
 800256a:	22e8      	movs	r2, #232	; 0xe8
 800256c:	fb02 f303 	mul.w	r3, r2, r3
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	4413      	add	r3, r2
 8002574:	2204      	movs	r2, #4
 8002576:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
    ic[cic].ic_reg.num_gpio_reg=2;
 800257a:	7bfb      	ldrb	r3, [r7, #15]
 800257c:	22e8      	movs	r2, #232	; 0xe8
 800257e:	fb02 f303 	mul.w	r3, r2, r3
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	4413      	add	r3, r2
 8002586:	2202      	movs	r2, #2
 8002588:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    ic[cic].ic_reg.num_stat_reg=3;
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	22e8      	movs	r2, #232	; 0xe8
 8002590:	fb02 f303 	mul.w	r3, r2, r3
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	4413      	add	r3, r2
 8002598:	2203      	movs	r2, #3
 800259a:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
  for (uint8_t cic=0; cic<total_ic; cic++)
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	3301      	adds	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
 80025a4:	7bfa      	ldrb	r2, [r7, #15]
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d3c2      	bcc.n	8002532 <LTC6811_init_reg_limits+0x12>
  }
}
 80025ac:	bf00      	nop
 80025ae:	bf00      	nop
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <LTC6811_wrcfg>:
order so the last device's configuration is written first.
*/
void LTC6811_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic *ic //A two dimensional array of the configuration data that will be written
                  )
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	4603      	mov	r3, r0
 80025c2:	6039      	str	r1, [r7, #0]
 80025c4:	71fb      	strb	r3, [r7, #7]
  LTC681x_wrcfg(total_ic,ic);
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	6839      	ldr	r1, [r7, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f9c4 	bl	8002958 <LTC681x_wrcfg>
}
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <LTC6811_adcv>:
/* Starts cell voltage conversion */
void LTC6811_adcv(uint8_t MD, //ADC Mode
				  uint8_t DCP, //Discharge Permit
				  uint8_t CH //Cell Channels to be measured
				  )
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
 80025e2:	460b      	mov	r3, r1
 80025e4:	71bb      	strb	r3, [r7, #6]
 80025e6:	4613      	mov	r3, r2
 80025e8:	717b      	strb	r3, [r7, #5]
  LTC681x_adcv(MD,DCP,CH);
 80025ea:	797a      	ldrb	r2, [r7, #5]
 80025ec:	79b9      	ldrb	r1, [r7, #6]
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 fa30 	bl	8002a56 <LTC681x_adcv>
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <LTC6811_adax>:

/* Start a GPIO and Vref2 Conversion */
void LTC6811_adax(uint8_t MD, //ADC Mode
				  uint8_t CHG //GPIO Channels to be measured
				  )
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	4603      	mov	r3, r0
 8002606:	460a      	mov	r2, r1
 8002608:	71fb      	strb	r3, [r7, #7]
 800260a:	4613      	mov	r3, r2
 800260c:	71bb      	strb	r3, [r7, #6]
  LTC681x_adax(MD,CHG);
 800260e:	79ba      	ldrb	r2, [r7, #6]
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f000 fa49 	bl	8002aac <LTC681x_adax>
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <LTC6811_rdcv>:
*/
uint8_t LTC6811_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // The number of ICs in the system
                     cell_asic *ic // Array of the parsed cell codes
                    )
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b084      	sub	sp, #16
 8002626:	af00      	add	r7, sp, #0
 8002628:	4603      	mov	r3, r0
 800262a:	603a      	str	r2, [r7, #0]
 800262c:	71fb      	strb	r3, [r7, #7]
 800262e:	460b      	mov	r3, r1
 8002630:	71bb      	strb	r3, [r7, #6]
  int8_t pec_error = 0;
 8002632:	2300      	movs	r3, #0
 8002634:	73fb      	strb	r3, [r7, #15]
  pec_error = LTC681x_rdcv(reg,total_ic,ic);
 8002636:	79b9      	ldrb	r1, [r7, #6]
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f000 fa5a 	bl	8002af6 <LTC681x_rdcv>
 8002642:	4603      	mov	r3, r0
 8002644:	73fb      	strb	r3, [r7, #15]
  return(pec_error);
 8002646:	7bfb      	ldrb	r3, [r7, #15]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <LTC6811_rdaux>:
*/
int8_t LTC6811_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
                     uint8_t total_ic,//The number of ICs in the system
                     cell_asic *ic//A two dimensional array of the gpio voltage codes.
                     )
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	603a      	str	r2, [r7, #0]
 800265a:	71fb      	strb	r3, [r7, #7]
 800265c:	460b      	mov	r3, r1
 800265e:	71bb      	strb	r3, [r7, #6]
  int8_t pec_error = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	73fb      	strb	r3, [r7, #15]
  LTC681x_rdaux(reg,total_ic,ic);
 8002664:	79b9      	ldrb	r1, [r7, #6]
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f000 faf7 	bl	8002c5e <LTC681x_rdaux>
  return (pec_error);
 8002670:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <LTC6811_pollAdc>:
  return(LTC681x_pladc());
}

//This function will block operation until the ADC has finished it's conversion */
uint32_t LTC6811_pollAdc()
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  return(LTC681x_pollAdc());
 8002680:	f000 fcb8 	bl	8002ff4 <LTC681x_pollAdc>
 8002684:	4603      	mov	r3, r0
}
 8002686:	4618      	mov	r0, r3
 8002688:	bd80      	pop	{r7, pc}

0800268a <LTC6811_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC6811_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that will store the data
							 )
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	4603      	mov	r3, r0
 8002692:	6039      	str	r1, [r7, #0]
 8002694:	71fb      	strb	r3, [r7, #7]
  LTC681x_reset_crc_count(total_ic,ic);
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	6839      	ldr	r1, [r7, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f000 fe92 	bl	80033c4 <LTC681x_reset_crc_count>
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <LTC6811_init_cfg>:

/* Helper function to initialize CFG variables.*/
void LTC6811_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that will store the data
					  )
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	6039      	str	r1, [r7, #0]
 80026b2:	71fb      	strb	r3, [r7, #7]
  LTC681x_init_cfg(total_ic,ic);
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	6839      	ldr	r1, [r7, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 fee9 	bl	8003490 <LTC681x_init_cfg>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <LTC6811_set_cfgr>:
					  bool dcc[12],// The DCC bit
					  bool dcto[4],// The Dcto bit
					  uint16_t uv, // The UV bit
					  uint16_t  ov // The OV bit
					  )
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b088      	sub	sp, #32
 80026ca:	af06      	add	r7, sp, #24
 80026cc:	6039      	str	r1, [r7, #0]
 80026ce:	4611      	mov	r1, r2
 80026d0:	461a      	mov	r2, r3
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
 80026d6:	460b      	mov	r3, r1
 80026d8:	71bb      	strb	r3, [r7, #6]
 80026da:	4613      	mov	r3, r2
 80026dc:	717b      	strb	r3, [r7, #5]
  LTC681x_set_cfgr(nIC ,ic,refon,adcopt,gpio,dcc,dcto, uv, ov);
 80026de:	7979      	ldrb	r1, [r7, #5]
 80026e0:	79ba      	ldrb	r2, [r7, #6]
 80026e2:	79f8      	ldrb	r0, [r7, #7]
 80026e4:	8c3b      	ldrh	r3, [r7, #32]
 80026e6:	9304      	str	r3, [sp, #16]
 80026e8:	8bbb      	ldrh	r3, [r7, #28]
 80026ea:	9303      	str	r3, [sp, #12]
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	9302      	str	r3, [sp, #8]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	460b      	mov	r3, r1
 80026fa:	6839      	ldr	r1, [r7, #0]
 80026fc:	f000 fef2 	bl	80034e4 <LTC681x_set_cfgr>
}
 8002700:	bf00      	nop
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <wakeup_idle>:
                                0x585a, 0x8ba7, 0x4e3e, 0x450c, 0x8095
                               };

/* Wake isoSPI up from IDlE state and enters the READY state */
void wakeup_idle(uint8_t total_ic) //Number of ICs in the system
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<total_ic; i++)
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	e00b      	b.n	8002730 <wakeup_idle+0x28>
	{
	   cs_low(CS_PIN);
 8002718:	200a      	movs	r0, #10
 800271a:	f001 f93d 	bl	8003998 <cs_low>
	   spi_read_byte(0xff);//Guarantees the isoSPI will be in ready mode
 800271e:	20ff      	movs	r0, #255	; 0xff
 8002720:	f001 f9b0 	bl	8003a84 <spi_read_byte>
	   cs_high(CS_PIN);
 8002724:	200a      	movs	r0, #10
 8002726:	f001 f947 	bl	80039b8 <cs_high>
	for (int i =0; i<total_ic; i++)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	3301      	adds	r3, #1
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	429a      	cmp	r2, r3
 8002736:	dbef      	blt.n	8002718 <wakeup_idle+0x10>
	}
}
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <wakeup_sleep>:

/* Generic wakeup command to wake the LTC681x from sleep state */
void wakeup_sleep(uint8_t total_ic) //Number of ICs in the system
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b084      	sub	sp, #16
 8002746:	af00      	add	r7, sp, #0
 8002748:	4603      	mov	r3, r0
 800274a:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<total_ic; i++)
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	e00f      	b.n	8002772 <wakeup_sleep+0x30>
	{
	   cs_low(CS_PIN);
 8002752:	200a      	movs	r0, #10
 8002754:	f001 f920 	bl	8003998 <cs_low>
	   delay_u(300); // Guarantees the LTC681x will be in standby
 8002758:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800275c:	f001 f93c 	bl	80039d8 <delay_u>
	   cs_high(CS_PIN);
 8002760:	200a      	movs	r0, #10
 8002762:	f001 f929 	bl	80039b8 <cs_high>
	   delay_u(10);
 8002766:	200a      	movs	r0, #10
 8002768:	f001 f936 	bl	80039d8 <delay_u>
	for (int i =0; i<total_ic; i++)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	3301      	adds	r3, #1
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	429a      	cmp	r2, r3
 8002778:	dbeb      	blt.n	8002752 <wakeup_sleep+0x10>
	}
}
 800277a:	bf00      	nop
 800277c:	bf00      	nop
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <cmd_68>:

/* Generic function to write 68xx commands. Function calculates PEC for tx_cmd data. */
void cmd_68(uint8_t tx_cmd[2]) //The command to be transmitted
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	cmd[0] = tx_cmd[0];
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	723b      	strb	r3, [r7, #8]
	cmd[1] =  tx_cmd[1];
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	785b      	ldrb	r3, [r3, #1]
 8002796:	727b      	strb	r3, [r7, #9]
	cmd_pec = pec15_calc(2, cmd);
 8002798:	f107 0308 	add.w	r3, r7, #8
 800279c:	4619      	mov	r1, r3
 800279e:	2002      	movs	r0, #2
 80027a0:	f000 f8a6 	bl	80028f0 <pec15_calc>
 80027a4:	4603      	mov	r3, r0
 80027a6:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80027a8:	89fb      	ldrh	r3, [r7, #14]
 80027aa:	0a1b      	lsrs	r3, r3, #8
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 80027b2:	89fb      	ldrh	r3, [r7, #14]
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 80027b8:	200a      	movs	r0, #10
 80027ba:	f001 f8ed 	bl	8003998 <cs_low>
	spi_write_array(4,cmd);
 80027be:	f107 0308 	add.w	r3, r7, #8
 80027c2:	4619      	mov	r1, r3
 80027c4:	2004      	movs	r0, #4
 80027c6:	f001 f913 	bl	80039f0 <spi_write_array>
	cs_high(CS_PIN);
 80027ca:	200a      	movs	r0, #10
 80027cc:	f001 f8f4 	bl	80039b8 <cs_high>
}
 80027d0:	bf00      	nop
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
			  uint8_t tx_cmd[2], //The command to be transmitted
			  uint8_t data[] // Payload Data
			  )
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
 80027e4:	73fb      	strb	r3, [r7, #15]
	const uint8_t BYTES_IN_REG = 6;
 80027e6:	2306      	movs	r3, #6
 80027e8:	773b      	strb	r3, [r7, #28]
	const uint8_t CMD_LEN = 4+(8*total_ic);
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	3304      	adds	r3, #4
 80027f2:	76fb      	strb	r3, [r7, #27]
	uint8_t *cmd;
	uint16_t data_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index;

	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 80027f4:	7efb      	ldrb	r3, [r7, #27]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f004 fe60 	bl	80074bc <malloc>
 80027fc:	4603      	mov	r3, r0
 80027fe:	617b      	str	r3, [r7, #20]
	cmd[0] = tx_cmd[0];
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	781a      	ldrb	r2, [r3, #0]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	701a      	strb	r2, [r3, #0]
	cmd[1] = tx_cmd[1];
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	3301      	adds	r3, #1
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	7852      	ldrb	r2, [r2, #1]
 8002810:	701a      	strb	r2, [r3, #0]
	cmd_pec = pec15_calc(2, cmd);
 8002812:	6979      	ldr	r1, [r7, #20]
 8002814:	2002      	movs	r0, #2
 8002816:	f000 f86b 	bl	80028f0 <pec15_calc>
 800281a:	4603      	mov	r3, r0
 800281c:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 800281e:	8a7b      	ldrh	r3, [r7, #18]
 8002820:	0a1b      	lsrs	r3, r3, #8
 8002822:	b29a      	uxth	r2, r3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	3302      	adds	r3, #2
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t)(cmd_pec);
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	3303      	adds	r3, #3
 8002830:	8a7a      	ldrh	r2, [r7, #18]
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 8002836:	2304      	movs	r3, #4
 8002838:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each LTC681x, this loops starts with the last IC on the stack.
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	77bb      	strb	r3, [r7, #30]
 800283e:	e042      	b.n	80028c6 <write_68+0xee>
    {	                                                                            //The first configuration written is received by the last IC in the daisy chain
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8002840:	2300      	movs	r3, #0
 8002842:	777b      	strb	r3, [r7, #29]
 8002844:	e016      	b.n	8002874 <write_68+0x9c>
		{
			cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 8002846:	7fbb      	ldrb	r3, [r7, #30]
 8002848:	1e5a      	subs	r2, r3, #1
 800284a:	4613      	mov	r3, r2
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	4413      	add	r3, r2
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	461a      	mov	r2, r3
 8002854:	7f7b      	ldrb	r3, [r7, #29]
 8002856:	4413      	add	r3, r2
 8002858:	461a      	mov	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	441a      	add	r2, r3
 800285e:	7ffb      	ldrb	r3, [r7, #31]
 8002860:	6979      	ldr	r1, [r7, #20]
 8002862:	440b      	add	r3, r1
 8002864:	7812      	ldrb	r2, [r2, #0]
 8002866:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 8002868:	7ffb      	ldrb	r3, [r7, #31]
 800286a:	3301      	adds	r3, #1
 800286c:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 800286e:	7f7b      	ldrb	r3, [r7, #29]
 8002870:	3301      	adds	r3, #1
 8002872:	777b      	strb	r3, [r7, #29]
 8002874:	7f7a      	ldrb	r2, [r7, #29]
 8002876:	7f3b      	ldrb	r3, [r7, #28]
 8002878:	429a      	cmp	r2, r3
 800287a:	d3e4      	bcc.n	8002846 <write_68+0x6e>
		}

		data_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &data[(current_ic-1)*6]);    // Calculating the PEC for each ICs configuration register data
 800287c:	7fbb      	ldrb	r3, [r7, #30]
 800287e:	1e5a      	subs	r2, r3, #1
 8002880:	4613      	mov	r3, r2
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	4413      	add	r3, r2
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	461a      	mov	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	441a      	add	r2, r3
 800288e:	7f3b      	ldrb	r3, [r7, #28]
 8002890:	4611      	mov	r1, r2
 8002892:	4618      	mov	r0, r3
 8002894:	f000 f82c 	bl	80028f0 <pec15_calc>
 8002898:	4603      	mov	r3, r0
 800289a:	823b      	strh	r3, [r7, #16]
		cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 800289c:	8a3b      	ldrh	r3, [r7, #16]
 800289e:	0a1b      	lsrs	r3, r3, #8
 80028a0:	b299      	uxth	r1, r3
 80028a2:	7ffb      	ldrb	r3, [r7, #31]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	4413      	add	r3, r2
 80028a8:	b2ca      	uxtb	r2, r1
 80028aa:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t)data_pec;
 80028ac:	7ffb      	ldrb	r3, [r7, #31]
 80028ae:	3301      	adds	r3, #1
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	4413      	add	r3, r2
 80028b4:	8a3a      	ldrh	r2, [r7, #16]
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 80028ba:	7ffb      	ldrb	r3, [r7, #31]
 80028bc:	3302      	adds	r3, #2
 80028be:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each LTC681x, this loops starts with the last IC on the stack.
 80028c0:	7fbb      	ldrb	r3, [r7, #30]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	77bb      	strb	r3, [r7, #30]
 80028c6:	7fbb      	ldrb	r3, [r7, #30]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1b9      	bne.n	8002840 <write_68+0x68>
	}

	cs_low(CS_PIN);
 80028cc:	200a      	movs	r0, #10
 80028ce:	f001 f863 	bl	8003998 <cs_low>
	spi_write_array(CMD_LEN, cmd);
 80028d2:	7efb      	ldrb	r3, [r7, #27]
 80028d4:	6979      	ldr	r1, [r7, #20]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f001 f88a 	bl	80039f0 <spi_write_array>
	cs_high(CS_PIN);
 80028dc:	200a      	movs	r0, #10
 80028de:	f001 f86b 	bl	80039b8 <cs_high>

	free(cmd);
 80028e2:	6978      	ldr	r0, [r7, #20]
 80028e4:	f004 fdf2 	bl	80074cc <free>
}
 80028e8:	bf00      	nop
 80028ea:	3720      	adds	r7, #32
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <pec15_calc>:

/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	6039      	str	r1, [r7, #0]
 80028fa:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder,addr;
	remainder = 16;//initialize the PEC
 80028fc:	2310      	movs	r3, #16
 80028fe:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8002900:	2300      	movs	r3, #0
 8002902:	737b      	strb	r3, [r7, #13]
 8002904:	e019      	b.n	800293a <pec15_calc+0x4a>
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 8002906:	89fb      	ldrh	r3, [r7, #14]
 8002908:	09db      	lsrs	r3, r3, #7
 800290a:	b29a      	uxth	r2, r3
 800290c:	7b7b      	ldrb	r3, [r7, #13]
 800290e:	6839      	ldr	r1, [r7, #0]
 8002910:	440b      	add	r3, r1
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	b29b      	uxth	r3, r3
 8002916:	4053      	eors	r3, r2
 8002918:	b29b      	uxth	r3, r3
 800291a:	b2db      	uxtb	r3, r3
 800291c:	817b      	strh	r3, [r7, #10]
		remainder = (remainder<<8)^crc15Table[addr];
 800291e:	89fb      	ldrh	r3, [r7, #14]
 8002920:	021b      	lsls	r3, r3, #8
 8002922:	b21a      	sxth	r2, r3
 8002924:	897b      	ldrh	r3, [r7, #10]
 8002926:	490b      	ldr	r1, [pc, #44]	; (8002954 <pec15_calc+0x64>)
 8002928:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800292c:	b21b      	sxth	r3, r3
 800292e:	4053      	eors	r3, r2
 8002930:	b21b      	sxth	r3, r3
 8002932:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8002934:	7b7b      	ldrb	r3, [r7, #13]
 8002936:	3301      	adds	r3, #1
 8002938:	737b      	strb	r3, [r7, #13]
 800293a:	7b7a      	ldrb	r2, [r7, #13]
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	429a      	cmp	r2, r3
 8002940:	d3e1      	bcc.n	8002906 <pec15_calc+0x16>
	}

	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8002942:	89fb      	ldrh	r3, [r7, #14]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	b29b      	uxth	r3, r3
}
 8002948:	4618      	mov	r0, r3
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	0800a388 	.word	0x0800a388

08002958 <LTC681x_wrcfg>:

/* Write the LTC681x CFGRA */
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[]  // A two dimensional array of the configuration data that will be written
                  )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b0c4      	sub	sp, #272	; 0x110
 800295c:	af00      	add	r7, sp, #0
 800295e:	4602      	mov	r2, r0
 8002960:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002964:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002968:	6019      	str	r1, [r3, #0]
 800296a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800296e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002972:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = {0x00 , 0x01} ;
 8002974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002978:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t c_ic = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8002988:	2300      	movs	r3, #0
 800298a:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800298e:	e048      	b.n	8002a22 <LTC681x_wrcfg+0xca>
	{
		if (ic->isospi_reverse == false)
 8002990:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002994:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 800299e:	f083 0301 	eor.w	r3, r3, #1
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d004      	beq.n	80029b2 <LTC681x_wrcfg+0x5a>
		{
			c_ic = current_ic;
 80029a8:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80029ac:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 80029b0:	e00b      	b.n	80029ca <LTC681x_wrcfg+0x72>
		}
		else
		{
			c_ic = total_ic - current_ic - 1;
 80029b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029b6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80029ba:	781a      	ldrb	r2, [r3, #0]
 80029bc:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
		}

		for (uint8_t data = 0; data<6; data++)
 80029ca:	2300      	movs	r3, #0
 80029cc:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 80029d0:	e01e      	b.n	8002a10 <LTC681x_wrcfg+0xb8>
		{
			write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 80029d2:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80029d6:	22e8      	movs	r2, #232	; 0xe8
 80029d8:	fb02 f303 	mul.w	r3, r2, r3
 80029dc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80029e0:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	18d1      	adds	r1, r2, r3
 80029e8:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 80029ec:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80029f0:	5c89      	ldrb	r1, [r1, r2]
 80029f2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80029f6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80029fa:	54d1      	strb	r1, [r2, r3]
			write_count++;
 80029fc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002a00:	3301      	adds	r3, #1
 8002a02:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		for (uint8_t data = 0; data<6; data++)
 8002a06:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8002a10:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8002a14:	2b05      	cmp	r3, #5
 8002a16:	d9dc      	bls.n	80029d2 <LTC681x_wrcfg+0x7a>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8002a18:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8002a22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a26:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002a2a:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d3ad      	bcc.n	8002990 <LTC681x_wrcfg+0x38>
		}
	}
	write_68(total_ic, cmd, write_buffer);
 8002a34:	f107 0208 	add.w	r2, r7, #8
 8002a38:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002a3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a40:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fec6 	bl	80027d8 <write_68>
}
 8002a4c:	bf00      	nop
 8002a4e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <LTC681x_adcv>:
/* Starts ADC conversion for cell voltage */
void LTC681x_adcv( uint8_t MD, //ADC Mode
				   uint8_t DCP, //Discharge Permit
				   uint8_t CH //Cell Channels to be measured
                 )
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b084      	sub	sp, #16
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	71fb      	strb	r3, [r7, #7]
 8002a60:	460b      	mov	r3, r1
 8002a62:	71bb      	strb	r3, [r7, #6]
 8002a64:	4613      	mov	r3, r2
 8002a66:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[2];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8002a68:	79fb      	ldrb	r3, [r7, #7]
 8002a6a:	105b      	asrs	r3, r3, #1
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	3302      	adds	r3, #2
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	733b      	strb	r3, [r7, #12]
	md_bits = (MD & 0x01) << 7;
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	01db      	lsls	r3, r3, #7
 8002a80:	73fb      	strb	r3, [r7, #15]
	cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8002a82:	79bb      	ldrb	r3, [r7, #6]
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	797b      	ldrb	r3, [r7, #5]
 8002a90:	4413      	add	r3, r2
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	3360      	adds	r3, #96	; 0x60
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	737b      	strb	r3, [r7, #13]

	cmd_68(cmd);
 8002a9a:	f107 030c 	add.w	r3, r7, #12
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff fe70 	bl	8002784 <cmd_68>
}
 8002aa4:	bf00      	nop
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <LTC681x_adax>:

/* Start ADC Conversion for GPIO and Vref2  */
void LTC681x_adax(uint8_t MD, //ADC Mode
				  uint8_t CHG //GPIO Channels to be measured
				  )
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	460a      	mov	r2, r1
 8002ab6:	71fb      	strb	r3, [r7, #7]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8002abc:	79fb      	ldrb	r3, [r7, #7]
 8002abe:	105b      	asrs	r3, r3, #1
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	3304      	adds	r3, #4
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	01db      	lsls	r3, r3, #7
 8002ad4:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG ;
 8002ad6:	7bfa      	ldrb	r2, [r7, #15]
 8002ad8:	79bb      	ldrb	r3, [r7, #6]
 8002ada:	4413      	add	r3, r2
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	3360      	adds	r3, #96	; 0x60
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	727b      	strb	r3, [r7, #9]

	cmd_68(cmd);
 8002ae4:	f107 0308 	add.w	r3, r7, #8
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff fe4b 	bl	8002784 <cmd_68>
}
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <LTC681x_rdcv>:
*/
uint8_t LTC681x_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // The number of ICs in the system
                     cell_asic *ic // Array of the parsed cell codes
                    )
{
 8002af6:	b5b0      	push	{r4, r5, r7, lr}
 8002af8:	b088      	sub	sp, #32
 8002afa:	af02      	add	r7, sp, #8
 8002afc:	4603      	mov	r3, r0
 8002afe:	603a      	str	r2, [r7, #0]
 8002b00:	71fb      	strb	r3, [r7, #7]
 8002b02:	460b      	mov	r3, r1
 8002b04:	71bb      	strb	r3, [r7, #6]
	int8_t pec_error = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	75fb      	strb	r3, [r7, #23]
	uint8_t *cell_data;
	uint8_t c_ic = 0;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	75bb      	strb	r3, [r7, #22]
	cell_data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8002b0e:	79bb      	ldrb	r3, [r7, #6]
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4618      	mov	r0, r3
 8002b14:	f004 fcd2 	bl	80074bc <malloc>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	60bb      	str	r3, [r7, #8]

	if (reg == 0)
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d14b      	bne.n	8002bba <LTC681x_rdcv+0xc4>
	{
		for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8002b22:	2301      	movs	r3, #1
 8002b24:	757b      	strb	r3, [r7, #21]
 8002b26:	e041      	b.n	8002bac <LTC681x_rdcv+0xb6>
		{
			LTC681x_rdcv_reg(cell_reg, total_ic,cell_data );
 8002b28:	79b9      	ldrb	r1, [r7, #6]
 8002b2a:	7d7b      	ldrb	r3, [r7, #21]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 f93d 	bl	8002dae <LTC681x_rdcv_reg>
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	e031      	b.n	8002b9e <LTC681x_rdcv+0xa8>
			{
			if (ic->isospi_reverse == false)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8002b40:	f083 0301 	eor.w	r3, r3, #1
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <LTC681x_rdcv+0x5a>
			{
			  c_ic = current_ic;
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	75bb      	strb	r3, [r7, #22]
 8002b4e:	e006      	b.n	8002b5e <LTC681x_rdcv+0x68>
			}
			else
			{
			  c_ic = total_ic - current_ic - 1;
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	79ba      	ldrb	r2, [r7, #6]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	b2d8      	uxtb	r0, r3
												&ic[c_ic].cells.c_codes[0],
 8002b62:	7dbb      	ldrb	r3, [r7, #22]
 8002b64:	22e8      	movs	r2, #232	; 0xe8
 8002b66:	fb02 f303 	mul.w	r3, r2, r3
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8002b6e:	f103 041e 	add.w	r4, r3, #30
												&ic[c_ic].cells.pec_match[0]);
 8002b72:	7dbb      	ldrb	r3, [r7, #22]
 8002b74:	22e8      	movs	r2, #232	; 0xe8
 8002b76:	fb02 f303 	mul.w	r3, r2, r3
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8002b7e:	3342      	adds	r3, #66	; 0x42
 8002b80:	7d79      	ldrb	r1, [r7, #21]
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	4623      	mov	r3, r4
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	f000 f9c2 	bl	8002f10 <parse_cells>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	7dfb      	ldrb	r3, [r7, #23]
 8002b92:	4413      	add	r3, r2
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	75fb      	strb	r3, [r7, #23]
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	79bb      	ldrb	r3, [r7, #6]
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	dbc9      	blt.n	8002b3a <LTC681x_rdcv+0x44>
		for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8002ba6:	7d7b      	ldrb	r3, [r7, #21]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	757b      	strb	r3, [r7, #21]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8002bb2:	7d7a      	ldrb	r2, [r7, #21]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d9b7      	bls.n	8002b28 <LTC681x_rdcv+0x32>
 8002bb8:	e043      	b.n	8002c42 <LTC681x_rdcv+0x14c>
		}
	}

	else
	{
		LTC681x_rdcv_reg(reg, total_ic,cell_data);
 8002bba:	79b9      	ldrb	r1, [r7, #6]
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 f8f4 	bl	8002dae <LTC681x_rdcv_reg>

		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	e036      	b.n	8002c3a <LTC681x_rdcv+0x144>
		{
			if (ic->isospi_reverse == false)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8002bd2:	f083 0301 	eor.w	r3, r3, #1
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <LTC681x_rdcv+0xec>
			{
			c_ic = current_ic;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	75bb      	strb	r3, [r7, #22]
 8002be0:	e006      	b.n	8002bf0 <LTC681x_rdcv+0xfa>
			}
			else
			{
			c_ic = total_ic - current_ic - 1;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	79ba      	ldrb	r2, [r7, #6]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	3b01      	subs	r3, #1
 8002bee:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	b2d8      	uxtb	r0, r3
 8002bf4:	7dbb      	ldrb	r3, [r7, #22]
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	189c      	adds	r4, r3, r2
											  &ic[c_ic].cells.c_codes[0],
 8002bfe:	7dbb      	ldrb	r3, [r7, #22]
 8002c00:	22e8      	movs	r2, #232	; 0xe8
 8002c02:	fb02 f303 	mul.w	r3, r2, r3
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8002c0a:	f103 051e 	add.w	r5, r3, #30
											  &ic[c_ic].cells.pec_match[0]);
 8002c0e:	7dbb      	ldrb	r3, [r7, #22]
 8002c10:	22e8      	movs	r2, #232	; 0xe8
 8002c12:	fb02 f303 	mul.w	r3, r2, r3
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8002c1a:	3342      	adds	r3, #66	; 0x42
 8002c1c:	79f9      	ldrb	r1, [r7, #7]
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	462b      	mov	r3, r5
 8002c22:	4622      	mov	r2, r4
 8002c24:	f000 f974 	bl	8002f10 <parse_cells>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	7dfb      	ldrb	r3, [r7, #23]
 8002c2e:	4413      	add	r3, r2
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	75fb      	strb	r3, [r7, #23]
		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	3301      	adds	r3, #1
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	79bb      	ldrb	r3, [r7, #6]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	dbc4      	blt.n	8002bcc <LTC681x_rdcv+0xd6>
		}
	}
	LTC681x_check_pec(total_ic,CELL,ic);
 8002c42:	79bb      	ldrb	r3, [r7, #6]
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	2101      	movs	r1, #1
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 fa17 	bl	800307c <LTC681x_check_pec>
	free(cell_data);
 8002c4e:	68b8      	ldr	r0, [r7, #8]
 8002c50:	f004 fc3c 	bl	80074cc <free>

	return(pec_error);
 8002c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bdb0      	pop	{r4, r5, r7, pc}

08002c5e <LTC681x_rdaux>:
*/
int8_t LTC681x_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
                     uint8_t total_ic,//The number of ICs in the system
                     cell_asic *ic//A two dimensional array of the gpio voltage codes.
                    )
{
 8002c5e:	b590      	push	{r4, r7, lr}
 8002c60:	b089      	sub	sp, #36	; 0x24
 8002c62:	af02      	add	r7, sp, #8
 8002c64:	4603      	mov	r3, r0
 8002c66:	603a      	str	r2, [r7, #0]
 8002c68:	71fb      	strb	r3, [r7, #7]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	71bb      	strb	r3, [r7, #6]
	uint8_t *data;
	int8_t pec_error = 0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	75fb      	strb	r3, [r7, #23]
	uint8_t c_ic =0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	75bb      	strb	r3, [r7, #22]
	data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8002c76:	79bb      	ldrb	r3, [r7, #6]
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f004 fc1e 	bl	80074bc <malloc>
 8002c80:	4603      	mov	r3, r0
 8002c82:	60bb      	str	r3, [r7, #8]

	if (reg == 0)
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d147      	bne.n	8002d1a <LTC681x_rdaux+0xbc>
	{
		for (uint8_t gpio_reg = 1; gpio_reg<ic[0].ic_reg.num_gpio_reg+1; gpio_reg++) //Executes once for each of the LTC681x aux voltage registers
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	757b      	strb	r3, [r7, #21]
 8002c8e:	e03d      	b.n	8002d0c <LTC681x_rdaux+0xae>
		{
			LTC681x_rdaux_reg(gpio_reg, total_ic,data);                 //Reads the raw auxiliary register data into the data[] array
 8002c90:	79b9      	ldrb	r1, [r7, #6]
 8002c92:	7d7b      	ldrb	r3, [r7, #21]
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 f8e7 	bl	8002e6a <LTC681x_rdaux_reg>
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	e02d      	b.n	8002cfe <LTC681x_rdaux+0xa0>
			{
				if (ic->isospi_reverse == false)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8002ca8:	f083 0301 	eor.w	r3, r3, #1
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d002      	beq.n	8002cb8 <LTC681x_rdaux+0x5a>
				{
				  c_ic = current_ic;
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	75bb      	strb	r3, [r7, #22]
 8002cb6:	e006      	b.n	8002cc6 <LTC681x_rdaux+0x68>
				}
				else
				{
				  c_ic = total_ic - current_ic - 1;
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	79ba      	ldrb	r2, [r7, #6]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	75bb      	strb	r3, [r7, #22]
				}
				pec_error = parse_cells(current_ic,gpio_reg, data,
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	b2d8      	uxtb	r0, r3
										&ic[c_ic].aux.a_codes[0],
 8002cca:	7dbb      	ldrb	r3, [r7, #22]
 8002ccc:	22e8      	movs	r2, #232	; 0xe8
 8002cce:	fb02 f303 	mul.w	r3, r2, r3
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	4413      	add	r3, r2
				pec_error = parse_cells(current_ic,gpio_reg, data,
 8002cd6:	f103 0448 	add.w	r4, r3, #72	; 0x48
										&ic[c_ic].aux.pec_match[0]);
 8002cda:	7dbb      	ldrb	r3, [r7, #22]
 8002cdc:	22e8      	movs	r2, #232	; 0xe8
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	4413      	add	r3, r2
				pec_error = parse_cells(current_ic,gpio_reg, data,
 8002ce6:	335a      	adds	r3, #90	; 0x5a
 8002ce8:	7d79      	ldrb	r1, [r7, #21]
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	4623      	mov	r3, r4
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	f000 f90e 	bl	8002f10 <parse_cells>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	75fb      	strb	r3, [r7, #23]
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	79bb      	ldrb	r3, [r7, #6]
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	dbcd      	blt.n	8002ca2 <LTC681x_rdaux+0x44>
		for (uint8_t gpio_reg = 1; gpio_reg<ic[0].ic_reg.num_gpio_reg+1; gpio_reg++) //Executes once for each of the LTC681x aux voltage registers
 8002d06:	7d7b      	ldrb	r3, [r7, #21]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	757b      	strb	r3, [r7, #21]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8002d12:	7d7a      	ldrb	r2, [r7, #21]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d9bb      	bls.n	8002c90 <LTC681x_rdaux+0x32>
 8002d18:	e03a      	b.n	8002d90 <LTC681x_rdaux+0x132>
			}
		}
	}
	else
	{
		LTC681x_rdaux_reg(reg, total_ic, data);
 8002d1a:	79b9      	ldrb	r1, [r7, #6]
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 f8a2 	bl	8002e6a <LTC681x_rdaux_reg>

		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	e02d      	b.n	8002d88 <LTC681x_rdaux+0x12a>
		{
			if (ic->isospi_reverse == false)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8002d32:	f083 0301 	eor.w	r3, r3, #1
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <LTC681x_rdaux+0xe4>
			{
			c_ic = current_ic;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	75bb      	strb	r3, [r7, #22]
 8002d40:	e006      	b.n	8002d50 <LTC681x_rdaux+0xf2>
			}
			else
			{
			c_ic = total_ic - current_ic - 1;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	79ba      	ldrb	r2, [r7, #6]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = parse_cells(current_ic,reg, data,
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	b2d8      	uxtb	r0, r3
								  &ic[c_ic].aux.a_codes[0],
 8002d54:	7dbb      	ldrb	r3, [r7, #22]
 8002d56:	22e8      	movs	r2, #232	; 0xe8
 8002d58:	fb02 f303 	mul.w	r3, r2, r3
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	4413      	add	r3, r2
			pec_error = parse_cells(current_ic,reg, data,
 8002d60:	f103 0448 	add.w	r4, r3, #72	; 0x48
								  &ic[c_ic].aux.pec_match[0]);
 8002d64:	7dbb      	ldrb	r3, [r7, #22]
 8002d66:	22e8      	movs	r2, #232	; 0xe8
 8002d68:	fb02 f303 	mul.w	r3, r2, r3
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	4413      	add	r3, r2
			pec_error = parse_cells(current_ic,reg, data,
 8002d70:	335a      	adds	r3, #90	; 0x5a
 8002d72:	79f9      	ldrb	r1, [r7, #7]
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	4623      	mov	r3, r4
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	f000 f8c9 	bl	8002f10 <parse_cells>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	75fb      	strb	r3, [r7, #23]
		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	3301      	adds	r3, #1
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	79bb      	ldrb	r3, [r7, #6]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	dbcd      	blt.n	8002d2c <LTC681x_rdaux+0xce>
		}
	}
	LTC681x_check_pec(total_ic,AUX,ic);
 8002d90:	79bb      	ldrb	r3, [r7, #6]
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	2102      	movs	r1, #2
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 f970 	bl	800307c <LTC681x_check_pec>
	free(data);
 8002d9c:	68b8      	ldr	r0, [r7, #8]
 8002d9e:	f004 fb95 	bl	80074cc <free>

	return (pec_error);
 8002da2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	371c      	adds	r7, #28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd90      	pop	{r4, r7, pc}

08002dae <LTC681x_rdcv_reg>:
/* Writes the command and reads the raw cell voltage register data */
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
                      uint8_t total_ic, //the number of ICs in the
                      uint8_t *data //An array of the unparsed cell codes
                     )
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b084      	sub	sp, #16
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	4603      	mov	r3, r0
 8002db6:	603a      	str	r2, [r7, #0]
 8002db8:	71fb      	strb	r3, [r7, #7]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; //Number of bytes in each ICs register + 2 bytes for the PEC
 8002dbe:	2308      	movs	r3, #8
 8002dc0:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //1: RDCVA
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d104      	bne.n	8002dd2 <LTC681x_rdcv_reg+0x24>
	{
		cmd[1] = 0x04;
 8002dc8:	2304      	movs	r3, #4
 8002dca:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	723b      	strb	r3, [r7, #8]
 8002dd0:	e026      	b.n	8002e20 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 2) //2: RDCVB
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d104      	bne.n	8002de2 <LTC681x_rdcv_reg+0x34>
	{
		cmd[1] = 0x06;
 8002dd8:	2306      	movs	r3, #6
 8002dda:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	723b      	strb	r3, [r7, #8]
 8002de0:	e01e      	b.n	8002e20 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 3) //3: RDCVC
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d104      	bne.n	8002df2 <LTC681x_rdcv_reg+0x44>
	{
		cmd[1] = 0x08;
 8002de8:	2308      	movs	r3, #8
 8002dea:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002dec:	2300      	movs	r3, #0
 8002dee:	723b      	strb	r3, [r7, #8]
 8002df0:	e016      	b.n	8002e20 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 4) //4: RDCVD
 8002df2:	79fb      	ldrb	r3, [r7, #7]
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d104      	bne.n	8002e02 <LTC681x_rdcv_reg+0x54>
	{
		cmd[1] = 0x0A;
 8002df8:	230a      	movs	r3, #10
 8002dfa:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	723b      	strb	r3, [r7, #8]
 8002e00:	e00e      	b.n	8002e20 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 5) //4: RDCVE
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	2b05      	cmp	r3, #5
 8002e06:	d104      	bne.n	8002e12 <LTC681x_rdcv_reg+0x64>
	{
		cmd[1] = 0x09;
 8002e08:	2309      	movs	r3, #9
 8002e0a:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	723b      	strb	r3, [r7, #8]
 8002e10:	e006      	b.n	8002e20 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 6) //4: RDCVF
 8002e12:	79fb      	ldrb	r3, [r7, #7]
 8002e14:	2b06      	cmp	r3, #6
 8002e16:	d103      	bne.n	8002e20 <LTC681x_rdcv_reg+0x72>
	{
		cmd[1] = 0x0B;
 8002e18:	230b      	movs	r3, #11
 8002e1a:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 8002e20:	f107 0308 	add.w	r3, r7, #8
 8002e24:	4619      	mov	r1, r3
 8002e26:	2002      	movs	r0, #2
 8002e28:	f7ff fd62 	bl	80028f0 <pec15_calc>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8002e30:	89bb      	ldrh	r3, [r7, #12]
 8002e32:	0a1b      	lsrs	r3, r3, #8
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8002e3a:	89bb      	ldrh	r3, [r7, #12]
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 8002e40:	200a      	movs	r0, #10
 8002e42:	f000 fda9 	bl	8003998 <cs_low>
	spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 8002e46:	7bfa      	ldrb	r2, [r7, #15]
 8002e48:	79bb      	ldrb	r3, [r7, #6]
 8002e4a:	fb12 f303 	smulbb	r3, r2, r3
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	f107 0008 	add.w	r0, r7, #8
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	2104      	movs	r1, #4
 8002e58:	f000 fdde 	bl	8003a18 <spi_write_read>
	cs_high(CS_PIN);
 8002e5c:	200a      	movs	r0, #10
 8002e5e:	f000 fdab 	bl	80039b8 <cs_high>
}
 8002e62:	bf00      	nop
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <LTC681x_rdaux_reg>:
*/
void LTC681x_rdaux_reg(uint8_t reg, //Determines which GPIO voltage register is read back
                       uint8_t total_ic, //The number of ICs in the system
                       uint8_t *data //Array of the unparsed auxiliary codes
                      )
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b084      	sub	sp, #16
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	4603      	mov	r3, r0
 8002e72:	603a      	str	r2, [r7, #0]
 8002e74:	71fb      	strb	r3, [r7, #7]
 8002e76:	460b      	mov	r3, r1
 8002e78:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; // Number of bytes in the register + 2 bytes for the PEC
 8002e7a:	2308      	movs	r3, #8
 8002e7c:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //Read back auxiliary group A
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d104      	bne.n	8002e8e <LTC681x_rdaux_reg+0x24>
	{
		cmd[1] = 0x0C;
 8002e84:	230c      	movs	r3, #12
 8002e86:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	723b      	strb	r3, [r7, #8]
 8002e8c:	e01b      	b.n	8002ec6 <LTC681x_rdaux_reg+0x5c>
	}
	else if (reg == 2)  //Read back auxiliary group B
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d104      	bne.n	8002e9e <LTC681x_rdaux_reg+0x34>
	{
		cmd[1] = 0x0E;
 8002e94:	230e      	movs	r3, #14
 8002e96:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	723b      	strb	r3, [r7, #8]
 8002e9c:	e013      	b.n	8002ec6 <LTC681x_rdaux_reg+0x5c>
	}
	else if (reg == 3)  //Read back auxiliary group C
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	2b03      	cmp	r3, #3
 8002ea2:	d104      	bne.n	8002eae <LTC681x_rdaux_reg+0x44>
	{
		cmd[1] = 0x0D;
 8002ea4:	230d      	movs	r3, #13
 8002ea6:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	723b      	strb	r3, [r7, #8]
 8002eac:	e00b      	b.n	8002ec6 <LTC681x_rdaux_reg+0x5c>
	}
	else if (reg == 4)  //Read back auxiliary group D
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d104      	bne.n	8002ebe <LTC681x_rdaux_reg+0x54>
	{
		cmd[1] = 0x0F;
 8002eb4:	230f      	movs	r3, #15
 8002eb6:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	723b      	strb	r3, [r7, #8]
 8002ebc:	e003      	b.n	8002ec6 <LTC681x_rdaux_reg+0x5c>
	}
	else          //Read back auxiliary group A
	{
		cmd[1] = 0x0C;
 8002ebe:	230c      	movs	r3, #12
 8002ec0:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 8002ec6:	f107 0308 	add.w	r3, r7, #8
 8002eca:	4619      	mov	r1, r3
 8002ecc:	2002      	movs	r0, #2
 8002ece:	f7ff fd0f 	bl	80028f0 <pec15_calc>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8002ed6:	89bb      	ldrh	r3, [r7, #12]
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8002ee0:	89bb      	ldrh	r3, [r7, #12]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 8002ee6:	200a      	movs	r0, #10
 8002ee8:	f000 fd56 	bl	8003998 <cs_low>
	spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 8002eec:	7bfa      	ldrb	r2, [r7, #15]
 8002eee:	79bb      	ldrb	r3, [r7, #6]
 8002ef0:	fb12 f303 	smulbb	r3, r2, r3
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	f107 0008 	add.w	r0, r7, #8
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	2104      	movs	r1, #4
 8002efe:	f000 fd8b 	bl	8003a18 <spi_write_read>
	cs_high(CS_PIN);
 8002f02:	200a      	movs	r0, #10
 8002f04:	f000 fd58 	bl	80039b8 <cs_high>
}
 8002f08:	bf00      	nop
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <parse_cells>:
					uint8_t cell_reg,  // Type of register
					uint8_t cell_data[], // Unparsed data
					uint16_t *cell_codes, // Parsed data
					uint8_t *ic_pec // PEC error
					)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b088      	sub	sp, #32
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60ba      	str	r2, [r7, #8]
 8002f18:	607b      	str	r3, [r7, #4]
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	73fb      	strb	r3, [r7, #15]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	73bb      	strb	r3, [r7, #14]
	const uint8_t BYT_IN_REG = 6;
 8002f22:	2306      	movs	r3, #6
 8002f24:	773b      	strb	r3, [r7, #28]
	const uint8_t CELL_IN_REG = 3;
 8002f26:	2303      	movs	r3, #3
 8002f28:	76fb      	strb	r3, [r7, #27]
	int8_t pec_error = 0;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	77fb      	strb	r3, [r7, #31]
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = current_ic*NUM_RX_BYT; //data counter
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	77bb      	strb	r3, [r7, #30]


	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8002f34:	2300      	movs	r3, #0
 8002f36:	777b      	strb	r3, [r7, #29]
 8002f38:	e020      	b.n	8002f7c <parse_cells+0x6c>
	{																		// loops once for each of the 3 codes in the register

		parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each code is received as two bytes and is combined to
 8002f3a:	7fbb      	ldrb	r3, [r7, #30]
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	4413      	add	r3, r2
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	7fbb      	ldrb	r3, [r7, #30]
 8002f46:	3301      	adds	r3, #1
 8002f48:	68b9      	ldr	r1, [r7, #8]
 8002f4a:	440b      	add	r3, r1
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	4413      	add	r3, r2
 8002f56:	82bb      	strh	r3, [r7, #20]
																				   // create the parsed code
		cell_codes[current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8002f58:	7f7a      	ldrb	r2, [r7, #29]
 8002f5a:	7bbb      	ldrb	r3, [r7, #14]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	7ef9      	ldrb	r1, [r7, #27]
 8002f60:	fb01 f303 	mul.w	r3, r1, r3
 8002f64:	4413      	add	r3, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	8aba      	ldrh	r2, [r7, #20]
 8002f6e:	801a      	strh	r2, [r3, #0]

		data_counter = data_counter + 2;                       //Because the codes are two bytes, the data counter
 8002f70:	7fbb      	ldrb	r3, [r7, #30]
 8002f72:	3302      	adds	r3, #2
 8002f74:	77bb      	strb	r3, [r7, #30]
	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8002f76:	7f7b      	ldrb	r3, [r7, #29]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	777b      	strb	r3, [r7, #29]
 8002f7c:	7f7a      	ldrb	r2, [r7, #29]
 8002f7e:	7efb      	ldrb	r3, [r7, #27]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d3da      	bcc.n	8002f3a <parse_cells+0x2a>
															  //must increment by two for each parsed code
	}
	received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8002f84:	7fbb      	ldrb	r3, [r7, #30]
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	4413      	add	r3, r2
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	021b      	lsls	r3, r3, #8
 8002f8e:	b21a      	sxth	r2, r3
 8002f90:	7fbb      	ldrb	r3, [r7, #30]
 8002f92:	3301      	adds	r3, #1
 8002f94:	68b9      	ldr	r1, [r7, #8]
 8002f96:	440b      	add	r3, r1
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	b21b      	sxth	r3, r3
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	b21b      	sxth	r3, r3
 8002fa0:	833b      	strh	r3, [r7, #24]
																			   //after the 6 cell voltage data bytes
	data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	441a      	add	r2, r3
 8002fac:	7f3b      	ldrb	r3, [r7, #28]
 8002fae:	4611      	mov	r1, r2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff fc9d 	bl	80028f0 <pec15_calc>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	82fb      	strh	r3, [r7, #22]

	if (received_pec != data_pec)
 8002fba:	8b3a      	ldrh	r2, [r7, #24]
 8002fbc:	8afb      	ldrh	r3, [r7, #22]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d008      	beq.n	8002fd4 <parse_cells+0xc4>
	{
		pec_error = 1;                             //The pec_error variable is simply set negative if any PEC errors
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	77fb      	strb	r3, [r7, #31]
		ic_pec[cell_reg-1]=1;
 8002fc6:	7bbb      	ldrb	r3, [r7, #14]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fcc:	4413      	add	r3, r2
 8002fce:	2201      	movs	r2, #1
 8002fd0:	701a      	strb	r2, [r3, #0]
 8002fd2:	e005      	b.n	8002fe0 <parse_cells+0xd0>
	}
	else
	{
		ic_pec[cell_reg-1]=0;
 8002fd4:	7bbb      	ldrb	r3, [r7, #14]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fda:	4413      	add	r3, r2
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
	}
	data_counter=data_counter+2;
 8002fe0:	7fbb      	ldrb	r3, [r7, #30]
 8002fe2:	3302      	adds	r3, #2
 8002fe4:	77bb      	strb	r3, [r7, #30]

	return(pec_error);
 8002fe6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3720      	adds	r7, #32
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <LTC681x_pollAdc>:
	return(adc_state);
}

/* This function will block operation until the ADC has finished it's conversion */
uint32_t LTC681x_pollAdc()
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8003006:	2307      	movs	r3, #7
 8003008:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 800300a:	2314      	movs	r3, #20
 800300c:	717b      	strb	r3, [r7, #5]
	cmd_pec = pec15_calc(2, cmd);
 800300e:	1d3b      	adds	r3, r7, #4
 8003010:	4619      	mov	r1, r3
 8003012:	2002      	movs	r0, #2
 8003014:	f7ff fc6c 	bl	80028f0 <pec15_calc>
 8003018:	4603      	mov	r3, r0
 800301a:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 800301c:	893b      	ldrh	r3, [r7, #8]
 800301e:	0a1b      	lsrs	r3, r3, #8
 8003020:	b29b      	uxth	r3, r3
 8003022:	b2db      	uxtb	r3, r3
 8003024:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t)(cmd_pec);
 8003026:	893b      	ldrh	r3, [r7, #8]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	71fb      	strb	r3, [r7, #7]

	cs_low(CS_PIN);
 800302c:	200a      	movs	r0, #10
 800302e:	f000 fcb3 	bl	8003998 <cs_low>
	spi_write_array(4,cmd);
 8003032:	1d3b      	adds	r3, r7, #4
 8003034:	4619      	mov	r1, r3
 8003036:	2004      	movs	r0, #4
 8003038:	f000 fcda 	bl	80039f0 <spi_write_array>
	while ((counter<200000)&&(finished == 0))
 800303c:	e00d      	b.n	800305a <LTC681x_pollAdc+0x66>
	{
		current_time = spi_read_byte(0xff);
 800303e:	20ff      	movs	r0, #255	; 0xff
 8003040:	f000 fd20 	bl	8003a84 <spi_read_byte>
 8003044:	4603      	mov	r3, r0
 8003046:	72bb      	strb	r3, [r7, #10]
		if (current_time>0)
 8003048:	7abb      	ldrb	r3, [r7, #10]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <LTC681x_pollAdc+0x60>
		{
			finished = 1;
 800304e:	2301      	movs	r3, #1
 8003050:	72fb      	strb	r3, [r7, #11]
 8003052:	e002      	b.n	800305a <LTC681x_pollAdc+0x66>
		}
		else
		{
			counter = counter + 10;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	330a      	adds	r3, #10
 8003058:	60fb      	str	r3, [r7, #12]
	while ((counter<200000)&&(finished == 0))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4a06      	ldr	r2, [pc, #24]	; (8003078 <LTC681x_pollAdc+0x84>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d802      	bhi.n	8003068 <LTC681x_pollAdc+0x74>
 8003062:	7afb      	ldrb	r3, [r7, #11]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0ea      	beq.n	800303e <LTC681x_pollAdc+0x4a>
		}
	}
	cs_high(CS_PIN);
 8003068:	200a      	movs	r0, #10
 800306a:	f000 fca5 	bl	80039b8 <cs_high>

	return(counter);
 800306e:	68fb      	ldr	r3, [r7, #12]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	00030d3f 	.word	0x00030d3f

0800307c <LTC681x_check_pec>:
/* Helper function that increments PEC counters */
void LTC681x_check_pec(uint8_t total_ic, //Number of ICs in the system
					   uint8_t reg, //Type of Register
					   cell_asic *ic //A two dimensional array that stores the data
					   )
{
 800307c:	b480      	push	{r7}
 800307e:	b08b      	sub	sp, #44	; 0x2c
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	603a      	str	r2, [r7, #0]
 8003086:	71fb      	strb	r3, [r7, #7]
 8003088:	460b      	mov	r3, r1
 800308a:	71bb      	strb	r3, [r7, #6]
	switch (reg)
 800308c:	79bb      	ldrb	r3, [r7, #6]
 800308e:	2b04      	cmp	r3, #4
 8003090:	f200 8191 	bhi.w	80033b6 <LTC681x_check_pec+0x33a>
 8003094:	a201      	add	r2, pc, #4	; (adr r2, 800309c <LTC681x_check_pec+0x20>)
 8003096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309a:	bf00      	nop
 800309c:	080030b1 	.word	0x080030b1
 80030a0:	080031ad 	.word	0x080031ad
 80030a4:	0800325f 	.word	0x0800325f
 80030a8:	0800330b 	.word	0x0800330b
 80030ac:	0800312f 	.word	0x0800312f
	{
		case LTC681x_CFGR:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80030b0:	2300      	movs	r3, #0
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
 80030b4:	e036      	b.n	8003124 <LTC681x_check_pec+0xa8>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].config.rx_pec_match;
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	22e8      	movs	r2, #232	; 0xe8
 80030ba:	fb02 f303 	mul.w	r3, r2, r3
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	4413      	add	r3, r2
 80030c2:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	22e8      	movs	r2, #232	; 0xe8
 80030ca:	fb02 f303 	mul.w	r3, r2, r3
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	4413      	add	r3, r2
 80030d2:	7b9b      	ldrb	r3, [r3, #14]
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	20e8      	movs	r0, #232	; 0xe8
 80030da:	fb00 f303 	mul.w	r3, r0, r3
 80030de:	6838      	ldr	r0, [r7, #0]
 80030e0:	4403      	add	r3, r0
 80030e2:	440a      	add	r2, r1
 80030e4:	b292      	uxth	r2, r2
 80030e6:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].config.rx_pec_match;
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	22e8      	movs	r2, #232	; 0xe8
 80030ee:	fb02 f303 	mul.w	r3, r2, r3
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	4413      	add	r3, r2
 80030f6:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	22e8      	movs	r2, #232	; 0xe8
 80030fe:	fb02 f303 	mul.w	r3, r2, r3
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	4413      	add	r3, r2
 8003106:	7b9b      	ldrb	r3, [r3, #14]
 8003108:	b29a      	uxth	r2, r3
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	20e8      	movs	r0, #232	; 0xe8
 800310e:	fb00 f303 	mul.w	r3, r0, r3
 8003112:	6838      	ldr	r0, [r7, #0]
 8003114:	4403      	add	r3, r0
 8003116:	440a      	add	r2, r1
 8003118:	b292      	uxth	r2, r2
 800311a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	3301      	adds	r3, #1
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
 8003124:	79fb      	ldrb	r3, [r7, #7]
 8003126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003128:	429a      	cmp	r2, r3
 800312a:	dbc4      	blt.n	80030b6 <LTC681x_check_pec+0x3a>
		  }
		break;
 800312c:	e144      	b.n	80033b8 <LTC681x_check_pec+0x33c>

		case CFGRB:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800312e:	2300      	movs	r3, #0
 8003130:	623b      	str	r3, [r7, #32]
 8003132:	e036      	b.n	80031a2 <LTC681x_check_pec+0x126>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configb.rx_pec_match;
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	22e8      	movs	r2, #232	; 0xe8
 8003138:	fb02 f303 	mul.w	r3, r2, r3
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	4413      	add	r3, r2
 8003140:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	22e8      	movs	r2, #232	; 0xe8
 8003148:	fb02 f303 	mul.w	r3, r2, r3
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	4413      	add	r3, r2
 8003150:	7f5b      	ldrb	r3, [r3, #29]
 8003152:	b29a      	uxth	r2, r3
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	20e8      	movs	r0, #232	; 0xe8
 8003158:	fb00 f303 	mul.w	r3, r0, r3
 800315c:	6838      	ldr	r0, [r7, #0]
 800315e:	4403      	add	r3, r0
 8003160:	440a      	add	r2, r1
 8003162:	b292      	uxth	r2, r2
 8003164:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configb.rx_pec_match;
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	22e8      	movs	r2, #232	; 0xe8
 800316c:	fb02 f303 	mul.w	r3, r2, r3
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	4413      	add	r3, r2
 8003174:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	22e8      	movs	r2, #232	; 0xe8
 800317c:	fb02 f303 	mul.w	r3, r2, r3
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	4413      	add	r3, r2
 8003184:	7f5b      	ldrb	r3, [r3, #29]
 8003186:	b29a      	uxth	r2, r3
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	20e8      	movs	r0, #232	; 0xe8
 800318c:	fb00 f303 	mul.w	r3, r0, r3
 8003190:	6838      	ldr	r0, [r7, #0]
 8003192:	4403      	add	r3, r0
 8003194:	440a      	add	r2, r1
 8003196:	b292      	uxth	r2, r2
 8003198:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	3301      	adds	r3, #1
 80031a0:	623b      	str	r3, [r7, #32]
 80031a2:	79fb      	ldrb	r3, [r7, #7]
 80031a4:	6a3a      	ldr	r2, [r7, #32]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	dbc4      	blt.n	8003134 <LTC681x_check_pec+0xb8>
		  }
		break;
 80031aa:	e105      	b.n	80033b8 <LTC681x_check_pec+0x33c>
		case CELL:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80031ac:	2300      	movs	r3, #0
 80031ae:	61fb      	str	r3, [r7, #28]
 80031b0:	e050      	b.n	8003254 <LTC681x_check_pec+0x1d8>
		  {
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 80031b2:	2300      	movs	r3, #0
 80031b4:	61bb      	str	r3, [r7, #24]
 80031b6:	e043      	b.n	8003240 <LTC681x_check_pec+0x1c4>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].cells.pec_match[i];
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	22e8      	movs	r2, #232	; 0xe8
 80031bc:	fb02 f303 	mul.w	r3, r2, r3
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	4413      	add	r3, r2
 80031c4:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	22e8      	movs	r2, #232	; 0xe8
 80031cc:	fb02 f303 	mul.w	r3, r2, r3
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	441a      	add	r2, r3
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	4413      	add	r3, r2
 80031d8:	3342      	adds	r3, #66	; 0x42
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	b29a      	uxth	r2, r3
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	20e8      	movs	r0, #232	; 0xe8
 80031e2:	fb00 f303 	mul.w	r3, r0, r3
 80031e6:	6838      	ldr	r0, [r7, #0]
 80031e8:	4403      	add	r3, r0
 80031ea:	440a      	add	r2, r1
 80031ec:	b292      	uxth	r2, r2
 80031ee:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.cell_pec[i] = ic[current_ic].crc_count.cell_pec[i] + ic[current_ic].cells.pec_match[i];
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	22e8      	movs	r2, #232	; 0xe8
 80031f6:	fb02 f303 	mul.w	r3, r2, r3
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	441a      	add	r2, r3
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	3360      	adds	r3, #96	; 0x60
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	4413      	add	r3, r2
 8003206:	8899      	ldrh	r1, [r3, #4]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	22e8      	movs	r2, #232	; 0xe8
 800320c:	fb02 f303 	mul.w	r3, r2, r3
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	441a      	add	r2, r3
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	4413      	add	r3, r2
 8003218:	3342      	adds	r3, #66	; 0x42
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	b29b      	uxth	r3, r3
 800321e:	69fa      	ldr	r2, [r7, #28]
 8003220:	20e8      	movs	r0, #232	; 0xe8
 8003222:	fb00 f202 	mul.w	r2, r0, r2
 8003226:	6838      	ldr	r0, [r7, #0]
 8003228:	4402      	add	r2, r0
 800322a:	440b      	add	r3, r1
 800322c:	b299      	uxth	r1, r3
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	3360      	adds	r3, #96	; 0x60
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	4413      	add	r3, r2
 8003236:	460a      	mov	r2, r1
 8003238:	809a      	strh	r2, [r3, #4]
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	3301      	adds	r3, #1
 800323e:	61bb      	str	r3, [r7, #24]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8003246:	461a      	mov	r2, r3
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	4293      	cmp	r3, r2
 800324c:	dbb4      	blt.n	80031b8 <LTC681x_check_pec+0x13c>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	3301      	adds	r3, #1
 8003252:	61fb      	str	r3, [r7, #28]
 8003254:	79fb      	ldrb	r3, [r7, #7]
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	429a      	cmp	r2, r3
 800325a:	dbaa      	blt.n	80031b2 <LTC681x_check_pec+0x136>
			}
		  }
		break;
 800325c:	e0ac      	b.n	80033b8 <LTC681x_check_pec+0x33c>
		case AUX:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	e04d      	b.n	8003300 <LTC681x_check_pec+0x284>
		  {
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8003264:	2300      	movs	r3, #0
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	e040      	b.n	80032ec <LTC681x_check_pec+0x270>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + (ic[current_ic].aux.pec_match[i]);
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	22e8      	movs	r2, #232	; 0xe8
 800326e:	fb02 f303 	mul.w	r3, r2, r3
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	4413      	add	r3, r2
 8003276:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	22e8      	movs	r2, #232	; 0xe8
 800327e:	fb02 f303 	mul.w	r3, r2, r3
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	441a      	add	r2, r3
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4413      	add	r3, r2
 800328a:	335a      	adds	r3, #90	; 0x5a
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	b29a      	uxth	r2, r3
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	20e8      	movs	r0, #232	; 0xe8
 8003294:	fb00 f303 	mul.w	r3, r0, r3
 8003298:	6838      	ldr	r0, [r7, #0]
 800329a:	4403      	add	r3, r0
 800329c:	440a      	add	r2, r1
 800329e:	b292      	uxth	r2, r2
 80032a0:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.aux_pec[i] = ic[current_ic].crc_count.aux_pec[i] + (ic[current_ic].aux.pec_match[i]);
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	22e8      	movs	r2, #232	; 0xe8
 80032a8:	fb02 f303 	mul.w	r3, r2, r3
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	4413      	add	r3, r2
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	3268      	adds	r2, #104	; 0x68
 80032b4:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	22e8      	movs	r2, #232	; 0xe8
 80032bc:	fb02 f303 	mul.w	r3, r2, r3
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	441a      	add	r2, r3
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4413      	add	r3, r2
 80032c8:	335a      	adds	r3, #90	; 0x5a
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	20e8      	movs	r0, #232	; 0xe8
 80032d2:	fb00 f303 	mul.w	r3, r0, r3
 80032d6:	6838      	ldr	r0, [r7, #0]
 80032d8:	4403      	add	r3, r0
 80032da:	440a      	add	r2, r1
 80032dc:	b291      	uxth	r1, r2
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	3268      	adds	r2, #104	; 0x68
 80032e2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	3301      	adds	r3, #1
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80032f2:	461a      	mov	r2, r3
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4293      	cmp	r3, r2
 80032f8:	dbb7      	blt.n	800326a <LTC681x_check_pec+0x1ee>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	3301      	adds	r3, #1
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	429a      	cmp	r2, r3
 8003306:	dbad      	blt.n	8003264 <LTC681x_check_pec+0x1e8>
			}
		  }

		break;
 8003308:	e056      	b.n	80033b8 <LTC681x_check_pec+0x33c>
		case STAT:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	e04d      	b.n	80033ac <LTC681x_check_pec+0x330>
		  {

			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8003310:	2300      	movs	r3, #0
 8003312:	60bb      	str	r3, [r7, #8]
 8003314:	e040      	b.n	8003398 <LTC681x_check_pec+0x31c>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].stat.pec_match[i];
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	22e8      	movs	r2, #232	; 0xe8
 800331a:	fb02 f303 	mul.w	r3, r2, r3
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	4413      	add	r3, r2
 8003322:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	22e8      	movs	r2, #232	; 0xe8
 800332a:	fb02 f303 	mul.w	r3, r2, r3
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	441a      	add	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	4413      	add	r3, r2
 8003336:	336b      	adds	r3, #107	; 0x6b
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	20e8      	movs	r0, #232	; 0xe8
 8003340:	fb00 f303 	mul.w	r3, r0, r3
 8003344:	6838      	ldr	r0, [r7, #0]
 8003346:	4403      	add	r3, r0
 8003348:	440a      	add	r2, r1
 800334a:	b292      	uxth	r2, r2
 800334c:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.stat_pec[i] = ic[current_ic].crc_count.stat_pec[i] + ic[current_ic].stat.pec_match[i];
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	22e8      	movs	r2, #232	; 0xe8
 8003354:	fb02 f303 	mul.w	r3, r2, r3
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	4413      	add	r3, r2
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	326c      	adds	r2, #108	; 0x6c
 8003360:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	22e8      	movs	r2, #232	; 0xe8
 8003368:	fb02 f303 	mul.w	r3, r2, r3
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	441a      	add	r2, r3
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	4413      	add	r3, r2
 8003374:	336b      	adds	r3, #107	; 0x6b
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	20e8      	movs	r0, #232	; 0xe8
 800337e:	fb00 f303 	mul.w	r3, r0, r3
 8003382:	6838      	ldr	r0, [r7, #0]
 8003384:	4403      	add	r3, r0
 8003386:	440a      	add	r2, r1
 8003388:	b291      	uxth	r1, r2
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	326c      	adds	r2, #108	; 0x6c
 800338e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	3301      	adds	r3, #1
 8003396:	60bb      	str	r3, [r7, #8]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800339e:	3b01      	subs	r3, #1
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	dbb7      	blt.n	8003316 <LTC681x_check_pec+0x29a>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	3301      	adds	r3, #1
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	dbad      	blt.n	8003310 <LTC681x_check_pec+0x294>
			}
		  }
		break;
 80033b4:	e000      	b.n	80033b8 <LTC681x_check_pec+0x33c>
		default:
		break;
 80033b6:	bf00      	nop
	}
}
 80033b8:	bf00      	nop
 80033ba:	372c      	adds	r7, #44	; 0x2c
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <LTC681x_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC681x_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that stores the data
							 )
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	6039      	str	r1, [r7, #0]
 80033ce:	71fb      	strb	r3, [r7, #7]
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	e051      	b.n	800347a <LTC681x_reset_crc_count+0xb6>
	{
		ic[current_ic].crc_count.pec_count = 0;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	22e8      	movs	r2, #232	; 0xe8
 80033da:	fb02 f303 	mul.w	r3, r2, r3
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	4413      	add	r3, r2
 80033e2:	2200      	movs	r2, #0
 80033e4:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		ic[current_ic].crc_count.cfgr_pec = 0;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	22e8      	movs	r2, #232	; 0xe8
 80033ec:	fb02 f303 	mul.w	r3, r2, r3
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	4413      	add	r3, r2
 80033f4:	2200      	movs	r2, #0
 80033f6:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		for (int i=0; i<6; i++)
 80033fa:	2300      	movs	r3, #0
 80033fc:	613b      	str	r3, [r7, #16]
 80033fe:	e00e      	b.n	800341e <LTC681x_reset_crc_count+0x5a>
		{
			ic[current_ic].crc_count.cell_pec[i]=0;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	22e8      	movs	r2, #232	; 0xe8
 8003404:	fb02 f303 	mul.w	r3, r2, r3
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	441a      	add	r2, r3
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	3360      	adds	r3, #96	; 0x60
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	4413      	add	r3, r2
 8003414:	2200      	movs	r2, #0
 8003416:	809a      	strh	r2, [r3, #4]
		for (int i=0; i<6; i++)
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	3301      	adds	r3, #1
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	2b05      	cmp	r3, #5
 8003422:	dded      	ble.n	8003400 <LTC681x_reset_crc_count+0x3c>

		}
		for (int i=0; i<4; i++)
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	e00d      	b.n	8003446 <LTC681x_reset_crc_count+0x82>
		{
			ic[current_ic].crc_count.aux_pec[i]=0;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	22e8      	movs	r2, #232	; 0xe8
 800342e:	fb02 f303 	mul.w	r3, r2, r3
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	4413      	add	r3, r2
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	3268      	adds	r2, #104	; 0x68
 800343a:	2100      	movs	r1, #0
 800343c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int i=0; i<4; i++)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	3301      	adds	r3, #1
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b03      	cmp	r3, #3
 800344a:	ddee      	ble.n	800342a <LTC681x_reset_crc_count+0x66>
		}
		for (int i=0; i<2; i++)
 800344c:	2300      	movs	r3, #0
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	e00d      	b.n	800346e <LTC681x_reset_crc_count+0xaa>
		{
			ic[current_ic].crc_count.stat_pec[i]=0;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	22e8      	movs	r2, #232	; 0xe8
 8003456:	fb02 f303 	mul.w	r3, r2, r3
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	4413      	add	r3, r2
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	326c      	adds	r2, #108	; 0x6c
 8003462:	2100      	movs	r1, #0
 8003464:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int i=0; i<2; i++)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	3301      	adds	r3, #1
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b01      	cmp	r3, #1
 8003472:	ddee      	ble.n	8003452 <LTC681x_reset_crc_count+0x8e>
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	3301      	adds	r3, #1
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	429a      	cmp	r2, r3
 8003480:	dba9      	blt.n	80033d6 <LTC681x_reset_crc_count+0x12>
		}
	}
}
 8003482:	bf00      	nop
 8003484:	bf00      	nop
 8003486:	371c      	adds	r7, #28
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <LTC681x_init_cfg>:

/* Helper function to initialize CFG variables */
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that stores the data
					  )
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	6039      	str	r1, [r7, #0]
 800349a:	71fb      	strb	r3, [r7, #7]
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 800349c:	2300      	movs	r3, #0
 800349e:	73fb      	strb	r3, [r7, #15]
 80034a0:	e015      	b.n	80034ce <LTC681x_init_cfg+0x3e>
	{
		for (int j =0; j<6; j++)
 80034a2:	2300      	movs	r3, #0
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	e00c      	b.n	80034c2 <LTC681x_init_cfg+0x32>
		{
		  ic[current_ic].config.tx_data[j] = 0;
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
 80034aa:	22e8      	movs	r2, #232	; 0xe8
 80034ac:	fb02 f303 	mul.w	r3, r2, r3
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	441a      	add	r2, r3
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	4413      	add	r3, r2
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
		for (int j =0; j<6; j++)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	3301      	adds	r3, #1
 80034c0:	60bb      	str	r3, [r7, #8]
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b05      	cmp	r3, #5
 80034c6:	ddef      	ble.n	80034a8 <LTC681x_init_cfg+0x18>
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	3301      	adds	r3, #1
 80034cc:	73fb      	strb	r3, [r7, #15]
 80034ce:	7bfa      	ldrb	r2, [r7, #15]
 80034d0:	79fb      	ldrb	r3, [r7, #7]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d3e5      	bcc.n	80034a2 <LTC681x_init_cfg+0x12>
		}
	}
}
 80034d6:	bf00      	nop
 80034d8:	bf00      	nop
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <LTC681x_set_cfgr>:
					 bool dcc[12], // The DCC bits
					 bool dcto[4], // The Dcto bits
					 uint16_t uv, // The UV value
					 uint16_t  ov // The OV value
					 )
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6039      	str	r1, [r7, #0]
 80034ec:	4611      	mov	r1, r2
 80034ee:	461a      	mov	r2, r3
 80034f0:	4603      	mov	r3, r0
 80034f2:	71fb      	strb	r3, [r7, #7]
 80034f4:	460b      	mov	r3, r1
 80034f6:	71bb      	strb	r3, [r7, #6]
 80034f8:	4613      	mov	r3, r2
 80034fa:	717b      	strb	r3, [r7, #5]
	LTC681x_set_cfgr_refon(nIC,ic,refon);
 80034fc:	79ba      	ldrb	r2, [r7, #6]
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	6839      	ldr	r1, [r7, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f828 	bl	8003558 <LTC681x_set_cfgr_refon>
	LTC681x_set_cfgr_adcopt(nIC,ic,adcopt);
 8003508:	797a      	ldrb	r2, [r7, #5]
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	6839      	ldr	r1, [r7, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f000 f856 	bl	80035c0 <LTC681x_set_cfgr_adcopt>
	LTC681x_set_cfgr_gpio(nIC,ic,gpio);
 8003514:	79fb      	ldrb	r3, [r7, #7]
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	6839      	ldr	r1, [r7, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f000 f884 	bl	8003628 <LTC681x_set_cfgr_gpio>
	LTC681x_set_cfgr_dis(nIC,ic,dcc);
 8003520:	79fb      	ldrb	r3, [r7, #7]
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	6839      	ldr	r1, [r7, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f000 f8ce 	bl	80036c8 <LTC681x_set_cfgr_dis>
	LTC681x_set_cfgr_dcto(nIC,ic,dcto);
 800352c:	79fb      	ldrb	r3, [r7, #7]
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	6839      	ldr	r1, [r7, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f000 f957 	bl	80037e6 <LTC681x_set_cfgr_dcto>
	LTC681x_set_cfgr_uv(nIC, ic, uv);
 8003538:	8bba      	ldrh	r2, [r7, #28]
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	6839      	ldr	r1, [r7, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f000 f9a1 	bl	8003886 <LTC681x_set_cfgr_uv>
	LTC681x_set_cfgr_ov(nIC, ic, ov);
 8003544:	8c3a      	ldrh	r2, [r7, #32]
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	6839      	ldr	r1, [r7, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f000 f9e1 	bl	8003912 <LTC681x_set_cfgr_ov>
}
 8003550:	bf00      	nop
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <LTC681x_set_cfgr_refon>:

/* Helper function to set the REFON bit */
void LTC681x_set_cfgr_refon(uint8_t nIC, cell_asic *ic, bool refon)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	6039      	str	r1, [r7, #0]
 8003562:	71fb      	strb	r3, [r7, #7]
 8003564:	4613      	mov	r3, r2
 8003566:	71bb      	strb	r3, [r7, #6]
	if (refon) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x04;
 8003568:	79bb      	ldrb	r3, [r7, #6]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d011      	beq.n	8003592 <LTC681x_set_cfgr_refon+0x3a>
 800356e:	79fb      	ldrb	r3, [r7, #7]
 8003570:	22e8      	movs	r2, #232	; 0xe8
 8003572:	fb02 f303 	mul.w	r3, r2, r3
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	4413      	add	r3, r2
 800357a:	781a      	ldrb	r2, [r3, #0]
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	21e8      	movs	r1, #232	; 0xe8
 8003580:	fb01 f303 	mul.w	r3, r1, r3
 8003584:	6839      	ldr	r1, [r7, #0]
 8003586:	440b      	add	r3, r1
 8003588:	f042 0204 	orr.w	r2, r2, #4
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
}
 8003590:	e010      	b.n	80035b4 <LTC681x_set_cfgr_refon+0x5c>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
 8003592:	79fb      	ldrb	r3, [r7, #7]
 8003594:	22e8      	movs	r2, #232	; 0xe8
 8003596:	fb02 f303 	mul.w	r3, r2, r3
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	4413      	add	r3, r2
 800359e:	781a      	ldrb	r2, [r3, #0]
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	21e8      	movs	r1, #232	; 0xe8
 80035a4:	fb01 f303 	mul.w	r3, r1, r3
 80035a8:	6839      	ldr	r1, [r7, #0]
 80035aa:	440b      	add	r3, r1
 80035ac:	f022 0204 	bic.w	r2, r2, #4
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	701a      	strb	r2, [r3, #0]
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <LTC681x_set_cfgr_adcopt>:

/* Helper function to set the ADCOPT bit */
void LTC681x_set_cfgr_adcopt(uint8_t nIC, cell_asic *ic, bool adcopt)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	6039      	str	r1, [r7, #0]
 80035ca:	71fb      	strb	r3, [r7, #7]
 80035cc:	4613      	mov	r3, r2
 80035ce:	71bb      	strb	r3, [r7, #6]
	if (adcopt) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x01;
 80035d0:	79bb      	ldrb	r3, [r7, #6]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d011      	beq.n	80035fa <LTC681x_set_cfgr_adcopt+0x3a>
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	22e8      	movs	r2, #232	; 0xe8
 80035da:	fb02 f303 	mul.w	r3, r2, r3
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	4413      	add	r3, r2
 80035e2:	781a      	ldrb	r2, [r3, #0]
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	21e8      	movs	r1, #232	; 0xe8
 80035e8:	fb01 f303 	mul.w	r3, r1, r3
 80035ec:	6839      	ldr	r1, [r7, #0]
 80035ee:	440b      	add	r3, r1
 80035f0:	f042 0201 	orr.w	r2, r2, #1
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
}
 80035f8:	e010      	b.n	800361c <LTC681x_set_cfgr_adcopt+0x5c>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	22e8      	movs	r2, #232	; 0xe8
 80035fe:	fb02 f303 	mul.w	r3, r2, r3
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	4413      	add	r3, r2
 8003606:	781a      	ldrb	r2, [r3, #0]
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	21e8      	movs	r1, #232	; 0xe8
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	6839      	ldr	r1, [r7, #0]
 8003612:	440b      	add	r3, r1
 8003614:	f022 0201 	bic.w	r2, r2, #1
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	701a      	strb	r2, [r3, #0]
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <LTC681x_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void LTC681x_set_cfgr_gpio(uint8_t nIC, cell_asic *ic,bool gpio[5])
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
 8003634:	73fb      	strb	r3, [r7, #15]
	for (int i =0; i<5; i++)
 8003636:	2300      	movs	r3, #0
 8003638:	617b      	str	r3, [r7, #20]
 800363a:	e03b      	b.n	80036b4 <LTC681x_set_cfgr_gpio+0x8c>
	{
		if (gpio[i])ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|(0x01<<(i+3));
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	4413      	add	r3, r2
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d018      	beq.n	800367a <LTC681x_set_cfgr_gpio+0x52>
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	22e8      	movs	r2, #232	; 0xe8
 800364c:	fb02 f303 	mul.w	r3, r2, r3
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	4413      	add	r3, r2
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	b25a      	sxtb	r2, r3
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	3303      	adds	r3, #3
 800365c:	2101      	movs	r1, #1
 800365e:	fa01 f303 	lsl.w	r3, r1, r3
 8003662:	b25b      	sxtb	r3, r3
 8003664:	4313      	orrs	r3, r2
 8003666:	b259      	sxtb	r1, r3
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	22e8      	movs	r2, #232	; 0xe8
 800366c:	fb02 f303 	mul.w	r3, r2, r3
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	4413      	add	r3, r2
 8003674:	b2ca      	uxtb	r2, r1
 8003676:	701a      	strb	r2, [r3, #0]
 8003678:	e019      	b.n	80036ae <LTC681x_set_cfgr_gpio+0x86>
		else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&(~(0x01<<(i+3)));
 800367a:	7bfb      	ldrb	r3, [r7, #15]
 800367c:	22e8      	movs	r2, #232	; 0xe8
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	4413      	add	r3, r2
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	b25a      	sxtb	r2, r3
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	3303      	adds	r3, #3
 800368e:	2101      	movs	r1, #1
 8003690:	fa01 f303 	lsl.w	r3, r1, r3
 8003694:	b25b      	sxtb	r3, r3
 8003696:	43db      	mvns	r3, r3
 8003698:	b25b      	sxtb	r3, r3
 800369a:	4013      	ands	r3, r2
 800369c:	b259      	sxtb	r1, r3
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	22e8      	movs	r2, #232	; 0xe8
 80036a2:	fb02 f303 	mul.w	r3, r2, r3
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	4413      	add	r3, r2
 80036aa:	b2ca      	uxtb	r2, r1
 80036ac:	701a      	strb	r2, [r3, #0]
	for (int i =0; i<5; i++)
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	3301      	adds	r3, #1
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	ddc0      	ble.n	800363c <LTC681x_set_cfgr_gpio+0x14>
	}
}
 80036ba:	bf00      	nop
 80036bc:	bf00      	nop
 80036be:	371c      	adds	r7, #28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <LTC681x_set_cfgr_dis>:

/* Helper function to control discharge */
void LTC681x_set_cfgr_dis(uint8_t nIC, cell_asic *ic,bool dcc[12])
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	73fb      	strb	r3, [r7, #15]
	for (int i =0; i<8; i++)
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	e039      	b.n	8003750 <LTC681x_set_cfgr_dis+0x88>
	{
		if (dcc[i])ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]|(0x01<<i);
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d017      	beq.n	8003718 <LTC681x_set_cfgr_dis+0x50>
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	22e8      	movs	r2, #232	; 0xe8
 80036ec:	fb02 f303 	mul.w	r3, r2, r3
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	4413      	add	r3, r2
 80036f4:	791b      	ldrb	r3, [r3, #4]
 80036f6:	b25a      	sxtb	r2, r3
 80036f8:	2101      	movs	r1, #1
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003700:	b25b      	sxtb	r3, r3
 8003702:	4313      	orrs	r3, r2
 8003704:	b259      	sxtb	r1, r3
 8003706:	7bfb      	ldrb	r3, [r7, #15]
 8003708:	22e8      	movs	r2, #232	; 0xe8
 800370a:	fb02 f303 	mul.w	r3, r2, r3
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	4413      	add	r3, r2
 8003712:	b2ca      	uxtb	r2, r1
 8003714:	711a      	strb	r2, [r3, #4]
 8003716:	e018      	b.n	800374a <LTC681x_set_cfgr_dis+0x82>
		else ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]& (~(0x01<<i));
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	22e8      	movs	r2, #232	; 0xe8
 800371c:	fb02 f303 	mul.w	r3, r2, r3
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	4413      	add	r3, r2
 8003724:	791b      	ldrb	r3, [r3, #4]
 8003726:	b25a      	sxtb	r2, r3
 8003728:	2101      	movs	r1, #1
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	fa01 f303 	lsl.w	r3, r1, r3
 8003730:	b25b      	sxtb	r3, r3
 8003732:	43db      	mvns	r3, r3
 8003734:	b25b      	sxtb	r3, r3
 8003736:	4013      	ands	r3, r2
 8003738:	b259      	sxtb	r1, r3
 800373a:	7bfb      	ldrb	r3, [r7, #15]
 800373c:	22e8      	movs	r2, #232	; 0xe8
 800373e:	fb02 f303 	mul.w	r3, r2, r3
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	4413      	add	r3, r2
 8003746:	b2ca      	uxtb	r2, r1
 8003748:	711a      	strb	r2, [r3, #4]
	for (int i =0; i<8; i++)
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	3301      	adds	r3, #1
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	2b07      	cmp	r3, #7
 8003754:	ddc2      	ble.n	80036dc <LTC681x_set_cfgr_dis+0x14>
	}
	for (int i =0; i<4; i++)
 8003756:	2300      	movs	r3, #0
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	e03a      	b.n	80037d2 <LTC681x_set_cfgr_dis+0x10a>
	{
		if (dcc[i+8])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<i);
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	3308      	adds	r3, #8
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	4413      	add	r3, r2
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d017      	beq.n	800379a <LTC681x_set_cfgr_dis+0xd2>
 800376a:	7bfb      	ldrb	r3, [r7, #15]
 800376c:	22e8      	movs	r2, #232	; 0xe8
 800376e:	fb02 f303 	mul.w	r3, r2, r3
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	4413      	add	r3, r2
 8003776:	795b      	ldrb	r3, [r3, #5]
 8003778:	b25a      	sxtb	r2, r3
 800377a:	2101      	movs	r1, #1
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	fa01 f303 	lsl.w	r3, r1, r3
 8003782:	b25b      	sxtb	r3, r3
 8003784:	4313      	orrs	r3, r2
 8003786:	b259      	sxtb	r1, r3
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	22e8      	movs	r2, #232	; 0xe8
 800378c:	fb02 f303 	mul.w	r3, r2, r3
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	4413      	add	r3, r2
 8003794:	b2ca      	uxtb	r2, r1
 8003796:	715a      	strb	r2, [r3, #5]
 8003798:	e018      	b.n	80037cc <LTC681x_set_cfgr_dis+0x104>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<i));
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	22e8      	movs	r2, #232	; 0xe8
 800379e:	fb02 f303 	mul.w	r3, r2, r3
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	4413      	add	r3, r2
 80037a6:	795b      	ldrb	r3, [r3, #5]
 80037a8:	b25a      	sxtb	r2, r3
 80037aa:	2101      	movs	r1, #1
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	fa01 f303 	lsl.w	r3, r1, r3
 80037b2:	b25b      	sxtb	r3, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	b25b      	sxtb	r3, r3
 80037b8:	4013      	ands	r3, r2
 80037ba:	b259      	sxtb	r1, r3
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	22e8      	movs	r2, #232	; 0xe8
 80037c0:	fb02 f303 	mul.w	r3, r2, r3
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	4413      	add	r3, r2
 80037c8:	b2ca      	uxtb	r2, r1
 80037ca:	715a      	strb	r2, [r3, #5]
	for (int i =0; i<4; i++)
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	3301      	adds	r3, #1
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	ddc1      	ble.n	800375c <LTC681x_set_cfgr_dis+0x94>
	}
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	371c      	adds	r7, #28
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <LTC681x_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic,bool dcto[4])
{
 80037e6:	b480      	push	{r7}
 80037e8:	b087      	sub	sp, #28
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	4603      	mov	r3, r0
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	607a      	str	r2, [r7, #4]
 80037f2:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<4;i++)
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	e03b      	b.n	8003872 <LTC681x_set_cfgr_dcto+0x8c>
	{
		if(dcto[i])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<(i+4));
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	4413      	add	r3, r2
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d018      	beq.n	8003838 <LTC681x_set_cfgr_dcto+0x52>
 8003806:	7bfb      	ldrb	r3, [r7, #15]
 8003808:	22e8      	movs	r2, #232	; 0xe8
 800380a:	fb02 f303 	mul.w	r3, r2, r3
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	4413      	add	r3, r2
 8003812:	795b      	ldrb	r3, [r3, #5]
 8003814:	b25a      	sxtb	r2, r3
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	3304      	adds	r3, #4
 800381a:	2101      	movs	r1, #1
 800381c:	fa01 f303 	lsl.w	r3, r1, r3
 8003820:	b25b      	sxtb	r3, r3
 8003822:	4313      	orrs	r3, r2
 8003824:	b259      	sxtb	r1, r3
 8003826:	7bfb      	ldrb	r3, [r7, #15]
 8003828:	22e8      	movs	r2, #232	; 0xe8
 800382a:	fb02 f303 	mul.w	r3, r2, r3
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	4413      	add	r3, r2
 8003832:	b2ca      	uxtb	r2, r1
 8003834:	715a      	strb	r2, [r3, #5]
 8003836:	e019      	b.n	800386c <LTC681x_set_cfgr_dcto+0x86>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<(i+4)));
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	22e8      	movs	r2, #232	; 0xe8
 800383c:	fb02 f303 	mul.w	r3, r2, r3
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	4413      	add	r3, r2
 8003844:	795b      	ldrb	r3, [r3, #5]
 8003846:	b25a      	sxtb	r2, r3
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	3304      	adds	r3, #4
 800384c:	2101      	movs	r1, #1
 800384e:	fa01 f303 	lsl.w	r3, r1, r3
 8003852:	b25b      	sxtb	r3, r3
 8003854:	43db      	mvns	r3, r3
 8003856:	b25b      	sxtb	r3, r3
 8003858:	4013      	ands	r3, r2
 800385a:	b259      	sxtb	r1, r3
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	22e8      	movs	r2, #232	; 0xe8
 8003860:	fb02 f303 	mul.w	r3, r2, r3
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	4413      	add	r3, r2
 8003868:	b2ca      	uxtb	r2, r1
 800386a:	715a      	strb	r2, [r3, #5]
	for(int i =0;i<4;i++)
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	3301      	adds	r3, #1
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2b03      	cmp	r3, #3
 8003876:	ddc0      	ble.n	80037fa <LTC681x_set_cfgr_dcto+0x14>
	}
}
 8003878:	bf00      	nop
 800387a:	bf00      	nop
 800387c:	371c      	adds	r7, #28
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <LTC681x_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic *ic,uint16_t uv)
{
 8003886:	b480      	push	{r7}
 8003888:	b085      	sub	sp, #20
 800388a:	af00      	add	r7, sp, #0
 800388c:	4603      	mov	r3, r0
 800388e:	6039      	str	r1, [r7, #0]
 8003890:	71fb      	strb	r3, [r7, #7]
 8003892:	4613      	mov	r3, r2
 8003894:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (uv/16)-1;
 8003896:	88bb      	ldrh	r3, [r7, #4]
 8003898:	091b      	lsrs	r3, r3, #4
 800389a:	b29b      	uxth	r3, r3
 800389c:	3b01      	subs	r3, #1
 800389e:	81fb      	strh	r3, [r7, #14]
	ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	22e8      	movs	r2, #232	; 0xe8
 80038a4:	fb02 f303 	mul.w	r3, r2, r3
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	4413      	add	r3, r2
 80038ac:	89fa      	ldrh	r2, [r7, #14]
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	705a      	strb	r2, [r3, #1]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0xF0;
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	22e8      	movs	r2, #232	; 0xe8
 80038b6:	fb02 f303 	mul.w	r3, r2, r3
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	4413      	add	r3, r2
 80038be:	789a      	ldrb	r2, [r3, #2]
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	21e8      	movs	r1, #232	; 0xe8
 80038c4:	fb01 f303 	mul.w	r3, r1, r3
 80038c8:	6839      	ldr	r1, [r7, #0]
 80038ca:	440b      	add	r3, r1
 80038cc:	f022 020f 	bic.w	r2, r2, #15
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x0F00 & tmp)>>8);
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	22e8      	movs	r2, #232	; 0xe8
 80038d8:	fb02 f303 	mul.w	r3, r2, r3
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	4413      	add	r3, r2
 80038e0:	789b      	ldrb	r3, [r3, #2]
 80038e2:	b25a      	sxtb	r2, r3
 80038e4:	89fb      	ldrh	r3, [r7, #14]
 80038e6:	0a1b      	lsrs	r3, r3, #8
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	b25b      	sxtb	r3, r3
 80038ec:	f003 030f 	and.w	r3, r3, #15
 80038f0:	b25b      	sxtb	r3, r3
 80038f2:	4313      	orrs	r3, r2
 80038f4:	b259      	sxtb	r1, r3
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	22e8      	movs	r2, #232	; 0xe8
 80038fa:	fb02 f303 	mul.w	r3, r2, r3
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	4413      	add	r3, r2
 8003902:	b2ca      	uxtb	r2, r1
 8003904:	709a      	strb	r2, [r3, #2]
}
 8003906:	bf00      	nop
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <LTC681x_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void LTC681x_set_cfgr_ov(uint8_t nIC, cell_asic *ic,uint16_t ov)
{
 8003912:	b480      	push	{r7}
 8003914:	b085      	sub	sp, #20
 8003916:	af00      	add	r7, sp, #0
 8003918:	4603      	mov	r3, r0
 800391a:	6039      	str	r1, [r7, #0]
 800391c:	71fb      	strb	r3, [r7, #7]
 800391e:	4613      	mov	r3, r2
 8003920:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (ov/16);
 8003922:	88bb      	ldrh	r3, [r7, #4]
 8003924:	091b      	lsrs	r3, r3, #4
 8003926:	81fb      	strh	r3, [r7, #14]
	ic[nIC].config.tx_data[3] = 0x00FF & (tmp>>4);
 8003928:	89fb      	ldrh	r3, [r7, #14]
 800392a:	091b      	lsrs	r3, r3, #4
 800392c:	b299      	uxth	r1, r3
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	22e8      	movs	r2, #232	; 0xe8
 8003932:	fb02 f303 	mul.w	r3, r2, r3
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	4413      	add	r3, r2
 800393a:	b2ca      	uxtb	r2, r1
 800393c:	70da      	strb	r2, [r3, #3]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0x0F;
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	22e8      	movs	r2, #232	; 0xe8
 8003942:	fb02 f303 	mul.w	r3, r2, r3
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	4413      	add	r3, r2
 800394a:	789a      	ldrb	r2, [r3, #2]
 800394c:	79fb      	ldrb	r3, [r7, #7]
 800394e:	21e8      	movs	r1, #232	; 0xe8
 8003950:	fb01 f303 	mul.w	r3, r1, r3
 8003954:	6839      	ldr	r1, [r7, #0]
 8003956:	440b      	add	r3, r1
 8003958:	f002 020f 	and.w	r2, r2, #15
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x000F & tmp)<<4);
 8003960:	79fb      	ldrb	r3, [r7, #7]
 8003962:	22e8      	movs	r2, #232	; 0xe8
 8003964:	fb02 f303 	mul.w	r3, r2, r3
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	4413      	add	r3, r2
 800396c:	789b      	ldrb	r3, [r3, #2]
 800396e:	b25a      	sxtb	r2, r3
 8003970:	89fb      	ldrh	r3, [r7, #14]
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	b25b      	sxtb	r3, r3
 8003976:	4313      	orrs	r3, r2
 8003978:	b259      	sxtb	r1, r3
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	22e8      	movs	r2, #232	; 0xe8
 800397e:	fb02 f303 	mul.w	r3, r2, r3
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	4413      	add	r3, r2
 8003986:	b2ca      	uxtb	r2, r1
 8003988:	709a      	strb	r2, [r3, #2]
}
 800398a:	bf00      	nop
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
	...

08003998 <cs_low>:
#include "stm32f4xx_hal.h"

extern SPI_HandleTypeDef hspi1;

void cs_low(uint8_t pin)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80039a2:	2200      	movs	r2, #0
 80039a4:	2140      	movs	r1, #64	; 0x40
 80039a6:	4803      	ldr	r0, [pc, #12]	; (80039b4 <cs_low+0x1c>)
 80039a8:	f001 fdf2 	bl	8005590 <HAL_GPIO_WritePin>
}
 80039ac:	bf00      	nop
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40020400 	.word	0x40020400

080039b8 <cs_high>:

void cs_high(uint8_t pin)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80039c2:	2201      	movs	r2, #1
 80039c4:	2140      	movs	r1, #64	; 0x40
 80039c6:	4803      	ldr	r0, [pc, #12]	; (80039d4 <cs_high+0x1c>)
 80039c8:	f001 fde2 	bl	8005590 <HAL_GPIO_WritePin>
}
 80039cc:	bf00      	nop
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40020400 	.word	0x40020400

080039d8 <delay_u>:

void delay_u(uint16_t micro)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	4603      	mov	r3, r0
 80039e0:	80fb      	strh	r3, [r7, #6]
  HAL_Delay(1);
 80039e2:	2001      	movs	r0, #1
 80039e4:	f000 fd82 	bl	80044ec <HAL_Delay>
}
 80039e8:	bf00      	nop
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <spi_write_array>:
Writes an array of bytes out of the SPI port
*/
void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
                     uint8_t data[] //Array of bytes to be written on the SPI port
                    )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	6039      	str	r1, [r7, #0]
 80039fa:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi1, data, len, 100);
 80039fc:	79fb      	ldrb	r3, [r7, #7]
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	2364      	movs	r3, #100	; 0x64
 8003a02:	6839      	ldr	r1, [r7, #0]
 8003a04:	4803      	ldr	r0, [pc, #12]	; (8003a14 <spi_write_array+0x24>)
 8003a06:	f002 fc4e 	bl	80062a6 <HAL_SPI_Transmit>
}
 8003a0a:	bf00      	nop
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	200028d4 	.word	0x200028d4

08003a18 <spi_write_read>:
void spi_write_read(uint8_t tx_Data[],//array of data to be written on SPI port
                    uint8_t tx_len, //length of the tx data arry
                    uint8_t *rx_data,//Input: array that will store the data read by the SPI port
                    uint8_t rx_len //Option: number of bytes to be read from the SPI port
                   )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	607a      	str	r2, [r7, #4]
 8003a22:	461a      	mov	r2, r3
 8003a24:	460b      	mov	r3, r1
 8003a26:	72fb      	strb	r3, [r7, #11]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	72bb      	strb	r3, [r7, #10]
  for (uint8_t i = 0; i < tx_len; i++)
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	75fb      	strb	r3, [r7, #23]
 8003a30:	e00a      	b.n	8003a48 <spi_write_read+0x30>
  {
    HAL_SPI_Transmit(&hspi1, &tx_Data[i], 1, 100);
 8003a32:	7dfb      	ldrb	r3, [r7, #23]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	18d1      	adds	r1, r2, r3
 8003a38:	2364      	movs	r3, #100	; 0x64
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	4810      	ldr	r0, [pc, #64]	; (8003a80 <spi_write_read+0x68>)
 8003a3e:	f002 fc32 	bl	80062a6 <HAL_SPI_Transmit>
  for (uint8_t i = 0; i < tx_len; i++)
 8003a42:	7dfb      	ldrb	r3, [r7, #23]
 8003a44:	3301      	adds	r3, #1
 8003a46:	75fb      	strb	r3, [r7, #23]
 8003a48:	7dfa      	ldrb	r2, [r7, #23]
 8003a4a:	7afb      	ldrb	r3, [r7, #11]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d3f0      	bcc.n	8003a32 <spi_write_read+0x1a>
  }

  for (uint8_t i = 0; i < rx_len; i++)
 8003a50:	2300      	movs	r3, #0
 8003a52:	75bb      	strb	r3, [r7, #22]
 8003a54:	e00a      	b.n	8003a6c <spi_write_read+0x54>
  {
	HAL_SPI_Receive(&hspi1, &rx_data[i], 1, 100);
 8003a56:	7dbb      	ldrb	r3, [r7, #22]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	18d1      	adds	r1, r2, r3
 8003a5c:	2364      	movs	r3, #100	; 0x64
 8003a5e:	2201      	movs	r2, #1
 8003a60:	4807      	ldr	r0, [pc, #28]	; (8003a80 <spi_write_read+0x68>)
 8003a62:	f002 fd5c 	bl	800651e <HAL_SPI_Receive>
  for (uint8_t i = 0; i < rx_len; i++)
 8003a66:	7dbb      	ldrb	r3, [r7, #22]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	75bb      	strb	r3, [r7, #22]
 8003a6c:	7dba      	ldrb	r2, [r7, #22]
 8003a6e:	7abb      	ldrb	r3, [r7, #10]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d3f0      	bcc.n	8003a56 <spi_write_read+0x3e>
  }

}
 8003a74:	bf00      	nop
 8003a76:	bf00      	nop
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	200028d4 	.word	0x200028d4

08003a84 <spi_read_byte>:


uint8_t spi_read_byte(uint8_t tx_dat)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	71fb      	strb	r3, [r7, #7]
  uint8_t data;
  HAL_SPI_Receive(&hspi1, &data, 1, 100);
 8003a8e:	f107 010f 	add.w	r1, r7, #15
 8003a92:	2364      	movs	r3, #100	; 0x64
 8003a94:	2201      	movs	r2, #1
 8003a96:	4804      	ldr	r0, [pc, #16]	; (8003aa8 <spi_read_byte+0x24>)
 8003a98:	f002 fd41 	bl	800651e <HAL_SPI_Receive>
  return(data);
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	200028d4 	.word	0x200028d4

08003aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ab0:	f000 fcaa 	bl	8004408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ab4:	f000 f834 	bl	8003b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ab8:	f000 f96c 	bl	8003d94 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003abc:	f000 f940 	bl	8003d40 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8003ac0:	f000 f89c 	bl	8003bfc <MX_CAN1_Init>
  MX_SPI1_Init();
 8003ac4:	f000 f906 	bl	8003cd4 <MX_SPI1_Init>
  MX_CAN2_Init();
 8003ac8:	f000 f8ce 	bl	8003c68 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */

  FEB_BMS_State_Validate();
 8003acc:	f7fd fac2 	bl	8001054 <FEB_BMS_State_Validate>
  FEB_LTC6811_Setup();
 8003ad0:	f7fd fd44 	bl	800155c <FEB_LTC6811_Setup>
  FEB_BMS_Shutdown_Startup();
 8003ad4:	f7fd fa92 	bl	8000ffc <FEB_BMS_Shutdown_Startup>
  FEB_BMS_Precharge_Open();
 8003ad8:	f7fd fa78 	bl	8000fcc <FEB_BMS_Precharge_Open>
  FEB_CAN_Init();
 8003adc:	f7fd fac2 	bl	8001064 <FEB_CAN_Init>
  FEB_CAN_Charger_Init();
 8003ae0:	f7fd fb1a 	bl	8001118 <FEB_CAN_Charger_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// *********************** Reset State ***********************
	FEB_LTC6811_Clear_Voltage();
 8003ae4:	f7fe f8e8 	bl	8001cb8 <FEB_LTC6811_Clear_Voltage>
	FEB_LTC6811_Clear_Temperature();
 8003ae8:	f7fe fc8c 	bl	8002404 <FEB_LTC6811_Clear_Temperature>

	// *********************** Cell Voltage ***********************
	FEB_LTC6811_Poll_Voltage();
 8003aec:	f7fd fda4 	bl	8001638 <FEB_LTC6811_Poll_Voltage>
  	FEB_LTC6811_Validate_Voltage();
 8003af0:	f7fd fff0 	bl	8001ad4 <FEB_LTC6811_Validate_Voltage>
	FEB_LTC6811_UART_Transmit_Voltage();
 8003af4:	f7fe f82c 	bl	8001b50 <FEB_LTC6811_UART_Transmit_Voltage>

	// *********************** Cell Temperature ***********************
	FEB_LTC6811_Poll_Temperature();
 8003af8:	f7fe f90a 	bl	8001d10 <FEB_LTC6811_Poll_Temperature>
  	FEB_LTC6811_Validate_Temperature();
 8003afc:	f7fe fbc2 	bl	8002284 <FEB_LTC6811_Validate_Temperature>
	FEB_LTC6811_UART_Transmit_Temperature();
 8003b00:	f7fe fc04 	bl	800230c <FEB_LTC6811_UART_Transmit_Temperature>

	// *********************** IVT ***********************
	FEB_CAN_IVT_Process();
 8003b04:	f7fd fc90 	bl	8001428 <FEB_CAN_IVT_Process>

	// *********************** Cell Balance ***********************
	FEB_LTC6811_Balance_Cells();
 8003b08:	f7fd ffb0 	bl	8001a6c <FEB_LTC6811_Balance_Cells>

	// *********************** Charger ***********************
	FEB_CAN_Charger_Process(&hcan1);
 8003b0c:	4803      	ldr	r0, [pc, #12]	; (8003b1c <main+0x70>)
 8003b0e:	f7fd fbac 	bl	800126a <FEB_CAN_Charger_Process>


	if (FEB_CAN_CHARGER_START_CHARGE == 1) {
		HAL_Delay(1000);	// 1Hz
	} else {
		HAL_Delay(200);		// 5Hz
 8003b12:	20c8      	movs	r0, #200	; 0xc8
 8003b14:	f000 fcea 	bl	80044ec <HAL_Delay>
	FEB_LTC6811_Clear_Voltage();
 8003b18:	e7e4      	b.n	8003ae4 <main+0x38>
 8003b1a:	bf00      	nop
 8003b1c:	20002884 	.word	0x20002884

08003b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b094      	sub	sp, #80	; 0x50
 8003b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b26:	f107 031c 	add.w	r3, r7, #28
 8003b2a:	2234      	movs	r2, #52	; 0x34
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f003 fcd4 	bl	80074dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b34:	f107 0308 	add.w	r3, r7, #8
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	609a      	str	r2, [r3, #8]
 8003b40:	60da      	str	r2, [r3, #12]
 8003b42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b44:	2300      	movs	r3, #0
 8003b46:	607b      	str	r3, [r7, #4]
 8003b48:	4b2a      	ldr	r3, [pc, #168]	; (8003bf4 <SystemClock_Config+0xd4>)
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	4a29      	ldr	r2, [pc, #164]	; (8003bf4 <SystemClock_Config+0xd4>)
 8003b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b52:	6413      	str	r3, [r2, #64]	; 0x40
 8003b54:	4b27      	ldr	r3, [pc, #156]	; (8003bf4 <SystemClock_Config+0xd4>)
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5c:	607b      	str	r3, [r7, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b60:	2300      	movs	r3, #0
 8003b62:	603b      	str	r3, [r7, #0]
 8003b64:	4b24      	ldr	r3, [pc, #144]	; (8003bf8 <SystemClock_Config+0xd8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003b6c:	4a22      	ldr	r2, [pc, #136]	; (8003bf8 <SystemClock_Config+0xd8>)
 8003b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	4b20      	ldr	r3, [pc, #128]	; (8003bf8 <SystemClock_Config+0xd8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b7c:	603b      	str	r3, [r7, #0]
 8003b7e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003b80:	2302      	movs	r3, #2
 8003b82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b84:	2301      	movs	r3, #1
 8003b86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b88:	2310      	movs	r3, #16
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003b90:	2300      	movs	r3, #0
 8003b92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003b94:	2308      	movs	r3, #8
 8003b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 8003b98:	2380      	movs	r3, #128	; 0x80
 8003b9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ba8:	f107 031c 	add.w	r3, r7, #28
 8003bac:	4618      	mov	r0, r3
 8003bae:	f002 f853 	bl	8005c58 <HAL_RCC_OscConfig>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003bb8:	f000 f952 	bl	8003e60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bbc:	230f      	movs	r3, #15
 8003bbe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003bc8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003bcc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bd2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003bd4:	f107 0308 	add.w	r3, r7, #8
 8003bd8:	2104      	movs	r1, #4
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f001 fcf2 	bl	80055c4 <HAL_RCC_ClockConfig>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <SystemClock_Config+0xca>
  {
    Error_Handler();
 8003be6:	f000 f93b 	bl	8003e60 <Error_Handler>
  }
}
 8003bea:	bf00      	nop
 8003bec:	3750      	adds	r7, #80	; 0x50
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	40007000 	.word	0x40007000

08003bfc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003c00:	4b17      	ldr	r3, [pc, #92]	; (8003c60 <MX_CAN1_Init+0x64>)
 8003c02:	4a18      	ldr	r2, [pc, #96]	; (8003c64 <MX_CAN1_Init+0x68>)
 8003c04:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8003c06:	4b16      	ldr	r3, [pc, #88]	; (8003c60 <MX_CAN1_Init+0x64>)
 8003c08:	2210      	movs	r2, #16
 8003c0a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003c0c:	4b14      	ldr	r3, [pc, #80]	; (8003c60 <MX_CAN1_Init+0x64>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003c12:	4b13      	ldr	r3, [pc, #76]	; (8003c60 <MX_CAN1_Init+0x64>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8003c18:	4b11      	ldr	r3, [pc, #68]	; (8003c60 <MX_CAN1_Init+0x64>)
 8003c1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c1e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003c20:	4b0f      	ldr	r3, [pc, #60]	; (8003c60 <MX_CAN1_Init+0x64>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003c26:	4b0e      	ldr	r3, [pc, #56]	; (8003c60 <MX_CAN1_Init+0x64>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003c2c:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <MX_CAN1_Init+0x64>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003c32:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <MX_CAN1_Init+0x64>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003c38:	4b09      	ldr	r3, [pc, #36]	; (8003c60 <MX_CAN1_Init+0x64>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003c3e:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <MX_CAN1_Init+0x64>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003c44:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <MX_CAN1_Init+0x64>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003c4a:	4805      	ldr	r0, [pc, #20]	; (8003c60 <MX_CAN1_Init+0x64>)
 8003c4c:	f000 fc72 	bl	8004534 <HAL_CAN_Init>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8003c56:	f000 f903 	bl	8003e60 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003c5a:	bf00      	nop
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20002884 	.word	0x20002884
 8003c64:	40006400 	.word	0x40006400

08003c68 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8003c6c:	4b17      	ldr	r3, [pc, #92]	; (8003ccc <MX_CAN2_Init+0x64>)
 8003c6e:	4a18      	ldr	r2, [pc, #96]	; (8003cd0 <MX_CAN2_Init+0x68>)
 8003c70:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8003c72:	4b16      	ldr	r3, [pc, #88]	; (8003ccc <MX_CAN2_Init+0x64>)
 8003c74:	2210      	movs	r2, #16
 8003c76:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8003c78:	4b14      	ldr	r3, [pc, #80]	; (8003ccc <MX_CAN2_Init+0x64>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003c7e:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <MX_CAN2_Init+0x64>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8003c84:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <MX_CAN2_Init+0x64>)
 8003c86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c8a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003c8c:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <MX_CAN2_Init+0x64>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8003c92:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <MX_CAN2_Init+0x64>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8003c98:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <MX_CAN2_Init+0x64>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8003c9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <MX_CAN2_Init+0x64>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8003ca4:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <MX_CAN2_Init+0x64>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8003caa:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <MX_CAN2_Init+0x64>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8003cb0:	4b06      	ldr	r3, [pc, #24]	; (8003ccc <MX_CAN2_Init+0x64>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8003cb6:	4805      	ldr	r0, [pc, #20]	; (8003ccc <MX_CAN2_Init+0x64>)
 8003cb8:	f000 fc3c 	bl	8004534 <HAL_CAN_Init>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8003cc2:	f000 f8cd 	bl	8003e60 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8003cc6:	bf00      	nop
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	200028ac 	.word	0x200028ac
 8003cd0:	40006800 	.word	0x40006800

08003cd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003cd8:	4b17      	ldr	r3, [pc, #92]	; (8003d38 <MX_SPI1_Init+0x64>)
 8003cda:	4a18      	ldr	r2, [pc, #96]	; (8003d3c <MX_SPI1_Init+0x68>)
 8003cdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003cde:	4b16      	ldr	r3, [pc, #88]	; (8003d38 <MX_SPI1_Init+0x64>)
 8003ce0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ce4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003ce6:	4b14      	ldr	r3, [pc, #80]	; (8003d38 <MX_SPI1_Init+0x64>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cec:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <MX_SPI1_Init+0x64>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cf2:	4b11      	ldr	r3, [pc, #68]	; (8003d38 <MX_SPI1_Init+0x64>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003cf8:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <MX_SPI1_Init+0x64>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003cfe:	4b0e      	ldr	r3, [pc, #56]	; (8003d38 <MX_SPI1_Init+0x64>)
 8003d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003d06:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <MX_SPI1_Init+0x64>)
 8003d08:	2228      	movs	r2, #40	; 0x28
 8003d0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d0c:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <MX_SPI1_Init+0x64>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d12:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <MX_SPI1_Init+0x64>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d18:	4b07      	ldr	r3, [pc, #28]	; (8003d38 <MX_SPI1_Init+0x64>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003d1e:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <MX_SPI1_Init+0x64>)
 8003d20:	220a      	movs	r2, #10
 8003d22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d24:	4804      	ldr	r0, [pc, #16]	; (8003d38 <MX_SPI1_Init+0x64>)
 8003d26:	f002 fa35 	bl	8006194 <HAL_SPI_Init>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003d30:	f000 f896 	bl	8003e60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003d34:	bf00      	nop
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	200028d4 	.word	0x200028d4
 8003d3c:	40013000 	.word	0x40013000

08003d40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003d44:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <MX_USART2_UART_Init+0x4c>)
 8003d46:	4a12      	ldr	r2, [pc, #72]	; (8003d90 <MX_USART2_UART_Init+0x50>)
 8003d48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003d4a:	4b10      	ldr	r3, [pc, #64]	; (8003d8c <MX_USART2_UART_Init+0x4c>)
 8003d4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d52:	4b0e      	ldr	r3, [pc, #56]	; (8003d8c <MX_USART2_UART_Init+0x4c>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d58:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <MX_USART2_UART_Init+0x4c>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003d5e:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <MX_USART2_UART_Init+0x4c>)
 8003d60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d64:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8003d66:	4b09      	ldr	r3, [pc, #36]	; (8003d8c <MX_USART2_UART_Init+0x4c>)
 8003d68:	2208      	movs	r2, #8
 8003d6a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d6c:	4b07      	ldr	r3, [pc, #28]	; (8003d8c <MX_USART2_UART_Init+0x4c>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d72:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <MX_USART2_UART_Init+0x4c>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d78:	4804      	ldr	r0, [pc, #16]	; (8003d8c <MX_USART2_UART_Init+0x4c>)
 8003d7a:	f002 ffb3 	bl	8006ce4 <HAL_UART_Init>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8003d84:	f000 f86c 	bl	8003e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d88:	bf00      	nop
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	2000292c 	.word	0x2000292c
 8003d90:	40004400 	.word	0x40004400

08003d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b088      	sub	sp, #32
 8003d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d9a:	f107 030c 	add.w	r3, r7, #12
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	605a      	str	r2, [r3, #4]
 8003da4:	609a      	str	r2, [r3, #8]
 8003da6:	60da      	str	r2, [r3, #12]
 8003da8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003daa:	2300      	movs	r3, #0
 8003dac:	60bb      	str	r3, [r7, #8]
 8003dae:	4b29      	ldr	r3, [pc, #164]	; (8003e54 <MX_GPIO_Init+0xc0>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	4a28      	ldr	r2, [pc, #160]	; (8003e54 <MX_GPIO_Init+0xc0>)
 8003db4:	f043 0304 	orr.w	r3, r3, #4
 8003db8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dba:	4b26      	ldr	r3, [pc, #152]	; (8003e54 <MX_GPIO_Init+0xc0>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	60bb      	str	r3, [r7, #8]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	607b      	str	r3, [r7, #4]
 8003dca:	4b22      	ldr	r3, [pc, #136]	; (8003e54 <MX_GPIO_Init+0xc0>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	4a21      	ldr	r2, [pc, #132]	; (8003e54 <MX_GPIO_Init+0xc0>)
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd6:	4b1f      	ldr	r3, [pc, #124]	; (8003e54 <MX_GPIO_Init+0xc0>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	607b      	str	r3, [r7, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	603b      	str	r3, [r7, #0]
 8003de6:	4b1b      	ldr	r3, [pc, #108]	; (8003e54 <MX_GPIO_Init+0xc0>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	4a1a      	ldr	r2, [pc, #104]	; (8003e54 <MX_GPIO_Init+0xc0>)
 8003dec:	f043 0302 	orr.w	r3, r3, #2
 8003df0:	6313      	str	r3, [r2, #48]	; 0x30
 8003df2:	4b18      	ldr	r3, [pc, #96]	; (8003e54 <MX_GPIO_Init+0xc0>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	603b      	str	r3, [r7, #0]
 8003dfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2106      	movs	r1, #6
 8003e02:	4815      	ldr	r0, [pc, #84]	; (8003e58 <MX_GPIO_Init+0xc4>)
 8003e04:	f001 fbc4 	bl	8005590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2140      	movs	r1, #64	; 0x40
 8003e0c:	4813      	ldr	r0, [pc, #76]	; (8003e5c <MX_GPIO_Init+0xc8>)
 8003e0e:	f001 fbbf 	bl	8005590 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8003e12:	2306      	movs	r3, #6
 8003e14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e16:	2301      	movs	r3, #1
 8003e18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e22:	f107 030c 	add.w	r3, r7, #12
 8003e26:	4619      	mov	r1, r3
 8003e28:	480b      	ldr	r0, [pc, #44]	; (8003e58 <MX_GPIO_Init+0xc4>)
 8003e2a:	f001 fa1d 	bl	8005268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003e2e:	2340      	movs	r3, #64	; 0x40
 8003e30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e32:	2301      	movs	r3, #1
 8003e34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e36:	2300      	movs	r3, #0
 8003e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e3e:	f107 030c 	add.w	r3, r7, #12
 8003e42:	4619      	mov	r1, r3
 8003e44:	4805      	ldr	r0, [pc, #20]	; (8003e5c <MX_GPIO_Init+0xc8>)
 8003e46:	f001 fa0f 	bl	8005268 <HAL_GPIO_Init>

}
 8003e4a:	bf00      	nop
 8003e4c:	3720      	adds	r7, #32
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40023800 	.word	0x40023800
 8003e58:	40020800 	.word	0x40020800
 8003e5c:	40020400 	.word	0x40020400

08003e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e64:	b672      	cpsid	i
}
 8003e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e68:	e7fe      	b.n	8003e68 <Error_Handler+0x8>
	...

08003e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e72:	2300      	movs	r3, #0
 8003e74:	607b      	str	r3, [r7, #4]
 8003e76:	4b10      	ldr	r3, [pc, #64]	; (8003eb8 <HAL_MspInit+0x4c>)
 8003e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7a:	4a0f      	ldr	r2, [pc, #60]	; (8003eb8 <HAL_MspInit+0x4c>)
 8003e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e80:	6453      	str	r3, [r2, #68]	; 0x44
 8003e82:	4b0d      	ldr	r3, [pc, #52]	; (8003eb8 <HAL_MspInit+0x4c>)
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e8a:	607b      	str	r3, [r7, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e8e:	2300      	movs	r3, #0
 8003e90:	603b      	str	r3, [r7, #0]
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <HAL_MspInit+0x4c>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	4a08      	ldr	r2, [pc, #32]	; (8003eb8 <HAL_MspInit+0x4c>)
 8003e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e9e:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <HAL_MspInit+0x4c>)
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea6:	603b      	str	r3, [r7, #0]
 8003ea8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003eaa:	2007      	movs	r0, #7
 8003eac:	f001 f99a 	bl	80051e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003eb0:	bf00      	nop
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40023800 	.word	0x40023800

08003ebc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08c      	sub	sp, #48	; 0x30
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec4:	f107 031c 	add.w	r3, r7, #28
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	605a      	str	r2, [r3, #4]
 8003ece:	609a      	str	r2, [r3, #8]
 8003ed0:	60da      	str	r2, [r3, #12]
 8003ed2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a53      	ldr	r2, [pc, #332]	; (8004028 <HAL_CAN_MspInit+0x16c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d146      	bne.n	8003f6c <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003ede:	4b53      	ldr	r3, [pc, #332]	; (800402c <HAL_CAN_MspInit+0x170>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	4a51      	ldr	r2, [pc, #324]	; (800402c <HAL_CAN_MspInit+0x170>)
 8003ee6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003ee8:	4b50      	ldr	r3, [pc, #320]	; (800402c <HAL_CAN_MspInit+0x170>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d10d      	bne.n	8003f0c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61bb      	str	r3, [r7, #24]
 8003ef4:	4b4e      	ldr	r3, [pc, #312]	; (8004030 <HAL_CAN_MspInit+0x174>)
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	4a4d      	ldr	r2, [pc, #308]	; (8004030 <HAL_CAN_MspInit+0x174>)
 8003efa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003efe:	6413      	str	r3, [r2, #64]	; 0x40
 8003f00:	4b4b      	ldr	r3, [pc, #300]	; (8004030 <HAL_CAN_MspInit+0x174>)
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f08:	61bb      	str	r3, [r7, #24]
 8003f0a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	4b47      	ldr	r3, [pc, #284]	; (8004030 <HAL_CAN_MspInit+0x174>)
 8003f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f14:	4a46      	ldr	r2, [pc, #280]	; (8004030 <HAL_CAN_MspInit+0x174>)
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8003f1c:	4b44      	ldr	r3, [pc, #272]	; (8004030 <HAL_CAN_MspInit+0x174>)
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	617b      	str	r3, [r7, #20]
 8003f26:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003f28:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f2e:	2302      	movs	r3, #2
 8003f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f32:	2300      	movs	r3, #0
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f36:	2303      	movs	r3, #3
 8003f38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003f3a:	2309      	movs	r3, #9
 8003f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f3e:	f107 031c 	add.w	r3, r7, #28
 8003f42:	4619      	mov	r1, r3
 8003f44:	483b      	ldr	r0, [pc, #236]	; (8004034 <HAL_CAN_MspInit+0x178>)
 8003f46:	f001 f98f 	bl	8005268 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	2014      	movs	r0, #20
 8003f50:	f001 f953 	bl	80051fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003f54:	2014      	movs	r0, #20
 8003f56:	f001 f96c 	bl	8005232 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	2015      	movs	r0, #21
 8003f60:	f001 f94b 	bl	80051fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003f64:	2015      	movs	r0, #21
 8003f66:	f001 f964 	bl	8005232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003f6a:	e058      	b.n	800401e <HAL_CAN_MspInit+0x162>
  else if(hcan->Instance==CAN2)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a31      	ldr	r2, [pc, #196]	; (8004038 <HAL_CAN_MspInit+0x17c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d153      	bne.n	800401e <HAL_CAN_MspInit+0x162>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003f76:	2300      	movs	r3, #0
 8003f78:	613b      	str	r3, [r7, #16]
 8003f7a:	4b2d      	ldr	r3, [pc, #180]	; (8004030 <HAL_CAN_MspInit+0x174>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	4a2c      	ldr	r2, [pc, #176]	; (8004030 <HAL_CAN_MspInit+0x174>)
 8003f80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f84:	6413      	str	r3, [r2, #64]	; 0x40
 8003f86:	4b2a      	ldr	r3, [pc, #168]	; (8004030 <HAL_CAN_MspInit+0x174>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f8e:	613b      	str	r3, [r7, #16]
 8003f90:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003f92:	4b26      	ldr	r3, [pc, #152]	; (800402c <HAL_CAN_MspInit+0x170>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3301      	adds	r3, #1
 8003f98:	4a24      	ldr	r2, [pc, #144]	; (800402c <HAL_CAN_MspInit+0x170>)
 8003f9a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003f9c:	4b23      	ldr	r3, [pc, #140]	; (800402c <HAL_CAN_MspInit+0x170>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d10d      	bne.n	8003fc0 <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	4b21      	ldr	r3, [pc, #132]	; (8004030 <HAL_CAN_MspInit+0x174>)
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	4a20      	ldr	r2, [pc, #128]	; (8004030 <HAL_CAN_MspInit+0x174>)
 8003fae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003fb2:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb4:	4b1e      	ldr	r3, [pc, #120]	; (8004030 <HAL_CAN_MspInit+0x174>)
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60bb      	str	r3, [r7, #8]
 8003fc4:	4b1a      	ldr	r3, [pc, #104]	; (8004030 <HAL_CAN_MspInit+0x174>)
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	4a19      	ldr	r2, [pc, #100]	; (8004030 <HAL_CAN_MspInit+0x174>)
 8003fca:	f043 0302 	orr.w	r3, r3, #2
 8003fce:	6313      	str	r3, [r2, #48]	; 0x30
 8003fd0:	4b17      	ldr	r3, [pc, #92]	; (8004030 <HAL_CAN_MspInit+0x174>)
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003fdc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fea:	2303      	movs	r3, #3
 8003fec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003fee:	2309      	movs	r3, #9
 8003ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ff2:	f107 031c 	add.w	r3, r7, #28
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4810      	ldr	r0, [pc, #64]	; (800403c <HAL_CAN_MspInit+0x180>)
 8003ffa:	f001 f935 	bl	8005268 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8003ffe:	2200      	movs	r2, #0
 8004000:	2100      	movs	r1, #0
 8004002:	2040      	movs	r0, #64	; 0x40
 8004004:	f001 f8f9 	bl	80051fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8004008:	2040      	movs	r0, #64	; 0x40
 800400a:	f001 f912 	bl	8005232 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 800400e:	2200      	movs	r2, #0
 8004010:	2100      	movs	r1, #0
 8004012:	2041      	movs	r0, #65	; 0x41
 8004014:	f001 f8f1 	bl	80051fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8004018:	2041      	movs	r0, #65	; 0x41
 800401a:	f001 f90a 	bl	8005232 <HAL_NVIC_EnableIRQ>
}
 800401e:	bf00      	nop
 8004020:	3730      	adds	r7, #48	; 0x30
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40006400 	.word	0x40006400
 800402c:	20002970 	.word	0x20002970
 8004030:	40023800 	.word	0x40023800
 8004034:	40020000 	.word	0x40020000
 8004038:	40006800 	.word	0x40006800
 800403c:	40020400 	.word	0x40020400

08004040 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b08a      	sub	sp, #40	; 0x28
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004048:	f107 0314 	add.w	r3, r7, #20
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	605a      	str	r2, [r3, #4]
 8004052:	609a      	str	r2, [r3, #8]
 8004054:	60da      	str	r2, [r3, #12]
 8004056:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a19      	ldr	r2, [pc, #100]	; (80040c4 <HAL_SPI_MspInit+0x84>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d12b      	bne.n	80040ba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	4b18      	ldr	r3, [pc, #96]	; (80040c8 <HAL_SPI_MspInit+0x88>)
 8004068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406a:	4a17      	ldr	r2, [pc, #92]	; (80040c8 <HAL_SPI_MspInit+0x88>)
 800406c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004070:	6453      	str	r3, [r2, #68]	; 0x44
 8004072:	4b15      	ldr	r3, [pc, #84]	; (80040c8 <HAL_SPI_MspInit+0x88>)
 8004074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004076:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800407a:	613b      	str	r3, [r7, #16]
 800407c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	4b11      	ldr	r3, [pc, #68]	; (80040c8 <HAL_SPI_MspInit+0x88>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	4a10      	ldr	r2, [pc, #64]	; (80040c8 <HAL_SPI_MspInit+0x88>)
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	6313      	str	r3, [r2, #48]	; 0x30
 800408e:	4b0e      	ldr	r3, [pc, #56]	; (80040c8 <HAL_SPI_MspInit+0x88>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800409a:	23e0      	movs	r3, #224	; 0xe0
 800409c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409e:	2302      	movs	r3, #2
 80040a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a6:	2303      	movs	r3, #3
 80040a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80040aa:	2305      	movs	r3, #5
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ae:	f107 0314 	add.w	r3, r7, #20
 80040b2:	4619      	mov	r1, r3
 80040b4:	4805      	ldr	r0, [pc, #20]	; (80040cc <HAL_SPI_MspInit+0x8c>)
 80040b6:	f001 f8d7 	bl	8005268 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80040ba:	bf00      	nop
 80040bc:	3728      	adds	r7, #40	; 0x28
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40013000 	.word	0x40013000
 80040c8:	40023800 	.word	0x40023800
 80040cc:	40020000 	.word	0x40020000

080040d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08a      	sub	sp, #40	; 0x28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040d8:	f107 0314 	add.w	r3, r7, #20
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	605a      	str	r2, [r3, #4]
 80040e2:	609a      	str	r2, [r3, #8]
 80040e4:	60da      	str	r2, [r3, #12]
 80040e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a19      	ldr	r2, [pc, #100]	; (8004154 <HAL_UART_MspInit+0x84>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d12b      	bne.n	800414a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80040f2:	2300      	movs	r3, #0
 80040f4:	613b      	str	r3, [r7, #16]
 80040f6:	4b18      	ldr	r3, [pc, #96]	; (8004158 <HAL_UART_MspInit+0x88>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	4a17      	ldr	r2, [pc, #92]	; (8004158 <HAL_UART_MspInit+0x88>)
 80040fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004100:	6413      	str	r3, [r2, #64]	; 0x40
 8004102:	4b15      	ldr	r3, [pc, #84]	; (8004158 <HAL_UART_MspInit+0x88>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410a:	613b      	str	r3, [r7, #16]
 800410c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	4b11      	ldr	r3, [pc, #68]	; (8004158 <HAL_UART_MspInit+0x88>)
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	4a10      	ldr	r2, [pc, #64]	; (8004158 <HAL_UART_MspInit+0x88>)
 8004118:	f043 0301 	orr.w	r3, r3, #1
 800411c:	6313      	str	r3, [r2, #48]	; 0x30
 800411e:	4b0e      	ldr	r3, [pc, #56]	; (8004158 <HAL_UART_MspInit+0x88>)
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800412a:	230c      	movs	r3, #12
 800412c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800412e:	2302      	movs	r3, #2
 8004130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004132:	2300      	movs	r3, #0
 8004134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004136:	2303      	movs	r3, #3
 8004138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800413a:	2307      	movs	r3, #7
 800413c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800413e:	f107 0314 	add.w	r3, r7, #20
 8004142:	4619      	mov	r1, r3
 8004144:	4805      	ldr	r0, [pc, #20]	; (800415c <HAL_UART_MspInit+0x8c>)
 8004146:	f001 f88f 	bl	8005268 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800414a:	bf00      	nop
 800414c:	3728      	adds	r7, #40	; 0x28
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40004400 	.word	0x40004400
 8004158:	40023800 	.word	0x40023800
 800415c:	40020000 	.word	0x40020000

08004160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004164:	e7fe      	b.n	8004164 <NMI_Handler+0x4>

08004166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004166:	b480      	push	{r7}
 8004168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800416a:	e7fe      	b.n	800416a <HardFault_Handler+0x4>

0800416c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004170:	e7fe      	b.n	8004170 <MemManage_Handler+0x4>

08004172 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004172:	b480      	push	{r7}
 8004174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004176:	e7fe      	b.n	8004176 <BusFault_Handler+0x4>

08004178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800417c:	e7fe      	b.n	800417c <UsageFault_Handler+0x4>

0800417e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800417e:	b480      	push	{r7}
 8004180:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004182:	bf00      	nop
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004190:	bf00      	nop
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800419a:	b480      	push	{r7}
 800419c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800419e:	bf00      	nop
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041ac:	f000 f97e 	bl	80044ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041b0:	bf00      	nop
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80041b8:	4802      	ldr	r0, [pc, #8]	; (80041c4 <CAN1_RX0_IRQHandler+0x10>)
 80041ba:	f000 fd13 	bl	8004be4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80041be:	bf00      	nop
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20002884 	.word	0x20002884

080041c8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80041cc:	4802      	ldr	r0, [pc, #8]	; (80041d8 <CAN1_RX1_IRQHandler+0x10>)
 80041ce:	f000 fd09 	bl	8004be4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80041d2:	bf00      	nop
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20002884 	.word	0x20002884

080041dc <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80041e0:	4802      	ldr	r0, [pc, #8]	; (80041ec <CAN2_RX0_IRQHandler+0x10>)
 80041e2:	f000 fcff 	bl	8004be4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80041e6:	bf00      	nop
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	200028ac 	.word	0x200028ac

080041f0 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80041f4:	4802      	ldr	r0, [pc, #8]	; (8004200 <CAN2_RX1_IRQHandler+0x10>)
 80041f6:	f000 fcf5 	bl	8004be4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80041fa:	bf00      	nop
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	200028ac 	.word	0x200028ac

08004204 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
	return 1;
 8004208:	2301      	movs	r3, #1
}
 800420a:	4618      	mov	r0, r3
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <_kill>:

int _kill(int pid, int sig)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800421e:	f003 f923 	bl	8007468 <__errno>
 8004222:	4603      	mov	r3, r0
 8004224:	2216      	movs	r2, #22
 8004226:	601a      	str	r2, [r3, #0]
	return -1;
 8004228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800422c:	4618      	mov	r0, r3
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <_exit>:

void _exit (int status)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800423c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7ff ffe7 	bl	8004214 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004246:	e7fe      	b.n	8004246 <_exit+0x12>

08004248 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004254:	2300      	movs	r3, #0
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	e00a      	b.n	8004270 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800425a:	f3af 8000 	nop.w
 800425e:	4601      	mov	r1, r0
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	60ba      	str	r2, [r7, #8]
 8004266:	b2ca      	uxtb	r2, r1
 8004268:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	3301      	adds	r3, #1
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	429a      	cmp	r2, r3
 8004276:	dbf0      	blt.n	800425a <_read+0x12>
	}

return len;
 8004278:	687b      	ldr	r3, [r7, #4]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b086      	sub	sp, #24
 8004286:	af00      	add	r7, sp, #0
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800428e:	2300      	movs	r3, #0
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	e009      	b.n	80042a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	60ba      	str	r2, [r7, #8]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	4618      	mov	r0, r3
 800429e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	3301      	adds	r3, #1
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	dbf1      	blt.n	8004294 <_write+0x12>
	}
	return len;
 80042b0:	687b      	ldr	r3, [r7, #4]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <_close>:

int _close(int file)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
	return -1;
 80042c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042e2:	605a      	str	r2, [r3, #4]
	return 0;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <_isatty>:

int _isatty(int file)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
	return 1;
 80042fa:	2301      	movs	r3, #1
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
	return 0;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
	...

08004324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800432c:	4a14      	ldr	r2, [pc, #80]	; (8004380 <_sbrk+0x5c>)
 800432e:	4b15      	ldr	r3, [pc, #84]	; (8004384 <_sbrk+0x60>)
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004338:	4b13      	ldr	r3, [pc, #76]	; (8004388 <_sbrk+0x64>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d102      	bne.n	8004346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004340:	4b11      	ldr	r3, [pc, #68]	; (8004388 <_sbrk+0x64>)
 8004342:	4a12      	ldr	r2, [pc, #72]	; (800438c <_sbrk+0x68>)
 8004344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004346:	4b10      	ldr	r3, [pc, #64]	; (8004388 <_sbrk+0x64>)
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4413      	add	r3, r2
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	429a      	cmp	r2, r3
 8004352:	d207      	bcs.n	8004364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004354:	f003 f888 	bl	8007468 <__errno>
 8004358:	4603      	mov	r3, r0
 800435a:	220c      	movs	r2, #12
 800435c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800435e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004362:	e009      	b.n	8004378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004364:	4b08      	ldr	r3, [pc, #32]	; (8004388 <_sbrk+0x64>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800436a:	4b07      	ldr	r3, [pc, #28]	; (8004388 <_sbrk+0x64>)
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4413      	add	r3, r2
 8004372:	4a05      	ldr	r2, [pc, #20]	; (8004388 <_sbrk+0x64>)
 8004374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004376:	68fb      	ldr	r3, [r7, #12]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	20020000 	.word	0x20020000
 8004384:	00000400 	.word	0x00000400
 8004388:	20002974 	.word	0x20002974
 800438c:	20002990 	.word	0x20002990

08004390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004394:	4b06      	ldr	r3, [pc, #24]	; (80043b0 <SystemInit+0x20>)
 8004396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439a:	4a05      	ldr	r2, [pc, #20]	; (80043b0 <SystemInit+0x20>)
 800439c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043a4:	bf00      	nop
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	e000ed00 	.word	0xe000ed00

080043b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80043b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043b8:	480d      	ldr	r0, [pc, #52]	; (80043f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80043ba:	490e      	ldr	r1, [pc, #56]	; (80043f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80043bc:	4a0e      	ldr	r2, [pc, #56]	; (80043f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80043be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043c0:	e002      	b.n	80043c8 <LoopCopyDataInit>

080043c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043c6:	3304      	adds	r3, #4

080043c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043cc:	d3f9      	bcc.n	80043c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043ce:	4a0b      	ldr	r2, [pc, #44]	; (80043fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80043d0:	4c0b      	ldr	r4, [pc, #44]	; (8004400 <LoopFillZerobss+0x26>)
  movs r3, #0
 80043d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043d4:	e001      	b.n	80043da <LoopFillZerobss>

080043d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043d8:	3204      	adds	r2, #4

080043da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043dc:	d3fb      	bcc.n	80043d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80043de:	f7ff ffd7 	bl	8004390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043e2:	f003 f847 	bl	8007474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043e6:	f7ff fb61 	bl	8003aac <main>
  bx  lr    
 80043ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80043ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80043f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043f4:	200025a4 	.word	0x200025a4
  ldr r2, =_sidata
 80043f8:	0800a98c 	.word	0x0800a98c
  ldr r2, =_sbss
 80043fc:	200025a4 	.word	0x200025a4
  ldr r4, =_ebss
 8004400:	2000298c 	.word	0x2000298c

08004404 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004404:	e7fe      	b.n	8004404 <ADC_IRQHandler>
	...

08004408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800440c:	4b0e      	ldr	r3, [pc, #56]	; (8004448 <HAL_Init+0x40>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a0d      	ldr	r2, [pc, #52]	; (8004448 <HAL_Init+0x40>)
 8004412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004416:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004418:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <HAL_Init+0x40>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a0a      	ldr	r2, [pc, #40]	; (8004448 <HAL_Init+0x40>)
 800441e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004422:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004424:	4b08      	ldr	r3, [pc, #32]	; (8004448 <HAL_Init+0x40>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a07      	ldr	r2, [pc, #28]	; (8004448 <HAL_Init+0x40>)
 800442a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800442e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004430:	2003      	movs	r0, #3
 8004432:	f000 fed7 	bl	80051e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004436:	2000      	movs	r0, #0
 8004438:	f000 f808 	bl	800444c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800443c:	f7ff fd16 	bl	8003e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40023c00 	.word	0x40023c00

0800444c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004454:	4b12      	ldr	r3, [pc, #72]	; (80044a0 <HAL_InitTick+0x54>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	4b12      	ldr	r3, [pc, #72]	; (80044a4 <HAL_InitTick+0x58>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	4619      	mov	r1, r3
 800445e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004462:	fbb3 f3f1 	udiv	r3, r3, r1
 8004466:	fbb2 f3f3 	udiv	r3, r2, r3
 800446a:	4618      	mov	r0, r3
 800446c:	f000 feef 	bl	800524e <HAL_SYSTICK_Config>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e00e      	b.n	8004498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b0f      	cmp	r3, #15
 800447e:	d80a      	bhi.n	8004496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004480:	2200      	movs	r2, #0
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004488:	f000 feb7 	bl	80051fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800448c:	4a06      	ldr	r2, [pc, #24]	; (80044a8 <HAL_InitTick+0x5c>)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	e000      	b.n	8004498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
}
 8004498:	4618      	mov	r0, r3
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	200023c8 	.word	0x200023c8
 80044a4:	200023d0 	.word	0x200023d0
 80044a8:	200023cc 	.word	0x200023cc

080044ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044b0:	4b06      	ldr	r3, [pc, #24]	; (80044cc <HAL_IncTick+0x20>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	461a      	mov	r2, r3
 80044b6:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <HAL_IncTick+0x24>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4413      	add	r3, r2
 80044bc:	4a04      	ldr	r2, [pc, #16]	; (80044d0 <HAL_IncTick+0x24>)
 80044be:	6013      	str	r3, [r2, #0]
}
 80044c0:	bf00      	nop
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	200023d0 	.word	0x200023d0
 80044d0:	20002978 	.word	0x20002978

080044d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  return uwTick;
 80044d8:	4b03      	ldr	r3, [pc, #12]	; (80044e8 <HAL_GetTick+0x14>)
 80044da:	681b      	ldr	r3, [r3, #0]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	20002978 	.word	0x20002978

080044ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044f4:	f7ff ffee 	bl	80044d4 <HAL_GetTick>
 80044f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004504:	d005      	beq.n	8004512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004506:	4b0a      	ldr	r3, [pc, #40]	; (8004530 <HAL_Delay+0x44>)
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	461a      	mov	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4413      	add	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004512:	bf00      	nop
 8004514:	f7ff ffde 	bl	80044d4 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	429a      	cmp	r2, r3
 8004522:	d8f7      	bhi.n	8004514 <HAL_Delay+0x28>
  {
  }
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	200023d0 	.word	0x200023d0

08004534 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e0ed      	b.n	8004722 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d102      	bne.n	8004558 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7ff fcb2 	bl	8003ebc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0201 	orr.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004568:	f7ff ffb4 	bl	80044d4 <HAL_GetTick>
 800456c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800456e:	e012      	b.n	8004596 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004570:	f7ff ffb0 	bl	80044d4 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b0a      	cmp	r3, #10
 800457c:	d90b      	bls.n	8004596 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2205      	movs	r2, #5
 800458e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e0c5      	b.n	8004722 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0e5      	beq.n	8004570 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0202 	bic.w	r2, r2, #2
 80045b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045b4:	f7ff ff8e 	bl	80044d4 <HAL_GetTick>
 80045b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80045ba:	e012      	b.n	80045e2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80045bc:	f7ff ff8a 	bl	80044d4 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b0a      	cmp	r3, #10
 80045c8:	d90b      	bls.n	80045e2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2205      	movs	r2, #5
 80045da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e09f      	b.n	8004722 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1e5      	bne.n	80045bc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	7e1b      	ldrb	r3, [r3, #24]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d108      	bne.n	800460a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	e007      	b.n	800461a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004618:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	7e5b      	ldrb	r3, [r3, #25]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d108      	bne.n	8004634 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	e007      	b.n	8004644 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004642:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	7e9b      	ldrb	r3, [r3, #26]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d108      	bne.n	800465e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0220 	orr.w	r2, r2, #32
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	e007      	b.n	800466e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0220 	bic.w	r2, r2, #32
 800466c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	7edb      	ldrb	r3, [r3, #27]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d108      	bne.n	8004688 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0210 	bic.w	r2, r2, #16
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	e007      	b.n	8004698 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0210 	orr.w	r2, r2, #16
 8004696:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	7f1b      	ldrb	r3, [r3, #28]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d108      	bne.n	80046b2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0208 	orr.w	r2, r2, #8
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	e007      	b.n	80046c2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 0208 	bic.w	r2, r2, #8
 80046c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	7f5b      	ldrb	r3, [r3, #29]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d108      	bne.n	80046dc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f042 0204 	orr.w	r2, r2, #4
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	e007      	b.n	80046ec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0204 	bic.w	r2, r2, #4
 80046ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	ea42 0103 	orr.w	r1, r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	1e5a      	subs	r2, r3, #1
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
	...

0800472c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004742:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004744:	7cfb      	ldrb	r3, [r7, #19]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d003      	beq.n	8004752 <HAL_CAN_ConfigFilter+0x26>
 800474a:	7cfb      	ldrb	r3, [r7, #19]
 800474c:	2b02      	cmp	r3, #2
 800474e:	f040 80be 	bne.w	80048ce <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004752:	4b65      	ldr	r3, [pc, #404]	; (80048e8 <HAL_CAN_ConfigFilter+0x1bc>)
 8004754:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800475c:	f043 0201 	orr.w	r2, r3, #1
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800476c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	021b      	lsls	r3, r3, #8
 8004782:	431a      	orrs	r2, r3
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	f003 031f 	and.w	r3, r3, #31
 8004792:	2201      	movs	r2, #1
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	43db      	mvns	r3, r3
 80047a4:	401a      	ands	r2, r3
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d123      	bne.n	80047fc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	43db      	mvns	r3, r3
 80047be:	401a      	ands	r2, r3
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80047d6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	3248      	adds	r2, #72	; 0x48
 80047dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80047f0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80047f2:	6979      	ldr	r1, [r7, #20]
 80047f4:	3348      	adds	r3, #72	; 0x48
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	440b      	add	r3, r1
 80047fa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d122      	bne.n	800484a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	431a      	orrs	r2, r3
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004824:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	3248      	adds	r2, #72	; 0x48
 800482a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800483e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004840:	6979      	ldr	r1, [r7, #20]
 8004842:	3348      	adds	r3, #72	; 0x48
 8004844:	00db      	lsls	r3, r3, #3
 8004846:	440b      	add	r3, r1
 8004848:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d109      	bne.n	8004866 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	43db      	mvns	r3, r3
 800485c:	401a      	ands	r2, r3
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004864:	e007      	b.n	8004876 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	431a      	orrs	r2, r3
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d109      	bne.n	8004892 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	43db      	mvns	r3, r3
 8004888:	401a      	ands	r2, r3
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004890:	e007      	b.n	80048a2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	431a      	orrs	r2, r3
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d107      	bne.n	80048ba <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	431a      	orrs	r2, r3
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80048c0:	f023 0201 	bic.w	r2, r3, #1
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	e006      	b.n	80048dc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
  }
}
 80048dc:	4618      	mov	r0, r3
 80048de:	371c      	adds	r7, #28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	40006400 	.word	0x40006400

080048ec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d12e      	bne.n	800495e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0201 	bic.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004918:	f7ff fddc 	bl	80044d4 <HAL_GetTick>
 800491c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800491e:	e012      	b.n	8004946 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004920:	f7ff fdd8 	bl	80044d4 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b0a      	cmp	r3, #10
 800492c:	d90b      	bls.n	8004946 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2205      	movs	r2, #5
 800493e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e012      	b.n	800496c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e5      	bne.n	8004920 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800495a:	2300      	movs	r3, #0
 800495c:	e006      	b.n	800496c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
  }
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004988:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800498a:	7dfb      	ldrb	r3, [r7, #23]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d003      	beq.n	8004998 <HAL_CAN_GetRxMessage+0x24>
 8004990:	7dfb      	ldrb	r3, [r7, #23]
 8004992:	2b02      	cmp	r3, #2
 8004994:	f040 80f3 	bne.w	8004b7e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10e      	bne.n	80049bc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0303 	and.w	r3, r3, #3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d116      	bne.n	80049da <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e0e7      	b.n	8004b8c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d107      	bne.n	80049da <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e0d8      	b.n	8004b8c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	331b      	adds	r3, #27
 80049e2:	011b      	lsls	r3, r3, #4
 80049e4:	4413      	add	r3, r2
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0204 	and.w	r2, r3, #4
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10c      	bne.n	8004a12 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	331b      	adds	r3, #27
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	4413      	add	r3, r2
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	0d5b      	lsrs	r3, r3, #21
 8004a08:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	e00b      	b.n	8004a2a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	331b      	adds	r3, #27
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	4413      	add	r3, r2
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	08db      	lsrs	r3, r3, #3
 8004a22:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	331b      	adds	r3, #27
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	4413      	add	r3, r2
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0202 	and.w	r2, r3, #2
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	331b      	adds	r3, #27
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	4413      	add	r3, r2
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 020f 	and.w	r2, r3, #15
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	331b      	adds	r3, #27
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	4413      	add	r3, r2
 8004a64:	3304      	adds	r3, #4
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	0a1b      	lsrs	r3, r3, #8
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	331b      	adds	r3, #27
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	4413      	add	r3, r2
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	0c1b      	lsrs	r3, r3, #16
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	0a1a      	lsrs	r2, r3, #8
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	b2d2      	uxtb	r2, r2
 8004ab6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	0c1a      	lsrs	r2, r3, #16
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	3302      	adds	r3, #2
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	011b      	lsls	r3, r3, #4
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	0e1a      	lsrs	r2, r3, #24
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	3303      	adds	r3, #3
 8004ae8:	b2d2      	uxtb	r2, r2
 8004aea:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	3304      	adds	r3, #4
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	0a1a      	lsrs	r2, r3, #8
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	3305      	adds	r3, #5
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	011b      	lsls	r3, r3, #4
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	0c1a      	lsrs	r2, r3, #16
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	3306      	adds	r3, #6
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	0e1a      	lsrs	r2, r3, #24
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	3307      	adds	r3, #7
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d108      	bne.n	8004b6a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0220 	orr.w	r2, r2, #32
 8004b66:	60da      	str	r2, [r3, #12]
 8004b68:	e007      	b.n	8004b7a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f042 0220 	orr.w	r2, r2, #32
 8004b78:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	e006      	b.n	8004b8c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
  }
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	371c      	adds	r7, #28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ba8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d002      	beq.n	8004bb6 <HAL_CAN_ActivateNotification+0x1e>
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d109      	bne.n	8004bca <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6959      	ldr	r1, [r3, #20]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	e006      	b.n	8004bd8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
  }
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08a      	sub	sp, #40	; 0x28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004bec:	2300      	movs	r3, #0
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d07c      	beq.n	8004d24 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d023      	beq.n	8004c7c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f983 	bl	8004f52 <HAL_CAN_TxMailbox0CompleteCallback>
 8004c4c:	e016      	b.n	8004c7c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	f003 0304 	and.w	r3, r3, #4
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d004      	beq.n	8004c62 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c60:	e00c      	b.n	8004c7c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	f003 0308 	and.w	r3, r3, #8
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d004      	beq.n	8004c76 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
 8004c74:	e002      	b.n	8004c7c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f989 	bl	8004f8e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d024      	beq.n	8004cd0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f963 	bl	8004f66 <HAL_CAN_TxMailbox1CompleteCallback>
 8004ca0:	e016      	b.n	8004cd0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d004      	beq.n	8004cb6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb4:	e00c      	b.n	8004cd0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d004      	beq.n	8004cca <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc8:	e002      	b.n	8004cd0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f969 	bl	8004fa2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d024      	beq.n	8004d24 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004ce2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f943 	bl	8004f7a <HAL_CAN_TxMailbox2CompleteCallback>
 8004cf4:	e016      	b.n	8004d24 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d004      	beq.n	8004d0a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d06:	627b      	str	r3, [r7, #36]	; 0x24
 8004d08:	e00c      	b.n	8004d24 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d004      	beq.n	8004d1e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d1c:	e002      	b.n	8004d24 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f949 	bl	8004fb6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00c      	beq.n	8004d48 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f003 0310 	and.w	r3, r3, #16
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d007      	beq.n	8004d48 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2210      	movs	r2, #16
 8004d46:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	f003 0304 	and.w	r3, r3, #4
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00b      	beq.n	8004d6a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f003 0308 	and.w	r3, r3, #8
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d006      	beq.n	8004d6a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2208      	movs	r2, #8
 8004d62:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f930 	bl	8004fca <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d009      	beq.n	8004d88 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fc f9a6 	bl	80010d4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00c      	beq.n	8004dac <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	f003 0310 	and.w	r3, r3, #16
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d007      	beq.n	8004dac <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004da2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2210      	movs	r2, #16
 8004daa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00b      	beq.n	8004dce <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f003 0308 	and.w	r3, r3, #8
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d006      	beq.n	8004dce <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2208      	movs	r2, #8
 8004dc6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f912 	bl	8004ff2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004dce:	6a3b      	ldr	r3, [r7, #32]
 8004dd0:	f003 0310 	and.w	r3, r3, #16
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d009      	beq.n	8004dec <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	f003 0303 	and.w	r3, r3, #3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f8f9 	bl	8004fde <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00b      	beq.n	8004e0e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	f003 0310 	and.w	r3, r3, #16
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d006      	beq.n	8004e0e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2210      	movs	r2, #16
 8004e06:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f8fc 	bl	8005006 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00b      	beq.n	8004e30 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d006      	beq.n	8004e30 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2208      	movs	r2, #8
 8004e28:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f8f5 	bl	800501a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d07b      	beq.n	8004f32 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d072      	beq.n	8004f2a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d008      	beq.n	8004e60 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	f043 0301 	orr.w	r3, r3, #1
 8004e5e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d008      	beq.n	8004e7c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d003      	beq.n	8004e7c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	f043 0302 	orr.w	r3, r3, #2
 8004e7a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d008      	beq.n	8004e98 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d003      	beq.n	8004e98 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	f043 0304 	orr.w	r3, r3, #4
 8004e96:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004e98:	6a3b      	ldr	r3, [r7, #32]
 8004e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d043      	beq.n	8004f2a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d03e      	beq.n	8004f2a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004eb2:	2b60      	cmp	r3, #96	; 0x60
 8004eb4:	d02b      	beq.n	8004f0e <HAL_CAN_IRQHandler+0x32a>
 8004eb6:	2b60      	cmp	r3, #96	; 0x60
 8004eb8:	d82e      	bhi.n	8004f18 <HAL_CAN_IRQHandler+0x334>
 8004eba:	2b50      	cmp	r3, #80	; 0x50
 8004ebc:	d022      	beq.n	8004f04 <HAL_CAN_IRQHandler+0x320>
 8004ebe:	2b50      	cmp	r3, #80	; 0x50
 8004ec0:	d82a      	bhi.n	8004f18 <HAL_CAN_IRQHandler+0x334>
 8004ec2:	2b40      	cmp	r3, #64	; 0x40
 8004ec4:	d019      	beq.n	8004efa <HAL_CAN_IRQHandler+0x316>
 8004ec6:	2b40      	cmp	r3, #64	; 0x40
 8004ec8:	d826      	bhi.n	8004f18 <HAL_CAN_IRQHandler+0x334>
 8004eca:	2b30      	cmp	r3, #48	; 0x30
 8004ecc:	d010      	beq.n	8004ef0 <HAL_CAN_IRQHandler+0x30c>
 8004ece:	2b30      	cmp	r3, #48	; 0x30
 8004ed0:	d822      	bhi.n	8004f18 <HAL_CAN_IRQHandler+0x334>
 8004ed2:	2b10      	cmp	r3, #16
 8004ed4:	d002      	beq.n	8004edc <HAL_CAN_IRQHandler+0x2f8>
 8004ed6:	2b20      	cmp	r3, #32
 8004ed8:	d005      	beq.n	8004ee6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004eda:	e01d      	b.n	8004f18 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	f043 0308 	orr.w	r3, r3, #8
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ee4:	e019      	b.n	8004f1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	f043 0310 	orr.w	r3, r3, #16
 8004eec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004eee:	e014      	b.n	8004f1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	f043 0320 	orr.w	r3, r3, #32
 8004ef6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ef8:	e00f      	b.n	8004f1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004f02:	e00a      	b.n	8004f1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004f0c:	e005      	b.n	8004f1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004f16:	e000      	b.n	8004f1a <HAL_CAN_IRQHandler+0x336>
            break;
 8004f18:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	699a      	ldr	r2, [r3, #24]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004f28:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2204      	movs	r2, #4
 8004f30:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d008      	beq.n	8004f4a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f872 	bl	800502e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004f4a:	bf00      	nop
 8004f4c:	3728      	adds	r7, #40	; 0x28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
	...

08005044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f003 0307 	and.w	r3, r3, #7
 8005052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005054:	4b0c      	ldr	r3, [pc, #48]	; (8005088 <__NVIC_SetPriorityGrouping+0x44>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005060:	4013      	ands	r3, r2
 8005062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800506c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005076:	4a04      	ldr	r2, [pc, #16]	; (8005088 <__NVIC_SetPriorityGrouping+0x44>)
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	60d3      	str	r3, [r2, #12]
}
 800507c:	bf00      	nop
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	e000ed00 	.word	0xe000ed00

0800508c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005090:	4b04      	ldr	r3, [pc, #16]	; (80050a4 <__NVIC_GetPriorityGrouping+0x18>)
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	0a1b      	lsrs	r3, r3, #8
 8005096:	f003 0307 	and.w	r3, r3, #7
}
 800509a:	4618      	mov	r0, r3
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	e000ed00 	.word	0xe000ed00

080050a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	4603      	mov	r3, r0
 80050b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	db0b      	blt.n	80050d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050ba:	79fb      	ldrb	r3, [r7, #7]
 80050bc:	f003 021f 	and.w	r2, r3, #31
 80050c0:	4907      	ldr	r1, [pc, #28]	; (80050e0 <__NVIC_EnableIRQ+0x38>)
 80050c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050c6:	095b      	lsrs	r3, r3, #5
 80050c8:	2001      	movs	r0, #1
 80050ca:	fa00 f202 	lsl.w	r2, r0, r2
 80050ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80050d2:	bf00      	nop
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	e000e100 	.word	0xe000e100

080050e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	4603      	mov	r3, r0
 80050ec:	6039      	str	r1, [r7, #0]
 80050ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	db0a      	blt.n	800510e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	490c      	ldr	r1, [pc, #48]	; (8005130 <__NVIC_SetPriority+0x4c>)
 80050fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005102:	0112      	lsls	r2, r2, #4
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	440b      	add	r3, r1
 8005108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800510c:	e00a      	b.n	8005124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	b2da      	uxtb	r2, r3
 8005112:	4908      	ldr	r1, [pc, #32]	; (8005134 <__NVIC_SetPriority+0x50>)
 8005114:	79fb      	ldrb	r3, [r7, #7]
 8005116:	f003 030f 	and.w	r3, r3, #15
 800511a:	3b04      	subs	r3, #4
 800511c:	0112      	lsls	r2, r2, #4
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	440b      	add	r3, r1
 8005122:	761a      	strb	r2, [r3, #24]
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	e000e100 	.word	0xe000e100
 8005134:	e000ed00 	.word	0xe000ed00

08005138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005138:	b480      	push	{r7}
 800513a:	b089      	sub	sp, #36	; 0x24
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	f1c3 0307 	rsb	r3, r3, #7
 8005152:	2b04      	cmp	r3, #4
 8005154:	bf28      	it	cs
 8005156:	2304      	movcs	r3, #4
 8005158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	3304      	adds	r3, #4
 800515e:	2b06      	cmp	r3, #6
 8005160:	d902      	bls.n	8005168 <NVIC_EncodePriority+0x30>
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	3b03      	subs	r3, #3
 8005166:	e000      	b.n	800516a <NVIC_EncodePriority+0x32>
 8005168:	2300      	movs	r3, #0
 800516a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800516c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	fa02 f303 	lsl.w	r3, r2, r3
 8005176:	43da      	mvns	r2, r3
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	401a      	ands	r2, r3
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005180:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	fa01 f303 	lsl.w	r3, r1, r3
 800518a:	43d9      	mvns	r1, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005190:	4313      	orrs	r3, r2
         );
}
 8005192:	4618      	mov	r0, r3
 8005194:	3724      	adds	r7, #36	; 0x24
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
	...

080051a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3b01      	subs	r3, #1
 80051ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051b0:	d301      	bcc.n	80051b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051b2:	2301      	movs	r3, #1
 80051b4:	e00f      	b.n	80051d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051b6:	4a0a      	ldr	r2, [pc, #40]	; (80051e0 <SysTick_Config+0x40>)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3b01      	subs	r3, #1
 80051bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051be:	210f      	movs	r1, #15
 80051c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051c4:	f7ff ff8e 	bl	80050e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051c8:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <SysTick_Config+0x40>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051ce:	4b04      	ldr	r3, [pc, #16]	; (80051e0 <SysTick_Config+0x40>)
 80051d0:	2207      	movs	r2, #7
 80051d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	e000e010 	.word	0xe000e010

080051e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7ff ff29 	bl	8005044 <__NVIC_SetPriorityGrouping>
}
 80051f2:	bf00      	nop
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b086      	sub	sp, #24
 80051fe:	af00      	add	r7, sp, #0
 8005200:	4603      	mov	r3, r0
 8005202:	60b9      	str	r1, [r7, #8]
 8005204:	607a      	str	r2, [r7, #4]
 8005206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005208:	2300      	movs	r3, #0
 800520a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800520c:	f7ff ff3e 	bl	800508c <__NVIC_GetPriorityGrouping>
 8005210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	6978      	ldr	r0, [r7, #20]
 8005218:	f7ff ff8e 	bl	8005138 <NVIC_EncodePriority>
 800521c:	4602      	mov	r2, r0
 800521e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005222:	4611      	mov	r1, r2
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff ff5d 	bl	80050e4 <__NVIC_SetPriority>
}
 800522a:	bf00      	nop
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b082      	sub	sp, #8
 8005236:	af00      	add	r7, sp, #0
 8005238:	4603      	mov	r3, r0
 800523a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800523c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005240:	4618      	mov	r0, r3
 8005242:	f7ff ff31 	bl	80050a8 <__NVIC_EnableIRQ>
}
 8005246:	bf00      	nop
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7ff ffa2 	bl	80051a0 <SysTick_Config>
 800525c:	4603      	mov	r3, r0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005268:	b480      	push	{r7}
 800526a:	b089      	sub	sp, #36	; 0x24
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005272:	2300      	movs	r3, #0
 8005274:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005276:	2300      	movs	r3, #0
 8005278:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800527a:	2300      	movs	r3, #0
 800527c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800527e:	2300      	movs	r3, #0
 8005280:	61fb      	str	r3, [r7, #28]
 8005282:	e165      	b.n	8005550 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005284:	2201      	movs	r2, #1
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	fa02 f303 	lsl.w	r3, r2, r3
 800528c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	4013      	ands	r3, r2
 8005296:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	429a      	cmp	r2, r3
 800529e:	f040 8154 	bne.w	800554a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d005      	beq.n	80052ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d130      	bne.n	800531c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	005b      	lsls	r3, r3, #1
 80052c4:	2203      	movs	r2, #3
 80052c6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ca:	43db      	mvns	r3, r3
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	4013      	ands	r3, r2
 80052d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	fa02 f303 	lsl.w	r3, r2, r3
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052f0:	2201      	movs	r2, #1
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	43db      	mvns	r3, r3
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	4013      	ands	r3, r2
 80052fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	091b      	lsrs	r3, r3, #4
 8005306:	f003 0201 	and.w	r2, r3, #1
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	fa02 f303 	lsl.w	r3, r2, r3
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	4313      	orrs	r3, r2
 8005314:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f003 0303 	and.w	r3, r3, #3
 8005324:	2b03      	cmp	r3, #3
 8005326:	d017      	beq.n	8005358 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	2203      	movs	r2, #3
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	43db      	mvns	r3, r3
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	4013      	ands	r3, r2
 800533e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	fa02 f303 	lsl.w	r3, r2, r3
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	4313      	orrs	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f003 0303 	and.w	r3, r3, #3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d123      	bne.n	80053ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	08da      	lsrs	r2, r3, #3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	3208      	adds	r2, #8
 800536c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005370:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	220f      	movs	r2, #15
 800537c:	fa02 f303 	lsl.w	r3, r2, r3
 8005380:	43db      	mvns	r3, r3
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	4013      	ands	r3, r2
 8005386:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	691a      	ldr	r2, [r3, #16]
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	fa02 f303 	lsl.w	r3, r2, r3
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	4313      	orrs	r3, r2
 800539c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	08da      	lsrs	r2, r3, #3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	3208      	adds	r2, #8
 80053a6:	69b9      	ldr	r1, [r7, #24]
 80053a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	2203      	movs	r2, #3
 80053b8:	fa02 f303 	lsl.w	r3, r2, r3
 80053bc:	43db      	mvns	r3, r3
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	4013      	ands	r3, r2
 80053c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f003 0203 	and.w	r2, r3, #3
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	005b      	lsls	r3, r3, #1
 80053d0:	fa02 f303 	lsl.w	r3, r2, r3
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 80ae 	beq.w	800554a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053ee:	2300      	movs	r3, #0
 80053f0:	60fb      	str	r3, [r7, #12]
 80053f2:	4b5d      	ldr	r3, [pc, #372]	; (8005568 <HAL_GPIO_Init+0x300>)
 80053f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f6:	4a5c      	ldr	r2, [pc, #368]	; (8005568 <HAL_GPIO_Init+0x300>)
 80053f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053fc:	6453      	str	r3, [r2, #68]	; 0x44
 80053fe:	4b5a      	ldr	r3, [pc, #360]	; (8005568 <HAL_GPIO_Init+0x300>)
 8005400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800540a:	4a58      	ldr	r2, [pc, #352]	; (800556c <HAL_GPIO_Init+0x304>)
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	089b      	lsrs	r3, r3, #2
 8005410:	3302      	adds	r3, #2
 8005412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005416:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	f003 0303 	and.w	r3, r3, #3
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	220f      	movs	r2, #15
 8005422:	fa02 f303 	lsl.w	r3, r2, r3
 8005426:	43db      	mvns	r3, r3
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	4013      	ands	r3, r2
 800542c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a4f      	ldr	r2, [pc, #316]	; (8005570 <HAL_GPIO_Init+0x308>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d025      	beq.n	8005482 <HAL_GPIO_Init+0x21a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a4e      	ldr	r2, [pc, #312]	; (8005574 <HAL_GPIO_Init+0x30c>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d01f      	beq.n	800547e <HAL_GPIO_Init+0x216>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a4d      	ldr	r2, [pc, #308]	; (8005578 <HAL_GPIO_Init+0x310>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d019      	beq.n	800547a <HAL_GPIO_Init+0x212>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a4c      	ldr	r2, [pc, #304]	; (800557c <HAL_GPIO_Init+0x314>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d013      	beq.n	8005476 <HAL_GPIO_Init+0x20e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a4b      	ldr	r2, [pc, #300]	; (8005580 <HAL_GPIO_Init+0x318>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00d      	beq.n	8005472 <HAL_GPIO_Init+0x20a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a4a      	ldr	r2, [pc, #296]	; (8005584 <HAL_GPIO_Init+0x31c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d007      	beq.n	800546e <HAL_GPIO_Init+0x206>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a49      	ldr	r2, [pc, #292]	; (8005588 <HAL_GPIO_Init+0x320>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d101      	bne.n	800546a <HAL_GPIO_Init+0x202>
 8005466:	2306      	movs	r3, #6
 8005468:	e00c      	b.n	8005484 <HAL_GPIO_Init+0x21c>
 800546a:	2307      	movs	r3, #7
 800546c:	e00a      	b.n	8005484 <HAL_GPIO_Init+0x21c>
 800546e:	2305      	movs	r3, #5
 8005470:	e008      	b.n	8005484 <HAL_GPIO_Init+0x21c>
 8005472:	2304      	movs	r3, #4
 8005474:	e006      	b.n	8005484 <HAL_GPIO_Init+0x21c>
 8005476:	2303      	movs	r3, #3
 8005478:	e004      	b.n	8005484 <HAL_GPIO_Init+0x21c>
 800547a:	2302      	movs	r3, #2
 800547c:	e002      	b.n	8005484 <HAL_GPIO_Init+0x21c>
 800547e:	2301      	movs	r3, #1
 8005480:	e000      	b.n	8005484 <HAL_GPIO_Init+0x21c>
 8005482:	2300      	movs	r3, #0
 8005484:	69fa      	ldr	r2, [r7, #28]
 8005486:	f002 0203 	and.w	r2, r2, #3
 800548a:	0092      	lsls	r2, r2, #2
 800548c:	4093      	lsls	r3, r2
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	4313      	orrs	r3, r2
 8005492:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005494:	4935      	ldr	r1, [pc, #212]	; (800556c <HAL_GPIO_Init+0x304>)
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	089b      	lsrs	r3, r3, #2
 800549a:	3302      	adds	r3, #2
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80054a2:	4b3a      	ldr	r3, [pc, #232]	; (800558c <HAL_GPIO_Init+0x324>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	43db      	mvns	r3, r3
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	4013      	ands	r3, r2
 80054b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80054c6:	4a31      	ldr	r2, [pc, #196]	; (800558c <HAL_GPIO_Init+0x324>)
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80054cc:	4b2f      	ldr	r3, [pc, #188]	; (800558c <HAL_GPIO_Init+0x324>)
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	43db      	mvns	r3, r3
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	4013      	ands	r3, r2
 80054da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80054f0:	4a26      	ldr	r2, [pc, #152]	; (800558c <HAL_GPIO_Init+0x324>)
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80054f6:	4b25      	ldr	r3, [pc, #148]	; (800558c <HAL_GPIO_Init+0x324>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	43db      	mvns	r3, r3
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	4013      	ands	r3, r2
 8005504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	4313      	orrs	r3, r2
 8005518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800551a:	4a1c      	ldr	r2, [pc, #112]	; (800558c <HAL_GPIO_Init+0x324>)
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005520:	4b1a      	ldr	r3, [pc, #104]	; (800558c <HAL_GPIO_Init+0x324>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	43db      	mvns	r3, r3
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	4013      	ands	r3, r2
 800552e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005544:	4a11      	ldr	r2, [pc, #68]	; (800558c <HAL_GPIO_Init+0x324>)
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	3301      	adds	r3, #1
 800554e:	61fb      	str	r3, [r7, #28]
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	2b0f      	cmp	r3, #15
 8005554:	f67f ae96 	bls.w	8005284 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005558:	bf00      	nop
 800555a:	bf00      	nop
 800555c:	3724      	adds	r7, #36	; 0x24
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	40023800 	.word	0x40023800
 800556c:	40013800 	.word	0x40013800
 8005570:	40020000 	.word	0x40020000
 8005574:	40020400 	.word	0x40020400
 8005578:	40020800 	.word	0x40020800
 800557c:	40020c00 	.word	0x40020c00
 8005580:	40021000 	.word	0x40021000
 8005584:	40021400 	.word	0x40021400
 8005588:	40021800 	.word	0x40021800
 800558c:	40013c00 	.word	0x40013c00

08005590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	460b      	mov	r3, r1
 800559a:	807b      	strh	r3, [r7, #2]
 800559c:	4613      	mov	r3, r2
 800559e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055a0:	787b      	ldrb	r3, [r7, #1]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055a6:	887a      	ldrh	r2, [r7, #2]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80055ac:	e003      	b.n	80055b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80055ae:	887b      	ldrh	r3, [r7, #2]
 80055b0:	041a      	lsls	r2, r3, #16
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	619a      	str	r2, [r3, #24]
}
 80055b6:	bf00      	nop
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
	...

080055c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e0cc      	b.n	8005772 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055d8:	4b68      	ldr	r3, [pc, #416]	; (800577c <HAL_RCC_ClockConfig+0x1b8>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 030f 	and.w	r3, r3, #15
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d90c      	bls.n	8005600 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055e6:	4b65      	ldr	r3, [pc, #404]	; (800577c <HAL_RCC_ClockConfig+0x1b8>)
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ee:	4b63      	ldr	r3, [pc, #396]	; (800577c <HAL_RCC_ClockConfig+0x1b8>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 030f 	and.w	r3, r3, #15
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d001      	beq.n	8005600 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e0b8      	b.n	8005772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d020      	beq.n	800564e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	2b00      	cmp	r3, #0
 8005616:	d005      	beq.n	8005624 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005618:	4b59      	ldr	r3, [pc, #356]	; (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	4a58      	ldr	r2, [pc, #352]	; (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 800561e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005622:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0308 	and.w	r3, r3, #8
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005630:	4b53      	ldr	r3, [pc, #332]	; (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	4a52      	ldr	r2, [pc, #328]	; (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 8005636:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800563a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800563c:	4b50      	ldr	r3, [pc, #320]	; (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	494d      	ldr	r1, [pc, #308]	; (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 800564a:	4313      	orrs	r3, r2
 800564c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d044      	beq.n	80056e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d107      	bne.n	8005672 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005662:	4b47      	ldr	r3, [pc, #284]	; (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d119      	bne.n	80056a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e07f      	b.n	8005772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b02      	cmp	r3, #2
 8005678:	d003      	beq.n	8005682 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800567e:	2b03      	cmp	r3, #3
 8005680:	d107      	bne.n	8005692 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005682:	4b3f      	ldr	r3, [pc, #252]	; (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d109      	bne.n	80056a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e06f      	b.n	8005772 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005692:	4b3b      	ldr	r3, [pc, #236]	; (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e067      	b.n	8005772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056a2:	4b37      	ldr	r3, [pc, #220]	; (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f023 0203 	bic.w	r2, r3, #3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	4934      	ldr	r1, [pc, #208]	; (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056b4:	f7fe ff0e 	bl	80044d4 <HAL_GetTick>
 80056b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ba:	e00a      	b.n	80056d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056bc:	f7fe ff0a 	bl	80044d4 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e04f      	b.n	8005772 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056d2:	4b2b      	ldr	r3, [pc, #172]	; (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 020c 	and.w	r2, r3, #12
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d1eb      	bne.n	80056bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056e4:	4b25      	ldr	r3, [pc, #148]	; (800577c <HAL_RCC_ClockConfig+0x1b8>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 030f 	and.w	r3, r3, #15
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d20c      	bcs.n	800570c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056f2:	4b22      	ldr	r3, [pc, #136]	; (800577c <HAL_RCC_ClockConfig+0x1b8>)
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056fa:	4b20      	ldr	r3, [pc, #128]	; (800577c <HAL_RCC_ClockConfig+0x1b8>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	429a      	cmp	r2, r3
 8005706:	d001      	beq.n	800570c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e032      	b.n	8005772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	2b00      	cmp	r3, #0
 8005716:	d008      	beq.n	800572a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005718:	4b19      	ldr	r3, [pc, #100]	; (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	4916      	ldr	r1, [pc, #88]	; (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 8005726:	4313      	orrs	r3, r2
 8005728:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0308 	and.w	r3, r3, #8
 8005732:	2b00      	cmp	r3, #0
 8005734:	d009      	beq.n	800574a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005736:	4b12      	ldr	r3, [pc, #72]	; (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	490e      	ldr	r1, [pc, #56]	; (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 8005746:	4313      	orrs	r3, r2
 8005748:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800574a:	f000 f855 	bl	80057f8 <HAL_RCC_GetSysClockFreq>
 800574e:	4602      	mov	r2, r0
 8005750:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	091b      	lsrs	r3, r3, #4
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	490a      	ldr	r1, [pc, #40]	; (8005784 <HAL_RCC_ClockConfig+0x1c0>)
 800575c:	5ccb      	ldrb	r3, [r1, r3]
 800575e:	fa22 f303 	lsr.w	r3, r2, r3
 8005762:	4a09      	ldr	r2, [pc, #36]	; (8005788 <HAL_RCC_ClockConfig+0x1c4>)
 8005764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005766:	4b09      	ldr	r3, [pc, #36]	; (800578c <HAL_RCC_ClockConfig+0x1c8>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4618      	mov	r0, r3
 800576c:	f7fe fe6e 	bl	800444c <HAL_InitTick>

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	40023c00 	.word	0x40023c00
 8005780:	40023800 	.word	0x40023800
 8005784:	0800a588 	.word	0x0800a588
 8005788:	200023c8 	.word	0x200023c8
 800578c:	200023cc 	.word	0x200023cc

08005790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005790:	b480      	push	{r7}
 8005792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005794:	4b03      	ldr	r3, [pc, #12]	; (80057a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005796:	681b      	ldr	r3, [r3, #0]
}
 8005798:	4618      	mov	r0, r3
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	200023c8 	.word	0x200023c8

080057a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057ac:	f7ff fff0 	bl	8005790 <HAL_RCC_GetHCLKFreq>
 80057b0:	4602      	mov	r2, r0
 80057b2:	4b05      	ldr	r3, [pc, #20]	; (80057c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	0a9b      	lsrs	r3, r3, #10
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	4903      	ldr	r1, [pc, #12]	; (80057cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80057be:	5ccb      	ldrb	r3, [r1, r3]
 80057c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	40023800 	.word	0x40023800
 80057cc:	0800a598 	.word	0x0800a598

080057d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80057d4:	f7ff ffdc 	bl	8005790 <HAL_RCC_GetHCLKFreq>
 80057d8:	4602      	mov	r2, r0
 80057da:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	0b5b      	lsrs	r3, r3, #13
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	4903      	ldr	r1, [pc, #12]	; (80057f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057e6:	5ccb      	ldrb	r3, [r1, r3]
 80057e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	40023800 	.word	0x40023800
 80057f4:	0800a598 	.word	0x0800a598

080057f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057fc:	b0ae      	sub	sp, #184	; 0xb8
 80057fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800581e:	4bcb      	ldr	r3, [pc, #812]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x354>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 030c 	and.w	r3, r3, #12
 8005826:	2b0c      	cmp	r3, #12
 8005828:	f200 8206 	bhi.w	8005c38 <HAL_RCC_GetSysClockFreq+0x440>
 800582c:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <HAL_RCC_GetSysClockFreq+0x3c>)
 800582e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005832:	bf00      	nop
 8005834:	08005869 	.word	0x08005869
 8005838:	08005c39 	.word	0x08005c39
 800583c:	08005c39 	.word	0x08005c39
 8005840:	08005c39 	.word	0x08005c39
 8005844:	08005871 	.word	0x08005871
 8005848:	08005c39 	.word	0x08005c39
 800584c:	08005c39 	.word	0x08005c39
 8005850:	08005c39 	.word	0x08005c39
 8005854:	08005879 	.word	0x08005879
 8005858:	08005c39 	.word	0x08005c39
 800585c:	08005c39 	.word	0x08005c39
 8005860:	08005c39 	.word	0x08005c39
 8005864:	08005a69 	.word	0x08005a69
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005868:	4bb9      	ldr	r3, [pc, #740]	; (8005b50 <HAL_RCC_GetSysClockFreq+0x358>)
 800586a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800586e:	e1e7      	b.n	8005c40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005870:	4bb8      	ldr	r3, [pc, #736]	; (8005b54 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005872:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005876:	e1e3      	b.n	8005c40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005878:	4bb4      	ldr	r3, [pc, #720]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x354>)
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005880:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005884:	4bb1      	ldr	r3, [pc, #708]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x354>)
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d071      	beq.n	8005974 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005890:	4bae      	ldr	r3, [pc, #696]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x354>)
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	099b      	lsrs	r3, r3, #6
 8005896:	2200      	movs	r2, #0
 8005898:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800589c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80058a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058ac:	2300      	movs	r3, #0
 80058ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80058b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80058b6:	4622      	mov	r2, r4
 80058b8:	462b      	mov	r3, r5
 80058ba:	f04f 0000 	mov.w	r0, #0
 80058be:	f04f 0100 	mov.w	r1, #0
 80058c2:	0159      	lsls	r1, r3, #5
 80058c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058c8:	0150      	lsls	r0, r2, #5
 80058ca:	4602      	mov	r2, r0
 80058cc:	460b      	mov	r3, r1
 80058ce:	4621      	mov	r1, r4
 80058d0:	1a51      	subs	r1, r2, r1
 80058d2:	6439      	str	r1, [r7, #64]	; 0x40
 80058d4:	4629      	mov	r1, r5
 80058d6:	eb63 0301 	sbc.w	r3, r3, r1
 80058da:	647b      	str	r3, [r7, #68]	; 0x44
 80058dc:	f04f 0200 	mov.w	r2, #0
 80058e0:	f04f 0300 	mov.w	r3, #0
 80058e4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80058e8:	4649      	mov	r1, r9
 80058ea:	018b      	lsls	r3, r1, #6
 80058ec:	4641      	mov	r1, r8
 80058ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058f2:	4641      	mov	r1, r8
 80058f4:	018a      	lsls	r2, r1, #6
 80058f6:	4641      	mov	r1, r8
 80058f8:	1a51      	subs	r1, r2, r1
 80058fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80058fc:	4649      	mov	r1, r9
 80058fe:	eb63 0301 	sbc.w	r3, r3, r1
 8005902:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005910:	4649      	mov	r1, r9
 8005912:	00cb      	lsls	r3, r1, #3
 8005914:	4641      	mov	r1, r8
 8005916:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800591a:	4641      	mov	r1, r8
 800591c:	00ca      	lsls	r2, r1, #3
 800591e:	4610      	mov	r0, r2
 8005920:	4619      	mov	r1, r3
 8005922:	4603      	mov	r3, r0
 8005924:	4622      	mov	r2, r4
 8005926:	189b      	adds	r3, r3, r2
 8005928:	633b      	str	r3, [r7, #48]	; 0x30
 800592a:	462b      	mov	r3, r5
 800592c:	460a      	mov	r2, r1
 800592e:	eb42 0303 	adc.w	r3, r2, r3
 8005932:	637b      	str	r3, [r7, #52]	; 0x34
 8005934:	f04f 0200 	mov.w	r2, #0
 8005938:	f04f 0300 	mov.w	r3, #0
 800593c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005940:	4629      	mov	r1, r5
 8005942:	024b      	lsls	r3, r1, #9
 8005944:	4621      	mov	r1, r4
 8005946:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800594a:	4621      	mov	r1, r4
 800594c:	024a      	lsls	r2, r1, #9
 800594e:	4610      	mov	r0, r2
 8005950:	4619      	mov	r1, r3
 8005952:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005956:	2200      	movs	r2, #0
 8005958:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800595c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005960:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005964:	f7fb f9b0 	bl	8000cc8 <__aeabi_uldivmod>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	4613      	mov	r3, r2
 800596e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005972:	e067      	b.n	8005a44 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005974:	4b75      	ldr	r3, [pc, #468]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x354>)
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	099b      	lsrs	r3, r3, #6
 800597a:	2200      	movs	r2, #0
 800597c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005980:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005984:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800598c:	67bb      	str	r3, [r7, #120]	; 0x78
 800598e:	2300      	movs	r3, #0
 8005990:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005992:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005996:	4622      	mov	r2, r4
 8005998:	462b      	mov	r3, r5
 800599a:	f04f 0000 	mov.w	r0, #0
 800599e:	f04f 0100 	mov.w	r1, #0
 80059a2:	0159      	lsls	r1, r3, #5
 80059a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059a8:	0150      	lsls	r0, r2, #5
 80059aa:	4602      	mov	r2, r0
 80059ac:	460b      	mov	r3, r1
 80059ae:	4621      	mov	r1, r4
 80059b0:	1a51      	subs	r1, r2, r1
 80059b2:	62b9      	str	r1, [r7, #40]	; 0x28
 80059b4:	4629      	mov	r1, r5
 80059b6:	eb63 0301 	sbc.w	r3, r3, r1
 80059ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059bc:	f04f 0200 	mov.w	r2, #0
 80059c0:	f04f 0300 	mov.w	r3, #0
 80059c4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80059c8:	4649      	mov	r1, r9
 80059ca:	018b      	lsls	r3, r1, #6
 80059cc:	4641      	mov	r1, r8
 80059ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059d2:	4641      	mov	r1, r8
 80059d4:	018a      	lsls	r2, r1, #6
 80059d6:	4641      	mov	r1, r8
 80059d8:	ebb2 0a01 	subs.w	sl, r2, r1
 80059dc:	4649      	mov	r1, r9
 80059de:	eb63 0b01 	sbc.w	fp, r3, r1
 80059e2:	f04f 0200 	mov.w	r2, #0
 80059e6:	f04f 0300 	mov.w	r3, #0
 80059ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059ee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059f6:	4692      	mov	sl, r2
 80059f8:	469b      	mov	fp, r3
 80059fa:	4623      	mov	r3, r4
 80059fc:	eb1a 0303 	adds.w	r3, sl, r3
 8005a00:	623b      	str	r3, [r7, #32]
 8005a02:	462b      	mov	r3, r5
 8005a04:	eb4b 0303 	adc.w	r3, fp, r3
 8005a08:	627b      	str	r3, [r7, #36]	; 0x24
 8005a0a:	f04f 0200 	mov.w	r2, #0
 8005a0e:	f04f 0300 	mov.w	r3, #0
 8005a12:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005a16:	4629      	mov	r1, r5
 8005a18:	028b      	lsls	r3, r1, #10
 8005a1a:	4621      	mov	r1, r4
 8005a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a20:	4621      	mov	r1, r4
 8005a22:	028a      	lsls	r2, r1, #10
 8005a24:	4610      	mov	r0, r2
 8005a26:	4619      	mov	r1, r3
 8005a28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	673b      	str	r3, [r7, #112]	; 0x70
 8005a30:	677a      	str	r2, [r7, #116]	; 0x74
 8005a32:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005a36:	f7fb f947 	bl	8000cc8 <__aeabi_uldivmod>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	4613      	mov	r3, r2
 8005a40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a44:	4b41      	ldr	r3, [pc, #260]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x354>)
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	0c1b      	lsrs	r3, r3, #16
 8005a4a:	f003 0303 	and.w	r3, r3, #3
 8005a4e:	3301      	adds	r3, #1
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005a56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005a66:	e0eb      	b.n	8005c40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a68:	4b38      	ldr	r3, [pc, #224]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x354>)
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a74:	4b35      	ldr	r3, [pc, #212]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x354>)
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d06b      	beq.n	8005b58 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a80:	4b32      	ldr	r3, [pc, #200]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x354>)
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	099b      	lsrs	r3, r3, #6
 8005a86:	2200      	movs	r2, #0
 8005a88:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a92:	663b      	str	r3, [r7, #96]	; 0x60
 8005a94:	2300      	movs	r3, #0
 8005a96:	667b      	str	r3, [r7, #100]	; 0x64
 8005a98:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005a9c:	4622      	mov	r2, r4
 8005a9e:	462b      	mov	r3, r5
 8005aa0:	f04f 0000 	mov.w	r0, #0
 8005aa4:	f04f 0100 	mov.w	r1, #0
 8005aa8:	0159      	lsls	r1, r3, #5
 8005aaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005aae:	0150      	lsls	r0, r2, #5
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4621      	mov	r1, r4
 8005ab6:	1a51      	subs	r1, r2, r1
 8005ab8:	61b9      	str	r1, [r7, #24]
 8005aba:	4629      	mov	r1, r5
 8005abc:	eb63 0301 	sbc.w	r3, r3, r1
 8005ac0:	61fb      	str	r3, [r7, #28]
 8005ac2:	f04f 0200 	mov.w	r2, #0
 8005ac6:	f04f 0300 	mov.w	r3, #0
 8005aca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005ace:	4659      	mov	r1, fp
 8005ad0:	018b      	lsls	r3, r1, #6
 8005ad2:	4651      	mov	r1, sl
 8005ad4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ad8:	4651      	mov	r1, sl
 8005ada:	018a      	lsls	r2, r1, #6
 8005adc:	4651      	mov	r1, sl
 8005ade:	ebb2 0801 	subs.w	r8, r2, r1
 8005ae2:	4659      	mov	r1, fp
 8005ae4:	eb63 0901 	sbc.w	r9, r3, r1
 8005ae8:	f04f 0200 	mov.w	r2, #0
 8005aec:	f04f 0300 	mov.w	r3, #0
 8005af0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005af4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005af8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005afc:	4690      	mov	r8, r2
 8005afe:	4699      	mov	r9, r3
 8005b00:	4623      	mov	r3, r4
 8005b02:	eb18 0303 	adds.w	r3, r8, r3
 8005b06:	613b      	str	r3, [r7, #16]
 8005b08:	462b      	mov	r3, r5
 8005b0a:	eb49 0303 	adc.w	r3, r9, r3
 8005b0e:	617b      	str	r3, [r7, #20]
 8005b10:	f04f 0200 	mov.w	r2, #0
 8005b14:	f04f 0300 	mov.w	r3, #0
 8005b18:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005b1c:	4629      	mov	r1, r5
 8005b1e:	024b      	lsls	r3, r1, #9
 8005b20:	4621      	mov	r1, r4
 8005b22:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b26:	4621      	mov	r1, r4
 8005b28:	024a      	lsls	r2, r1, #9
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b32:	2200      	movs	r2, #0
 8005b34:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b36:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005b38:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b3c:	f7fb f8c4 	bl	8000cc8 <__aeabi_uldivmod>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4613      	mov	r3, r2
 8005b46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b4a:	e065      	b.n	8005c18 <HAL_RCC_GetSysClockFreq+0x420>
 8005b4c:	40023800 	.word	0x40023800
 8005b50:	00f42400 	.word	0x00f42400
 8005b54:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b58:	4b3d      	ldr	r3, [pc, #244]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x458>)
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	099b      	lsrs	r3, r3, #6
 8005b5e:	2200      	movs	r2, #0
 8005b60:	4618      	mov	r0, r3
 8005b62:	4611      	mov	r1, r2
 8005b64:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b68:	653b      	str	r3, [r7, #80]	; 0x50
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	657b      	str	r3, [r7, #84]	; 0x54
 8005b6e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005b72:	4642      	mov	r2, r8
 8005b74:	464b      	mov	r3, r9
 8005b76:	f04f 0000 	mov.w	r0, #0
 8005b7a:	f04f 0100 	mov.w	r1, #0
 8005b7e:	0159      	lsls	r1, r3, #5
 8005b80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b84:	0150      	lsls	r0, r2, #5
 8005b86:	4602      	mov	r2, r0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	4641      	mov	r1, r8
 8005b8c:	1a51      	subs	r1, r2, r1
 8005b8e:	60b9      	str	r1, [r7, #8]
 8005b90:	4649      	mov	r1, r9
 8005b92:	eb63 0301 	sbc.w	r3, r3, r1
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	f04f 0200 	mov.w	r2, #0
 8005b9c:	f04f 0300 	mov.w	r3, #0
 8005ba0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005ba4:	4659      	mov	r1, fp
 8005ba6:	018b      	lsls	r3, r1, #6
 8005ba8:	4651      	mov	r1, sl
 8005baa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005bae:	4651      	mov	r1, sl
 8005bb0:	018a      	lsls	r2, r1, #6
 8005bb2:	4651      	mov	r1, sl
 8005bb4:	1a54      	subs	r4, r2, r1
 8005bb6:	4659      	mov	r1, fp
 8005bb8:	eb63 0501 	sbc.w	r5, r3, r1
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	f04f 0300 	mov.w	r3, #0
 8005bc4:	00eb      	lsls	r3, r5, #3
 8005bc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bca:	00e2      	lsls	r2, r4, #3
 8005bcc:	4614      	mov	r4, r2
 8005bce:	461d      	mov	r5, r3
 8005bd0:	4643      	mov	r3, r8
 8005bd2:	18e3      	adds	r3, r4, r3
 8005bd4:	603b      	str	r3, [r7, #0]
 8005bd6:	464b      	mov	r3, r9
 8005bd8:	eb45 0303 	adc.w	r3, r5, r3
 8005bdc:	607b      	str	r3, [r7, #4]
 8005bde:	f04f 0200 	mov.w	r2, #0
 8005be2:	f04f 0300 	mov.w	r3, #0
 8005be6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bea:	4629      	mov	r1, r5
 8005bec:	028b      	lsls	r3, r1, #10
 8005bee:	4621      	mov	r1, r4
 8005bf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	028a      	lsls	r2, r1, #10
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c00:	2200      	movs	r2, #0
 8005c02:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c04:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005c06:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c0a:	f7fb f85d 	bl	8000cc8 <__aeabi_uldivmod>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	460b      	mov	r3, r1
 8005c12:	4613      	mov	r3, r2
 8005c14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005c18:	4b0d      	ldr	r3, [pc, #52]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x458>)
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	0f1b      	lsrs	r3, r3, #28
 8005c1e:	f003 0307 	and.w	r3, r3, #7
 8005c22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005c26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005c36:	e003      	b.n	8005c40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c38:	4b06      	ldr	r3, [pc, #24]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005c3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005c3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	37b8      	adds	r7, #184	; 0xb8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c4e:	bf00      	nop
 8005c50:	40023800 	.word	0x40023800
 8005c54:	00f42400 	.word	0x00f42400

08005c58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e28d      	b.n	8006186 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f000 8083 	beq.w	8005d7e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005c78:	4b94      	ldr	r3, [pc, #592]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f003 030c 	and.w	r3, r3, #12
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	d019      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c84:	4b91      	ldr	r3, [pc, #580]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d106      	bne.n	8005c9e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c90:	4b8e      	ldr	r3, [pc, #568]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c9c:	d00c      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c9e:	4b8b      	ldr	r3, [pc, #556]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005ca6:	2b0c      	cmp	r3, #12
 8005ca8:	d112      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005caa:	4b88      	ldr	r3, [pc, #544]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cb6:	d10b      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cb8:	4b84      	ldr	r3, [pc, #528]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d05b      	beq.n	8005d7c <HAL_RCC_OscConfig+0x124>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d157      	bne.n	8005d7c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e25a      	b.n	8006186 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cd8:	d106      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x90>
 8005cda:	4b7c      	ldr	r3, [pc, #496]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a7b      	ldr	r2, [pc, #492]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	e01d      	b.n	8005d24 <HAL_RCC_OscConfig+0xcc>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cf0:	d10c      	bne.n	8005d0c <HAL_RCC_OscConfig+0xb4>
 8005cf2:	4b76      	ldr	r3, [pc, #472]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a75      	ldr	r2, [pc, #468]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	4b73      	ldr	r3, [pc, #460]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a72      	ldr	r2, [pc, #456]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d08:	6013      	str	r3, [r2, #0]
 8005d0a:	e00b      	b.n	8005d24 <HAL_RCC_OscConfig+0xcc>
 8005d0c:	4b6f      	ldr	r3, [pc, #444]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a6e      	ldr	r2, [pc, #440]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	4b6c      	ldr	r3, [pc, #432]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a6b      	ldr	r2, [pc, #428]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d013      	beq.n	8005d54 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d2c:	f7fe fbd2 	bl	80044d4 <HAL_GetTick>
 8005d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d32:	e008      	b.n	8005d46 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d34:	f7fe fbce 	bl	80044d4 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b64      	cmp	r3, #100	; 0x64
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e21f      	b.n	8006186 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d46:	4b61      	ldr	r3, [pc, #388]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d0f0      	beq.n	8005d34 <HAL_RCC_OscConfig+0xdc>
 8005d52:	e014      	b.n	8005d7e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d54:	f7fe fbbe 	bl	80044d4 <HAL_GetTick>
 8005d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d5a:	e008      	b.n	8005d6e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d5c:	f7fe fbba 	bl	80044d4 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b64      	cmp	r3, #100	; 0x64
 8005d68:	d901      	bls.n	8005d6e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e20b      	b.n	8006186 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d6e:	4b57      	ldr	r3, [pc, #348]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1f0      	bne.n	8005d5c <HAL_RCC_OscConfig+0x104>
 8005d7a:	e000      	b.n	8005d7e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d06f      	beq.n	8005e6a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d8a:	4b50      	ldr	r3, [pc, #320]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f003 030c 	and.w	r3, r3, #12
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d017      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d96:	4b4d      	ldr	r3, [pc, #308]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d9e:	2b08      	cmp	r3, #8
 8005da0:	d105      	bne.n	8005dae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005da2:	4b4a      	ldr	r3, [pc, #296]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00b      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dae:	4b47      	ldr	r3, [pc, #284]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005db6:	2b0c      	cmp	r3, #12
 8005db8:	d11c      	bne.n	8005df4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dba:	4b44      	ldr	r3, [pc, #272]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d116      	bne.n	8005df4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dc6:	4b41      	ldr	r3, [pc, #260]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d005      	beq.n	8005dde <HAL_RCC_OscConfig+0x186>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d001      	beq.n	8005dde <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e1d3      	b.n	8006186 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dde:	4b3b      	ldr	r3, [pc, #236]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	00db      	lsls	r3, r3, #3
 8005dec:	4937      	ldr	r1, [pc, #220]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005df2:	e03a      	b.n	8005e6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d020      	beq.n	8005e3e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dfc:	4b34      	ldr	r3, [pc, #208]	; (8005ed0 <HAL_RCC_OscConfig+0x278>)
 8005dfe:	2201      	movs	r2, #1
 8005e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e02:	f7fe fb67 	bl	80044d4 <HAL_GetTick>
 8005e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e08:	e008      	b.n	8005e1c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e0a:	f7fe fb63 	bl	80044d4 <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d901      	bls.n	8005e1c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e1b4      	b.n	8006186 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e1c:	4b2b      	ldr	r3, [pc, #172]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d0f0      	beq.n	8005e0a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e28:	4b28      	ldr	r3, [pc, #160]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	4925      	ldr	r1, [pc, #148]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	600b      	str	r3, [r1, #0]
 8005e3c:	e015      	b.n	8005e6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e3e:	4b24      	ldr	r3, [pc, #144]	; (8005ed0 <HAL_RCC_OscConfig+0x278>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e44:	f7fe fb46 	bl	80044d4 <HAL_GetTick>
 8005e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e4a:	e008      	b.n	8005e5e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e4c:	f7fe fb42 	bl	80044d4 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e193      	b.n	8006186 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e5e:	4b1b      	ldr	r3, [pc, #108]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1f0      	bne.n	8005e4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0308 	and.w	r3, r3, #8
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d036      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d016      	beq.n	8005eac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e7e:	4b15      	ldr	r3, [pc, #84]	; (8005ed4 <HAL_RCC_OscConfig+0x27c>)
 8005e80:	2201      	movs	r2, #1
 8005e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e84:	f7fe fb26 	bl	80044d4 <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e8a:	e008      	b.n	8005e9e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e8c:	f7fe fb22 	bl	80044d4 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e173      	b.n	8006186 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e9e:	4b0b      	ldr	r3, [pc, #44]	; (8005ecc <HAL_RCC_OscConfig+0x274>)
 8005ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d0f0      	beq.n	8005e8c <HAL_RCC_OscConfig+0x234>
 8005eaa:	e01b      	b.n	8005ee4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005eac:	4b09      	ldr	r3, [pc, #36]	; (8005ed4 <HAL_RCC_OscConfig+0x27c>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb2:	f7fe fb0f 	bl	80044d4 <HAL_GetTick>
 8005eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eb8:	e00e      	b.n	8005ed8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005eba:	f7fe fb0b 	bl	80044d4 <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d907      	bls.n	8005ed8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e15c      	b.n	8006186 <HAL_RCC_OscConfig+0x52e>
 8005ecc:	40023800 	.word	0x40023800
 8005ed0:	42470000 	.word	0x42470000
 8005ed4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ed8:	4b8a      	ldr	r3, [pc, #552]	; (8006104 <HAL_RCC_OscConfig+0x4ac>)
 8005eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1ea      	bne.n	8005eba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 8097 	beq.w	8006020 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ef6:	4b83      	ldr	r3, [pc, #524]	; (8006104 <HAL_RCC_OscConfig+0x4ac>)
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10f      	bne.n	8005f22 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f02:	2300      	movs	r3, #0
 8005f04:	60bb      	str	r3, [r7, #8]
 8005f06:	4b7f      	ldr	r3, [pc, #508]	; (8006104 <HAL_RCC_OscConfig+0x4ac>)
 8005f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0a:	4a7e      	ldr	r2, [pc, #504]	; (8006104 <HAL_RCC_OscConfig+0x4ac>)
 8005f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f10:	6413      	str	r3, [r2, #64]	; 0x40
 8005f12:	4b7c      	ldr	r3, [pc, #496]	; (8006104 <HAL_RCC_OscConfig+0x4ac>)
 8005f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f1a:	60bb      	str	r3, [r7, #8]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f22:	4b79      	ldr	r3, [pc, #484]	; (8006108 <HAL_RCC_OscConfig+0x4b0>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d118      	bne.n	8005f60 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f2e:	4b76      	ldr	r3, [pc, #472]	; (8006108 <HAL_RCC_OscConfig+0x4b0>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a75      	ldr	r2, [pc, #468]	; (8006108 <HAL_RCC_OscConfig+0x4b0>)
 8005f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f3a:	f7fe facb 	bl	80044d4 <HAL_GetTick>
 8005f3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f40:	e008      	b.n	8005f54 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f42:	f7fe fac7 	bl	80044d4 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e118      	b.n	8006186 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f54:	4b6c      	ldr	r3, [pc, #432]	; (8006108 <HAL_RCC_OscConfig+0x4b0>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0f0      	beq.n	8005f42 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d106      	bne.n	8005f76 <HAL_RCC_OscConfig+0x31e>
 8005f68:	4b66      	ldr	r3, [pc, #408]	; (8006104 <HAL_RCC_OscConfig+0x4ac>)
 8005f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6c:	4a65      	ldr	r2, [pc, #404]	; (8006104 <HAL_RCC_OscConfig+0x4ac>)
 8005f6e:	f043 0301 	orr.w	r3, r3, #1
 8005f72:	6713      	str	r3, [r2, #112]	; 0x70
 8005f74:	e01c      	b.n	8005fb0 <HAL_RCC_OscConfig+0x358>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	2b05      	cmp	r3, #5
 8005f7c:	d10c      	bne.n	8005f98 <HAL_RCC_OscConfig+0x340>
 8005f7e:	4b61      	ldr	r3, [pc, #388]	; (8006104 <HAL_RCC_OscConfig+0x4ac>)
 8005f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f82:	4a60      	ldr	r2, [pc, #384]	; (8006104 <HAL_RCC_OscConfig+0x4ac>)
 8005f84:	f043 0304 	orr.w	r3, r3, #4
 8005f88:	6713      	str	r3, [r2, #112]	; 0x70
 8005f8a:	4b5e      	ldr	r3, [pc, #376]	; (8006104 <HAL_RCC_OscConfig+0x4ac>)
 8005f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8e:	4a5d      	ldr	r2, [pc, #372]	; (8006104 <HAL_RCC_OscConfig+0x4ac>)
 8005f90:	f043 0301 	orr.w	r3, r3, #1
 8005f94:	6713      	str	r3, [r2, #112]	; 0x70
 8005f96:	e00b      	b.n	8005fb0 <HAL_RCC_OscConfig+0x358>
 8005f98:	4b5a      	ldr	r3, [pc, #360]	; (8006104 <HAL_RCC_OscConfig+0x4ac>)
 8005f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9c:	4a59      	ldr	r2, [pc, #356]	; (8006104 <HAL_RCC_OscConfig+0x4ac>)
 8005f9e:	f023 0301 	bic.w	r3, r3, #1
 8005fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8005fa4:	4b57      	ldr	r3, [pc, #348]	; (8006104 <HAL_RCC_OscConfig+0x4ac>)
 8005fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa8:	4a56      	ldr	r2, [pc, #344]	; (8006104 <HAL_RCC_OscConfig+0x4ac>)
 8005faa:	f023 0304 	bic.w	r3, r3, #4
 8005fae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d015      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb8:	f7fe fa8c 	bl	80044d4 <HAL_GetTick>
 8005fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fbe:	e00a      	b.n	8005fd6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fc0:	f7fe fa88 	bl	80044d4 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e0d7      	b.n	8006186 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fd6:	4b4b      	ldr	r3, [pc, #300]	; (8006104 <HAL_RCC_OscConfig+0x4ac>)
 8005fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0ee      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x368>
 8005fe2:	e014      	b.n	800600e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe4:	f7fe fa76 	bl	80044d4 <HAL_GetTick>
 8005fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fea:	e00a      	b.n	8006002 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fec:	f7fe fa72 	bl	80044d4 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e0c1      	b.n	8006186 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006002:	4b40      	ldr	r3, [pc, #256]	; (8006104 <HAL_RCC_OscConfig+0x4ac>)
 8006004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1ee      	bne.n	8005fec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800600e:	7dfb      	ldrb	r3, [r7, #23]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d105      	bne.n	8006020 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006014:	4b3b      	ldr	r3, [pc, #236]	; (8006104 <HAL_RCC_OscConfig+0x4ac>)
 8006016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006018:	4a3a      	ldr	r2, [pc, #232]	; (8006104 <HAL_RCC_OscConfig+0x4ac>)
 800601a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800601e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 80ad 	beq.w	8006184 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800602a:	4b36      	ldr	r3, [pc, #216]	; (8006104 <HAL_RCC_OscConfig+0x4ac>)
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f003 030c 	and.w	r3, r3, #12
 8006032:	2b08      	cmp	r3, #8
 8006034:	d060      	beq.n	80060f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	2b02      	cmp	r3, #2
 800603c:	d145      	bne.n	80060ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800603e:	4b33      	ldr	r3, [pc, #204]	; (800610c <HAL_RCC_OscConfig+0x4b4>)
 8006040:	2200      	movs	r2, #0
 8006042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006044:	f7fe fa46 	bl	80044d4 <HAL_GetTick>
 8006048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800604a:	e008      	b.n	800605e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800604c:	f7fe fa42 	bl	80044d4 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b02      	cmp	r3, #2
 8006058:	d901      	bls.n	800605e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e093      	b.n	8006186 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800605e:	4b29      	ldr	r3, [pc, #164]	; (8006104 <HAL_RCC_OscConfig+0x4ac>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1f0      	bne.n	800604c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	69da      	ldr	r2, [r3, #28]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	431a      	orrs	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006078:	019b      	lsls	r3, r3, #6
 800607a:	431a      	orrs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006080:	085b      	lsrs	r3, r3, #1
 8006082:	3b01      	subs	r3, #1
 8006084:	041b      	lsls	r3, r3, #16
 8006086:	431a      	orrs	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608c:	061b      	lsls	r3, r3, #24
 800608e:	431a      	orrs	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006094:	071b      	lsls	r3, r3, #28
 8006096:	491b      	ldr	r1, [pc, #108]	; (8006104 <HAL_RCC_OscConfig+0x4ac>)
 8006098:	4313      	orrs	r3, r2
 800609a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800609c:	4b1b      	ldr	r3, [pc, #108]	; (800610c <HAL_RCC_OscConfig+0x4b4>)
 800609e:	2201      	movs	r2, #1
 80060a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a2:	f7fe fa17 	bl	80044d4 <HAL_GetTick>
 80060a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060a8:	e008      	b.n	80060bc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060aa:	f7fe fa13 	bl	80044d4 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d901      	bls.n	80060bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e064      	b.n	8006186 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060bc:	4b11      	ldr	r3, [pc, #68]	; (8006104 <HAL_RCC_OscConfig+0x4ac>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d0f0      	beq.n	80060aa <HAL_RCC_OscConfig+0x452>
 80060c8:	e05c      	b.n	8006184 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ca:	4b10      	ldr	r3, [pc, #64]	; (800610c <HAL_RCC_OscConfig+0x4b4>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d0:	f7fe fa00 	bl	80044d4 <HAL_GetTick>
 80060d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060d6:	e008      	b.n	80060ea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060d8:	f7fe f9fc 	bl	80044d4 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e04d      	b.n	8006186 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ea:	4b06      	ldr	r3, [pc, #24]	; (8006104 <HAL_RCC_OscConfig+0x4ac>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1f0      	bne.n	80060d8 <HAL_RCC_OscConfig+0x480>
 80060f6:	e045      	b.n	8006184 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d107      	bne.n	8006110 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e040      	b.n	8006186 <HAL_RCC_OscConfig+0x52e>
 8006104:	40023800 	.word	0x40023800
 8006108:	40007000 	.word	0x40007000
 800610c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006110:	4b1f      	ldr	r3, [pc, #124]	; (8006190 <HAL_RCC_OscConfig+0x538>)
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d030      	beq.n	8006180 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006128:	429a      	cmp	r2, r3
 800612a:	d129      	bne.n	8006180 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006136:	429a      	cmp	r2, r3
 8006138:	d122      	bne.n	8006180 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006140:	4013      	ands	r3, r2
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006146:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006148:	4293      	cmp	r3, r2
 800614a:	d119      	bne.n	8006180 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006156:	085b      	lsrs	r3, r3, #1
 8006158:	3b01      	subs	r3, #1
 800615a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800615c:	429a      	cmp	r2, r3
 800615e:	d10f      	bne.n	8006180 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800616c:	429a      	cmp	r2, r3
 800616e:	d107      	bne.n	8006180 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800617c:	429a      	cmp	r2, r3
 800617e:	d001      	beq.n	8006184 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e000      	b.n	8006186 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3718      	adds	r7, #24
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	40023800 	.word	0x40023800

08006194 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e07b      	b.n	800629e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d108      	bne.n	80061c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061b6:	d009      	beq.n	80061cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	61da      	str	r2, [r3, #28]
 80061be:	e005      	b.n	80061cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d106      	bne.n	80061ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7fd ff2a 	bl	8004040 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006202:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006214:	431a      	orrs	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800621e:	431a      	orrs	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	431a      	orrs	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	431a      	orrs	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800623c:	431a      	orrs	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006250:	ea42 0103 	orr.w	r1, r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006258:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	0c1b      	lsrs	r3, r3, #16
 800626a:	f003 0104 	and.w	r1, r3, #4
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006272:	f003 0210 	and.w	r2, r3, #16
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69da      	ldr	r2, [r3, #28]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800628c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b088      	sub	sp, #32
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	60f8      	str	r0, [r7, #12]
 80062ae:	60b9      	str	r1, [r7, #8]
 80062b0:	603b      	str	r3, [r7, #0]
 80062b2:	4613      	mov	r3, r2
 80062b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062b6:	2300      	movs	r3, #0
 80062b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d101      	bne.n	80062c8 <HAL_SPI_Transmit+0x22>
 80062c4:	2302      	movs	r3, #2
 80062c6:	e126      	b.n	8006516 <HAL_SPI_Transmit+0x270>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062d0:	f7fe f900 	bl	80044d4 <HAL_GetTick>
 80062d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80062d6:	88fb      	ldrh	r3, [r7, #6]
 80062d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d002      	beq.n	80062ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80062e6:	2302      	movs	r3, #2
 80062e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062ea:	e10b      	b.n	8006504 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <HAL_SPI_Transmit+0x52>
 80062f2:	88fb      	ldrh	r3, [r7, #6]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d102      	bne.n	80062fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062fc:	e102      	b.n	8006504 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2203      	movs	r2, #3
 8006302:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	88fa      	ldrh	r2, [r7, #6]
 8006316:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	88fa      	ldrh	r2, [r7, #6]
 800631c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006344:	d10f      	bne.n	8006366 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006354:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006364:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006370:	2b40      	cmp	r3, #64	; 0x40
 8006372:	d007      	beq.n	8006384 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006382:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800638c:	d14b      	bne.n	8006426 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <HAL_SPI_Transmit+0xf6>
 8006396:	8afb      	ldrh	r3, [r7, #22]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d13e      	bne.n	800641a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a0:	881a      	ldrh	r2, [r3, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ac:	1c9a      	adds	r2, r3, #2
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	3b01      	subs	r3, #1
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80063c0:	e02b      	b.n	800641a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f003 0302 	and.w	r3, r3, #2
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d112      	bne.n	80063f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d4:	881a      	ldrh	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e0:	1c9a      	adds	r2, r3, #2
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	3b01      	subs	r3, #1
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80063f4:	e011      	b.n	800641a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063f6:	f7fe f86d 	bl	80044d4 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	429a      	cmp	r2, r3
 8006404:	d803      	bhi.n	800640e <HAL_SPI_Transmit+0x168>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800640c:	d102      	bne.n	8006414 <HAL_SPI_Transmit+0x16e>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d102      	bne.n	800641a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006418:	e074      	b.n	8006504 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800641e:	b29b      	uxth	r3, r3
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1ce      	bne.n	80063c2 <HAL_SPI_Transmit+0x11c>
 8006424:	e04c      	b.n	80064c0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d002      	beq.n	8006434 <HAL_SPI_Transmit+0x18e>
 800642e:	8afb      	ldrh	r3, [r7, #22]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d140      	bne.n	80064b6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	330c      	adds	r3, #12
 800643e:	7812      	ldrb	r2, [r2, #0]
 8006440:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006450:	b29b      	uxth	r3, r3
 8006452:	3b01      	subs	r3, #1
 8006454:	b29a      	uxth	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800645a:	e02c      	b.n	80064b6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b02      	cmp	r3, #2
 8006468:	d113      	bne.n	8006492 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	330c      	adds	r3, #12
 8006474:	7812      	ldrb	r2, [r2, #0]
 8006476:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647c:	1c5a      	adds	r2, r3, #1
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006486:	b29b      	uxth	r3, r3
 8006488:	3b01      	subs	r3, #1
 800648a:	b29a      	uxth	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006490:	e011      	b.n	80064b6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006492:	f7fe f81f 	bl	80044d4 <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	683a      	ldr	r2, [r7, #0]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d803      	bhi.n	80064aa <HAL_SPI_Transmit+0x204>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064a8:	d102      	bne.n	80064b0 <HAL_SPI_Transmit+0x20a>
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d102      	bne.n	80064b6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80064b4:	e026      	b.n	8006504 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1cd      	bne.n	800645c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 fbcb 	bl	8006c60 <SPI_EndRxTxTransaction>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2220      	movs	r2, #32
 80064d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10a      	bne.n	80064f4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064de:	2300      	movs	r3, #0
 80064e0:	613b      	str	r3, [r7, #16]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	613b      	str	r3, [r7, #16]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	613b      	str	r3, [r7, #16]
 80064f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	77fb      	strb	r3, [r7, #31]
 8006500:	e000      	b.n	8006504 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006502:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006514:	7ffb      	ldrb	r3, [r7, #31]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3720      	adds	r7, #32
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b088      	sub	sp, #32
 8006522:	af02      	add	r7, sp, #8
 8006524:	60f8      	str	r0, [r7, #12]
 8006526:	60b9      	str	r1, [r7, #8]
 8006528:	603b      	str	r3, [r7, #0]
 800652a:	4613      	mov	r3, r2
 800652c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800652e:	2300      	movs	r3, #0
 8006530:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800653a:	d112      	bne.n	8006562 <HAL_SPI_Receive+0x44>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10e      	bne.n	8006562 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2204      	movs	r2, #4
 8006548:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800654c:	88fa      	ldrh	r2, [r7, #6]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	4613      	mov	r3, r2
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	68b9      	ldr	r1, [r7, #8]
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f000 f8f1 	bl	8006740 <HAL_SPI_TransmitReceive>
 800655e:	4603      	mov	r3, r0
 8006560:	e0ea      	b.n	8006738 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006568:	2b01      	cmp	r3, #1
 800656a:	d101      	bne.n	8006570 <HAL_SPI_Receive+0x52>
 800656c:	2302      	movs	r3, #2
 800656e:	e0e3      	b.n	8006738 <HAL_SPI_Receive+0x21a>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006578:	f7fd ffac 	bl	80044d4 <HAL_GetTick>
 800657c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b01      	cmp	r3, #1
 8006588:	d002      	beq.n	8006590 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800658a:	2302      	movs	r3, #2
 800658c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800658e:	e0ca      	b.n	8006726 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <HAL_SPI_Receive+0x7e>
 8006596:	88fb      	ldrh	r3, [r7, #6]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d102      	bne.n	80065a2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80065a0:	e0c1      	b.n	8006726 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2204      	movs	r2, #4
 80065a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	88fa      	ldrh	r2, [r7, #6]
 80065ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	88fa      	ldrh	r2, [r7, #6]
 80065c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065e8:	d10f      	bne.n	800660a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006608:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006614:	2b40      	cmp	r3, #64	; 0x40
 8006616:	d007      	beq.n	8006628 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006626:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d162      	bne.n	80066f6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006630:	e02e      	b.n	8006690 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b01      	cmp	r3, #1
 800663e:	d115      	bne.n	800666c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f103 020c 	add.w	r2, r3, #12
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664c:	7812      	ldrb	r2, [r2, #0]
 800664e:	b2d2      	uxtb	r2, r2
 8006650:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006656:	1c5a      	adds	r2, r3, #1
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006660:	b29b      	uxth	r3, r3
 8006662:	3b01      	subs	r3, #1
 8006664:	b29a      	uxth	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	87da      	strh	r2, [r3, #62]	; 0x3e
 800666a:	e011      	b.n	8006690 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800666c:	f7fd ff32 	bl	80044d4 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	429a      	cmp	r2, r3
 800667a:	d803      	bhi.n	8006684 <HAL_SPI_Receive+0x166>
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006682:	d102      	bne.n	800668a <HAL_SPI_Receive+0x16c>
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d102      	bne.n	8006690 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800668e:	e04a      	b.n	8006726 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006694:	b29b      	uxth	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1cb      	bne.n	8006632 <HAL_SPI_Receive+0x114>
 800669a:	e031      	b.n	8006700 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d113      	bne.n	80066d2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68da      	ldr	r2, [r3, #12]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b4:	b292      	uxth	r2, r2
 80066b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066bc:	1c9a      	adds	r2, r3, #2
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	3b01      	subs	r3, #1
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066d0:	e011      	b.n	80066f6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066d2:	f7fd feff 	bl	80044d4 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d803      	bhi.n	80066ea <HAL_SPI_Receive+0x1cc>
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066e8:	d102      	bne.n	80066f0 <HAL_SPI_Receive+0x1d2>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d102      	bne.n	80066f6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80066f4:	e017      	b.n	8006726 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1cd      	bne.n	800669c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	6839      	ldr	r1, [r7, #0]
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 fa45 	bl	8006b94 <SPI_EndRxTransaction>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d002      	beq.n	8006716 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2220      	movs	r2, #32
 8006714:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671a:	2b00      	cmp	r3, #0
 800671c:	d002      	beq.n	8006724 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	75fb      	strb	r3, [r7, #23]
 8006722:	e000      	b.n	8006726 <HAL_SPI_Receive+0x208>
  }

error :
 8006724:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006736:	7dfb      	ldrb	r3, [r7, #23]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3718      	adds	r7, #24
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b08c      	sub	sp, #48	; 0x30
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
 800674c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800674e:	2301      	movs	r3, #1
 8006750:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006752:	2300      	movs	r3, #0
 8006754:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800675e:	2b01      	cmp	r3, #1
 8006760:	d101      	bne.n	8006766 <HAL_SPI_TransmitReceive+0x26>
 8006762:	2302      	movs	r3, #2
 8006764:	e18a      	b.n	8006a7c <HAL_SPI_TransmitReceive+0x33c>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800676e:	f7fd feb1 	bl	80044d4 <HAL_GetTick>
 8006772:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800677a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006784:	887b      	ldrh	r3, [r7, #2]
 8006786:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006788:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800678c:	2b01      	cmp	r3, #1
 800678e:	d00f      	beq.n	80067b0 <HAL_SPI_TransmitReceive+0x70>
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006796:	d107      	bne.n	80067a8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d103      	bne.n	80067a8 <HAL_SPI_TransmitReceive+0x68>
 80067a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067a4:	2b04      	cmp	r3, #4
 80067a6:	d003      	beq.n	80067b0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80067a8:	2302      	movs	r3, #2
 80067aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80067ae:	e15b      	b.n	8006a68 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d005      	beq.n	80067c2 <HAL_SPI_TransmitReceive+0x82>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <HAL_SPI_TransmitReceive+0x82>
 80067bc:	887b      	ldrh	r3, [r7, #2]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d103      	bne.n	80067ca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80067c8:	e14e      	b.n	8006a68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	d003      	beq.n	80067de <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2205      	movs	r2, #5
 80067da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	887a      	ldrh	r2, [r7, #2]
 80067ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	887a      	ldrh	r2, [r7, #2]
 80067f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	887a      	ldrh	r2, [r7, #2]
 8006800:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	887a      	ldrh	r2, [r7, #2]
 8006806:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681e:	2b40      	cmp	r3, #64	; 0x40
 8006820:	d007      	beq.n	8006832 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006830:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800683a:	d178      	bne.n	800692e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d002      	beq.n	800684a <HAL_SPI_TransmitReceive+0x10a>
 8006844:	8b7b      	ldrh	r3, [r7, #26]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d166      	bne.n	8006918 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684e:	881a      	ldrh	r2, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685a:	1c9a      	adds	r2, r3, #2
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006864:	b29b      	uxth	r3, r3
 8006866:	3b01      	subs	r3, #1
 8006868:	b29a      	uxth	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800686e:	e053      	b.n	8006918 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b02      	cmp	r3, #2
 800687c:	d11b      	bne.n	80068b6 <HAL_SPI_TransmitReceive+0x176>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006882:	b29b      	uxth	r3, r3
 8006884:	2b00      	cmp	r3, #0
 8006886:	d016      	beq.n	80068b6 <HAL_SPI_TransmitReceive+0x176>
 8006888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688a:	2b01      	cmp	r3, #1
 800688c:	d113      	bne.n	80068b6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006892:	881a      	ldrh	r2, [r3, #0]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689e:	1c9a      	adds	r2, r3, #2
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	3b01      	subs	r3, #1
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d119      	bne.n	80068f8 <HAL_SPI_TransmitReceive+0x1b8>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d014      	beq.n	80068f8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68da      	ldr	r2, [r3, #12]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d8:	b292      	uxth	r2, r2
 80068da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e0:	1c9a      	adds	r2, r3, #2
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	3b01      	subs	r3, #1
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068f4:	2301      	movs	r3, #1
 80068f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80068f8:	f7fd fdec 	bl	80044d4 <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006904:	429a      	cmp	r2, r3
 8006906:	d807      	bhi.n	8006918 <HAL_SPI_TransmitReceive+0x1d8>
 8006908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800690e:	d003      	beq.n	8006918 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006916:	e0a7      	b.n	8006a68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800691c:	b29b      	uxth	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1a6      	bne.n	8006870 <HAL_SPI_TransmitReceive+0x130>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006926:	b29b      	uxth	r3, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1a1      	bne.n	8006870 <HAL_SPI_TransmitReceive+0x130>
 800692c:	e07c      	b.n	8006a28 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d002      	beq.n	800693c <HAL_SPI_TransmitReceive+0x1fc>
 8006936:	8b7b      	ldrh	r3, [r7, #26]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d16b      	bne.n	8006a14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	330c      	adds	r3, #12
 8006946:	7812      	ldrb	r2, [r2, #0]
 8006948:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694e:	1c5a      	adds	r2, r3, #1
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006958:	b29b      	uxth	r3, r3
 800695a:	3b01      	subs	r3, #1
 800695c:	b29a      	uxth	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006962:	e057      	b.n	8006a14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	2b02      	cmp	r3, #2
 8006970:	d11c      	bne.n	80069ac <HAL_SPI_TransmitReceive+0x26c>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006976:	b29b      	uxth	r3, r3
 8006978:	2b00      	cmp	r3, #0
 800697a:	d017      	beq.n	80069ac <HAL_SPI_TransmitReceive+0x26c>
 800697c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697e:	2b01      	cmp	r3, #1
 8006980:	d114      	bne.n	80069ac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	330c      	adds	r3, #12
 800698c:	7812      	ldrb	r2, [r2, #0]
 800698e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800699e:	b29b      	uxth	r3, r3
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d119      	bne.n	80069ee <HAL_SPI_TransmitReceive+0x2ae>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069be:	b29b      	uxth	r3, r3
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d014      	beq.n	80069ee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68da      	ldr	r2, [r3, #12]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ce:	b2d2      	uxtb	r2, r2
 80069d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	3b01      	subs	r3, #1
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069ea:	2301      	movs	r3, #1
 80069ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80069ee:	f7fd fd71 	bl	80044d4 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d803      	bhi.n	8006a06 <HAL_SPI_TransmitReceive+0x2c6>
 80069fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a04:	d102      	bne.n	8006a0c <HAL_SPI_TransmitReceive+0x2cc>
 8006a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d103      	bne.n	8006a14 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006a12:	e029      	b.n	8006a68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1a2      	bne.n	8006964 <HAL_SPI_TransmitReceive+0x224>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d19d      	bne.n	8006964 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 f917 	bl	8006c60 <SPI_EndRxTxTransaction>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d006      	beq.n	8006a46 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2220      	movs	r2, #32
 8006a42:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006a44:	e010      	b.n	8006a68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10b      	bne.n	8006a66 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a4e:	2300      	movs	r3, #0
 8006a50:	617b      	str	r3, [r7, #20]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	617b      	str	r3, [r7, #20]
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	e000      	b.n	8006a68 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006a66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3730      	adds	r7, #48	; 0x30
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b088      	sub	sp, #32
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	603b      	str	r3, [r7, #0]
 8006a90:	4613      	mov	r3, r2
 8006a92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a94:	f7fd fd1e 	bl	80044d4 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9c:	1a9b      	subs	r3, r3, r2
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006aa4:	f7fd fd16 	bl	80044d4 <HAL_GetTick>
 8006aa8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006aaa:	4b39      	ldr	r3, [pc, #228]	; (8006b90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	015b      	lsls	r3, r3, #5
 8006ab0:	0d1b      	lsrs	r3, r3, #20
 8006ab2:	69fa      	ldr	r2, [r7, #28]
 8006ab4:	fb02 f303 	mul.w	r3, r2, r3
 8006ab8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006aba:	e054      	b.n	8006b66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ac2:	d050      	beq.n	8006b66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ac4:	f7fd fd06 	bl	80044d4 <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	69fa      	ldr	r2, [r7, #28]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d902      	bls.n	8006ada <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d13d      	bne.n	8006b56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ae8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006af2:	d111      	bne.n	8006b18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006afc:	d004      	beq.n	8006b08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b06:	d107      	bne.n	8006b18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b20:	d10f      	bne.n	8006b42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e017      	b.n	8006b86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d101      	bne.n	8006b60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	3b01      	subs	r3, #1
 8006b64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689a      	ldr	r2, [r3, #8]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	4013      	ands	r3, r2
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	bf0c      	ite	eq
 8006b76:	2301      	moveq	r3, #1
 8006b78:	2300      	movne	r3, #0
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	79fb      	ldrb	r3, [r7, #7]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d19b      	bne.n	8006abc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3720      	adds	r7, #32
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	200023c8 	.word	0x200023c8

08006b94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af02      	add	r7, sp, #8
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ba8:	d111      	bne.n	8006bce <SPI_EndRxTransaction+0x3a>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bb2:	d004      	beq.n	8006bbe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bbc:	d107      	bne.n	8006bce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bcc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bd6:	d12a      	bne.n	8006c2e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006be0:	d012      	beq.n	8006c08 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	2200      	movs	r2, #0
 8006bea:	2180      	movs	r1, #128	; 0x80
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f7ff ff49 	bl	8006a84 <SPI_WaitFlagStateUntilTimeout>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d02d      	beq.n	8006c54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bfc:	f043 0220 	orr.w	r2, r3, #32
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e026      	b.n	8006c56 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	2101      	movs	r1, #1
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f7ff ff36 	bl	8006a84 <SPI_WaitFlagStateUntilTimeout>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d01a      	beq.n	8006c54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c22:	f043 0220 	orr.w	r2, r3, #32
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e013      	b.n	8006c56 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2200      	movs	r2, #0
 8006c36:	2101      	movs	r1, #1
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f7ff ff23 	bl	8006a84 <SPI_WaitFlagStateUntilTimeout>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d007      	beq.n	8006c54 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c48:	f043 0220 	orr.w	r2, r3, #32
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e000      	b.n	8006c56 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
	...

08006c60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b088      	sub	sp, #32
 8006c64:	af02      	add	r7, sp, #8
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006c6c:	4b1b      	ldr	r3, [pc, #108]	; (8006cdc <SPI_EndRxTxTransaction+0x7c>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a1b      	ldr	r2, [pc, #108]	; (8006ce0 <SPI_EndRxTxTransaction+0x80>)
 8006c72:	fba2 2303 	umull	r2, r3, r2, r3
 8006c76:	0d5b      	lsrs	r3, r3, #21
 8006c78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c7c:	fb02 f303 	mul.w	r3, r2, r3
 8006c80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c8a:	d112      	bne.n	8006cb2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	9300      	str	r3, [sp, #0]
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	2200      	movs	r2, #0
 8006c94:	2180      	movs	r1, #128	; 0x80
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f7ff fef4 	bl	8006a84 <SPI_WaitFlagStateUntilTimeout>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d016      	beq.n	8006cd0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca6:	f043 0220 	orr.w	r2, r3, #32
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e00f      	b.n	8006cd2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00a      	beq.n	8006cce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc8:	2b80      	cmp	r3, #128	; 0x80
 8006cca:	d0f2      	beq.n	8006cb2 <SPI_EndRxTxTransaction+0x52>
 8006ccc:	e000      	b.n	8006cd0 <SPI_EndRxTxTransaction+0x70>
        break;
 8006cce:	bf00      	nop
  }

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3718      	adds	r7, #24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	200023c8 	.word	0x200023c8
 8006ce0:	165e9f81 	.word	0x165e9f81

08006ce4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d101      	bne.n	8006cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e03f      	b.n	8006d76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d106      	bne.n	8006d10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7fd f9e0 	bl	80040d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2224      	movs	r2, #36	; 0x24
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68da      	ldr	r2, [r3, #12]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f929 	bl	8006f80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	691a      	ldr	r2, [r3, #16]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	695a      	ldr	r2, [r3, #20]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68da      	ldr	r2, [r3, #12]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2220      	movs	r2, #32
 8006d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b08a      	sub	sp, #40	; 0x28
 8006d82:	af02      	add	r7, sp, #8
 8006d84:	60f8      	str	r0, [r7, #12]
 8006d86:	60b9      	str	r1, [r7, #8]
 8006d88:	603b      	str	r3, [r7, #0]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b20      	cmp	r3, #32
 8006d9c:	d17c      	bne.n	8006e98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <HAL_UART_Transmit+0x2c>
 8006da4:	88fb      	ldrh	r3, [r7, #6]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e075      	b.n	8006e9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d101      	bne.n	8006dbc <HAL_UART_Transmit+0x3e>
 8006db8:	2302      	movs	r3, #2
 8006dba:	e06e      	b.n	8006e9a <HAL_UART_Transmit+0x11c>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2221      	movs	r2, #33	; 0x21
 8006dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006dd2:	f7fd fb7f 	bl	80044d4 <HAL_GetTick>
 8006dd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	88fa      	ldrh	r2, [r7, #6]
 8006ddc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	88fa      	ldrh	r2, [r7, #6]
 8006de2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dec:	d108      	bne.n	8006e00 <HAL_UART_Transmit+0x82>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d104      	bne.n	8006e00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006df6:	2300      	movs	r3, #0
 8006df8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	61bb      	str	r3, [r7, #24]
 8006dfe:	e003      	b.n	8006e08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e04:	2300      	movs	r3, #0
 8006e06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006e10:	e02a      	b.n	8006e68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	2180      	movs	r1, #128	; 0x80
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f000 f840 	bl	8006ea2 <UART_WaitOnFlagUntilTimeout>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d001      	beq.n	8006e2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e036      	b.n	8006e9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10b      	bne.n	8006e4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	881b      	ldrh	r3, [r3, #0]
 8006e36:	461a      	mov	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	3302      	adds	r3, #2
 8006e46:	61bb      	str	r3, [r7, #24]
 8006e48:	e007      	b.n	8006e5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	781a      	ldrb	r2, [r3, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	3301      	adds	r3, #1
 8006e58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	3b01      	subs	r3, #1
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1cf      	bne.n	8006e12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	2140      	movs	r1, #64	; 0x40
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f000 f810 	bl	8006ea2 <UART_WaitOnFlagUntilTimeout>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d001      	beq.n	8006e8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e006      	b.n	8006e9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2220      	movs	r2, #32
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006e94:	2300      	movs	r3, #0
 8006e96:	e000      	b.n	8006e9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006e98:	2302      	movs	r3, #2
  }
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3720      	adds	r7, #32
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b090      	sub	sp, #64	; 0x40
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	60f8      	str	r0, [r7, #12]
 8006eaa:	60b9      	str	r1, [r7, #8]
 8006eac:	603b      	str	r3, [r7, #0]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eb2:	e050      	b.n	8006f56 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eba:	d04c      	beq.n	8006f56 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006ebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d007      	beq.n	8006ed2 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ec2:	f7fd fb07 	bl	80044d4 <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d241      	bcs.n	8006f56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	330c      	adds	r3, #12
 8006ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	330c      	adds	r3, #12
 8006ef0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ef2:	637a      	str	r2, [r7, #52]	; 0x34
 8006ef4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ef8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006efa:	e841 2300 	strex	r3, r2, [r1]
 8006efe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1e5      	bne.n	8006ed2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3314      	adds	r3, #20
 8006f0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	e853 3f00 	ldrex	r3, [r3]
 8006f14:	613b      	str	r3, [r7, #16]
   return(result);
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	f023 0301 	bic.w	r3, r3, #1
 8006f1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	3314      	adds	r3, #20
 8006f24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f26:	623a      	str	r2, [r7, #32]
 8006f28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2a:	69f9      	ldr	r1, [r7, #28]
 8006f2c:	6a3a      	ldr	r2, [r7, #32]
 8006f2e:	e841 2300 	strex	r3, r2, [r1]
 8006f32:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1e5      	bne.n	8006f06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2220      	movs	r2, #32
 8006f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e00f      	b.n	8006f76 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	4013      	ands	r3, r2
 8006f60:	68ba      	ldr	r2, [r7, #8]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	bf0c      	ite	eq
 8006f66:	2301      	moveq	r3, #1
 8006f68:	2300      	movne	r3, #0
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	79fb      	ldrb	r3, [r7, #7]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d09f      	beq.n	8006eb4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3740      	adds	r7, #64	; 0x40
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
	...

08006f80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f84:	b0c0      	sub	sp, #256	; 0x100
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f9c:	68d9      	ldr	r1, [r3, #12]
 8006f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	ea40 0301 	orr.w	r3, r0, r1
 8006fa8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006fd8:	f021 010c 	bic.w	r1, r1, #12
 8006fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006fe6:	430b      	orrs	r3, r1
 8006fe8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ffa:	6999      	ldr	r1, [r3, #24]
 8006ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	ea40 0301 	orr.w	r3, r0, r1
 8007006:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	4b8f      	ldr	r3, [pc, #572]	; (800724c <UART_SetConfig+0x2cc>)
 8007010:	429a      	cmp	r2, r3
 8007012:	d005      	beq.n	8007020 <UART_SetConfig+0xa0>
 8007014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	4b8d      	ldr	r3, [pc, #564]	; (8007250 <UART_SetConfig+0x2d0>)
 800701c:	429a      	cmp	r2, r3
 800701e:	d104      	bne.n	800702a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007020:	f7fe fbd6 	bl	80057d0 <HAL_RCC_GetPCLK2Freq>
 8007024:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007028:	e003      	b.n	8007032 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800702a:	f7fe fbbd 	bl	80057a8 <HAL_RCC_GetPCLK1Freq>
 800702e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007036:	69db      	ldr	r3, [r3, #28]
 8007038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800703c:	f040 810c 	bne.w	8007258 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007044:	2200      	movs	r2, #0
 8007046:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800704a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800704e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007052:	4622      	mov	r2, r4
 8007054:	462b      	mov	r3, r5
 8007056:	1891      	adds	r1, r2, r2
 8007058:	65b9      	str	r1, [r7, #88]	; 0x58
 800705a:	415b      	adcs	r3, r3
 800705c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800705e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007062:	4621      	mov	r1, r4
 8007064:	eb12 0801 	adds.w	r8, r2, r1
 8007068:	4629      	mov	r1, r5
 800706a:	eb43 0901 	adc.w	r9, r3, r1
 800706e:	f04f 0200 	mov.w	r2, #0
 8007072:	f04f 0300 	mov.w	r3, #0
 8007076:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800707a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800707e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007082:	4690      	mov	r8, r2
 8007084:	4699      	mov	r9, r3
 8007086:	4623      	mov	r3, r4
 8007088:	eb18 0303 	adds.w	r3, r8, r3
 800708c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007090:	462b      	mov	r3, r5
 8007092:	eb49 0303 	adc.w	r3, r9, r3
 8007096:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800709a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80070aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80070ae:	460b      	mov	r3, r1
 80070b0:	18db      	adds	r3, r3, r3
 80070b2:	653b      	str	r3, [r7, #80]	; 0x50
 80070b4:	4613      	mov	r3, r2
 80070b6:	eb42 0303 	adc.w	r3, r2, r3
 80070ba:	657b      	str	r3, [r7, #84]	; 0x54
 80070bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80070c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80070c4:	f7f9 fe00 	bl	8000cc8 <__aeabi_uldivmod>
 80070c8:	4602      	mov	r2, r0
 80070ca:	460b      	mov	r3, r1
 80070cc:	4b61      	ldr	r3, [pc, #388]	; (8007254 <UART_SetConfig+0x2d4>)
 80070ce:	fba3 2302 	umull	r2, r3, r3, r2
 80070d2:	095b      	lsrs	r3, r3, #5
 80070d4:	011c      	lsls	r4, r3, #4
 80070d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070da:	2200      	movs	r2, #0
 80070dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80070e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80070e8:	4642      	mov	r2, r8
 80070ea:	464b      	mov	r3, r9
 80070ec:	1891      	adds	r1, r2, r2
 80070ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80070f0:	415b      	adcs	r3, r3
 80070f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80070f8:	4641      	mov	r1, r8
 80070fa:	eb12 0a01 	adds.w	sl, r2, r1
 80070fe:	4649      	mov	r1, r9
 8007100:	eb43 0b01 	adc.w	fp, r3, r1
 8007104:	f04f 0200 	mov.w	r2, #0
 8007108:	f04f 0300 	mov.w	r3, #0
 800710c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007110:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007114:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007118:	4692      	mov	sl, r2
 800711a:	469b      	mov	fp, r3
 800711c:	4643      	mov	r3, r8
 800711e:	eb1a 0303 	adds.w	r3, sl, r3
 8007122:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007126:	464b      	mov	r3, r9
 8007128:	eb4b 0303 	adc.w	r3, fp, r3
 800712c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800713c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007140:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007144:	460b      	mov	r3, r1
 8007146:	18db      	adds	r3, r3, r3
 8007148:	643b      	str	r3, [r7, #64]	; 0x40
 800714a:	4613      	mov	r3, r2
 800714c:	eb42 0303 	adc.w	r3, r2, r3
 8007150:	647b      	str	r3, [r7, #68]	; 0x44
 8007152:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007156:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800715a:	f7f9 fdb5 	bl	8000cc8 <__aeabi_uldivmod>
 800715e:	4602      	mov	r2, r0
 8007160:	460b      	mov	r3, r1
 8007162:	4611      	mov	r1, r2
 8007164:	4b3b      	ldr	r3, [pc, #236]	; (8007254 <UART_SetConfig+0x2d4>)
 8007166:	fba3 2301 	umull	r2, r3, r3, r1
 800716a:	095b      	lsrs	r3, r3, #5
 800716c:	2264      	movs	r2, #100	; 0x64
 800716e:	fb02 f303 	mul.w	r3, r2, r3
 8007172:	1acb      	subs	r3, r1, r3
 8007174:	00db      	lsls	r3, r3, #3
 8007176:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800717a:	4b36      	ldr	r3, [pc, #216]	; (8007254 <UART_SetConfig+0x2d4>)
 800717c:	fba3 2302 	umull	r2, r3, r3, r2
 8007180:	095b      	lsrs	r3, r3, #5
 8007182:	005b      	lsls	r3, r3, #1
 8007184:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007188:	441c      	add	r4, r3
 800718a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800718e:	2200      	movs	r2, #0
 8007190:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007194:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007198:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800719c:	4642      	mov	r2, r8
 800719e:	464b      	mov	r3, r9
 80071a0:	1891      	adds	r1, r2, r2
 80071a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80071a4:	415b      	adcs	r3, r3
 80071a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80071ac:	4641      	mov	r1, r8
 80071ae:	1851      	adds	r1, r2, r1
 80071b0:	6339      	str	r1, [r7, #48]	; 0x30
 80071b2:	4649      	mov	r1, r9
 80071b4:	414b      	adcs	r3, r1
 80071b6:	637b      	str	r3, [r7, #52]	; 0x34
 80071b8:	f04f 0200 	mov.w	r2, #0
 80071bc:	f04f 0300 	mov.w	r3, #0
 80071c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80071c4:	4659      	mov	r1, fp
 80071c6:	00cb      	lsls	r3, r1, #3
 80071c8:	4651      	mov	r1, sl
 80071ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071ce:	4651      	mov	r1, sl
 80071d0:	00ca      	lsls	r2, r1, #3
 80071d2:	4610      	mov	r0, r2
 80071d4:	4619      	mov	r1, r3
 80071d6:	4603      	mov	r3, r0
 80071d8:	4642      	mov	r2, r8
 80071da:	189b      	adds	r3, r3, r2
 80071dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071e0:	464b      	mov	r3, r9
 80071e2:	460a      	mov	r2, r1
 80071e4:	eb42 0303 	adc.w	r3, r2, r3
 80071e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80071f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80071fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007200:	460b      	mov	r3, r1
 8007202:	18db      	adds	r3, r3, r3
 8007204:	62bb      	str	r3, [r7, #40]	; 0x28
 8007206:	4613      	mov	r3, r2
 8007208:	eb42 0303 	adc.w	r3, r2, r3
 800720c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800720e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007212:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007216:	f7f9 fd57 	bl	8000cc8 <__aeabi_uldivmod>
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	4b0d      	ldr	r3, [pc, #52]	; (8007254 <UART_SetConfig+0x2d4>)
 8007220:	fba3 1302 	umull	r1, r3, r3, r2
 8007224:	095b      	lsrs	r3, r3, #5
 8007226:	2164      	movs	r1, #100	; 0x64
 8007228:	fb01 f303 	mul.w	r3, r1, r3
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	00db      	lsls	r3, r3, #3
 8007230:	3332      	adds	r3, #50	; 0x32
 8007232:	4a08      	ldr	r2, [pc, #32]	; (8007254 <UART_SetConfig+0x2d4>)
 8007234:	fba2 2303 	umull	r2, r3, r2, r3
 8007238:	095b      	lsrs	r3, r3, #5
 800723a:	f003 0207 	and.w	r2, r3, #7
 800723e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4422      	add	r2, r4
 8007246:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007248:	e105      	b.n	8007456 <UART_SetConfig+0x4d6>
 800724a:	bf00      	nop
 800724c:	40011000 	.word	0x40011000
 8007250:	40011400 	.word	0x40011400
 8007254:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800725c:	2200      	movs	r2, #0
 800725e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007262:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007266:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800726a:	4642      	mov	r2, r8
 800726c:	464b      	mov	r3, r9
 800726e:	1891      	adds	r1, r2, r2
 8007270:	6239      	str	r1, [r7, #32]
 8007272:	415b      	adcs	r3, r3
 8007274:	627b      	str	r3, [r7, #36]	; 0x24
 8007276:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800727a:	4641      	mov	r1, r8
 800727c:	1854      	adds	r4, r2, r1
 800727e:	4649      	mov	r1, r9
 8007280:	eb43 0501 	adc.w	r5, r3, r1
 8007284:	f04f 0200 	mov.w	r2, #0
 8007288:	f04f 0300 	mov.w	r3, #0
 800728c:	00eb      	lsls	r3, r5, #3
 800728e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007292:	00e2      	lsls	r2, r4, #3
 8007294:	4614      	mov	r4, r2
 8007296:	461d      	mov	r5, r3
 8007298:	4643      	mov	r3, r8
 800729a:	18e3      	adds	r3, r4, r3
 800729c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80072a0:	464b      	mov	r3, r9
 80072a2:	eb45 0303 	adc.w	r3, r5, r3
 80072a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80072aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80072ba:	f04f 0200 	mov.w	r2, #0
 80072be:	f04f 0300 	mov.w	r3, #0
 80072c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80072c6:	4629      	mov	r1, r5
 80072c8:	008b      	lsls	r3, r1, #2
 80072ca:	4621      	mov	r1, r4
 80072cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072d0:	4621      	mov	r1, r4
 80072d2:	008a      	lsls	r2, r1, #2
 80072d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80072d8:	f7f9 fcf6 	bl	8000cc8 <__aeabi_uldivmod>
 80072dc:	4602      	mov	r2, r0
 80072de:	460b      	mov	r3, r1
 80072e0:	4b60      	ldr	r3, [pc, #384]	; (8007464 <UART_SetConfig+0x4e4>)
 80072e2:	fba3 2302 	umull	r2, r3, r3, r2
 80072e6:	095b      	lsrs	r3, r3, #5
 80072e8:	011c      	lsls	r4, r3, #4
 80072ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072ee:	2200      	movs	r2, #0
 80072f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80072f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80072f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80072fc:	4642      	mov	r2, r8
 80072fe:	464b      	mov	r3, r9
 8007300:	1891      	adds	r1, r2, r2
 8007302:	61b9      	str	r1, [r7, #24]
 8007304:	415b      	adcs	r3, r3
 8007306:	61fb      	str	r3, [r7, #28]
 8007308:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800730c:	4641      	mov	r1, r8
 800730e:	1851      	adds	r1, r2, r1
 8007310:	6139      	str	r1, [r7, #16]
 8007312:	4649      	mov	r1, r9
 8007314:	414b      	adcs	r3, r1
 8007316:	617b      	str	r3, [r7, #20]
 8007318:	f04f 0200 	mov.w	r2, #0
 800731c:	f04f 0300 	mov.w	r3, #0
 8007320:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007324:	4659      	mov	r1, fp
 8007326:	00cb      	lsls	r3, r1, #3
 8007328:	4651      	mov	r1, sl
 800732a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800732e:	4651      	mov	r1, sl
 8007330:	00ca      	lsls	r2, r1, #3
 8007332:	4610      	mov	r0, r2
 8007334:	4619      	mov	r1, r3
 8007336:	4603      	mov	r3, r0
 8007338:	4642      	mov	r2, r8
 800733a:	189b      	adds	r3, r3, r2
 800733c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007340:	464b      	mov	r3, r9
 8007342:	460a      	mov	r2, r1
 8007344:	eb42 0303 	adc.w	r3, r2, r3
 8007348:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800734c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	67bb      	str	r3, [r7, #120]	; 0x78
 8007356:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007358:	f04f 0200 	mov.w	r2, #0
 800735c:	f04f 0300 	mov.w	r3, #0
 8007360:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007364:	4649      	mov	r1, r9
 8007366:	008b      	lsls	r3, r1, #2
 8007368:	4641      	mov	r1, r8
 800736a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800736e:	4641      	mov	r1, r8
 8007370:	008a      	lsls	r2, r1, #2
 8007372:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007376:	f7f9 fca7 	bl	8000cc8 <__aeabi_uldivmod>
 800737a:	4602      	mov	r2, r0
 800737c:	460b      	mov	r3, r1
 800737e:	4b39      	ldr	r3, [pc, #228]	; (8007464 <UART_SetConfig+0x4e4>)
 8007380:	fba3 1302 	umull	r1, r3, r3, r2
 8007384:	095b      	lsrs	r3, r3, #5
 8007386:	2164      	movs	r1, #100	; 0x64
 8007388:	fb01 f303 	mul.w	r3, r1, r3
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	011b      	lsls	r3, r3, #4
 8007390:	3332      	adds	r3, #50	; 0x32
 8007392:	4a34      	ldr	r2, [pc, #208]	; (8007464 <UART_SetConfig+0x4e4>)
 8007394:	fba2 2303 	umull	r2, r3, r2, r3
 8007398:	095b      	lsrs	r3, r3, #5
 800739a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800739e:	441c      	add	r4, r3
 80073a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073a4:	2200      	movs	r2, #0
 80073a6:	673b      	str	r3, [r7, #112]	; 0x70
 80073a8:	677a      	str	r2, [r7, #116]	; 0x74
 80073aa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80073ae:	4642      	mov	r2, r8
 80073b0:	464b      	mov	r3, r9
 80073b2:	1891      	adds	r1, r2, r2
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	415b      	adcs	r3, r3
 80073b8:	60fb      	str	r3, [r7, #12]
 80073ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073be:	4641      	mov	r1, r8
 80073c0:	1851      	adds	r1, r2, r1
 80073c2:	6039      	str	r1, [r7, #0]
 80073c4:	4649      	mov	r1, r9
 80073c6:	414b      	adcs	r3, r1
 80073c8:	607b      	str	r3, [r7, #4]
 80073ca:	f04f 0200 	mov.w	r2, #0
 80073ce:	f04f 0300 	mov.w	r3, #0
 80073d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80073d6:	4659      	mov	r1, fp
 80073d8:	00cb      	lsls	r3, r1, #3
 80073da:	4651      	mov	r1, sl
 80073dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073e0:	4651      	mov	r1, sl
 80073e2:	00ca      	lsls	r2, r1, #3
 80073e4:	4610      	mov	r0, r2
 80073e6:	4619      	mov	r1, r3
 80073e8:	4603      	mov	r3, r0
 80073ea:	4642      	mov	r2, r8
 80073ec:	189b      	adds	r3, r3, r2
 80073ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80073f0:	464b      	mov	r3, r9
 80073f2:	460a      	mov	r2, r1
 80073f4:	eb42 0303 	adc.w	r3, r2, r3
 80073f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	663b      	str	r3, [r7, #96]	; 0x60
 8007404:	667a      	str	r2, [r7, #100]	; 0x64
 8007406:	f04f 0200 	mov.w	r2, #0
 800740a:	f04f 0300 	mov.w	r3, #0
 800740e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007412:	4649      	mov	r1, r9
 8007414:	008b      	lsls	r3, r1, #2
 8007416:	4641      	mov	r1, r8
 8007418:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800741c:	4641      	mov	r1, r8
 800741e:	008a      	lsls	r2, r1, #2
 8007420:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007424:	f7f9 fc50 	bl	8000cc8 <__aeabi_uldivmod>
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	4b0d      	ldr	r3, [pc, #52]	; (8007464 <UART_SetConfig+0x4e4>)
 800742e:	fba3 1302 	umull	r1, r3, r3, r2
 8007432:	095b      	lsrs	r3, r3, #5
 8007434:	2164      	movs	r1, #100	; 0x64
 8007436:	fb01 f303 	mul.w	r3, r1, r3
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	011b      	lsls	r3, r3, #4
 800743e:	3332      	adds	r3, #50	; 0x32
 8007440:	4a08      	ldr	r2, [pc, #32]	; (8007464 <UART_SetConfig+0x4e4>)
 8007442:	fba2 2303 	umull	r2, r3, r2, r3
 8007446:	095b      	lsrs	r3, r3, #5
 8007448:	f003 020f 	and.w	r2, r3, #15
 800744c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4422      	add	r2, r4
 8007454:	609a      	str	r2, [r3, #8]
}
 8007456:	bf00      	nop
 8007458:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800745c:	46bd      	mov	sp, r7
 800745e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007462:	bf00      	nop
 8007464:	51eb851f 	.word	0x51eb851f

08007468 <__errno>:
 8007468:	4b01      	ldr	r3, [pc, #4]	; (8007470 <__errno+0x8>)
 800746a:	6818      	ldr	r0, [r3, #0]
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	200023d4 	.word	0x200023d4

08007474 <__libc_init_array>:
 8007474:	b570      	push	{r4, r5, r6, lr}
 8007476:	4d0d      	ldr	r5, [pc, #52]	; (80074ac <__libc_init_array+0x38>)
 8007478:	4c0d      	ldr	r4, [pc, #52]	; (80074b0 <__libc_init_array+0x3c>)
 800747a:	1b64      	subs	r4, r4, r5
 800747c:	10a4      	asrs	r4, r4, #2
 800747e:	2600      	movs	r6, #0
 8007480:	42a6      	cmp	r6, r4
 8007482:	d109      	bne.n	8007498 <__libc_init_array+0x24>
 8007484:	4d0b      	ldr	r5, [pc, #44]	; (80074b4 <__libc_init_array+0x40>)
 8007486:	4c0c      	ldr	r4, [pc, #48]	; (80074b8 <__libc_init_array+0x44>)
 8007488:	f002 ff64 	bl	800a354 <_init>
 800748c:	1b64      	subs	r4, r4, r5
 800748e:	10a4      	asrs	r4, r4, #2
 8007490:	2600      	movs	r6, #0
 8007492:	42a6      	cmp	r6, r4
 8007494:	d105      	bne.n	80074a2 <__libc_init_array+0x2e>
 8007496:	bd70      	pop	{r4, r5, r6, pc}
 8007498:	f855 3b04 	ldr.w	r3, [r5], #4
 800749c:	4798      	blx	r3
 800749e:	3601      	adds	r6, #1
 80074a0:	e7ee      	b.n	8007480 <__libc_init_array+0xc>
 80074a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80074a6:	4798      	blx	r3
 80074a8:	3601      	adds	r6, #1
 80074aa:	e7f2      	b.n	8007492 <__libc_init_array+0x1e>
 80074ac:	0800a984 	.word	0x0800a984
 80074b0:	0800a984 	.word	0x0800a984
 80074b4:	0800a984 	.word	0x0800a984
 80074b8:	0800a988 	.word	0x0800a988

080074bc <malloc>:
 80074bc:	4b02      	ldr	r3, [pc, #8]	; (80074c8 <malloc+0xc>)
 80074be:	4601      	mov	r1, r0
 80074c0:	6818      	ldr	r0, [r3, #0]
 80074c2:	f000 b87f 	b.w	80075c4 <_malloc_r>
 80074c6:	bf00      	nop
 80074c8:	200023d4 	.word	0x200023d4

080074cc <free>:
 80074cc:	4b02      	ldr	r3, [pc, #8]	; (80074d8 <free+0xc>)
 80074ce:	4601      	mov	r1, r0
 80074d0:	6818      	ldr	r0, [r3, #0]
 80074d2:	f000 b80b 	b.w	80074ec <_free_r>
 80074d6:	bf00      	nop
 80074d8:	200023d4 	.word	0x200023d4

080074dc <memset>:
 80074dc:	4402      	add	r2, r0
 80074de:	4603      	mov	r3, r0
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d100      	bne.n	80074e6 <memset+0xa>
 80074e4:	4770      	bx	lr
 80074e6:	f803 1b01 	strb.w	r1, [r3], #1
 80074ea:	e7f9      	b.n	80074e0 <memset+0x4>

080074ec <_free_r>:
 80074ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074ee:	2900      	cmp	r1, #0
 80074f0:	d044      	beq.n	800757c <_free_r+0x90>
 80074f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074f6:	9001      	str	r0, [sp, #4]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f1a1 0404 	sub.w	r4, r1, #4
 80074fe:	bfb8      	it	lt
 8007500:	18e4      	addlt	r4, r4, r3
 8007502:	f001 fc0d 	bl	8008d20 <__malloc_lock>
 8007506:	4a1e      	ldr	r2, [pc, #120]	; (8007580 <_free_r+0x94>)
 8007508:	9801      	ldr	r0, [sp, #4]
 800750a:	6813      	ldr	r3, [r2, #0]
 800750c:	b933      	cbnz	r3, 800751c <_free_r+0x30>
 800750e:	6063      	str	r3, [r4, #4]
 8007510:	6014      	str	r4, [r2, #0]
 8007512:	b003      	add	sp, #12
 8007514:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007518:	f001 bc08 	b.w	8008d2c <__malloc_unlock>
 800751c:	42a3      	cmp	r3, r4
 800751e:	d908      	bls.n	8007532 <_free_r+0x46>
 8007520:	6825      	ldr	r5, [r4, #0]
 8007522:	1961      	adds	r1, r4, r5
 8007524:	428b      	cmp	r3, r1
 8007526:	bf01      	itttt	eq
 8007528:	6819      	ldreq	r1, [r3, #0]
 800752a:	685b      	ldreq	r3, [r3, #4]
 800752c:	1949      	addeq	r1, r1, r5
 800752e:	6021      	streq	r1, [r4, #0]
 8007530:	e7ed      	b.n	800750e <_free_r+0x22>
 8007532:	461a      	mov	r2, r3
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	b10b      	cbz	r3, 800753c <_free_r+0x50>
 8007538:	42a3      	cmp	r3, r4
 800753a:	d9fa      	bls.n	8007532 <_free_r+0x46>
 800753c:	6811      	ldr	r1, [r2, #0]
 800753e:	1855      	adds	r5, r2, r1
 8007540:	42a5      	cmp	r5, r4
 8007542:	d10b      	bne.n	800755c <_free_r+0x70>
 8007544:	6824      	ldr	r4, [r4, #0]
 8007546:	4421      	add	r1, r4
 8007548:	1854      	adds	r4, r2, r1
 800754a:	42a3      	cmp	r3, r4
 800754c:	6011      	str	r1, [r2, #0]
 800754e:	d1e0      	bne.n	8007512 <_free_r+0x26>
 8007550:	681c      	ldr	r4, [r3, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	6053      	str	r3, [r2, #4]
 8007556:	4421      	add	r1, r4
 8007558:	6011      	str	r1, [r2, #0]
 800755a:	e7da      	b.n	8007512 <_free_r+0x26>
 800755c:	d902      	bls.n	8007564 <_free_r+0x78>
 800755e:	230c      	movs	r3, #12
 8007560:	6003      	str	r3, [r0, #0]
 8007562:	e7d6      	b.n	8007512 <_free_r+0x26>
 8007564:	6825      	ldr	r5, [r4, #0]
 8007566:	1961      	adds	r1, r4, r5
 8007568:	428b      	cmp	r3, r1
 800756a:	bf04      	itt	eq
 800756c:	6819      	ldreq	r1, [r3, #0]
 800756e:	685b      	ldreq	r3, [r3, #4]
 8007570:	6063      	str	r3, [r4, #4]
 8007572:	bf04      	itt	eq
 8007574:	1949      	addeq	r1, r1, r5
 8007576:	6021      	streq	r1, [r4, #0]
 8007578:	6054      	str	r4, [r2, #4]
 800757a:	e7ca      	b.n	8007512 <_free_r+0x26>
 800757c:	b003      	add	sp, #12
 800757e:	bd30      	pop	{r4, r5, pc}
 8007580:	2000297c 	.word	0x2000297c

08007584 <sbrk_aligned>:
 8007584:	b570      	push	{r4, r5, r6, lr}
 8007586:	4e0e      	ldr	r6, [pc, #56]	; (80075c0 <sbrk_aligned+0x3c>)
 8007588:	460c      	mov	r4, r1
 800758a:	6831      	ldr	r1, [r6, #0]
 800758c:	4605      	mov	r5, r0
 800758e:	b911      	cbnz	r1, 8007596 <sbrk_aligned+0x12>
 8007590:	f000 fcf6 	bl	8007f80 <_sbrk_r>
 8007594:	6030      	str	r0, [r6, #0]
 8007596:	4621      	mov	r1, r4
 8007598:	4628      	mov	r0, r5
 800759a:	f000 fcf1 	bl	8007f80 <_sbrk_r>
 800759e:	1c43      	adds	r3, r0, #1
 80075a0:	d00a      	beq.n	80075b8 <sbrk_aligned+0x34>
 80075a2:	1cc4      	adds	r4, r0, #3
 80075a4:	f024 0403 	bic.w	r4, r4, #3
 80075a8:	42a0      	cmp	r0, r4
 80075aa:	d007      	beq.n	80075bc <sbrk_aligned+0x38>
 80075ac:	1a21      	subs	r1, r4, r0
 80075ae:	4628      	mov	r0, r5
 80075b0:	f000 fce6 	bl	8007f80 <_sbrk_r>
 80075b4:	3001      	adds	r0, #1
 80075b6:	d101      	bne.n	80075bc <sbrk_aligned+0x38>
 80075b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80075bc:	4620      	mov	r0, r4
 80075be:	bd70      	pop	{r4, r5, r6, pc}
 80075c0:	20002980 	.word	0x20002980

080075c4 <_malloc_r>:
 80075c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075c8:	1ccd      	adds	r5, r1, #3
 80075ca:	f025 0503 	bic.w	r5, r5, #3
 80075ce:	3508      	adds	r5, #8
 80075d0:	2d0c      	cmp	r5, #12
 80075d2:	bf38      	it	cc
 80075d4:	250c      	movcc	r5, #12
 80075d6:	2d00      	cmp	r5, #0
 80075d8:	4607      	mov	r7, r0
 80075da:	db01      	blt.n	80075e0 <_malloc_r+0x1c>
 80075dc:	42a9      	cmp	r1, r5
 80075de:	d905      	bls.n	80075ec <_malloc_r+0x28>
 80075e0:	230c      	movs	r3, #12
 80075e2:	603b      	str	r3, [r7, #0]
 80075e4:	2600      	movs	r6, #0
 80075e6:	4630      	mov	r0, r6
 80075e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075ec:	4e2e      	ldr	r6, [pc, #184]	; (80076a8 <_malloc_r+0xe4>)
 80075ee:	f001 fb97 	bl	8008d20 <__malloc_lock>
 80075f2:	6833      	ldr	r3, [r6, #0]
 80075f4:	461c      	mov	r4, r3
 80075f6:	bb34      	cbnz	r4, 8007646 <_malloc_r+0x82>
 80075f8:	4629      	mov	r1, r5
 80075fa:	4638      	mov	r0, r7
 80075fc:	f7ff ffc2 	bl	8007584 <sbrk_aligned>
 8007600:	1c43      	adds	r3, r0, #1
 8007602:	4604      	mov	r4, r0
 8007604:	d14d      	bne.n	80076a2 <_malloc_r+0xde>
 8007606:	6834      	ldr	r4, [r6, #0]
 8007608:	4626      	mov	r6, r4
 800760a:	2e00      	cmp	r6, #0
 800760c:	d140      	bne.n	8007690 <_malloc_r+0xcc>
 800760e:	6823      	ldr	r3, [r4, #0]
 8007610:	4631      	mov	r1, r6
 8007612:	4638      	mov	r0, r7
 8007614:	eb04 0803 	add.w	r8, r4, r3
 8007618:	f000 fcb2 	bl	8007f80 <_sbrk_r>
 800761c:	4580      	cmp	r8, r0
 800761e:	d13a      	bne.n	8007696 <_malloc_r+0xd2>
 8007620:	6821      	ldr	r1, [r4, #0]
 8007622:	3503      	adds	r5, #3
 8007624:	1a6d      	subs	r5, r5, r1
 8007626:	f025 0503 	bic.w	r5, r5, #3
 800762a:	3508      	adds	r5, #8
 800762c:	2d0c      	cmp	r5, #12
 800762e:	bf38      	it	cc
 8007630:	250c      	movcc	r5, #12
 8007632:	4629      	mov	r1, r5
 8007634:	4638      	mov	r0, r7
 8007636:	f7ff ffa5 	bl	8007584 <sbrk_aligned>
 800763a:	3001      	adds	r0, #1
 800763c:	d02b      	beq.n	8007696 <_malloc_r+0xd2>
 800763e:	6823      	ldr	r3, [r4, #0]
 8007640:	442b      	add	r3, r5
 8007642:	6023      	str	r3, [r4, #0]
 8007644:	e00e      	b.n	8007664 <_malloc_r+0xa0>
 8007646:	6822      	ldr	r2, [r4, #0]
 8007648:	1b52      	subs	r2, r2, r5
 800764a:	d41e      	bmi.n	800768a <_malloc_r+0xc6>
 800764c:	2a0b      	cmp	r2, #11
 800764e:	d916      	bls.n	800767e <_malloc_r+0xba>
 8007650:	1961      	adds	r1, r4, r5
 8007652:	42a3      	cmp	r3, r4
 8007654:	6025      	str	r5, [r4, #0]
 8007656:	bf18      	it	ne
 8007658:	6059      	strne	r1, [r3, #4]
 800765a:	6863      	ldr	r3, [r4, #4]
 800765c:	bf08      	it	eq
 800765e:	6031      	streq	r1, [r6, #0]
 8007660:	5162      	str	r2, [r4, r5]
 8007662:	604b      	str	r3, [r1, #4]
 8007664:	4638      	mov	r0, r7
 8007666:	f104 060b 	add.w	r6, r4, #11
 800766a:	f001 fb5f 	bl	8008d2c <__malloc_unlock>
 800766e:	f026 0607 	bic.w	r6, r6, #7
 8007672:	1d23      	adds	r3, r4, #4
 8007674:	1af2      	subs	r2, r6, r3
 8007676:	d0b6      	beq.n	80075e6 <_malloc_r+0x22>
 8007678:	1b9b      	subs	r3, r3, r6
 800767a:	50a3      	str	r3, [r4, r2]
 800767c:	e7b3      	b.n	80075e6 <_malloc_r+0x22>
 800767e:	6862      	ldr	r2, [r4, #4]
 8007680:	42a3      	cmp	r3, r4
 8007682:	bf0c      	ite	eq
 8007684:	6032      	streq	r2, [r6, #0]
 8007686:	605a      	strne	r2, [r3, #4]
 8007688:	e7ec      	b.n	8007664 <_malloc_r+0xa0>
 800768a:	4623      	mov	r3, r4
 800768c:	6864      	ldr	r4, [r4, #4]
 800768e:	e7b2      	b.n	80075f6 <_malloc_r+0x32>
 8007690:	4634      	mov	r4, r6
 8007692:	6876      	ldr	r6, [r6, #4]
 8007694:	e7b9      	b.n	800760a <_malloc_r+0x46>
 8007696:	230c      	movs	r3, #12
 8007698:	603b      	str	r3, [r7, #0]
 800769a:	4638      	mov	r0, r7
 800769c:	f001 fb46 	bl	8008d2c <__malloc_unlock>
 80076a0:	e7a1      	b.n	80075e6 <_malloc_r+0x22>
 80076a2:	6025      	str	r5, [r4, #0]
 80076a4:	e7de      	b.n	8007664 <_malloc_r+0xa0>
 80076a6:	bf00      	nop
 80076a8:	2000297c 	.word	0x2000297c

080076ac <__cvt>:
 80076ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076b0:	ec55 4b10 	vmov	r4, r5, d0
 80076b4:	2d00      	cmp	r5, #0
 80076b6:	460e      	mov	r6, r1
 80076b8:	4619      	mov	r1, r3
 80076ba:	462b      	mov	r3, r5
 80076bc:	bfbb      	ittet	lt
 80076be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80076c2:	461d      	movlt	r5, r3
 80076c4:	2300      	movge	r3, #0
 80076c6:	232d      	movlt	r3, #45	; 0x2d
 80076c8:	700b      	strb	r3, [r1, #0]
 80076ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80076d0:	4691      	mov	r9, r2
 80076d2:	f023 0820 	bic.w	r8, r3, #32
 80076d6:	bfbc      	itt	lt
 80076d8:	4622      	movlt	r2, r4
 80076da:	4614      	movlt	r4, r2
 80076dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076e0:	d005      	beq.n	80076ee <__cvt+0x42>
 80076e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80076e6:	d100      	bne.n	80076ea <__cvt+0x3e>
 80076e8:	3601      	adds	r6, #1
 80076ea:	2102      	movs	r1, #2
 80076ec:	e000      	b.n	80076f0 <__cvt+0x44>
 80076ee:	2103      	movs	r1, #3
 80076f0:	ab03      	add	r3, sp, #12
 80076f2:	9301      	str	r3, [sp, #4]
 80076f4:	ab02      	add	r3, sp, #8
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	ec45 4b10 	vmov	d0, r4, r5
 80076fc:	4653      	mov	r3, sl
 80076fe:	4632      	mov	r2, r6
 8007700:	f000 fd0e 	bl	8008120 <_dtoa_r>
 8007704:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007708:	4607      	mov	r7, r0
 800770a:	d102      	bne.n	8007712 <__cvt+0x66>
 800770c:	f019 0f01 	tst.w	r9, #1
 8007710:	d022      	beq.n	8007758 <__cvt+0xac>
 8007712:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007716:	eb07 0906 	add.w	r9, r7, r6
 800771a:	d110      	bne.n	800773e <__cvt+0x92>
 800771c:	783b      	ldrb	r3, [r7, #0]
 800771e:	2b30      	cmp	r3, #48	; 0x30
 8007720:	d10a      	bne.n	8007738 <__cvt+0x8c>
 8007722:	2200      	movs	r2, #0
 8007724:	2300      	movs	r3, #0
 8007726:	4620      	mov	r0, r4
 8007728:	4629      	mov	r1, r5
 800772a:	f7f9 f9ed 	bl	8000b08 <__aeabi_dcmpeq>
 800772e:	b918      	cbnz	r0, 8007738 <__cvt+0x8c>
 8007730:	f1c6 0601 	rsb	r6, r6, #1
 8007734:	f8ca 6000 	str.w	r6, [sl]
 8007738:	f8da 3000 	ldr.w	r3, [sl]
 800773c:	4499      	add	r9, r3
 800773e:	2200      	movs	r2, #0
 8007740:	2300      	movs	r3, #0
 8007742:	4620      	mov	r0, r4
 8007744:	4629      	mov	r1, r5
 8007746:	f7f9 f9df 	bl	8000b08 <__aeabi_dcmpeq>
 800774a:	b108      	cbz	r0, 8007750 <__cvt+0xa4>
 800774c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007750:	2230      	movs	r2, #48	; 0x30
 8007752:	9b03      	ldr	r3, [sp, #12]
 8007754:	454b      	cmp	r3, r9
 8007756:	d307      	bcc.n	8007768 <__cvt+0xbc>
 8007758:	9b03      	ldr	r3, [sp, #12]
 800775a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800775c:	1bdb      	subs	r3, r3, r7
 800775e:	4638      	mov	r0, r7
 8007760:	6013      	str	r3, [r2, #0]
 8007762:	b004      	add	sp, #16
 8007764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007768:	1c59      	adds	r1, r3, #1
 800776a:	9103      	str	r1, [sp, #12]
 800776c:	701a      	strb	r2, [r3, #0]
 800776e:	e7f0      	b.n	8007752 <__cvt+0xa6>

08007770 <__exponent>:
 8007770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007772:	4603      	mov	r3, r0
 8007774:	2900      	cmp	r1, #0
 8007776:	bfb8      	it	lt
 8007778:	4249      	neglt	r1, r1
 800777a:	f803 2b02 	strb.w	r2, [r3], #2
 800777e:	bfb4      	ite	lt
 8007780:	222d      	movlt	r2, #45	; 0x2d
 8007782:	222b      	movge	r2, #43	; 0x2b
 8007784:	2909      	cmp	r1, #9
 8007786:	7042      	strb	r2, [r0, #1]
 8007788:	dd2a      	ble.n	80077e0 <__exponent+0x70>
 800778a:	f10d 0407 	add.w	r4, sp, #7
 800778e:	46a4      	mov	ip, r4
 8007790:	270a      	movs	r7, #10
 8007792:	46a6      	mov	lr, r4
 8007794:	460a      	mov	r2, r1
 8007796:	fb91 f6f7 	sdiv	r6, r1, r7
 800779a:	fb07 1516 	mls	r5, r7, r6, r1
 800779e:	3530      	adds	r5, #48	; 0x30
 80077a0:	2a63      	cmp	r2, #99	; 0x63
 80077a2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80077a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80077aa:	4631      	mov	r1, r6
 80077ac:	dcf1      	bgt.n	8007792 <__exponent+0x22>
 80077ae:	3130      	adds	r1, #48	; 0x30
 80077b0:	f1ae 0502 	sub.w	r5, lr, #2
 80077b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80077b8:	1c44      	adds	r4, r0, #1
 80077ba:	4629      	mov	r1, r5
 80077bc:	4561      	cmp	r1, ip
 80077be:	d30a      	bcc.n	80077d6 <__exponent+0x66>
 80077c0:	f10d 0209 	add.w	r2, sp, #9
 80077c4:	eba2 020e 	sub.w	r2, r2, lr
 80077c8:	4565      	cmp	r5, ip
 80077ca:	bf88      	it	hi
 80077cc:	2200      	movhi	r2, #0
 80077ce:	4413      	add	r3, r2
 80077d0:	1a18      	subs	r0, r3, r0
 80077d2:	b003      	add	sp, #12
 80077d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077da:	f804 2f01 	strb.w	r2, [r4, #1]!
 80077de:	e7ed      	b.n	80077bc <__exponent+0x4c>
 80077e0:	2330      	movs	r3, #48	; 0x30
 80077e2:	3130      	adds	r1, #48	; 0x30
 80077e4:	7083      	strb	r3, [r0, #2]
 80077e6:	70c1      	strb	r1, [r0, #3]
 80077e8:	1d03      	adds	r3, r0, #4
 80077ea:	e7f1      	b.n	80077d0 <__exponent+0x60>

080077ec <_printf_float>:
 80077ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f0:	ed2d 8b02 	vpush	{d8}
 80077f4:	b08d      	sub	sp, #52	; 0x34
 80077f6:	460c      	mov	r4, r1
 80077f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80077fc:	4616      	mov	r6, r2
 80077fe:	461f      	mov	r7, r3
 8007800:	4605      	mov	r5, r0
 8007802:	f001 fa7b 	bl	8008cfc <_localeconv_r>
 8007806:	f8d0 a000 	ldr.w	sl, [r0]
 800780a:	4650      	mov	r0, sl
 800780c:	f7f8 fd00 	bl	8000210 <strlen>
 8007810:	2300      	movs	r3, #0
 8007812:	930a      	str	r3, [sp, #40]	; 0x28
 8007814:	6823      	ldr	r3, [r4, #0]
 8007816:	9305      	str	r3, [sp, #20]
 8007818:	f8d8 3000 	ldr.w	r3, [r8]
 800781c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007820:	3307      	adds	r3, #7
 8007822:	f023 0307 	bic.w	r3, r3, #7
 8007826:	f103 0208 	add.w	r2, r3, #8
 800782a:	f8c8 2000 	str.w	r2, [r8]
 800782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007832:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007836:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800783a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800783e:	9307      	str	r3, [sp, #28]
 8007840:	f8cd 8018 	str.w	r8, [sp, #24]
 8007844:	ee08 0a10 	vmov	s16, r0
 8007848:	4b9f      	ldr	r3, [pc, #636]	; (8007ac8 <_printf_float+0x2dc>)
 800784a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800784e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007852:	f7f9 f98b 	bl	8000b6c <__aeabi_dcmpun>
 8007856:	bb88      	cbnz	r0, 80078bc <_printf_float+0xd0>
 8007858:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800785c:	4b9a      	ldr	r3, [pc, #616]	; (8007ac8 <_printf_float+0x2dc>)
 800785e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007862:	f7f9 f965 	bl	8000b30 <__aeabi_dcmple>
 8007866:	bb48      	cbnz	r0, 80078bc <_printf_float+0xd0>
 8007868:	2200      	movs	r2, #0
 800786a:	2300      	movs	r3, #0
 800786c:	4640      	mov	r0, r8
 800786e:	4649      	mov	r1, r9
 8007870:	f7f9 f954 	bl	8000b1c <__aeabi_dcmplt>
 8007874:	b110      	cbz	r0, 800787c <_printf_float+0x90>
 8007876:	232d      	movs	r3, #45	; 0x2d
 8007878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800787c:	4b93      	ldr	r3, [pc, #588]	; (8007acc <_printf_float+0x2e0>)
 800787e:	4894      	ldr	r0, [pc, #592]	; (8007ad0 <_printf_float+0x2e4>)
 8007880:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007884:	bf94      	ite	ls
 8007886:	4698      	movls	r8, r3
 8007888:	4680      	movhi	r8, r0
 800788a:	2303      	movs	r3, #3
 800788c:	6123      	str	r3, [r4, #16]
 800788e:	9b05      	ldr	r3, [sp, #20]
 8007890:	f023 0204 	bic.w	r2, r3, #4
 8007894:	6022      	str	r2, [r4, #0]
 8007896:	f04f 0900 	mov.w	r9, #0
 800789a:	9700      	str	r7, [sp, #0]
 800789c:	4633      	mov	r3, r6
 800789e:	aa0b      	add	r2, sp, #44	; 0x2c
 80078a0:	4621      	mov	r1, r4
 80078a2:	4628      	mov	r0, r5
 80078a4:	f000 f9d8 	bl	8007c58 <_printf_common>
 80078a8:	3001      	adds	r0, #1
 80078aa:	f040 8090 	bne.w	80079ce <_printf_float+0x1e2>
 80078ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078b2:	b00d      	add	sp, #52	; 0x34
 80078b4:	ecbd 8b02 	vpop	{d8}
 80078b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078bc:	4642      	mov	r2, r8
 80078be:	464b      	mov	r3, r9
 80078c0:	4640      	mov	r0, r8
 80078c2:	4649      	mov	r1, r9
 80078c4:	f7f9 f952 	bl	8000b6c <__aeabi_dcmpun>
 80078c8:	b140      	cbz	r0, 80078dc <_printf_float+0xf0>
 80078ca:	464b      	mov	r3, r9
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	bfbc      	itt	lt
 80078d0:	232d      	movlt	r3, #45	; 0x2d
 80078d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80078d6:	487f      	ldr	r0, [pc, #508]	; (8007ad4 <_printf_float+0x2e8>)
 80078d8:	4b7f      	ldr	r3, [pc, #508]	; (8007ad8 <_printf_float+0x2ec>)
 80078da:	e7d1      	b.n	8007880 <_printf_float+0x94>
 80078dc:	6863      	ldr	r3, [r4, #4]
 80078de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80078e2:	9206      	str	r2, [sp, #24]
 80078e4:	1c5a      	adds	r2, r3, #1
 80078e6:	d13f      	bne.n	8007968 <_printf_float+0x17c>
 80078e8:	2306      	movs	r3, #6
 80078ea:	6063      	str	r3, [r4, #4]
 80078ec:	9b05      	ldr	r3, [sp, #20]
 80078ee:	6861      	ldr	r1, [r4, #4]
 80078f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80078f4:	2300      	movs	r3, #0
 80078f6:	9303      	str	r3, [sp, #12]
 80078f8:	ab0a      	add	r3, sp, #40	; 0x28
 80078fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80078fe:	ab09      	add	r3, sp, #36	; 0x24
 8007900:	ec49 8b10 	vmov	d0, r8, r9
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	6022      	str	r2, [r4, #0]
 8007908:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800790c:	4628      	mov	r0, r5
 800790e:	f7ff fecd 	bl	80076ac <__cvt>
 8007912:	9b06      	ldr	r3, [sp, #24]
 8007914:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007916:	2b47      	cmp	r3, #71	; 0x47
 8007918:	4680      	mov	r8, r0
 800791a:	d108      	bne.n	800792e <_printf_float+0x142>
 800791c:	1cc8      	adds	r0, r1, #3
 800791e:	db02      	blt.n	8007926 <_printf_float+0x13a>
 8007920:	6863      	ldr	r3, [r4, #4]
 8007922:	4299      	cmp	r1, r3
 8007924:	dd41      	ble.n	80079aa <_printf_float+0x1be>
 8007926:	f1ab 0b02 	sub.w	fp, fp, #2
 800792a:	fa5f fb8b 	uxtb.w	fp, fp
 800792e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007932:	d820      	bhi.n	8007976 <_printf_float+0x18a>
 8007934:	3901      	subs	r1, #1
 8007936:	465a      	mov	r2, fp
 8007938:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800793c:	9109      	str	r1, [sp, #36]	; 0x24
 800793e:	f7ff ff17 	bl	8007770 <__exponent>
 8007942:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007944:	1813      	adds	r3, r2, r0
 8007946:	2a01      	cmp	r2, #1
 8007948:	4681      	mov	r9, r0
 800794a:	6123      	str	r3, [r4, #16]
 800794c:	dc02      	bgt.n	8007954 <_printf_float+0x168>
 800794e:	6822      	ldr	r2, [r4, #0]
 8007950:	07d2      	lsls	r2, r2, #31
 8007952:	d501      	bpl.n	8007958 <_printf_float+0x16c>
 8007954:	3301      	adds	r3, #1
 8007956:	6123      	str	r3, [r4, #16]
 8007958:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800795c:	2b00      	cmp	r3, #0
 800795e:	d09c      	beq.n	800789a <_printf_float+0xae>
 8007960:	232d      	movs	r3, #45	; 0x2d
 8007962:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007966:	e798      	b.n	800789a <_printf_float+0xae>
 8007968:	9a06      	ldr	r2, [sp, #24]
 800796a:	2a47      	cmp	r2, #71	; 0x47
 800796c:	d1be      	bne.n	80078ec <_printf_float+0x100>
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1bc      	bne.n	80078ec <_printf_float+0x100>
 8007972:	2301      	movs	r3, #1
 8007974:	e7b9      	b.n	80078ea <_printf_float+0xfe>
 8007976:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800797a:	d118      	bne.n	80079ae <_printf_float+0x1c2>
 800797c:	2900      	cmp	r1, #0
 800797e:	6863      	ldr	r3, [r4, #4]
 8007980:	dd0b      	ble.n	800799a <_printf_float+0x1ae>
 8007982:	6121      	str	r1, [r4, #16]
 8007984:	b913      	cbnz	r3, 800798c <_printf_float+0x1a0>
 8007986:	6822      	ldr	r2, [r4, #0]
 8007988:	07d0      	lsls	r0, r2, #31
 800798a:	d502      	bpl.n	8007992 <_printf_float+0x1a6>
 800798c:	3301      	adds	r3, #1
 800798e:	440b      	add	r3, r1
 8007990:	6123      	str	r3, [r4, #16]
 8007992:	65a1      	str	r1, [r4, #88]	; 0x58
 8007994:	f04f 0900 	mov.w	r9, #0
 8007998:	e7de      	b.n	8007958 <_printf_float+0x16c>
 800799a:	b913      	cbnz	r3, 80079a2 <_printf_float+0x1b6>
 800799c:	6822      	ldr	r2, [r4, #0]
 800799e:	07d2      	lsls	r2, r2, #31
 80079a0:	d501      	bpl.n	80079a6 <_printf_float+0x1ba>
 80079a2:	3302      	adds	r3, #2
 80079a4:	e7f4      	b.n	8007990 <_printf_float+0x1a4>
 80079a6:	2301      	movs	r3, #1
 80079a8:	e7f2      	b.n	8007990 <_printf_float+0x1a4>
 80079aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80079ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079b0:	4299      	cmp	r1, r3
 80079b2:	db05      	blt.n	80079c0 <_printf_float+0x1d4>
 80079b4:	6823      	ldr	r3, [r4, #0]
 80079b6:	6121      	str	r1, [r4, #16]
 80079b8:	07d8      	lsls	r0, r3, #31
 80079ba:	d5ea      	bpl.n	8007992 <_printf_float+0x1a6>
 80079bc:	1c4b      	adds	r3, r1, #1
 80079be:	e7e7      	b.n	8007990 <_printf_float+0x1a4>
 80079c0:	2900      	cmp	r1, #0
 80079c2:	bfd4      	ite	le
 80079c4:	f1c1 0202 	rsble	r2, r1, #2
 80079c8:	2201      	movgt	r2, #1
 80079ca:	4413      	add	r3, r2
 80079cc:	e7e0      	b.n	8007990 <_printf_float+0x1a4>
 80079ce:	6823      	ldr	r3, [r4, #0]
 80079d0:	055a      	lsls	r2, r3, #21
 80079d2:	d407      	bmi.n	80079e4 <_printf_float+0x1f8>
 80079d4:	6923      	ldr	r3, [r4, #16]
 80079d6:	4642      	mov	r2, r8
 80079d8:	4631      	mov	r1, r6
 80079da:	4628      	mov	r0, r5
 80079dc:	47b8      	blx	r7
 80079de:	3001      	adds	r0, #1
 80079e0:	d12c      	bne.n	8007a3c <_printf_float+0x250>
 80079e2:	e764      	b.n	80078ae <_printf_float+0xc2>
 80079e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079e8:	f240 80e0 	bls.w	8007bac <_printf_float+0x3c0>
 80079ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079f0:	2200      	movs	r2, #0
 80079f2:	2300      	movs	r3, #0
 80079f4:	f7f9 f888 	bl	8000b08 <__aeabi_dcmpeq>
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d034      	beq.n	8007a66 <_printf_float+0x27a>
 80079fc:	4a37      	ldr	r2, [pc, #220]	; (8007adc <_printf_float+0x2f0>)
 80079fe:	2301      	movs	r3, #1
 8007a00:	4631      	mov	r1, r6
 8007a02:	4628      	mov	r0, r5
 8007a04:	47b8      	blx	r7
 8007a06:	3001      	adds	r0, #1
 8007a08:	f43f af51 	beq.w	80078ae <_printf_float+0xc2>
 8007a0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a10:	429a      	cmp	r2, r3
 8007a12:	db02      	blt.n	8007a1a <_printf_float+0x22e>
 8007a14:	6823      	ldr	r3, [r4, #0]
 8007a16:	07d8      	lsls	r0, r3, #31
 8007a18:	d510      	bpl.n	8007a3c <_printf_float+0x250>
 8007a1a:	ee18 3a10 	vmov	r3, s16
 8007a1e:	4652      	mov	r2, sl
 8007a20:	4631      	mov	r1, r6
 8007a22:	4628      	mov	r0, r5
 8007a24:	47b8      	blx	r7
 8007a26:	3001      	adds	r0, #1
 8007a28:	f43f af41 	beq.w	80078ae <_printf_float+0xc2>
 8007a2c:	f04f 0800 	mov.w	r8, #0
 8007a30:	f104 091a 	add.w	r9, r4, #26
 8007a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a36:	3b01      	subs	r3, #1
 8007a38:	4543      	cmp	r3, r8
 8007a3a:	dc09      	bgt.n	8007a50 <_printf_float+0x264>
 8007a3c:	6823      	ldr	r3, [r4, #0]
 8007a3e:	079b      	lsls	r3, r3, #30
 8007a40:	f100 8105 	bmi.w	8007c4e <_printf_float+0x462>
 8007a44:	68e0      	ldr	r0, [r4, #12]
 8007a46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a48:	4298      	cmp	r0, r3
 8007a4a:	bfb8      	it	lt
 8007a4c:	4618      	movlt	r0, r3
 8007a4e:	e730      	b.n	80078b2 <_printf_float+0xc6>
 8007a50:	2301      	movs	r3, #1
 8007a52:	464a      	mov	r2, r9
 8007a54:	4631      	mov	r1, r6
 8007a56:	4628      	mov	r0, r5
 8007a58:	47b8      	blx	r7
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	f43f af27 	beq.w	80078ae <_printf_float+0xc2>
 8007a60:	f108 0801 	add.w	r8, r8, #1
 8007a64:	e7e6      	b.n	8007a34 <_printf_float+0x248>
 8007a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	dc39      	bgt.n	8007ae0 <_printf_float+0x2f4>
 8007a6c:	4a1b      	ldr	r2, [pc, #108]	; (8007adc <_printf_float+0x2f0>)
 8007a6e:	2301      	movs	r3, #1
 8007a70:	4631      	mov	r1, r6
 8007a72:	4628      	mov	r0, r5
 8007a74:	47b8      	blx	r7
 8007a76:	3001      	adds	r0, #1
 8007a78:	f43f af19 	beq.w	80078ae <_printf_float+0xc2>
 8007a7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a80:	4313      	orrs	r3, r2
 8007a82:	d102      	bne.n	8007a8a <_printf_float+0x29e>
 8007a84:	6823      	ldr	r3, [r4, #0]
 8007a86:	07d9      	lsls	r1, r3, #31
 8007a88:	d5d8      	bpl.n	8007a3c <_printf_float+0x250>
 8007a8a:	ee18 3a10 	vmov	r3, s16
 8007a8e:	4652      	mov	r2, sl
 8007a90:	4631      	mov	r1, r6
 8007a92:	4628      	mov	r0, r5
 8007a94:	47b8      	blx	r7
 8007a96:	3001      	adds	r0, #1
 8007a98:	f43f af09 	beq.w	80078ae <_printf_float+0xc2>
 8007a9c:	f04f 0900 	mov.w	r9, #0
 8007aa0:	f104 0a1a 	add.w	sl, r4, #26
 8007aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa6:	425b      	negs	r3, r3
 8007aa8:	454b      	cmp	r3, r9
 8007aaa:	dc01      	bgt.n	8007ab0 <_printf_float+0x2c4>
 8007aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aae:	e792      	b.n	80079d6 <_printf_float+0x1ea>
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	4652      	mov	r2, sl
 8007ab4:	4631      	mov	r1, r6
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	47b8      	blx	r7
 8007aba:	3001      	adds	r0, #1
 8007abc:	f43f aef7 	beq.w	80078ae <_printf_float+0xc2>
 8007ac0:	f109 0901 	add.w	r9, r9, #1
 8007ac4:	e7ee      	b.n	8007aa4 <_printf_float+0x2b8>
 8007ac6:	bf00      	nop
 8007ac8:	7fefffff 	.word	0x7fefffff
 8007acc:	0800a5a4 	.word	0x0800a5a4
 8007ad0:	0800a5a8 	.word	0x0800a5a8
 8007ad4:	0800a5b0 	.word	0x0800a5b0
 8007ad8:	0800a5ac 	.word	0x0800a5ac
 8007adc:	0800a5b4 	.word	0x0800a5b4
 8007ae0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ae2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	bfa8      	it	ge
 8007ae8:	461a      	movge	r2, r3
 8007aea:	2a00      	cmp	r2, #0
 8007aec:	4691      	mov	r9, r2
 8007aee:	dc37      	bgt.n	8007b60 <_printf_float+0x374>
 8007af0:	f04f 0b00 	mov.w	fp, #0
 8007af4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007af8:	f104 021a 	add.w	r2, r4, #26
 8007afc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007afe:	9305      	str	r3, [sp, #20]
 8007b00:	eba3 0309 	sub.w	r3, r3, r9
 8007b04:	455b      	cmp	r3, fp
 8007b06:	dc33      	bgt.n	8007b70 <_printf_float+0x384>
 8007b08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	db3b      	blt.n	8007b88 <_printf_float+0x39c>
 8007b10:	6823      	ldr	r3, [r4, #0]
 8007b12:	07da      	lsls	r2, r3, #31
 8007b14:	d438      	bmi.n	8007b88 <_printf_float+0x39c>
 8007b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b18:	9a05      	ldr	r2, [sp, #20]
 8007b1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b1c:	1a9a      	subs	r2, r3, r2
 8007b1e:	eba3 0901 	sub.w	r9, r3, r1
 8007b22:	4591      	cmp	r9, r2
 8007b24:	bfa8      	it	ge
 8007b26:	4691      	movge	r9, r2
 8007b28:	f1b9 0f00 	cmp.w	r9, #0
 8007b2c:	dc35      	bgt.n	8007b9a <_printf_float+0x3ae>
 8007b2e:	f04f 0800 	mov.w	r8, #0
 8007b32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b36:	f104 0a1a 	add.w	sl, r4, #26
 8007b3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b3e:	1a9b      	subs	r3, r3, r2
 8007b40:	eba3 0309 	sub.w	r3, r3, r9
 8007b44:	4543      	cmp	r3, r8
 8007b46:	f77f af79 	ble.w	8007a3c <_printf_float+0x250>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	4652      	mov	r2, sl
 8007b4e:	4631      	mov	r1, r6
 8007b50:	4628      	mov	r0, r5
 8007b52:	47b8      	blx	r7
 8007b54:	3001      	adds	r0, #1
 8007b56:	f43f aeaa 	beq.w	80078ae <_printf_float+0xc2>
 8007b5a:	f108 0801 	add.w	r8, r8, #1
 8007b5e:	e7ec      	b.n	8007b3a <_printf_float+0x34e>
 8007b60:	4613      	mov	r3, r2
 8007b62:	4631      	mov	r1, r6
 8007b64:	4642      	mov	r2, r8
 8007b66:	4628      	mov	r0, r5
 8007b68:	47b8      	blx	r7
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	d1c0      	bne.n	8007af0 <_printf_float+0x304>
 8007b6e:	e69e      	b.n	80078ae <_printf_float+0xc2>
 8007b70:	2301      	movs	r3, #1
 8007b72:	4631      	mov	r1, r6
 8007b74:	4628      	mov	r0, r5
 8007b76:	9205      	str	r2, [sp, #20]
 8007b78:	47b8      	blx	r7
 8007b7a:	3001      	adds	r0, #1
 8007b7c:	f43f ae97 	beq.w	80078ae <_printf_float+0xc2>
 8007b80:	9a05      	ldr	r2, [sp, #20]
 8007b82:	f10b 0b01 	add.w	fp, fp, #1
 8007b86:	e7b9      	b.n	8007afc <_printf_float+0x310>
 8007b88:	ee18 3a10 	vmov	r3, s16
 8007b8c:	4652      	mov	r2, sl
 8007b8e:	4631      	mov	r1, r6
 8007b90:	4628      	mov	r0, r5
 8007b92:	47b8      	blx	r7
 8007b94:	3001      	adds	r0, #1
 8007b96:	d1be      	bne.n	8007b16 <_printf_float+0x32a>
 8007b98:	e689      	b.n	80078ae <_printf_float+0xc2>
 8007b9a:	9a05      	ldr	r2, [sp, #20]
 8007b9c:	464b      	mov	r3, r9
 8007b9e:	4442      	add	r2, r8
 8007ba0:	4631      	mov	r1, r6
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	47b8      	blx	r7
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	d1c1      	bne.n	8007b2e <_printf_float+0x342>
 8007baa:	e680      	b.n	80078ae <_printf_float+0xc2>
 8007bac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bae:	2a01      	cmp	r2, #1
 8007bb0:	dc01      	bgt.n	8007bb6 <_printf_float+0x3ca>
 8007bb2:	07db      	lsls	r3, r3, #31
 8007bb4:	d538      	bpl.n	8007c28 <_printf_float+0x43c>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	4642      	mov	r2, r8
 8007bba:	4631      	mov	r1, r6
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	47b8      	blx	r7
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	f43f ae74 	beq.w	80078ae <_printf_float+0xc2>
 8007bc6:	ee18 3a10 	vmov	r3, s16
 8007bca:	4652      	mov	r2, sl
 8007bcc:	4631      	mov	r1, r6
 8007bce:	4628      	mov	r0, r5
 8007bd0:	47b8      	blx	r7
 8007bd2:	3001      	adds	r0, #1
 8007bd4:	f43f ae6b 	beq.w	80078ae <_printf_float+0xc2>
 8007bd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bdc:	2200      	movs	r2, #0
 8007bde:	2300      	movs	r3, #0
 8007be0:	f7f8 ff92 	bl	8000b08 <__aeabi_dcmpeq>
 8007be4:	b9d8      	cbnz	r0, 8007c1e <_printf_float+0x432>
 8007be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007be8:	f108 0201 	add.w	r2, r8, #1
 8007bec:	3b01      	subs	r3, #1
 8007bee:	4631      	mov	r1, r6
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	47b8      	blx	r7
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	d10e      	bne.n	8007c16 <_printf_float+0x42a>
 8007bf8:	e659      	b.n	80078ae <_printf_float+0xc2>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	4652      	mov	r2, sl
 8007bfe:	4631      	mov	r1, r6
 8007c00:	4628      	mov	r0, r5
 8007c02:	47b8      	blx	r7
 8007c04:	3001      	adds	r0, #1
 8007c06:	f43f ae52 	beq.w	80078ae <_printf_float+0xc2>
 8007c0a:	f108 0801 	add.w	r8, r8, #1
 8007c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c10:	3b01      	subs	r3, #1
 8007c12:	4543      	cmp	r3, r8
 8007c14:	dcf1      	bgt.n	8007bfa <_printf_float+0x40e>
 8007c16:	464b      	mov	r3, r9
 8007c18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c1c:	e6dc      	b.n	80079d8 <_printf_float+0x1ec>
 8007c1e:	f04f 0800 	mov.w	r8, #0
 8007c22:	f104 0a1a 	add.w	sl, r4, #26
 8007c26:	e7f2      	b.n	8007c0e <_printf_float+0x422>
 8007c28:	2301      	movs	r3, #1
 8007c2a:	4642      	mov	r2, r8
 8007c2c:	e7df      	b.n	8007bee <_printf_float+0x402>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	464a      	mov	r2, r9
 8007c32:	4631      	mov	r1, r6
 8007c34:	4628      	mov	r0, r5
 8007c36:	47b8      	blx	r7
 8007c38:	3001      	adds	r0, #1
 8007c3a:	f43f ae38 	beq.w	80078ae <_printf_float+0xc2>
 8007c3e:	f108 0801 	add.w	r8, r8, #1
 8007c42:	68e3      	ldr	r3, [r4, #12]
 8007c44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c46:	1a5b      	subs	r3, r3, r1
 8007c48:	4543      	cmp	r3, r8
 8007c4a:	dcf0      	bgt.n	8007c2e <_printf_float+0x442>
 8007c4c:	e6fa      	b.n	8007a44 <_printf_float+0x258>
 8007c4e:	f04f 0800 	mov.w	r8, #0
 8007c52:	f104 0919 	add.w	r9, r4, #25
 8007c56:	e7f4      	b.n	8007c42 <_printf_float+0x456>

08007c58 <_printf_common>:
 8007c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c5c:	4616      	mov	r6, r2
 8007c5e:	4699      	mov	r9, r3
 8007c60:	688a      	ldr	r2, [r1, #8]
 8007c62:	690b      	ldr	r3, [r1, #16]
 8007c64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	bfb8      	it	lt
 8007c6c:	4613      	movlt	r3, r2
 8007c6e:	6033      	str	r3, [r6, #0]
 8007c70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c74:	4607      	mov	r7, r0
 8007c76:	460c      	mov	r4, r1
 8007c78:	b10a      	cbz	r2, 8007c7e <_printf_common+0x26>
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	6033      	str	r3, [r6, #0]
 8007c7e:	6823      	ldr	r3, [r4, #0]
 8007c80:	0699      	lsls	r1, r3, #26
 8007c82:	bf42      	ittt	mi
 8007c84:	6833      	ldrmi	r3, [r6, #0]
 8007c86:	3302      	addmi	r3, #2
 8007c88:	6033      	strmi	r3, [r6, #0]
 8007c8a:	6825      	ldr	r5, [r4, #0]
 8007c8c:	f015 0506 	ands.w	r5, r5, #6
 8007c90:	d106      	bne.n	8007ca0 <_printf_common+0x48>
 8007c92:	f104 0a19 	add.w	sl, r4, #25
 8007c96:	68e3      	ldr	r3, [r4, #12]
 8007c98:	6832      	ldr	r2, [r6, #0]
 8007c9a:	1a9b      	subs	r3, r3, r2
 8007c9c:	42ab      	cmp	r3, r5
 8007c9e:	dc26      	bgt.n	8007cee <_printf_common+0x96>
 8007ca0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ca4:	1e13      	subs	r3, r2, #0
 8007ca6:	6822      	ldr	r2, [r4, #0]
 8007ca8:	bf18      	it	ne
 8007caa:	2301      	movne	r3, #1
 8007cac:	0692      	lsls	r2, r2, #26
 8007cae:	d42b      	bmi.n	8007d08 <_printf_common+0xb0>
 8007cb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cb4:	4649      	mov	r1, r9
 8007cb6:	4638      	mov	r0, r7
 8007cb8:	47c0      	blx	r8
 8007cba:	3001      	adds	r0, #1
 8007cbc:	d01e      	beq.n	8007cfc <_printf_common+0xa4>
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	68e5      	ldr	r5, [r4, #12]
 8007cc2:	6832      	ldr	r2, [r6, #0]
 8007cc4:	f003 0306 	and.w	r3, r3, #6
 8007cc8:	2b04      	cmp	r3, #4
 8007cca:	bf08      	it	eq
 8007ccc:	1aad      	subeq	r5, r5, r2
 8007cce:	68a3      	ldr	r3, [r4, #8]
 8007cd0:	6922      	ldr	r2, [r4, #16]
 8007cd2:	bf0c      	ite	eq
 8007cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cd8:	2500      	movne	r5, #0
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	bfc4      	itt	gt
 8007cde:	1a9b      	subgt	r3, r3, r2
 8007ce0:	18ed      	addgt	r5, r5, r3
 8007ce2:	2600      	movs	r6, #0
 8007ce4:	341a      	adds	r4, #26
 8007ce6:	42b5      	cmp	r5, r6
 8007ce8:	d11a      	bne.n	8007d20 <_printf_common+0xc8>
 8007cea:	2000      	movs	r0, #0
 8007cec:	e008      	b.n	8007d00 <_printf_common+0xa8>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	4652      	mov	r2, sl
 8007cf2:	4649      	mov	r1, r9
 8007cf4:	4638      	mov	r0, r7
 8007cf6:	47c0      	blx	r8
 8007cf8:	3001      	adds	r0, #1
 8007cfa:	d103      	bne.n	8007d04 <_printf_common+0xac>
 8007cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d04:	3501      	adds	r5, #1
 8007d06:	e7c6      	b.n	8007c96 <_printf_common+0x3e>
 8007d08:	18e1      	adds	r1, r4, r3
 8007d0a:	1c5a      	adds	r2, r3, #1
 8007d0c:	2030      	movs	r0, #48	; 0x30
 8007d0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d12:	4422      	add	r2, r4
 8007d14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d1c:	3302      	adds	r3, #2
 8007d1e:	e7c7      	b.n	8007cb0 <_printf_common+0x58>
 8007d20:	2301      	movs	r3, #1
 8007d22:	4622      	mov	r2, r4
 8007d24:	4649      	mov	r1, r9
 8007d26:	4638      	mov	r0, r7
 8007d28:	47c0      	blx	r8
 8007d2a:	3001      	adds	r0, #1
 8007d2c:	d0e6      	beq.n	8007cfc <_printf_common+0xa4>
 8007d2e:	3601      	adds	r6, #1
 8007d30:	e7d9      	b.n	8007ce6 <_printf_common+0x8e>
	...

08007d34 <_printf_i>:
 8007d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d38:	7e0f      	ldrb	r7, [r1, #24]
 8007d3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d3c:	2f78      	cmp	r7, #120	; 0x78
 8007d3e:	4691      	mov	r9, r2
 8007d40:	4680      	mov	r8, r0
 8007d42:	460c      	mov	r4, r1
 8007d44:	469a      	mov	sl, r3
 8007d46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d4a:	d807      	bhi.n	8007d5c <_printf_i+0x28>
 8007d4c:	2f62      	cmp	r7, #98	; 0x62
 8007d4e:	d80a      	bhi.n	8007d66 <_printf_i+0x32>
 8007d50:	2f00      	cmp	r7, #0
 8007d52:	f000 80d8 	beq.w	8007f06 <_printf_i+0x1d2>
 8007d56:	2f58      	cmp	r7, #88	; 0x58
 8007d58:	f000 80a3 	beq.w	8007ea2 <_printf_i+0x16e>
 8007d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d64:	e03a      	b.n	8007ddc <_printf_i+0xa8>
 8007d66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d6a:	2b15      	cmp	r3, #21
 8007d6c:	d8f6      	bhi.n	8007d5c <_printf_i+0x28>
 8007d6e:	a101      	add	r1, pc, #4	; (adr r1, 8007d74 <_printf_i+0x40>)
 8007d70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d74:	08007dcd 	.word	0x08007dcd
 8007d78:	08007de1 	.word	0x08007de1
 8007d7c:	08007d5d 	.word	0x08007d5d
 8007d80:	08007d5d 	.word	0x08007d5d
 8007d84:	08007d5d 	.word	0x08007d5d
 8007d88:	08007d5d 	.word	0x08007d5d
 8007d8c:	08007de1 	.word	0x08007de1
 8007d90:	08007d5d 	.word	0x08007d5d
 8007d94:	08007d5d 	.word	0x08007d5d
 8007d98:	08007d5d 	.word	0x08007d5d
 8007d9c:	08007d5d 	.word	0x08007d5d
 8007da0:	08007eed 	.word	0x08007eed
 8007da4:	08007e11 	.word	0x08007e11
 8007da8:	08007ecf 	.word	0x08007ecf
 8007dac:	08007d5d 	.word	0x08007d5d
 8007db0:	08007d5d 	.word	0x08007d5d
 8007db4:	08007f0f 	.word	0x08007f0f
 8007db8:	08007d5d 	.word	0x08007d5d
 8007dbc:	08007e11 	.word	0x08007e11
 8007dc0:	08007d5d 	.word	0x08007d5d
 8007dc4:	08007d5d 	.word	0x08007d5d
 8007dc8:	08007ed7 	.word	0x08007ed7
 8007dcc:	682b      	ldr	r3, [r5, #0]
 8007dce:	1d1a      	adds	r2, r3, #4
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	602a      	str	r2, [r5, #0]
 8007dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e0a3      	b.n	8007f28 <_printf_i+0x1f4>
 8007de0:	6820      	ldr	r0, [r4, #0]
 8007de2:	6829      	ldr	r1, [r5, #0]
 8007de4:	0606      	lsls	r6, r0, #24
 8007de6:	f101 0304 	add.w	r3, r1, #4
 8007dea:	d50a      	bpl.n	8007e02 <_printf_i+0xce>
 8007dec:	680e      	ldr	r6, [r1, #0]
 8007dee:	602b      	str	r3, [r5, #0]
 8007df0:	2e00      	cmp	r6, #0
 8007df2:	da03      	bge.n	8007dfc <_printf_i+0xc8>
 8007df4:	232d      	movs	r3, #45	; 0x2d
 8007df6:	4276      	negs	r6, r6
 8007df8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dfc:	485e      	ldr	r0, [pc, #376]	; (8007f78 <_printf_i+0x244>)
 8007dfe:	230a      	movs	r3, #10
 8007e00:	e019      	b.n	8007e36 <_printf_i+0x102>
 8007e02:	680e      	ldr	r6, [r1, #0]
 8007e04:	602b      	str	r3, [r5, #0]
 8007e06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e0a:	bf18      	it	ne
 8007e0c:	b236      	sxthne	r6, r6
 8007e0e:	e7ef      	b.n	8007df0 <_printf_i+0xbc>
 8007e10:	682b      	ldr	r3, [r5, #0]
 8007e12:	6820      	ldr	r0, [r4, #0]
 8007e14:	1d19      	adds	r1, r3, #4
 8007e16:	6029      	str	r1, [r5, #0]
 8007e18:	0601      	lsls	r1, r0, #24
 8007e1a:	d501      	bpl.n	8007e20 <_printf_i+0xec>
 8007e1c:	681e      	ldr	r6, [r3, #0]
 8007e1e:	e002      	b.n	8007e26 <_printf_i+0xf2>
 8007e20:	0646      	lsls	r6, r0, #25
 8007e22:	d5fb      	bpl.n	8007e1c <_printf_i+0xe8>
 8007e24:	881e      	ldrh	r6, [r3, #0]
 8007e26:	4854      	ldr	r0, [pc, #336]	; (8007f78 <_printf_i+0x244>)
 8007e28:	2f6f      	cmp	r7, #111	; 0x6f
 8007e2a:	bf0c      	ite	eq
 8007e2c:	2308      	moveq	r3, #8
 8007e2e:	230a      	movne	r3, #10
 8007e30:	2100      	movs	r1, #0
 8007e32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e36:	6865      	ldr	r5, [r4, #4]
 8007e38:	60a5      	str	r5, [r4, #8]
 8007e3a:	2d00      	cmp	r5, #0
 8007e3c:	bfa2      	ittt	ge
 8007e3e:	6821      	ldrge	r1, [r4, #0]
 8007e40:	f021 0104 	bicge.w	r1, r1, #4
 8007e44:	6021      	strge	r1, [r4, #0]
 8007e46:	b90e      	cbnz	r6, 8007e4c <_printf_i+0x118>
 8007e48:	2d00      	cmp	r5, #0
 8007e4a:	d04d      	beq.n	8007ee8 <_printf_i+0x1b4>
 8007e4c:	4615      	mov	r5, r2
 8007e4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e52:	fb03 6711 	mls	r7, r3, r1, r6
 8007e56:	5dc7      	ldrb	r7, [r0, r7]
 8007e58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e5c:	4637      	mov	r7, r6
 8007e5e:	42bb      	cmp	r3, r7
 8007e60:	460e      	mov	r6, r1
 8007e62:	d9f4      	bls.n	8007e4e <_printf_i+0x11a>
 8007e64:	2b08      	cmp	r3, #8
 8007e66:	d10b      	bne.n	8007e80 <_printf_i+0x14c>
 8007e68:	6823      	ldr	r3, [r4, #0]
 8007e6a:	07de      	lsls	r6, r3, #31
 8007e6c:	d508      	bpl.n	8007e80 <_printf_i+0x14c>
 8007e6e:	6923      	ldr	r3, [r4, #16]
 8007e70:	6861      	ldr	r1, [r4, #4]
 8007e72:	4299      	cmp	r1, r3
 8007e74:	bfde      	ittt	le
 8007e76:	2330      	movle	r3, #48	; 0x30
 8007e78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e7c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007e80:	1b52      	subs	r2, r2, r5
 8007e82:	6122      	str	r2, [r4, #16]
 8007e84:	f8cd a000 	str.w	sl, [sp]
 8007e88:	464b      	mov	r3, r9
 8007e8a:	aa03      	add	r2, sp, #12
 8007e8c:	4621      	mov	r1, r4
 8007e8e:	4640      	mov	r0, r8
 8007e90:	f7ff fee2 	bl	8007c58 <_printf_common>
 8007e94:	3001      	adds	r0, #1
 8007e96:	d14c      	bne.n	8007f32 <_printf_i+0x1fe>
 8007e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e9c:	b004      	add	sp, #16
 8007e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ea2:	4835      	ldr	r0, [pc, #212]	; (8007f78 <_printf_i+0x244>)
 8007ea4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ea8:	6829      	ldr	r1, [r5, #0]
 8007eaa:	6823      	ldr	r3, [r4, #0]
 8007eac:	f851 6b04 	ldr.w	r6, [r1], #4
 8007eb0:	6029      	str	r1, [r5, #0]
 8007eb2:	061d      	lsls	r5, r3, #24
 8007eb4:	d514      	bpl.n	8007ee0 <_printf_i+0x1ac>
 8007eb6:	07df      	lsls	r7, r3, #31
 8007eb8:	bf44      	itt	mi
 8007eba:	f043 0320 	orrmi.w	r3, r3, #32
 8007ebe:	6023      	strmi	r3, [r4, #0]
 8007ec0:	b91e      	cbnz	r6, 8007eca <_printf_i+0x196>
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	f023 0320 	bic.w	r3, r3, #32
 8007ec8:	6023      	str	r3, [r4, #0]
 8007eca:	2310      	movs	r3, #16
 8007ecc:	e7b0      	b.n	8007e30 <_printf_i+0xfc>
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	f043 0320 	orr.w	r3, r3, #32
 8007ed4:	6023      	str	r3, [r4, #0]
 8007ed6:	2378      	movs	r3, #120	; 0x78
 8007ed8:	4828      	ldr	r0, [pc, #160]	; (8007f7c <_printf_i+0x248>)
 8007eda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ede:	e7e3      	b.n	8007ea8 <_printf_i+0x174>
 8007ee0:	0659      	lsls	r1, r3, #25
 8007ee2:	bf48      	it	mi
 8007ee4:	b2b6      	uxthmi	r6, r6
 8007ee6:	e7e6      	b.n	8007eb6 <_printf_i+0x182>
 8007ee8:	4615      	mov	r5, r2
 8007eea:	e7bb      	b.n	8007e64 <_printf_i+0x130>
 8007eec:	682b      	ldr	r3, [r5, #0]
 8007eee:	6826      	ldr	r6, [r4, #0]
 8007ef0:	6961      	ldr	r1, [r4, #20]
 8007ef2:	1d18      	adds	r0, r3, #4
 8007ef4:	6028      	str	r0, [r5, #0]
 8007ef6:	0635      	lsls	r5, r6, #24
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	d501      	bpl.n	8007f00 <_printf_i+0x1cc>
 8007efc:	6019      	str	r1, [r3, #0]
 8007efe:	e002      	b.n	8007f06 <_printf_i+0x1d2>
 8007f00:	0670      	lsls	r0, r6, #25
 8007f02:	d5fb      	bpl.n	8007efc <_printf_i+0x1c8>
 8007f04:	8019      	strh	r1, [r3, #0]
 8007f06:	2300      	movs	r3, #0
 8007f08:	6123      	str	r3, [r4, #16]
 8007f0a:	4615      	mov	r5, r2
 8007f0c:	e7ba      	b.n	8007e84 <_printf_i+0x150>
 8007f0e:	682b      	ldr	r3, [r5, #0]
 8007f10:	1d1a      	adds	r2, r3, #4
 8007f12:	602a      	str	r2, [r5, #0]
 8007f14:	681d      	ldr	r5, [r3, #0]
 8007f16:	6862      	ldr	r2, [r4, #4]
 8007f18:	2100      	movs	r1, #0
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	f7f8 f980 	bl	8000220 <memchr>
 8007f20:	b108      	cbz	r0, 8007f26 <_printf_i+0x1f2>
 8007f22:	1b40      	subs	r0, r0, r5
 8007f24:	6060      	str	r0, [r4, #4]
 8007f26:	6863      	ldr	r3, [r4, #4]
 8007f28:	6123      	str	r3, [r4, #16]
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f30:	e7a8      	b.n	8007e84 <_printf_i+0x150>
 8007f32:	6923      	ldr	r3, [r4, #16]
 8007f34:	462a      	mov	r2, r5
 8007f36:	4649      	mov	r1, r9
 8007f38:	4640      	mov	r0, r8
 8007f3a:	47d0      	blx	sl
 8007f3c:	3001      	adds	r0, #1
 8007f3e:	d0ab      	beq.n	8007e98 <_printf_i+0x164>
 8007f40:	6823      	ldr	r3, [r4, #0]
 8007f42:	079b      	lsls	r3, r3, #30
 8007f44:	d413      	bmi.n	8007f6e <_printf_i+0x23a>
 8007f46:	68e0      	ldr	r0, [r4, #12]
 8007f48:	9b03      	ldr	r3, [sp, #12]
 8007f4a:	4298      	cmp	r0, r3
 8007f4c:	bfb8      	it	lt
 8007f4e:	4618      	movlt	r0, r3
 8007f50:	e7a4      	b.n	8007e9c <_printf_i+0x168>
 8007f52:	2301      	movs	r3, #1
 8007f54:	4632      	mov	r2, r6
 8007f56:	4649      	mov	r1, r9
 8007f58:	4640      	mov	r0, r8
 8007f5a:	47d0      	blx	sl
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	d09b      	beq.n	8007e98 <_printf_i+0x164>
 8007f60:	3501      	adds	r5, #1
 8007f62:	68e3      	ldr	r3, [r4, #12]
 8007f64:	9903      	ldr	r1, [sp, #12]
 8007f66:	1a5b      	subs	r3, r3, r1
 8007f68:	42ab      	cmp	r3, r5
 8007f6a:	dcf2      	bgt.n	8007f52 <_printf_i+0x21e>
 8007f6c:	e7eb      	b.n	8007f46 <_printf_i+0x212>
 8007f6e:	2500      	movs	r5, #0
 8007f70:	f104 0619 	add.w	r6, r4, #25
 8007f74:	e7f5      	b.n	8007f62 <_printf_i+0x22e>
 8007f76:	bf00      	nop
 8007f78:	0800a5b6 	.word	0x0800a5b6
 8007f7c:	0800a5c7 	.word	0x0800a5c7

08007f80 <_sbrk_r>:
 8007f80:	b538      	push	{r3, r4, r5, lr}
 8007f82:	4d06      	ldr	r5, [pc, #24]	; (8007f9c <_sbrk_r+0x1c>)
 8007f84:	2300      	movs	r3, #0
 8007f86:	4604      	mov	r4, r0
 8007f88:	4608      	mov	r0, r1
 8007f8a:	602b      	str	r3, [r5, #0]
 8007f8c:	f7fc f9ca 	bl	8004324 <_sbrk>
 8007f90:	1c43      	adds	r3, r0, #1
 8007f92:	d102      	bne.n	8007f9a <_sbrk_r+0x1a>
 8007f94:	682b      	ldr	r3, [r5, #0]
 8007f96:	b103      	cbz	r3, 8007f9a <_sbrk_r+0x1a>
 8007f98:	6023      	str	r3, [r4, #0]
 8007f9a:	bd38      	pop	{r3, r4, r5, pc}
 8007f9c:	20002984 	.word	0x20002984

08007fa0 <siprintf>:
 8007fa0:	b40e      	push	{r1, r2, r3}
 8007fa2:	b500      	push	{lr}
 8007fa4:	b09c      	sub	sp, #112	; 0x70
 8007fa6:	ab1d      	add	r3, sp, #116	; 0x74
 8007fa8:	9002      	str	r0, [sp, #8]
 8007faa:	9006      	str	r0, [sp, #24]
 8007fac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007fb0:	4809      	ldr	r0, [pc, #36]	; (8007fd8 <siprintf+0x38>)
 8007fb2:	9107      	str	r1, [sp, #28]
 8007fb4:	9104      	str	r1, [sp, #16]
 8007fb6:	4909      	ldr	r1, [pc, #36]	; (8007fdc <siprintf+0x3c>)
 8007fb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fbc:	9105      	str	r1, [sp, #20]
 8007fbe:	6800      	ldr	r0, [r0, #0]
 8007fc0:	9301      	str	r3, [sp, #4]
 8007fc2:	a902      	add	r1, sp, #8
 8007fc4:	f001 faae 	bl	8009524 <_svfiprintf_r>
 8007fc8:	9b02      	ldr	r3, [sp, #8]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	701a      	strb	r2, [r3, #0]
 8007fce:	b01c      	add	sp, #112	; 0x70
 8007fd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fd4:	b003      	add	sp, #12
 8007fd6:	4770      	bx	lr
 8007fd8:	200023d4 	.word	0x200023d4
 8007fdc:	ffff0208 	.word	0xffff0208

08007fe0 <strncat>:
 8007fe0:	b530      	push	{r4, r5, lr}
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	7825      	ldrb	r5, [r4, #0]
 8007fe6:	4623      	mov	r3, r4
 8007fe8:	3401      	adds	r4, #1
 8007fea:	2d00      	cmp	r5, #0
 8007fec:	d1fa      	bne.n	8007fe4 <strncat+0x4>
 8007fee:	3a01      	subs	r2, #1
 8007ff0:	d304      	bcc.n	8007ffc <strncat+0x1c>
 8007ff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ff6:	f803 4b01 	strb.w	r4, [r3], #1
 8007ffa:	b904      	cbnz	r4, 8007ffe <strncat+0x1e>
 8007ffc:	bd30      	pop	{r4, r5, pc}
 8007ffe:	2a00      	cmp	r2, #0
 8008000:	d1f5      	bne.n	8007fee <strncat+0xe>
 8008002:	701a      	strb	r2, [r3, #0]
 8008004:	e7f3      	b.n	8007fee <strncat+0xe>

08008006 <quorem>:
 8008006:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800800a:	6903      	ldr	r3, [r0, #16]
 800800c:	690c      	ldr	r4, [r1, #16]
 800800e:	42a3      	cmp	r3, r4
 8008010:	4607      	mov	r7, r0
 8008012:	f2c0 8081 	blt.w	8008118 <quorem+0x112>
 8008016:	3c01      	subs	r4, #1
 8008018:	f101 0814 	add.w	r8, r1, #20
 800801c:	f100 0514 	add.w	r5, r0, #20
 8008020:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008024:	9301      	str	r3, [sp, #4]
 8008026:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800802a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800802e:	3301      	adds	r3, #1
 8008030:	429a      	cmp	r2, r3
 8008032:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008036:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800803a:	fbb2 f6f3 	udiv	r6, r2, r3
 800803e:	d331      	bcc.n	80080a4 <quorem+0x9e>
 8008040:	f04f 0e00 	mov.w	lr, #0
 8008044:	4640      	mov	r0, r8
 8008046:	46ac      	mov	ip, r5
 8008048:	46f2      	mov	sl, lr
 800804a:	f850 2b04 	ldr.w	r2, [r0], #4
 800804e:	b293      	uxth	r3, r2
 8008050:	fb06 e303 	mla	r3, r6, r3, lr
 8008054:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008058:	b29b      	uxth	r3, r3
 800805a:	ebaa 0303 	sub.w	r3, sl, r3
 800805e:	f8dc a000 	ldr.w	sl, [ip]
 8008062:	0c12      	lsrs	r2, r2, #16
 8008064:	fa13 f38a 	uxtah	r3, r3, sl
 8008068:	fb06 e202 	mla	r2, r6, r2, lr
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	9b00      	ldr	r3, [sp, #0]
 8008070:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008074:	b292      	uxth	r2, r2
 8008076:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800807a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800807e:	f8bd 3000 	ldrh.w	r3, [sp]
 8008082:	4581      	cmp	r9, r0
 8008084:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008088:	f84c 3b04 	str.w	r3, [ip], #4
 800808c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008090:	d2db      	bcs.n	800804a <quorem+0x44>
 8008092:	f855 300b 	ldr.w	r3, [r5, fp]
 8008096:	b92b      	cbnz	r3, 80080a4 <quorem+0x9e>
 8008098:	9b01      	ldr	r3, [sp, #4]
 800809a:	3b04      	subs	r3, #4
 800809c:	429d      	cmp	r5, r3
 800809e:	461a      	mov	r2, r3
 80080a0:	d32e      	bcc.n	8008100 <quorem+0xfa>
 80080a2:	613c      	str	r4, [r7, #16]
 80080a4:	4638      	mov	r0, r7
 80080a6:	f001 f8c9 	bl	800923c <__mcmp>
 80080aa:	2800      	cmp	r0, #0
 80080ac:	db24      	blt.n	80080f8 <quorem+0xf2>
 80080ae:	3601      	adds	r6, #1
 80080b0:	4628      	mov	r0, r5
 80080b2:	f04f 0c00 	mov.w	ip, #0
 80080b6:	f858 2b04 	ldr.w	r2, [r8], #4
 80080ba:	f8d0 e000 	ldr.w	lr, [r0]
 80080be:	b293      	uxth	r3, r2
 80080c0:	ebac 0303 	sub.w	r3, ip, r3
 80080c4:	0c12      	lsrs	r2, r2, #16
 80080c6:	fa13 f38e 	uxtah	r3, r3, lr
 80080ca:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80080ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080d8:	45c1      	cmp	r9, r8
 80080da:	f840 3b04 	str.w	r3, [r0], #4
 80080de:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80080e2:	d2e8      	bcs.n	80080b6 <quorem+0xb0>
 80080e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080ec:	b922      	cbnz	r2, 80080f8 <quorem+0xf2>
 80080ee:	3b04      	subs	r3, #4
 80080f0:	429d      	cmp	r5, r3
 80080f2:	461a      	mov	r2, r3
 80080f4:	d30a      	bcc.n	800810c <quorem+0x106>
 80080f6:	613c      	str	r4, [r7, #16]
 80080f8:	4630      	mov	r0, r6
 80080fa:	b003      	add	sp, #12
 80080fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008100:	6812      	ldr	r2, [r2, #0]
 8008102:	3b04      	subs	r3, #4
 8008104:	2a00      	cmp	r2, #0
 8008106:	d1cc      	bne.n	80080a2 <quorem+0x9c>
 8008108:	3c01      	subs	r4, #1
 800810a:	e7c7      	b.n	800809c <quorem+0x96>
 800810c:	6812      	ldr	r2, [r2, #0]
 800810e:	3b04      	subs	r3, #4
 8008110:	2a00      	cmp	r2, #0
 8008112:	d1f0      	bne.n	80080f6 <quorem+0xf0>
 8008114:	3c01      	subs	r4, #1
 8008116:	e7eb      	b.n	80080f0 <quorem+0xea>
 8008118:	2000      	movs	r0, #0
 800811a:	e7ee      	b.n	80080fa <quorem+0xf4>
 800811c:	0000      	movs	r0, r0
	...

08008120 <_dtoa_r>:
 8008120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008124:	ed2d 8b04 	vpush	{d8-d9}
 8008128:	ec57 6b10 	vmov	r6, r7, d0
 800812c:	b093      	sub	sp, #76	; 0x4c
 800812e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008130:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008134:	9106      	str	r1, [sp, #24]
 8008136:	ee10 aa10 	vmov	sl, s0
 800813a:	4604      	mov	r4, r0
 800813c:	9209      	str	r2, [sp, #36]	; 0x24
 800813e:	930c      	str	r3, [sp, #48]	; 0x30
 8008140:	46bb      	mov	fp, r7
 8008142:	b975      	cbnz	r5, 8008162 <_dtoa_r+0x42>
 8008144:	2010      	movs	r0, #16
 8008146:	f7ff f9b9 	bl	80074bc <malloc>
 800814a:	4602      	mov	r2, r0
 800814c:	6260      	str	r0, [r4, #36]	; 0x24
 800814e:	b920      	cbnz	r0, 800815a <_dtoa_r+0x3a>
 8008150:	4ba7      	ldr	r3, [pc, #668]	; (80083f0 <_dtoa_r+0x2d0>)
 8008152:	21ea      	movs	r1, #234	; 0xea
 8008154:	48a7      	ldr	r0, [pc, #668]	; (80083f4 <_dtoa_r+0x2d4>)
 8008156:	f001 fae5 	bl	8009724 <__assert_func>
 800815a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800815e:	6005      	str	r5, [r0, #0]
 8008160:	60c5      	str	r5, [r0, #12]
 8008162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008164:	6819      	ldr	r1, [r3, #0]
 8008166:	b151      	cbz	r1, 800817e <_dtoa_r+0x5e>
 8008168:	685a      	ldr	r2, [r3, #4]
 800816a:	604a      	str	r2, [r1, #4]
 800816c:	2301      	movs	r3, #1
 800816e:	4093      	lsls	r3, r2
 8008170:	608b      	str	r3, [r1, #8]
 8008172:	4620      	mov	r0, r4
 8008174:	f000 fe20 	bl	8008db8 <_Bfree>
 8008178:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800817a:	2200      	movs	r2, #0
 800817c:	601a      	str	r2, [r3, #0]
 800817e:	1e3b      	subs	r3, r7, #0
 8008180:	bfaa      	itet	ge
 8008182:	2300      	movge	r3, #0
 8008184:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008188:	f8c8 3000 	strge.w	r3, [r8]
 800818c:	4b9a      	ldr	r3, [pc, #616]	; (80083f8 <_dtoa_r+0x2d8>)
 800818e:	bfbc      	itt	lt
 8008190:	2201      	movlt	r2, #1
 8008192:	f8c8 2000 	strlt.w	r2, [r8]
 8008196:	ea33 030b 	bics.w	r3, r3, fp
 800819a:	d11b      	bne.n	80081d4 <_dtoa_r+0xb4>
 800819c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800819e:	f242 730f 	movw	r3, #9999	; 0x270f
 80081a2:	6013      	str	r3, [r2, #0]
 80081a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081a8:	4333      	orrs	r3, r6
 80081aa:	f000 8592 	beq.w	8008cd2 <_dtoa_r+0xbb2>
 80081ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081b0:	b963      	cbnz	r3, 80081cc <_dtoa_r+0xac>
 80081b2:	4b92      	ldr	r3, [pc, #584]	; (80083fc <_dtoa_r+0x2dc>)
 80081b4:	e022      	b.n	80081fc <_dtoa_r+0xdc>
 80081b6:	4b92      	ldr	r3, [pc, #584]	; (8008400 <_dtoa_r+0x2e0>)
 80081b8:	9301      	str	r3, [sp, #4]
 80081ba:	3308      	adds	r3, #8
 80081bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80081be:	6013      	str	r3, [r2, #0]
 80081c0:	9801      	ldr	r0, [sp, #4]
 80081c2:	b013      	add	sp, #76	; 0x4c
 80081c4:	ecbd 8b04 	vpop	{d8-d9}
 80081c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081cc:	4b8b      	ldr	r3, [pc, #556]	; (80083fc <_dtoa_r+0x2dc>)
 80081ce:	9301      	str	r3, [sp, #4]
 80081d0:	3303      	adds	r3, #3
 80081d2:	e7f3      	b.n	80081bc <_dtoa_r+0x9c>
 80081d4:	2200      	movs	r2, #0
 80081d6:	2300      	movs	r3, #0
 80081d8:	4650      	mov	r0, sl
 80081da:	4659      	mov	r1, fp
 80081dc:	f7f8 fc94 	bl	8000b08 <__aeabi_dcmpeq>
 80081e0:	ec4b ab19 	vmov	d9, sl, fp
 80081e4:	4680      	mov	r8, r0
 80081e6:	b158      	cbz	r0, 8008200 <_dtoa_r+0xe0>
 80081e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081ea:	2301      	movs	r3, #1
 80081ec:	6013      	str	r3, [r2, #0]
 80081ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f000 856b 	beq.w	8008ccc <_dtoa_r+0xbac>
 80081f6:	4883      	ldr	r0, [pc, #524]	; (8008404 <_dtoa_r+0x2e4>)
 80081f8:	6018      	str	r0, [r3, #0]
 80081fa:	1e43      	subs	r3, r0, #1
 80081fc:	9301      	str	r3, [sp, #4]
 80081fe:	e7df      	b.n	80081c0 <_dtoa_r+0xa0>
 8008200:	ec4b ab10 	vmov	d0, sl, fp
 8008204:	aa10      	add	r2, sp, #64	; 0x40
 8008206:	a911      	add	r1, sp, #68	; 0x44
 8008208:	4620      	mov	r0, r4
 800820a:	f001 f8bd 	bl	8009388 <__d2b>
 800820e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008212:	ee08 0a10 	vmov	s16, r0
 8008216:	2d00      	cmp	r5, #0
 8008218:	f000 8084 	beq.w	8008324 <_dtoa_r+0x204>
 800821c:	ee19 3a90 	vmov	r3, s19
 8008220:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008224:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008228:	4656      	mov	r6, sl
 800822a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800822e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008232:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008236:	4b74      	ldr	r3, [pc, #464]	; (8008408 <_dtoa_r+0x2e8>)
 8008238:	2200      	movs	r2, #0
 800823a:	4630      	mov	r0, r6
 800823c:	4639      	mov	r1, r7
 800823e:	f7f8 f843 	bl	80002c8 <__aeabi_dsub>
 8008242:	a365      	add	r3, pc, #404	; (adr r3, 80083d8 <_dtoa_r+0x2b8>)
 8008244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008248:	f7f8 f9f6 	bl	8000638 <__aeabi_dmul>
 800824c:	a364      	add	r3, pc, #400	; (adr r3, 80083e0 <_dtoa_r+0x2c0>)
 800824e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008252:	f7f8 f83b 	bl	80002cc <__adddf3>
 8008256:	4606      	mov	r6, r0
 8008258:	4628      	mov	r0, r5
 800825a:	460f      	mov	r7, r1
 800825c:	f7f8 f982 	bl	8000564 <__aeabi_i2d>
 8008260:	a361      	add	r3, pc, #388	; (adr r3, 80083e8 <_dtoa_r+0x2c8>)
 8008262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008266:	f7f8 f9e7 	bl	8000638 <__aeabi_dmul>
 800826a:	4602      	mov	r2, r0
 800826c:	460b      	mov	r3, r1
 800826e:	4630      	mov	r0, r6
 8008270:	4639      	mov	r1, r7
 8008272:	f7f8 f82b 	bl	80002cc <__adddf3>
 8008276:	4606      	mov	r6, r0
 8008278:	460f      	mov	r7, r1
 800827a:	f7f8 fc8d 	bl	8000b98 <__aeabi_d2iz>
 800827e:	2200      	movs	r2, #0
 8008280:	9000      	str	r0, [sp, #0]
 8008282:	2300      	movs	r3, #0
 8008284:	4630      	mov	r0, r6
 8008286:	4639      	mov	r1, r7
 8008288:	f7f8 fc48 	bl	8000b1c <__aeabi_dcmplt>
 800828c:	b150      	cbz	r0, 80082a4 <_dtoa_r+0x184>
 800828e:	9800      	ldr	r0, [sp, #0]
 8008290:	f7f8 f968 	bl	8000564 <__aeabi_i2d>
 8008294:	4632      	mov	r2, r6
 8008296:	463b      	mov	r3, r7
 8008298:	f7f8 fc36 	bl	8000b08 <__aeabi_dcmpeq>
 800829c:	b910      	cbnz	r0, 80082a4 <_dtoa_r+0x184>
 800829e:	9b00      	ldr	r3, [sp, #0]
 80082a0:	3b01      	subs	r3, #1
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	9b00      	ldr	r3, [sp, #0]
 80082a6:	2b16      	cmp	r3, #22
 80082a8:	d85a      	bhi.n	8008360 <_dtoa_r+0x240>
 80082aa:	9a00      	ldr	r2, [sp, #0]
 80082ac:	4b57      	ldr	r3, [pc, #348]	; (800840c <_dtoa_r+0x2ec>)
 80082ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b6:	ec51 0b19 	vmov	r0, r1, d9
 80082ba:	f7f8 fc2f 	bl	8000b1c <__aeabi_dcmplt>
 80082be:	2800      	cmp	r0, #0
 80082c0:	d050      	beq.n	8008364 <_dtoa_r+0x244>
 80082c2:	9b00      	ldr	r3, [sp, #0]
 80082c4:	3b01      	subs	r3, #1
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	2300      	movs	r3, #0
 80082ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80082cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082ce:	1b5d      	subs	r5, r3, r5
 80082d0:	1e6b      	subs	r3, r5, #1
 80082d2:	9305      	str	r3, [sp, #20]
 80082d4:	bf45      	ittet	mi
 80082d6:	f1c5 0301 	rsbmi	r3, r5, #1
 80082da:	9304      	strmi	r3, [sp, #16]
 80082dc:	2300      	movpl	r3, #0
 80082de:	2300      	movmi	r3, #0
 80082e0:	bf4c      	ite	mi
 80082e2:	9305      	strmi	r3, [sp, #20]
 80082e4:	9304      	strpl	r3, [sp, #16]
 80082e6:	9b00      	ldr	r3, [sp, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	db3d      	blt.n	8008368 <_dtoa_r+0x248>
 80082ec:	9b05      	ldr	r3, [sp, #20]
 80082ee:	9a00      	ldr	r2, [sp, #0]
 80082f0:	920a      	str	r2, [sp, #40]	; 0x28
 80082f2:	4413      	add	r3, r2
 80082f4:	9305      	str	r3, [sp, #20]
 80082f6:	2300      	movs	r3, #0
 80082f8:	9307      	str	r3, [sp, #28]
 80082fa:	9b06      	ldr	r3, [sp, #24]
 80082fc:	2b09      	cmp	r3, #9
 80082fe:	f200 8089 	bhi.w	8008414 <_dtoa_r+0x2f4>
 8008302:	2b05      	cmp	r3, #5
 8008304:	bfc4      	itt	gt
 8008306:	3b04      	subgt	r3, #4
 8008308:	9306      	strgt	r3, [sp, #24]
 800830a:	9b06      	ldr	r3, [sp, #24]
 800830c:	f1a3 0302 	sub.w	r3, r3, #2
 8008310:	bfcc      	ite	gt
 8008312:	2500      	movgt	r5, #0
 8008314:	2501      	movle	r5, #1
 8008316:	2b03      	cmp	r3, #3
 8008318:	f200 8087 	bhi.w	800842a <_dtoa_r+0x30a>
 800831c:	e8df f003 	tbb	[pc, r3]
 8008320:	59383a2d 	.word	0x59383a2d
 8008324:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008328:	441d      	add	r5, r3
 800832a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800832e:	2b20      	cmp	r3, #32
 8008330:	bfc1      	itttt	gt
 8008332:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008336:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800833a:	fa0b f303 	lslgt.w	r3, fp, r3
 800833e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008342:	bfda      	itte	le
 8008344:	f1c3 0320 	rsble	r3, r3, #32
 8008348:	fa06 f003 	lslle.w	r0, r6, r3
 800834c:	4318      	orrgt	r0, r3
 800834e:	f7f8 f8f9 	bl	8000544 <__aeabi_ui2d>
 8008352:	2301      	movs	r3, #1
 8008354:	4606      	mov	r6, r0
 8008356:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800835a:	3d01      	subs	r5, #1
 800835c:	930e      	str	r3, [sp, #56]	; 0x38
 800835e:	e76a      	b.n	8008236 <_dtoa_r+0x116>
 8008360:	2301      	movs	r3, #1
 8008362:	e7b2      	b.n	80082ca <_dtoa_r+0x1aa>
 8008364:	900b      	str	r0, [sp, #44]	; 0x2c
 8008366:	e7b1      	b.n	80082cc <_dtoa_r+0x1ac>
 8008368:	9b04      	ldr	r3, [sp, #16]
 800836a:	9a00      	ldr	r2, [sp, #0]
 800836c:	1a9b      	subs	r3, r3, r2
 800836e:	9304      	str	r3, [sp, #16]
 8008370:	4253      	negs	r3, r2
 8008372:	9307      	str	r3, [sp, #28]
 8008374:	2300      	movs	r3, #0
 8008376:	930a      	str	r3, [sp, #40]	; 0x28
 8008378:	e7bf      	b.n	80082fa <_dtoa_r+0x1da>
 800837a:	2300      	movs	r3, #0
 800837c:	9308      	str	r3, [sp, #32]
 800837e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008380:	2b00      	cmp	r3, #0
 8008382:	dc55      	bgt.n	8008430 <_dtoa_r+0x310>
 8008384:	2301      	movs	r3, #1
 8008386:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800838a:	461a      	mov	r2, r3
 800838c:	9209      	str	r2, [sp, #36]	; 0x24
 800838e:	e00c      	b.n	80083aa <_dtoa_r+0x28a>
 8008390:	2301      	movs	r3, #1
 8008392:	e7f3      	b.n	800837c <_dtoa_r+0x25c>
 8008394:	2300      	movs	r3, #0
 8008396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008398:	9308      	str	r3, [sp, #32]
 800839a:	9b00      	ldr	r3, [sp, #0]
 800839c:	4413      	add	r3, r2
 800839e:	9302      	str	r3, [sp, #8]
 80083a0:	3301      	adds	r3, #1
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	9303      	str	r3, [sp, #12]
 80083a6:	bfb8      	it	lt
 80083a8:	2301      	movlt	r3, #1
 80083aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80083ac:	2200      	movs	r2, #0
 80083ae:	6042      	str	r2, [r0, #4]
 80083b0:	2204      	movs	r2, #4
 80083b2:	f102 0614 	add.w	r6, r2, #20
 80083b6:	429e      	cmp	r6, r3
 80083b8:	6841      	ldr	r1, [r0, #4]
 80083ba:	d93d      	bls.n	8008438 <_dtoa_r+0x318>
 80083bc:	4620      	mov	r0, r4
 80083be:	f000 fcbb 	bl	8008d38 <_Balloc>
 80083c2:	9001      	str	r0, [sp, #4]
 80083c4:	2800      	cmp	r0, #0
 80083c6:	d13b      	bne.n	8008440 <_dtoa_r+0x320>
 80083c8:	4b11      	ldr	r3, [pc, #68]	; (8008410 <_dtoa_r+0x2f0>)
 80083ca:	4602      	mov	r2, r0
 80083cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80083d0:	e6c0      	b.n	8008154 <_dtoa_r+0x34>
 80083d2:	2301      	movs	r3, #1
 80083d4:	e7df      	b.n	8008396 <_dtoa_r+0x276>
 80083d6:	bf00      	nop
 80083d8:	636f4361 	.word	0x636f4361
 80083dc:	3fd287a7 	.word	0x3fd287a7
 80083e0:	8b60c8b3 	.word	0x8b60c8b3
 80083e4:	3fc68a28 	.word	0x3fc68a28
 80083e8:	509f79fb 	.word	0x509f79fb
 80083ec:	3fd34413 	.word	0x3fd34413
 80083f0:	0800a5e5 	.word	0x0800a5e5
 80083f4:	0800a5fc 	.word	0x0800a5fc
 80083f8:	7ff00000 	.word	0x7ff00000
 80083fc:	0800a5e1 	.word	0x0800a5e1
 8008400:	0800a5d8 	.word	0x0800a5d8
 8008404:	0800a5b5 	.word	0x0800a5b5
 8008408:	3ff80000 	.word	0x3ff80000
 800840c:	0800a6f0 	.word	0x0800a6f0
 8008410:	0800a657 	.word	0x0800a657
 8008414:	2501      	movs	r5, #1
 8008416:	2300      	movs	r3, #0
 8008418:	9306      	str	r3, [sp, #24]
 800841a:	9508      	str	r5, [sp, #32]
 800841c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008420:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008424:	2200      	movs	r2, #0
 8008426:	2312      	movs	r3, #18
 8008428:	e7b0      	b.n	800838c <_dtoa_r+0x26c>
 800842a:	2301      	movs	r3, #1
 800842c:	9308      	str	r3, [sp, #32]
 800842e:	e7f5      	b.n	800841c <_dtoa_r+0x2fc>
 8008430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008432:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008436:	e7b8      	b.n	80083aa <_dtoa_r+0x28a>
 8008438:	3101      	adds	r1, #1
 800843a:	6041      	str	r1, [r0, #4]
 800843c:	0052      	lsls	r2, r2, #1
 800843e:	e7b8      	b.n	80083b2 <_dtoa_r+0x292>
 8008440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008442:	9a01      	ldr	r2, [sp, #4]
 8008444:	601a      	str	r2, [r3, #0]
 8008446:	9b03      	ldr	r3, [sp, #12]
 8008448:	2b0e      	cmp	r3, #14
 800844a:	f200 809d 	bhi.w	8008588 <_dtoa_r+0x468>
 800844e:	2d00      	cmp	r5, #0
 8008450:	f000 809a 	beq.w	8008588 <_dtoa_r+0x468>
 8008454:	9b00      	ldr	r3, [sp, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	dd32      	ble.n	80084c0 <_dtoa_r+0x3a0>
 800845a:	4ab7      	ldr	r2, [pc, #732]	; (8008738 <_dtoa_r+0x618>)
 800845c:	f003 030f 	and.w	r3, r3, #15
 8008460:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008464:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008468:	9b00      	ldr	r3, [sp, #0]
 800846a:	05d8      	lsls	r0, r3, #23
 800846c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008470:	d516      	bpl.n	80084a0 <_dtoa_r+0x380>
 8008472:	4bb2      	ldr	r3, [pc, #712]	; (800873c <_dtoa_r+0x61c>)
 8008474:	ec51 0b19 	vmov	r0, r1, d9
 8008478:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800847c:	f7f8 fa06 	bl	800088c <__aeabi_ddiv>
 8008480:	f007 070f 	and.w	r7, r7, #15
 8008484:	4682      	mov	sl, r0
 8008486:	468b      	mov	fp, r1
 8008488:	2503      	movs	r5, #3
 800848a:	4eac      	ldr	r6, [pc, #688]	; (800873c <_dtoa_r+0x61c>)
 800848c:	b957      	cbnz	r7, 80084a4 <_dtoa_r+0x384>
 800848e:	4642      	mov	r2, r8
 8008490:	464b      	mov	r3, r9
 8008492:	4650      	mov	r0, sl
 8008494:	4659      	mov	r1, fp
 8008496:	f7f8 f9f9 	bl	800088c <__aeabi_ddiv>
 800849a:	4682      	mov	sl, r0
 800849c:	468b      	mov	fp, r1
 800849e:	e028      	b.n	80084f2 <_dtoa_r+0x3d2>
 80084a0:	2502      	movs	r5, #2
 80084a2:	e7f2      	b.n	800848a <_dtoa_r+0x36a>
 80084a4:	07f9      	lsls	r1, r7, #31
 80084a6:	d508      	bpl.n	80084ba <_dtoa_r+0x39a>
 80084a8:	4640      	mov	r0, r8
 80084aa:	4649      	mov	r1, r9
 80084ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80084b0:	f7f8 f8c2 	bl	8000638 <__aeabi_dmul>
 80084b4:	3501      	adds	r5, #1
 80084b6:	4680      	mov	r8, r0
 80084b8:	4689      	mov	r9, r1
 80084ba:	107f      	asrs	r7, r7, #1
 80084bc:	3608      	adds	r6, #8
 80084be:	e7e5      	b.n	800848c <_dtoa_r+0x36c>
 80084c0:	f000 809b 	beq.w	80085fa <_dtoa_r+0x4da>
 80084c4:	9b00      	ldr	r3, [sp, #0]
 80084c6:	4f9d      	ldr	r7, [pc, #628]	; (800873c <_dtoa_r+0x61c>)
 80084c8:	425e      	negs	r6, r3
 80084ca:	4b9b      	ldr	r3, [pc, #620]	; (8008738 <_dtoa_r+0x618>)
 80084cc:	f006 020f 	and.w	r2, r6, #15
 80084d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d8:	ec51 0b19 	vmov	r0, r1, d9
 80084dc:	f7f8 f8ac 	bl	8000638 <__aeabi_dmul>
 80084e0:	1136      	asrs	r6, r6, #4
 80084e2:	4682      	mov	sl, r0
 80084e4:	468b      	mov	fp, r1
 80084e6:	2300      	movs	r3, #0
 80084e8:	2502      	movs	r5, #2
 80084ea:	2e00      	cmp	r6, #0
 80084ec:	d17a      	bne.n	80085e4 <_dtoa_r+0x4c4>
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1d3      	bne.n	800849a <_dtoa_r+0x37a>
 80084f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f000 8082 	beq.w	80085fe <_dtoa_r+0x4de>
 80084fa:	4b91      	ldr	r3, [pc, #580]	; (8008740 <_dtoa_r+0x620>)
 80084fc:	2200      	movs	r2, #0
 80084fe:	4650      	mov	r0, sl
 8008500:	4659      	mov	r1, fp
 8008502:	f7f8 fb0b 	bl	8000b1c <__aeabi_dcmplt>
 8008506:	2800      	cmp	r0, #0
 8008508:	d079      	beq.n	80085fe <_dtoa_r+0x4de>
 800850a:	9b03      	ldr	r3, [sp, #12]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d076      	beq.n	80085fe <_dtoa_r+0x4de>
 8008510:	9b02      	ldr	r3, [sp, #8]
 8008512:	2b00      	cmp	r3, #0
 8008514:	dd36      	ble.n	8008584 <_dtoa_r+0x464>
 8008516:	9b00      	ldr	r3, [sp, #0]
 8008518:	4650      	mov	r0, sl
 800851a:	4659      	mov	r1, fp
 800851c:	1e5f      	subs	r7, r3, #1
 800851e:	2200      	movs	r2, #0
 8008520:	4b88      	ldr	r3, [pc, #544]	; (8008744 <_dtoa_r+0x624>)
 8008522:	f7f8 f889 	bl	8000638 <__aeabi_dmul>
 8008526:	9e02      	ldr	r6, [sp, #8]
 8008528:	4682      	mov	sl, r0
 800852a:	468b      	mov	fp, r1
 800852c:	3501      	adds	r5, #1
 800852e:	4628      	mov	r0, r5
 8008530:	f7f8 f818 	bl	8000564 <__aeabi_i2d>
 8008534:	4652      	mov	r2, sl
 8008536:	465b      	mov	r3, fp
 8008538:	f7f8 f87e 	bl	8000638 <__aeabi_dmul>
 800853c:	4b82      	ldr	r3, [pc, #520]	; (8008748 <_dtoa_r+0x628>)
 800853e:	2200      	movs	r2, #0
 8008540:	f7f7 fec4 	bl	80002cc <__adddf3>
 8008544:	46d0      	mov	r8, sl
 8008546:	46d9      	mov	r9, fp
 8008548:	4682      	mov	sl, r0
 800854a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800854e:	2e00      	cmp	r6, #0
 8008550:	d158      	bne.n	8008604 <_dtoa_r+0x4e4>
 8008552:	4b7e      	ldr	r3, [pc, #504]	; (800874c <_dtoa_r+0x62c>)
 8008554:	2200      	movs	r2, #0
 8008556:	4640      	mov	r0, r8
 8008558:	4649      	mov	r1, r9
 800855a:	f7f7 feb5 	bl	80002c8 <__aeabi_dsub>
 800855e:	4652      	mov	r2, sl
 8008560:	465b      	mov	r3, fp
 8008562:	4680      	mov	r8, r0
 8008564:	4689      	mov	r9, r1
 8008566:	f7f8 faf7 	bl	8000b58 <__aeabi_dcmpgt>
 800856a:	2800      	cmp	r0, #0
 800856c:	f040 8295 	bne.w	8008a9a <_dtoa_r+0x97a>
 8008570:	4652      	mov	r2, sl
 8008572:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008576:	4640      	mov	r0, r8
 8008578:	4649      	mov	r1, r9
 800857a:	f7f8 facf 	bl	8000b1c <__aeabi_dcmplt>
 800857e:	2800      	cmp	r0, #0
 8008580:	f040 8289 	bne.w	8008a96 <_dtoa_r+0x976>
 8008584:	ec5b ab19 	vmov	sl, fp, d9
 8008588:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800858a:	2b00      	cmp	r3, #0
 800858c:	f2c0 8148 	blt.w	8008820 <_dtoa_r+0x700>
 8008590:	9a00      	ldr	r2, [sp, #0]
 8008592:	2a0e      	cmp	r2, #14
 8008594:	f300 8144 	bgt.w	8008820 <_dtoa_r+0x700>
 8008598:	4b67      	ldr	r3, [pc, #412]	; (8008738 <_dtoa_r+0x618>)
 800859a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800859e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f280 80d5 	bge.w	8008754 <_dtoa_r+0x634>
 80085aa:	9b03      	ldr	r3, [sp, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f300 80d1 	bgt.w	8008754 <_dtoa_r+0x634>
 80085b2:	f040 826f 	bne.w	8008a94 <_dtoa_r+0x974>
 80085b6:	4b65      	ldr	r3, [pc, #404]	; (800874c <_dtoa_r+0x62c>)
 80085b8:	2200      	movs	r2, #0
 80085ba:	4640      	mov	r0, r8
 80085bc:	4649      	mov	r1, r9
 80085be:	f7f8 f83b 	bl	8000638 <__aeabi_dmul>
 80085c2:	4652      	mov	r2, sl
 80085c4:	465b      	mov	r3, fp
 80085c6:	f7f8 fabd 	bl	8000b44 <__aeabi_dcmpge>
 80085ca:	9e03      	ldr	r6, [sp, #12]
 80085cc:	4637      	mov	r7, r6
 80085ce:	2800      	cmp	r0, #0
 80085d0:	f040 8245 	bne.w	8008a5e <_dtoa_r+0x93e>
 80085d4:	9d01      	ldr	r5, [sp, #4]
 80085d6:	2331      	movs	r3, #49	; 0x31
 80085d8:	f805 3b01 	strb.w	r3, [r5], #1
 80085dc:	9b00      	ldr	r3, [sp, #0]
 80085de:	3301      	adds	r3, #1
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	e240      	b.n	8008a66 <_dtoa_r+0x946>
 80085e4:	07f2      	lsls	r2, r6, #31
 80085e6:	d505      	bpl.n	80085f4 <_dtoa_r+0x4d4>
 80085e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085ec:	f7f8 f824 	bl	8000638 <__aeabi_dmul>
 80085f0:	3501      	adds	r5, #1
 80085f2:	2301      	movs	r3, #1
 80085f4:	1076      	asrs	r6, r6, #1
 80085f6:	3708      	adds	r7, #8
 80085f8:	e777      	b.n	80084ea <_dtoa_r+0x3ca>
 80085fa:	2502      	movs	r5, #2
 80085fc:	e779      	b.n	80084f2 <_dtoa_r+0x3d2>
 80085fe:	9f00      	ldr	r7, [sp, #0]
 8008600:	9e03      	ldr	r6, [sp, #12]
 8008602:	e794      	b.n	800852e <_dtoa_r+0x40e>
 8008604:	9901      	ldr	r1, [sp, #4]
 8008606:	4b4c      	ldr	r3, [pc, #304]	; (8008738 <_dtoa_r+0x618>)
 8008608:	4431      	add	r1, r6
 800860a:	910d      	str	r1, [sp, #52]	; 0x34
 800860c:	9908      	ldr	r1, [sp, #32]
 800860e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008612:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008616:	2900      	cmp	r1, #0
 8008618:	d043      	beq.n	80086a2 <_dtoa_r+0x582>
 800861a:	494d      	ldr	r1, [pc, #308]	; (8008750 <_dtoa_r+0x630>)
 800861c:	2000      	movs	r0, #0
 800861e:	f7f8 f935 	bl	800088c <__aeabi_ddiv>
 8008622:	4652      	mov	r2, sl
 8008624:	465b      	mov	r3, fp
 8008626:	f7f7 fe4f 	bl	80002c8 <__aeabi_dsub>
 800862a:	9d01      	ldr	r5, [sp, #4]
 800862c:	4682      	mov	sl, r0
 800862e:	468b      	mov	fp, r1
 8008630:	4649      	mov	r1, r9
 8008632:	4640      	mov	r0, r8
 8008634:	f7f8 fab0 	bl	8000b98 <__aeabi_d2iz>
 8008638:	4606      	mov	r6, r0
 800863a:	f7f7 ff93 	bl	8000564 <__aeabi_i2d>
 800863e:	4602      	mov	r2, r0
 8008640:	460b      	mov	r3, r1
 8008642:	4640      	mov	r0, r8
 8008644:	4649      	mov	r1, r9
 8008646:	f7f7 fe3f 	bl	80002c8 <__aeabi_dsub>
 800864a:	3630      	adds	r6, #48	; 0x30
 800864c:	f805 6b01 	strb.w	r6, [r5], #1
 8008650:	4652      	mov	r2, sl
 8008652:	465b      	mov	r3, fp
 8008654:	4680      	mov	r8, r0
 8008656:	4689      	mov	r9, r1
 8008658:	f7f8 fa60 	bl	8000b1c <__aeabi_dcmplt>
 800865c:	2800      	cmp	r0, #0
 800865e:	d163      	bne.n	8008728 <_dtoa_r+0x608>
 8008660:	4642      	mov	r2, r8
 8008662:	464b      	mov	r3, r9
 8008664:	4936      	ldr	r1, [pc, #216]	; (8008740 <_dtoa_r+0x620>)
 8008666:	2000      	movs	r0, #0
 8008668:	f7f7 fe2e 	bl	80002c8 <__aeabi_dsub>
 800866c:	4652      	mov	r2, sl
 800866e:	465b      	mov	r3, fp
 8008670:	f7f8 fa54 	bl	8000b1c <__aeabi_dcmplt>
 8008674:	2800      	cmp	r0, #0
 8008676:	f040 80b5 	bne.w	80087e4 <_dtoa_r+0x6c4>
 800867a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800867c:	429d      	cmp	r5, r3
 800867e:	d081      	beq.n	8008584 <_dtoa_r+0x464>
 8008680:	4b30      	ldr	r3, [pc, #192]	; (8008744 <_dtoa_r+0x624>)
 8008682:	2200      	movs	r2, #0
 8008684:	4650      	mov	r0, sl
 8008686:	4659      	mov	r1, fp
 8008688:	f7f7 ffd6 	bl	8000638 <__aeabi_dmul>
 800868c:	4b2d      	ldr	r3, [pc, #180]	; (8008744 <_dtoa_r+0x624>)
 800868e:	4682      	mov	sl, r0
 8008690:	468b      	mov	fp, r1
 8008692:	4640      	mov	r0, r8
 8008694:	4649      	mov	r1, r9
 8008696:	2200      	movs	r2, #0
 8008698:	f7f7 ffce 	bl	8000638 <__aeabi_dmul>
 800869c:	4680      	mov	r8, r0
 800869e:	4689      	mov	r9, r1
 80086a0:	e7c6      	b.n	8008630 <_dtoa_r+0x510>
 80086a2:	4650      	mov	r0, sl
 80086a4:	4659      	mov	r1, fp
 80086a6:	f7f7 ffc7 	bl	8000638 <__aeabi_dmul>
 80086aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086ac:	9d01      	ldr	r5, [sp, #4]
 80086ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80086b0:	4682      	mov	sl, r0
 80086b2:	468b      	mov	fp, r1
 80086b4:	4649      	mov	r1, r9
 80086b6:	4640      	mov	r0, r8
 80086b8:	f7f8 fa6e 	bl	8000b98 <__aeabi_d2iz>
 80086bc:	4606      	mov	r6, r0
 80086be:	f7f7 ff51 	bl	8000564 <__aeabi_i2d>
 80086c2:	3630      	adds	r6, #48	; 0x30
 80086c4:	4602      	mov	r2, r0
 80086c6:	460b      	mov	r3, r1
 80086c8:	4640      	mov	r0, r8
 80086ca:	4649      	mov	r1, r9
 80086cc:	f7f7 fdfc 	bl	80002c8 <__aeabi_dsub>
 80086d0:	f805 6b01 	strb.w	r6, [r5], #1
 80086d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086d6:	429d      	cmp	r5, r3
 80086d8:	4680      	mov	r8, r0
 80086da:	4689      	mov	r9, r1
 80086dc:	f04f 0200 	mov.w	r2, #0
 80086e0:	d124      	bne.n	800872c <_dtoa_r+0x60c>
 80086e2:	4b1b      	ldr	r3, [pc, #108]	; (8008750 <_dtoa_r+0x630>)
 80086e4:	4650      	mov	r0, sl
 80086e6:	4659      	mov	r1, fp
 80086e8:	f7f7 fdf0 	bl	80002cc <__adddf3>
 80086ec:	4602      	mov	r2, r0
 80086ee:	460b      	mov	r3, r1
 80086f0:	4640      	mov	r0, r8
 80086f2:	4649      	mov	r1, r9
 80086f4:	f7f8 fa30 	bl	8000b58 <__aeabi_dcmpgt>
 80086f8:	2800      	cmp	r0, #0
 80086fa:	d173      	bne.n	80087e4 <_dtoa_r+0x6c4>
 80086fc:	4652      	mov	r2, sl
 80086fe:	465b      	mov	r3, fp
 8008700:	4913      	ldr	r1, [pc, #76]	; (8008750 <_dtoa_r+0x630>)
 8008702:	2000      	movs	r0, #0
 8008704:	f7f7 fde0 	bl	80002c8 <__aeabi_dsub>
 8008708:	4602      	mov	r2, r0
 800870a:	460b      	mov	r3, r1
 800870c:	4640      	mov	r0, r8
 800870e:	4649      	mov	r1, r9
 8008710:	f7f8 fa04 	bl	8000b1c <__aeabi_dcmplt>
 8008714:	2800      	cmp	r0, #0
 8008716:	f43f af35 	beq.w	8008584 <_dtoa_r+0x464>
 800871a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800871c:	1e6b      	subs	r3, r5, #1
 800871e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008720:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008724:	2b30      	cmp	r3, #48	; 0x30
 8008726:	d0f8      	beq.n	800871a <_dtoa_r+0x5fa>
 8008728:	9700      	str	r7, [sp, #0]
 800872a:	e049      	b.n	80087c0 <_dtoa_r+0x6a0>
 800872c:	4b05      	ldr	r3, [pc, #20]	; (8008744 <_dtoa_r+0x624>)
 800872e:	f7f7 ff83 	bl	8000638 <__aeabi_dmul>
 8008732:	4680      	mov	r8, r0
 8008734:	4689      	mov	r9, r1
 8008736:	e7bd      	b.n	80086b4 <_dtoa_r+0x594>
 8008738:	0800a6f0 	.word	0x0800a6f0
 800873c:	0800a6c8 	.word	0x0800a6c8
 8008740:	3ff00000 	.word	0x3ff00000
 8008744:	40240000 	.word	0x40240000
 8008748:	401c0000 	.word	0x401c0000
 800874c:	40140000 	.word	0x40140000
 8008750:	3fe00000 	.word	0x3fe00000
 8008754:	9d01      	ldr	r5, [sp, #4]
 8008756:	4656      	mov	r6, sl
 8008758:	465f      	mov	r7, fp
 800875a:	4642      	mov	r2, r8
 800875c:	464b      	mov	r3, r9
 800875e:	4630      	mov	r0, r6
 8008760:	4639      	mov	r1, r7
 8008762:	f7f8 f893 	bl	800088c <__aeabi_ddiv>
 8008766:	f7f8 fa17 	bl	8000b98 <__aeabi_d2iz>
 800876a:	4682      	mov	sl, r0
 800876c:	f7f7 fefa 	bl	8000564 <__aeabi_i2d>
 8008770:	4642      	mov	r2, r8
 8008772:	464b      	mov	r3, r9
 8008774:	f7f7 ff60 	bl	8000638 <__aeabi_dmul>
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	4630      	mov	r0, r6
 800877e:	4639      	mov	r1, r7
 8008780:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008784:	f7f7 fda0 	bl	80002c8 <__aeabi_dsub>
 8008788:	f805 6b01 	strb.w	r6, [r5], #1
 800878c:	9e01      	ldr	r6, [sp, #4]
 800878e:	9f03      	ldr	r7, [sp, #12]
 8008790:	1bae      	subs	r6, r5, r6
 8008792:	42b7      	cmp	r7, r6
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	d135      	bne.n	8008806 <_dtoa_r+0x6e6>
 800879a:	f7f7 fd97 	bl	80002cc <__adddf3>
 800879e:	4642      	mov	r2, r8
 80087a0:	464b      	mov	r3, r9
 80087a2:	4606      	mov	r6, r0
 80087a4:	460f      	mov	r7, r1
 80087a6:	f7f8 f9d7 	bl	8000b58 <__aeabi_dcmpgt>
 80087aa:	b9d0      	cbnz	r0, 80087e2 <_dtoa_r+0x6c2>
 80087ac:	4642      	mov	r2, r8
 80087ae:	464b      	mov	r3, r9
 80087b0:	4630      	mov	r0, r6
 80087b2:	4639      	mov	r1, r7
 80087b4:	f7f8 f9a8 	bl	8000b08 <__aeabi_dcmpeq>
 80087b8:	b110      	cbz	r0, 80087c0 <_dtoa_r+0x6a0>
 80087ba:	f01a 0f01 	tst.w	sl, #1
 80087be:	d110      	bne.n	80087e2 <_dtoa_r+0x6c2>
 80087c0:	4620      	mov	r0, r4
 80087c2:	ee18 1a10 	vmov	r1, s16
 80087c6:	f000 faf7 	bl	8008db8 <_Bfree>
 80087ca:	2300      	movs	r3, #0
 80087cc:	9800      	ldr	r0, [sp, #0]
 80087ce:	702b      	strb	r3, [r5, #0]
 80087d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087d2:	3001      	adds	r0, #1
 80087d4:	6018      	str	r0, [r3, #0]
 80087d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f43f acf1 	beq.w	80081c0 <_dtoa_r+0xa0>
 80087de:	601d      	str	r5, [r3, #0]
 80087e0:	e4ee      	b.n	80081c0 <_dtoa_r+0xa0>
 80087e2:	9f00      	ldr	r7, [sp, #0]
 80087e4:	462b      	mov	r3, r5
 80087e6:	461d      	mov	r5, r3
 80087e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087ec:	2a39      	cmp	r2, #57	; 0x39
 80087ee:	d106      	bne.n	80087fe <_dtoa_r+0x6de>
 80087f0:	9a01      	ldr	r2, [sp, #4]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d1f7      	bne.n	80087e6 <_dtoa_r+0x6c6>
 80087f6:	9901      	ldr	r1, [sp, #4]
 80087f8:	2230      	movs	r2, #48	; 0x30
 80087fa:	3701      	adds	r7, #1
 80087fc:	700a      	strb	r2, [r1, #0]
 80087fe:	781a      	ldrb	r2, [r3, #0]
 8008800:	3201      	adds	r2, #1
 8008802:	701a      	strb	r2, [r3, #0]
 8008804:	e790      	b.n	8008728 <_dtoa_r+0x608>
 8008806:	4ba6      	ldr	r3, [pc, #664]	; (8008aa0 <_dtoa_r+0x980>)
 8008808:	2200      	movs	r2, #0
 800880a:	f7f7 ff15 	bl	8000638 <__aeabi_dmul>
 800880e:	2200      	movs	r2, #0
 8008810:	2300      	movs	r3, #0
 8008812:	4606      	mov	r6, r0
 8008814:	460f      	mov	r7, r1
 8008816:	f7f8 f977 	bl	8000b08 <__aeabi_dcmpeq>
 800881a:	2800      	cmp	r0, #0
 800881c:	d09d      	beq.n	800875a <_dtoa_r+0x63a>
 800881e:	e7cf      	b.n	80087c0 <_dtoa_r+0x6a0>
 8008820:	9a08      	ldr	r2, [sp, #32]
 8008822:	2a00      	cmp	r2, #0
 8008824:	f000 80d7 	beq.w	80089d6 <_dtoa_r+0x8b6>
 8008828:	9a06      	ldr	r2, [sp, #24]
 800882a:	2a01      	cmp	r2, #1
 800882c:	f300 80ba 	bgt.w	80089a4 <_dtoa_r+0x884>
 8008830:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008832:	2a00      	cmp	r2, #0
 8008834:	f000 80b2 	beq.w	800899c <_dtoa_r+0x87c>
 8008838:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800883c:	9e07      	ldr	r6, [sp, #28]
 800883e:	9d04      	ldr	r5, [sp, #16]
 8008840:	9a04      	ldr	r2, [sp, #16]
 8008842:	441a      	add	r2, r3
 8008844:	9204      	str	r2, [sp, #16]
 8008846:	9a05      	ldr	r2, [sp, #20]
 8008848:	2101      	movs	r1, #1
 800884a:	441a      	add	r2, r3
 800884c:	4620      	mov	r0, r4
 800884e:	9205      	str	r2, [sp, #20]
 8008850:	f000 fb6a 	bl	8008f28 <__i2b>
 8008854:	4607      	mov	r7, r0
 8008856:	2d00      	cmp	r5, #0
 8008858:	dd0c      	ble.n	8008874 <_dtoa_r+0x754>
 800885a:	9b05      	ldr	r3, [sp, #20]
 800885c:	2b00      	cmp	r3, #0
 800885e:	dd09      	ble.n	8008874 <_dtoa_r+0x754>
 8008860:	42ab      	cmp	r3, r5
 8008862:	9a04      	ldr	r2, [sp, #16]
 8008864:	bfa8      	it	ge
 8008866:	462b      	movge	r3, r5
 8008868:	1ad2      	subs	r2, r2, r3
 800886a:	9204      	str	r2, [sp, #16]
 800886c:	9a05      	ldr	r2, [sp, #20]
 800886e:	1aed      	subs	r5, r5, r3
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	9305      	str	r3, [sp, #20]
 8008874:	9b07      	ldr	r3, [sp, #28]
 8008876:	b31b      	cbz	r3, 80088c0 <_dtoa_r+0x7a0>
 8008878:	9b08      	ldr	r3, [sp, #32]
 800887a:	2b00      	cmp	r3, #0
 800887c:	f000 80af 	beq.w	80089de <_dtoa_r+0x8be>
 8008880:	2e00      	cmp	r6, #0
 8008882:	dd13      	ble.n	80088ac <_dtoa_r+0x78c>
 8008884:	4639      	mov	r1, r7
 8008886:	4632      	mov	r2, r6
 8008888:	4620      	mov	r0, r4
 800888a:	f000 fc0d 	bl	80090a8 <__pow5mult>
 800888e:	ee18 2a10 	vmov	r2, s16
 8008892:	4601      	mov	r1, r0
 8008894:	4607      	mov	r7, r0
 8008896:	4620      	mov	r0, r4
 8008898:	f000 fb5c 	bl	8008f54 <__multiply>
 800889c:	ee18 1a10 	vmov	r1, s16
 80088a0:	4680      	mov	r8, r0
 80088a2:	4620      	mov	r0, r4
 80088a4:	f000 fa88 	bl	8008db8 <_Bfree>
 80088a8:	ee08 8a10 	vmov	s16, r8
 80088ac:	9b07      	ldr	r3, [sp, #28]
 80088ae:	1b9a      	subs	r2, r3, r6
 80088b0:	d006      	beq.n	80088c0 <_dtoa_r+0x7a0>
 80088b2:	ee18 1a10 	vmov	r1, s16
 80088b6:	4620      	mov	r0, r4
 80088b8:	f000 fbf6 	bl	80090a8 <__pow5mult>
 80088bc:	ee08 0a10 	vmov	s16, r0
 80088c0:	2101      	movs	r1, #1
 80088c2:	4620      	mov	r0, r4
 80088c4:	f000 fb30 	bl	8008f28 <__i2b>
 80088c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	4606      	mov	r6, r0
 80088ce:	f340 8088 	ble.w	80089e2 <_dtoa_r+0x8c2>
 80088d2:	461a      	mov	r2, r3
 80088d4:	4601      	mov	r1, r0
 80088d6:	4620      	mov	r0, r4
 80088d8:	f000 fbe6 	bl	80090a8 <__pow5mult>
 80088dc:	9b06      	ldr	r3, [sp, #24]
 80088de:	2b01      	cmp	r3, #1
 80088e0:	4606      	mov	r6, r0
 80088e2:	f340 8081 	ble.w	80089e8 <_dtoa_r+0x8c8>
 80088e6:	f04f 0800 	mov.w	r8, #0
 80088ea:	6933      	ldr	r3, [r6, #16]
 80088ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80088f0:	6918      	ldr	r0, [r3, #16]
 80088f2:	f000 fac9 	bl	8008e88 <__hi0bits>
 80088f6:	f1c0 0020 	rsb	r0, r0, #32
 80088fa:	9b05      	ldr	r3, [sp, #20]
 80088fc:	4418      	add	r0, r3
 80088fe:	f010 001f 	ands.w	r0, r0, #31
 8008902:	f000 8092 	beq.w	8008a2a <_dtoa_r+0x90a>
 8008906:	f1c0 0320 	rsb	r3, r0, #32
 800890a:	2b04      	cmp	r3, #4
 800890c:	f340 808a 	ble.w	8008a24 <_dtoa_r+0x904>
 8008910:	f1c0 001c 	rsb	r0, r0, #28
 8008914:	9b04      	ldr	r3, [sp, #16]
 8008916:	4403      	add	r3, r0
 8008918:	9304      	str	r3, [sp, #16]
 800891a:	9b05      	ldr	r3, [sp, #20]
 800891c:	4403      	add	r3, r0
 800891e:	4405      	add	r5, r0
 8008920:	9305      	str	r3, [sp, #20]
 8008922:	9b04      	ldr	r3, [sp, #16]
 8008924:	2b00      	cmp	r3, #0
 8008926:	dd07      	ble.n	8008938 <_dtoa_r+0x818>
 8008928:	ee18 1a10 	vmov	r1, s16
 800892c:	461a      	mov	r2, r3
 800892e:	4620      	mov	r0, r4
 8008930:	f000 fc14 	bl	800915c <__lshift>
 8008934:	ee08 0a10 	vmov	s16, r0
 8008938:	9b05      	ldr	r3, [sp, #20]
 800893a:	2b00      	cmp	r3, #0
 800893c:	dd05      	ble.n	800894a <_dtoa_r+0x82a>
 800893e:	4631      	mov	r1, r6
 8008940:	461a      	mov	r2, r3
 8008942:	4620      	mov	r0, r4
 8008944:	f000 fc0a 	bl	800915c <__lshift>
 8008948:	4606      	mov	r6, r0
 800894a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800894c:	2b00      	cmp	r3, #0
 800894e:	d06e      	beq.n	8008a2e <_dtoa_r+0x90e>
 8008950:	ee18 0a10 	vmov	r0, s16
 8008954:	4631      	mov	r1, r6
 8008956:	f000 fc71 	bl	800923c <__mcmp>
 800895a:	2800      	cmp	r0, #0
 800895c:	da67      	bge.n	8008a2e <_dtoa_r+0x90e>
 800895e:	9b00      	ldr	r3, [sp, #0]
 8008960:	3b01      	subs	r3, #1
 8008962:	ee18 1a10 	vmov	r1, s16
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	220a      	movs	r2, #10
 800896a:	2300      	movs	r3, #0
 800896c:	4620      	mov	r0, r4
 800896e:	f000 fa45 	bl	8008dfc <__multadd>
 8008972:	9b08      	ldr	r3, [sp, #32]
 8008974:	ee08 0a10 	vmov	s16, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	f000 81b1 	beq.w	8008ce0 <_dtoa_r+0xbc0>
 800897e:	2300      	movs	r3, #0
 8008980:	4639      	mov	r1, r7
 8008982:	220a      	movs	r2, #10
 8008984:	4620      	mov	r0, r4
 8008986:	f000 fa39 	bl	8008dfc <__multadd>
 800898a:	9b02      	ldr	r3, [sp, #8]
 800898c:	2b00      	cmp	r3, #0
 800898e:	4607      	mov	r7, r0
 8008990:	f300 808e 	bgt.w	8008ab0 <_dtoa_r+0x990>
 8008994:	9b06      	ldr	r3, [sp, #24]
 8008996:	2b02      	cmp	r3, #2
 8008998:	dc51      	bgt.n	8008a3e <_dtoa_r+0x91e>
 800899a:	e089      	b.n	8008ab0 <_dtoa_r+0x990>
 800899c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800899e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80089a2:	e74b      	b.n	800883c <_dtoa_r+0x71c>
 80089a4:	9b03      	ldr	r3, [sp, #12]
 80089a6:	1e5e      	subs	r6, r3, #1
 80089a8:	9b07      	ldr	r3, [sp, #28]
 80089aa:	42b3      	cmp	r3, r6
 80089ac:	bfbf      	itttt	lt
 80089ae:	9b07      	ldrlt	r3, [sp, #28]
 80089b0:	9607      	strlt	r6, [sp, #28]
 80089b2:	1af2      	sublt	r2, r6, r3
 80089b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80089b6:	bfb6      	itet	lt
 80089b8:	189b      	addlt	r3, r3, r2
 80089ba:	1b9e      	subge	r6, r3, r6
 80089bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80089be:	9b03      	ldr	r3, [sp, #12]
 80089c0:	bfb8      	it	lt
 80089c2:	2600      	movlt	r6, #0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	bfb7      	itett	lt
 80089c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80089cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80089d0:	1a9d      	sublt	r5, r3, r2
 80089d2:	2300      	movlt	r3, #0
 80089d4:	e734      	b.n	8008840 <_dtoa_r+0x720>
 80089d6:	9e07      	ldr	r6, [sp, #28]
 80089d8:	9d04      	ldr	r5, [sp, #16]
 80089da:	9f08      	ldr	r7, [sp, #32]
 80089dc:	e73b      	b.n	8008856 <_dtoa_r+0x736>
 80089de:	9a07      	ldr	r2, [sp, #28]
 80089e0:	e767      	b.n	80088b2 <_dtoa_r+0x792>
 80089e2:	9b06      	ldr	r3, [sp, #24]
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	dc18      	bgt.n	8008a1a <_dtoa_r+0x8fa>
 80089e8:	f1ba 0f00 	cmp.w	sl, #0
 80089ec:	d115      	bne.n	8008a1a <_dtoa_r+0x8fa>
 80089ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089f2:	b993      	cbnz	r3, 8008a1a <_dtoa_r+0x8fa>
 80089f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80089f8:	0d1b      	lsrs	r3, r3, #20
 80089fa:	051b      	lsls	r3, r3, #20
 80089fc:	b183      	cbz	r3, 8008a20 <_dtoa_r+0x900>
 80089fe:	9b04      	ldr	r3, [sp, #16]
 8008a00:	3301      	adds	r3, #1
 8008a02:	9304      	str	r3, [sp, #16]
 8008a04:	9b05      	ldr	r3, [sp, #20]
 8008a06:	3301      	adds	r3, #1
 8008a08:	9305      	str	r3, [sp, #20]
 8008a0a:	f04f 0801 	mov.w	r8, #1
 8008a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f47f af6a 	bne.w	80088ea <_dtoa_r+0x7ca>
 8008a16:	2001      	movs	r0, #1
 8008a18:	e76f      	b.n	80088fa <_dtoa_r+0x7da>
 8008a1a:	f04f 0800 	mov.w	r8, #0
 8008a1e:	e7f6      	b.n	8008a0e <_dtoa_r+0x8ee>
 8008a20:	4698      	mov	r8, r3
 8008a22:	e7f4      	b.n	8008a0e <_dtoa_r+0x8ee>
 8008a24:	f43f af7d 	beq.w	8008922 <_dtoa_r+0x802>
 8008a28:	4618      	mov	r0, r3
 8008a2a:	301c      	adds	r0, #28
 8008a2c:	e772      	b.n	8008914 <_dtoa_r+0x7f4>
 8008a2e:	9b03      	ldr	r3, [sp, #12]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	dc37      	bgt.n	8008aa4 <_dtoa_r+0x984>
 8008a34:	9b06      	ldr	r3, [sp, #24]
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	dd34      	ble.n	8008aa4 <_dtoa_r+0x984>
 8008a3a:	9b03      	ldr	r3, [sp, #12]
 8008a3c:	9302      	str	r3, [sp, #8]
 8008a3e:	9b02      	ldr	r3, [sp, #8]
 8008a40:	b96b      	cbnz	r3, 8008a5e <_dtoa_r+0x93e>
 8008a42:	4631      	mov	r1, r6
 8008a44:	2205      	movs	r2, #5
 8008a46:	4620      	mov	r0, r4
 8008a48:	f000 f9d8 	bl	8008dfc <__multadd>
 8008a4c:	4601      	mov	r1, r0
 8008a4e:	4606      	mov	r6, r0
 8008a50:	ee18 0a10 	vmov	r0, s16
 8008a54:	f000 fbf2 	bl	800923c <__mcmp>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	f73f adbb 	bgt.w	80085d4 <_dtoa_r+0x4b4>
 8008a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a60:	9d01      	ldr	r5, [sp, #4]
 8008a62:	43db      	mvns	r3, r3
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	f04f 0800 	mov.w	r8, #0
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f000 f9a3 	bl	8008db8 <_Bfree>
 8008a72:	2f00      	cmp	r7, #0
 8008a74:	f43f aea4 	beq.w	80087c0 <_dtoa_r+0x6a0>
 8008a78:	f1b8 0f00 	cmp.w	r8, #0
 8008a7c:	d005      	beq.n	8008a8a <_dtoa_r+0x96a>
 8008a7e:	45b8      	cmp	r8, r7
 8008a80:	d003      	beq.n	8008a8a <_dtoa_r+0x96a>
 8008a82:	4641      	mov	r1, r8
 8008a84:	4620      	mov	r0, r4
 8008a86:	f000 f997 	bl	8008db8 <_Bfree>
 8008a8a:	4639      	mov	r1, r7
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	f000 f993 	bl	8008db8 <_Bfree>
 8008a92:	e695      	b.n	80087c0 <_dtoa_r+0x6a0>
 8008a94:	2600      	movs	r6, #0
 8008a96:	4637      	mov	r7, r6
 8008a98:	e7e1      	b.n	8008a5e <_dtoa_r+0x93e>
 8008a9a:	9700      	str	r7, [sp, #0]
 8008a9c:	4637      	mov	r7, r6
 8008a9e:	e599      	b.n	80085d4 <_dtoa_r+0x4b4>
 8008aa0:	40240000 	.word	0x40240000
 8008aa4:	9b08      	ldr	r3, [sp, #32]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	f000 80ca 	beq.w	8008c40 <_dtoa_r+0xb20>
 8008aac:	9b03      	ldr	r3, [sp, #12]
 8008aae:	9302      	str	r3, [sp, #8]
 8008ab0:	2d00      	cmp	r5, #0
 8008ab2:	dd05      	ble.n	8008ac0 <_dtoa_r+0x9a0>
 8008ab4:	4639      	mov	r1, r7
 8008ab6:	462a      	mov	r2, r5
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f000 fb4f 	bl	800915c <__lshift>
 8008abe:	4607      	mov	r7, r0
 8008ac0:	f1b8 0f00 	cmp.w	r8, #0
 8008ac4:	d05b      	beq.n	8008b7e <_dtoa_r+0xa5e>
 8008ac6:	6879      	ldr	r1, [r7, #4]
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f000 f935 	bl	8008d38 <_Balloc>
 8008ace:	4605      	mov	r5, r0
 8008ad0:	b928      	cbnz	r0, 8008ade <_dtoa_r+0x9be>
 8008ad2:	4b87      	ldr	r3, [pc, #540]	; (8008cf0 <_dtoa_r+0xbd0>)
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008ada:	f7ff bb3b 	b.w	8008154 <_dtoa_r+0x34>
 8008ade:	693a      	ldr	r2, [r7, #16]
 8008ae0:	3202      	adds	r2, #2
 8008ae2:	0092      	lsls	r2, r2, #2
 8008ae4:	f107 010c 	add.w	r1, r7, #12
 8008ae8:	300c      	adds	r0, #12
 8008aea:	f000 f90b 	bl	8008d04 <memcpy>
 8008aee:	2201      	movs	r2, #1
 8008af0:	4629      	mov	r1, r5
 8008af2:	4620      	mov	r0, r4
 8008af4:	f000 fb32 	bl	800915c <__lshift>
 8008af8:	9b01      	ldr	r3, [sp, #4]
 8008afa:	f103 0901 	add.w	r9, r3, #1
 8008afe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008b02:	4413      	add	r3, r2
 8008b04:	9305      	str	r3, [sp, #20]
 8008b06:	f00a 0301 	and.w	r3, sl, #1
 8008b0a:	46b8      	mov	r8, r7
 8008b0c:	9304      	str	r3, [sp, #16]
 8008b0e:	4607      	mov	r7, r0
 8008b10:	4631      	mov	r1, r6
 8008b12:	ee18 0a10 	vmov	r0, s16
 8008b16:	f7ff fa76 	bl	8008006 <quorem>
 8008b1a:	4641      	mov	r1, r8
 8008b1c:	9002      	str	r0, [sp, #8]
 8008b1e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008b22:	ee18 0a10 	vmov	r0, s16
 8008b26:	f000 fb89 	bl	800923c <__mcmp>
 8008b2a:	463a      	mov	r2, r7
 8008b2c:	9003      	str	r0, [sp, #12]
 8008b2e:	4631      	mov	r1, r6
 8008b30:	4620      	mov	r0, r4
 8008b32:	f000 fb9f 	bl	8009274 <__mdiff>
 8008b36:	68c2      	ldr	r2, [r0, #12]
 8008b38:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8008b3c:	4605      	mov	r5, r0
 8008b3e:	bb02      	cbnz	r2, 8008b82 <_dtoa_r+0xa62>
 8008b40:	4601      	mov	r1, r0
 8008b42:	ee18 0a10 	vmov	r0, s16
 8008b46:	f000 fb79 	bl	800923c <__mcmp>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	4620      	mov	r0, r4
 8008b50:	9207      	str	r2, [sp, #28]
 8008b52:	f000 f931 	bl	8008db8 <_Bfree>
 8008b56:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008b5a:	ea43 0102 	orr.w	r1, r3, r2
 8008b5e:	9b04      	ldr	r3, [sp, #16]
 8008b60:	430b      	orrs	r3, r1
 8008b62:	464d      	mov	r5, r9
 8008b64:	d10f      	bne.n	8008b86 <_dtoa_r+0xa66>
 8008b66:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b6a:	d02a      	beq.n	8008bc2 <_dtoa_r+0xaa2>
 8008b6c:	9b03      	ldr	r3, [sp, #12]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	dd02      	ble.n	8008b78 <_dtoa_r+0xa58>
 8008b72:	9b02      	ldr	r3, [sp, #8]
 8008b74:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008b78:	f88b a000 	strb.w	sl, [fp]
 8008b7c:	e775      	b.n	8008a6a <_dtoa_r+0x94a>
 8008b7e:	4638      	mov	r0, r7
 8008b80:	e7ba      	b.n	8008af8 <_dtoa_r+0x9d8>
 8008b82:	2201      	movs	r2, #1
 8008b84:	e7e2      	b.n	8008b4c <_dtoa_r+0xa2c>
 8008b86:	9b03      	ldr	r3, [sp, #12]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	db04      	blt.n	8008b96 <_dtoa_r+0xa76>
 8008b8c:	9906      	ldr	r1, [sp, #24]
 8008b8e:	430b      	orrs	r3, r1
 8008b90:	9904      	ldr	r1, [sp, #16]
 8008b92:	430b      	orrs	r3, r1
 8008b94:	d122      	bne.n	8008bdc <_dtoa_r+0xabc>
 8008b96:	2a00      	cmp	r2, #0
 8008b98:	ddee      	ble.n	8008b78 <_dtoa_r+0xa58>
 8008b9a:	ee18 1a10 	vmov	r1, s16
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f000 fadb 	bl	800915c <__lshift>
 8008ba6:	4631      	mov	r1, r6
 8008ba8:	ee08 0a10 	vmov	s16, r0
 8008bac:	f000 fb46 	bl	800923c <__mcmp>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	dc03      	bgt.n	8008bbc <_dtoa_r+0xa9c>
 8008bb4:	d1e0      	bne.n	8008b78 <_dtoa_r+0xa58>
 8008bb6:	f01a 0f01 	tst.w	sl, #1
 8008bba:	d0dd      	beq.n	8008b78 <_dtoa_r+0xa58>
 8008bbc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008bc0:	d1d7      	bne.n	8008b72 <_dtoa_r+0xa52>
 8008bc2:	2339      	movs	r3, #57	; 0x39
 8008bc4:	f88b 3000 	strb.w	r3, [fp]
 8008bc8:	462b      	mov	r3, r5
 8008bca:	461d      	mov	r5, r3
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008bd2:	2a39      	cmp	r2, #57	; 0x39
 8008bd4:	d071      	beq.n	8008cba <_dtoa_r+0xb9a>
 8008bd6:	3201      	adds	r2, #1
 8008bd8:	701a      	strb	r2, [r3, #0]
 8008bda:	e746      	b.n	8008a6a <_dtoa_r+0x94a>
 8008bdc:	2a00      	cmp	r2, #0
 8008bde:	dd07      	ble.n	8008bf0 <_dtoa_r+0xad0>
 8008be0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008be4:	d0ed      	beq.n	8008bc2 <_dtoa_r+0xaa2>
 8008be6:	f10a 0301 	add.w	r3, sl, #1
 8008bea:	f88b 3000 	strb.w	r3, [fp]
 8008bee:	e73c      	b.n	8008a6a <_dtoa_r+0x94a>
 8008bf0:	9b05      	ldr	r3, [sp, #20]
 8008bf2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008bf6:	4599      	cmp	r9, r3
 8008bf8:	d047      	beq.n	8008c8a <_dtoa_r+0xb6a>
 8008bfa:	ee18 1a10 	vmov	r1, s16
 8008bfe:	2300      	movs	r3, #0
 8008c00:	220a      	movs	r2, #10
 8008c02:	4620      	mov	r0, r4
 8008c04:	f000 f8fa 	bl	8008dfc <__multadd>
 8008c08:	45b8      	cmp	r8, r7
 8008c0a:	ee08 0a10 	vmov	s16, r0
 8008c0e:	f04f 0300 	mov.w	r3, #0
 8008c12:	f04f 020a 	mov.w	r2, #10
 8008c16:	4641      	mov	r1, r8
 8008c18:	4620      	mov	r0, r4
 8008c1a:	d106      	bne.n	8008c2a <_dtoa_r+0xb0a>
 8008c1c:	f000 f8ee 	bl	8008dfc <__multadd>
 8008c20:	4680      	mov	r8, r0
 8008c22:	4607      	mov	r7, r0
 8008c24:	f109 0901 	add.w	r9, r9, #1
 8008c28:	e772      	b.n	8008b10 <_dtoa_r+0x9f0>
 8008c2a:	f000 f8e7 	bl	8008dfc <__multadd>
 8008c2e:	4639      	mov	r1, r7
 8008c30:	4680      	mov	r8, r0
 8008c32:	2300      	movs	r3, #0
 8008c34:	220a      	movs	r2, #10
 8008c36:	4620      	mov	r0, r4
 8008c38:	f000 f8e0 	bl	8008dfc <__multadd>
 8008c3c:	4607      	mov	r7, r0
 8008c3e:	e7f1      	b.n	8008c24 <_dtoa_r+0xb04>
 8008c40:	9b03      	ldr	r3, [sp, #12]
 8008c42:	9302      	str	r3, [sp, #8]
 8008c44:	9d01      	ldr	r5, [sp, #4]
 8008c46:	ee18 0a10 	vmov	r0, s16
 8008c4a:	4631      	mov	r1, r6
 8008c4c:	f7ff f9db 	bl	8008006 <quorem>
 8008c50:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008c54:	9b01      	ldr	r3, [sp, #4]
 8008c56:	f805 ab01 	strb.w	sl, [r5], #1
 8008c5a:	1aea      	subs	r2, r5, r3
 8008c5c:	9b02      	ldr	r3, [sp, #8]
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	dd09      	ble.n	8008c76 <_dtoa_r+0xb56>
 8008c62:	ee18 1a10 	vmov	r1, s16
 8008c66:	2300      	movs	r3, #0
 8008c68:	220a      	movs	r2, #10
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f000 f8c6 	bl	8008dfc <__multadd>
 8008c70:	ee08 0a10 	vmov	s16, r0
 8008c74:	e7e7      	b.n	8008c46 <_dtoa_r+0xb26>
 8008c76:	9b02      	ldr	r3, [sp, #8]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	bfc8      	it	gt
 8008c7c:	461d      	movgt	r5, r3
 8008c7e:	9b01      	ldr	r3, [sp, #4]
 8008c80:	bfd8      	it	le
 8008c82:	2501      	movle	r5, #1
 8008c84:	441d      	add	r5, r3
 8008c86:	f04f 0800 	mov.w	r8, #0
 8008c8a:	ee18 1a10 	vmov	r1, s16
 8008c8e:	2201      	movs	r2, #1
 8008c90:	4620      	mov	r0, r4
 8008c92:	f000 fa63 	bl	800915c <__lshift>
 8008c96:	4631      	mov	r1, r6
 8008c98:	ee08 0a10 	vmov	s16, r0
 8008c9c:	f000 face 	bl	800923c <__mcmp>
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	dc91      	bgt.n	8008bc8 <_dtoa_r+0xaa8>
 8008ca4:	d102      	bne.n	8008cac <_dtoa_r+0xb8c>
 8008ca6:	f01a 0f01 	tst.w	sl, #1
 8008caa:	d18d      	bne.n	8008bc8 <_dtoa_r+0xaa8>
 8008cac:	462b      	mov	r3, r5
 8008cae:	461d      	mov	r5, r3
 8008cb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cb4:	2a30      	cmp	r2, #48	; 0x30
 8008cb6:	d0fa      	beq.n	8008cae <_dtoa_r+0xb8e>
 8008cb8:	e6d7      	b.n	8008a6a <_dtoa_r+0x94a>
 8008cba:	9a01      	ldr	r2, [sp, #4]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d184      	bne.n	8008bca <_dtoa_r+0xaaa>
 8008cc0:	9b00      	ldr	r3, [sp, #0]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	2331      	movs	r3, #49	; 0x31
 8008cc8:	7013      	strb	r3, [r2, #0]
 8008cca:	e6ce      	b.n	8008a6a <_dtoa_r+0x94a>
 8008ccc:	4b09      	ldr	r3, [pc, #36]	; (8008cf4 <_dtoa_r+0xbd4>)
 8008cce:	f7ff ba95 	b.w	80081fc <_dtoa_r+0xdc>
 8008cd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f47f aa6e 	bne.w	80081b6 <_dtoa_r+0x96>
 8008cda:	4b07      	ldr	r3, [pc, #28]	; (8008cf8 <_dtoa_r+0xbd8>)
 8008cdc:	f7ff ba8e 	b.w	80081fc <_dtoa_r+0xdc>
 8008ce0:	9b02      	ldr	r3, [sp, #8]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	dcae      	bgt.n	8008c44 <_dtoa_r+0xb24>
 8008ce6:	9b06      	ldr	r3, [sp, #24]
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	f73f aea8 	bgt.w	8008a3e <_dtoa_r+0x91e>
 8008cee:	e7a9      	b.n	8008c44 <_dtoa_r+0xb24>
 8008cf0:	0800a657 	.word	0x0800a657
 8008cf4:	0800a5b4 	.word	0x0800a5b4
 8008cf8:	0800a5d8 	.word	0x0800a5d8

08008cfc <_localeconv_r>:
 8008cfc:	4800      	ldr	r0, [pc, #0]	; (8008d00 <_localeconv_r+0x4>)
 8008cfe:	4770      	bx	lr
 8008d00:	20002528 	.word	0x20002528

08008d04 <memcpy>:
 8008d04:	440a      	add	r2, r1
 8008d06:	4291      	cmp	r1, r2
 8008d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008d0c:	d100      	bne.n	8008d10 <memcpy+0xc>
 8008d0e:	4770      	bx	lr
 8008d10:	b510      	push	{r4, lr}
 8008d12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d1a:	4291      	cmp	r1, r2
 8008d1c:	d1f9      	bne.n	8008d12 <memcpy+0xe>
 8008d1e:	bd10      	pop	{r4, pc}

08008d20 <__malloc_lock>:
 8008d20:	4801      	ldr	r0, [pc, #4]	; (8008d28 <__malloc_lock+0x8>)
 8008d22:	f000 bd30 	b.w	8009786 <__retarget_lock_acquire_recursive>
 8008d26:	bf00      	nop
 8008d28:	20002988 	.word	0x20002988

08008d2c <__malloc_unlock>:
 8008d2c:	4801      	ldr	r0, [pc, #4]	; (8008d34 <__malloc_unlock+0x8>)
 8008d2e:	f000 bd2b 	b.w	8009788 <__retarget_lock_release_recursive>
 8008d32:	bf00      	nop
 8008d34:	20002988 	.word	0x20002988

08008d38 <_Balloc>:
 8008d38:	b570      	push	{r4, r5, r6, lr}
 8008d3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d3c:	4604      	mov	r4, r0
 8008d3e:	460d      	mov	r5, r1
 8008d40:	b976      	cbnz	r6, 8008d60 <_Balloc+0x28>
 8008d42:	2010      	movs	r0, #16
 8008d44:	f7fe fbba 	bl	80074bc <malloc>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	6260      	str	r0, [r4, #36]	; 0x24
 8008d4c:	b920      	cbnz	r0, 8008d58 <_Balloc+0x20>
 8008d4e:	4b18      	ldr	r3, [pc, #96]	; (8008db0 <_Balloc+0x78>)
 8008d50:	4818      	ldr	r0, [pc, #96]	; (8008db4 <_Balloc+0x7c>)
 8008d52:	2166      	movs	r1, #102	; 0x66
 8008d54:	f000 fce6 	bl	8009724 <__assert_func>
 8008d58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d5c:	6006      	str	r6, [r0, #0]
 8008d5e:	60c6      	str	r6, [r0, #12]
 8008d60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d62:	68f3      	ldr	r3, [r6, #12]
 8008d64:	b183      	cbz	r3, 8008d88 <_Balloc+0x50>
 8008d66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d6e:	b9b8      	cbnz	r0, 8008da0 <_Balloc+0x68>
 8008d70:	2101      	movs	r1, #1
 8008d72:	fa01 f605 	lsl.w	r6, r1, r5
 8008d76:	1d72      	adds	r2, r6, #5
 8008d78:	0092      	lsls	r2, r2, #2
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f000 fb60 	bl	8009440 <_calloc_r>
 8008d80:	b160      	cbz	r0, 8008d9c <_Balloc+0x64>
 8008d82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d86:	e00e      	b.n	8008da6 <_Balloc+0x6e>
 8008d88:	2221      	movs	r2, #33	; 0x21
 8008d8a:	2104      	movs	r1, #4
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f000 fb57 	bl	8009440 <_calloc_r>
 8008d92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d94:	60f0      	str	r0, [r6, #12]
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d1e4      	bne.n	8008d66 <_Balloc+0x2e>
 8008d9c:	2000      	movs	r0, #0
 8008d9e:	bd70      	pop	{r4, r5, r6, pc}
 8008da0:	6802      	ldr	r2, [r0, #0]
 8008da2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008da6:	2300      	movs	r3, #0
 8008da8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008dac:	e7f7      	b.n	8008d9e <_Balloc+0x66>
 8008dae:	bf00      	nop
 8008db0:	0800a5e5 	.word	0x0800a5e5
 8008db4:	0800a668 	.word	0x0800a668

08008db8 <_Bfree>:
 8008db8:	b570      	push	{r4, r5, r6, lr}
 8008dba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008dbc:	4605      	mov	r5, r0
 8008dbe:	460c      	mov	r4, r1
 8008dc0:	b976      	cbnz	r6, 8008de0 <_Bfree+0x28>
 8008dc2:	2010      	movs	r0, #16
 8008dc4:	f7fe fb7a 	bl	80074bc <malloc>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	6268      	str	r0, [r5, #36]	; 0x24
 8008dcc:	b920      	cbnz	r0, 8008dd8 <_Bfree+0x20>
 8008dce:	4b09      	ldr	r3, [pc, #36]	; (8008df4 <_Bfree+0x3c>)
 8008dd0:	4809      	ldr	r0, [pc, #36]	; (8008df8 <_Bfree+0x40>)
 8008dd2:	218a      	movs	r1, #138	; 0x8a
 8008dd4:	f000 fca6 	bl	8009724 <__assert_func>
 8008dd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ddc:	6006      	str	r6, [r0, #0]
 8008dde:	60c6      	str	r6, [r0, #12]
 8008de0:	b13c      	cbz	r4, 8008df2 <_Bfree+0x3a>
 8008de2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008de4:	6862      	ldr	r2, [r4, #4]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008dec:	6021      	str	r1, [r4, #0]
 8008dee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008df2:	bd70      	pop	{r4, r5, r6, pc}
 8008df4:	0800a5e5 	.word	0x0800a5e5
 8008df8:	0800a668 	.word	0x0800a668

08008dfc <__multadd>:
 8008dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e00:	690d      	ldr	r5, [r1, #16]
 8008e02:	4607      	mov	r7, r0
 8008e04:	460c      	mov	r4, r1
 8008e06:	461e      	mov	r6, r3
 8008e08:	f101 0c14 	add.w	ip, r1, #20
 8008e0c:	2000      	movs	r0, #0
 8008e0e:	f8dc 3000 	ldr.w	r3, [ip]
 8008e12:	b299      	uxth	r1, r3
 8008e14:	fb02 6101 	mla	r1, r2, r1, r6
 8008e18:	0c1e      	lsrs	r6, r3, #16
 8008e1a:	0c0b      	lsrs	r3, r1, #16
 8008e1c:	fb02 3306 	mla	r3, r2, r6, r3
 8008e20:	b289      	uxth	r1, r1
 8008e22:	3001      	adds	r0, #1
 8008e24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e28:	4285      	cmp	r5, r0
 8008e2a:	f84c 1b04 	str.w	r1, [ip], #4
 8008e2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e32:	dcec      	bgt.n	8008e0e <__multadd+0x12>
 8008e34:	b30e      	cbz	r6, 8008e7a <__multadd+0x7e>
 8008e36:	68a3      	ldr	r3, [r4, #8]
 8008e38:	42ab      	cmp	r3, r5
 8008e3a:	dc19      	bgt.n	8008e70 <__multadd+0x74>
 8008e3c:	6861      	ldr	r1, [r4, #4]
 8008e3e:	4638      	mov	r0, r7
 8008e40:	3101      	adds	r1, #1
 8008e42:	f7ff ff79 	bl	8008d38 <_Balloc>
 8008e46:	4680      	mov	r8, r0
 8008e48:	b928      	cbnz	r0, 8008e56 <__multadd+0x5a>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	4b0c      	ldr	r3, [pc, #48]	; (8008e80 <__multadd+0x84>)
 8008e4e:	480d      	ldr	r0, [pc, #52]	; (8008e84 <__multadd+0x88>)
 8008e50:	21b5      	movs	r1, #181	; 0xb5
 8008e52:	f000 fc67 	bl	8009724 <__assert_func>
 8008e56:	6922      	ldr	r2, [r4, #16]
 8008e58:	3202      	adds	r2, #2
 8008e5a:	f104 010c 	add.w	r1, r4, #12
 8008e5e:	0092      	lsls	r2, r2, #2
 8008e60:	300c      	adds	r0, #12
 8008e62:	f7ff ff4f 	bl	8008d04 <memcpy>
 8008e66:	4621      	mov	r1, r4
 8008e68:	4638      	mov	r0, r7
 8008e6a:	f7ff ffa5 	bl	8008db8 <_Bfree>
 8008e6e:	4644      	mov	r4, r8
 8008e70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e74:	3501      	adds	r5, #1
 8008e76:	615e      	str	r6, [r3, #20]
 8008e78:	6125      	str	r5, [r4, #16]
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e80:	0800a657 	.word	0x0800a657
 8008e84:	0800a668 	.word	0x0800a668

08008e88 <__hi0bits>:
 8008e88:	0c03      	lsrs	r3, r0, #16
 8008e8a:	041b      	lsls	r3, r3, #16
 8008e8c:	b9d3      	cbnz	r3, 8008ec4 <__hi0bits+0x3c>
 8008e8e:	0400      	lsls	r0, r0, #16
 8008e90:	2310      	movs	r3, #16
 8008e92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e96:	bf04      	itt	eq
 8008e98:	0200      	lsleq	r0, r0, #8
 8008e9a:	3308      	addeq	r3, #8
 8008e9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008ea0:	bf04      	itt	eq
 8008ea2:	0100      	lsleq	r0, r0, #4
 8008ea4:	3304      	addeq	r3, #4
 8008ea6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008eaa:	bf04      	itt	eq
 8008eac:	0080      	lsleq	r0, r0, #2
 8008eae:	3302      	addeq	r3, #2
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	db05      	blt.n	8008ec0 <__hi0bits+0x38>
 8008eb4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008eb8:	f103 0301 	add.w	r3, r3, #1
 8008ebc:	bf08      	it	eq
 8008ebe:	2320      	moveq	r3, #32
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	4770      	bx	lr
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	e7e4      	b.n	8008e92 <__hi0bits+0xa>

08008ec8 <__lo0bits>:
 8008ec8:	6803      	ldr	r3, [r0, #0]
 8008eca:	f013 0207 	ands.w	r2, r3, #7
 8008ece:	4601      	mov	r1, r0
 8008ed0:	d00b      	beq.n	8008eea <__lo0bits+0x22>
 8008ed2:	07da      	lsls	r2, r3, #31
 8008ed4:	d423      	bmi.n	8008f1e <__lo0bits+0x56>
 8008ed6:	0798      	lsls	r0, r3, #30
 8008ed8:	bf49      	itett	mi
 8008eda:	085b      	lsrmi	r3, r3, #1
 8008edc:	089b      	lsrpl	r3, r3, #2
 8008ede:	2001      	movmi	r0, #1
 8008ee0:	600b      	strmi	r3, [r1, #0]
 8008ee2:	bf5c      	itt	pl
 8008ee4:	600b      	strpl	r3, [r1, #0]
 8008ee6:	2002      	movpl	r0, #2
 8008ee8:	4770      	bx	lr
 8008eea:	b298      	uxth	r0, r3
 8008eec:	b9a8      	cbnz	r0, 8008f1a <__lo0bits+0x52>
 8008eee:	0c1b      	lsrs	r3, r3, #16
 8008ef0:	2010      	movs	r0, #16
 8008ef2:	b2da      	uxtb	r2, r3
 8008ef4:	b90a      	cbnz	r2, 8008efa <__lo0bits+0x32>
 8008ef6:	3008      	adds	r0, #8
 8008ef8:	0a1b      	lsrs	r3, r3, #8
 8008efa:	071a      	lsls	r2, r3, #28
 8008efc:	bf04      	itt	eq
 8008efe:	091b      	lsreq	r3, r3, #4
 8008f00:	3004      	addeq	r0, #4
 8008f02:	079a      	lsls	r2, r3, #30
 8008f04:	bf04      	itt	eq
 8008f06:	089b      	lsreq	r3, r3, #2
 8008f08:	3002      	addeq	r0, #2
 8008f0a:	07da      	lsls	r2, r3, #31
 8008f0c:	d403      	bmi.n	8008f16 <__lo0bits+0x4e>
 8008f0e:	085b      	lsrs	r3, r3, #1
 8008f10:	f100 0001 	add.w	r0, r0, #1
 8008f14:	d005      	beq.n	8008f22 <__lo0bits+0x5a>
 8008f16:	600b      	str	r3, [r1, #0]
 8008f18:	4770      	bx	lr
 8008f1a:	4610      	mov	r0, r2
 8008f1c:	e7e9      	b.n	8008ef2 <__lo0bits+0x2a>
 8008f1e:	2000      	movs	r0, #0
 8008f20:	4770      	bx	lr
 8008f22:	2020      	movs	r0, #32
 8008f24:	4770      	bx	lr
	...

08008f28 <__i2b>:
 8008f28:	b510      	push	{r4, lr}
 8008f2a:	460c      	mov	r4, r1
 8008f2c:	2101      	movs	r1, #1
 8008f2e:	f7ff ff03 	bl	8008d38 <_Balloc>
 8008f32:	4602      	mov	r2, r0
 8008f34:	b928      	cbnz	r0, 8008f42 <__i2b+0x1a>
 8008f36:	4b05      	ldr	r3, [pc, #20]	; (8008f4c <__i2b+0x24>)
 8008f38:	4805      	ldr	r0, [pc, #20]	; (8008f50 <__i2b+0x28>)
 8008f3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008f3e:	f000 fbf1 	bl	8009724 <__assert_func>
 8008f42:	2301      	movs	r3, #1
 8008f44:	6144      	str	r4, [r0, #20]
 8008f46:	6103      	str	r3, [r0, #16]
 8008f48:	bd10      	pop	{r4, pc}
 8008f4a:	bf00      	nop
 8008f4c:	0800a657 	.word	0x0800a657
 8008f50:	0800a668 	.word	0x0800a668

08008f54 <__multiply>:
 8008f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f58:	4691      	mov	r9, r2
 8008f5a:	690a      	ldr	r2, [r1, #16]
 8008f5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	bfb8      	it	lt
 8008f64:	460b      	movlt	r3, r1
 8008f66:	460c      	mov	r4, r1
 8008f68:	bfbc      	itt	lt
 8008f6a:	464c      	movlt	r4, r9
 8008f6c:	4699      	movlt	r9, r3
 8008f6e:	6927      	ldr	r7, [r4, #16]
 8008f70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008f74:	68a3      	ldr	r3, [r4, #8]
 8008f76:	6861      	ldr	r1, [r4, #4]
 8008f78:	eb07 060a 	add.w	r6, r7, sl
 8008f7c:	42b3      	cmp	r3, r6
 8008f7e:	b085      	sub	sp, #20
 8008f80:	bfb8      	it	lt
 8008f82:	3101      	addlt	r1, #1
 8008f84:	f7ff fed8 	bl	8008d38 <_Balloc>
 8008f88:	b930      	cbnz	r0, 8008f98 <__multiply+0x44>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	4b44      	ldr	r3, [pc, #272]	; (80090a0 <__multiply+0x14c>)
 8008f8e:	4845      	ldr	r0, [pc, #276]	; (80090a4 <__multiply+0x150>)
 8008f90:	f240 115d 	movw	r1, #349	; 0x15d
 8008f94:	f000 fbc6 	bl	8009724 <__assert_func>
 8008f98:	f100 0514 	add.w	r5, r0, #20
 8008f9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008fa0:	462b      	mov	r3, r5
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	4543      	cmp	r3, r8
 8008fa6:	d321      	bcc.n	8008fec <__multiply+0x98>
 8008fa8:	f104 0314 	add.w	r3, r4, #20
 8008fac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008fb0:	f109 0314 	add.w	r3, r9, #20
 8008fb4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008fb8:	9202      	str	r2, [sp, #8]
 8008fba:	1b3a      	subs	r2, r7, r4
 8008fbc:	3a15      	subs	r2, #21
 8008fbe:	f022 0203 	bic.w	r2, r2, #3
 8008fc2:	3204      	adds	r2, #4
 8008fc4:	f104 0115 	add.w	r1, r4, #21
 8008fc8:	428f      	cmp	r7, r1
 8008fca:	bf38      	it	cc
 8008fcc:	2204      	movcc	r2, #4
 8008fce:	9201      	str	r2, [sp, #4]
 8008fd0:	9a02      	ldr	r2, [sp, #8]
 8008fd2:	9303      	str	r3, [sp, #12]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d80c      	bhi.n	8008ff2 <__multiply+0x9e>
 8008fd8:	2e00      	cmp	r6, #0
 8008fda:	dd03      	ble.n	8008fe4 <__multiply+0x90>
 8008fdc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d05a      	beq.n	800909a <__multiply+0x146>
 8008fe4:	6106      	str	r6, [r0, #16]
 8008fe6:	b005      	add	sp, #20
 8008fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fec:	f843 2b04 	str.w	r2, [r3], #4
 8008ff0:	e7d8      	b.n	8008fa4 <__multiply+0x50>
 8008ff2:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ff6:	f1ba 0f00 	cmp.w	sl, #0
 8008ffa:	d024      	beq.n	8009046 <__multiply+0xf2>
 8008ffc:	f104 0e14 	add.w	lr, r4, #20
 8009000:	46a9      	mov	r9, r5
 8009002:	f04f 0c00 	mov.w	ip, #0
 8009006:	f85e 2b04 	ldr.w	r2, [lr], #4
 800900a:	f8d9 1000 	ldr.w	r1, [r9]
 800900e:	fa1f fb82 	uxth.w	fp, r2
 8009012:	b289      	uxth	r1, r1
 8009014:	fb0a 110b 	mla	r1, sl, fp, r1
 8009018:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800901c:	f8d9 2000 	ldr.w	r2, [r9]
 8009020:	4461      	add	r1, ip
 8009022:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009026:	fb0a c20b 	mla	r2, sl, fp, ip
 800902a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800902e:	b289      	uxth	r1, r1
 8009030:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009034:	4577      	cmp	r7, lr
 8009036:	f849 1b04 	str.w	r1, [r9], #4
 800903a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800903e:	d8e2      	bhi.n	8009006 <__multiply+0xb2>
 8009040:	9a01      	ldr	r2, [sp, #4]
 8009042:	f845 c002 	str.w	ip, [r5, r2]
 8009046:	9a03      	ldr	r2, [sp, #12]
 8009048:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800904c:	3304      	adds	r3, #4
 800904e:	f1b9 0f00 	cmp.w	r9, #0
 8009052:	d020      	beq.n	8009096 <__multiply+0x142>
 8009054:	6829      	ldr	r1, [r5, #0]
 8009056:	f104 0c14 	add.w	ip, r4, #20
 800905a:	46ae      	mov	lr, r5
 800905c:	f04f 0a00 	mov.w	sl, #0
 8009060:	f8bc b000 	ldrh.w	fp, [ip]
 8009064:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009068:	fb09 220b 	mla	r2, r9, fp, r2
 800906c:	4492      	add	sl, r2
 800906e:	b289      	uxth	r1, r1
 8009070:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009074:	f84e 1b04 	str.w	r1, [lr], #4
 8009078:	f85c 2b04 	ldr.w	r2, [ip], #4
 800907c:	f8be 1000 	ldrh.w	r1, [lr]
 8009080:	0c12      	lsrs	r2, r2, #16
 8009082:	fb09 1102 	mla	r1, r9, r2, r1
 8009086:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800908a:	4567      	cmp	r7, ip
 800908c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009090:	d8e6      	bhi.n	8009060 <__multiply+0x10c>
 8009092:	9a01      	ldr	r2, [sp, #4]
 8009094:	50a9      	str	r1, [r5, r2]
 8009096:	3504      	adds	r5, #4
 8009098:	e79a      	b.n	8008fd0 <__multiply+0x7c>
 800909a:	3e01      	subs	r6, #1
 800909c:	e79c      	b.n	8008fd8 <__multiply+0x84>
 800909e:	bf00      	nop
 80090a0:	0800a657 	.word	0x0800a657
 80090a4:	0800a668 	.word	0x0800a668

080090a8 <__pow5mult>:
 80090a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090ac:	4615      	mov	r5, r2
 80090ae:	f012 0203 	ands.w	r2, r2, #3
 80090b2:	4606      	mov	r6, r0
 80090b4:	460f      	mov	r7, r1
 80090b6:	d007      	beq.n	80090c8 <__pow5mult+0x20>
 80090b8:	4c25      	ldr	r4, [pc, #148]	; (8009150 <__pow5mult+0xa8>)
 80090ba:	3a01      	subs	r2, #1
 80090bc:	2300      	movs	r3, #0
 80090be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090c2:	f7ff fe9b 	bl	8008dfc <__multadd>
 80090c6:	4607      	mov	r7, r0
 80090c8:	10ad      	asrs	r5, r5, #2
 80090ca:	d03d      	beq.n	8009148 <__pow5mult+0xa0>
 80090cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80090ce:	b97c      	cbnz	r4, 80090f0 <__pow5mult+0x48>
 80090d0:	2010      	movs	r0, #16
 80090d2:	f7fe f9f3 	bl	80074bc <malloc>
 80090d6:	4602      	mov	r2, r0
 80090d8:	6270      	str	r0, [r6, #36]	; 0x24
 80090da:	b928      	cbnz	r0, 80090e8 <__pow5mult+0x40>
 80090dc:	4b1d      	ldr	r3, [pc, #116]	; (8009154 <__pow5mult+0xac>)
 80090de:	481e      	ldr	r0, [pc, #120]	; (8009158 <__pow5mult+0xb0>)
 80090e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80090e4:	f000 fb1e 	bl	8009724 <__assert_func>
 80090e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090ec:	6004      	str	r4, [r0, #0]
 80090ee:	60c4      	str	r4, [r0, #12]
 80090f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80090f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090f8:	b94c      	cbnz	r4, 800910e <__pow5mult+0x66>
 80090fa:	f240 2171 	movw	r1, #625	; 0x271
 80090fe:	4630      	mov	r0, r6
 8009100:	f7ff ff12 	bl	8008f28 <__i2b>
 8009104:	2300      	movs	r3, #0
 8009106:	f8c8 0008 	str.w	r0, [r8, #8]
 800910a:	4604      	mov	r4, r0
 800910c:	6003      	str	r3, [r0, #0]
 800910e:	f04f 0900 	mov.w	r9, #0
 8009112:	07eb      	lsls	r3, r5, #31
 8009114:	d50a      	bpl.n	800912c <__pow5mult+0x84>
 8009116:	4639      	mov	r1, r7
 8009118:	4622      	mov	r2, r4
 800911a:	4630      	mov	r0, r6
 800911c:	f7ff ff1a 	bl	8008f54 <__multiply>
 8009120:	4639      	mov	r1, r7
 8009122:	4680      	mov	r8, r0
 8009124:	4630      	mov	r0, r6
 8009126:	f7ff fe47 	bl	8008db8 <_Bfree>
 800912a:	4647      	mov	r7, r8
 800912c:	106d      	asrs	r5, r5, #1
 800912e:	d00b      	beq.n	8009148 <__pow5mult+0xa0>
 8009130:	6820      	ldr	r0, [r4, #0]
 8009132:	b938      	cbnz	r0, 8009144 <__pow5mult+0x9c>
 8009134:	4622      	mov	r2, r4
 8009136:	4621      	mov	r1, r4
 8009138:	4630      	mov	r0, r6
 800913a:	f7ff ff0b 	bl	8008f54 <__multiply>
 800913e:	6020      	str	r0, [r4, #0]
 8009140:	f8c0 9000 	str.w	r9, [r0]
 8009144:	4604      	mov	r4, r0
 8009146:	e7e4      	b.n	8009112 <__pow5mult+0x6a>
 8009148:	4638      	mov	r0, r7
 800914a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800914e:	bf00      	nop
 8009150:	0800a7b8 	.word	0x0800a7b8
 8009154:	0800a5e5 	.word	0x0800a5e5
 8009158:	0800a668 	.word	0x0800a668

0800915c <__lshift>:
 800915c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009160:	460c      	mov	r4, r1
 8009162:	6849      	ldr	r1, [r1, #4]
 8009164:	6923      	ldr	r3, [r4, #16]
 8009166:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800916a:	68a3      	ldr	r3, [r4, #8]
 800916c:	4607      	mov	r7, r0
 800916e:	4691      	mov	r9, r2
 8009170:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009174:	f108 0601 	add.w	r6, r8, #1
 8009178:	42b3      	cmp	r3, r6
 800917a:	db0b      	blt.n	8009194 <__lshift+0x38>
 800917c:	4638      	mov	r0, r7
 800917e:	f7ff fddb 	bl	8008d38 <_Balloc>
 8009182:	4605      	mov	r5, r0
 8009184:	b948      	cbnz	r0, 800919a <__lshift+0x3e>
 8009186:	4602      	mov	r2, r0
 8009188:	4b2a      	ldr	r3, [pc, #168]	; (8009234 <__lshift+0xd8>)
 800918a:	482b      	ldr	r0, [pc, #172]	; (8009238 <__lshift+0xdc>)
 800918c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009190:	f000 fac8 	bl	8009724 <__assert_func>
 8009194:	3101      	adds	r1, #1
 8009196:	005b      	lsls	r3, r3, #1
 8009198:	e7ee      	b.n	8009178 <__lshift+0x1c>
 800919a:	2300      	movs	r3, #0
 800919c:	f100 0114 	add.w	r1, r0, #20
 80091a0:	f100 0210 	add.w	r2, r0, #16
 80091a4:	4618      	mov	r0, r3
 80091a6:	4553      	cmp	r3, sl
 80091a8:	db37      	blt.n	800921a <__lshift+0xbe>
 80091aa:	6920      	ldr	r0, [r4, #16]
 80091ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091b0:	f104 0314 	add.w	r3, r4, #20
 80091b4:	f019 091f 	ands.w	r9, r9, #31
 80091b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80091c0:	d02f      	beq.n	8009222 <__lshift+0xc6>
 80091c2:	f1c9 0e20 	rsb	lr, r9, #32
 80091c6:	468a      	mov	sl, r1
 80091c8:	f04f 0c00 	mov.w	ip, #0
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	fa02 f209 	lsl.w	r2, r2, r9
 80091d2:	ea42 020c 	orr.w	r2, r2, ip
 80091d6:	f84a 2b04 	str.w	r2, [sl], #4
 80091da:	f853 2b04 	ldr.w	r2, [r3], #4
 80091de:	4298      	cmp	r0, r3
 80091e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80091e4:	d8f2      	bhi.n	80091cc <__lshift+0x70>
 80091e6:	1b03      	subs	r3, r0, r4
 80091e8:	3b15      	subs	r3, #21
 80091ea:	f023 0303 	bic.w	r3, r3, #3
 80091ee:	3304      	adds	r3, #4
 80091f0:	f104 0215 	add.w	r2, r4, #21
 80091f4:	4290      	cmp	r0, r2
 80091f6:	bf38      	it	cc
 80091f8:	2304      	movcc	r3, #4
 80091fa:	f841 c003 	str.w	ip, [r1, r3]
 80091fe:	f1bc 0f00 	cmp.w	ip, #0
 8009202:	d001      	beq.n	8009208 <__lshift+0xac>
 8009204:	f108 0602 	add.w	r6, r8, #2
 8009208:	3e01      	subs	r6, #1
 800920a:	4638      	mov	r0, r7
 800920c:	612e      	str	r6, [r5, #16]
 800920e:	4621      	mov	r1, r4
 8009210:	f7ff fdd2 	bl	8008db8 <_Bfree>
 8009214:	4628      	mov	r0, r5
 8009216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800921a:	f842 0f04 	str.w	r0, [r2, #4]!
 800921e:	3301      	adds	r3, #1
 8009220:	e7c1      	b.n	80091a6 <__lshift+0x4a>
 8009222:	3904      	subs	r1, #4
 8009224:	f853 2b04 	ldr.w	r2, [r3], #4
 8009228:	f841 2f04 	str.w	r2, [r1, #4]!
 800922c:	4298      	cmp	r0, r3
 800922e:	d8f9      	bhi.n	8009224 <__lshift+0xc8>
 8009230:	e7ea      	b.n	8009208 <__lshift+0xac>
 8009232:	bf00      	nop
 8009234:	0800a657 	.word	0x0800a657
 8009238:	0800a668 	.word	0x0800a668

0800923c <__mcmp>:
 800923c:	b530      	push	{r4, r5, lr}
 800923e:	6902      	ldr	r2, [r0, #16]
 8009240:	690c      	ldr	r4, [r1, #16]
 8009242:	1b12      	subs	r2, r2, r4
 8009244:	d10e      	bne.n	8009264 <__mcmp+0x28>
 8009246:	f100 0314 	add.w	r3, r0, #20
 800924a:	3114      	adds	r1, #20
 800924c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009250:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009254:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009258:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800925c:	42a5      	cmp	r5, r4
 800925e:	d003      	beq.n	8009268 <__mcmp+0x2c>
 8009260:	d305      	bcc.n	800926e <__mcmp+0x32>
 8009262:	2201      	movs	r2, #1
 8009264:	4610      	mov	r0, r2
 8009266:	bd30      	pop	{r4, r5, pc}
 8009268:	4283      	cmp	r3, r0
 800926a:	d3f3      	bcc.n	8009254 <__mcmp+0x18>
 800926c:	e7fa      	b.n	8009264 <__mcmp+0x28>
 800926e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009272:	e7f7      	b.n	8009264 <__mcmp+0x28>

08009274 <__mdiff>:
 8009274:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009278:	460c      	mov	r4, r1
 800927a:	4606      	mov	r6, r0
 800927c:	4611      	mov	r1, r2
 800927e:	4620      	mov	r0, r4
 8009280:	4690      	mov	r8, r2
 8009282:	f7ff ffdb 	bl	800923c <__mcmp>
 8009286:	1e05      	subs	r5, r0, #0
 8009288:	d110      	bne.n	80092ac <__mdiff+0x38>
 800928a:	4629      	mov	r1, r5
 800928c:	4630      	mov	r0, r6
 800928e:	f7ff fd53 	bl	8008d38 <_Balloc>
 8009292:	b930      	cbnz	r0, 80092a2 <__mdiff+0x2e>
 8009294:	4b3a      	ldr	r3, [pc, #232]	; (8009380 <__mdiff+0x10c>)
 8009296:	4602      	mov	r2, r0
 8009298:	f240 2132 	movw	r1, #562	; 0x232
 800929c:	4839      	ldr	r0, [pc, #228]	; (8009384 <__mdiff+0x110>)
 800929e:	f000 fa41 	bl	8009724 <__assert_func>
 80092a2:	2301      	movs	r3, #1
 80092a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80092a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ac:	bfa4      	itt	ge
 80092ae:	4643      	movge	r3, r8
 80092b0:	46a0      	movge	r8, r4
 80092b2:	4630      	mov	r0, r6
 80092b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80092b8:	bfa6      	itte	ge
 80092ba:	461c      	movge	r4, r3
 80092bc:	2500      	movge	r5, #0
 80092be:	2501      	movlt	r5, #1
 80092c0:	f7ff fd3a 	bl	8008d38 <_Balloc>
 80092c4:	b920      	cbnz	r0, 80092d0 <__mdiff+0x5c>
 80092c6:	4b2e      	ldr	r3, [pc, #184]	; (8009380 <__mdiff+0x10c>)
 80092c8:	4602      	mov	r2, r0
 80092ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 80092ce:	e7e5      	b.n	800929c <__mdiff+0x28>
 80092d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80092d4:	6926      	ldr	r6, [r4, #16]
 80092d6:	60c5      	str	r5, [r0, #12]
 80092d8:	f104 0914 	add.w	r9, r4, #20
 80092dc:	f108 0514 	add.w	r5, r8, #20
 80092e0:	f100 0e14 	add.w	lr, r0, #20
 80092e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80092e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80092ec:	f108 0210 	add.w	r2, r8, #16
 80092f0:	46f2      	mov	sl, lr
 80092f2:	2100      	movs	r1, #0
 80092f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80092f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80092fc:	fa1f f883 	uxth.w	r8, r3
 8009300:	fa11 f18b 	uxtah	r1, r1, fp
 8009304:	0c1b      	lsrs	r3, r3, #16
 8009306:	eba1 0808 	sub.w	r8, r1, r8
 800930a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800930e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009312:	fa1f f888 	uxth.w	r8, r8
 8009316:	1419      	asrs	r1, r3, #16
 8009318:	454e      	cmp	r6, r9
 800931a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800931e:	f84a 3b04 	str.w	r3, [sl], #4
 8009322:	d8e7      	bhi.n	80092f4 <__mdiff+0x80>
 8009324:	1b33      	subs	r3, r6, r4
 8009326:	3b15      	subs	r3, #21
 8009328:	f023 0303 	bic.w	r3, r3, #3
 800932c:	3304      	adds	r3, #4
 800932e:	3415      	adds	r4, #21
 8009330:	42a6      	cmp	r6, r4
 8009332:	bf38      	it	cc
 8009334:	2304      	movcc	r3, #4
 8009336:	441d      	add	r5, r3
 8009338:	4473      	add	r3, lr
 800933a:	469e      	mov	lr, r3
 800933c:	462e      	mov	r6, r5
 800933e:	4566      	cmp	r6, ip
 8009340:	d30e      	bcc.n	8009360 <__mdiff+0xec>
 8009342:	f10c 0203 	add.w	r2, ip, #3
 8009346:	1b52      	subs	r2, r2, r5
 8009348:	f022 0203 	bic.w	r2, r2, #3
 800934c:	3d03      	subs	r5, #3
 800934e:	45ac      	cmp	ip, r5
 8009350:	bf38      	it	cc
 8009352:	2200      	movcc	r2, #0
 8009354:	441a      	add	r2, r3
 8009356:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800935a:	b17b      	cbz	r3, 800937c <__mdiff+0x108>
 800935c:	6107      	str	r7, [r0, #16]
 800935e:	e7a3      	b.n	80092a8 <__mdiff+0x34>
 8009360:	f856 8b04 	ldr.w	r8, [r6], #4
 8009364:	fa11 f288 	uxtah	r2, r1, r8
 8009368:	1414      	asrs	r4, r2, #16
 800936a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800936e:	b292      	uxth	r2, r2
 8009370:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009374:	f84e 2b04 	str.w	r2, [lr], #4
 8009378:	1421      	asrs	r1, r4, #16
 800937a:	e7e0      	b.n	800933e <__mdiff+0xca>
 800937c:	3f01      	subs	r7, #1
 800937e:	e7ea      	b.n	8009356 <__mdiff+0xe2>
 8009380:	0800a657 	.word	0x0800a657
 8009384:	0800a668 	.word	0x0800a668

08009388 <__d2b>:
 8009388:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800938c:	4689      	mov	r9, r1
 800938e:	2101      	movs	r1, #1
 8009390:	ec57 6b10 	vmov	r6, r7, d0
 8009394:	4690      	mov	r8, r2
 8009396:	f7ff fccf 	bl	8008d38 <_Balloc>
 800939a:	4604      	mov	r4, r0
 800939c:	b930      	cbnz	r0, 80093ac <__d2b+0x24>
 800939e:	4602      	mov	r2, r0
 80093a0:	4b25      	ldr	r3, [pc, #148]	; (8009438 <__d2b+0xb0>)
 80093a2:	4826      	ldr	r0, [pc, #152]	; (800943c <__d2b+0xb4>)
 80093a4:	f240 310a 	movw	r1, #778	; 0x30a
 80093a8:	f000 f9bc 	bl	8009724 <__assert_func>
 80093ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80093b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80093b4:	bb35      	cbnz	r5, 8009404 <__d2b+0x7c>
 80093b6:	2e00      	cmp	r6, #0
 80093b8:	9301      	str	r3, [sp, #4]
 80093ba:	d028      	beq.n	800940e <__d2b+0x86>
 80093bc:	4668      	mov	r0, sp
 80093be:	9600      	str	r6, [sp, #0]
 80093c0:	f7ff fd82 	bl	8008ec8 <__lo0bits>
 80093c4:	9900      	ldr	r1, [sp, #0]
 80093c6:	b300      	cbz	r0, 800940a <__d2b+0x82>
 80093c8:	9a01      	ldr	r2, [sp, #4]
 80093ca:	f1c0 0320 	rsb	r3, r0, #32
 80093ce:	fa02 f303 	lsl.w	r3, r2, r3
 80093d2:	430b      	orrs	r3, r1
 80093d4:	40c2      	lsrs	r2, r0
 80093d6:	6163      	str	r3, [r4, #20]
 80093d8:	9201      	str	r2, [sp, #4]
 80093da:	9b01      	ldr	r3, [sp, #4]
 80093dc:	61a3      	str	r3, [r4, #24]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	bf14      	ite	ne
 80093e2:	2202      	movne	r2, #2
 80093e4:	2201      	moveq	r2, #1
 80093e6:	6122      	str	r2, [r4, #16]
 80093e8:	b1d5      	cbz	r5, 8009420 <__d2b+0x98>
 80093ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80093ee:	4405      	add	r5, r0
 80093f0:	f8c9 5000 	str.w	r5, [r9]
 80093f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80093f8:	f8c8 0000 	str.w	r0, [r8]
 80093fc:	4620      	mov	r0, r4
 80093fe:	b003      	add	sp, #12
 8009400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009408:	e7d5      	b.n	80093b6 <__d2b+0x2e>
 800940a:	6161      	str	r1, [r4, #20]
 800940c:	e7e5      	b.n	80093da <__d2b+0x52>
 800940e:	a801      	add	r0, sp, #4
 8009410:	f7ff fd5a 	bl	8008ec8 <__lo0bits>
 8009414:	9b01      	ldr	r3, [sp, #4]
 8009416:	6163      	str	r3, [r4, #20]
 8009418:	2201      	movs	r2, #1
 800941a:	6122      	str	r2, [r4, #16]
 800941c:	3020      	adds	r0, #32
 800941e:	e7e3      	b.n	80093e8 <__d2b+0x60>
 8009420:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009424:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009428:	f8c9 0000 	str.w	r0, [r9]
 800942c:	6918      	ldr	r0, [r3, #16]
 800942e:	f7ff fd2b 	bl	8008e88 <__hi0bits>
 8009432:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009436:	e7df      	b.n	80093f8 <__d2b+0x70>
 8009438:	0800a657 	.word	0x0800a657
 800943c:	0800a668 	.word	0x0800a668

08009440 <_calloc_r>:
 8009440:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009442:	fba1 2402 	umull	r2, r4, r1, r2
 8009446:	b94c      	cbnz	r4, 800945c <_calloc_r+0x1c>
 8009448:	4611      	mov	r1, r2
 800944a:	9201      	str	r2, [sp, #4]
 800944c:	f7fe f8ba 	bl	80075c4 <_malloc_r>
 8009450:	9a01      	ldr	r2, [sp, #4]
 8009452:	4605      	mov	r5, r0
 8009454:	b930      	cbnz	r0, 8009464 <_calloc_r+0x24>
 8009456:	4628      	mov	r0, r5
 8009458:	b003      	add	sp, #12
 800945a:	bd30      	pop	{r4, r5, pc}
 800945c:	220c      	movs	r2, #12
 800945e:	6002      	str	r2, [r0, #0]
 8009460:	2500      	movs	r5, #0
 8009462:	e7f8      	b.n	8009456 <_calloc_r+0x16>
 8009464:	4621      	mov	r1, r4
 8009466:	f7fe f839 	bl	80074dc <memset>
 800946a:	e7f4      	b.n	8009456 <_calloc_r+0x16>

0800946c <__ssputs_r>:
 800946c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009470:	688e      	ldr	r6, [r1, #8]
 8009472:	429e      	cmp	r6, r3
 8009474:	4682      	mov	sl, r0
 8009476:	460c      	mov	r4, r1
 8009478:	4690      	mov	r8, r2
 800947a:	461f      	mov	r7, r3
 800947c:	d838      	bhi.n	80094f0 <__ssputs_r+0x84>
 800947e:	898a      	ldrh	r2, [r1, #12]
 8009480:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009484:	d032      	beq.n	80094ec <__ssputs_r+0x80>
 8009486:	6825      	ldr	r5, [r4, #0]
 8009488:	6909      	ldr	r1, [r1, #16]
 800948a:	eba5 0901 	sub.w	r9, r5, r1
 800948e:	6965      	ldr	r5, [r4, #20]
 8009490:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009494:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009498:	3301      	adds	r3, #1
 800949a:	444b      	add	r3, r9
 800949c:	106d      	asrs	r5, r5, #1
 800949e:	429d      	cmp	r5, r3
 80094a0:	bf38      	it	cc
 80094a2:	461d      	movcc	r5, r3
 80094a4:	0553      	lsls	r3, r2, #21
 80094a6:	d531      	bpl.n	800950c <__ssputs_r+0xa0>
 80094a8:	4629      	mov	r1, r5
 80094aa:	f7fe f88b 	bl	80075c4 <_malloc_r>
 80094ae:	4606      	mov	r6, r0
 80094b0:	b950      	cbnz	r0, 80094c8 <__ssputs_r+0x5c>
 80094b2:	230c      	movs	r3, #12
 80094b4:	f8ca 3000 	str.w	r3, [sl]
 80094b8:	89a3      	ldrh	r3, [r4, #12]
 80094ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094be:	81a3      	strh	r3, [r4, #12]
 80094c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094c8:	6921      	ldr	r1, [r4, #16]
 80094ca:	464a      	mov	r2, r9
 80094cc:	f7ff fc1a 	bl	8008d04 <memcpy>
 80094d0:	89a3      	ldrh	r3, [r4, #12]
 80094d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094da:	81a3      	strh	r3, [r4, #12]
 80094dc:	6126      	str	r6, [r4, #16]
 80094de:	6165      	str	r5, [r4, #20]
 80094e0:	444e      	add	r6, r9
 80094e2:	eba5 0509 	sub.w	r5, r5, r9
 80094e6:	6026      	str	r6, [r4, #0]
 80094e8:	60a5      	str	r5, [r4, #8]
 80094ea:	463e      	mov	r6, r7
 80094ec:	42be      	cmp	r6, r7
 80094ee:	d900      	bls.n	80094f2 <__ssputs_r+0x86>
 80094f0:	463e      	mov	r6, r7
 80094f2:	6820      	ldr	r0, [r4, #0]
 80094f4:	4632      	mov	r2, r6
 80094f6:	4641      	mov	r1, r8
 80094f8:	f000 f959 	bl	80097ae <memmove>
 80094fc:	68a3      	ldr	r3, [r4, #8]
 80094fe:	1b9b      	subs	r3, r3, r6
 8009500:	60a3      	str	r3, [r4, #8]
 8009502:	6823      	ldr	r3, [r4, #0]
 8009504:	4433      	add	r3, r6
 8009506:	6023      	str	r3, [r4, #0]
 8009508:	2000      	movs	r0, #0
 800950a:	e7db      	b.n	80094c4 <__ssputs_r+0x58>
 800950c:	462a      	mov	r2, r5
 800950e:	f000 f968 	bl	80097e2 <_realloc_r>
 8009512:	4606      	mov	r6, r0
 8009514:	2800      	cmp	r0, #0
 8009516:	d1e1      	bne.n	80094dc <__ssputs_r+0x70>
 8009518:	6921      	ldr	r1, [r4, #16]
 800951a:	4650      	mov	r0, sl
 800951c:	f7fd ffe6 	bl	80074ec <_free_r>
 8009520:	e7c7      	b.n	80094b2 <__ssputs_r+0x46>
	...

08009524 <_svfiprintf_r>:
 8009524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009528:	4698      	mov	r8, r3
 800952a:	898b      	ldrh	r3, [r1, #12]
 800952c:	061b      	lsls	r3, r3, #24
 800952e:	b09d      	sub	sp, #116	; 0x74
 8009530:	4607      	mov	r7, r0
 8009532:	460d      	mov	r5, r1
 8009534:	4614      	mov	r4, r2
 8009536:	d50e      	bpl.n	8009556 <_svfiprintf_r+0x32>
 8009538:	690b      	ldr	r3, [r1, #16]
 800953a:	b963      	cbnz	r3, 8009556 <_svfiprintf_r+0x32>
 800953c:	2140      	movs	r1, #64	; 0x40
 800953e:	f7fe f841 	bl	80075c4 <_malloc_r>
 8009542:	6028      	str	r0, [r5, #0]
 8009544:	6128      	str	r0, [r5, #16]
 8009546:	b920      	cbnz	r0, 8009552 <_svfiprintf_r+0x2e>
 8009548:	230c      	movs	r3, #12
 800954a:	603b      	str	r3, [r7, #0]
 800954c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009550:	e0d1      	b.n	80096f6 <_svfiprintf_r+0x1d2>
 8009552:	2340      	movs	r3, #64	; 0x40
 8009554:	616b      	str	r3, [r5, #20]
 8009556:	2300      	movs	r3, #0
 8009558:	9309      	str	r3, [sp, #36]	; 0x24
 800955a:	2320      	movs	r3, #32
 800955c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009560:	f8cd 800c 	str.w	r8, [sp, #12]
 8009564:	2330      	movs	r3, #48	; 0x30
 8009566:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009710 <_svfiprintf_r+0x1ec>
 800956a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800956e:	f04f 0901 	mov.w	r9, #1
 8009572:	4623      	mov	r3, r4
 8009574:	469a      	mov	sl, r3
 8009576:	f813 2b01 	ldrb.w	r2, [r3], #1
 800957a:	b10a      	cbz	r2, 8009580 <_svfiprintf_r+0x5c>
 800957c:	2a25      	cmp	r2, #37	; 0x25
 800957e:	d1f9      	bne.n	8009574 <_svfiprintf_r+0x50>
 8009580:	ebba 0b04 	subs.w	fp, sl, r4
 8009584:	d00b      	beq.n	800959e <_svfiprintf_r+0x7a>
 8009586:	465b      	mov	r3, fp
 8009588:	4622      	mov	r2, r4
 800958a:	4629      	mov	r1, r5
 800958c:	4638      	mov	r0, r7
 800958e:	f7ff ff6d 	bl	800946c <__ssputs_r>
 8009592:	3001      	adds	r0, #1
 8009594:	f000 80aa 	beq.w	80096ec <_svfiprintf_r+0x1c8>
 8009598:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800959a:	445a      	add	r2, fp
 800959c:	9209      	str	r2, [sp, #36]	; 0x24
 800959e:	f89a 3000 	ldrb.w	r3, [sl]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f000 80a2 	beq.w	80096ec <_svfiprintf_r+0x1c8>
 80095a8:	2300      	movs	r3, #0
 80095aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095b2:	f10a 0a01 	add.w	sl, sl, #1
 80095b6:	9304      	str	r3, [sp, #16]
 80095b8:	9307      	str	r3, [sp, #28]
 80095ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095be:	931a      	str	r3, [sp, #104]	; 0x68
 80095c0:	4654      	mov	r4, sl
 80095c2:	2205      	movs	r2, #5
 80095c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095c8:	4851      	ldr	r0, [pc, #324]	; (8009710 <_svfiprintf_r+0x1ec>)
 80095ca:	f7f6 fe29 	bl	8000220 <memchr>
 80095ce:	9a04      	ldr	r2, [sp, #16]
 80095d0:	b9d8      	cbnz	r0, 800960a <_svfiprintf_r+0xe6>
 80095d2:	06d0      	lsls	r0, r2, #27
 80095d4:	bf44      	itt	mi
 80095d6:	2320      	movmi	r3, #32
 80095d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095dc:	0711      	lsls	r1, r2, #28
 80095de:	bf44      	itt	mi
 80095e0:	232b      	movmi	r3, #43	; 0x2b
 80095e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095e6:	f89a 3000 	ldrb.w	r3, [sl]
 80095ea:	2b2a      	cmp	r3, #42	; 0x2a
 80095ec:	d015      	beq.n	800961a <_svfiprintf_r+0xf6>
 80095ee:	9a07      	ldr	r2, [sp, #28]
 80095f0:	4654      	mov	r4, sl
 80095f2:	2000      	movs	r0, #0
 80095f4:	f04f 0c0a 	mov.w	ip, #10
 80095f8:	4621      	mov	r1, r4
 80095fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095fe:	3b30      	subs	r3, #48	; 0x30
 8009600:	2b09      	cmp	r3, #9
 8009602:	d94e      	bls.n	80096a2 <_svfiprintf_r+0x17e>
 8009604:	b1b0      	cbz	r0, 8009634 <_svfiprintf_r+0x110>
 8009606:	9207      	str	r2, [sp, #28]
 8009608:	e014      	b.n	8009634 <_svfiprintf_r+0x110>
 800960a:	eba0 0308 	sub.w	r3, r0, r8
 800960e:	fa09 f303 	lsl.w	r3, r9, r3
 8009612:	4313      	orrs	r3, r2
 8009614:	9304      	str	r3, [sp, #16]
 8009616:	46a2      	mov	sl, r4
 8009618:	e7d2      	b.n	80095c0 <_svfiprintf_r+0x9c>
 800961a:	9b03      	ldr	r3, [sp, #12]
 800961c:	1d19      	adds	r1, r3, #4
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	9103      	str	r1, [sp, #12]
 8009622:	2b00      	cmp	r3, #0
 8009624:	bfbb      	ittet	lt
 8009626:	425b      	neglt	r3, r3
 8009628:	f042 0202 	orrlt.w	r2, r2, #2
 800962c:	9307      	strge	r3, [sp, #28]
 800962e:	9307      	strlt	r3, [sp, #28]
 8009630:	bfb8      	it	lt
 8009632:	9204      	strlt	r2, [sp, #16]
 8009634:	7823      	ldrb	r3, [r4, #0]
 8009636:	2b2e      	cmp	r3, #46	; 0x2e
 8009638:	d10c      	bne.n	8009654 <_svfiprintf_r+0x130>
 800963a:	7863      	ldrb	r3, [r4, #1]
 800963c:	2b2a      	cmp	r3, #42	; 0x2a
 800963e:	d135      	bne.n	80096ac <_svfiprintf_r+0x188>
 8009640:	9b03      	ldr	r3, [sp, #12]
 8009642:	1d1a      	adds	r2, r3, #4
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	9203      	str	r2, [sp, #12]
 8009648:	2b00      	cmp	r3, #0
 800964a:	bfb8      	it	lt
 800964c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009650:	3402      	adds	r4, #2
 8009652:	9305      	str	r3, [sp, #20]
 8009654:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009720 <_svfiprintf_r+0x1fc>
 8009658:	7821      	ldrb	r1, [r4, #0]
 800965a:	2203      	movs	r2, #3
 800965c:	4650      	mov	r0, sl
 800965e:	f7f6 fddf 	bl	8000220 <memchr>
 8009662:	b140      	cbz	r0, 8009676 <_svfiprintf_r+0x152>
 8009664:	2340      	movs	r3, #64	; 0x40
 8009666:	eba0 000a 	sub.w	r0, r0, sl
 800966a:	fa03 f000 	lsl.w	r0, r3, r0
 800966e:	9b04      	ldr	r3, [sp, #16]
 8009670:	4303      	orrs	r3, r0
 8009672:	3401      	adds	r4, #1
 8009674:	9304      	str	r3, [sp, #16]
 8009676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800967a:	4826      	ldr	r0, [pc, #152]	; (8009714 <_svfiprintf_r+0x1f0>)
 800967c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009680:	2206      	movs	r2, #6
 8009682:	f7f6 fdcd 	bl	8000220 <memchr>
 8009686:	2800      	cmp	r0, #0
 8009688:	d038      	beq.n	80096fc <_svfiprintf_r+0x1d8>
 800968a:	4b23      	ldr	r3, [pc, #140]	; (8009718 <_svfiprintf_r+0x1f4>)
 800968c:	bb1b      	cbnz	r3, 80096d6 <_svfiprintf_r+0x1b2>
 800968e:	9b03      	ldr	r3, [sp, #12]
 8009690:	3307      	adds	r3, #7
 8009692:	f023 0307 	bic.w	r3, r3, #7
 8009696:	3308      	adds	r3, #8
 8009698:	9303      	str	r3, [sp, #12]
 800969a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800969c:	4433      	add	r3, r6
 800969e:	9309      	str	r3, [sp, #36]	; 0x24
 80096a0:	e767      	b.n	8009572 <_svfiprintf_r+0x4e>
 80096a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80096a6:	460c      	mov	r4, r1
 80096a8:	2001      	movs	r0, #1
 80096aa:	e7a5      	b.n	80095f8 <_svfiprintf_r+0xd4>
 80096ac:	2300      	movs	r3, #0
 80096ae:	3401      	adds	r4, #1
 80096b0:	9305      	str	r3, [sp, #20]
 80096b2:	4619      	mov	r1, r3
 80096b4:	f04f 0c0a 	mov.w	ip, #10
 80096b8:	4620      	mov	r0, r4
 80096ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096be:	3a30      	subs	r2, #48	; 0x30
 80096c0:	2a09      	cmp	r2, #9
 80096c2:	d903      	bls.n	80096cc <_svfiprintf_r+0x1a8>
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d0c5      	beq.n	8009654 <_svfiprintf_r+0x130>
 80096c8:	9105      	str	r1, [sp, #20]
 80096ca:	e7c3      	b.n	8009654 <_svfiprintf_r+0x130>
 80096cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80096d0:	4604      	mov	r4, r0
 80096d2:	2301      	movs	r3, #1
 80096d4:	e7f0      	b.n	80096b8 <_svfiprintf_r+0x194>
 80096d6:	ab03      	add	r3, sp, #12
 80096d8:	9300      	str	r3, [sp, #0]
 80096da:	462a      	mov	r2, r5
 80096dc:	4b0f      	ldr	r3, [pc, #60]	; (800971c <_svfiprintf_r+0x1f8>)
 80096de:	a904      	add	r1, sp, #16
 80096e0:	4638      	mov	r0, r7
 80096e2:	f7fe f883 	bl	80077ec <_printf_float>
 80096e6:	1c42      	adds	r2, r0, #1
 80096e8:	4606      	mov	r6, r0
 80096ea:	d1d6      	bne.n	800969a <_svfiprintf_r+0x176>
 80096ec:	89ab      	ldrh	r3, [r5, #12]
 80096ee:	065b      	lsls	r3, r3, #25
 80096f0:	f53f af2c 	bmi.w	800954c <_svfiprintf_r+0x28>
 80096f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096f6:	b01d      	add	sp, #116	; 0x74
 80096f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096fc:	ab03      	add	r3, sp, #12
 80096fe:	9300      	str	r3, [sp, #0]
 8009700:	462a      	mov	r2, r5
 8009702:	4b06      	ldr	r3, [pc, #24]	; (800971c <_svfiprintf_r+0x1f8>)
 8009704:	a904      	add	r1, sp, #16
 8009706:	4638      	mov	r0, r7
 8009708:	f7fe fb14 	bl	8007d34 <_printf_i>
 800970c:	e7eb      	b.n	80096e6 <_svfiprintf_r+0x1c2>
 800970e:	bf00      	nop
 8009710:	0800a7c4 	.word	0x0800a7c4
 8009714:	0800a7ce 	.word	0x0800a7ce
 8009718:	080077ed 	.word	0x080077ed
 800971c:	0800946d 	.word	0x0800946d
 8009720:	0800a7ca 	.word	0x0800a7ca

08009724 <__assert_func>:
 8009724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009726:	4614      	mov	r4, r2
 8009728:	461a      	mov	r2, r3
 800972a:	4b09      	ldr	r3, [pc, #36]	; (8009750 <__assert_func+0x2c>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4605      	mov	r5, r0
 8009730:	68d8      	ldr	r0, [r3, #12]
 8009732:	b14c      	cbz	r4, 8009748 <__assert_func+0x24>
 8009734:	4b07      	ldr	r3, [pc, #28]	; (8009754 <__assert_func+0x30>)
 8009736:	9100      	str	r1, [sp, #0]
 8009738:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800973c:	4906      	ldr	r1, [pc, #24]	; (8009758 <__assert_func+0x34>)
 800973e:	462b      	mov	r3, r5
 8009740:	f000 f80e 	bl	8009760 <fiprintf>
 8009744:	f000 faa4 	bl	8009c90 <abort>
 8009748:	4b04      	ldr	r3, [pc, #16]	; (800975c <__assert_func+0x38>)
 800974a:	461c      	mov	r4, r3
 800974c:	e7f3      	b.n	8009736 <__assert_func+0x12>
 800974e:	bf00      	nop
 8009750:	200023d4 	.word	0x200023d4
 8009754:	0800a7d5 	.word	0x0800a7d5
 8009758:	0800a7e2 	.word	0x0800a7e2
 800975c:	0800a810 	.word	0x0800a810

08009760 <fiprintf>:
 8009760:	b40e      	push	{r1, r2, r3}
 8009762:	b503      	push	{r0, r1, lr}
 8009764:	4601      	mov	r1, r0
 8009766:	ab03      	add	r3, sp, #12
 8009768:	4805      	ldr	r0, [pc, #20]	; (8009780 <fiprintf+0x20>)
 800976a:	f853 2b04 	ldr.w	r2, [r3], #4
 800976e:	6800      	ldr	r0, [r0, #0]
 8009770:	9301      	str	r3, [sp, #4]
 8009772:	f000 f88f 	bl	8009894 <_vfiprintf_r>
 8009776:	b002      	add	sp, #8
 8009778:	f85d eb04 	ldr.w	lr, [sp], #4
 800977c:	b003      	add	sp, #12
 800977e:	4770      	bx	lr
 8009780:	200023d4 	.word	0x200023d4

08009784 <__retarget_lock_init_recursive>:
 8009784:	4770      	bx	lr

08009786 <__retarget_lock_acquire_recursive>:
 8009786:	4770      	bx	lr

08009788 <__retarget_lock_release_recursive>:
 8009788:	4770      	bx	lr

0800978a <__ascii_mbtowc>:
 800978a:	b082      	sub	sp, #8
 800978c:	b901      	cbnz	r1, 8009790 <__ascii_mbtowc+0x6>
 800978e:	a901      	add	r1, sp, #4
 8009790:	b142      	cbz	r2, 80097a4 <__ascii_mbtowc+0x1a>
 8009792:	b14b      	cbz	r3, 80097a8 <__ascii_mbtowc+0x1e>
 8009794:	7813      	ldrb	r3, [r2, #0]
 8009796:	600b      	str	r3, [r1, #0]
 8009798:	7812      	ldrb	r2, [r2, #0]
 800979a:	1e10      	subs	r0, r2, #0
 800979c:	bf18      	it	ne
 800979e:	2001      	movne	r0, #1
 80097a0:	b002      	add	sp, #8
 80097a2:	4770      	bx	lr
 80097a4:	4610      	mov	r0, r2
 80097a6:	e7fb      	b.n	80097a0 <__ascii_mbtowc+0x16>
 80097a8:	f06f 0001 	mvn.w	r0, #1
 80097ac:	e7f8      	b.n	80097a0 <__ascii_mbtowc+0x16>

080097ae <memmove>:
 80097ae:	4288      	cmp	r0, r1
 80097b0:	b510      	push	{r4, lr}
 80097b2:	eb01 0402 	add.w	r4, r1, r2
 80097b6:	d902      	bls.n	80097be <memmove+0x10>
 80097b8:	4284      	cmp	r4, r0
 80097ba:	4623      	mov	r3, r4
 80097bc:	d807      	bhi.n	80097ce <memmove+0x20>
 80097be:	1e43      	subs	r3, r0, #1
 80097c0:	42a1      	cmp	r1, r4
 80097c2:	d008      	beq.n	80097d6 <memmove+0x28>
 80097c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097cc:	e7f8      	b.n	80097c0 <memmove+0x12>
 80097ce:	4402      	add	r2, r0
 80097d0:	4601      	mov	r1, r0
 80097d2:	428a      	cmp	r2, r1
 80097d4:	d100      	bne.n	80097d8 <memmove+0x2a>
 80097d6:	bd10      	pop	{r4, pc}
 80097d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097e0:	e7f7      	b.n	80097d2 <memmove+0x24>

080097e2 <_realloc_r>:
 80097e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e6:	4680      	mov	r8, r0
 80097e8:	4614      	mov	r4, r2
 80097ea:	460e      	mov	r6, r1
 80097ec:	b921      	cbnz	r1, 80097f8 <_realloc_r+0x16>
 80097ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097f2:	4611      	mov	r1, r2
 80097f4:	f7fd bee6 	b.w	80075c4 <_malloc_r>
 80097f8:	b92a      	cbnz	r2, 8009806 <_realloc_r+0x24>
 80097fa:	f7fd fe77 	bl	80074ec <_free_r>
 80097fe:	4625      	mov	r5, r4
 8009800:	4628      	mov	r0, r5
 8009802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009806:	f000 fc67 	bl	800a0d8 <_malloc_usable_size_r>
 800980a:	4284      	cmp	r4, r0
 800980c:	4607      	mov	r7, r0
 800980e:	d802      	bhi.n	8009816 <_realloc_r+0x34>
 8009810:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009814:	d812      	bhi.n	800983c <_realloc_r+0x5a>
 8009816:	4621      	mov	r1, r4
 8009818:	4640      	mov	r0, r8
 800981a:	f7fd fed3 	bl	80075c4 <_malloc_r>
 800981e:	4605      	mov	r5, r0
 8009820:	2800      	cmp	r0, #0
 8009822:	d0ed      	beq.n	8009800 <_realloc_r+0x1e>
 8009824:	42bc      	cmp	r4, r7
 8009826:	4622      	mov	r2, r4
 8009828:	4631      	mov	r1, r6
 800982a:	bf28      	it	cs
 800982c:	463a      	movcs	r2, r7
 800982e:	f7ff fa69 	bl	8008d04 <memcpy>
 8009832:	4631      	mov	r1, r6
 8009834:	4640      	mov	r0, r8
 8009836:	f7fd fe59 	bl	80074ec <_free_r>
 800983a:	e7e1      	b.n	8009800 <_realloc_r+0x1e>
 800983c:	4635      	mov	r5, r6
 800983e:	e7df      	b.n	8009800 <_realloc_r+0x1e>

08009840 <__sfputc_r>:
 8009840:	6893      	ldr	r3, [r2, #8]
 8009842:	3b01      	subs	r3, #1
 8009844:	2b00      	cmp	r3, #0
 8009846:	b410      	push	{r4}
 8009848:	6093      	str	r3, [r2, #8]
 800984a:	da08      	bge.n	800985e <__sfputc_r+0x1e>
 800984c:	6994      	ldr	r4, [r2, #24]
 800984e:	42a3      	cmp	r3, r4
 8009850:	db01      	blt.n	8009856 <__sfputc_r+0x16>
 8009852:	290a      	cmp	r1, #10
 8009854:	d103      	bne.n	800985e <__sfputc_r+0x1e>
 8009856:	f85d 4b04 	ldr.w	r4, [sp], #4
 800985a:	f000 b94b 	b.w	8009af4 <__swbuf_r>
 800985e:	6813      	ldr	r3, [r2, #0]
 8009860:	1c58      	adds	r0, r3, #1
 8009862:	6010      	str	r0, [r2, #0]
 8009864:	7019      	strb	r1, [r3, #0]
 8009866:	4608      	mov	r0, r1
 8009868:	f85d 4b04 	ldr.w	r4, [sp], #4
 800986c:	4770      	bx	lr

0800986e <__sfputs_r>:
 800986e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009870:	4606      	mov	r6, r0
 8009872:	460f      	mov	r7, r1
 8009874:	4614      	mov	r4, r2
 8009876:	18d5      	adds	r5, r2, r3
 8009878:	42ac      	cmp	r4, r5
 800987a:	d101      	bne.n	8009880 <__sfputs_r+0x12>
 800987c:	2000      	movs	r0, #0
 800987e:	e007      	b.n	8009890 <__sfputs_r+0x22>
 8009880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009884:	463a      	mov	r2, r7
 8009886:	4630      	mov	r0, r6
 8009888:	f7ff ffda 	bl	8009840 <__sfputc_r>
 800988c:	1c43      	adds	r3, r0, #1
 800988e:	d1f3      	bne.n	8009878 <__sfputs_r+0xa>
 8009890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009894 <_vfiprintf_r>:
 8009894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009898:	460d      	mov	r5, r1
 800989a:	b09d      	sub	sp, #116	; 0x74
 800989c:	4614      	mov	r4, r2
 800989e:	4698      	mov	r8, r3
 80098a0:	4606      	mov	r6, r0
 80098a2:	b118      	cbz	r0, 80098ac <_vfiprintf_r+0x18>
 80098a4:	6983      	ldr	r3, [r0, #24]
 80098a6:	b90b      	cbnz	r3, 80098ac <_vfiprintf_r+0x18>
 80098a8:	f000 fb14 	bl	8009ed4 <__sinit>
 80098ac:	4b89      	ldr	r3, [pc, #548]	; (8009ad4 <_vfiprintf_r+0x240>)
 80098ae:	429d      	cmp	r5, r3
 80098b0:	d11b      	bne.n	80098ea <_vfiprintf_r+0x56>
 80098b2:	6875      	ldr	r5, [r6, #4]
 80098b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098b6:	07d9      	lsls	r1, r3, #31
 80098b8:	d405      	bmi.n	80098c6 <_vfiprintf_r+0x32>
 80098ba:	89ab      	ldrh	r3, [r5, #12]
 80098bc:	059a      	lsls	r2, r3, #22
 80098be:	d402      	bmi.n	80098c6 <_vfiprintf_r+0x32>
 80098c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098c2:	f7ff ff60 	bl	8009786 <__retarget_lock_acquire_recursive>
 80098c6:	89ab      	ldrh	r3, [r5, #12]
 80098c8:	071b      	lsls	r3, r3, #28
 80098ca:	d501      	bpl.n	80098d0 <_vfiprintf_r+0x3c>
 80098cc:	692b      	ldr	r3, [r5, #16]
 80098ce:	b9eb      	cbnz	r3, 800990c <_vfiprintf_r+0x78>
 80098d0:	4629      	mov	r1, r5
 80098d2:	4630      	mov	r0, r6
 80098d4:	f000 f96e 	bl	8009bb4 <__swsetup_r>
 80098d8:	b1c0      	cbz	r0, 800990c <_vfiprintf_r+0x78>
 80098da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098dc:	07dc      	lsls	r4, r3, #31
 80098de:	d50e      	bpl.n	80098fe <_vfiprintf_r+0x6a>
 80098e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098e4:	b01d      	add	sp, #116	; 0x74
 80098e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ea:	4b7b      	ldr	r3, [pc, #492]	; (8009ad8 <_vfiprintf_r+0x244>)
 80098ec:	429d      	cmp	r5, r3
 80098ee:	d101      	bne.n	80098f4 <_vfiprintf_r+0x60>
 80098f0:	68b5      	ldr	r5, [r6, #8]
 80098f2:	e7df      	b.n	80098b4 <_vfiprintf_r+0x20>
 80098f4:	4b79      	ldr	r3, [pc, #484]	; (8009adc <_vfiprintf_r+0x248>)
 80098f6:	429d      	cmp	r5, r3
 80098f8:	bf08      	it	eq
 80098fa:	68f5      	ldreq	r5, [r6, #12]
 80098fc:	e7da      	b.n	80098b4 <_vfiprintf_r+0x20>
 80098fe:	89ab      	ldrh	r3, [r5, #12]
 8009900:	0598      	lsls	r0, r3, #22
 8009902:	d4ed      	bmi.n	80098e0 <_vfiprintf_r+0x4c>
 8009904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009906:	f7ff ff3f 	bl	8009788 <__retarget_lock_release_recursive>
 800990a:	e7e9      	b.n	80098e0 <_vfiprintf_r+0x4c>
 800990c:	2300      	movs	r3, #0
 800990e:	9309      	str	r3, [sp, #36]	; 0x24
 8009910:	2320      	movs	r3, #32
 8009912:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009916:	f8cd 800c 	str.w	r8, [sp, #12]
 800991a:	2330      	movs	r3, #48	; 0x30
 800991c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ae0 <_vfiprintf_r+0x24c>
 8009920:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009924:	f04f 0901 	mov.w	r9, #1
 8009928:	4623      	mov	r3, r4
 800992a:	469a      	mov	sl, r3
 800992c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009930:	b10a      	cbz	r2, 8009936 <_vfiprintf_r+0xa2>
 8009932:	2a25      	cmp	r2, #37	; 0x25
 8009934:	d1f9      	bne.n	800992a <_vfiprintf_r+0x96>
 8009936:	ebba 0b04 	subs.w	fp, sl, r4
 800993a:	d00b      	beq.n	8009954 <_vfiprintf_r+0xc0>
 800993c:	465b      	mov	r3, fp
 800993e:	4622      	mov	r2, r4
 8009940:	4629      	mov	r1, r5
 8009942:	4630      	mov	r0, r6
 8009944:	f7ff ff93 	bl	800986e <__sfputs_r>
 8009948:	3001      	adds	r0, #1
 800994a:	f000 80aa 	beq.w	8009aa2 <_vfiprintf_r+0x20e>
 800994e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009950:	445a      	add	r2, fp
 8009952:	9209      	str	r2, [sp, #36]	; 0x24
 8009954:	f89a 3000 	ldrb.w	r3, [sl]
 8009958:	2b00      	cmp	r3, #0
 800995a:	f000 80a2 	beq.w	8009aa2 <_vfiprintf_r+0x20e>
 800995e:	2300      	movs	r3, #0
 8009960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009964:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009968:	f10a 0a01 	add.w	sl, sl, #1
 800996c:	9304      	str	r3, [sp, #16]
 800996e:	9307      	str	r3, [sp, #28]
 8009970:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009974:	931a      	str	r3, [sp, #104]	; 0x68
 8009976:	4654      	mov	r4, sl
 8009978:	2205      	movs	r2, #5
 800997a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800997e:	4858      	ldr	r0, [pc, #352]	; (8009ae0 <_vfiprintf_r+0x24c>)
 8009980:	f7f6 fc4e 	bl	8000220 <memchr>
 8009984:	9a04      	ldr	r2, [sp, #16]
 8009986:	b9d8      	cbnz	r0, 80099c0 <_vfiprintf_r+0x12c>
 8009988:	06d1      	lsls	r1, r2, #27
 800998a:	bf44      	itt	mi
 800998c:	2320      	movmi	r3, #32
 800998e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009992:	0713      	lsls	r3, r2, #28
 8009994:	bf44      	itt	mi
 8009996:	232b      	movmi	r3, #43	; 0x2b
 8009998:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800999c:	f89a 3000 	ldrb.w	r3, [sl]
 80099a0:	2b2a      	cmp	r3, #42	; 0x2a
 80099a2:	d015      	beq.n	80099d0 <_vfiprintf_r+0x13c>
 80099a4:	9a07      	ldr	r2, [sp, #28]
 80099a6:	4654      	mov	r4, sl
 80099a8:	2000      	movs	r0, #0
 80099aa:	f04f 0c0a 	mov.w	ip, #10
 80099ae:	4621      	mov	r1, r4
 80099b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099b4:	3b30      	subs	r3, #48	; 0x30
 80099b6:	2b09      	cmp	r3, #9
 80099b8:	d94e      	bls.n	8009a58 <_vfiprintf_r+0x1c4>
 80099ba:	b1b0      	cbz	r0, 80099ea <_vfiprintf_r+0x156>
 80099bc:	9207      	str	r2, [sp, #28]
 80099be:	e014      	b.n	80099ea <_vfiprintf_r+0x156>
 80099c0:	eba0 0308 	sub.w	r3, r0, r8
 80099c4:	fa09 f303 	lsl.w	r3, r9, r3
 80099c8:	4313      	orrs	r3, r2
 80099ca:	9304      	str	r3, [sp, #16]
 80099cc:	46a2      	mov	sl, r4
 80099ce:	e7d2      	b.n	8009976 <_vfiprintf_r+0xe2>
 80099d0:	9b03      	ldr	r3, [sp, #12]
 80099d2:	1d19      	adds	r1, r3, #4
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	9103      	str	r1, [sp, #12]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	bfbb      	ittet	lt
 80099dc:	425b      	neglt	r3, r3
 80099de:	f042 0202 	orrlt.w	r2, r2, #2
 80099e2:	9307      	strge	r3, [sp, #28]
 80099e4:	9307      	strlt	r3, [sp, #28]
 80099e6:	bfb8      	it	lt
 80099e8:	9204      	strlt	r2, [sp, #16]
 80099ea:	7823      	ldrb	r3, [r4, #0]
 80099ec:	2b2e      	cmp	r3, #46	; 0x2e
 80099ee:	d10c      	bne.n	8009a0a <_vfiprintf_r+0x176>
 80099f0:	7863      	ldrb	r3, [r4, #1]
 80099f2:	2b2a      	cmp	r3, #42	; 0x2a
 80099f4:	d135      	bne.n	8009a62 <_vfiprintf_r+0x1ce>
 80099f6:	9b03      	ldr	r3, [sp, #12]
 80099f8:	1d1a      	adds	r2, r3, #4
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	9203      	str	r2, [sp, #12]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	bfb8      	it	lt
 8009a02:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009a06:	3402      	adds	r4, #2
 8009a08:	9305      	str	r3, [sp, #20]
 8009a0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009af0 <_vfiprintf_r+0x25c>
 8009a0e:	7821      	ldrb	r1, [r4, #0]
 8009a10:	2203      	movs	r2, #3
 8009a12:	4650      	mov	r0, sl
 8009a14:	f7f6 fc04 	bl	8000220 <memchr>
 8009a18:	b140      	cbz	r0, 8009a2c <_vfiprintf_r+0x198>
 8009a1a:	2340      	movs	r3, #64	; 0x40
 8009a1c:	eba0 000a 	sub.w	r0, r0, sl
 8009a20:	fa03 f000 	lsl.w	r0, r3, r0
 8009a24:	9b04      	ldr	r3, [sp, #16]
 8009a26:	4303      	orrs	r3, r0
 8009a28:	3401      	adds	r4, #1
 8009a2a:	9304      	str	r3, [sp, #16]
 8009a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a30:	482c      	ldr	r0, [pc, #176]	; (8009ae4 <_vfiprintf_r+0x250>)
 8009a32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a36:	2206      	movs	r2, #6
 8009a38:	f7f6 fbf2 	bl	8000220 <memchr>
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	d03f      	beq.n	8009ac0 <_vfiprintf_r+0x22c>
 8009a40:	4b29      	ldr	r3, [pc, #164]	; (8009ae8 <_vfiprintf_r+0x254>)
 8009a42:	bb1b      	cbnz	r3, 8009a8c <_vfiprintf_r+0x1f8>
 8009a44:	9b03      	ldr	r3, [sp, #12]
 8009a46:	3307      	adds	r3, #7
 8009a48:	f023 0307 	bic.w	r3, r3, #7
 8009a4c:	3308      	adds	r3, #8
 8009a4e:	9303      	str	r3, [sp, #12]
 8009a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a52:	443b      	add	r3, r7
 8009a54:	9309      	str	r3, [sp, #36]	; 0x24
 8009a56:	e767      	b.n	8009928 <_vfiprintf_r+0x94>
 8009a58:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a5c:	460c      	mov	r4, r1
 8009a5e:	2001      	movs	r0, #1
 8009a60:	e7a5      	b.n	80099ae <_vfiprintf_r+0x11a>
 8009a62:	2300      	movs	r3, #0
 8009a64:	3401      	adds	r4, #1
 8009a66:	9305      	str	r3, [sp, #20]
 8009a68:	4619      	mov	r1, r3
 8009a6a:	f04f 0c0a 	mov.w	ip, #10
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a74:	3a30      	subs	r2, #48	; 0x30
 8009a76:	2a09      	cmp	r2, #9
 8009a78:	d903      	bls.n	8009a82 <_vfiprintf_r+0x1ee>
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d0c5      	beq.n	8009a0a <_vfiprintf_r+0x176>
 8009a7e:	9105      	str	r1, [sp, #20]
 8009a80:	e7c3      	b.n	8009a0a <_vfiprintf_r+0x176>
 8009a82:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a86:	4604      	mov	r4, r0
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e7f0      	b.n	8009a6e <_vfiprintf_r+0x1da>
 8009a8c:	ab03      	add	r3, sp, #12
 8009a8e:	9300      	str	r3, [sp, #0]
 8009a90:	462a      	mov	r2, r5
 8009a92:	4b16      	ldr	r3, [pc, #88]	; (8009aec <_vfiprintf_r+0x258>)
 8009a94:	a904      	add	r1, sp, #16
 8009a96:	4630      	mov	r0, r6
 8009a98:	f7fd fea8 	bl	80077ec <_printf_float>
 8009a9c:	4607      	mov	r7, r0
 8009a9e:	1c78      	adds	r0, r7, #1
 8009aa0:	d1d6      	bne.n	8009a50 <_vfiprintf_r+0x1bc>
 8009aa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009aa4:	07d9      	lsls	r1, r3, #31
 8009aa6:	d405      	bmi.n	8009ab4 <_vfiprintf_r+0x220>
 8009aa8:	89ab      	ldrh	r3, [r5, #12]
 8009aaa:	059a      	lsls	r2, r3, #22
 8009aac:	d402      	bmi.n	8009ab4 <_vfiprintf_r+0x220>
 8009aae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ab0:	f7ff fe6a 	bl	8009788 <__retarget_lock_release_recursive>
 8009ab4:	89ab      	ldrh	r3, [r5, #12]
 8009ab6:	065b      	lsls	r3, r3, #25
 8009ab8:	f53f af12 	bmi.w	80098e0 <_vfiprintf_r+0x4c>
 8009abc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009abe:	e711      	b.n	80098e4 <_vfiprintf_r+0x50>
 8009ac0:	ab03      	add	r3, sp, #12
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	462a      	mov	r2, r5
 8009ac6:	4b09      	ldr	r3, [pc, #36]	; (8009aec <_vfiprintf_r+0x258>)
 8009ac8:	a904      	add	r1, sp, #16
 8009aca:	4630      	mov	r0, r6
 8009acc:	f7fe f932 	bl	8007d34 <_printf_i>
 8009ad0:	e7e4      	b.n	8009a9c <_vfiprintf_r+0x208>
 8009ad2:	bf00      	nop
 8009ad4:	0800a93c 	.word	0x0800a93c
 8009ad8:	0800a95c 	.word	0x0800a95c
 8009adc:	0800a91c 	.word	0x0800a91c
 8009ae0:	0800a7c4 	.word	0x0800a7c4
 8009ae4:	0800a7ce 	.word	0x0800a7ce
 8009ae8:	080077ed 	.word	0x080077ed
 8009aec:	0800986f 	.word	0x0800986f
 8009af0:	0800a7ca 	.word	0x0800a7ca

08009af4 <__swbuf_r>:
 8009af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af6:	460e      	mov	r6, r1
 8009af8:	4614      	mov	r4, r2
 8009afa:	4605      	mov	r5, r0
 8009afc:	b118      	cbz	r0, 8009b06 <__swbuf_r+0x12>
 8009afe:	6983      	ldr	r3, [r0, #24]
 8009b00:	b90b      	cbnz	r3, 8009b06 <__swbuf_r+0x12>
 8009b02:	f000 f9e7 	bl	8009ed4 <__sinit>
 8009b06:	4b21      	ldr	r3, [pc, #132]	; (8009b8c <__swbuf_r+0x98>)
 8009b08:	429c      	cmp	r4, r3
 8009b0a:	d12b      	bne.n	8009b64 <__swbuf_r+0x70>
 8009b0c:	686c      	ldr	r4, [r5, #4]
 8009b0e:	69a3      	ldr	r3, [r4, #24]
 8009b10:	60a3      	str	r3, [r4, #8]
 8009b12:	89a3      	ldrh	r3, [r4, #12]
 8009b14:	071a      	lsls	r2, r3, #28
 8009b16:	d52f      	bpl.n	8009b78 <__swbuf_r+0x84>
 8009b18:	6923      	ldr	r3, [r4, #16]
 8009b1a:	b36b      	cbz	r3, 8009b78 <__swbuf_r+0x84>
 8009b1c:	6923      	ldr	r3, [r4, #16]
 8009b1e:	6820      	ldr	r0, [r4, #0]
 8009b20:	1ac0      	subs	r0, r0, r3
 8009b22:	6963      	ldr	r3, [r4, #20]
 8009b24:	b2f6      	uxtb	r6, r6
 8009b26:	4283      	cmp	r3, r0
 8009b28:	4637      	mov	r7, r6
 8009b2a:	dc04      	bgt.n	8009b36 <__swbuf_r+0x42>
 8009b2c:	4621      	mov	r1, r4
 8009b2e:	4628      	mov	r0, r5
 8009b30:	f000 f93c 	bl	8009dac <_fflush_r>
 8009b34:	bb30      	cbnz	r0, 8009b84 <__swbuf_r+0x90>
 8009b36:	68a3      	ldr	r3, [r4, #8]
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	60a3      	str	r3, [r4, #8]
 8009b3c:	6823      	ldr	r3, [r4, #0]
 8009b3e:	1c5a      	adds	r2, r3, #1
 8009b40:	6022      	str	r2, [r4, #0]
 8009b42:	701e      	strb	r6, [r3, #0]
 8009b44:	6963      	ldr	r3, [r4, #20]
 8009b46:	3001      	adds	r0, #1
 8009b48:	4283      	cmp	r3, r0
 8009b4a:	d004      	beq.n	8009b56 <__swbuf_r+0x62>
 8009b4c:	89a3      	ldrh	r3, [r4, #12]
 8009b4e:	07db      	lsls	r3, r3, #31
 8009b50:	d506      	bpl.n	8009b60 <__swbuf_r+0x6c>
 8009b52:	2e0a      	cmp	r6, #10
 8009b54:	d104      	bne.n	8009b60 <__swbuf_r+0x6c>
 8009b56:	4621      	mov	r1, r4
 8009b58:	4628      	mov	r0, r5
 8009b5a:	f000 f927 	bl	8009dac <_fflush_r>
 8009b5e:	b988      	cbnz	r0, 8009b84 <__swbuf_r+0x90>
 8009b60:	4638      	mov	r0, r7
 8009b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b64:	4b0a      	ldr	r3, [pc, #40]	; (8009b90 <__swbuf_r+0x9c>)
 8009b66:	429c      	cmp	r4, r3
 8009b68:	d101      	bne.n	8009b6e <__swbuf_r+0x7a>
 8009b6a:	68ac      	ldr	r4, [r5, #8]
 8009b6c:	e7cf      	b.n	8009b0e <__swbuf_r+0x1a>
 8009b6e:	4b09      	ldr	r3, [pc, #36]	; (8009b94 <__swbuf_r+0xa0>)
 8009b70:	429c      	cmp	r4, r3
 8009b72:	bf08      	it	eq
 8009b74:	68ec      	ldreq	r4, [r5, #12]
 8009b76:	e7ca      	b.n	8009b0e <__swbuf_r+0x1a>
 8009b78:	4621      	mov	r1, r4
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	f000 f81a 	bl	8009bb4 <__swsetup_r>
 8009b80:	2800      	cmp	r0, #0
 8009b82:	d0cb      	beq.n	8009b1c <__swbuf_r+0x28>
 8009b84:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009b88:	e7ea      	b.n	8009b60 <__swbuf_r+0x6c>
 8009b8a:	bf00      	nop
 8009b8c:	0800a93c 	.word	0x0800a93c
 8009b90:	0800a95c 	.word	0x0800a95c
 8009b94:	0800a91c 	.word	0x0800a91c

08009b98 <__ascii_wctomb>:
 8009b98:	b149      	cbz	r1, 8009bae <__ascii_wctomb+0x16>
 8009b9a:	2aff      	cmp	r2, #255	; 0xff
 8009b9c:	bf85      	ittet	hi
 8009b9e:	238a      	movhi	r3, #138	; 0x8a
 8009ba0:	6003      	strhi	r3, [r0, #0]
 8009ba2:	700a      	strbls	r2, [r1, #0]
 8009ba4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009ba8:	bf98      	it	ls
 8009baa:	2001      	movls	r0, #1
 8009bac:	4770      	bx	lr
 8009bae:	4608      	mov	r0, r1
 8009bb0:	4770      	bx	lr
	...

08009bb4 <__swsetup_r>:
 8009bb4:	4b32      	ldr	r3, [pc, #200]	; (8009c80 <__swsetup_r+0xcc>)
 8009bb6:	b570      	push	{r4, r5, r6, lr}
 8009bb8:	681d      	ldr	r5, [r3, #0]
 8009bba:	4606      	mov	r6, r0
 8009bbc:	460c      	mov	r4, r1
 8009bbe:	b125      	cbz	r5, 8009bca <__swsetup_r+0x16>
 8009bc0:	69ab      	ldr	r3, [r5, #24]
 8009bc2:	b913      	cbnz	r3, 8009bca <__swsetup_r+0x16>
 8009bc4:	4628      	mov	r0, r5
 8009bc6:	f000 f985 	bl	8009ed4 <__sinit>
 8009bca:	4b2e      	ldr	r3, [pc, #184]	; (8009c84 <__swsetup_r+0xd0>)
 8009bcc:	429c      	cmp	r4, r3
 8009bce:	d10f      	bne.n	8009bf0 <__swsetup_r+0x3c>
 8009bd0:	686c      	ldr	r4, [r5, #4]
 8009bd2:	89a3      	ldrh	r3, [r4, #12]
 8009bd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bd8:	0719      	lsls	r1, r3, #28
 8009bda:	d42c      	bmi.n	8009c36 <__swsetup_r+0x82>
 8009bdc:	06dd      	lsls	r5, r3, #27
 8009bde:	d411      	bmi.n	8009c04 <__swsetup_r+0x50>
 8009be0:	2309      	movs	r3, #9
 8009be2:	6033      	str	r3, [r6, #0]
 8009be4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009be8:	81a3      	strh	r3, [r4, #12]
 8009bea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bee:	e03e      	b.n	8009c6e <__swsetup_r+0xba>
 8009bf0:	4b25      	ldr	r3, [pc, #148]	; (8009c88 <__swsetup_r+0xd4>)
 8009bf2:	429c      	cmp	r4, r3
 8009bf4:	d101      	bne.n	8009bfa <__swsetup_r+0x46>
 8009bf6:	68ac      	ldr	r4, [r5, #8]
 8009bf8:	e7eb      	b.n	8009bd2 <__swsetup_r+0x1e>
 8009bfa:	4b24      	ldr	r3, [pc, #144]	; (8009c8c <__swsetup_r+0xd8>)
 8009bfc:	429c      	cmp	r4, r3
 8009bfe:	bf08      	it	eq
 8009c00:	68ec      	ldreq	r4, [r5, #12]
 8009c02:	e7e6      	b.n	8009bd2 <__swsetup_r+0x1e>
 8009c04:	0758      	lsls	r0, r3, #29
 8009c06:	d512      	bpl.n	8009c2e <__swsetup_r+0x7a>
 8009c08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c0a:	b141      	cbz	r1, 8009c1e <__swsetup_r+0x6a>
 8009c0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c10:	4299      	cmp	r1, r3
 8009c12:	d002      	beq.n	8009c1a <__swsetup_r+0x66>
 8009c14:	4630      	mov	r0, r6
 8009c16:	f7fd fc69 	bl	80074ec <_free_r>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	6363      	str	r3, [r4, #52]	; 0x34
 8009c1e:	89a3      	ldrh	r3, [r4, #12]
 8009c20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c24:	81a3      	strh	r3, [r4, #12]
 8009c26:	2300      	movs	r3, #0
 8009c28:	6063      	str	r3, [r4, #4]
 8009c2a:	6923      	ldr	r3, [r4, #16]
 8009c2c:	6023      	str	r3, [r4, #0]
 8009c2e:	89a3      	ldrh	r3, [r4, #12]
 8009c30:	f043 0308 	orr.w	r3, r3, #8
 8009c34:	81a3      	strh	r3, [r4, #12]
 8009c36:	6923      	ldr	r3, [r4, #16]
 8009c38:	b94b      	cbnz	r3, 8009c4e <__swsetup_r+0x9a>
 8009c3a:	89a3      	ldrh	r3, [r4, #12]
 8009c3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c44:	d003      	beq.n	8009c4e <__swsetup_r+0x9a>
 8009c46:	4621      	mov	r1, r4
 8009c48:	4630      	mov	r0, r6
 8009c4a:	f000 fa05 	bl	800a058 <__smakebuf_r>
 8009c4e:	89a0      	ldrh	r0, [r4, #12]
 8009c50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c54:	f010 0301 	ands.w	r3, r0, #1
 8009c58:	d00a      	beq.n	8009c70 <__swsetup_r+0xbc>
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60a3      	str	r3, [r4, #8]
 8009c5e:	6963      	ldr	r3, [r4, #20]
 8009c60:	425b      	negs	r3, r3
 8009c62:	61a3      	str	r3, [r4, #24]
 8009c64:	6923      	ldr	r3, [r4, #16]
 8009c66:	b943      	cbnz	r3, 8009c7a <__swsetup_r+0xc6>
 8009c68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c6c:	d1ba      	bne.n	8009be4 <__swsetup_r+0x30>
 8009c6e:	bd70      	pop	{r4, r5, r6, pc}
 8009c70:	0781      	lsls	r1, r0, #30
 8009c72:	bf58      	it	pl
 8009c74:	6963      	ldrpl	r3, [r4, #20]
 8009c76:	60a3      	str	r3, [r4, #8]
 8009c78:	e7f4      	b.n	8009c64 <__swsetup_r+0xb0>
 8009c7a:	2000      	movs	r0, #0
 8009c7c:	e7f7      	b.n	8009c6e <__swsetup_r+0xba>
 8009c7e:	bf00      	nop
 8009c80:	200023d4 	.word	0x200023d4
 8009c84:	0800a93c 	.word	0x0800a93c
 8009c88:	0800a95c 	.word	0x0800a95c
 8009c8c:	0800a91c 	.word	0x0800a91c

08009c90 <abort>:
 8009c90:	b508      	push	{r3, lr}
 8009c92:	2006      	movs	r0, #6
 8009c94:	f000 fa50 	bl	800a138 <raise>
 8009c98:	2001      	movs	r0, #1
 8009c9a:	f7fa facb 	bl	8004234 <_exit>
	...

08009ca0 <__sflush_r>:
 8009ca0:	898a      	ldrh	r2, [r1, #12]
 8009ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ca6:	4605      	mov	r5, r0
 8009ca8:	0710      	lsls	r0, r2, #28
 8009caa:	460c      	mov	r4, r1
 8009cac:	d458      	bmi.n	8009d60 <__sflush_r+0xc0>
 8009cae:	684b      	ldr	r3, [r1, #4]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	dc05      	bgt.n	8009cc0 <__sflush_r+0x20>
 8009cb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	dc02      	bgt.n	8009cc0 <__sflush_r+0x20>
 8009cba:	2000      	movs	r0, #0
 8009cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cc2:	2e00      	cmp	r6, #0
 8009cc4:	d0f9      	beq.n	8009cba <__sflush_r+0x1a>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ccc:	682f      	ldr	r7, [r5, #0]
 8009cce:	602b      	str	r3, [r5, #0]
 8009cd0:	d032      	beq.n	8009d38 <__sflush_r+0x98>
 8009cd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009cd4:	89a3      	ldrh	r3, [r4, #12]
 8009cd6:	075a      	lsls	r2, r3, #29
 8009cd8:	d505      	bpl.n	8009ce6 <__sflush_r+0x46>
 8009cda:	6863      	ldr	r3, [r4, #4]
 8009cdc:	1ac0      	subs	r0, r0, r3
 8009cde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ce0:	b10b      	cbz	r3, 8009ce6 <__sflush_r+0x46>
 8009ce2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ce4:	1ac0      	subs	r0, r0, r3
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	4602      	mov	r2, r0
 8009cea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cec:	6a21      	ldr	r1, [r4, #32]
 8009cee:	4628      	mov	r0, r5
 8009cf0:	47b0      	blx	r6
 8009cf2:	1c43      	adds	r3, r0, #1
 8009cf4:	89a3      	ldrh	r3, [r4, #12]
 8009cf6:	d106      	bne.n	8009d06 <__sflush_r+0x66>
 8009cf8:	6829      	ldr	r1, [r5, #0]
 8009cfa:	291d      	cmp	r1, #29
 8009cfc:	d82c      	bhi.n	8009d58 <__sflush_r+0xb8>
 8009cfe:	4a2a      	ldr	r2, [pc, #168]	; (8009da8 <__sflush_r+0x108>)
 8009d00:	40ca      	lsrs	r2, r1
 8009d02:	07d6      	lsls	r6, r2, #31
 8009d04:	d528      	bpl.n	8009d58 <__sflush_r+0xb8>
 8009d06:	2200      	movs	r2, #0
 8009d08:	6062      	str	r2, [r4, #4]
 8009d0a:	04d9      	lsls	r1, r3, #19
 8009d0c:	6922      	ldr	r2, [r4, #16]
 8009d0e:	6022      	str	r2, [r4, #0]
 8009d10:	d504      	bpl.n	8009d1c <__sflush_r+0x7c>
 8009d12:	1c42      	adds	r2, r0, #1
 8009d14:	d101      	bne.n	8009d1a <__sflush_r+0x7a>
 8009d16:	682b      	ldr	r3, [r5, #0]
 8009d18:	b903      	cbnz	r3, 8009d1c <__sflush_r+0x7c>
 8009d1a:	6560      	str	r0, [r4, #84]	; 0x54
 8009d1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d1e:	602f      	str	r7, [r5, #0]
 8009d20:	2900      	cmp	r1, #0
 8009d22:	d0ca      	beq.n	8009cba <__sflush_r+0x1a>
 8009d24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d28:	4299      	cmp	r1, r3
 8009d2a:	d002      	beq.n	8009d32 <__sflush_r+0x92>
 8009d2c:	4628      	mov	r0, r5
 8009d2e:	f7fd fbdd 	bl	80074ec <_free_r>
 8009d32:	2000      	movs	r0, #0
 8009d34:	6360      	str	r0, [r4, #52]	; 0x34
 8009d36:	e7c1      	b.n	8009cbc <__sflush_r+0x1c>
 8009d38:	6a21      	ldr	r1, [r4, #32]
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	47b0      	blx	r6
 8009d40:	1c41      	adds	r1, r0, #1
 8009d42:	d1c7      	bne.n	8009cd4 <__sflush_r+0x34>
 8009d44:	682b      	ldr	r3, [r5, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d0c4      	beq.n	8009cd4 <__sflush_r+0x34>
 8009d4a:	2b1d      	cmp	r3, #29
 8009d4c:	d001      	beq.n	8009d52 <__sflush_r+0xb2>
 8009d4e:	2b16      	cmp	r3, #22
 8009d50:	d101      	bne.n	8009d56 <__sflush_r+0xb6>
 8009d52:	602f      	str	r7, [r5, #0]
 8009d54:	e7b1      	b.n	8009cba <__sflush_r+0x1a>
 8009d56:	89a3      	ldrh	r3, [r4, #12]
 8009d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d5c:	81a3      	strh	r3, [r4, #12]
 8009d5e:	e7ad      	b.n	8009cbc <__sflush_r+0x1c>
 8009d60:	690f      	ldr	r7, [r1, #16]
 8009d62:	2f00      	cmp	r7, #0
 8009d64:	d0a9      	beq.n	8009cba <__sflush_r+0x1a>
 8009d66:	0793      	lsls	r3, r2, #30
 8009d68:	680e      	ldr	r6, [r1, #0]
 8009d6a:	bf08      	it	eq
 8009d6c:	694b      	ldreq	r3, [r1, #20]
 8009d6e:	600f      	str	r7, [r1, #0]
 8009d70:	bf18      	it	ne
 8009d72:	2300      	movne	r3, #0
 8009d74:	eba6 0807 	sub.w	r8, r6, r7
 8009d78:	608b      	str	r3, [r1, #8]
 8009d7a:	f1b8 0f00 	cmp.w	r8, #0
 8009d7e:	dd9c      	ble.n	8009cba <__sflush_r+0x1a>
 8009d80:	6a21      	ldr	r1, [r4, #32]
 8009d82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d84:	4643      	mov	r3, r8
 8009d86:	463a      	mov	r2, r7
 8009d88:	4628      	mov	r0, r5
 8009d8a:	47b0      	blx	r6
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	dc06      	bgt.n	8009d9e <__sflush_r+0xfe>
 8009d90:	89a3      	ldrh	r3, [r4, #12]
 8009d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d96:	81a3      	strh	r3, [r4, #12]
 8009d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d9c:	e78e      	b.n	8009cbc <__sflush_r+0x1c>
 8009d9e:	4407      	add	r7, r0
 8009da0:	eba8 0800 	sub.w	r8, r8, r0
 8009da4:	e7e9      	b.n	8009d7a <__sflush_r+0xda>
 8009da6:	bf00      	nop
 8009da8:	20400001 	.word	0x20400001

08009dac <_fflush_r>:
 8009dac:	b538      	push	{r3, r4, r5, lr}
 8009dae:	690b      	ldr	r3, [r1, #16]
 8009db0:	4605      	mov	r5, r0
 8009db2:	460c      	mov	r4, r1
 8009db4:	b913      	cbnz	r3, 8009dbc <_fflush_r+0x10>
 8009db6:	2500      	movs	r5, #0
 8009db8:	4628      	mov	r0, r5
 8009dba:	bd38      	pop	{r3, r4, r5, pc}
 8009dbc:	b118      	cbz	r0, 8009dc6 <_fflush_r+0x1a>
 8009dbe:	6983      	ldr	r3, [r0, #24]
 8009dc0:	b90b      	cbnz	r3, 8009dc6 <_fflush_r+0x1a>
 8009dc2:	f000 f887 	bl	8009ed4 <__sinit>
 8009dc6:	4b14      	ldr	r3, [pc, #80]	; (8009e18 <_fflush_r+0x6c>)
 8009dc8:	429c      	cmp	r4, r3
 8009dca:	d11b      	bne.n	8009e04 <_fflush_r+0x58>
 8009dcc:	686c      	ldr	r4, [r5, #4]
 8009dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d0ef      	beq.n	8009db6 <_fflush_r+0xa>
 8009dd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009dd8:	07d0      	lsls	r0, r2, #31
 8009dda:	d404      	bmi.n	8009de6 <_fflush_r+0x3a>
 8009ddc:	0599      	lsls	r1, r3, #22
 8009dde:	d402      	bmi.n	8009de6 <_fflush_r+0x3a>
 8009de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009de2:	f7ff fcd0 	bl	8009786 <__retarget_lock_acquire_recursive>
 8009de6:	4628      	mov	r0, r5
 8009de8:	4621      	mov	r1, r4
 8009dea:	f7ff ff59 	bl	8009ca0 <__sflush_r>
 8009dee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009df0:	07da      	lsls	r2, r3, #31
 8009df2:	4605      	mov	r5, r0
 8009df4:	d4e0      	bmi.n	8009db8 <_fflush_r+0xc>
 8009df6:	89a3      	ldrh	r3, [r4, #12]
 8009df8:	059b      	lsls	r3, r3, #22
 8009dfa:	d4dd      	bmi.n	8009db8 <_fflush_r+0xc>
 8009dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dfe:	f7ff fcc3 	bl	8009788 <__retarget_lock_release_recursive>
 8009e02:	e7d9      	b.n	8009db8 <_fflush_r+0xc>
 8009e04:	4b05      	ldr	r3, [pc, #20]	; (8009e1c <_fflush_r+0x70>)
 8009e06:	429c      	cmp	r4, r3
 8009e08:	d101      	bne.n	8009e0e <_fflush_r+0x62>
 8009e0a:	68ac      	ldr	r4, [r5, #8]
 8009e0c:	e7df      	b.n	8009dce <_fflush_r+0x22>
 8009e0e:	4b04      	ldr	r3, [pc, #16]	; (8009e20 <_fflush_r+0x74>)
 8009e10:	429c      	cmp	r4, r3
 8009e12:	bf08      	it	eq
 8009e14:	68ec      	ldreq	r4, [r5, #12]
 8009e16:	e7da      	b.n	8009dce <_fflush_r+0x22>
 8009e18:	0800a93c 	.word	0x0800a93c
 8009e1c:	0800a95c 	.word	0x0800a95c
 8009e20:	0800a91c 	.word	0x0800a91c

08009e24 <std>:
 8009e24:	2300      	movs	r3, #0
 8009e26:	b510      	push	{r4, lr}
 8009e28:	4604      	mov	r4, r0
 8009e2a:	e9c0 3300 	strd	r3, r3, [r0]
 8009e2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e32:	6083      	str	r3, [r0, #8]
 8009e34:	8181      	strh	r1, [r0, #12]
 8009e36:	6643      	str	r3, [r0, #100]	; 0x64
 8009e38:	81c2      	strh	r2, [r0, #14]
 8009e3a:	6183      	str	r3, [r0, #24]
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	2208      	movs	r2, #8
 8009e40:	305c      	adds	r0, #92	; 0x5c
 8009e42:	f7fd fb4b 	bl	80074dc <memset>
 8009e46:	4b05      	ldr	r3, [pc, #20]	; (8009e5c <std+0x38>)
 8009e48:	6263      	str	r3, [r4, #36]	; 0x24
 8009e4a:	4b05      	ldr	r3, [pc, #20]	; (8009e60 <std+0x3c>)
 8009e4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e4e:	4b05      	ldr	r3, [pc, #20]	; (8009e64 <std+0x40>)
 8009e50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e52:	4b05      	ldr	r3, [pc, #20]	; (8009e68 <std+0x44>)
 8009e54:	6224      	str	r4, [r4, #32]
 8009e56:	6323      	str	r3, [r4, #48]	; 0x30
 8009e58:	bd10      	pop	{r4, pc}
 8009e5a:	bf00      	nop
 8009e5c:	0800a171 	.word	0x0800a171
 8009e60:	0800a193 	.word	0x0800a193
 8009e64:	0800a1cb 	.word	0x0800a1cb
 8009e68:	0800a1ef 	.word	0x0800a1ef

08009e6c <_cleanup_r>:
 8009e6c:	4901      	ldr	r1, [pc, #4]	; (8009e74 <_cleanup_r+0x8>)
 8009e6e:	f000 b8af 	b.w	8009fd0 <_fwalk_reent>
 8009e72:	bf00      	nop
 8009e74:	08009dad 	.word	0x08009dad

08009e78 <__sfmoreglue>:
 8009e78:	b570      	push	{r4, r5, r6, lr}
 8009e7a:	2268      	movs	r2, #104	; 0x68
 8009e7c:	1e4d      	subs	r5, r1, #1
 8009e7e:	4355      	muls	r5, r2
 8009e80:	460e      	mov	r6, r1
 8009e82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009e86:	f7fd fb9d 	bl	80075c4 <_malloc_r>
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	b140      	cbz	r0, 8009ea0 <__sfmoreglue+0x28>
 8009e8e:	2100      	movs	r1, #0
 8009e90:	e9c0 1600 	strd	r1, r6, [r0]
 8009e94:	300c      	adds	r0, #12
 8009e96:	60a0      	str	r0, [r4, #8]
 8009e98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009e9c:	f7fd fb1e 	bl	80074dc <memset>
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	bd70      	pop	{r4, r5, r6, pc}

08009ea4 <__sfp_lock_acquire>:
 8009ea4:	4801      	ldr	r0, [pc, #4]	; (8009eac <__sfp_lock_acquire+0x8>)
 8009ea6:	f7ff bc6e 	b.w	8009786 <__retarget_lock_acquire_recursive>
 8009eaa:	bf00      	nop
 8009eac:	20002989 	.word	0x20002989

08009eb0 <__sfp_lock_release>:
 8009eb0:	4801      	ldr	r0, [pc, #4]	; (8009eb8 <__sfp_lock_release+0x8>)
 8009eb2:	f7ff bc69 	b.w	8009788 <__retarget_lock_release_recursive>
 8009eb6:	bf00      	nop
 8009eb8:	20002989 	.word	0x20002989

08009ebc <__sinit_lock_acquire>:
 8009ebc:	4801      	ldr	r0, [pc, #4]	; (8009ec4 <__sinit_lock_acquire+0x8>)
 8009ebe:	f7ff bc62 	b.w	8009786 <__retarget_lock_acquire_recursive>
 8009ec2:	bf00      	nop
 8009ec4:	2000298a 	.word	0x2000298a

08009ec8 <__sinit_lock_release>:
 8009ec8:	4801      	ldr	r0, [pc, #4]	; (8009ed0 <__sinit_lock_release+0x8>)
 8009eca:	f7ff bc5d 	b.w	8009788 <__retarget_lock_release_recursive>
 8009ece:	bf00      	nop
 8009ed0:	2000298a 	.word	0x2000298a

08009ed4 <__sinit>:
 8009ed4:	b510      	push	{r4, lr}
 8009ed6:	4604      	mov	r4, r0
 8009ed8:	f7ff fff0 	bl	8009ebc <__sinit_lock_acquire>
 8009edc:	69a3      	ldr	r3, [r4, #24]
 8009ede:	b11b      	cbz	r3, 8009ee8 <__sinit+0x14>
 8009ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ee4:	f7ff bff0 	b.w	8009ec8 <__sinit_lock_release>
 8009ee8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009eec:	6523      	str	r3, [r4, #80]	; 0x50
 8009eee:	4b13      	ldr	r3, [pc, #76]	; (8009f3c <__sinit+0x68>)
 8009ef0:	4a13      	ldr	r2, [pc, #76]	; (8009f40 <__sinit+0x6c>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	62a2      	str	r2, [r4, #40]	; 0x28
 8009ef6:	42a3      	cmp	r3, r4
 8009ef8:	bf04      	itt	eq
 8009efa:	2301      	moveq	r3, #1
 8009efc:	61a3      	streq	r3, [r4, #24]
 8009efe:	4620      	mov	r0, r4
 8009f00:	f000 f820 	bl	8009f44 <__sfp>
 8009f04:	6060      	str	r0, [r4, #4]
 8009f06:	4620      	mov	r0, r4
 8009f08:	f000 f81c 	bl	8009f44 <__sfp>
 8009f0c:	60a0      	str	r0, [r4, #8]
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f000 f818 	bl	8009f44 <__sfp>
 8009f14:	2200      	movs	r2, #0
 8009f16:	60e0      	str	r0, [r4, #12]
 8009f18:	2104      	movs	r1, #4
 8009f1a:	6860      	ldr	r0, [r4, #4]
 8009f1c:	f7ff ff82 	bl	8009e24 <std>
 8009f20:	68a0      	ldr	r0, [r4, #8]
 8009f22:	2201      	movs	r2, #1
 8009f24:	2109      	movs	r1, #9
 8009f26:	f7ff ff7d 	bl	8009e24 <std>
 8009f2a:	68e0      	ldr	r0, [r4, #12]
 8009f2c:	2202      	movs	r2, #2
 8009f2e:	2112      	movs	r1, #18
 8009f30:	f7ff ff78 	bl	8009e24 <std>
 8009f34:	2301      	movs	r3, #1
 8009f36:	61a3      	str	r3, [r4, #24]
 8009f38:	e7d2      	b.n	8009ee0 <__sinit+0xc>
 8009f3a:	bf00      	nop
 8009f3c:	0800a5a0 	.word	0x0800a5a0
 8009f40:	08009e6d 	.word	0x08009e6d

08009f44 <__sfp>:
 8009f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f46:	4607      	mov	r7, r0
 8009f48:	f7ff ffac 	bl	8009ea4 <__sfp_lock_acquire>
 8009f4c:	4b1e      	ldr	r3, [pc, #120]	; (8009fc8 <__sfp+0x84>)
 8009f4e:	681e      	ldr	r6, [r3, #0]
 8009f50:	69b3      	ldr	r3, [r6, #24]
 8009f52:	b913      	cbnz	r3, 8009f5a <__sfp+0x16>
 8009f54:	4630      	mov	r0, r6
 8009f56:	f7ff ffbd 	bl	8009ed4 <__sinit>
 8009f5a:	3648      	adds	r6, #72	; 0x48
 8009f5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f60:	3b01      	subs	r3, #1
 8009f62:	d503      	bpl.n	8009f6c <__sfp+0x28>
 8009f64:	6833      	ldr	r3, [r6, #0]
 8009f66:	b30b      	cbz	r3, 8009fac <__sfp+0x68>
 8009f68:	6836      	ldr	r6, [r6, #0]
 8009f6a:	e7f7      	b.n	8009f5c <__sfp+0x18>
 8009f6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f70:	b9d5      	cbnz	r5, 8009fa8 <__sfp+0x64>
 8009f72:	4b16      	ldr	r3, [pc, #88]	; (8009fcc <__sfp+0x88>)
 8009f74:	60e3      	str	r3, [r4, #12]
 8009f76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f7a:	6665      	str	r5, [r4, #100]	; 0x64
 8009f7c:	f7ff fc02 	bl	8009784 <__retarget_lock_init_recursive>
 8009f80:	f7ff ff96 	bl	8009eb0 <__sfp_lock_release>
 8009f84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009f88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009f8c:	6025      	str	r5, [r4, #0]
 8009f8e:	61a5      	str	r5, [r4, #24]
 8009f90:	2208      	movs	r2, #8
 8009f92:	4629      	mov	r1, r5
 8009f94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009f98:	f7fd faa0 	bl	80074dc <memset>
 8009f9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009fa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fa8:	3468      	adds	r4, #104	; 0x68
 8009faa:	e7d9      	b.n	8009f60 <__sfp+0x1c>
 8009fac:	2104      	movs	r1, #4
 8009fae:	4638      	mov	r0, r7
 8009fb0:	f7ff ff62 	bl	8009e78 <__sfmoreglue>
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	6030      	str	r0, [r6, #0]
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	d1d5      	bne.n	8009f68 <__sfp+0x24>
 8009fbc:	f7ff ff78 	bl	8009eb0 <__sfp_lock_release>
 8009fc0:	230c      	movs	r3, #12
 8009fc2:	603b      	str	r3, [r7, #0]
 8009fc4:	e7ee      	b.n	8009fa4 <__sfp+0x60>
 8009fc6:	bf00      	nop
 8009fc8:	0800a5a0 	.word	0x0800a5a0
 8009fcc:	ffff0001 	.word	0xffff0001

08009fd0 <_fwalk_reent>:
 8009fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fd4:	4606      	mov	r6, r0
 8009fd6:	4688      	mov	r8, r1
 8009fd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009fdc:	2700      	movs	r7, #0
 8009fde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009fe2:	f1b9 0901 	subs.w	r9, r9, #1
 8009fe6:	d505      	bpl.n	8009ff4 <_fwalk_reent+0x24>
 8009fe8:	6824      	ldr	r4, [r4, #0]
 8009fea:	2c00      	cmp	r4, #0
 8009fec:	d1f7      	bne.n	8009fde <_fwalk_reent+0xe>
 8009fee:	4638      	mov	r0, r7
 8009ff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ff4:	89ab      	ldrh	r3, [r5, #12]
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d907      	bls.n	800a00a <_fwalk_reent+0x3a>
 8009ffa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ffe:	3301      	adds	r3, #1
 800a000:	d003      	beq.n	800a00a <_fwalk_reent+0x3a>
 800a002:	4629      	mov	r1, r5
 800a004:	4630      	mov	r0, r6
 800a006:	47c0      	blx	r8
 800a008:	4307      	orrs	r7, r0
 800a00a:	3568      	adds	r5, #104	; 0x68
 800a00c:	e7e9      	b.n	8009fe2 <_fwalk_reent+0x12>

0800a00e <__swhatbuf_r>:
 800a00e:	b570      	push	{r4, r5, r6, lr}
 800a010:	460e      	mov	r6, r1
 800a012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a016:	2900      	cmp	r1, #0
 800a018:	b096      	sub	sp, #88	; 0x58
 800a01a:	4614      	mov	r4, r2
 800a01c:	461d      	mov	r5, r3
 800a01e:	da08      	bge.n	800a032 <__swhatbuf_r+0x24>
 800a020:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a024:	2200      	movs	r2, #0
 800a026:	602a      	str	r2, [r5, #0]
 800a028:	061a      	lsls	r2, r3, #24
 800a02a:	d410      	bmi.n	800a04e <__swhatbuf_r+0x40>
 800a02c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a030:	e00e      	b.n	800a050 <__swhatbuf_r+0x42>
 800a032:	466a      	mov	r2, sp
 800a034:	f000 f902 	bl	800a23c <_fstat_r>
 800a038:	2800      	cmp	r0, #0
 800a03a:	dbf1      	blt.n	800a020 <__swhatbuf_r+0x12>
 800a03c:	9a01      	ldr	r2, [sp, #4]
 800a03e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a042:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a046:	425a      	negs	r2, r3
 800a048:	415a      	adcs	r2, r3
 800a04a:	602a      	str	r2, [r5, #0]
 800a04c:	e7ee      	b.n	800a02c <__swhatbuf_r+0x1e>
 800a04e:	2340      	movs	r3, #64	; 0x40
 800a050:	2000      	movs	r0, #0
 800a052:	6023      	str	r3, [r4, #0]
 800a054:	b016      	add	sp, #88	; 0x58
 800a056:	bd70      	pop	{r4, r5, r6, pc}

0800a058 <__smakebuf_r>:
 800a058:	898b      	ldrh	r3, [r1, #12]
 800a05a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a05c:	079d      	lsls	r5, r3, #30
 800a05e:	4606      	mov	r6, r0
 800a060:	460c      	mov	r4, r1
 800a062:	d507      	bpl.n	800a074 <__smakebuf_r+0x1c>
 800a064:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a068:	6023      	str	r3, [r4, #0]
 800a06a:	6123      	str	r3, [r4, #16]
 800a06c:	2301      	movs	r3, #1
 800a06e:	6163      	str	r3, [r4, #20]
 800a070:	b002      	add	sp, #8
 800a072:	bd70      	pop	{r4, r5, r6, pc}
 800a074:	ab01      	add	r3, sp, #4
 800a076:	466a      	mov	r2, sp
 800a078:	f7ff ffc9 	bl	800a00e <__swhatbuf_r>
 800a07c:	9900      	ldr	r1, [sp, #0]
 800a07e:	4605      	mov	r5, r0
 800a080:	4630      	mov	r0, r6
 800a082:	f7fd fa9f 	bl	80075c4 <_malloc_r>
 800a086:	b948      	cbnz	r0, 800a09c <__smakebuf_r+0x44>
 800a088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a08c:	059a      	lsls	r2, r3, #22
 800a08e:	d4ef      	bmi.n	800a070 <__smakebuf_r+0x18>
 800a090:	f023 0303 	bic.w	r3, r3, #3
 800a094:	f043 0302 	orr.w	r3, r3, #2
 800a098:	81a3      	strh	r3, [r4, #12]
 800a09a:	e7e3      	b.n	800a064 <__smakebuf_r+0xc>
 800a09c:	4b0d      	ldr	r3, [pc, #52]	; (800a0d4 <__smakebuf_r+0x7c>)
 800a09e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a0a0:	89a3      	ldrh	r3, [r4, #12]
 800a0a2:	6020      	str	r0, [r4, #0]
 800a0a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0a8:	81a3      	strh	r3, [r4, #12]
 800a0aa:	9b00      	ldr	r3, [sp, #0]
 800a0ac:	6163      	str	r3, [r4, #20]
 800a0ae:	9b01      	ldr	r3, [sp, #4]
 800a0b0:	6120      	str	r0, [r4, #16]
 800a0b2:	b15b      	cbz	r3, 800a0cc <__smakebuf_r+0x74>
 800a0b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	f000 f8d1 	bl	800a260 <_isatty_r>
 800a0be:	b128      	cbz	r0, 800a0cc <__smakebuf_r+0x74>
 800a0c0:	89a3      	ldrh	r3, [r4, #12]
 800a0c2:	f023 0303 	bic.w	r3, r3, #3
 800a0c6:	f043 0301 	orr.w	r3, r3, #1
 800a0ca:	81a3      	strh	r3, [r4, #12]
 800a0cc:	89a0      	ldrh	r0, [r4, #12]
 800a0ce:	4305      	orrs	r5, r0
 800a0d0:	81a5      	strh	r5, [r4, #12]
 800a0d2:	e7cd      	b.n	800a070 <__smakebuf_r+0x18>
 800a0d4:	08009e6d 	.word	0x08009e6d

0800a0d8 <_malloc_usable_size_r>:
 800a0d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0dc:	1f18      	subs	r0, r3, #4
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	bfbc      	itt	lt
 800a0e2:	580b      	ldrlt	r3, [r1, r0]
 800a0e4:	18c0      	addlt	r0, r0, r3
 800a0e6:	4770      	bx	lr

0800a0e8 <_raise_r>:
 800a0e8:	291f      	cmp	r1, #31
 800a0ea:	b538      	push	{r3, r4, r5, lr}
 800a0ec:	4604      	mov	r4, r0
 800a0ee:	460d      	mov	r5, r1
 800a0f0:	d904      	bls.n	800a0fc <_raise_r+0x14>
 800a0f2:	2316      	movs	r3, #22
 800a0f4:	6003      	str	r3, [r0, #0]
 800a0f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0fa:	bd38      	pop	{r3, r4, r5, pc}
 800a0fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a0fe:	b112      	cbz	r2, 800a106 <_raise_r+0x1e>
 800a100:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a104:	b94b      	cbnz	r3, 800a11a <_raise_r+0x32>
 800a106:	4620      	mov	r0, r4
 800a108:	f000 f830 	bl	800a16c <_getpid_r>
 800a10c:	462a      	mov	r2, r5
 800a10e:	4601      	mov	r1, r0
 800a110:	4620      	mov	r0, r4
 800a112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a116:	f000 b817 	b.w	800a148 <_kill_r>
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d00a      	beq.n	800a134 <_raise_r+0x4c>
 800a11e:	1c59      	adds	r1, r3, #1
 800a120:	d103      	bne.n	800a12a <_raise_r+0x42>
 800a122:	2316      	movs	r3, #22
 800a124:	6003      	str	r3, [r0, #0]
 800a126:	2001      	movs	r0, #1
 800a128:	e7e7      	b.n	800a0fa <_raise_r+0x12>
 800a12a:	2400      	movs	r4, #0
 800a12c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a130:	4628      	mov	r0, r5
 800a132:	4798      	blx	r3
 800a134:	2000      	movs	r0, #0
 800a136:	e7e0      	b.n	800a0fa <_raise_r+0x12>

0800a138 <raise>:
 800a138:	4b02      	ldr	r3, [pc, #8]	; (800a144 <raise+0xc>)
 800a13a:	4601      	mov	r1, r0
 800a13c:	6818      	ldr	r0, [r3, #0]
 800a13e:	f7ff bfd3 	b.w	800a0e8 <_raise_r>
 800a142:	bf00      	nop
 800a144:	200023d4 	.word	0x200023d4

0800a148 <_kill_r>:
 800a148:	b538      	push	{r3, r4, r5, lr}
 800a14a:	4d07      	ldr	r5, [pc, #28]	; (800a168 <_kill_r+0x20>)
 800a14c:	2300      	movs	r3, #0
 800a14e:	4604      	mov	r4, r0
 800a150:	4608      	mov	r0, r1
 800a152:	4611      	mov	r1, r2
 800a154:	602b      	str	r3, [r5, #0]
 800a156:	f7fa f85d 	bl	8004214 <_kill>
 800a15a:	1c43      	adds	r3, r0, #1
 800a15c:	d102      	bne.n	800a164 <_kill_r+0x1c>
 800a15e:	682b      	ldr	r3, [r5, #0]
 800a160:	b103      	cbz	r3, 800a164 <_kill_r+0x1c>
 800a162:	6023      	str	r3, [r4, #0]
 800a164:	bd38      	pop	{r3, r4, r5, pc}
 800a166:	bf00      	nop
 800a168:	20002984 	.word	0x20002984

0800a16c <_getpid_r>:
 800a16c:	f7fa b84a 	b.w	8004204 <_getpid>

0800a170 <__sread>:
 800a170:	b510      	push	{r4, lr}
 800a172:	460c      	mov	r4, r1
 800a174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a178:	f000 f894 	bl	800a2a4 <_read_r>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	bfab      	itete	ge
 800a180:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a182:	89a3      	ldrhlt	r3, [r4, #12]
 800a184:	181b      	addge	r3, r3, r0
 800a186:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a18a:	bfac      	ite	ge
 800a18c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a18e:	81a3      	strhlt	r3, [r4, #12]
 800a190:	bd10      	pop	{r4, pc}

0800a192 <__swrite>:
 800a192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a196:	461f      	mov	r7, r3
 800a198:	898b      	ldrh	r3, [r1, #12]
 800a19a:	05db      	lsls	r3, r3, #23
 800a19c:	4605      	mov	r5, r0
 800a19e:	460c      	mov	r4, r1
 800a1a0:	4616      	mov	r6, r2
 800a1a2:	d505      	bpl.n	800a1b0 <__swrite+0x1e>
 800a1a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1a8:	2302      	movs	r3, #2
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f000 f868 	bl	800a280 <_lseek_r>
 800a1b0:	89a3      	ldrh	r3, [r4, #12]
 800a1b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1ba:	81a3      	strh	r3, [r4, #12]
 800a1bc:	4632      	mov	r2, r6
 800a1be:	463b      	mov	r3, r7
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c6:	f000 b817 	b.w	800a1f8 <_write_r>

0800a1ca <__sseek>:
 800a1ca:	b510      	push	{r4, lr}
 800a1cc:	460c      	mov	r4, r1
 800a1ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1d2:	f000 f855 	bl	800a280 <_lseek_r>
 800a1d6:	1c43      	adds	r3, r0, #1
 800a1d8:	89a3      	ldrh	r3, [r4, #12]
 800a1da:	bf15      	itete	ne
 800a1dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1e6:	81a3      	strheq	r3, [r4, #12]
 800a1e8:	bf18      	it	ne
 800a1ea:	81a3      	strhne	r3, [r4, #12]
 800a1ec:	bd10      	pop	{r4, pc}

0800a1ee <__sclose>:
 800a1ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1f2:	f000 b813 	b.w	800a21c <_close_r>
	...

0800a1f8 <_write_r>:
 800a1f8:	b538      	push	{r3, r4, r5, lr}
 800a1fa:	4d07      	ldr	r5, [pc, #28]	; (800a218 <_write_r+0x20>)
 800a1fc:	4604      	mov	r4, r0
 800a1fe:	4608      	mov	r0, r1
 800a200:	4611      	mov	r1, r2
 800a202:	2200      	movs	r2, #0
 800a204:	602a      	str	r2, [r5, #0]
 800a206:	461a      	mov	r2, r3
 800a208:	f7fa f83b 	bl	8004282 <_write>
 800a20c:	1c43      	adds	r3, r0, #1
 800a20e:	d102      	bne.n	800a216 <_write_r+0x1e>
 800a210:	682b      	ldr	r3, [r5, #0]
 800a212:	b103      	cbz	r3, 800a216 <_write_r+0x1e>
 800a214:	6023      	str	r3, [r4, #0]
 800a216:	bd38      	pop	{r3, r4, r5, pc}
 800a218:	20002984 	.word	0x20002984

0800a21c <_close_r>:
 800a21c:	b538      	push	{r3, r4, r5, lr}
 800a21e:	4d06      	ldr	r5, [pc, #24]	; (800a238 <_close_r+0x1c>)
 800a220:	2300      	movs	r3, #0
 800a222:	4604      	mov	r4, r0
 800a224:	4608      	mov	r0, r1
 800a226:	602b      	str	r3, [r5, #0]
 800a228:	f7fa f847 	bl	80042ba <_close>
 800a22c:	1c43      	adds	r3, r0, #1
 800a22e:	d102      	bne.n	800a236 <_close_r+0x1a>
 800a230:	682b      	ldr	r3, [r5, #0]
 800a232:	b103      	cbz	r3, 800a236 <_close_r+0x1a>
 800a234:	6023      	str	r3, [r4, #0]
 800a236:	bd38      	pop	{r3, r4, r5, pc}
 800a238:	20002984 	.word	0x20002984

0800a23c <_fstat_r>:
 800a23c:	b538      	push	{r3, r4, r5, lr}
 800a23e:	4d07      	ldr	r5, [pc, #28]	; (800a25c <_fstat_r+0x20>)
 800a240:	2300      	movs	r3, #0
 800a242:	4604      	mov	r4, r0
 800a244:	4608      	mov	r0, r1
 800a246:	4611      	mov	r1, r2
 800a248:	602b      	str	r3, [r5, #0]
 800a24a:	f7fa f842 	bl	80042d2 <_fstat>
 800a24e:	1c43      	adds	r3, r0, #1
 800a250:	d102      	bne.n	800a258 <_fstat_r+0x1c>
 800a252:	682b      	ldr	r3, [r5, #0]
 800a254:	b103      	cbz	r3, 800a258 <_fstat_r+0x1c>
 800a256:	6023      	str	r3, [r4, #0]
 800a258:	bd38      	pop	{r3, r4, r5, pc}
 800a25a:	bf00      	nop
 800a25c:	20002984 	.word	0x20002984

0800a260 <_isatty_r>:
 800a260:	b538      	push	{r3, r4, r5, lr}
 800a262:	4d06      	ldr	r5, [pc, #24]	; (800a27c <_isatty_r+0x1c>)
 800a264:	2300      	movs	r3, #0
 800a266:	4604      	mov	r4, r0
 800a268:	4608      	mov	r0, r1
 800a26a:	602b      	str	r3, [r5, #0]
 800a26c:	f7fa f841 	bl	80042f2 <_isatty>
 800a270:	1c43      	adds	r3, r0, #1
 800a272:	d102      	bne.n	800a27a <_isatty_r+0x1a>
 800a274:	682b      	ldr	r3, [r5, #0]
 800a276:	b103      	cbz	r3, 800a27a <_isatty_r+0x1a>
 800a278:	6023      	str	r3, [r4, #0]
 800a27a:	bd38      	pop	{r3, r4, r5, pc}
 800a27c:	20002984 	.word	0x20002984

0800a280 <_lseek_r>:
 800a280:	b538      	push	{r3, r4, r5, lr}
 800a282:	4d07      	ldr	r5, [pc, #28]	; (800a2a0 <_lseek_r+0x20>)
 800a284:	4604      	mov	r4, r0
 800a286:	4608      	mov	r0, r1
 800a288:	4611      	mov	r1, r2
 800a28a:	2200      	movs	r2, #0
 800a28c:	602a      	str	r2, [r5, #0]
 800a28e:	461a      	mov	r2, r3
 800a290:	f7fa f83a 	bl	8004308 <_lseek>
 800a294:	1c43      	adds	r3, r0, #1
 800a296:	d102      	bne.n	800a29e <_lseek_r+0x1e>
 800a298:	682b      	ldr	r3, [r5, #0]
 800a29a:	b103      	cbz	r3, 800a29e <_lseek_r+0x1e>
 800a29c:	6023      	str	r3, [r4, #0]
 800a29e:	bd38      	pop	{r3, r4, r5, pc}
 800a2a0:	20002984 	.word	0x20002984

0800a2a4 <_read_r>:
 800a2a4:	b538      	push	{r3, r4, r5, lr}
 800a2a6:	4d07      	ldr	r5, [pc, #28]	; (800a2c4 <_read_r+0x20>)
 800a2a8:	4604      	mov	r4, r0
 800a2aa:	4608      	mov	r0, r1
 800a2ac:	4611      	mov	r1, r2
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	602a      	str	r2, [r5, #0]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	f7f9 ffc8 	bl	8004248 <_read>
 800a2b8:	1c43      	adds	r3, r0, #1
 800a2ba:	d102      	bne.n	800a2c2 <_read_r+0x1e>
 800a2bc:	682b      	ldr	r3, [r5, #0]
 800a2be:	b103      	cbz	r3, 800a2c2 <_read_r+0x1e>
 800a2c0:	6023      	str	r3, [r4, #0]
 800a2c2:	bd38      	pop	{r3, r4, r5, pc}
 800a2c4:	20002984 	.word	0x20002984

0800a2c8 <round>:
 800a2c8:	ec51 0b10 	vmov	r0, r1, d0
 800a2cc:	b570      	push	{r4, r5, r6, lr}
 800a2ce:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800a2d2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800a2d6:	2c13      	cmp	r4, #19
 800a2d8:	ee10 2a10 	vmov	r2, s0
 800a2dc:	460b      	mov	r3, r1
 800a2de:	dc19      	bgt.n	800a314 <round+0x4c>
 800a2e0:	2c00      	cmp	r4, #0
 800a2e2:	da09      	bge.n	800a2f8 <round+0x30>
 800a2e4:	3401      	adds	r4, #1
 800a2e6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800a2ea:	d103      	bne.n	800a2f4 <round+0x2c>
 800a2ec:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a2f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	e028      	b.n	800a34a <round+0x82>
 800a2f8:	4d15      	ldr	r5, [pc, #84]	; (800a350 <round+0x88>)
 800a2fa:	4125      	asrs	r5, r4
 800a2fc:	ea01 0605 	and.w	r6, r1, r5
 800a300:	4332      	orrs	r2, r6
 800a302:	d00e      	beq.n	800a322 <round+0x5a>
 800a304:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a308:	fa42 f404 	asr.w	r4, r2, r4
 800a30c:	4423      	add	r3, r4
 800a30e:	ea23 0305 	bic.w	r3, r3, r5
 800a312:	e7ef      	b.n	800a2f4 <round+0x2c>
 800a314:	2c33      	cmp	r4, #51	; 0x33
 800a316:	dd07      	ble.n	800a328 <round+0x60>
 800a318:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800a31c:	d101      	bne.n	800a322 <round+0x5a>
 800a31e:	f7f5 ffd5 	bl	80002cc <__adddf3>
 800a322:	ec41 0b10 	vmov	d0, r0, r1
 800a326:	bd70      	pop	{r4, r5, r6, pc}
 800a328:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800a32c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a330:	40f5      	lsrs	r5, r6
 800a332:	4228      	tst	r0, r5
 800a334:	d0f5      	beq.n	800a322 <round+0x5a>
 800a336:	2101      	movs	r1, #1
 800a338:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800a33c:	fa01 f404 	lsl.w	r4, r1, r4
 800a340:	1912      	adds	r2, r2, r4
 800a342:	bf28      	it	cs
 800a344:	185b      	addcs	r3, r3, r1
 800a346:	ea22 0205 	bic.w	r2, r2, r5
 800a34a:	4619      	mov	r1, r3
 800a34c:	4610      	mov	r0, r2
 800a34e:	e7e8      	b.n	800a322 <round+0x5a>
 800a350:	000fffff 	.word	0x000fffff

0800a354 <_init>:
 800a354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a356:	bf00      	nop
 800a358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a35a:	bc08      	pop	{r3}
 800a35c:	469e      	mov	lr, r3
 800a35e:	4770      	bx	lr

0800a360 <_fini>:
 800a360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a362:	bf00      	nop
 800a364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a366:	bc08      	pop	{r3}
 800a368:	469e      	mov	lr, r3
 800a36a:	4770      	bx	lr
