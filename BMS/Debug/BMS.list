
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000077c  0800c4c0  0800c4c0  0001c4c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc3c  0800cc3c  000225cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc3c  0800cc3c  0001cc3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc44  0800cc44  000225cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc44  0800cc44  0001cc44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc48  0800cc48  0001cc48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000025cc  20000000  0800cc4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  200025cc  0800f218  000225cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002b2c  0800f218  00022b2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000225cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cace  00000000  00000000  000225fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f30  00000000  00000000  0003f0ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001898  00000000  00000000  00043000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016d8  00000000  00000000  00044898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002863b  00000000  00000000  00045f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f774  00000000  00000000  0006e5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5c8d  00000000  00000000  0008dd1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001739ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077f8  00000000  00000000  001739fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200025cc 	.word	0x200025cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c4a4 	.word	0x0800c4a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200025d0 	.word	0x200025d0
 800020c:	0800c4a4 	.word	0x0800c4a4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b974 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <FEB_BMS_Precharge_Open>:
extern CAN_HandleTypeDef hcan1;
extern UART_HandleTypeDef huart2;

// ********************************** Functions **********************************

void FEB_BMS_Precharge_Open(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <FEB_BMS_Precharge_Open+0x14>)
 8000fd6:	f005 fc41 	bl	800685c <HAL_GPIO_WritePin>
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40020800 	.word	0x40020800

08000fe4 <FEB_BMS_Precharge_Close>:

void FEB_BMS_Precharge_Close(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2104      	movs	r1, #4
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <FEB_BMS_Precharge_Close+0x14>)
 8000fee:	f005 fc35 	bl	800685c <HAL_GPIO_WritePin>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40020800 	.word	0x40020800

08000ffc <FEB_BMS_Shutdown_Startup>:
extern CAN_HandleTypeDef hcan1;
extern UART_HandleTypeDef huart2;

// ********************************** Functions **********************************

void FEB_BMS_Shutdown_Startup(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	2102      	movs	r1, #2
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <FEB_BMS_Shutdown_Startup+0x14>)
 8001006:	f005 fc29 	bl	800685c <HAL_GPIO_WritePin>
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40020800 	.word	0x40020800

08001014 <FEB_BMS_Shutdown_Initiate>:

void FEB_BMS_Shutdown_Initiate(char shutdown_message[]) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b0a2      	sub	sp, #136	; 0x88
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	// Shutdown Circuit
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2102      	movs	r1, #2
 8001020:	480b      	ldr	r0, [pc, #44]	; (8001050 <FEB_BMS_Shutdown_Initiate+0x3c>)
 8001022:	f005 fc1b 	bl	800685c <HAL_GPIO_WritePin>

	// Broadcast Message
	char str[128];
	sprintf(str, "Shutdown: %s.", shutdown_message);
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	4909      	ldr	r1, [pc, #36]	; (8001054 <FEB_BMS_Shutdown_Initiate+0x40>)
 800102e:	4618      	mov	r0, r3
 8001030:	f009 f85e 	bl	800a0f0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 100);
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff f8e9 	bl	8000210 <strlen>
 800103e:	4603      	mov	r3, r0
 8001040:	b29a      	uxth	r2, r3
 8001042:	f107 0108 	add.w	r1, r7, #8
 8001046:	2364      	movs	r3, #100	; 0x64
 8001048:	4803      	ldr	r0, [pc, #12]	; (8001058 <FEB_BMS_Shutdown_Initiate+0x44>)
 800104a:	f007 ff40 	bl	8008ece <HAL_UART_Transmit>
	if (FEB_CAN_CHARGER_STATE == 1) {
		FEB_CAN_Charger_Stop_Charge(&hcan1);
	}

	// Do nothing
	while (1) {}
 800104e:	e7fe      	b.n	800104e <FEB_BMS_Shutdown_Initiate+0x3a>
 8001050:	40020800 	.word	0x40020800
 8001054:	0800c4c0 	.word	0x0800c4c0
 8001058:	20002acc 	.word	0x20002acc

0800105c <FEB_BMS_State_Validate>:

#include "FEB_BMS_State.h"

// ********************************** Functions **********************************

void FEB_BMS_State_Validate(void) {
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
	if (FEB_CAN_CHARGER_STATE == 1 && FEB_LTC6811_BALANCE_STATE == 1) {
		FEB_BMS_Shutdown_Initiate("Charge state and balance state enabled");
	}
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <FEB_CAN_Init>:
uint8_t FEB_CAN_RxData[8];
uint32_t FEB_CAN_TxMailbox;

// ******************** CAN ********************

void FEB_CAN_Init() {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	FEB_CAN_Filter_Config();
 8001070:	f000 f818 	bl	80010a4 <FEB_CAN_Filter_Config>
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8001074:	4808      	ldr	r0, [pc, #32]	; (8001098 <FEB_CAN_Init+0x2c>)
 8001076:	f004 fd9f 	bl	8005bb8 <HAL_CAN_Start>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <FEB_CAN_Init+0x1a>
		FEB_BMS_Shutdown_Initiate("CAN peripheral startup error");
 8001080:	4806      	ldr	r0, [pc, #24]	; (800109c <FEB_CAN_Init+0x30>)
 8001082:	f7ff ffc7 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
	}
	HAL_CAN_ActivateNotification(&hcan1, FEB_CAN_FIFO_Interrupt);
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <FEB_CAN_Init+0x34>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4619      	mov	r1, r3
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <FEB_CAN_Init+0x2c>)
 800108e:	f004 fee9 	bl	8005e64 <HAL_CAN_ActivateNotification>
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2000294c 	.word	0x2000294c
 800109c:	0800c4d0 	.word	0x0800c4d0
 80010a0:	20000000 	.word	0x20000000

080010a4 <FEB_CAN_Filter_Config>:

void FEB_CAN_Filter_Config() {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
	uint8_t bank = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	71fb      	strb	r3, [r7, #7]
	bank = FEB_CAN_IVT_Filter_Config(&hcan1, FEB_CAN_FIFO_Assignment, bank);
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <FEB_CAN_Filter_Config+0x48>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	79fa      	ldrb	r2, [r7, #7]
 80010b4:	4619      	mov	r1, r3
 80010b6:	480e      	ldr	r0, [pc, #56]	; (80010f0 <FEB_CAN_Filter_Config+0x4c>)
 80010b8:	f000 f8fc 	bl	80012b4 <FEB_CAN_IVT_Filter_Config>
 80010bc:	4603      	mov	r3, r0
 80010be:	71fb      	strb	r3, [r7, #7]
	bank = FEB_CAN_Charger_Filter_Config(&hcan1, FEB_CAN_FIFO_Assignment, bank);
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <FEB_CAN_Filter_Config+0x48>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	79fa      	ldrb	r2, [r7, #7]
 80010c6:	4619      	mov	r1, r3
 80010c8:	4809      	ldr	r0, [pc, #36]	; (80010f0 <FEB_CAN_Filter_Config+0x4c>)
 80010ca:	f000 f841 	bl	8001150 <FEB_CAN_Charger_Filter_Config>
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
	bank = FEB_CAN_Inverter_Filter_Config(&hcan1, FEB_CAN_FIFO_Assignment, bank);
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <FEB_CAN_Filter_Config+0x48>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	79fa      	ldrb	r2, [r7, #7]
 80010d8:	4619      	mov	r1, r3
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <FEB_CAN_Filter_Config+0x4c>)
 80010dc:	f000 fa50 	bl	8001580 <FEB_CAN_Inverter_Filter_Config>
 80010e0:	4603      	mov	r3, r0
 80010e2:	71fb      	strb	r3, [r7, #7]
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20002604 	.word	0x20002604
 80010f0:	2000294c 	.word	0x2000294c

080010f4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, FEB_CAN_FIFO_Assignment, &FEB_CAN_RxHeader, FEB_CAN_RxData) == HAL_OK) {
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001104:	4a0d      	ldr	r2, [pc, #52]	; (800113c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f004 fd9a 	bl	8005c40 <HAL_CAN_GetRxMessage>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10b      	bne.n	800112a <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
		FEB_CAN_IVT_Store_Msg(&FEB_CAN_RxHeader, FEB_CAN_RxData);
 8001112:	4909      	ldr	r1, [pc, #36]	; (8001138 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001114:	4809      	ldr	r0, [pc, #36]	; (800113c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001116:	f000 f915 	bl	8001344 <FEB_CAN_IVT_Store_Msg>
		FEB_CAN_Charger_Store_Msg(&FEB_CAN_RxHeader, FEB_CAN_RxData);
 800111a:	4907      	ldr	r1, [pc, #28]	; (8001138 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800111c:	4807      	ldr	r0, [pc, #28]	; (800113c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800111e:	f000 f84d 	bl	80011bc <FEB_CAN_Charger_Store_Msg>
		FEB_CAN_Inverter_Store_Msg(&FEB_CAN_RxHeader, FEB_CAN_RxData);
 8001122:	4905      	ldr	r1, [pc, #20]	; (8001138 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001124:	4805      	ldr	r0, [pc, #20]	; (800113c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001126:	f000 fa73 	bl	8001610 <FEB_CAN_Inverter_Store_Msg>
	}
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20002604 	.word	0x20002604
 8001138:	20002608 	.word	0x20002608
 800113c:	200025e8 	.word	0x200025e8

08001140 <FEB_CAN_Charger_Init>:

// ********************************** Functions **********************************

// ******************** Startup ********************

void FEB_CAN_Charger_Init() {
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
	if (FEB_CAN_CHARGER_STATE == 0) {
		return;
 8001144:	bf00      	nop
	}
	FEB_CAN_Charger_BMS_Message.max_voltage_dV = (uint16_t) (FEB_LTC6811_CELL_MAX_VOLTAGE * FEB_LTC6811_NUM_CELLS_PER_BANK * FEB_LTC6811_NUM_BANKS * 10);
	FEB_CAN_Charger_BMS_Message.max_current_dA = (uint16_t) (FEB_CAN_CHARGER_MAX_CHARGING_CURRENT * 10);
	FEB_CAN_Charger_BMS_Message.control = 0;
}
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <FEB_CAN_Charger_Filter_Config>:

// ******************** CAN ********************

uint8_t FEB_CAN_Charger_Filter_Config(CAN_HandleTypeDef* hcan, uint8_t FIFO_Assignment, uint8_t bank) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b08c      	sub	sp, #48	; 0x30
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
 800115c:	4613      	mov	r3, r2
 800115e:	70bb      	strb	r3, [r7, #2]
	CAN_FilterTypeDef my_can_filter_config;

	my_can_filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8001160:	2301      	movs	r3, #1
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
	my_can_filter_config.FilterBank = bank;
 8001164:	78bb      	ldrb	r3, [r7, #2]
 8001166:	61fb      	str	r3, [r7, #28]
	my_can_filter_config.FilterFIFOAssignment = FIFO_Assignment;
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	61bb      	str	r3, [r7, #24]
	my_can_filter_config.FilterIdHigh = FEB_CAN_CHARGER_CHARGER_ID >> 13; 			// First 16 bits
 800116c:	f24c 73fa 	movw	r3, #51194	; 0xc7fa
 8001170:	60bb      	str	r3, [r7, #8]
	my_can_filter_config.FilterIdLow = (FEB_CAN_CHARGER_CHARGER_ID & 0x1FFF) << 3;	// Last 13 bits
 8001172:	f248 7328 	movw	r3, #34600	; 0x8728
 8001176:	60fb      	str	r3, [r7, #12]
	my_can_filter_config.FilterMaskIdHigh = 0xFFFF; 								// Mask first 16 bits
 8001178:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800117c:	613b      	str	r3, [r7, #16]
	my_can_filter_config.FilterMaskIdLow = 0xFFF8;									// Mask last 13 bits
 800117e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001182:	617b      	str	r3, [r7, #20]
	my_can_filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
	my_can_filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8001188:	2301      	movs	r3, #1
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
	my_can_filter_config.SlaveStartFilterBank = 27;
 800118c:	231b      	movs	r3, #27
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_CAN_ConfigFilter(hcan, &my_can_filter_config)) {
 8001190:	f107 0308 	add.w	r3, r7, #8
 8001194:	4619      	mov	r1, r3
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f004 fc2e 	bl	80059f8 <HAL_CAN_ConfigFilter>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <FEB_CAN_Charger_Filter_Config+0x58>
		FEB_BMS_Shutdown_Initiate("Invalid charger CAN filter configuration");
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <FEB_CAN_Charger_Filter_Config+0x68>)
 80011a4:	f7ff ff36 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
	}

	return ++bank;
 80011a8:	78bb      	ldrb	r3, [r7, #2]
 80011aa:	3301      	adds	r3, #1
 80011ac:	70bb      	strb	r3, [r7, #2]
 80011ae:	78bb      	ldrb	r3, [r7, #2]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3730      	adds	r7, #48	; 0x30
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	0800c4f0 	.word	0x0800c4f0

080011bc <FEB_CAN_Charger_Store_Msg>:
	if (HAL_CAN_AddTxMessage(hcan, &FEB_CAN_TxHeader, FEB_CAN_TxData, &FEB_CAN_TxMailbox) != HAL_OK) {
		FEB_BMS_Shutdown_Initiate("CAN charger transmission error");
	}
}

void FEB_CAN_Charger_Store_Msg(CAN_RxHeaderTypeDef* pHeader, uint8_t RxData[]) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
	switch(pHeader->ExtId) {
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	4a17      	ldr	r2, [pc, #92]	; (8001228 <FEB_CAN_Charger_Store_Msg+0x6c>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d127      	bne.n	8001220 <FEB_CAN_Charger_Store_Msg+0x64>
	    case FEB_CAN_CHARGER_CHARGER_ID:
	    	FEB_CAN_Charger_Charger_Message.operating_voltage_dV = (RxData[0] << 8) + RxData[1];
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	021b      	lsls	r3, r3, #8
 80011d8:	b29a      	uxth	r2, r3
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	3301      	adds	r3, #1
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	4413      	add	r3, r2
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <FEB_CAN_Charger_Store_Msg+0x70>)
 80011e8:	801a      	strh	r2, [r3, #0]
	    	FEB_CAN_Charger_Charger_Message.operating_current_dA = (RxData[2] << 8) + RxData[3];
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	3302      	adds	r3, #2
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	3303      	adds	r3, #3
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	4413      	add	r3, r2
 8001200:	b29a      	uxth	r2, r3
 8001202:	4b0a      	ldr	r3, [pc, #40]	; (800122c <FEB_CAN_Charger_Store_Msg+0x70>)
 8001204:	805a      	strh	r2, [r3, #2]
	    	FEB_CAN_Charger_Charger_Message.status = RxData[4];
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	3304      	adds	r3, #4
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	b29a      	uxth	r2, r3
 800120e:	4b07      	ldr	r3, [pc, #28]	; (800122c <FEB_CAN_Charger_Store_Msg+0x70>)
 8001210:	809a      	strh	r2, [r3, #4]
			FEB_CAN_Charger_Validate_Status(RxData[4]);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	3304      	adds	r3, #4
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f000 f809 	bl	8001230 <FEB_CAN_Charger_Validate_Status>
			break;
 800121e:	bf00      	nop
	}
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	18ff50e5 	.word	0x18ff50e5
 800122c:	20002610 	.word	0x20002610

08001230 <FEB_CAN_Charger_Validate_Status>:

// ******************** Process Data ********************

void FEB_CAN_Charger_Validate_Status(uint8_t status) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
	// Failure bits: 0 (no error), 1 (error)
	uint8_t hardware_failure 			= (status >> 7) & 0b1;
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	09db      	lsrs	r3, r3, #7
 800123e:	73fb      	strb	r3, [r7, #15]
	uint8_t temperature_failure 		= (status >> 6) & 0b1;
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	099b      	lsrs	r3, r3, #6
 8001244:	b2db      	uxtb	r3, r3
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	73bb      	strb	r3, [r7, #14]
	uint8_t input_voltage_failure 		= (status >> 5) & 0b1;
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	b2db      	uxtb	r3, r3
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	737b      	strb	r3, [r7, #13]
	uint8_t starting_state_failure 		= (status >> 4) & 0b1;
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	091b      	lsrs	r3, r3, #4
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	733b      	strb	r3, [r7, #12]
	uint8_t communication_state_failure = (status >> 3) & 0b1;
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	b2db      	uxtb	r3, r3
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	72fb      	strb	r3, [r7, #11]

	if (hardware_failure == 1 			||
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d00b      	beq.n	800128e <FEB_CAN_Charger_Validate_Status+0x5e>
 8001276:	7bbb      	ldrb	r3, [r7, #14]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d008      	beq.n	800128e <FEB_CAN_Charger_Validate_Status+0x5e>
		temperature_failure == 1 		||
 800127c:	7b7b      	ldrb	r3, [r7, #13]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d005      	beq.n	800128e <FEB_CAN_Charger_Validate_Status+0x5e>
		input_voltage_failure == 1		||
 8001282:	7b3b      	ldrb	r3, [r7, #12]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d002      	beq.n	800128e <FEB_CAN_Charger_Validate_Status+0x5e>
		starting_state_failure == 1		||
 8001288:	7afb      	ldrb	r3, [r7, #11]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d102      	bne.n	8001294 <FEB_CAN_Charger_Validate_Status+0x64>
		communication_state_failure == 1) {
		FEB_BMS_Shutdown_Initiate("CAN charger status error");
 800128e:	4803      	ldr	r0, [pc, #12]	; (800129c <FEB_CAN_Charger_Validate_Status+0x6c>)
 8001290:	f7ff fec0 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
	}
}
 8001294:	bf00      	nop
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	0800c53c 	.word	0x0800c53c

080012a0 <FEB_CAN_Charger_Process>:

void FEB_CAN_Charger_Process(CAN_HandleTypeDef* hcan) {
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	if (FEB_CAN_CHARGER_STATE == 0 || FEB_CAN_Charger_Stop_Charge_Bool == 1) {
		return;
 80012a8:	bf00      	nop
	if (FEB_LTC6811_Cells_Charged() == 1) {
		FEB_CAN_Charger_Stop_Charge(hcan);
	} else {
		FEB_CAN_Charger_Transmit(hcan);
	}
}
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <FEB_CAN_IVT_Filter_Config>:
// ********************************** Functions **********************************


// ******************** CAN ********************

uint8_t FEB_CAN_IVT_Filter_Config(CAN_HandleTypeDef* hcan, uint8_t FIFO_Assignment, uint8_t bank) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08e      	sub	sp, #56	; 0x38
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	70fb      	strb	r3, [r7, #3]
 80012c0:	4613      	mov	r3, r2
 80012c2:	70bb      	strb	r3, [r7, #2]
	const uint8_t num_filters = (uint8_t) FEB_MATH_ARRAY_LENGTH(FEB_CAN_IVT_Filter_ID_Arr);
 80012c4:	2304      	movs	r3, #4
 80012c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	for (int i = 0; i < num_filters; i++, bank++) {
 80012ca:	2300      	movs	r3, #0
 80012cc:	637b      	str	r3, [r7, #52]	; 0x34
 80012ce:	e02a      	b.n	8001326 <FEB_CAN_IVT_Filter_Config+0x72>
		CAN_FilterTypeDef filter_config;

		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 80012d0:	2301      	movs	r3, #1
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.FilterBank = bank;
 80012d4:	78bb      	ldrb	r3, [r7, #2]
 80012d6:	61fb      	str	r3, [r7, #28]
		filter_config.FilterFIFOAssignment = FIFO_Assignment;
 80012d8:	78fb      	ldrb	r3, [r7, #3]
 80012da:	61bb      	str	r3, [r7, #24]
		filter_config.FilterIdHigh = FEB_CAN_IVT_Filter_ID_Arr[i] << 5;
 80012dc:	4a17      	ldr	r2, [pc, #92]	; (800133c <FEB_CAN_IVT_Filter_Config+0x88>)
 80012de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012e4:	015b      	lsls	r3, r3, #5
 80012e6:	60bb      	str	r3, [r7, #8]
		filter_config.FilterIdLow = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
		filter_config.FilterMaskIdHigh = 0x7FF << 5;
 80012ec:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80012f0:	613b      	str	r3, [r7, #16]
		filter_config.FilterMaskIdLow = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 80012fa:	2301      	movs	r3, #1
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.SlaveStartFilterBank = 27;
 80012fe:	231b      	movs	r3, #27
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c

		if(HAL_CAN_ConfigFilter(hcan, &filter_config)) {
 8001302:	f107 0308 	add.w	r3, r7, #8
 8001306:	4619      	mov	r1, r3
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f004 fb75 	bl	80059f8 <HAL_CAN_ConfigFilter>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d002      	beq.n	800131a <FEB_CAN_IVT_Filter_Config+0x66>
			FEB_BMS_Shutdown_Initiate("Invalid IVT CAN filter configuration");
 8001314:	480a      	ldr	r0, [pc, #40]	; (8001340 <FEB_CAN_IVT_Filter_Config+0x8c>)
 8001316:	f7ff fe7d 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
	for (int i = 0; i < num_filters; i++, bank++) {
 800131a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800131c:	3301      	adds	r3, #1
 800131e:	637b      	str	r3, [r7, #52]	; 0x34
 8001320:	78bb      	ldrb	r3, [r7, #2]
 8001322:	3301      	adds	r3, #1
 8001324:	70bb      	strb	r3, [r7, #2]
 8001326:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800132a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800132c:	429a      	cmp	r2, r3
 800132e:	dbcf      	blt.n	80012d0 <FEB_CAN_IVT_Filter_Config+0x1c>
		}
	}
	return bank;
 8001330:	78bb      	ldrb	r3, [r7, #2]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3738      	adds	r7, #56	; 0x38
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000004 	.word	0x20000004
 8001340:	0800c558 	.word	0x0800c558

08001344 <FEB_CAN_IVT_Store_Msg>:

void FEB_CAN_IVT_Store_Msg(CAN_RxHeaderTypeDef* pHeader, uint8_t RxData[]) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
	uint32_t value;
    switch(pHeader->StdId) {
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f2a3 5321 	subw	r3, r3, #1313	; 0x521
 8001356:	2b03      	cmp	r3, #3
 8001358:	d87e      	bhi.n	8001458 <FEB_CAN_IVT_Store_Msg+0x114>
 800135a:	a201      	add	r2, pc, #4	; (adr r2, 8001360 <FEB_CAN_IVT_Store_Msg+0x1c>)
 800135c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001360:	08001371 	.word	0x08001371
 8001364:	080013ab 	.word	0x080013ab
 8001368:	080013e5 	.word	0x080013e5
 800136c:	0800141f 	.word	0x0800141f
    	case FEB_CAN_IVT_CURRENT_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	3302      	adds	r3, #2
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	061a      	lsls	r2, r3, #24
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	3303      	adds	r3, #3
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	041b      	lsls	r3, r3, #16
 8001380:	441a      	add	r2, r3
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	3304      	adds	r3, #4
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	021b      	lsls	r3, r3, #8
 800138a:	4413      	add	r3, r2
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	3205      	adds	r2, #5
 8001390:	7812      	ldrb	r2, [r2, #0]
 8001392:	4413      	add	r3, r2
 8001394:	60fb      	str	r3, [r7, #12]
    	    FEB_CAN_IVT_MESSAGE.current_mA = FEB_Math_Uint32_To_Signed_Long(value);
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f001 faaa 	bl	80028f0 <FEB_Math_Uint32_To_Signed_Long>
 800139c:	4603      	mov	r3, r0
 800139e:	4a30      	ldr	r2, [pc, #192]	; (8001460 <FEB_CAN_IVT_Store_Msg+0x11c>)
 80013a0:	6013      	str	r3, [r2, #0]
    	    FEB_CAN_IVT_FLAG.current = 1;
 80013a2:	4b30      	ldr	r3, [pc, #192]	; (8001464 <FEB_CAN_IVT_Store_Msg+0x120>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
    		break;
 80013a8:	e056      	b.n	8001458 <FEB_CAN_IVT_Store_Msg+0x114>
    	case FEB_CAN_IVT_VOLTAGE_1_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	3302      	adds	r3, #2
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	061a      	lsls	r2, r3, #24
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	3303      	adds	r3, #3
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	041b      	lsls	r3, r3, #16
 80013ba:	441a      	add	r2, r3
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	3304      	adds	r3, #4
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	4413      	add	r3, r2
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	3205      	adds	r2, #5
 80013ca:	7812      	ldrb	r2, [r2, #0]
 80013cc:	4413      	add	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]
    	    FEB_CAN_IVT_MESSAGE.voltage_1_mV = FEB_Math_Uint32_To_Signed_Long(value);
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f001 fa8d 	bl	80028f0 <FEB_Math_Uint32_To_Signed_Long>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4a21      	ldr	r2, [pc, #132]	; (8001460 <FEB_CAN_IVT_Store_Msg+0x11c>)
 80013da:	6053      	str	r3, [r2, #4]
    	    FEB_CAN_IVT_FLAG.voltage_1 = 1;
 80013dc:	4b21      	ldr	r3, [pc, #132]	; (8001464 <FEB_CAN_IVT_Store_Msg+0x120>)
 80013de:	2201      	movs	r2, #1
 80013e0:	705a      	strb	r2, [r3, #1]
    		break;
 80013e2:	e039      	b.n	8001458 <FEB_CAN_IVT_Store_Msg+0x114>
    	case FEB_CAN_IVT_VOLTAGE_2_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	3302      	adds	r3, #2
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	061a      	lsls	r2, r3, #24
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	3303      	adds	r3, #3
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	041b      	lsls	r3, r3, #16
 80013f4:	441a      	add	r2, r3
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	3304      	adds	r3, #4
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	4413      	add	r3, r2
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	3205      	adds	r2, #5
 8001404:	7812      	ldrb	r2, [r2, #0]
 8001406:	4413      	add	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
    	    FEB_CAN_IVT_MESSAGE.voltage_2_mV = FEB_Math_Uint32_To_Signed_Long(value);
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f001 fa70 	bl	80028f0 <FEB_Math_Uint32_To_Signed_Long>
 8001410:	4603      	mov	r3, r0
 8001412:	4a13      	ldr	r2, [pc, #76]	; (8001460 <FEB_CAN_IVT_Store_Msg+0x11c>)
 8001414:	6093      	str	r3, [r2, #8]
    	    FEB_CAN_IVT_FLAG.voltage_2 = 1;
 8001416:	4b13      	ldr	r3, [pc, #76]	; (8001464 <FEB_CAN_IVT_Store_Msg+0x120>)
 8001418:	2201      	movs	r2, #1
 800141a:	709a      	strb	r2, [r3, #2]
    		break;
 800141c:	e01c      	b.n	8001458 <FEB_CAN_IVT_Store_Msg+0x114>
    	case FEB_CAN_IVT_VOLTAGE_3_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	3302      	adds	r3, #2
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	061a      	lsls	r2, r3, #24
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	3303      	adds	r3, #3
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	041b      	lsls	r3, r3, #16
 800142e:	441a      	add	r2, r3
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	3304      	adds	r3, #4
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	4413      	add	r3, r2
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	3205      	adds	r2, #5
 800143e:	7812      	ldrb	r2, [r2, #0]
 8001440:	4413      	add	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]
    		FEB_CAN_IVT_MESSAGE.voltage_3_mV = FEB_Math_Uint32_To_Signed_Long(value);
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f001 fa53 	bl	80028f0 <FEB_Math_Uint32_To_Signed_Long>
 800144a:	4603      	mov	r3, r0
 800144c:	4a04      	ldr	r2, [pc, #16]	; (8001460 <FEB_CAN_IVT_Store_Msg+0x11c>)
 800144e:	60d3      	str	r3, [r2, #12]
    		FEB_CAN_IVT_FLAG.voltage_3 = 1;
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <FEB_CAN_IVT_Store_Msg+0x120>)
 8001452:	2201      	movs	r2, #1
 8001454:	70da      	strb	r2, [r3, #3]
    		break;
 8001456:	bf00      	nop
    }
}
 8001458:	bf00      	nop
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	2000261c 	.word	0x2000261c
 8001464:	20002618 	.word	0x20002618

08001468 <FEB_CAN_IVT_Process>:

// ******************** Process Data  ********************

void FEB_CAN_IVT_Process(void) {
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
	if (FEB_CAN_CHARGER_STATE == 1 || FEB_LTC6811_BALANCE_STATE == 1) {
		return;
	}
	if (FEB_CAN_IVT_FLAG.current == 1) {
 800146e:	4b40      	ldr	r3, [pc, #256]	; (8001570 <FEB_CAN_IVT_Process+0x108>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d125      	bne.n	80014c2 <FEB_CAN_IVT_Process+0x5a>
		FEB_CAN_IVT_FLAG.current = 0;
 8001476:	4b3e      	ldr	r3, [pc, #248]	; (8001570 <FEB_CAN_IVT_Process+0x108>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
		const float current = (float) FEB_CAN_IVT_MESSAGE.current_mA * 0.001;
 800147c:	4b3d      	ldr	r3, [pc, #244]	; (8001574 <FEB_CAN_IVT_Process+0x10c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	ee07 3a90 	vmov	s15, r3
 8001484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001488:	ee17 0a90 	vmov	r0, s15
 800148c:	f7ff f87c 	bl	8000588 <__aeabi_f2d>
 8001490:	a333      	add	r3, pc, #204	; (adr r3, 8001560 <FEB_CAN_IVT_Process+0xf8>)
 8001492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001496:	f7ff f8cf 	bl	8000638 <__aeabi_dmul>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4610      	mov	r0, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	f7ff fbc1 	bl	8000c28 <__aeabi_d2f>
 80014a6:	4603      	mov	r3, r0
 80014a8:	607b      	str	r3, [r7, #4]
		if (current > FEB_LTC6811_CELL_MAX_OPERATING_CURRENT) {
 80014aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ae:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001578 <FEB_CAN_IVT_Process+0x110>
 80014b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ba:	dd02      	ble.n	80014c2 <FEB_CAN_IVT_Process+0x5a>
			FEB_BMS_Shutdown_Initiate("IVT over current");
 80014bc:	482f      	ldr	r0, [pc, #188]	; (800157c <FEB_CAN_IVT_Process+0x114>)
 80014be:	f7ff fda9 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
		}
	}
	if (FEB_CAN_IVT_FLAG.voltage_1 == 1) {
 80014c2:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <FEB_CAN_IVT_Process+0x108>)
 80014c4:	785b      	ldrb	r3, [r3, #1]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d102      	bne.n	80014d0 <FEB_CAN_IVT_Process+0x68>
		FEB_CAN_IVT_FLAG.voltage_1 = 0;
 80014ca:	4b29      	ldr	r3, [pc, #164]	; (8001570 <FEB_CAN_IVT_Process+0x108>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	705a      	strb	r2, [r3, #1]
		// Do something

	}
	if (FEB_CAN_IVT_FLAG.voltage_2 == 1) {
 80014d0:	4b27      	ldr	r3, [pc, #156]	; (8001570 <FEB_CAN_IVT_Process+0x108>)
 80014d2:	789b      	ldrb	r3, [r3, #2]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d102      	bne.n	80014de <FEB_CAN_IVT_Process+0x76>
		FEB_CAN_IVT_FLAG.voltage_2 = 0;
 80014d8:	4b25      	ldr	r3, [pc, #148]	; (8001570 <FEB_CAN_IVT_Process+0x108>)
 80014da:	2200      	movs	r2, #0
 80014dc:	709a      	strb	r2, [r3, #2]
		// Do Something
	}
	if (FEB_CAN_IVT_FLAG.voltage_3 == 1) {
 80014de:	4b24      	ldr	r3, [pc, #144]	; (8001570 <FEB_CAN_IVT_Process+0x108>)
 80014e0:	78db      	ldrb	r3, [r3, #3]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d138      	bne.n	8001558 <FEB_CAN_IVT_Process+0xf0>
		FEB_CAN_IVT_FLAG.voltage_3 = 0;
 80014e6:	4b22      	ldr	r3, [pc, #136]	; (8001570 <FEB_CAN_IVT_Process+0x108>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	70da      	strb	r2, [r3, #3]
		float voltage = (float) FEB_CAN_IVT_MESSAGE.voltage_3_mV * 0.001;
 80014ec:	4b21      	ldr	r3, [pc, #132]	; (8001574 <FEB_CAN_IVT_Process+0x10c>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	ee07 3a90 	vmov	s15, r3
 80014f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f8:	ee17 0a90 	vmov	r0, s15
 80014fc:	f7ff f844 	bl	8000588 <__aeabi_f2d>
 8001500:	a317      	add	r3, pc, #92	; (adr r3, 8001560 <FEB_CAN_IVT_Process+0xf8>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7ff f897 	bl	8000638 <__aeabi_dmul>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f7ff fb89 	bl	8000c28 <__aeabi_d2f>
 8001516:	4603      	mov	r3, r0
 8001518:	603b      	str	r3, [r7, #0]
		if (voltage > FEB_LTC6811_Total_Bank_Voltage() * 0.9) {
 800151a:	6838      	ldr	r0, [r7, #0]
 800151c:	f7ff f834 	bl	8000588 <__aeabi_f2d>
 8001520:	4604      	mov	r4, r0
 8001522:	460d      	mov	r5, r1
 8001524:	f000 fd72 	bl	800200c <FEB_LTC6811_Total_Bank_Voltage>
 8001528:	ee10 3a10 	vmov	r3, s0
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f82b 	bl	8000588 <__aeabi_f2d>
 8001532:	a30d      	add	r3, pc, #52	; (adr r3, 8001568 <FEB_CAN_IVT_Process+0x100>)
 8001534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001538:	f7ff f87e 	bl	8000638 <__aeabi_dmul>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4620      	mov	r0, r4
 8001542:	4629      	mov	r1, r5
 8001544:	f7ff fb08 	bl	8000b58 <__aeabi_dcmpgt>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d002      	beq.n	8001554 <FEB_CAN_IVT_Process+0xec>
			FEB_BMS_Precharge_Close();
 800154e:	f7ff fd49 	bl	8000fe4 <FEB_BMS_Precharge_Close>
 8001552:	e001      	b.n	8001558 <FEB_CAN_IVT_Process+0xf0>
		} else {
			FEB_BMS_Precharge_Open();
 8001554:	f7ff fd3a 	bl	8000fcc <FEB_BMS_Precharge_Open>
		}
	}
}
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bdb0      	pop	{r4, r5, r7, pc}
 800155e:	bf00      	nop
 8001560:	d2f1a9fc 	.word	0xd2f1a9fc
 8001564:	3f50624d 	.word	0x3f50624d
 8001568:	cccccccd 	.word	0xcccccccd
 800156c:	3feccccc 	.word	0x3feccccc
 8001570:	20002618 	.word	0x20002618
 8001574:	2000261c 	.word	0x2000261c
 8001578:	425c0000 	.word	0x425c0000
 800157c:	0800c580 	.word	0x0800c580

08001580 <FEB_CAN_Inverter_Filter_Config>:

// ********************************** Functions **********************************

// ******************** CAN ********************

uint8_t FEB_CAN_Inverter_Filter_Config(CAN_HandleTypeDef* hcan, uint8_t FIFO_Assignment, uint8_t bank) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b08e      	sub	sp, #56	; 0x38
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	70fb      	strb	r3, [r7, #3]
 800158c:	4613      	mov	r3, r2
 800158e:	70bb      	strb	r3, [r7, #2]
	uint8_t num_filters = FEB_MATH_ARRAY_LENGTH(FEB_CAN_Inverter_Filter_ID_Arr);
 8001590:	2302      	movs	r3, #2
 8001592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	for (int i = 0; i < num_filters; i++, bank++) {
 8001596:	2300      	movs	r3, #0
 8001598:	637b      	str	r3, [r7, #52]	; 0x34
 800159a:	e02a      	b.n	80015f2 <FEB_CAN_Inverter_Filter_Config+0x72>
		CAN_FilterTypeDef filter_config;

		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 800159c:	2301      	movs	r3, #1
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.FilterBank = bank;
 80015a0:	78bb      	ldrb	r3, [r7, #2]
 80015a2:	61fb      	str	r3, [r7, #28]
		filter_config.FilterFIFOAssignment = FIFO_Assignment;
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	61bb      	str	r3, [r7, #24]
		filter_config.FilterIdHigh = FEB_CAN_Inverter_Filter_ID_Arr[i] << 5;
 80015a8:	4a17      	ldr	r2, [pc, #92]	; (8001608 <FEB_CAN_Inverter_Filter_Config+0x88>)
 80015aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015b0:	015b      	lsls	r3, r3, #5
 80015b2:	60bb      	str	r3, [r7, #8]
		filter_config.FilterIdLow = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
		filter_config.FilterMaskIdHigh = 0x7FF << 5;
 80015b8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80015bc:	613b      	str	r3, [r7, #16]
		filter_config.FilterMaskIdLow = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	623b      	str	r3, [r7, #32]
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 80015c6:	2301      	movs	r3, #1
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.SlaveStartFilterBank = 27;
 80015ca:	231b      	movs	r3, #27
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (HAL_CAN_ConfigFilter(hcan, &filter_config)) {
 80015ce:	f107 0308 	add.w	r3, r7, #8
 80015d2:	4619      	mov	r1, r3
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f004 fa0f 	bl	80059f8 <HAL_CAN_ConfigFilter>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d002      	beq.n	80015e6 <FEB_CAN_Inverter_Filter_Config+0x66>
			FEB_BMS_Shutdown_Initiate("Invalid inverter CAN filter configuration");
 80015e0:	480a      	ldr	r0, [pc, #40]	; (800160c <FEB_CAN_Inverter_Filter_Config+0x8c>)
 80015e2:	f7ff fd17 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
	for (int i = 0; i < num_filters; i++, bank++) {
 80015e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e8:	3301      	adds	r3, #1
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
 80015ec:	78bb      	ldrb	r3, [r7, #2]
 80015ee:	3301      	adds	r3, #1
 80015f0:	70bb      	strb	r3, [r7, #2]
 80015f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015f8:	429a      	cmp	r2, r3
 80015fa:	dbcf      	blt.n	800159c <FEB_CAN_Inverter_Filter_Config+0x1c>
		}
	}
	return bank;
 80015fc:	78bb      	ldrb	r3, [r7, #2]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3738      	adds	r7, #56	; 0x38
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	2000000c 	.word	0x2000000c
 800160c:	0800c594 	.word	0x0800c594

08001610 <FEB_CAN_Inverter_Store_Msg>:

void FEB_CAN_Inverter_Store_Msg(CAN_RxHeaderTypeDef* pHeader, uint8_t RxData[]) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
	switch (pHeader->StdId) {
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2ba0      	cmp	r3, #160	; 0xa0
 8001620:	d002      	beq.n	8001628 <FEB_CAN_Inverter_Store_Msg+0x18>
 8001622:	2ba2      	cmp	r3, #162	; 0xa2
 8001624:	d04c      	beq.n	80016c0 <FEB_CAN_Inverter_Store_Msg+0xb0>
			break;
		case FEB_CAN_INVERTER_TEMPERATURE_3_ID:
			FEB_CAN_Inverter_Temperature_3_Message.motor_dC = FEB_Math_Uint16_To_Int16((RxData[4] << 8) + RxData[5]);
			break;
	}
}
 8001626:	e05f      	b.n	80016e8 <FEB_CAN_Inverter_Store_Msg+0xd8>
			FEB_CAN_Inverter_Temperature_1_Message.phase_a_dC = FEB_Math_Uint16_To_Int16((RxData[0] << 8) + RxData[1]);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	b29b      	uxth	r3, r3
 800162e:	021b      	lsls	r3, r3, #8
 8001630:	b29a      	uxth	r2, r3
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	b29b      	uxth	r3, r3
 800163a:	4413      	add	r3, r2
 800163c:	b29b      	uxth	r3, r3
 800163e:	4618      	mov	r0, r3
 8001640:	f001 f965 	bl	800290e <FEB_Math_Uint16_To_Int16>
 8001644:	4603      	mov	r3, r0
 8001646:	461a      	mov	r2, r3
 8001648:	4b29      	ldr	r3, [pc, #164]	; (80016f0 <FEB_CAN_Inverter_Store_Msg+0xe0>)
 800164a:	801a      	strh	r2, [r3, #0]
			FEB_CAN_Inverter_Temperature_1_Message.phase_b_dC = FEB_Math_Uint16_To_Int16((RxData[2] << 8) + RxData[3]);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	3302      	adds	r3, #2
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b29b      	uxth	r3, r3
 8001654:	021b      	lsls	r3, r3, #8
 8001656:	b29a      	uxth	r2, r3
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	3303      	adds	r3, #3
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	b29b      	uxth	r3, r3
 8001660:	4413      	add	r3, r2
 8001662:	b29b      	uxth	r3, r3
 8001664:	4618      	mov	r0, r3
 8001666:	f001 f952 	bl	800290e <FEB_Math_Uint16_To_Int16>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <FEB_CAN_Inverter_Store_Msg+0xe0>)
 8001670:	805a      	strh	r2, [r3, #2]
			FEB_CAN_Inverter_Temperature_1_Message.phase_c_dC = FEB_Math_Uint16_To_Int16((RxData[4] << 8) + RxData[5]);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	3304      	adds	r3, #4
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	b29b      	uxth	r3, r3
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	b29a      	uxth	r2, r3
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	3305      	adds	r3, #5
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	b29b      	uxth	r3, r3
 8001686:	4413      	add	r3, r2
 8001688:	b29b      	uxth	r3, r3
 800168a:	4618      	mov	r0, r3
 800168c:	f001 f93f 	bl	800290e <FEB_Math_Uint16_To_Int16>
 8001690:	4603      	mov	r3, r0
 8001692:	461a      	mov	r2, r3
 8001694:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <FEB_CAN_Inverter_Store_Msg+0xe0>)
 8001696:	809a      	strh	r2, [r3, #4]
			FEB_CAN_Inverter_Temperature_1_Message.gate_driver_board_dC = FEB_Math_Uint16_To_Int16((RxData[6] << 8) + RxData[7]);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	3306      	adds	r3, #6
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	021b      	lsls	r3, r3, #8
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	3307      	adds	r3, #7
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	4413      	add	r3, r2
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	4618      	mov	r0, r3
 80016b2:	f001 f92c 	bl	800290e <FEB_Math_Uint16_To_Int16>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <FEB_CAN_Inverter_Store_Msg+0xe0>)
 80016bc:	80da      	strh	r2, [r3, #6]
			break;
 80016be:	e013      	b.n	80016e8 <FEB_CAN_Inverter_Store_Msg+0xd8>
			FEB_CAN_Inverter_Temperature_3_Message.motor_dC = FEB_Math_Uint16_To_Int16((RxData[4] << 8) + RxData[5]);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	3304      	adds	r3, #4
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	3305      	adds	r3, #5
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	4413      	add	r3, r2
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	4618      	mov	r0, r3
 80016da:	f001 f918 	bl	800290e <FEB_Math_Uint16_To_Int16>
 80016de:	4603      	mov	r3, r0
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <FEB_CAN_Inverter_Store_Msg+0xe4>)
 80016e4:	801a      	strh	r2, [r3, #0]
			break;
 80016e6:	bf00      	nop
}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	2000262c 	.word	0x2000262c
 80016f4:	20002634 	.word	0x20002634

080016f8 <FEB_CAN_Inverter_Process>:

// ******************** Process Data ********************

void FEB_CAN_Inverter_Process(void) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
	uint8_t num_temperatures = FEB_MATH_ARRAY_LENGTH(FEB_CAN_Inverter_Temperatures_dC);
 80016fe:	2305      	movs	r3, #5
 8001700:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < num_temperatures; i++) {
 8001702:	2300      	movs	r3, #0
 8001704:	71fb      	strb	r3, [r7, #7]
 8001706:	e024      	b.n	8001752 <FEB_CAN_Inverter_Process+0x5a>
		float temperature = *FEB_CAN_Inverter_Temperatures_dC[i] * 0.1;
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	4a19      	ldr	r2, [pc, #100]	; (8001770 <FEB_CAN_Inverter_Process+0x78>)
 800170c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff25 	bl	8000564 <__aeabi_i2d>
 800171a:	a313      	add	r3, pc, #76	; (adr r3, 8001768 <FEB_CAN_Inverter_Process+0x70>)
 800171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001720:	f7fe ff8a 	bl	8000638 <__aeabi_dmul>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4610      	mov	r0, r2
 800172a:	4619      	mov	r1, r3
 800172c:	f7ff fa7c 	bl	8000c28 <__aeabi_d2f>
 8001730:	4603      	mov	r3, r0
 8001732:	603b      	str	r3, [r7, #0]
		if (temperature > FEB_CAN_INVERTER_TEMPERATURE_MAX) {
 8001734:	edd7 7a00 	vldr	s15, [r7]
 8001738:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001774 <FEB_CAN_Inverter_Process+0x7c>
 800173c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001744:	dd02      	ble.n	800174c <FEB_CAN_Inverter_Process+0x54>
			FEB_BMS_Shutdown_Initiate("Inverter over temperature");
 8001746:	480c      	ldr	r0, [pc, #48]	; (8001778 <FEB_CAN_Inverter_Process+0x80>)
 8001748:	f7ff fc64 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
	for (uint8_t i = 0; i < num_temperatures; i++) {
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	3301      	adds	r3, #1
 8001750:	71fb      	strb	r3, [r7, #7]
 8001752:	79fa      	ldrb	r2, [r7, #7]
 8001754:	79bb      	ldrb	r3, [r7, #6]
 8001756:	429a      	cmp	r2, r3
 8001758:	d3d6      	bcc.n	8001708 <FEB_CAN_Inverter_Process+0x10>
		} else if (temperature > FEB_CAN_INVERTER_TEMPERATURE_LIMIT_TORQUE) {
			// TODO: Limit torque
		}
	}
}
 800175a:	bf00      	nop
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	f3af 8000 	nop.w
 8001768:	9999999a 	.word	0x9999999a
 800176c:	3fb99999 	.word	0x3fb99999
 8001770:	20000010 	.word	0x20000010
 8001774:	426c0000 	.word	0x426c0000
 8001778:	0800c5c0 	.word	0x0800c5c0

0800177c <FEB_Fan_Init>:
static uint8_t FEB_Fan_3_Speed = 0;		// [0, 255]
static uint8_t FEB_Fan_4_Speed = 0;		// [0, 255]

// ********************************** Initialize **********************************

void FEB_Fan_Init(void) {
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
	FEB_Fan_PWM_Start();
 8001780:	f000 f810 	bl	80017a4 <FEB_Fan_PWM_Start>
	FEB_Fan_Init_Speed_Set();
 8001784:	f000 f826 	bl	80017d4 <FEB_Fan_Init_Speed_Set>
	FEB_Fan_Reset_Shift_Register();
 8001788:	f000 f894 	bl	80018b4 <FEB_Fan_Reset_Shift_Register>
	HAL_ADC_Start(&hadc1);
 800178c:	4803      	ldr	r0, [pc, #12]	; (800179c <FEB_Fan_Init+0x20>)
 800178e:	f003 fc9f 	bl	80050d0 <HAL_ADC_Start>
	HAL_ADC_Start(&hadc2);
 8001792:	4803      	ldr	r0, [pc, #12]	; (80017a0 <FEB_Fan_Init+0x24>)
 8001794:	f003 fc9c 	bl	80050d0 <HAL_ADC_Start>
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200028bc 	.word	0x200028bc
 80017a0:	20002904 	.word	0x20002904

080017a4 <FEB_Fan_PWM_Start>:

// ********************************** PWM **********************************

void FEB_Fan_PWM_Start(void) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017a8:	2100      	movs	r1, #0
 80017aa:	4808      	ldr	r0, [pc, #32]	; (80017cc <FEB_Fan_PWM_Start+0x28>)
 80017ac:	f006 fd12 	bl	80081d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80017b0:	2104      	movs	r1, #4
 80017b2:	4806      	ldr	r0, [pc, #24]	; (80017cc <FEB_Fan_PWM_Start+0x28>)
 80017b4:	f006 fd0e 	bl	80081d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80017b8:	2100      	movs	r1, #0
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <FEB_Fan_PWM_Start+0x2c>)
 80017bc:	f006 fd0a 	bl	80081d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80017c0:	2104      	movs	r1, #4
 80017c2:	4803      	ldr	r0, [pc, #12]	; (80017d0 <FEB_Fan_PWM_Start+0x2c>)
 80017c4:	f006 fd06 	bl	80081d4 <HAL_TIM_PWM_Start>
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	200029f4 	.word	0x200029f4
 80017d0:	20002a3c 	.word	0x20002a3c

080017d4 <FEB_Fan_Init_Speed_Set>:

void FEB_Fan_Init_Speed_Set(void) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
	if (FEB_CAN_CHARGER_STATE == 0) {
		FEB_Fan_1_Speed_Set(255);
 80017d8:	20ff      	movs	r0, #255	; 0xff
 80017da:	f000 f80b 	bl	80017f4 <FEB_Fan_1_Speed_Set>
		FEB_Fan_2_Speed_Set(255);
 80017de:	20ff      	movs	r0, #255	; 0xff
 80017e0:	f000 f820 	bl	8001824 <FEB_Fan_2_Speed_Set>
		FEB_Fan_3_Speed_Set(255);
 80017e4:	20ff      	movs	r0, #255	; 0xff
 80017e6:	f000 f835 	bl	8001854 <FEB_Fan_3_Speed_Set>
		FEB_Fan_4_Speed_Set(255);
 80017ea:	20ff      	movs	r0, #255	; 0xff
 80017ec:	f000 f84a 	bl	8001884 <FEB_Fan_4_Speed_Set>
		FEB_Fan_2_Speed_Set(127);
		FEB_Fan_3_Speed_Set(127);
		FEB_Fan_4_Speed_Set(127);
	}

}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <FEB_Fan_1_Speed_Set>:

void FEB_Fan_1_Speed_Set(uint8_t speed) {
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
	FEB_Fan_1_Speed = speed;
 80017fe:	4a07      	ldr	r2, [pc, #28]	; (800181c <FEB_Fan_1_Speed_Set+0x28>)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, FEB_Fan_1_Speed);
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <FEB_Fan_1_Speed_Set+0x28>)
 8001806:	781a      	ldrb	r2, [r3, #0]
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <FEB_Fan_1_Speed_Set+0x2c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20002636 	.word	0x20002636
 8001820:	200029f4 	.word	0x200029f4

08001824 <FEB_Fan_2_Speed_Set>:

void FEB_Fan_2_Speed_Set(uint8_t speed) {
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
	FEB_Fan_2_Speed = speed;
 800182e:	4a07      	ldr	r2, [pc, #28]	; (800184c <FEB_Fan_2_Speed_Set+0x28>)
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, FEB_Fan_2_Speed);
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <FEB_Fan_2_Speed_Set+0x28>)
 8001836:	781a      	ldrb	r2, [r3, #0]
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <FEB_Fan_2_Speed_Set+0x2c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20002637 	.word	0x20002637
 8001850:	200029f4 	.word	0x200029f4

08001854 <FEB_Fan_3_Speed_Set>:

void FEB_Fan_3_Speed_Set(uint8_t speed) {
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
	FEB_Fan_3_Speed = speed;
 800185e:	4a07      	ldr	r2, [pc, #28]	; (800187c <FEB_Fan_3_Speed_Set+0x28>)
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, FEB_Fan_3_Speed);
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <FEB_Fan_3_Speed_Set+0x28>)
 8001866:	781a      	ldrb	r2, [r3, #0]
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <FEB_Fan_3_Speed_Set+0x2c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20002638 	.word	0x20002638
 8001880:	20002a3c 	.word	0x20002a3c

08001884 <FEB_Fan_4_Speed_Set>:

void FEB_Fan_4_Speed_Set(uint8_t speed) {
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
	FEB_Fan_4_Speed = speed;
 800188e:	4a07      	ldr	r2, [pc, #28]	; (80018ac <FEB_Fan_4_Speed_Set+0x28>)
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, FEB_Fan_4_Speed);
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <FEB_Fan_4_Speed_Set+0x28>)
 8001896:	781a      	ldrb	r2, [r3, #0]
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <FEB_Fan_4_Speed_Set+0x2c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20002639 	.word	0x20002639
 80018b0:	20002a3c 	.word	0x20002a3c

080018b4 <FEB_Fan_Reset_Shift_Register>:

// ********************************** Shift Register Control **********************************

void FEB_Fan_Reset_Shift_Register(void) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018be:	4807      	ldr	r0, [pc, #28]	; (80018dc <FEB_Fan_Reset_Shift_Register+0x28>)
 80018c0:	f004 ffcc 	bl	800685c <HAL_GPIO_WritePin>
	FEB_Timer_Delay_Micro(10);
 80018c4:	200a      	movs	r0, #10
 80018c6:	f001 f843 	bl	8002950 <FEB_Timer_Delay_Micro>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80018ca:	2201      	movs	r2, #1
 80018cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <FEB_Fan_Reset_Shift_Register+0x28>)
 80018d2:	f004 ffc3 	bl	800685c <HAL_GPIO_WritePin>
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40020800 	.word	0x40020800

080018e0 <FEB_Fan_Serial_High>:

void FEB_Fan_Serial_High(void) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80018e4:	2201      	movs	r2, #1
 80018e6:	2104      	movs	r1, #4
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <FEB_Fan_Serial_High+0x14>)
 80018ea:	f004 ffb7 	bl	800685c <HAL_GPIO_WritePin>
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40020400 	.word	0x40020400

080018f8 <FEB_Fan_Serial_Low>:

void FEB_Fan_Serial_Low(void) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2104      	movs	r1, #4
 8001900:	4802      	ldr	r0, [pc, #8]	; (800190c <FEB_Fan_Serial_Low+0x14>)
 8001902:	f004 ffab 	bl	800685c <HAL_GPIO_WritePin>
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40020400 	.word	0x40020400

08001910 <FEB_Fan_Clock_High>:

void FEB_Fan_Clock_High(void) {
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001914:	2201      	movs	r2, #1
 8001916:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800191a:	4802      	ldr	r0, [pc, #8]	; (8001924 <FEB_Fan_Clock_High+0x14>)
 800191c:	f004 ff9e 	bl	800685c <HAL_GPIO_WritePin>
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40020400 	.word	0x40020400

08001928 <FEB_Fan_Clock_Low>:

void FEB_Fan_Clock_Low(void) {
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800192c:	2200      	movs	r2, #0
 800192e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001932:	4802      	ldr	r0, [pc, #8]	; (800193c <FEB_Fan_Clock_Low+0x14>)
 8001934:	f004 ff92 	bl	800685c <HAL_GPIO_WritePin>
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40020400 	.word	0x40020400

08001940 <FEB_Fan_Clock_Pulse>:

void FEB_Fan_Clock_Pulse(void) {
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
	FEB_Fan_Clock_High();
 8001944:	f7ff ffe4 	bl	8001910 <FEB_Fan_Clock_High>
	FEB_Timer_Delay_Micro(10);
 8001948:	200a      	movs	r0, #10
 800194a:	f001 f801 	bl	8002950 <FEB_Timer_Delay_Micro>
	FEB_Fan_Clock_Low();
 800194e:	f7ff ffeb 	bl	8001928 <FEB_Fan_Clock_Low>
	FEB_Timer_Delay_Micro(10);
 8001952:	200a      	movs	r0, #10
 8001954:	f000 fffc 	bl	8002950 <FEB_Timer_Delay_Micro>
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}

0800195c <FEB_Fan_Process>:

// ********************************** Tachometer **********************************

void FEB_Fan_Process(void) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
	for (uint8_t tach = 0; tach < 12; tach++) {
 8001962:	2300      	movs	r3, #0
 8001964:	71fb      	strb	r3, [r7, #7]
 8001966:	e02a      	b.n	80019be <FEB_Fan_Process+0x62>
		uint8_t multiplex = tach < 6 ? 0 : 1;
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	2b05      	cmp	r3, #5
 800196c:	bf8c      	ite	hi
 800196e:	2301      	movhi	r3, #1
 8001970:	2300      	movls	r3, #0
 8001972:	b2db      	uxtb	r3, r3
 8001974:	71bb      	strb	r3, [r7, #6]
		uint8_t tach_pin = tach < 6 ? tach : (tach - 6) << 3;
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	2b05      	cmp	r3, #5
 800197a:	d905      	bls.n	8001988 <FEB_Fan_Process+0x2c>
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	3b06      	subs	r3, #6
 8001980:	b2db      	uxtb	r3, r3
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	e000      	b.n	800198a <FEB_Fan_Process+0x2e>
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	717b      	strb	r3, [r7, #5]
		uint8_t fan_bank = (tach / 3) + 1;
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	4a10      	ldr	r2, [pc, #64]	; (80019d0 <FEB_Fan_Process+0x74>)
 8001990:	fba2 2303 	umull	r2, r3, r2, r3
 8001994:	085b      	lsrs	r3, r3, #1
 8001996:	b2db      	uxtb	r3, r3
 8001998:	3301      	adds	r3, #1
 800199a:	713b      	strb	r3, [r7, #4]
		FEB_Fan_Set_Tachometer(tach_pin);
 800199c:	797b      	ldrb	r3, [r7, #5]
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 f818 	bl	80019d4 <FEB_Fan_Set_Tachometer>
		uint32_t adc_value = FEB_Fan_Read_Tachometer(multiplex);
 80019a4:	79bb      	ldrb	r3, [r7, #6]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f836 	bl	8001a18 <FEB_Fan_Read_Tachometer>
 80019ac:	6038      	str	r0, [r7, #0]
		FEB_Fan_Validate_Speed(adc_value, fan_bank);
 80019ae:	793b      	ldrb	r3, [r7, #4]
 80019b0:	4619      	mov	r1, r3
 80019b2:	6838      	ldr	r0, [r7, #0]
 80019b4:	f000 f850 	bl	8001a58 <FEB_Fan_Validate_Speed>
	for (uint8_t tach = 0; tach < 12; tach++) {
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	3301      	adds	r3, #1
 80019bc:	71fb      	strb	r3, [r7, #7]
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	2b0b      	cmp	r3, #11
 80019c2:	d9d1      	bls.n	8001968 <FEB_Fan_Process+0xc>
	}
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	aaaaaaab 	.word	0xaaaaaaab

080019d4 <FEB_Fan_Set_Tachometer>:

void FEB_Fan_Set_Tachometer(uint8_t value) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++) {
 80019de:	2300      	movs	r3, #0
 80019e0:	73fb      	strb	r3, [r7, #15]
 80019e2:	e011      	b.n	8001a08 <FEB_Fan_Set_Tachometer+0x34>
		// Set multiplex
		if (((value << i) & 0b1) == 1) {
 80019e4:	79fa      	ldrb	r2, [r7, #7]
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d002      	beq.n	80019fa <FEB_Fan_Set_Tachometer+0x26>
			FEB_Fan_Serial_High();
 80019f4:	f7ff ff74 	bl	80018e0 <FEB_Fan_Serial_High>
 80019f8:	e001      	b.n	80019fe <FEB_Fan_Set_Tachometer+0x2a>
		} else {
			FEB_Fan_Serial_Low();
 80019fa:	f7ff ff7d 	bl	80018f8 <FEB_Fan_Serial_Low>
		}
		FEB_Fan_Clock_Pulse();
 80019fe:	f7ff ff9f 	bl	8001940 <FEB_Fan_Clock_Pulse>
	for (uint8_t i = 0; i < 8; i++) {
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	3301      	adds	r3, #1
 8001a06:	73fb      	strb	r3, [r7, #15]
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	2b07      	cmp	r3, #7
 8001a0c:	d9ea      	bls.n	80019e4 <FEB_Fan_Set_Tachometer+0x10>
	}
}
 8001a0e:	bf00      	nop
 8001a10:	bf00      	nop
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <FEB_Fan_Read_Tachometer>:

uint32_t FEB_Fan_Read_Tachometer(uint8_t multiplex) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71fb      	strb	r3, [r7, #7]
	ADC_HandleTypeDef* hadc_pointer;
	if (multiplex == 0) {
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d102      	bne.n	8001a2e <FEB_Fan_Read_Tachometer+0x16>
		hadc_pointer = &hadc1;
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <FEB_Fan_Read_Tachometer+0x38>)
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	e004      	b.n	8001a38 <FEB_Fan_Read_Tachometer+0x20>
	} else if (multiplex == 1) {
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d101      	bne.n	8001a38 <FEB_Fan_Read_Tachometer+0x20>
		hadc_pointer = &hadc2;
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <FEB_Fan_Read_Tachometer+0x3c>)
 8001a36:	60fb      	str	r3, [r7, #12]
	}
	HAL_ADC_PollForConversion(hadc_pointer, 10);
 8001a38:	210a      	movs	r1, #10
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f003 fc1a 	bl	8005274 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(hadc_pointer);
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f003 fca2 	bl	800538a <HAL_ADC_GetValue>
 8001a46:	4603      	mov	r3, r0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	200028bc 	.word	0x200028bc
 8001a54:	20002904 	.word	0x20002904

08001a58 <FEB_Fan_Validate_Speed>:

void FEB_Fan_Validate_Speed(uint32_t adc_value, uint8_t fan_bank) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	70fb      	strb	r3, [r7, #3]
	if (adc_value < FEB_FAN_ADC_VALUE_LIMIT) {
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b63      	cmp	r3, #99	; 0x63
 8001a68:	d81e      	bhi.n	8001aa8 <FEB_Fan_Validate_Speed+0x50>
		switch (fan_bank) {
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	d81b      	bhi.n	8001aaa <FEB_Fan_Validate_Speed+0x52>
 8001a72:	a201      	add	r2, pc, #4	; (adr r2, 8001a78 <FEB_Fan_Validate_Speed+0x20>)
 8001a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a78:	08001a89 	.word	0x08001a89
 8001a7c:	08001a91 	.word	0x08001a91
 8001a80:	08001a99 	.word	0x08001a99
 8001a84:	08001aa1 	.word	0x08001aa1
			case 1:
				FEB_Fan_1_Speed_Set(0);
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f7ff feb3 	bl	80017f4 <FEB_Fan_1_Speed_Set>
				break;
 8001a8e:	e00c      	b.n	8001aaa <FEB_Fan_Validate_Speed+0x52>
			case 2:
				FEB_Fan_2_Speed_Set(0);
 8001a90:	2000      	movs	r0, #0
 8001a92:	f7ff fec7 	bl	8001824 <FEB_Fan_2_Speed_Set>
				break;
 8001a96:	e008      	b.n	8001aaa <FEB_Fan_Validate_Speed+0x52>
			case 3:
				FEB_Fan_3_Speed_Set(0);
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f7ff fedb 	bl	8001854 <FEB_Fan_3_Speed_Set>
				break;
 8001a9e:	e004      	b.n	8001aaa <FEB_Fan_Validate_Speed+0x52>
			case 4:
				FEB_Fan_4_Speed_Set(0);
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f7ff feef 	bl	8001884 <FEB_Fan_4_Speed_Set>
				break;
 8001aa6:	e000      	b.n	8001aaa <FEB_Fan_Validate_Speed+0x52>
		}
	}
 8001aa8:	bf00      	nop
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop

08001ab4 <FEB_LTC6811_Init>:
// Set accumulator
static Accumulator accumulator;

// ********************************** Functions **********************************

void FEB_LTC6811_Init(void) {
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af06      	add	r7, sp, #24
	FEB_LTC6811_Config_Cell_Discharge();
 8001aba:	f000 f83f 	bl	8001b3c <FEB_LTC6811_Config_Cell_Discharge>

	LTC6811_init_cfg(NUM_IC, accumulator.IC_config);
 8001abe:	4917      	ldr	r1, [pc, #92]	; (8001b1c <FEB_LTC6811_Init+0x68>)
 8001ac0:	2002      	movs	r0, #2
 8001ac2:	f001 f823 	bl	8002b0c <LTC6811_init_cfg>
	for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	71fb      	strb	r3, [r7, #7]
 8001aca:	e018      	b.n	8001afe <FEB_LTC6811_Init+0x4a>
		LTC6811_set_cfgr(current_ic, accumulator.IC_config, REFON, ADCOPT, GPIOBITS_A, DCCBITS_A, DCTOBITS, UV, OV);
 8001acc:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <FEB_LTC6811_Init+0x6c>)
 8001ace:	7819      	ldrb	r1, [r3, #0]
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <FEB_LTC6811_Init+0x70>)
 8001ad2:	781c      	ldrb	r4, [r3, #0]
 8001ad4:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <FEB_LTC6811_Init+0x74>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	4a14      	ldr	r2, [pc, #80]	; (8001b2c <FEB_LTC6811_Init+0x78>)
 8001ada:	8812      	ldrh	r2, [r2, #0]
 8001adc:	79f8      	ldrb	r0, [r7, #7]
 8001ade:	9204      	str	r2, [sp, #16]
 8001ae0:	9303      	str	r3, [sp, #12]
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <FEB_LTC6811_Init+0x7c>)
 8001ae4:	9302      	str	r3, [sp, #8]
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <FEB_LTC6811_Init+0x80>)
 8001ae8:	9301      	str	r3, [sp, #4]
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <FEB_LTC6811_Init+0x84>)
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	4623      	mov	r3, r4
 8001af0:	460a      	mov	r2, r1
 8001af2:	490a      	ldr	r1, [pc, #40]	; (8001b1c <FEB_LTC6811_Init+0x68>)
 8001af4:	f001 f819 	bl	8002b2a <LTC6811_set_cfgr>
	for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	3301      	adds	r3, #1
 8001afc:	71fb      	strb	r3, [r7, #7]
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d9e3      	bls.n	8001acc <FEB_LTC6811_Init+0x18>
	}
	LTC6811_reset_crc_count(NUM_IC, accumulator.IC_config);
 8001b04:	4905      	ldr	r1, [pc, #20]	; (8001b1c <FEB_LTC6811_Init+0x68>)
 8001b06:	2002      	movs	r0, #2
 8001b08:	f000 fff1 	bl	8002aee <LTC6811_reset_crc_count>
	LTC6811_init_reg_limits(NUM_IC, accumulator.IC_config);
 8001b0c:	4903      	ldr	r1, [pc, #12]	; (8001b1c <FEB_LTC6811_Init+0x68>)
 8001b0e:	2002      	movs	r0, #2
 8001b10:	f000 ff38 	bl	8002984 <LTC6811_init_reg_limits>
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd90      	pop	{r4, r7, pc}
 8001b1c:	20002664 	.word	0x20002664
 8001b20:	20000035 	.word	0x20000035
 8001b24:	20002654 	.word	0x20002654
 8001b28:	2000003e 	.word	0x2000003e
 8001b2c:	20000040 	.word	0x20000040
 8001b30:	20000044 	.word	0x20000044
 8001b34:	20002658 	.word	0x20002658
 8001b38:	20000038 	.word	0x20000038

08001b3c <FEB_LTC6811_Config_Cell_Discharge>:

void FEB_LTC6811_Config_Cell_Discharge(void) {
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NUM_IC; i++) {
 8001b42:	2300      	movs	r3, #0
 8001b44:	71fb      	strb	r3, [r7, #7]
 8001b46:	e016      	b.n	8001b76 <FEB_LTC6811_Config_Cell_Discharge+0x3a>
		for (uint8_t j = 0; j < FEB_LTC6811_NUM_CELLS_PER_DAUGHTER_BOARD; j++) {
 8001b48:	2300      	movs	r3, #0
 8001b4a:	71bb      	strb	r3, [r7, #6]
 8001b4c:	e00d      	b.n	8001b6a <FEB_LTC6811_Config_Cell_Discharge+0x2e>
			FEB_LTC6811_Cell_Discharge[i][j] = 0;
 8001b4e:	79fa      	ldrb	r2, [r7, #7]
 8001b50:	79b9      	ldrb	r1, [r7, #6]
 8001b52:	480e      	ldr	r0, [pc, #56]	; (8001b8c <FEB_LTC6811_Config_Cell_Discharge+0x50>)
 8001b54:	4613      	mov	r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	4413      	add	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4403      	add	r3, r0
 8001b5e:	440b      	add	r3, r1
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < FEB_LTC6811_NUM_CELLS_PER_DAUGHTER_BOARD; j++) {
 8001b64:	79bb      	ldrb	r3, [r7, #6]
 8001b66:	3301      	adds	r3, #1
 8001b68:	71bb      	strb	r3, [r7, #6]
 8001b6a:	79bb      	ldrb	r3, [r7, #6]
 8001b6c:	2b0b      	cmp	r3, #11
 8001b6e:	d9ee      	bls.n	8001b4e <FEB_LTC6811_Config_Cell_Discharge+0x12>
	for (uint8_t i = 0; i < NUM_IC; i++) {
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	3301      	adds	r3, #1
 8001b74:	71fb      	strb	r3, [r7, #7]
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d9e5      	bls.n	8001b48 <FEB_LTC6811_Config_Cell_Discharge+0xc>
		}
	}
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	2000263c 	.word	0x2000263c

08001b90 <FEB_LTC6811_Poll_Voltage>:

// ******************** Read Voltage ********************

void FEB_LTC6811_Poll_Voltage(void) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
	FEB_LTC6811_Start_Cell_ADC_Measurement();
 8001b94:	f000 f806 	bl	8001ba4 <FEB_LTC6811_Start_Cell_ADC_Measurement>
	FEB_LTC6811_Read_Cell_Voltage_Registers();
 8001b98:	f000 f812 	bl	8001bc0 <FEB_LTC6811_Read_Cell_Voltage_Registers>
	FEB_LTC6811_Store_Voltage();
 8001b9c:	f000 f81e 	bl	8001bdc <FEB_LTC6811_Store_Voltage>
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <FEB_LTC6811_Start_Cell_ADC_Measurement>:

void FEB_LTC6811_Start_Cell_ADC_Measurement(void) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 8001ba8:	2002      	movs	r0, #2
 8001baa:	f000 fffc 	bl	8002ba6 <wakeup_sleep>
	LTC6811_adcv(ADC_CONVERSION_MODE, ADC_DCP, CELL_CH_TO_CONVERT);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	2002      	movs	r0, #2
 8001bb4:	f000 ff42 	bl	8002a3c <LTC6811_adcv>
	LTC6811_pollAdc();
 8001bb8:	f000 ff92 	bl	8002ae0 <LTC6811_pollAdc>
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <FEB_LTC6811_Read_Cell_Voltage_Registers>:

void FEB_LTC6811_Read_Cell_Voltage_Registers(void) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 8001bc4:	2002      	movs	r0, #2
 8001bc6:	f000 ffee 	bl	8002ba6 <wakeup_sleep>
	LTC6811_rdcv(SEL_ALL_REG, NUM_IC, accumulator.IC_config);
 8001bca:	4a03      	ldr	r2, [pc, #12]	; (8001bd8 <FEB_LTC6811_Read_Cell_Voltage_Registers+0x18>)
 8001bcc:	2102      	movs	r1, #2
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f000 ff59 	bl	8002a86 <LTC6811_rdcv>
}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20002664 	.word	0x20002664

08001bdc <FEB_LTC6811_Store_Voltage>:

void FEB_LTC6811_Store_Voltage(void) {
 8001bdc:	b5b0      	push	{r4, r5, r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
    for (uint16_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8001be2:	2300      	movs	r3, #0
 8001be4:	80fb      	strh	r3, [r7, #6]
 8001be6:	e037      	b.n	8001c58 <FEB_LTC6811_Store_Voltage+0x7c>
    	for (uint8_t cell = 0; cell < FEB_LTC6811_NUM_CELLS_PER_BANK; cell++) {
 8001be8:	2300      	movs	r3, #0
 8001bea:	717b      	strb	r3, [r7, #5]
 8001bec:	e02e      	b.n	8001c4c <FEB_LTC6811_Store_Voltage+0x70>
    		uint8_t ic = FEB_LTC6811_Get_IC(bank_idx, cell);
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	797a      	ldrb	r2, [r7, #5]
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 f864 	bl	8001cc4 <FEB_LTC6811_Get_IC>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	713b      	strb	r3, [r7, #4]
    		uint8_t cell_idx = FEB_LTC6811_Cell_Idx(cell);
 8001c00:	797b      	ldrb	r3, [r7, #5]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 f878 	bl	8001cf8 <FEB_LTC6811_Cell_Idx>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	70fb      	strb	r3, [r7, #3]
    		accumulator.banks[bank_idx].cells[cell].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[ic].cells.c_codes[cell_idx]);
 8001c0c:	793a      	ldrb	r2, [r7, #4]
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	4915      	ldr	r1, [pc, #84]	; (8001c68 <FEB_LTC6811_Store_Voltage+0x8c>)
 8001c12:	2074      	movs	r0, #116	; 0x74
 8001c14:	fb00 f202 	mul.w	r2, r0, r2
 8001c18:	4413      	add	r3, r2
 8001c1a:	330c      	adds	r3, #12
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	440b      	add	r3, r1
 8001c20:	88db      	ldrh	r3, [r3, #6]
 8001c22:	88fc      	ldrh	r4, [r7, #6]
 8001c24:	797d      	ldrb	r5, [r7, #5]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f822 	bl	8001c70 <FEB_LTC6811_Convert_Voltage>
 8001c2c:	eef0 7a40 	vmov.f32	s15, s0
 8001c30:	4a0d      	ldr	r2, [pc, #52]	; (8001c68 <FEB_LTC6811_Store_Voltage+0x8c>)
 8001c32:	4623      	mov	r3, r4
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	4423      	add	r3, r4
 8001c38:	442b      	add	r3, r5
 8001c3a:	333a      	adds	r3, #58	; 0x3a
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	4413      	add	r3, r2
 8001c40:	3304      	adds	r3, #4
 8001c42:	edc3 7a00 	vstr	s15, [r3]
    	for (uint8_t cell = 0; cell < FEB_LTC6811_NUM_CELLS_PER_BANK; cell++) {
 8001c46:	797b      	ldrb	r3, [r7, #5]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	717b      	strb	r3, [r7, #5]
 8001c4c:	797b      	ldrb	r3, [r7, #5]
 8001c4e:	2b10      	cmp	r3, #16
 8001c50:	d9cd      	bls.n	8001bee <FEB_LTC6811_Store_Voltage+0x12>
    for (uint16_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	3301      	adds	r3, #1
 8001c56:	80fb      	strh	r3, [r7, #6]
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0c4      	beq.n	8001be8 <FEB_LTC6811_Store_Voltage+0xc>
    	}
    }
}
 8001c5e:	bf00      	nop
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bdb0      	pop	{r4, r5, r7, pc}
 8001c68:	20002664 	.word	0x20002664
 8001c6c:	00000000 	.word	0x00000000

08001c70 <FEB_LTC6811_Convert_Voltage>:

/*
 * @param value := Voltage (100uV) from LTC6811
 */
float FEB_LTC6811_Convert_Voltage(uint16_t value) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	80fb      	strh	r3, [r7, #6]
	// Check for error: value = 2^16 - 1
	if (value == 65535) {
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d101      	bne.n	8001c88 <FEB_LTC6811_Convert_Voltage+0x18>
		return -42;
 8001c84:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <FEB_LTC6811_Convert_Voltage+0x50>)
 8001c86:	e00f      	b.n	8001ca8 <FEB_LTC6811_Convert_Voltage+0x38>
	}
	return value * 0.0001;
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fc6a 	bl	8000564 <__aeabi_i2d>
 8001c90:	a309      	add	r3, pc, #36	; (adr r3, 8001cb8 <FEB_LTC6811_Convert_Voltage+0x48>)
 8001c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c96:	f7fe fccf 	bl	8000638 <__aeabi_dmul>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f7fe ffc1 	bl	8000c28 <__aeabi_d2f>
 8001ca6:	4603      	mov	r3, r0
}
 8001ca8:	ee07 3a90 	vmov	s15, r3
 8001cac:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	eb1c432d 	.word	0xeb1c432d
 8001cbc:	3f1a36e2 	.word	0x3f1a36e2
 8001cc0:	c2280000 	.word	0xc2280000

08001cc4 <FEB_LTC6811_Get_IC>:

// ******************** Voltage Cell Balance ********************

uint8_t FEB_LTC6811_Get_IC(uint8_t bank, uint8_t cell) {
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	460a      	mov	r2, r1
 8001cce:	71fb      	strb	r3, [r7, #7]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	71bb      	strb	r3, [r7, #6]
	if (cell < 9) {
 8001cd4:	79bb      	ldrb	r3, [r7, #6]
 8001cd6:	2b08      	cmp	r3, #8
 8001cd8:	d805      	bhi.n	8001ce6 <FEB_LTC6811_Get_IC+0x22>
		return bank * 2 + 1;
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	e002      	b.n	8001cec <FEB_LTC6811_Get_IC+0x28>
	} else {
		return bank * 2;
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	b2db      	uxtb	r3, r3
	}
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <FEB_LTC6811_Cell_Idx>:

uint8_t FEB_LTC6811_Cell_Idx(uint8_t cell) {
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
	return FEB_LTC6811_Cell_Idx_Map[cell];
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	4a03      	ldr	r2, [pc, #12]	; (8001d14 <FEB_LTC6811_Cell_Idx+0x1c>)
 8001d06:	5cd3      	ldrb	r3, [r2, r3]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	20000024 	.word	0x20000024

08001d18 <FEB_LTC6811_Balance_Cells>:
	// Set target voltage
	FEB_LTC6811_Target_Voltage = lowest_voltage;
	FEB_LTC6811_Target_Voltage_Set = 1;
}

void FEB_LTC6811_Balance_Cells(void) {
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
	if (FEB_LTC6811_BALANCE_STATE == 0 || FEB_LTC6811_Cells_Balanced == 1) {
		return;
 8001d1c:	bf00      	nop
	if (cells_balanced == 1) {
		FEB_LTC6811_Cells_Balanced = 1;
		FEB_LTC6811_Clear_Balance_Cells();
	}

}
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
	...

08001d28 <FEB_LTC6811_Configure_DCCBITS_A>:

void FEB_LTC6811_Clear_Balance_Cell(uint8_t bank, uint8_t cell) {
	FEB_LTC6811_Cell_Discharge[FEB_LTC6811_Get_IC(bank, cell)][FEB_LTC6811_Cell_Idx(cell)] = 0;
}

void FEB_LTC6811_Configure_DCCBITS_A(uint8_t ic) {
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < FEB_LTC6811_NUM_CELLS_PER_DAUGHTER_BOARD; i++) {
 8001d32:	2300      	movs	r3, #0
 8001d34:	73fb      	strb	r3, [r7, #15]
 8001d36:	e014      	b.n	8001d62 <FEB_LTC6811_Configure_DCCBITS_A+0x3a>
		DCCBITS_A[i] = FEB_LTC6811_Cell_Discharge[ic][i];
 8001d38:	79fa      	ldrb	r2, [r7, #7]
 8001d3a:	7bf9      	ldrb	r1, [r7, #15]
 8001d3c:	480e      	ldr	r0, [pc, #56]	; (8001d78 <FEB_LTC6811_Configure_DCCBITS_A+0x50>)
 8001d3e:	4613      	mov	r3, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4413      	add	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4403      	add	r3, r0
 8001d48:	440b      	add	r3, r1
 8001d4a:	781a      	ldrb	r2, [r3, #0]
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
 8001d4e:	2a00      	cmp	r2, #0
 8001d50:	bf14      	ite	ne
 8001d52:	2201      	movne	r2, #1
 8001d54:	2200      	moveq	r2, #0
 8001d56:	b2d1      	uxtb	r1, r2
 8001d58:	4a08      	ldr	r2, [pc, #32]	; (8001d7c <FEB_LTC6811_Configure_DCCBITS_A+0x54>)
 8001d5a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < FEB_LTC6811_NUM_CELLS_PER_DAUGHTER_BOARD; i++) {
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	73fb      	strb	r3, [r7, #15]
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	2b0b      	cmp	r3, #11
 8001d66:	d9e7      	bls.n	8001d38 <FEB_LTC6811_Configure_DCCBITS_A+0x10>
	}
}
 8001d68:	bf00      	nop
 8001d6a:	bf00      	nop
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	2000263c 	.word	0x2000263c
 8001d7c:	20002658 	.word	0x20002658

08001d80 <FEB_LTC6811_UART_Transmit_Discharge>:

void FEB_LTC6811_UART_Transmit_Discharge(void) {
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	f2ad 5d0c 	subw	sp, sp, #1292	; 0x50c
 8001d86:	af00      	add	r7, sp, #0
	char UART_str[1024];
	char temp_str[256];

	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 8001d8e:	e067      	b.n	8001e60 <FEB_LTC6811_UART_Transmit_Discharge+0xe0>
		// Add bank_idx, cell_idx to {@code UART_Str}
		sprintf(UART_str, "%d", (bank_idx << FEB_LTC6811_UART_BITS_PER_MESSAGE) + FEB_LTC6811_UART_DISCHARGE_ID);
 8001d90:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	1c9a      	adds	r2, r3, #2
 8001d98:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d9c:	4935      	ldr	r1, [pc, #212]	; (8001e74 <FEB_LTC6811_UART_Transmit_Discharge+0xf4>)
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f008 f9a6 	bl	800a0f0 <siprintf>


		// Add values to {@code UART_Str}
		for (uint16_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8001da4:	2300      	movs	r3, #0
 8001da6:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8001daa:	e033      	b.n	8001e14 <FEB_LTC6811_UART_Transmit_Discharge+0x94>
			uint8_t state = FEB_LTC6811_Cell_Discharge[FEB_LTC6811_Get_IC(bank_idx, cell_idx)][FEB_LTC6811_Cell_Idx(cell_idx)];
 8001dac:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff83 	bl	8001cc4 <FEB_LTC6811_Get_IC>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461c      	mov	r4, r3
 8001dc2:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff95 	bl	8001cf8 <FEB_LTC6811_Cell_Idx>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4a29      	ldr	r2, [pc, #164]	; (8001e78 <FEB_LTC6811_UART_Transmit_Discharge+0xf8>)
 8001dd4:	4623      	mov	r3, r4
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4423      	add	r3, r4
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	440b      	add	r3, r1
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	f887 3503 	strb.w	r3, [r7, #1283]	; 0x503
			sprintf(temp_str, " %d", state);
 8001de6:	f897 2503 	ldrb.w	r2, [r7, #1283]	; 0x503
 8001dea:	463b      	mov	r3, r7
 8001dec:	4923      	ldr	r1, [pc, #140]	; (8001e7c <FEB_LTC6811_UART_Transmit_Discharge+0xfc>)
 8001dee:	4618      	mov	r0, r3
 8001df0:	f008 f97e 	bl	800a0f0 <siprintf>
			strncat(UART_str, temp_str, strlen(temp_str));
 8001df4:	463b      	mov	r3, r7
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fa0a 	bl	8000210 <strlen>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	4639      	mov	r1, r7
 8001e00:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e04:	4618      	mov	r0, r3
 8001e06:	f008 f993 	bl	800a130 <strncat>
		for (uint16_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8001e0a:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001e0e:	3301      	adds	r3, #1
 8001e10:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8001e14:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001e18:	2b10      	cmp	r3, #16
 8001e1a:	d9c7      	bls.n	8001dac <FEB_LTC6811_UART_Transmit_Discharge+0x2c>
		}

		// Add '\n' to {@code UART_Str}
		sprintf(temp_str, "\n");
 8001e1c:	463b      	mov	r3, r7
 8001e1e:	4918      	ldr	r1, [pc, #96]	; (8001e80 <FEB_LTC6811_UART_Transmit_Discharge+0x100>)
 8001e20:	4618      	mov	r0, r3
 8001e22:	f008 f965 	bl	800a0f0 <siprintf>
		strncat(UART_str, temp_str, strlen(temp_str));
 8001e26:	463b      	mov	r3, r7
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe f9f1 	bl	8000210 <strlen>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	4639      	mov	r1, r7
 8001e32:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e36:	4618      	mov	r0, r3
 8001e38:	f008 f97a 	bl	800a130 <strncat>

		HAL_UART_Transmit(&huart2, (uint8_t*) UART_str, strlen(UART_str), 100);
 8001e3c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe f9e5 	bl	8000210 <strlen>
 8001e46:	4603      	mov	r3, r0
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8001e4e:	2364      	movs	r3, #100	; 0x64
 8001e50:	480c      	ldr	r0, [pc, #48]	; (8001e84 <FEB_LTC6811_UART_Transmit_Discharge+0x104>)
 8001e52:	f007 f83c 	bl	8008ece <HAL_UART_Transmit>
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8001e56:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 8001e60:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d093      	beq.n	8001d90 <FEB_LTC6811_UART_Transmit_Discharge+0x10>
	}
}
 8001e68:	bf00      	nop
 8001e6a:	bf00      	nop
 8001e6c:	f207 570c 	addw	r7, r7, #1292	; 0x50c
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd90      	pop	{r4, r7, pc}
 8001e74:	0800c5dc 	.word	0x0800c5dc
 8001e78:	2000263c 	.word	0x2000263c
 8001e7c:	0800c5e0 	.word	0x0800c5e0
 8001e80:	0800c5e4 	.word	0x0800c5e4
 8001e84:	20002acc 	.word	0x20002acc

08001e88 <FEB_LTC6811_Validate_Voltage>:

// ******************** Voltage Interface ********************

void FEB_LTC6811_Validate_Voltage(void) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8001e8e:	2300      	movs	r3, #0
 8001e90:	71fb      	strb	r3, [r7, #7]
 8001e92:	e031      	b.n	8001ef8 <FEB_LTC6811_Validate_Voltage+0x70>
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8001e94:	2300      	movs	r3, #0
 8001e96:	71bb      	strb	r3, [r7, #6]
 8001e98:	e028      	b.n	8001eec <FEB_LTC6811_Validate_Voltage+0x64>
			float voltage = accumulator.banks[bank_idx].cells[cell_idx].voltage;
 8001e9a:	79fa      	ldrb	r2, [r7, #7]
 8001e9c:	79b9      	ldrb	r1, [r7, #6]
 8001e9e:	481a      	ldr	r0, [pc, #104]	; (8001f08 <FEB_LTC6811_Validate_Voltage+0x80>)
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	011b      	lsls	r3, r3, #4
 8001ea4:	4413      	add	r3, r2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	333a      	adds	r3, #58	; 0x3a
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4403      	add	r3, r0
 8001eae:	3304      	adds	r3, #4
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	603b      	str	r3, [r7, #0]
			if (voltage < FEB_LTC6811_CELL_MIN_VOLTAGE) {
 8001eb4:	edd7 7a00 	vldr	s15, [r7]
 8001eb8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001ebc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec4:	d503      	bpl.n	8001ece <FEB_LTC6811_Validate_Voltage+0x46>
				FEB_BMS_Shutdown_Initiate("Module under voltage");
 8001ec6:	4811      	ldr	r0, [pc, #68]	; (8001f0c <FEB_LTC6811_Validate_Voltage+0x84>)
 8001ec8:	f7ff f8a4 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
 8001ecc:	e00b      	b.n	8001ee6 <FEB_LTC6811_Validate_Voltage+0x5e>
			} else if (voltage > FEB_LTC6811_CELL_MAX_VOLTAGE) {
 8001ece:	edd7 7a00 	vldr	s15, [r7]
 8001ed2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001ed6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ede:	dd02      	ble.n	8001ee6 <FEB_LTC6811_Validate_Voltage+0x5e>
				FEB_BMS_Shutdown_Initiate("Module over voltage");
 8001ee0:	480b      	ldr	r0, [pc, #44]	; (8001f10 <FEB_LTC6811_Validate_Voltage+0x88>)
 8001ee2:	f7ff f897 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8001ee6:	79bb      	ldrb	r3, [r7, #6]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	71bb      	strb	r3, [r7, #6]
 8001eec:	79bb      	ldrb	r3, [r7, #6]
 8001eee:	2b10      	cmp	r3, #16
 8001ef0:	d9d3      	bls.n	8001e9a <FEB_LTC6811_Validate_Voltage+0x12>
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	71fb      	strb	r3, [r7, #7]
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0ca      	beq.n	8001e94 <FEB_LTC6811_Validate_Voltage+0xc>
			}
		}
	}
}
 8001efe:	bf00      	nop
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20002664 	.word	0x20002664
 8001f0c:	0800c5e8 	.word	0x0800c5e8
 8001f10:	0800c600 	.word	0x0800c600

08001f14 <FEB_LTC6811_UART_Transmit_Voltage>:

void FEB_LTC6811_UART_Transmit_Voltage() {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	f5ad 6da1 	sub.w	sp, sp, #1288	; 0x508
 8001f1a:	af00      	add	r7, sp, #0
	char UART_str[1024];
	char temp_str[256];

	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 8001f22:	e05e      	b.n	8001fe2 <FEB_LTC6811_UART_Transmit_Voltage+0xce>
		// Add bank_idx, cell_idx to {@code UART_Str}
		sprintf(UART_str, "%d", (bank_idx << FEB_LTC6811_UART_BITS_PER_MESSAGE) + FEB_LTC6811_UART_VOLTAGE_ID);
 8001f24:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001f28:	00da      	lsls	r2, r3, #3
 8001f2a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001f2e:	4932      	ldr	r1, [pc, #200]	; (8001ff8 <FEB_LTC6811_UART_Transmit_Voltage+0xe4>)
 8001f30:	4618      	mov	r0, r3
 8001f32:	f008 f8dd 	bl	800a0f0 <siprintf>


		// Add values to {@code UART_Str}
		for (uint16_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8001f36:	2300      	movs	r3, #0
 8001f38:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8001f3c:	e02b      	b.n	8001f96 <FEB_LTC6811_UART_Transmit_Voltage+0x82>
			float voltage = accumulator.banks[bank_idx].cells[cell_idx].voltage;
 8001f3e:	f897 2507 	ldrb.w	r2, [r7, #1287]	; 0x507
 8001f42:	f8b7 1504 	ldrh.w	r1, [r7, #1284]	; 0x504
 8001f46:	482d      	ldr	r0, [pc, #180]	; (8001ffc <FEB_LTC6811_UART_Transmit_Voltage+0xe8>)
 8001f48:	4613      	mov	r3, r2
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	4413      	add	r3, r2
 8001f4e:	440b      	add	r3, r1
 8001f50:	333a      	adds	r3, #58	; 0x3a
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4403      	add	r3, r0
 8001f56:	3304      	adds	r3, #4
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 8001f5e:	6013      	str	r3, [r2, #0]

			sprintf(temp_str, " %f", voltage);
 8001f60:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8001f64:	6818      	ldr	r0, [r3, #0]
 8001f66:	f7fe fb0f 	bl	8000588 <__aeabi_f2d>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4638      	mov	r0, r7
 8001f70:	4923      	ldr	r1, [pc, #140]	; (8002000 <FEB_LTC6811_UART_Transmit_Voltage+0xec>)
 8001f72:	f008 f8bd 	bl	800a0f0 <siprintf>
			strncat(UART_str, temp_str, strlen(temp_str));
 8001f76:	463b      	mov	r3, r7
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe f949 	bl	8000210 <strlen>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	4639      	mov	r1, r7
 8001f82:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001f86:	4618      	mov	r0, r3
 8001f88:	f008 f8d2 	bl	800a130 <strncat>
		for (uint16_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8001f8c:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001f90:	3301      	adds	r3, #1
 8001f92:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8001f96:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001f9a:	2b10      	cmp	r3, #16
 8001f9c:	d9cf      	bls.n	8001f3e <FEB_LTC6811_UART_Transmit_Voltage+0x2a>
		}

		// Add '\n' to {@code UART_Str}
		sprintf(temp_str, "\n");
 8001f9e:	463b      	mov	r3, r7
 8001fa0:	4918      	ldr	r1, [pc, #96]	; (8002004 <FEB_LTC6811_UART_Transmit_Voltage+0xf0>)
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f008 f8a4 	bl	800a0f0 <siprintf>
		strncat(UART_str, temp_str, strlen(temp_str));
 8001fa8:	463b      	mov	r3, r7
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe f930 	bl	8000210 <strlen>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	4639      	mov	r1, r7
 8001fb4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f008 f8b9 	bl	800a130 <strncat>

		HAL_UART_Transmit(&huart2, (uint8_t*) UART_str, strlen(UART_str), 100);
 8001fbe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe f924 	bl	8000210 <strlen>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8001fd0:	2364      	movs	r3, #100	; 0x64
 8001fd2:	480d      	ldr	r0, [pc, #52]	; (8002008 <FEB_LTC6811_UART_Transmit_Voltage+0xf4>)
 8001fd4:	f006 ff7b 	bl	8008ece <HAL_UART_Transmit>
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8001fd8:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001fdc:	3301      	adds	r3, #1
 8001fde:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 8001fe2:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d09c      	beq.n	8001f24 <FEB_LTC6811_UART_Transmit_Voltage+0x10>
	}
}
 8001fea:	bf00      	nop
 8001fec:	bf00      	nop
 8001fee:	f507 67a1 	add.w	r7, r7, #1288	; 0x508
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	0800c5dc 	.word	0x0800c5dc
 8001ffc:	20002664 	.word	0x20002664
 8002000:	0800c614 	.word	0x0800c614
 8002004:	0800c5e4 	.word	0x0800c5e4
 8002008:	20002acc 	.word	0x20002acc

0800200c <FEB_LTC6811_Total_Bank_Voltage>:

float FEB_LTC6811_Total_Bank_Voltage(void) {
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
	float total_voltage = 0;
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	607b      	str	r3, [r7, #4]

	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8002018:	2300      	movs	r3, #0
 800201a:	70fb      	strb	r3, [r7, #3]
 800201c:	e01e      	b.n	800205c <FEB_LTC6811_Total_Bank_Voltage+0x50>
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 800201e:	2300      	movs	r3, #0
 8002020:	70bb      	strb	r3, [r7, #2]
 8002022:	e015      	b.n	8002050 <FEB_LTC6811_Total_Bank_Voltage+0x44>
			total_voltage += accumulator.banks[bank_idx].cells[cell_idx].voltage;
 8002024:	78fa      	ldrb	r2, [r7, #3]
 8002026:	78b9      	ldrb	r1, [r7, #2]
 8002028:	4813      	ldr	r0, [pc, #76]	; (8002078 <FEB_LTC6811_Total_Bank_Voltage+0x6c>)
 800202a:	4613      	mov	r3, r2
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	4413      	add	r3, r2
 8002030:	440b      	add	r3, r1
 8002032:	333a      	adds	r3, #58	; 0x3a
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4403      	add	r3, r0
 8002038:	3304      	adds	r3, #4
 800203a:	edd3 7a00 	vldr	s15, [r3]
 800203e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002046:	edc7 7a01 	vstr	s15, [r7, #4]
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 800204a:	78bb      	ldrb	r3, [r7, #2]
 800204c:	3301      	adds	r3, #1
 800204e:	70bb      	strb	r3, [r7, #2]
 8002050:	78bb      	ldrb	r3, [r7, #2]
 8002052:	2b10      	cmp	r3, #16
 8002054:	d9e6      	bls.n	8002024 <FEB_LTC6811_Total_Bank_Voltage+0x18>
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	3301      	adds	r3, #1
 800205a:	70fb      	strb	r3, [r7, #3]
 800205c:	78fb      	ldrb	r3, [r7, #3]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0dd      	beq.n	800201e <FEB_LTC6811_Total_Bank_Voltage+0x12>
		}
	}

	return total_voltage;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	ee07 3a90 	vmov	s15, r3
}
 8002068:	eeb0 0a67 	vmov.f32	s0, s15
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	20002664 	.word	0x20002664

0800207c <FEB_LTC6811_Clear_Voltage>:
		}
	}
	return 0;
}

void FEB_LTC6811_Clear_Voltage(void) {
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8002082:	2300      	movs	r3, #0
 8002084:	71fb      	strb	r3, [r7, #7]
 8002086:	e019      	b.n	80020bc <FEB_LTC6811_Clear_Voltage+0x40>
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8002088:	2300      	movs	r3, #0
 800208a:	71bb      	strb	r3, [r7, #6]
 800208c:	e010      	b.n	80020b0 <FEB_LTC6811_Clear_Voltage+0x34>
			accumulator.banks[bank_idx].cells[cell_idx].voltage = 0;
 800208e:	79fa      	ldrb	r2, [r7, #7]
 8002090:	79b9      	ldrb	r1, [r7, #6]
 8002092:	480f      	ldr	r0, [pc, #60]	; (80020d0 <FEB_LTC6811_Clear_Voltage+0x54>)
 8002094:	4613      	mov	r3, r2
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	4413      	add	r3, r2
 800209a:	440b      	add	r3, r1
 800209c:	333a      	adds	r3, #58	; 0x3a
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4403      	add	r3, r0
 80020a2:	3304      	adds	r3, #4
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 80020aa:	79bb      	ldrb	r3, [r7, #6]
 80020ac:	3301      	adds	r3, #1
 80020ae:	71bb      	strb	r3, [r7, #6]
 80020b0:	79bb      	ldrb	r3, [r7, #6]
 80020b2:	2b10      	cmp	r3, #16
 80020b4:	d9eb      	bls.n	800208e <FEB_LTC6811_Clear_Voltage+0x12>
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	3301      	adds	r3, #1
 80020ba:	71fb      	strb	r3, [r7, #7]
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0e2      	beq.n	8002088 <FEB_LTC6811_Clear_Voltage+0xc>
		}
	}
}
 80020c2:	bf00      	nop
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	20002664 	.word	0x20002664

080020d4 <FEB_LTC6811_Poll_Temperature>:

// ******************** Read Temperature ********************

void FEB_LTC6811_Poll_Temperature(void) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
	for (uint8_t channel = 0; channel <= 4; channel++) {
 80020da:	2300      	movs	r3, #0
 80020dc:	71fb      	strb	r3, [r7, #7]
 80020de:	e00e      	b.n	80020fe <FEB_LTC6811_Poll_Temperature+0x2a>
		FEB_LTC6811_Update_GPIO(channel);
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 f814 	bl	8002110 <FEB_LTC6811_Update_GPIO>
		FEB_LTC6811_Start_GPIO_ADC_Measurement();
 80020e8:	f000 f880 	bl	80021ec <FEB_LTC6811_Start_GPIO_ADC_Measurement>
		FEB_LTC6811_Read_Aux_Voltages();
 80020ec:	f000 f88c 	bl	8002208 <FEB_LTC6811_Read_Aux_Voltages>
		FEB_LTC6811_Store_Temperature(channel);
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 f896 	bl	8002224 <FEB_LTC6811_Store_Temperature>
	for (uint8_t channel = 0; channel <= 4; channel++) {
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	3301      	adds	r3, #1
 80020fc:	71fb      	strb	r3, [r7, #7]
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	2b04      	cmp	r3, #4
 8002102:	d9ed      	bls.n	80020e0 <FEB_LTC6811_Poll_Temperature+0xc>
	}
}
 8002104:	bf00      	nop
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <FEB_LTC6811_Update_GPIO>:

void FEB_LTC6811_Update_GPIO(uint8_t channel) {
 8002110:	b590      	push	{r4, r7, lr}
 8002112:	b08b      	sub	sp, #44	; 0x2c
 8002114:	af06      	add	r7, sp, #24
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
	GPIOBITS_A[0] = 0b1;					// ADC
 800211a:	4b2c      	ldr	r3, [pc, #176]	; (80021cc <FEB_LTC6811_Update_GPIO+0xbc>)
 800211c:	2201      	movs	r2, #1
 800211e:	701a      	strb	r2, [r3, #0]
	GPIOBITS_A[1] = 0b1;					// ADC
 8002120:	4b2a      	ldr	r3, [pc, #168]	; (80021cc <FEB_LTC6811_Update_GPIO+0xbc>)
 8002122:	2201      	movs	r2, #1
 8002124:	705a      	strb	r2, [r3, #1]
	GPIOBITS_A[2] = (channel >> 0) & 0b1;	// MUX Select
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf14      	ite	ne
 8002130:	2301      	movne	r3, #1
 8002132:	2300      	moveq	r3, #0
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4b25      	ldr	r3, [pc, #148]	; (80021cc <FEB_LTC6811_Update_GPIO+0xbc>)
 8002138:	709a      	strb	r2, [r3, #2]
	GPIOBITS_A[3] = (channel >> 1) & 0b1;	// MUX Select
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	085b      	lsrs	r3, r3, #1
 800213e:	b2db      	uxtb	r3, r3
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf14      	ite	ne
 8002148:	2301      	movne	r3, #1
 800214a:	2300      	moveq	r3, #0
 800214c:	b2da      	uxtb	r2, r3
 800214e:	4b1f      	ldr	r3, [pc, #124]	; (80021cc <FEB_LTC6811_Update_GPIO+0xbc>)
 8002150:	70da      	strb	r2, [r3, #3]
	GPIOBITS_A[4] = (channel >> 2) & 0b1;	// MUX Select
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	089b      	lsrs	r3, r3, #2
 8002156:	b2db      	uxtb	r3, r3
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	bf14      	ite	ne
 8002160:	2301      	movne	r3, #1
 8002162:	2300      	moveq	r3, #0
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4b19      	ldr	r3, [pc, #100]	; (80021cc <FEB_LTC6811_Update_GPIO+0xbc>)
 8002168:	711a      	strb	r2, [r3, #4]

    wakeup_sleep(NUM_IC);
 800216a:	2002      	movs	r0, #2
 800216c:	f000 fd1b 	bl	8002ba6 <wakeup_sleep>
    for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 8002170:	2300      	movs	r3, #0
 8002172:	73fb      	strb	r3, [r7, #15]
 8002174:	e01c      	b.n	80021b0 <FEB_LTC6811_Update_GPIO+0xa0>
    	FEB_LTC6811_Configure_DCCBITS_A(current_ic);
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fdd5 	bl	8001d28 <FEB_LTC6811_Configure_DCCBITS_A>
		LTC6811_set_cfgr(current_ic, accumulator.IC_config, REFON, ADCOPT, GPIOBITS_A, DCCBITS_A, DCTOBITS, UV, OV);
 800217e:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <FEB_LTC6811_Update_GPIO+0xc0>)
 8002180:	7819      	ldrb	r1, [r3, #0]
 8002182:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <FEB_LTC6811_Update_GPIO+0xc4>)
 8002184:	781c      	ldrb	r4, [r3, #0]
 8002186:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <FEB_LTC6811_Update_GPIO+0xc8>)
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	4a14      	ldr	r2, [pc, #80]	; (80021dc <FEB_LTC6811_Update_GPIO+0xcc>)
 800218c:	8812      	ldrh	r2, [r2, #0]
 800218e:	7bf8      	ldrb	r0, [r7, #15]
 8002190:	9204      	str	r2, [sp, #16]
 8002192:	9303      	str	r3, [sp, #12]
 8002194:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <FEB_LTC6811_Update_GPIO+0xd0>)
 8002196:	9302      	str	r3, [sp, #8]
 8002198:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <FEB_LTC6811_Update_GPIO+0xd4>)
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <FEB_LTC6811_Update_GPIO+0xbc>)
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	4623      	mov	r3, r4
 80021a2:	460a      	mov	r2, r1
 80021a4:	4910      	ldr	r1, [pc, #64]	; (80021e8 <FEB_LTC6811_Update_GPIO+0xd8>)
 80021a6:	f000 fcc0 	bl	8002b2a <LTC6811_set_cfgr>
    for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	3301      	adds	r3, #1
 80021ae:	73fb      	strb	r3, [r7, #15]
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d9df      	bls.n	8002176 <FEB_LTC6811_Update_GPIO+0x66>
    }
    wakeup_idle(NUM_IC);
 80021b6:	2002      	movs	r0, #2
 80021b8:	f000 fcd8 	bl	8002b6c <wakeup_idle>
    LTC6811_wrcfg(NUM_IC, accumulator.IC_config);
 80021bc:	490a      	ldr	r1, [pc, #40]	; (80021e8 <FEB_LTC6811_Update_GPIO+0xd8>)
 80021be:	2002      	movs	r0, #2
 80021c0:	f000 fc2d 	bl	8002a1e <LTC6811_wrcfg>
}
 80021c4:	bf00      	nop
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd90      	pop	{r4, r7, pc}
 80021cc:	20000038 	.word	0x20000038
 80021d0:	20000035 	.word	0x20000035
 80021d4:	20002654 	.word	0x20002654
 80021d8:	2000003e 	.word	0x2000003e
 80021dc:	20000040 	.word	0x20000040
 80021e0:	20000044 	.word	0x20000044
 80021e4:	20002658 	.word	0x20002658
 80021e8:	20002664 	.word	0x20002664

080021ec <FEB_LTC6811_Start_GPIO_ADC_Measurement>:

void FEB_LTC6811_Start_GPIO_ADC_Measurement(void) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 80021f0:	2002      	movs	r0, #2
 80021f2:	f000 fcd8 	bl	8002ba6 <wakeup_sleep>
	LTC6811_adax(ADC_CONVERSION_MODE, AUX_CH_TO_CONVERT);
 80021f6:	2100      	movs	r1, #0
 80021f8:	2002      	movs	r0, #2
 80021fa:	f000 fc32 	bl	8002a62 <LTC6811_adax>
	LTC6811_pollAdc();
 80021fe:	f000 fc6f 	bl	8002ae0 <LTC6811_pollAdc>
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <FEB_LTC6811_Read_Aux_Voltages>:

void FEB_LTC6811_Read_Aux_Voltages(void) {
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 800220c:	2002      	movs	r0, #2
 800220e:	f000 fcca 	bl	8002ba6 <wakeup_sleep>
	LTC6811_rdaux(SEL_ALL_REG, NUM_IC, accumulator.IC_config);
 8002212:	4a03      	ldr	r2, [pc, #12]	; (8002220 <FEB_LTC6811_Read_Aux_Voltages+0x18>)
 8002214:	2102      	movs	r1, #2
 8002216:	2000      	movs	r0, #0
 8002218:	f000 fc4c 	bl	8002ab4 <LTC6811_rdaux>
}
 800221c:	bf00      	nop
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20002664 	.word	0x20002664

08002224 <FEB_LTC6811_Store_Temperature>:

void FEB_LTC6811_Store_Temperature(uint8_t channel) {
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
    for (uint16_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 800222e:	2300      	movs	r3, #0
 8002230:	81fb      	strh	r3, [r7, #14]
 8002232:	e1cd      	b.n	80025d0 <FEB_LTC6811_Store_Temperature+0x3ac>
    	switch (channel) {
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	2b04      	cmp	r3, #4
 8002238:	f200 81c7 	bhi.w	80025ca <FEB_LTC6811_Store_Temperature+0x3a6>
 800223c:	a201      	add	r2, pc, #4	; (adr r2, 8002244 <FEB_LTC6811_Store_Temperature+0x20>)
 800223e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002242:	bf00      	nop
 8002244:	08002259 	.word	0x08002259
 8002248:	08002327 	.word	0x08002327
 800224c:	080023f5 	.word	0x080023f5
 8002250:	080024c3 	.word	0x080024c3
 8002254:	08002595 	.word	0x08002595
    		case 0:
    			accumulator.banks[bank_idx].cells[12].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 8002258:	89fb      	ldrh	r3, [r7, #14]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4acc      	ldr	r2, [pc, #816]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 800225e:	21e8      	movs	r1, #232	; 0xe8
 8002260:	fb01 f303 	mul.w	r3, r1, r3
 8002264:	4413      	add	r3, r2
 8002266:	3348      	adds	r3, #72	; 0x48
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	89fc      	ldrh	r4, [r7, #14]
 800226c:	4618      	mov	r0, r3
 800226e:	f000 f9bb 	bl	80025e8 <FEB_LTC6811_Convert_Temperature>
 8002272:	eef0 7a40 	vmov.f32	s15, s0
 8002276:	4ac6      	ldr	r2, [pc, #792]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002278:	4623      	mov	r3, r4
 800227a:	011b      	lsls	r3, r3, #4
 800227c:	4423      	add	r3, r4
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4413      	add	r3, r2
 8002282:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002286:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[16].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 800228a:	89fb      	ldrh	r3, [r7, #14]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4ac0      	ldr	r2, [pc, #768]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002290:	21e8      	movs	r1, #232	; 0xe8
 8002292:	fb01 f303 	mul.w	r3, r1, r3
 8002296:	4413      	add	r3, r2
 8002298:	334a      	adds	r3, #74	; 0x4a
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	89fc      	ldrh	r4, [r7, #14]
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f9a2 	bl	80025e8 <FEB_LTC6811_Convert_Temperature>
 80022a4:	eef0 7a40 	vmov.f32	s15, s0
 80022a8:	4ab9      	ldr	r2, [pc, #740]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 80022aa:	4623      	mov	r3, r4
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	4423      	add	r3, r4
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4413      	add	r3, r2
 80022b4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80022b8:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[4].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 80022bc:	89fb      	ldrh	r3, [r7, #14]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	3301      	adds	r3, #1
 80022c2:	4ab3      	ldr	r2, [pc, #716]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 80022c4:	21e8      	movs	r1, #232	; 0xe8
 80022c6:	fb01 f303 	mul.w	r3, r1, r3
 80022ca:	4413      	add	r3, r2
 80022cc:	3348      	adds	r3, #72	; 0x48
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	89fc      	ldrh	r4, [r7, #14]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 f988 	bl	80025e8 <FEB_LTC6811_Convert_Temperature>
 80022d8:	eef0 7a40 	vmov.f32	s15, s0
 80022dc:	4aac      	ldr	r2, [pc, #688]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 80022de:	4623      	mov	r3, r4
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	4423      	add	r3, r4
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 80022ec:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[8].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 80022f0:	89fb      	ldrh	r3, [r7, #14]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	3301      	adds	r3, #1
 80022f6:	4aa6      	ldr	r2, [pc, #664]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 80022f8:	21e8      	movs	r1, #232	; 0xe8
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	4413      	add	r3, r2
 8002300:	334a      	adds	r3, #74	; 0x4a
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	89fc      	ldrh	r4, [r7, #14]
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f96e 	bl	80025e8 <FEB_LTC6811_Convert_Temperature>
 800230c:	eef0 7a40 	vmov.f32	s15, s0
 8002310:	4a9f      	ldr	r2, [pc, #636]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002312:	4623      	mov	r3, r4
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	4423      	add	r3, r4
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4413      	add	r3, r2
 800231c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002320:	edc3 7a00 	vstr	s15, [r3]
    			break;
 8002324:	e151      	b.n	80025ca <FEB_LTC6811_Store_Temperature+0x3a6>
    		case 1:
    			accumulator.banks[bank_idx].cells[11].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 8002326:	89fb      	ldrh	r3, [r7, #14]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	4a99      	ldr	r2, [pc, #612]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 800232c:	21e8      	movs	r1, #232	; 0xe8
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	4413      	add	r3, r2
 8002334:	3348      	adds	r3, #72	; 0x48
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	89fc      	ldrh	r4, [r7, #14]
 800233a:	4618      	mov	r0, r3
 800233c:	f000 f954 	bl	80025e8 <FEB_LTC6811_Convert_Temperature>
 8002340:	eef0 7a40 	vmov.f32	s15, s0
 8002344:	4a92      	ldr	r2, [pc, #584]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002346:	4623      	mov	r3, r4
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	4423      	add	r3, r4
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4413      	add	r3, r2
 8002350:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002354:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[15].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 8002358:	89fb      	ldrh	r3, [r7, #14]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4a8c      	ldr	r2, [pc, #560]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 800235e:	21e8      	movs	r1, #232	; 0xe8
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	4413      	add	r3, r2
 8002366:	334a      	adds	r3, #74	; 0x4a
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	89fc      	ldrh	r4, [r7, #14]
 800236c:	4618      	mov	r0, r3
 800236e:	f000 f93b 	bl	80025e8 <FEB_LTC6811_Convert_Temperature>
 8002372:	eef0 7a40 	vmov.f32	s15, s0
 8002376:	4a86      	ldr	r2, [pc, #536]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002378:	4623      	mov	r3, r4
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	4423      	add	r3, r4
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4413      	add	r3, r2
 8002382:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8002386:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[3].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 800238a:	89fb      	ldrh	r3, [r7, #14]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	3301      	adds	r3, #1
 8002390:	4a7f      	ldr	r2, [pc, #508]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002392:	21e8      	movs	r1, #232	; 0xe8
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4413      	add	r3, r2
 800239a:	3348      	adds	r3, #72	; 0x48
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	89fc      	ldrh	r4, [r7, #14]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 f921 	bl	80025e8 <FEB_LTC6811_Convert_Temperature>
 80023a6:	eef0 7a40 	vmov.f32	s15, s0
 80023aa:	4a79      	ldr	r2, [pc, #484]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 80023ac:	4623      	mov	r3, r4
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	4423      	add	r3, r4
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80023ba:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[7].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 80023be:	89fb      	ldrh	r3, [r7, #14]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	3301      	adds	r3, #1
 80023c4:	4a72      	ldr	r2, [pc, #456]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 80023c6:	21e8      	movs	r1, #232	; 0xe8
 80023c8:	fb01 f303 	mul.w	r3, r1, r3
 80023cc:	4413      	add	r3, r2
 80023ce:	334a      	adds	r3, #74	; 0x4a
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	89fc      	ldrh	r4, [r7, #14]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 f907 	bl	80025e8 <FEB_LTC6811_Convert_Temperature>
 80023da:	eef0 7a40 	vmov.f32	s15, s0
 80023de:	4a6c      	ldr	r2, [pc, #432]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 80023e0:	4623      	mov	r3, r4
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	4423      	add	r3, r4
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4413      	add	r3, r2
 80023ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023ee:	edc3 7a00 	vstr	s15, [r3]
    			break;
 80023f2:	e0ea      	b.n	80025ca <FEB_LTC6811_Store_Temperature+0x3a6>
    		case 2:
    			accumulator.banks[bank_idx].cells[10].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 80023f4:	89fb      	ldrh	r3, [r7, #14]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4a65      	ldr	r2, [pc, #404]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 80023fa:	21e8      	movs	r1, #232	; 0xe8
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	4413      	add	r3, r2
 8002402:	3348      	adds	r3, #72	; 0x48
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	89fc      	ldrh	r4, [r7, #14]
 8002408:	4618      	mov	r0, r3
 800240a:	f000 f8ed 	bl	80025e8 <FEB_LTC6811_Convert_Temperature>
 800240e:	eef0 7a40 	vmov.f32	s15, s0
 8002412:	4a5f      	ldr	r2, [pc, #380]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002414:	4623      	mov	r3, r4
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	4423      	add	r3, r4
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4413      	add	r3, r2
 800241e:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002422:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[14].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 8002426:	89fb      	ldrh	r3, [r7, #14]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	4a59      	ldr	r2, [pc, #356]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 800242c:	21e8      	movs	r1, #232	; 0xe8
 800242e:	fb01 f303 	mul.w	r3, r1, r3
 8002432:	4413      	add	r3, r2
 8002434:	334a      	adds	r3, #74	; 0x4a
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	89fc      	ldrh	r4, [r7, #14]
 800243a:	4618      	mov	r0, r3
 800243c:	f000 f8d4 	bl	80025e8 <FEB_LTC6811_Convert_Temperature>
 8002440:	eef0 7a40 	vmov.f32	s15, s0
 8002444:	4a52      	ldr	r2, [pc, #328]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002446:	4623      	mov	r3, r4
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	4423      	add	r3, r4
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4413      	add	r3, r2
 8002450:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8002454:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[2].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 8002458:	89fb      	ldrh	r3, [r7, #14]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	3301      	adds	r3, #1
 800245e:	4a4c      	ldr	r2, [pc, #304]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002460:	21e8      	movs	r1, #232	; 0xe8
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	4413      	add	r3, r2
 8002468:	3348      	adds	r3, #72	; 0x48
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	89fc      	ldrh	r4, [r7, #14]
 800246e:	4618      	mov	r0, r3
 8002470:	f000 f8ba 	bl	80025e8 <FEB_LTC6811_Convert_Temperature>
 8002474:	eef0 7a40 	vmov.f32	s15, s0
 8002478:	4a45      	ldr	r2, [pc, #276]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 800247a:	4623      	mov	r3, r4
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	4423      	add	r3, r4
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4413      	add	r3, r2
 8002484:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8002488:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[6].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 800248c:	89fb      	ldrh	r3, [r7, #14]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	3301      	adds	r3, #1
 8002492:	4a3f      	ldr	r2, [pc, #252]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002494:	21e8      	movs	r1, #232	; 0xe8
 8002496:	fb01 f303 	mul.w	r3, r1, r3
 800249a:	4413      	add	r3, r2
 800249c:	334a      	adds	r3, #74	; 0x4a
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	89fc      	ldrh	r4, [r7, #14]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 f8a0 	bl	80025e8 <FEB_LTC6811_Convert_Temperature>
 80024a8:	eef0 7a40 	vmov.f32	s15, s0
 80024ac:	4a38      	ldr	r2, [pc, #224]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 80024ae:	4623      	mov	r3, r4
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	4423      	add	r3, r4
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80024bc:	edc3 7a00 	vstr	s15, [r3]
    			break;
 80024c0:	e083      	b.n	80025ca <FEB_LTC6811_Store_Temperature+0x3a6>
    		case 3:
    			accumulator.banks[bank_idx].cells[9].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 80024c2:	89fb      	ldrh	r3, [r7, #14]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	4a32      	ldr	r2, [pc, #200]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 80024c8:	21e8      	movs	r1, #232	; 0xe8
 80024ca:	fb01 f303 	mul.w	r3, r1, r3
 80024ce:	4413      	add	r3, r2
 80024d0:	3348      	adds	r3, #72	; 0x48
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	89fc      	ldrh	r4, [r7, #14]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 f886 	bl	80025e8 <FEB_LTC6811_Convert_Temperature>
 80024dc:	eef0 7a40 	vmov.f32	s15, s0
 80024e0:	4a2b      	ldr	r2, [pc, #172]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 80024e2:	4623      	mov	r3, r4
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	4423      	add	r3, r4
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80024f0:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[13].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 80024f4:	89fb      	ldrh	r3, [r7, #14]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	4a25      	ldr	r2, [pc, #148]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 80024fa:	21e8      	movs	r1, #232	; 0xe8
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
 8002500:	4413      	add	r3, r2
 8002502:	334a      	adds	r3, #74	; 0x4a
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	89fc      	ldrh	r4, [r7, #14]
 8002508:	4618      	mov	r0, r3
 800250a:	f000 f86d 	bl	80025e8 <FEB_LTC6811_Convert_Temperature>
 800250e:	eef0 7a40 	vmov.f32	s15, s0
 8002512:	4a1f      	ldr	r2, [pc, #124]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002514:	4623      	mov	r3, r4
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	4423      	add	r3, r4
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4413      	add	r3, r2
 800251e:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8002522:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[1].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 8002526:	89fb      	ldrh	r3, [r7, #14]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	3301      	adds	r3, #1
 800252c:	4a18      	ldr	r2, [pc, #96]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 800252e:	21e8      	movs	r1, #232	; 0xe8
 8002530:	fb01 f303 	mul.w	r3, r1, r3
 8002534:	4413      	add	r3, r2
 8002536:	3348      	adds	r3, #72	; 0x48
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	89fc      	ldrh	r4, [r7, #14]
 800253c:	4618      	mov	r0, r3
 800253e:	f000 f853 	bl	80025e8 <FEB_LTC6811_Convert_Temperature>
 8002542:	eef0 7a40 	vmov.f32	s15, s0
 8002546:	4a12      	ldr	r2, [pc, #72]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002548:	4623      	mov	r3, r4
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	4423      	add	r3, r4
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4413      	add	r3, r2
 8002552:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002556:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[5].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 800255a:	89fb      	ldrh	r3, [r7, #14]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	3301      	adds	r3, #1
 8002560:	4a0b      	ldr	r2, [pc, #44]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002562:	21e8      	movs	r1, #232	; 0xe8
 8002564:	fb01 f303 	mul.w	r3, r1, r3
 8002568:	4413      	add	r3, r2
 800256a:	334a      	adds	r3, #74	; 0x4a
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	89fc      	ldrh	r4, [r7, #14]
 8002570:	4618      	mov	r0, r3
 8002572:	f000 f839 	bl	80025e8 <FEB_LTC6811_Convert_Temperature>
 8002576:	eef0 7a40 	vmov.f32	s15, s0
 800257a:	4a05      	ldr	r2, [pc, #20]	; (8002590 <FEB_LTC6811_Store_Temperature+0x36c>)
 800257c:	4623      	mov	r3, r4
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	4423      	add	r3, r4
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4413      	add	r3, r2
 8002586:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800258a:	edc3 7a00 	vstr	s15, [r3]
    			break;
 800258e:	e01c      	b.n	80025ca <FEB_LTC6811_Store_Temperature+0x3a6>
 8002590:	20002664 	.word	0x20002664
    		case 4:
    			accumulator.banks[bank_idx].cells[0].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 8002594:	89fb      	ldrh	r3, [r7, #14]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	3301      	adds	r3, #1
 800259a:	4a12      	ldr	r2, [pc, #72]	; (80025e4 <FEB_LTC6811_Store_Temperature+0x3c0>)
 800259c:	21e8      	movs	r1, #232	; 0xe8
 800259e:	fb01 f303 	mul.w	r3, r1, r3
 80025a2:	4413      	add	r3, r2
 80025a4:	3348      	adds	r3, #72	; 0x48
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	89fc      	ldrh	r4, [r7, #14]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 f81c 	bl	80025e8 <FEB_LTC6811_Convert_Temperature>
 80025b0:	eef0 7a40 	vmov.f32	s15, s0
 80025b4:	4a0b      	ldr	r2, [pc, #44]	; (80025e4 <FEB_LTC6811_Store_Temperature+0x3c0>)
 80025b6:	4623      	mov	r3, r4
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	4423      	add	r3, r4
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4413      	add	r3, r2
 80025c0:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80025c4:	edc3 7a00 	vstr	s15, [r3]
    			break;
 80025c8:	bf00      	nop
    for (uint16_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 80025ca:	89fb      	ldrh	r3, [r7, #14]
 80025cc:	3301      	adds	r3, #1
 80025ce:	81fb      	strh	r3, [r7, #14]
 80025d0:	89fb      	ldrh	r3, [r7, #14]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f43f ae2e 	beq.w	8002234 <FEB_LTC6811_Store_Temperature+0x10>
    	}
    }
}
 80025d8:	bf00      	nop
 80025da:	bf00      	nop
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd90      	pop	{r4, r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20002664 	.word	0x20002664

080025e8 <FEB_LTC6811_Convert_Temperature>:

/*
 * @param value := Voltage (100uV) from LTC6811
 */
float FEB_LTC6811_Convert_Temperature(uint16_t value) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	80fb      	strh	r3, [r7, #6]
	// Check for error: value = 2^16 - 1
	if (value == 65535) {
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d102      	bne.n	8002602 <FEB_LTC6811_Convert_Temperature+0x1a>
		return -42;
 80025fc:	eddf 7a10 	vldr	s15, [pc, #64]	; 8002640 <FEB_LTC6811_Convert_Temperature+0x58>
 8002600:	e015      	b.n	800262e <FEB_LTC6811_Convert_Temperature+0x46>
	}
	//return value * 0.0001;
	return FEB_LTC6811_Temp_LUT_Get_Temperature(value * 0.0001);
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	4618      	mov	r0, r3
 8002606:	f7fd ffad 	bl	8000564 <__aeabi_i2d>
 800260a:	a30b      	add	r3, pc, #44	; (adr r3, 8002638 <FEB_LTC6811_Convert_Temperature+0x50>)
 800260c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002610:	f7fe f812 	bl	8000638 <__aeabi_dmul>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4610      	mov	r0, r2
 800261a:	4619      	mov	r1, r3
 800261c:	f7fe fb04 	bl	8000c28 <__aeabi_d2f>
 8002620:	4603      	mov	r3, r0
 8002622:	ee00 3a10 	vmov	s0, r3
 8002626:	f000 f903 	bl	8002830 <FEB_LTC6811_Temp_LUT_Get_Temperature>
 800262a:	eef0 7a40 	vmov.f32	s15, s0
}
 800262e:	eeb0 0a67 	vmov.f32	s0, s15
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	eb1c432d 	.word	0xeb1c432d
 800263c:	3f1a36e2 	.word	0x3f1a36e2
 8002640:	c2280000 	.word	0xc2280000

08002644 <FEB_LTC6811_Validate_Temperature>:

// ******************** Temperature Interface ********************

void FEB_LTC6811_Validate_Temperature(void) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 800264a:	2300      	movs	r3, #0
 800264c:	73fb      	strb	r3, [r7, #15]
 800264e:	e034      	b.n	80026ba <FEB_LTC6811_Validate_Temperature+0x76>
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8002650:	2300      	movs	r3, #0
 8002652:	73bb      	strb	r3, [r7, #14]
 8002654:	e02b      	b.n	80026ae <FEB_LTC6811_Validate_Temperature+0x6a>
			float temperature = accumulator.banks[bank_idx].cells[cell_idx].temperature;
 8002656:	7bfa      	ldrb	r2, [r7, #15]
 8002658:	7bb9      	ldrb	r1, [r7, #14]
 800265a:	481c      	ldr	r0, [pc, #112]	; (80026cc <FEB_LTC6811_Validate_Temperature+0x88>)
 800265c:	4613      	mov	r3, r2
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	4413      	add	r3, r2
 8002662:	440b      	add	r3, r1
 8002664:	333a      	adds	r3, #58	; 0x3a
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4403      	add	r3, r0
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60bb      	str	r3, [r7, #8]
			float min_temperature = FEB_LTC6811_CELL_MIN_OPERATION_TEMPERATURE;
 800266e:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <FEB_LTC6811_Validate_Temperature+0x8c>)
 8002670:	607b      	str	r3, [r7, #4]
			float max_temperature = FEB_LTC6811_CELL_MAX_OPERATION_TEMPERATURE;
 8002672:	4b18      	ldr	r3, [pc, #96]	; (80026d4 <FEB_LTC6811_Validate_Temperature+0x90>)
 8002674:	603b      	str	r3, [r7, #0]
			if (FEB_CAN_CHARGER_STATE == 1) {
				min_temperature = FEB_LTC6811_CELL_MIN_CHARGING_TEMPERATURE;
				max_temperature = FEB_LTC6811_CELL_MAX_CHARGING_TEMPERATURE;
			}
			if (temperature < min_temperature) {
 8002676:	ed97 7a02 	vldr	s14, [r7, #8]
 800267a:	edd7 7a01 	vldr	s15, [r7, #4]
 800267e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002686:	d503      	bpl.n	8002690 <FEB_LTC6811_Validate_Temperature+0x4c>
				FEB_BMS_Shutdown_Initiate("Module under temperature");
 8002688:	4813      	ldr	r0, [pc, #76]	; (80026d8 <FEB_LTC6811_Validate_Temperature+0x94>)
 800268a:	f7fe fcc3 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
 800268e:	e00b      	b.n	80026a8 <FEB_LTC6811_Validate_Temperature+0x64>
			} else if (temperature > max_temperature) {
 8002690:	ed97 7a02 	vldr	s14, [r7, #8]
 8002694:	edd7 7a00 	vldr	s15, [r7]
 8002698:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800269c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a0:	dd02      	ble.n	80026a8 <FEB_LTC6811_Validate_Temperature+0x64>
				FEB_BMS_Shutdown_Initiate("Module over temperature");
 80026a2:	480e      	ldr	r0, [pc, #56]	; (80026dc <FEB_LTC6811_Validate_Temperature+0x98>)
 80026a4:	f7fe fcb6 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 80026a8:	7bbb      	ldrb	r3, [r7, #14]
 80026aa:	3301      	adds	r3, #1
 80026ac:	73bb      	strb	r3, [r7, #14]
 80026ae:	7bbb      	ldrb	r3, [r7, #14]
 80026b0:	2b10      	cmp	r3, #16
 80026b2:	d9d0      	bls.n	8002656 <FEB_LTC6811_Validate_Temperature+0x12>
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	3301      	adds	r3, #1
 80026b8:	73fb      	strb	r3, [r7, #15]
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0c7      	beq.n	8002650 <FEB_LTC6811_Validate_Temperature+0xc>
			}
		}
	}
}
 80026c0:	bf00      	nop
 80026c2:	bf00      	nop
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20002664 	.word	0x20002664
 80026d0:	c1a00000 	.word	0xc1a00000
 80026d4:	42700000 	.word	0x42700000
 80026d8:	0800c618 	.word	0x0800c618
 80026dc:	0800c634 	.word	0x0800c634

080026e0 <FEB_LTC6811_UART_Transmit_Temperature>:

void FEB_LTC6811_UART_Transmit_Temperature() {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	f5ad 6da1 	sub.w	sp, sp, #1288	; 0x508
 80026e6:	af00      	add	r7, sp, #0
	char UART_Str[1024];
	char temp_str[256];

	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 80026e8:	2300      	movs	r3, #0
 80026ea:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 80026ee:	e05e      	b.n	80027ae <FEB_LTC6811_UART_Transmit_Temperature+0xce>
		// Add bank_idx, cell_idx to {@code UART_Str}
		sprintf(UART_Str, "%d", (bank_idx << FEB_LTC6811_UART_BITS_PER_MESSAGE) + FEB_LTC6811_UART_TEMPERATURE_ID);
 80026f0:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80026fc:	4931      	ldr	r1, [pc, #196]	; (80027c4 <FEB_LTC6811_UART_Transmit_Temperature+0xe4>)
 80026fe:	4618      	mov	r0, r3
 8002700:	f007 fcf6 	bl	800a0f0 <siprintf>


		// Add values to {@code UART_Str}
		for (uint16_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8002704:	2300      	movs	r3, #0
 8002706:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 800270a:	e02a      	b.n	8002762 <FEB_LTC6811_UART_Transmit_Temperature+0x82>
			float temperature = accumulator.banks[bank_idx].cells[cell_idx].temperature;
 800270c:	f897 2507 	ldrb.w	r2, [r7, #1287]	; 0x507
 8002710:	f8b7 1504 	ldrh.w	r1, [r7, #1284]	; 0x504
 8002714:	482c      	ldr	r0, [pc, #176]	; (80027c8 <FEB_LTC6811_UART_Transmit_Temperature+0xe8>)
 8002716:	4613      	mov	r3, r2
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	4413      	add	r3, r2
 800271c:	440b      	add	r3, r1
 800271e:	333a      	adds	r3, #58	; 0x3a
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4403      	add	r3, r0
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 800272a:	6013      	str	r3, [r2, #0]

			sprintf(temp_str, " %f", temperature);
 800272c:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8002730:	6818      	ldr	r0, [r3, #0]
 8002732:	f7fd ff29 	bl	8000588 <__aeabi_f2d>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4638      	mov	r0, r7
 800273c:	4923      	ldr	r1, [pc, #140]	; (80027cc <FEB_LTC6811_UART_Transmit_Temperature+0xec>)
 800273e:	f007 fcd7 	bl	800a0f0 <siprintf>
			strncat(UART_Str, temp_str, strlen(temp_str));
 8002742:	463b      	mov	r3, r7
 8002744:	4618      	mov	r0, r3
 8002746:	f7fd fd63 	bl	8000210 <strlen>
 800274a:	4602      	mov	r2, r0
 800274c:	4639      	mov	r1, r7
 800274e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002752:	4618      	mov	r0, r3
 8002754:	f007 fcec 	bl	800a130 <strncat>
		for (uint16_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8002758:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 800275c:	3301      	adds	r3, #1
 800275e:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8002762:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8002766:	2b10      	cmp	r3, #16
 8002768:	d9d0      	bls.n	800270c <FEB_LTC6811_UART_Transmit_Temperature+0x2c>
		}

		// Add '\n' to {@code UART_Str}
		sprintf(temp_str, "\n");
 800276a:	463b      	mov	r3, r7
 800276c:	4918      	ldr	r1, [pc, #96]	; (80027d0 <FEB_LTC6811_UART_Transmit_Temperature+0xf0>)
 800276e:	4618      	mov	r0, r3
 8002770:	f007 fcbe 	bl	800a0f0 <siprintf>
		strncat(UART_Str, temp_str, strlen(temp_str));
 8002774:	463b      	mov	r3, r7
 8002776:	4618      	mov	r0, r3
 8002778:	f7fd fd4a 	bl	8000210 <strlen>
 800277c:	4602      	mov	r2, r0
 800277e:	4639      	mov	r1, r7
 8002780:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002784:	4618      	mov	r0, r3
 8002786:	f007 fcd3 	bl	800a130 <strncat>
		HAL_UART_Transmit(&huart2, (uint8_t*) UART_Str, strlen(UART_Str), 100);
 800278a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800278e:	4618      	mov	r0, r3
 8002790:	f7fd fd3e 	bl	8000210 <strlen>
 8002794:	4603      	mov	r3, r0
 8002796:	b29a      	uxth	r2, r3
 8002798:	f507 7180 	add.w	r1, r7, #256	; 0x100
 800279c:	2364      	movs	r3, #100	; 0x64
 800279e:	480d      	ldr	r0, [pc, #52]	; (80027d4 <FEB_LTC6811_UART_Transmit_Temperature+0xf4>)
 80027a0:	f006 fb95 	bl	8008ece <HAL_UART_Transmit>
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 80027a4:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 80027a8:	3301      	adds	r3, #1
 80027aa:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 80027ae:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d09c      	beq.n	80026f0 <FEB_LTC6811_UART_Transmit_Temperature+0x10>
	}
}
 80027b6:	bf00      	nop
 80027b8:	bf00      	nop
 80027ba:	f507 67a1 	add.w	r7, r7, #1288	; 0x508
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	0800c5dc 	.word	0x0800c5dc
 80027c8:	20002664 	.word	0x20002664
 80027cc:	0800c614 	.word	0x0800c614
 80027d0:	0800c5e4 	.word	0x0800c5e4
 80027d4:	20002acc 	.word	0x20002acc

080027d8 <FEB_LTC6811_Clear_Temperature>:

void FEB_LTC6811_Clear_Temperature(void) {
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 80027de:	2300      	movs	r3, #0
 80027e0:	71fb      	strb	r3, [r7, #7]
 80027e2:	e018      	b.n	8002816 <FEB_LTC6811_Clear_Temperature+0x3e>
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 80027e4:	2300      	movs	r3, #0
 80027e6:	71bb      	strb	r3, [r7, #6]
 80027e8:	e00f      	b.n	800280a <FEB_LTC6811_Clear_Temperature+0x32>
			accumulator.banks[bank_idx].cells[cell_idx].temperature = 0;
 80027ea:	79fa      	ldrb	r2, [r7, #7]
 80027ec:	79b9      	ldrb	r1, [r7, #6]
 80027ee:	480f      	ldr	r0, [pc, #60]	; (800282c <FEB_LTC6811_Clear_Temperature+0x54>)
 80027f0:	4613      	mov	r3, r2
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	4413      	add	r3, r2
 80027f6:	440b      	add	r3, r1
 80027f8:	333a      	adds	r3, #58	; 0x3a
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4403      	add	r3, r0
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8002804:	79bb      	ldrb	r3, [r7, #6]
 8002806:	3301      	adds	r3, #1
 8002808:	71bb      	strb	r3, [r7, #6]
 800280a:	79bb      	ldrb	r3, [r7, #6]
 800280c:	2b10      	cmp	r3, #16
 800280e:	d9ec      	bls.n	80027ea <FEB_LTC6811_Clear_Temperature+0x12>
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	3301      	adds	r3, #1
 8002814:	71fb      	strb	r3, [r7, #7]
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0e3      	beq.n	80027e4 <FEB_LTC6811_Clear_Temperature+0xc>
		}
	}
}
 800281c:	bf00      	nop
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	20002664 	.word	0x20002664

08002830 <FEB_LTC6811_Temp_LUT_Get_Temperature>:

static float FEB_LTC6811_Temp_Map[][2] = {{1.3, 120.0}, {1.301, 119.5}, {1.302, 119.0}, {1.303, 118.5}, {1.304, 118.0}, {1.305, 117.5}, {1.306, 117.0}, {1.307, 116.5}, {1.308, 116.0}, {1.309, 115.5}, {1.31, 115.0}, {1.311, 114.5}, {1.312, 114.0}, {1.313, 113.5}, {1.314, 113.0}, {1.315, 112.5}, {1.316, 112.0}, {1.317, 111.5}, {1.318, 111.0}, {1.319, 110.5}, {1.32, 110.0}, {1.321, 109.5}, {1.322, 109.0}, {1.323, 108.5}, {1.324, 108.0}, {1.325, 107.5}, {1.326, 107.0}, {1.327, 106.5}, {1.328, 106.0}, {1.329, 105.5}, {1.33, 105.0}, {1.331, 104.5}, {1.332, 104.0}, {1.333, 103.5}, {1.334, 103.0}, {1.335, 102.5}, {1.336, 102.0}, {1.337, 101.5}, {1.338, 101.0}, {1.339, 100.5}, {1.34, 100.0}, {1.341, 99.5}, {1.342, 99.0}, {1.343, 98.5}, {1.344, 98.0}, {1.345, 97.5}, {1.346, 97.0}, {1.347, 96.5}, {1.348, 96.0}, {1.349, 95.5}, {1.35, 95.0}, {1.351, 94.75}, {1.352, 94.5}, {1.353, 94.25}, {1.354, 94.0}, {1.355, 93.75}, {1.356, 93.5}, {1.357, 93.25}, {1.358, 93.0}, {1.359, 92.75}, {1.36, 92.5}, {1.361, 92.25}, {1.362, 92.0}, {1.363, 91.75}, {1.364, 91.5}, {1.365, 91.25}, {1.366, 91.0}, {1.367, 90.75}, {1.368, 90.5}, {1.369, 90.25}, {1.37, 90.0}, {1.371, 89.5}, {1.372, 89.0}, {1.373, 88.5}, {1.374, 88.0}, {1.375, 87.5}, {1.376, 87.0}, {1.377, 86.5}, {1.378, 86.0}, {1.379, 85.5}, {1.38, 85.0}, {1.381, 84.75}, {1.382, 84.5}, {1.383, 84.25}, {1.384, 84.0}, {1.385, 83.75}, {1.386, 83.5}, {1.387, 83.25}, {1.388, 83.0}, {1.389, 82.75}, {1.39, 82.5}, {1.391, 82.25}, {1.392, 82.0}, {1.393, 81.75}, {1.394, 81.5}, {1.395, 81.25}, {1.396, 81.0}, {1.397, 80.75}, {1.398, 80.5}, {1.399, 80.25}, {1.4, 80.0}, {1.401, 79.8333}, {1.402, 79.6667}, {1.403, 79.5}, {1.404, 79.3333}, {1.405, 79.1667}, {1.406, 79.0}, {1.407, 78.8333}, {1.408, 78.6667}, {1.409, 78.5}, {1.41, 78.3333}, {1.411, 78.1667}, {1.412, 78.0}, {1.413, 77.8333}, {1.414, 77.6667}, {1.415, 77.5}, {1.416, 77.3333}, {1.417, 77.1667}, {1.418, 77.0}, {1.419, 76.8333}, {1.42, 76.6667}, {1.421, 76.5}, {1.422, 76.3333}, {1.423, 76.1667}, {1.424, 76.0}, {1.425, 75.8333}, {1.426, 75.6667}, {1.427, 75.5}, {1.428, 75.3333}, {1.429, 75.1667}, {1.43, 75.0}, {1.431, 74.75}, {1.432, 74.5}, {1.433, 74.25}, {1.434, 74.0}, {1.435, 73.75}, {1.436, 73.5}, {1.437, 73.25}, {1.438, 73.0}, {1.439, 72.75}, {1.44, 72.5}, {1.441, 72.25}, {1.442, 72.0}, {1.443, 71.75}, {1.444, 71.5}, {1.445, 71.25}, {1.446, 71.0}, {1.447, 70.75}, {1.448, 70.5}, {1.449, 70.25}, {1.45, 70.0}, {1.451, 69.8333}, {1.452, 69.6667}, {1.453, 69.5}, {1.454, 69.3333}, {1.455, 69.1667}, {1.456, 69.0}, {1.457, 68.8333}, {1.458, 68.6667}, {1.459, 68.5}, {1.46, 68.3333}, {1.461, 68.1667}, {1.462, 68.0}, {1.463, 67.8333}, {1.464, 67.6667}, {1.465, 67.5}, {1.466, 67.3333}, {1.467, 67.1667}, {1.468, 67.0}, {1.469, 66.8333}, {1.47, 66.6667}, {1.471, 66.5}, {1.472, 66.3333}, {1.473, 66.1667}, {1.474, 66.0}, {1.475, 65.8333}, {1.476, 65.6667}, {1.477, 65.5}, {1.478, 65.3333}, {1.479, 65.1667}, {1.48, 65.0}, {1.481, 64.8333}, {1.482, 64.6667}, {1.483, 64.5}, {1.484, 64.3333}, {1.485, 64.1667}, {1.486, 64.0}, {1.487, 63.8333}, {1.488, 63.6667}, {1.489, 63.5}, {1.49, 63.3333}, {1.491, 63.1667}, {1.492, 63.0}, {1.493, 62.8333}, {1.494, 62.6667}, {1.495, 62.5}, {1.496, 62.3333}, {1.497, 62.1667}, {1.498, 62.0}, {1.499, 61.8333}, {1.5, 61.6667}, {1.501, 61.5}, {1.502, 61.3333}, {1.503, 61.1667}, {1.504, 61.0}, {1.505, 60.8333}, {1.506, 60.6667}, {1.507, 60.5}, {1.508, 60.3333}, {1.509, 60.1667}, {1.51, 60.0}, {1.511, 59.875}, {1.512, 59.75}, {1.513, 59.625}, {1.514, 59.5}, {1.515, 59.375}, {1.516, 59.25}, {1.517, 59.125}, {1.518, 59.0}, {1.519, 58.875}, {1.52, 58.75}, {1.521, 58.625}, {1.522, 58.5}, {1.523, 58.375}, {1.524, 58.25}, {1.525, 58.125}, {1.526, 58.0}, {1.527, 57.875}, {1.528, 57.75}, {1.529, 57.625}, {1.53, 57.5}, {1.531, 57.375}, {1.532, 57.25}, {1.533, 57.125}, {1.534, 57.0}, {1.535, 56.875}, {1.536, 56.75}, {1.537, 56.625}, {1.538, 56.5}, {1.539, 56.375}, {1.54, 56.25}, {1.541, 56.125}, {1.542, 56.0}, {1.543, 55.875}, {1.544, 55.75}, {1.545, 55.625}, {1.546, 55.5}, {1.547, 55.375}, {1.548, 55.25}, {1.549, 55.125}, {1.55, 55.0}, {1.551, 54.875}, {1.552, 54.75}, {1.553, 54.625}, {1.554, 54.5}, {1.555, 54.375}, {1.556, 54.25}, {1.557, 54.125}, {1.558, 54.0}, {1.559, 53.875}, {1.56, 53.75}, {1.561, 53.625}, {1.562, 53.5}, {1.563, 53.375}, {1.564, 53.25}, {1.565, 53.125}, {1.566, 53.0}, {1.567, 52.875}, {1.568, 52.75}, {1.569, 52.625}, {1.57, 52.5}, {1.571, 52.375}, {1.572, 52.25}, {1.573, 52.125}, {1.574, 52.0}, {1.575, 51.875}, {1.576, 51.75}, {1.577, 51.625}, {1.578, 51.5}, {1.579, 51.375}, {1.58, 51.25}, {1.581, 51.125}, {1.582, 51.0}, {1.583, 50.875}, {1.584, 50.75}, {1.585, 50.625}, {1.586, 50.5}, {1.587, 50.375}, {1.588, 50.25}, {1.589, 50.125}, {1.59, 50.0}, {1.591, 49.875}, {1.592, 49.75}, {1.593, 49.625}, {1.594, 49.5}, {1.595, 49.375}, {1.596, 49.25}, {1.597, 49.125}, {1.598, 49.0}, {1.599, 48.875}, {1.6, 48.75}, {1.601, 48.625}, {1.602, 48.5}, {1.603, 48.375}, {1.604, 48.25}, {1.605, 48.125}, {1.606, 48.0}, {1.607, 47.875}, {1.608, 47.75}, {1.609, 47.625}, {1.61, 47.5}, {1.611, 47.375}, {1.612, 47.25}, {1.613, 47.125}, {1.614, 47.0}, {1.615, 46.875}, {1.616, 46.75}, {1.617, 46.625}, {1.618, 46.5}, {1.619, 46.375}, {1.62, 46.25}, {1.621, 46.125}, {1.622, 46.0}, {1.623, 45.875}, {1.624, 45.75}, {1.625, 45.625}, {1.626, 45.5}, {1.627, 45.375}, {1.628, 45.25}, {1.629, 45.125}, {1.63, 45.0}, {1.631, 44.9}, {1.632, 44.8}, {1.633, 44.7}, {1.634, 44.6}, {1.635, 44.5}, {1.636, 44.4}, {1.637, 44.3}, {1.638, 44.2}, {1.639, 44.1}, {1.64, 44.0}, {1.641, 43.9}, {1.642, 43.8}, {1.643, 43.7}, {1.644, 43.6}, {1.645, 43.5}, {1.646, 43.4}, {1.647, 43.3}, {1.648, 43.2}, {1.649, 43.1}, {1.65, 43.0}, {1.651, 42.9}, {1.652, 42.8}, {1.653, 42.7}, {1.654, 42.6}, {1.655, 42.5}, {1.656, 42.4}, {1.657, 42.3}, {1.658, 42.2}, {1.659, 42.1}, {1.66, 42.0}, {1.661, 41.9}, {1.662, 41.8}, {1.663, 41.7}, {1.664, 41.6}, {1.665, 41.5}, {1.666, 41.4}, {1.667, 41.3}, {1.668, 41.2}, {1.669, 41.1}, {1.67, 41.0}, {1.671, 40.9}, {1.672, 40.8}, {1.673, 40.7}, {1.674, 40.6}, {1.675, 40.5}, {1.676, 40.4}, {1.677, 40.3}, {1.678, 40.2}, {1.679, 40.1}, {1.68, 40.0}, {1.681, 39.9167}, {1.682, 39.8333}, {1.683, 39.75}, {1.684, 39.6667}, {1.685, 39.5833}, {1.686, 39.5}, {1.687, 39.4167}, {1.688, 39.3333}, {1.689, 39.25}, {1.69, 39.1667}, {1.691, 39.0833}, {1.692, 39.0}, {1.693, 38.9167}, {1.694, 38.8333}, {1.695, 38.75}, {1.696, 38.6667}, {1.697, 38.5833}, {1.698, 38.5}, {1.699, 38.4167}, {1.7, 38.3333}, {1.701, 38.25}, {1.702, 38.1667}, {1.703, 38.0833}, {1.704, 38.0}, {1.705, 37.9167}, {1.706, 37.8333}, {1.707, 37.75}, {1.708, 37.6667}, {1.709, 37.5833}, {1.71, 37.5}, {1.711, 37.4167}, {1.712, 37.3333}, {1.713, 37.25}, {1.714, 37.1667}, {1.715, 37.0833}, {1.716, 37.0}, {1.717, 36.9167}, {1.718, 36.8333}, {1.719, 36.75}, {1.72, 36.6667}, {1.721, 36.5833}, {1.722, 36.5}, {1.723, 36.4167}, {1.724, 36.3333}, {1.725, 36.25}, {1.726, 36.1667}, {1.727, 36.0833}, {1.728, 36.0}, {1.729, 35.9167}, {1.73, 35.8333}, {1.731, 35.75}, {1.732, 35.6667}, {1.733, 35.5833}, {1.734, 35.5}, {1.735, 35.4167}, {1.736, 35.3333}, {1.737, 35.25}, {1.738, 35.1667}, {1.739, 35.0833}, {1.74, 35.0}, {1.741, 34.9167}, {1.742, 34.8333}, {1.743, 34.75}, {1.744, 34.6667}, {1.745, 34.5833}, {1.746, 34.5}, {1.747, 34.4167}, {1.748, 34.3333}, {1.749, 34.25}, {1.75, 34.1667}, {1.751, 34.0833}, {1.752, 34.0}, {1.753, 33.9167}, {1.754, 33.8333}, {1.755, 33.75}, {1.756, 33.6667}, {1.757, 33.5833}, {1.758, 33.5}, {1.759, 33.4167}, {1.76, 33.3333}, {1.761, 33.25}, {1.762, 33.1667}, {1.763, 33.0833}, {1.764, 33.0}, {1.765, 32.9167}, {1.766, 32.8333}, {1.767, 32.75}, {1.768, 32.6667}, {1.769, 32.5833}, {1.77, 32.5}, {1.771, 32.4167}, {1.772, 32.3333}, {1.773, 32.25}, {1.774, 32.1667}, {1.775, 32.0833}, {1.776, 32.0}, {1.777, 31.9167}, {1.778, 31.8333}, {1.779, 31.75}, {1.78, 31.6667}, {1.781, 31.5833}, {1.782, 31.5}, {1.783, 31.4167}, {1.784, 31.3333}, {1.785, 31.25}, {1.786, 31.1667}, {1.787, 31.0833}, {1.788, 31.0}, {1.789, 30.9167}, {1.79, 30.8333}, {1.791, 30.75}, {1.792, 30.6667}, {1.793, 30.5833}, {1.794, 30.5}, {1.795, 30.4167}, {1.796, 30.3333}, {1.797, 30.25}, {1.798, 30.1667}, {1.799, 30.0833}, {1.8, 30.0}, {1.801, 29.9167}, {1.802, 29.8333}, {1.803, 29.75}, {1.804, 29.6667}, {1.805, 29.5833}, {1.806, 29.5}, {1.807, 29.4167}, {1.808, 29.3333}, {1.809, 29.25}, {1.81, 29.1667}, {1.811, 29.0833}, {1.812, 29.0}, {1.813, 28.9167}, {1.814, 28.8333}, {1.815, 28.75}, {1.816, 28.6667}, {1.817, 28.5833}, {1.818, 28.5}, {1.819, 28.4167}, {1.82, 28.3333}, {1.821, 28.25}, {1.822, 28.1667}, {1.823, 28.0833}, {1.824, 28.0}, {1.825, 27.9167}, {1.826, 27.8333}, {1.827, 27.75}, {1.828, 27.6667}, {1.829, 27.5833}, {1.83, 27.5}, {1.831, 27.4167}, {1.832, 27.3333}, {1.833, 27.25}, {1.834, 27.1667}, {1.835, 27.0833}, {1.836, 27.0}, {1.837, 26.9167}, {1.838, 26.8333}, {1.839, 26.75}, {1.84, 26.6667}, {1.841, 26.5833}, {1.842, 26.5}, {1.843, 26.4167}, {1.844, 26.3333}, {1.845, 26.25}, {1.846, 26.1667}, {1.847, 26.0833}, {1.848, 26.0}, {1.849, 25.9167}, {1.85, 25.8333}, {1.851, 25.75}, {1.852, 25.6667}, {1.853, 25.5833}, {1.854, 25.5}, {1.855, 25.4167}, {1.856, 25.3333}, {1.857, 25.25}, {1.858, 25.1667}, {1.859, 25.0833}, {1.86, 25.0}, {1.861, 24.9167}, {1.862, 24.8333}, {1.863, 24.75}, {1.864, 24.6667}, {1.865, 24.5833}, {1.866, 24.5}, {1.867, 24.4167}, {1.868, 24.3333}, {1.869, 24.25}, {1.87, 24.1667}, {1.871, 24.0833}, {1.872, 24.0}, {1.873, 23.9167}, {1.874, 23.8333}, {1.875, 23.75}, {1.876, 23.6667}, {1.877, 23.5833}, {1.878, 23.5}, {1.879, 23.4167}, {1.88, 23.3333}, {1.881, 23.25}, {1.882, 23.1667}, {1.883, 23.0833}, {1.884, 23.0}, {1.885, 22.9167}, {1.886, 22.8333}, {1.887, 22.75}, {1.888, 22.6667}, {1.889, 22.5833}, {1.89, 22.5}, {1.891, 22.4167}, {1.892, 22.3333}, {1.893, 22.25}, {1.894, 22.1667}, {1.895, 22.0833}, {1.896, 22.0}, {1.897, 21.9167}, {1.898, 21.8333}, {1.899, 21.75}, {1.9, 21.6667}, {1.901, 21.5833}, {1.902, 21.5}, {1.903, 21.4167}, {1.904, 21.3333}, {1.905, 21.25}, {1.906, 21.1667}, {1.907, 21.0833}, {1.908, 21.0}, {1.909, 20.9167}, {1.91, 20.8333}, {1.911, 20.75}, {1.912, 20.6667}, {1.913, 20.5833}, {1.914, 20.5}, {1.915, 20.4167}, {1.916, 20.3333}, {1.917, 20.25}, {1.918, 20.1667}, {1.919, 20.0833}, {1.92, 20.0}, {1.921, 19.9286}, {1.922, 19.8571}, {1.923, 19.7857}, {1.924, 19.7143}, {1.925, 19.6429}, {1.926, 19.5714}, {1.927, 19.5}, {1.928, 19.4286}, {1.929, 19.3571}, {1.93, 19.2857}, {1.931, 19.2143}, {1.932, 19.1429}, {1.933, 19.0714}, {1.934, 19.0}, {1.935, 18.9286}, {1.936, 18.8571}, {1.937, 18.7857}, {1.938, 18.7143}, {1.939, 18.6429}, {1.94, 18.5714}, {1.941, 18.5}, {1.942, 18.4286}, {1.943, 18.3571}, {1.944, 18.2857}, {1.945, 18.2143}, {1.946, 18.1429}, {1.947, 18.0714}, {1.948, 18.0}, {1.949, 17.9286}, {1.95, 17.8571}, {1.951, 17.7857}, {1.952, 17.7143}, {1.953, 17.6429}, {1.954, 17.5714}, {1.955, 17.5}, {1.956, 17.4286}, {1.957, 17.3571}, {1.958, 17.2857}, {1.959, 17.2143}, {1.96, 17.1429}, {1.961, 17.0714}, {1.962, 17.0}, {1.963, 16.9286}, {1.964, 16.8571}, {1.965, 16.7857}, {1.966, 16.7143}, {1.967, 16.6429}, {1.968, 16.5714}, {1.969, 16.5}, {1.97, 16.4286}, {1.971, 16.3571}, {1.972, 16.2857}, {1.973, 16.2143}, {1.974, 16.1429}, {1.975, 16.0714}, {1.976, 16.0}, {1.977, 15.9286}, {1.978, 15.8571}, {1.979, 15.7857}, {1.98, 15.7143}, {1.981, 15.6429}, {1.982, 15.5714}, {1.983, 15.5}, {1.984, 15.4286}, {1.985, 15.3571}, {1.986, 15.2857}, {1.987, 15.2143}, {1.988, 15.1429}, {1.989, 15.0714}, {1.99, 15.0}, {1.991, 14.9167}, {1.992, 14.8333}, {1.993, 14.75}, {1.994, 14.6667}, {1.995, 14.5833}, {1.996, 14.5}, {1.997, 14.4167}, {1.998, 14.3333}, {1.999, 14.25}, {2.0, 14.1667}, {2.001, 14.0833}, {2.002, 14.0}, {2.003, 13.9167}, {2.004, 13.8333}, {2.005, 13.75}, {2.006, 13.6667}, {2.007, 13.5833}, {2.008, 13.5}, {2.009, 13.4167}, {2.01, 13.3333}, {2.011, 13.25}, {2.012, 13.1667}, {2.013, 13.0833}, {2.014, 13.0}, {2.015, 12.9167}, {2.016, 12.8333}, {2.017, 12.75}, {2.018, 12.6667}, {2.019, 12.5833}, {2.02, 12.5}, {2.021, 12.4167}, {2.022, 12.3333}, {2.023, 12.25}, {2.024, 12.1667}, {2.025, 12.0833}, {2.026, 12.0}, {2.027, 11.9167}, {2.028, 11.8333}, {2.029, 11.75}, {2.03, 11.6667}, {2.031, 11.5833}, {2.032, 11.5}, {2.033, 11.4167}, {2.034, 11.3333}, {2.035, 11.25}, {2.036, 11.1667}, {2.037, 11.0833}, {2.038, 11.0}, {2.039, 10.9167}, {2.04, 10.8333}, {2.041, 10.75}, {2.042, 10.6667}, {2.043, 10.5833}, {2.044, 10.5}, {2.045, 10.4167}, {2.046, 10.3333}, {2.047, 10.25}, {2.048, 10.1667}, {2.049, 10.0833}, {2.05, 10.0}, {2.051, 9.9167}, {2.052, 9.8333}, {2.053, 9.75}, {2.054, 9.6667}, {2.055, 9.5833}, {2.056, 9.5}, {2.057, 9.4167}, {2.058, 9.3333}, {2.059, 9.25}, {2.06, 9.1667}, {2.061, 9.0833}, {2.062, 9.0}, {2.063, 8.9167}, {2.064, 8.8333}, {2.065, 8.75}, {2.066, 8.6667}, {2.067, 8.5833}, {2.068, 8.5}, {2.069, 8.4167}, {2.07, 8.3333}, {2.071, 8.25}, {2.072, 8.1667}, {2.073, 8.0833}, {2.074, 8.0}, {2.075, 7.9167}, {2.076, 7.8333}, {2.077, 7.75}, {2.078, 7.6667}, {2.079, 7.5833}, {2.08, 7.5}, {2.081, 7.4167}, {2.082, 7.3333}, {2.083, 7.25}, {2.084, 7.1667}, {2.085, 7.0833}, {2.086, 7.0}, {2.087, 6.9167}, {2.088, 6.8333}, {2.089, 6.75}, {2.09, 6.6667}, {2.091, 6.5833}, {2.092, 6.5}, {2.093, 6.4167}, {2.094, 6.3333}, {2.095, 6.25}, {2.096, 6.1667}, {2.097, 6.0833}, {2.098, 6.0}, {2.099, 5.9167}, {2.1, 5.8333}, {2.101, 5.75}, {2.102, 5.6667}, {2.103, 5.5833}, {2.104, 5.5}, {2.105, 5.4167}, {2.106, 5.3333}, {2.107, 5.25}, {2.108, 5.1667}, {2.109, 5.0833}, {2.11, 5.0}, {2.111, 4.9167}, {2.112, 4.8333}, {2.113, 4.75}, {2.114, 4.6667}, {2.115, 4.5833}, {2.116, 4.5}, {2.117, 4.4167}, {2.118, 4.3333}, {2.119, 4.25}, {2.12, 4.1667}, {2.121, 4.0833}, {2.122, 4.0}, {2.123, 3.9167}, {2.124, 3.8333}, {2.125, 3.75}, {2.126, 3.6667}, {2.127, 3.5833}, {2.128, 3.5}, {2.129, 3.4167}, {2.13, 3.3333}, {2.131, 3.25}, {2.132, 3.1667}, {2.133, 3.0833}, {2.134, 3.0}, {2.135, 2.9167}, {2.136, 2.8333}, {2.137, 2.75}, {2.138, 2.6667}, {2.139, 2.5833}, {2.14, 2.5}, {2.141, 2.4167}, {2.142, 2.3333}, {2.143, 2.25}, {2.144, 2.1667}, {2.145, 2.0833}, {2.146, 2.0}, {2.147, 1.9167}, {2.148, 1.8333}, {2.149, 1.75}, {2.15, 1.6667}, {2.151, 1.5833}, {2.152, 1.5}, {2.153, 1.4167}, {2.154, 1.3333}, {2.155, 1.25}, {2.156, 1.1667}, {2.157, 1.0833}, {2.158, 1.0}, {2.159, 0.9167}, {2.16, 0.8333}, {2.161, 0.75}, {2.162, 0.6667}, {2.163, 0.5833}, {2.164, 0.5}, {2.165, 0.4167}, {2.166, 0.3333}, {2.167, 0.25}, {2.168, 0.1667}, {2.169, 0.0833}, {2.17, 0.0}, {2.171, -0.0833}, {2.172, -0.1667}, {2.173, -0.25}, {2.174, -0.3333}, {2.175, -0.4167}, {2.176, -0.5}, {2.177, -0.5833}, {2.178, -0.6667}, {2.179, -0.75}, {2.18, -0.8333}, {2.181, -0.9167}, {2.182, -1.0}, {2.183, -1.0833}, {2.184, -1.1667}, {2.185, -1.25}, {2.186, -1.3333}, {2.187, -1.4167}, {2.188, -1.5}, {2.189, -1.5833}, {2.19, -1.6667}, {2.191, -1.75}, {2.192, -1.8333}, {2.193, -1.9167}, {2.194, -2.0}, {2.195, -2.0833}, {2.196, -2.1667}, {2.197, -2.25}, {2.198, -2.3333}, {2.199, -2.4167}, {2.2, -2.5}, {2.201, -2.5833}, {2.202, -2.6667}, {2.203, -2.75}, {2.204, -2.8333}, {2.205, -2.9167}, {2.206, -3.0}, {2.207, -3.0833}, {2.208, -3.1667}, {2.209, -3.25}, {2.21, -3.3333}, {2.211, -3.4167}, {2.212, -3.5}, {2.213, -3.5833}, {2.214, -3.6667}, {2.215, -3.75}, {2.216, -3.8333}, {2.217, -3.9167}, {2.218, -4.0}, {2.219, -4.0833}, {2.22, -4.1667}, {2.221, -4.25}, {2.222, -4.3333}, {2.223, -4.4167}, {2.224, -4.5}, {2.225, -4.5833}, {2.226, -4.6667}, {2.227, -4.75}, {2.228, -4.8333}, {2.229, -4.9167}, {2.23, -5.0}, {2.231, -5.125}, {2.232, -5.25}, {2.233, -5.375}, {2.234, -5.5}, {2.235, -5.625}, {2.236, -5.75}, {2.237, -5.875}, {2.238, -6.0}, {2.239, -6.125}, {2.24, -6.25}, {2.241, -6.375}, {2.242, -6.5}, {2.243, -6.625}, {2.244, -6.75}, {2.245, -6.875}, {2.246, -7.0}, {2.247, -7.125}, {2.248, -7.25}, {2.249, -7.375}, {2.25, -7.5}, {2.251, -7.625}, {2.252, -7.75}, {2.253, -7.875}, {2.254, -8.0}, {2.255, -8.125}, {2.256, -8.25}, {2.257, -8.375}, {2.258, -8.5}, {2.259, -8.625}, {2.26, -8.75}, {2.261, -8.875}, {2.262, -9.0}, {2.263, -9.125}, {2.264, -9.25}, {2.265, -9.375}, {2.266, -9.5}, {2.267, -9.625}, {2.268, -9.75}, {2.269, -9.875}, {2.27, -10.0}, {2.271, -10.1}, {2.272, -10.2}, {2.273, -10.3}, {2.274, -10.4}, {2.275, -10.5}, {2.276, -10.6}, {2.277, -10.7}, {2.278, -10.8}, {2.279, -10.9}, {2.28, -11.0}, {2.281, -11.1}, {2.282, -11.2}, {2.283, -11.3}, {2.284, -11.4}, {2.285, -11.5}, {2.286, -11.6}, {2.287, -11.7}, {2.288, -11.8}, {2.289, -11.9}, {2.29, -12.0}, {2.291, -12.1}, {2.292, -12.2}, {2.293, -12.3}, {2.294, -12.4}, {2.295, -12.5}, {2.296, -12.6}, {2.297, -12.7}, {2.298, -12.8}, {2.299, -12.9}, {2.3, -13.0}, {2.301, -13.1}, {2.302, -13.2}, {2.303, -13.3}, {2.304, -13.4}, {2.305, -13.5}, {2.306, -13.6}, {2.307, -13.7}, {2.308, -13.8}, {2.309, -13.9}, {2.31, -14.0}, {2.311, -14.1}, {2.312, -14.2}, {2.313, -14.3}, {2.314, -14.4}, {2.315, -14.5}, {2.316, -14.6}, {2.317, -14.7}, {2.318, -14.8}, {2.319, -14.9}, {2.32, -15.0}, {2.321, -15.1667}, {2.322, -15.3333}, {2.323, -15.5}, {2.324, -15.6667}, {2.325, -15.8333}, {2.326, -16.0}, {2.327, -16.1667}, {2.328, -16.3333}, {2.329, -16.5}, {2.33, -16.6667}, {2.331, -16.8333}, {2.332, -17.0}, {2.333, -17.1667}, {2.334, -17.3333}, {2.335, -17.5}, {2.336, -17.6667}, {2.337, -17.8333}, {2.338, -18.0}, {2.339, -18.1667}, {2.34, -18.3333}, {2.341, -18.5}, {2.342, -18.6667}, {2.343, -18.8333}, {2.344, -19.0}, {2.345, -19.1667}, {2.346, -19.3333}, {2.347, -19.5}, {2.348, -19.6667}, {2.349, -19.8333}, {2.35, -20.0}, {2.351, -20.1667}, {2.352, -20.3333}, {2.353, -20.5}, {2.354, -20.6667}, {2.355, -20.8333}, {2.356, -21.0}, {2.357, -21.1667}, {2.358, -21.3333}, {2.359, -21.5}, {2.36, -21.6667}, {2.361, -21.8333}, {2.362, -22.0}, {2.363, -22.1667}, {2.364, -22.3333}, {2.365, -22.5}, {2.366, -22.6667}, {2.367, -22.8333}, {2.368, -23.0}, {2.369, -23.1667}, {2.37, -23.3333}, {2.371, -23.5}, {2.372, -23.6667}, {2.373, -23.8333}, {2.374, -24.0}, {2.375, -24.1667}, {2.376, -24.3333}, {2.377, -24.5}, {2.378, -24.6667}, {2.379, -24.8333}, {2.38, -25.0}, {2.381, -25.25}, {2.382, -25.5}, {2.383, -25.75}, {2.384, -26.0}, {2.385, -26.25}, {2.386, -26.5}, {2.387, -26.75}, {2.388, -27.0}, {2.389, -27.25}, {2.39, -27.5}, {2.391, -27.75}, {2.392, -28.0}, {2.393, -28.25}, {2.394, -28.5}, {2.395, -28.75}, {2.396, -29.0}, {2.397, -29.25}, {2.398, -29.5}, {2.399, -29.75}, {2.4, -30.0}, {2.401, -30.25}, {2.402, -30.5}, {2.403, -30.75}, {2.404, -31.0}, {2.405, -31.25}, {2.406, -31.5}, {2.407, -31.75}, {2.408, -32.0}, {2.409, -32.25}, {2.41, -32.5}, {2.411, -32.75}, {2.412, -33.0}, {2.413, -33.25}, {2.414, -33.5}, {2.415, -33.75}, {2.416, -34.0}, {2.417, -34.25}, {2.418, -34.5}, {2.419, -34.75}, {2.42, -35.0}, {2.421, -35.25}, {2.422, -35.5}, {2.423, -35.75}, {2.424, -36.0}, {2.425, -36.25}, {2.426, -36.5}, {2.427, -36.75}, {2.428, -37.0}, {2.429, -37.25}, {2.43, -37.5}, {2.431, -37.75}, {2.432, -38.0}, {2.433, -38.25}, {2.434, -38.5}, {2.435, -38.75}, {2.436, -39.0}, {2.437, -39.25}, {2.438, -39.5}, {2.439, -39.75}, {2.44, -40.0}};

// ********************************** Functions **********************************

float FEB_LTC6811_Temp_LUT_Get_Temperature(float voltage) {
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	ed87 0a01 	vstr	s0, [r7, #4]
	if (voltage < FEB_LTC6811_TEMP_LUT_MIN_MAP_VOLT || voltage > FEB_LTC6811_TEMP_LUT_MAX_MAP_VOLT) {
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7fd fea4 	bl	8000588 <__aeabi_f2d>
 8002840:	a323      	add	r3, pc, #140	; (adr r3, 80028d0 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xa0>)
 8002842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002846:	f7fe f969 	bl	8000b1c <__aeabi_dcmplt>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10a      	bne.n	8002866 <FEB_LTC6811_Temp_LUT_Get_Temperature+0x36>
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7fd fe99 	bl	8000588 <__aeabi_f2d>
 8002856:	a324      	add	r3, pc, #144	; (adr r3, 80028e8 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xb8>)
 8002858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285c:	f7fe f97c 	bl	8000b58 <__aeabi_dcmpgt>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <FEB_LTC6811_Temp_LUT_Get_Temperature+0x3a>
		return -42.0;
 8002866:	4b1e      	ldr	r3, [pc, #120]	; (80028e0 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xb0>)
 8002868:	e028      	b.n	80028bc <FEB_LTC6811_Temp_LUT_Get_Temperature+0x8c>
	}
	uint16_t index = (uint16_t) round((voltage - FEB_LTC6811_TEMP_LUT_MIN_MAP_VOLT) / FEB_LTC6811_TEMP_LUT_RESOLUTION);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7fd fe8c 	bl	8000588 <__aeabi_f2d>
 8002870:	a317      	add	r3, pc, #92	; (adr r3, 80028d0 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xa0>)
 8002872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002876:	f7fd fd27 	bl	80002c8 <__aeabi_dsub>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	a315      	add	r3, pc, #84	; (adr r3, 80028d8 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xa8>)
 8002884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002888:	f7fe f800 	bl	800088c <__aeabi_ddiv>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	ec43 2b17 	vmov	d7, r2, r3
 8002894:	eeb0 0a47 	vmov.f32	s0, s14
 8002898:	eef0 0a67 	vmov.f32	s1, s15
 800289c:	f009 fdbc 	bl	800c418 <round>
 80028a0:	ec53 2b10 	vmov	r2, r3, d0
 80028a4:	4610      	mov	r0, r2
 80028a6:	4619      	mov	r1, r3
 80028a8:	f7fe f99e 	bl	8000be8 <__aeabi_d2uiz>
 80028ac:	4603      	mov	r3, r0
 80028ae:	81fb      	strh	r3, [r7, #14]
	return FEB_LTC6811_Temp_Map[index][1];
 80028b0:	89fb      	ldrh	r3, [r7, #14]
 80028b2:	4a0c      	ldr	r2, [pc, #48]	; (80028e4 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xb4>)
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4413      	add	r3, r2
 80028b8:	3304      	adds	r3, #4
 80028ba:	681b      	ldr	r3, [r3, #0]
}
 80028bc:	ee07 3a90 	vmov	s15, r3
 80028c0:	eeb0 0a67 	vmov.f32	s0, s15
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	f3af 8000 	nop.w
 80028d0:	cccccccd 	.word	0xcccccccd
 80028d4:	3ff4cccc 	.word	0x3ff4cccc
 80028d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80028dc:	3f50624d 	.word	0x3f50624d
 80028e0:	c2280000 	.word	0xc2280000
 80028e4:	20000048 	.word	0x20000048
 80028e8:	b851eb85 	.word	0xb851eb85
 80028ec:	4003851e 	.word	0x4003851e

080028f0 <FEB_Math_Uint32_To_Signed_Long>:

#include "FEB_Math.h"

// ********************************** Functions **********************************

long FEB_Math_Uint32_To_Signed_Long(uint32_t value) {
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
	return (value & 0x7FFFFFFF) - (value & (0b1 << 31));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80028fe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
}
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <FEB_Math_Uint16_To_Int16>:

int16_t FEB_Math_Uint16_To_Int16(uint16_t value) {
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	4603      	mov	r3, r0
 8002916:	80fb      	strh	r3, [r7, #6]
	return (value & 0x7FFF) - (value & (0b1 << 15));
 8002918:	88fb      	ldrh	r3, [r7, #6]
 800291a:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 800291e:	f483 037f 	eor.w	r3, r3, #16711680	; 0xff0000
 8002922:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 8002926:	b29b      	uxth	r3, r3
 8002928:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800292c:	b29b      	uxth	r3, r3
 800292e:	b21b      	sxth	r3, r3
}
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <FEB_Timer_Init>:

extern TIM_HandleTypeDef htim4;

// ********************************** Initialize **********************************

void FEB_Timer_Init(void) {
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim4);
 8002940:	4802      	ldr	r0, [pc, #8]	; (800294c <FEB_Timer_Init+0x10>)
 8002942:	f005 fb85 	bl	8008050 <HAL_TIM_Base_Start>
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20002a84 	.word	0x20002a84

08002950 <FEB_Timer_Delay_Micro>:

// ********************************** Functions **********************************

void FEB_Timer_Delay_Micro(uint16_t delay) {
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <FEB_Timer_Delay_Micro+0x30>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2200      	movs	r2, #0
 8002960:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 8002962:	bf00      	nop
 8002964:	4b06      	ldr	r3, [pc, #24]	; (8002980 <FEB_Timer_Delay_Micro+0x30>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	429a      	cmp	r2, r3
 800296e:	d3f9      	bcc.n	8002964 <FEB_Timer_Delay_Micro+0x14>
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	20002a84 	.word	0x20002a84

08002984 <LTC6811_init_reg_limits>:

/* Initialize the Register limits */
void LTC6811_init_reg_limits(uint8_t total_ic, //The number of ICs in the system
							cell_asic *ic  //A two dimensional array where data will be written
							)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	6039      	str	r1, [r7, #0]
 800298e:	71fb      	strb	r3, [r7, #7]
  for (uint8_t cic=0; cic<total_ic; cic++)
 8002990:	2300      	movs	r3, #0
 8002992:	73fb      	strb	r3, [r7, #15]
 8002994:	e038      	b.n	8002a08 <LTC6811_init_reg_limits+0x84>
  {
    ic[cic].ic_reg.cell_channels=12;
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	22e8      	movs	r2, #232	; 0xe8
 800299a:	fb02 f303 	mul.w	r3, r2, r3
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	4413      	add	r3, r2
 80029a2:	220c      	movs	r2, #12
 80029a4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    ic[cic].ic_reg.stat_channels=4;
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	22e8      	movs	r2, #232	; 0xe8
 80029ac:	fb02 f303 	mul.w	r3, r2, r3
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	4413      	add	r3, r2
 80029b4:	2204      	movs	r2, #4
 80029b6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    ic[cic].ic_reg.aux_channels=6;
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	22e8      	movs	r2, #232	; 0xe8
 80029be:	fb02 f303 	mul.w	r3, r2, r3
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	4413      	add	r3, r2
 80029c6:	2206      	movs	r2, #6
 80029c8:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
    ic[cic].ic_reg.num_cv_reg=4;
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	22e8      	movs	r2, #232	; 0xe8
 80029d0:	fb02 f303 	mul.w	r3, r2, r3
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	4413      	add	r3, r2
 80029d8:	2204      	movs	r2, #4
 80029da:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
    ic[cic].ic_reg.num_gpio_reg=2;
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	22e8      	movs	r2, #232	; 0xe8
 80029e2:	fb02 f303 	mul.w	r3, r2, r3
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	4413      	add	r3, r2
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    ic[cic].ic_reg.num_stat_reg=3;
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	22e8      	movs	r2, #232	; 0xe8
 80029f4:	fb02 f303 	mul.w	r3, r2, r3
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	4413      	add	r3, r2
 80029fc:	2203      	movs	r2, #3
 80029fe:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
  for (uint8_t cic=0; cic<total_ic; cic++)
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	3301      	adds	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
 8002a08:	7bfa      	ldrb	r2, [r7, #15]
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d3c2      	bcc.n	8002996 <LTC6811_init_reg_limits+0x12>
  }
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <LTC6811_wrcfg>:
order so the last device's configuration is written first.
*/
void LTC6811_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic *ic //A two dimensional array of the configuration data that will be written
                  )
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	4603      	mov	r3, r0
 8002a26:	6039      	str	r1, [r7, #0]
 8002a28:	71fb      	strb	r3, [r7, #7]
  LTC681x_wrcfg(total_ic,ic);
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	6839      	ldr	r1, [r7, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 f9c4 	bl	8002dbc <LTC681x_wrcfg>
}
 8002a34:	bf00      	nop
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <LTC6811_adcv>:
/* Starts cell voltage conversion */
void LTC6811_adcv(uint8_t MD, //ADC Mode
				  uint8_t DCP, //Discharge Permit
				  uint8_t CH //Cell Channels to be measured
				  )
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	71fb      	strb	r3, [r7, #7]
 8002a46:	460b      	mov	r3, r1
 8002a48:	71bb      	strb	r3, [r7, #6]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	717b      	strb	r3, [r7, #5]
  LTC681x_adcv(MD,DCP,CH);
 8002a4e:	797a      	ldrb	r2, [r7, #5]
 8002a50:	79b9      	ldrb	r1, [r7, #6]
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 fa30 	bl	8002eba <LTC681x_adcv>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <LTC6811_adax>:

/* Start a GPIO and Vref2 Conversion */
void LTC6811_adax(uint8_t MD, //ADC Mode
				  uint8_t CHG //GPIO Channels to be measured
				  )
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	4603      	mov	r3, r0
 8002a6a:	460a      	mov	r2, r1
 8002a6c:	71fb      	strb	r3, [r7, #7]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	71bb      	strb	r3, [r7, #6]
  LTC681x_adax(MD,CHG);
 8002a72:	79ba      	ldrb	r2, [r7, #6]
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 fa49 	bl	8002f10 <LTC681x_adax>
}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <LTC6811_rdcv>:
*/
uint8_t LTC6811_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // The number of ICs in the system
                     cell_asic *ic // Array of the parsed cell codes
                    )
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b084      	sub	sp, #16
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	603a      	str	r2, [r7, #0]
 8002a90:	71fb      	strb	r3, [r7, #7]
 8002a92:	460b      	mov	r3, r1
 8002a94:	71bb      	strb	r3, [r7, #6]
  int8_t pec_error = 0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	73fb      	strb	r3, [r7, #15]
  pec_error = LTC681x_rdcv(reg,total_ic,ic);
 8002a9a:	79b9      	ldrb	r1, [r7, #6]
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 fa5a 	bl	8002f5a <LTC681x_rdcv>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	73fb      	strb	r3, [r7, #15]
  return(pec_error);
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <LTC6811_rdaux>:
*/
int8_t LTC6811_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
                     uint8_t total_ic,//The number of ICs in the system
                     cell_asic *ic//A two dimensional array of the gpio voltage codes.
                     )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	603a      	str	r2, [r7, #0]
 8002abe:	71fb      	strb	r3, [r7, #7]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	71bb      	strb	r3, [r7, #6]
  int8_t pec_error = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	73fb      	strb	r3, [r7, #15]
  LTC681x_rdaux(reg,total_ic,ic);
 8002ac8:	79b9      	ldrb	r1, [r7, #6]
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 faf7 	bl	80030c2 <LTC681x_rdaux>
  return (pec_error);
 8002ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <LTC6811_pollAdc>:
  return(LTC681x_pladc());
}

//This function will block operation until the ADC has finished it's conversion */
uint32_t LTC6811_pollAdc()
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  return(LTC681x_pollAdc());
 8002ae4:	f000 fcb8 	bl	8003458 <LTC681x_pollAdc>
 8002ae8:	4603      	mov	r3, r0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	bd80      	pop	{r7, pc}

08002aee <LTC6811_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC6811_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that will store the data
							 )
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	4603      	mov	r3, r0
 8002af6:	6039      	str	r1, [r7, #0]
 8002af8:	71fb      	strb	r3, [r7, #7]
  LTC681x_reset_crc_count(total_ic,ic);
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	6839      	ldr	r1, [r7, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 fe92 	bl	8003828 <LTC681x_reset_crc_count>
}
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <LTC6811_init_cfg>:

/* Helper function to initialize CFG variables.*/
void LTC6811_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that will store the data
					  )
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	6039      	str	r1, [r7, #0]
 8002b16:	71fb      	strb	r3, [r7, #7]
  LTC681x_init_cfg(total_ic,ic);
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	6839      	ldr	r1, [r7, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 fee9 	bl	80038f4 <LTC681x_init_cfg>
}
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <LTC6811_set_cfgr>:
					  bool dcc[12],// The DCC bit
					  bool dcto[4],// The Dcto bit
					  uint16_t uv, // The UV bit
					  uint16_t  ov // The OV bit
					  )
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b088      	sub	sp, #32
 8002b2e:	af06      	add	r7, sp, #24
 8002b30:	6039      	str	r1, [r7, #0]
 8002b32:	4611      	mov	r1, r2
 8002b34:	461a      	mov	r2, r3
 8002b36:	4603      	mov	r3, r0
 8002b38:	71fb      	strb	r3, [r7, #7]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	71bb      	strb	r3, [r7, #6]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	717b      	strb	r3, [r7, #5]
  LTC681x_set_cfgr(nIC ,ic,refon,adcopt,gpio,dcc,dcto, uv, ov);
 8002b42:	7979      	ldrb	r1, [r7, #5]
 8002b44:	79ba      	ldrb	r2, [r7, #6]
 8002b46:	79f8      	ldrb	r0, [r7, #7]
 8002b48:	8c3b      	ldrh	r3, [r7, #32]
 8002b4a:	9304      	str	r3, [sp, #16]
 8002b4c:	8bbb      	ldrh	r3, [r7, #28]
 8002b4e:	9303      	str	r3, [sp, #12]
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	9302      	str	r3, [sp, #8]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	9301      	str	r3, [sp, #4]
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	6839      	ldr	r1, [r7, #0]
 8002b60:	f000 fef2 	bl	8003948 <LTC681x_set_cfgr>
}
 8002b64:	bf00      	nop
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <wakeup_idle>:
                                0x585a, 0x8ba7, 0x4e3e, 0x450c, 0x8095
                               };

/* Wake isoSPI up from IDlE state and enters the READY state */
void wakeup_idle(uint8_t total_ic) //Number of ICs in the system
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<total_ic; i++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	e00b      	b.n	8002b94 <wakeup_idle+0x28>
	{
	   cs_low(CS_PIN);
 8002b7c:	200a      	movs	r0, #10
 8002b7e:	f001 f93d 	bl	8003dfc <cs_low>
	   spi_read_byte(0xff);//Guarantees the isoSPI will be in ready mode
 8002b82:	20ff      	movs	r0, #255	; 0xff
 8002b84:	f001 f9b0 	bl	8003ee8 <spi_read_byte>
	   cs_high(CS_PIN);
 8002b88:	200a      	movs	r0, #10
 8002b8a:	f001 f947 	bl	8003e1c <cs_high>
	for (int i =0; i<total_ic; i++)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	3301      	adds	r3, #1
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	dbef      	blt.n	8002b7c <wakeup_idle+0x10>
	}
}
 8002b9c:	bf00      	nop
 8002b9e:	bf00      	nop
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <wakeup_sleep>:

/* Generic wakeup command to wake the LTC681x from sleep state */
void wakeup_sleep(uint8_t total_ic) //Number of ICs in the system
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	4603      	mov	r3, r0
 8002bae:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<total_ic; i++)
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	e00f      	b.n	8002bd6 <wakeup_sleep+0x30>
	{
	   cs_low(CS_PIN);
 8002bb6:	200a      	movs	r0, #10
 8002bb8:	f001 f920 	bl	8003dfc <cs_low>
	   delay_u(300); // Guarantees the LTC681x will be in standby
 8002bbc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002bc0:	f001 f93c 	bl	8003e3c <delay_u>
	   cs_high(CS_PIN);
 8002bc4:	200a      	movs	r0, #10
 8002bc6:	f001 f929 	bl	8003e1c <cs_high>
	   delay_u(10);
 8002bca:	200a      	movs	r0, #10
 8002bcc:	f001 f936 	bl	8003e3c <delay_u>
	for (int i =0; i<total_ic; i++)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	dbeb      	blt.n	8002bb6 <wakeup_sleep+0x10>
	}
}
 8002bde:	bf00      	nop
 8002be0:	bf00      	nop
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <cmd_68>:

/* Generic function to write 68xx commands. Function calculates PEC for tx_cmd data. */
void cmd_68(uint8_t tx_cmd[2]) //The command to be transmitted
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	cmd[0] = tx_cmd[0];
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	723b      	strb	r3, [r7, #8]
	cmd[1] =  tx_cmd[1];
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	785b      	ldrb	r3, [r3, #1]
 8002bfa:	727b      	strb	r3, [r7, #9]
	cmd_pec = pec15_calc(2, cmd);
 8002bfc:	f107 0308 	add.w	r3, r7, #8
 8002c00:	4619      	mov	r1, r3
 8002c02:	2002      	movs	r0, #2
 8002c04:	f000 f8a6 	bl	8002d54 <pec15_calc>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8002c0c:	89fb      	ldrh	r3, [r7, #14]
 8002c0e:	0a1b      	lsrs	r3, r3, #8
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8002c16:	89fb      	ldrh	r3, [r7, #14]
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 8002c1c:	200a      	movs	r0, #10
 8002c1e:	f001 f8ed 	bl	8003dfc <cs_low>
	spi_write_array(4,cmd);
 8002c22:	f107 0308 	add.w	r3, r7, #8
 8002c26:	4619      	mov	r1, r3
 8002c28:	2004      	movs	r0, #4
 8002c2a:	f001 f913 	bl	8003e54 <spi_write_array>
	cs_high(CS_PIN);
 8002c2e:	200a      	movs	r0, #10
 8002c30:	f001 f8f4 	bl	8003e1c <cs_high>
}
 8002c34:	bf00      	nop
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
			  uint8_t tx_cmd[2], //The command to be transmitted
			  uint8_t data[] // Payload Data
			  )
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	73fb      	strb	r3, [r7, #15]
	const uint8_t BYTES_IN_REG = 6;
 8002c4a:	2306      	movs	r3, #6
 8002c4c:	773b      	strb	r3, [r7, #28]
	const uint8_t CMD_LEN = 4+(8*total_ic);
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	3304      	adds	r3, #4
 8002c56:	76fb      	strb	r3, [r7, #27]
	uint8_t *cmd;
	uint16_t data_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index;

	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8002c58:	7efb      	ldrb	r3, [r7, #27]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f006 fcd6 	bl	800960c <malloc>
 8002c60:	4603      	mov	r3, r0
 8002c62:	617b      	str	r3, [r7, #20]
	cmd[0] = tx_cmd[0];
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	781a      	ldrb	r2, [r3, #0]
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	701a      	strb	r2, [r3, #0]
	cmd[1] = tx_cmd[1];
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	7852      	ldrb	r2, [r2, #1]
 8002c74:	701a      	strb	r2, [r3, #0]
	cmd_pec = pec15_calc(2, cmd);
 8002c76:	6979      	ldr	r1, [r7, #20]
 8002c78:	2002      	movs	r0, #2
 8002c7a:	f000 f86b 	bl	8002d54 <pec15_calc>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8002c82:	8a7b      	ldrh	r3, [r7, #18]
 8002c84:	0a1b      	lsrs	r3, r3, #8
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t)(cmd_pec);
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	3303      	adds	r3, #3
 8002c94:	8a7a      	ldrh	r2, [r7, #18]
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 8002c9a:	2304      	movs	r3, #4
 8002c9c:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each LTC681x, this loops starts with the last IC on the stack.
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	77bb      	strb	r3, [r7, #30]
 8002ca2:	e042      	b.n	8002d2a <write_68+0xee>
    {	                                                                            //The first configuration written is received by the last IC in the daisy chain
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	777b      	strb	r3, [r7, #29]
 8002ca8:	e016      	b.n	8002cd8 <write_68+0x9c>
		{
			cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 8002caa:	7fbb      	ldrb	r3, [r7, #30]
 8002cac:	1e5a      	subs	r2, r3, #1
 8002cae:	4613      	mov	r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	4413      	add	r3, r2
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	7f7b      	ldrb	r3, [r7, #29]
 8002cba:	4413      	add	r3, r2
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	441a      	add	r2, r3
 8002cc2:	7ffb      	ldrb	r3, [r7, #31]
 8002cc4:	6979      	ldr	r1, [r7, #20]
 8002cc6:	440b      	add	r3, r1
 8002cc8:	7812      	ldrb	r2, [r2, #0]
 8002cca:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 8002ccc:	7ffb      	ldrb	r3, [r7, #31]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8002cd2:	7f7b      	ldrb	r3, [r7, #29]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	777b      	strb	r3, [r7, #29]
 8002cd8:	7f7a      	ldrb	r2, [r7, #29]
 8002cda:	7f3b      	ldrb	r3, [r7, #28]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d3e4      	bcc.n	8002caa <write_68+0x6e>
		}

		data_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &data[(current_ic-1)*6]);    // Calculating the PEC for each ICs configuration register data
 8002ce0:	7fbb      	ldrb	r3, [r7, #30]
 8002ce2:	1e5a      	subs	r2, r3, #1
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	4413      	add	r3, r2
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	461a      	mov	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	441a      	add	r2, r3
 8002cf2:	7f3b      	ldrb	r3, [r7, #28]
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 f82c 	bl	8002d54 <pec15_calc>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	823b      	strh	r3, [r7, #16]
		cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 8002d00:	8a3b      	ldrh	r3, [r7, #16]
 8002d02:	0a1b      	lsrs	r3, r3, #8
 8002d04:	b299      	uxth	r1, r3
 8002d06:	7ffb      	ldrb	r3, [r7, #31]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	b2ca      	uxtb	r2, r1
 8002d0e:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t)data_pec;
 8002d10:	7ffb      	ldrb	r3, [r7, #31]
 8002d12:	3301      	adds	r3, #1
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	4413      	add	r3, r2
 8002d18:	8a3a      	ldrh	r2, [r7, #16]
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 8002d1e:	7ffb      	ldrb	r3, [r7, #31]
 8002d20:	3302      	adds	r3, #2
 8002d22:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each LTC681x, this loops starts with the last IC on the stack.
 8002d24:	7fbb      	ldrb	r3, [r7, #30]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	77bb      	strb	r3, [r7, #30]
 8002d2a:	7fbb      	ldrb	r3, [r7, #30]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1b9      	bne.n	8002ca4 <write_68+0x68>
	}

	cs_low(CS_PIN);
 8002d30:	200a      	movs	r0, #10
 8002d32:	f001 f863 	bl	8003dfc <cs_low>
	spi_write_array(CMD_LEN, cmd);
 8002d36:	7efb      	ldrb	r3, [r7, #27]
 8002d38:	6979      	ldr	r1, [r7, #20]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f001 f88a 	bl	8003e54 <spi_write_array>
	cs_high(CS_PIN);
 8002d40:	200a      	movs	r0, #10
 8002d42:	f001 f86b 	bl	8003e1c <cs_high>

	free(cmd);
 8002d46:	6978      	ldr	r0, [r7, #20]
 8002d48:	f006 fc68 	bl	800961c <free>
}
 8002d4c:	bf00      	nop
 8002d4e:	3720      	adds	r7, #32
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <pec15_calc>:

/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	6039      	str	r1, [r7, #0]
 8002d5e:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder,addr;
	remainder = 16;//initialize the PEC
 8002d60:	2310      	movs	r3, #16
 8002d62:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8002d64:	2300      	movs	r3, #0
 8002d66:	737b      	strb	r3, [r7, #13]
 8002d68:	e019      	b.n	8002d9e <pec15_calc+0x4a>
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 8002d6a:	89fb      	ldrh	r3, [r7, #14]
 8002d6c:	09db      	lsrs	r3, r3, #7
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	7b7b      	ldrb	r3, [r7, #13]
 8002d72:	6839      	ldr	r1, [r7, #0]
 8002d74:	440b      	add	r3, r1
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	4053      	eors	r3, r2
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	817b      	strh	r3, [r7, #10]
		remainder = (remainder<<8)^crc15Table[addr];
 8002d82:	89fb      	ldrh	r3, [r7, #14]
 8002d84:	021b      	lsls	r3, r3, #8
 8002d86:	b21a      	sxth	r2, r3
 8002d88:	897b      	ldrh	r3, [r7, #10]
 8002d8a:	490b      	ldr	r1, [pc, #44]	; (8002db8 <pec15_calc+0x64>)
 8002d8c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002d90:	b21b      	sxth	r3, r3
 8002d92:	4053      	eors	r3, r2
 8002d94:	b21b      	sxth	r3, r3
 8002d96:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8002d98:	7b7b      	ldrb	r3, [r7, #13]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	737b      	strb	r3, [r7, #13]
 8002d9e:	7b7a      	ldrb	r2, [r7, #13]
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d3e1      	bcc.n	8002d6a <pec15_calc+0x16>
	}

	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8002da6:	89fb      	ldrh	r3, [r7, #14]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	b29b      	uxth	r3, r3
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	0800c64c 	.word	0x0800c64c

08002dbc <LTC681x_wrcfg>:

/* Write the LTC681x CFGRA */
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[]  // A two dimensional array of the configuration data that will be written
                  )
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b0c4      	sub	sp, #272	; 0x110
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002dc8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002dcc:	6019      	str	r1, [r3, #0]
 8002dce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002dd2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002dd6:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = {0x00 , 0x01} ;
 8002dd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ddc:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t c_ic = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8002dec:	2300      	movs	r3, #0
 8002dee:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8002df2:	e048      	b.n	8002e86 <LTC681x_wrcfg+0xca>
	{
		if (ic->isospi_reverse == false)
 8002df4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002df8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8002e02:	f083 0301 	eor.w	r3, r3, #1
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d004      	beq.n	8002e16 <LTC681x_wrcfg+0x5a>
		{
			c_ic = current_ic;
 8002e0c:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002e10:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8002e14:	e00b      	b.n	8002e2e <LTC681x_wrcfg+0x72>
		}
		else
		{
			c_ic = total_ic - current_ic - 1;
 8002e16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e1a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002e1e:	781a      	ldrb	r2, [r3, #0]
 8002e20:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
		}

		for (uint8_t data = 0; data<6; data++)
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8002e34:	e01e      	b.n	8002e74 <LTC681x_wrcfg+0xb8>
		{
			write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 8002e36:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8002e3a:	22e8      	movs	r2, #232	; 0xe8
 8002e3c:	fb02 f303 	mul.w	r3, r2, r3
 8002e40:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002e44:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	18d1      	adds	r1, r2, r3
 8002e4c:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8002e50:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002e54:	5c89      	ldrb	r1, [r1, r2]
 8002e56:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002e5a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8002e5e:	54d1      	strb	r1, [r2, r3]
			write_count++;
 8002e60:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002e64:	3301      	adds	r3, #1
 8002e66:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		for (uint8_t data = 0; data<6; data++)
 8002e6a:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8002e6e:	3301      	adds	r3, #1
 8002e70:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8002e74:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8002e78:	2b05      	cmp	r3, #5
 8002e7a:	d9dc      	bls.n	8002e36 <LTC681x_wrcfg+0x7a>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8002e7c:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002e80:	3301      	adds	r3, #1
 8002e82:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8002e86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e8a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002e8e:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d3ad      	bcc.n	8002df4 <LTC681x_wrcfg+0x38>
		}
	}
	write_68(total_ic, cmd, write_buffer);
 8002e98:	f107 0208 	add.w	r2, r7, #8
 8002e9c:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002ea0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002ea4:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fec6 	bl	8002c3c <write_68>
}
 8002eb0:	bf00      	nop
 8002eb2:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <LTC681x_adcv>:
/* Starts ADC conversion for cell voltage */
void LTC681x_adcv( uint8_t MD, //ADC Mode
				   uint8_t DCP, //Discharge Permit
				   uint8_t CH //Cell Channels to be measured
                 )
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	71fb      	strb	r3, [r7, #7]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	71bb      	strb	r3, [r7, #6]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[2];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	105b      	asrs	r3, r3, #1
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
 8002eda:	3302      	adds	r3, #2
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	733b      	strb	r3, [r7, #12]
	md_bits = (MD & 0x01) << 7;
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	01db      	lsls	r3, r3, #7
 8002ee4:	73fb      	strb	r3, [r7, #15]
	cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8002ee6:	79bb      	ldrb	r3, [r7, #6]
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	4413      	add	r3, r2
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	797b      	ldrb	r3, [r7, #5]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	3360      	adds	r3, #96	; 0x60
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	737b      	strb	r3, [r7, #13]

	cmd_68(cmd);
 8002efe:	f107 030c 	add.w	r3, r7, #12
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff fe70 	bl	8002be8 <cmd_68>
}
 8002f08:	bf00      	nop
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <LTC681x_adax>:

/* Start ADC Conversion for GPIO and Vref2  */
void LTC681x_adax(uint8_t MD, //ADC Mode
				  uint8_t CHG //GPIO Channels to be measured
				  )
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	460a      	mov	r2, r1
 8002f1a:	71fb      	strb	r3, [r7, #7]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	105b      	asrs	r3, r3, #1
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	3304      	adds	r3, #4
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	01db      	lsls	r3, r3, #7
 8002f38:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG ;
 8002f3a:	7bfa      	ldrb	r2, [r7, #15]
 8002f3c:	79bb      	ldrb	r3, [r7, #6]
 8002f3e:	4413      	add	r3, r2
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	3360      	adds	r3, #96	; 0x60
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	727b      	strb	r3, [r7, #9]

	cmd_68(cmd);
 8002f48:	f107 0308 	add.w	r3, r7, #8
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fe4b 	bl	8002be8 <cmd_68>
}
 8002f52:	bf00      	nop
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <LTC681x_rdcv>:
*/
uint8_t LTC681x_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // The number of ICs in the system
                     cell_asic *ic // Array of the parsed cell codes
                    )
{
 8002f5a:	b5b0      	push	{r4, r5, r7, lr}
 8002f5c:	b088      	sub	sp, #32
 8002f5e:	af02      	add	r7, sp, #8
 8002f60:	4603      	mov	r3, r0
 8002f62:	603a      	str	r2, [r7, #0]
 8002f64:	71fb      	strb	r3, [r7, #7]
 8002f66:	460b      	mov	r3, r1
 8002f68:	71bb      	strb	r3, [r7, #6]
	int8_t pec_error = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	75fb      	strb	r3, [r7, #23]
	uint8_t *cell_data;
	uint8_t c_ic = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	75bb      	strb	r3, [r7, #22]
	cell_data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8002f72:	79bb      	ldrb	r3, [r7, #6]
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	4618      	mov	r0, r3
 8002f78:	f006 fb48 	bl	800960c <malloc>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	60bb      	str	r3, [r7, #8]

	if (reg == 0)
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d14b      	bne.n	800301e <LTC681x_rdcv+0xc4>
	{
		for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8002f86:	2301      	movs	r3, #1
 8002f88:	757b      	strb	r3, [r7, #21]
 8002f8a:	e041      	b.n	8003010 <LTC681x_rdcv+0xb6>
		{
			LTC681x_rdcv_reg(cell_reg, total_ic,cell_data );
 8002f8c:	79b9      	ldrb	r1, [r7, #6]
 8002f8e:	7d7b      	ldrb	r3, [r7, #21]
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 f93d 	bl	8003212 <LTC681x_rdcv_reg>
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002f98:	2300      	movs	r3, #0
 8002f9a:	613b      	str	r3, [r7, #16]
 8002f9c:	e031      	b.n	8003002 <LTC681x_rdcv+0xa8>
			{
			if (ic->isospi_reverse == false)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8002fa4:	f083 0301 	eor.w	r3, r3, #1
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <LTC681x_rdcv+0x5a>
			{
			  c_ic = current_ic;
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	75bb      	strb	r3, [r7, #22]
 8002fb2:	e006      	b.n	8002fc2 <LTC681x_rdcv+0x68>
			}
			else
			{
			  c_ic = total_ic - current_ic - 1;
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	79ba      	ldrb	r2, [r7, #6]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	b2d8      	uxtb	r0, r3
												&ic[c_ic].cells.c_codes[0],
 8002fc6:	7dbb      	ldrb	r3, [r7, #22]
 8002fc8:	22e8      	movs	r2, #232	; 0xe8
 8002fca:	fb02 f303 	mul.w	r3, r2, r3
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8002fd2:	f103 041e 	add.w	r4, r3, #30
												&ic[c_ic].cells.pec_match[0]);
 8002fd6:	7dbb      	ldrb	r3, [r7, #22]
 8002fd8:	22e8      	movs	r2, #232	; 0xe8
 8002fda:	fb02 f303 	mul.w	r3, r2, r3
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8002fe2:	3342      	adds	r3, #66	; 0x42
 8002fe4:	7d79      	ldrb	r1, [r7, #21]
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	4623      	mov	r3, r4
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	f000 f9c2 	bl	8003374 <parse_cells>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	7dfb      	ldrb	r3, [r7, #23]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	75fb      	strb	r3, [r7, #23]
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	3301      	adds	r3, #1
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	79bb      	ldrb	r3, [r7, #6]
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	429a      	cmp	r2, r3
 8003008:	dbc9      	blt.n	8002f9e <LTC681x_rdcv+0x44>
		for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 800300a:	7d7b      	ldrb	r3, [r7, #21]
 800300c:	3301      	adds	r3, #1
 800300e:	757b      	strb	r3, [r7, #21]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8003016:	7d7a      	ldrb	r2, [r7, #21]
 8003018:	429a      	cmp	r2, r3
 800301a:	d9b7      	bls.n	8002f8c <LTC681x_rdcv+0x32>
 800301c:	e043      	b.n	80030a6 <LTC681x_rdcv+0x14c>
		}
	}

	else
	{
		LTC681x_rdcv_reg(reg, total_ic,cell_data);
 800301e:	79b9      	ldrb	r1, [r7, #6]
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	4618      	mov	r0, r3
 8003026:	f000 f8f4 	bl	8003212 <LTC681x_rdcv_reg>

		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	e036      	b.n	800309e <LTC681x_rdcv+0x144>
		{
			if (ic->isospi_reverse == false)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8003036:	f083 0301 	eor.w	r3, r3, #1
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <LTC681x_rdcv+0xec>
			{
			c_ic = current_ic;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	75bb      	strb	r3, [r7, #22]
 8003044:	e006      	b.n	8003054 <LTC681x_rdcv+0xfa>
			}
			else
			{
			c_ic = total_ic - current_ic - 1;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	79ba      	ldrb	r2, [r7, #6]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	b2d8      	uxtb	r0, r3
 8003058:	7dbb      	ldrb	r3, [r7, #22]
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	461a      	mov	r2, r3
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	189c      	adds	r4, r3, r2
											  &ic[c_ic].cells.c_codes[0],
 8003062:	7dbb      	ldrb	r3, [r7, #22]
 8003064:	22e8      	movs	r2, #232	; 0xe8
 8003066:	fb02 f303 	mul.w	r3, r2, r3
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 800306e:	f103 051e 	add.w	r5, r3, #30
											  &ic[c_ic].cells.pec_match[0]);
 8003072:	7dbb      	ldrb	r3, [r7, #22]
 8003074:	22e8      	movs	r2, #232	; 0xe8
 8003076:	fb02 f303 	mul.w	r3, r2, r3
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 800307e:	3342      	adds	r3, #66	; 0x42
 8003080:	79f9      	ldrb	r1, [r7, #7]
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	462b      	mov	r3, r5
 8003086:	4622      	mov	r2, r4
 8003088:	f000 f974 	bl	8003374 <parse_cells>
 800308c:	4603      	mov	r3, r0
 800308e:	b2da      	uxtb	r2, r3
 8003090:	7dfb      	ldrb	r3, [r7, #23]
 8003092:	4413      	add	r3, r2
 8003094:	b2db      	uxtb	r3, r3
 8003096:	75fb      	strb	r3, [r7, #23]
		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	3301      	adds	r3, #1
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	79bb      	ldrb	r3, [r7, #6]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	dbc4      	blt.n	8003030 <LTC681x_rdcv+0xd6>
		}
	}
	LTC681x_check_pec(total_ic,CELL,ic);
 80030a6:	79bb      	ldrb	r3, [r7, #6]
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	2101      	movs	r1, #1
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fa17 	bl	80034e0 <LTC681x_check_pec>
	free(cell_data);
 80030b2:	68b8      	ldr	r0, [r7, #8]
 80030b4:	f006 fab2 	bl	800961c <free>

	return(pec_error);
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bdb0      	pop	{r4, r5, r7, pc}

080030c2 <LTC681x_rdaux>:
*/
int8_t LTC681x_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
                     uint8_t total_ic,//The number of ICs in the system
                     cell_asic *ic//A two dimensional array of the gpio voltage codes.
                    )
{
 80030c2:	b590      	push	{r4, r7, lr}
 80030c4:	b089      	sub	sp, #36	; 0x24
 80030c6:	af02      	add	r7, sp, #8
 80030c8:	4603      	mov	r3, r0
 80030ca:	603a      	str	r2, [r7, #0]
 80030cc:	71fb      	strb	r3, [r7, #7]
 80030ce:	460b      	mov	r3, r1
 80030d0:	71bb      	strb	r3, [r7, #6]
	uint8_t *data;
	int8_t pec_error = 0;
 80030d2:	2300      	movs	r3, #0
 80030d4:	75fb      	strb	r3, [r7, #23]
	uint8_t c_ic =0;
 80030d6:	2300      	movs	r3, #0
 80030d8:	75bb      	strb	r3, [r7, #22]
	data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 80030da:	79bb      	ldrb	r3, [r7, #6]
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4618      	mov	r0, r3
 80030e0:	f006 fa94 	bl	800960c <malloc>
 80030e4:	4603      	mov	r3, r0
 80030e6:	60bb      	str	r3, [r7, #8]

	if (reg == 0)
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d147      	bne.n	800317e <LTC681x_rdaux+0xbc>
	{
		for (uint8_t gpio_reg = 1; gpio_reg<ic[0].ic_reg.num_gpio_reg+1; gpio_reg++) //Executes once for each of the LTC681x aux voltage registers
 80030ee:	2301      	movs	r3, #1
 80030f0:	757b      	strb	r3, [r7, #21]
 80030f2:	e03d      	b.n	8003170 <LTC681x_rdaux+0xae>
		{
			LTC681x_rdaux_reg(gpio_reg, total_ic,data);                 //Reads the raw auxiliary register data into the data[] array
 80030f4:	79b9      	ldrb	r1, [r7, #6]
 80030f6:	7d7b      	ldrb	r3, [r7, #21]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 f8e7 	bl	80032ce <LTC681x_rdaux_reg>
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8003100:	2300      	movs	r3, #0
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	e02d      	b.n	8003162 <LTC681x_rdaux+0xa0>
			{
				if (ic->isospi_reverse == false)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 800310c:	f083 0301 	eor.w	r3, r3, #1
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <LTC681x_rdaux+0x5a>
				{
				  c_ic = current_ic;
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	75bb      	strb	r3, [r7, #22]
 800311a:	e006      	b.n	800312a <LTC681x_rdaux+0x68>
				}
				else
				{
				  c_ic = total_ic - current_ic - 1;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	b2db      	uxtb	r3, r3
 8003120:	79ba      	ldrb	r2, [r7, #6]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	b2db      	uxtb	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	75bb      	strb	r3, [r7, #22]
				}
				pec_error = parse_cells(current_ic,gpio_reg, data,
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	b2d8      	uxtb	r0, r3
										&ic[c_ic].aux.a_codes[0],
 800312e:	7dbb      	ldrb	r3, [r7, #22]
 8003130:	22e8      	movs	r2, #232	; 0xe8
 8003132:	fb02 f303 	mul.w	r3, r2, r3
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	4413      	add	r3, r2
				pec_error = parse_cells(current_ic,gpio_reg, data,
 800313a:	f103 0448 	add.w	r4, r3, #72	; 0x48
										&ic[c_ic].aux.pec_match[0]);
 800313e:	7dbb      	ldrb	r3, [r7, #22]
 8003140:	22e8      	movs	r2, #232	; 0xe8
 8003142:	fb02 f303 	mul.w	r3, r2, r3
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	4413      	add	r3, r2
				pec_error = parse_cells(current_ic,gpio_reg, data,
 800314a:	335a      	adds	r3, #90	; 0x5a
 800314c:	7d79      	ldrb	r1, [r7, #21]
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	4623      	mov	r3, r4
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	f000 f90e 	bl	8003374 <parse_cells>
 8003158:	4603      	mov	r3, r0
 800315a:	75fb      	strb	r3, [r7, #23]
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	3301      	adds	r3, #1
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	79bb      	ldrb	r3, [r7, #6]
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	429a      	cmp	r2, r3
 8003168:	dbcd      	blt.n	8003106 <LTC681x_rdaux+0x44>
		for (uint8_t gpio_reg = 1; gpio_reg<ic[0].ic_reg.num_gpio_reg+1; gpio_reg++) //Executes once for each of the LTC681x aux voltage registers
 800316a:	7d7b      	ldrb	r3, [r7, #21]
 800316c:	3301      	adds	r3, #1
 800316e:	757b      	strb	r3, [r7, #21]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8003176:	7d7a      	ldrb	r2, [r7, #21]
 8003178:	429a      	cmp	r2, r3
 800317a:	d9bb      	bls.n	80030f4 <LTC681x_rdaux+0x32>
 800317c:	e03a      	b.n	80031f4 <LTC681x_rdaux+0x132>
			}
		}
	}
	else
	{
		LTC681x_rdaux_reg(reg, total_ic, data);
 800317e:	79b9      	ldrb	r1, [r7, #6]
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	4618      	mov	r0, r3
 8003186:	f000 f8a2 	bl	80032ce <LTC681x_rdaux_reg>

		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	e02d      	b.n	80031ec <LTC681x_rdaux+0x12a>
		{
			if (ic->isospi_reverse == false)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8003196:	f083 0301 	eor.w	r3, r3, #1
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <LTC681x_rdaux+0xe4>
			{
			c_ic = current_ic;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	75bb      	strb	r3, [r7, #22]
 80031a4:	e006      	b.n	80031b4 <LTC681x_rdaux+0xf2>
			}
			else
			{
			c_ic = total_ic - current_ic - 1;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	79ba      	ldrb	r2, [r7, #6]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = parse_cells(current_ic,reg, data,
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	b2d8      	uxtb	r0, r3
								  &ic[c_ic].aux.a_codes[0],
 80031b8:	7dbb      	ldrb	r3, [r7, #22]
 80031ba:	22e8      	movs	r2, #232	; 0xe8
 80031bc:	fb02 f303 	mul.w	r3, r2, r3
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	4413      	add	r3, r2
			pec_error = parse_cells(current_ic,reg, data,
 80031c4:	f103 0448 	add.w	r4, r3, #72	; 0x48
								  &ic[c_ic].aux.pec_match[0]);
 80031c8:	7dbb      	ldrb	r3, [r7, #22]
 80031ca:	22e8      	movs	r2, #232	; 0xe8
 80031cc:	fb02 f303 	mul.w	r3, r2, r3
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	4413      	add	r3, r2
			pec_error = parse_cells(current_ic,reg, data,
 80031d4:	335a      	adds	r3, #90	; 0x5a
 80031d6:	79f9      	ldrb	r1, [r7, #7]
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	4623      	mov	r3, r4
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	f000 f8c9 	bl	8003374 <parse_cells>
 80031e2:	4603      	mov	r3, r0
 80031e4:	75fb      	strb	r3, [r7, #23]
		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	3301      	adds	r3, #1
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	79bb      	ldrb	r3, [r7, #6]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	dbcd      	blt.n	8003190 <LTC681x_rdaux+0xce>
		}
	}
	LTC681x_check_pec(total_ic,AUX,ic);
 80031f4:	79bb      	ldrb	r3, [r7, #6]
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	2102      	movs	r1, #2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 f970 	bl	80034e0 <LTC681x_check_pec>
	free(data);
 8003200:	68b8      	ldr	r0, [r7, #8]
 8003202:	f006 fa0b 	bl	800961c <free>

	return (pec_error);
 8003206:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800320a:	4618      	mov	r0, r3
 800320c:	371c      	adds	r7, #28
 800320e:	46bd      	mov	sp, r7
 8003210:	bd90      	pop	{r4, r7, pc}

08003212 <LTC681x_rdcv_reg>:
/* Writes the command and reads the raw cell voltage register data */
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
                      uint8_t total_ic, //the number of ICs in the
                      uint8_t *data //An array of the unparsed cell codes
                     )
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	4603      	mov	r3, r0
 800321a:	603a      	str	r2, [r7, #0]
 800321c:	71fb      	strb	r3, [r7, #7]
 800321e:	460b      	mov	r3, r1
 8003220:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; //Number of bytes in each ICs register + 2 bytes for the PEC
 8003222:	2308      	movs	r3, #8
 8003224:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //1: RDCVA
 8003226:	79fb      	ldrb	r3, [r7, #7]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d104      	bne.n	8003236 <LTC681x_rdcv_reg+0x24>
	{
		cmd[1] = 0x04;
 800322c:	2304      	movs	r3, #4
 800322e:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003230:	2300      	movs	r3, #0
 8003232:	723b      	strb	r3, [r7, #8]
 8003234:	e026      	b.n	8003284 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 2) //2: RDCVB
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	2b02      	cmp	r3, #2
 800323a:	d104      	bne.n	8003246 <LTC681x_rdcv_reg+0x34>
	{
		cmd[1] = 0x06;
 800323c:	2306      	movs	r3, #6
 800323e:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003240:	2300      	movs	r3, #0
 8003242:	723b      	strb	r3, [r7, #8]
 8003244:	e01e      	b.n	8003284 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 3) //3: RDCVC
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	2b03      	cmp	r3, #3
 800324a:	d104      	bne.n	8003256 <LTC681x_rdcv_reg+0x44>
	{
		cmd[1] = 0x08;
 800324c:	2308      	movs	r3, #8
 800324e:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003250:	2300      	movs	r3, #0
 8003252:	723b      	strb	r3, [r7, #8]
 8003254:	e016      	b.n	8003284 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 4) //4: RDCVD
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	2b04      	cmp	r3, #4
 800325a:	d104      	bne.n	8003266 <LTC681x_rdcv_reg+0x54>
	{
		cmd[1] = 0x0A;
 800325c:	230a      	movs	r3, #10
 800325e:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003260:	2300      	movs	r3, #0
 8003262:	723b      	strb	r3, [r7, #8]
 8003264:	e00e      	b.n	8003284 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 5) //4: RDCVE
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	2b05      	cmp	r3, #5
 800326a:	d104      	bne.n	8003276 <LTC681x_rdcv_reg+0x64>
	{
		cmd[1] = 0x09;
 800326c:	2309      	movs	r3, #9
 800326e:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003270:	2300      	movs	r3, #0
 8003272:	723b      	strb	r3, [r7, #8]
 8003274:	e006      	b.n	8003284 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 6) //4: RDCVF
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	2b06      	cmp	r3, #6
 800327a:	d103      	bne.n	8003284 <LTC681x_rdcv_reg+0x72>
	{
		cmd[1] = 0x0B;
 800327c:	230b      	movs	r3, #11
 800327e:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003280:	2300      	movs	r3, #0
 8003282:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 8003284:	f107 0308 	add.w	r3, r7, #8
 8003288:	4619      	mov	r1, r3
 800328a:	2002      	movs	r0, #2
 800328c:	f7ff fd62 	bl	8002d54 <pec15_calc>
 8003290:	4603      	mov	r3, r0
 8003292:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8003294:	89bb      	ldrh	r3, [r7, #12]
 8003296:	0a1b      	lsrs	r3, r3, #8
 8003298:	b29b      	uxth	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 800329e:	89bb      	ldrh	r3, [r7, #12]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 80032a4:	200a      	movs	r0, #10
 80032a6:	f000 fda9 	bl	8003dfc <cs_low>
	spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 80032aa:	7bfa      	ldrb	r2, [r7, #15]
 80032ac:	79bb      	ldrb	r3, [r7, #6]
 80032ae:	fb12 f303 	smulbb	r3, r2, r3
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f107 0008 	add.w	r0, r7, #8
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	2104      	movs	r1, #4
 80032bc:	f000 fdde 	bl	8003e7c <spi_write_read>
	cs_high(CS_PIN);
 80032c0:	200a      	movs	r0, #10
 80032c2:	f000 fdab 	bl	8003e1c <cs_high>
}
 80032c6:	bf00      	nop
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <LTC681x_rdaux_reg>:
*/
void LTC681x_rdaux_reg(uint8_t reg, //Determines which GPIO voltage register is read back
                       uint8_t total_ic, //The number of ICs in the system
                       uint8_t *data //Array of the unparsed auxiliary codes
                      )
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b084      	sub	sp, #16
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	4603      	mov	r3, r0
 80032d6:	603a      	str	r2, [r7, #0]
 80032d8:	71fb      	strb	r3, [r7, #7]
 80032da:	460b      	mov	r3, r1
 80032dc:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; // Number of bytes in the register + 2 bytes for the PEC
 80032de:	2308      	movs	r3, #8
 80032e0:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //Read back auxiliary group A
 80032e2:	79fb      	ldrb	r3, [r7, #7]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d104      	bne.n	80032f2 <LTC681x_rdaux_reg+0x24>
	{
		cmd[1] = 0x0C;
 80032e8:	230c      	movs	r3, #12
 80032ea:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80032ec:	2300      	movs	r3, #0
 80032ee:	723b      	strb	r3, [r7, #8]
 80032f0:	e01b      	b.n	800332a <LTC681x_rdaux_reg+0x5c>
	}
	else if (reg == 2)  //Read back auxiliary group B
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d104      	bne.n	8003302 <LTC681x_rdaux_reg+0x34>
	{
		cmd[1] = 0x0E;
 80032f8:	230e      	movs	r3, #14
 80032fa:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80032fc:	2300      	movs	r3, #0
 80032fe:	723b      	strb	r3, [r7, #8]
 8003300:	e013      	b.n	800332a <LTC681x_rdaux_reg+0x5c>
	}
	else if (reg == 3)  //Read back auxiliary group C
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	2b03      	cmp	r3, #3
 8003306:	d104      	bne.n	8003312 <LTC681x_rdaux_reg+0x44>
	{
		cmd[1] = 0x0D;
 8003308:	230d      	movs	r3, #13
 800330a:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800330c:	2300      	movs	r3, #0
 800330e:	723b      	strb	r3, [r7, #8]
 8003310:	e00b      	b.n	800332a <LTC681x_rdaux_reg+0x5c>
	}
	else if (reg == 4)  //Read back auxiliary group D
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	2b04      	cmp	r3, #4
 8003316:	d104      	bne.n	8003322 <LTC681x_rdaux_reg+0x54>
	{
		cmd[1] = 0x0F;
 8003318:	230f      	movs	r3, #15
 800331a:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800331c:	2300      	movs	r3, #0
 800331e:	723b      	strb	r3, [r7, #8]
 8003320:	e003      	b.n	800332a <LTC681x_rdaux_reg+0x5c>
	}
	else          //Read back auxiliary group A
	{
		cmd[1] = 0x0C;
 8003322:	230c      	movs	r3, #12
 8003324:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003326:	2300      	movs	r3, #0
 8003328:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 800332a:	f107 0308 	add.w	r3, r7, #8
 800332e:	4619      	mov	r1, r3
 8003330:	2002      	movs	r0, #2
 8003332:	f7ff fd0f 	bl	8002d54 <pec15_calc>
 8003336:	4603      	mov	r3, r0
 8003338:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 800333a:	89bb      	ldrh	r3, [r7, #12]
 800333c:	0a1b      	lsrs	r3, r3, #8
 800333e:	b29b      	uxth	r3, r3
 8003340:	b2db      	uxtb	r3, r3
 8003342:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8003344:	89bb      	ldrh	r3, [r7, #12]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 800334a:	200a      	movs	r0, #10
 800334c:	f000 fd56 	bl	8003dfc <cs_low>
	spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 8003350:	7bfa      	ldrb	r2, [r7, #15]
 8003352:	79bb      	ldrb	r3, [r7, #6]
 8003354:	fb12 f303 	smulbb	r3, r2, r3
 8003358:	b2db      	uxtb	r3, r3
 800335a:	f107 0008 	add.w	r0, r7, #8
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	2104      	movs	r1, #4
 8003362:	f000 fd8b 	bl	8003e7c <spi_write_read>
	cs_high(CS_PIN);
 8003366:	200a      	movs	r0, #10
 8003368:	f000 fd58 	bl	8003e1c <cs_high>
}
 800336c:	bf00      	nop
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <parse_cells>:
					uint8_t cell_reg,  // Type of register
					uint8_t cell_data[], // Unparsed data
					uint16_t *cell_codes, // Parsed data
					uint8_t *ic_pec // PEC error
					)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af00      	add	r7, sp, #0
 800337a:	60ba      	str	r2, [r7, #8]
 800337c:	607b      	str	r3, [r7, #4]
 800337e:	4603      	mov	r3, r0
 8003380:	73fb      	strb	r3, [r7, #15]
 8003382:	460b      	mov	r3, r1
 8003384:	73bb      	strb	r3, [r7, #14]
	const uint8_t BYT_IN_REG = 6;
 8003386:	2306      	movs	r3, #6
 8003388:	773b      	strb	r3, [r7, #28]
	const uint8_t CELL_IN_REG = 3;
 800338a:	2303      	movs	r3, #3
 800338c:	76fb      	strb	r3, [r7, #27]
	int8_t pec_error = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	77fb      	strb	r3, [r7, #31]
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = current_ic*NUM_RX_BYT; //data counter
 8003392:	7bfb      	ldrb	r3, [r7, #15]
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	77bb      	strb	r3, [r7, #30]


	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8003398:	2300      	movs	r3, #0
 800339a:	777b      	strb	r3, [r7, #29]
 800339c:	e020      	b.n	80033e0 <parse_cells+0x6c>
	{																		// loops once for each of the 3 codes in the register

		parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each code is received as two bytes and is combined to
 800339e:	7fbb      	ldrb	r3, [r7, #30]
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	4413      	add	r3, r2
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	7fbb      	ldrb	r3, [r7, #30]
 80033aa:	3301      	adds	r3, #1
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	440b      	add	r3, r1
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	021b      	lsls	r3, r3, #8
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	4413      	add	r3, r2
 80033ba:	82bb      	strh	r3, [r7, #20]
																				   // create the parsed code
		cell_codes[current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 80033bc:	7f7a      	ldrb	r2, [r7, #29]
 80033be:	7bbb      	ldrb	r3, [r7, #14]
 80033c0:	3b01      	subs	r3, #1
 80033c2:	7ef9      	ldrb	r1, [r7, #27]
 80033c4:	fb01 f303 	mul.w	r3, r1, r3
 80033c8:	4413      	add	r3, r2
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	4413      	add	r3, r2
 80033d0:	8aba      	ldrh	r2, [r7, #20]
 80033d2:	801a      	strh	r2, [r3, #0]

		data_counter = data_counter + 2;                       //Because the codes are two bytes, the data counter
 80033d4:	7fbb      	ldrb	r3, [r7, #30]
 80033d6:	3302      	adds	r3, #2
 80033d8:	77bb      	strb	r3, [r7, #30]
	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 80033da:	7f7b      	ldrb	r3, [r7, #29]
 80033dc:	3301      	adds	r3, #1
 80033de:	777b      	strb	r3, [r7, #29]
 80033e0:	7f7a      	ldrb	r2, [r7, #29]
 80033e2:	7efb      	ldrb	r3, [r7, #27]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d3da      	bcc.n	800339e <parse_cells+0x2a>
															  //must increment by two for each parsed code
	}
	received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 80033e8:	7fbb      	ldrb	r3, [r7, #30]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	4413      	add	r3, r2
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	021b      	lsls	r3, r3, #8
 80033f2:	b21a      	sxth	r2, r3
 80033f4:	7fbb      	ldrb	r3, [r7, #30]
 80033f6:	3301      	adds	r3, #1
 80033f8:	68b9      	ldr	r1, [r7, #8]
 80033fa:	440b      	add	r3, r1
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	b21b      	sxth	r3, r3
 8003400:	4313      	orrs	r3, r2
 8003402:	b21b      	sxth	r3, r3
 8003404:	833b      	strh	r3, [r7, #24]
																			   //after the 6 cell voltage data bytes
	data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	461a      	mov	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	441a      	add	r2, r3
 8003410:	7f3b      	ldrb	r3, [r7, #28]
 8003412:	4611      	mov	r1, r2
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff fc9d 	bl	8002d54 <pec15_calc>
 800341a:	4603      	mov	r3, r0
 800341c:	82fb      	strh	r3, [r7, #22]

	if (received_pec != data_pec)
 800341e:	8b3a      	ldrh	r2, [r7, #24]
 8003420:	8afb      	ldrh	r3, [r7, #22]
 8003422:	429a      	cmp	r2, r3
 8003424:	d008      	beq.n	8003438 <parse_cells+0xc4>
	{
		pec_error = 1;                             //The pec_error variable is simply set negative if any PEC errors
 8003426:	2301      	movs	r3, #1
 8003428:	77fb      	strb	r3, [r7, #31]
		ic_pec[cell_reg-1]=1;
 800342a:	7bbb      	ldrb	r3, [r7, #14]
 800342c:	3b01      	subs	r3, #1
 800342e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003430:	4413      	add	r3, r2
 8003432:	2201      	movs	r2, #1
 8003434:	701a      	strb	r2, [r3, #0]
 8003436:	e005      	b.n	8003444 <parse_cells+0xd0>
	}
	else
	{
		ic_pec[cell_reg-1]=0;
 8003438:	7bbb      	ldrb	r3, [r7, #14]
 800343a:	3b01      	subs	r3, #1
 800343c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800343e:	4413      	add	r3, r2
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]
	}
	data_counter=data_counter+2;
 8003444:	7fbb      	ldrb	r3, [r7, #30]
 8003446:	3302      	adds	r3, #2
 8003448:	77bb      	strb	r3, [r7, #30]

	return(pec_error);
 800344a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3720      	adds	r7, #32
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <LTC681x_pollAdc>:
	return(adc_state);
}

/* This function will block operation until the ADC has finished it's conversion */
uint32_t LTC681x_pollAdc()
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 8003462:	2300      	movs	r3, #0
 8003464:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 8003466:	2300      	movs	r3, #0
 8003468:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 800346a:	2307      	movs	r3, #7
 800346c:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 800346e:	2314      	movs	r3, #20
 8003470:	717b      	strb	r3, [r7, #5]
	cmd_pec = pec15_calc(2, cmd);
 8003472:	1d3b      	adds	r3, r7, #4
 8003474:	4619      	mov	r1, r3
 8003476:	2002      	movs	r0, #2
 8003478:	f7ff fc6c 	bl	8002d54 <pec15_calc>
 800347c:	4603      	mov	r3, r0
 800347e:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8003480:	893b      	ldrh	r3, [r7, #8]
 8003482:	0a1b      	lsrs	r3, r3, #8
 8003484:	b29b      	uxth	r3, r3
 8003486:	b2db      	uxtb	r3, r3
 8003488:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t)(cmd_pec);
 800348a:	893b      	ldrh	r3, [r7, #8]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	71fb      	strb	r3, [r7, #7]

	cs_low(CS_PIN);
 8003490:	200a      	movs	r0, #10
 8003492:	f000 fcb3 	bl	8003dfc <cs_low>
	spi_write_array(4,cmd);
 8003496:	1d3b      	adds	r3, r7, #4
 8003498:	4619      	mov	r1, r3
 800349a:	2004      	movs	r0, #4
 800349c:	f000 fcda 	bl	8003e54 <spi_write_array>
	while ((counter<200000)&&(finished == 0))
 80034a0:	e00d      	b.n	80034be <LTC681x_pollAdc+0x66>
	{
		current_time = spi_read_byte(0xff);
 80034a2:	20ff      	movs	r0, #255	; 0xff
 80034a4:	f000 fd20 	bl	8003ee8 <spi_read_byte>
 80034a8:	4603      	mov	r3, r0
 80034aa:	72bb      	strb	r3, [r7, #10]
		if (current_time>0)
 80034ac:	7abb      	ldrb	r3, [r7, #10]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <LTC681x_pollAdc+0x60>
		{
			finished = 1;
 80034b2:	2301      	movs	r3, #1
 80034b4:	72fb      	strb	r3, [r7, #11]
 80034b6:	e002      	b.n	80034be <LTC681x_pollAdc+0x66>
		}
		else
		{
			counter = counter + 10;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	330a      	adds	r3, #10
 80034bc:	60fb      	str	r3, [r7, #12]
	while ((counter<200000)&&(finished == 0))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4a06      	ldr	r2, [pc, #24]	; (80034dc <LTC681x_pollAdc+0x84>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d802      	bhi.n	80034cc <LTC681x_pollAdc+0x74>
 80034c6:	7afb      	ldrb	r3, [r7, #11]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0ea      	beq.n	80034a2 <LTC681x_pollAdc+0x4a>
		}
	}
	cs_high(CS_PIN);
 80034cc:	200a      	movs	r0, #10
 80034ce:	f000 fca5 	bl	8003e1c <cs_high>

	return(counter);
 80034d2:	68fb      	ldr	r3, [r7, #12]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	00030d3f 	.word	0x00030d3f

080034e0 <LTC681x_check_pec>:
/* Helper function that increments PEC counters */
void LTC681x_check_pec(uint8_t total_ic, //Number of ICs in the system
					   uint8_t reg, //Type of Register
					   cell_asic *ic //A two dimensional array that stores the data
					   )
{
 80034e0:	b480      	push	{r7}
 80034e2:	b08b      	sub	sp, #44	; 0x2c
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	603a      	str	r2, [r7, #0]
 80034ea:	71fb      	strb	r3, [r7, #7]
 80034ec:	460b      	mov	r3, r1
 80034ee:	71bb      	strb	r3, [r7, #6]
	switch (reg)
 80034f0:	79bb      	ldrb	r3, [r7, #6]
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	f200 8191 	bhi.w	800381a <LTC681x_check_pec+0x33a>
 80034f8:	a201      	add	r2, pc, #4	; (adr r2, 8003500 <LTC681x_check_pec+0x20>)
 80034fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fe:	bf00      	nop
 8003500:	08003515 	.word	0x08003515
 8003504:	08003611 	.word	0x08003611
 8003508:	080036c3 	.word	0x080036c3
 800350c:	0800376f 	.word	0x0800376f
 8003510:	08003593 	.word	0x08003593
	{
		case LTC681x_CFGR:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003514:	2300      	movs	r3, #0
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
 8003518:	e036      	b.n	8003588 <LTC681x_check_pec+0xa8>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].config.rx_pec_match;
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	22e8      	movs	r2, #232	; 0xe8
 800351e:	fb02 f303 	mul.w	r3, r2, r3
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	4413      	add	r3, r2
 8003526:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	22e8      	movs	r2, #232	; 0xe8
 800352e:	fb02 f303 	mul.w	r3, r2, r3
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	4413      	add	r3, r2
 8003536:	7b9b      	ldrb	r3, [r3, #14]
 8003538:	b29a      	uxth	r2, r3
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	20e8      	movs	r0, #232	; 0xe8
 800353e:	fb00 f303 	mul.w	r3, r0, r3
 8003542:	6838      	ldr	r0, [r7, #0]
 8003544:	4403      	add	r3, r0
 8003546:	440a      	add	r2, r1
 8003548:	b292      	uxth	r2, r2
 800354a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].config.rx_pec_match;
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	22e8      	movs	r2, #232	; 0xe8
 8003552:	fb02 f303 	mul.w	r3, r2, r3
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	4413      	add	r3, r2
 800355a:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	22e8      	movs	r2, #232	; 0xe8
 8003562:	fb02 f303 	mul.w	r3, r2, r3
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	4413      	add	r3, r2
 800356a:	7b9b      	ldrb	r3, [r3, #14]
 800356c:	b29a      	uxth	r2, r3
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	20e8      	movs	r0, #232	; 0xe8
 8003572:	fb00 f303 	mul.w	r3, r0, r3
 8003576:	6838      	ldr	r0, [r7, #0]
 8003578:	4403      	add	r3, r0
 800357a:	440a      	add	r2, r1
 800357c:	b292      	uxth	r2, r2
 800357e:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	3301      	adds	r3, #1
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358c:	429a      	cmp	r2, r3
 800358e:	dbc4      	blt.n	800351a <LTC681x_check_pec+0x3a>
		  }
		break;
 8003590:	e144      	b.n	800381c <LTC681x_check_pec+0x33c>

		case CFGRB:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003592:	2300      	movs	r3, #0
 8003594:	623b      	str	r3, [r7, #32]
 8003596:	e036      	b.n	8003606 <LTC681x_check_pec+0x126>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configb.rx_pec_match;
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	22e8      	movs	r2, #232	; 0xe8
 800359c:	fb02 f303 	mul.w	r3, r2, r3
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	4413      	add	r3, r2
 80035a4:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	22e8      	movs	r2, #232	; 0xe8
 80035ac:	fb02 f303 	mul.w	r3, r2, r3
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	4413      	add	r3, r2
 80035b4:	7f5b      	ldrb	r3, [r3, #29]
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	20e8      	movs	r0, #232	; 0xe8
 80035bc:	fb00 f303 	mul.w	r3, r0, r3
 80035c0:	6838      	ldr	r0, [r7, #0]
 80035c2:	4403      	add	r3, r0
 80035c4:	440a      	add	r2, r1
 80035c6:	b292      	uxth	r2, r2
 80035c8:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configb.rx_pec_match;
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	22e8      	movs	r2, #232	; 0xe8
 80035d0:	fb02 f303 	mul.w	r3, r2, r3
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	4413      	add	r3, r2
 80035d8:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	22e8      	movs	r2, #232	; 0xe8
 80035e0:	fb02 f303 	mul.w	r3, r2, r3
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	4413      	add	r3, r2
 80035e8:	7f5b      	ldrb	r3, [r3, #29]
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	20e8      	movs	r0, #232	; 0xe8
 80035f0:	fb00 f303 	mul.w	r3, r0, r3
 80035f4:	6838      	ldr	r0, [r7, #0]
 80035f6:	4403      	add	r3, r0
 80035f8:	440a      	add	r2, r1
 80035fa:	b292      	uxth	r2, r2
 80035fc:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	3301      	adds	r3, #1
 8003604:	623b      	str	r3, [r7, #32]
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	6a3a      	ldr	r2, [r7, #32]
 800360a:	429a      	cmp	r2, r3
 800360c:	dbc4      	blt.n	8003598 <LTC681x_check_pec+0xb8>
		  }
		break;
 800360e:	e105      	b.n	800381c <LTC681x_check_pec+0x33c>
		case CELL:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003610:	2300      	movs	r3, #0
 8003612:	61fb      	str	r3, [r7, #28]
 8003614:	e050      	b.n	80036b8 <LTC681x_check_pec+0x1d8>
		  {
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 8003616:	2300      	movs	r3, #0
 8003618:	61bb      	str	r3, [r7, #24]
 800361a:	e043      	b.n	80036a4 <LTC681x_check_pec+0x1c4>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].cells.pec_match[i];
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	22e8      	movs	r2, #232	; 0xe8
 8003620:	fb02 f303 	mul.w	r3, r2, r3
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	4413      	add	r3, r2
 8003628:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	22e8      	movs	r2, #232	; 0xe8
 8003630:	fb02 f303 	mul.w	r3, r2, r3
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	441a      	add	r2, r3
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	4413      	add	r3, r2
 800363c:	3342      	adds	r3, #66	; 0x42
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	b29a      	uxth	r2, r3
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	20e8      	movs	r0, #232	; 0xe8
 8003646:	fb00 f303 	mul.w	r3, r0, r3
 800364a:	6838      	ldr	r0, [r7, #0]
 800364c:	4403      	add	r3, r0
 800364e:	440a      	add	r2, r1
 8003650:	b292      	uxth	r2, r2
 8003652:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.cell_pec[i] = ic[current_ic].crc_count.cell_pec[i] + ic[current_ic].cells.pec_match[i];
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	22e8      	movs	r2, #232	; 0xe8
 800365a:	fb02 f303 	mul.w	r3, r2, r3
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	441a      	add	r2, r3
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	3360      	adds	r3, #96	; 0x60
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	4413      	add	r3, r2
 800366a:	8899      	ldrh	r1, [r3, #4]
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	22e8      	movs	r2, #232	; 0xe8
 8003670:	fb02 f303 	mul.w	r3, r2, r3
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	441a      	add	r2, r3
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	4413      	add	r3, r2
 800367c:	3342      	adds	r3, #66	; 0x42
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	b29b      	uxth	r3, r3
 8003682:	69fa      	ldr	r2, [r7, #28]
 8003684:	20e8      	movs	r0, #232	; 0xe8
 8003686:	fb00 f202 	mul.w	r2, r0, r2
 800368a:	6838      	ldr	r0, [r7, #0]
 800368c:	4402      	add	r2, r0
 800368e:	440b      	add	r3, r1
 8003690:	b299      	uxth	r1, r3
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	3360      	adds	r3, #96	; 0x60
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	4413      	add	r3, r2
 800369a:	460a      	mov	r2, r1
 800369c:	809a      	strh	r2, [r3, #4]
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	3301      	adds	r3, #1
 80036a2:	61bb      	str	r3, [r7, #24]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 80036aa:	461a      	mov	r2, r3
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	4293      	cmp	r3, r2
 80036b0:	dbb4      	blt.n	800361c <LTC681x_check_pec+0x13c>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	3301      	adds	r3, #1
 80036b6:	61fb      	str	r3, [r7, #28]
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	69fa      	ldr	r2, [r7, #28]
 80036bc:	429a      	cmp	r2, r3
 80036be:	dbaa      	blt.n	8003616 <LTC681x_check_pec+0x136>
			}
		  }
		break;
 80036c0:	e0ac      	b.n	800381c <LTC681x_check_pec+0x33c>
		case AUX:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	e04d      	b.n	8003764 <LTC681x_check_pec+0x284>
		  {
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 80036c8:	2300      	movs	r3, #0
 80036ca:	613b      	str	r3, [r7, #16]
 80036cc:	e040      	b.n	8003750 <LTC681x_check_pec+0x270>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + (ic[current_ic].aux.pec_match[i]);
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	22e8      	movs	r2, #232	; 0xe8
 80036d2:	fb02 f303 	mul.w	r3, r2, r3
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	4413      	add	r3, r2
 80036da:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	22e8      	movs	r2, #232	; 0xe8
 80036e2:	fb02 f303 	mul.w	r3, r2, r3
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	441a      	add	r2, r3
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	4413      	add	r3, r2
 80036ee:	335a      	adds	r3, #90	; 0x5a
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	20e8      	movs	r0, #232	; 0xe8
 80036f8:	fb00 f303 	mul.w	r3, r0, r3
 80036fc:	6838      	ldr	r0, [r7, #0]
 80036fe:	4403      	add	r3, r0
 8003700:	440a      	add	r2, r1
 8003702:	b292      	uxth	r2, r2
 8003704:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.aux_pec[i] = ic[current_ic].crc_count.aux_pec[i] + (ic[current_ic].aux.pec_match[i]);
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	22e8      	movs	r2, #232	; 0xe8
 800370c:	fb02 f303 	mul.w	r3, r2, r3
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	4413      	add	r3, r2
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	3268      	adds	r2, #104	; 0x68
 8003718:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	22e8      	movs	r2, #232	; 0xe8
 8003720:	fb02 f303 	mul.w	r3, r2, r3
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	441a      	add	r2, r3
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	4413      	add	r3, r2
 800372c:	335a      	adds	r3, #90	; 0x5a
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	b29a      	uxth	r2, r3
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	20e8      	movs	r0, #232	; 0xe8
 8003736:	fb00 f303 	mul.w	r3, r0, r3
 800373a:	6838      	ldr	r0, [r7, #0]
 800373c:	4403      	add	r3, r0
 800373e:	440a      	add	r2, r1
 8003740:	b291      	uxth	r1, r2
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	3268      	adds	r2, #104	; 0x68
 8003746:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	3301      	adds	r3, #1
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8003756:	461a      	mov	r2, r3
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	4293      	cmp	r3, r2
 800375c:	dbb7      	blt.n	80036ce <LTC681x_check_pec+0x1ee>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	3301      	adds	r3, #1
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	429a      	cmp	r2, r3
 800376a:	dbad      	blt.n	80036c8 <LTC681x_check_pec+0x1e8>
			}
		  }

		break;
 800376c:	e056      	b.n	800381c <LTC681x_check_pec+0x33c>
		case STAT:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	e04d      	b.n	8003810 <LTC681x_check_pec+0x330>
		  {

			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8003774:	2300      	movs	r3, #0
 8003776:	60bb      	str	r3, [r7, #8]
 8003778:	e040      	b.n	80037fc <LTC681x_check_pec+0x31c>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].stat.pec_match[i];
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	22e8      	movs	r2, #232	; 0xe8
 800377e:	fb02 f303 	mul.w	r3, r2, r3
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	4413      	add	r3, r2
 8003786:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	22e8      	movs	r2, #232	; 0xe8
 800378e:	fb02 f303 	mul.w	r3, r2, r3
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	441a      	add	r2, r3
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	4413      	add	r3, r2
 800379a:	336b      	adds	r3, #107	; 0x6b
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	20e8      	movs	r0, #232	; 0xe8
 80037a4:	fb00 f303 	mul.w	r3, r0, r3
 80037a8:	6838      	ldr	r0, [r7, #0]
 80037aa:	4403      	add	r3, r0
 80037ac:	440a      	add	r2, r1
 80037ae:	b292      	uxth	r2, r2
 80037b0:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.stat_pec[i] = ic[current_ic].crc_count.stat_pec[i] + ic[current_ic].stat.pec_match[i];
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	22e8      	movs	r2, #232	; 0xe8
 80037b8:	fb02 f303 	mul.w	r3, r2, r3
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	4413      	add	r3, r2
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	326c      	adds	r2, #108	; 0x6c
 80037c4:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	22e8      	movs	r2, #232	; 0xe8
 80037cc:	fb02 f303 	mul.w	r3, r2, r3
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	441a      	add	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	4413      	add	r3, r2
 80037d8:	336b      	adds	r3, #107	; 0x6b
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	20e8      	movs	r0, #232	; 0xe8
 80037e2:	fb00 f303 	mul.w	r3, r0, r3
 80037e6:	6838      	ldr	r0, [r7, #0]
 80037e8:	4403      	add	r3, r0
 80037ea:	440a      	add	r2, r1
 80037ec:	b291      	uxth	r1, r2
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	326c      	adds	r2, #108	; 0x6c
 80037f2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	3301      	adds	r3, #1
 80037fa:	60bb      	str	r3, [r7, #8]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8003802:	3b01      	subs	r3, #1
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	429a      	cmp	r2, r3
 8003808:	dbb7      	blt.n	800377a <LTC681x_check_pec+0x29a>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	3301      	adds	r3, #1
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	79fb      	ldrb	r3, [r7, #7]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	429a      	cmp	r2, r3
 8003816:	dbad      	blt.n	8003774 <LTC681x_check_pec+0x294>
			}
		  }
		break;
 8003818:	e000      	b.n	800381c <LTC681x_check_pec+0x33c>
		default:
		break;
 800381a:	bf00      	nop
	}
}
 800381c:	bf00      	nop
 800381e:	372c      	adds	r7, #44	; 0x2c
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <LTC681x_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC681x_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that stores the data
							 )
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	6039      	str	r1, [r7, #0]
 8003832:	71fb      	strb	r3, [r7, #7]
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	e051      	b.n	80038de <LTC681x_reset_crc_count+0xb6>
	{
		ic[current_ic].crc_count.pec_count = 0;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	22e8      	movs	r2, #232	; 0xe8
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	4413      	add	r3, r2
 8003846:	2200      	movs	r2, #0
 8003848:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		ic[current_ic].crc_count.cfgr_pec = 0;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	22e8      	movs	r2, #232	; 0xe8
 8003850:	fb02 f303 	mul.w	r3, r2, r3
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	4413      	add	r3, r2
 8003858:	2200      	movs	r2, #0
 800385a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		for (int i=0; i<6; i++)
 800385e:	2300      	movs	r3, #0
 8003860:	613b      	str	r3, [r7, #16]
 8003862:	e00e      	b.n	8003882 <LTC681x_reset_crc_count+0x5a>
		{
			ic[current_ic].crc_count.cell_pec[i]=0;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	22e8      	movs	r2, #232	; 0xe8
 8003868:	fb02 f303 	mul.w	r3, r2, r3
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	441a      	add	r2, r3
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	3360      	adds	r3, #96	; 0x60
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	4413      	add	r3, r2
 8003878:	2200      	movs	r2, #0
 800387a:	809a      	strh	r2, [r3, #4]
		for (int i=0; i<6; i++)
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	3301      	adds	r3, #1
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	2b05      	cmp	r3, #5
 8003886:	dded      	ble.n	8003864 <LTC681x_reset_crc_count+0x3c>

		}
		for (int i=0; i<4; i++)
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	e00d      	b.n	80038aa <LTC681x_reset_crc_count+0x82>
		{
			ic[current_ic].crc_count.aux_pec[i]=0;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	22e8      	movs	r2, #232	; 0xe8
 8003892:	fb02 f303 	mul.w	r3, r2, r3
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	4413      	add	r3, r2
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	3268      	adds	r2, #104	; 0x68
 800389e:	2100      	movs	r1, #0
 80038a0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int i=0; i<4; i++)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	3301      	adds	r3, #1
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	ddee      	ble.n	800388e <LTC681x_reset_crc_count+0x66>
		}
		for (int i=0; i<2; i++)
 80038b0:	2300      	movs	r3, #0
 80038b2:	60bb      	str	r3, [r7, #8]
 80038b4:	e00d      	b.n	80038d2 <LTC681x_reset_crc_count+0xaa>
		{
			ic[current_ic].crc_count.stat_pec[i]=0;
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	22e8      	movs	r2, #232	; 0xe8
 80038ba:	fb02 f303 	mul.w	r3, r2, r3
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	4413      	add	r3, r2
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	326c      	adds	r2, #108	; 0x6c
 80038c6:	2100      	movs	r1, #0
 80038c8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int i=0; i<2; i++)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	3301      	adds	r3, #1
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	ddee      	ble.n	80038b6 <LTC681x_reset_crc_count+0x8e>
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	3301      	adds	r3, #1
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	79fb      	ldrb	r3, [r7, #7]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	dba9      	blt.n	800383a <LTC681x_reset_crc_count+0x12>
		}
	}
}
 80038e6:	bf00      	nop
 80038e8:	bf00      	nop
 80038ea:	371c      	adds	r7, #28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <LTC681x_init_cfg>:

/* Helper function to initialize CFG variables */
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that stores the data
					  )
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	6039      	str	r1, [r7, #0]
 80038fe:	71fb      	strb	r3, [r7, #7]
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8003900:	2300      	movs	r3, #0
 8003902:	73fb      	strb	r3, [r7, #15]
 8003904:	e015      	b.n	8003932 <LTC681x_init_cfg+0x3e>
	{
		for (int j =0; j<6; j++)
 8003906:	2300      	movs	r3, #0
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	e00c      	b.n	8003926 <LTC681x_init_cfg+0x32>
		{
		  ic[current_ic].config.tx_data[j] = 0;
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	22e8      	movs	r2, #232	; 0xe8
 8003910:	fb02 f303 	mul.w	r3, r2, r3
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	441a      	add	r2, r3
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	4413      	add	r3, r2
 800391c:	2200      	movs	r2, #0
 800391e:	701a      	strb	r2, [r3, #0]
		for (int j =0; j<6; j++)
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	3301      	adds	r3, #1
 8003924:	60bb      	str	r3, [r7, #8]
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b05      	cmp	r3, #5
 800392a:	ddef      	ble.n	800390c <LTC681x_init_cfg+0x18>
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 800392c:	7bfb      	ldrb	r3, [r7, #15]
 800392e:	3301      	adds	r3, #1
 8003930:	73fb      	strb	r3, [r7, #15]
 8003932:	7bfa      	ldrb	r2, [r7, #15]
 8003934:	79fb      	ldrb	r3, [r7, #7]
 8003936:	429a      	cmp	r2, r3
 8003938:	d3e5      	bcc.n	8003906 <LTC681x_init_cfg+0x12>
		}
	}
}
 800393a:	bf00      	nop
 800393c:	bf00      	nop
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <LTC681x_set_cfgr>:
					 bool dcc[12], // The DCC bits
					 bool dcto[4], // The Dcto bits
					 uint16_t uv, // The UV value
					 uint16_t  ov // The OV value
					 )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6039      	str	r1, [r7, #0]
 8003950:	4611      	mov	r1, r2
 8003952:	461a      	mov	r2, r3
 8003954:	4603      	mov	r3, r0
 8003956:	71fb      	strb	r3, [r7, #7]
 8003958:	460b      	mov	r3, r1
 800395a:	71bb      	strb	r3, [r7, #6]
 800395c:	4613      	mov	r3, r2
 800395e:	717b      	strb	r3, [r7, #5]
	LTC681x_set_cfgr_refon(nIC,ic,refon);
 8003960:	79ba      	ldrb	r2, [r7, #6]
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	6839      	ldr	r1, [r7, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f000 f828 	bl	80039bc <LTC681x_set_cfgr_refon>
	LTC681x_set_cfgr_adcopt(nIC,ic,adcopt);
 800396c:	797a      	ldrb	r2, [r7, #5]
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	6839      	ldr	r1, [r7, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f000 f856 	bl	8003a24 <LTC681x_set_cfgr_adcopt>
	LTC681x_set_cfgr_gpio(nIC,ic,gpio);
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	6839      	ldr	r1, [r7, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f000 f884 	bl	8003a8c <LTC681x_set_cfgr_gpio>
	LTC681x_set_cfgr_dis(nIC,ic,dcc);
 8003984:	79fb      	ldrb	r3, [r7, #7]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	6839      	ldr	r1, [r7, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 f8ce 	bl	8003b2c <LTC681x_set_cfgr_dis>
	LTC681x_set_cfgr_dcto(nIC,ic,dcto);
 8003990:	79fb      	ldrb	r3, [r7, #7]
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	6839      	ldr	r1, [r7, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f000 f957 	bl	8003c4a <LTC681x_set_cfgr_dcto>
	LTC681x_set_cfgr_uv(nIC, ic, uv);
 800399c:	8bba      	ldrh	r2, [r7, #28]
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	6839      	ldr	r1, [r7, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 f9a1 	bl	8003cea <LTC681x_set_cfgr_uv>
	LTC681x_set_cfgr_ov(nIC, ic, ov);
 80039a8:	8c3a      	ldrh	r2, [r7, #32]
 80039aa:	79fb      	ldrb	r3, [r7, #7]
 80039ac:	6839      	ldr	r1, [r7, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 f9e1 	bl	8003d76 <LTC681x_set_cfgr_ov>
}
 80039b4:	bf00      	nop
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <LTC681x_set_cfgr_refon>:

/* Helper function to set the REFON bit */
void LTC681x_set_cfgr_refon(uint8_t nIC, cell_asic *ic, bool refon)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	6039      	str	r1, [r7, #0]
 80039c6:	71fb      	strb	r3, [r7, #7]
 80039c8:	4613      	mov	r3, r2
 80039ca:	71bb      	strb	r3, [r7, #6]
	if (refon) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x04;
 80039cc:	79bb      	ldrb	r3, [r7, #6]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d011      	beq.n	80039f6 <LTC681x_set_cfgr_refon+0x3a>
 80039d2:	79fb      	ldrb	r3, [r7, #7]
 80039d4:	22e8      	movs	r2, #232	; 0xe8
 80039d6:	fb02 f303 	mul.w	r3, r2, r3
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	4413      	add	r3, r2
 80039de:	781a      	ldrb	r2, [r3, #0]
 80039e0:	79fb      	ldrb	r3, [r7, #7]
 80039e2:	21e8      	movs	r1, #232	; 0xe8
 80039e4:	fb01 f303 	mul.w	r3, r1, r3
 80039e8:	6839      	ldr	r1, [r7, #0]
 80039ea:	440b      	add	r3, r1
 80039ec:	f042 0204 	orr.w	r2, r2, #4
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
}
 80039f4:	e010      	b.n	8003a18 <LTC681x_set_cfgr_refon+0x5c>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
 80039f6:	79fb      	ldrb	r3, [r7, #7]
 80039f8:	22e8      	movs	r2, #232	; 0xe8
 80039fa:	fb02 f303 	mul.w	r3, r2, r3
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	4413      	add	r3, r2
 8003a02:	781a      	ldrb	r2, [r3, #0]
 8003a04:	79fb      	ldrb	r3, [r7, #7]
 8003a06:	21e8      	movs	r1, #232	; 0xe8
 8003a08:	fb01 f303 	mul.w	r3, r1, r3
 8003a0c:	6839      	ldr	r1, [r7, #0]
 8003a0e:	440b      	add	r3, r1
 8003a10:	f022 0204 	bic.w	r2, r2, #4
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	701a      	strb	r2, [r3, #0]
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <LTC681x_set_cfgr_adcopt>:

/* Helper function to set the ADCOPT bit */
void LTC681x_set_cfgr_adcopt(uint8_t nIC, cell_asic *ic, bool adcopt)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	6039      	str	r1, [r7, #0]
 8003a2e:	71fb      	strb	r3, [r7, #7]
 8003a30:	4613      	mov	r3, r2
 8003a32:	71bb      	strb	r3, [r7, #6]
	if (adcopt) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x01;
 8003a34:	79bb      	ldrb	r3, [r7, #6]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d011      	beq.n	8003a5e <LTC681x_set_cfgr_adcopt+0x3a>
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	22e8      	movs	r2, #232	; 0xe8
 8003a3e:	fb02 f303 	mul.w	r3, r2, r3
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	4413      	add	r3, r2
 8003a46:	781a      	ldrb	r2, [r3, #0]
 8003a48:	79fb      	ldrb	r3, [r7, #7]
 8003a4a:	21e8      	movs	r1, #232	; 0xe8
 8003a4c:	fb01 f303 	mul.w	r3, r1, r3
 8003a50:	6839      	ldr	r1, [r7, #0]
 8003a52:	440b      	add	r3, r1
 8003a54:	f042 0201 	orr.w	r2, r2, #1
 8003a58:	b2d2      	uxtb	r2, r2
 8003a5a:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
}
 8003a5c:	e010      	b.n	8003a80 <LTC681x_set_cfgr_adcopt+0x5c>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
 8003a5e:	79fb      	ldrb	r3, [r7, #7]
 8003a60:	22e8      	movs	r2, #232	; 0xe8
 8003a62:	fb02 f303 	mul.w	r3, r2, r3
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	4413      	add	r3, r2
 8003a6a:	781a      	ldrb	r2, [r3, #0]
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	21e8      	movs	r1, #232	; 0xe8
 8003a70:	fb01 f303 	mul.w	r3, r1, r3
 8003a74:	6839      	ldr	r1, [r7, #0]
 8003a76:	440b      	add	r3, r1
 8003a78:	f022 0201 	bic.w	r2, r2, #1
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	701a      	strb	r2, [r3, #0]
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <LTC681x_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void LTC681x_set_cfgr_gpio(uint8_t nIC, cell_asic *ic,bool gpio[5])
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	73fb      	strb	r3, [r7, #15]
	for (int i =0; i<5; i++)
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	e03b      	b.n	8003b18 <LTC681x_set_cfgr_gpio+0x8c>
	{
		if (gpio[i])ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|(0x01<<(i+3));
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d018      	beq.n	8003ade <LTC681x_set_cfgr_gpio+0x52>
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	22e8      	movs	r2, #232	; 0xe8
 8003ab0:	fb02 f303 	mul.w	r3, r2, r3
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	b25a      	sxtb	r2, r3
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	3303      	adds	r3, #3
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac6:	b25b      	sxtb	r3, r3
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	b259      	sxtb	r1, r3
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	22e8      	movs	r2, #232	; 0xe8
 8003ad0:	fb02 f303 	mul.w	r3, r2, r3
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	b2ca      	uxtb	r2, r1
 8003ada:	701a      	strb	r2, [r3, #0]
 8003adc:	e019      	b.n	8003b12 <LTC681x_set_cfgr_gpio+0x86>
		else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&(~(0x01<<(i+3)));
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	22e8      	movs	r2, #232	; 0xe8
 8003ae2:	fb02 f303 	mul.w	r3, r2, r3
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	4413      	add	r3, r2
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	b25a      	sxtb	r2, r3
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	3303      	adds	r3, #3
 8003af2:	2101      	movs	r1, #1
 8003af4:	fa01 f303 	lsl.w	r3, r1, r3
 8003af8:	b25b      	sxtb	r3, r3
 8003afa:	43db      	mvns	r3, r3
 8003afc:	b25b      	sxtb	r3, r3
 8003afe:	4013      	ands	r3, r2
 8003b00:	b259      	sxtb	r1, r3
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	22e8      	movs	r2, #232	; 0xe8
 8003b06:	fb02 f303 	mul.w	r3, r2, r3
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	b2ca      	uxtb	r2, r1
 8003b10:	701a      	strb	r2, [r3, #0]
	for (int i =0; i<5; i++)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	3301      	adds	r3, #1
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	ddc0      	ble.n	8003aa0 <LTC681x_set_cfgr_gpio+0x14>
	}
}
 8003b1e:	bf00      	nop
 8003b20:	bf00      	nop
 8003b22:	371c      	adds	r7, #28
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <LTC681x_set_cfgr_dis>:

/* Helper function to control discharge */
void LTC681x_set_cfgr_dis(uint8_t nIC, cell_asic *ic,bool dcc[12])
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	73fb      	strb	r3, [r7, #15]
	for (int i =0; i<8; i++)
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	e039      	b.n	8003bb4 <LTC681x_set_cfgr_dis+0x88>
	{
		if (dcc[i])ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]|(0x01<<i);
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	4413      	add	r3, r2
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d017      	beq.n	8003b7c <LTC681x_set_cfgr_dis+0x50>
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	22e8      	movs	r2, #232	; 0xe8
 8003b50:	fb02 f303 	mul.w	r3, r2, r3
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	4413      	add	r3, r2
 8003b58:	791b      	ldrb	r3, [r3, #4]
 8003b5a:	b25a      	sxtb	r2, r3
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	fa01 f303 	lsl.w	r3, r1, r3
 8003b64:	b25b      	sxtb	r3, r3
 8003b66:	4313      	orrs	r3, r2
 8003b68:	b259      	sxtb	r1, r3
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
 8003b6c:	22e8      	movs	r2, #232	; 0xe8
 8003b6e:	fb02 f303 	mul.w	r3, r2, r3
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	4413      	add	r3, r2
 8003b76:	b2ca      	uxtb	r2, r1
 8003b78:	711a      	strb	r2, [r3, #4]
 8003b7a:	e018      	b.n	8003bae <LTC681x_set_cfgr_dis+0x82>
		else ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]& (~(0x01<<i));
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
 8003b7e:	22e8      	movs	r2, #232	; 0xe8
 8003b80:	fb02 f303 	mul.w	r3, r2, r3
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	4413      	add	r3, r2
 8003b88:	791b      	ldrb	r3, [r3, #4]
 8003b8a:	b25a      	sxtb	r2, r3
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	fa01 f303 	lsl.w	r3, r1, r3
 8003b94:	b25b      	sxtb	r3, r3
 8003b96:	43db      	mvns	r3, r3
 8003b98:	b25b      	sxtb	r3, r3
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	b259      	sxtb	r1, r3
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ba0:	22e8      	movs	r2, #232	; 0xe8
 8003ba2:	fb02 f303 	mul.w	r3, r2, r3
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	4413      	add	r3, r2
 8003baa:	b2ca      	uxtb	r2, r1
 8003bac:	711a      	strb	r2, [r3, #4]
	for (int i =0; i<8; i++)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	2b07      	cmp	r3, #7
 8003bb8:	ddc2      	ble.n	8003b40 <LTC681x_set_cfgr_dis+0x14>
	}
	for (int i =0; i<4; i++)
 8003bba:	2300      	movs	r3, #0
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	e03a      	b.n	8003c36 <LTC681x_set_cfgr_dis+0x10a>
	{
		if (dcc[i+8])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<i);
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	3308      	adds	r3, #8
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d017      	beq.n	8003bfe <LTC681x_set_cfgr_dis+0xd2>
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	22e8      	movs	r2, #232	; 0xe8
 8003bd2:	fb02 f303 	mul.w	r3, r2, r3
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	4413      	add	r3, r2
 8003bda:	795b      	ldrb	r3, [r3, #5]
 8003bdc:	b25a      	sxtb	r2, r3
 8003bde:	2101      	movs	r1, #1
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	fa01 f303 	lsl.w	r3, r1, r3
 8003be6:	b25b      	sxtb	r3, r3
 8003be8:	4313      	orrs	r3, r2
 8003bea:	b259      	sxtb	r1, r3
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	22e8      	movs	r2, #232	; 0xe8
 8003bf0:	fb02 f303 	mul.w	r3, r2, r3
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	b2ca      	uxtb	r2, r1
 8003bfa:	715a      	strb	r2, [r3, #5]
 8003bfc:	e018      	b.n	8003c30 <LTC681x_set_cfgr_dis+0x104>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<i));
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
 8003c00:	22e8      	movs	r2, #232	; 0xe8
 8003c02:	fb02 f303 	mul.w	r3, r2, r3
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	4413      	add	r3, r2
 8003c0a:	795b      	ldrb	r3, [r3, #5]
 8003c0c:	b25a      	sxtb	r2, r3
 8003c0e:	2101      	movs	r1, #1
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	fa01 f303 	lsl.w	r3, r1, r3
 8003c16:	b25b      	sxtb	r3, r3
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	b25b      	sxtb	r3, r3
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	b259      	sxtb	r1, r3
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
 8003c22:	22e8      	movs	r2, #232	; 0xe8
 8003c24:	fb02 f303 	mul.w	r3, r2, r3
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	b2ca      	uxtb	r2, r1
 8003c2e:	715a      	strb	r2, [r3, #5]
	for (int i =0; i<4; i++)
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	3301      	adds	r3, #1
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	ddc1      	ble.n	8003bc0 <LTC681x_set_cfgr_dis+0x94>
	}
}
 8003c3c:	bf00      	nop
 8003c3e:	bf00      	nop
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <LTC681x_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic,bool dcto[4])
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b087      	sub	sp, #28
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	4603      	mov	r3, r0
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	607a      	str	r2, [r7, #4]
 8003c56:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<4;i++)
 8003c58:	2300      	movs	r3, #0
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	e03b      	b.n	8003cd6 <LTC681x_set_cfgr_dcto+0x8c>
	{
		if(dcto[i])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<(i+4));
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	4413      	add	r3, r2
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d018      	beq.n	8003c9c <LTC681x_set_cfgr_dcto+0x52>
 8003c6a:	7bfb      	ldrb	r3, [r7, #15]
 8003c6c:	22e8      	movs	r2, #232	; 0xe8
 8003c6e:	fb02 f303 	mul.w	r3, r2, r3
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	4413      	add	r3, r2
 8003c76:	795b      	ldrb	r3, [r3, #5]
 8003c78:	b25a      	sxtb	r2, r3
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	2101      	movs	r1, #1
 8003c80:	fa01 f303 	lsl.w	r3, r1, r3
 8003c84:	b25b      	sxtb	r3, r3
 8003c86:	4313      	orrs	r3, r2
 8003c88:	b259      	sxtb	r1, r3
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	22e8      	movs	r2, #232	; 0xe8
 8003c8e:	fb02 f303 	mul.w	r3, r2, r3
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	4413      	add	r3, r2
 8003c96:	b2ca      	uxtb	r2, r1
 8003c98:	715a      	strb	r2, [r3, #5]
 8003c9a:	e019      	b.n	8003cd0 <LTC681x_set_cfgr_dcto+0x86>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<(i+4)));
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	22e8      	movs	r2, #232	; 0xe8
 8003ca0:	fb02 f303 	mul.w	r3, r2, r3
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	795b      	ldrb	r3, [r3, #5]
 8003caa:	b25a      	sxtb	r2, r3
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	3304      	adds	r3, #4
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb6:	b25b      	sxtb	r3, r3
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	b25b      	sxtb	r3, r3
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	b259      	sxtb	r1, r3
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
 8003cc2:	22e8      	movs	r2, #232	; 0xe8
 8003cc4:	fb02 f303 	mul.w	r3, r2, r3
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	4413      	add	r3, r2
 8003ccc:	b2ca      	uxtb	r2, r1
 8003cce:	715a      	strb	r2, [r3, #5]
	for(int i =0;i<4;i++)
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	ddc0      	ble.n	8003c5e <LTC681x_set_cfgr_dcto+0x14>
	}
}
 8003cdc:	bf00      	nop
 8003cde:	bf00      	nop
 8003ce0:	371c      	adds	r7, #28
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <LTC681x_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic *ic,uint16_t uv)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b085      	sub	sp, #20
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	6039      	str	r1, [r7, #0]
 8003cf4:	71fb      	strb	r3, [r7, #7]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (uv/16)-1;
 8003cfa:	88bb      	ldrh	r3, [r7, #4]
 8003cfc:	091b      	lsrs	r3, r3, #4
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	81fb      	strh	r3, [r7, #14]
	ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	22e8      	movs	r2, #232	; 0xe8
 8003d08:	fb02 f303 	mul.w	r3, r2, r3
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	4413      	add	r3, r2
 8003d10:	89fa      	ldrh	r2, [r7, #14]
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	705a      	strb	r2, [r3, #1]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0xF0;
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	22e8      	movs	r2, #232	; 0xe8
 8003d1a:	fb02 f303 	mul.w	r3, r2, r3
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	4413      	add	r3, r2
 8003d22:	789a      	ldrb	r2, [r3, #2]
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	21e8      	movs	r1, #232	; 0xe8
 8003d28:	fb01 f303 	mul.w	r3, r1, r3
 8003d2c:	6839      	ldr	r1, [r7, #0]
 8003d2e:	440b      	add	r3, r1
 8003d30:	f022 020f 	bic.w	r2, r2, #15
 8003d34:	b2d2      	uxtb	r2, r2
 8003d36:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x0F00 & tmp)>>8);
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	22e8      	movs	r2, #232	; 0xe8
 8003d3c:	fb02 f303 	mul.w	r3, r2, r3
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	4413      	add	r3, r2
 8003d44:	789b      	ldrb	r3, [r3, #2]
 8003d46:	b25a      	sxtb	r2, r3
 8003d48:	89fb      	ldrh	r3, [r7, #14]
 8003d4a:	0a1b      	lsrs	r3, r3, #8
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	b25b      	sxtb	r3, r3
 8003d50:	f003 030f 	and.w	r3, r3, #15
 8003d54:	b25b      	sxtb	r3, r3
 8003d56:	4313      	orrs	r3, r2
 8003d58:	b259      	sxtb	r1, r3
 8003d5a:	79fb      	ldrb	r3, [r7, #7]
 8003d5c:	22e8      	movs	r2, #232	; 0xe8
 8003d5e:	fb02 f303 	mul.w	r3, r2, r3
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	4413      	add	r3, r2
 8003d66:	b2ca      	uxtb	r2, r1
 8003d68:	709a      	strb	r2, [r3, #2]
}
 8003d6a:	bf00      	nop
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <LTC681x_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void LTC681x_set_cfgr_ov(uint8_t nIC, cell_asic *ic,uint16_t ov)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b085      	sub	sp, #20
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	6039      	str	r1, [r7, #0]
 8003d80:	71fb      	strb	r3, [r7, #7]
 8003d82:	4613      	mov	r3, r2
 8003d84:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (ov/16);
 8003d86:	88bb      	ldrh	r3, [r7, #4]
 8003d88:	091b      	lsrs	r3, r3, #4
 8003d8a:	81fb      	strh	r3, [r7, #14]
	ic[nIC].config.tx_data[3] = 0x00FF & (tmp>>4);
 8003d8c:	89fb      	ldrh	r3, [r7, #14]
 8003d8e:	091b      	lsrs	r3, r3, #4
 8003d90:	b299      	uxth	r1, r3
 8003d92:	79fb      	ldrb	r3, [r7, #7]
 8003d94:	22e8      	movs	r2, #232	; 0xe8
 8003d96:	fb02 f303 	mul.w	r3, r2, r3
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	b2ca      	uxtb	r2, r1
 8003da0:	70da      	strb	r2, [r3, #3]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0x0F;
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	22e8      	movs	r2, #232	; 0xe8
 8003da6:	fb02 f303 	mul.w	r3, r2, r3
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	4413      	add	r3, r2
 8003dae:	789a      	ldrb	r2, [r3, #2]
 8003db0:	79fb      	ldrb	r3, [r7, #7]
 8003db2:	21e8      	movs	r1, #232	; 0xe8
 8003db4:	fb01 f303 	mul.w	r3, r1, r3
 8003db8:	6839      	ldr	r1, [r7, #0]
 8003dba:	440b      	add	r3, r1
 8003dbc:	f002 020f 	and.w	r2, r2, #15
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x000F & tmp)<<4);
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	22e8      	movs	r2, #232	; 0xe8
 8003dc8:	fb02 f303 	mul.w	r3, r2, r3
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	4413      	add	r3, r2
 8003dd0:	789b      	ldrb	r3, [r3, #2]
 8003dd2:	b25a      	sxtb	r2, r3
 8003dd4:	89fb      	ldrh	r3, [r7, #14]
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	b25b      	sxtb	r3, r3
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	b259      	sxtb	r1, r3
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	22e8      	movs	r2, #232	; 0xe8
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	4413      	add	r3, r2
 8003dea:	b2ca      	uxtb	r2, r1
 8003dec:	709a      	strb	r2, [r3, #2]
}
 8003dee:	bf00      	nop
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
	...

08003dfc <cs_low>:
#include "stm32f4xx_hal.h"

extern SPI_HandleTypeDef hspi1;

void cs_low(uint8_t pin)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8003e06:	2200      	movs	r2, #0
 8003e08:	2108      	movs	r1, #8
 8003e0a:	4803      	ldr	r0, [pc, #12]	; (8003e18 <cs_low+0x1c>)
 8003e0c:	f002 fd26 	bl	800685c <HAL_GPIO_WritePin>
}
 8003e10:	bf00      	nop
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40020800 	.word	0x40020800

08003e1c <cs_high>:

void cs_high(uint8_t pin)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8003e26:	2201      	movs	r2, #1
 8003e28:	2108      	movs	r1, #8
 8003e2a:	4803      	ldr	r0, [pc, #12]	; (8003e38 <cs_high+0x1c>)
 8003e2c:	f002 fd16 	bl	800685c <HAL_GPIO_WritePin>
}
 8003e30:	bf00      	nop
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40020800 	.word	0x40020800

08003e3c <delay_u>:

void delay_u(uint16_t micro)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	4603      	mov	r3, r0
 8003e44:	80fb      	strh	r3, [r7, #6]
  HAL_Delay(1);
 8003e46:	2001      	movs	r0, #1
 8003e48:	f001 f8da 	bl	8005000 <HAL_Delay>
}
 8003e4c:	bf00      	nop
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <spi_write_array>:
Writes an array of bytes out of the SPI port
*/
void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
                     uint8_t data[] //Array of bytes to be written on the SPI port
                    )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	6039      	str	r1, [r7, #0]
 8003e5e:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi1, data, len, 100);
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	2364      	movs	r3, #100	; 0x64
 8003e66:	6839      	ldr	r1, [r7, #0]
 8003e68:	4803      	ldr	r0, [pc, #12]	; (8003e78 <spi_write_array+0x24>)
 8003e6a:	f003 fb82 	bl	8007572 <HAL_SPI_Transmit>
}
 8003e6e:	bf00      	nop
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	2000299c 	.word	0x2000299c

08003e7c <spi_write_read>:
void spi_write_read(uint8_t tx_Data[],//array of data to be written on SPI port
                    uint8_t tx_len, //length of the tx data arry
                    uint8_t *rx_data,//Input: array that will store the data read by the SPI port
                    uint8_t rx_len //Option: number of bytes to be read from the SPI port
                   )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	607a      	str	r2, [r7, #4]
 8003e86:	461a      	mov	r2, r3
 8003e88:	460b      	mov	r3, r1
 8003e8a:	72fb      	strb	r3, [r7, #11]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	72bb      	strb	r3, [r7, #10]
  for (uint8_t i = 0; i < tx_len; i++)
 8003e90:	2300      	movs	r3, #0
 8003e92:	75fb      	strb	r3, [r7, #23]
 8003e94:	e00a      	b.n	8003eac <spi_write_read+0x30>
  {
    HAL_SPI_Transmit(&hspi1, &tx_Data[i], 1, 100);
 8003e96:	7dfb      	ldrb	r3, [r7, #23]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	18d1      	adds	r1, r2, r3
 8003e9c:	2364      	movs	r3, #100	; 0x64
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	4810      	ldr	r0, [pc, #64]	; (8003ee4 <spi_write_read+0x68>)
 8003ea2:	f003 fb66 	bl	8007572 <HAL_SPI_Transmit>
  for (uint8_t i = 0; i < tx_len; i++)
 8003ea6:	7dfb      	ldrb	r3, [r7, #23]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	75fb      	strb	r3, [r7, #23]
 8003eac:	7dfa      	ldrb	r2, [r7, #23]
 8003eae:	7afb      	ldrb	r3, [r7, #11]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d3f0      	bcc.n	8003e96 <spi_write_read+0x1a>
  }

  for (uint8_t i = 0; i < rx_len; i++)
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	75bb      	strb	r3, [r7, #22]
 8003eb8:	e00a      	b.n	8003ed0 <spi_write_read+0x54>
  {
	HAL_SPI_Receive(&hspi1, &rx_data[i], 1, 100);
 8003eba:	7dbb      	ldrb	r3, [r7, #22]
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	18d1      	adds	r1, r2, r3
 8003ec0:	2364      	movs	r3, #100	; 0x64
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	4807      	ldr	r0, [pc, #28]	; (8003ee4 <spi_write_read+0x68>)
 8003ec6:	f003 fc90 	bl	80077ea <HAL_SPI_Receive>
  for (uint8_t i = 0; i < rx_len; i++)
 8003eca:	7dbb      	ldrb	r3, [r7, #22]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	75bb      	strb	r3, [r7, #22]
 8003ed0:	7dba      	ldrb	r2, [r7, #22]
 8003ed2:	7abb      	ldrb	r3, [r7, #10]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d3f0      	bcc.n	8003eba <spi_write_read+0x3e>
  }

}
 8003ed8:	bf00      	nop
 8003eda:	bf00      	nop
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	2000299c 	.word	0x2000299c

08003ee8 <spi_read_byte>:


uint8_t spi_read_byte(uint8_t tx_dat)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	71fb      	strb	r3, [r7, #7]
  uint8_t data;
  HAL_SPI_Receive(&hspi1, &data, 1, 100);
 8003ef2:	f107 010f 	add.w	r1, r7, #15
 8003ef6:	2364      	movs	r3, #100	; 0x64
 8003ef8:	2201      	movs	r2, #1
 8003efa:	4804      	ldr	r0, [pc, #16]	; (8003f0c <spi_read_byte+0x24>)
 8003efc:	f003 fc75 	bl	80077ea <HAL_SPI_Receive>
  return(data);
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	2000299c 	.word	0x2000299c

08003f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f14:	f001 f802 	bl	8004f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f18:	f000 f84c 	bl	8003fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f1c:	f000 fba2 	bl	8004664 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003f20:	f000 fb76 	bl	8004610 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8003f24:	f000 f958 	bl	80041d8 <MX_CAN1_Init>
  MX_SPI1_Init();
 8003f28:	f000 f9c2 	bl	80042b0 <MX_SPI1_Init>
  MX_CAN2_Init();
 8003f2c:	f000 f98a 	bl	8004244 <MX_CAN2_Init>
  MX_TIM1_Init();
 8003f30:	f000 f9f4 	bl	800431c <MX_TIM1_Init>
  MX_TIM2_Init();
 8003f34:	f000 fa9e 	bl	8004474 <MX_TIM2_Init>
  MX_TIM4_Init();
 8003f38:	f000 fb1c 	bl	8004574 <MX_TIM4_Init>
  MX_ADC1_Init();
 8003f3c:	f000 f8a8 	bl	8004090 <MX_ADC1_Init>
  MX_ADC2_Init();
 8003f40:	f000 f8f8 	bl	8004134 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  FEB_BMS_Precharge_Open();
 8003f44:	f7fd f842 	bl	8000fcc <FEB_BMS_Precharge_Open>
  FEB_BMS_Shutdown_Startup();
 8003f48:	f7fd f858 	bl	8000ffc <FEB_BMS_Shutdown_Startup>
  FEB_BMS_State_Validate();
 8003f4c:	f7fd f886 	bl	800105c <FEB_BMS_State_Validate>

  FEB_LTC6811_Init();
 8003f50:	f7fd fdb0 	bl	8001ab4 <FEB_LTC6811_Init>
  FEB_CAN_Init();
 8003f54:	f7fd f88a 	bl	800106c <FEB_CAN_Init>
  FEB_CAN_Charger_Init();
 8003f58:	f7fd f8f2 	bl	8001140 <FEB_CAN_Charger_Init>
  FEB_Fan_Init();
 8003f5c:	f7fd fc0e 	bl	800177c <FEB_Fan_Init>
  FEB_Timer_Init();
 8003f60:	f7fe fcec 	bl	800293c <FEB_Timer_Init>

  HAL_Delay(1000);
 8003f64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f68:	f001 f84a 	bl	8005000 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// *********************** Reset State ***********************
	FEB_LTC6811_Clear_Voltage();
 8003f6c:	f7fe f886 	bl	800207c <FEB_LTC6811_Clear_Voltage>
	FEB_LTC6811_Clear_Temperature();
 8003f70:	f7fe fc32 	bl	80027d8 <FEB_LTC6811_Clear_Temperature>

	// *********************** Cell Voltage ***********************
	FEB_LTC6811_Poll_Voltage();
 8003f74:	f7fd fe0c 	bl	8001b90 <FEB_LTC6811_Poll_Voltage>
  	FEB_LTC6811_Validate_Voltage();
 8003f78:	f7fd ff86 	bl	8001e88 <FEB_LTC6811_Validate_Voltage>
	FEB_LTC6811_UART_Transmit_Voltage();
 8003f7c:	f7fd ffca 	bl	8001f14 <FEB_LTC6811_UART_Transmit_Voltage>

	// *********************** Cell Temperature ***********************
	FEB_LTC6811_Poll_Temperature();
 8003f80:	f7fe f8a8 	bl	80020d4 <FEB_LTC6811_Poll_Temperature>
  	FEB_LTC6811_Validate_Temperature();
 8003f84:	f7fe fb5e 	bl	8002644 <FEB_LTC6811_Validate_Temperature>
	FEB_LTC6811_UART_Transmit_Temperature();
 8003f88:	f7fe fbaa 	bl	80026e0 <FEB_LTC6811_UART_Transmit_Temperature>

	// *********************** IVT ***********************
	FEB_CAN_IVT_Process();
 8003f8c:	f7fd fa6c 	bl	8001468 <FEB_CAN_IVT_Process>

	// *********************** Cell Balance ***********************
	FEB_LTC6811_Balance_Cells();
 8003f90:	f7fd fec2 	bl	8001d18 <FEB_LTC6811_Balance_Cells>
	FEB_LTC6811_UART_Transmit_Discharge();
 8003f94:	f7fd fef4 	bl	8001d80 <FEB_LTC6811_UART_Transmit_Discharge>

	// *********************** Charger ***********************
	FEB_CAN_Charger_Process(&hcan1);
 8003f98:	4805      	ldr	r0, [pc, #20]	; (8003fb0 <main+0xa0>)
 8003f9a:	f7fd f981 	bl	80012a0 <FEB_CAN_Charger_Process>

	// *********************** Fan ***********************
	FEB_Fan_Process();
 8003f9e:	f7fd fcdd 	bl	800195c <FEB_Fan_Process>

	// *********************** Inverter ***********************
	FEB_CAN_Inverter_Process();
 8003fa2:	f7fd fba9 	bl	80016f8 <FEB_CAN_Inverter_Process>

	if (FEB_CAN_CHARGER_STATE == 1) {
		HAL_Delay(1000);	// 1Hz
	} else {
		HAL_Delay(200);		// 5Hz
 8003fa6:	20c8      	movs	r0, #200	; 0xc8
 8003fa8:	f001 f82a 	bl	8005000 <HAL_Delay>
	FEB_LTC6811_Clear_Voltage();
 8003fac:	e7de      	b.n	8003f6c <main+0x5c>
 8003fae:	bf00      	nop
 8003fb0:	2000294c 	.word	0x2000294c

08003fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b094      	sub	sp, #80	; 0x50
 8003fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003fba:	f107 031c 	add.w	r3, r7, #28
 8003fbe:	2234      	movs	r2, #52	; 0x34
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f005 fb32 	bl	800962c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003fc8:	f107 0308 	add.w	r3, r7, #8
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	605a      	str	r2, [r3, #4]
 8003fd2:	609a      	str	r2, [r3, #8]
 8003fd4:	60da      	str	r2, [r3, #12]
 8003fd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fd8:	2300      	movs	r3, #0
 8003fda:	607b      	str	r3, [r7, #4]
 8003fdc:	4b2a      	ldr	r3, [pc, #168]	; (8004088 <SystemClock_Config+0xd4>)
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	4a29      	ldr	r2, [pc, #164]	; (8004088 <SystemClock_Config+0xd4>)
 8003fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8003fe8:	4b27      	ldr	r3, [pc, #156]	; (8004088 <SystemClock_Config+0xd4>)
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff0:	607b      	str	r3, [r7, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	4b24      	ldr	r3, [pc, #144]	; (800408c <SystemClock_Config+0xd8>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004000:	4a22      	ldr	r2, [pc, #136]	; (800408c <SystemClock_Config+0xd8>)
 8004002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	4b20      	ldr	r3, [pc, #128]	; (800408c <SystemClock_Config+0xd8>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004010:	603b      	str	r3, [r7, #0]
 8004012:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004014:	2302      	movs	r3, #2
 8004016:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004018:	2301      	movs	r3, #1
 800401a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800401c:	2310      	movs	r3, #16
 800401e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004020:	2302      	movs	r3, #2
 8004022:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004024:	2300      	movs	r3, #0
 8004026:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004028:	2308      	movs	r3, #8
 800402a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 800402c:	2380      	movs	r3, #128	; 0x80
 800402e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004030:	2302      	movs	r3, #2
 8004032:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004034:	2302      	movs	r3, #2
 8004036:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004038:	2302      	movs	r3, #2
 800403a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800403c:	f107 031c 	add.w	r3, r7, #28
 8004040:	4618      	mov	r0, r3
 8004042:	f002 ff6f 	bl	8006f24 <HAL_RCC_OscConfig>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800404c:	f000 fb74 	bl	8004738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004050:	230f      	movs	r3, #15
 8004052:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004054:	2302      	movs	r3, #2
 8004056:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004058:	2300      	movs	r3, #0
 800405a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800405c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004060:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004066:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004068:	f107 0308 	add.w	r3, r7, #8
 800406c:	2104      	movs	r1, #4
 800406e:	4618      	mov	r0, r3
 8004070:	f002 fc0e 	bl	8006890 <HAL_RCC_ClockConfig>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800407a:	f000 fb5d 	bl	8004738 <Error_Handler>
  }
}
 800407e:	bf00      	nop
 8004080:	3750      	adds	r7, #80	; 0x50
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40023800 	.word	0x40023800
 800408c:	40007000 	.word	0x40007000

08004090 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004096:	463b      	mov	r3, r7
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	605a      	str	r2, [r3, #4]
 800409e:	609a      	str	r2, [r3, #8]
 80040a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80040a2:	4b21      	ldr	r3, [pc, #132]	; (8004128 <MX_ADC1_Init+0x98>)
 80040a4:	4a21      	ldr	r2, [pc, #132]	; (800412c <MX_ADC1_Init+0x9c>)
 80040a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80040a8:	4b1f      	ldr	r3, [pc, #124]	; (8004128 <MX_ADC1_Init+0x98>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80040ae:	4b1e      	ldr	r3, [pc, #120]	; (8004128 <MX_ADC1_Init+0x98>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80040b4:	4b1c      	ldr	r3, [pc, #112]	; (8004128 <MX_ADC1_Init+0x98>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80040ba:	4b1b      	ldr	r3, [pc, #108]	; (8004128 <MX_ADC1_Init+0x98>)
 80040bc:	2200      	movs	r2, #0
 80040be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80040c0:	4b19      	ldr	r3, [pc, #100]	; (8004128 <MX_ADC1_Init+0x98>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80040c8:	4b17      	ldr	r3, [pc, #92]	; (8004128 <MX_ADC1_Init+0x98>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80040ce:	4b16      	ldr	r3, [pc, #88]	; (8004128 <MX_ADC1_Init+0x98>)
 80040d0:	4a17      	ldr	r2, [pc, #92]	; (8004130 <MX_ADC1_Init+0xa0>)
 80040d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80040d4:	4b14      	ldr	r3, [pc, #80]	; (8004128 <MX_ADC1_Init+0x98>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80040da:	4b13      	ldr	r3, [pc, #76]	; (8004128 <MX_ADC1_Init+0x98>)
 80040dc:	2201      	movs	r2, #1
 80040de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80040e0:	4b11      	ldr	r3, [pc, #68]	; (8004128 <MX_ADC1_Init+0x98>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80040e8:	4b0f      	ldr	r3, [pc, #60]	; (8004128 <MX_ADC1_Init+0x98>)
 80040ea:	2201      	movs	r2, #1
 80040ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80040ee:	480e      	ldr	r0, [pc, #56]	; (8004128 <MX_ADC1_Init+0x98>)
 80040f0:	f000 ffaa 	bl	8005048 <HAL_ADC_Init>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80040fa:	f000 fb1d 	bl	8004738 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80040fe:	2308      	movs	r3, #8
 8004100:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004102:	2301      	movs	r3, #1
 8004104:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004106:	2300      	movs	r3, #0
 8004108:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800410a:	463b      	mov	r3, r7
 800410c:	4619      	mov	r1, r3
 800410e:	4806      	ldr	r0, [pc, #24]	; (8004128 <MX_ADC1_Init+0x98>)
 8004110:	f001 f948 	bl	80053a4 <HAL_ADC_ConfigChannel>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800411a:	f000 fb0d 	bl	8004738 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800411e:	bf00      	nop
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	200028bc 	.word	0x200028bc
 800412c:	40012000 	.word	0x40012000
 8004130:	0f000001 	.word	0x0f000001

08004134 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800413a:	463b      	mov	r3, r7
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	605a      	str	r2, [r3, #4]
 8004142:	609a      	str	r2, [r3, #8]
 8004144:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004146:	4b21      	ldr	r3, [pc, #132]	; (80041cc <MX_ADC2_Init+0x98>)
 8004148:	4a21      	ldr	r2, [pc, #132]	; (80041d0 <MX_ADC2_Init+0x9c>)
 800414a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800414c:	4b1f      	ldr	r3, [pc, #124]	; (80041cc <MX_ADC2_Init+0x98>)
 800414e:	2200      	movs	r2, #0
 8004150:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004152:	4b1e      	ldr	r3, [pc, #120]	; (80041cc <MX_ADC2_Init+0x98>)
 8004154:	2200      	movs	r2, #0
 8004156:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8004158:	4b1c      	ldr	r3, [pc, #112]	; (80041cc <MX_ADC2_Init+0x98>)
 800415a:	2200      	movs	r2, #0
 800415c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800415e:	4b1b      	ldr	r3, [pc, #108]	; (80041cc <MX_ADC2_Init+0x98>)
 8004160:	2200      	movs	r2, #0
 8004162:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004164:	4b19      	ldr	r3, [pc, #100]	; (80041cc <MX_ADC2_Init+0x98>)
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800416c:	4b17      	ldr	r3, [pc, #92]	; (80041cc <MX_ADC2_Init+0x98>)
 800416e:	2200      	movs	r2, #0
 8004170:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004172:	4b16      	ldr	r3, [pc, #88]	; (80041cc <MX_ADC2_Init+0x98>)
 8004174:	4a17      	ldr	r2, [pc, #92]	; (80041d4 <MX_ADC2_Init+0xa0>)
 8004176:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004178:	4b14      	ldr	r3, [pc, #80]	; (80041cc <MX_ADC2_Init+0x98>)
 800417a:	2200      	movs	r2, #0
 800417c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800417e:	4b13      	ldr	r3, [pc, #76]	; (80041cc <MX_ADC2_Init+0x98>)
 8004180:	2201      	movs	r2, #1
 8004182:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8004184:	4b11      	ldr	r3, [pc, #68]	; (80041cc <MX_ADC2_Init+0x98>)
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800418c:	4b0f      	ldr	r3, [pc, #60]	; (80041cc <MX_ADC2_Init+0x98>)
 800418e:	2201      	movs	r2, #1
 8004190:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004192:	480e      	ldr	r0, [pc, #56]	; (80041cc <MX_ADC2_Init+0x98>)
 8004194:	f000 ff58 	bl	8005048 <HAL_ADC_Init>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800419e:	f000 facb 	bl	8004738 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80041a2:	2309      	movs	r3, #9
 80041a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80041a6:	2301      	movs	r3, #1
 80041a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80041ae:	463b      	mov	r3, r7
 80041b0:	4619      	mov	r1, r3
 80041b2:	4806      	ldr	r0, [pc, #24]	; (80041cc <MX_ADC2_Init+0x98>)
 80041b4:	f001 f8f6 	bl	80053a4 <HAL_ADC_ConfigChannel>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80041be:	f000 fabb 	bl	8004738 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	20002904 	.word	0x20002904
 80041d0:	40012100 	.word	0x40012100
 80041d4:	0f000001 	.word	0x0f000001

080041d8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80041dc:	4b17      	ldr	r3, [pc, #92]	; (800423c <MX_CAN1_Init+0x64>)
 80041de:	4a18      	ldr	r2, [pc, #96]	; (8004240 <MX_CAN1_Init+0x68>)
 80041e0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80041e2:	4b16      	ldr	r3, [pc, #88]	; (800423c <MX_CAN1_Init+0x64>)
 80041e4:	2210      	movs	r2, #16
 80041e6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80041e8:	4b14      	ldr	r3, [pc, #80]	; (800423c <MX_CAN1_Init+0x64>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80041ee:	4b13      	ldr	r3, [pc, #76]	; (800423c <MX_CAN1_Init+0x64>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80041f4:	4b11      	ldr	r3, [pc, #68]	; (800423c <MX_CAN1_Init+0x64>)
 80041f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80041fa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80041fc:	4b0f      	ldr	r3, [pc, #60]	; (800423c <MX_CAN1_Init+0x64>)
 80041fe:	2200      	movs	r2, #0
 8004200:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8004202:	4b0e      	ldr	r3, [pc, #56]	; (800423c <MX_CAN1_Init+0x64>)
 8004204:	2200      	movs	r2, #0
 8004206:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8004208:	4b0c      	ldr	r3, [pc, #48]	; (800423c <MX_CAN1_Init+0x64>)
 800420a:	2200      	movs	r2, #0
 800420c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800420e:	4b0b      	ldr	r3, [pc, #44]	; (800423c <MX_CAN1_Init+0x64>)
 8004210:	2200      	movs	r2, #0
 8004212:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8004214:	4b09      	ldr	r3, [pc, #36]	; (800423c <MX_CAN1_Init+0x64>)
 8004216:	2200      	movs	r2, #0
 8004218:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800421a:	4b08      	ldr	r3, [pc, #32]	; (800423c <MX_CAN1_Init+0x64>)
 800421c:	2200      	movs	r2, #0
 800421e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8004220:	4b06      	ldr	r3, [pc, #24]	; (800423c <MX_CAN1_Init+0x64>)
 8004222:	2200      	movs	r2, #0
 8004224:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8004226:	4805      	ldr	r0, [pc, #20]	; (800423c <MX_CAN1_Init+0x64>)
 8004228:	f001 faea 	bl	8005800 <HAL_CAN_Init>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8004232:	f000 fa81 	bl	8004738 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8004236:	bf00      	nop
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	2000294c 	.word	0x2000294c
 8004240:	40006400 	.word	0x40006400

08004244 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8004248:	4b17      	ldr	r3, [pc, #92]	; (80042a8 <MX_CAN2_Init+0x64>)
 800424a:	4a18      	ldr	r2, [pc, #96]	; (80042ac <MX_CAN2_Init+0x68>)
 800424c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800424e:	4b16      	ldr	r3, [pc, #88]	; (80042a8 <MX_CAN2_Init+0x64>)
 8004250:	2210      	movs	r2, #16
 8004252:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8004254:	4b14      	ldr	r3, [pc, #80]	; (80042a8 <MX_CAN2_Init+0x64>)
 8004256:	2200      	movs	r2, #0
 8004258:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800425a:	4b13      	ldr	r3, [pc, #76]	; (80042a8 <MX_CAN2_Init+0x64>)
 800425c:	2200      	movs	r2, #0
 800425e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8004260:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <MX_CAN2_Init+0x64>)
 8004262:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004266:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8004268:	4b0f      	ldr	r3, [pc, #60]	; (80042a8 <MX_CAN2_Init+0x64>)
 800426a:	2200      	movs	r2, #0
 800426c:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800426e:	4b0e      	ldr	r3, [pc, #56]	; (80042a8 <MX_CAN2_Init+0x64>)
 8004270:	2200      	movs	r2, #0
 8004272:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8004274:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <MX_CAN2_Init+0x64>)
 8004276:	2200      	movs	r2, #0
 8004278:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800427a:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <MX_CAN2_Init+0x64>)
 800427c:	2200      	movs	r2, #0
 800427e:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8004280:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <MX_CAN2_Init+0x64>)
 8004282:	2200      	movs	r2, #0
 8004284:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8004286:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <MX_CAN2_Init+0x64>)
 8004288:	2200      	movs	r2, #0
 800428a:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800428c:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <MX_CAN2_Init+0x64>)
 800428e:	2200      	movs	r2, #0
 8004290:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8004292:	4805      	ldr	r0, [pc, #20]	; (80042a8 <MX_CAN2_Init+0x64>)
 8004294:	f001 fab4 	bl	8005800 <HAL_CAN_Init>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 800429e:	f000 fa4b 	bl	8004738 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80042a2:	bf00      	nop
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	20002974 	.word	0x20002974
 80042ac:	40006800 	.word	0x40006800

080042b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80042b4:	4b17      	ldr	r3, [pc, #92]	; (8004314 <MX_SPI1_Init+0x64>)
 80042b6:	4a18      	ldr	r2, [pc, #96]	; (8004318 <MX_SPI1_Init+0x68>)
 80042b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80042ba:	4b16      	ldr	r3, [pc, #88]	; (8004314 <MX_SPI1_Init+0x64>)
 80042bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80042c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80042c2:	4b14      	ldr	r3, [pc, #80]	; (8004314 <MX_SPI1_Init+0x64>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80042c8:	4b12      	ldr	r3, [pc, #72]	; (8004314 <MX_SPI1_Init+0x64>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80042ce:	4b11      	ldr	r3, [pc, #68]	; (8004314 <MX_SPI1_Init+0x64>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80042d4:	4b0f      	ldr	r3, [pc, #60]	; (8004314 <MX_SPI1_Init+0x64>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80042da:	4b0e      	ldr	r3, [pc, #56]	; (8004314 <MX_SPI1_Init+0x64>)
 80042dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80042e2:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <MX_SPI1_Init+0x64>)
 80042e4:	2228      	movs	r2, #40	; 0x28
 80042e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042e8:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <MX_SPI1_Init+0x64>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80042ee:	4b09      	ldr	r3, [pc, #36]	; (8004314 <MX_SPI1_Init+0x64>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042f4:	4b07      	ldr	r3, [pc, #28]	; (8004314 <MX_SPI1_Init+0x64>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80042fa:	4b06      	ldr	r3, [pc, #24]	; (8004314 <MX_SPI1_Init+0x64>)
 80042fc:	220a      	movs	r2, #10
 80042fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004300:	4804      	ldr	r0, [pc, #16]	; (8004314 <MX_SPI1_Init+0x64>)
 8004302:	f003 f8ad 	bl	8007460 <HAL_SPI_Init>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800430c:	f000 fa14 	bl	8004738 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004310:	bf00      	nop
 8004312:	bd80      	pop	{r7, pc}
 8004314:	2000299c 	.word	0x2000299c
 8004318:	40013000 	.word	0x40013000

0800431c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b096      	sub	sp, #88	; 0x58
 8004320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004322:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	605a      	str	r2, [r3, #4]
 800432c:	609a      	str	r2, [r3, #8]
 800432e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004330:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800433a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	605a      	str	r2, [r3, #4]
 8004344:	609a      	str	r2, [r3, #8]
 8004346:	60da      	str	r2, [r3, #12]
 8004348:	611a      	str	r2, [r3, #16]
 800434a:	615a      	str	r2, [r3, #20]
 800434c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800434e:	1d3b      	adds	r3, r7, #4
 8004350:	2220      	movs	r2, #32
 8004352:	2100      	movs	r1, #0
 8004354:	4618      	mov	r0, r3
 8004356:	f005 f969 	bl	800962c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800435a:	4b44      	ldr	r3, [pc, #272]	; (800446c <MX_TIM1_Init+0x150>)
 800435c:	4a44      	ldr	r2, [pc, #272]	; (8004470 <MX_TIM1_Init+0x154>)
 800435e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004360:	4b42      	ldr	r3, [pc, #264]	; (800446c <MX_TIM1_Init+0x150>)
 8004362:	2200      	movs	r2, #0
 8004364:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004366:	4b41      	ldr	r3, [pc, #260]	; (800446c <MX_TIM1_Init+0x150>)
 8004368:	2200      	movs	r2, #0
 800436a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800436c:	4b3f      	ldr	r3, [pc, #252]	; (800446c <MX_TIM1_Init+0x150>)
 800436e:	22ff      	movs	r2, #255	; 0xff
 8004370:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004372:	4b3e      	ldr	r3, [pc, #248]	; (800446c <MX_TIM1_Init+0x150>)
 8004374:	2200      	movs	r2, #0
 8004376:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004378:	4b3c      	ldr	r3, [pc, #240]	; (800446c <MX_TIM1_Init+0x150>)
 800437a:	2200      	movs	r2, #0
 800437c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800437e:	4b3b      	ldr	r3, [pc, #236]	; (800446c <MX_TIM1_Init+0x150>)
 8004380:	2200      	movs	r2, #0
 8004382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004384:	4839      	ldr	r0, [pc, #228]	; (800446c <MX_TIM1_Init+0x150>)
 8004386:	f003 fe13 	bl	8007fb0 <HAL_TIM_Base_Init>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8004390:	f000 f9d2 	bl	8004738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004398:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800439a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800439e:	4619      	mov	r1, r3
 80043a0:	4832      	ldr	r0, [pc, #200]	; (800446c <MX_TIM1_Init+0x150>)
 80043a2:	f004 f8a1 	bl	80084e8 <HAL_TIM_ConfigClockSource>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80043ac:	f000 f9c4 	bl	8004738 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80043b0:	482e      	ldr	r0, [pc, #184]	; (800446c <MX_TIM1_Init+0x150>)
 80043b2:	f003 feb5 	bl	8008120 <HAL_TIM_PWM_Init>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80043bc:	f000 f9bc 	bl	8004738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043c0:	2300      	movs	r3, #0
 80043c2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043c4:	2300      	movs	r3, #0
 80043c6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80043c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80043cc:	4619      	mov	r1, r3
 80043ce:	4827      	ldr	r0, [pc, #156]	; (800446c <MX_TIM1_Init+0x150>)
 80043d0:	f004 fc62 	bl	8008c98 <HAL_TIMEx_MasterConfigSynchronization>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80043da:	f000 f9ad 	bl	8004738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043de:	2360      	movs	r3, #96	; 0x60
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80043e2:	2300      	movs	r3, #0
 80043e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043e6:	2300      	movs	r3, #0
 80043e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80043ea:	2300      	movs	r3, #0
 80043ec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043ee:	2300      	movs	r3, #0
 80043f0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80043f2:	2300      	movs	r3, #0
 80043f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80043f6:	2300      	movs	r3, #0
 80043f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80043fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043fe:	2200      	movs	r2, #0
 8004400:	4619      	mov	r1, r3
 8004402:	481a      	ldr	r0, [pc, #104]	; (800446c <MX_TIM1_Init+0x150>)
 8004404:	f003 ffae 	bl	8008364 <HAL_TIM_PWM_ConfigChannel>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800440e:	f000 f993 	bl	8004738 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004416:	2204      	movs	r2, #4
 8004418:	4619      	mov	r1, r3
 800441a:	4814      	ldr	r0, [pc, #80]	; (800446c <MX_TIM1_Init+0x150>)
 800441c:	f003 ffa2 	bl	8008364 <HAL_TIM_PWM_ConfigChannel>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8004426:	f000 f987 	bl	8004738 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800442a:	2300      	movs	r3, #0
 800442c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800442e:	2300      	movs	r3, #0
 8004430:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004436:	2300      	movs	r3, #0
 8004438:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800443e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004442:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004444:	2300      	movs	r3, #0
 8004446:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004448:	1d3b      	adds	r3, r7, #4
 800444a:	4619      	mov	r1, r3
 800444c:	4807      	ldr	r0, [pc, #28]	; (800446c <MX_TIM1_Init+0x150>)
 800444e:	f004 fc9f 	bl	8008d90 <HAL_TIMEx_ConfigBreakDeadTime>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8004458:	f000 f96e 	bl	8004738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800445c:	4803      	ldr	r0, [pc, #12]	; (800446c <MX_TIM1_Init+0x150>)
 800445e:	f000 fb63 	bl	8004b28 <HAL_TIM_MspPostInit>

}
 8004462:	bf00      	nop
 8004464:	3758      	adds	r7, #88	; 0x58
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	200029f4 	.word	0x200029f4
 8004470:	40010000 	.word	0x40010000

08004474 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08e      	sub	sp, #56	; 0x38
 8004478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800447a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	605a      	str	r2, [r3, #4]
 8004484:	609a      	str	r2, [r3, #8]
 8004486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004488:	f107 0320 	add.w	r3, r7, #32
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004492:	1d3b      	adds	r3, r7, #4
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	605a      	str	r2, [r3, #4]
 800449a:	609a      	str	r2, [r3, #8]
 800449c:	60da      	str	r2, [r3, #12]
 800449e:	611a      	str	r2, [r3, #16]
 80044a0:	615a      	str	r2, [r3, #20]
 80044a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80044a4:	4b32      	ldr	r3, [pc, #200]	; (8004570 <MX_TIM2_Init+0xfc>)
 80044a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80044aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80044ac:	4b30      	ldr	r3, [pc, #192]	; (8004570 <MX_TIM2_Init+0xfc>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044b2:	4b2f      	ldr	r3, [pc, #188]	; (8004570 <MX_TIM2_Init+0xfc>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80044b8:	4b2d      	ldr	r3, [pc, #180]	; (8004570 <MX_TIM2_Init+0xfc>)
 80044ba:	22ff      	movs	r2, #255	; 0xff
 80044bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044be:	4b2c      	ldr	r3, [pc, #176]	; (8004570 <MX_TIM2_Init+0xfc>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044c4:	4b2a      	ldr	r3, [pc, #168]	; (8004570 <MX_TIM2_Init+0xfc>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80044ca:	4829      	ldr	r0, [pc, #164]	; (8004570 <MX_TIM2_Init+0xfc>)
 80044cc:	f003 fd70 	bl	8007fb0 <HAL_TIM_Base_Init>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80044d6:	f000 f92f 	bl	8004738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80044e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044e4:	4619      	mov	r1, r3
 80044e6:	4822      	ldr	r0, [pc, #136]	; (8004570 <MX_TIM2_Init+0xfc>)
 80044e8:	f003 fffe 	bl	80084e8 <HAL_TIM_ConfigClockSource>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80044f2:	f000 f921 	bl	8004738 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80044f6:	481e      	ldr	r0, [pc, #120]	; (8004570 <MX_TIM2_Init+0xfc>)
 80044f8:	f003 fe12 	bl	8008120 <HAL_TIM_PWM_Init>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8004502:	f000 f919 	bl	8004738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004506:	2300      	movs	r3, #0
 8004508:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800450a:	2300      	movs	r3, #0
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800450e:	f107 0320 	add.w	r3, r7, #32
 8004512:	4619      	mov	r1, r3
 8004514:	4816      	ldr	r0, [pc, #88]	; (8004570 <MX_TIM2_Init+0xfc>)
 8004516:	f004 fbbf 	bl	8008c98 <HAL_TIMEx_MasterConfigSynchronization>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8004520:	f000 f90a 	bl	8004738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004524:	2360      	movs	r3, #96	; 0x60
 8004526:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004528:	2300      	movs	r3, #0
 800452a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800452c:	2300      	movs	r3, #0
 800452e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004530:	2300      	movs	r3, #0
 8004532:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004534:	1d3b      	adds	r3, r7, #4
 8004536:	2200      	movs	r2, #0
 8004538:	4619      	mov	r1, r3
 800453a:	480d      	ldr	r0, [pc, #52]	; (8004570 <MX_TIM2_Init+0xfc>)
 800453c:	f003 ff12 	bl	8008364 <HAL_TIM_PWM_ConfigChannel>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8004546:	f000 f8f7 	bl	8004738 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800454a:	1d3b      	adds	r3, r7, #4
 800454c:	2204      	movs	r2, #4
 800454e:	4619      	mov	r1, r3
 8004550:	4807      	ldr	r0, [pc, #28]	; (8004570 <MX_TIM2_Init+0xfc>)
 8004552:	f003 ff07 	bl	8008364 <HAL_TIM_PWM_ConfigChannel>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 800455c:	f000 f8ec 	bl	8004738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004560:	4803      	ldr	r0, [pc, #12]	; (8004570 <MX_TIM2_Init+0xfc>)
 8004562:	f000 fae1 	bl	8004b28 <HAL_TIM_MspPostInit>

}
 8004566:	bf00      	nop
 8004568:	3738      	adds	r7, #56	; 0x38
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	20002a3c 	.word	0x20002a3c

08004574 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800457a:	f107 0308 	add.w	r3, r7, #8
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	605a      	str	r2, [r3, #4]
 8004584:	609a      	str	r2, [r3, #8]
 8004586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004588:	463b      	mov	r3, r7
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004590:	4b1d      	ldr	r3, [pc, #116]	; (8004608 <MX_TIM4_Init+0x94>)
 8004592:	4a1e      	ldr	r2, [pc, #120]	; (800460c <MX_TIM4_Init+0x98>)
 8004594:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 8004596:	4b1c      	ldr	r3, [pc, #112]	; (8004608 <MX_TIM4_Init+0x94>)
 8004598:	223f      	movs	r2, #63	; 0x3f
 800459a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800459c:	4b1a      	ldr	r3, [pc, #104]	; (8004608 <MX_TIM4_Init+0x94>)
 800459e:	2200      	movs	r2, #0
 80045a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80045a2:	4b19      	ldr	r3, [pc, #100]	; (8004608 <MX_TIM4_Init+0x94>)
 80045a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045aa:	4b17      	ldr	r3, [pc, #92]	; (8004608 <MX_TIM4_Init+0x94>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045b0:	4b15      	ldr	r3, [pc, #84]	; (8004608 <MX_TIM4_Init+0x94>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80045b6:	4814      	ldr	r0, [pc, #80]	; (8004608 <MX_TIM4_Init+0x94>)
 80045b8:	f003 fcfa 	bl	8007fb0 <HAL_TIM_Base_Init>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80045c2:	f000 f8b9 	bl	8004738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80045cc:	f107 0308 	add.w	r3, r7, #8
 80045d0:	4619      	mov	r1, r3
 80045d2:	480d      	ldr	r0, [pc, #52]	; (8004608 <MX_TIM4_Init+0x94>)
 80045d4:	f003 ff88 	bl	80084e8 <HAL_TIM_ConfigClockSource>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80045de:	f000 f8ab 	bl	8004738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045e2:	2300      	movs	r3, #0
 80045e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045e6:	2300      	movs	r3, #0
 80045e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80045ea:	463b      	mov	r3, r7
 80045ec:	4619      	mov	r1, r3
 80045ee:	4806      	ldr	r0, [pc, #24]	; (8004608 <MX_TIM4_Init+0x94>)
 80045f0:	f004 fb52 	bl	8008c98 <HAL_TIMEx_MasterConfigSynchronization>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80045fa:	f000 f89d 	bl	8004738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80045fe:	bf00      	nop
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	20002a84 	.word	0x20002a84
 800460c:	40000800 	.word	0x40000800

08004610 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004614:	4b11      	ldr	r3, [pc, #68]	; (800465c <MX_USART2_UART_Init+0x4c>)
 8004616:	4a12      	ldr	r2, [pc, #72]	; (8004660 <MX_USART2_UART_Init+0x50>)
 8004618:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800461a:	4b10      	ldr	r3, [pc, #64]	; (800465c <MX_USART2_UART_Init+0x4c>)
 800461c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004620:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004622:	4b0e      	ldr	r3, [pc, #56]	; (800465c <MX_USART2_UART_Init+0x4c>)
 8004624:	2200      	movs	r2, #0
 8004626:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004628:	4b0c      	ldr	r3, [pc, #48]	; (800465c <MX_USART2_UART_Init+0x4c>)
 800462a:	2200      	movs	r2, #0
 800462c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800462e:	4b0b      	ldr	r3, [pc, #44]	; (800465c <MX_USART2_UART_Init+0x4c>)
 8004630:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004634:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8004636:	4b09      	ldr	r3, [pc, #36]	; (800465c <MX_USART2_UART_Init+0x4c>)
 8004638:	2208      	movs	r2, #8
 800463a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800463c:	4b07      	ldr	r3, [pc, #28]	; (800465c <MX_USART2_UART_Init+0x4c>)
 800463e:	2200      	movs	r2, #0
 8004640:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004642:	4b06      	ldr	r3, [pc, #24]	; (800465c <MX_USART2_UART_Init+0x4c>)
 8004644:	2200      	movs	r2, #0
 8004646:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004648:	4804      	ldr	r0, [pc, #16]	; (800465c <MX_USART2_UART_Init+0x4c>)
 800464a:	f004 fbf3 	bl	8008e34 <HAL_UART_Init>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8004654:	f000 f870 	bl	8004738 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004658:	bf00      	nop
 800465a:	bd80      	pop	{r7, pc}
 800465c:	20002acc 	.word	0x20002acc
 8004660:	40004400 	.word	0x40004400

08004664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b088      	sub	sp, #32
 8004668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800466a:	f107 030c 	add.w	r3, r7, #12
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	605a      	str	r2, [r3, #4]
 8004674:	609a      	str	r2, [r3, #8]
 8004676:	60da      	str	r2, [r3, #12]
 8004678:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800467a:	2300      	movs	r3, #0
 800467c:	60bb      	str	r3, [r7, #8]
 800467e:	4b2b      	ldr	r3, [pc, #172]	; (800472c <MX_GPIO_Init+0xc8>)
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	4a2a      	ldr	r2, [pc, #168]	; (800472c <MX_GPIO_Init+0xc8>)
 8004684:	f043 0304 	orr.w	r3, r3, #4
 8004688:	6313      	str	r3, [r2, #48]	; 0x30
 800468a:	4b28      	ldr	r3, [pc, #160]	; (800472c <MX_GPIO_Init+0xc8>)
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	60bb      	str	r3, [r7, #8]
 8004694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004696:	2300      	movs	r3, #0
 8004698:	607b      	str	r3, [r7, #4]
 800469a:	4b24      	ldr	r3, [pc, #144]	; (800472c <MX_GPIO_Init+0xc8>)
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	4a23      	ldr	r2, [pc, #140]	; (800472c <MX_GPIO_Init+0xc8>)
 80046a0:	f043 0301 	orr.w	r3, r3, #1
 80046a4:	6313      	str	r3, [r2, #48]	; 0x30
 80046a6:	4b21      	ldr	r3, [pc, #132]	; (800472c <MX_GPIO_Init+0xc8>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	607b      	str	r3, [r7, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046b2:	2300      	movs	r3, #0
 80046b4:	603b      	str	r3, [r7, #0]
 80046b6:	4b1d      	ldr	r3, [pc, #116]	; (800472c <MX_GPIO_Init+0xc8>)
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	4a1c      	ldr	r2, [pc, #112]	; (800472c <MX_GPIO_Init+0xc8>)
 80046bc:	f043 0302 	orr.w	r3, r3, #2
 80046c0:	6313      	str	r3, [r2, #48]	; 0x30
 80046c2:	4b1a      	ldr	r3, [pc, #104]	; (800472c <MX_GPIO_Init+0xc8>)
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9, GPIO_PIN_RESET);
 80046ce:	2200      	movs	r2, #0
 80046d0:	f240 210e 	movw	r1, #526	; 0x20e
 80046d4:	4816      	ldr	r0, [pc, #88]	; (8004730 <MX_GPIO_Init+0xcc>)
 80046d6:	f002 f8c1 	bl	800685c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 80046da:	2200      	movs	r2, #0
 80046dc:	f240 4104 	movw	r1, #1028	; 0x404
 80046e0:	4814      	ldr	r0, [pc, #80]	; (8004734 <MX_GPIO_Init+0xd0>)
 80046e2:	f002 f8bb 	bl	800685c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 PC3 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9;
 80046e6:	f240 230e 	movw	r3, #526	; 0x20e
 80046ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046ec:	2301      	movs	r3, #1
 80046ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046f4:	2300      	movs	r3, #0
 80046f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046f8:	f107 030c 	add.w	r3, r7, #12
 80046fc:	4619      	mov	r1, r3
 80046fe:	480c      	ldr	r0, [pc, #48]	; (8004730 <MX_GPIO_Init+0xcc>)
 8004700:	f001 ff18 	bl	8006534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8004704:	f240 4304 	movw	r3, #1028	; 0x404
 8004708:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800470a:	2301      	movs	r3, #1
 800470c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800470e:	2300      	movs	r3, #0
 8004710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004712:	2300      	movs	r3, #0
 8004714:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004716:	f107 030c 	add.w	r3, r7, #12
 800471a:	4619      	mov	r1, r3
 800471c:	4805      	ldr	r0, [pc, #20]	; (8004734 <MX_GPIO_Init+0xd0>)
 800471e:	f001 ff09 	bl	8006534 <HAL_GPIO_Init>

}
 8004722:	bf00      	nop
 8004724:	3720      	adds	r7, #32
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40023800 	.word	0x40023800
 8004730:	40020800 	.word	0x40020800
 8004734:	40020400 	.word	0x40020400

08004738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800473c:	b672      	cpsid	i
}
 800473e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004740:	e7fe      	b.n	8004740 <Error_Handler+0x8>
	...

08004744 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800474a:	2300      	movs	r3, #0
 800474c:	607b      	str	r3, [r7, #4]
 800474e:	4b10      	ldr	r3, [pc, #64]	; (8004790 <HAL_MspInit+0x4c>)
 8004750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004752:	4a0f      	ldr	r2, [pc, #60]	; (8004790 <HAL_MspInit+0x4c>)
 8004754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004758:	6453      	str	r3, [r2, #68]	; 0x44
 800475a:	4b0d      	ldr	r3, [pc, #52]	; (8004790 <HAL_MspInit+0x4c>)
 800475c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004762:	607b      	str	r3, [r7, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004766:	2300      	movs	r3, #0
 8004768:	603b      	str	r3, [r7, #0]
 800476a:	4b09      	ldr	r3, [pc, #36]	; (8004790 <HAL_MspInit+0x4c>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	4a08      	ldr	r2, [pc, #32]	; (8004790 <HAL_MspInit+0x4c>)
 8004770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004774:	6413      	str	r3, [r2, #64]	; 0x40
 8004776:	4b06      	ldr	r3, [pc, #24]	; (8004790 <HAL_MspInit+0x4c>)
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004782:	2007      	movs	r0, #7
 8004784:	f001 fe94 	bl	80064b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004788:	bf00      	nop
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40023800 	.word	0x40023800

08004794 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b08c      	sub	sp, #48	; 0x30
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800479c:	f107 031c 	add.w	r3, r7, #28
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	605a      	str	r2, [r3, #4]
 80047a6:	609a      	str	r2, [r3, #8]
 80047a8:	60da      	str	r2, [r3, #12]
 80047aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a2e      	ldr	r2, [pc, #184]	; (800486c <HAL_ADC_MspInit+0xd8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d128      	bne.n	8004808 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80047b6:	2300      	movs	r3, #0
 80047b8:	61bb      	str	r3, [r7, #24]
 80047ba:	4b2d      	ldr	r3, [pc, #180]	; (8004870 <HAL_ADC_MspInit+0xdc>)
 80047bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047be:	4a2c      	ldr	r2, [pc, #176]	; (8004870 <HAL_ADC_MspInit+0xdc>)
 80047c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c4:	6453      	str	r3, [r2, #68]	; 0x44
 80047c6:	4b2a      	ldr	r3, [pc, #168]	; (8004870 <HAL_ADC_MspInit+0xdc>)
 80047c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ce:	61bb      	str	r3, [r7, #24]
 80047d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]
 80047d6:	4b26      	ldr	r3, [pc, #152]	; (8004870 <HAL_ADC_MspInit+0xdc>)
 80047d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047da:	4a25      	ldr	r2, [pc, #148]	; (8004870 <HAL_ADC_MspInit+0xdc>)
 80047dc:	f043 0302 	orr.w	r3, r3, #2
 80047e0:	6313      	str	r3, [r2, #48]	; 0x30
 80047e2:	4b23      	ldr	r3, [pc, #140]	; (8004870 <HAL_ADC_MspInit+0xdc>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80047ee:	2301      	movs	r3, #1
 80047f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047f2:	2303      	movs	r3, #3
 80047f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047fa:	f107 031c 	add.w	r3, r7, #28
 80047fe:	4619      	mov	r1, r3
 8004800:	481c      	ldr	r0, [pc, #112]	; (8004874 <HAL_ADC_MspInit+0xe0>)
 8004802:	f001 fe97 	bl	8006534 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004806:	e02c      	b.n	8004862 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a1a      	ldr	r2, [pc, #104]	; (8004878 <HAL_ADC_MspInit+0xe4>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d127      	bne.n	8004862 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004812:	2300      	movs	r3, #0
 8004814:	613b      	str	r3, [r7, #16]
 8004816:	4b16      	ldr	r3, [pc, #88]	; (8004870 <HAL_ADC_MspInit+0xdc>)
 8004818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481a:	4a15      	ldr	r2, [pc, #84]	; (8004870 <HAL_ADC_MspInit+0xdc>)
 800481c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004820:	6453      	str	r3, [r2, #68]	; 0x44
 8004822:	4b13      	ldr	r3, [pc, #76]	; (8004870 <HAL_ADC_MspInit+0xdc>)
 8004824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800482a:	613b      	str	r3, [r7, #16]
 800482c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	4b0f      	ldr	r3, [pc, #60]	; (8004870 <HAL_ADC_MspInit+0xdc>)
 8004834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004836:	4a0e      	ldr	r2, [pc, #56]	; (8004870 <HAL_ADC_MspInit+0xdc>)
 8004838:	f043 0302 	orr.w	r3, r3, #2
 800483c:	6313      	str	r3, [r2, #48]	; 0x30
 800483e:	4b0c      	ldr	r3, [pc, #48]	; (8004870 <HAL_ADC_MspInit+0xdc>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800484a:	2302      	movs	r3, #2
 800484c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800484e:	2303      	movs	r3, #3
 8004850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004852:	2300      	movs	r3, #0
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004856:	f107 031c 	add.w	r3, r7, #28
 800485a:	4619      	mov	r1, r3
 800485c:	4805      	ldr	r0, [pc, #20]	; (8004874 <HAL_ADC_MspInit+0xe0>)
 800485e:	f001 fe69 	bl	8006534 <HAL_GPIO_Init>
}
 8004862:	bf00      	nop
 8004864:	3730      	adds	r7, #48	; 0x30
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40012000 	.word	0x40012000
 8004870:	40023800 	.word	0x40023800
 8004874:	40020400 	.word	0x40020400
 8004878:	40012100 	.word	0x40012100

0800487c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b08c      	sub	sp, #48	; 0x30
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004884:	f107 031c 	add.w	r3, r7, #28
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	605a      	str	r2, [r3, #4]
 800488e:	609a      	str	r2, [r3, #8]
 8004890:	60da      	str	r2, [r3, #12]
 8004892:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a53      	ldr	r2, [pc, #332]	; (80049e8 <HAL_CAN_MspInit+0x16c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d146      	bne.n	800492c <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800489e:	4b53      	ldr	r3, [pc, #332]	; (80049ec <HAL_CAN_MspInit+0x170>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3301      	adds	r3, #1
 80048a4:	4a51      	ldr	r2, [pc, #324]	; (80049ec <HAL_CAN_MspInit+0x170>)
 80048a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80048a8:	4b50      	ldr	r3, [pc, #320]	; (80049ec <HAL_CAN_MspInit+0x170>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d10d      	bne.n	80048cc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80048b0:	2300      	movs	r3, #0
 80048b2:	61bb      	str	r3, [r7, #24]
 80048b4:	4b4e      	ldr	r3, [pc, #312]	; (80049f0 <HAL_CAN_MspInit+0x174>)
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	4a4d      	ldr	r2, [pc, #308]	; (80049f0 <HAL_CAN_MspInit+0x174>)
 80048ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80048be:	6413      	str	r3, [r2, #64]	; 0x40
 80048c0:	4b4b      	ldr	r3, [pc, #300]	; (80049f0 <HAL_CAN_MspInit+0x174>)
 80048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c8:	61bb      	str	r3, [r7, #24]
 80048ca:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048cc:	2300      	movs	r3, #0
 80048ce:	617b      	str	r3, [r7, #20]
 80048d0:	4b47      	ldr	r3, [pc, #284]	; (80049f0 <HAL_CAN_MspInit+0x174>)
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	4a46      	ldr	r2, [pc, #280]	; (80049f0 <HAL_CAN_MspInit+0x174>)
 80048d6:	f043 0301 	orr.w	r3, r3, #1
 80048da:	6313      	str	r3, [r2, #48]	; 0x30
 80048dc:	4b44      	ldr	r3, [pc, #272]	; (80049f0 <HAL_CAN_MspInit+0x174>)
 80048de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	617b      	str	r3, [r7, #20]
 80048e6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80048e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80048ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ee:	2302      	movs	r3, #2
 80048f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048f6:	2303      	movs	r3, #3
 80048f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80048fa:	2309      	movs	r3, #9
 80048fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048fe:	f107 031c 	add.w	r3, r7, #28
 8004902:	4619      	mov	r1, r3
 8004904:	483b      	ldr	r0, [pc, #236]	; (80049f4 <HAL_CAN_MspInit+0x178>)
 8004906:	f001 fe15 	bl	8006534 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800490a:	2200      	movs	r2, #0
 800490c:	2100      	movs	r1, #0
 800490e:	2014      	movs	r0, #20
 8004910:	f001 fdd9 	bl	80064c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004914:	2014      	movs	r0, #20
 8004916:	f001 fdf2 	bl	80064fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800491a:	2200      	movs	r2, #0
 800491c:	2100      	movs	r1, #0
 800491e:	2015      	movs	r0, #21
 8004920:	f001 fdd1 	bl	80064c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8004924:	2015      	movs	r0, #21
 8004926:	f001 fdea 	bl	80064fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800492a:	e058      	b.n	80049de <HAL_CAN_MspInit+0x162>
  else if(hcan->Instance==CAN2)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a31      	ldr	r2, [pc, #196]	; (80049f8 <HAL_CAN_MspInit+0x17c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d153      	bne.n	80049de <HAL_CAN_MspInit+0x162>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004936:	2300      	movs	r3, #0
 8004938:	613b      	str	r3, [r7, #16]
 800493a:	4b2d      	ldr	r3, [pc, #180]	; (80049f0 <HAL_CAN_MspInit+0x174>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	4a2c      	ldr	r2, [pc, #176]	; (80049f0 <HAL_CAN_MspInit+0x174>)
 8004940:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004944:	6413      	str	r3, [r2, #64]	; 0x40
 8004946:	4b2a      	ldr	r3, [pc, #168]	; (80049f0 <HAL_CAN_MspInit+0x174>)
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004952:	4b26      	ldr	r3, [pc, #152]	; (80049ec <HAL_CAN_MspInit+0x170>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3301      	adds	r3, #1
 8004958:	4a24      	ldr	r2, [pc, #144]	; (80049ec <HAL_CAN_MspInit+0x170>)
 800495a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800495c:	4b23      	ldr	r3, [pc, #140]	; (80049ec <HAL_CAN_MspInit+0x170>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d10d      	bne.n	8004980 <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004964:	2300      	movs	r3, #0
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	4b21      	ldr	r3, [pc, #132]	; (80049f0 <HAL_CAN_MspInit+0x174>)
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	4a20      	ldr	r2, [pc, #128]	; (80049f0 <HAL_CAN_MspInit+0x174>)
 800496e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004972:	6413      	str	r3, [r2, #64]	; 0x40
 8004974:	4b1e      	ldr	r3, [pc, #120]	; (80049f0 <HAL_CAN_MspInit+0x174>)
 8004976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004980:	2300      	movs	r3, #0
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	4b1a      	ldr	r3, [pc, #104]	; (80049f0 <HAL_CAN_MspInit+0x174>)
 8004986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004988:	4a19      	ldr	r2, [pc, #100]	; (80049f0 <HAL_CAN_MspInit+0x174>)
 800498a:	f043 0302 	orr.w	r3, r3, #2
 800498e:	6313      	str	r3, [r2, #48]	; 0x30
 8004990:	4b17      	ldr	r3, [pc, #92]	; (80049f0 <HAL_CAN_MspInit+0x174>)
 8004992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	60bb      	str	r3, [r7, #8]
 800499a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800499c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80049a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049a2:	2302      	movs	r3, #2
 80049a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a6:	2300      	movs	r3, #0
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049aa:	2303      	movs	r3, #3
 80049ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80049ae:	2309      	movs	r3, #9
 80049b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049b2:	f107 031c 	add.w	r3, r7, #28
 80049b6:	4619      	mov	r1, r3
 80049b8:	4810      	ldr	r0, [pc, #64]	; (80049fc <HAL_CAN_MspInit+0x180>)
 80049ba:	f001 fdbb 	bl	8006534 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80049be:	2200      	movs	r2, #0
 80049c0:	2100      	movs	r1, #0
 80049c2:	2040      	movs	r0, #64	; 0x40
 80049c4:	f001 fd7f 	bl	80064c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80049c8:	2040      	movs	r0, #64	; 0x40
 80049ca:	f001 fd98 	bl	80064fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 80049ce:	2200      	movs	r2, #0
 80049d0:	2100      	movs	r1, #0
 80049d2:	2041      	movs	r0, #65	; 0x41
 80049d4:	f001 fd77 	bl	80064c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80049d8:	2041      	movs	r0, #65	; 0x41
 80049da:	f001 fd90 	bl	80064fe <HAL_NVIC_EnableIRQ>
}
 80049de:	bf00      	nop
 80049e0:	3730      	adds	r7, #48	; 0x30
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40006400 	.word	0x40006400
 80049ec:	20002b10 	.word	0x20002b10
 80049f0:	40023800 	.word	0x40023800
 80049f4:	40020000 	.word	0x40020000
 80049f8:	40006800 	.word	0x40006800
 80049fc:	40020400 	.word	0x40020400

08004a00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b08a      	sub	sp, #40	; 0x28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a08:	f107 0314 	add.w	r3, r7, #20
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	605a      	str	r2, [r3, #4]
 8004a12:	609a      	str	r2, [r3, #8]
 8004a14:	60da      	str	r2, [r3, #12]
 8004a16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a19      	ldr	r2, [pc, #100]	; (8004a84 <HAL_SPI_MspInit+0x84>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d12b      	bne.n	8004a7a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004a22:	2300      	movs	r3, #0
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	4b18      	ldr	r3, [pc, #96]	; (8004a88 <HAL_SPI_MspInit+0x88>)
 8004a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2a:	4a17      	ldr	r2, [pc, #92]	; (8004a88 <HAL_SPI_MspInit+0x88>)
 8004a2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a30:	6453      	str	r3, [r2, #68]	; 0x44
 8004a32:	4b15      	ldr	r3, [pc, #84]	; (8004a88 <HAL_SPI_MspInit+0x88>)
 8004a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a3a:	613b      	str	r3, [r7, #16]
 8004a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
 8004a42:	4b11      	ldr	r3, [pc, #68]	; (8004a88 <HAL_SPI_MspInit+0x88>)
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	4a10      	ldr	r2, [pc, #64]	; (8004a88 <HAL_SPI_MspInit+0x88>)
 8004a48:	f043 0301 	orr.w	r3, r3, #1
 8004a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a4e:	4b0e      	ldr	r3, [pc, #56]	; (8004a88 <HAL_SPI_MspInit+0x88>)
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004a5a:	23e0      	movs	r3, #224	; 0xe0
 8004a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a5e:	2302      	movs	r3, #2
 8004a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a62:	2300      	movs	r3, #0
 8004a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a66:	2303      	movs	r3, #3
 8004a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004a6a:	2305      	movs	r3, #5
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a6e:	f107 0314 	add.w	r3, r7, #20
 8004a72:	4619      	mov	r1, r3
 8004a74:	4805      	ldr	r0, [pc, #20]	; (8004a8c <HAL_SPI_MspInit+0x8c>)
 8004a76:	f001 fd5d 	bl	8006534 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004a7a:	bf00      	nop
 8004a7c:	3728      	adds	r7, #40	; 0x28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	40013000 	.word	0x40013000
 8004a88:	40023800 	.word	0x40023800
 8004a8c:	40020000 	.word	0x40020000

08004a90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a1f      	ldr	r2, [pc, #124]	; (8004b1c <HAL_TIM_Base_MspInit+0x8c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d10e      	bne.n	8004ac0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	617b      	str	r3, [r7, #20]
 8004aa6:	4b1e      	ldr	r3, [pc, #120]	; (8004b20 <HAL_TIM_Base_MspInit+0x90>)
 8004aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aaa:	4a1d      	ldr	r2, [pc, #116]	; (8004b20 <HAL_TIM_Base_MspInit+0x90>)
 8004aac:	f043 0301 	orr.w	r3, r3, #1
 8004ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ab2:	4b1b      	ldr	r3, [pc, #108]	; (8004b20 <HAL_TIM_Base_MspInit+0x90>)
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004abe:	e026      	b.n	8004b0e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac8:	d10e      	bne.n	8004ae8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004aca:	2300      	movs	r3, #0
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	4b14      	ldr	r3, [pc, #80]	; (8004b20 <HAL_TIM_Base_MspInit+0x90>)
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	4a13      	ldr	r2, [pc, #76]	; (8004b20 <HAL_TIM_Base_MspInit+0x90>)
 8004ad4:	f043 0301 	orr.w	r3, r3, #1
 8004ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8004ada:	4b11      	ldr	r3, [pc, #68]	; (8004b20 <HAL_TIM_Base_MspInit+0x90>)
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	613b      	str	r3, [r7, #16]
 8004ae4:	693b      	ldr	r3, [r7, #16]
}
 8004ae6:	e012      	b.n	8004b0e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a0d      	ldr	r2, [pc, #52]	; (8004b24 <HAL_TIM_Base_MspInit+0x94>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d10d      	bne.n	8004b0e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004af2:	2300      	movs	r3, #0
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <HAL_TIM_Base_MspInit+0x90>)
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	4a09      	ldr	r2, [pc, #36]	; (8004b20 <HAL_TIM_Base_MspInit+0x90>)
 8004afc:	f043 0304 	orr.w	r3, r3, #4
 8004b00:	6413      	str	r3, [r2, #64]	; 0x40
 8004b02:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <HAL_TIM_Base_MspInit+0x90>)
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
}
 8004b0e:	bf00      	nop
 8004b10:	371c      	adds	r7, #28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	40010000 	.word	0x40010000
 8004b20:	40023800 	.word	0x40023800
 8004b24:	40000800 	.word	0x40000800

08004b28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b08a      	sub	sp, #40	; 0x28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b30:	f107 0314 	add.w	r3, r7, #20
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	605a      	str	r2, [r3, #4]
 8004b3a:	609a      	str	r2, [r3, #8]
 8004b3c:	60da      	str	r2, [r3, #12]
 8004b3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a24      	ldr	r2, [pc, #144]	; (8004bd8 <HAL_TIM_MspPostInit+0xb0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d11f      	bne.n	8004b8a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	4b23      	ldr	r3, [pc, #140]	; (8004bdc <HAL_TIM_MspPostInit+0xb4>)
 8004b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b52:	4a22      	ldr	r2, [pc, #136]	; (8004bdc <HAL_TIM_MspPostInit+0xb4>)
 8004b54:	f043 0301 	orr.w	r3, r3, #1
 8004b58:	6313      	str	r3, [r2, #48]	; 0x30
 8004b5a:	4b20      	ldr	r3, [pc, #128]	; (8004bdc <HAL_TIM_MspPostInit+0xb4>)
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	613b      	str	r3, [r7, #16]
 8004b64:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004b66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b70:	2300      	movs	r3, #0
 8004b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b74:	2300      	movs	r3, #0
 8004b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b7c:	f107 0314 	add.w	r3, r7, #20
 8004b80:	4619      	mov	r1, r3
 8004b82:	4817      	ldr	r0, [pc, #92]	; (8004be0 <HAL_TIM_MspPostInit+0xb8>)
 8004b84:	f001 fcd6 	bl	8006534 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004b88:	e022      	b.n	8004bd0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b92:	d11d      	bne.n	8004bd0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b94:	2300      	movs	r3, #0
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	4b10      	ldr	r3, [pc, #64]	; (8004bdc <HAL_TIM_MspPostInit+0xb4>)
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9c:	4a0f      	ldr	r2, [pc, #60]	; (8004bdc <HAL_TIM_MspPostInit+0xb4>)
 8004b9e:	f043 0301 	orr.w	r3, r3, #1
 8004ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8004ba4:	4b0d      	ldr	r3, [pc, #52]	; (8004bdc <HAL_TIM_MspPostInit+0xb4>)
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	60fb      	str	r3, [r7, #12]
 8004bae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bc4:	f107 0314 	add.w	r3, r7, #20
 8004bc8:	4619      	mov	r1, r3
 8004bca:	4805      	ldr	r0, [pc, #20]	; (8004be0 <HAL_TIM_MspPostInit+0xb8>)
 8004bcc:	f001 fcb2 	bl	8006534 <HAL_GPIO_Init>
}
 8004bd0:	bf00      	nop
 8004bd2:	3728      	adds	r7, #40	; 0x28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40010000 	.word	0x40010000
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	40020000 	.word	0x40020000

08004be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08a      	sub	sp, #40	; 0x28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bec:	f107 0314 	add.w	r3, r7, #20
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	605a      	str	r2, [r3, #4]
 8004bf6:	609a      	str	r2, [r3, #8]
 8004bf8:	60da      	str	r2, [r3, #12]
 8004bfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a19      	ldr	r2, [pc, #100]	; (8004c68 <HAL_UART_MspInit+0x84>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d12b      	bne.n	8004c5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c06:	2300      	movs	r3, #0
 8004c08:	613b      	str	r3, [r7, #16]
 8004c0a:	4b18      	ldr	r3, [pc, #96]	; (8004c6c <HAL_UART_MspInit+0x88>)
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	4a17      	ldr	r2, [pc, #92]	; (8004c6c <HAL_UART_MspInit+0x88>)
 8004c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c14:	6413      	str	r3, [r2, #64]	; 0x40
 8004c16:	4b15      	ldr	r3, [pc, #84]	; (8004c6c <HAL_UART_MspInit+0x88>)
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1e:	613b      	str	r3, [r7, #16]
 8004c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c22:	2300      	movs	r3, #0
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	4b11      	ldr	r3, [pc, #68]	; (8004c6c <HAL_UART_MspInit+0x88>)
 8004c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2a:	4a10      	ldr	r2, [pc, #64]	; (8004c6c <HAL_UART_MspInit+0x88>)
 8004c2c:	f043 0301 	orr.w	r3, r3, #1
 8004c30:	6313      	str	r3, [r2, #48]	; 0x30
 8004c32:	4b0e      	ldr	r3, [pc, #56]	; (8004c6c <HAL_UART_MspInit+0x88>)
 8004c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004c3e:	230c      	movs	r3, #12
 8004c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c42:	2302      	movs	r3, #2
 8004c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c46:	2300      	movs	r3, #0
 8004c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004c4e:	2307      	movs	r3, #7
 8004c50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c52:	f107 0314 	add.w	r3, r7, #20
 8004c56:	4619      	mov	r1, r3
 8004c58:	4805      	ldr	r0, [pc, #20]	; (8004c70 <HAL_UART_MspInit+0x8c>)
 8004c5a:	f001 fc6b 	bl	8006534 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004c5e:	bf00      	nop
 8004c60:	3728      	adds	r7, #40	; 0x28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40004400 	.word	0x40004400
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	40020000 	.word	0x40020000

08004c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004c78:	e7fe      	b.n	8004c78 <NMI_Handler+0x4>

08004c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c7e:	e7fe      	b.n	8004c7e <HardFault_Handler+0x4>

08004c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c84:	e7fe      	b.n	8004c84 <MemManage_Handler+0x4>

08004c86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c86:	b480      	push	{r7}
 8004c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c8a:	e7fe      	b.n	8004c8a <BusFault_Handler+0x4>

08004c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c90:	e7fe      	b.n	8004c90 <UsageFault_Handler+0x4>

08004c92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c92:	b480      	push	{r7}
 8004c94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c96:	bf00      	nop
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ca4:	bf00      	nop
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004cb2:	bf00      	nop
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004cc0:	f000 f97e 	bl	8004fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004cc4:	bf00      	nop
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004ccc:	4802      	ldr	r0, [pc, #8]	; (8004cd8 <CAN1_RX0_IRQHandler+0x10>)
 8004cce:	f001 f8ef 	bl	8005eb0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004cd2:	bf00      	nop
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	2000294c 	.word	0x2000294c

08004cdc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004ce0:	4802      	ldr	r0, [pc, #8]	; (8004cec <CAN1_RX1_IRQHandler+0x10>)
 8004ce2:	f001 f8e5 	bl	8005eb0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8004ce6:	bf00      	nop
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	2000294c 	.word	0x2000294c

08004cf0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004cf4:	4802      	ldr	r0, [pc, #8]	; (8004d00 <CAN2_RX0_IRQHandler+0x10>)
 8004cf6:	f001 f8db 	bl	8005eb0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8004cfa:	bf00      	nop
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20002974 	.word	0x20002974

08004d04 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004d08:	4802      	ldr	r0, [pc, #8]	; (8004d14 <CAN2_RX1_IRQHandler+0x10>)
 8004d0a:	f001 f8d1 	bl	8005eb0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8004d0e:	bf00      	nop
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	20002974 	.word	0x20002974

08004d18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
	return 1;
 8004d1c:	2301      	movs	r3, #1
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <_kill>:

int _kill(int pid, int sig)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004d32:	f004 fc41 	bl	80095b8 <__errno>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2216      	movs	r2, #22
 8004d3a:	601a      	str	r2, [r3, #0]
	return -1;
 8004d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <_exit>:

void _exit (int status)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004d50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7ff ffe7 	bl	8004d28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004d5a:	e7fe      	b.n	8004d5a <_exit+0x12>

08004d5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d68:	2300      	movs	r3, #0
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	e00a      	b.n	8004d84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004d6e:	f3af 8000 	nop.w
 8004d72:	4601      	mov	r1, r0
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	60ba      	str	r2, [r7, #8]
 8004d7a:	b2ca      	uxtb	r2, r1
 8004d7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	3301      	adds	r3, #1
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	dbf0      	blt.n	8004d6e <_read+0x12>
	}

return len;
 8004d8c:	687b      	ldr	r3, [r7, #4]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b086      	sub	sp, #24
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	60f8      	str	r0, [r7, #12]
 8004d9e:	60b9      	str	r1, [r7, #8]
 8004da0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004da2:	2300      	movs	r3, #0
 8004da4:	617b      	str	r3, [r7, #20]
 8004da6:	e009      	b.n	8004dbc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	60ba      	str	r2, [r7, #8]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	3301      	adds	r3, #1
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	dbf1      	blt.n	8004da8 <_write+0x12>
	}
	return len;
 8004dc4:	687b      	ldr	r3, [r7, #4]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <_close>:

int _close(int file)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
	return -1;
 8004dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004df6:	605a      	str	r2, [r3, #4]
	return 0;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <_isatty>:

int _isatty(int file)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
	return 1;
 8004e0e:	2301      	movs	r3, #1
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
	return 0;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
	...

08004e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e40:	4a14      	ldr	r2, [pc, #80]	; (8004e94 <_sbrk+0x5c>)
 8004e42:	4b15      	ldr	r3, [pc, #84]	; (8004e98 <_sbrk+0x60>)
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e4c:	4b13      	ldr	r3, [pc, #76]	; (8004e9c <_sbrk+0x64>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d102      	bne.n	8004e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e54:	4b11      	ldr	r3, [pc, #68]	; (8004e9c <_sbrk+0x64>)
 8004e56:	4a12      	ldr	r2, [pc, #72]	; (8004ea0 <_sbrk+0x68>)
 8004e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e5a:	4b10      	ldr	r3, [pc, #64]	; (8004e9c <_sbrk+0x64>)
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4413      	add	r3, r2
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d207      	bcs.n	8004e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e68:	f004 fba6 	bl	80095b8 <__errno>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	220c      	movs	r2, #12
 8004e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e76:	e009      	b.n	8004e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e78:	4b08      	ldr	r3, [pc, #32]	; (8004e9c <_sbrk+0x64>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e7e:	4b07      	ldr	r3, [pc, #28]	; (8004e9c <_sbrk+0x64>)
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4413      	add	r3, r2
 8004e86:	4a05      	ldr	r2, [pc, #20]	; (8004e9c <_sbrk+0x64>)
 8004e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	20020000 	.word	0x20020000
 8004e98:	00000400 	.word	0x00000400
 8004e9c:	20002b14 	.word	0x20002b14
 8004ea0:	20002b30 	.word	0x20002b30

08004ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ea8:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <SystemInit+0x20>)
 8004eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eae:	4a05      	ldr	r2, [pc, #20]	; (8004ec4 <SystemInit+0x20>)
 8004eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004eb8:	bf00      	nop
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	e000ed00 	.word	0xe000ed00

08004ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ecc:	480d      	ldr	r0, [pc, #52]	; (8004f04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004ece:	490e      	ldr	r1, [pc, #56]	; (8004f08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004ed0:	4a0e      	ldr	r2, [pc, #56]	; (8004f0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ed4:	e002      	b.n	8004edc <LoopCopyDataInit>

08004ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004eda:	3304      	adds	r3, #4

08004edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ee0:	d3f9      	bcc.n	8004ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ee2:	4a0b      	ldr	r2, [pc, #44]	; (8004f10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004ee4:	4c0b      	ldr	r4, [pc, #44]	; (8004f14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ee8:	e001      	b.n	8004eee <LoopFillZerobss>

08004eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004eec:	3204      	adds	r2, #4

08004eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ef0:	d3fb      	bcc.n	8004eea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004ef2:	f7ff ffd7 	bl	8004ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ef6:	f004 fb65 	bl	80095c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004efa:	f7ff f809 	bl	8003f10 <main>
  bx  lr    
 8004efe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004f00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f08:	200025cc 	.word	0x200025cc
  ldr r2, =_sidata
 8004f0c:	0800cc4c 	.word	0x0800cc4c
  ldr r2, =_sbss
 8004f10:	200025cc 	.word	0x200025cc
  ldr r4, =_ebss
 8004f14:	20002b2c 	.word	0x20002b2c

08004f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f18:	e7fe      	b.n	8004f18 <ADC_IRQHandler>
	...

08004f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f20:	4b0e      	ldr	r3, [pc, #56]	; (8004f5c <HAL_Init+0x40>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a0d      	ldr	r2, [pc, #52]	; (8004f5c <HAL_Init+0x40>)
 8004f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <HAL_Init+0x40>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a0a      	ldr	r2, [pc, #40]	; (8004f5c <HAL_Init+0x40>)
 8004f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f38:	4b08      	ldr	r3, [pc, #32]	; (8004f5c <HAL_Init+0x40>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a07      	ldr	r2, [pc, #28]	; (8004f5c <HAL_Init+0x40>)
 8004f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f44:	2003      	movs	r0, #3
 8004f46:	f001 fab3 	bl	80064b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	f000 f808 	bl	8004f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f50:	f7ff fbf8 	bl	8004744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40023c00 	.word	0x40023c00

08004f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f68:	4b12      	ldr	r3, [pc, #72]	; (8004fb4 <HAL_InitTick+0x54>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	4b12      	ldr	r3, [pc, #72]	; (8004fb8 <HAL_InitTick+0x58>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	4619      	mov	r1, r3
 8004f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f001 facb 	bl	800651a <HAL_SYSTICK_Config>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e00e      	b.n	8004fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b0f      	cmp	r3, #15
 8004f92:	d80a      	bhi.n	8004faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f94:	2200      	movs	r2, #0
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f9c:	f001 fa93 	bl	80064c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004fa0:	4a06      	ldr	r2, [pc, #24]	; (8004fbc <HAL_InitTick+0x5c>)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	e000      	b.n	8004fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	200023f0 	.word	0x200023f0
 8004fb8:	200023f8 	.word	0x200023f8
 8004fbc:	200023f4 	.word	0x200023f4

08004fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004fc4:	4b06      	ldr	r3, [pc, #24]	; (8004fe0 <HAL_IncTick+0x20>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	4b06      	ldr	r3, [pc, #24]	; (8004fe4 <HAL_IncTick+0x24>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4413      	add	r3, r2
 8004fd0:	4a04      	ldr	r2, [pc, #16]	; (8004fe4 <HAL_IncTick+0x24>)
 8004fd2:	6013      	str	r3, [r2, #0]
}
 8004fd4:	bf00      	nop
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	200023f8 	.word	0x200023f8
 8004fe4:	20002b18 	.word	0x20002b18

08004fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  return uwTick;
 8004fec:	4b03      	ldr	r3, [pc, #12]	; (8004ffc <HAL_GetTick+0x14>)
 8004fee:	681b      	ldr	r3, [r3, #0]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	20002b18 	.word	0x20002b18

08005000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005008:	f7ff ffee 	bl	8004fe8 <HAL_GetTick>
 800500c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005018:	d005      	beq.n	8005026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800501a:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <HAL_Delay+0x44>)
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4413      	add	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005026:	bf00      	nop
 8005028:	f7ff ffde 	bl	8004fe8 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	429a      	cmp	r2, r3
 8005036:	d8f7      	bhi.n	8005028 <HAL_Delay+0x28>
  {
  }
}
 8005038:	bf00      	nop
 800503a:	bf00      	nop
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	200023f8 	.word	0x200023f8

08005048 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005050:	2300      	movs	r3, #0
 8005052:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e033      	b.n	80050c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	2b00      	cmp	r3, #0
 8005064:	d109      	bne.n	800507a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7ff fb94 	bl	8004794 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	f003 0310 	and.w	r3, r3, #16
 8005082:	2b00      	cmp	r3, #0
 8005084:	d118      	bne.n	80050b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800508e:	f023 0302 	bic.w	r3, r3, #2
 8005092:	f043 0202 	orr.w	r2, r3, #2
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 fab4 	bl	8005608 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	f023 0303 	bic.w	r3, r3, #3
 80050ae:	f043 0201 	orr.w	r2, r3, #1
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	641a      	str	r2, [r3, #64]	; 0x40
 80050b6:	e001      	b.n	80050bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
	...

080050d0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d101      	bne.n	80050ea <HAL_ADC_Start+0x1a>
 80050e6:	2302      	movs	r3, #2
 80050e8:	e0b2      	b.n	8005250 <HAL_ADC_Start+0x180>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d018      	beq.n	8005132 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0201 	orr.w	r2, r2, #1
 800510e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005110:	4b52      	ldr	r3, [pc, #328]	; (800525c <HAL_ADC_Start+0x18c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a52      	ldr	r2, [pc, #328]	; (8005260 <HAL_ADC_Start+0x190>)
 8005116:	fba2 2303 	umull	r2, r3, r2, r3
 800511a:	0c9a      	lsrs	r2, r3, #18
 800511c:	4613      	mov	r3, r2
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	4413      	add	r3, r2
 8005122:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005124:	e002      	b.n	800512c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	3b01      	subs	r3, #1
 800512a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1f9      	bne.n	8005126 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b01      	cmp	r3, #1
 800513e:	d17a      	bne.n	8005236 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005144:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005148:	f023 0301 	bic.w	r3, r3, #1
 800514c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800515e:	2b00      	cmp	r3, #0
 8005160:	d007      	beq.n	8005172 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800516a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800517a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800517e:	d106      	bne.n	800518e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005184:	f023 0206 	bic.w	r2, r3, #6
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	645a      	str	r2, [r3, #68]	; 0x44
 800518c:	e002      	b.n	8005194 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800519c:	4b31      	ldr	r3, [pc, #196]	; (8005264 <HAL_ADC_Start+0x194>)
 800519e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80051a8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f003 031f 	and.w	r3, r3, #31
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d12a      	bne.n	800520c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a2b      	ldr	r2, [pc, #172]	; (8005268 <HAL_ADC_Start+0x198>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d015      	beq.n	80051ec <HAL_ADC_Start+0x11c>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a29      	ldr	r2, [pc, #164]	; (800526c <HAL_ADC_Start+0x19c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d105      	bne.n	80051d6 <HAL_ADC_Start+0x106>
 80051ca:	4b26      	ldr	r3, [pc, #152]	; (8005264 <HAL_ADC_Start+0x194>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f003 031f 	and.w	r3, r3, #31
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a25      	ldr	r2, [pc, #148]	; (8005270 <HAL_ADC_Start+0x1a0>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d136      	bne.n	800524e <HAL_ADC_Start+0x17e>
 80051e0:	4b20      	ldr	r3, [pc, #128]	; (8005264 <HAL_ADC_Start+0x194>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f003 0310 	and.w	r3, r3, #16
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d130      	bne.n	800524e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d129      	bne.n	800524e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005208:	609a      	str	r2, [r3, #8]
 800520a:	e020      	b.n	800524e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a15      	ldr	r2, [pc, #84]	; (8005268 <HAL_ADC_Start+0x198>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d11b      	bne.n	800524e <HAL_ADC_Start+0x17e>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d114      	bne.n	800524e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689a      	ldr	r2, [r3, #8]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005232:	609a      	str	r2, [r3, #8]
 8005234:	e00b      	b.n	800524e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	f043 0210 	orr.w	r2, r3, #16
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005246:	f043 0201 	orr.w	r2, r3, #1
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	200023f0 	.word	0x200023f0
 8005260:	431bde83 	.word	0x431bde83
 8005264:	40012300 	.word	0x40012300
 8005268:	40012000 	.word	0x40012000
 800526c:	40012100 	.word	0x40012100
 8005270:	40012200 	.word	0x40012200

08005274 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800528c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005290:	d113      	bne.n	80052ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800529c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052a0:	d10b      	bne.n	80052ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	f043 0220 	orr.w	r2, r3, #32
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e063      	b.n	8005382 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80052ba:	f7ff fe95 	bl	8004fe8 <HAL_GetTick>
 80052be:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80052c0:	e021      	b.n	8005306 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052c8:	d01d      	beq.n	8005306 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d007      	beq.n	80052e0 <HAL_ADC_PollForConversion+0x6c>
 80052d0:	f7ff fe8a 	bl	8004fe8 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d212      	bcs.n	8005306 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d00b      	beq.n	8005306 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	f043 0204 	orr.w	r2, r3, #4
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e03d      	b.n	8005382 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b02      	cmp	r3, #2
 8005312:	d1d6      	bne.n	80052c2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f06f 0212 	mvn.w	r2, #18
 800531c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d123      	bne.n	8005380 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800533c:	2b00      	cmp	r3, #0
 800533e:	d11f      	bne.n	8005380 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005346:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800534a:	2b00      	cmp	r3, #0
 800534c:	d006      	beq.n	800535c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005358:	2b00      	cmp	r3, #0
 800535a:	d111      	bne.n	8005380 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005360:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d105      	bne.n	8005380 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005378:	f043 0201 	orr.w	r2, r3, #1
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005398:	4618      	mov	r0, r3
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_ADC_ConfigChannel+0x1c>
 80053bc:	2302      	movs	r3, #2
 80053be:	e113      	b.n	80055e8 <HAL_ADC_ConfigChannel+0x244>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b09      	cmp	r3, #9
 80053ce:	d925      	bls.n	800541c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68d9      	ldr	r1, [r3, #12]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	b29b      	uxth	r3, r3
 80053dc:	461a      	mov	r2, r3
 80053de:	4613      	mov	r3, r2
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	4413      	add	r3, r2
 80053e4:	3b1e      	subs	r3, #30
 80053e6:	2207      	movs	r2, #7
 80053e8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ec:	43da      	mvns	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	400a      	ands	r2, r1
 80053f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68d9      	ldr	r1, [r3, #12]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	b29b      	uxth	r3, r3
 8005406:	4618      	mov	r0, r3
 8005408:	4603      	mov	r3, r0
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	4403      	add	r3, r0
 800540e:	3b1e      	subs	r3, #30
 8005410:	409a      	lsls	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	60da      	str	r2, [r3, #12]
 800541a:	e022      	b.n	8005462 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6919      	ldr	r1, [r3, #16]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	b29b      	uxth	r3, r3
 8005428:	461a      	mov	r2, r3
 800542a:	4613      	mov	r3, r2
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	4413      	add	r3, r2
 8005430:	2207      	movs	r2, #7
 8005432:	fa02 f303 	lsl.w	r3, r2, r3
 8005436:	43da      	mvns	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	400a      	ands	r2, r1
 800543e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6919      	ldr	r1, [r3, #16]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	b29b      	uxth	r3, r3
 8005450:	4618      	mov	r0, r3
 8005452:	4603      	mov	r3, r0
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	4403      	add	r3, r0
 8005458:	409a      	lsls	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2b06      	cmp	r3, #6
 8005468:	d824      	bhi.n	80054b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	4613      	mov	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	3b05      	subs	r3, #5
 800547c:	221f      	movs	r2, #31
 800547e:	fa02 f303 	lsl.w	r3, r2, r3
 8005482:	43da      	mvns	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	400a      	ands	r2, r1
 800548a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	b29b      	uxth	r3, r3
 8005498:	4618      	mov	r0, r3
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	4613      	mov	r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	4413      	add	r3, r2
 80054a4:	3b05      	subs	r3, #5
 80054a6:	fa00 f203 	lsl.w	r2, r0, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	635a      	str	r2, [r3, #52]	; 0x34
 80054b2:	e04c      	b.n	800554e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2b0c      	cmp	r3, #12
 80054ba:	d824      	bhi.n	8005506 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	4613      	mov	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	3b23      	subs	r3, #35	; 0x23
 80054ce:	221f      	movs	r2, #31
 80054d0:	fa02 f303 	lsl.w	r3, r2, r3
 80054d4:	43da      	mvns	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	400a      	ands	r2, r1
 80054dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	4618      	mov	r0, r3
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	4613      	mov	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	3b23      	subs	r3, #35	; 0x23
 80054f8:	fa00 f203 	lsl.w	r2, r0, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	631a      	str	r2, [r3, #48]	; 0x30
 8005504:	e023      	b.n	800554e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	4613      	mov	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	3b41      	subs	r3, #65	; 0x41
 8005518:	221f      	movs	r2, #31
 800551a:	fa02 f303 	lsl.w	r3, r2, r3
 800551e:	43da      	mvns	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	400a      	ands	r2, r1
 8005526:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	b29b      	uxth	r3, r3
 8005534:	4618      	mov	r0, r3
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	4613      	mov	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	3b41      	subs	r3, #65	; 0x41
 8005542:	fa00 f203 	lsl.w	r2, r0, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800554e:	4b29      	ldr	r3, [pc, #164]	; (80055f4 <HAL_ADC_ConfigChannel+0x250>)
 8005550:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a28      	ldr	r2, [pc, #160]	; (80055f8 <HAL_ADC_ConfigChannel+0x254>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d10f      	bne.n	800557c <HAL_ADC_ConfigChannel+0x1d8>
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b12      	cmp	r3, #18
 8005562:	d10b      	bne.n	800557c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a1d      	ldr	r2, [pc, #116]	; (80055f8 <HAL_ADC_ConfigChannel+0x254>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d12b      	bne.n	80055de <HAL_ADC_ConfigChannel+0x23a>
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a1c      	ldr	r2, [pc, #112]	; (80055fc <HAL_ADC_ConfigChannel+0x258>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d003      	beq.n	8005598 <HAL_ADC_ConfigChannel+0x1f4>
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b11      	cmp	r3, #17
 8005596:	d122      	bne.n	80055de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a11      	ldr	r2, [pc, #68]	; (80055fc <HAL_ADC_ConfigChannel+0x258>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d111      	bne.n	80055de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80055ba:	4b11      	ldr	r3, [pc, #68]	; (8005600 <HAL_ADC_ConfigChannel+0x25c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a11      	ldr	r2, [pc, #68]	; (8005604 <HAL_ADC_ConfigChannel+0x260>)
 80055c0:	fba2 2303 	umull	r2, r3, r2, r3
 80055c4:	0c9a      	lsrs	r2, r3, #18
 80055c6:	4613      	mov	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80055d0:	e002      	b.n	80055d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	3b01      	subs	r3, #1
 80055d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1f9      	bne.n	80055d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	40012300 	.word	0x40012300
 80055f8:	40012000 	.word	0x40012000
 80055fc:	10000012 	.word	0x10000012
 8005600:	200023f0 	.word	0x200023f0
 8005604:	431bde83 	.word	0x431bde83

08005608 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005610:	4b79      	ldr	r3, [pc, #484]	; (80057f8 <ADC_Init+0x1f0>)
 8005612:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	431a      	orrs	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800563c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6859      	ldr	r1, [r3, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	021a      	lsls	r2, r3, #8
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005660:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6859      	ldr	r1, [r3, #4]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005682:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6899      	ldr	r1, [r3, #8]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569a:	4a58      	ldr	r2, [pc, #352]	; (80057fc <ADC_Init+0x1f4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d022      	beq.n	80056e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689a      	ldr	r2, [r3, #8]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80056ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6899      	ldr	r1, [r3, #8]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80056d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6899      	ldr	r1, [r3, #8]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	609a      	str	r2, [r3, #8]
 80056e4:	e00f      	b.n	8005706 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80056f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005704:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0202 	bic.w	r2, r2, #2
 8005714:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6899      	ldr	r1, [r3, #8]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	7e1b      	ldrb	r3, [r3, #24]
 8005720:	005a      	lsls	r2, r3, #1
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d01b      	beq.n	800576c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005742:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005752:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6859      	ldr	r1, [r3, #4]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	3b01      	subs	r3, #1
 8005760:	035a      	lsls	r2, r3, #13
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	605a      	str	r2, [r3, #4]
 800576a:	e007      	b.n	800577c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800577a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800578a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	3b01      	subs	r3, #1
 8005798:	051a      	lsls	r2, r3, #20
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80057b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6899      	ldr	r1, [r3, #8]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057be:	025a      	lsls	r2, r3, #9
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689a      	ldr	r2, [r3, #8]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6899      	ldr	r1, [r3, #8]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	029a      	lsls	r2, r3, #10
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	609a      	str	r2, [r3, #8]
}
 80057ec:	bf00      	nop
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	40012300 	.word	0x40012300
 80057fc:	0f000001 	.word	0x0f000001

08005800 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e0ed      	b.n	80059ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d102      	bne.n	8005824 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7ff f82c 	bl	800487c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0201 	orr.w	r2, r2, #1
 8005832:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005834:	f7ff fbd8 	bl	8004fe8 <HAL_GetTick>
 8005838:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800583a:	e012      	b.n	8005862 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800583c:	f7ff fbd4 	bl	8004fe8 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b0a      	cmp	r3, #10
 8005848:	d90b      	bls.n	8005862 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2205      	movs	r2, #5
 800585a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e0c5      	b.n	80059ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	2b00      	cmp	r3, #0
 800586e:	d0e5      	beq.n	800583c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0202 	bic.w	r2, r2, #2
 800587e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005880:	f7ff fbb2 	bl	8004fe8 <HAL_GetTick>
 8005884:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005886:	e012      	b.n	80058ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005888:	f7ff fbae 	bl	8004fe8 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b0a      	cmp	r3, #10
 8005894:	d90b      	bls.n	80058ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2205      	movs	r2, #5
 80058a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e09f      	b.n	80059ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1e5      	bne.n	8005888 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	7e1b      	ldrb	r3, [r3, #24]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d108      	bne.n	80058d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	e007      	b.n	80058e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	7e5b      	ldrb	r3, [r3, #25]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d108      	bne.n	8005900 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	e007      	b.n	8005910 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800590e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	7e9b      	ldrb	r3, [r3, #26]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d108      	bne.n	800592a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f042 0220 	orr.w	r2, r2, #32
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	e007      	b.n	800593a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 0220 	bic.w	r2, r2, #32
 8005938:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	7edb      	ldrb	r3, [r3, #27]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d108      	bne.n	8005954 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0210 	bic.w	r2, r2, #16
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	e007      	b.n	8005964 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0210 	orr.w	r2, r2, #16
 8005962:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	7f1b      	ldrb	r3, [r3, #28]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d108      	bne.n	800597e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0208 	orr.w	r2, r2, #8
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	e007      	b.n	800598e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 0208 	bic.w	r2, r2, #8
 800598c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	7f5b      	ldrb	r3, [r3, #29]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d108      	bne.n	80059a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0204 	orr.w	r2, r2, #4
 80059a4:	601a      	str	r2, [r3, #0]
 80059a6:	e007      	b.n	80059b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0204 	bic.w	r2, r2, #4
 80059b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	431a      	orrs	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	ea42 0103 	orr.w	r1, r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	1e5a      	subs	r2, r3, #1
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b087      	sub	sp, #28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a0e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005a10:	7cfb      	ldrb	r3, [r7, #19]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d003      	beq.n	8005a1e <HAL_CAN_ConfigFilter+0x26>
 8005a16:	7cfb      	ldrb	r3, [r7, #19]
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	f040 80be 	bne.w	8005b9a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005a1e:	4b65      	ldr	r3, [pc, #404]	; (8005bb4 <HAL_CAN_ConfigFilter+0x1bc>)
 8005a20:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a28:	f043 0201 	orr.w	r2, r3, #1
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a38:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	021b      	lsls	r3, r3, #8
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	f003 031f 	and.w	r3, r3, #31
 8005a5e:	2201      	movs	r2, #1
 8005a60:	fa02 f303 	lsl.w	r3, r2, r3
 8005a64:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	43db      	mvns	r3, r3
 8005a70:	401a      	ands	r2, r3
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	69db      	ldr	r3, [r3, #28]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d123      	bne.n	8005ac8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	43db      	mvns	r3, r3
 8005a8a:	401a      	ands	r2, r3
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005aa2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	3248      	adds	r2, #72	; 0x48
 8005aa8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005abc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005abe:	6979      	ldr	r1, [r7, #20]
 8005ac0:	3348      	adds	r3, #72	; 0x48
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	440b      	add	r3, r1
 8005ac6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d122      	bne.n	8005b16 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005af0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	3248      	adds	r2, #72	; 0x48
 8005af6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005b0a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005b0c:	6979      	ldr	r1, [r7, #20]
 8005b0e:	3348      	adds	r3, #72	; 0x48
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	440b      	add	r3, r1
 8005b14:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d109      	bne.n	8005b32 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	43db      	mvns	r3, r3
 8005b28:	401a      	ands	r2, r3
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005b30:	e007      	b.n	8005b42 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d109      	bne.n	8005b5e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	43db      	mvns	r3, r3
 8005b54:	401a      	ands	r2, r3
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005b5c:	e007      	b.n	8005b6e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	431a      	orrs	r2, r3
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d107      	bne.n	8005b86 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b8c:	f023 0201 	bic.w	r2, r3, #1
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	e006      	b.n	8005ba8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
  }
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	371c      	adds	r7, #28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	40006400 	.word	0x40006400

08005bb8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d12e      	bne.n	8005c2a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0201 	bic.w	r2, r2, #1
 8005be2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005be4:	f7ff fa00 	bl	8004fe8 <HAL_GetTick>
 8005be8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005bea:	e012      	b.n	8005c12 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005bec:	f7ff f9fc 	bl	8004fe8 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b0a      	cmp	r3, #10
 8005bf8:	d90b      	bls.n	8005c12 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2205      	movs	r2, #5
 8005c0a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e012      	b.n	8005c38 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1e5      	bne.n	8005bec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	e006      	b.n	8005c38 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
  }
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005c40:	b480      	push	{r7}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c54:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005c56:	7dfb      	ldrb	r3, [r7, #23]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d003      	beq.n	8005c64 <HAL_CAN_GetRxMessage+0x24>
 8005c5c:	7dfb      	ldrb	r3, [r7, #23]
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	f040 80f3 	bne.w	8005e4a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10e      	bne.n	8005c88 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f003 0303 	and.w	r3, r3, #3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d116      	bne.n	8005ca6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e0e7      	b.n	8005e58 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	f003 0303 	and.w	r3, r3, #3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d107      	bne.n	8005ca6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e0d8      	b.n	8005e58 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	331b      	adds	r3, #27
 8005cae:	011b      	lsls	r3, r3, #4
 8005cb0:	4413      	add	r3, r2
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0204 	and.w	r2, r3, #4
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10c      	bne.n	8005cde <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	331b      	adds	r3, #27
 8005ccc:	011b      	lsls	r3, r3, #4
 8005cce:	4413      	add	r3, r2
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	0d5b      	lsrs	r3, r3, #21
 8005cd4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	e00b      	b.n	8005cf6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	331b      	adds	r3, #27
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	4413      	add	r3, r2
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	08db      	lsrs	r3, r3, #3
 8005cee:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	331b      	adds	r3, #27
 8005cfe:	011b      	lsls	r3, r3, #4
 8005d00:	4413      	add	r3, r2
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0202 	and.w	r2, r3, #2
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	331b      	adds	r3, #27
 8005d14:	011b      	lsls	r3, r3, #4
 8005d16:	4413      	add	r3, r2
 8005d18:	3304      	adds	r3, #4
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 020f 	and.w	r2, r3, #15
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	331b      	adds	r3, #27
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	4413      	add	r3, r2
 8005d30:	3304      	adds	r3, #4
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	0a1b      	lsrs	r3, r3, #8
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	331b      	adds	r3, #27
 8005d44:	011b      	lsls	r3, r3, #4
 8005d46:	4413      	add	r3, r2
 8005d48:	3304      	adds	r3, #4
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	0c1b      	lsrs	r3, r3, #16
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	011b      	lsls	r3, r3, #4
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	011b      	lsls	r3, r3, #4
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	0a1a      	lsrs	r2, r3, #8
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	b2d2      	uxtb	r2, r2
 8005d82:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	0c1a      	lsrs	r2, r3, #16
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	3302      	adds	r3, #2
 8005d9a:	b2d2      	uxtb	r2, r2
 8005d9c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	011b      	lsls	r3, r3, #4
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	0e1a      	lsrs	r2, r3, #24
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	3303      	adds	r3, #3
 8005db4:	b2d2      	uxtb	r2, r2
 8005db6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	3304      	adds	r3, #4
 8005dcc:	b2d2      	uxtb	r2, r2
 8005dce:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	011b      	lsls	r3, r3, #4
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	0a1a      	lsrs	r2, r3, #8
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	3305      	adds	r3, #5
 8005de6:	b2d2      	uxtb	r2, r2
 8005de8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	011b      	lsls	r3, r3, #4
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	0c1a      	lsrs	r2, r3, #16
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	3306      	adds	r3, #6
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	011b      	lsls	r3, r3, #4
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	0e1a      	lsrs	r2, r3, #24
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	3307      	adds	r3, #7
 8005e1a:	b2d2      	uxtb	r2, r2
 8005e1c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d108      	bne.n	8005e36 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0220 	orr.w	r2, r2, #32
 8005e32:	60da      	str	r2, [r3, #12]
 8005e34:	e007      	b.n	8005e46 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	691a      	ldr	r2, [r3, #16]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f042 0220 	orr.w	r2, r2, #32
 8005e44:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	e006      	b.n	8005e58 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
  }
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	371c      	adds	r7, #28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e74:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005e76:	7bfb      	ldrb	r3, [r7, #15]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d002      	beq.n	8005e82 <HAL_CAN_ActivateNotification+0x1e>
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d109      	bne.n	8005e96 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6959      	ldr	r1, [r3, #20]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	e006      	b.n	8005ea4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
  }
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08a      	sub	sp, #40	; 0x28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d07c      	beq.n	8005ff0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	f003 0301 	and.w	r3, r3, #1
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d023      	beq.n	8005f48 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2201      	movs	r2, #1
 8005f06:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f983 	bl	800621e <HAL_CAN_TxMailbox0CompleteCallback>
 8005f18:	e016      	b.n	8005f48 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	f003 0304 	and.w	r3, r3, #4
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d004      	beq.n	8005f2e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f2c:	e00c      	b.n	8005f48 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	f003 0308 	and.w	r3, r3, #8
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d004      	beq.n	8005f42 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f40:	e002      	b.n	8005f48 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f989 	bl	800625a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d024      	beq.n	8005f9c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f5a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f963 	bl	8006232 <HAL_CAN_TxMailbox1CompleteCallback>
 8005f6c:	e016      	b.n	8005f9c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d004      	beq.n	8005f82 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f80:	e00c      	b.n	8005f9c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d004      	beq.n	8005f96 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f92:	627b      	str	r3, [r7, #36]	; 0x24
 8005f94:	e002      	b.n	8005f9c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f969 	bl	800626e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d024      	beq.n	8005ff0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005fae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f943 	bl	8006246 <HAL_CAN_TxMailbox2CompleteCallback>
 8005fc0:	e016      	b.n	8005ff0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d004      	beq.n	8005fd6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8005fd4:	e00c      	b.n	8005ff0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d004      	beq.n	8005fea <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fe8:	e002      	b.n	8005ff0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f949 	bl	8006282 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	f003 0308 	and.w	r3, r3, #8
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00c      	beq.n	8006014 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f003 0310 	and.w	r3, r3, #16
 8006000:	2b00      	cmp	r3, #0
 8006002:	d007      	beq.n	8006014 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800600a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2210      	movs	r2, #16
 8006012:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	f003 0304 	and.w	r3, r3, #4
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00b      	beq.n	8006036 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f003 0308 	and.w	r3, r3, #8
 8006024:	2b00      	cmp	r3, #0
 8006026:	d006      	beq.n	8006036 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2208      	movs	r2, #8
 800602e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 f930 	bl	8006296 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d009      	beq.n	8006054 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	f003 0303 	and.w	r3, r3, #3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d002      	beq.n	8006054 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7fb f850 	bl	80010f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006054:	6a3b      	ldr	r3, [r7, #32]
 8006056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00c      	beq.n	8006078 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f003 0310 	and.w	r3, r3, #16
 8006064:	2b00      	cmp	r3, #0
 8006066:	d007      	beq.n	8006078 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800606e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2210      	movs	r2, #16
 8006076:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00b      	beq.n	800609a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f003 0308 	and.w	r3, r3, #8
 8006088:	2b00      	cmp	r3, #0
 800608a:	d006      	beq.n	800609a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2208      	movs	r2, #8
 8006092:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f912 	bl	80062be <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	f003 0310 	and.w	r3, r3, #16
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d009      	beq.n	80060b8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f003 0303 	and.w	r3, r3, #3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f8f9 	bl	80062aa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00b      	beq.n	80060da <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	f003 0310 	and.w	r3, r3, #16
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d006      	beq.n	80060da <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2210      	movs	r2, #16
 80060d2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f8fc 	bl	80062d2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00b      	beq.n	80060fc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	f003 0308 	and.w	r3, r3, #8
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d006      	beq.n	80060fc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2208      	movs	r2, #8
 80060f4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f8f5 	bl	80062e6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80060fc:	6a3b      	ldr	r3, [r7, #32]
 80060fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d07b      	beq.n	80061fe <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	2b00      	cmp	r3, #0
 800610e:	d072      	beq.n	80061f6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006116:	2b00      	cmp	r3, #0
 8006118:	d008      	beq.n	800612c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	f043 0301 	orr.w	r3, r3, #1
 800612a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006132:	2b00      	cmp	r3, #0
 8006134:	d008      	beq.n	8006148 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800613c:	2b00      	cmp	r3, #0
 800613e:	d003      	beq.n	8006148 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	f043 0302 	orr.w	r3, r3, #2
 8006146:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800614e:	2b00      	cmp	r3, #0
 8006150:	d008      	beq.n	8006164 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	f043 0304 	orr.w	r3, r3, #4
 8006162:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800616a:	2b00      	cmp	r3, #0
 800616c:	d043      	beq.n	80061f6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006174:	2b00      	cmp	r3, #0
 8006176:	d03e      	beq.n	80061f6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800617e:	2b60      	cmp	r3, #96	; 0x60
 8006180:	d02b      	beq.n	80061da <HAL_CAN_IRQHandler+0x32a>
 8006182:	2b60      	cmp	r3, #96	; 0x60
 8006184:	d82e      	bhi.n	80061e4 <HAL_CAN_IRQHandler+0x334>
 8006186:	2b50      	cmp	r3, #80	; 0x50
 8006188:	d022      	beq.n	80061d0 <HAL_CAN_IRQHandler+0x320>
 800618a:	2b50      	cmp	r3, #80	; 0x50
 800618c:	d82a      	bhi.n	80061e4 <HAL_CAN_IRQHandler+0x334>
 800618e:	2b40      	cmp	r3, #64	; 0x40
 8006190:	d019      	beq.n	80061c6 <HAL_CAN_IRQHandler+0x316>
 8006192:	2b40      	cmp	r3, #64	; 0x40
 8006194:	d826      	bhi.n	80061e4 <HAL_CAN_IRQHandler+0x334>
 8006196:	2b30      	cmp	r3, #48	; 0x30
 8006198:	d010      	beq.n	80061bc <HAL_CAN_IRQHandler+0x30c>
 800619a:	2b30      	cmp	r3, #48	; 0x30
 800619c:	d822      	bhi.n	80061e4 <HAL_CAN_IRQHandler+0x334>
 800619e:	2b10      	cmp	r3, #16
 80061a0:	d002      	beq.n	80061a8 <HAL_CAN_IRQHandler+0x2f8>
 80061a2:	2b20      	cmp	r3, #32
 80061a4:	d005      	beq.n	80061b2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80061a6:	e01d      	b.n	80061e4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	f043 0308 	orr.w	r3, r3, #8
 80061ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80061b0:	e019      	b.n	80061e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	f043 0310 	orr.w	r3, r3, #16
 80061b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80061ba:	e014      	b.n	80061e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	f043 0320 	orr.w	r3, r3, #32
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80061c4:	e00f      	b.n	80061e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80061ce:	e00a      	b.n	80061e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80061d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80061d8:	e005      	b.n	80061e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80061e2:	e000      	b.n	80061e6 <HAL_CAN_IRQHandler+0x336>
            break;
 80061e4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	699a      	ldr	r2, [r3, #24]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80061f4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2204      	movs	r2, #4
 80061fc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80061fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006200:	2b00      	cmp	r3, #0
 8006202:	d008      	beq.n	8006216 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620a:	431a      	orrs	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 f872 	bl	80062fa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006216:	bf00      	nop
 8006218:	3728      	adds	r7, #40	; 0x28
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006226:	bf00      	nop
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800625a:	b480      	push	{r7}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800628a:	bf00      	nop
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006296:	b480      	push	{r7}
 8006298:	b083      	sub	sp, #12
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800629e:	bf00      	nop
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80062b2:	bf00      	nop
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80062da:	bf00      	nop
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b083      	sub	sp, #12
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80062ee:	bf00      	nop
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006302:	bf00      	nop
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
	...

08006310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f003 0307 	and.w	r3, r3, #7
 800631e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006320:	4b0c      	ldr	r3, [pc, #48]	; (8006354 <__NVIC_SetPriorityGrouping+0x44>)
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800632c:	4013      	ands	r3, r2
 800632e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006338:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800633c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006342:	4a04      	ldr	r2, [pc, #16]	; (8006354 <__NVIC_SetPriorityGrouping+0x44>)
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	60d3      	str	r3, [r2, #12]
}
 8006348:	bf00      	nop
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr
 8006354:	e000ed00 	.word	0xe000ed00

08006358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006358:	b480      	push	{r7}
 800635a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800635c:	4b04      	ldr	r3, [pc, #16]	; (8006370 <__NVIC_GetPriorityGrouping+0x18>)
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	0a1b      	lsrs	r3, r3, #8
 8006362:	f003 0307 	and.w	r3, r3, #7
}
 8006366:	4618      	mov	r0, r3
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	e000ed00 	.word	0xe000ed00

08006374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	4603      	mov	r3, r0
 800637c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800637e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006382:	2b00      	cmp	r3, #0
 8006384:	db0b      	blt.n	800639e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006386:	79fb      	ldrb	r3, [r7, #7]
 8006388:	f003 021f 	and.w	r2, r3, #31
 800638c:	4907      	ldr	r1, [pc, #28]	; (80063ac <__NVIC_EnableIRQ+0x38>)
 800638e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006392:	095b      	lsrs	r3, r3, #5
 8006394:	2001      	movs	r0, #1
 8006396:	fa00 f202 	lsl.w	r2, r0, r2
 800639a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	e000e100 	.word	0xe000e100

080063b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	4603      	mov	r3, r0
 80063b8:	6039      	str	r1, [r7, #0]
 80063ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	db0a      	blt.n	80063da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	490c      	ldr	r1, [pc, #48]	; (80063fc <__NVIC_SetPriority+0x4c>)
 80063ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ce:	0112      	lsls	r2, r2, #4
 80063d0:	b2d2      	uxtb	r2, r2
 80063d2:	440b      	add	r3, r1
 80063d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80063d8:	e00a      	b.n	80063f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	b2da      	uxtb	r2, r3
 80063de:	4908      	ldr	r1, [pc, #32]	; (8006400 <__NVIC_SetPriority+0x50>)
 80063e0:	79fb      	ldrb	r3, [r7, #7]
 80063e2:	f003 030f 	and.w	r3, r3, #15
 80063e6:	3b04      	subs	r3, #4
 80063e8:	0112      	lsls	r2, r2, #4
 80063ea:	b2d2      	uxtb	r2, r2
 80063ec:	440b      	add	r3, r1
 80063ee:	761a      	strb	r2, [r3, #24]
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	e000e100 	.word	0xe000e100
 8006400:	e000ed00 	.word	0xe000ed00

08006404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006404:	b480      	push	{r7}
 8006406:	b089      	sub	sp, #36	; 0x24
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	f1c3 0307 	rsb	r3, r3, #7
 800641e:	2b04      	cmp	r3, #4
 8006420:	bf28      	it	cs
 8006422:	2304      	movcs	r3, #4
 8006424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	3304      	adds	r3, #4
 800642a:	2b06      	cmp	r3, #6
 800642c:	d902      	bls.n	8006434 <NVIC_EncodePriority+0x30>
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	3b03      	subs	r3, #3
 8006432:	e000      	b.n	8006436 <NVIC_EncodePriority+0x32>
 8006434:	2300      	movs	r3, #0
 8006436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006438:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	fa02 f303 	lsl.w	r3, r2, r3
 8006442:	43da      	mvns	r2, r3
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	401a      	ands	r2, r3
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800644c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	fa01 f303 	lsl.w	r3, r1, r3
 8006456:	43d9      	mvns	r1, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800645c:	4313      	orrs	r3, r2
         );
}
 800645e:	4618      	mov	r0, r3
 8006460:	3724      	adds	r7, #36	; 0x24
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
	...

0800646c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	3b01      	subs	r3, #1
 8006478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800647c:	d301      	bcc.n	8006482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800647e:	2301      	movs	r3, #1
 8006480:	e00f      	b.n	80064a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006482:	4a0a      	ldr	r2, [pc, #40]	; (80064ac <SysTick_Config+0x40>)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3b01      	subs	r3, #1
 8006488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800648a:	210f      	movs	r1, #15
 800648c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006490:	f7ff ff8e 	bl	80063b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006494:	4b05      	ldr	r3, [pc, #20]	; (80064ac <SysTick_Config+0x40>)
 8006496:	2200      	movs	r2, #0
 8006498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800649a:	4b04      	ldr	r3, [pc, #16]	; (80064ac <SysTick_Config+0x40>)
 800649c:	2207      	movs	r2, #7
 800649e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	e000e010 	.word	0xe000e010

080064b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7ff ff29 	bl	8006310 <__NVIC_SetPriorityGrouping>
}
 80064be:	bf00      	nop
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b086      	sub	sp, #24
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	4603      	mov	r3, r0
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	607a      	str	r2, [r7, #4]
 80064d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80064d8:	f7ff ff3e 	bl	8006358 <__NVIC_GetPriorityGrouping>
 80064dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	68b9      	ldr	r1, [r7, #8]
 80064e2:	6978      	ldr	r0, [r7, #20]
 80064e4:	f7ff ff8e 	bl	8006404 <NVIC_EncodePriority>
 80064e8:	4602      	mov	r2, r0
 80064ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064ee:	4611      	mov	r1, r2
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7ff ff5d 	bl	80063b0 <__NVIC_SetPriority>
}
 80064f6:	bf00      	nop
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b082      	sub	sp, #8
 8006502:	af00      	add	r7, sp, #0
 8006504:	4603      	mov	r3, r0
 8006506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff ff31 	bl	8006374 <__NVIC_EnableIRQ>
}
 8006512:	bf00      	nop
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b082      	sub	sp, #8
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7ff ffa2 	bl	800646c <SysTick_Config>
 8006528:	4603      	mov	r3, r0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
	...

08006534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006534:	b480      	push	{r7}
 8006536:	b089      	sub	sp, #36	; 0x24
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800653e:	2300      	movs	r3, #0
 8006540:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006542:	2300      	movs	r3, #0
 8006544:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006546:	2300      	movs	r3, #0
 8006548:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800654a:	2300      	movs	r3, #0
 800654c:	61fb      	str	r3, [r7, #28]
 800654e:	e165      	b.n	800681c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006550:	2201      	movs	r2, #1
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	fa02 f303 	lsl.w	r3, r2, r3
 8006558:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	4013      	ands	r3, r2
 8006562:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	429a      	cmp	r2, r3
 800656a:	f040 8154 	bne.w	8006816 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f003 0303 	and.w	r3, r3, #3
 8006576:	2b01      	cmp	r3, #1
 8006578:	d005      	beq.n	8006586 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006582:	2b02      	cmp	r3, #2
 8006584:	d130      	bne.n	80065e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	2203      	movs	r2, #3
 8006592:	fa02 f303 	lsl.w	r3, r2, r3
 8006596:	43db      	mvns	r3, r3
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	4013      	ands	r3, r2
 800659c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	68da      	ldr	r2, [r3, #12]
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	005b      	lsls	r3, r3, #1
 80065a6:	fa02 f303 	lsl.w	r3, r2, r3
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	69ba      	ldr	r2, [r7, #24]
 80065b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80065bc:	2201      	movs	r2, #1
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	fa02 f303 	lsl.w	r3, r2, r3
 80065c4:	43db      	mvns	r3, r3
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	4013      	ands	r3, r2
 80065ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	091b      	lsrs	r3, r3, #4
 80065d2:	f003 0201 	and.w	r2, r3, #1
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	fa02 f303 	lsl.w	r3, r2, r3
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	4313      	orrs	r3, r2
 80065e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f003 0303 	and.w	r3, r3, #3
 80065f0:	2b03      	cmp	r3, #3
 80065f2:	d017      	beq.n	8006624 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	2203      	movs	r2, #3
 8006600:	fa02 f303 	lsl.w	r3, r2, r3
 8006604:	43db      	mvns	r3, r3
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	4013      	ands	r3, r2
 800660a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	689a      	ldr	r2, [r3, #8]
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	005b      	lsls	r3, r3, #1
 8006614:	fa02 f303 	lsl.w	r3, r2, r3
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	4313      	orrs	r3, r2
 800661c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	69ba      	ldr	r2, [r7, #24]
 8006622:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f003 0303 	and.w	r3, r3, #3
 800662c:	2b02      	cmp	r3, #2
 800662e:	d123      	bne.n	8006678 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	08da      	lsrs	r2, r3, #3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	3208      	adds	r2, #8
 8006638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800663c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	f003 0307 	and.w	r3, r3, #7
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	220f      	movs	r2, #15
 8006648:	fa02 f303 	lsl.w	r3, r2, r3
 800664c:	43db      	mvns	r3, r3
 800664e:	69ba      	ldr	r2, [r7, #24]
 8006650:	4013      	ands	r3, r2
 8006652:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	691a      	ldr	r2, [r3, #16]
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	f003 0307 	and.w	r3, r3, #7
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	fa02 f303 	lsl.w	r3, r2, r3
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	4313      	orrs	r3, r2
 8006668:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	08da      	lsrs	r2, r3, #3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3208      	adds	r2, #8
 8006672:	69b9      	ldr	r1, [r7, #24]
 8006674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	2203      	movs	r2, #3
 8006684:	fa02 f303 	lsl.w	r3, r2, r3
 8006688:	43db      	mvns	r3, r3
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	4013      	ands	r3, r2
 800668e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f003 0203 	and.w	r2, r3, #3
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	005b      	lsls	r3, r3, #1
 800669c:	fa02 f303 	lsl.w	r3, r2, r3
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 80ae 	beq.w	8006816 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066ba:	2300      	movs	r3, #0
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	4b5d      	ldr	r3, [pc, #372]	; (8006834 <HAL_GPIO_Init+0x300>)
 80066c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c2:	4a5c      	ldr	r2, [pc, #368]	; (8006834 <HAL_GPIO_Init+0x300>)
 80066c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066c8:	6453      	str	r3, [r2, #68]	; 0x44
 80066ca:	4b5a      	ldr	r3, [pc, #360]	; (8006834 <HAL_GPIO_Init+0x300>)
 80066cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066d2:	60fb      	str	r3, [r7, #12]
 80066d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80066d6:	4a58      	ldr	r2, [pc, #352]	; (8006838 <HAL_GPIO_Init+0x304>)
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	089b      	lsrs	r3, r3, #2
 80066dc:	3302      	adds	r3, #2
 80066de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	f003 0303 	and.w	r3, r3, #3
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	220f      	movs	r2, #15
 80066ee:	fa02 f303 	lsl.w	r3, r2, r3
 80066f2:	43db      	mvns	r3, r3
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	4013      	ands	r3, r2
 80066f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a4f      	ldr	r2, [pc, #316]	; (800683c <HAL_GPIO_Init+0x308>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d025      	beq.n	800674e <HAL_GPIO_Init+0x21a>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a4e      	ldr	r2, [pc, #312]	; (8006840 <HAL_GPIO_Init+0x30c>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d01f      	beq.n	800674a <HAL_GPIO_Init+0x216>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a4d      	ldr	r2, [pc, #308]	; (8006844 <HAL_GPIO_Init+0x310>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d019      	beq.n	8006746 <HAL_GPIO_Init+0x212>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a4c      	ldr	r2, [pc, #304]	; (8006848 <HAL_GPIO_Init+0x314>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d013      	beq.n	8006742 <HAL_GPIO_Init+0x20e>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a4b      	ldr	r2, [pc, #300]	; (800684c <HAL_GPIO_Init+0x318>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d00d      	beq.n	800673e <HAL_GPIO_Init+0x20a>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a4a      	ldr	r2, [pc, #296]	; (8006850 <HAL_GPIO_Init+0x31c>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d007      	beq.n	800673a <HAL_GPIO_Init+0x206>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a49      	ldr	r2, [pc, #292]	; (8006854 <HAL_GPIO_Init+0x320>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d101      	bne.n	8006736 <HAL_GPIO_Init+0x202>
 8006732:	2306      	movs	r3, #6
 8006734:	e00c      	b.n	8006750 <HAL_GPIO_Init+0x21c>
 8006736:	2307      	movs	r3, #7
 8006738:	e00a      	b.n	8006750 <HAL_GPIO_Init+0x21c>
 800673a:	2305      	movs	r3, #5
 800673c:	e008      	b.n	8006750 <HAL_GPIO_Init+0x21c>
 800673e:	2304      	movs	r3, #4
 8006740:	e006      	b.n	8006750 <HAL_GPIO_Init+0x21c>
 8006742:	2303      	movs	r3, #3
 8006744:	e004      	b.n	8006750 <HAL_GPIO_Init+0x21c>
 8006746:	2302      	movs	r3, #2
 8006748:	e002      	b.n	8006750 <HAL_GPIO_Init+0x21c>
 800674a:	2301      	movs	r3, #1
 800674c:	e000      	b.n	8006750 <HAL_GPIO_Init+0x21c>
 800674e:	2300      	movs	r3, #0
 8006750:	69fa      	ldr	r2, [r7, #28]
 8006752:	f002 0203 	and.w	r2, r2, #3
 8006756:	0092      	lsls	r2, r2, #2
 8006758:	4093      	lsls	r3, r2
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	4313      	orrs	r3, r2
 800675e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006760:	4935      	ldr	r1, [pc, #212]	; (8006838 <HAL_GPIO_Init+0x304>)
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	089b      	lsrs	r3, r3, #2
 8006766:	3302      	adds	r3, #2
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800676e:	4b3a      	ldr	r3, [pc, #232]	; (8006858 <HAL_GPIO_Init+0x324>)
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	43db      	mvns	r3, r3
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	4013      	ands	r3, r2
 800677c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	4313      	orrs	r3, r2
 8006790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006792:	4a31      	ldr	r2, [pc, #196]	; (8006858 <HAL_GPIO_Init+0x324>)
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006798:	4b2f      	ldr	r3, [pc, #188]	; (8006858 <HAL_GPIO_Init+0x324>)
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	43db      	mvns	r3, r3
 80067a2:	69ba      	ldr	r2, [r7, #24]
 80067a4:	4013      	ands	r3, r2
 80067a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d003      	beq.n	80067bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80067bc:	4a26      	ldr	r2, [pc, #152]	; (8006858 <HAL_GPIO_Init+0x324>)
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80067c2:	4b25      	ldr	r3, [pc, #148]	; (8006858 <HAL_GPIO_Init+0x324>)
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	43db      	mvns	r3, r3
 80067cc:	69ba      	ldr	r2, [r7, #24]
 80067ce:	4013      	ands	r3, r2
 80067d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80067e6:	4a1c      	ldr	r2, [pc, #112]	; (8006858 <HAL_GPIO_Init+0x324>)
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80067ec:	4b1a      	ldr	r3, [pc, #104]	; (8006858 <HAL_GPIO_Init+0x324>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	43db      	mvns	r3, r3
 80067f6:	69ba      	ldr	r2, [r7, #24]
 80067f8:	4013      	ands	r3, r2
 80067fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d003      	beq.n	8006810 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006808:	69ba      	ldr	r2, [r7, #24]
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	4313      	orrs	r3, r2
 800680e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006810:	4a11      	ldr	r2, [pc, #68]	; (8006858 <HAL_GPIO_Init+0x324>)
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	3301      	adds	r3, #1
 800681a:	61fb      	str	r3, [r7, #28]
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	2b0f      	cmp	r3, #15
 8006820:	f67f ae96 	bls.w	8006550 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006824:	bf00      	nop
 8006826:	bf00      	nop
 8006828:	3724      	adds	r7, #36	; 0x24
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	40023800 	.word	0x40023800
 8006838:	40013800 	.word	0x40013800
 800683c:	40020000 	.word	0x40020000
 8006840:	40020400 	.word	0x40020400
 8006844:	40020800 	.word	0x40020800
 8006848:	40020c00 	.word	0x40020c00
 800684c:	40021000 	.word	0x40021000
 8006850:	40021400 	.word	0x40021400
 8006854:	40021800 	.word	0x40021800
 8006858:	40013c00 	.word	0x40013c00

0800685c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	460b      	mov	r3, r1
 8006866:	807b      	strh	r3, [r7, #2]
 8006868:	4613      	mov	r3, r2
 800686a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800686c:	787b      	ldrb	r3, [r7, #1]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d003      	beq.n	800687a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006872:	887a      	ldrh	r2, [r7, #2]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006878:	e003      	b.n	8006882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800687a:	887b      	ldrh	r3, [r7, #2]
 800687c:	041a      	lsls	r2, r3, #16
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	619a      	str	r2, [r3, #24]
}
 8006882:	bf00      	nop
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
	...

08006890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d101      	bne.n	80068a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e0cc      	b.n	8006a3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068a4:	4b68      	ldr	r3, [pc, #416]	; (8006a48 <HAL_RCC_ClockConfig+0x1b8>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 030f 	and.w	r3, r3, #15
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d90c      	bls.n	80068cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068b2:	4b65      	ldr	r3, [pc, #404]	; (8006a48 <HAL_RCC_ClockConfig+0x1b8>)
 80068b4:	683a      	ldr	r2, [r7, #0]
 80068b6:	b2d2      	uxtb	r2, r2
 80068b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ba:	4b63      	ldr	r3, [pc, #396]	; (8006a48 <HAL_RCC_ClockConfig+0x1b8>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 030f 	and.w	r3, r3, #15
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d001      	beq.n	80068cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e0b8      	b.n	8006a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0302 	and.w	r3, r3, #2
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d020      	beq.n	800691a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0304 	and.w	r3, r3, #4
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d005      	beq.n	80068f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068e4:	4b59      	ldr	r3, [pc, #356]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	4a58      	ldr	r2, [pc, #352]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 80068ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0308 	and.w	r3, r3, #8
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d005      	beq.n	8006908 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068fc:	4b53      	ldr	r3, [pc, #332]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	4a52      	ldr	r2, [pc, #328]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 8006902:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006906:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006908:	4b50      	ldr	r3, [pc, #320]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	494d      	ldr	r1, [pc, #308]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 8006916:	4313      	orrs	r3, r2
 8006918:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d044      	beq.n	80069b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d107      	bne.n	800693e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800692e:	4b47      	ldr	r3, [pc, #284]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d119      	bne.n	800696e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e07f      	b.n	8006a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	2b02      	cmp	r3, #2
 8006944:	d003      	beq.n	800694e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800694a:	2b03      	cmp	r3, #3
 800694c:	d107      	bne.n	800695e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800694e:	4b3f      	ldr	r3, [pc, #252]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d109      	bne.n	800696e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e06f      	b.n	8006a3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800695e:	4b3b      	ldr	r3, [pc, #236]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e067      	b.n	8006a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800696e:	4b37      	ldr	r3, [pc, #220]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f023 0203 	bic.w	r2, r3, #3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	4934      	ldr	r1, [pc, #208]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 800697c:	4313      	orrs	r3, r2
 800697e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006980:	f7fe fb32 	bl	8004fe8 <HAL_GetTick>
 8006984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006986:	e00a      	b.n	800699e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006988:	f7fe fb2e 	bl	8004fe8 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	f241 3288 	movw	r2, #5000	; 0x1388
 8006996:	4293      	cmp	r3, r2
 8006998:	d901      	bls.n	800699e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e04f      	b.n	8006a3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800699e:	4b2b      	ldr	r3, [pc, #172]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f003 020c 	and.w	r2, r3, #12
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d1eb      	bne.n	8006988 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069b0:	4b25      	ldr	r3, [pc, #148]	; (8006a48 <HAL_RCC_ClockConfig+0x1b8>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 030f 	and.w	r3, r3, #15
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d20c      	bcs.n	80069d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069be:	4b22      	ldr	r3, [pc, #136]	; (8006a48 <HAL_RCC_ClockConfig+0x1b8>)
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	b2d2      	uxtb	r2, r2
 80069c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069c6:	4b20      	ldr	r3, [pc, #128]	; (8006a48 <HAL_RCC_ClockConfig+0x1b8>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 030f 	and.w	r3, r3, #15
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d001      	beq.n	80069d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e032      	b.n	8006a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0304 	and.w	r3, r3, #4
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d008      	beq.n	80069f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069e4:	4b19      	ldr	r3, [pc, #100]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	4916      	ldr	r1, [pc, #88]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0308 	and.w	r3, r3, #8
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d009      	beq.n	8006a16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a02:	4b12      	ldr	r3, [pc, #72]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	00db      	lsls	r3, r3, #3
 8006a10:	490e      	ldr	r1, [pc, #56]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a16:	f000 f855 	bl	8006ac4 <HAL_RCC_GetSysClockFreq>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	4b0b      	ldr	r3, [pc, #44]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	091b      	lsrs	r3, r3, #4
 8006a22:	f003 030f 	and.w	r3, r3, #15
 8006a26:	490a      	ldr	r1, [pc, #40]	; (8006a50 <HAL_RCC_ClockConfig+0x1c0>)
 8006a28:	5ccb      	ldrb	r3, [r1, r3]
 8006a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a2e:	4a09      	ldr	r2, [pc, #36]	; (8006a54 <HAL_RCC_ClockConfig+0x1c4>)
 8006a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a32:	4b09      	ldr	r3, [pc, #36]	; (8006a58 <HAL_RCC_ClockConfig+0x1c8>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fe fa92 	bl	8004f60 <HAL_InitTick>

  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	40023c00 	.word	0x40023c00
 8006a4c:	40023800 	.word	0x40023800
 8006a50:	0800c84c 	.word	0x0800c84c
 8006a54:	200023f0 	.word	0x200023f0
 8006a58:	200023f4 	.word	0x200023f4

08006a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a60:	4b03      	ldr	r3, [pc, #12]	; (8006a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a62:	681b      	ldr	r3, [r3, #0]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	200023f0 	.word	0x200023f0

08006a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a78:	f7ff fff0 	bl	8006a5c <HAL_RCC_GetHCLKFreq>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	4b05      	ldr	r3, [pc, #20]	; (8006a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	0a9b      	lsrs	r3, r3, #10
 8006a84:	f003 0307 	and.w	r3, r3, #7
 8006a88:	4903      	ldr	r1, [pc, #12]	; (8006a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a8a:	5ccb      	ldrb	r3, [r1, r3]
 8006a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	40023800 	.word	0x40023800
 8006a98:	0800c85c 	.word	0x0800c85c

08006a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006aa0:	f7ff ffdc 	bl	8006a5c <HAL_RCC_GetHCLKFreq>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	4b05      	ldr	r3, [pc, #20]	; (8006abc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	0b5b      	lsrs	r3, r3, #13
 8006aac:	f003 0307 	and.w	r3, r3, #7
 8006ab0:	4903      	ldr	r1, [pc, #12]	; (8006ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ab2:	5ccb      	ldrb	r3, [r1, r3]
 8006ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	40023800 	.word	0x40023800
 8006ac0:	0800c85c 	.word	0x0800c85c

08006ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ac8:	b0ae      	sub	sp, #184	; 0xb8
 8006aca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006acc:	2300      	movs	r3, #0
 8006ace:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006aea:	4bcb      	ldr	r3, [pc, #812]	; (8006e18 <HAL_RCC_GetSysClockFreq+0x354>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f003 030c 	and.w	r3, r3, #12
 8006af2:	2b0c      	cmp	r3, #12
 8006af4:	f200 8206 	bhi.w	8006f04 <HAL_RCC_GetSysClockFreq+0x440>
 8006af8:	a201      	add	r2, pc, #4	; (adr r2, 8006b00 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afe:	bf00      	nop
 8006b00:	08006b35 	.word	0x08006b35
 8006b04:	08006f05 	.word	0x08006f05
 8006b08:	08006f05 	.word	0x08006f05
 8006b0c:	08006f05 	.word	0x08006f05
 8006b10:	08006b3d 	.word	0x08006b3d
 8006b14:	08006f05 	.word	0x08006f05
 8006b18:	08006f05 	.word	0x08006f05
 8006b1c:	08006f05 	.word	0x08006f05
 8006b20:	08006b45 	.word	0x08006b45
 8006b24:	08006f05 	.word	0x08006f05
 8006b28:	08006f05 	.word	0x08006f05
 8006b2c:	08006f05 	.word	0x08006f05
 8006b30:	08006d35 	.word	0x08006d35
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b34:	4bb9      	ldr	r3, [pc, #740]	; (8006e1c <HAL_RCC_GetSysClockFreq+0x358>)
 8006b36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8006b3a:	e1e7      	b.n	8006f0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b3c:	4bb8      	ldr	r3, [pc, #736]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006b42:	e1e3      	b.n	8006f0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b44:	4bb4      	ldr	r3, [pc, #720]	; (8006e18 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b50:	4bb1      	ldr	r3, [pc, #708]	; (8006e18 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d071      	beq.n	8006c40 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b5c:	4bae      	ldr	r3, [pc, #696]	; (8006e18 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	099b      	lsrs	r3, r3, #6
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b68:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006b6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006b7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b82:	4622      	mov	r2, r4
 8006b84:	462b      	mov	r3, r5
 8006b86:	f04f 0000 	mov.w	r0, #0
 8006b8a:	f04f 0100 	mov.w	r1, #0
 8006b8e:	0159      	lsls	r1, r3, #5
 8006b90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b94:	0150      	lsls	r0, r2, #5
 8006b96:	4602      	mov	r2, r0
 8006b98:	460b      	mov	r3, r1
 8006b9a:	4621      	mov	r1, r4
 8006b9c:	1a51      	subs	r1, r2, r1
 8006b9e:	6439      	str	r1, [r7, #64]	; 0x40
 8006ba0:	4629      	mov	r1, r5
 8006ba2:	eb63 0301 	sbc.w	r3, r3, r1
 8006ba6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ba8:	f04f 0200 	mov.w	r2, #0
 8006bac:	f04f 0300 	mov.w	r3, #0
 8006bb0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006bb4:	4649      	mov	r1, r9
 8006bb6:	018b      	lsls	r3, r1, #6
 8006bb8:	4641      	mov	r1, r8
 8006bba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006bbe:	4641      	mov	r1, r8
 8006bc0:	018a      	lsls	r2, r1, #6
 8006bc2:	4641      	mov	r1, r8
 8006bc4:	1a51      	subs	r1, r2, r1
 8006bc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8006bc8:	4649      	mov	r1, r9
 8006bca:	eb63 0301 	sbc.w	r3, r3, r1
 8006bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bd0:	f04f 0200 	mov.w	r2, #0
 8006bd4:	f04f 0300 	mov.w	r3, #0
 8006bd8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006bdc:	4649      	mov	r1, r9
 8006bde:	00cb      	lsls	r3, r1, #3
 8006be0:	4641      	mov	r1, r8
 8006be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006be6:	4641      	mov	r1, r8
 8006be8:	00ca      	lsls	r2, r1, #3
 8006bea:	4610      	mov	r0, r2
 8006bec:	4619      	mov	r1, r3
 8006bee:	4603      	mov	r3, r0
 8006bf0:	4622      	mov	r2, r4
 8006bf2:	189b      	adds	r3, r3, r2
 8006bf4:	633b      	str	r3, [r7, #48]	; 0x30
 8006bf6:	462b      	mov	r3, r5
 8006bf8:	460a      	mov	r2, r1
 8006bfa:	eb42 0303 	adc.w	r3, r2, r3
 8006bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8006c00:	f04f 0200 	mov.w	r2, #0
 8006c04:	f04f 0300 	mov.w	r3, #0
 8006c08:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006c0c:	4629      	mov	r1, r5
 8006c0e:	024b      	lsls	r3, r1, #9
 8006c10:	4621      	mov	r1, r4
 8006c12:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c16:	4621      	mov	r1, r4
 8006c18:	024a      	lsls	r2, r1, #9
 8006c1a:	4610      	mov	r0, r2
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c22:	2200      	movs	r2, #0
 8006c24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006c2c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006c30:	f7fa f84a 	bl	8000cc8 <__aeabi_uldivmod>
 8006c34:	4602      	mov	r2, r0
 8006c36:	460b      	mov	r3, r1
 8006c38:	4613      	mov	r3, r2
 8006c3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c3e:	e067      	b.n	8006d10 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c40:	4b75      	ldr	r3, [pc, #468]	; (8006e18 <HAL_RCC_GetSysClockFreq+0x354>)
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	099b      	lsrs	r3, r3, #6
 8006c46:	2200      	movs	r2, #0
 8006c48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c4c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006c50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c58:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006c5e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006c62:	4622      	mov	r2, r4
 8006c64:	462b      	mov	r3, r5
 8006c66:	f04f 0000 	mov.w	r0, #0
 8006c6a:	f04f 0100 	mov.w	r1, #0
 8006c6e:	0159      	lsls	r1, r3, #5
 8006c70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c74:	0150      	lsls	r0, r2, #5
 8006c76:	4602      	mov	r2, r0
 8006c78:	460b      	mov	r3, r1
 8006c7a:	4621      	mov	r1, r4
 8006c7c:	1a51      	subs	r1, r2, r1
 8006c7e:	62b9      	str	r1, [r7, #40]	; 0x28
 8006c80:	4629      	mov	r1, r5
 8006c82:	eb63 0301 	sbc.w	r3, r3, r1
 8006c86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c88:	f04f 0200 	mov.w	r2, #0
 8006c8c:	f04f 0300 	mov.w	r3, #0
 8006c90:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006c94:	4649      	mov	r1, r9
 8006c96:	018b      	lsls	r3, r1, #6
 8006c98:	4641      	mov	r1, r8
 8006c9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c9e:	4641      	mov	r1, r8
 8006ca0:	018a      	lsls	r2, r1, #6
 8006ca2:	4641      	mov	r1, r8
 8006ca4:	ebb2 0a01 	subs.w	sl, r2, r1
 8006ca8:	4649      	mov	r1, r9
 8006caa:	eb63 0b01 	sbc.w	fp, r3, r1
 8006cae:	f04f 0200 	mov.w	r2, #0
 8006cb2:	f04f 0300 	mov.w	r3, #0
 8006cb6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006cba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006cbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cc2:	4692      	mov	sl, r2
 8006cc4:	469b      	mov	fp, r3
 8006cc6:	4623      	mov	r3, r4
 8006cc8:	eb1a 0303 	adds.w	r3, sl, r3
 8006ccc:	623b      	str	r3, [r7, #32]
 8006cce:	462b      	mov	r3, r5
 8006cd0:	eb4b 0303 	adc.w	r3, fp, r3
 8006cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8006cd6:	f04f 0200 	mov.w	r2, #0
 8006cda:	f04f 0300 	mov.w	r3, #0
 8006cde:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006ce2:	4629      	mov	r1, r5
 8006ce4:	028b      	lsls	r3, r1, #10
 8006ce6:	4621      	mov	r1, r4
 8006ce8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006cec:	4621      	mov	r1, r4
 8006cee:	028a      	lsls	r2, r1, #10
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	673b      	str	r3, [r7, #112]	; 0x70
 8006cfc:	677a      	str	r2, [r7, #116]	; 0x74
 8006cfe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006d02:	f7f9 ffe1 	bl	8000cc8 <__aeabi_uldivmod>
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006d10:	4b41      	ldr	r3, [pc, #260]	; (8006e18 <HAL_RCC_GetSysClockFreq+0x354>)
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	0c1b      	lsrs	r3, r3, #16
 8006d16:	f003 0303 	and.w	r3, r3, #3
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	005b      	lsls	r3, r3, #1
 8006d1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006d22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006d32:	e0eb      	b.n	8006f0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d34:	4b38      	ldr	r3, [pc, #224]	; (8006e18 <HAL_RCC_GetSysClockFreq+0x354>)
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d40:	4b35      	ldr	r3, [pc, #212]	; (8006e18 <HAL_RCC_GetSysClockFreq+0x354>)
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d06b      	beq.n	8006e24 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d4c:	4b32      	ldr	r3, [pc, #200]	; (8006e18 <HAL_RCC_GetSysClockFreq+0x354>)
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	099b      	lsrs	r3, r3, #6
 8006d52:	2200      	movs	r2, #0
 8006d54:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d5e:	663b      	str	r3, [r7, #96]	; 0x60
 8006d60:	2300      	movs	r3, #0
 8006d62:	667b      	str	r3, [r7, #100]	; 0x64
 8006d64:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006d68:	4622      	mov	r2, r4
 8006d6a:	462b      	mov	r3, r5
 8006d6c:	f04f 0000 	mov.w	r0, #0
 8006d70:	f04f 0100 	mov.w	r1, #0
 8006d74:	0159      	lsls	r1, r3, #5
 8006d76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d7a:	0150      	lsls	r0, r2, #5
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4621      	mov	r1, r4
 8006d82:	1a51      	subs	r1, r2, r1
 8006d84:	61b9      	str	r1, [r7, #24]
 8006d86:	4629      	mov	r1, r5
 8006d88:	eb63 0301 	sbc.w	r3, r3, r1
 8006d8c:	61fb      	str	r3, [r7, #28]
 8006d8e:	f04f 0200 	mov.w	r2, #0
 8006d92:	f04f 0300 	mov.w	r3, #0
 8006d96:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006d9a:	4659      	mov	r1, fp
 8006d9c:	018b      	lsls	r3, r1, #6
 8006d9e:	4651      	mov	r1, sl
 8006da0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006da4:	4651      	mov	r1, sl
 8006da6:	018a      	lsls	r2, r1, #6
 8006da8:	4651      	mov	r1, sl
 8006daa:	ebb2 0801 	subs.w	r8, r2, r1
 8006dae:	4659      	mov	r1, fp
 8006db0:	eb63 0901 	sbc.w	r9, r3, r1
 8006db4:	f04f 0200 	mov.w	r2, #0
 8006db8:	f04f 0300 	mov.w	r3, #0
 8006dbc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006dc0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006dc4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006dc8:	4690      	mov	r8, r2
 8006dca:	4699      	mov	r9, r3
 8006dcc:	4623      	mov	r3, r4
 8006dce:	eb18 0303 	adds.w	r3, r8, r3
 8006dd2:	613b      	str	r3, [r7, #16]
 8006dd4:	462b      	mov	r3, r5
 8006dd6:	eb49 0303 	adc.w	r3, r9, r3
 8006dda:	617b      	str	r3, [r7, #20]
 8006ddc:	f04f 0200 	mov.w	r2, #0
 8006de0:	f04f 0300 	mov.w	r3, #0
 8006de4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006de8:	4629      	mov	r1, r5
 8006dea:	024b      	lsls	r3, r1, #9
 8006dec:	4621      	mov	r1, r4
 8006dee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006df2:	4621      	mov	r1, r4
 8006df4:	024a      	lsls	r2, r1, #9
 8006df6:	4610      	mov	r0, r2
 8006df8:	4619      	mov	r1, r3
 8006dfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006dfe:	2200      	movs	r2, #0
 8006e00:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e02:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006e04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006e08:	f7f9 ff5e 	bl	8000cc8 <__aeabi_uldivmod>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4613      	mov	r3, r2
 8006e12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e16:	e065      	b.n	8006ee4 <HAL_RCC_GetSysClockFreq+0x420>
 8006e18:	40023800 	.word	0x40023800
 8006e1c:	00f42400 	.word	0x00f42400
 8006e20:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e24:	4b3d      	ldr	r3, [pc, #244]	; (8006f1c <HAL_RCC_GetSysClockFreq+0x458>)
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	099b      	lsrs	r3, r3, #6
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	4611      	mov	r1, r2
 8006e30:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006e34:	653b      	str	r3, [r7, #80]	; 0x50
 8006e36:	2300      	movs	r3, #0
 8006e38:	657b      	str	r3, [r7, #84]	; 0x54
 8006e3a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006e3e:	4642      	mov	r2, r8
 8006e40:	464b      	mov	r3, r9
 8006e42:	f04f 0000 	mov.w	r0, #0
 8006e46:	f04f 0100 	mov.w	r1, #0
 8006e4a:	0159      	lsls	r1, r3, #5
 8006e4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e50:	0150      	lsls	r0, r2, #5
 8006e52:	4602      	mov	r2, r0
 8006e54:	460b      	mov	r3, r1
 8006e56:	4641      	mov	r1, r8
 8006e58:	1a51      	subs	r1, r2, r1
 8006e5a:	60b9      	str	r1, [r7, #8]
 8006e5c:	4649      	mov	r1, r9
 8006e5e:	eb63 0301 	sbc.w	r3, r3, r1
 8006e62:	60fb      	str	r3, [r7, #12]
 8006e64:	f04f 0200 	mov.w	r2, #0
 8006e68:	f04f 0300 	mov.w	r3, #0
 8006e6c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006e70:	4659      	mov	r1, fp
 8006e72:	018b      	lsls	r3, r1, #6
 8006e74:	4651      	mov	r1, sl
 8006e76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e7a:	4651      	mov	r1, sl
 8006e7c:	018a      	lsls	r2, r1, #6
 8006e7e:	4651      	mov	r1, sl
 8006e80:	1a54      	subs	r4, r2, r1
 8006e82:	4659      	mov	r1, fp
 8006e84:	eb63 0501 	sbc.w	r5, r3, r1
 8006e88:	f04f 0200 	mov.w	r2, #0
 8006e8c:	f04f 0300 	mov.w	r3, #0
 8006e90:	00eb      	lsls	r3, r5, #3
 8006e92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e96:	00e2      	lsls	r2, r4, #3
 8006e98:	4614      	mov	r4, r2
 8006e9a:	461d      	mov	r5, r3
 8006e9c:	4643      	mov	r3, r8
 8006e9e:	18e3      	adds	r3, r4, r3
 8006ea0:	603b      	str	r3, [r7, #0]
 8006ea2:	464b      	mov	r3, r9
 8006ea4:	eb45 0303 	adc.w	r3, r5, r3
 8006ea8:	607b      	str	r3, [r7, #4]
 8006eaa:	f04f 0200 	mov.w	r2, #0
 8006eae:	f04f 0300 	mov.w	r3, #0
 8006eb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	028b      	lsls	r3, r1, #10
 8006eba:	4621      	mov	r1, r4
 8006ebc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	028a      	lsls	r2, r1, #10
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ecc:	2200      	movs	r2, #0
 8006ece:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ed0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006ed2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ed6:	f7f9 fef7 	bl	8000cc8 <__aeabi_uldivmod>
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	4613      	mov	r3, r2
 8006ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006ee4:	4b0d      	ldr	r3, [pc, #52]	; (8006f1c <HAL_RCC_GetSysClockFreq+0x458>)
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	0f1b      	lsrs	r3, r3, #28
 8006eea:	f003 0307 	and.w	r3, r3, #7
 8006eee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006ef2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ef6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006efe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006f02:	e003      	b.n	8006f0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f04:	4b06      	ldr	r3, [pc, #24]	; (8006f20 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006f06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006f0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	37b8      	adds	r7, #184	; 0xb8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f1a:	bf00      	nop
 8006f1c:	40023800 	.word	0x40023800
 8006f20:	00f42400 	.word	0x00f42400

08006f24 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e28d      	b.n	8007452 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 8083 	beq.w	800704a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006f44:	4b94      	ldr	r3, [pc, #592]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f003 030c 	and.w	r3, r3, #12
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d019      	beq.n	8006f84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006f50:	4b91      	ldr	r3, [pc, #580]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006f58:	2b08      	cmp	r3, #8
 8006f5a:	d106      	bne.n	8006f6a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006f5c:	4b8e      	ldr	r3, [pc, #568]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f68:	d00c      	beq.n	8006f84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f6a:	4b8b      	ldr	r3, [pc, #556]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006f72:	2b0c      	cmp	r3, #12
 8006f74:	d112      	bne.n	8006f9c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f76:	4b88      	ldr	r3, [pc, #544]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f82:	d10b      	bne.n	8006f9c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f84:	4b84      	ldr	r3, [pc, #528]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d05b      	beq.n	8007048 <HAL_RCC_OscConfig+0x124>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d157      	bne.n	8007048 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e25a      	b.n	8007452 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fa4:	d106      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x90>
 8006fa6:	4b7c      	ldr	r3, [pc, #496]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a7b      	ldr	r2, [pc, #492]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 8006fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fb0:	6013      	str	r3, [r2, #0]
 8006fb2:	e01d      	b.n	8006ff0 <HAL_RCC_OscConfig+0xcc>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fbc:	d10c      	bne.n	8006fd8 <HAL_RCC_OscConfig+0xb4>
 8006fbe:	4b76      	ldr	r3, [pc, #472]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a75      	ldr	r2, [pc, #468]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 8006fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fc8:	6013      	str	r3, [r2, #0]
 8006fca:	4b73      	ldr	r3, [pc, #460]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a72      	ldr	r2, [pc, #456]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 8006fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fd4:	6013      	str	r3, [r2, #0]
 8006fd6:	e00b      	b.n	8006ff0 <HAL_RCC_OscConfig+0xcc>
 8006fd8:	4b6f      	ldr	r3, [pc, #444]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a6e      	ldr	r2, [pc, #440]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 8006fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fe2:	6013      	str	r3, [r2, #0]
 8006fe4:	4b6c      	ldr	r3, [pc, #432]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a6b      	ldr	r2, [pc, #428]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 8006fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d013      	beq.n	8007020 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff8:	f7fd fff6 	bl	8004fe8 <HAL_GetTick>
 8006ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ffe:	e008      	b.n	8007012 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007000:	f7fd fff2 	bl	8004fe8 <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	2b64      	cmp	r3, #100	; 0x64
 800700c:	d901      	bls.n	8007012 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e21f      	b.n	8007452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007012:	4b61      	ldr	r3, [pc, #388]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d0f0      	beq.n	8007000 <HAL_RCC_OscConfig+0xdc>
 800701e:	e014      	b.n	800704a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007020:	f7fd ffe2 	bl	8004fe8 <HAL_GetTick>
 8007024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007026:	e008      	b.n	800703a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007028:	f7fd ffde 	bl	8004fe8 <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	2b64      	cmp	r3, #100	; 0x64
 8007034:	d901      	bls.n	800703a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e20b      	b.n	8007452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800703a:	4b57      	ldr	r3, [pc, #348]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1f0      	bne.n	8007028 <HAL_RCC_OscConfig+0x104>
 8007046:	e000      	b.n	800704a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b00      	cmp	r3, #0
 8007054:	d06f      	beq.n	8007136 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007056:	4b50      	ldr	r3, [pc, #320]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f003 030c 	and.w	r3, r3, #12
 800705e:	2b00      	cmp	r3, #0
 8007060:	d017      	beq.n	8007092 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007062:	4b4d      	ldr	r3, [pc, #308]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800706a:	2b08      	cmp	r3, #8
 800706c:	d105      	bne.n	800707a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800706e:	4b4a      	ldr	r3, [pc, #296]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00b      	beq.n	8007092 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800707a:	4b47      	ldr	r3, [pc, #284]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007082:	2b0c      	cmp	r3, #12
 8007084:	d11c      	bne.n	80070c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007086:	4b44      	ldr	r3, [pc, #272]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d116      	bne.n	80070c0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007092:	4b41      	ldr	r3, [pc, #260]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0302 	and.w	r3, r3, #2
 800709a:	2b00      	cmp	r3, #0
 800709c:	d005      	beq.n	80070aa <HAL_RCC_OscConfig+0x186>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d001      	beq.n	80070aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e1d3      	b.n	8007452 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070aa:	4b3b      	ldr	r3, [pc, #236]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	00db      	lsls	r3, r3, #3
 80070b8:	4937      	ldr	r1, [pc, #220]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070be:	e03a      	b.n	8007136 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d020      	beq.n	800710a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070c8:	4b34      	ldr	r3, [pc, #208]	; (800719c <HAL_RCC_OscConfig+0x278>)
 80070ca:	2201      	movs	r2, #1
 80070cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ce:	f7fd ff8b 	bl	8004fe8 <HAL_GetTick>
 80070d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070d4:	e008      	b.n	80070e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070d6:	f7fd ff87 	bl	8004fe8 <HAL_GetTick>
 80070da:	4602      	mov	r2, r0
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d901      	bls.n	80070e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e1b4      	b.n	8007452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070e8:	4b2b      	ldr	r3, [pc, #172]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d0f0      	beq.n	80070d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070f4:	4b28      	ldr	r3, [pc, #160]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	00db      	lsls	r3, r3, #3
 8007102:	4925      	ldr	r1, [pc, #148]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 8007104:	4313      	orrs	r3, r2
 8007106:	600b      	str	r3, [r1, #0]
 8007108:	e015      	b.n	8007136 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800710a:	4b24      	ldr	r3, [pc, #144]	; (800719c <HAL_RCC_OscConfig+0x278>)
 800710c:	2200      	movs	r2, #0
 800710e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007110:	f7fd ff6a 	bl	8004fe8 <HAL_GetTick>
 8007114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007116:	e008      	b.n	800712a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007118:	f7fd ff66 	bl	8004fe8 <HAL_GetTick>
 800711c:	4602      	mov	r2, r0
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	2b02      	cmp	r3, #2
 8007124:	d901      	bls.n	800712a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e193      	b.n	8007452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800712a:	4b1b      	ldr	r3, [pc, #108]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0302 	and.w	r3, r3, #2
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1f0      	bne.n	8007118 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 0308 	and.w	r3, r3, #8
 800713e:	2b00      	cmp	r3, #0
 8007140:	d036      	beq.n	80071b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d016      	beq.n	8007178 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800714a:	4b15      	ldr	r3, [pc, #84]	; (80071a0 <HAL_RCC_OscConfig+0x27c>)
 800714c:	2201      	movs	r2, #1
 800714e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007150:	f7fd ff4a 	bl	8004fe8 <HAL_GetTick>
 8007154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007156:	e008      	b.n	800716a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007158:	f7fd ff46 	bl	8004fe8 <HAL_GetTick>
 800715c:	4602      	mov	r2, r0
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	2b02      	cmp	r3, #2
 8007164:	d901      	bls.n	800716a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e173      	b.n	8007452 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800716a:	4b0b      	ldr	r3, [pc, #44]	; (8007198 <HAL_RCC_OscConfig+0x274>)
 800716c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800716e:	f003 0302 	and.w	r3, r3, #2
 8007172:	2b00      	cmp	r3, #0
 8007174:	d0f0      	beq.n	8007158 <HAL_RCC_OscConfig+0x234>
 8007176:	e01b      	b.n	80071b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007178:	4b09      	ldr	r3, [pc, #36]	; (80071a0 <HAL_RCC_OscConfig+0x27c>)
 800717a:	2200      	movs	r2, #0
 800717c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800717e:	f7fd ff33 	bl	8004fe8 <HAL_GetTick>
 8007182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007184:	e00e      	b.n	80071a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007186:	f7fd ff2f 	bl	8004fe8 <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	2b02      	cmp	r3, #2
 8007192:	d907      	bls.n	80071a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007194:	2303      	movs	r3, #3
 8007196:	e15c      	b.n	8007452 <HAL_RCC_OscConfig+0x52e>
 8007198:	40023800 	.word	0x40023800
 800719c:	42470000 	.word	0x42470000
 80071a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071a4:	4b8a      	ldr	r3, [pc, #552]	; (80073d0 <HAL_RCC_OscConfig+0x4ac>)
 80071a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071a8:	f003 0302 	and.w	r3, r3, #2
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1ea      	bne.n	8007186 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0304 	and.w	r3, r3, #4
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f000 8097 	beq.w	80072ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071be:	2300      	movs	r3, #0
 80071c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071c2:	4b83      	ldr	r3, [pc, #524]	; (80073d0 <HAL_RCC_OscConfig+0x4ac>)
 80071c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10f      	bne.n	80071ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071ce:	2300      	movs	r3, #0
 80071d0:	60bb      	str	r3, [r7, #8]
 80071d2:	4b7f      	ldr	r3, [pc, #508]	; (80073d0 <HAL_RCC_OscConfig+0x4ac>)
 80071d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d6:	4a7e      	ldr	r2, [pc, #504]	; (80073d0 <HAL_RCC_OscConfig+0x4ac>)
 80071d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071dc:	6413      	str	r3, [r2, #64]	; 0x40
 80071de:	4b7c      	ldr	r3, [pc, #496]	; (80073d0 <HAL_RCC_OscConfig+0x4ac>)
 80071e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071e6:	60bb      	str	r3, [r7, #8]
 80071e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071ea:	2301      	movs	r3, #1
 80071ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071ee:	4b79      	ldr	r3, [pc, #484]	; (80073d4 <HAL_RCC_OscConfig+0x4b0>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d118      	bne.n	800722c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071fa:	4b76      	ldr	r3, [pc, #472]	; (80073d4 <HAL_RCC_OscConfig+0x4b0>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a75      	ldr	r2, [pc, #468]	; (80073d4 <HAL_RCC_OscConfig+0x4b0>)
 8007200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007206:	f7fd feef 	bl	8004fe8 <HAL_GetTick>
 800720a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800720c:	e008      	b.n	8007220 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800720e:	f7fd feeb 	bl	8004fe8 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	2b02      	cmp	r3, #2
 800721a:	d901      	bls.n	8007220 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	e118      	b.n	8007452 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007220:	4b6c      	ldr	r3, [pc, #432]	; (80073d4 <HAL_RCC_OscConfig+0x4b0>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007228:	2b00      	cmp	r3, #0
 800722a:	d0f0      	beq.n	800720e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d106      	bne.n	8007242 <HAL_RCC_OscConfig+0x31e>
 8007234:	4b66      	ldr	r3, [pc, #408]	; (80073d0 <HAL_RCC_OscConfig+0x4ac>)
 8007236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007238:	4a65      	ldr	r2, [pc, #404]	; (80073d0 <HAL_RCC_OscConfig+0x4ac>)
 800723a:	f043 0301 	orr.w	r3, r3, #1
 800723e:	6713      	str	r3, [r2, #112]	; 0x70
 8007240:	e01c      	b.n	800727c <HAL_RCC_OscConfig+0x358>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	2b05      	cmp	r3, #5
 8007248:	d10c      	bne.n	8007264 <HAL_RCC_OscConfig+0x340>
 800724a:	4b61      	ldr	r3, [pc, #388]	; (80073d0 <HAL_RCC_OscConfig+0x4ac>)
 800724c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800724e:	4a60      	ldr	r2, [pc, #384]	; (80073d0 <HAL_RCC_OscConfig+0x4ac>)
 8007250:	f043 0304 	orr.w	r3, r3, #4
 8007254:	6713      	str	r3, [r2, #112]	; 0x70
 8007256:	4b5e      	ldr	r3, [pc, #376]	; (80073d0 <HAL_RCC_OscConfig+0x4ac>)
 8007258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725a:	4a5d      	ldr	r2, [pc, #372]	; (80073d0 <HAL_RCC_OscConfig+0x4ac>)
 800725c:	f043 0301 	orr.w	r3, r3, #1
 8007260:	6713      	str	r3, [r2, #112]	; 0x70
 8007262:	e00b      	b.n	800727c <HAL_RCC_OscConfig+0x358>
 8007264:	4b5a      	ldr	r3, [pc, #360]	; (80073d0 <HAL_RCC_OscConfig+0x4ac>)
 8007266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007268:	4a59      	ldr	r2, [pc, #356]	; (80073d0 <HAL_RCC_OscConfig+0x4ac>)
 800726a:	f023 0301 	bic.w	r3, r3, #1
 800726e:	6713      	str	r3, [r2, #112]	; 0x70
 8007270:	4b57      	ldr	r3, [pc, #348]	; (80073d0 <HAL_RCC_OscConfig+0x4ac>)
 8007272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007274:	4a56      	ldr	r2, [pc, #344]	; (80073d0 <HAL_RCC_OscConfig+0x4ac>)
 8007276:	f023 0304 	bic.w	r3, r3, #4
 800727a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d015      	beq.n	80072b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007284:	f7fd feb0 	bl	8004fe8 <HAL_GetTick>
 8007288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800728a:	e00a      	b.n	80072a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800728c:	f7fd feac 	bl	8004fe8 <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	f241 3288 	movw	r2, #5000	; 0x1388
 800729a:	4293      	cmp	r3, r2
 800729c:	d901      	bls.n	80072a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e0d7      	b.n	8007452 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072a2:	4b4b      	ldr	r3, [pc, #300]	; (80073d0 <HAL_RCC_OscConfig+0x4ac>)
 80072a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a6:	f003 0302 	and.w	r3, r3, #2
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d0ee      	beq.n	800728c <HAL_RCC_OscConfig+0x368>
 80072ae:	e014      	b.n	80072da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072b0:	f7fd fe9a 	bl	8004fe8 <HAL_GetTick>
 80072b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072b6:	e00a      	b.n	80072ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072b8:	f7fd fe96 	bl	8004fe8 <HAL_GetTick>
 80072bc:	4602      	mov	r2, r0
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d901      	bls.n	80072ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e0c1      	b.n	8007452 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072ce:	4b40      	ldr	r3, [pc, #256]	; (80073d0 <HAL_RCC_OscConfig+0x4ac>)
 80072d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1ee      	bne.n	80072b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072da:	7dfb      	ldrb	r3, [r7, #23]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d105      	bne.n	80072ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072e0:	4b3b      	ldr	r3, [pc, #236]	; (80073d0 <HAL_RCC_OscConfig+0x4ac>)
 80072e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e4:	4a3a      	ldr	r2, [pc, #232]	; (80073d0 <HAL_RCC_OscConfig+0x4ac>)
 80072e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f000 80ad 	beq.w	8007450 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80072f6:	4b36      	ldr	r3, [pc, #216]	; (80073d0 <HAL_RCC_OscConfig+0x4ac>)
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f003 030c 	and.w	r3, r3, #12
 80072fe:	2b08      	cmp	r3, #8
 8007300:	d060      	beq.n	80073c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	2b02      	cmp	r3, #2
 8007308:	d145      	bne.n	8007396 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800730a:	4b33      	ldr	r3, [pc, #204]	; (80073d8 <HAL_RCC_OscConfig+0x4b4>)
 800730c:	2200      	movs	r2, #0
 800730e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007310:	f7fd fe6a 	bl	8004fe8 <HAL_GetTick>
 8007314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007316:	e008      	b.n	800732a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007318:	f7fd fe66 	bl	8004fe8 <HAL_GetTick>
 800731c:	4602      	mov	r2, r0
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	2b02      	cmp	r3, #2
 8007324:	d901      	bls.n	800732a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e093      	b.n	8007452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800732a:	4b29      	ldr	r3, [pc, #164]	; (80073d0 <HAL_RCC_OscConfig+0x4ac>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1f0      	bne.n	8007318 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	69da      	ldr	r2, [r3, #28]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	431a      	orrs	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	019b      	lsls	r3, r3, #6
 8007346:	431a      	orrs	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734c:	085b      	lsrs	r3, r3, #1
 800734e:	3b01      	subs	r3, #1
 8007350:	041b      	lsls	r3, r3, #16
 8007352:	431a      	orrs	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007358:	061b      	lsls	r3, r3, #24
 800735a:	431a      	orrs	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007360:	071b      	lsls	r3, r3, #28
 8007362:	491b      	ldr	r1, [pc, #108]	; (80073d0 <HAL_RCC_OscConfig+0x4ac>)
 8007364:	4313      	orrs	r3, r2
 8007366:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007368:	4b1b      	ldr	r3, [pc, #108]	; (80073d8 <HAL_RCC_OscConfig+0x4b4>)
 800736a:	2201      	movs	r2, #1
 800736c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800736e:	f7fd fe3b 	bl	8004fe8 <HAL_GetTick>
 8007372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007374:	e008      	b.n	8007388 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007376:	f7fd fe37 	bl	8004fe8 <HAL_GetTick>
 800737a:	4602      	mov	r2, r0
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	2b02      	cmp	r3, #2
 8007382:	d901      	bls.n	8007388 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e064      	b.n	8007452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007388:	4b11      	ldr	r3, [pc, #68]	; (80073d0 <HAL_RCC_OscConfig+0x4ac>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d0f0      	beq.n	8007376 <HAL_RCC_OscConfig+0x452>
 8007394:	e05c      	b.n	8007450 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007396:	4b10      	ldr	r3, [pc, #64]	; (80073d8 <HAL_RCC_OscConfig+0x4b4>)
 8007398:	2200      	movs	r2, #0
 800739a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800739c:	f7fd fe24 	bl	8004fe8 <HAL_GetTick>
 80073a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073a2:	e008      	b.n	80073b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073a4:	f7fd fe20 	bl	8004fe8 <HAL_GetTick>
 80073a8:	4602      	mov	r2, r0
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d901      	bls.n	80073b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e04d      	b.n	8007452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073b6:	4b06      	ldr	r3, [pc, #24]	; (80073d0 <HAL_RCC_OscConfig+0x4ac>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1f0      	bne.n	80073a4 <HAL_RCC_OscConfig+0x480>
 80073c2:	e045      	b.n	8007450 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d107      	bne.n	80073dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e040      	b.n	8007452 <HAL_RCC_OscConfig+0x52e>
 80073d0:	40023800 	.word	0x40023800
 80073d4:	40007000 	.word	0x40007000
 80073d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80073dc:	4b1f      	ldr	r3, [pc, #124]	; (800745c <HAL_RCC_OscConfig+0x538>)
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d030      	beq.n	800744c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d129      	bne.n	800744c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007402:	429a      	cmp	r2, r3
 8007404:	d122      	bne.n	800744c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800740c:	4013      	ands	r3, r2
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007412:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007414:	4293      	cmp	r3, r2
 8007416:	d119      	bne.n	800744c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007422:	085b      	lsrs	r3, r3, #1
 8007424:	3b01      	subs	r3, #1
 8007426:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007428:	429a      	cmp	r2, r3
 800742a:	d10f      	bne.n	800744c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007436:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007438:	429a      	cmp	r2, r3
 800743a:	d107      	bne.n	800744c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007446:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007448:	429a      	cmp	r2, r3
 800744a:	d001      	beq.n	8007450 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e000      	b.n	8007452 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3718      	adds	r7, #24
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	40023800 	.word	0x40023800

08007460 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e07b      	b.n	800756a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007476:	2b00      	cmp	r3, #0
 8007478:	d108      	bne.n	800748c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007482:	d009      	beq.n	8007498 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	61da      	str	r2, [r3, #28]
 800748a:	e005      	b.n	8007498 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d106      	bne.n	80074b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f7fd faa4 	bl	8004a00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2202      	movs	r2, #2
 80074bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80074e0:	431a      	orrs	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074ea:	431a      	orrs	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	f003 0302 	and.w	r3, r3, #2
 80074f4:	431a      	orrs	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	431a      	orrs	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007508:	431a      	orrs	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	69db      	ldr	r3, [r3, #28]
 800750e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007512:	431a      	orrs	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6a1b      	ldr	r3, [r3, #32]
 8007518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800751c:	ea42 0103 	orr.w	r1, r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007524:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	430a      	orrs	r2, r1
 800752e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	0c1b      	lsrs	r3, r3, #16
 8007536:	f003 0104 	and.w	r1, r3, #4
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753e:	f003 0210 	and.w	r2, r3, #16
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	430a      	orrs	r2, r1
 8007548:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	69da      	ldr	r2, [r3, #28]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007558:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3708      	adds	r7, #8
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b088      	sub	sp, #32
 8007576:	af00      	add	r7, sp, #0
 8007578:	60f8      	str	r0, [r7, #12]
 800757a:	60b9      	str	r1, [r7, #8]
 800757c:	603b      	str	r3, [r7, #0]
 800757e:	4613      	mov	r3, r2
 8007580:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800758c:	2b01      	cmp	r3, #1
 800758e:	d101      	bne.n	8007594 <HAL_SPI_Transmit+0x22>
 8007590:	2302      	movs	r3, #2
 8007592:	e126      	b.n	80077e2 <HAL_SPI_Transmit+0x270>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800759c:	f7fd fd24 	bl	8004fe8 <HAL_GetTick>
 80075a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80075a2:	88fb      	ldrh	r3, [r7, #6]
 80075a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d002      	beq.n	80075b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80075b2:	2302      	movs	r3, #2
 80075b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075b6:	e10b      	b.n	80077d0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d002      	beq.n	80075c4 <HAL_SPI_Transmit+0x52>
 80075be:	88fb      	ldrh	r3, [r7, #6]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d102      	bne.n	80075ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075c8:	e102      	b.n	80077d0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2203      	movs	r2, #3
 80075ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	88fa      	ldrh	r2, [r7, #6]
 80075e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	88fa      	ldrh	r2, [r7, #6]
 80075e8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007610:	d10f      	bne.n	8007632 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007620:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007630:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800763c:	2b40      	cmp	r3, #64	; 0x40
 800763e:	d007      	beq.n	8007650 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800764e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007658:	d14b      	bne.n	80076f2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d002      	beq.n	8007668 <HAL_SPI_Transmit+0xf6>
 8007662:	8afb      	ldrh	r3, [r7, #22]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d13e      	bne.n	80076e6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766c:	881a      	ldrh	r2, [r3, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007678:	1c9a      	adds	r2, r3, #2
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007682:	b29b      	uxth	r3, r3
 8007684:	3b01      	subs	r3, #1
 8007686:	b29a      	uxth	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800768c:	e02b      	b.n	80076e6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f003 0302 	and.w	r3, r3, #2
 8007698:	2b02      	cmp	r3, #2
 800769a:	d112      	bne.n	80076c2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a0:	881a      	ldrh	r2, [r3, #0]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ac:	1c9a      	adds	r2, r3, #2
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	3b01      	subs	r3, #1
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	86da      	strh	r2, [r3, #54]	; 0x36
 80076c0:	e011      	b.n	80076e6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076c2:	f7fd fc91 	bl	8004fe8 <HAL_GetTick>
 80076c6:	4602      	mov	r2, r0
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d803      	bhi.n	80076da <HAL_SPI_Transmit+0x168>
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076d8:	d102      	bne.n	80076e0 <HAL_SPI_Transmit+0x16e>
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d102      	bne.n	80076e6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80076e4:	e074      	b.n	80077d0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1ce      	bne.n	800768e <HAL_SPI_Transmit+0x11c>
 80076f0:	e04c      	b.n	800778c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d002      	beq.n	8007700 <HAL_SPI_Transmit+0x18e>
 80076fa:	8afb      	ldrh	r3, [r7, #22]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d140      	bne.n	8007782 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	330c      	adds	r3, #12
 800770a:	7812      	ldrb	r2, [r2, #0]
 800770c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007712:	1c5a      	adds	r2, r3, #1
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800771c:	b29b      	uxth	r3, r3
 800771e:	3b01      	subs	r3, #1
 8007720:	b29a      	uxth	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007726:	e02c      	b.n	8007782 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f003 0302 	and.w	r3, r3, #2
 8007732:	2b02      	cmp	r3, #2
 8007734:	d113      	bne.n	800775e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	330c      	adds	r3, #12
 8007740:	7812      	ldrb	r2, [r2, #0]
 8007742:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007748:	1c5a      	adds	r2, r3, #1
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007752:	b29b      	uxth	r3, r3
 8007754:	3b01      	subs	r3, #1
 8007756:	b29a      	uxth	r2, r3
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	86da      	strh	r2, [r3, #54]	; 0x36
 800775c:	e011      	b.n	8007782 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800775e:	f7fd fc43 	bl	8004fe8 <HAL_GetTick>
 8007762:	4602      	mov	r2, r0
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	683a      	ldr	r2, [r7, #0]
 800776a:	429a      	cmp	r2, r3
 800776c:	d803      	bhi.n	8007776 <HAL_SPI_Transmit+0x204>
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007774:	d102      	bne.n	800777c <HAL_SPI_Transmit+0x20a>
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d102      	bne.n	8007782 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800777c:	2303      	movs	r3, #3
 800777e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007780:	e026      	b.n	80077d0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007786:	b29b      	uxth	r3, r3
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1cd      	bne.n	8007728 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800778c:	69ba      	ldr	r2, [r7, #24]
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 fbcb 	bl	8007f2c <SPI_EndRxTxTransaction>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d002      	beq.n	80077a2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2220      	movs	r2, #32
 80077a0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d10a      	bne.n	80077c0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077aa:	2300      	movs	r3, #0
 80077ac:	613b      	str	r3, [r7, #16]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	613b      	str	r3, [r7, #16]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	613b      	str	r3, [r7, #16]
 80077be:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d002      	beq.n	80077ce <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	77fb      	strb	r3, [r7, #31]
 80077cc:	e000      	b.n	80077d0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80077ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3720      	adds	r7, #32
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b088      	sub	sp, #32
 80077ee:	af02      	add	r7, sp, #8
 80077f0:	60f8      	str	r0, [r7, #12]
 80077f2:	60b9      	str	r1, [r7, #8]
 80077f4:	603b      	str	r3, [r7, #0]
 80077f6:	4613      	mov	r3, r2
 80077f8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007806:	d112      	bne.n	800782e <HAL_SPI_Receive+0x44>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10e      	bne.n	800782e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2204      	movs	r2, #4
 8007814:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007818:	88fa      	ldrh	r2, [r7, #6]
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	4613      	mov	r3, r2
 8007820:	68ba      	ldr	r2, [r7, #8]
 8007822:	68b9      	ldr	r1, [r7, #8]
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f000 f8f1 	bl	8007a0c <HAL_SPI_TransmitReceive>
 800782a:	4603      	mov	r3, r0
 800782c:	e0ea      	b.n	8007a04 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007834:	2b01      	cmp	r3, #1
 8007836:	d101      	bne.n	800783c <HAL_SPI_Receive+0x52>
 8007838:	2302      	movs	r3, #2
 800783a:	e0e3      	b.n	8007a04 <HAL_SPI_Receive+0x21a>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007844:	f7fd fbd0 	bl	8004fe8 <HAL_GetTick>
 8007848:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b01      	cmp	r3, #1
 8007854:	d002      	beq.n	800785c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007856:	2302      	movs	r3, #2
 8007858:	75fb      	strb	r3, [r7, #23]
    goto error;
 800785a:	e0ca      	b.n	80079f2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d002      	beq.n	8007868 <HAL_SPI_Receive+0x7e>
 8007862:	88fb      	ldrh	r3, [r7, #6]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d102      	bne.n	800786e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800786c:	e0c1      	b.n	80079f2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2204      	movs	r2, #4
 8007872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	88fa      	ldrh	r2, [r7, #6]
 8007886:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	88fa      	ldrh	r2, [r7, #6]
 800788c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078b4:	d10f      	bne.n	80078d6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80078d4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e0:	2b40      	cmp	r3, #64	; 0x40
 80078e2:	d007      	beq.n	80078f4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078f2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d162      	bne.n	80079c2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80078fc:	e02e      	b.n	800795c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f003 0301 	and.w	r3, r3, #1
 8007908:	2b01      	cmp	r3, #1
 800790a:	d115      	bne.n	8007938 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f103 020c 	add.w	r2, r3, #12
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007918:	7812      	ldrb	r2, [r2, #0]
 800791a:	b2d2      	uxtb	r2, r2
 800791c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007922:	1c5a      	adds	r2, r3, #1
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800792c:	b29b      	uxth	r3, r3
 800792e:	3b01      	subs	r3, #1
 8007930:	b29a      	uxth	r2, r3
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007936:	e011      	b.n	800795c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007938:	f7fd fb56 	bl	8004fe8 <HAL_GetTick>
 800793c:	4602      	mov	r2, r0
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	683a      	ldr	r2, [r7, #0]
 8007944:	429a      	cmp	r2, r3
 8007946:	d803      	bhi.n	8007950 <HAL_SPI_Receive+0x166>
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800794e:	d102      	bne.n	8007956 <HAL_SPI_Receive+0x16c>
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d102      	bne.n	800795c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	75fb      	strb	r3, [r7, #23]
          goto error;
 800795a:	e04a      	b.n	80079f2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007960:	b29b      	uxth	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1cb      	bne.n	80078fe <HAL_SPI_Receive+0x114>
 8007966:	e031      	b.n	80079cc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b01      	cmp	r3, #1
 8007974:	d113      	bne.n	800799e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68da      	ldr	r2, [r3, #12]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007980:	b292      	uxth	r2, r2
 8007982:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007988:	1c9a      	adds	r2, r3, #2
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007992:	b29b      	uxth	r3, r3
 8007994:	3b01      	subs	r3, #1
 8007996:	b29a      	uxth	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800799c:	e011      	b.n	80079c2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800799e:	f7fd fb23 	bl	8004fe8 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	683a      	ldr	r2, [r7, #0]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d803      	bhi.n	80079b6 <HAL_SPI_Receive+0x1cc>
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079b4:	d102      	bne.n	80079bc <HAL_SPI_Receive+0x1d2>
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d102      	bne.n	80079c2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	75fb      	strb	r3, [r7, #23]
          goto error;
 80079c0:	e017      	b.n	80079f2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1cd      	bne.n	8007968 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	6839      	ldr	r1, [r7, #0]
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f000 fa45 	bl	8007e60 <SPI_EndRxTransaction>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d002      	beq.n	80079e2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2220      	movs	r2, #32
 80079e0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d002      	beq.n	80079f0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	75fb      	strb	r3, [r7, #23]
 80079ee:	e000      	b.n	80079f2 <HAL_SPI_Receive+0x208>
  }

error :
 80079f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3718      	adds	r7, #24
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b08c      	sub	sp, #48	; 0x30
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	607a      	str	r2, [r7, #4]
 8007a18:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d101      	bne.n	8007a32 <HAL_SPI_TransmitReceive+0x26>
 8007a2e:	2302      	movs	r3, #2
 8007a30:	e18a      	b.n	8007d48 <HAL_SPI_TransmitReceive+0x33c>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a3a:	f7fd fad5 	bl	8004fe8 <HAL_GetTick>
 8007a3e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007a50:	887b      	ldrh	r3, [r7, #2]
 8007a52:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d00f      	beq.n	8007a7c <HAL_SPI_TransmitReceive+0x70>
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a62:	d107      	bne.n	8007a74 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d103      	bne.n	8007a74 <HAL_SPI_TransmitReceive+0x68>
 8007a6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a70:	2b04      	cmp	r3, #4
 8007a72:	d003      	beq.n	8007a7c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007a74:	2302      	movs	r3, #2
 8007a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007a7a:	e15b      	b.n	8007d34 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d005      	beq.n	8007a8e <HAL_SPI_TransmitReceive+0x82>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d002      	beq.n	8007a8e <HAL_SPI_TransmitReceive+0x82>
 8007a88:	887b      	ldrh	r3, [r7, #2]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d103      	bne.n	8007a96 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007a94:	e14e      	b.n	8007d34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b04      	cmp	r3, #4
 8007aa0:	d003      	beq.n	8007aaa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2205      	movs	r2, #5
 8007aa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	887a      	ldrh	r2, [r7, #2]
 8007aba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	887a      	ldrh	r2, [r7, #2]
 8007ac0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	887a      	ldrh	r2, [r7, #2]
 8007acc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	887a      	ldrh	r2, [r7, #2]
 8007ad2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aea:	2b40      	cmp	r3, #64	; 0x40
 8007aec:	d007      	beq.n	8007afe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007afc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b06:	d178      	bne.n	8007bfa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d002      	beq.n	8007b16 <HAL_SPI_TransmitReceive+0x10a>
 8007b10:	8b7b      	ldrh	r3, [r7, #26]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d166      	bne.n	8007be4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b1a:	881a      	ldrh	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b26:	1c9a      	adds	r2, r3, #2
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	3b01      	subs	r3, #1
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b3a:	e053      	b.n	8007be4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	f003 0302 	and.w	r3, r3, #2
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d11b      	bne.n	8007b82 <HAL_SPI_TransmitReceive+0x176>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d016      	beq.n	8007b82 <HAL_SPI_TransmitReceive+0x176>
 8007b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d113      	bne.n	8007b82 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5e:	881a      	ldrh	r2, [r3, #0]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6a:	1c9a      	adds	r2, r3, #2
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	3b01      	subs	r3, #1
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	f003 0301 	and.w	r3, r3, #1
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d119      	bne.n	8007bc4 <HAL_SPI_TransmitReceive+0x1b8>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d014      	beq.n	8007bc4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68da      	ldr	r2, [r3, #12]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba4:	b292      	uxth	r2, r2
 8007ba6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bac:	1c9a      	adds	r2, r3, #2
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007bc4:	f7fd fa10 	bl	8004fe8 <HAL_GetTick>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d807      	bhi.n	8007be4 <HAL_SPI_TransmitReceive+0x1d8>
 8007bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bda:	d003      	beq.n	8007be4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007be2:	e0a7      	b.n	8007d34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1a6      	bne.n	8007b3c <HAL_SPI_TransmitReceive+0x130>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1a1      	bne.n	8007b3c <HAL_SPI_TransmitReceive+0x130>
 8007bf8:	e07c      	b.n	8007cf4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d002      	beq.n	8007c08 <HAL_SPI_TransmitReceive+0x1fc>
 8007c02:	8b7b      	ldrh	r3, [r7, #26]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d16b      	bne.n	8007ce0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	330c      	adds	r3, #12
 8007c12:	7812      	ldrb	r2, [r2, #0]
 8007c14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1a:	1c5a      	adds	r2, r3, #1
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	3b01      	subs	r3, #1
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c2e:	e057      	b.n	8007ce0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d11c      	bne.n	8007c78 <HAL_SPI_TransmitReceive+0x26c>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d017      	beq.n	8007c78 <HAL_SPI_TransmitReceive+0x26c>
 8007c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d114      	bne.n	8007c78 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	330c      	adds	r3, #12
 8007c58:	7812      	ldrb	r2, [r2, #0]
 8007c5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c60:	1c5a      	adds	r2, r3, #1
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c74:	2300      	movs	r3, #0
 8007c76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f003 0301 	and.w	r3, r3, #1
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d119      	bne.n	8007cba <HAL_SPI_TransmitReceive+0x2ae>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d014      	beq.n	8007cba <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68da      	ldr	r2, [r3, #12]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9a:	b2d2      	uxtb	r2, r2
 8007c9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca2:	1c5a      	adds	r2, r3, #1
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007cba:	f7fd f995 	bl	8004fe8 <HAL_GetTick>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d803      	bhi.n	8007cd2 <HAL_SPI_TransmitReceive+0x2c6>
 8007cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cd0:	d102      	bne.n	8007cd8 <HAL_SPI_TransmitReceive+0x2cc>
 8007cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d103      	bne.n	8007ce0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007cde:	e029      	b.n	8007d34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1a2      	bne.n	8007c30 <HAL_SPI_TransmitReceive+0x224>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d19d      	bne.n	8007c30 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cf6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f000 f917 	bl	8007f2c <SPI_EndRxTxTransaction>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d006      	beq.n	8007d12 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2220      	movs	r2, #32
 8007d0e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007d10:	e010      	b.n	8007d34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10b      	bne.n	8007d32 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	617b      	str	r3, [r7, #20]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	617b      	str	r3, [r7, #20]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	617b      	str	r3, [r7, #20]
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	e000      	b.n	8007d34 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007d32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007d44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3730      	adds	r7, #48	; 0x30
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b088      	sub	sp, #32
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	603b      	str	r3, [r7, #0]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007d60:	f7fd f942 	bl	8004fe8 <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d68:	1a9b      	subs	r3, r3, r2
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007d70:	f7fd f93a 	bl	8004fe8 <HAL_GetTick>
 8007d74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007d76:	4b39      	ldr	r3, [pc, #228]	; (8007e5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	015b      	lsls	r3, r3, #5
 8007d7c:	0d1b      	lsrs	r3, r3, #20
 8007d7e:	69fa      	ldr	r2, [r7, #28]
 8007d80:	fb02 f303 	mul.w	r3, r2, r3
 8007d84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d86:	e054      	b.n	8007e32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d8e:	d050      	beq.n	8007e32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d90:	f7fd f92a 	bl	8004fe8 <HAL_GetTick>
 8007d94:	4602      	mov	r2, r0
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	69fa      	ldr	r2, [r7, #28]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d902      	bls.n	8007da6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d13d      	bne.n	8007e22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007db4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007dbe:	d111      	bne.n	8007de4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dc8:	d004      	beq.n	8007dd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dd2:	d107      	bne.n	8007de4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007de2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dec:	d10f      	bne.n	8007e0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e017      	b.n	8007e52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d101      	bne.n	8007e2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	689a      	ldr	r2, [r3, #8]
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	bf0c      	ite	eq
 8007e42:	2301      	moveq	r3, #1
 8007e44:	2300      	movne	r3, #0
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	461a      	mov	r2, r3
 8007e4a:	79fb      	ldrb	r3, [r7, #7]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d19b      	bne.n	8007d88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3720      	adds	r7, #32
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	200023f0 	.word	0x200023f0

08007e60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af02      	add	r7, sp, #8
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e74:	d111      	bne.n	8007e9a <SPI_EndRxTransaction+0x3a>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e7e:	d004      	beq.n	8007e8a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e88:	d107      	bne.n	8007e9a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e98:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ea2:	d12a      	bne.n	8007efa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eac:	d012      	beq.n	8007ed4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	2180      	movs	r1, #128	; 0x80
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f7ff ff49 	bl	8007d50 <SPI_WaitFlagStateUntilTimeout>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d02d      	beq.n	8007f20 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec8:	f043 0220 	orr.w	r2, r3, #32
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	e026      	b.n	8007f22 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	9300      	str	r3, [sp, #0]
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	2200      	movs	r2, #0
 8007edc:	2101      	movs	r1, #1
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f7ff ff36 	bl	8007d50 <SPI_WaitFlagStateUntilTimeout>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d01a      	beq.n	8007f20 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eee:	f043 0220 	orr.w	r2, r3, #32
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e013      	b.n	8007f22 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	2200      	movs	r2, #0
 8007f02:	2101      	movs	r1, #1
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f7ff ff23 	bl	8007d50 <SPI_WaitFlagStateUntilTimeout>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d007      	beq.n	8007f20 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f14:	f043 0220 	orr.w	r2, r3, #32
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	e000      	b.n	8007f22 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
	...

08007f2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b088      	sub	sp, #32
 8007f30:	af02      	add	r7, sp, #8
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007f38:	4b1b      	ldr	r3, [pc, #108]	; (8007fa8 <SPI_EndRxTxTransaction+0x7c>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a1b      	ldr	r2, [pc, #108]	; (8007fac <SPI_EndRxTxTransaction+0x80>)
 8007f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f42:	0d5b      	lsrs	r3, r3, #21
 8007f44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f48:	fb02 f303 	mul.w	r3, r2, r3
 8007f4c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f56:	d112      	bne.n	8007f7e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	2180      	movs	r1, #128	; 0x80
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f7ff fef4 	bl	8007d50 <SPI_WaitFlagStateUntilTimeout>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d016      	beq.n	8007f9c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f72:	f043 0220 	orr.w	r2, r3, #32
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e00f      	b.n	8007f9e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00a      	beq.n	8007f9a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	3b01      	subs	r3, #1
 8007f88:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f94:	2b80      	cmp	r3, #128	; 0x80
 8007f96:	d0f2      	beq.n	8007f7e <SPI_EndRxTxTransaction+0x52>
 8007f98:	e000      	b.n	8007f9c <SPI_EndRxTxTransaction+0x70>
        break;
 8007f9a:	bf00      	nop
  }

  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3718      	adds	r7, #24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	200023f0 	.word	0x200023f0
 8007fac:	165e9f81 	.word	0x165e9f81

08007fb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d101      	bne.n	8007fc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e041      	b.n	8008046 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d106      	bne.n	8007fdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f7fc fd5a 	bl	8004a90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2202      	movs	r2, #2
 8007fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	3304      	adds	r3, #4
 8007fec:	4619      	mov	r1, r3
 8007fee:	4610      	mov	r0, r2
 8007ff0:	f000 fb42 	bl	8008678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
	...

08008050 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800805e:	b2db      	uxtb	r3, r3
 8008060:	2b01      	cmp	r3, #1
 8008062:	d001      	beq.n	8008068 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e046      	b.n	80080f6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2202      	movs	r2, #2
 800806c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a23      	ldr	r2, [pc, #140]	; (8008104 <HAL_TIM_Base_Start+0xb4>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d022      	beq.n	80080c0 <HAL_TIM_Base_Start+0x70>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008082:	d01d      	beq.n	80080c0 <HAL_TIM_Base_Start+0x70>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a1f      	ldr	r2, [pc, #124]	; (8008108 <HAL_TIM_Base_Start+0xb8>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d018      	beq.n	80080c0 <HAL_TIM_Base_Start+0x70>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a1e      	ldr	r2, [pc, #120]	; (800810c <HAL_TIM_Base_Start+0xbc>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d013      	beq.n	80080c0 <HAL_TIM_Base_Start+0x70>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a1c      	ldr	r2, [pc, #112]	; (8008110 <HAL_TIM_Base_Start+0xc0>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d00e      	beq.n	80080c0 <HAL_TIM_Base_Start+0x70>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a1b      	ldr	r2, [pc, #108]	; (8008114 <HAL_TIM_Base_Start+0xc4>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d009      	beq.n	80080c0 <HAL_TIM_Base_Start+0x70>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a19      	ldr	r2, [pc, #100]	; (8008118 <HAL_TIM_Base_Start+0xc8>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d004      	beq.n	80080c0 <HAL_TIM_Base_Start+0x70>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a18      	ldr	r2, [pc, #96]	; (800811c <HAL_TIM_Base_Start+0xcc>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d111      	bne.n	80080e4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	f003 0307 	and.w	r3, r3, #7
 80080ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2b06      	cmp	r3, #6
 80080d0:	d010      	beq.n	80080f4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f042 0201 	orr.w	r2, r2, #1
 80080e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080e2:	e007      	b.n	80080f4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f042 0201 	orr.w	r2, r2, #1
 80080f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	40010000 	.word	0x40010000
 8008108:	40000400 	.word	0x40000400
 800810c:	40000800 	.word	0x40000800
 8008110:	40000c00 	.word	0x40000c00
 8008114:	40010400 	.word	0x40010400
 8008118:	40014000 	.word	0x40014000
 800811c:	40001800 	.word	0x40001800

08008120 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d101      	bne.n	8008132 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e041      	b.n	80081b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b00      	cmp	r3, #0
 800813c:	d106      	bne.n	800814c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f839 	bl	80081be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2202      	movs	r2, #2
 8008150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	3304      	adds	r3, #4
 800815c:	4619      	mov	r1, r3
 800815e:	4610      	mov	r0, r2
 8008160:	f000 fa8a 	bl	8008678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3708      	adds	r7, #8
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80081be:	b480      	push	{r7}
 80081c0:	b083      	sub	sp, #12
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80081c6:	bf00      	nop
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
	...

080081d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d109      	bne.n	80081f8 <HAL_TIM_PWM_Start+0x24>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	bf14      	ite	ne
 80081f0:	2301      	movne	r3, #1
 80081f2:	2300      	moveq	r3, #0
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	e022      	b.n	800823e <HAL_TIM_PWM_Start+0x6a>
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	2b04      	cmp	r3, #4
 80081fc:	d109      	bne.n	8008212 <HAL_TIM_PWM_Start+0x3e>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b01      	cmp	r3, #1
 8008208:	bf14      	ite	ne
 800820a:	2301      	movne	r3, #1
 800820c:	2300      	moveq	r3, #0
 800820e:	b2db      	uxtb	r3, r3
 8008210:	e015      	b.n	800823e <HAL_TIM_PWM_Start+0x6a>
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b08      	cmp	r3, #8
 8008216:	d109      	bne.n	800822c <HAL_TIM_PWM_Start+0x58>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800821e:	b2db      	uxtb	r3, r3
 8008220:	2b01      	cmp	r3, #1
 8008222:	bf14      	ite	ne
 8008224:	2301      	movne	r3, #1
 8008226:	2300      	moveq	r3, #0
 8008228:	b2db      	uxtb	r3, r3
 800822a:	e008      	b.n	800823e <HAL_TIM_PWM_Start+0x6a>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008232:	b2db      	uxtb	r3, r3
 8008234:	2b01      	cmp	r3, #1
 8008236:	bf14      	ite	ne
 8008238:	2301      	movne	r3, #1
 800823a:	2300      	moveq	r3, #0
 800823c:	b2db      	uxtb	r3, r3
 800823e:	2b00      	cmp	r3, #0
 8008240:	d001      	beq.n	8008246 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e07c      	b.n	8008340 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d104      	bne.n	8008256 <HAL_TIM_PWM_Start+0x82>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2202      	movs	r2, #2
 8008250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008254:	e013      	b.n	800827e <HAL_TIM_PWM_Start+0xaa>
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	2b04      	cmp	r3, #4
 800825a:	d104      	bne.n	8008266 <HAL_TIM_PWM_Start+0x92>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2202      	movs	r2, #2
 8008260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008264:	e00b      	b.n	800827e <HAL_TIM_PWM_Start+0xaa>
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2b08      	cmp	r3, #8
 800826a:	d104      	bne.n	8008276 <HAL_TIM_PWM_Start+0xa2>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2202      	movs	r2, #2
 8008270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008274:	e003      	b.n	800827e <HAL_TIM_PWM_Start+0xaa>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2202      	movs	r2, #2
 800827a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2201      	movs	r2, #1
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	4618      	mov	r0, r3
 8008288:	f000 fce0 	bl	8008c4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a2d      	ldr	r2, [pc, #180]	; (8008348 <HAL_TIM_PWM_Start+0x174>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d004      	beq.n	80082a0 <HAL_TIM_PWM_Start+0xcc>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a2c      	ldr	r2, [pc, #176]	; (800834c <HAL_TIM_PWM_Start+0x178>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d101      	bne.n	80082a4 <HAL_TIM_PWM_Start+0xd0>
 80082a0:	2301      	movs	r3, #1
 80082a2:	e000      	b.n	80082a6 <HAL_TIM_PWM_Start+0xd2>
 80082a4:	2300      	movs	r3, #0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d007      	beq.n	80082ba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a22      	ldr	r2, [pc, #136]	; (8008348 <HAL_TIM_PWM_Start+0x174>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d022      	beq.n	800830a <HAL_TIM_PWM_Start+0x136>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082cc:	d01d      	beq.n	800830a <HAL_TIM_PWM_Start+0x136>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a1f      	ldr	r2, [pc, #124]	; (8008350 <HAL_TIM_PWM_Start+0x17c>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d018      	beq.n	800830a <HAL_TIM_PWM_Start+0x136>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a1d      	ldr	r2, [pc, #116]	; (8008354 <HAL_TIM_PWM_Start+0x180>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d013      	beq.n	800830a <HAL_TIM_PWM_Start+0x136>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a1c      	ldr	r2, [pc, #112]	; (8008358 <HAL_TIM_PWM_Start+0x184>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d00e      	beq.n	800830a <HAL_TIM_PWM_Start+0x136>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a16      	ldr	r2, [pc, #88]	; (800834c <HAL_TIM_PWM_Start+0x178>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d009      	beq.n	800830a <HAL_TIM_PWM_Start+0x136>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a18      	ldr	r2, [pc, #96]	; (800835c <HAL_TIM_PWM_Start+0x188>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d004      	beq.n	800830a <HAL_TIM_PWM_Start+0x136>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a16      	ldr	r2, [pc, #88]	; (8008360 <HAL_TIM_PWM_Start+0x18c>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d111      	bne.n	800832e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	f003 0307 	and.w	r3, r3, #7
 8008314:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2b06      	cmp	r3, #6
 800831a:	d010      	beq.n	800833e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f042 0201 	orr.w	r2, r2, #1
 800832a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800832c:	e007      	b.n	800833e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f042 0201 	orr.w	r2, r2, #1
 800833c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	40010000 	.word	0x40010000
 800834c:	40010400 	.word	0x40010400
 8008350:	40000400 	.word	0x40000400
 8008354:	40000800 	.word	0x40000800
 8008358:	40000c00 	.word	0x40000c00
 800835c:	40014000 	.word	0x40014000
 8008360:	40001800 	.word	0x40001800

08008364 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008370:	2300      	movs	r3, #0
 8008372:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800837a:	2b01      	cmp	r3, #1
 800837c:	d101      	bne.n	8008382 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800837e:	2302      	movs	r3, #2
 8008380:	e0ae      	b.n	80084e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2201      	movs	r2, #1
 8008386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b0c      	cmp	r3, #12
 800838e:	f200 809f 	bhi.w	80084d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008392:	a201      	add	r2, pc, #4	; (adr r2, 8008398 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008398:	080083cd 	.word	0x080083cd
 800839c:	080084d1 	.word	0x080084d1
 80083a0:	080084d1 	.word	0x080084d1
 80083a4:	080084d1 	.word	0x080084d1
 80083a8:	0800840d 	.word	0x0800840d
 80083ac:	080084d1 	.word	0x080084d1
 80083b0:	080084d1 	.word	0x080084d1
 80083b4:	080084d1 	.word	0x080084d1
 80083b8:	0800844f 	.word	0x0800844f
 80083bc:	080084d1 	.word	0x080084d1
 80083c0:	080084d1 	.word	0x080084d1
 80083c4:	080084d1 	.word	0x080084d1
 80083c8:	0800848f 	.word	0x0800848f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68b9      	ldr	r1, [r7, #8]
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 f9f0 	bl	80087b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	699a      	ldr	r2, [r3, #24]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f042 0208 	orr.w	r2, r2, #8
 80083e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	699a      	ldr	r2, [r3, #24]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f022 0204 	bic.w	r2, r2, #4
 80083f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	6999      	ldr	r1, [r3, #24]
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	691a      	ldr	r2, [r3, #16]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	430a      	orrs	r2, r1
 8008408:	619a      	str	r2, [r3, #24]
      break;
 800840a:	e064      	b.n	80084d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	68b9      	ldr	r1, [r7, #8]
 8008412:	4618      	mov	r0, r3
 8008414:	f000 fa40 	bl	8008898 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	699a      	ldr	r2, [r3, #24]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008426:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	699a      	ldr	r2, [r3, #24]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008436:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	6999      	ldr	r1, [r3, #24]
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	021a      	lsls	r2, r3, #8
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	430a      	orrs	r2, r1
 800844a:	619a      	str	r2, [r3, #24]
      break;
 800844c:	e043      	b.n	80084d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68b9      	ldr	r1, [r7, #8]
 8008454:	4618      	mov	r0, r3
 8008456:	f000 fa95 	bl	8008984 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	69da      	ldr	r2, [r3, #28]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f042 0208 	orr.w	r2, r2, #8
 8008468:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	69da      	ldr	r2, [r3, #28]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f022 0204 	bic.w	r2, r2, #4
 8008478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	69d9      	ldr	r1, [r3, #28]
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	691a      	ldr	r2, [r3, #16]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	430a      	orrs	r2, r1
 800848a:	61da      	str	r2, [r3, #28]
      break;
 800848c:	e023      	b.n	80084d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68b9      	ldr	r1, [r7, #8]
 8008494:	4618      	mov	r0, r3
 8008496:	f000 fae9 	bl	8008a6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	69da      	ldr	r2, [r3, #28]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	69da      	ldr	r2, [r3, #28]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	69d9      	ldr	r1, [r3, #28]
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	021a      	lsls	r2, r3, #8
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	430a      	orrs	r2, r1
 80084cc:	61da      	str	r2, [r3, #28]
      break;
 80084ce:	e002      	b.n	80084d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	75fb      	strb	r3, [r7, #23]
      break;
 80084d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084de:	7dfb      	ldrb	r3, [r7, #23]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3718      	adds	r7, #24
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d101      	bne.n	8008504 <HAL_TIM_ConfigClockSource+0x1c>
 8008500:	2302      	movs	r3, #2
 8008502:	e0b4      	b.n	800866e <HAL_TIM_ConfigClockSource+0x186>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2202      	movs	r2, #2
 8008510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008522:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800852a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800853c:	d03e      	beq.n	80085bc <HAL_TIM_ConfigClockSource+0xd4>
 800853e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008542:	f200 8087 	bhi.w	8008654 <HAL_TIM_ConfigClockSource+0x16c>
 8008546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800854a:	f000 8086 	beq.w	800865a <HAL_TIM_ConfigClockSource+0x172>
 800854e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008552:	d87f      	bhi.n	8008654 <HAL_TIM_ConfigClockSource+0x16c>
 8008554:	2b70      	cmp	r3, #112	; 0x70
 8008556:	d01a      	beq.n	800858e <HAL_TIM_ConfigClockSource+0xa6>
 8008558:	2b70      	cmp	r3, #112	; 0x70
 800855a:	d87b      	bhi.n	8008654 <HAL_TIM_ConfigClockSource+0x16c>
 800855c:	2b60      	cmp	r3, #96	; 0x60
 800855e:	d050      	beq.n	8008602 <HAL_TIM_ConfigClockSource+0x11a>
 8008560:	2b60      	cmp	r3, #96	; 0x60
 8008562:	d877      	bhi.n	8008654 <HAL_TIM_ConfigClockSource+0x16c>
 8008564:	2b50      	cmp	r3, #80	; 0x50
 8008566:	d03c      	beq.n	80085e2 <HAL_TIM_ConfigClockSource+0xfa>
 8008568:	2b50      	cmp	r3, #80	; 0x50
 800856a:	d873      	bhi.n	8008654 <HAL_TIM_ConfigClockSource+0x16c>
 800856c:	2b40      	cmp	r3, #64	; 0x40
 800856e:	d058      	beq.n	8008622 <HAL_TIM_ConfigClockSource+0x13a>
 8008570:	2b40      	cmp	r3, #64	; 0x40
 8008572:	d86f      	bhi.n	8008654 <HAL_TIM_ConfigClockSource+0x16c>
 8008574:	2b30      	cmp	r3, #48	; 0x30
 8008576:	d064      	beq.n	8008642 <HAL_TIM_ConfigClockSource+0x15a>
 8008578:	2b30      	cmp	r3, #48	; 0x30
 800857a:	d86b      	bhi.n	8008654 <HAL_TIM_ConfigClockSource+0x16c>
 800857c:	2b20      	cmp	r3, #32
 800857e:	d060      	beq.n	8008642 <HAL_TIM_ConfigClockSource+0x15a>
 8008580:	2b20      	cmp	r3, #32
 8008582:	d867      	bhi.n	8008654 <HAL_TIM_ConfigClockSource+0x16c>
 8008584:	2b00      	cmp	r3, #0
 8008586:	d05c      	beq.n	8008642 <HAL_TIM_ConfigClockSource+0x15a>
 8008588:	2b10      	cmp	r3, #16
 800858a:	d05a      	beq.n	8008642 <HAL_TIM_ConfigClockSource+0x15a>
 800858c:	e062      	b.n	8008654 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6818      	ldr	r0, [r3, #0]
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	6899      	ldr	r1, [r3, #8]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	685a      	ldr	r2, [r3, #4]
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	f000 fb35 	bl	8008c0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80085b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	609a      	str	r2, [r3, #8]
      break;
 80085ba:	e04f      	b.n	800865c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6818      	ldr	r0, [r3, #0]
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	6899      	ldr	r1, [r3, #8]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	685a      	ldr	r2, [r3, #4]
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	f000 fb1e 	bl	8008c0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	689a      	ldr	r2, [r3, #8]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085de:	609a      	str	r2, [r3, #8]
      break;
 80085e0:	e03c      	b.n	800865c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6818      	ldr	r0, [r3, #0]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	6859      	ldr	r1, [r3, #4]
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	461a      	mov	r2, r3
 80085f0:	f000 fa92 	bl	8008b18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2150      	movs	r1, #80	; 0x50
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 faeb 	bl	8008bd6 <TIM_ITRx_SetConfig>
      break;
 8008600:	e02c      	b.n	800865c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6818      	ldr	r0, [r3, #0]
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	6859      	ldr	r1, [r3, #4]
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	461a      	mov	r2, r3
 8008610:	f000 fab1 	bl	8008b76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2160      	movs	r1, #96	; 0x60
 800861a:	4618      	mov	r0, r3
 800861c:	f000 fadb 	bl	8008bd6 <TIM_ITRx_SetConfig>
      break;
 8008620:	e01c      	b.n	800865c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6818      	ldr	r0, [r3, #0]
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	6859      	ldr	r1, [r3, #4]
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	461a      	mov	r2, r3
 8008630:	f000 fa72 	bl	8008b18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2140      	movs	r1, #64	; 0x40
 800863a:	4618      	mov	r0, r3
 800863c:	f000 facb 	bl	8008bd6 <TIM_ITRx_SetConfig>
      break;
 8008640:	e00c      	b.n	800865c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4619      	mov	r1, r3
 800864c:	4610      	mov	r0, r2
 800864e:	f000 fac2 	bl	8008bd6 <TIM_ITRx_SetConfig>
      break;
 8008652:	e003      	b.n	800865c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	73fb      	strb	r3, [r7, #15]
      break;
 8008658:	e000      	b.n	800865c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800865a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800866c:	7bfb      	ldrb	r3, [r7, #15]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
	...

08008678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a40      	ldr	r2, [pc, #256]	; (800878c <TIM_Base_SetConfig+0x114>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d013      	beq.n	80086b8 <TIM_Base_SetConfig+0x40>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008696:	d00f      	beq.n	80086b8 <TIM_Base_SetConfig+0x40>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a3d      	ldr	r2, [pc, #244]	; (8008790 <TIM_Base_SetConfig+0x118>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d00b      	beq.n	80086b8 <TIM_Base_SetConfig+0x40>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a3c      	ldr	r2, [pc, #240]	; (8008794 <TIM_Base_SetConfig+0x11c>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d007      	beq.n	80086b8 <TIM_Base_SetConfig+0x40>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a3b      	ldr	r2, [pc, #236]	; (8008798 <TIM_Base_SetConfig+0x120>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d003      	beq.n	80086b8 <TIM_Base_SetConfig+0x40>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a3a      	ldr	r2, [pc, #232]	; (800879c <TIM_Base_SetConfig+0x124>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d108      	bne.n	80086ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a2f      	ldr	r2, [pc, #188]	; (800878c <TIM_Base_SetConfig+0x114>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d02b      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086d8:	d027      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a2c      	ldr	r2, [pc, #176]	; (8008790 <TIM_Base_SetConfig+0x118>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d023      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a2b      	ldr	r2, [pc, #172]	; (8008794 <TIM_Base_SetConfig+0x11c>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d01f      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a2a      	ldr	r2, [pc, #168]	; (8008798 <TIM_Base_SetConfig+0x120>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d01b      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a29      	ldr	r2, [pc, #164]	; (800879c <TIM_Base_SetConfig+0x124>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d017      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a28      	ldr	r2, [pc, #160]	; (80087a0 <TIM_Base_SetConfig+0x128>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d013      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a27      	ldr	r2, [pc, #156]	; (80087a4 <TIM_Base_SetConfig+0x12c>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d00f      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a26      	ldr	r2, [pc, #152]	; (80087a8 <TIM_Base_SetConfig+0x130>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d00b      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a25      	ldr	r2, [pc, #148]	; (80087ac <TIM_Base_SetConfig+0x134>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d007      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a24      	ldr	r2, [pc, #144]	; (80087b0 <TIM_Base_SetConfig+0x138>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d003      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a23      	ldr	r2, [pc, #140]	; (80087b4 <TIM_Base_SetConfig+0x13c>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d108      	bne.n	800873c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	4313      	orrs	r3, r2
 800873a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	695b      	ldr	r3, [r3, #20]
 8008746:	4313      	orrs	r3, r2
 8008748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	689a      	ldr	r2, [r3, #8]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a0a      	ldr	r2, [pc, #40]	; (800878c <TIM_Base_SetConfig+0x114>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d003      	beq.n	8008770 <TIM_Base_SetConfig+0xf8>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a0c      	ldr	r2, [pc, #48]	; (800879c <TIM_Base_SetConfig+0x124>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d103      	bne.n	8008778 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	691a      	ldr	r2, [r3, #16]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	615a      	str	r2, [r3, #20]
}
 800877e:	bf00      	nop
 8008780:	3714      	adds	r7, #20
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	40010000 	.word	0x40010000
 8008790:	40000400 	.word	0x40000400
 8008794:	40000800 	.word	0x40000800
 8008798:	40000c00 	.word	0x40000c00
 800879c:	40010400 	.word	0x40010400
 80087a0:	40014000 	.word	0x40014000
 80087a4:	40014400 	.word	0x40014400
 80087a8:	40014800 	.word	0x40014800
 80087ac:	40001800 	.word	0x40001800
 80087b0:	40001c00 	.word	0x40001c00
 80087b4:	40002000 	.word	0x40002000

080087b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b087      	sub	sp, #28
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	f023 0201 	bic.w	r2, r3, #1
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a1b      	ldr	r3, [r3, #32]
 80087d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f023 0303 	bic.w	r3, r3, #3
 80087ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	f023 0302 	bic.w	r3, r3, #2
 8008800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	4313      	orrs	r3, r2
 800880a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a20      	ldr	r2, [pc, #128]	; (8008890 <TIM_OC1_SetConfig+0xd8>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d003      	beq.n	800881c <TIM_OC1_SetConfig+0x64>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a1f      	ldr	r2, [pc, #124]	; (8008894 <TIM_OC1_SetConfig+0xdc>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d10c      	bne.n	8008836 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	f023 0308 	bic.w	r3, r3, #8
 8008822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	4313      	orrs	r3, r2
 800882c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	f023 0304 	bic.w	r3, r3, #4
 8008834:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a15      	ldr	r2, [pc, #84]	; (8008890 <TIM_OC1_SetConfig+0xd8>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d003      	beq.n	8008846 <TIM_OC1_SetConfig+0x8e>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a14      	ldr	r2, [pc, #80]	; (8008894 <TIM_OC1_SetConfig+0xdc>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d111      	bne.n	800886a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800884c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	693a      	ldr	r2, [r7, #16]
 800885c:	4313      	orrs	r3, r2
 800885e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	693a      	ldr	r2, [r7, #16]
 8008866:	4313      	orrs	r3, r2
 8008868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	685a      	ldr	r2, [r3, #4]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	621a      	str	r2, [r3, #32]
}
 8008884:	bf00      	nop
 8008886:	371c      	adds	r7, #28
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	40010000 	.word	0x40010000
 8008894:	40010400 	.word	0x40010400

08008898 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008898:	b480      	push	{r7}
 800889a:	b087      	sub	sp, #28
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a1b      	ldr	r3, [r3, #32]
 80088a6:	f023 0210 	bic.w	r2, r3, #16
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	021b      	lsls	r3, r3, #8
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	4313      	orrs	r3, r2
 80088da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	f023 0320 	bic.w	r3, r3, #32
 80088e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	011b      	lsls	r3, r3, #4
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a22      	ldr	r2, [pc, #136]	; (800897c <TIM_OC2_SetConfig+0xe4>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d003      	beq.n	8008900 <TIM_OC2_SetConfig+0x68>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a21      	ldr	r2, [pc, #132]	; (8008980 <TIM_OC2_SetConfig+0xe8>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d10d      	bne.n	800891c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	011b      	lsls	r3, r3, #4
 800890e:	697a      	ldr	r2, [r7, #20]
 8008910:	4313      	orrs	r3, r2
 8008912:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800891a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a17      	ldr	r2, [pc, #92]	; (800897c <TIM_OC2_SetConfig+0xe4>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d003      	beq.n	800892c <TIM_OC2_SetConfig+0x94>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a16      	ldr	r2, [pc, #88]	; (8008980 <TIM_OC2_SetConfig+0xe8>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d113      	bne.n	8008954 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008932:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800893a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	695b      	ldr	r3, [r3, #20]
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	4313      	orrs	r3, r2
 8008946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	693a      	ldr	r2, [r7, #16]
 8008950:	4313      	orrs	r3, r2
 8008952:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	693a      	ldr	r2, [r7, #16]
 8008958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	685a      	ldr	r2, [r3, #4]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	621a      	str	r2, [r3, #32]
}
 800896e:	bf00      	nop
 8008970:	371c      	adds	r7, #28
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	40010000 	.word	0x40010000
 8008980:	40010400 	.word	0x40010400

08008984 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008984:	b480      	push	{r7}
 8008986:	b087      	sub	sp, #28
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a1b      	ldr	r3, [r3, #32]
 8008992:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a1b      	ldr	r3, [r3, #32]
 800899e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	69db      	ldr	r3, [r3, #28]
 80089aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f023 0303 	bic.w	r3, r3, #3
 80089ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	021b      	lsls	r3, r3, #8
 80089d4:	697a      	ldr	r2, [r7, #20]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a21      	ldr	r2, [pc, #132]	; (8008a64 <TIM_OC3_SetConfig+0xe0>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d003      	beq.n	80089ea <TIM_OC3_SetConfig+0x66>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a20      	ldr	r2, [pc, #128]	; (8008a68 <TIM_OC3_SetConfig+0xe4>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d10d      	bne.n	8008a06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	021b      	lsls	r3, r3, #8
 80089f8:	697a      	ldr	r2, [r7, #20]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a16      	ldr	r2, [pc, #88]	; (8008a64 <TIM_OC3_SetConfig+0xe0>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d003      	beq.n	8008a16 <TIM_OC3_SetConfig+0x92>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a15      	ldr	r2, [pc, #84]	; (8008a68 <TIM_OC3_SetConfig+0xe4>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d113      	bne.n	8008a3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	011b      	lsls	r3, r3, #4
 8008a2c:	693a      	ldr	r2, [r7, #16]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	011b      	lsls	r3, r3, #4
 8008a38:	693a      	ldr	r2, [r7, #16]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	685a      	ldr	r2, [r3, #4]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	697a      	ldr	r2, [r7, #20]
 8008a56:	621a      	str	r2, [r3, #32]
}
 8008a58:	bf00      	nop
 8008a5a:	371c      	adds	r7, #28
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	40010000 	.word	0x40010000
 8008a68:	40010400 	.word	0x40010400

08008a6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b087      	sub	sp, #28
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a1b      	ldr	r3, [r3, #32]
 8008a7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a1b      	ldr	r3, [r3, #32]
 8008a86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	69db      	ldr	r3, [r3, #28]
 8008a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	021b      	lsls	r3, r3, #8
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ab6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	031b      	lsls	r3, r3, #12
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a12      	ldr	r2, [pc, #72]	; (8008b10 <TIM_OC4_SetConfig+0xa4>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d003      	beq.n	8008ad4 <TIM_OC4_SetConfig+0x68>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a11      	ldr	r2, [pc, #68]	; (8008b14 <TIM_OC4_SetConfig+0xa8>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d109      	bne.n	8008ae8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ada:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	695b      	ldr	r3, [r3, #20]
 8008ae0:	019b      	lsls	r3, r3, #6
 8008ae2:	697a      	ldr	r2, [r7, #20]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	697a      	ldr	r2, [r7, #20]
 8008aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	685a      	ldr	r2, [r3, #4]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	621a      	str	r2, [r3, #32]
}
 8008b02:	bf00      	nop
 8008b04:	371c      	adds	r7, #28
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop
 8008b10:	40010000 	.word	0x40010000
 8008b14:	40010400 	.word	0x40010400

08008b18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b087      	sub	sp, #28
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6a1b      	ldr	r3, [r3, #32]
 8008b28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	f023 0201 	bic.w	r2, r3, #1
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	699b      	ldr	r3, [r3, #24]
 8008b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	011b      	lsls	r3, r3, #4
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	f023 030a 	bic.w	r3, r3, #10
 8008b54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b56:	697a      	ldr	r2, [r7, #20]
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	621a      	str	r2, [r3, #32]
}
 8008b6a:	bf00      	nop
 8008b6c:	371c      	adds	r7, #28
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr

08008b76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b76:	b480      	push	{r7}
 8008b78:	b087      	sub	sp, #28
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	60f8      	str	r0, [r7, #12]
 8008b7e:	60b9      	str	r1, [r7, #8]
 8008b80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	f023 0210 	bic.w	r2, r3, #16
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6a1b      	ldr	r3, [r3, #32]
 8008b98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ba0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	031b      	lsls	r3, r3, #12
 8008ba6:	697a      	ldr	r2, [r7, #20]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008bb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	011b      	lsls	r3, r3, #4
 8008bb8:	693a      	ldr	r2, [r7, #16]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	697a      	ldr	r2, [r7, #20]
 8008bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	693a      	ldr	r2, [r7, #16]
 8008bc8:	621a      	str	r2, [r3, #32]
}
 8008bca:	bf00      	nop
 8008bcc:	371c      	adds	r7, #28
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr

08008bd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b085      	sub	sp, #20
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
 8008bde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008bee:	683a      	ldr	r2, [r7, #0]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	f043 0307 	orr.w	r3, r3, #7
 8008bf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	609a      	str	r2, [r3, #8]
}
 8008c00:	bf00      	nop
 8008c02:	3714      	adds	r7, #20
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b087      	sub	sp, #28
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
 8008c18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	021a      	lsls	r2, r3, #8
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	431a      	orrs	r2, r3
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	697a      	ldr	r2, [r7, #20]
 8008c36:	4313      	orrs	r3, r2
 8008c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	697a      	ldr	r2, [r7, #20]
 8008c3e:	609a      	str	r2, [r3, #8]
}
 8008c40:	bf00      	nop
 8008c42:	371c      	adds	r7, #28
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b087      	sub	sp, #28
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	f003 031f 	and.w	r3, r3, #31
 8008c5e:	2201      	movs	r2, #1
 8008c60:	fa02 f303 	lsl.w	r3, r2, r3
 8008c64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6a1a      	ldr	r2, [r3, #32]
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	43db      	mvns	r3, r3
 8008c6e:	401a      	ands	r2, r3
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6a1a      	ldr	r2, [r3, #32]
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	f003 031f 	and.w	r3, r3, #31
 8008c7e:	6879      	ldr	r1, [r7, #4]
 8008c80:	fa01 f303 	lsl.w	r3, r1, r3
 8008c84:	431a      	orrs	r2, r3
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	621a      	str	r2, [r3, #32]
}
 8008c8a:	bf00      	nop
 8008c8c:	371c      	adds	r7, #28
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr
	...

08008c98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d101      	bne.n	8008cb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008cac:	2302      	movs	r3, #2
 8008cae:	e05a      	b.n	8008d66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2202      	movs	r2, #2
 8008cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a21      	ldr	r2, [pc, #132]	; (8008d74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d022      	beq.n	8008d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cfc:	d01d      	beq.n	8008d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a1d      	ldr	r2, [pc, #116]	; (8008d78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d018      	beq.n	8008d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a1b      	ldr	r2, [pc, #108]	; (8008d7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d013      	beq.n	8008d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a1a      	ldr	r2, [pc, #104]	; (8008d80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d00e      	beq.n	8008d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a18      	ldr	r2, [pc, #96]	; (8008d84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d009      	beq.n	8008d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a17      	ldr	r2, [pc, #92]	; (8008d88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d004      	beq.n	8008d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a15      	ldr	r2, [pc, #84]	; (8008d8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d10c      	bne.n	8008d54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	68ba      	ldr	r2, [r7, #8]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68ba      	ldr	r2, [r7, #8]
 8008d52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3714      	adds	r7, #20
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	40010000 	.word	0x40010000
 8008d78:	40000400 	.word	0x40000400
 8008d7c:	40000800 	.word	0x40000800
 8008d80:	40000c00 	.word	0x40000c00
 8008d84:	40010400 	.word	0x40010400
 8008d88:	40014000 	.word	0x40014000
 8008d8c:	40001800 	.word	0x40001800

08008d90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b085      	sub	sp, #20
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d101      	bne.n	8008dac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008da8:	2302      	movs	r3, #2
 8008daa:	e03d      	b.n	8008e28 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2201      	movs	r2, #1
 8008db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	695b      	ldr	r3, [r3, #20]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	69db      	ldr	r3, [r3, #28]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3714      	adds	r7, #20
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d101      	bne.n	8008e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e03f      	b.n	8008ec6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d106      	bne.n	8008e60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f7fb fec2 	bl	8004be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2224      	movs	r2, #36	; 0x24
 8008e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68da      	ldr	r2, [r3, #12]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 f929 	bl	80090d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	691a      	ldr	r2, [r3, #16]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	695a      	ldr	r2, [r3, #20]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	68da      	ldr	r2, [r3, #12]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008eac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2220      	movs	r2, #32
 8008eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2220      	movs	r2, #32
 8008ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b08a      	sub	sp, #40	; 0x28
 8008ed2:	af02      	add	r7, sp, #8
 8008ed4:	60f8      	str	r0, [r7, #12]
 8008ed6:	60b9      	str	r1, [r7, #8]
 8008ed8:	603b      	str	r3, [r7, #0]
 8008eda:	4613      	mov	r3, r2
 8008edc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	2b20      	cmp	r3, #32
 8008eec:	d17c      	bne.n	8008fe8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d002      	beq.n	8008efa <HAL_UART_Transmit+0x2c>
 8008ef4:	88fb      	ldrh	r3, [r7, #6]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d101      	bne.n	8008efe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	e075      	b.n	8008fea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d101      	bne.n	8008f0c <HAL_UART_Transmit+0x3e>
 8008f08:	2302      	movs	r3, #2
 8008f0a:	e06e      	b.n	8008fea <HAL_UART_Transmit+0x11c>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2200      	movs	r2, #0
 8008f18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2221      	movs	r2, #33	; 0x21
 8008f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f22:	f7fc f861 	bl	8004fe8 <HAL_GetTick>
 8008f26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	88fa      	ldrh	r2, [r7, #6]
 8008f2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	88fa      	ldrh	r2, [r7, #6]
 8008f32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f3c:	d108      	bne.n	8008f50 <HAL_UART_Transmit+0x82>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d104      	bne.n	8008f50 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008f46:	2300      	movs	r3, #0
 8008f48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	61bb      	str	r3, [r7, #24]
 8008f4e:	e003      	b.n	8008f58 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f54:	2300      	movs	r3, #0
 8008f56:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008f60:	e02a      	b.n	8008fb8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	9300      	str	r3, [sp, #0]
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	2180      	movs	r1, #128	; 0x80
 8008f6c:	68f8      	ldr	r0, [r7, #12]
 8008f6e:	f000 f840 	bl	8008ff2 <UART_WaitOnFlagUntilTimeout>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d001      	beq.n	8008f7c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e036      	b.n	8008fea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d10b      	bne.n	8008f9a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	881b      	ldrh	r3, [r3, #0]
 8008f86:	461a      	mov	r2, r3
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	3302      	adds	r3, #2
 8008f96:	61bb      	str	r3, [r7, #24]
 8008f98:	e007      	b.n	8008faa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	781a      	ldrb	r2, [r3, #0]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	b29a      	uxth	r2, r3
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1cf      	bne.n	8008f62 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	9300      	str	r3, [sp, #0]
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	2140      	movs	r1, #64	; 0x40
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f000 f810 	bl	8008ff2 <UART_WaitOnFlagUntilTimeout>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d001      	beq.n	8008fdc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e006      	b.n	8008fea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2220      	movs	r2, #32
 8008fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	e000      	b.n	8008fea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008fe8:	2302      	movs	r3, #2
  }
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3720      	adds	r7, #32
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b090      	sub	sp, #64	; 0x40
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	60f8      	str	r0, [r7, #12]
 8008ffa:	60b9      	str	r1, [r7, #8]
 8008ffc:	603b      	str	r3, [r7, #0]
 8008ffe:	4613      	mov	r3, r2
 8009000:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009002:	e050      	b.n	80090a6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009006:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800900a:	d04c      	beq.n	80090a6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800900c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800900e:	2b00      	cmp	r3, #0
 8009010:	d007      	beq.n	8009022 <UART_WaitOnFlagUntilTimeout+0x30>
 8009012:	f7fb ffe9 	bl	8004fe8 <HAL_GetTick>
 8009016:	4602      	mov	r2, r0
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	1ad3      	subs	r3, r2, r3
 800901c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800901e:	429a      	cmp	r2, r3
 8009020:	d241      	bcs.n	80090a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	330c      	adds	r3, #12
 8009028:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902c:	e853 3f00 	ldrex	r3, [r3]
 8009030:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009034:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009038:	63fb      	str	r3, [r7, #60]	; 0x3c
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	330c      	adds	r3, #12
 8009040:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009042:	637a      	str	r2, [r7, #52]	; 0x34
 8009044:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009046:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800904a:	e841 2300 	strex	r3, r2, [r1]
 800904e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009052:	2b00      	cmp	r3, #0
 8009054:	d1e5      	bne.n	8009022 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	3314      	adds	r3, #20
 800905c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	e853 3f00 	ldrex	r3, [r3]
 8009064:	613b      	str	r3, [r7, #16]
   return(result);
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	f023 0301 	bic.w	r3, r3, #1
 800906c:	63bb      	str	r3, [r7, #56]	; 0x38
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3314      	adds	r3, #20
 8009074:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009076:	623a      	str	r2, [r7, #32]
 8009078:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907a:	69f9      	ldr	r1, [r7, #28]
 800907c:	6a3a      	ldr	r2, [r7, #32]
 800907e:	e841 2300 	strex	r3, r2, [r1]
 8009082:	61bb      	str	r3, [r7, #24]
   return(result);
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d1e5      	bne.n	8009056 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2220      	movs	r2, #32
 800908e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2220      	movs	r2, #32
 8009096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2200      	movs	r2, #0
 800909e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80090a2:	2303      	movs	r3, #3
 80090a4:	e00f      	b.n	80090c6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	4013      	ands	r3, r2
 80090b0:	68ba      	ldr	r2, [r7, #8]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	bf0c      	ite	eq
 80090b6:	2301      	moveq	r3, #1
 80090b8:	2300      	movne	r3, #0
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	461a      	mov	r2, r3
 80090be:	79fb      	ldrb	r3, [r7, #7]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d09f      	beq.n	8009004 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3740      	adds	r7, #64	; 0x40
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
	...

080090d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090d4:	b0c0      	sub	sp, #256	; 0x100
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80090e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ec:	68d9      	ldr	r1, [r3, #12]
 80090ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	ea40 0301 	orr.w	r3, r0, r1
 80090f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80090fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090fe:	689a      	ldr	r2, [r3, #8]
 8009100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	431a      	orrs	r2, r3
 8009108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800910c:	695b      	ldr	r3, [r3, #20]
 800910e:	431a      	orrs	r2, r3
 8009110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009114:	69db      	ldr	r3, [r3, #28]
 8009116:	4313      	orrs	r3, r2
 8009118:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800911c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009128:	f021 010c 	bic.w	r1, r1, #12
 800912c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009136:	430b      	orrs	r3, r1
 8009138:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800913a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	695b      	ldr	r3, [r3, #20]
 8009142:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800914a:	6999      	ldr	r1, [r3, #24]
 800914c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	ea40 0301 	orr.w	r3, r0, r1
 8009156:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	4b8f      	ldr	r3, [pc, #572]	; (800939c <UART_SetConfig+0x2cc>)
 8009160:	429a      	cmp	r2, r3
 8009162:	d005      	beq.n	8009170 <UART_SetConfig+0xa0>
 8009164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	4b8d      	ldr	r3, [pc, #564]	; (80093a0 <UART_SetConfig+0x2d0>)
 800916c:	429a      	cmp	r2, r3
 800916e:	d104      	bne.n	800917a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009170:	f7fd fc94 	bl	8006a9c <HAL_RCC_GetPCLK2Freq>
 8009174:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009178:	e003      	b.n	8009182 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800917a:	f7fd fc7b 	bl	8006a74 <HAL_RCC_GetPCLK1Freq>
 800917e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009186:	69db      	ldr	r3, [r3, #28]
 8009188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800918c:	f040 810c 	bne.w	80093a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009194:	2200      	movs	r2, #0
 8009196:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800919a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800919e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80091a2:	4622      	mov	r2, r4
 80091a4:	462b      	mov	r3, r5
 80091a6:	1891      	adds	r1, r2, r2
 80091a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80091aa:	415b      	adcs	r3, r3
 80091ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80091b2:	4621      	mov	r1, r4
 80091b4:	eb12 0801 	adds.w	r8, r2, r1
 80091b8:	4629      	mov	r1, r5
 80091ba:	eb43 0901 	adc.w	r9, r3, r1
 80091be:	f04f 0200 	mov.w	r2, #0
 80091c2:	f04f 0300 	mov.w	r3, #0
 80091c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80091ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80091ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80091d2:	4690      	mov	r8, r2
 80091d4:	4699      	mov	r9, r3
 80091d6:	4623      	mov	r3, r4
 80091d8:	eb18 0303 	adds.w	r3, r8, r3
 80091dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80091e0:	462b      	mov	r3, r5
 80091e2:	eb49 0303 	adc.w	r3, r9, r3
 80091e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80091ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80091f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80091fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80091fe:	460b      	mov	r3, r1
 8009200:	18db      	adds	r3, r3, r3
 8009202:	653b      	str	r3, [r7, #80]	; 0x50
 8009204:	4613      	mov	r3, r2
 8009206:	eb42 0303 	adc.w	r3, r2, r3
 800920a:	657b      	str	r3, [r7, #84]	; 0x54
 800920c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009210:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009214:	f7f7 fd58 	bl	8000cc8 <__aeabi_uldivmod>
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	4b61      	ldr	r3, [pc, #388]	; (80093a4 <UART_SetConfig+0x2d4>)
 800921e:	fba3 2302 	umull	r2, r3, r3, r2
 8009222:	095b      	lsrs	r3, r3, #5
 8009224:	011c      	lsls	r4, r3, #4
 8009226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800922a:	2200      	movs	r2, #0
 800922c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009230:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009234:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009238:	4642      	mov	r2, r8
 800923a:	464b      	mov	r3, r9
 800923c:	1891      	adds	r1, r2, r2
 800923e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009240:	415b      	adcs	r3, r3
 8009242:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009244:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009248:	4641      	mov	r1, r8
 800924a:	eb12 0a01 	adds.w	sl, r2, r1
 800924e:	4649      	mov	r1, r9
 8009250:	eb43 0b01 	adc.w	fp, r3, r1
 8009254:	f04f 0200 	mov.w	r2, #0
 8009258:	f04f 0300 	mov.w	r3, #0
 800925c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009260:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009264:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009268:	4692      	mov	sl, r2
 800926a:	469b      	mov	fp, r3
 800926c:	4643      	mov	r3, r8
 800926e:	eb1a 0303 	adds.w	r3, sl, r3
 8009272:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009276:	464b      	mov	r3, r9
 8009278:	eb4b 0303 	adc.w	r3, fp, r3
 800927c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800928c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009290:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009294:	460b      	mov	r3, r1
 8009296:	18db      	adds	r3, r3, r3
 8009298:	643b      	str	r3, [r7, #64]	; 0x40
 800929a:	4613      	mov	r3, r2
 800929c:	eb42 0303 	adc.w	r3, r2, r3
 80092a0:	647b      	str	r3, [r7, #68]	; 0x44
 80092a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80092a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80092aa:	f7f7 fd0d 	bl	8000cc8 <__aeabi_uldivmod>
 80092ae:	4602      	mov	r2, r0
 80092b0:	460b      	mov	r3, r1
 80092b2:	4611      	mov	r1, r2
 80092b4:	4b3b      	ldr	r3, [pc, #236]	; (80093a4 <UART_SetConfig+0x2d4>)
 80092b6:	fba3 2301 	umull	r2, r3, r3, r1
 80092ba:	095b      	lsrs	r3, r3, #5
 80092bc:	2264      	movs	r2, #100	; 0x64
 80092be:	fb02 f303 	mul.w	r3, r2, r3
 80092c2:	1acb      	subs	r3, r1, r3
 80092c4:	00db      	lsls	r3, r3, #3
 80092c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80092ca:	4b36      	ldr	r3, [pc, #216]	; (80093a4 <UART_SetConfig+0x2d4>)
 80092cc:	fba3 2302 	umull	r2, r3, r3, r2
 80092d0:	095b      	lsrs	r3, r3, #5
 80092d2:	005b      	lsls	r3, r3, #1
 80092d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80092d8:	441c      	add	r4, r3
 80092da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092de:	2200      	movs	r2, #0
 80092e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80092e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80092e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80092ec:	4642      	mov	r2, r8
 80092ee:	464b      	mov	r3, r9
 80092f0:	1891      	adds	r1, r2, r2
 80092f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80092f4:	415b      	adcs	r3, r3
 80092f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80092fc:	4641      	mov	r1, r8
 80092fe:	1851      	adds	r1, r2, r1
 8009300:	6339      	str	r1, [r7, #48]	; 0x30
 8009302:	4649      	mov	r1, r9
 8009304:	414b      	adcs	r3, r1
 8009306:	637b      	str	r3, [r7, #52]	; 0x34
 8009308:	f04f 0200 	mov.w	r2, #0
 800930c:	f04f 0300 	mov.w	r3, #0
 8009310:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009314:	4659      	mov	r1, fp
 8009316:	00cb      	lsls	r3, r1, #3
 8009318:	4651      	mov	r1, sl
 800931a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800931e:	4651      	mov	r1, sl
 8009320:	00ca      	lsls	r2, r1, #3
 8009322:	4610      	mov	r0, r2
 8009324:	4619      	mov	r1, r3
 8009326:	4603      	mov	r3, r0
 8009328:	4642      	mov	r2, r8
 800932a:	189b      	adds	r3, r3, r2
 800932c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009330:	464b      	mov	r3, r9
 8009332:	460a      	mov	r2, r1
 8009334:	eb42 0303 	adc.w	r3, r2, r3
 8009338:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800933c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009348:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800934c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009350:	460b      	mov	r3, r1
 8009352:	18db      	adds	r3, r3, r3
 8009354:	62bb      	str	r3, [r7, #40]	; 0x28
 8009356:	4613      	mov	r3, r2
 8009358:	eb42 0303 	adc.w	r3, r2, r3
 800935c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800935e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009362:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009366:	f7f7 fcaf 	bl	8000cc8 <__aeabi_uldivmod>
 800936a:	4602      	mov	r2, r0
 800936c:	460b      	mov	r3, r1
 800936e:	4b0d      	ldr	r3, [pc, #52]	; (80093a4 <UART_SetConfig+0x2d4>)
 8009370:	fba3 1302 	umull	r1, r3, r3, r2
 8009374:	095b      	lsrs	r3, r3, #5
 8009376:	2164      	movs	r1, #100	; 0x64
 8009378:	fb01 f303 	mul.w	r3, r1, r3
 800937c:	1ad3      	subs	r3, r2, r3
 800937e:	00db      	lsls	r3, r3, #3
 8009380:	3332      	adds	r3, #50	; 0x32
 8009382:	4a08      	ldr	r2, [pc, #32]	; (80093a4 <UART_SetConfig+0x2d4>)
 8009384:	fba2 2303 	umull	r2, r3, r2, r3
 8009388:	095b      	lsrs	r3, r3, #5
 800938a:	f003 0207 	and.w	r2, r3, #7
 800938e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4422      	add	r2, r4
 8009396:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009398:	e105      	b.n	80095a6 <UART_SetConfig+0x4d6>
 800939a:	bf00      	nop
 800939c:	40011000 	.word	0x40011000
 80093a0:	40011400 	.word	0x40011400
 80093a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093ac:	2200      	movs	r2, #0
 80093ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80093b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80093b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80093ba:	4642      	mov	r2, r8
 80093bc:	464b      	mov	r3, r9
 80093be:	1891      	adds	r1, r2, r2
 80093c0:	6239      	str	r1, [r7, #32]
 80093c2:	415b      	adcs	r3, r3
 80093c4:	627b      	str	r3, [r7, #36]	; 0x24
 80093c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80093ca:	4641      	mov	r1, r8
 80093cc:	1854      	adds	r4, r2, r1
 80093ce:	4649      	mov	r1, r9
 80093d0:	eb43 0501 	adc.w	r5, r3, r1
 80093d4:	f04f 0200 	mov.w	r2, #0
 80093d8:	f04f 0300 	mov.w	r3, #0
 80093dc:	00eb      	lsls	r3, r5, #3
 80093de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093e2:	00e2      	lsls	r2, r4, #3
 80093e4:	4614      	mov	r4, r2
 80093e6:	461d      	mov	r5, r3
 80093e8:	4643      	mov	r3, r8
 80093ea:	18e3      	adds	r3, r4, r3
 80093ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80093f0:	464b      	mov	r3, r9
 80093f2:	eb45 0303 	adc.w	r3, r5, r3
 80093f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80093fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009406:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800940a:	f04f 0200 	mov.w	r2, #0
 800940e:	f04f 0300 	mov.w	r3, #0
 8009412:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009416:	4629      	mov	r1, r5
 8009418:	008b      	lsls	r3, r1, #2
 800941a:	4621      	mov	r1, r4
 800941c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009420:	4621      	mov	r1, r4
 8009422:	008a      	lsls	r2, r1, #2
 8009424:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009428:	f7f7 fc4e 	bl	8000cc8 <__aeabi_uldivmod>
 800942c:	4602      	mov	r2, r0
 800942e:	460b      	mov	r3, r1
 8009430:	4b60      	ldr	r3, [pc, #384]	; (80095b4 <UART_SetConfig+0x4e4>)
 8009432:	fba3 2302 	umull	r2, r3, r3, r2
 8009436:	095b      	lsrs	r3, r3, #5
 8009438:	011c      	lsls	r4, r3, #4
 800943a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800943e:	2200      	movs	r2, #0
 8009440:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009444:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009448:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800944c:	4642      	mov	r2, r8
 800944e:	464b      	mov	r3, r9
 8009450:	1891      	adds	r1, r2, r2
 8009452:	61b9      	str	r1, [r7, #24]
 8009454:	415b      	adcs	r3, r3
 8009456:	61fb      	str	r3, [r7, #28]
 8009458:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800945c:	4641      	mov	r1, r8
 800945e:	1851      	adds	r1, r2, r1
 8009460:	6139      	str	r1, [r7, #16]
 8009462:	4649      	mov	r1, r9
 8009464:	414b      	adcs	r3, r1
 8009466:	617b      	str	r3, [r7, #20]
 8009468:	f04f 0200 	mov.w	r2, #0
 800946c:	f04f 0300 	mov.w	r3, #0
 8009470:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009474:	4659      	mov	r1, fp
 8009476:	00cb      	lsls	r3, r1, #3
 8009478:	4651      	mov	r1, sl
 800947a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800947e:	4651      	mov	r1, sl
 8009480:	00ca      	lsls	r2, r1, #3
 8009482:	4610      	mov	r0, r2
 8009484:	4619      	mov	r1, r3
 8009486:	4603      	mov	r3, r0
 8009488:	4642      	mov	r2, r8
 800948a:	189b      	adds	r3, r3, r2
 800948c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009490:	464b      	mov	r3, r9
 8009492:	460a      	mov	r2, r1
 8009494:	eb42 0303 	adc.w	r3, r2, r3
 8009498:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800949c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80094a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80094a8:	f04f 0200 	mov.w	r2, #0
 80094ac:	f04f 0300 	mov.w	r3, #0
 80094b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80094b4:	4649      	mov	r1, r9
 80094b6:	008b      	lsls	r3, r1, #2
 80094b8:	4641      	mov	r1, r8
 80094ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094be:	4641      	mov	r1, r8
 80094c0:	008a      	lsls	r2, r1, #2
 80094c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80094c6:	f7f7 fbff 	bl	8000cc8 <__aeabi_uldivmod>
 80094ca:	4602      	mov	r2, r0
 80094cc:	460b      	mov	r3, r1
 80094ce:	4b39      	ldr	r3, [pc, #228]	; (80095b4 <UART_SetConfig+0x4e4>)
 80094d0:	fba3 1302 	umull	r1, r3, r3, r2
 80094d4:	095b      	lsrs	r3, r3, #5
 80094d6:	2164      	movs	r1, #100	; 0x64
 80094d8:	fb01 f303 	mul.w	r3, r1, r3
 80094dc:	1ad3      	subs	r3, r2, r3
 80094de:	011b      	lsls	r3, r3, #4
 80094e0:	3332      	adds	r3, #50	; 0x32
 80094e2:	4a34      	ldr	r2, [pc, #208]	; (80095b4 <UART_SetConfig+0x4e4>)
 80094e4:	fba2 2303 	umull	r2, r3, r2, r3
 80094e8:	095b      	lsrs	r3, r3, #5
 80094ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094ee:	441c      	add	r4, r3
 80094f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094f4:	2200      	movs	r2, #0
 80094f6:	673b      	str	r3, [r7, #112]	; 0x70
 80094f8:	677a      	str	r2, [r7, #116]	; 0x74
 80094fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80094fe:	4642      	mov	r2, r8
 8009500:	464b      	mov	r3, r9
 8009502:	1891      	adds	r1, r2, r2
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	415b      	adcs	r3, r3
 8009508:	60fb      	str	r3, [r7, #12]
 800950a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800950e:	4641      	mov	r1, r8
 8009510:	1851      	adds	r1, r2, r1
 8009512:	6039      	str	r1, [r7, #0]
 8009514:	4649      	mov	r1, r9
 8009516:	414b      	adcs	r3, r1
 8009518:	607b      	str	r3, [r7, #4]
 800951a:	f04f 0200 	mov.w	r2, #0
 800951e:	f04f 0300 	mov.w	r3, #0
 8009522:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009526:	4659      	mov	r1, fp
 8009528:	00cb      	lsls	r3, r1, #3
 800952a:	4651      	mov	r1, sl
 800952c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009530:	4651      	mov	r1, sl
 8009532:	00ca      	lsls	r2, r1, #3
 8009534:	4610      	mov	r0, r2
 8009536:	4619      	mov	r1, r3
 8009538:	4603      	mov	r3, r0
 800953a:	4642      	mov	r2, r8
 800953c:	189b      	adds	r3, r3, r2
 800953e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009540:	464b      	mov	r3, r9
 8009542:	460a      	mov	r2, r1
 8009544:	eb42 0303 	adc.w	r3, r2, r3
 8009548:	66fb      	str	r3, [r7, #108]	; 0x6c
 800954a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	663b      	str	r3, [r7, #96]	; 0x60
 8009554:	667a      	str	r2, [r7, #100]	; 0x64
 8009556:	f04f 0200 	mov.w	r2, #0
 800955a:	f04f 0300 	mov.w	r3, #0
 800955e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009562:	4649      	mov	r1, r9
 8009564:	008b      	lsls	r3, r1, #2
 8009566:	4641      	mov	r1, r8
 8009568:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800956c:	4641      	mov	r1, r8
 800956e:	008a      	lsls	r2, r1, #2
 8009570:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009574:	f7f7 fba8 	bl	8000cc8 <__aeabi_uldivmod>
 8009578:	4602      	mov	r2, r0
 800957a:	460b      	mov	r3, r1
 800957c:	4b0d      	ldr	r3, [pc, #52]	; (80095b4 <UART_SetConfig+0x4e4>)
 800957e:	fba3 1302 	umull	r1, r3, r3, r2
 8009582:	095b      	lsrs	r3, r3, #5
 8009584:	2164      	movs	r1, #100	; 0x64
 8009586:	fb01 f303 	mul.w	r3, r1, r3
 800958a:	1ad3      	subs	r3, r2, r3
 800958c:	011b      	lsls	r3, r3, #4
 800958e:	3332      	adds	r3, #50	; 0x32
 8009590:	4a08      	ldr	r2, [pc, #32]	; (80095b4 <UART_SetConfig+0x4e4>)
 8009592:	fba2 2303 	umull	r2, r3, r2, r3
 8009596:	095b      	lsrs	r3, r3, #5
 8009598:	f003 020f 	and.w	r2, r3, #15
 800959c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4422      	add	r2, r4
 80095a4:	609a      	str	r2, [r3, #8]
}
 80095a6:	bf00      	nop
 80095a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80095ac:	46bd      	mov	sp, r7
 80095ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095b2:	bf00      	nop
 80095b4:	51eb851f 	.word	0x51eb851f

080095b8 <__errno>:
 80095b8:	4b01      	ldr	r3, [pc, #4]	; (80095c0 <__errno+0x8>)
 80095ba:	6818      	ldr	r0, [r3, #0]
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	200023fc 	.word	0x200023fc

080095c4 <__libc_init_array>:
 80095c4:	b570      	push	{r4, r5, r6, lr}
 80095c6:	4d0d      	ldr	r5, [pc, #52]	; (80095fc <__libc_init_array+0x38>)
 80095c8:	4c0d      	ldr	r4, [pc, #52]	; (8009600 <__libc_init_array+0x3c>)
 80095ca:	1b64      	subs	r4, r4, r5
 80095cc:	10a4      	asrs	r4, r4, #2
 80095ce:	2600      	movs	r6, #0
 80095d0:	42a6      	cmp	r6, r4
 80095d2:	d109      	bne.n	80095e8 <__libc_init_array+0x24>
 80095d4:	4d0b      	ldr	r5, [pc, #44]	; (8009604 <__libc_init_array+0x40>)
 80095d6:	4c0c      	ldr	r4, [pc, #48]	; (8009608 <__libc_init_array+0x44>)
 80095d8:	f002 ff64 	bl	800c4a4 <_init>
 80095dc:	1b64      	subs	r4, r4, r5
 80095de:	10a4      	asrs	r4, r4, #2
 80095e0:	2600      	movs	r6, #0
 80095e2:	42a6      	cmp	r6, r4
 80095e4:	d105      	bne.n	80095f2 <__libc_init_array+0x2e>
 80095e6:	bd70      	pop	{r4, r5, r6, pc}
 80095e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80095ec:	4798      	blx	r3
 80095ee:	3601      	adds	r6, #1
 80095f0:	e7ee      	b.n	80095d0 <__libc_init_array+0xc>
 80095f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80095f6:	4798      	blx	r3
 80095f8:	3601      	adds	r6, #1
 80095fa:	e7f2      	b.n	80095e2 <__libc_init_array+0x1e>
 80095fc:	0800cc44 	.word	0x0800cc44
 8009600:	0800cc44 	.word	0x0800cc44
 8009604:	0800cc44 	.word	0x0800cc44
 8009608:	0800cc48 	.word	0x0800cc48

0800960c <malloc>:
 800960c:	4b02      	ldr	r3, [pc, #8]	; (8009618 <malloc+0xc>)
 800960e:	4601      	mov	r1, r0
 8009610:	6818      	ldr	r0, [r3, #0]
 8009612:	f000 b87f 	b.w	8009714 <_malloc_r>
 8009616:	bf00      	nop
 8009618:	200023fc 	.word	0x200023fc

0800961c <free>:
 800961c:	4b02      	ldr	r3, [pc, #8]	; (8009628 <free+0xc>)
 800961e:	4601      	mov	r1, r0
 8009620:	6818      	ldr	r0, [r3, #0]
 8009622:	f000 b80b 	b.w	800963c <_free_r>
 8009626:	bf00      	nop
 8009628:	200023fc 	.word	0x200023fc

0800962c <memset>:
 800962c:	4402      	add	r2, r0
 800962e:	4603      	mov	r3, r0
 8009630:	4293      	cmp	r3, r2
 8009632:	d100      	bne.n	8009636 <memset+0xa>
 8009634:	4770      	bx	lr
 8009636:	f803 1b01 	strb.w	r1, [r3], #1
 800963a:	e7f9      	b.n	8009630 <memset+0x4>

0800963c <_free_r>:
 800963c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800963e:	2900      	cmp	r1, #0
 8009640:	d044      	beq.n	80096cc <_free_r+0x90>
 8009642:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009646:	9001      	str	r0, [sp, #4]
 8009648:	2b00      	cmp	r3, #0
 800964a:	f1a1 0404 	sub.w	r4, r1, #4
 800964e:	bfb8      	it	lt
 8009650:	18e4      	addlt	r4, r4, r3
 8009652:	f001 fc0d 	bl	800ae70 <__malloc_lock>
 8009656:	4a1e      	ldr	r2, [pc, #120]	; (80096d0 <_free_r+0x94>)
 8009658:	9801      	ldr	r0, [sp, #4]
 800965a:	6813      	ldr	r3, [r2, #0]
 800965c:	b933      	cbnz	r3, 800966c <_free_r+0x30>
 800965e:	6063      	str	r3, [r4, #4]
 8009660:	6014      	str	r4, [r2, #0]
 8009662:	b003      	add	sp, #12
 8009664:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009668:	f001 bc08 	b.w	800ae7c <__malloc_unlock>
 800966c:	42a3      	cmp	r3, r4
 800966e:	d908      	bls.n	8009682 <_free_r+0x46>
 8009670:	6825      	ldr	r5, [r4, #0]
 8009672:	1961      	adds	r1, r4, r5
 8009674:	428b      	cmp	r3, r1
 8009676:	bf01      	itttt	eq
 8009678:	6819      	ldreq	r1, [r3, #0]
 800967a:	685b      	ldreq	r3, [r3, #4]
 800967c:	1949      	addeq	r1, r1, r5
 800967e:	6021      	streq	r1, [r4, #0]
 8009680:	e7ed      	b.n	800965e <_free_r+0x22>
 8009682:	461a      	mov	r2, r3
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	b10b      	cbz	r3, 800968c <_free_r+0x50>
 8009688:	42a3      	cmp	r3, r4
 800968a:	d9fa      	bls.n	8009682 <_free_r+0x46>
 800968c:	6811      	ldr	r1, [r2, #0]
 800968e:	1855      	adds	r5, r2, r1
 8009690:	42a5      	cmp	r5, r4
 8009692:	d10b      	bne.n	80096ac <_free_r+0x70>
 8009694:	6824      	ldr	r4, [r4, #0]
 8009696:	4421      	add	r1, r4
 8009698:	1854      	adds	r4, r2, r1
 800969a:	42a3      	cmp	r3, r4
 800969c:	6011      	str	r1, [r2, #0]
 800969e:	d1e0      	bne.n	8009662 <_free_r+0x26>
 80096a0:	681c      	ldr	r4, [r3, #0]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	6053      	str	r3, [r2, #4]
 80096a6:	4421      	add	r1, r4
 80096a8:	6011      	str	r1, [r2, #0]
 80096aa:	e7da      	b.n	8009662 <_free_r+0x26>
 80096ac:	d902      	bls.n	80096b4 <_free_r+0x78>
 80096ae:	230c      	movs	r3, #12
 80096b0:	6003      	str	r3, [r0, #0]
 80096b2:	e7d6      	b.n	8009662 <_free_r+0x26>
 80096b4:	6825      	ldr	r5, [r4, #0]
 80096b6:	1961      	adds	r1, r4, r5
 80096b8:	428b      	cmp	r3, r1
 80096ba:	bf04      	itt	eq
 80096bc:	6819      	ldreq	r1, [r3, #0]
 80096be:	685b      	ldreq	r3, [r3, #4]
 80096c0:	6063      	str	r3, [r4, #4]
 80096c2:	bf04      	itt	eq
 80096c4:	1949      	addeq	r1, r1, r5
 80096c6:	6021      	streq	r1, [r4, #0]
 80096c8:	6054      	str	r4, [r2, #4]
 80096ca:	e7ca      	b.n	8009662 <_free_r+0x26>
 80096cc:	b003      	add	sp, #12
 80096ce:	bd30      	pop	{r4, r5, pc}
 80096d0:	20002b1c 	.word	0x20002b1c

080096d4 <sbrk_aligned>:
 80096d4:	b570      	push	{r4, r5, r6, lr}
 80096d6:	4e0e      	ldr	r6, [pc, #56]	; (8009710 <sbrk_aligned+0x3c>)
 80096d8:	460c      	mov	r4, r1
 80096da:	6831      	ldr	r1, [r6, #0]
 80096dc:	4605      	mov	r5, r0
 80096de:	b911      	cbnz	r1, 80096e6 <sbrk_aligned+0x12>
 80096e0:	f000 fcf6 	bl	800a0d0 <_sbrk_r>
 80096e4:	6030      	str	r0, [r6, #0]
 80096e6:	4621      	mov	r1, r4
 80096e8:	4628      	mov	r0, r5
 80096ea:	f000 fcf1 	bl	800a0d0 <_sbrk_r>
 80096ee:	1c43      	adds	r3, r0, #1
 80096f0:	d00a      	beq.n	8009708 <sbrk_aligned+0x34>
 80096f2:	1cc4      	adds	r4, r0, #3
 80096f4:	f024 0403 	bic.w	r4, r4, #3
 80096f8:	42a0      	cmp	r0, r4
 80096fa:	d007      	beq.n	800970c <sbrk_aligned+0x38>
 80096fc:	1a21      	subs	r1, r4, r0
 80096fe:	4628      	mov	r0, r5
 8009700:	f000 fce6 	bl	800a0d0 <_sbrk_r>
 8009704:	3001      	adds	r0, #1
 8009706:	d101      	bne.n	800970c <sbrk_aligned+0x38>
 8009708:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800970c:	4620      	mov	r0, r4
 800970e:	bd70      	pop	{r4, r5, r6, pc}
 8009710:	20002b20 	.word	0x20002b20

08009714 <_malloc_r>:
 8009714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009718:	1ccd      	adds	r5, r1, #3
 800971a:	f025 0503 	bic.w	r5, r5, #3
 800971e:	3508      	adds	r5, #8
 8009720:	2d0c      	cmp	r5, #12
 8009722:	bf38      	it	cc
 8009724:	250c      	movcc	r5, #12
 8009726:	2d00      	cmp	r5, #0
 8009728:	4607      	mov	r7, r0
 800972a:	db01      	blt.n	8009730 <_malloc_r+0x1c>
 800972c:	42a9      	cmp	r1, r5
 800972e:	d905      	bls.n	800973c <_malloc_r+0x28>
 8009730:	230c      	movs	r3, #12
 8009732:	603b      	str	r3, [r7, #0]
 8009734:	2600      	movs	r6, #0
 8009736:	4630      	mov	r0, r6
 8009738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800973c:	4e2e      	ldr	r6, [pc, #184]	; (80097f8 <_malloc_r+0xe4>)
 800973e:	f001 fb97 	bl	800ae70 <__malloc_lock>
 8009742:	6833      	ldr	r3, [r6, #0]
 8009744:	461c      	mov	r4, r3
 8009746:	bb34      	cbnz	r4, 8009796 <_malloc_r+0x82>
 8009748:	4629      	mov	r1, r5
 800974a:	4638      	mov	r0, r7
 800974c:	f7ff ffc2 	bl	80096d4 <sbrk_aligned>
 8009750:	1c43      	adds	r3, r0, #1
 8009752:	4604      	mov	r4, r0
 8009754:	d14d      	bne.n	80097f2 <_malloc_r+0xde>
 8009756:	6834      	ldr	r4, [r6, #0]
 8009758:	4626      	mov	r6, r4
 800975a:	2e00      	cmp	r6, #0
 800975c:	d140      	bne.n	80097e0 <_malloc_r+0xcc>
 800975e:	6823      	ldr	r3, [r4, #0]
 8009760:	4631      	mov	r1, r6
 8009762:	4638      	mov	r0, r7
 8009764:	eb04 0803 	add.w	r8, r4, r3
 8009768:	f000 fcb2 	bl	800a0d0 <_sbrk_r>
 800976c:	4580      	cmp	r8, r0
 800976e:	d13a      	bne.n	80097e6 <_malloc_r+0xd2>
 8009770:	6821      	ldr	r1, [r4, #0]
 8009772:	3503      	adds	r5, #3
 8009774:	1a6d      	subs	r5, r5, r1
 8009776:	f025 0503 	bic.w	r5, r5, #3
 800977a:	3508      	adds	r5, #8
 800977c:	2d0c      	cmp	r5, #12
 800977e:	bf38      	it	cc
 8009780:	250c      	movcc	r5, #12
 8009782:	4629      	mov	r1, r5
 8009784:	4638      	mov	r0, r7
 8009786:	f7ff ffa5 	bl	80096d4 <sbrk_aligned>
 800978a:	3001      	adds	r0, #1
 800978c:	d02b      	beq.n	80097e6 <_malloc_r+0xd2>
 800978e:	6823      	ldr	r3, [r4, #0]
 8009790:	442b      	add	r3, r5
 8009792:	6023      	str	r3, [r4, #0]
 8009794:	e00e      	b.n	80097b4 <_malloc_r+0xa0>
 8009796:	6822      	ldr	r2, [r4, #0]
 8009798:	1b52      	subs	r2, r2, r5
 800979a:	d41e      	bmi.n	80097da <_malloc_r+0xc6>
 800979c:	2a0b      	cmp	r2, #11
 800979e:	d916      	bls.n	80097ce <_malloc_r+0xba>
 80097a0:	1961      	adds	r1, r4, r5
 80097a2:	42a3      	cmp	r3, r4
 80097a4:	6025      	str	r5, [r4, #0]
 80097a6:	bf18      	it	ne
 80097a8:	6059      	strne	r1, [r3, #4]
 80097aa:	6863      	ldr	r3, [r4, #4]
 80097ac:	bf08      	it	eq
 80097ae:	6031      	streq	r1, [r6, #0]
 80097b0:	5162      	str	r2, [r4, r5]
 80097b2:	604b      	str	r3, [r1, #4]
 80097b4:	4638      	mov	r0, r7
 80097b6:	f104 060b 	add.w	r6, r4, #11
 80097ba:	f001 fb5f 	bl	800ae7c <__malloc_unlock>
 80097be:	f026 0607 	bic.w	r6, r6, #7
 80097c2:	1d23      	adds	r3, r4, #4
 80097c4:	1af2      	subs	r2, r6, r3
 80097c6:	d0b6      	beq.n	8009736 <_malloc_r+0x22>
 80097c8:	1b9b      	subs	r3, r3, r6
 80097ca:	50a3      	str	r3, [r4, r2]
 80097cc:	e7b3      	b.n	8009736 <_malloc_r+0x22>
 80097ce:	6862      	ldr	r2, [r4, #4]
 80097d0:	42a3      	cmp	r3, r4
 80097d2:	bf0c      	ite	eq
 80097d4:	6032      	streq	r2, [r6, #0]
 80097d6:	605a      	strne	r2, [r3, #4]
 80097d8:	e7ec      	b.n	80097b4 <_malloc_r+0xa0>
 80097da:	4623      	mov	r3, r4
 80097dc:	6864      	ldr	r4, [r4, #4]
 80097de:	e7b2      	b.n	8009746 <_malloc_r+0x32>
 80097e0:	4634      	mov	r4, r6
 80097e2:	6876      	ldr	r6, [r6, #4]
 80097e4:	e7b9      	b.n	800975a <_malloc_r+0x46>
 80097e6:	230c      	movs	r3, #12
 80097e8:	603b      	str	r3, [r7, #0]
 80097ea:	4638      	mov	r0, r7
 80097ec:	f001 fb46 	bl	800ae7c <__malloc_unlock>
 80097f0:	e7a1      	b.n	8009736 <_malloc_r+0x22>
 80097f2:	6025      	str	r5, [r4, #0]
 80097f4:	e7de      	b.n	80097b4 <_malloc_r+0xa0>
 80097f6:	bf00      	nop
 80097f8:	20002b1c 	.word	0x20002b1c

080097fc <__cvt>:
 80097fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009800:	ec55 4b10 	vmov	r4, r5, d0
 8009804:	2d00      	cmp	r5, #0
 8009806:	460e      	mov	r6, r1
 8009808:	4619      	mov	r1, r3
 800980a:	462b      	mov	r3, r5
 800980c:	bfbb      	ittet	lt
 800980e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009812:	461d      	movlt	r5, r3
 8009814:	2300      	movge	r3, #0
 8009816:	232d      	movlt	r3, #45	; 0x2d
 8009818:	700b      	strb	r3, [r1, #0]
 800981a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800981c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009820:	4691      	mov	r9, r2
 8009822:	f023 0820 	bic.w	r8, r3, #32
 8009826:	bfbc      	itt	lt
 8009828:	4622      	movlt	r2, r4
 800982a:	4614      	movlt	r4, r2
 800982c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009830:	d005      	beq.n	800983e <__cvt+0x42>
 8009832:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009836:	d100      	bne.n	800983a <__cvt+0x3e>
 8009838:	3601      	adds	r6, #1
 800983a:	2102      	movs	r1, #2
 800983c:	e000      	b.n	8009840 <__cvt+0x44>
 800983e:	2103      	movs	r1, #3
 8009840:	ab03      	add	r3, sp, #12
 8009842:	9301      	str	r3, [sp, #4]
 8009844:	ab02      	add	r3, sp, #8
 8009846:	9300      	str	r3, [sp, #0]
 8009848:	ec45 4b10 	vmov	d0, r4, r5
 800984c:	4653      	mov	r3, sl
 800984e:	4632      	mov	r2, r6
 8009850:	f000 fd0e 	bl	800a270 <_dtoa_r>
 8009854:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009858:	4607      	mov	r7, r0
 800985a:	d102      	bne.n	8009862 <__cvt+0x66>
 800985c:	f019 0f01 	tst.w	r9, #1
 8009860:	d022      	beq.n	80098a8 <__cvt+0xac>
 8009862:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009866:	eb07 0906 	add.w	r9, r7, r6
 800986a:	d110      	bne.n	800988e <__cvt+0x92>
 800986c:	783b      	ldrb	r3, [r7, #0]
 800986e:	2b30      	cmp	r3, #48	; 0x30
 8009870:	d10a      	bne.n	8009888 <__cvt+0x8c>
 8009872:	2200      	movs	r2, #0
 8009874:	2300      	movs	r3, #0
 8009876:	4620      	mov	r0, r4
 8009878:	4629      	mov	r1, r5
 800987a:	f7f7 f945 	bl	8000b08 <__aeabi_dcmpeq>
 800987e:	b918      	cbnz	r0, 8009888 <__cvt+0x8c>
 8009880:	f1c6 0601 	rsb	r6, r6, #1
 8009884:	f8ca 6000 	str.w	r6, [sl]
 8009888:	f8da 3000 	ldr.w	r3, [sl]
 800988c:	4499      	add	r9, r3
 800988e:	2200      	movs	r2, #0
 8009890:	2300      	movs	r3, #0
 8009892:	4620      	mov	r0, r4
 8009894:	4629      	mov	r1, r5
 8009896:	f7f7 f937 	bl	8000b08 <__aeabi_dcmpeq>
 800989a:	b108      	cbz	r0, 80098a0 <__cvt+0xa4>
 800989c:	f8cd 900c 	str.w	r9, [sp, #12]
 80098a0:	2230      	movs	r2, #48	; 0x30
 80098a2:	9b03      	ldr	r3, [sp, #12]
 80098a4:	454b      	cmp	r3, r9
 80098a6:	d307      	bcc.n	80098b8 <__cvt+0xbc>
 80098a8:	9b03      	ldr	r3, [sp, #12]
 80098aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098ac:	1bdb      	subs	r3, r3, r7
 80098ae:	4638      	mov	r0, r7
 80098b0:	6013      	str	r3, [r2, #0]
 80098b2:	b004      	add	sp, #16
 80098b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098b8:	1c59      	adds	r1, r3, #1
 80098ba:	9103      	str	r1, [sp, #12]
 80098bc:	701a      	strb	r2, [r3, #0]
 80098be:	e7f0      	b.n	80098a2 <__cvt+0xa6>

080098c0 <__exponent>:
 80098c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098c2:	4603      	mov	r3, r0
 80098c4:	2900      	cmp	r1, #0
 80098c6:	bfb8      	it	lt
 80098c8:	4249      	neglt	r1, r1
 80098ca:	f803 2b02 	strb.w	r2, [r3], #2
 80098ce:	bfb4      	ite	lt
 80098d0:	222d      	movlt	r2, #45	; 0x2d
 80098d2:	222b      	movge	r2, #43	; 0x2b
 80098d4:	2909      	cmp	r1, #9
 80098d6:	7042      	strb	r2, [r0, #1]
 80098d8:	dd2a      	ble.n	8009930 <__exponent+0x70>
 80098da:	f10d 0407 	add.w	r4, sp, #7
 80098de:	46a4      	mov	ip, r4
 80098e0:	270a      	movs	r7, #10
 80098e2:	46a6      	mov	lr, r4
 80098e4:	460a      	mov	r2, r1
 80098e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80098ea:	fb07 1516 	mls	r5, r7, r6, r1
 80098ee:	3530      	adds	r5, #48	; 0x30
 80098f0:	2a63      	cmp	r2, #99	; 0x63
 80098f2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80098f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80098fa:	4631      	mov	r1, r6
 80098fc:	dcf1      	bgt.n	80098e2 <__exponent+0x22>
 80098fe:	3130      	adds	r1, #48	; 0x30
 8009900:	f1ae 0502 	sub.w	r5, lr, #2
 8009904:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009908:	1c44      	adds	r4, r0, #1
 800990a:	4629      	mov	r1, r5
 800990c:	4561      	cmp	r1, ip
 800990e:	d30a      	bcc.n	8009926 <__exponent+0x66>
 8009910:	f10d 0209 	add.w	r2, sp, #9
 8009914:	eba2 020e 	sub.w	r2, r2, lr
 8009918:	4565      	cmp	r5, ip
 800991a:	bf88      	it	hi
 800991c:	2200      	movhi	r2, #0
 800991e:	4413      	add	r3, r2
 8009920:	1a18      	subs	r0, r3, r0
 8009922:	b003      	add	sp, #12
 8009924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009926:	f811 2b01 	ldrb.w	r2, [r1], #1
 800992a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800992e:	e7ed      	b.n	800990c <__exponent+0x4c>
 8009930:	2330      	movs	r3, #48	; 0x30
 8009932:	3130      	adds	r1, #48	; 0x30
 8009934:	7083      	strb	r3, [r0, #2]
 8009936:	70c1      	strb	r1, [r0, #3]
 8009938:	1d03      	adds	r3, r0, #4
 800993a:	e7f1      	b.n	8009920 <__exponent+0x60>

0800993c <_printf_float>:
 800993c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009940:	ed2d 8b02 	vpush	{d8}
 8009944:	b08d      	sub	sp, #52	; 0x34
 8009946:	460c      	mov	r4, r1
 8009948:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800994c:	4616      	mov	r6, r2
 800994e:	461f      	mov	r7, r3
 8009950:	4605      	mov	r5, r0
 8009952:	f001 fa7b 	bl	800ae4c <_localeconv_r>
 8009956:	f8d0 a000 	ldr.w	sl, [r0]
 800995a:	4650      	mov	r0, sl
 800995c:	f7f6 fc58 	bl	8000210 <strlen>
 8009960:	2300      	movs	r3, #0
 8009962:	930a      	str	r3, [sp, #40]	; 0x28
 8009964:	6823      	ldr	r3, [r4, #0]
 8009966:	9305      	str	r3, [sp, #20]
 8009968:	f8d8 3000 	ldr.w	r3, [r8]
 800996c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009970:	3307      	adds	r3, #7
 8009972:	f023 0307 	bic.w	r3, r3, #7
 8009976:	f103 0208 	add.w	r2, r3, #8
 800997a:	f8c8 2000 	str.w	r2, [r8]
 800997e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009982:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009986:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800998a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800998e:	9307      	str	r3, [sp, #28]
 8009990:	f8cd 8018 	str.w	r8, [sp, #24]
 8009994:	ee08 0a10 	vmov	s16, r0
 8009998:	4b9f      	ldr	r3, [pc, #636]	; (8009c18 <_printf_float+0x2dc>)
 800999a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800999e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099a2:	f7f7 f8e3 	bl	8000b6c <__aeabi_dcmpun>
 80099a6:	bb88      	cbnz	r0, 8009a0c <_printf_float+0xd0>
 80099a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099ac:	4b9a      	ldr	r3, [pc, #616]	; (8009c18 <_printf_float+0x2dc>)
 80099ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099b2:	f7f7 f8bd 	bl	8000b30 <__aeabi_dcmple>
 80099b6:	bb48      	cbnz	r0, 8009a0c <_printf_float+0xd0>
 80099b8:	2200      	movs	r2, #0
 80099ba:	2300      	movs	r3, #0
 80099bc:	4640      	mov	r0, r8
 80099be:	4649      	mov	r1, r9
 80099c0:	f7f7 f8ac 	bl	8000b1c <__aeabi_dcmplt>
 80099c4:	b110      	cbz	r0, 80099cc <_printf_float+0x90>
 80099c6:	232d      	movs	r3, #45	; 0x2d
 80099c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099cc:	4b93      	ldr	r3, [pc, #588]	; (8009c1c <_printf_float+0x2e0>)
 80099ce:	4894      	ldr	r0, [pc, #592]	; (8009c20 <_printf_float+0x2e4>)
 80099d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80099d4:	bf94      	ite	ls
 80099d6:	4698      	movls	r8, r3
 80099d8:	4680      	movhi	r8, r0
 80099da:	2303      	movs	r3, #3
 80099dc:	6123      	str	r3, [r4, #16]
 80099de:	9b05      	ldr	r3, [sp, #20]
 80099e0:	f023 0204 	bic.w	r2, r3, #4
 80099e4:	6022      	str	r2, [r4, #0]
 80099e6:	f04f 0900 	mov.w	r9, #0
 80099ea:	9700      	str	r7, [sp, #0]
 80099ec:	4633      	mov	r3, r6
 80099ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80099f0:	4621      	mov	r1, r4
 80099f2:	4628      	mov	r0, r5
 80099f4:	f000 f9d8 	bl	8009da8 <_printf_common>
 80099f8:	3001      	adds	r0, #1
 80099fa:	f040 8090 	bne.w	8009b1e <_printf_float+0x1e2>
 80099fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a02:	b00d      	add	sp, #52	; 0x34
 8009a04:	ecbd 8b02 	vpop	{d8}
 8009a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0c:	4642      	mov	r2, r8
 8009a0e:	464b      	mov	r3, r9
 8009a10:	4640      	mov	r0, r8
 8009a12:	4649      	mov	r1, r9
 8009a14:	f7f7 f8aa 	bl	8000b6c <__aeabi_dcmpun>
 8009a18:	b140      	cbz	r0, 8009a2c <_printf_float+0xf0>
 8009a1a:	464b      	mov	r3, r9
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	bfbc      	itt	lt
 8009a20:	232d      	movlt	r3, #45	; 0x2d
 8009a22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009a26:	487f      	ldr	r0, [pc, #508]	; (8009c24 <_printf_float+0x2e8>)
 8009a28:	4b7f      	ldr	r3, [pc, #508]	; (8009c28 <_printf_float+0x2ec>)
 8009a2a:	e7d1      	b.n	80099d0 <_printf_float+0x94>
 8009a2c:	6863      	ldr	r3, [r4, #4]
 8009a2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009a32:	9206      	str	r2, [sp, #24]
 8009a34:	1c5a      	adds	r2, r3, #1
 8009a36:	d13f      	bne.n	8009ab8 <_printf_float+0x17c>
 8009a38:	2306      	movs	r3, #6
 8009a3a:	6063      	str	r3, [r4, #4]
 8009a3c:	9b05      	ldr	r3, [sp, #20]
 8009a3e:	6861      	ldr	r1, [r4, #4]
 8009a40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009a44:	2300      	movs	r3, #0
 8009a46:	9303      	str	r3, [sp, #12]
 8009a48:	ab0a      	add	r3, sp, #40	; 0x28
 8009a4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009a4e:	ab09      	add	r3, sp, #36	; 0x24
 8009a50:	ec49 8b10 	vmov	d0, r8, r9
 8009a54:	9300      	str	r3, [sp, #0]
 8009a56:	6022      	str	r2, [r4, #0]
 8009a58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	f7ff fecd 	bl	80097fc <__cvt>
 8009a62:	9b06      	ldr	r3, [sp, #24]
 8009a64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a66:	2b47      	cmp	r3, #71	; 0x47
 8009a68:	4680      	mov	r8, r0
 8009a6a:	d108      	bne.n	8009a7e <_printf_float+0x142>
 8009a6c:	1cc8      	adds	r0, r1, #3
 8009a6e:	db02      	blt.n	8009a76 <_printf_float+0x13a>
 8009a70:	6863      	ldr	r3, [r4, #4]
 8009a72:	4299      	cmp	r1, r3
 8009a74:	dd41      	ble.n	8009afa <_printf_float+0x1be>
 8009a76:	f1ab 0b02 	sub.w	fp, fp, #2
 8009a7a:	fa5f fb8b 	uxtb.w	fp, fp
 8009a7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a82:	d820      	bhi.n	8009ac6 <_printf_float+0x18a>
 8009a84:	3901      	subs	r1, #1
 8009a86:	465a      	mov	r2, fp
 8009a88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a8c:	9109      	str	r1, [sp, #36]	; 0x24
 8009a8e:	f7ff ff17 	bl	80098c0 <__exponent>
 8009a92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a94:	1813      	adds	r3, r2, r0
 8009a96:	2a01      	cmp	r2, #1
 8009a98:	4681      	mov	r9, r0
 8009a9a:	6123      	str	r3, [r4, #16]
 8009a9c:	dc02      	bgt.n	8009aa4 <_printf_float+0x168>
 8009a9e:	6822      	ldr	r2, [r4, #0]
 8009aa0:	07d2      	lsls	r2, r2, #31
 8009aa2:	d501      	bpl.n	8009aa8 <_printf_float+0x16c>
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	6123      	str	r3, [r4, #16]
 8009aa8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d09c      	beq.n	80099ea <_printf_float+0xae>
 8009ab0:	232d      	movs	r3, #45	; 0x2d
 8009ab2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ab6:	e798      	b.n	80099ea <_printf_float+0xae>
 8009ab8:	9a06      	ldr	r2, [sp, #24]
 8009aba:	2a47      	cmp	r2, #71	; 0x47
 8009abc:	d1be      	bne.n	8009a3c <_printf_float+0x100>
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1bc      	bne.n	8009a3c <_printf_float+0x100>
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e7b9      	b.n	8009a3a <_printf_float+0xfe>
 8009ac6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009aca:	d118      	bne.n	8009afe <_printf_float+0x1c2>
 8009acc:	2900      	cmp	r1, #0
 8009ace:	6863      	ldr	r3, [r4, #4]
 8009ad0:	dd0b      	ble.n	8009aea <_printf_float+0x1ae>
 8009ad2:	6121      	str	r1, [r4, #16]
 8009ad4:	b913      	cbnz	r3, 8009adc <_printf_float+0x1a0>
 8009ad6:	6822      	ldr	r2, [r4, #0]
 8009ad8:	07d0      	lsls	r0, r2, #31
 8009ada:	d502      	bpl.n	8009ae2 <_printf_float+0x1a6>
 8009adc:	3301      	adds	r3, #1
 8009ade:	440b      	add	r3, r1
 8009ae0:	6123      	str	r3, [r4, #16]
 8009ae2:	65a1      	str	r1, [r4, #88]	; 0x58
 8009ae4:	f04f 0900 	mov.w	r9, #0
 8009ae8:	e7de      	b.n	8009aa8 <_printf_float+0x16c>
 8009aea:	b913      	cbnz	r3, 8009af2 <_printf_float+0x1b6>
 8009aec:	6822      	ldr	r2, [r4, #0]
 8009aee:	07d2      	lsls	r2, r2, #31
 8009af0:	d501      	bpl.n	8009af6 <_printf_float+0x1ba>
 8009af2:	3302      	adds	r3, #2
 8009af4:	e7f4      	b.n	8009ae0 <_printf_float+0x1a4>
 8009af6:	2301      	movs	r3, #1
 8009af8:	e7f2      	b.n	8009ae0 <_printf_float+0x1a4>
 8009afa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b00:	4299      	cmp	r1, r3
 8009b02:	db05      	blt.n	8009b10 <_printf_float+0x1d4>
 8009b04:	6823      	ldr	r3, [r4, #0]
 8009b06:	6121      	str	r1, [r4, #16]
 8009b08:	07d8      	lsls	r0, r3, #31
 8009b0a:	d5ea      	bpl.n	8009ae2 <_printf_float+0x1a6>
 8009b0c:	1c4b      	adds	r3, r1, #1
 8009b0e:	e7e7      	b.n	8009ae0 <_printf_float+0x1a4>
 8009b10:	2900      	cmp	r1, #0
 8009b12:	bfd4      	ite	le
 8009b14:	f1c1 0202 	rsble	r2, r1, #2
 8009b18:	2201      	movgt	r2, #1
 8009b1a:	4413      	add	r3, r2
 8009b1c:	e7e0      	b.n	8009ae0 <_printf_float+0x1a4>
 8009b1e:	6823      	ldr	r3, [r4, #0]
 8009b20:	055a      	lsls	r2, r3, #21
 8009b22:	d407      	bmi.n	8009b34 <_printf_float+0x1f8>
 8009b24:	6923      	ldr	r3, [r4, #16]
 8009b26:	4642      	mov	r2, r8
 8009b28:	4631      	mov	r1, r6
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	47b8      	blx	r7
 8009b2e:	3001      	adds	r0, #1
 8009b30:	d12c      	bne.n	8009b8c <_printf_float+0x250>
 8009b32:	e764      	b.n	80099fe <_printf_float+0xc2>
 8009b34:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b38:	f240 80e0 	bls.w	8009cfc <_printf_float+0x3c0>
 8009b3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b40:	2200      	movs	r2, #0
 8009b42:	2300      	movs	r3, #0
 8009b44:	f7f6 ffe0 	bl	8000b08 <__aeabi_dcmpeq>
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	d034      	beq.n	8009bb6 <_printf_float+0x27a>
 8009b4c:	4a37      	ldr	r2, [pc, #220]	; (8009c2c <_printf_float+0x2f0>)
 8009b4e:	2301      	movs	r3, #1
 8009b50:	4631      	mov	r1, r6
 8009b52:	4628      	mov	r0, r5
 8009b54:	47b8      	blx	r7
 8009b56:	3001      	adds	r0, #1
 8009b58:	f43f af51 	beq.w	80099fe <_printf_float+0xc2>
 8009b5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b60:	429a      	cmp	r2, r3
 8009b62:	db02      	blt.n	8009b6a <_printf_float+0x22e>
 8009b64:	6823      	ldr	r3, [r4, #0]
 8009b66:	07d8      	lsls	r0, r3, #31
 8009b68:	d510      	bpl.n	8009b8c <_printf_float+0x250>
 8009b6a:	ee18 3a10 	vmov	r3, s16
 8009b6e:	4652      	mov	r2, sl
 8009b70:	4631      	mov	r1, r6
 8009b72:	4628      	mov	r0, r5
 8009b74:	47b8      	blx	r7
 8009b76:	3001      	adds	r0, #1
 8009b78:	f43f af41 	beq.w	80099fe <_printf_float+0xc2>
 8009b7c:	f04f 0800 	mov.w	r8, #0
 8009b80:	f104 091a 	add.w	r9, r4, #26
 8009b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b86:	3b01      	subs	r3, #1
 8009b88:	4543      	cmp	r3, r8
 8009b8a:	dc09      	bgt.n	8009ba0 <_printf_float+0x264>
 8009b8c:	6823      	ldr	r3, [r4, #0]
 8009b8e:	079b      	lsls	r3, r3, #30
 8009b90:	f100 8105 	bmi.w	8009d9e <_printf_float+0x462>
 8009b94:	68e0      	ldr	r0, [r4, #12]
 8009b96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b98:	4298      	cmp	r0, r3
 8009b9a:	bfb8      	it	lt
 8009b9c:	4618      	movlt	r0, r3
 8009b9e:	e730      	b.n	8009a02 <_printf_float+0xc6>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	464a      	mov	r2, r9
 8009ba4:	4631      	mov	r1, r6
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	47b8      	blx	r7
 8009baa:	3001      	adds	r0, #1
 8009bac:	f43f af27 	beq.w	80099fe <_printf_float+0xc2>
 8009bb0:	f108 0801 	add.w	r8, r8, #1
 8009bb4:	e7e6      	b.n	8009b84 <_printf_float+0x248>
 8009bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	dc39      	bgt.n	8009c30 <_printf_float+0x2f4>
 8009bbc:	4a1b      	ldr	r2, [pc, #108]	; (8009c2c <_printf_float+0x2f0>)
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	4631      	mov	r1, r6
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	47b8      	blx	r7
 8009bc6:	3001      	adds	r0, #1
 8009bc8:	f43f af19 	beq.w	80099fe <_printf_float+0xc2>
 8009bcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	d102      	bne.n	8009bda <_printf_float+0x29e>
 8009bd4:	6823      	ldr	r3, [r4, #0]
 8009bd6:	07d9      	lsls	r1, r3, #31
 8009bd8:	d5d8      	bpl.n	8009b8c <_printf_float+0x250>
 8009bda:	ee18 3a10 	vmov	r3, s16
 8009bde:	4652      	mov	r2, sl
 8009be0:	4631      	mov	r1, r6
 8009be2:	4628      	mov	r0, r5
 8009be4:	47b8      	blx	r7
 8009be6:	3001      	adds	r0, #1
 8009be8:	f43f af09 	beq.w	80099fe <_printf_float+0xc2>
 8009bec:	f04f 0900 	mov.w	r9, #0
 8009bf0:	f104 0a1a 	add.w	sl, r4, #26
 8009bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bf6:	425b      	negs	r3, r3
 8009bf8:	454b      	cmp	r3, r9
 8009bfa:	dc01      	bgt.n	8009c00 <_printf_float+0x2c4>
 8009bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bfe:	e792      	b.n	8009b26 <_printf_float+0x1ea>
 8009c00:	2301      	movs	r3, #1
 8009c02:	4652      	mov	r2, sl
 8009c04:	4631      	mov	r1, r6
 8009c06:	4628      	mov	r0, r5
 8009c08:	47b8      	blx	r7
 8009c0a:	3001      	adds	r0, #1
 8009c0c:	f43f aef7 	beq.w	80099fe <_printf_float+0xc2>
 8009c10:	f109 0901 	add.w	r9, r9, #1
 8009c14:	e7ee      	b.n	8009bf4 <_printf_float+0x2b8>
 8009c16:	bf00      	nop
 8009c18:	7fefffff 	.word	0x7fefffff
 8009c1c:	0800c868 	.word	0x0800c868
 8009c20:	0800c86c 	.word	0x0800c86c
 8009c24:	0800c874 	.word	0x0800c874
 8009c28:	0800c870 	.word	0x0800c870
 8009c2c:	0800c878 	.word	0x0800c878
 8009c30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c34:	429a      	cmp	r2, r3
 8009c36:	bfa8      	it	ge
 8009c38:	461a      	movge	r2, r3
 8009c3a:	2a00      	cmp	r2, #0
 8009c3c:	4691      	mov	r9, r2
 8009c3e:	dc37      	bgt.n	8009cb0 <_printf_float+0x374>
 8009c40:	f04f 0b00 	mov.w	fp, #0
 8009c44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c48:	f104 021a 	add.w	r2, r4, #26
 8009c4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c4e:	9305      	str	r3, [sp, #20]
 8009c50:	eba3 0309 	sub.w	r3, r3, r9
 8009c54:	455b      	cmp	r3, fp
 8009c56:	dc33      	bgt.n	8009cc0 <_printf_float+0x384>
 8009c58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	db3b      	blt.n	8009cd8 <_printf_float+0x39c>
 8009c60:	6823      	ldr	r3, [r4, #0]
 8009c62:	07da      	lsls	r2, r3, #31
 8009c64:	d438      	bmi.n	8009cd8 <_printf_float+0x39c>
 8009c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c68:	9a05      	ldr	r2, [sp, #20]
 8009c6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c6c:	1a9a      	subs	r2, r3, r2
 8009c6e:	eba3 0901 	sub.w	r9, r3, r1
 8009c72:	4591      	cmp	r9, r2
 8009c74:	bfa8      	it	ge
 8009c76:	4691      	movge	r9, r2
 8009c78:	f1b9 0f00 	cmp.w	r9, #0
 8009c7c:	dc35      	bgt.n	8009cea <_printf_float+0x3ae>
 8009c7e:	f04f 0800 	mov.w	r8, #0
 8009c82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c86:	f104 0a1a 	add.w	sl, r4, #26
 8009c8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c8e:	1a9b      	subs	r3, r3, r2
 8009c90:	eba3 0309 	sub.w	r3, r3, r9
 8009c94:	4543      	cmp	r3, r8
 8009c96:	f77f af79 	ble.w	8009b8c <_printf_float+0x250>
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	4652      	mov	r2, sl
 8009c9e:	4631      	mov	r1, r6
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	47b8      	blx	r7
 8009ca4:	3001      	adds	r0, #1
 8009ca6:	f43f aeaa 	beq.w	80099fe <_printf_float+0xc2>
 8009caa:	f108 0801 	add.w	r8, r8, #1
 8009cae:	e7ec      	b.n	8009c8a <_printf_float+0x34e>
 8009cb0:	4613      	mov	r3, r2
 8009cb2:	4631      	mov	r1, r6
 8009cb4:	4642      	mov	r2, r8
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	47b8      	blx	r7
 8009cba:	3001      	adds	r0, #1
 8009cbc:	d1c0      	bne.n	8009c40 <_printf_float+0x304>
 8009cbe:	e69e      	b.n	80099fe <_printf_float+0xc2>
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	4631      	mov	r1, r6
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	9205      	str	r2, [sp, #20]
 8009cc8:	47b8      	blx	r7
 8009cca:	3001      	adds	r0, #1
 8009ccc:	f43f ae97 	beq.w	80099fe <_printf_float+0xc2>
 8009cd0:	9a05      	ldr	r2, [sp, #20]
 8009cd2:	f10b 0b01 	add.w	fp, fp, #1
 8009cd6:	e7b9      	b.n	8009c4c <_printf_float+0x310>
 8009cd8:	ee18 3a10 	vmov	r3, s16
 8009cdc:	4652      	mov	r2, sl
 8009cde:	4631      	mov	r1, r6
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	47b8      	blx	r7
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	d1be      	bne.n	8009c66 <_printf_float+0x32a>
 8009ce8:	e689      	b.n	80099fe <_printf_float+0xc2>
 8009cea:	9a05      	ldr	r2, [sp, #20]
 8009cec:	464b      	mov	r3, r9
 8009cee:	4442      	add	r2, r8
 8009cf0:	4631      	mov	r1, r6
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	47b8      	blx	r7
 8009cf6:	3001      	adds	r0, #1
 8009cf8:	d1c1      	bne.n	8009c7e <_printf_float+0x342>
 8009cfa:	e680      	b.n	80099fe <_printf_float+0xc2>
 8009cfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cfe:	2a01      	cmp	r2, #1
 8009d00:	dc01      	bgt.n	8009d06 <_printf_float+0x3ca>
 8009d02:	07db      	lsls	r3, r3, #31
 8009d04:	d538      	bpl.n	8009d78 <_printf_float+0x43c>
 8009d06:	2301      	movs	r3, #1
 8009d08:	4642      	mov	r2, r8
 8009d0a:	4631      	mov	r1, r6
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	47b8      	blx	r7
 8009d10:	3001      	adds	r0, #1
 8009d12:	f43f ae74 	beq.w	80099fe <_printf_float+0xc2>
 8009d16:	ee18 3a10 	vmov	r3, s16
 8009d1a:	4652      	mov	r2, sl
 8009d1c:	4631      	mov	r1, r6
 8009d1e:	4628      	mov	r0, r5
 8009d20:	47b8      	blx	r7
 8009d22:	3001      	adds	r0, #1
 8009d24:	f43f ae6b 	beq.w	80099fe <_printf_float+0xc2>
 8009d28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	2300      	movs	r3, #0
 8009d30:	f7f6 feea 	bl	8000b08 <__aeabi_dcmpeq>
 8009d34:	b9d8      	cbnz	r0, 8009d6e <_printf_float+0x432>
 8009d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d38:	f108 0201 	add.w	r2, r8, #1
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	4631      	mov	r1, r6
 8009d40:	4628      	mov	r0, r5
 8009d42:	47b8      	blx	r7
 8009d44:	3001      	adds	r0, #1
 8009d46:	d10e      	bne.n	8009d66 <_printf_float+0x42a>
 8009d48:	e659      	b.n	80099fe <_printf_float+0xc2>
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	4652      	mov	r2, sl
 8009d4e:	4631      	mov	r1, r6
 8009d50:	4628      	mov	r0, r5
 8009d52:	47b8      	blx	r7
 8009d54:	3001      	adds	r0, #1
 8009d56:	f43f ae52 	beq.w	80099fe <_printf_float+0xc2>
 8009d5a:	f108 0801 	add.w	r8, r8, #1
 8009d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d60:	3b01      	subs	r3, #1
 8009d62:	4543      	cmp	r3, r8
 8009d64:	dcf1      	bgt.n	8009d4a <_printf_float+0x40e>
 8009d66:	464b      	mov	r3, r9
 8009d68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d6c:	e6dc      	b.n	8009b28 <_printf_float+0x1ec>
 8009d6e:	f04f 0800 	mov.w	r8, #0
 8009d72:	f104 0a1a 	add.w	sl, r4, #26
 8009d76:	e7f2      	b.n	8009d5e <_printf_float+0x422>
 8009d78:	2301      	movs	r3, #1
 8009d7a:	4642      	mov	r2, r8
 8009d7c:	e7df      	b.n	8009d3e <_printf_float+0x402>
 8009d7e:	2301      	movs	r3, #1
 8009d80:	464a      	mov	r2, r9
 8009d82:	4631      	mov	r1, r6
 8009d84:	4628      	mov	r0, r5
 8009d86:	47b8      	blx	r7
 8009d88:	3001      	adds	r0, #1
 8009d8a:	f43f ae38 	beq.w	80099fe <_printf_float+0xc2>
 8009d8e:	f108 0801 	add.w	r8, r8, #1
 8009d92:	68e3      	ldr	r3, [r4, #12]
 8009d94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d96:	1a5b      	subs	r3, r3, r1
 8009d98:	4543      	cmp	r3, r8
 8009d9a:	dcf0      	bgt.n	8009d7e <_printf_float+0x442>
 8009d9c:	e6fa      	b.n	8009b94 <_printf_float+0x258>
 8009d9e:	f04f 0800 	mov.w	r8, #0
 8009da2:	f104 0919 	add.w	r9, r4, #25
 8009da6:	e7f4      	b.n	8009d92 <_printf_float+0x456>

08009da8 <_printf_common>:
 8009da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dac:	4616      	mov	r6, r2
 8009dae:	4699      	mov	r9, r3
 8009db0:	688a      	ldr	r2, [r1, #8]
 8009db2:	690b      	ldr	r3, [r1, #16]
 8009db4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009db8:	4293      	cmp	r3, r2
 8009dba:	bfb8      	it	lt
 8009dbc:	4613      	movlt	r3, r2
 8009dbe:	6033      	str	r3, [r6, #0]
 8009dc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009dc4:	4607      	mov	r7, r0
 8009dc6:	460c      	mov	r4, r1
 8009dc8:	b10a      	cbz	r2, 8009dce <_printf_common+0x26>
 8009dca:	3301      	adds	r3, #1
 8009dcc:	6033      	str	r3, [r6, #0]
 8009dce:	6823      	ldr	r3, [r4, #0]
 8009dd0:	0699      	lsls	r1, r3, #26
 8009dd2:	bf42      	ittt	mi
 8009dd4:	6833      	ldrmi	r3, [r6, #0]
 8009dd6:	3302      	addmi	r3, #2
 8009dd8:	6033      	strmi	r3, [r6, #0]
 8009dda:	6825      	ldr	r5, [r4, #0]
 8009ddc:	f015 0506 	ands.w	r5, r5, #6
 8009de0:	d106      	bne.n	8009df0 <_printf_common+0x48>
 8009de2:	f104 0a19 	add.w	sl, r4, #25
 8009de6:	68e3      	ldr	r3, [r4, #12]
 8009de8:	6832      	ldr	r2, [r6, #0]
 8009dea:	1a9b      	subs	r3, r3, r2
 8009dec:	42ab      	cmp	r3, r5
 8009dee:	dc26      	bgt.n	8009e3e <_printf_common+0x96>
 8009df0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009df4:	1e13      	subs	r3, r2, #0
 8009df6:	6822      	ldr	r2, [r4, #0]
 8009df8:	bf18      	it	ne
 8009dfa:	2301      	movne	r3, #1
 8009dfc:	0692      	lsls	r2, r2, #26
 8009dfe:	d42b      	bmi.n	8009e58 <_printf_common+0xb0>
 8009e00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e04:	4649      	mov	r1, r9
 8009e06:	4638      	mov	r0, r7
 8009e08:	47c0      	blx	r8
 8009e0a:	3001      	adds	r0, #1
 8009e0c:	d01e      	beq.n	8009e4c <_printf_common+0xa4>
 8009e0e:	6823      	ldr	r3, [r4, #0]
 8009e10:	68e5      	ldr	r5, [r4, #12]
 8009e12:	6832      	ldr	r2, [r6, #0]
 8009e14:	f003 0306 	and.w	r3, r3, #6
 8009e18:	2b04      	cmp	r3, #4
 8009e1a:	bf08      	it	eq
 8009e1c:	1aad      	subeq	r5, r5, r2
 8009e1e:	68a3      	ldr	r3, [r4, #8]
 8009e20:	6922      	ldr	r2, [r4, #16]
 8009e22:	bf0c      	ite	eq
 8009e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e28:	2500      	movne	r5, #0
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	bfc4      	itt	gt
 8009e2e:	1a9b      	subgt	r3, r3, r2
 8009e30:	18ed      	addgt	r5, r5, r3
 8009e32:	2600      	movs	r6, #0
 8009e34:	341a      	adds	r4, #26
 8009e36:	42b5      	cmp	r5, r6
 8009e38:	d11a      	bne.n	8009e70 <_printf_common+0xc8>
 8009e3a:	2000      	movs	r0, #0
 8009e3c:	e008      	b.n	8009e50 <_printf_common+0xa8>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	4652      	mov	r2, sl
 8009e42:	4649      	mov	r1, r9
 8009e44:	4638      	mov	r0, r7
 8009e46:	47c0      	blx	r8
 8009e48:	3001      	adds	r0, #1
 8009e4a:	d103      	bne.n	8009e54 <_printf_common+0xac>
 8009e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e54:	3501      	adds	r5, #1
 8009e56:	e7c6      	b.n	8009de6 <_printf_common+0x3e>
 8009e58:	18e1      	adds	r1, r4, r3
 8009e5a:	1c5a      	adds	r2, r3, #1
 8009e5c:	2030      	movs	r0, #48	; 0x30
 8009e5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e62:	4422      	add	r2, r4
 8009e64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e6c:	3302      	adds	r3, #2
 8009e6e:	e7c7      	b.n	8009e00 <_printf_common+0x58>
 8009e70:	2301      	movs	r3, #1
 8009e72:	4622      	mov	r2, r4
 8009e74:	4649      	mov	r1, r9
 8009e76:	4638      	mov	r0, r7
 8009e78:	47c0      	blx	r8
 8009e7a:	3001      	adds	r0, #1
 8009e7c:	d0e6      	beq.n	8009e4c <_printf_common+0xa4>
 8009e7e:	3601      	adds	r6, #1
 8009e80:	e7d9      	b.n	8009e36 <_printf_common+0x8e>
	...

08009e84 <_printf_i>:
 8009e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e88:	7e0f      	ldrb	r7, [r1, #24]
 8009e8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e8c:	2f78      	cmp	r7, #120	; 0x78
 8009e8e:	4691      	mov	r9, r2
 8009e90:	4680      	mov	r8, r0
 8009e92:	460c      	mov	r4, r1
 8009e94:	469a      	mov	sl, r3
 8009e96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e9a:	d807      	bhi.n	8009eac <_printf_i+0x28>
 8009e9c:	2f62      	cmp	r7, #98	; 0x62
 8009e9e:	d80a      	bhi.n	8009eb6 <_printf_i+0x32>
 8009ea0:	2f00      	cmp	r7, #0
 8009ea2:	f000 80d8 	beq.w	800a056 <_printf_i+0x1d2>
 8009ea6:	2f58      	cmp	r7, #88	; 0x58
 8009ea8:	f000 80a3 	beq.w	8009ff2 <_printf_i+0x16e>
 8009eac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009eb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009eb4:	e03a      	b.n	8009f2c <_printf_i+0xa8>
 8009eb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009eba:	2b15      	cmp	r3, #21
 8009ebc:	d8f6      	bhi.n	8009eac <_printf_i+0x28>
 8009ebe:	a101      	add	r1, pc, #4	; (adr r1, 8009ec4 <_printf_i+0x40>)
 8009ec0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ec4:	08009f1d 	.word	0x08009f1d
 8009ec8:	08009f31 	.word	0x08009f31
 8009ecc:	08009ead 	.word	0x08009ead
 8009ed0:	08009ead 	.word	0x08009ead
 8009ed4:	08009ead 	.word	0x08009ead
 8009ed8:	08009ead 	.word	0x08009ead
 8009edc:	08009f31 	.word	0x08009f31
 8009ee0:	08009ead 	.word	0x08009ead
 8009ee4:	08009ead 	.word	0x08009ead
 8009ee8:	08009ead 	.word	0x08009ead
 8009eec:	08009ead 	.word	0x08009ead
 8009ef0:	0800a03d 	.word	0x0800a03d
 8009ef4:	08009f61 	.word	0x08009f61
 8009ef8:	0800a01f 	.word	0x0800a01f
 8009efc:	08009ead 	.word	0x08009ead
 8009f00:	08009ead 	.word	0x08009ead
 8009f04:	0800a05f 	.word	0x0800a05f
 8009f08:	08009ead 	.word	0x08009ead
 8009f0c:	08009f61 	.word	0x08009f61
 8009f10:	08009ead 	.word	0x08009ead
 8009f14:	08009ead 	.word	0x08009ead
 8009f18:	0800a027 	.word	0x0800a027
 8009f1c:	682b      	ldr	r3, [r5, #0]
 8009f1e:	1d1a      	adds	r2, r3, #4
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	602a      	str	r2, [r5, #0]
 8009f24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e0a3      	b.n	800a078 <_printf_i+0x1f4>
 8009f30:	6820      	ldr	r0, [r4, #0]
 8009f32:	6829      	ldr	r1, [r5, #0]
 8009f34:	0606      	lsls	r6, r0, #24
 8009f36:	f101 0304 	add.w	r3, r1, #4
 8009f3a:	d50a      	bpl.n	8009f52 <_printf_i+0xce>
 8009f3c:	680e      	ldr	r6, [r1, #0]
 8009f3e:	602b      	str	r3, [r5, #0]
 8009f40:	2e00      	cmp	r6, #0
 8009f42:	da03      	bge.n	8009f4c <_printf_i+0xc8>
 8009f44:	232d      	movs	r3, #45	; 0x2d
 8009f46:	4276      	negs	r6, r6
 8009f48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f4c:	485e      	ldr	r0, [pc, #376]	; (800a0c8 <_printf_i+0x244>)
 8009f4e:	230a      	movs	r3, #10
 8009f50:	e019      	b.n	8009f86 <_printf_i+0x102>
 8009f52:	680e      	ldr	r6, [r1, #0]
 8009f54:	602b      	str	r3, [r5, #0]
 8009f56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f5a:	bf18      	it	ne
 8009f5c:	b236      	sxthne	r6, r6
 8009f5e:	e7ef      	b.n	8009f40 <_printf_i+0xbc>
 8009f60:	682b      	ldr	r3, [r5, #0]
 8009f62:	6820      	ldr	r0, [r4, #0]
 8009f64:	1d19      	adds	r1, r3, #4
 8009f66:	6029      	str	r1, [r5, #0]
 8009f68:	0601      	lsls	r1, r0, #24
 8009f6a:	d501      	bpl.n	8009f70 <_printf_i+0xec>
 8009f6c:	681e      	ldr	r6, [r3, #0]
 8009f6e:	e002      	b.n	8009f76 <_printf_i+0xf2>
 8009f70:	0646      	lsls	r6, r0, #25
 8009f72:	d5fb      	bpl.n	8009f6c <_printf_i+0xe8>
 8009f74:	881e      	ldrh	r6, [r3, #0]
 8009f76:	4854      	ldr	r0, [pc, #336]	; (800a0c8 <_printf_i+0x244>)
 8009f78:	2f6f      	cmp	r7, #111	; 0x6f
 8009f7a:	bf0c      	ite	eq
 8009f7c:	2308      	moveq	r3, #8
 8009f7e:	230a      	movne	r3, #10
 8009f80:	2100      	movs	r1, #0
 8009f82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f86:	6865      	ldr	r5, [r4, #4]
 8009f88:	60a5      	str	r5, [r4, #8]
 8009f8a:	2d00      	cmp	r5, #0
 8009f8c:	bfa2      	ittt	ge
 8009f8e:	6821      	ldrge	r1, [r4, #0]
 8009f90:	f021 0104 	bicge.w	r1, r1, #4
 8009f94:	6021      	strge	r1, [r4, #0]
 8009f96:	b90e      	cbnz	r6, 8009f9c <_printf_i+0x118>
 8009f98:	2d00      	cmp	r5, #0
 8009f9a:	d04d      	beq.n	800a038 <_printf_i+0x1b4>
 8009f9c:	4615      	mov	r5, r2
 8009f9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009fa2:	fb03 6711 	mls	r7, r3, r1, r6
 8009fa6:	5dc7      	ldrb	r7, [r0, r7]
 8009fa8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009fac:	4637      	mov	r7, r6
 8009fae:	42bb      	cmp	r3, r7
 8009fb0:	460e      	mov	r6, r1
 8009fb2:	d9f4      	bls.n	8009f9e <_printf_i+0x11a>
 8009fb4:	2b08      	cmp	r3, #8
 8009fb6:	d10b      	bne.n	8009fd0 <_printf_i+0x14c>
 8009fb8:	6823      	ldr	r3, [r4, #0]
 8009fba:	07de      	lsls	r6, r3, #31
 8009fbc:	d508      	bpl.n	8009fd0 <_printf_i+0x14c>
 8009fbe:	6923      	ldr	r3, [r4, #16]
 8009fc0:	6861      	ldr	r1, [r4, #4]
 8009fc2:	4299      	cmp	r1, r3
 8009fc4:	bfde      	ittt	le
 8009fc6:	2330      	movle	r3, #48	; 0x30
 8009fc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009fcc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009fd0:	1b52      	subs	r2, r2, r5
 8009fd2:	6122      	str	r2, [r4, #16]
 8009fd4:	f8cd a000 	str.w	sl, [sp]
 8009fd8:	464b      	mov	r3, r9
 8009fda:	aa03      	add	r2, sp, #12
 8009fdc:	4621      	mov	r1, r4
 8009fde:	4640      	mov	r0, r8
 8009fe0:	f7ff fee2 	bl	8009da8 <_printf_common>
 8009fe4:	3001      	adds	r0, #1
 8009fe6:	d14c      	bne.n	800a082 <_printf_i+0x1fe>
 8009fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fec:	b004      	add	sp, #16
 8009fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff2:	4835      	ldr	r0, [pc, #212]	; (800a0c8 <_printf_i+0x244>)
 8009ff4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009ff8:	6829      	ldr	r1, [r5, #0]
 8009ffa:	6823      	ldr	r3, [r4, #0]
 8009ffc:	f851 6b04 	ldr.w	r6, [r1], #4
 800a000:	6029      	str	r1, [r5, #0]
 800a002:	061d      	lsls	r5, r3, #24
 800a004:	d514      	bpl.n	800a030 <_printf_i+0x1ac>
 800a006:	07df      	lsls	r7, r3, #31
 800a008:	bf44      	itt	mi
 800a00a:	f043 0320 	orrmi.w	r3, r3, #32
 800a00e:	6023      	strmi	r3, [r4, #0]
 800a010:	b91e      	cbnz	r6, 800a01a <_printf_i+0x196>
 800a012:	6823      	ldr	r3, [r4, #0]
 800a014:	f023 0320 	bic.w	r3, r3, #32
 800a018:	6023      	str	r3, [r4, #0]
 800a01a:	2310      	movs	r3, #16
 800a01c:	e7b0      	b.n	8009f80 <_printf_i+0xfc>
 800a01e:	6823      	ldr	r3, [r4, #0]
 800a020:	f043 0320 	orr.w	r3, r3, #32
 800a024:	6023      	str	r3, [r4, #0]
 800a026:	2378      	movs	r3, #120	; 0x78
 800a028:	4828      	ldr	r0, [pc, #160]	; (800a0cc <_printf_i+0x248>)
 800a02a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a02e:	e7e3      	b.n	8009ff8 <_printf_i+0x174>
 800a030:	0659      	lsls	r1, r3, #25
 800a032:	bf48      	it	mi
 800a034:	b2b6      	uxthmi	r6, r6
 800a036:	e7e6      	b.n	800a006 <_printf_i+0x182>
 800a038:	4615      	mov	r5, r2
 800a03a:	e7bb      	b.n	8009fb4 <_printf_i+0x130>
 800a03c:	682b      	ldr	r3, [r5, #0]
 800a03e:	6826      	ldr	r6, [r4, #0]
 800a040:	6961      	ldr	r1, [r4, #20]
 800a042:	1d18      	adds	r0, r3, #4
 800a044:	6028      	str	r0, [r5, #0]
 800a046:	0635      	lsls	r5, r6, #24
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	d501      	bpl.n	800a050 <_printf_i+0x1cc>
 800a04c:	6019      	str	r1, [r3, #0]
 800a04e:	e002      	b.n	800a056 <_printf_i+0x1d2>
 800a050:	0670      	lsls	r0, r6, #25
 800a052:	d5fb      	bpl.n	800a04c <_printf_i+0x1c8>
 800a054:	8019      	strh	r1, [r3, #0]
 800a056:	2300      	movs	r3, #0
 800a058:	6123      	str	r3, [r4, #16]
 800a05a:	4615      	mov	r5, r2
 800a05c:	e7ba      	b.n	8009fd4 <_printf_i+0x150>
 800a05e:	682b      	ldr	r3, [r5, #0]
 800a060:	1d1a      	adds	r2, r3, #4
 800a062:	602a      	str	r2, [r5, #0]
 800a064:	681d      	ldr	r5, [r3, #0]
 800a066:	6862      	ldr	r2, [r4, #4]
 800a068:	2100      	movs	r1, #0
 800a06a:	4628      	mov	r0, r5
 800a06c:	f7f6 f8d8 	bl	8000220 <memchr>
 800a070:	b108      	cbz	r0, 800a076 <_printf_i+0x1f2>
 800a072:	1b40      	subs	r0, r0, r5
 800a074:	6060      	str	r0, [r4, #4]
 800a076:	6863      	ldr	r3, [r4, #4]
 800a078:	6123      	str	r3, [r4, #16]
 800a07a:	2300      	movs	r3, #0
 800a07c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a080:	e7a8      	b.n	8009fd4 <_printf_i+0x150>
 800a082:	6923      	ldr	r3, [r4, #16]
 800a084:	462a      	mov	r2, r5
 800a086:	4649      	mov	r1, r9
 800a088:	4640      	mov	r0, r8
 800a08a:	47d0      	blx	sl
 800a08c:	3001      	adds	r0, #1
 800a08e:	d0ab      	beq.n	8009fe8 <_printf_i+0x164>
 800a090:	6823      	ldr	r3, [r4, #0]
 800a092:	079b      	lsls	r3, r3, #30
 800a094:	d413      	bmi.n	800a0be <_printf_i+0x23a>
 800a096:	68e0      	ldr	r0, [r4, #12]
 800a098:	9b03      	ldr	r3, [sp, #12]
 800a09a:	4298      	cmp	r0, r3
 800a09c:	bfb8      	it	lt
 800a09e:	4618      	movlt	r0, r3
 800a0a0:	e7a4      	b.n	8009fec <_printf_i+0x168>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	4632      	mov	r2, r6
 800a0a6:	4649      	mov	r1, r9
 800a0a8:	4640      	mov	r0, r8
 800a0aa:	47d0      	blx	sl
 800a0ac:	3001      	adds	r0, #1
 800a0ae:	d09b      	beq.n	8009fe8 <_printf_i+0x164>
 800a0b0:	3501      	adds	r5, #1
 800a0b2:	68e3      	ldr	r3, [r4, #12]
 800a0b4:	9903      	ldr	r1, [sp, #12]
 800a0b6:	1a5b      	subs	r3, r3, r1
 800a0b8:	42ab      	cmp	r3, r5
 800a0ba:	dcf2      	bgt.n	800a0a2 <_printf_i+0x21e>
 800a0bc:	e7eb      	b.n	800a096 <_printf_i+0x212>
 800a0be:	2500      	movs	r5, #0
 800a0c0:	f104 0619 	add.w	r6, r4, #25
 800a0c4:	e7f5      	b.n	800a0b2 <_printf_i+0x22e>
 800a0c6:	bf00      	nop
 800a0c8:	0800c87a 	.word	0x0800c87a
 800a0cc:	0800c88b 	.word	0x0800c88b

0800a0d0 <_sbrk_r>:
 800a0d0:	b538      	push	{r3, r4, r5, lr}
 800a0d2:	4d06      	ldr	r5, [pc, #24]	; (800a0ec <_sbrk_r+0x1c>)
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	4608      	mov	r0, r1
 800a0da:	602b      	str	r3, [r5, #0]
 800a0dc:	f7fa feac 	bl	8004e38 <_sbrk>
 800a0e0:	1c43      	adds	r3, r0, #1
 800a0e2:	d102      	bne.n	800a0ea <_sbrk_r+0x1a>
 800a0e4:	682b      	ldr	r3, [r5, #0]
 800a0e6:	b103      	cbz	r3, 800a0ea <_sbrk_r+0x1a>
 800a0e8:	6023      	str	r3, [r4, #0]
 800a0ea:	bd38      	pop	{r3, r4, r5, pc}
 800a0ec:	20002b24 	.word	0x20002b24

0800a0f0 <siprintf>:
 800a0f0:	b40e      	push	{r1, r2, r3}
 800a0f2:	b500      	push	{lr}
 800a0f4:	b09c      	sub	sp, #112	; 0x70
 800a0f6:	ab1d      	add	r3, sp, #116	; 0x74
 800a0f8:	9002      	str	r0, [sp, #8]
 800a0fa:	9006      	str	r0, [sp, #24]
 800a0fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a100:	4809      	ldr	r0, [pc, #36]	; (800a128 <siprintf+0x38>)
 800a102:	9107      	str	r1, [sp, #28]
 800a104:	9104      	str	r1, [sp, #16]
 800a106:	4909      	ldr	r1, [pc, #36]	; (800a12c <siprintf+0x3c>)
 800a108:	f853 2b04 	ldr.w	r2, [r3], #4
 800a10c:	9105      	str	r1, [sp, #20]
 800a10e:	6800      	ldr	r0, [r0, #0]
 800a110:	9301      	str	r3, [sp, #4]
 800a112:	a902      	add	r1, sp, #8
 800a114:	f001 faae 	bl	800b674 <_svfiprintf_r>
 800a118:	9b02      	ldr	r3, [sp, #8]
 800a11a:	2200      	movs	r2, #0
 800a11c:	701a      	strb	r2, [r3, #0]
 800a11e:	b01c      	add	sp, #112	; 0x70
 800a120:	f85d eb04 	ldr.w	lr, [sp], #4
 800a124:	b003      	add	sp, #12
 800a126:	4770      	bx	lr
 800a128:	200023fc 	.word	0x200023fc
 800a12c:	ffff0208 	.word	0xffff0208

0800a130 <strncat>:
 800a130:	b530      	push	{r4, r5, lr}
 800a132:	4604      	mov	r4, r0
 800a134:	7825      	ldrb	r5, [r4, #0]
 800a136:	4623      	mov	r3, r4
 800a138:	3401      	adds	r4, #1
 800a13a:	2d00      	cmp	r5, #0
 800a13c:	d1fa      	bne.n	800a134 <strncat+0x4>
 800a13e:	3a01      	subs	r2, #1
 800a140:	d304      	bcc.n	800a14c <strncat+0x1c>
 800a142:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a146:	f803 4b01 	strb.w	r4, [r3], #1
 800a14a:	b904      	cbnz	r4, 800a14e <strncat+0x1e>
 800a14c:	bd30      	pop	{r4, r5, pc}
 800a14e:	2a00      	cmp	r2, #0
 800a150:	d1f5      	bne.n	800a13e <strncat+0xe>
 800a152:	701a      	strb	r2, [r3, #0]
 800a154:	e7f3      	b.n	800a13e <strncat+0xe>

0800a156 <quorem>:
 800a156:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a15a:	6903      	ldr	r3, [r0, #16]
 800a15c:	690c      	ldr	r4, [r1, #16]
 800a15e:	42a3      	cmp	r3, r4
 800a160:	4607      	mov	r7, r0
 800a162:	f2c0 8081 	blt.w	800a268 <quorem+0x112>
 800a166:	3c01      	subs	r4, #1
 800a168:	f101 0814 	add.w	r8, r1, #20
 800a16c:	f100 0514 	add.w	r5, r0, #20
 800a170:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a174:	9301      	str	r3, [sp, #4]
 800a176:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a17a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a17e:	3301      	adds	r3, #1
 800a180:	429a      	cmp	r2, r3
 800a182:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a186:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a18a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a18e:	d331      	bcc.n	800a1f4 <quorem+0x9e>
 800a190:	f04f 0e00 	mov.w	lr, #0
 800a194:	4640      	mov	r0, r8
 800a196:	46ac      	mov	ip, r5
 800a198:	46f2      	mov	sl, lr
 800a19a:	f850 2b04 	ldr.w	r2, [r0], #4
 800a19e:	b293      	uxth	r3, r2
 800a1a0:	fb06 e303 	mla	r3, r6, r3, lr
 800a1a4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	ebaa 0303 	sub.w	r3, sl, r3
 800a1ae:	f8dc a000 	ldr.w	sl, [ip]
 800a1b2:	0c12      	lsrs	r2, r2, #16
 800a1b4:	fa13 f38a 	uxtah	r3, r3, sl
 800a1b8:	fb06 e202 	mla	r2, r6, r2, lr
 800a1bc:	9300      	str	r3, [sp, #0]
 800a1be:	9b00      	ldr	r3, [sp, #0]
 800a1c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a1c4:	b292      	uxth	r2, r2
 800a1c6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a1ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1ce:	f8bd 3000 	ldrh.w	r3, [sp]
 800a1d2:	4581      	cmp	r9, r0
 800a1d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1d8:	f84c 3b04 	str.w	r3, [ip], #4
 800a1dc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a1e0:	d2db      	bcs.n	800a19a <quorem+0x44>
 800a1e2:	f855 300b 	ldr.w	r3, [r5, fp]
 800a1e6:	b92b      	cbnz	r3, 800a1f4 <quorem+0x9e>
 800a1e8:	9b01      	ldr	r3, [sp, #4]
 800a1ea:	3b04      	subs	r3, #4
 800a1ec:	429d      	cmp	r5, r3
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	d32e      	bcc.n	800a250 <quorem+0xfa>
 800a1f2:	613c      	str	r4, [r7, #16]
 800a1f4:	4638      	mov	r0, r7
 800a1f6:	f001 f8c9 	bl	800b38c <__mcmp>
 800a1fa:	2800      	cmp	r0, #0
 800a1fc:	db24      	blt.n	800a248 <quorem+0xf2>
 800a1fe:	3601      	adds	r6, #1
 800a200:	4628      	mov	r0, r5
 800a202:	f04f 0c00 	mov.w	ip, #0
 800a206:	f858 2b04 	ldr.w	r2, [r8], #4
 800a20a:	f8d0 e000 	ldr.w	lr, [r0]
 800a20e:	b293      	uxth	r3, r2
 800a210:	ebac 0303 	sub.w	r3, ip, r3
 800a214:	0c12      	lsrs	r2, r2, #16
 800a216:	fa13 f38e 	uxtah	r3, r3, lr
 800a21a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a21e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a222:	b29b      	uxth	r3, r3
 800a224:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a228:	45c1      	cmp	r9, r8
 800a22a:	f840 3b04 	str.w	r3, [r0], #4
 800a22e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a232:	d2e8      	bcs.n	800a206 <quorem+0xb0>
 800a234:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a238:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a23c:	b922      	cbnz	r2, 800a248 <quorem+0xf2>
 800a23e:	3b04      	subs	r3, #4
 800a240:	429d      	cmp	r5, r3
 800a242:	461a      	mov	r2, r3
 800a244:	d30a      	bcc.n	800a25c <quorem+0x106>
 800a246:	613c      	str	r4, [r7, #16]
 800a248:	4630      	mov	r0, r6
 800a24a:	b003      	add	sp, #12
 800a24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a250:	6812      	ldr	r2, [r2, #0]
 800a252:	3b04      	subs	r3, #4
 800a254:	2a00      	cmp	r2, #0
 800a256:	d1cc      	bne.n	800a1f2 <quorem+0x9c>
 800a258:	3c01      	subs	r4, #1
 800a25a:	e7c7      	b.n	800a1ec <quorem+0x96>
 800a25c:	6812      	ldr	r2, [r2, #0]
 800a25e:	3b04      	subs	r3, #4
 800a260:	2a00      	cmp	r2, #0
 800a262:	d1f0      	bne.n	800a246 <quorem+0xf0>
 800a264:	3c01      	subs	r4, #1
 800a266:	e7eb      	b.n	800a240 <quorem+0xea>
 800a268:	2000      	movs	r0, #0
 800a26a:	e7ee      	b.n	800a24a <quorem+0xf4>
 800a26c:	0000      	movs	r0, r0
	...

0800a270 <_dtoa_r>:
 800a270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a274:	ed2d 8b04 	vpush	{d8-d9}
 800a278:	ec57 6b10 	vmov	r6, r7, d0
 800a27c:	b093      	sub	sp, #76	; 0x4c
 800a27e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a280:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a284:	9106      	str	r1, [sp, #24]
 800a286:	ee10 aa10 	vmov	sl, s0
 800a28a:	4604      	mov	r4, r0
 800a28c:	9209      	str	r2, [sp, #36]	; 0x24
 800a28e:	930c      	str	r3, [sp, #48]	; 0x30
 800a290:	46bb      	mov	fp, r7
 800a292:	b975      	cbnz	r5, 800a2b2 <_dtoa_r+0x42>
 800a294:	2010      	movs	r0, #16
 800a296:	f7ff f9b9 	bl	800960c <malloc>
 800a29a:	4602      	mov	r2, r0
 800a29c:	6260      	str	r0, [r4, #36]	; 0x24
 800a29e:	b920      	cbnz	r0, 800a2aa <_dtoa_r+0x3a>
 800a2a0:	4ba7      	ldr	r3, [pc, #668]	; (800a540 <_dtoa_r+0x2d0>)
 800a2a2:	21ea      	movs	r1, #234	; 0xea
 800a2a4:	48a7      	ldr	r0, [pc, #668]	; (800a544 <_dtoa_r+0x2d4>)
 800a2a6:	f001 fae5 	bl	800b874 <__assert_func>
 800a2aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a2ae:	6005      	str	r5, [r0, #0]
 800a2b0:	60c5      	str	r5, [r0, #12]
 800a2b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2b4:	6819      	ldr	r1, [r3, #0]
 800a2b6:	b151      	cbz	r1, 800a2ce <_dtoa_r+0x5e>
 800a2b8:	685a      	ldr	r2, [r3, #4]
 800a2ba:	604a      	str	r2, [r1, #4]
 800a2bc:	2301      	movs	r3, #1
 800a2be:	4093      	lsls	r3, r2
 800a2c0:	608b      	str	r3, [r1, #8]
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	f000 fe20 	bl	800af08 <_Bfree>
 800a2c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	601a      	str	r2, [r3, #0]
 800a2ce:	1e3b      	subs	r3, r7, #0
 800a2d0:	bfaa      	itet	ge
 800a2d2:	2300      	movge	r3, #0
 800a2d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a2d8:	f8c8 3000 	strge.w	r3, [r8]
 800a2dc:	4b9a      	ldr	r3, [pc, #616]	; (800a548 <_dtoa_r+0x2d8>)
 800a2de:	bfbc      	itt	lt
 800a2e0:	2201      	movlt	r2, #1
 800a2e2:	f8c8 2000 	strlt.w	r2, [r8]
 800a2e6:	ea33 030b 	bics.w	r3, r3, fp
 800a2ea:	d11b      	bne.n	800a324 <_dtoa_r+0xb4>
 800a2ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2ee:	f242 730f 	movw	r3, #9999	; 0x270f
 800a2f2:	6013      	str	r3, [r2, #0]
 800a2f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2f8:	4333      	orrs	r3, r6
 800a2fa:	f000 8592 	beq.w	800ae22 <_dtoa_r+0xbb2>
 800a2fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a300:	b963      	cbnz	r3, 800a31c <_dtoa_r+0xac>
 800a302:	4b92      	ldr	r3, [pc, #584]	; (800a54c <_dtoa_r+0x2dc>)
 800a304:	e022      	b.n	800a34c <_dtoa_r+0xdc>
 800a306:	4b92      	ldr	r3, [pc, #584]	; (800a550 <_dtoa_r+0x2e0>)
 800a308:	9301      	str	r3, [sp, #4]
 800a30a:	3308      	adds	r3, #8
 800a30c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a30e:	6013      	str	r3, [r2, #0]
 800a310:	9801      	ldr	r0, [sp, #4]
 800a312:	b013      	add	sp, #76	; 0x4c
 800a314:	ecbd 8b04 	vpop	{d8-d9}
 800a318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a31c:	4b8b      	ldr	r3, [pc, #556]	; (800a54c <_dtoa_r+0x2dc>)
 800a31e:	9301      	str	r3, [sp, #4]
 800a320:	3303      	adds	r3, #3
 800a322:	e7f3      	b.n	800a30c <_dtoa_r+0x9c>
 800a324:	2200      	movs	r2, #0
 800a326:	2300      	movs	r3, #0
 800a328:	4650      	mov	r0, sl
 800a32a:	4659      	mov	r1, fp
 800a32c:	f7f6 fbec 	bl	8000b08 <__aeabi_dcmpeq>
 800a330:	ec4b ab19 	vmov	d9, sl, fp
 800a334:	4680      	mov	r8, r0
 800a336:	b158      	cbz	r0, 800a350 <_dtoa_r+0xe0>
 800a338:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a33a:	2301      	movs	r3, #1
 800a33c:	6013      	str	r3, [r2, #0]
 800a33e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a340:	2b00      	cmp	r3, #0
 800a342:	f000 856b 	beq.w	800ae1c <_dtoa_r+0xbac>
 800a346:	4883      	ldr	r0, [pc, #524]	; (800a554 <_dtoa_r+0x2e4>)
 800a348:	6018      	str	r0, [r3, #0]
 800a34a:	1e43      	subs	r3, r0, #1
 800a34c:	9301      	str	r3, [sp, #4]
 800a34e:	e7df      	b.n	800a310 <_dtoa_r+0xa0>
 800a350:	ec4b ab10 	vmov	d0, sl, fp
 800a354:	aa10      	add	r2, sp, #64	; 0x40
 800a356:	a911      	add	r1, sp, #68	; 0x44
 800a358:	4620      	mov	r0, r4
 800a35a:	f001 f8bd 	bl	800b4d8 <__d2b>
 800a35e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a362:	ee08 0a10 	vmov	s16, r0
 800a366:	2d00      	cmp	r5, #0
 800a368:	f000 8084 	beq.w	800a474 <_dtoa_r+0x204>
 800a36c:	ee19 3a90 	vmov	r3, s19
 800a370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a374:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a378:	4656      	mov	r6, sl
 800a37a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a37e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a382:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a386:	4b74      	ldr	r3, [pc, #464]	; (800a558 <_dtoa_r+0x2e8>)
 800a388:	2200      	movs	r2, #0
 800a38a:	4630      	mov	r0, r6
 800a38c:	4639      	mov	r1, r7
 800a38e:	f7f5 ff9b 	bl	80002c8 <__aeabi_dsub>
 800a392:	a365      	add	r3, pc, #404	; (adr r3, 800a528 <_dtoa_r+0x2b8>)
 800a394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a398:	f7f6 f94e 	bl	8000638 <__aeabi_dmul>
 800a39c:	a364      	add	r3, pc, #400	; (adr r3, 800a530 <_dtoa_r+0x2c0>)
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	f7f5 ff93 	bl	80002cc <__adddf3>
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	460f      	mov	r7, r1
 800a3ac:	f7f6 f8da 	bl	8000564 <__aeabi_i2d>
 800a3b0:	a361      	add	r3, pc, #388	; (adr r3, 800a538 <_dtoa_r+0x2c8>)
 800a3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b6:	f7f6 f93f 	bl	8000638 <__aeabi_dmul>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	460b      	mov	r3, r1
 800a3be:	4630      	mov	r0, r6
 800a3c0:	4639      	mov	r1, r7
 800a3c2:	f7f5 ff83 	bl	80002cc <__adddf3>
 800a3c6:	4606      	mov	r6, r0
 800a3c8:	460f      	mov	r7, r1
 800a3ca:	f7f6 fbe5 	bl	8000b98 <__aeabi_d2iz>
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	9000      	str	r0, [sp, #0]
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	4630      	mov	r0, r6
 800a3d6:	4639      	mov	r1, r7
 800a3d8:	f7f6 fba0 	bl	8000b1c <__aeabi_dcmplt>
 800a3dc:	b150      	cbz	r0, 800a3f4 <_dtoa_r+0x184>
 800a3de:	9800      	ldr	r0, [sp, #0]
 800a3e0:	f7f6 f8c0 	bl	8000564 <__aeabi_i2d>
 800a3e4:	4632      	mov	r2, r6
 800a3e6:	463b      	mov	r3, r7
 800a3e8:	f7f6 fb8e 	bl	8000b08 <__aeabi_dcmpeq>
 800a3ec:	b910      	cbnz	r0, 800a3f4 <_dtoa_r+0x184>
 800a3ee:	9b00      	ldr	r3, [sp, #0]
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	9300      	str	r3, [sp, #0]
 800a3f4:	9b00      	ldr	r3, [sp, #0]
 800a3f6:	2b16      	cmp	r3, #22
 800a3f8:	d85a      	bhi.n	800a4b0 <_dtoa_r+0x240>
 800a3fa:	9a00      	ldr	r2, [sp, #0]
 800a3fc:	4b57      	ldr	r3, [pc, #348]	; (800a55c <_dtoa_r+0x2ec>)
 800a3fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a406:	ec51 0b19 	vmov	r0, r1, d9
 800a40a:	f7f6 fb87 	bl	8000b1c <__aeabi_dcmplt>
 800a40e:	2800      	cmp	r0, #0
 800a410:	d050      	beq.n	800a4b4 <_dtoa_r+0x244>
 800a412:	9b00      	ldr	r3, [sp, #0]
 800a414:	3b01      	subs	r3, #1
 800a416:	9300      	str	r3, [sp, #0]
 800a418:	2300      	movs	r3, #0
 800a41a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a41c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a41e:	1b5d      	subs	r5, r3, r5
 800a420:	1e6b      	subs	r3, r5, #1
 800a422:	9305      	str	r3, [sp, #20]
 800a424:	bf45      	ittet	mi
 800a426:	f1c5 0301 	rsbmi	r3, r5, #1
 800a42a:	9304      	strmi	r3, [sp, #16]
 800a42c:	2300      	movpl	r3, #0
 800a42e:	2300      	movmi	r3, #0
 800a430:	bf4c      	ite	mi
 800a432:	9305      	strmi	r3, [sp, #20]
 800a434:	9304      	strpl	r3, [sp, #16]
 800a436:	9b00      	ldr	r3, [sp, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	db3d      	blt.n	800a4b8 <_dtoa_r+0x248>
 800a43c:	9b05      	ldr	r3, [sp, #20]
 800a43e:	9a00      	ldr	r2, [sp, #0]
 800a440:	920a      	str	r2, [sp, #40]	; 0x28
 800a442:	4413      	add	r3, r2
 800a444:	9305      	str	r3, [sp, #20]
 800a446:	2300      	movs	r3, #0
 800a448:	9307      	str	r3, [sp, #28]
 800a44a:	9b06      	ldr	r3, [sp, #24]
 800a44c:	2b09      	cmp	r3, #9
 800a44e:	f200 8089 	bhi.w	800a564 <_dtoa_r+0x2f4>
 800a452:	2b05      	cmp	r3, #5
 800a454:	bfc4      	itt	gt
 800a456:	3b04      	subgt	r3, #4
 800a458:	9306      	strgt	r3, [sp, #24]
 800a45a:	9b06      	ldr	r3, [sp, #24]
 800a45c:	f1a3 0302 	sub.w	r3, r3, #2
 800a460:	bfcc      	ite	gt
 800a462:	2500      	movgt	r5, #0
 800a464:	2501      	movle	r5, #1
 800a466:	2b03      	cmp	r3, #3
 800a468:	f200 8087 	bhi.w	800a57a <_dtoa_r+0x30a>
 800a46c:	e8df f003 	tbb	[pc, r3]
 800a470:	59383a2d 	.word	0x59383a2d
 800a474:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a478:	441d      	add	r5, r3
 800a47a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a47e:	2b20      	cmp	r3, #32
 800a480:	bfc1      	itttt	gt
 800a482:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a486:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a48a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a48e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a492:	bfda      	itte	le
 800a494:	f1c3 0320 	rsble	r3, r3, #32
 800a498:	fa06 f003 	lslle.w	r0, r6, r3
 800a49c:	4318      	orrgt	r0, r3
 800a49e:	f7f6 f851 	bl	8000544 <__aeabi_ui2d>
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	4606      	mov	r6, r0
 800a4a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a4aa:	3d01      	subs	r5, #1
 800a4ac:	930e      	str	r3, [sp, #56]	; 0x38
 800a4ae:	e76a      	b.n	800a386 <_dtoa_r+0x116>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e7b2      	b.n	800a41a <_dtoa_r+0x1aa>
 800a4b4:	900b      	str	r0, [sp, #44]	; 0x2c
 800a4b6:	e7b1      	b.n	800a41c <_dtoa_r+0x1ac>
 800a4b8:	9b04      	ldr	r3, [sp, #16]
 800a4ba:	9a00      	ldr	r2, [sp, #0]
 800a4bc:	1a9b      	subs	r3, r3, r2
 800a4be:	9304      	str	r3, [sp, #16]
 800a4c0:	4253      	negs	r3, r2
 800a4c2:	9307      	str	r3, [sp, #28]
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	930a      	str	r3, [sp, #40]	; 0x28
 800a4c8:	e7bf      	b.n	800a44a <_dtoa_r+0x1da>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	9308      	str	r3, [sp, #32]
 800a4ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	dc55      	bgt.n	800a580 <_dtoa_r+0x310>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a4da:	461a      	mov	r2, r3
 800a4dc:	9209      	str	r2, [sp, #36]	; 0x24
 800a4de:	e00c      	b.n	800a4fa <_dtoa_r+0x28a>
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e7f3      	b.n	800a4cc <_dtoa_r+0x25c>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4e8:	9308      	str	r3, [sp, #32]
 800a4ea:	9b00      	ldr	r3, [sp, #0]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	9302      	str	r3, [sp, #8]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	9303      	str	r3, [sp, #12]
 800a4f6:	bfb8      	it	lt
 800a4f8:	2301      	movlt	r3, #1
 800a4fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	6042      	str	r2, [r0, #4]
 800a500:	2204      	movs	r2, #4
 800a502:	f102 0614 	add.w	r6, r2, #20
 800a506:	429e      	cmp	r6, r3
 800a508:	6841      	ldr	r1, [r0, #4]
 800a50a:	d93d      	bls.n	800a588 <_dtoa_r+0x318>
 800a50c:	4620      	mov	r0, r4
 800a50e:	f000 fcbb 	bl	800ae88 <_Balloc>
 800a512:	9001      	str	r0, [sp, #4]
 800a514:	2800      	cmp	r0, #0
 800a516:	d13b      	bne.n	800a590 <_dtoa_r+0x320>
 800a518:	4b11      	ldr	r3, [pc, #68]	; (800a560 <_dtoa_r+0x2f0>)
 800a51a:	4602      	mov	r2, r0
 800a51c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a520:	e6c0      	b.n	800a2a4 <_dtoa_r+0x34>
 800a522:	2301      	movs	r3, #1
 800a524:	e7df      	b.n	800a4e6 <_dtoa_r+0x276>
 800a526:	bf00      	nop
 800a528:	636f4361 	.word	0x636f4361
 800a52c:	3fd287a7 	.word	0x3fd287a7
 800a530:	8b60c8b3 	.word	0x8b60c8b3
 800a534:	3fc68a28 	.word	0x3fc68a28
 800a538:	509f79fb 	.word	0x509f79fb
 800a53c:	3fd34413 	.word	0x3fd34413
 800a540:	0800c8a9 	.word	0x0800c8a9
 800a544:	0800c8c0 	.word	0x0800c8c0
 800a548:	7ff00000 	.word	0x7ff00000
 800a54c:	0800c8a5 	.word	0x0800c8a5
 800a550:	0800c89c 	.word	0x0800c89c
 800a554:	0800c879 	.word	0x0800c879
 800a558:	3ff80000 	.word	0x3ff80000
 800a55c:	0800c9b0 	.word	0x0800c9b0
 800a560:	0800c91b 	.word	0x0800c91b
 800a564:	2501      	movs	r5, #1
 800a566:	2300      	movs	r3, #0
 800a568:	9306      	str	r3, [sp, #24]
 800a56a:	9508      	str	r5, [sp, #32]
 800a56c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a570:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a574:	2200      	movs	r2, #0
 800a576:	2312      	movs	r3, #18
 800a578:	e7b0      	b.n	800a4dc <_dtoa_r+0x26c>
 800a57a:	2301      	movs	r3, #1
 800a57c:	9308      	str	r3, [sp, #32]
 800a57e:	e7f5      	b.n	800a56c <_dtoa_r+0x2fc>
 800a580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a582:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a586:	e7b8      	b.n	800a4fa <_dtoa_r+0x28a>
 800a588:	3101      	adds	r1, #1
 800a58a:	6041      	str	r1, [r0, #4]
 800a58c:	0052      	lsls	r2, r2, #1
 800a58e:	e7b8      	b.n	800a502 <_dtoa_r+0x292>
 800a590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a592:	9a01      	ldr	r2, [sp, #4]
 800a594:	601a      	str	r2, [r3, #0]
 800a596:	9b03      	ldr	r3, [sp, #12]
 800a598:	2b0e      	cmp	r3, #14
 800a59a:	f200 809d 	bhi.w	800a6d8 <_dtoa_r+0x468>
 800a59e:	2d00      	cmp	r5, #0
 800a5a0:	f000 809a 	beq.w	800a6d8 <_dtoa_r+0x468>
 800a5a4:	9b00      	ldr	r3, [sp, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	dd32      	ble.n	800a610 <_dtoa_r+0x3a0>
 800a5aa:	4ab7      	ldr	r2, [pc, #732]	; (800a888 <_dtoa_r+0x618>)
 800a5ac:	f003 030f 	and.w	r3, r3, #15
 800a5b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a5b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5b8:	9b00      	ldr	r3, [sp, #0]
 800a5ba:	05d8      	lsls	r0, r3, #23
 800a5bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a5c0:	d516      	bpl.n	800a5f0 <_dtoa_r+0x380>
 800a5c2:	4bb2      	ldr	r3, [pc, #712]	; (800a88c <_dtoa_r+0x61c>)
 800a5c4:	ec51 0b19 	vmov	r0, r1, d9
 800a5c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5cc:	f7f6 f95e 	bl	800088c <__aeabi_ddiv>
 800a5d0:	f007 070f 	and.w	r7, r7, #15
 800a5d4:	4682      	mov	sl, r0
 800a5d6:	468b      	mov	fp, r1
 800a5d8:	2503      	movs	r5, #3
 800a5da:	4eac      	ldr	r6, [pc, #688]	; (800a88c <_dtoa_r+0x61c>)
 800a5dc:	b957      	cbnz	r7, 800a5f4 <_dtoa_r+0x384>
 800a5de:	4642      	mov	r2, r8
 800a5e0:	464b      	mov	r3, r9
 800a5e2:	4650      	mov	r0, sl
 800a5e4:	4659      	mov	r1, fp
 800a5e6:	f7f6 f951 	bl	800088c <__aeabi_ddiv>
 800a5ea:	4682      	mov	sl, r0
 800a5ec:	468b      	mov	fp, r1
 800a5ee:	e028      	b.n	800a642 <_dtoa_r+0x3d2>
 800a5f0:	2502      	movs	r5, #2
 800a5f2:	e7f2      	b.n	800a5da <_dtoa_r+0x36a>
 800a5f4:	07f9      	lsls	r1, r7, #31
 800a5f6:	d508      	bpl.n	800a60a <_dtoa_r+0x39a>
 800a5f8:	4640      	mov	r0, r8
 800a5fa:	4649      	mov	r1, r9
 800a5fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a600:	f7f6 f81a 	bl	8000638 <__aeabi_dmul>
 800a604:	3501      	adds	r5, #1
 800a606:	4680      	mov	r8, r0
 800a608:	4689      	mov	r9, r1
 800a60a:	107f      	asrs	r7, r7, #1
 800a60c:	3608      	adds	r6, #8
 800a60e:	e7e5      	b.n	800a5dc <_dtoa_r+0x36c>
 800a610:	f000 809b 	beq.w	800a74a <_dtoa_r+0x4da>
 800a614:	9b00      	ldr	r3, [sp, #0]
 800a616:	4f9d      	ldr	r7, [pc, #628]	; (800a88c <_dtoa_r+0x61c>)
 800a618:	425e      	negs	r6, r3
 800a61a:	4b9b      	ldr	r3, [pc, #620]	; (800a888 <_dtoa_r+0x618>)
 800a61c:	f006 020f 	and.w	r2, r6, #15
 800a620:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a628:	ec51 0b19 	vmov	r0, r1, d9
 800a62c:	f7f6 f804 	bl	8000638 <__aeabi_dmul>
 800a630:	1136      	asrs	r6, r6, #4
 800a632:	4682      	mov	sl, r0
 800a634:	468b      	mov	fp, r1
 800a636:	2300      	movs	r3, #0
 800a638:	2502      	movs	r5, #2
 800a63a:	2e00      	cmp	r6, #0
 800a63c:	d17a      	bne.n	800a734 <_dtoa_r+0x4c4>
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1d3      	bne.n	800a5ea <_dtoa_r+0x37a>
 800a642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a644:	2b00      	cmp	r3, #0
 800a646:	f000 8082 	beq.w	800a74e <_dtoa_r+0x4de>
 800a64a:	4b91      	ldr	r3, [pc, #580]	; (800a890 <_dtoa_r+0x620>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	4650      	mov	r0, sl
 800a650:	4659      	mov	r1, fp
 800a652:	f7f6 fa63 	bl	8000b1c <__aeabi_dcmplt>
 800a656:	2800      	cmp	r0, #0
 800a658:	d079      	beq.n	800a74e <_dtoa_r+0x4de>
 800a65a:	9b03      	ldr	r3, [sp, #12]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d076      	beq.n	800a74e <_dtoa_r+0x4de>
 800a660:	9b02      	ldr	r3, [sp, #8]
 800a662:	2b00      	cmp	r3, #0
 800a664:	dd36      	ble.n	800a6d4 <_dtoa_r+0x464>
 800a666:	9b00      	ldr	r3, [sp, #0]
 800a668:	4650      	mov	r0, sl
 800a66a:	4659      	mov	r1, fp
 800a66c:	1e5f      	subs	r7, r3, #1
 800a66e:	2200      	movs	r2, #0
 800a670:	4b88      	ldr	r3, [pc, #544]	; (800a894 <_dtoa_r+0x624>)
 800a672:	f7f5 ffe1 	bl	8000638 <__aeabi_dmul>
 800a676:	9e02      	ldr	r6, [sp, #8]
 800a678:	4682      	mov	sl, r0
 800a67a:	468b      	mov	fp, r1
 800a67c:	3501      	adds	r5, #1
 800a67e:	4628      	mov	r0, r5
 800a680:	f7f5 ff70 	bl	8000564 <__aeabi_i2d>
 800a684:	4652      	mov	r2, sl
 800a686:	465b      	mov	r3, fp
 800a688:	f7f5 ffd6 	bl	8000638 <__aeabi_dmul>
 800a68c:	4b82      	ldr	r3, [pc, #520]	; (800a898 <_dtoa_r+0x628>)
 800a68e:	2200      	movs	r2, #0
 800a690:	f7f5 fe1c 	bl	80002cc <__adddf3>
 800a694:	46d0      	mov	r8, sl
 800a696:	46d9      	mov	r9, fp
 800a698:	4682      	mov	sl, r0
 800a69a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a69e:	2e00      	cmp	r6, #0
 800a6a0:	d158      	bne.n	800a754 <_dtoa_r+0x4e4>
 800a6a2:	4b7e      	ldr	r3, [pc, #504]	; (800a89c <_dtoa_r+0x62c>)
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	4640      	mov	r0, r8
 800a6a8:	4649      	mov	r1, r9
 800a6aa:	f7f5 fe0d 	bl	80002c8 <__aeabi_dsub>
 800a6ae:	4652      	mov	r2, sl
 800a6b0:	465b      	mov	r3, fp
 800a6b2:	4680      	mov	r8, r0
 800a6b4:	4689      	mov	r9, r1
 800a6b6:	f7f6 fa4f 	bl	8000b58 <__aeabi_dcmpgt>
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	f040 8295 	bne.w	800abea <_dtoa_r+0x97a>
 800a6c0:	4652      	mov	r2, sl
 800a6c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a6c6:	4640      	mov	r0, r8
 800a6c8:	4649      	mov	r1, r9
 800a6ca:	f7f6 fa27 	bl	8000b1c <__aeabi_dcmplt>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	f040 8289 	bne.w	800abe6 <_dtoa_r+0x976>
 800a6d4:	ec5b ab19 	vmov	sl, fp, d9
 800a6d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	f2c0 8148 	blt.w	800a970 <_dtoa_r+0x700>
 800a6e0:	9a00      	ldr	r2, [sp, #0]
 800a6e2:	2a0e      	cmp	r2, #14
 800a6e4:	f300 8144 	bgt.w	800a970 <_dtoa_r+0x700>
 800a6e8:	4b67      	ldr	r3, [pc, #412]	; (800a888 <_dtoa_r+0x618>)
 800a6ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f280 80d5 	bge.w	800a8a4 <_dtoa_r+0x634>
 800a6fa:	9b03      	ldr	r3, [sp, #12]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f300 80d1 	bgt.w	800a8a4 <_dtoa_r+0x634>
 800a702:	f040 826f 	bne.w	800abe4 <_dtoa_r+0x974>
 800a706:	4b65      	ldr	r3, [pc, #404]	; (800a89c <_dtoa_r+0x62c>)
 800a708:	2200      	movs	r2, #0
 800a70a:	4640      	mov	r0, r8
 800a70c:	4649      	mov	r1, r9
 800a70e:	f7f5 ff93 	bl	8000638 <__aeabi_dmul>
 800a712:	4652      	mov	r2, sl
 800a714:	465b      	mov	r3, fp
 800a716:	f7f6 fa15 	bl	8000b44 <__aeabi_dcmpge>
 800a71a:	9e03      	ldr	r6, [sp, #12]
 800a71c:	4637      	mov	r7, r6
 800a71e:	2800      	cmp	r0, #0
 800a720:	f040 8245 	bne.w	800abae <_dtoa_r+0x93e>
 800a724:	9d01      	ldr	r5, [sp, #4]
 800a726:	2331      	movs	r3, #49	; 0x31
 800a728:	f805 3b01 	strb.w	r3, [r5], #1
 800a72c:	9b00      	ldr	r3, [sp, #0]
 800a72e:	3301      	adds	r3, #1
 800a730:	9300      	str	r3, [sp, #0]
 800a732:	e240      	b.n	800abb6 <_dtoa_r+0x946>
 800a734:	07f2      	lsls	r2, r6, #31
 800a736:	d505      	bpl.n	800a744 <_dtoa_r+0x4d4>
 800a738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a73c:	f7f5 ff7c 	bl	8000638 <__aeabi_dmul>
 800a740:	3501      	adds	r5, #1
 800a742:	2301      	movs	r3, #1
 800a744:	1076      	asrs	r6, r6, #1
 800a746:	3708      	adds	r7, #8
 800a748:	e777      	b.n	800a63a <_dtoa_r+0x3ca>
 800a74a:	2502      	movs	r5, #2
 800a74c:	e779      	b.n	800a642 <_dtoa_r+0x3d2>
 800a74e:	9f00      	ldr	r7, [sp, #0]
 800a750:	9e03      	ldr	r6, [sp, #12]
 800a752:	e794      	b.n	800a67e <_dtoa_r+0x40e>
 800a754:	9901      	ldr	r1, [sp, #4]
 800a756:	4b4c      	ldr	r3, [pc, #304]	; (800a888 <_dtoa_r+0x618>)
 800a758:	4431      	add	r1, r6
 800a75a:	910d      	str	r1, [sp, #52]	; 0x34
 800a75c:	9908      	ldr	r1, [sp, #32]
 800a75e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a762:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a766:	2900      	cmp	r1, #0
 800a768:	d043      	beq.n	800a7f2 <_dtoa_r+0x582>
 800a76a:	494d      	ldr	r1, [pc, #308]	; (800a8a0 <_dtoa_r+0x630>)
 800a76c:	2000      	movs	r0, #0
 800a76e:	f7f6 f88d 	bl	800088c <__aeabi_ddiv>
 800a772:	4652      	mov	r2, sl
 800a774:	465b      	mov	r3, fp
 800a776:	f7f5 fda7 	bl	80002c8 <__aeabi_dsub>
 800a77a:	9d01      	ldr	r5, [sp, #4]
 800a77c:	4682      	mov	sl, r0
 800a77e:	468b      	mov	fp, r1
 800a780:	4649      	mov	r1, r9
 800a782:	4640      	mov	r0, r8
 800a784:	f7f6 fa08 	bl	8000b98 <__aeabi_d2iz>
 800a788:	4606      	mov	r6, r0
 800a78a:	f7f5 feeb 	bl	8000564 <__aeabi_i2d>
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	4640      	mov	r0, r8
 800a794:	4649      	mov	r1, r9
 800a796:	f7f5 fd97 	bl	80002c8 <__aeabi_dsub>
 800a79a:	3630      	adds	r6, #48	; 0x30
 800a79c:	f805 6b01 	strb.w	r6, [r5], #1
 800a7a0:	4652      	mov	r2, sl
 800a7a2:	465b      	mov	r3, fp
 800a7a4:	4680      	mov	r8, r0
 800a7a6:	4689      	mov	r9, r1
 800a7a8:	f7f6 f9b8 	bl	8000b1c <__aeabi_dcmplt>
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	d163      	bne.n	800a878 <_dtoa_r+0x608>
 800a7b0:	4642      	mov	r2, r8
 800a7b2:	464b      	mov	r3, r9
 800a7b4:	4936      	ldr	r1, [pc, #216]	; (800a890 <_dtoa_r+0x620>)
 800a7b6:	2000      	movs	r0, #0
 800a7b8:	f7f5 fd86 	bl	80002c8 <__aeabi_dsub>
 800a7bc:	4652      	mov	r2, sl
 800a7be:	465b      	mov	r3, fp
 800a7c0:	f7f6 f9ac 	bl	8000b1c <__aeabi_dcmplt>
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	f040 80b5 	bne.w	800a934 <_dtoa_r+0x6c4>
 800a7ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7cc:	429d      	cmp	r5, r3
 800a7ce:	d081      	beq.n	800a6d4 <_dtoa_r+0x464>
 800a7d0:	4b30      	ldr	r3, [pc, #192]	; (800a894 <_dtoa_r+0x624>)
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	4650      	mov	r0, sl
 800a7d6:	4659      	mov	r1, fp
 800a7d8:	f7f5 ff2e 	bl	8000638 <__aeabi_dmul>
 800a7dc:	4b2d      	ldr	r3, [pc, #180]	; (800a894 <_dtoa_r+0x624>)
 800a7de:	4682      	mov	sl, r0
 800a7e0:	468b      	mov	fp, r1
 800a7e2:	4640      	mov	r0, r8
 800a7e4:	4649      	mov	r1, r9
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f7f5 ff26 	bl	8000638 <__aeabi_dmul>
 800a7ec:	4680      	mov	r8, r0
 800a7ee:	4689      	mov	r9, r1
 800a7f0:	e7c6      	b.n	800a780 <_dtoa_r+0x510>
 800a7f2:	4650      	mov	r0, sl
 800a7f4:	4659      	mov	r1, fp
 800a7f6:	f7f5 ff1f 	bl	8000638 <__aeabi_dmul>
 800a7fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7fc:	9d01      	ldr	r5, [sp, #4]
 800a7fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800a800:	4682      	mov	sl, r0
 800a802:	468b      	mov	fp, r1
 800a804:	4649      	mov	r1, r9
 800a806:	4640      	mov	r0, r8
 800a808:	f7f6 f9c6 	bl	8000b98 <__aeabi_d2iz>
 800a80c:	4606      	mov	r6, r0
 800a80e:	f7f5 fea9 	bl	8000564 <__aeabi_i2d>
 800a812:	3630      	adds	r6, #48	; 0x30
 800a814:	4602      	mov	r2, r0
 800a816:	460b      	mov	r3, r1
 800a818:	4640      	mov	r0, r8
 800a81a:	4649      	mov	r1, r9
 800a81c:	f7f5 fd54 	bl	80002c8 <__aeabi_dsub>
 800a820:	f805 6b01 	strb.w	r6, [r5], #1
 800a824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a826:	429d      	cmp	r5, r3
 800a828:	4680      	mov	r8, r0
 800a82a:	4689      	mov	r9, r1
 800a82c:	f04f 0200 	mov.w	r2, #0
 800a830:	d124      	bne.n	800a87c <_dtoa_r+0x60c>
 800a832:	4b1b      	ldr	r3, [pc, #108]	; (800a8a0 <_dtoa_r+0x630>)
 800a834:	4650      	mov	r0, sl
 800a836:	4659      	mov	r1, fp
 800a838:	f7f5 fd48 	bl	80002cc <__adddf3>
 800a83c:	4602      	mov	r2, r0
 800a83e:	460b      	mov	r3, r1
 800a840:	4640      	mov	r0, r8
 800a842:	4649      	mov	r1, r9
 800a844:	f7f6 f988 	bl	8000b58 <__aeabi_dcmpgt>
 800a848:	2800      	cmp	r0, #0
 800a84a:	d173      	bne.n	800a934 <_dtoa_r+0x6c4>
 800a84c:	4652      	mov	r2, sl
 800a84e:	465b      	mov	r3, fp
 800a850:	4913      	ldr	r1, [pc, #76]	; (800a8a0 <_dtoa_r+0x630>)
 800a852:	2000      	movs	r0, #0
 800a854:	f7f5 fd38 	bl	80002c8 <__aeabi_dsub>
 800a858:	4602      	mov	r2, r0
 800a85a:	460b      	mov	r3, r1
 800a85c:	4640      	mov	r0, r8
 800a85e:	4649      	mov	r1, r9
 800a860:	f7f6 f95c 	bl	8000b1c <__aeabi_dcmplt>
 800a864:	2800      	cmp	r0, #0
 800a866:	f43f af35 	beq.w	800a6d4 <_dtoa_r+0x464>
 800a86a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a86c:	1e6b      	subs	r3, r5, #1
 800a86e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a870:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a874:	2b30      	cmp	r3, #48	; 0x30
 800a876:	d0f8      	beq.n	800a86a <_dtoa_r+0x5fa>
 800a878:	9700      	str	r7, [sp, #0]
 800a87a:	e049      	b.n	800a910 <_dtoa_r+0x6a0>
 800a87c:	4b05      	ldr	r3, [pc, #20]	; (800a894 <_dtoa_r+0x624>)
 800a87e:	f7f5 fedb 	bl	8000638 <__aeabi_dmul>
 800a882:	4680      	mov	r8, r0
 800a884:	4689      	mov	r9, r1
 800a886:	e7bd      	b.n	800a804 <_dtoa_r+0x594>
 800a888:	0800c9b0 	.word	0x0800c9b0
 800a88c:	0800c988 	.word	0x0800c988
 800a890:	3ff00000 	.word	0x3ff00000
 800a894:	40240000 	.word	0x40240000
 800a898:	401c0000 	.word	0x401c0000
 800a89c:	40140000 	.word	0x40140000
 800a8a0:	3fe00000 	.word	0x3fe00000
 800a8a4:	9d01      	ldr	r5, [sp, #4]
 800a8a6:	4656      	mov	r6, sl
 800a8a8:	465f      	mov	r7, fp
 800a8aa:	4642      	mov	r2, r8
 800a8ac:	464b      	mov	r3, r9
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	4639      	mov	r1, r7
 800a8b2:	f7f5 ffeb 	bl	800088c <__aeabi_ddiv>
 800a8b6:	f7f6 f96f 	bl	8000b98 <__aeabi_d2iz>
 800a8ba:	4682      	mov	sl, r0
 800a8bc:	f7f5 fe52 	bl	8000564 <__aeabi_i2d>
 800a8c0:	4642      	mov	r2, r8
 800a8c2:	464b      	mov	r3, r9
 800a8c4:	f7f5 feb8 	bl	8000638 <__aeabi_dmul>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4630      	mov	r0, r6
 800a8ce:	4639      	mov	r1, r7
 800a8d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a8d4:	f7f5 fcf8 	bl	80002c8 <__aeabi_dsub>
 800a8d8:	f805 6b01 	strb.w	r6, [r5], #1
 800a8dc:	9e01      	ldr	r6, [sp, #4]
 800a8de:	9f03      	ldr	r7, [sp, #12]
 800a8e0:	1bae      	subs	r6, r5, r6
 800a8e2:	42b7      	cmp	r7, r6
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	d135      	bne.n	800a956 <_dtoa_r+0x6e6>
 800a8ea:	f7f5 fcef 	bl	80002cc <__adddf3>
 800a8ee:	4642      	mov	r2, r8
 800a8f0:	464b      	mov	r3, r9
 800a8f2:	4606      	mov	r6, r0
 800a8f4:	460f      	mov	r7, r1
 800a8f6:	f7f6 f92f 	bl	8000b58 <__aeabi_dcmpgt>
 800a8fa:	b9d0      	cbnz	r0, 800a932 <_dtoa_r+0x6c2>
 800a8fc:	4642      	mov	r2, r8
 800a8fe:	464b      	mov	r3, r9
 800a900:	4630      	mov	r0, r6
 800a902:	4639      	mov	r1, r7
 800a904:	f7f6 f900 	bl	8000b08 <__aeabi_dcmpeq>
 800a908:	b110      	cbz	r0, 800a910 <_dtoa_r+0x6a0>
 800a90a:	f01a 0f01 	tst.w	sl, #1
 800a90e:	d110      	bne.n	800a932 <_dtoa_r+0x6c2>
 800a910:	4620      	mov	r0, r4
 800a912:	ee18 1a10 	vmov	r1, s16
 800a916:	f000 faf7 	bl	800af08 <_Bfree>
 800a91a:	2300      	movs	r3, #0
 800a91c:	9800      	ldr	r0, [sp, #0]
 800a91e:	702b      	strb	r3, [r5, #0]
 800a920:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a922:	3001      	adds	r0, #1
 800a924:	6018      	str	r0, [r3, #0]
 800a926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f43f acf1 	beq.w	800a310 <_dtoa_r+0xa0>
 800a92e:	601d      	str	r5, [r3, #0]
 800a930:	e4ee      	b.n	800a310 <_dtoa_r+0xa0>
 800a932:	9f00      	ldr	r7, [sp, #0]
 800a934:	462b      	mov	r3, r5
 800a936:	461d      	mov	r5, r3
 800a938:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a93c:	2a39      	cmp	r2, #57	; 0x39
 800a93e:	d106      	bne.n	800a94e <_dtoa_r+0x6de>
 800a940:	9a01      	ldr	r2, [sp, #4]
 800a942:	429a      	cmp	r2, r3
 800a944:	d1f7      	bne.n	800a936 <_dtoa_r+0x6c6>
 800a946:	9901      	ldr	r1, [sp, #4]
 800a948:	2230      	movs	r2, #48	; 0x30
 800a94a:	3701      	adds	r7, #1
 800a94c:	700a      	strb	r2, [r1, #0]
 800a94e:	781a      	ldrb	r2, [r3, #0]
 800a950:	3201      	adds	r2, #1
 800a952:	701a      	strb	r2, [r3, #0]
 800a954:	e790      	b.n	800a878 <_dtoa_r+0x608>
 800a956:	4ba6      	ldr	r3, [pc, #664]	; (800abf0 <_dtoa_r+0x980>)
 800a958:	2200      	movs	r2, #0
 800a95a:	f7f5 fe6d 	bl	8000638 <__aeabi_dmul>
 800a95e:	2200      	movs	r2, #0
 800a960:	2300      	movs	r3, #0
 800a962:	4606      	mov	r6, r0
 800a964:	460f      	mov	r7, r1
 800a966:	f7f6 f8cf 	bl	8000b08 <__aeabi_dcmpeq>
 800a96a:	2800      	cmp	r0, #0
 800a96c:	d09d      	beq.n	800a8aa <_dtoa_r+0x63a>
 800a96e:	e7cf      	b.n	800a910 <_dtoa_r+0x6a0>
 800a970:	9a08      	ldr	r2, [sp, #32]
 800a972:	2a00      	cmp	r2, #0
 800a974:	f000 80d7 	beq.w	800ab26 <_dtoa_r+0x8b6>
 800a978:	9a06      	ldr	r2, [sp, #24]
 800a97a:	2a01      	cmp	r2, #1
 800a97c:	f300 80ba 	bgt.w	800aaf4 <_dtoa_r+0x884>
 800a980:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a982:	2a00      	cmp	r2, #0
 800a984:	f000 80b2 	beq.w	800aaec <_dtoa_r+0x87c>
 800a988:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a98c:	9e07      	ldr	r6, [sp, #28]
 800a98e:	9d04      	ldr	r5, [sp, #16]
 800a990:	9a04      	ldr	r2, [sp, #16]
 800a992:	441a      	add	r2, r3
 800a994:	9204      	str	r2, [sp, #16]
 800a996:	9a05      	ldr	r2, [sp, #20]
 800a998:	2101      	movs	r1, #1
 800a99a:	441a      	add	r2, r3
 800a99c:	4620      	mov	r0, r4
 800a99e:	9205      	str	r2, [sp, #20]
 800a9a0:	f000 fb6a 	bl	800b078 <__i2b>
 800a9a4:	4607      	mov	r7, r0
 800a9a6:	2d00      	cmp	r5, #0
 800a9a8:	dd0c      	ble.n	800a9c4 <_dtoa_r+0x754>
 800a9aa:	9b05      	ldr	r3, [sp, #20]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	dd09      	ble.n	800a9c4 <_dtoa_r+0x754>
 800a9b0:	42ab      	cmp	r3, r5
 800a9b2:	9a04      	ldr	r2, [sp, #16]
 800a9b4:	bfa8      	it	ge
 800a9b6:	462b      	movge	r3, r5
 800a9b8:	1ad2      	subs	r2, r2, r3
 800a9ba:	9204      	str	r2, [sp, #16]
 800a9bc:	9a05      	ldr	r2, [sp, #20]
 800a9be:	1aed      	subs	r5, r5, r3
 800a9c0:	1ad3      	subs	r3, r2, r3
 800a9c2:	9305      	str	r3, [sp, #20]
 800a9c4:	9b07      	ldr	r3, [sp, #28]
 800a9c6:	b31b      	cbz	r3, 800aa10 <_dtoa_r+0x7a0>
 800a9c8:	9b08      	ldr	r3, [sp, #32]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	f000 80af 	beq.w	800ab2e <_dtoa_r+0x8be>
 800a9d0:	2e00      	cmp	r6, #0
 800a9d2:	dd13      	ble.n	800a9fc <_dtoa_r+0x78c>
 800a9d4:	4639      	mov	r1, r7
 800a9d6:	4632      	mov	r2, r6
 800a9d8:	4620      	mov	r0, r4
 800a9da:	f000 fc0d 	bl	800b1f8 <__pow5mult>
 800a9de:	ee18 2a10 	vmov	r2, s16
 800a9e2:	4601      	mov	r1, r0
 800a9e4:	4607      	mov	r7, r0
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	f000 fb5c 	bl	800b0a4 <__multiply>
 800a9ec:	ee18 1a10 	vmov	r1, s16
 800a9f0:	4680      	mov	r8, r0
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	f000 fa88 	bl	800af08 <_Bfree>
 800a9f8:	ee08 8a10 	vmov	s16, r8
 800a9fc:	9b07      	ldr	r3, [sp, #28]
 800a9fe:	1b9a      	subs	r2, r3, r6
 800aa00:	d006      	beq.n	800aa10 <_dtoa_r+0x7a0>
 800aa02:	ee18 1a10 	vmov	r1, s16
 800aa06:	4620      	mov	r0, r4
 800aa08:	f000 fbf6 	bl	800b1f8 <__pow5mult>
 800aa0c:	ee08 0a10 	vmov	s16, r0
 800aa10:	2101      	movs	r1, #1
 800aa12:	4620      	mov	r0, r4
 800aa14:	f000 fb30 	bl	800b078 <__i2b>
 800aa18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	4606      	mov	r6, r0
 800aa1e:	f340 8088 	ble.w	800ab32 <_dtoa_r+0x8c2>
 800aa22:	461a      	mov	r2, r3
 800aa24:	4601      	mov	r1, r0
 800aa26:	4620      	mov	r0, r4
 800aa28:	f000 fbe6 	bl	800b1f8 <__pow5mult>
 800aa2c:	9b06      	ldr	r3, [sp, #24]
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	4606      	mov	r6, r0
 800aa32:	f340 8081 	ble.w	800ab38 <_dtoa_r+0x8c8>
 800aa36:	f04f 0800 	mov.w	r8, #0
 800aa3a:	6933      	ldr	r3, [r6, #16]
 800aa3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa40:	6918      	ldr	r0, [r3, #16]
 800aa42:	f000 fac9 	bl	800afd8 <__hi0bits>
 800aa46:	f1c0 0020 	rsb	r0, r0, #32
 800aa4a:	9b05      	ldr	r3, [sp, #20]
 800aa4c:	4418      	add	r0, r3
 800aa4e:	f010 001f 	ands.w	r0, r0, #31
 800aa52:	f000 8092 	beq.w	800ab7a <_dtoa_r+0x90a>
 800aa56:	f1c0 0320 	rsb	r3, r0, #32
 800aa5a:	2b04      	cmp	r3, #4
 800aa5c:	f340 808a 	ble.w	800ab74 <_dtoa_r+0x904>
 800aa60:	f1c0 001c 	rsb	r0, r0, #28
 800aa64:	9b04      	ldr	r3, [sp, #16]
 800aa66:	4403      	add	r3, r0
 800aa68:	9304      	str	r3, [sp, #16]
 800aa6a:	9b05      	ldr	r3, [sp, #20]
 800aa6c:	4403      	add	r3, r0
 800aa6e:	4405      	add	r5, r0
 800aa70:	9305      	str	r3, [sp, #20]
 800aa72:	9b04      	ldr	r3, [sp, #16]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	dd07      	ble.n	800aa88 <_dtoa_r+0x818>
 800aa78:	ee18 1a10 	vmov	r1, s16
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f000 fc14 	bl	800b2ac <__lshift>
 800aa84:	ee08 0a10 	vmov	s16, r0
 800aa88:	9b05      	ldr	r3, [sp, #20]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	dd05      	ble.n	800aa9a <_dtoa_r+0x82a>
 800aa8e:	4631      	mov	r1, r6
 800aa90:	461a      	mov	r2, r3
 800aa92:	4620      	mov	r0, r4
 800aa94:	f000 fc0a 	bl	800b2ac <__lshift>
 800aa98:	4606      	mov	r6, r0
 800aa9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d06e      	beq.n	800ab7e <_dtoa_r+0x90e>
 800aaa0:	ee18 0a10 	vmov	r0, s16
 800aaa4:	4631      	mov	r1, r6
 800aaa6:	f000 fc71 	bl	800b38c <__mcmp>
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	da67      	bge.n	800ab7e <_dtoa_r+0x90e>
 800aaae:	9b00      	ldr	r3, [sp, #0]
 800aab0:	3b01      	subs	r3, #1
 800aab2:	ee18 1a10 	vmov	r1, s16
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	220a      	movs	r2, #10
 800aaba:	2300      	movs	r3, #0
 800aabc:	4620      	mov	r0, r4
 800aabe:	f000 fa45 	bl	800af4c <__multadd>
 800aac2:	9b08      	ldr	r3, [sp, #32]
 800aac4:	ee08 0a10 	vmov	s16, r0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	f000 81b1 	beq.w	800ae30 <_dtoa_r+0xbc0>
 800aace:	2300      	movs	r3, #0
 800aad0:	4639      	mov	r1, r7
 800aad2:	220a      	movs	r2, #10
 800aad4:	4620      	mov	r0, r4
 800aad6:	f000 fa39 	bl	800af4c <__multadd>
 800aada:	9b02      	ldr	r3, [sp, #8]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	4607      	mov	r7, r0
 800aae0:	f300 808e 	bgt.w	800ac00 <_dtoa_r+0x990>
 800aae4:	9b06      	ldr	r3, [sp, #24]
 800aae6:	2b02      	cmp	r3, #2
 800aae8:	dc51      	bgt.n	800ab8e <_dtoa_r+0x91e>
 800aaea:	e089      	b.n	800ac00 <_dtoa_r+0x990>
 800aaec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aaee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aaf2:	e74b      	b.n	800a98c <_dtoa_r+0x71c>
 800aaf4:	9b03      	ldr	r3, [sp, #12]
 800aaf6:	1e5e      	subs	r6, r3, #1
 800aaf8:	9b07      	ldr	r3, [sp, #28]
 800aafa:	42b3      	cmp	r3, r6
 800aafc:	bfbf      	itttt	lt
 800aafe:	9b07      	ldrlt	r3, [sp, #28]
 800ab00:	9607      	strlt	r6, [sp, #28]
 800ab02:	1af2      	sublt	r2, r6, r3
 800ab04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ab06:	bfb6      	itet	lt
 800ab08:	189b      	addlt	r3, r3, r2
 800ab0a:	1b9e      	subge	r6, r3, r6
 800ab0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ab0e:	9b03      	ldr	r3, [sp, #12]
 800ab10:	bfb8      	it	lt
 800ab12:	2600      	movlt	r6, #0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	bfb7      	itett	lt
 800ab18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ab1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ab20:	1a9d      	sublt	r5, r3, r2
 800ab22:	2300      	movlt	r3, #0
 800ab24:	e734      	b.n	800a990 <_dtoa_r+0x720>
 800ab26:	9e07      	ldr	r6, [sp, #28]
 800ab28:	9d04      	ldr	r5, [sp, #16]
 800ab2a:	9f08      	ldr	r7, [sp, #32]
 800ab2c:	e73b      	b.n	800a9a6 <_dtoa_r+0x736>
 800ab2e:	9a07      	ldr	r2, [sp, #28]
 800ab30:	e767      	b.n	800aa02 <_dtoa_r+0x792>
 800ab32:	9b06      	ldr	r3, [sp, #24]
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	dc18      	bgt.n	800ab6a <_dtoa_r+0x8fa>
 800ab38:	f1ba 0f00 	cmp.w	sl, #0
 800ab3c:	d115      	bne.n	800ab6a <_dtoa_r+0x8fa>
 800ab3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab42:	b993      	cbnz	r3, 800ab6a <_dtoa_r+0x8fa>
 800ab44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ab48:	0d1b      	lsrs	r3, r3, #20
 800ab4a:	051b      	lsls	r3, r3, #20
 800ab4c:	b183      	cbz	r3, 800ab70 <_dtoa_r+0x900>
 800ab4e:	9b04      	ldr	r3, [sp, #16]
 800ab50:	3301      	adds	r3, #1
 800ab52:	9304      	str	r3, [sp, #16]
 800ab54:	9b05      	ldr	r3, [sp, #20]
 800ab56:	3301      	adds	r3, #1
 800ab58:	9305      	str	r3, [sp, #20]
 800ab5a:	f04f 0801 	mov.w	r8, #1
 800ab5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	f47f af6a 	bne.w	800aa3a <_dtoa_r+0x7ca>
 800ab66:	2001      	movs	r0, #1
 800ab68:	e76f      	b.n	800aa4a <_dtoa_r+0x7da>
 800ab6a:	f04f 0800 	mov.w	r8, #0
 800ab6e:	e7f6      	b.n	800ab5e <_dtoa_r+0x8ee>
 800ab70:	4698      	mov	r8, r3
 800ab72:	e7f4      	b.n	800ab5e <_dtoa_r+0x8ee>
 800ab74:	f43f af7d 	beq.w	800aa72 <_dtoa_r+0x802>
 800ab78:	4618      	mov	r0, r3
 800ab7a:	301c      	adds	r0, #28
 800ab7c:	e772      	b.n	800aa64 <_dtoa_r+0x7f4>
 800ab7e:	9b03      	ldr	r3, [sp, #12]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	dc37      	bgt.n	800abf4 <_dtoa_r+0x984>
 800ab84:	9b06      	ldr	r3, [sp, #24]
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	dd34      	ble.n	800abf4 <_dtoa_r+0x984>
 800ab8a:	9b03      	ldr	r3, [sp, #12]
 800ab8c:	9302      	str	r3, [sp, #8]
 800ab8e:	9b02      	ldr	r3, [sp, #8]
 800ab90:	b96b      	cbnz	r3, 800abae <_dtoa_r+0x93e>
 800ab92:	4631      	mov	r1, r6
 800ab94:	2205      	movs	r2, #5
 800ab96:	4620      	mov	r0, r4
 800ab98:	f000 f9d8 	bl	800af4c <__multadd>
 800ab9c:	4601      	mov	r1, r0
 800ab9e:	4606      	mov	r6, r0
 800aba0:	ee18 0a10 	vmov	r0, s16
 800aba4:	f000 fbf2 	bl	800b38c <__mcmp>
 800aba8:	2800      	cmp	r0, #0
 800abaa:	f73f adbb 	bgt.w	800a724 <_dtoa_r+0x4b4>
 800abae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb0:	9d01      	ldr	r5, [sp, #4]
 800abb2:	43db      	mvns	r3, r3
 800abb4:	9300      	str	r3, [sp, #0]
 800abb6:	f04f 0800 	mov.w	r8, #0
 800abba:	4631      	mov	r1, r6
 800abbc:	4620      	mov	r0, r4
 800abbe:	f000 f9a3 	bl	800af08 <_Bfree>
 800abc2:	2f00      	cmp	r7, #0
 800abc4:	f43f aea4 	beq.w	800a910 <_dtoa_r+0x6a0>
 800abc8:	f1b8 0f00 	cmp.w	r8, #0
 800abcc:	d005      	beq.n	800abda <_dtoa_r+0x96a>
 800abce:	45b8      	cmp	r8, r7
 800abd0:	d003      	beq.n	800abda <_dtoa_r+0x96a>
 800abd2:	4641      	mov	r1, r8
 800abd4:	4620      	mov	r0, r4
 800abd6:	f000 f997 	bl	800af08 <_Bfree>
 800abda:	4639      	mov	r1, r7
 800abdc:	4620      	mov	r0, r4
 800abde:	f000 f993 	bl	800af08 <_Bfree>
 800abe2:	e695      	b.n	800a910 <_dtoa_r+0x6a0>
 800abe4:	2600      	movs	r6, #0
 800abe6:	4637      	mov	r7, r6
 800abe8:	e7e1      	b.n	800abae <_dtoa_r+0x93e>
 800abea:	9700      	str	r7, [sp, #0]
 800abec:	4637      	mov	r7, r6
 800abee:	e599      	b.n	800a724 <_dtoa_r+0x4b4>
 800abf0:	40240000 	.word	0x40240000
 800abf4:	9b08      	ldr	r3, [sp, #32]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	f000 80ca 	beq.w	800ad90 <_dtoa_r+0xb20>
 800abfc:	9b03      	ldr	r3, [sp, #12]
 800abfe:	9302      	str	r3, [sp, #8]
 800ac00:	2d00      	cmp	r5, #0
 800ac02:	dd05      	ble.n	800ac10 <_dtoa_r+0x9a0>
 800ac04:	4639      	mov	r1, r7
 800ac06:	462a      	mov	r2, r5
 800ac08:	4620      	mov	r0, r4
 800ac0a:	f000 fb4f 	bl	800b2ac <__lshift>
 800ac0e:	4607      	mov	r7, r0
 800ac10:	f1b8 0f00 	cmp.w	r8, #0
 800ac14:	d05b      	beq.n	800acce <_dtoa_r+0xa5e>
 800ac16:	6879      	ldr	r1, [r7, #4]
 800ac18:	4620      	mov	r0, r4
 800ac1a:	f000 f935 	bl	800ae88 <_Balloc>
 800ac1e:	4605      	mov	r5, r0
 800ac20:	b928      	cbnz	r0, 800ac2e <_dtoa_r+0x9be>
 800ac22:	4b87      	ldr	r3, [pc, #540]	; (800ae40 <_dtoa_r+0xbd0>)
 800ac24:	4602      	mov	r2, r0
 800ac26:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ac2a:	f7ff bb3b 	b.w	800a2a4 <_dtoa_r+0x34>
 800ac2e:	693a      	ldr	r2, [r7, #16]
 800ac30:	3202      	adds	r2, #2
 800ac32:	0092      	lsls	r2, r2, #2
 800ac34:	f107 010c 	add.w	r1, r7, #12
 800ac38:	300c      	adds	r0, #12
 800ac3a:	f000 f90b 	bl	800ae54 <memcpy>
 800ac3e:	2201      	movs	r2, #1
 800ac40:	4629      	mov	r1, r5
 800ac42:	4620      	mov	r0, r4
 800ac44:	f000 fb32 	bl	800b2ac <__lshift>
 800ac48:	9b01      	ldr	r3, [sp, #4]
 800ac4a:	f103 0901 	add.w	r9, r3, #1
 800ac4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ac52:	4413      	add	r3, r2
 800ac54:	9305      	str	r3, [sp, #20]
 800ac56:	f00a 0301 	and.w	r3, sl, #1
 800ac5a:	46b8      	mov	r8, r7
 800ac5c:	9304      	str	r3, [sp, #16]
 800ac5e:	4607      	mov	r7, r0
 800ac60:	4631      	mov	r1, r6
 800ac62:	ee18 0a10 	vmov	r0, s16
 800ac66:	f7ff fa76 	bl	800a156 <quorem>
 800ac6a:	4641      	mov	r1, r8
 800ac6c:	9002      	str	r0, [sp, #8]
 800ac6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ac72:	ee18 0a10 	vmov	r0, s16
 800ac76:	f000 fb89 	bl	800b38c <__mcmp>
 800ac7a:	463a      	mov	r2, r7
 800ac7c:	9003      	str	r0, [sp, #12]
 800ac7e:	4631      	mov	r1, r6
 800ac80:	4620      	mov	r0, r4
 800ac82:	f000 fb9f 	bl	800b3c4 <__mdiff>
 800ac86:	68c2      	ldr	r2, [r0, #12]
 800ac88:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800ac8c:	4605      	mov	r5, r0
 800ac8e:	bb02      	cbnz	r2, 800acd2 <_dtoa_r+0xa62>
 800ac90:	4601      	mov	r1, r0
 800ac92:	ee18 0a10 	vmov	r0, s16
 800ac96:	f000 fb79 	bl	800b38c <__mcmp>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	4629      	mov	r1, r5
 800ac9e:	4620      	mov	r0, r4
 800aca0:	9207      	str	r2, [sp, #28]
 800aca2:	f000 f931 	bl	800af08 <_Bfree>
 800aca6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800acaa:	ea43 0102 	orr.w	r1, r3, r2
 800acae:	9b04      	ldr	r3, [sp, #16]
 800acb0:	430b      	orrs	r3, r1
 800acb2:	464d      	mov	r5, r9
 800acb4:	d10f      	bne.n	800acd6 <_dtoa_r+0xa66>
 800acb6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800acba:	d02a      	beq.n	800ad12 <_dtoa_r+0xaa2>
 800acbc:	9b03      	ldr	r3, [sp, #12]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	dd02      	ble.n	800acc8 <_dtoa_r+0xa58>
 800acc2:	9b02      	ldr	r3, [sp, #8]
 800acc4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800acc8:	f88b a000 	strb.w	sl, [fp]
 800accc:	e775      	b.n	800abba <_dtoa_r+0x94a>
 800acce:	4638      	mov	r0, r7
 800acd0:	e7ba      	b.n	800ac48 <_dtoa_r+0x9d8>
 800acd2:	2201      	movs	r2, #1
 800acd4:	e7e2      	b.n	800ac9c <_dtoa_r+0xa2c>
 800acd6:	9b03      	ldr	r3, [sp, #12]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	db04      	blt.n	800ace6 <_dtoa_r+0xa76>
 800acdc:	9906      	ldr	r1, [sp, #24]
 800acde:	430b      	orrs	r3, r1
 800ace0:	9904      	ldr	r1, [sp, #16]
 800ace2:	430b      	orrs	r3, r1
 800ace4:	d122      	bne.n	800ad2c <_dtoa_r+0xabc>
 800ace6:	2a00      	cmp	r2, #0
 800ace8:	ddee      	ble.n	800acc8 <_dtoa_r+0xa58>
 800acea:	ee18 1a10 	vmov	r1, s16
 800acee:	2201      	movs	r2, #1
 800acf0:	4620      	mov	r0, r4
 800acf2:	f000 fadb 	bl	800b2ac <__lshift>
 800acf6:	4631      	mov	r1, r6
 800acf8:	ee08 0a10 	vmov	s16, r0
 800acfc:	f000 fb46 	bl	800b38c <__mcmp>
 800ad00:	2800      	cmp	r0, #0
 800ad02:	dc03      	bgt.n	800ad0c <_dtoa_r+0xa9c>
 800ad04:	d1e0      	bne.n	800acc8 <_dtoa_r+0xa58>
 800ad06:	f01a 0f01 	tst.w	sl, #1
 800ad0a:	d0dd      	beq.n	800acc8 <_dtoa_r+0xa58>
 800ad0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad10:	d1d7      	bne.n	800acc2 <_dtoa_r+0xa52>
 800ad12:	2339      	movs	r3, #57	; 0x39
 800ad14:	f88b 3000 	strb.w	r3, [fp]
 800ad18:	462b      	mov	r3, r5
 800ad1a:	461d      	mov	r5, r3
 800ad1c:	3b01      	subs	r3, #1
 800ad1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad22:	2a39      	cmp	r2, #57	; 0x39
 800ad24:	d071      	beq.n	800ae0a <_dtoa_r+0xb9a>
 800ad26:	3201      	adds	r2, #1
 800ad28:	701a      	strb	r2, [r3, #0]
 800ad2a:	e746      	b.n	800abba <_dtoa_r+0x94a>
 800ad2c:	2a00      	cmp	r2, #0
 800ad2e:	dd07      	ble.n	800ad40 <_dtoa_r+0xad0>
 800ad30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad34:	d0ed      	beq.n	800ad12 <_dtoa_r+0xaa2>
 800ad36:	f10a 0301 	add.w	r3, sl, #1
 800ad3a:	f88b 3000 	strb.w	r3, [fp]
 800ad3e:	e73c      	b.n	800abba <_dtoa_r+0x94a>
 800ad40:	9b05      	ldr	r3, [sp, #20]
 800ad42:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ad46:	4599      	cmp	r9, r3
 800ad48:	d047      	beq.n	800adda <_dtoa_r+0xb6a>
 800ad4a:	ee18 1a10 	vmov	r1, s16
 800ad4e:	2300      	movs	r3, #0
 800ad50:	220a      	movs	r2, #10
 800ad52:	4620      	mov	r0, r4
 800ad54:	f000 f8fa 	bl	800af4c <__multadd>
 800ad58:	45b8      	cmp	r8, r7
 800ad5a:	ee08 0a10 	vmov	s16, r0
 800ad5e:	f04f 0300 	mov.w	r3, #0
 800ad62:	f04f 020a 	mov.w	r2, #10
 800ad66:	4641      	mov	r1, r8
 800ad68:	4620      	mov	r0, r4
 800ad6a:	d106      	bne.n	800ad7a <_dtoa_r+0xb0a>
 800ad6c:	f000 f8ee 	bl	800af4c <__multadd>
 800ad70:	4680      	mov	r8, r0
 800ad72:	4607      	mov	r7, r0
 800ad74:	f109 0901 	add.w	r9, r9, #1
 800ad78:	e772      	b.n	800ac60 <_dtoa_r+0x9f0>
 800ad7a:	f000 f8e7 	bl	800af4c <__multadd>
 800ad7e:	4639      	mov	r1, r7
 800ad80:	4680      	mov	r8, r0
 800ad82:	2300      	movs	r3, #0
 800ad84:	220a      	movs	r2, #10
 800ad86:	4620      	mov	r0, r4
 800ad88:	f000 f8e0 	bl	800af4c <__multadd>
 800ad8c:	4607      	mov	r7, r0
 800ad8e:	e7f1      	b.n	800ad74 <_dtoa_r+0xb04>
 800ad90:	9b03      	ldr	r3, [sp, #12]
 800ad92:	9302      	str	r3, [sp, #8]
 800ad94:	9d01      	ldr	r5, [sp, #4]
 800ad96:	ee18 0a10 	vmov	r0, s16
 800ad9a:	4631      	mov	r1, r6
 800ad9c:	f7ff f9db 	bl	800a156 <quorem>
 800ada0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ada4:	9b01      	ldr	r3, [sp, #4]
 800ada6:	f805 ab01 	strb.w	sl, [r5], #1
 800adaa:	1aea      	subs	r2, r5, r3
 800adac:	9b02      	ldr	r3, [sp, #8]
 800adae:	4293      	cmp	r3, r2
 800adb0:	dd09      	ble.n	800adc6 <_dtoa_r+0xb56>
 800adb2:	ee18 1a10 	vmov	r1, s16
 800adb6:	2300      	movs	r3, #0
 800adb8:	220a      	movs	r2, #10
 800adba:	4620      	mov	r0, r4
 800adbc:	f000 f8c6 	bl	800af4c <__multadd>
 800adc0:	ee08 0a10 	vmov	s16, r0
 800adc4:	e7e7      	b.n	800ad96 <_dtoa_r+0xb26>
 800adc6:	9b02      	ldr	r3, [sp, #8]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	bfc8      	it	gt
 800adcc:	461d      	movgt	r5, r3
 800adce:	9b01      	ldr	r3, [sp, #4]
 800add0:	bfd8      	it	le
 800add2:	2501      	movle	r5, #1
 800add4:	441d      	add	r5, r3
 800add6:	f04f 0800 	mov.w	r8, #0
 800adda:	ee18 1a10 	vmov	r1, s16
 800adde:	2201      	movs	r2, #1
 800ade0:	4620      	mov	r0, r4
 800ade2:	f000 fa63 	bl	800b2ac <__lshift>
 800ade6:	4631      	mov	r1, r6
 800ade8:	ee08 0a10 	vmov	s16, r0
 800adec:	f000 face 	bl	800b38c <__mcmp>
 800adf0:	2800      	cmp	r0, #0
 800adf2:	dc91      	bgt.n	800ad18 <_dtoa_r+0xaa8>
 800adf4:	d102      	bne.n	800adfc <_dtoa_r+0xb8c>
 800adf6:	f01a 0f01 	tst.w	sl, #1
 800adfa:	d18d      	bne.n	800ad18 <_dtoa_r+0xaa8>
 800adfc:	462b      	mov	r3, r5
 800adfe:	461d      	mov	r5, r3
 800ae00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae04:	2a30      	cmp	r2, #48	; 0x30
 800ae06:	d0fa      	beq.n	800adfe <_dtoa_r+0xb8e>
 800ae08:	e6d7      	b.n	800abba <_dtoa_r+0x94a>
 800ae0a:	9a01      	ldr	r2, [sp, #4]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d184      	bne.n	800ad1a <_dtoa_r+0xaaa>
 800ae10:	9b00      	ldr	r3, [sp, #0]
 800ae12:	3301      	adds	r3, #1
 800ae14:	9300      	str	r3, [sp, #0]
 800ae16:	2331      	movs	r3, #49	; 0x31
 800ae18:	7013      	strb	r3, [r2, #0]
 800ae1a:	e6ce      	b.n	800abba <_dtoa_r+0x94a>
 800ae1c:	4b09      	ldr	r3, [pc, #36]	; (800ae44 <_dtoa_r+0xbd4>)
 800ae1e:	f7ff ba95 	b.w	800a34c <_dtoa_r+0xdc>
 800ae22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f47f aa6e 	bne.w	800a306 <_dtoa_r+0x96>
 800ae2a:	4b07      	ldr	r3, [pc, #28]	; (800ae48 <_dtoa_r+0xbd8>)
 800ae2c:	f7ff ba8e 	b.w	800a34c <_dtoa_r+0xdc>
 800ae30:	9b02      	ldr	r3, [sp, #8]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	dcae      	bgt.n	800ad94 <_dtoa_r+0xb24>
 800ae36:	9b06      	ldr	r3, [sp, #24]
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	f73f aea8 	bgt.w	800ab8e <_dtoa_r+0x91e>
 800ae3e:	e7a9      	b.n	800ad94 <_dtoa_r+0xb24>
 800ae40:	0800c91b 	.word	0x0800c91b
 800ae44:	0800c878 	.word	0x0800c878
 800ae48:	0800c89c 	.word	0x0800c89c

0800ae4c <_localeconv_r>:
 800ae4c:	4800      	ldr	r0, [pc, #0]	; (800ae50 <_localeconv_r+0x4>)
 800ae4e:	4770      	bx	lr
 800ae50:	20002550 	.word	0x20002550

0800ae54 <memcpy>:
 800ae54:	440a      	add	r2, r1
 800ae56:	4291      	cmp	r1, r2
 800ae58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ae5c:	d100      	bne.n	800ae60 <memcpy+0xc>
 800ae5e:	4770      	bx	lr
 800ae60:	b510      	push	{r4, lr}
 800ae62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae6a:	4291      	cmp	r1, r2
 800ae6c:	d1f9      	bne.n	800ae62 <memcpy+0xe>
 800ae6e:	bd10      	pop	{r4, pc}

0800ae70 <__malloc_lock>:
 800ae70:	4801      	ldr	r0, [pc, #4]	; (800ae78 <__malloc_lock+0x8>)
 800ae72:	f000 bd30 	b.w	800b8d6 <__retarget_lock_acquire_recursive>
 800ae76:	bf00      	nop
 800ae78:	20002b28 	.word	0x20002b28

0800ae7c <__malloc_unlock>:
 800ae7c:	4801      	ldr	r0, [pc, #4]	; (800ae84 <__malloc_unlock+0x8>)
 800ae7e:	f000 bd2b 	b.w	800b8d8 <__retarget_lock_release_recursive>
 800ae82:	bf00      	nop
 800ae84:	20002b28 	.word	0x20002b28

0800ae88 <_Balloc>:
 800ae88:	b570      	push	{r4, r5, r6, lr}
 800ae8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae8c:	4604      	mov	r4, r0
 800ae8e:	460d      	mov	r5, r1
 800ae90:	b976      	cbnz	r6, 800aeb0 <_Balloc+0x28>
 800ae92:	2010      	movs	r0, #16
 800ae94:	f7fe fbba 	bl	800960c <malloc>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	6260      	str	r0, [r4, #36]	; 0x24
 800ae9c:	b920      	cbnz	r0, 800aea8 <_Balloc+0x20>
 800ae9e:	4b18      	ldr	r3, [pc, #96]	; (800af00 <_Balloc+0x78>)
 800aea0:	4818      	ldr	r0, [pc, #96]	; (800af04 <_Balloc+0x7c>)
 800aea2:	2166      	movs	r1, #102	; 0x66
 800aea4:	f000 fce6 	bl	800b874 <__assert_func>
 800aea8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aeac:	6006      	str	r6, [r0, #0]
 800aeae:	60c6      	str	r6, [r0, #12]
 800aeb0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aeb2:	68f3      	ldr	r3, [r6, #12]
 800aeb4:	b183      	cbz	r3, 800aed8 <_Balloc+0x50>
 800aeb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aebe:	b9b8      	cbnz	r0, 800aef0 <_Balloc+0x68>
 800aec0:	2101      	movs	r1, #1
 800aec2:	fa01 f605 	lsl.w	r6, r1, r5
 800aec6:	1d72      	adds	r2, r6, #5
 800aec8:	0092      	lsls	r2, r2, #2
 800aeca:	4620      	mov	r0, r4
 800aecc:	f000 fb60 	bl	800b590 <_calloc_r>
 800aed0:	b160      	cbz	r0, 800aeec <_Balloc+0x64>
 800aed2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aed6:	e00e      	b.n	800aef6 <_Balloc+0x6e>
 800aed8:	2221      	movs	r2, #33	; 0x21
 800aeda:	2104      	movs	r1, #4
 800aedc:	4620      	mov	r0, r4
 800aede:	f000 fb57 	bl	800b590 <_calloc_r>
 800aee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aee4:	60f0      	str	r0, [r6, #12]
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d1e4      	bne.n	800aeb6 <_Balloc+0x2e>
 800aeec:	2000      	movs	r0, #0
 800aeee:	bd70      	pop	{r4, r5, r6, pc}
 800aef0:	6802      	ldr	r2, [r0, #0]
 800aef2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aef6:	2300      	movs	r3, #0
 800aef8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aefc:	e7f7      	b.n	800aeee <_Balloc+0x66>
 800aefe:	bf00      	nop
 800af00:	0800c8a9 	.word	0x0800c8a9
 800af04:	0800c92c 	.word	0x0800c92c

0800af08 <_Bfree>:
 800af08:	b570      	push	{r4, r5, r6, lr}
 800af0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af0c:	4605      	mov	r5, r0
 800af0e:	460c      	mov	r4, r1
 800af10:	b976      	cbnz	r6, 800af30 <_Bfree+0x28>
 800af12:	2010      	movs	r0, #16
 800af14:	f7fe fb7a 	bl	800960c <malloc>
 800af18:	4602      	mov	r2, r0
 800af1a:	6268      	str	r0, [r5, #36]	; 0x24
 800af1c:	b920      	cbnz	r0, 800af28 <_Bfree+0x20>
 800af1e:	4b09      	ldr	r3, [pc, #36]	; (800af44 <_Bfree+0x3c>)
 800af20:	4809      	ldr	r0, [pc, #36]	; (800af48 <_Bfree+0x40>)
 800af22:	218a      	movs	r1, #138	; 0x8a
 800af24:	f000 fca6 	bl	800b874 <__assert_func>
 800af28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af2c:	6006      	str	r6, [r0, #0]
 800af2e:	60c6      	str	r6, [r0, #12]
 800af30:	b13c      	cbz	r4, 800af42 <_Bfree+0x3a>
 800af32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af34:	6862      	ldr	r2, [r4, #4]
 800af36:	68db      	ldr	r3, [r3, #12]
 800af38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af3c:	6021      	str	r1, [r4, #0]
 800af3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af42:	bd70      	pop	{r4, r5, r6, pc}
 800af44:	0800c8a9 	.word	0x0800c8a9
 800af48:	0800c92c 	.word	0x0800c92c

0800af4c <__multadd>:
 800af4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af50:	690d      	ldr	r5, [r1, #16]
 800af52:	4607      	mov	r7, r0
 800af54:	460c      	mov	r4, r1
 800af56:	461e      	mov	r6, r3
 800af58:	f101 0c14 	add.w	ip, r1, #20
 800af5c:	2000      	movs	r0, #0
 800af5e:	f8dc 3000 	ldr.w	r3, [ip]
 800af62:	b299      	uxth	r1, r3
 800af64:	fb02 6101 	mla	r1, r2, r1, r6
 800af68:	0c1e      	lsrs	r6, r3, #16
 800af6a:	0c0b      	lsrs	r3, r1, #16
 800af6c:	fb02 3306 	mla	r3, r2, r6, r3
 800af70:	b289      	uxth	r1, r1
 800af72:	3001      	adds	r0, #1
 800af74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af78:	4285      	cmp	r5, r0
 800af7a:	f84c 1b04 	str.w	r1, [ip], #4
 800af7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af82:	dcec      	bgt.n	800af5e <__multadd+0x12>
 800af84:	b30e      	cbz	r6, 800afca <__multadd+0x7e>
 800af86:	68a3      	ldr	r3, [r4, #8]
 800af88:	42ab      	cmp	r3, r5
 800af8a:	dc19      	bgt.n	800afc0 <__multadd+0x74>
 800af8c:	6861      	ldr	r1, [r4, #4]
 800af8e:	4638      	mov	r0, r7
 800af90:	3101      	adds	r1, #1
 800af92:	f7ff ff79 	bl	800ae88 <_Balloc>
 800af96:	4680      	mov	r8, r0
 800af98:	b928      	cbnz	r0, 800afa6 <__multadd+0x5a>
 800af9a:	4602      	mov	r2, r0
 800af9c:	4b0c      	ldr	r3, [pc, #48]	; (800afd0 <__multadd+0x84>)
 800af9e:	480d      	ldr	r0, [pc, #52]	; (800afd4 <__multadd+0x88>)
 800afa0:	21b5      	movs	r1, #181	; 0xb5
 800afa2:	f000 fc67 	bl	800b874 <__assert_func>
 800afa6:	6922      	ldr	r2, [r4, #16]
 800afa8:	3202      	adds	r2, #2
 800afaa:	f104 010c 	add.w	r1, r4, #12
 800afae:	0092      	lsls	r2, r2, #2
 800afb0:	300c      	adds	r0, #12
 800afb2:	f7ff ff4f 	bl	800ae54 <memcpy>
 800afb6:	4621      	mov	r1, r4
 800afb8:	4638      	mov	r0, r7
 800afba:	f7ff ffa5 	bl	800af08 <_Bfree>
 800afbe:	4644      	mov	r4, r8
 800afc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800afc4:	3501      	adds	r5, #1
 800afc6:	615e      	str	r6, [r3, #20]
 800afc8:	6125      	str	r5, [r4, #16]
 800afca:	4620      	mov	r0, r4
 800afcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afd0:	0800c91b 	.word	0x0800c91b
 800afd4:	0800c92c 	.word	0x0800c92c

0800afd8 <__hi0bits>:
 800afd8:	0c03      	lsrs	r3, r0, #16
 800afda:	041b      	lsls	r3, r3, #16
 800afdc:	b9d3      	cbnz	r3, 800b014 <__hi0bits+0x3c>
 800afde:	0400      	lsls	r0, r0, #16
 800afe0:	2310      	movs	r3, #16
 800afe2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800afe6:	bf04      	itt	eq
 800afe8:	0200      	lsleq	r0, r0, #8
 800afea:	3308      	addeq	r3, #8
 800afec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aff0:	bf04      	itt	eq
 800aff2:	0100      	lsleq	r0, r0, #4
 800aff4:	3304      	addeq	r3, #4
 800aff6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800affa:	bf04      	itt	eq
 800affc:	0080      	lsleq	r0, r0, #2
 800affe:	3302      	addeq	r3, #2
 800b000:	2800      	cmp	r0, #0
 800b002:	db05      	blt.n	800b010 <__hi0bits+0x38>
 800b004:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b008:	f103 0301 	add.w	r3, r3, #1
 800b00c:	bf08      	it	eq
 800b00e:	2320      	moveq	r3, #32
 800b010:	4618      	mov	r0, r3
 800b012:	4770      	bx	lr
 800b014:	2300      	movs	r3, #0
 800b016:	e7e4      	b.n	800afe2 <__hi0bits+0xa>

0800b018 <__lo0bits>:
 800b018:	6803      	ldr	r3, [r0, #0]
 800b01a:	f013 0207 	ands.w	r2, r3, #7
 800b01e:	4601      	mov	r1, r0
 800b020:	d00b      	beq.n	800b03a <__lo0bits+0x22>
 800b022:	07da      	lsls	r2, r3, #31
 800b024:	d423      	bmi.n	800b06e <__lo0bits+0x56>
 800b026:	0798      	lsls	r0, r3, #30
 800b028:	bf49      	itett	mi
 800b02a:	085b      	lsrmi	r3, r3, #1
 800b02c:	089b      	lsrpl	r3, r3, #2
 800b02e:	2001      	movmi	r0, #1
 800b030:	600b      	strmi	r3, [r1, #0]
 800b032:	bf5c      	itt	pl
 800b034:	600b      	strpl	r3, [r1, #0]
 800b036:	2002      	movpl	r0, #2
 800b038:	4770      	bx	lr
 800b03a:	b298      	uxth	r0, r3
 800b03c:	b9a8      	cbnz	r0, 800b06a <__lo0bits+0x52>
 800b03e:	0c1b      	lsrs	r3, r3, #16
 800b040:	2010      	movs	r0, #16
 800b042:	b2da      	uxtb	r2, r3
 800b044:	b90a      	cbnz	r2, 800b04a <__lo0bits+0x32>
 800b046:	3008      	adds	r0, #8
 800b048:	0a1b      	lsrs	r3, r3, #8
 800b04a:	071a      	lsls	r2, r3, #28
 800b04c:	bf04      	itt	eq
 800b04e:	091b      	lsreq	r3, r3, #4
 800b050:	3004      	addeq	r0, #4
 800b052:	079a      	lsls	r2, r3, #30
 800b054:	bf04      	itt	eq
 800b056:	089b      	lsreq	r3, r3, #2
 800b058:	3002      	addeq	r0, #2
 800b05a:	07da      	lsls	r2, r3, #31
 800b05c:	d403      	bmi.n	800b066 <__lo0bits+0x4e>
 800b05e:	085b      	lsrs	r3, r3, #1
 800b060:	f100 0001 	add.w	r0, r0, #1
 800b064:	d005      	beq.n	800b072 <__lo0bits+0x5a>
 800b066:	600b      	str	r3, [r1, #0]
 800b068:	4770      	bx	lr
 800b06a:	4610      	mov	r0, r2
 800b06c:	e7e9      	b.n	800b042 <__lo0bits+0x2a>
 800b06e:	2000      	movs	r0, #0
 800b070:	4770      	bx	lr
 800b072:	2020      	movs	r0, #32
 800b074:	4770      	bx	lr
	...

0800b078 <__i2b>:
 800b078:	b510      	push	{r4, lr}
 800b07a:	460c      	mov	r4, r1
 800b07c:	2101      	movs	r1, #1
 800b07e:	f7ff ff03 	bl	800ae88 <_Balloc>
 800b082:	4602      	mov	r2, r0
 800b084:	b928      	cbnz	r0, 800b092 <__i2b+0x1a>
 800b086:	4b05      	ldr	r3, [pc, #20]	; (800b09c <__i2b+0x24>)
 800b088:	4805      	ldr	r0, [pc, #20]	; (800b0a0 <__i2b+0x28>)
 800b08a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b08e:	f000 fbf1 	bl	800b874 <__assert_func>
 800b092:	2301      	movs	r3, #1
 800b094:	6144      	str	r4, [r0, #20]
 800b096:	6103      	str	r3, [r0, #16]
 800b098:	bd10      	pop	{r4, pc}
 800b09a:	bf00      	nop
 800b09c:	0800c91b 	.word	0x0800c91b
 800b0a0:	0800c92c 	.word	0x0800c92c

0800b0a4 <__multiply>:
 800b0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a8:	4691      	mov	r9, r2
 800b0aa:	690a      	ldr	r2, [r1, #16]
 800b0ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	bfb8      	it	lt
 800b0b4:	460b      	movlt	r3, r1
 800b0b6:	460c      	mov	r4, r1
 800b0b8:	bfbc      	itt	lt
 800b0ba:	464c      	movlt	r4, r9
 800b0bc:	4699      	movlt	r9, r3
 800b0be:	6927      	ldr	r7, [r4, #16]
 800b0c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b0c4:	68a3      	ldr	r3, [r4, #8]
 800b0c6:	6861      	ldr	r1, [r4, #4]
 800b0c8:	eb07 060a 	add.w	r6, r7, sl
 800b0cc:	42b3      	cmp	r3, r6
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	bfb8      	it	lt
 800b0d2:	3101      	addlt	r1, #1
 800b0d4:	f7ff fed8 	bl	800ae88 <_Balloc>
 800b0d8:	b930      	cbnz	r0, 800b0e8 <__multiply+0x44>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	4b44      	ldr	r3, [pc, #272]	; (800b1f0 <__multiply+0x14c>)
 800b0de:	4845      	ldr	r0, [pc, #276]	; (800b1f4 <__multiply+0x150>)
 800b0e0:	f240 115d 	movw	r1, #349	; 0x15d
 800b0e4:	f000 fbc6 	bl	800b874 <__assert_func>
 800b0e8:	f100 0514 	add.w	r5, r0, #20
 800b0ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b0f0:	462b      	mov	r3, r5
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	4543      	cmp	r3, r8
 800b0f6:	d321      	bcc.n	800b13c <__multiply+0x98>
 800b0f8:	f104 0314 	add.w	r3, r4, #20
 800b0fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b100:	f109 0314 	add.w	r3, r9, #20
 800b104:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b108:	9202      	str	r2, [sp, #8]
 800b10a:	1b3a      	subs	r2, r7, r4
 800b10c:	3a15      	subs	r2, #21
 800b10e:	f022 0203 	bic.w	r2, r2, #3
 800b112:	3204      	adds	r2, #4
 800b114:	f104 0115 	add.w	r1, r4, #21
 800b118:	428f      	cmp	r7, r1
 800b11a:	bf38      	it	cc
 800b11c:	2204      	movcc	r2, #4
 800b11e:	9201      	str	r2, [sp, #4]
 800b120:	9a02      	ldr	r2, [sp, #8]
 800b122:	9303      	str	r3, [sp, #12]
 800b124:	429a      	cmp	r2, r3
 800b126:	d80c      	bhi.n	800b142 <__multiply+0x9e>
 800b128:	2e00      	cmp	r6, #0
 800b12a:	dd03      	ble.n	800b134 <__multiply+0x90>
 800b12c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b130:	2b00      	cmp	r3, #0
 800b132:	d05a      	beq.n	800b1ea <__multiply+0x146>
 800b134:	6106      	str	r6, [r0, #16]
 800b136:	b005      	add	sp, #20
 800b138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b13c:	f843 2b04 	str.w	r2, [r3], #4
 800b140:	e7d8      	b.n	800b0f4 <__multiply+0x50>
 800b142:	f8b3 a000 	ldrh.w	sl, [r3]
 800b146:	f1ba 0f00 	cmp.w	sl, #0
 800b14a:	d024      	beq.n	800b196 <__multiply+0xf2>
 800b14c:	f104 0e14 	add.w	lr, r4, #20
 800b150:	46a9      	mov	r9, r5
 800b152:	f04f 0c00 	mov.w	ip, #0
 800b156:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b15a:	f8d9 1000 	ldr.w	r1, [r9]
 800b15e:	fa1f fb82 	uxth.w	fp, r2
 800b162:	b289      	uxth	r1, r1
 800b164:	fb0a 110b 	mla	r1, sl, fp, r1
 800b168:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b16c:	f8d9 2000 	ldr.w	r2, [r9]
 800b170:	4461      	add	r1, ip
 800b172:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b176:	fb0a c20b 	mla	r2, sl, fp, ip
 800b17a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b17e:	b289      	uxth	r1, r1
 800b180:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b184:	4577      	cmp	r7, lr
 800b186:	f849 1b04 	str.w	r1, [r9], #4
 800b18a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b18e:	d8e2      	bhi.n	800b156 <__multiply+0xb2>
 800b190:	9a01      	ldr	r2, [sp, #4]
 800b192:	f845 c002 	str.w	ip, [r5, r2]
 800b196:	9a03      	ldr	r2, [sp, #12]
 800b198:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b19c:	3304      	adds	r3, #4
 800b19e:	f1b9 0f00 	cmp.w	r9, #0
 800b1a2:	d020      	beq.n	800b1e6 <__multiply+0x142>
 800b1a4:	6829      	ldr	r1, [r5, #0]
 800b1a6:	f104 0c14 	add.w	ip, r4, #20
 800b1aa:	46ae      	mov	lr, r5
 800b1ac:	f04f 0a00 	mov.w	sl, #0
 800b1b0:	f8bc b000 	ldrh.w	fp, [ip]
 800b1b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b1b8:	fb09 220b 	mla	r2, r9, fp, r2
 800b1bc:	4492      	add	sl, r2
 800b1be:	b289      	uxth	r1, r1
 800b1c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b1c4:	f84e 1b04 	str.w	r1, [lr], #4
 800b1c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b1cc:	f8be 1000 	ldrh.w	r1, [lr]
 800b1d0:	0c12      	lsrs	r2, r2, #16
 800b1d2:	fb09 1102 	mla	r1, r9, r2, r1
 800b1d6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b1da:	4567      	cmp	r7, ip
 800b1dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b1e0:	d8e6      	bhi.n	800b1b0 <__multiply+0x10c>
 800b1e2:	9a01      	ldr	r2, [sp, #4]
 800b1e4:	50a9      	str	r1, [r5, r2]
 800b1e6:	3504      	adds	r5, #4
 800b1e8:	e79a      	b.n	800b120 <__multiply+0x7c>
 800b1ea:	3e01      	subs	r6, #1
 800b1ec:	e79c      	b.n	800b128 <__multiply+0x84>
 800b1ee:	bf00      	nop
 800b1f0:	0800c91b 	.word	0x0800c91b
 800b1f4:	0800c92c 	.word	0x0800c92c

0800b1f8 <__pow5mult>:
 800b1f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1fc:	4615      	mov	r5, r2
 800b1fe:	f012 0203 	ands.w	r2, r2, #3
 800b202:	4606      	mov	r6, r0
 800b204:	460f      	mov	r7, r1
 800b206:	d007      	beq.n	800b218 <__pow5mult+0x20>
 800b208:	4c25      	ldr	r4, [pc, #148]	; (800b2a0 <__pow5mult+0xa8>)
 800b20a:	3a01      	subs	r2, #1
 800b20c:	2300      	movs	r3, #0
 800b20e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b212:	f7ff fe9b 	bl	800af4c <__multadd>
 800b216:	4607      	mov	r7, r0
 800b218:	10ad      	asrs	r5, r5, #2
 800b21a:	d03d      	beq.n	800b298 <__pow5mult+0xa0>
 800b21c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b21e:	b97c      	cbnz	r4, 800b240 <__pow5mult+0x48>
 800b220:	2010      	movs	r0, #16
 800b222:	f7fe f9f3 	bl	800960c <malloc>
 800b226:	4602      	mov	r2, r0
 800b228:	6270      	str	r0, [r6, #36]	; 0x24
 800b22a:	b928      	cbnz	r0, 800b238 <__pow5mult+0x40>
 800b22c:	4b1d      	ldr	r3, [pc, #116]	; (800b2a4 <__pow5mult+0xac>)
 800b22e:	481e      	ldr	r0, [pc, #120]	; (800b2a8 <__pow5mult+0xb0>)
 800b230:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b234:	f000 fb1e 	bl	800b874 <__assert_func>
 800b238:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b23c:	6004      	str	r4, [r0, #0]
 800b23e:	60c4      	str	r4, [r0, #12]
 800b240:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b244:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b248:	b94c      	cbnz	r4, 800b25e <__pow5mult+0x66>
 800b24a:	f240 2171 	movw	r1, #625	; 0x271
 800b24e:	4630      	mov	r0, r6
 800b250:	f7ff ff12 	bl	800b078 <__i2b>
 800b254:	2300      	movs	r3, #0
 800b256:	f8c8 0008 	str.w	r0, [r8, #8]
 800b25a:	4604      	mov	r4, r0
 800b25c:	6003      	str	r3, [r0, #0]
 800b25e:	f04f 0900 	mov.w	r9, #0
 800b262:	07eb      	lsls	r3, r5, #31
 800b264:	d50a      	bpl.n	800b27c <__pow5mult+0x84>
 800b266:	4639      	mov	r1, r7
 800b268:	4622      	mov	r2, r4
 800b26a:	4630      	mov	r0, r6
 800b26c:	f7ff ff1a 	bl	800b0a4 <__multiply>
 800b270:	4639      	mov	r1, r7
 800b272:	4680      	mov	r8, r0
 800b274:	4630      	mov	r0, r6
 800b276:	f7ff fe47 	bl	800af08 <_Bfree>
 800b27a:	4647      	mov	r7, r8
 800b27c:	106d      	asrs	r5, r5, #1
 800b27e:	d00b      	beq.n	800b298 <__pow5mult+0xa0>
 800b280:	6820      	ldr	r0, [r4, #0]
 800b282:	b938      	cbnz	r0, 800b294 <__pow5mult+0x9c>
 800b284:	4622      	mov	r2, r4
 800b286:	4621      	mov	r1, r4
 800b288:	4630      	mov	r0, r6
 800b28a:	f7ff ff0b 	bl	800b0a4 <__multiply>
 800b28e:	6020      	str	r0, [r4, #0]
 800b290:	f8c0 9000 	str.w	r9, [r0]
 800b294:	4604      	mov	r4, r0
 800b296:	e7e4      	b.n	800b262 <__pow5mult+0x6a>
 800b298:	4638      	mov	r0, r7
 800b29a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b29e:	bf00      	nop
 800b2a0:	0800ca78 	.word	0x0800ca78
 800b2a4:	0800c8a9 	.word	0x0800c8a9
 800b2a8:	0800c92c 	.word	0x0800c92c

0800b2ac <__lshift>:
 800b2ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2b0:	460c      	mov	r4, r1
 800b2b2:	6849      	ldr	r1, [r1, #4]
 800b2b4:	6923      	ldr	r3, [r4, #16]
 800b2b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b2ba:	68a3      	ldr	r3, [r4, #8]
 800b2bc:	4607      	mov	r7, r0
 800b2be:	4691      	mov	r9, r2
 800b2c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b2c4:	f108 0601 	add.w	r6, r8, #1
 800b2c8:	42b3      	cmp	r3, r6
 800b2ca:	db0b      	blt.n	800b2e4 <__lshift+0x38>
 800b2cc:	4638      	mov	r0, r7
 800b2ce:	f7ff fddb 	bl	800ae88 <_Balloc>
 800b2d2:	4605      	mov	r5, r0
 800b2d4:	b948      	cbnz	r0, 800b2ea <__lshift+0x3e>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	4b2a      	ldr	r3, [pc, #168]	; (800b384 <__lshift+0xd8>)
 800b2da:	482b      	ldr	r0, [pc, #172]	; (800b388 <__lshift+0xdc>)
 800b2dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b2e0:	f000 fac8 	bl	800b874 <__assert_func>
 800b2e4:	3101      	adds	r1, #1
 800b2e6:	005b      	lsls	r3, r3, #1
 800b2e8:	e7ee      	b.n	800b2c8 <__lshift+0x1c>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	f100 0114 	add.w	r1, r0, #20
 800b2f0:	f100 0210 	add.w	r2, r0, #16
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	4553      	cmp	r3, sl
 800b2f8:	db37      	blt.n	800b36a <__lshift+0xbe>
 800b2fa:	6920      	ldr	r0, [r4, #16]
 800b2fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b300:	f104 0314 	add.w	r3, r4, #20
 800b304:	f019 091f 	ands.w	r9, r9, #31
 800b308:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b30c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b310:	d02f      	beq.n	800b372 <__lshift+0xc6>
 800b312:	f1c9 0e20 	rsb	lr, r9, #32
 800b316:	468a      	mov	sl, r1
 800b318:	f04f 0c00 	mov.w	ip, #0
 800b31c:	681a      	ldr	r2, [r3, #0]
 800b31e:	fa02 f209 	lsl.w	r2, r2, r9
 800b322:	ea42 020c 	orr.w	r2, r2, ip
 800b326:	f84a 2b04 	str.w	r2, [sl], #4
 800b32a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b32e:	4298      	cmp	r0, r3
 800b330:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b334:	d8f2      	bhi.n	800b31c <__lshift+0x70>
 800b336:	1b03      	subs	r3, r0, r4
 800b338:	3b15      	subs	r3, #21
 800b33a:	f023 0303 	bic.w	r3, r3, #3
 800b33e:	3304      	adds	r3, #4
 800b340:	f104 0215 	add.w	r2, r4, #21
 800b344:	4290      	cmp	r0, r2
 800b346:	bf38      	it	cc
 800b348:	2304      	movcc	r3, #4
 800b34a:	f841 c003 	str.w	ip, [r1, r3]
 800b34e:	f1bc 0f00 	cmp.w	ip, #0
 800b352:	d001      	beq.n	800b358 <__lshift+0xac>
 800b354:	f108 0602 	add.w	r6, r8, #2
 800b358:	3e01      	subs	r6, #1
 800b35a:	4638      	mov	r0, r7
 800b35c:	612e      	str	r6, [r5, #16]
 800b35e:	4621      	mov	r1, r4
 800b360:	f7ff fdd2 	bl	800af08 <_Bfree>
 800b364:	4628      	mov	r0, r5
 800b366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b36a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b36e:	3301      	adds	r3, #1
 800b370:	e7c1      	b.n	800b2f6 <__lshift+0x4a>
 800b372:	3904      	subs	r1, #4
 800b374:	f853 2b04 	ldr.w	r2, [r3], #4
 800b378:	f841 2f04 	str.w	r2, [r1, #4]!
 800b37c:	4298      	cmp	r0, r3
 800b37e:	d8f9      	bhi.n	800b374 <__lshift+0xc8>
 800b380:	e7ea      	b.n	800b358 <__lshift+0xac>
 800b382:	bf00      	nop
 800b384:	0800c91b 	.word	0x0800c91b
 800b388:	0800c92c 	.word	0x0800c92c

0800b38c <__mcmp>:
 800b38c:	b530      	push	{r4, r5, lr}
 800b38e:	6902      	ldr	r2, [r0, #16]
 800b390:	690c      	ldr	r4, [r1, #16]
 800b392:	1b12      	subs	r2, r2, r4
 800b394:	d10e      	bne.n	800b3b4 <__mcmp+0x28>
 800b396:	f100 0314 	add.w	r3, r0, #20
 800b39a:	3114      	adds	r1, #20
 800b39c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b3a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b3a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b3a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b3ac:	42a5      	cmp	r5, r4
 800b3ae:	d003      	beq.n	800b3b8 <__mcmp+0x2c>
 800b3b0:	d305      	bcc.n	800b3be <__mcmp+0x32>
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	4610      	mov	r0, r2
 800b3b6:	bd30      	pop	{r4, r5, pc}
 800b3b8:	4283      	cmp	r3, r0
 800b3ba:	d3f3      	bcc.n	800b3a4 <__mcmp+0x18>
 800b3bc:	e7fa      	b.n	800b3b4 <__mcmp+0x28>
 800b3be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b3c2:	e7f7      	b.n	800b3b4 <__mcmp+0x28>

0800b3c4 <__mdiff>:
 800b3c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c8:	460c      	mov	r4, r1
 800b3ca:	4606      	mov	r6, r0
 800b3cc:	4611      	mov	r1, r2
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	4690      	mov	r8, r2
 800b3d2:	f7ff ffdb 	bl	800b38c <__mcmp>
 800b3d6:	1e05      	subs	r5, r0, #0
 800b3d8:	d110      	bne.n	800b3fc <__mdiff+0x38>
 800b3da:	4629      	mov	r1, r5
 800b3dc:	4630      	mov	r0, r6
 800b3de:	f7ff fd53 	bl	800ae88 <_Balloc>
 800b3e2:	b930      	cbnz	r0, 800b3f2 <__mdiff+0x2e>
 800b3e4:	4b3a      	ldr	r3, [pc, #232]	; (800b4d0 <__mdiff+0x10c>)
 800b3e6:	4602      	mov	r2, r0
 800b3e8:	f240 2132 	movw	r1, #562	; 0x232
 800b3ec:	4839      	ldr	r0, [pc, #228]	; (800b4d4 <__mdiff+0x110>)
 800b3ee:	f000 fa41 	bl	800b874 <__assert_func>
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b3f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3fc:	bfa4      	itt	ge
 800b3fe:	4643      	movge	r3, r8
 800b400:	46a0      	movge	r8, r4
 800b402:	4630      	mov	r0, r6
 800b404:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b408:	bfa6      	itte	ge
 800b40a:	461c      	movge	r4, r3
 800b40c:	2500      	movge	r5, #0
 800b40e:	2501      	movlt	r5, #1
 800b410:	f7ff fd3a 	bl	800ae88 <_Balloc>
 800b414:	b920      	cbnz	r0, 800b420 <__mdiff+0x5c>
 800b416:	4b2e      	ldr	r3, [pc, #184]	; (800b4d0 <__mdiff+0x10c>)
 800b418:	4602      	mov	r2, r0
 800b41a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b41e:	e7e5      	b.n	800b3ec <__mdiff+0x28>
 800b420:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b424:	6926      	ldr	r6, [r4, #16]
 800b426:	60c5      	str	r5, [r0, #12]
 800b428:	f104 0914 	add.w	r9, r4, #20
 800b42c:	f108 0514 	add.w	r5, r8, #20
 800b430:	f100 0e14 	add.w	lr, r0, #20
 800b434:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b438:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b43c:	f108 0210 	add.w	r2, r8, #16
 800b440:	46f2      	mov	sl, lr
 800b442:	2100      	movs	r1, #0
 800b444:	f859 3b04 	ldr.w	r3, [r9], #4
 800b448:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b44c:	fa1f f883 	uxth.w	r8, r3
 800b450:	fa11 f18b 	uxtah	r1, r1, fp
 800b454:	0c1b      	lsrs	r3, r3, #16
 800b456:	eba1 0808 	sub.w	r8, r1, r8
 800b45a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b45e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b462:	fa1f f888 	uxth.w	r8, r8
 800b466:	1419      	asrs	r1, r3, #16
 800b468:	454e      	cmp	r6, r9
 800b46a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b46e:	f84a 3b04 	str.w	r3, [sl], #4
 800b472:	d8e7      	bhi.n	800b444 <__mdiff+0x80>
 800b474:	1b33      	subs	r3, r6, r4
 800b476:	3b15      	subs	r3, #21
 800b478:	f023 0303 	bic.w	r3, r3, #3
 800b47c:	3304      	adds	r3, #4
 800b47e:	3415      	adds	r4, #21
 800b480:	42a6      	cmp	r6, r4
 800b482:	bf38      	it	cc
 800b484:	2304      	movcc	r3, #4
 800b486:	441d      	add	r5, r3
 800b488:	4473      	add	r3, lr
 800b48a:	469e      	mov	lr, r3
 800b48c:	462e      	mov	r6, r5
 800b48e:	4566      	cmp	r6, ip
 800b490:	d30e      	bcc.n	800b4b0 <__mdiff+0xec>
 800b492:	f10c 0203 	add.w	r2, ip, #3
 800b496:	1b52      	subs	r2, r2, r5
 800b498:	f022 0203 	bic.w	r2, r2, #3
 800b49c:	3d03      	subs	r5, #3
 800b49e:	45ac      	cmp	ip, r5
 800b4a0:	bf38      	it	cc
 800b4a2:	2200      	movcc	r2, #0
 800b4a4:	441a      	add	r2, r3
 800b4a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b4aa:	b17b      	cbz	r3, 800b4cc <__mdiff+0x108>
 800b4ac:	6107      	str	r7, [r0, #16]
 800b4ae:	e7a3      	b.n	800b3f8 <__mdiff+0x34>
 800b4b0:	f856 8b04 	ldr.w	r8, [r6], #4
 800b4b4:	fa11 f288 	uxtah	r2, r1, r8
 800b4b8:	1414      	asrs	r4, r2, #16
 800b4ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b4be:	b292      	uxth	r2, r2
 800b4c0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b4c4:	f84e 2b04 	str.w	r2, [lr], #4
 800b4c8:	1421      	asrs	r1, r4, #16
 800b4ca:	e7e0      	b.n	800b48e <__mdiff+0xca>
 800b4cc:	3f01      	subs	r7, #1
 800b4ce:	e7ea      	b.n	800b4a6 <__mdiff+0xe2>
 800b4d0:	0800c91b 	.word	0x0800c91b
 800b4d4:	0800c92c 	.word	0x0800c92c

0800b4d8 <__d2b>:
 800b4d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b4dc:	4689      	mov	r9, r1
 800b4de:	2101      	movs	r1, #1
 800b4e0:	ec57 6b10 	vmov	r6, r7, d0
 800b4e4:	4690      	mov	r8, r2
 800b4e6:	f7ff fccf 	bl	800ae88 <_Balloc>
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	b930      	cbnz	r0, 800b4fc <__d2b+0x24>
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	4b25      	ldr	r3, [pc, #148]	; (800b588 <__d2b+0xb0>)
 800b4f2:	4826      	ldr	r0, [pc, #152]	; (800b58c <__d2b+0xb4>)
 800b4f4:	f240 310a 	movw	r1, #778	; 0x30a
 800b4f8:	f000 f9bc 	bl	800b874 <__assert_func>
 800b4fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b500:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b504:	bb35      	cbnz	r5, 800b554 <__d2b+0x7c>
 800b506:	2e00      	cmp	r6, #0
 800b508:	9301      	str	r3, [sp, #4]
 800b50a:	d028      	beq.n	800b55e <__d2b+0x86>
 800b50c:	4668      	mov	r0, sp
 800b50e:	9600      	str	r6, [sp, #0]
 800b510:	f7ff fd82 	bl	800b018 <__lo0bits>
 800b514:	9900      	ldr	r1, [sp, #0]
 800b516:	b300      	cbz	r0, 800b55a <__d2b+0x82>
 800b518:	9a01      	ldr	r2, [sp, #4]
 800b51a:	f1c0 0320 	rsb	r3, r0, #32
 800b51e:	fa02 f303 	lsl.w	r3, r2, r3
 800b522:	430b      	orrs	r3, r1
 800b524:	40c2      	lsrs	r2, r0
 800b526:	6163      	str	r3, [r4, #20]
 800b528:	9201      	str	r2, [sp, #4]
 800b52a:	9b01      	ldr	r3, [sp, #4]
 800b52c:	61a3      	str	r3, [r4, #24]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	bf14      	ite	ne
 800b532:	2202      	movne	r2, #2
 800b534:	2201      	moveq	r2, #1
 800b536:	6122      	str	r2, [r4, #16]
 800b538:	b1d5      	cbz	r5, 800b570 <__d2b+0x98>
 800b53a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b53e:	4405      	add	r5, r0
 800b540:	f8c9 5000 	str.w	r5, [r9]
 800b544:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b548:	f8c8 0000 	str.w	r0, [r8]
 800b54c:	4620      	mov	r0, r4
 800b54e:	b003      	add	sp, #12
 800b550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b558:	e7d5      	b.n	800b506 <__d2b+0x2e>
 800b55a:	6161      	str	r1, [r4, #20]
 800b55c:	e7e5      	b.n	800b52a <__d2b+0x52>
 800b55e:	a801      	add	r0, sp, #4
 800b560:	f7ff fd5a 	bl	800b018 <__lo0bits>
 800b564:	9b01      	ldr	r3, [sp, #4]
 800b566:	6163      	str	r3, [r4, #20]
 800b568:	2201      	movs	r2, #1
 800b56a:	6122      	str	r2, [r4, #16]
 800b56c:	3020      	adds	r0, #32
 800b56e:	e7e3      	b.n	800b538 <__d2b+0x60>
 800b570:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b574:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b578:	f8c9 0000 	str.w	r0, [r9]
 800b57c:	6918      	ldr	r0, [r3, #16]
 800b57e:	f7ff fd2b 	bl	800afd8 <__hi0bits>
 800b582:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b586:	e7df      	b.n	800b548 <__d2b+0x70>
 800b588:	0800c91b 	.word	0x0800c91b
 800b58c:	0800c92c 	.word	0x0800c92c

0800b590 <_calloc_r>:
 800b590:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b592:	fba1 2402 	umull	r2, r4, r1, r2
 800b596:	b94c      	cbnz	r4, 800b5ac <_calloc_r+0x1c>
 800b598:	4611      	mov	r1, r2
 800b59a:	9201      	str	r2, [sp, #4]
 800b59c:	f7fe f8ba 	bl	8009714 <_malloc_r>
 800b5a0:	9a01      	ldr	r2, [sp, #4]
 800b5a2:	4605      	mov	r5, r0
 800b5a4:	b930      	cbnz	r0, 800b5b4 <_calloc_r+0x24>
 800b5a6:	4628      	mov	r0, r5
 800b5a8:	b003      	add	sp, #12
 800b5aa:	bd30      	pop	{r4, r5, pc}
 800b5ac:	220c      	movs	r2, #12
 800b5ae:	6002      	str	r2, [r0, #0]
 800b5b0:	2500      	movs	r5, #0
 800b5b2:	e7f8      	b.n	800b5a6 <_calloc_r+0x16>
 800b5b4:	4621      	mov	r1, r4
 800b5b6:	f7fe f839 	bl	800962c <memset>
 800b5ba:	e7f4      	b.n	800b5a6 <_calloc_r+0x16>

0800b5bc <__ssputs_r>:
 800b5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5c0:	688e      	ldr	r6, [r1, #8]
 800b5c2:	429e      	cmp	r6, r3
 800b5c4:	4682      	mov	sl, r0
 800b5c6:	460c      	mov	r4, r1
 800b5c8:	4690      	mov	r8, r2
 800b5ca:	461f      	mov	r7, r3
 800b5cc:	d838      	bhi.n	800b640 <__ssputs_r+0x84>
 800b5ce:	898a      	ldrh	r2, [r1, #12]
 800b5d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b5d4:	d032      	beq.n	800b63c <__ssputs_r+0x80>
 800b5d6:	6825      	ldr	r5, [r4, #0]
 800b5d8:	6909      	ldr	r1, [r1, #16]
 800b5da:	eba5 0901 	sub.w	r9, r5, r1
 800b5de:	6965      	ldr	r5, [r4, #20]
 800b5e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	444b      	add	r3, r9
 800b5ec:	106d      	asrs	r5, r5, #1
 800b5ee:	429d      	cmp	r5, r3
 800b5f0:	bf38      	it	cc
 800b5f2:	461d      	movcc	r5, r3
 800b5f4:	0553      	lsls	r3, r2, #21
 800b5f6:	d531      	bpl.n	800b65c <__ssputs_r+0xa0>
 800b5f8:	4629      	mov	r1, r5
 800b5fa:	f7fe f88b 	bl	8009714 <_malloc_r>
 800b5fe:	4606      	mov	r6, r0
 800b600:	b950      	cbnz	r0, 800b618 <__ssputs_r+0x5c>
 800b602:	230c      	movs	r3, #12
 800b604:	f8ca 3000 	str.w	r3, [sl]
 800b608:	89a3      	ldrh	r3, [r4, #12]
 800b60a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b60e:	81a3      	strh	r3, [r4, #12]
 800b610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b618:	6921      	ldr	r1, [r4, #16]
 800b61a:	464a      	mov	r2, r9
 800b61c:	f7ff fc1a 	bl	800ae54 <memcpy>
 800b620:	89a3      	ldrh	r3, [r4, #12]
 800b622:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b62a:	81a3      	strh	r3, [r4, #12]
 800b62c:	6126      	str	r6, [r4, #16]
 800b62e:	6165      	str	r5, [r4, #20]
 800b630:	444e      	add	r6, r9
 800b632:	eba5 0509 	sub.w	r5, r5, r9
 800b636:	6026      	str	r6, [r4, #0]
 800b638:	60a5      	str	r5, [r4, #8]
 800b63a:	463e      	mov	r6, r7
 800b63c:	42be      	cmp	r6, r7
 800b63e:	d900      	bls.n	800b642 <__ssputs_r+0x86>
 800b640:	463e      	mov	r6, r7
 800b642:	6820      	ldr	r0, [r4, #0]
 800b644:	4632      	mov	r2, r6
 800b646:	4641      	mov	r1, r8
 800b648:	f000 f959 	bl	800b8fe <memmove>
 800b64c:	68a3      	ldr	r3, [r4, #8]
 800b64e:	1b9b      	subs	r3, r3, r6
 800b650:	60a3      	str	r3, [r4, #8]
 800b652:	6823      	ldr	r3, [r4, #0]
 800b654:	4433      	add	r3, r6
 800b656:	6023      	str	r3, [r4, #0]
 800b658:	2000      	movs	r0, #0
 800b65a:	e7db      	b.n	800b614 <__ssputs_r+0x58>
 800b65c:	462a      	mov	r2, r5
 800b65e:	f000 f968 	bl	800b932 <_realloc_r>
 800b662:	4606      	mov	r6, r0
 800b664:	2800      	cmp	r0, #0
 800b666:	d1e1      	bne.n	800b62c <__ssputs_r+0x70>
 800b668:	6921      	ldr	r1, [r4, #16]
 800b66a:	4650      	mov	r0, sl
 800b66c:	f7fd ffe6 	bl	800963c <_free_r>
 800b670:	e7c7      	b.n	800b602 <__ssputs_r+0x46>
	...

0800b674 <_svfiprintf_r>:
 800b674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b678:	4698      	mov	r8, r3
 800b67a:	898b      	ldrh	r3, [r1, #12]
 800b67c:	061b      	lsls	r3, r3, #24
 800b67e:	b09d      	sub	sp, #116	; 0x74
 800b680:	4607      	mov	r7, r0
 800b682:	460d      	mov	r5, r1
 800b684:	4614      	mov	r4, r2
 800b686:	d50e      	bpl.n	800b6a6 <_svfiprintf_r+0x32>
 800b688:	690b      	ldr	r3, [r1, #16]
 800b68a:	b963      	cbnz	r3, 800b6a6 <_svfiprintf_r+0x32>
 800b68c:	2140      	movs	r1, #64	; 0x40
 800b68e:	f7fe f841 	bl	8009714 <_malloc_r>
 800b692:	6028      	str	r0, [r5, #0]
 800b694:	6128      	str	r0, [r5, #16]
 800b696:	b920      	cbnz	r0, 800b6a2 <_svfiprintf_r+0x2e>
 800b698:	230c      	movs	r3, #12
 800b69a:	603b      	str	r3, [r7, #0]
 800b69c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6a0:	e0d1      	b.n	800b846 <_svfiprintf_r+0x1d2>
 800b6a2:	2340      	movs	r3, #64	; 0x40
 800b6a4:	616b      	str	r3, [r5, #20]
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	9309      	str	r3, [sp, #36]	; 0x24
 800b6aa:	2320      	movs	r3, #32
 800b6ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6b4:	2330      	movs	r3, #48	; 0x30
 800b6b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b860 <_svfiprintf_r+0x1ec>
 800b6ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6be:	f04f 0901 	mov.w	r9, #1
 800b6c2:	4623      	mov	r3, r4
 800b6c4:	469a      	mov	sl, r3
 800b6c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6ca:	b10a      	cbz	r2, 800b6d0 <_svfiprintf_r+0x5c>
 800b6cc:	2a25      	cmp	r2, #37	; 0x25
 800b6ce:	d1f9      	bne.n	800b6c4 <_svfiprintf_r+0x50>
 800b6d0:	ebba 0b04 	subs.w	fp, sl, r4
 800b6d4:	d00b      	beq.n	800b6ee <_svfiprintf_r+0x7a>
 800b6d6:	465b      	mov	r3, fp
 800b6d8:	4622      	mov	r2, r4
 800b6da:	4629      	mov	r1, r5
 800b6dc:	4638      	mov	r0, r7
 800b6de:	f7ff ff6d 	bl	800b5bc <__ssputs_r>
 800b6e2:	3001      	adds	r0, #1
 800b6e4:	f000 80aa 	beq.w	800b83c <_svfiprintf_r+0x1c8>
 800b6e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6ea:	445a      	add	r2, fp
 800b6ec:	9209      	str	r2, [sp, #36]	; 0x24
 800b6ee:	f89a 3000 	ldrb.w	r3, [sl]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	f000 80a2 	beq.w	800b83c <_svfiprintf_r+0x1c8>
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b702:	f10a 0a01 	add.w	sl, sl, #1
 800b706:	9304      	str	r3, [sp, #16]
 800b708:	9307      	str	r3, [sp, #28]
 800b70a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b70e:	931a      	str	r3, [sp, #104]	; 0x68
 800b710:	4654      	mov	r4, sl
 800b712:	2205      	movs	r2, #5
 800b714:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b718:	4851      	ldr	r0, [pc, #324]	; (800b860 <_svfiprintf_r+0x1ec>)
 800b71a:	f7f4 fd81 	bl	8000220 <memchr>
 800b71e:	9a04      	ldr	r2, [sp, #16]
 800b720:	b9d8      	cbnz	r0, 800b75a <_svfiprintf_r+0xe6>
 800b722:	06d0      	lsls	r0, r2, #27
 800b724:	bf44      	itt	mi
 800b726:	2320      	movmi	r3, #32
 800b728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b72c:	0711      	lsls	r1, r2, #28
 800b72e:	bf44      	itt	mi
 800b730:	232b      	movmi	r3, #43	; 0x2b
 800b732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b736:	f89a 3000 	ldrb.w	r3, [sl]
 800b73a:	2b2a      	cmp	r3, #42	; 0x2a
 800b73c:	d015      	beq.n	800b76a <_svfiprintf_r+0xf6>
 800b73e:	9a07      	ldr	r2, [sp, #28]
 800b740:	4654      	mov	r4, sl
 800b742:	2000      	movs	r0, #0
 800b744:	f04f 0c0a 	mov.w	ip, #10
 800b748:	4621      	mov	r1, r4
 800b74a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b74e:	3b30      	subs	r3, #48	; 0x30
 800b750:	2b09      	cmp	r3, #9
 800b752:	d94e      	bls.n	800b7f2 <_svfiprintf_r+0x17e>
 800b754:	b1b0      	cbz	r0, 800b784 <_svfiprintf_r+0x110>
 800b756:	9207      	str	r2, [sp, #28]
 800b758:	e014      	b.n	800b784 <_svfiprintf_r+0x110>
 800b75a:	eba0 0308 	sub.w	r3, r0, r8
 800b75e:	fa09 f303 	lsl.w	r3, r9, r3
 800b762:	4313      	orrs	r3, r2
 800b764:	9304      	str	r3, [sp, #16]
 800b766:	46a2      	mov	sl, r4
 800b768:	e7d2      	b.n	800b710 <_svfiprintf_r+0x9c>
 800b76a:	9b03      	ldr	r3, [sp, #12]
 800b76c:	1d19      	adds	r1, r3, #4
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	9103      	str	r1, [sp, #12]
 800b772:	2b00      	cmp	r3, #0
 800b774:	bfbb      	ittet	lt
 800b776:	425b      	neglt	r3, r3
 800b778:	f042 0202 	orrlt.w	r2, r2, #2
 800b77c:	9307      	strge	r3, [sp, #28]
 800b77e:	9307      	strlt	r3, [sp, #28]
 800b780:	bfb8      	it	lt
 800b782:	9204      	strlt	r2, [sp, #16]
 800b784:	7823      	ldrb	r3, [r4, #0]
 800b786:	2b2e      	cmp	r3, #46	; 0x2e
 800b788:	d10c      	bne.n	800b7a4 <_svfiprintf_r+0x130>
 800b78a:	7863      	ldrb	r3, [r4, #1]
 800b78c:	2b2a      	cmp	r3, #42	; 0x2a
 800b78e:	d135      	bne.n	800b7fc <_svfiprintf_r+0x188>
 800b790:	9b03      	ldr	r3, [sp, #12]
 800b792:	1d1a      	adds	r2, r3, #4
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	9203      	str	r2, [sp, #12]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	bfb8      	it	lt
 800b79c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b7a0:	3402      	adds	r4, #2
 800b7a2:	9305      	str	r3, [sp, #20]
 800b7a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b870 <_svfiprintf_r+0x1fc>
 800b7a8:	7821      	ldrb	r1, [r4, #0]
 800b7aa:	2203      	movs	r2, #3
 800b7ac:	4650      	mov	r0, sl
 800b7ae:	f7f4 fd37 	bl	8000220 <memchr>
 800b7b2:	b140      	cbz	r0, 800b7c6 <_svfiprintf_r+0x152>
 800b7b4:	2340      	movs	r3, #64	; 0x40
 800b7b6:	eba0 000a 	sub.w	r0, r0, sl
 800b7ba:	fa03 f000 	lsl.w	r0, r3, r0
 800b7be:	9b04      	ldr	r3, [sp, #16]
 800b7c0:	4303      	orrs	r3, r0
 800b7c2:	3401      	adds	r4, #1
 800b7c4:	9304      	str	r3, [sp, #16]
 800b7c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7ca:	4826      	ldr	r0, [pc, #152]	; (800b864 <_svfiprintf_r+0x1f0>)
 800b7cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7d0:	2206      	movs	r2, #6
 800b7d2:	f7f4 fd25 	bl	8000220 <memchr>
 800b7d6:	2800      	cmp	r0, #0
 800b7d8:	d038      	beq.n	800b84c <_svfiprintf_r+0x1d8>
 800b7da:	4b23      	ldr	r3, [pc, #140]	; (800b868 <_svfiprintf_r+0x1f4>)
 800b7dc:	bb1b      	cbnz	r3, 800b826 <_svfiprintf_r+0x1b2>
 800b7de:	9b03      	ldr	r3, [sp, #12]
 800b7e0:	3307      	adds	r3, #7
 800b7e2:	f023 0307 	bic.w	r3, r3, #7
 800b7e6:	3308      	adds	r3, #8
 800b7e8:	9303      	str	r3, [sp, #12]
 800b7ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7ec:	4433      	add	r3, r6
 800b7ee:	9309      	str	r3, [sp, #36]	; 0x24
 800b7f0:	e767      	b.n	800b6c2 <_svfiprintf_r+0x4e>
 800b7f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7f6:	460c      	mov	r4, r1
 800b7f8:	2001      	movs	r0, #1
 800b7fa:	e7a5      	b.n	800b748 <_svfiprintf_r+0xd4>
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	3401      	adds	r4, #1
 800b800:	9305      	str	r3, [sp, #20]
 800b802:	4619      	mov	r1, r3
 800b804:	f04f 0c0a 	mov.w	ip, #10
 800b808:	4620      	mov	r0, r4
 800b80a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b80e:	3a30      	subs	r2, #48	; 0x30
 800b810:	2a09      	cmp	r2, #9
 800b812:	d903      	bls.n	800b81c <_svfiprintf_r+0x1a8>
 800b814:	2b00      	cmp	r3, #0
 800b816:	d0c5      	beq.n	800b7a4 <_svfiprintf_r+0x130>
 800b818:	9105      	str	r1, [sp, #20]
 800b81a:	e7c3      	b.n	800b7a4 <_svfiprintf_r+0x130>
 800b81c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b820:	4604      	mov	r4, r0
 800b822:	2301      	movs	r3, #1
 800b824:	e7f0      	b.n	800b808 <_svfiprintf_r+0x194>
 800b826:	ab03      	add	r3, sp, #12
 800b828:	9300      	str	r3, [sp, #0]
 800b82a:	462a      	mov	r2, r5
 800b82c:	4b0f      	ldr	r3, [pc, #60]	; (800b86c <_svfiprintf_r+0x1f8>)
 800b82e:	a904      	add	r1, sp, #16
 800b830:	4638      	mov	r0, r7
 800b832:	f7fe f883 	bl	800993c <_printf_float>
 800b836:	1c42      	adds	r2, r0, #1
 800b838:	4606      	mov	r6, r0
 800b83a:	d1d6      	bne.n	800b7ea <_svfiprintf_r+0x176>
 800b83c:	89ab      	ldrh	r3, [r5, #12]
 800b83e:	065b      	lsls	r3, r3, #25
 800b840:	f53f af2c 	bmi.w	800b69c <_svfiprintf_r+0x28>
 800b844:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b846:	b01d      	add	sp, #116	; 0x74
 800b848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b84c:	ab03      	add	r3, sp, #12
 800b84e:	9300      	str	r3, [sp, #0]
 800b850:	462a      	mov	r2, r5
 800b852:	4b06      	ldr	r3, [pc, #24]	; (800b86c <_svfiprintf_r+0x1f8>)
 800b854:	a904      	add	r1, sp, #16
 800b856:	4638      	mov	r0, r7
 800b858:	f7fe fb14 	bl	8009e84 <_printf_i>
 800b85c:	e7eb      	b.n	800b836 <_svfiprintf_r+0x1c2>
 800b85e:	bf00      	nop
 800b860:	0800ca84 	.word	0x0800ca84
 800b864:	0800ca8e 	.word	0x0800ca8e
 800b868:	0800993d 	.word	0x0800993d
 800b86c:	0800b5bd 	.word	0x0800b5bd
 800b870:	0800ca8a 	.word	0x0800ca8a

0800b874 <__assert_func>:
 800b874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b876:	4614      	mov	r4, r2
 800b878:	461a      	mov	r2, r3
 800b87a:	4b09      	ldr	r3, [pc, #36]	; (800b8a0 <__assert_func+0x2c>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4605      	mov	r5, r0
 800b880:	68d8      	ldr	r0, [r3, #12]
 800b882:	b14c      	cbz	r4, 800b898 <__assert_func+0x24>
 800b884:	4b07      	ldr	r3, [pc, #28]	; (800b8a4 <__assert_func+0x30>)
 800b886:	9100      	str	r1, [sp, #0]
 800b888:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b88c:	4906      	ldr	r1, [pc, #24]	; (800b8a8 <__assert_func+0x34>)
 800b88e:	462b      	mov	r3, r5
 800b890:	f000 f80e 	bl	800b8b0 <fiprintf>
 800b894:	f000 faa4 	bl	800bde0 <abort>
 800b898:	4b04      	ldr	r3, [pc, #16]	; (800b8ac <__assert_func+0x38>)
 800b89a:	461c      	mov	r4, r3
 800b89c:	e7f3      	b.n	800b886 <__assert_func+0x12>
 800b89e:	bf00      	nop
 800b8a0:	200023fc 	.word	0x200023fc
 800b8a4:	0800ca95 	.word	0x0800ca95
 800b8a8:	0800caa2 	.word	0x0800caa2
 800b8ac:	0800cad0 	.word	0x0800cad0

0800b8b0 <fiprintf>:
 800b8b0:	b40e      	push	{r1, r2, r3}
 800b8b2:	b503      	push	{r0, r1, lr}
 800b8b4:	4601      	mov	r1, r0
 800b8b6:	ab03      	add	r3, sp, #12
 800b8b8:	4805      	ldr	r0, [pc, #20]	; (800b8d0 <fiprintf+0x20>)
 800b8ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8be:	6800      	ldr	r0, [r0, #0]
 800b8c0:	9301      	str	r3, [sp, #4]
 800b8c2:	f000 f88f 	bl	800b9e4 <_vfiprintf_r>
 800b8c6:	b002      	add	sp, #8
 800b8c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8cc:	b003      	add	sp, #12
 800b8ce:	4770      	bx	lr
 800b8d0:	200023fc 	.word	0x200023fc

0800b8d4 <__retarget_lock_init_recursive>:
 800b8d4:	4770      	bx	lr

0800b8d6 <__retarget_lock_acquire_recursive>:
 800b8d6:	4770      	bx	lr

0800b8d8 <__retarget_lock_release_recursive>:
 800b8d8:	4770      	bx	lr

0800b8da <__ascii_mbtowc>:
 800b8da:	b082      	sub	sp, #8
 800b8dc:	b901      	cbnz	r1, 800b8e0 <__ascii_mbtowc+0x6>
 800b8de:	a901      	add	r1, sp, #4
 800b8e0:	b142      	cbz	r2, 800b8f4 <__ascii_mbtowc+0x1a>
 800b8e2:	b14b      	cbz	r3, 800b8f8 <__ascii_mbtowc+0x1e>
 800b8e4:	7813      	ldrb	r3, [r2, #0]
 800b8e6:	600b      	str	r3, [r1, #0]
 800b8e8:	7812      	ldrb	r2, [r2, #0]
 800b8ea:	1e10      	subs	r0, r2, #0
 800b8ec:	bf18      	it	ne
 800b8ee:	2001      	movne	r0, #1
 800b8f0:	b002      	add	sp, #8
 800b8f2:	4770      	bx	lr
 800b8f4:	4610      	mov	r0, r2
 800b8f6:	e7fb      	b.n	800b8f0 <__ascii_mbtowc+0x16>
 800b8f8:	f06f 0001 	mvn.w	r0, #1
 800b8fc:	e7f8      	b.n	800b8f0 <__ascii_mbtowc+0x16>

0800b8fe <memmove>:
 800b8fe:	4288      	cmp	r0, r1
 800b900:	b510      	push	{r4, lr}
 800b902:	eb01 0402 	add.w	r4, r1, r2
 800b906:	d902      	bls.n	800b90e <memmove+0x10>
 800b908:	4284      	cmp	r4, r0
 800b90a:	4623      	mov	r3, r4
 800b90c:	d807      	bhi.n	800b91e <memmove+0x20>
 800b90e:	1e43      	subs	r3, r0, #1
 800b910:	42a1      	cmp	r1, r4
 800b912:	d008      	beq.n	800b926 <memmove+0x28>
 800b914:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b918:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b91c:	e7f8      	b.n	800b910 <memmove+0x12>
 800b91e:	4402      	add	r2, r0
 800b920:	4601      	mov	r1, r0
 800b922:	428a      	cmp	r2, r1
 800b924:	d100      	bne.n	800b928 <memmove+0x2a>
 800b926:	bd10      	pop	{r4, pc}
 800b928:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b92c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b930:	e7f7      	b.n	800b922 <memmove+0x24>

0800b932 <_realloc_r>:
 800b932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b936:	4680      	mov	r8, r0
 800b938:	4614      	mov	r4, r2
 800b93a:	460e      	mov	r6, r1
 800b93c:	b921      	cbnz	r1, 800b948 <_realloc_r+0x16>
 800b93e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b942:	4611      	mov	r1, r2
 800b944:	f7fd bee6 	b.w	8009714 <_malloc_r>
 800b948:	b92a      	cbnz	r2, 800b956 <_realloc_r+0x24>
 800b94a:	f7fd fe77 	bl	800963c <_free_r>
 800b94e:	4625      	mov	r5, r4
 800b950:	4628      	mov	r0, r5
 800b952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b956:	f000 fc67 	bl	800c228 <_malloc_usable_size_r>
 800b95a:	4284      	cmp	r4, r0
 800b95c:	4607      	mov	r7, r0
 800b95e:	d802      	bhi.n	800b966 <_realloc_r+0x34>
 800b960:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b964:	d812      	bhi.n	800b98c <_realloc_r+0x5a>
 800b966:	4621      	mov	r1, r4
 800b968:	4640      	mov	r0, r8
 800b96a:	f7fd fed3 	bl	8009714 <_malloc_r>
 800b96e:	4605      	mov	r5, r0
 800b970:	2800      	cmp	r0, #0
 800b972:	d0ed      	beq.n	800b950 <_realloc_r+0x1e>
 800b974:	42bc      	cmp	r4, r7
 800b976:	4622      	mov	r2, r4
 800b978:	4631      	mov	r1, r6
 800b97a:	bf28      	it	cs
 800b97c:	463a      	movcs	r2, r7
 800b97e:	f7ff fa69 	bl	800ae54 <memcpy>
 800b982:	4631      	mov	r1, r6
 800b984:	4640      	mov	r0, r8
 800b986:	f7fd fe59 	bl	800963c <_free_r>
 800b98a:	e7e1      	b.n	800b950 <_realloc_r+0x1e>
 800b98c:	4635      	mov	r5, r6
 800b98e:	e7df      	b.n	800b950 <_realloc_r+0x1e>

0800b990 <__sfputc_r>:
 800b990:	6893      	ldr	r3, [r2, #8]
 800b992:	3b01      	subs	r3, #1
 800b994:	2b00      	cmp	r3, #0
 800b996:	b410      	push	{r4}
 800b998:	6093      	str	r3, [r2, #8]
 800b99a:	da08      	bge.n	800b9ae <__sfputc_r+0x1e>
 800b99c:	6994      	ldr	r4, [r2, #24]
 800b99e:	42a3      	cmp	r3, r4
 800b9a0:	db01      	blt.n	800b9a6 <__sfputc_r+0x16>
 800b9a2:	290a      	cmp	r1, #10
 800b9a4:	d103      	bne.n	800b9ae <__sfputc_r+0x1e>
 800b9a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9aa:	f000 b94b 	b.w	800bc44 <__swbuf_r>
 800b9ae:	6813      	ldr	r3, [r2, #0]
 800b9b0:	1c58      	adds	r0, r3, #1
 800b9b2:	6010      	str	r0, [r2, #0]
 800b9b4:	7019      	strb	r1, [r3, #0]
 800b9b6:	4608      	mov	r0, r1
 800b9b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9bc:	4770      	bx	lr

0800b9be <__sfputs_r>:
 800b9be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9c0:	4606      	mov	r6, r0
 800b9c2:	460f      	mov	r7, r1
 800b9c4:	4614      	mov	r4, r2
 800b9c6:	18d5      	adds	r5, r2, r3
 800b9c8:	42ac      	cmp	r4, r5
 800b9ca:	d101      	bne.n	800b9d0 <__sfputs_r+0x12>
 800b9cc:	2000      	movs	r0, #0
 800b9ce:	e007      	b.n	800b9e0 <__sfputs_r+0x22>
 800b9d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9d4:	463a      	mov	r2, r7
 800b9d6:	4630      	mov	r0, r6
 800b9d8:	f7ff ffda 	bl	800b990 <__sfputc_r>
 800b9dc:	1c43      	adds	r3, r0, #1
 800b9de:	d1f3      	bne.n	800b9c8 <__sfputs_r+0xa>
 800b9e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b9e4 <_vfiprintf_r>:
 800b9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e8:	460d      	mov	r5, r1
 800b9ea:	b09d      	sub	sp, #116	; 0x74
 800b9ec:	4614      	mov	r4, r2
 800b9ee:	4698      	mov	r8, r3
 800b9f0:	4606      	mov	r6, r0
 800b9f2:	b118      	cbz	r0, 800b9fc <_vfiprintf_r+0x18>
 800b9f4:	6983      	ldr	r3, [r0, #24]
 800b9f6:	b90b      	cbnz	r3, 800b9fc <_vfiprintf_r+0x18>
 800b9f8:	f000 fb14 	bl	800c024 <__sinit>
 800b9fc:	4b89      	ldr	r3, [pc, #548]	; (800bc24 <_vfiprintf_r+0x240>)
 800b9fe:	429d      	cmp	r5, r3
 800ba00:	d11b      	bne.n	800ba3a <_vfiprintf_r+0x56>
 800ba02:	6875      	ldr	r5, [r6, #4]
 800ba04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba06:	07d9      	lsls	r1, r3, #31
 800ba08:	d405      	bmi.n	800ba16 <_vfiprintf_r+0x32>
 800ba0a:	89ab      	ldrh	r3, [r5, #12]
 800ba0c:	059a      	lsls	r2, r3, #22
 800ba0e:	d402      	bmi.n	800ba16 <_vfiprintf_r+0x32>
 800ba10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba12:	f7ff ff60 	bl	800b8d6 <__retarget_lock_acquire_recursive>
 800ba16:	89ab      	ldrh	r3, [r5, #12]
 800ba18:	071b      	lsls	r3, r3, #28
 800ba1a:	d501      	bpl.n	800ba20 <_vfiprintf_r+0x3c>
 800ba1c:	692b      	ldr	r3, [r5, #16]
 800ba1e:	b9eb      	cbnz	r3, 800ba5c <_vfiprintf_r+0x78>
 800ba20:	4629      	mov	r1, r5
 800ba22:	4630      	mov	r0, r6
 800ba24:	f000 f96e 	bl	800bd04 <__swsetup_r>
 800ba28:	b1c0      	cbz	r0, 800ba5c <_vfiprintf_r+0x78>
 800ba2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba2c:	07dc      	lsls	r4, r3, #31
 800ba2e:	d50e      	bpl.n	800ba4e <_vfiprintf_r+0x6a>
 800ba30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba34:	b01d      	add	sp, #116	; 0x74
 800ba36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba3a:	4b7b      	ldr	r3, [pc, #492]	; (800bc28 <_vfiprintf_r+0x244>)
 800ba3c:	429d      	cmp	r5, r3
 800ba3e:	d101      	bne.n	800ba44 <_vfiprintf_r+0x60>
 800ba40:	68b5      	ldr	r5, [r6, #8]
 800ba42:	e7df      	b.n	800ba04 <_vfiprintf_r+0x20>
 800ba44:	4b79      	ldr	r3, [pc, #484]	; (800bc2c <_vfiprintf_r+0x248>)
 800ba46:	429d      	cmp	r5, r3
 800ba48:	bf08      	it	eq
 800ba4a:	68f5      	ldreq	r5, [r6, #12]
 800ba4c:	e7da      	b.n	800ba04 <_vfiprintf_r+0x20>
 800ba4e:	89ab      	ldrh	r3, [r5, #12]
 800ba50:	0598      	lsls	r0, r3, #22
 800ba52:	d4ed      	bmi.n	800ba30 <_vfiprintf_r+0x4c>
 800ba54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba56:	f7ff ff3f 	bl	800b8d8 <__retarget_lock_release_recursive>
 800ba5a:	e7e9      	b.n	800ba30 <_vfiprintf_r+0x4c>
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba60:	2320      	movs	r3, #32
 800ba62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba66:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba6a:	2330      	movs	r3, #48	; 0x30
 800ba6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bc30 <_vfiprintf_r+0x24c>
 800ba70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba74:	f04f 0901 	mov.w	r9, #1
 800ba78:	4623      	mov	r3, r4
 800ba7a:	469a      	mov	sl, r3
 800ba7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba80:	b10a      	cbz	r2, 800ba86 <_vfiprintf_r+0xa2>
 800ba82:	2a25      	cmp	r2, #37	; 0x25
 800ba84:	d1f9      	bne.n	800ba7a <_vfiprintf_r+0x96>
 800ba86:	ebba 0b04 	subs.w	fp, sl, r4
 800ba8a:	d00b      	beq.n	800baa4 <_vfiprintf_r+0xc0>
 800ba8c:	465b      	mov	r3, fp
 800ba8e:	4622      	mov	r2, r4
 800ba90:	4629      	mov	r1, r5
 800ba92:	4630      	mov	r0, r6
 800ba94:	f7ff ff93 	bl	800b9be <__sfputs_r>
 800ba98:	3001      	adds	r0, #1
 800ba9a:	f000 80aa 	beq.w	800bbf2 <_vfiprintf_r+0x20e>
 800ba9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baa0:	445a      	add	r2, fp
 800baa2:	9209      	str	r2, [sp, #36]	; 0x24
 800baa4:	f89a 3000 	ldrb.w	r3, [sl]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	f000 80a2 	beq.w	800bbf2 <_vfiprintf_r+0x20e>
 800baae:	2300      	movs	r3, #0
 800bab0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bab4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bab8:	f10a 0a01 	add.w	sl, sl, #1
 800babc:	9304      	str	r3, [sp, #16]
 800babe:	9307      	str	r3, [sp, #28]
 800bac0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bac4:	931a      	str	r3, [sp, #104]	; 0x68
 800bac6:	4654      	mov	r4, sl
 800bac8:	2205      	movs	r2, #5
 800baca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bace:	4858      	ldr	r0, [pc, #352]	; (800bc30 <_vfiprintf_r+0x24c>)
 800bad0:	f7f4 fba6 	bl	8000220 <memchr>
 800bad4:	9a04      	ldr	r2, [sp, #16]
 800bad6:	b9d8      	cbnz	r0, 800bb10 <_vfiprintf_r+0x12c>
 800bad8:	06d1      	lsls	r1, r2, #27
 800bada:	bf44      	itt	mi
 800badc:	2320      	movmi	r3, #32
 800bade:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bae2:	0713      	lsls	r3, r2, #28
 800bae4:	bf44      	itt	mi
 800bae6:	232b      	movmi	r3, #43	; 0x2b
 800bae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baec:	f89a 3000 	ldrb.w	r3, [sl]
 800baf0:	2b2a      	cmp	r3, #42	; 0x2a
 800baf2:	d015      	beq.n	800bb20 <_vfiprintf_r+0x13c>
 800baf4:	9a07      	ldr	r2, [sp, #28]
 800baf6:	4654      	mov	r4, sl
 800baf8:	2000      	movs	r0, #0
 800bafa:	f04f 0c0a 	mov.w	ip, #10
 800bafe:	4621      	mov	r1, r4
 800bb00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb04:	3b30      	subs	r3, #48	; 0x30
 800bb06:	2b09      	cmp	r3, #9
 800bb08:	d94e      	bls.n	800bba8 <_vfiprintf_r+0x1c4>
 800bb0a:	b1b0      	cbz	r0, 800bb3a <_vfiprintf_r+0x156>
 800bb0c:	9207      	str	r2, [sp, #28]
 800bb0e:	e014      	b.n	800bb3a <_vfiprintf_r+0x156>
 800bb10:	eba0 0308 	sub.w	r3, r0, r8
 800bb14:	fa09 f303 	lsl.w	r3, r9, r3
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	9304      	str	r3, [sp, #16]
 800bb1c:	46a2      	mov	sl, r4
 800bb1e:	e7d2      	b.n	800bac6 <_vfiprintf_r+0xe2>
 800bb20:	9b03      	ldr	r3, [sp, #12]
 800bb22:	1d19      	adds	r1, r3, #4
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	9103      	str	r1, [sp, #12]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	bfbb      	ittet	lt
 800bb2c:	425b      	neglt	r3, r3
 800bb2e:	f042 0202 	orrlt.w	r2, r2, #2
 800bb32:	9307      	strge	r3, [sp, #28]
 800bb34:	9307      	strlt	r3, [sp, #28]
 800bb36:	bfb8      	it	lt
 800bb38:	9204      	strlt	r2, [sp, #16]
 800bb3a:	7823      	ldrb	r3, [r4, #0]
 800bb3c:	2b2e      	cmp	r3, #46	; 0x2e
 800bb3e:	d10c      	bne.n	800bb5a <_vfiprintf_r+0x176>
 800bb40:	7863      	ldrb	r3, [r4, #1]
 800bb42:	2b2a      	cmp	r3, #42	; 0x2a
 800bb44:	d135      	bne.n	800bbb2 <_vfiprintf_r+0x1ce>
 800bb46:	9b03      	ldr	r3, [sp, #12]
 800bb48:	1d1a      	adds	r2, r3, #4
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	9203      	str	r2, [sp, #12]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	bfb8      	it	lt
 800bb52:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bb56:	3402      	adds	r4, #2
 800bb58:	9305      	str	r3, [sp, #20]
 800bb5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bc40 <_vfiprintf_r+0x25c>
 800bb5e:	7821      	ldrb	r1, [r4, #0]
 800bb60:	2203      	movs	r2, #3
 800bb62:	4650      	mov	r0, sl
 800bb64:	f7f4 fb5c 	bl	8000220 <memchr>
 800bb68:	b140      	cbz	r0, 800bb7c <_vfiprintf_r+0x198>
 800bb6a:	2340      	movs	r3, #64	; 0x40
 800bb6c:	eba0 000a 	sub.w	r0, r0, sl
 800bb70:	fa03 f000 	lsl.w	r0, r3, r0
 800bb74:	9b04      	ldr	r3, [sp, #16]
 800bb76:	4303      	orrs	r3, r0
 800bb78:	3401      	adds	r4, #1
 800bb7a:	9304      	str	r3, [sp, #16]
 800bb7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb80:	482c      	ldr	r0, [pc, #176]	; (800bc34 <_vfiprintf_r+0x250>)
 800bb82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb86:	2206      	movs	r2, #6
 800bb88:	f7f4 fb4a 	bl	8000220 <memchr>
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	d03f      	beq.n	800bc10 <_vfiprintf_r+0x22c>
 800bb90:	4b29      	ldr	r3, [pc, #164]	; (800bc38 <_vfiprintf_r+0x254>)
 800bb92:	bb1b      	cbnz	r3, 800bbdc <_vfiprintf_r+0x1f8>
 800bb94:	9b03      	ldr	r3, [sp, #12]
 800bb96:	3307      	adds	r3, #7
 800bb98:	f023 0307 	bic.w	r3, r3, #7
 800bb9c:	3308      	adds	r3, #8
 800bb9e:	9303      	str	r3, [sp, #12]
 800bba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bba2:	443b      	add	r3, r7
 800bba4:	9309      	str	r3, [sp, #36]	; 0x24
 800bba6:	e767      	b.n	800ba78 <_vfiprintf_r+0x94>
 800bba8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbac:	460c      	mov	r4, r1
 800bbae:	2001      	movs	r0, #1
 800bbb0:	e7a5      	b.n	800bafe <_vfiprintf_r+0x11a>
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	3401      	adds	r4, #1
 800bbb6:	9305      	str	r3, [sp, #20]
 800bbb8:	4619      	mov	r1, r3
 800bbba:	f04f 0c0a 	mov.w	ip, #10
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbc4:	3a30      	subs	r2, #48	; 0x30
 800bbc6:	2a09      	cmp	r2, #9
 800bbc8:	d903      	bls.n	800bbd2 <_vfiprintf_r+0x1ee>
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d0c5      	beq.n	800bb5a <_vfiprintf_r+0x176>
 800bbce:	9105      	str	r1, [sp, #20]
 800bbd0:	e7c3      	b.n	800bb5a <_vfiprintf_r+0x176>
 800bbd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	2301      	movs	r3, #1
 800bbda:	e7f0      	b.n	800bbbe <_vfiprintf_r+0x1da>
 800bbdc:	ab03      	add	r3, sp, #12
 800bbde:	9300      	str	r3, [sp, #0]
 800bbe0:	462a      	mov	r2, r5
 800bbe2:	4b16      	ldr	r3, [pc, #88]	; (800bc3c <_vfiprintf_r+0x258>)
 800bbe4:	a904      	add	r1, sp, #16
 800bbe6:	4630      	mov	r0, r6
 800bbe8:	f7fd fea8 	bl	800993c <_printf_float>
 800bbec:	4607      	mov	r7, r0
 800bbee:	1c78      	adds	r0, r7, #1
 800bbf0:	d1d6      	bne.n	800bba0 <_vfiprintf_r+0x1bc>
 800bbf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbf4:	07d9      	lsls	r1, r3, #31
 800bbf6:	d405      	bmi.n	800bc04 <_vfiprintf_r+0x220>
 800bbf8:	89ab      	ldrh	r3, [r5, #12]
 800bbfa:	059a      	lsls	r2, r3, #22
 800bbfc:	d402      	bmi.n	800bc04 <_vfiprintf_r+0x220>
 800bbfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc00:	f7ff fe6a 	bl	800b8d8 <__retarget_lock_release_recursive>
 800bc04:	89ab      	ldrh	r3, [r5, #12]
 800bc06:	065b      	lsls	r3, r3, #25
 800bc08:	f53f af12 	bmi.w	800ba30 <_vfiprintf_r+0x4c>
 800bc0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc0e:	e711      	b.n	800ba34 <_vfiprintf_r+0x50>
 800bc10:	ab03      	add	r3, sp, #12
 800bc12:	9300      	str	r3, [sp, #0]
 800bc14:	462a      	mov	r2, r5
 800bc16:	4b09      	ldr	r3, [pc, #36]	; (800bc3c <_vfiprintf_r+0x258>)
 800bc18:	a904      	add	r1, sp, #16
 800bc1a:	4630      	mov	r0, r6
 800bc1c:	f7fe f932 	bl	8009e84 <_printf_i>
 800bc20:	e7e4      	b.n	800bbec <_vfiprintf_r+0x208>
 800bc22:	bf00      	nop
 800bc24:	0800cbfc 	.word	0x0800cbfc
 800bc28:	0800cc1c 	.word	0x0800cc1c
 800bc2c:	0800cbdc 	.word	0x0800cbdc
 800bc30:	0800ca84 	.word	0x0800ca84
 800bc34:	0800ca8e 	.word	0x0800ca8e
 800bc38:	0800993d 	.word	0x0800993d
 800bc3c:	0800b9bf 	.word	0x0800b9bf
 800bc40:	0800ca8a 	.word	0x0800ca8a

0800bc44 <__swbuf_r>:
 800bc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc46:	460e      	mov	r6, r1
 800bc48:	4614      	mov	r4, r2
 800bc4a:	4605      	mov	r5, r0
 800bc4c:	b118      	cbz	r0, 800bc56 <__swbuf_r+0x12>
 800bc4e:	6983      	ldr	r3, [r0, #24]
 800bc50:	b90b      	cbnz	r3, 800bc56 <__swbuf_r+0x12>
 800bc52:	f000 f9e7 	bl	800c024 <__sinit>
 800bc56:	4b21      	ldr	r3, [pc, #132]	; (800bcdc <__swbuf_r+0x98>)
 800bc58:	429c      	cmp	r4, r3
 800bc5a:	d12b      	bne.n	800bcb4 <__swbuf_r+0x70>
 800bc5c:	686c      	ldr	r4, [r5, #4]
 800bc5e:	69a3      	ldr	r3, [r4, #24]
 800bc60:	60a3      	str	r3, [r4, #8]
 800bc62:	89a3      	ldrh	r3, [r4, #12]
 800bc64:	071a      	lsls	r2, r3, #28
 800bc66:	d52f      	bpl.n	800bcc8 <__swbuf_r+0x84>
 800bc68:	6923      	ldr	r3, [r4, #16]
 800bc6a:	b36b      	cbz	r3, 800bcc8 <__swbuf_r+0x84>
 800bc6c:	6923      	ldr	r3, [r4, #16]
 800bc6e:	6820      	ldr	r0, [r4, #0]
 800bc70:	1ac0      	subs	r0, r0, r3
 800bc72:	6963      	ldr	r3, [r4, #20]
 800bc74:	b2f6      	uxtb	r6, r6
 800bc76:	4283      	cmp	r3, r0
 800bc78:	4637      	mov	r7, r6
 800bc7a:	dc04      	bgt.n	800bc86 <__swbuf_r+0x42>
 800bc7c:	4621      	mov	r1, r4
 800bc7e:	4628      	mov	r0, r5
 800bc80:	f000 f93c 	bl	800befc <_fflush_r>
 800bc84:	bb30      	cbnz	r0, 800bcd4 <__swbuf_r+0x90>
 800bc86:	68a3      	ldr	r3, [r4, #8]
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	60a3      	str	r3, [r4, #8]
 800bc8c:	6823      	ldr	r3, [r4, #0]
 800bc8e:	1c5a      	adds	r2, r3, #1
 800bc90:	6022      	str	r2, [r4, #0]
 800bc92:	701e      	strb	r6, [r3, #0]
 800bc94:	6963      	ldr	r3, [r4, #20]
 800bc96:	3001      	adds	r0, #1
 800bc98:	4283      	cmp	r3, r0
 800bc9a:	d004      	beq.n	800bca6 <__swbuf_r+0x62>
 800bc9c:	89a3      	ldrh	r3, [r4, #12]
 800bc9e:	07db      	lsls	r3, r3, #31
 800bca0:	d506      	bpl.n	800bcb0 <__swbuf_r+0x6c>
 800bca2:	2e0a      	cmp	r6, #10
 800bca4:	d104      	bne.n	800bcb0 <__swbuf_r+0x6c>
 800bca6:	4621      	mov	r1, r4
 800bca8:	4628      	mov	r0, r5
 800bcaa:	f000 f927 	bl	800befc <_fflush_r>
 800bcae:	b988      	cbnz	r0, 800bcd4 <__swbuf_r+0x90>
 800bcb0:	4638      	mov	r0, r7
 800bcb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcb4:	4b0a      	ldr	r3, [pc, #40]	; (800bce0 <__swbuf_r+0x9c>)
 800bcb6:	429c      	cmp	r4, r3
 800bcb8:	d101      	bne.n	800bcbe <__swbuf_r+0x7a>
 800bcba:	68ac      	ldr	r4, [r5, #8]
 800bcbc:	e7cf      	b.n	800bc5e <__swbuf_r+0x1a>
 800bcbe:	4b09      	ldr	r3, [pc, #36]	; (800bce4 <__swbuf_r+0xa0>)
 800bcc0:	429c      	cmp	r4, r3
 800bcc2:	bf08      	it	eq
 800bcc4:	68ec      	ldreq	r4, [r5, #12]
 800bcc6:	e7ca      	b.n	800bc5e <__swbuf_r+0x1a>
 800bcc8:	4621      	mov	r1, r4
 800bcca:	4628      	mov	r0, r5
 800bccc:	f000 f81a 	bl	800bd04 <__swsetup_r>
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	d0cb      	beq.n	800bc6c <__swbuf_r+0x28>
 800bcd4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bcd8:	e7ea      	b.n	800bcb0 <__swbuf_r+0x6c>
 800bcda:	bf00      	nop
 800bcdc:	0800cbfc 	.word	0x0800cbfc
 800bce0:	0800cc1c 	.word	0x0800cc1c
 800bce4:	0800cbdc 	.word	0x0800cbdc

0800bce8 <__ascii_wctomb>:
 800bce8:	b149      	cbz	r1, 800bcfe <__ascii_wctomb+0x16>
 800bcea:	2aff      	cmp	r2, #255	; 0xff
 800bcec:	bf85      	ittet	hi
 800bcee:	238a      	movhi	r3, #138	; 0x8a
 800bcf0:	6003      	strhi	r3, [r0, #0]
 800bcf2:	700a      	strbls	r2, [r1, #0]
 800bcf4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800bcf8:	bf98      	it	ls
 800bcfa:	2001      	movls	r0, #1
 800bcfc:	4770      	bx	lr
 800bcfe:	4608      	mov	r0, r1
 800bd00:	4770      	bx	lr
	...

0800bd04 <__swsetup_r>:
 800bd04:	4b32      	ldr	r3, [pc, #200]	; (800bdd0 <__swsetup_r+0xcc>)
 800bd06:	b570      	push	{r4, r5, r6, lr}
 800bd08:	681d      	ldr	r5, [r3, #0]
 800bd0a:	4606      	mov	r6, r0
 800bd0c:	460c      	mov	r4, r1
 800bd0e:	b125      	cbz	r5, 800bd1a <__swsetup_r+0x16>
 800bd10:	69ab      	ldr	r3, [r5, #24]
 800bd12:	b913      	cbnz	r3, 800bd1a <__swsetup_r+0x16>
 800bd14:	4628      	mov	r0, r5
 800bd16:	f000 f985 	bl	800c024 <__sinit>
 800bd1a:	4b2e      	ldr	r3, [pc, #184]	; (800bdd4 <__swsetup_r+0xd0>)
 800bd1c:	429c      	cmp	r4, r3
 800bd1e:	d10f      	bne.n	800bd40 <__swsetup_r+0x3c>
 800bd20:	686c      	ldr	r4, [r5, #4]
 800bd22:	89a3      	ldrh	r3, [r4, #12]
 800bd24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd28:	0719      	lsls	r1, r3, #28
 800bd2a:	d42c      	bmi.n	800bd86 <__swsetup_r+0x82>
 800bd2c:	06dd      	lsls	r5, r3, #27
 800bd2e:	d411      	bmi.n	800bd54 <__swsetup_r+0x50>
 800bd30:	2309      	movs	r3, #9
 800bd32:	6033      	str	r3, [r6, #0]
 800bd34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bd38:	81a3      	strh	r3, [r4, #12]
 800bd3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd3e:	e03e      	b.n	800bdbe <__swsetup_r+0xba>
 800bd40:	4b25      	ldr	r3, [pc, #148]	; (800bdd8 <__swsetup_r+0xd4>)
 800bd42:	429c      	cmp	r4, r3
 800bd44:	d101      	bne.n	800bd4a <__swsetup_r+0x46>
 800bd46:	68ac      	ldr	r4, [r5, #8]
 800bd48:	e7eb      	b.n	800bd22 <__swsetup_r+0x1e>
 800bd4a:	4b24      	ldr	r3, [pc, #144]	; (800bddc <__swsetup_r+0xd8>)
 800bd4c:	429c      	cmp	r4, r3
 800bd4e:	bf08      	it	eq
 800bd50:	68ec      	ldreq	r4, [r5, #12]
 800bd52:	e7e6      	b.n	800bd22 <__swsetup_r+0x1e>
 800bd54:	0758      	lsls	r0, r3, #29
 800bd56:	d512      	bpl.n	800bd7e <__swsetup_r+0x7a>
 800bd58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd5a:	b141      	cbz	r1, 800bd6e <__swsetup_r+0x6a>
 800bd5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd60:	4299      	cmp	r1, r3
 800bd62:	d002      	beq.n	800bd6a <__swsetup_r+0x66>
 800bd64:	4630      	mov	r0, r6
 800bd66:	f7fd fc69 	bl	800963c <_free_r>
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	6363      	str	r3, [r4, #52]	; 0x34
 800bd6e:	89a3      	ldrh	r3, [r4, #12]
 800bd70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bd74:	81a3      	strh	r3, [r4, #12]
 800bd76:	2300      	movs	r3, #0
 800bd78:	6063      	str	r3, [r4, #4]
 800bd7a:	6923      	ldr	r3, [r4, #16]
 800bd7c:	6023      	str	r3, [r4, #0]
 800bd7e:	89a3      	ldrh	r3, [r4, #12]
 800bd80:	f043 0308 	orr.w	r3, r3, #8
 800bd84:	81a3      	strh	r3, [r4, #12]
 800bd86:	6923      	ldr	r3, [r4, #16]
 800bd88:	b94b      	cbnz	r3, 800bd9e <__swsetup_r+0x9a>
 800bd8a:	89a3      	ldrh	r3, [r4, #12]
 800bd8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bd90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd94:	d003      	beq.n	800bd9e <__swsetup_r+0x9a>
 800bd96:	4621      	mov	r1, r4
 800bd98:	4630      	mov	r0, r6
 800bd9a:	f000 fa05 	bl	800c1a8 <__smakebuf_r>
 800bd9e:	89a0      	ldrh	r0, [r4, #12]
 800bda0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bda4:	f010 0301 	ands.w	r3, r0, #1
 800bda8:	d00a      	beq.n	800bdc0 <__swsetup_r+0xbc>
 800bdaa:	2300      	movs	r3, #0
 800bdac:	60a3      	str	r3, [r4, #8]
 800bdae:	6963      	ldr	r3, [r4, #20]
 800bdb0:	425b      	negs	r3, r3
 800bdb2:	61a3      	str	r3, [r4, #24]
 800bdb4:	6923      	ldr	r3, [r4, #16]
 800bdb6:	b943      	cbnz	r3, 800bdca <__swsetup_r+0xc6>
 800bdb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bdbc:	d1ba      	bne.n	800bd34 <__swsetup_r+0x30>
 800bdbe:	bd70      	pop	{r4, r5, r6, pc}
 800bdc0:	0781      	lsls	r1, r0, #30
 800bdc2:	bf58      	it	pl
 800bdc4:	6963      	ldrpl	r3, [r4, #20]
 800bdc6:	60a3      	str	r3, [r4, #8]
 800bdc8:	e7f4      	b.n	800bdb4 <__swsetup_r+0xb0>
 800bdca:	2000      	movs	r0, #0
 800bdcc:	e7f7      	b.n	800bdbe <__swsetup_r+0xba>
 800bdce:	bf00      	nop
 800bdd0:	200023fc 	.word	0x200023fc
 800bdd4:	0800cbfc 	.word	0x0800cbfc
 800bdd8:	0800cc1c 	.word	0x0800cc1c
 800bddc:	0800cbdc 	.word	0x0800cbdc

0800bde0 <abort>:
 800bde0:	b508      	push	{r3, lr}
 800bde2:	2006      	movs	r0, #6
 800bde4:	f000 fa50 	bl	800c288 <raise>
 800bde8:	2001      	movs	r0, #1
 800bdea:	f7f8 ffad 	bl	8004d48 <_exit>
	...

0800bdf0 <__sflush_r>:
 800bdf0:	898a      	ldrh	r2, [r1, #12]
 800bdf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdf6:	4605      	mov	r5, r0
 800bdf8:	0710      	lsls	r0, r2, #28
 800bdfa:	460c      	mov	r4, r1
 800bdfc:	d458      	bmi.n	800beb0 <__sflush_r+0xc0>
 800bdfe:	684b      	ldr	r3, [r1, #4]
 800be00:	2b00      	cmp	r3, #0
 800be02:	dc05      	bgt.n	800be10 <__sflush_r+0x20>
 800be04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be06:	2b00      	cmp	r3, #0
 800be08:	dc02      	bgt.n	800be10 <__sflush_r+0x20>
 800be0a:	2000      	movs	r0, #0
 800be0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be12:	2e00      	cmp	r6, #0
 800be14:	d0f9      	beq.n	800be0a <__sflush_r+0x1a>
 800be16:	2300      	movs	r3, #0
 800be18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be1c:	682f      	ldr	r7, [r5, #0]
 800be1e:	602b      	str	r3, [r5, #0]
 800be20:	d032      	beq.n	800be88 <__sflush_r+0x98>
 800be22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be24:	89a3      	ldrh	r3, [r4, #12]
 800be26:	075a      	lsls	r2, r3, #29
 800be28:	d505      	bpl.n	800be36 <__sflush_r+0x46>
 800be2a:	6863      	ldr	r3, [r4, #4]
 800be2c:	1ac0      	subs	r0, r0, r3
 800be2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be30:	b10b      	cbz	r3, 800be36 <__sflush_r+0x46>
 800be32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be34:	1ac0      	subs	r0, r0, r3
 800be36:	2300      	movs	r3, #0
 800be38:	4602      	mov	r2, r0
 800be3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be3c:	6a21      	ldr	r1, [r4, #32]
 800be3e:	4628      	mov	r0, r5
 800be40:	47b0      	blx	r6
 800be42:	1c43      	adds	r3, r0, #1
 800be44:	89a3      	ldrh	r3, [r4, #12]
 800be46:	d106      	bne.n	800be56 <__sflush_r+0x66>
 800be48:	6829      	ldr	r1, [r5, #0]
 800be4a:	291d      	cmp	r1, #29
 800be4c:	d82c      	bhi.n	800bea8 <__sflush_r+0xb8>
 800be4e:	4a2a      	ldr	r2, [pc, #168]	; (800bef8 <__sflush_r+0x108>)
 800be50:	40ca      	lsrs	r2, r1
 800be52:	07d6      	lsls	r6, r2, #31
 800be54:	d528      	bpl.n	800bea8 <__sflush_r+0xb8>
 800be56:	2200      	movs	r2, #0
 800be58:	6062      	str	r2, [r4, #4]
 800be5a:	04d9      	lsls	r1, r3, #19
 800be5c:	6922      	ldr	r2, [r4, #16]
 800be5e:	6022      	str	r2, [r4, #0]
 800be60:	d504      	bpl.n	800be6c <__sflush_r+0x7c>
 800be62:	1c42      	adds	r2, r0, #1
 800be64:	d101      	bne.n	800be6a <__sflush_r+0x7a>
 800be66:	682b      	ldr	r3, [r5, #0]
 800be68:	b903      	cbnz	r3, 800be6c <__sflush_r+0x7c>
 800be6a:	6560      	str	r0, [r4, #84]	; 0x54
 800be6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be6e:	602f      	str	r7, [r5, #0]
 800be70:	2900      	cmp	r1, #0
 800be72:	d0ca      	beq.n	800be0a <__sflush_r+0x1a>
 800be74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be78:	4299      	cmp	r1, r3
 800be7a:	d002      	beq.n	800be82 <__sflush_r+0x92>
 800be7c:	4628      	mov	r0, r5
 800be7e:	f7fd fbdd 	bl	800963c <_free_r>
 800be82:	2000      	movs	r0, #0
 800be84:	6360      	str	r0, [r4, #52]	; 0x34
 800be86:	e7c1      	b.n	800be0c <__sflush_r+0x1c>
 800be88:	6a21      	ldr	r1, [r4, #32]
 800be8a:	2301      	movs	r3, #1
 800be8c:	4628      	mov	r0, r5
 800be8e:	47b0      	blx	r6
 800be90:	1c41      	adds	r1, r0, #1
 800be92:	d1c7      	bne.n	800be24 <__sflush_r+0x34>
 800be94:	682b      	ldr	r3, [r5, #0]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d0c4      	beq.n	800be24 <__sflush_r+0x34>
 800be9a:	2b1d      	cmp	r3, #29
 800be9c:	d001      	beq.n	800bea2 <__sflush_r+0xb2>
 800be9e:	2b16      	cmp	r3, #22
 800bea0:	d101      	bne.n	800bea6 <__sflush_r+0xb6>
 800bea2:	602f      	str	r7, [r5, #0]
 800bea4:	e7b1      	b.n	800be0a <__sflush_r+0x1a>
 800bea6:	89a3      	ldrh	r3, [r4, #12]
 800bea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beac:	81a3      	strh	r3, [r4, #12]
 800beae:	e7ad      	b.n	800be0c <__sflush_r+0x1c>
 800beb0:	690f      	ldr	r7, [r1, #16]
 800beb2:	2f00      	cmp	r7, #0
 800beb4:	d0a9      	beq.n	800be0a <__sflush_r+0x1a>
 800beb6:	0793      	lsls	r3, r2, #30
 800beb8:	680e      	ldr	r6, [r1, #0]
 800beba:	bf08      	it	eq
 800bebc:	694b      	ldreq	r3, [r1, #20]
 800bebe:	600f      	str	r7, [r1, #0]
 800bec0:	bf18      	it	ne
 800bec2:	2300      	movne	r3, #0
 800bec4:	eba6 0807 	sub.w	r8, r6, r7
 800bec8:	608b      	str	r3, [r1, #8]
 800beca:	f1b8 0f00 	cmp.w	r8, #0
 800bece:	dd9c      	ble.n	800be0a <__sflush_r+0x1a>
 800bed0:	6a21      	ldr	r1, [r4, #32]
 800bed2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bed4:	4643      	mov	r3, r8
 800bed6:	463a      	mov	r2, r7
 800bed8:	4628      	mov	r0, r5
 800beda:	47b0      	blx	r6
 800bedc:	2800      	cmp	r0, #0
 800bede:	dc06      	bgt.n	800beee <__sflush_r+0xfe>
 800bee0:	89a3      	ldrh	r3, [r4, #12]
 800bee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bee6:	81a3      	strh	r3, [r4, #12]
 800bee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800beec:	e78e      	b.n	800be0c <__sflush_r+0x1c>
 800beee:	4407      	add	r7, r0
 800bef0:	eba8 0800 	sub.w	r8, r8, r0
 800bef4:	e7e9      	b.n	800beca <__sflush_r+0xda>
 800bef6:	bf00      	nop
 800bef8:	20400001 	.word	0x20400001

0800befc <_fflush_r>:
 800befc:	b538      	push	{r3, r4, r5, lr}
 800befe:	690b      	ldr	r3, [r1, #16]
 800bf00:	4605      	mov	r5, r0
 800bf02:	460c      	mov	r4, r1
 800bf04:	b913      	cbnz	r3, 800bf0c <_fflush_r+0x10>
 800bf06:	2500      	movs	r5, #0
 800bf08:	4628      	mov	r0, r5
 800bf0a:	bd38      	pop	{r3, r4, r5, pc}
 800bf0c:	b118      	cbz	r0, 800bf16 <_fflush_r+0x1a>
 800bf0e:	6983      	ldr	r3, [r0, #24]
 800bf10:	b90b      	cbnz	r3, 800bf16 <_fflush_r+0x1a>
 800bf12:	f000 f887 	bl	800c024 <__sinit>
 800bf16:	4b14      	ldr	r3, [pc, #80]	; (800bf68 <_fflush_r+0x6c>)
 800bf18:	429c      	cmp	r4, r3
 800bf1a:	d11b      	bne.n	800bf54 <_fflush_r+0x58>
 800bf1c:	686c      	ldr	r4, [r5, #4]
 800bf1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d0ef      	beq.n	800bf06 <_fflush_r+0xa>
 800bf26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf28:	07d0      	lsls	r0, r2, #31
 800bf2a:	d404      	bmi.n	800bf36 <_fflush_r+0x3a>
 800bf2c:	0599      	lsls	r1, r3, #22
 800bf2e:	d402      	bmi.n	800bf36 <_fflush_r+0x3a>
 800bf30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf32:	f7ff fcd0 	bl	800b8d6 <__retarget_lock_acquire_recursive>
 800bf36:	4628      	mov	r0, r5
 800bf38:	4621      	mov	r1, r4
 800bf3a:	f7ff ff59 	bl	800bdf0 <__sflush_r>
 800bf3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf40:	07da      	lsls	r2, r3, #31
 800bf42:	4605      	mov	r5, r0
 800bf44:	d4e0      	bmi.n	800bf08 <_fflush_r+0xc>
 800bf46:	89a3      	ldrh	r3, [r4, #12]
 800bf48:	059b      	lsls	r3, r3, #22
 800bf4a:	d4dd      	bmi.n	800bf08 <_fflush_r+0xc>
 800bf4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf4e:	f7ff fcc3 	bl	800b8d8 <__retarget_lock_release_recursive>
 800bf52:	e7d9      	b.n	800bf08 <_fflush_r+0xc>
 800bf54:	4b05      	ldr	r3, [pc, #20]	; (800bf6c <_fflush_r+0x70>)
 800bf56:	429c      	cmp	r4, r3
 800bf58:	d101      	bne.n	800bf5e <_fflush_r+0x62>
 800bf5a:	68ac      	ldr	r4, [r5, #8]
 800bf5c:	e7df      	b.n	800bf1e <_fflush_r+0x22>
 800bf5e:	4b04      	ldr	r3, [pc, #16]	; (800bf70 <_fflush_r+0x74>)
 800bf60:	429c      	cmp	r4, r3
 800bf62:	bf08      	it	eq
 800bf64:	68ec      	ldreq	r4, [r5, #12]
 800bf66:	e7da      	b.n	800bf1e <_fflush_r+0x22>
 800bf68:	0800cbfc 	.word	0x0800cbfc
 800bf6c:	0800cc1c 	.word	0x0800cc1c
 800bf70:	0800cbdc 	.word	0x0800cbdc

0800bf74 <std>:
 800bf74:	2300      	movs	r3, #0
 800bf76:	b510      	push	{r4, lr}
 800bf78:	4604      	mov	r4, r0
 800bf7a:	e9c0 3300 	strd	r3, r3, [r0]
 800bf7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf82:	6083      	str	r3, [r0, #8]
 800bf84:	8181      	strh	r1, [r0, #12]
 800bf86:	6643      	str	r3, [r0, #100]	; 0x64
 800bf88:	81c2      	strh	r2, [r0, #14]
 800bf8a:	6183      	str	r3, [r0, #24]
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	2208      	movs	r2, #8
 800bf90:	305c      	adds	r0, #92	; 0x5c
 800bf92:	f7fd fb4b 	bl	800962c <memset>
 800bf96:	4b05      	ldr	r3, [pc, #20]	; (800bfac <std+0x38>)
 800bf98:	6263      	str	r3, [r4, #36]	; 0x24
 800bf9a:	4b05      	ldr	r3, [pc, #20]	; (800bfb0 <std+0x3c>)
 800bf9c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf9e:	4b05      	ldr	r3, [pc, #20]	; (800bfb4 <std+0x40>)
 800bfa0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bfa2:	4b05      	ldr	r3, [pc, #20]	; (800bfb8 <std+0x44>)
 800bfa4:	6224      	str	r4, [r4, #32]
 800bfa6:	6323      	str	r3, [r4, #48]	; 0x30
 800bfa8:	bd10      	pop	{r4, pc}
 800bfaa:	bf00      	nop
 800bfac:	0800c2c1 	.word	0x0800c2c1
 800bfb0:	0800c2e3 	.word	0x0800c2e3
 800bfb4:	0800c31b 	.word	0x0800c31b
 800bfb8:	0800c33f 	.word	0x0800c33f

0800bfbc <_cleanup_r>:
 800bfbc:	4901      	ldr	r1, [pc, #4]	; (800bfc4 <_cleanup_r+0x8>)
 800bfbe:	f000 b8af 	b.w	800c120 <_fwalk_reent>
 800bfc2:	bf00      	nop
 800bfc4:	0800befd 	.word	0x0800befd

0800bfc8 <__sfmoreglue>:
 800bfc8:	b570      	push	{r4, r5, r6, lr}
 800bfca:	2268      	movs	r2, #104	; 0x68
 800bfcc:	1e4d      	subs	r5, r1, #1
 800bfce:	4355      	muls	r5, r2
 800bfd0:	460e      	mov	r6, r1
 800bfd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bfd6:	f7fd fb9d 	bl	8009714 <_malloc_r>
 800bfda:	4604      	mov	r4, r0
 800bfdc:	b140      	cbz	r0, 800bff0 <__sfmoreglue+0x28>
 800bfde:	2100      	movs	r1, #0
 800bfe0:	e9c0 1600 	strd	r1, r6, [r0]
 800bfe4:	300c      	adds	r0, #12
 800bfe6:	60a0      	str	r0, [r4, #8]
 800bfe8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bfec:	f7fd fb1e 	bl	800962c <memset>
 800bff0:	4620      	mov	r0, r4
 800bff2:	bd70      	pop	{r4, r5, r6, pc}

0800bff4 <__sfp_lock_acquire>:
 800bff4:	4801      	ldr	r0, [pc, #4]	; (800bffc <__sfp_lock_acquire+0x8>)
 800bff6:	f7ff bc6e 	b.w	800b8d6 <__retarget_lock_acquire_recursive>
 800bffa:	bf00      	nop
 800bffc:	20002b29 	.word	0x20002b29

0800c000 <__sfp_lock_release>:
 800c000:	4801      	ldr	r0, [pc, #4]	; (800c008 <__sfp_lock_release+0x8>)
 800c002:	f7ff bc69 	b.w	800b8d8 <__retarget_lock_release_recursive>
 800c006:	bf00      	nop
 800c008:	20002b29 	.word	0x20002b29

0800c00c <__sinit_lock_acquire>:
 800c00c:	4801      	ldr	r0, [pc, #4]	; (800c014 <__sinit_lock_acquire+0x8>)
 800c00e:	f7ff bc62 	b.w	800b8d6 <__retarget_lock_acquire_recursive>
 800c012:	bf00      	nop
 800c014:	20002b2a 	.word	0x20002b2a

0800c018 <__sinit_lock_release>:
 800c018:	4801      	ldr	r0, [pc, #4]	; (800c020 <__sinit_lock_release+0x8>)
 800c01a:	f7ff bc5d 	b.w	800b8d8 <__retarget_lock_release_recursive>
 800c01e:	bf00      	nop
 800c020:	20002b2a 	.word	0x20002b2a

0800c024 <__sinit>:
 800c024:	b510      	push	{r4, lr}
 800c026:	4604      	mov	r4, r0
 800c028:	f7ff fff0 	bl	800c00c <__sinit_lock_acquire>
 800c02c:	69a3      	ldr	r3, [r4, #24]
 800c02e:	b11b      	cbz	r3, 800c038 <__sinit+0x14>
 800c030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c034:	f7ff bff0 	b.w	800c018 <__sinit_lock_release>
 800c038:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c03c:	6523      	str	r3, [r4, #80]	; 0x50
 800c03e:	4b13      	ldr	r3, [pc, #76]	; (800c08c <__sinit+0x68>)
 800c040:	4a13      	ldr	r2, [pc, #76]	; (800c090 <__sinit+0x6c>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	62a2      	str	r2, [r4, #40]	; 0x28
 800c046:	42a3      	cmp	r3, r4
 800c048:	bf04      	itt	eq
 800c04a:	2301      	moveq	r3, #1
 800c04c:	61a3      	streq	r3, [r4, #24]
 800c04e:	4620      	mov	r0, r4
 800c050:	f000 f820 	bl	800c094 <__sfp>
 800c054:	6060      	str	r0, [r4, #4]
 800c056:	4620      	mov	r0, r4
 800c058:	f000 f81c 	bl	800c094 <__sfp>
 800c05c:	60a0      	str	r0, [r4, #8]
 800c05e:	4620      	mov	r0, r4
 800c060:	f000 f818 	bl	800c094 <__sfp>
 800c064:	2200      	movs	r2, #0
 800c066:	60e0      	str	r0, [r4, #12]
 800c068:	2104      	movs	r1, #4
 800c06a:	6860      	ldr	r0, [r4, #4]
 800c06c:	f7ff ff82 	bl	800bf74 <std>
 800c070:	68a0      	ldr	r0, [r4, #8]
 800c072:	2201      	movs	r2, #1
 800c074:	2109      	movs	r1, #9
 800c076:	f7ff ff7d 	bl	800bf74 <std>
 800c07a:	68e0      	ldr	r0, [r4, #12]
 800c07c:	2202      	movs	r2, #2
 800c07e:	2112      	movs	r1, #18
 800c080:	f7ff ff78 	bl	800bf74 <std>
 800c084:	2301      	movs	r3, #1
 800c086:	61a3      	str	r3, [r4, #24]
 800c088:	e7d2      	b.n	800c030 <__sinit+0xc>
 800c08a:	bf00      	nop
 800c08c:	0800c864 	.word	0x0800c864
 800c090:	0800bfbd 	.word	0x0800bfbd

0800c094 <__sfp>:
 800c094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c096:	4607      	mov	r7, r0
 800c098:	f7ff ffac 	bl	800bff4 <__sfp_lock_acquire>
 800c09c:	4b1e      	ldr	r3, [pc, #120]	; (800c118 <__sfp+0x84>)
 800c09e:	681e      	ldr	r6, [r3, #0]
 800c0a0:	69b3      	ldr	r3, [r6, #24]
 800c0a2:	b913      	cbnz	r3, 800c0aa <__sfp+0x16>
 800c0a4:	4630      	mov	r0, r6
 800c0a6:	f7ff ffbd 	bl	800c024 <__sinit>
 800c0aa:	3648      	adds	r6, #72	; 0x48
 800c0ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c0b0:	3b01      	subs	r3, #1
 800c0b2:	d503      	bpl.n	800c0bc <__sfp+0x28>
 800c0b4:	6833      	ldr	r3, [r6, #0]
 800c0b6:	b30b      	cbz	r3, 800c0fc <__sfp+0x68>
 800c0b8:	6836      	ldr	r6, [r6, #0]
 800c0ba:	e7f7      	b.n	800c0ac <__sfp+0x18>
 800c0bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c0c0:	b9d5      	cbnz	r5, 800c0f8 <__sfp+0x64>
 800c0c2:	4b16      	ldr	r3, [pc, #88]	; (800c11c <__sfp+0x88>)
 800c0c4:	60e3      	str	r3, [r4, #12]
 800c0c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c0ca:	6665      	str	r5, [r4, #100]	; 0x64
 800c0cc:	f7ff fc02 	bl	800b8d4 <__retarget_lock_init_recursive>
 800c0d0:	f7ff ff96 	bl	800c000 <__sfp_lock_release>
 800c0d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c0d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c0dc:	6025      	str	r5, [r4, #0]
 800c0de:	61a5      	str	r5, [r4, #24]
 800c0e0:	2208      	movs	r2, #8
 800c0e2:	4629      	mov	r1, r5
 800c0e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c0e8:	f7fd faa0 	bl	800962c <memset>
 800c0ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c0f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0f8:	3468      	adds	r4, #104	; 0x68
 800c0fa:	e7d9      	b.n	800c0b0 <__sfp+0x1c>
 800c0fc:	2104      	movs	r1, #4
 800c0fe:	4638      	mov	r0, r7
 800c100:	f7ff ff62 	bl	800bfc8 <__sfmoreglue>
 800c104:	4604      	mov	r4, r0
 800c106:	6030      	str	r0, [r6, #0]
 800c108:	2800      	cmp	r0, #0
 800c10a:	d1d5      	bne.n	800c0b8 <__sfp+0x24>
 800c10c:	f7ff ff78 	bl	800c000 <__sfp_lock_release>
 800c110:	230c      	movs	r3, #12
 800c112:	603b      	str	r3, [r7, #0]
 800c114:	e7ee      	b.n	800c0f4 <__sfp+0x60>
 800c116:	bf00      	nop
 800c118:	0800c864 	.word	0x0800c864
 800c11c:	ffff0001 	.word	0xffff0001

0800c120 <_fwalk_reent>:
 800c120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c124:	4606      	mov	r6, r0
 800c126:	4688      	mov	r8, r1
 800c128:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c12c:	2700      	movs	r7, #0
 800c12e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c132:	f1b9 0901 	subs.w	r9, r9, #1
 800c136:	d505      	bpl.n	800c144 <_fwalk_reent+0x24>
 800c138:	6824      	ldr	r4, [r4, #0]
 800c13a:	2c00      	cmp	r4, #0
 800c13c:	d1f7      	bne.n	800c12e <_fwalk_reent+0xe>
 800c13e:	4638      	mov	r0, r7
 800c140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c144:	89ab      	ldrh	r3, [r5, #12]
 800c146:	2b01      	cmp	r3, #1
 800c148:	d907      	bls.n	800c15a <_fwalk_reent+0x3a>
 800c14a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c14e:	3301      	adds	r3, #1
 800c150:	d003      	beq.n	800c15a <_fwalk_reent+0x3a>
 800c152:	4629      	mov	r1, r5
 800c154:	4630      	mov	r0, r6
 800c156:	47c0      	blx	r8
 800c158:	4307      	orrs	r7, r0
 800c15a:	3568      	adds	r5, #104	; 0x68
 800c15c:	e7e9      	b.n	800c132 <_fwalk_reent+0x12>

0800c15e <__swhatbuf_r>:
 800c15e:	b570      	push	{r4, r5, r6, lr}
 800c160:	460e      	mov	r6, r1
 800c162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c166:	2900      	cmp	r1, #0
 800c168:	b096      	sub	sp, #88	; 0x58
 800c16a:	4614      	mov	r4, r2
 800c16c:	461d      	mov	r5, r3
 800c16e:	da08      	bge.n	800c182 <__swhatbuf_r+0x24>
 800c170:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c174:	2200      	movs	r2, #0
 800c176:	602a      	str	r2, [r5, #0]
 800c178:	061a      	lsls	r2, r3, #24
 800c17a:	d410      	bmi.n	800c19e <__swhatbuf_r+0x40>
 800c17c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c180:	e00e      	b.n	800c1a0 <__swhatbuf_r+0x42>
 800c182:	466a      	mov	r2, sp
 800c184:	f000 f902 	bl	800c38c <_fstat_r>
 800c188:	2800      	cmp	r0, #0
 800c18a:	dbf1      	blt.n	800c170 <__swhatbuf_r+0x12>
 800c18c:	9a01      	ldr	r2, [sp, #4]
 800c18e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c192:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c196:	425a      	negs	r2, r3
 800c198:	415a      	adcs	r2, r3
 800c19a:	602a      	str	r2, [r5, #0]
 800c19c:	e7ee      	b.n	800c17c <__swhatbuf_r+0x1e>
 800c19e:	2340      	movs	r3, #64	; 0x40
 800c1a0:	2000      	movs	r0, #0
 800c1a2:	6023      	str	r3, [r4, #0]
 800c1a4:	b016      	add	sp, #88	; 0x58
 800c1a6:	bd70      	pop	{r4, r5, r6, pc}

0800c1a8 <__smakebuf_r>:
 800c1a8:	898b      	ldrh	r3, [r1, #12]
 800c1aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c1ac:	079d      	lsls	r5, r3, #30
 800c1ae:	4606      	mov	r6, r0
 800c1b0:	460c      	mov	r4, r1
 800c1b2:	d507      	bpl.n	800c1c4 <__smakebuf_r+0x1c>
 800c1b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c1b8:	6023      	str	r3, [r4, #0]
 800c1ba:	6123      	str	r3, [r4, #16]
 800c1bc:	2301      	movs	r3, #1
 800c1be:	6163      	str	r3, [r4, #20]
 800c1c0:	b002      	add	sp, #8
 800c1c2:	bd70      	pop	{r4, r5, r6, pc}
 800c1c4:	ab01      	add	r3, sp, #4
 800c1c6:	466a      	mov	r2, sp
 800c1c8:	f7ff ffc9 	bl	800c15e <__swhatbuf_r>
 800c1cc:	9900      	ldr	r1, [sp, #0]
 800c1ce:	4605      	mov	r5, r0
 800c1d0:	4630      	mov	r0, r6
 800c1d2:	f7fd fa9f 	bl	8009714 <_malloc_r>
 800c1d6:	b948      	cbnz	r0, 800c1ec <__smakebuf_r+0x44>
 800c1d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1dc:	059a      	lsls	r2, r3, #22
 800c1de:	d4ef      	bmi.n	800c1c0 <__smakebuf_r+0x18>
 800c1e0:	f023 0303 	bic.w	r3, r3, #3
 800c1e4:	f043 0302 	orr.w	r3, r3, #2
 800c1e8:	81a3      	strh	r3, [r4, #12]
 800c1ea:	e7e3      	b.n	800c1b4 <__smakebuf_r+0xc>
 800c1ec:	4b0d      	ldr	r3, [pc, #52]	; (800c224 <__smakebuf_r+0x7c>)
 800c1ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800c1f0:	89a3      	ldrh	r3, [r4, #12]
 800c1f2:	6020      	str	r0, [r4, #0]
 800c1f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1f8:	81a3      	strh	r3, [r4, #12]
 800c1fa:	9b00      	ldr	r3, [sp, #0]
 800c1fc:	6163      	str	r3, [r4, #20]
 800c1fe:	9b01      	ldr	r3, [sp, #4]
 800c200:	6120      	str	r0, [r4, #16]
 800c202:	b15b      	cbz	r3, 800c21c <__smakebuf_r+0x74>
 800c204:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c208:	4630      	mov	r0, r6
 800c20a:	f000 f8d1 	bl	800c3b0 <_isatty_r>
 800c20e:	b128      	cbz	r0, 800c21c <__smakebuf_r+0x74>
 800c210:	89a3      	ldrh	r3, [r4, #12]
 800c212:	f023 0303 	bic.w	r3, r3, #3
 800c216:	f043 0301 	orr.w	r3, r3, #1
 800c21a:	81a3      	strh	r3, [r4, #12]
 800c21c:	89a0      	ldrh	r0, [r4, #12]
 800c21e:	4305      	orrs	r5, r0
 800c220:	81a5      	strh	r5, [r4, #12]
 800c222:	e7cd      	b.n	800c1c0 <__smakebuf_r+0x18>
 800c224:	0800bfbd 	.word	0x0800bfbd

0800c228 <_malloc_usable_size_r>:
 800c228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c22c:	1f18      	subs	r0, r3, #4
 800c22e:	2b00      	cmp	r3, #0
 800c230:	bfbc      	itt	lt
 800c232:	580b      	ldrlt	r3, [r1, r0]
 800c234:	18c0      	addlt	r0, r0, r3
 800c236:	4770      	bx	lr

0800c238 <_raise_r>:
 800c238:	291f      	cmp	r1, #31
 800c23a:	b538      	push	{r3, r4, r5, lr}
 800c23c:	4604      	mov	r4, r0
 800c23e:	460d      	mov	r5, r1
 800c240:	d904      	bls.n	800c24c <_raise_r+0x14>
 800c242:	2316      	movs	r3, #22
 800c244:	6003      	str	r3, [r0, #0]
 800c246:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c24a:	bd38      	pop	{r3, r4, r5, pc}
 800c24c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c24e:	b112      	cbz	r2, 800c256 <_raise_r+0x1e>
 800c250:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c254:	b94b      	cbnz	r3, 800c26a <_raise_r+0x32>
 800c256:	4620      	mov	r0, r4
 800c258:	f000 f830 	bl	800c2bc <_getpid_r>
 800c25c:	462a      	mov	r2, r5
 800c25e:	4601      	mov	r1, r0
 800c260:	4620      	mov	r0, r4
 800c262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c266:	f000 b817 	b.w	800c298 <_kill_r>
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d00a      	beq.n	800c284 <_raise_r+0x4c>
 800c26e:	1c59      	adds	r1, r3, #1
 800c270:	d103      	bne.n	800c27a <_raise_r+0x42>
 800c272:	2316      	movs	r3, #22
 800c274:	6003      	str	r3, [r0, #0]
 800c276:	2001      	movs	r0, #1
 800c278:	e7e7      	b.n	800c24a <_raise_r+0x12>
 800c27a:	2400      	movs	r4, #0
 800c27c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c280:	4628      	mov	r0, r5
 800c282:	4798      	blx	r3
 800c284:	2000      	movs	r0, #0
 800c286:	e7e0      	b.n	800c24a <_raise_r+0x12>

0800c288 <raise>:
 800c288:	4b02      	ldr	r3, [pc, #8]	; (800c294 <raise+0xc>)
 800c28a:	4601      	mov	r1, r0
 800c28c:	6818      	ldr	r0, [r3, #0]
 800c28e:	f7ff bfd3 	b.w	800c238 <_raise_r>
 800c292:	bf00      	nop
 800c294:	200023fc 	.word	0x200023fc

0800c298 <_kill_r>:
 800c298:	b538      	push	{r3, r4, r5, lr}
 800c29a:	4d07      	ldr	r5, [pc, #28]	; (800c2b8 <_kill_r+0x20>)
 800c29c:	2300      	movs	r3, #0
 800c29e:	4604      	mov	r4, r0
 800c2a0:	4608      	mov	r0, r1
 800c2a2:	4611      	mov	r1, r2
 800c2a4:	602b      	str	r3, [r5, #0]
 800c2a6:	f7f8 fd3f 	bl	8004d28 <_kill>
 800c2aa:	1c43      	adds	r3, r0, #1
 800c2ac:	d102      	bne.n	800c2b4 <_kill_r+0x1c>
 800c2ae:	682b      	ldr	r3, [r5, #0]
 800c2b0:	b103      	cbz	r3, 800c2b4 <_kill_r+0x1c>
 800c2b2:	6023      	str	r3, [r4, #0]
 800c2b4:	bd38      	pop	{r3, r4, r5, pc}
 800c2b6:	bf00      	nop
 800c2b8:	20002b24 	.word	0x20002b24

0800c2bc <_getpid_r>:
 800c2bc:	f7f8 bd2c 	b.w	8004d18 <_getpid>

0800c2c0 <__sread>:
 800c2c0:	b510      	push	{r4, lr}
 800c2c2:	460c      	mov	r4, r1
 800c2c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2c8:	f000 f894 	bl	800c3f4 <_read_r>
 800c2cc:	2800      	cmp	r0, #0
 800c2ce:	bfab      	itete	ge
 800c2d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c2d2:	89a3      	ldrhlt	r3, [r4, #12]
 800c2d4:	181b      	addge	r3, r3, r0
 800c2d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c2da:	bfac      	ite	ge
 800c2dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800c2de:	81a3      	strhlt	r3, [r4, #12]
 800c2e0:	bd10      	pop	{r4, pc}

0800c2e2 <__swrite>:
 800c2e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2e6:	461f      	mov	r7, r3
 800c2e8:	898b      	ldrh	r3, [r1, #12]
 800c2ea:	05db      	lsls	r3, r3, #23
 800c2ec:	4605      	mov	r5, r0
 800c2ee:	460c      	mov	r4, r1
 800c2f0:	4616      	mov	r6, r2
 800c2f2:	d505      	bpl.n	800c300 <__swrite+0x1e>
 800c2f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2f8:	2302      	movs	r3, #2
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f000 f868 	bl	800c3d0 <_lseek_r>
 800c300:	89a3      	ldrh	r3, [r4, #12]
 800c302:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c306:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c30a:	81a3      	strh	r3, [r4, #12]
 800c30c:	4632      	mov	r2, r6
 800c30e:	463b      	mov	r3, r7
 800c310:	4628      	mov	r0, r5
 800c312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c316:	f000 b817 	b.w	800c348 <_write_r>

0800c31a <__sseek>:
 800c31a:	b510      	push	{r4, lr}
 800c31c:	460c      	mov	r4, r1
 800c31e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c322:	f000 f855 	bl	800c3d0 <_lseek_r>
 800c326:	1c43      	adds	r3, r0, #1
 800c328:	89a3      	ldrh	r3, [r4, #12]
 800c32a:	bf15      	itete	ne
 800c32c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c32e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c332:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c336:	81a3      	strheq	r3, [r4, #12]
 800c338:	bf18      	it	ne
 800c33a:	81a3      	strhne	r3, [r4, #12]
 800c33c:	bd10      	pop	{r4, pc}

0800c33e <__sclose>:
 800c33e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c342:	f000 b813 	b.w	800c36c <_close_r>
	...

0800c348 <_write_r>:
 800c348:	b538      	push	{r3, r4, r5, lr}
 800c34a:	4d07      	ldr	r5, [pc, #28]	; (800c368 <_write_r+0x20>)
 800c34c:	4604      	mov	r4, r0
 800c34e:	4608      	mov	r0, r1
 800c350:	4611      	mov	r1, r2
 800c352:	2200      	movs	r2, #0
 800c354:	602a      	str	r2, [r5, #0]
 800c356:	461a      	mov	r2, r3
 800c358:	f7f8 fd1d 	bl	8004d96 <_write>
 800c35c:	1c43      	adds	r3, r0, #1
 800c35e:	d102      	bne.n	800c366 <_write_r+0x1e>
 800c360:	682b      	ldr	r3, [r5, #0]
 800c362:	b103      	cbz	r3, 800c366 <_write_r+0x1e>
 800c364:	6023      	str	r3, [r4, #0]
 800c366:	bd38      	pop	{r3, r4, r5, pc}
 800c368:	20002b24 	.word	0x20002b24

0800c36c <_close_r>:
 800c36c:	b538      	push	{r3, r4, r5, lr}
 800c36e:	4d06      	ldr	r5, [pc, #24]	; (800c388 <_close_r+0x1c>)
 800c370:	2300      	movs	r3, #0
 800c372:	4604      	mov	r4, r0
 800c374:	4608      	mov	r0, r1
 800c376:	602b      	str	r3, [r5, #0]
 800c378:	f7f8 fd29 	bl	8004dce <_close>
 800c37c:	1c43      	adds	r3, r0, #1
 800c37e:	d102      	bne.n	800c386 <_close_r+0x1a>
 800c380:	682b      	ldr	r3, [r5, #0]
 800c382:	b103      	cbz	r3, 800c386 <_close_r+0x1a>
 800c384:	6023      	str	r3, [r4, #0]
 800c386:	bd38      	pop	{r3, r4, r5, pc}
 800c388:	20002b24 	.word	0x20002b24

0800c38c <_fstat_r>:
 800c38c:	b538      	push	{r3, r4, r5, lr}
 800c38e:	4d07      	ldr	r5, [pc, #28]	; (800c3ac <_fstat_r+0x20>)
 800c390:	2300      	movs	r3, #0
 800c392:	4604      	mov	r4, r0
 800c394:	4608      	mov	r0, r1
 800c396:	4611      	mov	r1, r2
 800c398:	602b      	str	r3, [r5, #0]
 800c39a:	f7f8 fd24 	bl	8004de6 <_fstat>
 800c39e:	1c43      	adds	r3, r0, #1
 800c3a0:	d102      	bne.n	800c3a8 <_fstat_r+0x1c>
 800c3a2:	682b      	ldr	r3, [r5, #0]
 800c3a4:	b103      	cbz	r3, 800c3a8 <_fstat_r+0x1c>
 800c3a6:	6023      	str	r3, [r4, #0]
 800c3a8:	bd38      	pop	{r3, r4, r5, pc}
 800c3aa:	bf00      	nop
 800c3ac:	20002b24 	.word	0x20002b24

0800c3b0 <_isatty_r>:
 800c3b0:	b538      	push	{r3, r4, r5, lr}
 800c3b2:	4d06      	ldr	r5, [pc, #24]	; (800c3cc <_isatty_r+0x1c>)
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	4604      	mov	r4, r0
 800c3b8:	4608      	mov	r0, r1
 800c3ba:	602b      	str	r3, [r5, #0]
 800c3bc:	f7f8 fd23 	bl	8004e06 <_isatty>
 800c3c0:	1c43      	adds	r3, r0, #1
 800c3c2:	d102      	bne.n	800c3ca <_isatty_r+0x1a>
 800c3c4:	682b      	ldr	r3, [r5, #0]
 800c3c6:	b103      	cbz	r3, 800c3ca <_isatty_r+0x1a>
 800c3c8:	6023      	str	r3, [r4, #0]
 800c3ca:	bd38      	pop	{r3, r4, r5, pc}
 800c3cc:	20002b24 	.word	0x20002b24

0800c3d0 <_lseek_r>:
 800c3d0:	b538      	push	{r3, r4, r5, lr}
 800c3d2:	4d07      	ldr	r5, [pc, #28]	; (800c3f0 <_lseek_r+0x20>)
 800c3d4:	4604      	mov	r4, r0
 800c3d6:	4608      	mov	r0, r1
 800c3d8:	4611      	mov	r1, r2
 800c3da:	2200      	movs	r2, #0
 800c3dc:	602a      	str	r2, [r5, #0]
 800c3de:	461a      	mov	r2, r3
 800c3e0:	f7f8 fd1c 	bl	8004e1c <_lseek>
 800c3e4:	1c43      	adds	r3, r0, #1
 800c3e6:	d102      	bne.n	800c3ee <_lseek_r+0x1e>
 800c3e8:	682b      	ldr	r3, [r5, #0]
 800c3ea:	b103      	cbz	r3, 800c3ee <_lseek_r+0x1e>
 800c3ec:	6023      	str	r3, [r4, #0]
 800c3ee:	bd38      	pop	{r3, r4, r5, pc}
 800c3f0:	20002b24 	.word	0x20002b24

0800c3f4 <_read_r>:
 800c3f4:	b538      	push	{r3, r4, r5, lr}
 800c3f6:	4d07      	ldr	r5, [pc, #28]	; (800c414 <_read_r+0x20>)
 800c3f8:	4604      	mov	r4, r0
 800c3fa:	4608      	mov	r0, r1
 800c3fc:	4611      	mov	r1, r2
 800c3fe:	2200      	movs	r2, #0
 800c400:	602a      	str	r2, [r5, #0]
 800c402:	461a      	mov	r2, r3
 800c404:	f7f8 fcaa 	bl	8004d5c <_read>
 800c408:	1c43      	adds	r3, r0, #1
 800c40a:	d102      	bne.n	800c412 <_read_r+0x1e>
 800c40c:	682b      	ldr	r3, [r5, #0]
 800c40e:	b103      	cbz	r3, 800c412 <_read_r+0x1e>
 800c410:	6023      	str	r3, [r4, #0]
 800c412:	bd38      	pop	{r3, r4, r5, pc}
 800c414:	20002b24 	.word	0x20002b24

0800c418 <round>:
 800c418:	ec51 0b10 	vmov	r0, r1, d0
 800c41c:	b570      	push	{r4, r5, r6, lr}
 800c41e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800c422:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800c426:	2c13      	cmp	r4, #19
 800c428:	ee10 2a10 	vmov	r2, s0
 800c42c:	460b      	mov	r3, r1
 800c42e:	dc19      	bgt.n	800c464 <round+0x4c>
 800c430:	2c00      	cmp	r4, #0
 800c432:	da09      	bge.n	800c448 <round+0x30>
 800c434:	3401      	adds	r4, #1
 800c436:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800c43a:	d103      	bne.n	800c444 <round+0x2c>
 800c43c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c440:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c444:	2200      	movs	r2, #0
 800c446:	e028      	b.n	800c49a <round+0x82>
 800c448:	4d15      	ldr	r5, [pc, #84]	; (800c4a0 <round+0x88>)
 800c44a:	4125      	asrs	r5, r4
 800c44c:	ea01 0605 	and.w	r6, r1, r5
 800c450:	4332      	orrs	r2, r6
 800c452:	d00e      	beq.n	800c472 <round+0x5a>
 800c454:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c458:	fa42 f404 	asr.w	r4, r2, r4
 800c45c:	4423      	add	r3, r4
 800c45e:	ea23 0305 	bic.w	r3, r3, r5
 800c462:	e7ef      	b.n	800c444 <round+0x2c>
 800c464:	2c33      	cmp	r4, #51	; 0x33
 800c466:	dd07      	ble.n	800c478 <round+0x60>
 800c468:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800c46c:	d101      	bne.n	800c472 <round+0x5a>
 800c46e:	f7f3 ff2d 	bl	80002cc <__adddf3>
 800c472:	ec41 0b10 	vmov	d0, r0, r1
 800c476:	bd70      	pop	{r4, r5, r6, pc}
 800c478:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800c47c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c480:	40f5      	lsrs	r5, r6
 800c482:	4228      	tst	r0, r5
 800c484:	d0f5      	beq.n	800c472 <round+0x5a>
 800c486:	2101      	movs	r1, #1
 800c488:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800c48c:	fa01 f404 	lsl.w	r4, r1, r4
 800c490:	1912      	adds	r2, r2, r4
 800c492:	bf28      	it	cs
 800c494:	185b      	addcs	r3, r3, r1
 800c496:	ea22 0205 	bic.w	r2, r2, r5
 800c49a:	4619      	mov	r1, r3
 800c49c:	4610      	mov	r0, r2
 800c49e:	e7e8      	b.n	800c472 <round+0x5a>
 800c4a0:	000fffff 	.word	0x000fffff

0800c4a4 <_init>:
 800c4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4a6:	bf00      	nop
 800c4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4aa:	bc08      	pop	{r3}
 800c4ac:	469e      	mov	lr, r3
 800c4ae:	4770      	bx	lr

0800c4b0 <_fini>:
 800c4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4b2:	bf00      	nop
 800c4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4b6:	bc08      	pop	{r3}
 800c4b8:	469e      	mov	lr, r3
 800c4ba:	4770      	bx	lr
