
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000794  0800c5c0  0800c5c0  0001c5c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd54  0800cd54  000225cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd54  0800cd54  0001cd54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd5c  0800cd5c  000225cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd5c  0800cd5c  0001cd5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd60  0800cd60  0001cd60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000025cc  20000000  0800cd64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f24  200025cc  0800f330  000225cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200034f0  0800f330  000234f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000225cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb54  00000000  00000000  000225fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f56  00000000  00000000  0003f150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a0  00000000  00000000  000430a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e0  00000000  00000000  00044948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000286c6  00000000  00000000  00046028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f413  00000000  00000000  0006e6ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5c9e  00000000  00000000  0008db01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017379f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007828  00000000  00000000  001737f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200025cc 	.word	0x200025cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c5a4 	.word	0x0800c5a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200025d0 	.word	0x200025d0
 800020c:	0800c5a4 	.word	0x0800c5a4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b974 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <FEB_BMS_AIR_Open>:
extern CAN_HandleTypeDef hcan1;
extern UART_HandleTypeDef huart2;

// ********************************** Functions **********************************

void FEB_BMS_AIR_Open(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <FEB_BMS_AIR_Open+0x14>)
 8000fd6:	f005 fcc1 	bl	800695c <HAL_GPIO_WritePin>
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40020800 	.word	0x40020800

08000fe4 <FEB_BMS_AIR_Close>:

void FEB_BMS_AIR_Close(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2104      	movs	r1, #4
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <FEB_BMS_AIR_Close+0x14>)
 8000fee:	f005 fcb5 	bl	800695c <HAL_GPIO_WritePin>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40020800 	.word	0x40020800

08000ffc <FEB_BMS_Shutdown_Startup>:

uint8_t FEB_BMS_Shutdown_State = 0;		// 0 - not shutdown, 1 - shutdown

// ********************************** Functions **********************************

void FEB_BMS_Shutdown_Startup(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	2102      	movs	r1, #2
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <FEB_BMS_Shutdown_Startup+0x14>)
 8001006:	f005 fca9 	bl	800695c <HAL_GPIO_WritePin>
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40020800 	.word	0x40020800

08001014 <FEB_BMS_Shutdown_Initiate>:

void FEB_BMS_Shutdown_Initiate(char shutdown_message[]) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b0a2      	sub	sp, #136	; 0x88
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	FEB_BMS_Shutdown_State = 1;
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <FEB_BMS_Shutdown_Initiate+0x80>)
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]

	// Shutdown Circuit
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	2102      	movs	r1, #2
 8001026:	481c      	ldr	r0, [pc, #112]	; (8001098 <FEB_BMS_Shutdown_Initiate+0x84>)
 8001028:	f005 fc98 	bl	800695c <HAL_GPIO_WritePin>

	// Open AIR Circuit
	FEB_BMS_AIR_Open();
 800102c:	f7ff ffce 	bl	8000fcc <FEB_BMS_AIR_Open>

	// Broadcast Message
	char str[128];
	sprintf(str, "Shutdown: %s.", shutdown_message);
 8001030:	f107 0308 	add.w	r3, r7, #8
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	4919      	ldr	r1, [pc, #100]	; (800109c <FEB_BMS_Shutdown_Initiate+0x88>)
 8001038:	4618      	mov	r0, r3
 800103a:	f009 f8d9 	bl	800a1f0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 100);
 800103e:	f107 0308 	add.w	r3, r7, #8
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff f8e4 	bl	8000210 <strlen>
 8001048:	4603      	mov	r3, r0
 800104a:	b29a      	uxth	r2, r3
 800104c:	f107 0108 	add.w	r1, r7, #8
 8001050:	2364      	movs	r3, #100	; 0x64
 8001052:	4813      	ldr	r0, [pc, #76]	; (80010a0 <FEB_BMS_Shutdown_Initiate+0x8c>)
 8001054:	f007 ffbb 	bl	8008fce <HAL_UART_Transmit>
	if (FEB_CAN_CHARGER_STATE == 1) {
		FEB_CAN_Charger_Stop_Charge(&hcan1);
	}

	// Turn off fans
	FEB_Fan_All_Speed_Set(0);
 8001058:	2000      	movs	r0, #0
 800105a:	f000 fbf7 	bl	800184c <FEB_Fan_All_Speed_Set>
	
	// Do nothing
	sprintf(str, "shutting down: %s.\n", shutdown_message);
 800105e:	f107 0308 	add.w	r3, r7, #8
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	490f      	ldr	r1, [pc, #60]	; (80010a4 <FEB_BMS_Shutdown_Initiate+0x90>)
 8001066:	4618      	mov	r0, r3
 8001068:	f009 f8c2 	bl	800a1f0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 100);
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff f8cd 	bl	8000210 <strlen>
 8001076:	4603      	mov	r3, r0
 8001078:	b29a      	uxth	r2, r3
 800107a:	f107 0108 	add.w	r1, r7, #8
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	4807      	ldr	r0, [pc, #28]	; (80010a0 <FEB_BMS_Shutdown_Initiate+0x8c>)
 8001082:	f007 ffa4 	bl	8008fce <HAL_UART_Transmit>
	HAL_Delay(100);
 8001086:	2064      	movs	r0, #100	; 0x64
 8001088:	f004 f83a 	bl	8005100 <HAL_Delay>
}
 800108c:	bf00      	nop
 800108e:	3788      	adds	r7, #136	; 0x88
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200025e8 	.word	0x200025e8
 8001098:	40020800 	.word	0x40020800
 800109c:	0800c5c0 	.word	0x0800c5c0
 80010a0:	20003490 	.word	0x20003490
 80010a4:	0800c5d0 	.word	0x0800c5d0

080010a8 <FEB_BMS_State_Validate>:

#include "FEB_BMS_State.h"

// ********************************** Functions **********************************

void FEB_BMS_State_Validate(void) {
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
	if (FEB_CAN_CHARGER_STATE == 1 && FEB_LTC6811_BALANCE_STATE == 1) {
		FEB_BMS_Shutdown_Initiate("Charge state and balance state enabled");
	}
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <FEB_CAN_Init>:
uint8_t FEB_CAN_RxData[8];
uint32_t FEB_CAN_TxMailbox;

// ******************** CAN ********************

void FEB_CAN_Init() {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	FEB_CAN_Filter_Config();
 80010bc:	f000 f818 	bl	80010f0 <FEB_CAN_Filter_Config>
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80010c0:	4808      	ldr	r0, [pc, #32]	; (80010e4 <FEB_CAN_Init+0x2c>)
 80010c2:	f004 fdf9 	bl	8005cb8 <HAL_CAN_Start>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <FEB_CAN_Init+0x1a>
		FEB_BMS_Shutdown_Initiate("CAN peripheral startup error");
 80010cc:	4806      	ldr	r0, [pc, #24]	; (80010e8 <FEB_CAN_Init+0x30>)
 80010ce:	f7ff ffa1 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
	}
	HAL_CAN_ActivateNotification(&hcan1, FEB_CAN_FIFO_Interrupt);
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <FEB_CAN_Init+0x34>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4619      	mov	r1, r3
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <FEB_CAN_Init+0x2c>)
 80010da:	f004 ff43 	bl	8005f64 <HAL_CAN_ActivateNotification>
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20003310 	.word	0x20003310
 80010e8:	0800c5e4 	.word	0x0800c5e4
 80010ec:	20000000 	.word	0x20000000

080010f0 <FEB_CAN_Filter_Config>:

void FEB_CAN_Filter_Config() {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
	uint8_t bank = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	71fb      	strb	r3, [r7, #7]
	bank = FEB_CAN_IVT_Filter_Config(&hcan1, FEB_CAN_FIFO_Assignment, bank);
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <FEB_CAN_Filter_Config+0x48>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	79fa      	ldrb	r2, [r7, #7]
 8001100:	4619      	mov	r1, r3
 8001102:	480e      	ldr	r0, [pc, #56]	; (800113c <FEB_CAN_Filter_Config+0x4c>)
 8001104:	f000 f8fc 	bl	8001300 <FEB_CAN_IVT_Filter_Config>
 8001108:	4603      	mov	r3, r0
 800110a:	71fb      	strb	r3, [r7, #7]
	bank = FEB_CAN_Charger_Filter_Config(&hcan1, FEB_CAN_FIFO_Assignment, bank);
 800110c:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <FEB_CAN_Filter_Config+0x48>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	79fa      	ldrb	r2, [r7, #7]
 8001112:	4619      	mov	r1, r3
 8001114:	4809      	ldr	r0, [pc, #36]	; (800113c <FEB_CAN_Filter_Config+0x4c>)
 8001116:	f000 f841 	bl	800119c <FEB_CAN_Charger_Filter_Config>
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
	bank = FEB_CAN_Inverter_Filter_Config(&hcan1, FEB_CAN_FIFO_Assignment, bank);
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <FEB_CAN_Filter_Config+0x48>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	79fa      	ldrb	r2, [r7, #7]
 8001124:	4619      	mov	r1, r3
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <FEB_CAN_Filter_Config+0x4c>)
 8001128:	f000 fa52 	bl	80015d0 <FEB_CAN_Inverter_Filter_Config>
 800112c:	4603      	mov	r3, r0
 800112e:	71fb      	strb	r3, [r7, #7]
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20002608 	.word	0x20002608
 800113c:	20003310 	.word	0x20003310

08001140 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, FEB_CAN_FIFO_Assignment, &FEB_CAN_RxHeader, FEB_CAN_RxData) == HAL_OK) {
 8001148:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001150:	4a0d      	ldr	r2, [pc, #52]	; (8001188 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f004 fdf4 	bl	8005d40 <HAL_CAN_GetRxMessage>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10b      	bne.n	8001176 <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
		FEB_CAN_IVT_Store_Msg(&FEB_CAN_RxHeader, FEB_CAN_RxData);
 800115e:	4909      	ldr	r1, [pc, #36]	; (8001184 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001160:	4809      	ldr	r0, [pc, #36]	; (8001188 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001162:	f000 f915 	bl	8001390 <FEB_CAN_IVT_Store_Msg>
		FEB_CAN_Charger_Store_Msg(&FEB_CAN_RxHeader, FEB_CAN_RxData);
 8001166:	4907      	ldr	r1, [pc, #28]	; (8001184 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001168:	4807      	ldr	r0, [pc, #28]	; (8001188 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800116a:	f000 f84d 	bl	8001208 <FEB_CAN_Charger_Store_Msg>
		FEB_CAN_Inverter_Store_Msg(&FEB_CAN_RxHeader, FEB_CAN_RxData);
 800116e:	4905      	ldr	r1, [pc, #20]	; (8001184 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001170:	4805      	ldr	r0, [pc, #20]	; (8001188 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001172:	f000 fa75 	bl	8001660 <FEB_CAN_Inverter_Store_Msg>
	}
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20002608 	.word	0x20002608
 8001184:	2000260c 	.word	0x2000260c
 8001188:	200025ec 	.word	0x200025ec

0800118c <FEB_CAN_Charger_Init>:

// ********************************** Functions **********************************

// ******************** Startup ********************

void FEB_CAN_Charger_Init() {
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
	if (FEB_CAN_CHARGER_STATE == 0) {
		return;
 8001190:	bf00      	nop
	}
	FEB_CAN_Charger_BMS_Message.max_voltage_dV = (uint16_t) (FEB_LTC6811_CELL_MAX_VOLTAGE * FEB_LTC6811_NUM_CELLS_PER_BANK * FEB_LTC6811_NUM_BANKS * 10);
	FEB_CAN_Charger_BMS_Message.max_current_dA = (uint16_t) (FEB_CAN_CHARGER_MAX_CHARGING_CURRENT * 10);
	FEB_CAN_Charger_BMS_Message.control = 0;
}
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <FEB_CAN_Charger_Filter_Config>:

// ******************** CAN ********************

uint8_t FEB_CAN_Charger_Filter_Config(CAN_HandleTypeDef* hcan, uint8_t FIFO_Assignment, uint8_t bank) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b08c      	sub	sp, #48	; 0x30
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
 80011a8:	4613      	mov	r3, r2
 80011aa:	70bb      	strb	r3, [r7, #2]
	CAN_FilterTypeDef my_can_filter_config;

	my_can_filter_config.FilterActivation = CAN_FILTER_ENABLE;
 80011ac:	2301      	movs	r3, #1
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
	my_can_filter_config.FilterBank = bank;
 80011b0:	78bb      	ldrb	r3, [r7, #2]
 80011b2:	61fb      	str	r3, [r7, #28]
	my_can_filter_config.FilterFIFOAssignment = FIFO_Assignment;
 80011b4:	78fb      	ldrb	r3, [r7, #3]
 80011b6:	61bb      	str	r3, [r7, #24]
	my_can_filter_config.FilterIdHigh = FEB_CAN_CHARGER_CHARGER_ID >> 13; 			// First 16 bits
 80011b8:	f24c 73fa 	movw	r3, #51194	; 0xc7fa
 80011bc:	60bb      	str	r3, [r7, #8]
	my_can_filter_config.FilterIdLow = (FEB_CAN_CHARGER_CHARGER_ID & 0x1FFF) << 3;	// Last 13 bits
 80011be:	f248 7328 	movw	r3, #34600	; 0x8728
 80011c2:	60fb      	str	r3, [r7, #12]
	my_can_filter_config.FilterMaskIdHigh = 0xFFFF; 								// Mask first 16 bits
 80011c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011c8:	613b      	str	r3, [r7, #16]
	my_can_filter_config.FilterMaskIdLow = 0xFFF8;									// Mask last 13 bits
 80011ca:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80011ce:	617b      	str	r3, [r7, #20]
	my_can_filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
	my_can_filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 80011d4:	2301      	movs	r3, #1
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
	my_can_filter_config.SlaveStartFilterBank = 27;
 80011d8:	231b      	movs	r3, #27
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_CAN_ConfigFilter(hcan, &my_can_filter_config)) {
 80011dc:	f107 0308 	add.w	r3, r7, #8
 80011e0:	4619      	mov	r1, r3
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f004 fc88 	bl	8005af8 <HAL_CAN_ConfigFilter>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d002      	beq.n	80011f4 <FEB_CAN_Charger_Filter_Config+0x58>
		FEB_BMS_Shutdown_Initiate("Invalid charger CAN filter configuration");
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <FEB_CAN_Charger_Filter_Config+0x68>)
 80011f0:	f7ff ff10 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
	}

	return ++bank;
 80011f4:	78bb      	ldrb	r3, [r7, #2]
 80011f6:	3301      	adds	r3, #1
 80011f8:	70bb      	strb	r3, [r7, #2]
 80011fa:	78bb      	ldrb	r3, [r7, #2]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3730      	adds	r7, #48	; 0x30
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	0800c604 	.word	0x0800c604

08001208 <FEB_CAN_Charger_Store_Msg>:
	if (HAL_CAN_AddTxMessage(hcan, &FEB_CAN_TxHeader, FEB_CAN_TxData, &FEB_CAN_TxMailbox) != HAL_OK) {
		FEB_BMS_Shutdown_Initiate("CAN charger transmission error");
	}
}

void FEB_CAN_Charger_Store_Msg(CAN_RxHeaderTypeDef* pHeader, uint8_t RxData[]) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
	switch(pHeader->ExtId) {
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	4a17      	ldr	r2, [pc, #92]	; (8001274 <FEB_CAN_Charger_Store_Msg+0x6c>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d127      	bne.n	800126c <FEB_CAN_Charger_Store_Msg+0x64>
	    case FEB_CAN_CHARGER_CHARGER_ID:
	    	FEB_CAN_Charger_Charger_Message.operating_voltage_dV = (RxData[0] << 8) + RxData[1];
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	b29b      	uxth	r3, r3
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	b29a      	uxth	r2, r3
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	3301      	adds	r3, #1
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b29b      	uxth	r3, r3
 800122e:	4413      	add	r3, r2
 8001230:	b29a      	uxth	r2, r3
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <FEB_CAN_Charger_Store_Msg+0x70>)
 8001234:	801a      	strh	r2, [r3, #0]
	    	FEB_CAN_Charger_Charger_Message.operating_current_dA = (RxData[2] << 8) + RxData[3];
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	3302      	adds	r3, #2
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	b29b      	uxth	r3, r3
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	b29a      	uxth	r2, r3
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	3303      	adds	r3, #3
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	b29b      	uxth	r3, r3
 800124a:	4413      	add	r3, r2
 800124c:	b29a      	uxth	r2, r3
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <FEB_CAN_Charger_Store_Msg+0x70>)
 8001250:	805a      	strh	r2, [r3, #2]
	    	FEB_CAN_Charger_Charger_Message.status = RxData[4];
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	3304      	adds	r3, #4
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b29a      	uxth	r2, r3
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <FEB_CAN_Charger_Store_Msg+0x70>)
 800125c:	809a      	strh	r2, [r3, #4]
			FEB_CAN_Charger_Validate_Status(RxData[4]);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	3304      	adds	r3, #4
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f000 f809 	bl	800127c <FEB_CAN_Charger_Validate_Status>
			break;
 800126a:	bf00      	nop
	}
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	18ff50e5 	.word	0x18ff50e5
 8001278:	20002614 	.word	0x20002614

0800127c <FEB_CAN_Charger_Validate_Status>:

// ******************** Process Data ********************

void FEB_CAN_Charger_Validate_Status(uint8_t status) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
	// Failure bits: 0 (no error), 1 (error)
	uint8_t hardware_failure 			= (status >> 7) & 0b1;
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	09db      	lsrs	r3, r3, #7
 800128a:	73fb      	strb	r3, [r7, #15]
	uint8_t temperature_failure 		= (status >> 6) & 0b1;
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	099b      	lsrs	r3, r3, #6
 8001290:	b2db      	uxtb	r3, r3
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	73bb      	strb	r3, [r7, #14]
	uint8_t input_voltage_failure 		= (status >> 5) & 0b1;
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	095b      	lsrs	r3, r3, #5
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	737b      	strb	r3, [r7, #13]
	uint8_t starting_state_failure 		= (status >> 4) & 0b1;
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	091b      	lsrs	r3, r3, #4
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	733b      	strb	r3, [r7, #12]
	uint8_t communication_state_failure = (status >> 3) & 0b1;
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	08db      	lsrs	r3, r3, #3
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	72fb      	strb	r3, [r7, #11]

	if (hardware_failure == 1 			||
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d00b      	beq.n	80012da <FEB_CAN_Charger_Validate_Status+0x5e>
 80012c2:	7bbb      	ldrb	r3, [r7, #14]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d008      	beq.n	80012da <FEB_CAN_Charger_Validate_Status+0x5e>
		temperature_failure == 1 		||
 80012c8:	7b7b      	ldrb	r3, [r7, #13]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d005      	beq.n	80012da <FEB_CAN_Charger_Validate_Status+0x5e>
		input_voltage_failure == 1		||
 80012ce:	7b3b      	ldrb	r3, [r7, #12]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d002      	beq.n	80012da <FEB_CAN_Charger_Validate_Status+0x5e>
		starting_state_failure == 1		||
 80012d4:	7afb      	ldrb	r3, [r7, #11]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d102      	bne.n	80012e0 <FEB_CAN_Charger_Validate_Status+0x64>
		communication_state_failure == 1) {
		FEB_BMS_Shutdown_Initiate("CAN charger status error");
 80012da:	4803      	ldr	r0, [pc, #12]	; (80012e8 <FEB_CAN_Charger_Validate_Status+0x6c>)
 80012dc:	f7ff fe9a 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
	}
}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	0800c650 	.word	0x0800c650

080012ec <FEB_CAN_Charger_Process>:

void FEB_CAN_Charger_Process(CAN_HandleTypeDef* hcan) {
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	if (FEB_CAN_CHARGER_STATE == 0 || FEB_CAN_Charger_Stop_Charge_Bool == 1) {
		return;
 80012f4:	bf00      	nop
	if (FEB_LTC6811_Cells_Charged() == 1) {
		FEB_CAN_Charger_Stop_Charge(hcan);
	} else {
		FEB_CAN_Charger_Transmit(hcan);
	}
}
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <FEB_CAN_IVT_Filter_Config>:
// ********************************** Functions **********************************


// ******************** CAN ********************

uint8_t FEB_CAN_IVT_Filter_Config(CAN_HandleTypeDef* hcan, uint8_t FIFO_Assignment, uint8_t bank) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b08e      	sub	sp, #56	; 0x38
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	70fb      	strb	r3, [r7, #3]
 800130c:	4613      	mov	r3, r2
 800130e:	70bb      	strb	r3, [r7, #2]
	const uint8_t num_filters = (uint8_t) FEB_MATH_ARRAY_LENGTH(FEB_CAN_IVT_Filter_ID_Arr);
 8001310:	2304      	movs	r3, #4
 8001312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	for (int i = 0; i < num_filters; i++, bank++) {
 8001316:	2300      	movs	r3, #0
 8001318:	637b      	str	r3, [r7, #52]	; 0x34
 800131a:	e02a      	b.n	8001372 <FEB_CAN_IVT_Filter_Config+0x72>
		CAN_FilterTypeDef filter_config;

		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 800131c:	2301      	movs	r3, #1
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.FilterBank = bank;
 8001320:	78bb      	ldrb	r3, [r7, #2]
 8001322:	61fb      	str	r3, [r7, #28]
		filter_config.FilterFIFOAssignment = FIFO_Assignment;
 8001324:	78fb      	ldrb	r3, [r7, #3]
 8001326:	61bb      	str	r3, [r7, #24]
		filter_config.FilterIdHigh = FEB_CAN_IVT_Filter_ID_Arr[i] << 5;
 8001328:	4a17      	ldr	r2, [pc, #92]	; (8001388 <FEB_CAN_IVT_Filter_Config+0x88>)
 800132a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800132c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001330:	015b      	lsls	r3, r3, #5
 8001332:	60bb      	str	r3, [r7, #8]
		filter_config.FilterIdLow = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
		filter_config.FilterMaskIdHigh = 0x7FF << 5;
 8001338:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800133c:	613b      	str	r3, [r7, #16]
		filter_config.FilterMaskIdLow = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8001342:	2300      	movs	r3, #0
 8001344:	623b      	str	r3, [r7, #32]
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8001346:	2301      	movs	r3, #1
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.SlaveStartFilterBank = 27;
 800134a:	231b      	movs	r3, #27
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if(HAL_CAN_ConfigFilter(hcan, &filter_config)) {
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	4619      	mov	r1, r3
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f004 fbcf 	bl	8005af8 <HAL_CAN_ConfigFilter>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d002      	beq.n	8001366 <FEB_CAN_IVT_Filter_Config+0x66>
			FEB_BMS_Shutdown_Initiate("Invalid IVT CAN filter configuration");
 8001360:	480a      	ldr	r0, [pc, #40]	; (800138c <FEB_CAN_IVT_Filter_Config+0x8c>)
 8001362:	f7ff fe57 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
	for (int i = 0; i < num_filters; i++, bank++) {
 8001366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001368:	3301      	adds	r3, #1
 800136a:	637b      	str	r3, [r7, #52]	; 0x34
 800136c:	78bb      	ldrb	r3, [r7, #2]
 800136e:	3301      	adds	r3, #1
 8001370:	70bb      	strb	r3, [r7, #2]
 8001372:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001378:	429a      	cmp	r2, r3
 800137a:	dbcf      	blt.n	800131c <FEB_CAN_IVT_Filter_Config+0x1c>
		}
	}
	return bank;
 800137c:	78bb      	ldrb	r3, [r7, #2]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3738      	adds	r7, #56	; 0x38
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000004 	.word	0x20000004
 800138c:	0800c66c 	.word	0x0800c66c

08001390 <FEB_CAN_IVT_Store_Msg>:

void FEB_CAN_IVT_Store_Msg(CAN_RxHeaderTypeDef* pHeader, uint8_t RxData[]) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
	uint32_t value;
    switch(pHeader->StdId) {
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f2a3 5321 	subw	r3, r3, #1313	; 0x521
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d87e      	bhi.n	80014a4 <FEB_CAN_IVT_Store_Msg+0x114>
 80013a6:	a201      	add	r2, pc, #4	; (adr r2, 80013ac <FEB_CAN_IVT_Store_Msg+0x1c>)
 80013a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ac:	080013bd 	.word	0x080013bd
 80013b0:	080013f7 	.word	0x080013f7
 80013b4:	08001431 	.word	0x08001431
 80013b8:	0800146b 	.word	0x0800146b
    	case FEB_CAN_IVT_CURRENT_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	3302      	adds	r3, #2
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	061a      	lsls	r2, r3, #24
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	3303      	adds	r3, #3
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	041b      	lsls	r3, r3, #16
 80013cc:	441a      	add	r2, r3
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	3304      	adds	r3, #4
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	4413      	add	r3, r2
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	3205      	adds	r2, #5
 80013dc:	7812      	ldrb	r2, [r2, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
    	    FEB_CAN_IVT_MESSAGE.current_mA = FEB_Math_Uint32_To_Signed_Long(value);
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f001 fb04 	bl	80029f0 <FEB_Math_Uint32_To_Signed_Long>
 80013e8:	4603      	mov	r3, r0
 80013ea:	4a30      	ldr	r2, [pc, #192]	; (80014ac <FEB_CAN_IVT_Store_Msg+0x11c>)
 80013ec:	6013      	str	r3, [r2, #0]
    	    FEB_CAN_IVT_FLAG.current = 1;
 80013ee:	4b30      	ldr	r3, [pc, #192]	; (80014b0 <FEB_CAN_IVT_Store_Msg+0x120>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]
    		break;
 80013f4:	e056      	b.n	80014a4 <FEB_CAN_IVT_Store_Msg+0x114>
    	case FEB_CAN_IVT_VOLTAGE_1_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	3302      	adds	r3, #2
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	061a      	lsls	r2, r3, #24
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	3303      	adds	r3, #3
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	041b      	lsls	r3, r3, #16
 8001406:	441a      	add	r2, r3
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	3304      	adds	r3, #4
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	4413      	add	r3, r2
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	3205      	adds	r2, #5
 8001416:	7812      	ldrb	r2, [r2, #0]
 8001418:	4413      	add	r3, r2
 800141a:	60fb      	str	r3, [r7, #12]
    	    FEB_CAN_IVT_MESSAGE.voltage_1_mV = FEB_Math_Uint32_To_Signed_Long(value);
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f001 fae7 	bl	80029f0 <FEB_Math_Uint32_To_Signed_Long>
 8001422:	4603      	mov	r3, r0
 8001424:	4a21      	ldr	r2, [pc, #132]	; (80014ac <FEB_CAN_IVT_Store_Msg+0x11c>)
 8001426:	6053      	str	r3, [r2, #4]
    	    FEB_CAN_IVT_FLAG.voltage_1 = 1;
 8001428:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <FEB_CAN_IVT_Store_Msg+0x120>)
 800142a:	2201      	movs	r2, #1
 800142c:	705a      	strb	r2, [r3, #1]
    		break;
 800142e:	e039      	b.n	80014a4 <FEB_CAN_IVT_Store_Msg+0x114>
    	case FEB_CAN_IVT_VOLTAGE_2_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	3302      	adds	r3, #2
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	061a      	lsls	r2, r3, #24
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	3303      	adds	r3, #3
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	041b      	lsls	r3, r3, #16
 8001440:	441a      	add	r2, r3
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	3304      	adds	r3, #4
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	4413      	add	r3, r2
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	3205      	adds	r2, #5
 8001450:	7812      	ldrb	r2, [r2, #0]
 8001452:	4413      	add	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
    	    FEB_CAN_IVT_MESSAGE.voltage_2_mV = FEB_Math_Uint32_To_Signed_Long(value);
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f001 faca 	bl	80029f0 <FEB_Math_Uint32_To_Signed_Long>
 800145c:	4603      	mov	r3, r0
 800145e:	4a13      	ldr	r2, [pc, #76]	; (80014ac <FEB_CAN_IVT_Store_Msg+0x11c>)
 8001460:	6093      	str	r3, [r2, #8]
    	    FEB_CAN_IVT_FLAG.voltage_2 = 1;
 8001462:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <FEB_CAN_IVT_Store_Msg+0x120>)
 8001464:	2201      	movs	r2, #1
 8001466:	709a      	strb	r2, [r3, #2]
    		break;
 8001468:	e01c      	b.n	80014a4 <FEB_CAN_IVT_Store_Msg+0x114>
    	case FEB_CAN_IVT_VOLTAGE_3_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	3302      	adds	r3, #2
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	061a      	lsls	r2, r3, #24
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	3303      	adds	r3, #3
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	041b      	lsls	r3, r3, #16
 800147a:	441a      	add	r2, r3
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	3304      	adds	r3, #4
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	4413      	add	r3, r2
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	3205      	adds	r2, #5
 800148a:	7812      	ldrb	r2, [r2, #0]
 800148c:	4413      	add	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]
    		FEB_CAN_IVT_MESSAGE.voltage_3_mV = FEB_Math_Uint32_To_Signed_Long(value);
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f001 faad 	bl	80029f0 <FEB_Math_Uint32_To_Signed_Long>
 8001496:	4603      	mov	r3, r0
 8001498:	4a04      	ldr	r2, [pc, #16]	; (80014ac <FEB_CAN_IVT_Store_Msg+0x11c>)
 800149a:	60d3      	str	r3, [r2, #12]
    		FEB_CAN_IVT_FLAG.voltage_3 = 1;
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <FEB_CAN_IVT_Store_Msg+0x120>)
 800149e:	2201      	movs	r2, #1
 80014a0:	70da      	strb	r2, [r3, #3]
    		break;
 80014a2:	bf00      	nop
    }
}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20002620 	.word	0x20002620
 80014b0:	2000261c 	.word	0x2000261c
 80014b4:	00000000 	.word	0x00000000

080014b8 <FEB_CAN_IVT_Process>:

// ******************** Process Data  ********************

void FEB_CAN_IVT_Process(void) {
 80014b8:	b5b0      	push	{r4, r5, r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
	if (FEB_CAN_CHARGER_STATE == 1 || FEB_LTC6811_BALANCE_STATE == 1) {
		return;
	}
	if (FEB_CAN_IVT_FLAG.current == 1) {
 80014be:	4b40      	ldr	r3, [pc, #256]	; (80015c0 <FEB_CAN_IVT_Process+0x108>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d125      	bne.n	8001512 <FEB_CAN_IVT_Process+0x5a>
		FEB_CAN_IVT_FLAG.current = 0;
 80014c6:	4b3e      	ldr	r3, [pc, #248]	; (80015c0 <FEB_CAN_IVT_Process+0x108>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
		const float current = (float) FEB_CAN_IVT_MESSAGE.current_mA * 0.001;
 80014cc:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <FEB_CAN_IVT_Process+0x10c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	ee07 3a90 	vmov	s15, r3
 80014d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d8:	ee17 0a90 	vmov	r0, s15
 80014dc:	f7ff f854 	bl	8000588 <__aeabi_f2d>
 80014e0:	a333      	add	r3, pc, #204	; (adr r3, 80015b0 <FEB_CAN_IVT_Process+0xf8>)
 80014e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e6:	f7ff f8a7 	bl	8000638 <__aeabi_dmul>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	f7ff fb99 	bl	8000c28 <__aeabi_d2f>
 80014f6:	4603      	mov	r3, r0
 80014f8:	607b      	str	r3, [r7, #4]
		if (current > FEB_LTC6811_CELL_MAX_OPERATING_CURRENT) {
 80014fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80014fe:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80015c8 <FEB_CAN_IVT_Process+0x110>
 8001502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150a:	dd02      	ble.n	8001512 <FEB_CAN_IVT_Process+0x5a>
			FEB_BMS_Shutdown_Initiate("IVT over current");
 800150c:	482f      	ldr	r0, [pc, #188]	; (80015cc <FEB_CAN_IVT_Process+0x114>)
 800150e:	f7ff fd81 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
		}
	}
	if (FEB_CAN_IVT_FLAG.voltage_1 == 1) {
 8001512:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <FEB_CAN_IVT_Process+0x108>)
 8001514:	785b      	ldrb	r3, [r3, #1]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d102      	bne.n	8001520 <FEB_CAN_IVT_Process+0x68>
		FEB_CAN_IVT_FLAG.voltage_1 = 0;
 800151a:	4b29      	ldr	r3, [pc, #164]	; (80015c0 <FEB_CAN_IVT_Process+0x108>)
 800151c:	2200      	movs	r2, #0
 800151e:	705a      	strb	r2, [r3, #1]
		// Do something

	}
	if (FEB_CAN_IVT_FLAG.voltage_2 == 1) {
 8001520:	4b27      	ldr	r3, [pc, #156]	; (80015c0 <FEB_CAN_IVT_Process+0x108>)
 8001522:	789b      	ldrb	r3, [r3, #2]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d102      	bne.n	800152e <FEB_CAN_IVT_Process+0x76>
		FEB_CAN_IVT_FLAG.voltage_2 = 0;
 8001528:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <FEB_CAN_IVT_Process+0x108>)
 800152a:	2200      	movs	r2, #0
 800152c:	709a      	strb	r2, [r3, #2]
		// Do Something
	}
	if (FEB_CAN_IVT_FLAG.voltage_3 == 1) {
 800152e:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <FEB_CAN_IVT_Process+0x108>)
 8001530:	78db      	ldrb	r3, [r3, #3]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d138      	bne.n	80015a8 <FEB_CAN_IVT_Process+0xf0>
		FEB_CAN_IVT_FLAG.voltage_3 = 0;
 8001536:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <FEB_CAN_IVT_Process+0x108>)
 8001538:	2200      	movs	r2, #0
 800153a:	70da      	strb	r2, [r3, #3]
		float voltage = (float) FEB_CAN_IVT_MESSAGE.voltage_3_mV * 0.001;
 800153c:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <FEB_CAN_IVT_Process+0x10c>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	ee07 3a90 	vmov	s15, r3
 8001544:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001548:	ee17 0a90 	vmov	r0, s15
 800154c:	f7ff f81c 	bl	8000588 <__aeabi_f2d>
 8001550:	a317      	add	r3, pc, #92	; (adr r3, 80015b0 <FEB_CAN_IVT_Process+0xf8>)
 8001552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001556:	f7ff f86f 	bl	8000638 <__aeabi_dmul>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	f7ff fb61 	bl	8000c28 <__aeabi_d2f>
 8001566:	4603      	mov	r3, r0
 8001568:	603b      	str	r3, [r7, #0]
		if (voltage > FEB_LTC6811_Total_Bank_Voltage() * 0.9) {
 800156a:	6838      	ldr	r0, [r7, #0]
 800156c:	f7ff f80c 	bl	8000588 <__aeabi_f2d>
 8001570:	4604      	mov	r4, r0
 8001572:	460d      	mov	r5, r1
 8001574:	f000 fd9a 	bl	80020ac <FEB_LTC6811_Total_Bank_Voltage>
 8001578:	ee10 3a10 	vmov	r3, s0
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff f803 	bl	8000588 <__aeabi_f2d>
 8001582:	a30d      	add	r3, pc, #52	; (adr r3, 80015b8 <FEB_CAN_IVT_Process+0x100>)
 8001584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001588:	f7ff f856 	bl	8000638 <__aeabi_dmul>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4620      	mov	r0, r4
 8001592:	4629      	mov	r1, r5
 8001594:	f7ff fae0 	bl	8000b58 <__aeabi_dcmpgt>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d002      	beq.n	80015a4 <FEB_CAN_IVT_Process+0xec>
		  // comment this out when testing the battery
			FEB_BMS_AIR_Close();
 800159e:	f7ff fd21 	bl	8000fe4 <FEB_BMS_AIR_Close>
 80015a2:	e001      	b.n	80015a8 <FEB_CAN_IVT_Process+0xf0>
		} else {
			FEB_BMS_AIR_Open();
 80015a4:	f7ff fd12 	bl	8000fcc <FEB_BMS_AIR_Open>
		}
	}
}
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bdb0      	pop	{r4, r5, r7, pc}
 80015ae:	bf00      	nop
 80015b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80015b4:	3f50624d 	.word	0x3f50624d
 80015b8:	cccccccd 	.word	0xcccccccd
 80015bc:	3feccccc 	.word	0x3feccccc
 80015c0:	2000261c 	.word	0x2000261c
 80015c4:	20002620 	.word	0x20002620
 80015c8:	425c0000 	.word	0x425c0000
 80015cc:	0800c694 	.word	0x0800c694

080015d0 <FEB_CAN_Inverter_Filter_Config>:

// ********************************** Functions **********************************

// ******************** CAN ********************

uint8_t FEB_CAN_Inverter_Filter_Config(CAN_HandleTypeDef* hcan, uint8_t FIFO_Assignment, uint8_t bank) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08e      	sub	sp, #56	; 0x38
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	70fb      	strb	r3, [r7, #3]
 80015dc:	4613      	mov	r3, r2
 80015de:	70bb      	strb	r3, [r7, #2]
	uint8_t num_filters = FEB_MATH_ARRAY_LENGTH(FEB_CAN_Inverter_Filter_ID_Arr);
 80015e0:	2302      	movs	r3, #2
 80015e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	for (int i = 0; i < num_filters; i++, bank++) {
 80015e6:	2300      	movs	r3, #0
 80015e8:	637b      	str	r3, [r7, #52]	; 0x34
 80015ea:	e02a      	b.n	8001642 <FEB_CAN_Inverter_Filter_Config+0x72>
		CAN_FilterTypeDef filter_config;

		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 80015ec:	2301      	movs	r3, #1
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.FilterBank = bank;
 80015f0:	78bb      	ldrb	r3, [r7, #2]
 80015f2:	61fb      	str	r3, [r7, #28]
		filter_config.FilterFIFOAssignment = FIFO_Assignment;
 80015f4:	78fb      	ldrb	r3, [r7, #3]
 80015f6:	61bb      	str	r3, [r7, #24]
		filter_config.FilterIdHigh = FEB_CAN_Inverter_Filter_ID_Arr[i] << 5;
 80015f8:	4a17      	ldr	r2, [pc, #92]	; (8001658 <FEB_CAN_Inverter_Filter_Config+0x88>)
 80015fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001600:	015b      	lsls	r3, r3, #5
 8001602:	60bb      	str	r3, [r7, #8]
		filter_config.FilterIdLow = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
		filter_config.FilterMaskIdHigh = 0x7FF << 5;
 8001608:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800160c:	613b      	str	r3, [r7, #16]
		filter_config.FilterMaskIdLow = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8001616:	2301      	movs	r3, #1
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.SlaveStartFilterBank = 27;
 800161a:	231b      	movs	r3, #27
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (HAL_CAN_ConfigFilter(hcan, &filter_config)) {
 800161e:	f107 0308 	add.w	r3, r7, #8
 8001622:	4619      	mov	r1, r3
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f004 fa67 	bl	8005af8 <HAL_CAN_ConfigFilter>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d002      	beq.n	8001636 <FEB_CAN_Inverter_Filter_Config+0x66>
			FEB_BMS_Shutdown_Initiate("Invalid inverter CAN filter configuration");
 8001630:	480a      	ldr	r0, [pc, #40]	; (800165c <FEB_CAN_Inverter_Filter_Config+0x8c>)
 8001632:	f7ff fcef 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
	for (int i = 0; i < num_filters; i++, bank++) {
 8001636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001638:	3301      	adds	r3, #1
 800163a:	637b      	str	r3, [r7, #52]	; 0x34
 800163c:	78bb      	ldrb	r3, [r7, #2]
 800163e:	3301      	adds	r3, #1
 8001640:	70bb      	strb	r3, [r7, #2]
 8001642:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001648:	429a      	cmp	r2, r3
 800164a:	dbcf      	blt.n	80015ec <FEB_CAN_Inverter_Filter_Config+0x1c>
		}
	}
	return bank;
 800164c:	78bb      	ldrb	r3, [r7, #2]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3738      	adds	r7, #56	; 0x38
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2000000c 	.word	0x2000000c
 800165c:	0800c6a8 	.word	0x0800c6a8

08001660 <FEB_CAN_Inverter_Store_Msg>:

void FEB_CAN_Inverter_Store_Msg(CAN_RxHeaderTypeDef* pHeader, uint8_t RxData[]) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
	switch (pHeader->StdId) {
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2ba0      	cmp	r3, #160	; 0xa0
 8001670:	d002      	beq.n	8001678 <FEB_CAN_Inverter_Store_Msg+0x18>
 8001672:	2ba2      	cmp	r3, #162	; 0xa2
 8001674:	d04c      	beq.n	8001710 <FEB_CAN_Inverter_Store_Msg+0xb0>
			break;
		case FEB_CAN_INVERTER_TEMPERATURE_3_ID:
			FEB_CAN_Inverter_Temperature_3_Message.motor_dC = FEB_Math_Uint16_To_Int16((RxData[4] << 8) + RxData[5]);
			break;
	}
}
 8001676:	e05f      	b.n	8001738 <FEB_CAN_Inverter_Store_Msg+0xd8>
			FEB_CAN_Inverter_Temperature_1_Message.phase_a_dC = FEB_Math_Uint16_To_Int16((RxData[0] << 8) + RxData[1]);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	b29b      	uxth	r3, r3
 800167e:	021b      	lsls	r3, r3, #8
 8001680:	b29a      	uxth	r2, r3
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	3301      	adds	r3, #1
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	b29b      	uxth	r3, r3
 800168a:	4413      	add	r3, r2
 800168c:	b29b      	uxth	r3, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f001 f9bd 	bl	8002a0e <FEB_Math_Uint16_To_Int16>
 8001694:	4603      	mov	r3, r0
 8001696:	461a      	mov	r2, r3
 8001698:	4b29      	ldr	r3, [pc, #164]	; (8001740 <FEB_CAN_Inverter_Store_Msg+0xe0>)
 800169a:	801a      	strh	r2, [r3, #0]
			FEB_CAN_Inverter_Temperature_1_Message.phase_b_dC = FEB_Math_Uint16_To_Int16((RxData[2] << 8) + RxData[3]);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	3302      	adds	r3, #2
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	3303      	adds	r3, #3
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	4413      	add	r3, r2
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	4618      	mov	r0, r3
 80016b6:	f001 f9aa 	bl	8002a0e <FEB_Math_Uint16_To_Int16>
 80016ba:	4603      	mov	r3, r0
 80016bc:	461a      	mov	r2, r3
 80016be:	4b20      	ldr	r3, [pc, #128]	; (8001740 <FEB_CAN_Inverter_Store_Msg+0xe0>)
 80016c0:	805a      	strh	r2, [r3, #2]
			FEB_CAN_Inverter_Temperature_1_Message.phase_c_dC = FEB_Math_Uint16_To_Int16((RxData[4] << 8) + RxData[5]);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	3304      	adds	r3, #4
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	021b      	lsls	r3, r3, #8
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	3305      	adds	r3, #5
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	4413      	add	r3, r2
 80016d8:	b29b      	uxth	r3, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	f001 f997 	bl	8002a0e <FEB_Math_Uint16_To_Int16>
 80016e0:	4603      	mov	r3, r0
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b16      	ldr	r3, [pc, #88]	; (8001740 <FEB_CAN_Inverter_Store_Msg+0xe0>)
 80016e6:	809a      	strh	r2, [r3, #4]
			FEB_CAN_Inverter_Temperature_1_Message.gate_driver_board_dC = FEB_Math_Uint16_To_Int16((RxData[6] << 8) + RxData[7]);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	3306      	adds	r3, #6
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	3307      	adds	r3, #7
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	4413      	add	r3, r2
 80016fe:	b29b      	uxth	r3, r3
 8001700:	4618      	mov	r0, r3
 8001702:	f001 f984 	bl	8002a0e <FEB_Math_Uint16_To_Int16>
 8001706:	4603      	mov	r3, r0
 8001708:	461a      	mov	r2, r3
 800170a:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <FEB_CAN_Inverter_Store_Msg+0xe0>)
 800170c:	80da      	strh	r2, [r3, #6]
			break;
 800170e:	e013      	b.n	8001738 <FEB_CAN_Inverter_Store_Msg+0xd8>
			FEB_CAN_Inverter_Temperature_3_Message.motor_dC = FEB_Math_Uint16_To_Int16((RxData[4] << 8) + RxData[5]);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	3304      	adds	r3, #4
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	b29b      	uxth	r3, r3
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	b29a      	uxth	r2, r3
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	3305      	adds	r3, #5
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	b29b      	uxth	r3, r3
 8001724:	4413      	add	r3, r2
 8001726:	b29b      	uxth	r3, r3
 8001728:	4618      	mov	r0, r3
 800172a:	f001 f970 	bl	8002a0e <FEB_Math_Uint16_To_Int16>
 800172e:	4603      	mov	r3, r0
 8001730:	461a      	mov	r2, r3
 8001732:	4b04      	ldr	r3, [pc, #16]	; (8001744 <FEB_CAN_Inverter_Store_Msg+0xe4>)
 8001734:	801a      	strh	r2, [r3, #0]
			break;
 8001736:	bf00      	nop
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20002630 	.word	0x20002630
 8001744:	20002638 	.word	0x20002638

08001748 <FEB_CAN_Inverter_Process>:

// ******************** Process Data ********************

void FEB_CAN_Inverter_Process(void) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
	uint8_t num_temperatures = FEB_MATH_ARRAY_LENGTH(FEB_CAN_Inverter_Temperatures_dC);
 800174e:	2305      	movs	r3, #5
 8001750:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < num_temperatures; i++) {
 8001752:	2300      	movs	r3, #0
 8001754:	71fb      	strb	r3, [r7, #7]
 8001756:	e024      	b.n	80017a2 <FEB_CAN_Inverter_Process+0x5a>
		float temperature = *FEB_CAN_Inverter_Temperatures_dC[i] * 0.1;
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	4a19      	ldr	r2, [pc, #100]	; (80017c0 <FEB_CAN_Inverter_Process+0x78>)
 800175c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe fefd 	bl	8000564 <__aeabi_i2d>
 800176a:	a313      	add	r3, pc, #76	; (adr r3, 80017b8 <FEB_CAN_Inverter_Process+0x70>)
 800176c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001770:	f7fe ff62 	bl	8000638 <__aeabi_dmul>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	f7ff fa54 	bl	8000c28 <__aeabi_d2f>
 8001780:	4603      	mov	r3, r0
 8001782:	603b      	str	r3, [r7, #0]
		if (temperature > FEB_CAN_INVERTER_TEMPERATURE_MAX) {
 8001784:	edd7 7a00 	vldr	s15, [r7]
 8001788:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80017c4 <FEB_CAN_Inverter_Process+0x7c>
 800178c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001794:	dd02      	ble.n	800179c <FEB_CAN_Inverter_Process+0x54>
			FEB_BMS_Shutdown_Initiate("Inverter over temperature");
 8001796:	480c      	ldr	r0, [pc, #48]	; (80017c8 <FEB_CAN_Inverter_Process+0x80>)
 8001798:	f7ff fc3c 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
	for (uint8_t i = 0; i < num_temperatures; i++) {
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	3301      	adds	r3, #1
 80017a0:	71fb      	strb	r3, [r7, #7]
 80017a2:	79fa      	ldrb	r2, [r7, #7]
 80017a4:	79bb      	ldrb	r3, [r7, #6]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d3d6      	bcc.n	8001758 <FEB_CAN_Inverter_Process+0x10>
		} else if (temperature > FEB_CAN_INVERTER_TEMPERATURE_LIMIT_TORQUE) {
			// TODO: Limit torque
		}
	}
}
 80017aa:	bf00      	nop
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	f3af 8000 	nop.w
 80017b8:	9999999a 	.word	0x9999999a
 80017bc:	3fb99999 	.word	0x3fb99999
 80017c0:	20000010 	.word	0x20000010
 80017c4:	426c0000 	.word	0x426c0000
 80017c8:	0800c6d4 	.word	0x0800c6d4

080017cc <FEB_Fan_Init>:
static uint8_t FEB_Fan_3_Speed = 0;		// [0, 255]
static uint8_t FEB_Fan_4_Speed = 0;		// [0, 255]

// ********************************** Initialize **********************************

void FEB_Fan_Init(void) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	FEB_Fan_PWM_Start();
 80017d0:	f000 f810 	bl	80017f4 <FEB_Fan_PWM_Start>
	FEB_Fan_Init_Speed_Set();
 80017d4:	f000 f826 	bl	8001824 <FEB_Fan_Init_Speed_Set>
	FEB_Fan_Reset_Shift_Register();
 80017d8:	f000 f8b2 	bl	8001940 <FEB_Fan_Reset_Shift_Register>
	HAL_ADC_Start(&hadc1);
 80017dc:	4803      	ldr	r0, [pc, #12]	; (80017ec <FEB_Fan_Init+0x20>)
 80017de:	f003 fcf7 	bl	80051d0 <HAL_ADC_Start>
	HAL_ADC_Start(&hadc2);
 80017e2:	4803      	ldr	r0, [pc, #12]	; (80017f0 <FEB_Fan_Init+0x24>)
 80017e4:	f003 fcf4 	bl	80051d0 <HAL_ADC_Start>
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20003280 	.word	0x20003280
 80017f0:	200032c8 	.word	0x200032c8

080017f4 <FEB_Fan_PWM_Start>:

// ********************************** PWM **********************************

void FEB_Fan_PWM_Start(void) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017f8:	2100      	movs	r1, #0
 80017fa:	4808      	ldr	r0, [pc, #32]	; (800181c <FEB_Fan_PWM_Start+0x28>)
 80017fc:	f006 fd6a 	bl	80082d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001800:	2104      	movs	r1, #4
 8001802:	4806      	ldr	r0, [pc, #24]	; (800181c <FEB_Fan_PWM_Start+0x28>)
 8001804:	f006 fd66 	bl	80082d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001808:	2100      	movs	r1, #0
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <FEB_Fan_PWM_Start+0x2c>)
 800180c:	f006 fd62 	bl	80082d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001810:	2104      	movs	r1, #4
 8001812:	4803      	ldr	r0, [pc, #12]	; (8001820 <FEB_Fan_PWM_Start+0x2c>)
 8001814:	f006 fd5e 	bl	80082d4 <HAL_TIM_PWM_Start>
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	200033b8 	.word	0x200033b8
 8001820:	20003400 	.word	0x20003400

08001824 <FEB_Fan_Init_Speed_Set>:

void FEB_Fan_Init_Speed_Set(void) {\
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
	if (FEB_BMS_Shutdown_State == 1) {
 800182a:	4b07      	ldr	r3, [pc, #28]	; (8001848 <FEB_Fan_Init_Speed_Set+0x24>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d006      	beq.n	8001840 <FEB_Fan_Init_Speed_Set+0x1c>
		return;
	}
	uint8_t speed;
	if (FEB_CAN_CHARGER_STATE == 0) {
		speed = 255;
 8001832:	23ff      	movs	r3, #255	; 0xff
 8001834:	71fb      	strb	r3, [r7, #7]
	} else if (FEB_CAN_CHARGER_STATE == 1) {
		speed = 127;
	}
	FEB_Fan_All_Speed_Set(speed);
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	4618      	mov	r0, r3
 800183a:	f000 f807 	bl	800184c <FEB_Fan_All_Speed_Set>
 800183e:	e000      	b.n	8001842 <FEB_Fan_Init_Speed_Set+0x1e>
		return;
 8001840:	bf00      	nop
}
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200025e8 	.word	0x200025e8

0800184c <FEB_Fan_All_Speed_Set>:

void FEB_Fan_All_Speed_Set(uint8_t speed) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
	FEB_Fan_1_Speed_Set(speed);
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	4618      	mov	r0, r3
 800185a:	f000 f811 	bl	8001880 <FEB_Fan_1_Speed_Set>
	FEB_Fan_2_Speed_Set(speed);
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	4618      	mov	r0, r3
 8001862:	f000 f825 	bl	80018b0 <FEB_Fan_2_Speed_Set>
	FEB_Fan_3_Speed_Set(speed);
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	4618      	mov	r0, r3
 800186a:	f000 f839 	bl	80018e0 <FEB_Fan_3_Speed_Set>
	FEB_Fan_4_Speed_Set(speed);
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	4618      	mov	r0, r3
 8001872:	f000 f84d 	bl	8001910 <FEB_Fan_4_Speed_Set>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <FEB_Fan_1_Speed_Set>:

void FEB_Fan_1_Speed_Set(uint8_t speed) {
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
	FEB_Fan_1_Speed = speed;
 800188a:	4a07      	ldr	r2, [pc, #28]	; (80018a8 <FEB_Fan_1_Speed_Set+0x28>)
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, FEB_Fan_1_Speed);
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <FEB_Fan_1_Speed_Set+0x28>)
 8001892:	781a      	ldrb	r2, [r3, #0]
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <FEB_Fan_1_Speed_Set+0x2c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	635a      	str	r2, [r3, #52]	; 0x34
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	2000263a 	.word	0x2000263a
 80018ac:	200033b8 	.word	0x200033b8

080018b0 <FEB_Fan_2_Speed_Set>:

void FEB_Fan_2_Speed_Set(uint8_t speed) {
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
	FEB_Fan_2_Speed = speed;
 80018ba:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <FEB_Fan_2_Speed_Set+0x28>)
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, FEB_Fan_2_Speed);
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <FEB_Fan_2_Speed_Set+0x28>)
 80018c2:	781a      	ldrb	r2, [r3, #0]
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <FEB_Fan_2_Speed_Set+0x2c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	2000263b 	.word	0x2000263b
 80018dc:	200033b8 	.word	0x200033b8

080018e0 <FEB_Fan_3_Speed_Set>:

void FEB_Fan_3_Speed_Set(uint8_t speed) {
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
	FEB_Fan_3_Speed = speed;
 80018ea:	4a07      	ldr	r2, [pc, #28]	; (8001908 <FEB_Fan_3_Speed_Set+0x28>)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, FEB_Fan_3_Speed);
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <FEB_Fan_3_Speed_Set+0x28>)
 80018f2:	781a      	ldrb	r2, [r3, #0]
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <FEB_Fan_3_Speed_Set+0x2c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	2000263c 	.word	0x2000263c
 800190c:	20003400 	.word	0x20003400

08001910 <FEB_Fan_4_Speed_Set>:

void FEB_Fan_4_Speed_Set(uint8_t speed) {
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
	FEB_Fan_4_Speed = speed;
 800191a:	4a07      	ldr	r2, [pc, #28]	; (8001938 <FEB_Fan_4_Speed_Set+0x28>)
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, FEB_Fan_4_Speed);
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <FEB_Fan_4_Speed_Set+0x28>)
 8001922:	781a      	ldrb	r2, [r3, #0]
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <FEB_Fan_4_Speed_Set+0x2c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	635a      	str	r2, [r3, #52]	; 0x34
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	2000263d 	.word	0x2000263d
 800193c:	20003400 	.word	0x20003400

08001940 <FEB_Fan_Reset_Shift_Register>:

// ********************************** Shift Register Control **********************************

void FEB_Fan_Reset_Shift_Register(void) {
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	f44f 7100 	mov.w	r1, #512	; 0x200
 800194a:	4807      	ldr	r0, [pc, #28]	; (8001968 <FEB_Fan_Reset_Shift_Register+0x28>)
 800194c:	f005 f806 	bl	800695c <HAL_GPIO_WritePin>
	FEB_Timer_Delay_Micro(10);
 8001950:	200a      	movs	r0, #10
 8001952:	f001 f87d 	bl	8002a50 <FEB_Timer_Delay_Micro>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001956:	2201      	movs	r2, #1
 8001958:	f44f 7100 	mov.w	r1, #512	; 0x200
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <FEB_Fan_Reset_Shift_Register+0x28>)
 800195e:	f004 fffd 	bl	800695c <HAL_GPIO_WritePin>
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40020800 	.word	0x40020800

0800196c <FEB_Fan_Serial_High>:

void FEB_Fan_Serial_High(void) {
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8001970:	2201      	movs	r2, #1
 8001972:	2104      	movs	r1, #4
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <FEB_Fan_Serial_High+0x14>)
 8001976:	f004 fff1 	bl	800695c <HAL_GPIO_WritePin>
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40020400 	.word	0x40020400

08001984 <FEB_Fan_Serial_Low>:

void FEB_Fan_Serial_Low(void) {
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001988:	2200      	movs	r2, #0
 800198a:	2104      	movs	r1, #4
 800198c:	4802      	ldr	r0, [pc, #8]	; (8001998 <FEB_Fan_Serial_Low+0x14>)
 800198e:	f004 ffe5 	bl	800695c <HAL_GPIO_WritePin>
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40020400 	.word	0x40020400

0800199c <FEB_Fan_Clock_High>:

void FEB_Fan_Clock_High(void) {
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80019a0:	2201      	movs	r2, #1
 80019a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019a6:	4802      	ldr	r0, [pc, #8]	; (80019b0 <FEB_Fan_Clock_High+0x14>)
 80019a8:	f004 ffd8 	bl	800695c <HAL_GPIO_WritePin>
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40020400 	.word	0x40020400

080019b4 <FEB_Fan_Clock_Low>:

void FEB_Fan_Clock_Low(void) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80019b8:	2200      	movs	r2, #0
 80019ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019be:	4802      	ldr	r0, [pc, #8]	; (80019c8 <FEB_Fan_Clock_Low+0x14>)
 80019c0:	f004 ffcc 	bl	800695c <HAL_GPIO_WritePin>
}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40020400 	.word	0x40020400

080019cc <FEB_Fan_Clock_Pulse>:

void FEB_Fan_Clock_Pulse(void) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
	FEB_Fan_Clock_High();
 80019d0:	f7ff ffe4 	bl	800199c <FEB_Fan_Clock_High>
	FEB_Timer_Delay_Micro(10);
 80019d4:	200a      	movs	r0, #10
 80019d6:	f001 f83b 	bl	8002a50 <FEB_Timer_Delay_Micro>
	FEB_Fan_Clock_Low();
 80019da:	f7ff ffeb 	bl	80019b4 <FEB_Fan_Clock_Low>
	FEB_Timer_Delay_Micro(10);
 80019de:	200a      	movs	r0, #10
 80019e0:	f001 f836 	bl	8002a50 <FEB_Timer_Delay_Micro>
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <FEB_Fan_Process>:

// ********************************** Tachometer **********************************

void FEB_Fan_Process(void) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
	for (uint8_t tach = 0; tach < 12; tach++) {
 80019ee:	2300      	movs	r3, #0
 80019f0:	71fb      	strb	r3, [r7, #7]
 80019f2:	e02a      	b.n	8001a4a <FEB_Fan_Process+0x62>
		uint8_t multiplex = tach < 6 ? 0 : 1;
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	2b05      	cmp	r3, #5
 80019f8:	bf8c      	ite	hi
 80019fa:	2301      	movhi	r3, #1
 80019fc:	2300      	movls	r3, #0
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	71bb      	strb	r3, [r7, #6]
		uint8_t tach_pin = tach < 6 ? tach : (tach - 6) << 3;
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	2b05      	cmp	r3, #5
 8001a06:	d905      	bls.n	8001a14 <FEB_Fan_Process+0x2c>
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	3b06      	subs	r3, #6
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	e000      	b.n	8001a16 <FEB_Fan_Process+0x2e>
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	717b      	strb	r3, [r7, #5]
		uint8_t fan_bank = (tach / 3) + 1;
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	4a10      	ldr	r2, [pc, #64]	; (8001a5c <FEB_Fan_Process+0x74>)
 8001a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a20:	085b      	lsrs	r3, r3, #1
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	3301      	adds	r3, #1
 8001a26:	713b      	strb	r3, [r7, #4]
		FEB_Fan_Set_Tachometer(tach_pin);
 8001a28:	797b      	ldrb	r3, [r7, #5]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 f818 	bl	8001a60 <FEB_Fan_Set_Tachometer>
		uint32_t adc_value = FEB_Fan_Read_Tachometer(multiplex);
 8001a30:	79bb      	ldrb	r3, [r7, #6]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 f836 	bl	8001aa4 <FEB_Fan_Read_Tachometer>
 8001a38:	6038      	str	r0, [r7, #0]
		FEB_Fan_Validate_Speed(adc_value, fan_bank);
 8001a3a:	793b      	ldrb	r3, [r7, #4]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	6838      	ldr	r0, [r7, #0]
 8001a40:	f000 f850 	bl	8001ae4 <FEB_Fan_Validate_Speed>
	for (uint8_t tach = 0; tach < 12; tach++) {
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	3301      	adds	r3, #1
 8001a48:	71fb      	strb	r3, [r7, #7]
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	2b0b      	cmp	r3, #11
 8001a4e:	d9d1      	bls.n	80019f4 <FEB_Fan_Process+0xc>
	}
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	aaaaaaab 	.word	0xaaaaaaab

08001a60 <FEB_Fan_Set_Tachometer>:

void FEB_Fan_Set_Tachometer(uint8_t value) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++) {
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]
 8001a6e:	e011      	b.n	8001a94 <FEB_Fan_Set_Tachometer+0x34>
		// Set multiplex
		if (((value << i) & 0b1) == 1) {
 8001a70:	79fa      	ldrb	r2, [r7, #7]
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d002      	beq.n	8001a86 <FEB_Fan_Set_Tachometer+0x26>
			FEB_Fan_Serial_High();
 8001a80:	f7ff ff74 	bl	800196c <FEB_Fan_Serial_High>
 8001a84:	e001      	b.n	8001a8a <FEB_Fan_Set_Tachometer+0x2a>
		} else {
			FEB_Fan_Serial_Low();
 8001a86:	f7ff ff7d 	bl	8001984 <FEB_Fan_Serial_Low>
		}
		FEB_Fan_Clock_Pulse();
 8001a8a:	f7ff ff9f 	bl	80019cc <FEB_Fan_Clock_Pulse>
	for (uint8_t i = 0; i < 8; i++) {
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	3301      	adds	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
 8001a96:	2b07      	cmp	r3, #7
 8001a98:	d9ea      	bls.n	8001a70 <FEB_Fan_Set_Tachometer+0x10>
	}
}
 8001a9a:	bf00      	nop
 8001a9c:	bf00      	nop
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <FEB_Fan_Read_Tachometer>:

uint32_t FEB_Fan_Read_Tachometer(uint8_t multiplex) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
	ADC_HandleTypeDef* hadc_pointer;
	if (multiplex == 0) {
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d102      	bne.n	8001aba <FEB_Fan_Read_Tachometer+0x16>
		hadc_pointer = &hadc1;
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <FEB_Fan_Read_Tachometer+0x38>)
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	e004      	b.n	8001ac4 <FEB_Fan_Read_Tachometer+0x20>
	} else if (multiplex == 1) {
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d101      	bne.n	8001ac4 <FEB_Fan_Read_Tachometer+0x20>
		hadc_pointer = &hadc2;
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <FEB_Fan_Read_Tachometer+0x3c>)
 8001ac2:	60fb      	str	r3, [r7, #12]
	}
	HAL_ADC_PollForConversion(hadc_pointer, 10);
 8001ac4:	210a      	movs	r1, #10
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f003 fc54 	bl	8005374 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(hadc_pointer);
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f003 fcdc 	bl	800548a <HAL_ADC_GetValue>
 8001ad2:	4603      	mov	r3, r0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20003280 	.word	0x20003280
 8001ae0:	200032c8 	.word	0x200032c8

08001ae4 <FEB_Fan_Validate_Speed>:

void FEB_Fan_Validate_Speed(uint32_t adc_value, uint8_t fan_bank) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	70fb      	strb	r3, [r7, #3]
	if (adc_value < FEB_FAN_ADC_VALUE_LIMIT) {
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b63      	cmp	r3, #99	; 0x63
 8001af4:	d81e      	bhi.n	8001b34 <FEB_Fan_Validate_Speed+0x50>
		switch (fan_bank) {
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	3b01      	subs	r3, #1
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d81b      	bhi.n	8001b36 <FEB_Fan_Validate_Speed+0x52>
 8001afe:	a201      	add	r2, pc, #4	; (adr r2, 8001b04 <FEB_Fan_Validate_Speed+0x20>)
 8001b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b04:	08001b15 	.word	0x08001b15
 8001b08:	08001b1d 	.word	0x08001b1d
 8001b0c:	08001b25 	.word	0x08001b25
 8001b10:	08001b2d 	.word	0x08001b2d
			case 1:
				FEB_Fan_1_Speed_Set(0);
 8001b14:	2000      	movs	r0, #0
 8001b16:	f7ff feb3 	bl	8001880 <FEB_Fan_1_Speed_Set>
				break;
 8001b1a:	e00c      	b.n	8001b36 <FEB_Fan_Validate_Speed+0x52>
			case 2:
				FEB_Fan_2_Speed_Set(0);
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	f7ff fec7 	bl	80018b0 <FEB_Fan_2_Speed_Set>
				break;
 8001b22:	e008      	b.n	8001b36 <FEB_Fan_Validate_Speed+0x52>
			case 3:
				FEB_Fan_3_Speed_Set(0);
 8001b24:	2000      	movs	r0, #0
 8001b26:	f7ff fedb 	bl	80018e0 <FEB_Fan_3_Speed_Set>
				break;
 8001b2a:	e004      	b.n	8001b36 <FEB_Fan_Validate_Speed+0x52>
			case 4:
				FEB_Fan_4_Speed_Set(0);
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f7ff feef 	bl	8001910 <FEB_Fan_4_Speed_Set>
				break;
 8001b32:	e000      	b.n	8001b36 <FEB_Fan_Validate_Speed+0x52>
		}
	}
 8001b34:	bf00      	nop
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop

08001b40 <FEB_LTC6811_Init>:
// Set accumulator
static Accumulator accumulator;

// ********************************** Functions **********************************

void FEB_LTC6811_Init(void) {
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af06      	add	r7, sp, #24
	FEB_LTC6811_Config_Cell_Discharge();
 8001b46:	f000 f83f 	bl	8001bc8 <FEB_LTC6811_Config_Cell_Discharge>

	LTC6811_init_cfg(NUM_IC, accumulator.IC_config);
 8001b4a:	4917      	ldr	r1, [pc, #92]	; (8001ba8 <FEB_LTC6811_Init+0x68>)
 8001b4c:	200a      	movs	r0, #10
 8001b4e:	f001 f85d 	bl	8002c0c <LTC6811_init_cfg>
	for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 8001b52:	2300      	movs	r3, #0
 8001b54:	71fb      	strb	r3, [r7, #7]
 8001b56:	e018      	b.n	8001b8a <FEB_LTC6811_Init+0x4a>
		LTC6811_set_cfgr(current_ic, accumulator.IC_config, REFON, ADCOPT, GPIOBITS_A, DCCBITS_A, DCTOBITS, UV, OV);
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <FEB_LTC6811_Init+0x6c>)
 8001b5a:	7819      	ldrb	r1, [r3, #0]
 8001b5c:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <FEB_LTC6811_Init+0x70>)
 8001b5e:	781c      	ldrb	r4, [r3, #0]
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <FEB_LTC6811_Init+0x74>)
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	4a14      	ldr	r2, [pc, #80]	; (8001bb8 <FEB_LTC6811_Init+0x78>)
 8001b66:	8812      	ldrh	r2, [r2, #0]
 8001b68:	79f8      	ldrb	r0, [r7, #7]
 8001b6a:	9204      	str	r2, [sp, #16]
 8001b6c:	9303      	str	r3, [sp, #12]
 8001b6e:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <FEB_LTC6811_Init+0x7c>)
 8001b70:	9302      	str	r3, [sp, #8]
 8001b72:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <FEB_LTC6811_Init+0x80>)
 8001b74:	9301      	str	r3, [sp, #4]
 8001b76:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <FEB_LTC6811_Init+0x84>)
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	4623      	mov	r3, r4
 8001b7c:	460a      	mov	r2, r1
 8001b7e:	490a      	ldr	r1, [pc, #40]	; (8001ba8 <FEB_LTC6811_Init+0x68>)
 8001b80:	f001 f853 	bl	8002c2a <LTC6811_set_cfgr>
	for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	3301      	adds	r3, #1
 8001b88:	71fb      	strb	r3, [r7, #7]
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	2b09      	cmp	r3, #9
 8001b8e:	d9e3      	bls.n	8001b58 <FEB_LTC6811_Init+0x18>
	}
	LTC6811_reset_crc_count(NUM_IC, accumulator.IC_config);
 8001b90:	4905      	ldr	r1, [pc, #20]	; (8001ba8 <FEB_LTC6811_Init+0x68>)
 8001b92:	200a      	movs	r0, #10
 8001b94:	f001 f82b 	bl	8002bee <LTC6811_reset_crc_count>
	LTC6811_init_reg_limits(NUM_IC, accumulator.IC_config);
 8001b98:	4903      	ldr	r1, [pc, #12]	; (8001ba8 <FEB_LTC6811_Init+0x68>)
 8001b9a:	200a      	movs	r0, #10
 8001b9c:	f000 ff72 	bl	8002a84 <LTC6811_init_reg_limits>
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd90      	pop	{r4, r7, pc}
 8001ba8:	200026c8 	.word	0x200026c8
 8001bac:	20000035 	.word	0x20000035
 8001bb0:	200026b8 	.word	0x200026b8
 8001bb4:	2000003e 	.word	0x2000003e
 8001bb8:	20000040 	.word	0x20000040
 8001bbc:	20000044 	.word	0x20000044
 8001bc0:	200026bc 	.word	0x200026bc
 8001bc4:	20000038 	.word	0x20000038

08001bc8 <FEB_LTC6811_Config_Cell_Discharge>:

void FEB_LTC6811_Config_Cell_Discharge(void) {
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NUM_IC; i++) {
 8001bce:	2300      	movs	r3, #0
 8001bd0:	71fb      	strb	r3, [r7, #7]
 8001bd2:	e016      	b.n	8001c02 <FEB_LTC6811_Config_Cell_Discharge+0x3a>
		for (uint8_t j = 0; j < FEB_LTC6811_NUM_CELLS_PER_DAUGHTER_BOARD; j++) {
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	71bb      	strb	r3, [r7, #6]
 8001bd8:	e00d      	b.n	8001bf6 <FEB_LTC6811_Config_Cell_Discharge+0x2e>
			FEB_LTC6811_Cell_Discharge[i][j] = 0;
 8001bda:	79fa      	ldrb	r2, [r7, #7]
 8001bdc:	79b9      	ldrb	r1, [r7, #6]
 8001bde:	480e      	ldr	r0, [pc, #56]	; (8001c18 <FEB_LTC6811_Config_Cell_Discharge+0x50>)
 8001be0:	4613      	mov	r3, r2
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	4413      	add	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4403      	add	r3, r0
 8001bea:	440b      	add	r3, r1
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < FEB_LTC6811_NUM_CELLS_PER_DAUGHTER_BOARD; j++) {
 8001bf0:	79bb      	ldrb	r3, [r7, #6]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	71bb      	strb	r3, [r7, #6]
 8001bf6:	79bb      	ldrb	r3, [r7, #6]
 8001bf8:	2b0b      	cmp	r3, #11
 8001bfa:	d9ee      	bls.n	8001bda <FEB_LTC6811_Config_Cell_Discharge+0x12>
	for (uint8_t i = 0; i < NUM_IC; i++) {
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	71fb      	strb	r3, [r7, #7]
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	2b09      	cmp	r3, #9
 8001c06:	d9e5      	bls.n	8001bd4 <FEB_LTC6811_Config_Cell_Discharge+0xc>
		}
	}
}
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20002640 	.word	0x20002640

08001c1c <FEB_LTC6811_Poll_Voltage>:

// ******************** Read Voltage ********************

void FEB_LTC6811_Poll_Voltage(void) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
	FEB_LTC6811_Start_Cell_ADC_Measurement();
 8001c20:	f000 f806 	bl	8001c30 <FEB_LTC6811_Start_Cell_ADC_Measurement>
	FEB_LTC6811_Read_Cell_Voltage_Registers();
 8001c24:	f000 f812 	bl	8001c4c <FEB_LTC6811_Read_Cell_Voltage_Registers>
	FEB_LTC6811_Store_Voltage();
 8001c28:	f000 f81e 	bl	8001c68 <FEB_LTC6811_Store_Voltage>
}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <FEB_LTC6811_Start_Cell_ADC_Measurement>:

void FEB_LTC6811_Start_Cell_ADC_Measurement(void) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 8001c34:	200a      	movs	r0, #10
 8001c36:	f001 f836 	bl	8002ca6 <wakeup_sleep>
	LTC6811_adcv(ADC_CONVERSION_MODE, ADC_DCP, CELL_CH_TO_CONVERT);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	2002      	movs	r0, #2
 8001c40:	f000 ff7c 	bl	8002b3c <LTC6811_adcv>
	LTC6811_pollAdc();
 8001c44:	f000 ffcc 	bl	8002be0 <LTC6811_pollAdc>
}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <FEB_LTC6811_Read_Cell_Voltage_Registers>:

void FEB_LTC6811_Read_Cell_Voltage_Registers(void) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 8001c50:	200a      	movs	r0, #10
 8001c52:	f001 f828 	bl	8002ca6 <wakeup_sleep>
	LTC6811_rdcv(SEL_ALL_REG, NUM_IC, accumulator.IC_config);
 8001c56:	4a03      	ldr	r2, [pc, #12]	; (8001c64 <FEB_LTC6811_Read_Cell_Voltage_Registers+0x18>)
 8001c58:	210a      	movs	r1, #10
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f000 ff93 	bl	8002b86 <LTC6811_rdcv>
}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	200026c8 	.word	0x200026c8

08001c68 <FEB_LTC6811_Store_Voltage>:

void FEB_LTC6811_Store_Voltage(void) {
 8001c68:	b5b0      	push	{r4, r5, r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
    for (uint16_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8001c6e:	2300      	movs	r3, #0
 8001c70:	80fb      	strh	r3, [r7, #6]
 8001c72:	e038      	b.n	8001ce6 <FEB_LTC6811_Store_Voltage+0x7e>
    	for (uint8_t cell = 0; cell < FEB_LTC6811_NUM_CELLS_PER_BANK; cell++) {
 8001c74:	2300      	movs	r3, #0
 8001c76:	717b      	strb	r3, [r7, #5]
 8001c78:	e02f      	b.n	8001cda <FEB_LTC6811_Store_Voltage+0x72>
    		uint8_t ic = FEB_LTC6811_Get_IC(bank_idx, cell);
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	797a      	ldrb	r2, [r7, #5]
 8001c80:	4611      	mov	r1, r2
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 f866 	bl	8001d54 <FEB_LTC6811_Get_IC>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	713b      	strb	r3, [r7, #4]
    		uint8_t cell_idx = FEB_LTC6811_Cell_Idx(cell);
 8001c8c:	797b      	ldrb	r3, [r7, #5]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 f87a 	bl	8001d88 <FEB_LTC6811_Cell_Idx>
 8001c94:	4603      	mov	r3, r0
 8001c96:	70fb      	strb	r3, [r7, #3]
    		accumulator.banks[bank_idx].cells[cell].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[ic].cells.c_codes[cell_idx]);
 8001c98:	793a      	ldrb	r2, [r7, #4]
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	4916      	ldr	r1, [pc, #88]	; (8001cf8 <FEB_LTC6811_Store_Voltage+0x90>)
 8001c9e:	2074      	movs	r0, #116	; 0x74
 8001ca0:	fb00 f202 	mul.w	r2, r0, r2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	330c      	adds	r3, #12
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	440b      	add	r3, r1
 8001cac:	88db      	ldrh	r3, [r3, #6]
 8001cae:	88fc      	ldrh	r4, [r7, #6]
 8001cb0:	797d      	ldrb	r5, [r7, #5]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 f824 	bl	8001d00 <FEB_LTC6811_Convert_Voltage>
 8001cb8:	eef0 7a40 	vmov.f32	s15, s0
 8001cbc:	4a0e      	ldr	r2, [pc, #56]	; (8001cf8 <FEB_LTC6811_Store_Voltage+0x90>)
 8001cbe:	4623      	mov	r3, r4
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	4423      	add	r3, r4
 8001cc4:	442b      	add	r3, r5
 8001cc6:	f503 7391 	add.w	r3, r3, #290	; 0x122
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4413      	add	r3, r2
 8001cce:	3304      	adds	r3, #4
 8001cd0:	edc3 7a00 	vstr	s15, [r3]
    	for (uint8_t cell = 0; cell < FEB_LTC6811_NUM_CELLS_PER_BANK; cell++) {
 8001cd4:	797b      	ldrb	r3, [r7, #5]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	717b      	strb	r3, [r7, #5]
 8001cda:	797b      	ldrb	r3, [r7, #5]
 8001cdc:	2b10      	cmp	r3, #16
 8001cde:	d9cc      	bls.n	8001c7a <FEB_LTC6811_Store_Voltage+0x12>
    for (uint16_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8001ce0:	88fb      	ldrh	r3, [r7, #6]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	80fb      	strh	r3, [r7, #6]
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	d9c3      	bls.n	8001c74 <FEB_LTC6811_Store_Voltage+0xc>
    	}
    }
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bdb0      	pop	{r4, r5, r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200026c8 	.word	0x200026c8
 8001cfc:	00000000 	.word	0x00000000

08001d00 <FEB_LTC6811_Convert_Voltage>:

/*
 * @param value := Voltage (100uV) from LTC6811
 */
float FEB_LTC6811_Convert_Voltage(uint16_t value) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	80fb      	strh	r3, [r7, #6]
	// Check for error: value = 2^16 - 1
	if (value == 65535) {
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d101      	bne.n	8001d18 <FEB_LTC6811_Convert_Voltage+0x18>
		return -42;
 8001d14:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <FEB_LTC6811_Convert_Voltage+0x50>)
 8001d16:	e00f      	b.n	8001d38 <FEB_LTC6811_Convert_Voltage+0x38>
	}
	return value * 0.0001;
 8001d18:	88fb      	ldrh	r3, [r7, #6]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fc22 	bl	8000564 <__aeabi_i2d>
 8001d20:	a309      	add	r3, pc, #36	; (adr r3, 8001d48 <FEB_LTC6811_Convert_Voltage+0x48>)
 8001d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d26:	f7fe fc87 	bl	8000638 <__aeabi_dmul>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4610      	mov	r0, r2
 8001d30:	4619      	mov	r1, r3
 8001d32:	f7fe ff79 	bl	8000c28 <__aeabi_d2f>
 8001d36:	4603      	mov	r3, r0
}
 8001d38:	ee07 3a90 	vmov	s15, r3
 8001d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	eb1c432d 	.word	0xeb1c432d
 8001d4c:	3f1a36e2 	.word	0x3f1a36e2
 8001d50:	c2280000 	.word	0xc2280000

08001d54 <FEB_LTC6811_Get_IC>:

// ******************** Voltage Cell Balance ********************

uint8_t FEB_LTC6811_Get_IC(uint8_t bank, uint8_t cell) {
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	460a      	mov	r2, r1
 8001d5e:	71fb      	strb	r3, [r7, #7]
 8001d60:	4613      	mov	r3, r2
 8001d62:	71bb      	strb	r3, [r7, #6]
	if (cell < 9) {
 8001d64:	79bb      	ldrb	r3, [r7, #6]
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d805      	bhi.n	8001d76 <FEB_LTC6811_Get_IC+0x22>
		return bank * 2 + 1;
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	3301      	adds	r3, #1
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	e002      	b.n	8001d7c <FEB_LTC6811_Get_IC+0x28>
	} else {
		return bank * 2;
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	b2db      	uxtb	r3, r3
	}
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <FEB_LTC6811_Cell_Idx>:

uint8_t FEB_LTC6811_Cell_Idx(uint8_t cell) {
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
	return FEB_LTC6811_Cell_Idx_Map[cell];
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	4a03      	ldr	r2, [pc, #12]	; (8001da4 <FEB_LTC6811_Cell_Idx+0x1c>)
 8001d96:	5cd3      	ldrb	r3, [r2, r3]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	20000024 	.word	0x20000024

08001da8 <FEB_LTC6811_Balance_Cells>:
	// Set target voltage
	FEB_LTC6811_Target_Voltage = lowest_voltage;
	FEB_LTC6811_Target_Voltage_Set = 1;
}

void FEB_LTC6811_Balance_Cells(void) {
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
	if (FEB_LTC6811_BALANCE_STATE == 0 || FEB_LTC6811_Cells_Balanced == 1 || FEB_BMS_Shutdown_State == 1) {
		return;
 8001dac:	bf00      	nop
	if (cells_balanced == 1) {
		FEB_LTC6811_Cells_Balanced = 1;
		FEB_LTC6811_Clear_Balance_Cells();
	}

}
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <FEB_LTC6811_Configure_DCCBITS_A>:

void FEB_LTC6811_Clear_Balance_Cell(uint8_t bank, uint8_t cell) {
	FEB_LTC6811_Cell_Discharge[FEB_LTC6811_Get_IC(bank, cell)][FEB_LTC6811_Cell_Idx(cell)] = 0;
}

void FEB_LTC6811_Configure_DCCBITS_A(uint8_t ic) {
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < FEB_LTC6811_NUM_CELLS_PER_DAUGHTER_BOARD; i++) {
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	73fb      	strb	r3, [r7, #15]
 8001dc6:	e014      	b.n	8001df2 <FEB_LTC6811_Configure_DCCBITS_A+0x3a>
		DCCBITS_A[i] = FEB_LTC6811_Cell_Discharge[ic][i];
 8001dc8:	79fa      	ldrb	r2, [r7, #7]
 8001dca:	7bf9      	ldrb	r1, [r7, #15]
 8001dcc:	480e      	ldr	r0, [pc, #56]	; (8001e08 <FEB_LTC6811_Configure_DCCBITS_A+0x50>)
 8001dce:	4613      	mov	r3, r2
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4413      	add	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4403      	add	r3, r0
 8001dd8:	440b      	add	r3, r1
 8001dda:	781a      	ldrb	r2, [r3, #0]
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	2a00      	cmp	r2, #0
 8001de0:	bf14      	ite	ne
 8001de2:	2201      	movne	r2, #1
 8001de4:	2200      	moveq	r2, #0
 8001de6:	b2d1      	uxtb	r1, r2
 8001de8:	4a08      	ldr	r2, [pc, #32]	; (8001e0c <FEB_LTC6811_Configure_DCCBITS_A+0x54>)
 8001dea:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < FEB_LTC6811_NUM_CELLS_PER_DAUGHTER_BOARD; i++) {
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	3301      	adds	r3, #1
 8001df0:	73fb      	strb	r3, [r7, #15]
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	2b0b      	cmp	r3, #11
 8001df6:	d9e7      	bls.n	8001dc8 <FEB_LTC6811_Configure_DCCBITS_A+0x10>
	}
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20002640 	.word	0x20002640
 8001e0c:	200026bc 	.word	0x200026bc

08001e10 <FEB_LTC6811_UART_Transmit_Discharge>:

void FEB_LTC6811_UART_Transmit_Discharge(void) {
 8001e10:	b590      	push	{r4, r7, lr}
 8001e12:	f2ad 5d0c 	subw	sp, sp, #1292	; 0x50c
 8001e16:	af00      	add	r7, sp, #0
	char UART_str[1024];
	char temp_str[256];

	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 8001e1e:	e067      	b.n	8001ef0 <FEB_LTC6811_UART_Transmit_Discharge+0xe0>
		// Add bank_idx, cell_idx to {@code UART_Str}
		sprintf(UART_str, "%d", (bank_idx << FEB_LTC6811_UART_BITS_PER_MESSAGE) + FEB_LTC6811_UART_DISCHARGE_ID);
 8001e20:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	1c9a      	adds	r2, r3, #2
 8001e28:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e2c:	4935      	ldr	r1, [pc, #212]	; (8001f04 <FEB_LTC6811_UART_Transmit_Discharge+0xf4>)
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f008 f9de 	bl	800a1f0 <siprintf>


		// Add values to {@code UART_Str}
		for (uint16_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8001e3a:	e033      	b.n	8001ea4 <FEB_LTC6811_UART_Transmit_Discharge+0x94>
			uint8_t state = FEB_LTC6811_Cell_Discharge[FEB_LTC6811_Get_IC(bank_idx, cell_idx)][FEB_LTC6811_Cell_Idx(cell_idx)];
 8001e3c:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff83 	bl	8001d54 <FEB_LTC6811_Get_IC>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	461c      	mov	r4, r3
 8001e52:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff95 	bl	8001d88 <FEB_LTC6811_Cell_Idx>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	4619      	mov	r1, r3
 8001e62:	4a29      	ldr	r2, [pc, #164]	; (8001f08 <FEB_LTC6811_UART_Transmit_Discharge+0xf8>)
 8001e64:	4623      	mov	r3, r4
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4423      	add	r3, r4
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	440b      	add	r3, r1
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	f887 3503 	strb.w	r3, [r7, #1283]	; 0x503
			sprintf(temp_str, " %d", state);
 8001e76:	f897 2503 	ldrb.w	r2, [r7, #1283]	; 0x503
 8001e7a:	463b      	mov	r3, r7
 8001e7c:	4923      	ldr	r1, [pc, #140]	; (8001f0c <FEB_LTC6811_UART_Transmit_Discharge+0xfc>)
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f008 f9b6 	bl	800a1f0 <siprintf>
			strncat(UART_str, temp_str, strlen(temp_str));
 8001e84:	463b      	mov	r3, r7
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe f9c2 	bl	8000210 <strlen>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	4639      	mov	r1, r7
 8001e90:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e94:	4618      	mov	r0, r3
 8001e96:	f008 f9cb 	bl	800a230 <strncat>
		for (uint16_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8001e9a:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8001ea4:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001ea8:	2b10      	cmp	r3, #16
 8001eaa:	d9c7      	bls.n	8001e3c <FEB_LTC6811_UART_Transmit_Discharge+0x2c>
		}

		// Add '\n' to {@code UART_Str}
		sprintf(temp_str, "\n");
 8001eac:	463b      	mov	r3, r7
 8001eae:	4918      	ldr	r1, [pc, #96]	; (8001f10 <FEB_LTC6811_UART_Transmit_Discharge+0x100>)
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f008 f99d 	bl	800a1f0 <siprintf>
		strncat(UART_str, temp_str, strlen(temp_str));
 8001eb6:	463b      	mov	r3, r7
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe f9a9 	bl	8000210 <strlen>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	4639      	mov	r1, r7
 8001ec2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f008 f9b2 	bl	800a230 <strncat>

		HAL_UART_Transmit(&huart2, (uint8_t*) UART_str, strlen(UART_str), 100);
 8001ecc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe f99d 	bl	8000210 <strlen>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8001ede:	2364      	movs	r3, #100	; 0x64
 8001ee0:	480c      	ldr	r0, [pc, #48]	; (8001f14 <FEB_LTC6811_UART_Transmit_Discharge+0x104>)
 8001ee2:	f007 f874 	bl	8008fce <HAL_UART_Transmit>
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8001ee6:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001eea:	3301      	adds	r3, #1
 8001eec:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 8001ef0:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d993      	bls.n	8001e20 <FEB_LTC6811_UART_Transmit_Discharge+0x10>
	}
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	f207 570c 	addw	r7, r7, #1292	; 0x50c
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd90      	pop	{r4, r7, pc}
 8001f04:	0800c6f0 	.word	0x0800c6f0
 8001f08:	20002640 	.word	0x20002640
 8001f0c:	0800c6f4 	.word	0x0800c6f4
 8001f10:	0800c6f8 	.word	0x0800c6f8
 8001f14:	20003490 	.word	0x20003490

08001f18 <FEB_LTC6811_Validate_Voltage>:

// ******************** Voltage Interface ********************

void FEB_LTC6811_Validate_Voltage(void) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
	if (FEB_BMS_Shutdown_State == 1) {
 8001f1e:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <FEB_LTC6811_Validate_Voltage+0x8c>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d039      	beq.n	8001f9a <FEB_LTC6811_Validate_Voltage+0x82>
		return;
	}
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8001f26:	2300      	movs	r3, #0
 8001f28:	71fb      	strb	r3, [r7, #7]
 8001f2a:	e032      	b.n	8001f92 <FEB_LTC6811_Validate_Voltage+0x7a>
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	71bb      	strb	r3, [r7, #6]
 8001f30:	e029      	b.n	8001f86 <FEB_LTC6811_Validate_Voltage+0x6e>
			float voltage = accumulator.banks[bank_idx].cells[cell_idx].voltage;
 8001f32:	79fa      	ldrb	r2, [r7, #7]
 8001f34:	79b9      	ldrb	r1, [r7, #6]
 8001f36:	481c      	ldr	r0, [pc, #112]	; (8001fa8 <FEB_LTC6811_Validate_Voltage+0x90>)
 8001f38:	4613      	mov	r3, r2
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	4413      	add	r3, r2
 8001f3e:	440b      	add	r3, r1
 8001f40:	f503 7391 	add.w	r3, r3, #290	; 0x122
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4403      	add	r3, r0
 8001f48:	3304      	adds	r3, #4
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	603b      	str	r3, [r7, #0]
			if (voltage < FEB_LTC6811_CELL_MIN_VOLTAGE) {
 8001f4e:	edd7 7a00 	vldr	s15, [r7]
 8001f52:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001f56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5e:	d503      	bpl.n	8001f68 <FEB_LTC6811_Validate_Voltage+0x50>
				FEB_BMS_Shutdown_Initiate("Module under voltage");
 8001f60:	4812      	ldr	r0, [pc, #72]	; (8001fac <FEB_LTC6811_Validate_Voltage+0x94>)
 8001f62:	f7ff f857 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
 8001f66:	e00b      	b.n	8001f80 <FEB_LTC6811_Validate_Voltage+0x68>
			} else if (voltage > FEB_LTC6811_CELL_MAX_VOLTAGE) {
 8001f68:	edd7 7a00 	vldr	s15, [r7]
 8001f6c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001f70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f78:	dd02      	ble.n	8001f80 <FEB_LTC6811_Validate_Voltage+0x68>
				FEB_BMS_Shutdown_Initiate("Module over voltage");
 8001f7a:	480d      	ldr	r0, [pc, #52]	; (8001fb0 <FEB_LTC6811_Validate_Voltage+0x98>)
 8001f7c:	f7ff f84a 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8001f80:	79bb      	ldrb	r3, [r7, #6]
 8001f82:	3301      	adds	r3, #1
 8001f84:	71bb      	strb	r3, [r7, #6]
 8001f86:	79bb      	ldrb	r3, [r7, #6]
 8001f88:	2b10      	cmp	r3, #16
 8001f8a:	d9d2      	bls.n	8001f32 <FEB_LTC6811_Validate_Voltage+0x1a>
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	71fb      	strb	r3, [r7, #7]
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d9c9      	bls.n	8001f2c <FEB_LTC6811_Validate_Voltage+0x14>
 8001f98:	e000      	b.n	8001f9c <FEB_LTC6811_Validate_Voltage+0x84>
		return;
 8001f9a:	bf00      	nop
			}
		}
	}
}
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	200025e8 	.word	0x200025e8
 8001fa8:	200026c8 	.word	0x200026c8
 8001fac:	0800c6fc 	.word	0x0800c6fc
 8001fb0:	0800c714 	.word	0x0800c714

08001fb4 <FEB_LTC6811_UART_Transmit_Voltage>:

void FEB_LTC6811_UART_Transmit_Voltage() {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	f5ad 6da1 	sub.w	sp, sp, #1288	; 0x508
 8001fba:	af00      	add	r7, sp, #0
	char UART_str[1024];
	char temp_str[256];

	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 8001fc2:	e05f      	b.n	8002084 <FEB_LTC6811_UART_Transmit_Voltage+0xd0>
		// Add bank_idx, cell_idx to {@code UART_Str}
		sprintf(UART_str, "%d", (bank_idx << FEB_LTC6811_UART_BITS_PER_MESSAGE) + FEB_LTC6811_UART_VOLTAGE_ID);
 8001fc4:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001fc8:	00da      	lsls	r2, r3, #3
 8001fca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001fce:	4932      	ldr	r1, [pc, #200]	; (8002098 <FEB_LTC6811_UART_Transmit_Voltage+0xe4>)
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f008 f90d 	bl	800a1f0 <siprintf>


		// Add values to {@code UART_Str}
		for (uint16_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8001fdc:	e02c      	b.n	8002038 <FEB_LTC6811_UART_Transmit_Voltage+0x84>
			float voltage = accumulator.banks[bank_idx].cells[cell_idx].voltage;
 8001fde:	f897 2507 	ldrb.w	r2, [r7, #1287]	; 0x507
 8001fe2:	f8b7 1504 	ldrh.w	r1, [r7, #1284]	; 0x504
 8001fe6:	482d      	ldr	r0, [pc, #180]	; (800209c <FEB_LTC6811_UART_Transmit_Voltage+0xe8>)
 8001fe8:	4613      	mov	r3, r2
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	4413      	add	r3, r2
 8001fee:	440b      	add	r3, r1
 8001ff0:	f503 7391 	add.w	r3, r3, #290	; 0x122
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4403      	add	r3, r0
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 8002000:	6013      	str	r3, [r2, #0]

			sprintf(temp_str, " %f", voltage);
 8002002:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8002006:	6818      	ldr	r0, [r3, #0]
 8002008:	f7fe fabe 	bl	8000588 <__aeabi_f2d>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4638      	mov	r0, r7
 8002012:	4923      	ldr	r1, [pc, #140]	; (80020a0 <FEB_LTC6811_UART_Transmit_Voltage+0xec>)
 8002014:	f008 f8ec 	bl	800a1f0 <siprintf>
			strncat(UART_str, temp_str, strlen(temp_str));
 8002018:	463b      	mov	r3, r7
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe f8f8 	bl	8000210 <strlen>
 8002020:	4602      	mov	r2, r0
 8002022:	4639      	mov	r1, r7
 8002024:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002028:	4618      	mov	r0, r3
 800202a:	f008 f901 	bl	800a230 <strncat>
		for (uint16_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 800202e:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8002032:	3301      	adds	r3, #1
 8002034:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8002038:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 800203c:	2b10      	cmp	r3, #16
 800203e:	d9ce      	bls.n	8001fde <FEB_LTC6811_UART_Transmit_Voltage+0x2a>
		}

		// Add '\n' to {@code UART_Str}
		sprintf(temp_str, "\n");
 8002040:	463b      	mov	r3, r7
 8002042:	4918      	ldr	r1, [pc, #96]	; (80020a4 <FEB_LTC6811_UART_Transmit_Voltage+0xf0>)
 8002044:	4618      	mov	r0, r3
 8002046:	f008 f8d3 	bl	800a1f0 <siprintf>
		strncat(UART_str, temp_str, strlen(temp_str));
 800204a:	463b      	mov	r3, r7
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe f8df 	bl	8000210 <strlen>
 8002052:	4602      	mov	r2, r0
 8002054:	4639      	mov	r1, r7
 8002056:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800205a:	4618      	mov	r0, r3
 800205c:	f008 f8e8 	bl	800a230 <strncat>

		HAL_UART_Transmit(&huart2, (uint8_t*) UART_str, strlen(UART_str), 100);
 8002060:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe f8d3 	bl	8000210 <strlen>
 800206a:	4603      	mov	r3, r0
 800206c:	b29a      	uxth	r2, r3
 800206e:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8002072:	2364      	movs	r3, #100	; 0x64
 8002074:	480c      	ldr	r0, [pc, #48]	; (80020a8 <FEB_LTC6811_UART_Transmit_Voltage+0xf4>)
 8002076:	f006 ffaa 	bl	8008fce <HAL_UART_Transmit>
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 800207a:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 800207e:	3301      	adds	r3, #1
 8002080:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 8002084:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8002088:	2b04      	cmp	r3, #4
 800208a:	d99b      	bls.n	8001fc4 <FEB_LTC6811_UART_Transmit_Voltage+0x10>
	}
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	f507 67a1 	add.w	r7, r7, #1288	; 0x508
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	0800c6f0 	.word	0x0800c6f0
 800209c:	200026c8 	.word	0x200026c8
 80020a0:	0800c728 	.word	0x0800c728
 80020a4:	0800c6f8 	.word	0x0800c6f8
 80020a8:	20003490 	.word	0x20003490

080020ac <FEB_LTC6811_Total_Bank_Voltage>:

float FEB_LTC6811_Total_Bank_Voltage(void) {
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
	float total_voltage = 0;
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	607b      	str	r3, [r7, #4]

	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 80020b8:	2300      	movs	r3, #0
 80020ba:	70fb      	strb	r3, [r7, #3]
 80020bc:	e01f      	b.n	80020fe <FEB_LTC6811_Total_Bank_Voltage+0x52>
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 80020be:	2300      	movs	r3, #0
 80020c0:	70bb      	strb	r3, [r7, #2]
 80020c2:	e016      	b.n	80020f2 <FEB_LTC6811_Total_Bank_Voltage+0x46>
			total_voltage += accumulator.banks[bank_idx].cells[cell_idx].voltage;
 80020c4:	78fa      	ldrb	r2, [r7, #3]
 80020c6:	78b9      	ldrb	r1, [r7, #2]
 80020c8:	4813      	ldr	r0, [pc, #76]	; (8002118 <FEB_LTC6811_Total_Bank_Voltage+0x6c>)
 80020ca:	4613      	mov	r3, r2
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	4413      	add	r3, r2
 80020d0:	440b      	add	r3, r1
 80020d2:	f503 7391 	add.w	r3, r3, #290	; 0x122
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4403      	add	r3, r0
 80020da:	3304      	adds	r3, #4
 80020dc:	edd3 7a00 	vldr	s15, [r3]
 80020e0:	ed97 7a01 	vldr	s14, [r7, #4]
 80020e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e8:	edc7 7a01 	vstr	s15, [r7, #4]
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 80020ec:	78bb      	ldrb	r3, [r7, #2]
 80020ee:	3301      	adds	r3, #1
 80020f0:	70bb      	strb	r3, [r7, #2]
 80020f2:	78bb      	ldrb	r3, [r7, #2]
 80020f4:	2b10      	cmp	r3, #16
 80020f6:	d9e5      	bls.n	80020c4 <FEB_LTC6811_Total_Bank_Voltage+0x18>
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	3301      	adds	r3, #1
 80020fc:	70fb      	strb	r3, [r7, #3]
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	2b04      	cmp	r3, #4
 8002102:	d9dc      	bls.n	80020be <FEB_LTC6811_Total_Bank_Voltage+0x12>
		}
	}

	return total_voltage;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	ee07 3a90 	vmov	s15, r3
}
 800210a:	eeb0 0a67 	vmov.f32	s0, s15
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	200026c8 	.word	0x200026c8

0800211c <FEB_LTC6811_Clear_Voltage>:
		}
	}
	return 0;
}

void FEB_LTC6811_Clear_Voltage(void) {
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8002122:	2300      	movs	r3, #0
 8002124:	71fb      	strb	r3, [r7, #7]
 8002126:	e01a      	b.n	800215e <FEB_LTC6811_Clear_Voltage+0x42>
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8002128:	2300      	movs	r3, #0
 800212a:	71bb      	strb	r3, [r7, #6]
 800212c:	e011      	b.n	8002152 <FEB_LTC6811_Clear_Voltage+0x36>
			accumulator.banks[bank_idx].cells[cell_idx].voltage = 0;
 800212e:	79fa      	ldrb	r2, [r7, #7]
 8002130:	79b9      	ldrb	r1, [r7, #6]
 8002132:	4810      	ldr	r0, [pc, #64]	; (8002174 <FEB_LTC6811_Clear_Voltage+0x58>)
 8002134:	4613      	mov	r3, r2
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	4413      	add	r3, r2
 800213a:	440b      	add	r3, r1
 800213c:	f503 7391 	add.w	r3, r3, #290	; 0x122
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4403      	add	r3, r0
 8002144:	3304      	adds	r3, #4
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 800214c:	79bb      	ldrb	r3, [r7, #6]
 800214e:	3301      	adds	r3, #1
 8002150:	71bb      	strb	r3, [r7, #6]
 8002152:	79bb      	ldrb	r3, [r7, #6]
 8002154:	2b10      	cmp	r3, #16
 8002156:	d9ea      	bls.n	800212e <FEB_LTC6811_Clear_Voltage+0x12>
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	3301      	adds	r3, #1
 800215c:	71fb      	strb	r3, [r7, #7]
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	2b04      	cmp	r3, #4
 8002162:	d9e1      	bls.n	8002128 <FEB_LTC6811_Clear_Voltage+0xc>
		}
	}
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	200026c8 	.word	0x200026c8

08002178 <FEB_LTC6811_Poll_Temperature>:

// ******************** Read Temperature ********************

void FEB_LTC6811_Poll_Temperature(void) {
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
	for (uint8_t channel = 0; channel <= 4; channel++) {
 800217e:	2300      	movs	r3, #0
 8002180:	71fb      	strb	r3, [r7, #7]
 8002182:	e00e      	b.n	80021a2 <FEB_LTC6811_Poll_Temperature+0x2a>
		FEB_LTC6811_Update_GPIO(channel);
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	4618      	mov	r0, r3
 8002188:	f000 f814 	bl	80021b4 <FEB_LTC6811_Update_GPIO>
		FEB_LTC6811_Start_GPIO_ADC_Measurement();
 800218c:	f000 f880 	bl	8002290 <FEB_LTC6811_Start_GPIO_ADC_Measurement>
		FEB_LTC6811_Read_Aux_Voltages();
 8002190:	f000 f88c 	bl	80022ac <FEB_LTC6811_Read_Aux_Voltages>
		FEB_LTC6811_Store_Temperature(channel);
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	4618      	mov	r0, r3
 8002198:	f000 f896 	bl	80022c8 <FEB_LTC6811_Store_Temperature>
	for (uint8_t channel = 0; channel <= 4; channel++) {
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	3301      	adds	r3, #1
 80021a0:	71fb      	strb	r3, [r7, #7]
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d9ed      	bls.n	8002184 <FEB_LTC6811_Poll_Temperature+0xc>
	}
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <FEB_LTC6811_Update_GPIO>:

void FEB_LTC6811_Update_GPIO(uint8_t channel) {
 80021b4:	b590      	push	{r4, r7, lr}
 80021b6:	b08b      	sub	sp, #44	; 0x2c
 80021b8:	af06      	add	r7, sp, #24
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
	GPIOBITS_A[0] = 0b1;					// ADC
 80021be:	4b2c      	ldr	r3, [pc, #176]	; (8002270 <FEB_LTC6811_Update_GPIO+0xbc>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	701a      	strb	r2, [r3, #0]
	GPIOBITS_A[1] = 0b1;					// ADC
 80021c4:	4b2a      	ldr	r3, [pc, #168]	; (8002270 <FEB_LTC6811_Update_GPIO+0xbc>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	705a      	strb	r2, [r3, #1]
	GPIOBITS_A[2] = (channel >> 0) & 0b1;	// MUX Select
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	bf14      	ite	ne
 80021d4:	2301      	movne	r3, #1
 80021d6:	2300      	moveq	r3, #0
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	4b25      	ldr	r3, [pc, #148]	; (8002270 <FEB_LTC6811_Update_GPIO+0xbc>)
 80021dc:	709a      	strb	r2, [r3, #2]
	GPIOBITS_A[3] = (channel >> 1) & 0b1;	// MUX Select
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	085b      	lsrs	r3, r3, #1
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	bf14      	ite	ne
 80021ec:	2301      	movne	r3, #1
 80021ee:	2300      	moveq	r3, #0
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4b1f      	ldr	r3, [pc, #124]	; (8002270 <FEB_LTC6811_Update_GPIO+0xbc>)
 80021f4:	70da      	strb	r2, [r3, #3]
	GPIOBITS_A[4] = (channel >> 2) & 0b1;	// MUX Select
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	089b      	lsrs	r3, r3, #2
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b00      	cmp	r3, #0
 8002202:	bf14      	ite	ne
 8002204:	2301      	movne	r3, #1
 8002206:	2300      	moveq	r3, #0
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4b19      	ldr	r3, [pc, #100]	; (8002270 <FEB_LTC6811_Update_GPIO+0xbc>)
 800220c:	711a      	strb	r2, [r3, #4]

    wakeup_sleep(NUM_IC);
 800220e:	200a      	movs	r0, #10
 8002210:	f000 fd49 	bl	8002ca6 <wakeup_sleep>
    for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 8002214:	2300      	movs	r3, #0
 8002216:	73fb      	strb	r3, [r7, #15]
 8002218:	e01c      	b.n	8002254 <FEB_LTC6811_Update_GPIO+0xa0>
    	FEB_LTC6811_Configure_DCCBITS_A(current_ic);
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fdcb 	bl	8001db8 <FEB_LTC6811_Configure_DCCBITS_A>
		LTC6811_set_cfgr(current_ic, accumulator.IC_config, REFON, ADCOPT, GPIOBITS_A, DCCBITS_A, DCTOBITS, UV, OV);
 8002222:	4b14      	ldr	r3, [pc, #80]	; (8002274 <FEB_LTC6811_Update_GPIO+0xc0>)
 8002224:	7819      	ldrb	r1, [r3, #0]
 8002226:	4b14      	ldr	r3, [pc, #80]	; (8002278 <FEB_LTC6811_Update_GPIO+0xc4>)
 8002228:	781c      	ldrb	r4, [r3, #0]
 800222a:	4b14      	ldr	r3, [pc, #80]	; (800227c <FEB_LTC6811_Update_GPIO+0xc8>)
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	4a14      	ldr	r2, [pc, #80]	; (8002280 <FEB_LTC6811_Update_GPIO+0xcc>)
 8002230:	8812      	ldrh	r2, [r2, #0]
 8002232:	7bf8      	ldrb	r0, [r7, #15]
 8002234:	9204      	str	r2, [sp, #16]
 8002236:	9303      	str	r3, [sp, #12]
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <FEB_LTC6811_Update_GPIO+0xd0>)
 800223a:	9302      	str	r3, [sp, #8]
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <FEB_LTC6811_Update_GPIO+0xd4>)
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <FEB_LTC6811_Update_GPIO+0xbc>)
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	4623      	mov	r3, r4
 8002246:	460a      	mov	r2, r1
 8002248:	4910      	ldr	r1, [pc, #64]	; (800228c <FEB_LTC6811_Update_GPIO+0xd8>)
 800224a:	f000 fcee 	bl	8002c2a <LTC6811_set_cfgr>
    for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 800224e:	7bfb      	ldrb	r3, [r7, #15]
 8002250:	3301      	adds	r3, #1
 8002252:	73fb      	strb	r3, [r7, #15]
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	2b09      	cmp	r3, #9
 8002258:	d9df      	bls.n	800221a <FEB_LTC6811_Update_GPIO+0x66>
    }
    wakeup_idle(NUM_IC);
 800225a:	200a      	movs	r0, #10
 800225c:	f000 fd06 	bl	8002c6c <wakeup_idle>
    LTC6811_wrcfg(NUM_IC, accumulator.IC_config);
 8002260:	490a      	ldr	r1, [pc, #40]	; (800228c <FEB_LTC6811_Update_GPIO+0xd8>)
 8002262:	200a      	movs	r0, #10
 8002264:	f000 fc5b 	bl	8002b1e <LTC6811_wrcfg>
}
 8002268:	bf00      	nop
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	bd90      	pop	{r4, r7, pc}
 8002270:	20000038 	.word	0x20000038
 8002274:	20000035 	.word	0x20000035
 8002278:	200026b8 	.word	0x200026b8
 800227c:	2000003e 	.word	0x2000003e
 8002280:	20000040 	.word	0x20000040
 8002284:	20000044 	.word	0x20000044
 8002288:	200026bc 	.word	0x200026bc
 800228c:	200026c8 	.word	0x200026c8

08002290 <FEB_LTC6811_Start_GPIO_ADC_Measurement>:

void FEB_LTC6811_Start_GPIO_ADC_Measurement(void) {
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 8002294:	200a      	movs	r0, #10
 8002296:	f000 fd06 	bl	8002ca6 <wakeup_sleep>
	LTC6811_adax(ADC_CONVERSION_MODE, AUX_CH_TO_CONVERT);
 800229a:	2100      	movs	r1, #0
 800229c:	2002      	movs	r0, #2
 800229e:	f000 fc60 	bl	8002b62 <LTC6811_adax>
	LTC6811_pollAdc();
 80022a2:	f000 fc9d 	bl	8002be0 <LTC6811_pollAdc>
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <FEB_LTC6811_Read_Aux_Voltages>:

void FEB_LTC6811_Read_Aux_Voltages(void) {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 80022b0:	200a      	movs	r0, #10
 80022b2:	f000 fcf8 	bl	8002ca6 <wakeup_sleep>
	LTC6811_rdaux(SEL_ALL_REG, NUM_IC, accumulator.IC_config);
 80022b6:	4a03      	ldr	r2, [pc, #12]	; (80022c4 <FEB_LTC6811_Read_Aux_Voltages+0x18>)
 80022b8:	210a      	movs	r1, #10
 80022ba:	2000      	movs	r0, #0
 80022bc:	f000 fc7a 	bl	8002bb4 <LTC6811_rdaux>
}
 80022c0:	bf00      	nop
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	200026c8 	.word	0x200026c8

080022c8 <FEB_LTC6811_Store_Temperature>:

void FEB_LTC6811_Store_Temperature(uint8_t channel) {
 80022c8:	b590      	push	{r4, r7, lr}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
    for (uint16_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 80022d2:	2300      	movs	r3, #0
 80022d4:	81fb      	strh	r3, [r7, #14]
 80022d6:	e1cd      	b.n	8002674 <FEB_LTC6811_Store_Temperature+0x3ac>
    	switch (channel) {
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	2b04      	cmp	r3, #4
 80022dc:	f200 81c7 	bhi.w	800266e <FEB_LTC6811_Store_Temperature+0x3a6>
 80022e0:	a201      	add	r2, pc, #4	; (adr r2, 80022e8 <FEB_LTC6811_Store_Temperature+0x20>)
 80022e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e6:	bf00      	nop
 80022e8:	080022fd 	.word	0x080022fd
 80022ec:	080023cb 	.word	0x080023cb
 80022f0:	08002499 	.word	0x08002499
 80022f4:	08002567 	.word	0x08002567
 80022f8:	08002639 	.word	0x08002639
    		case 0:
    			accumulator.banks[bank_idx].cells[12].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 80022fc:	89fb      	ldrh	r3, [r7, #14]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4acc      	ldr	r2, [pc, #816]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002302:	21e8      	movs	r1, #232	; 0xe8
 8002304:	fb01 f303 	mul.w	r3, r1, r3
 8002308:	4413      	add	r3, r2
 800230a:	3348      	adds	r3, #72	; 0x48
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	89fc      	ldrh	r4, [r7, #14]
 8002310:	4618      	mov	r0, r3
 8002312:	f000 f9bd 	bl	8002690 <FEB_LTC6811_Convert_Temperature>
 8002316:	eef0 7a40 	vmov.f32	s15, s0
 800231a:	4ac6      	ldr	r2, [pc, #792]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 800231c:	4623      	mov	r3, r4
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	4423      	add	r3, r4
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4413      	add	r3, r2
 8002326:	f503 6317 	add.w	r3, r3, #2416	; 0x970
 800232a:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[16].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 800232e:	89fb      	ldrh	r3, [r7, #14]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4ac0      	ldr	r2, [pc, #768]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002334:	21e8      	movs	r1, #232	; 0xe8
 8002336:	fb01 f303 	mul.w	r3, r1, r3
 800233a:	4413      	add	r3, r2
 800233c:	334a      	adds	r3, #74	; 0x4a
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	89fc      	ldrh	r4, [r7, #14]
 8002342:	4618      	mov	r0, r3
 8002344:	f000 f9a4 	bl	8002690 <FEB_LTC6811_Convert_Temperature>
 8002348:	eef0 7a40 	vmov.f32	s15, s0
 800234c:	4ab9      	ldr	r2, [pc, #740]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 800234e:	4623      	mov	r3, r4
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	4423      	add	r3, r4
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4413      	add	r3, r2
 8002358:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 800235c:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[4].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 8002360:	89fb      	ldrh	r3, [r7, #14]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	3301      	adds	r3, #1
 8002366:	4ab3      	ldr	r2, [pc, #716]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002368:	21e8      	movs	r1, #232	; 0xe8
 800236a:	fb01 f303 	mul.w	r3, r1, r3
 800236e:	4413      	add	r3, r2
 8002370:	3348      	adds	r3, #72	; 0x48
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	89fc      	ldrh	r4, [r7, #14]
 8002376:	4618      	mov	r0, r3
 8002378:	f000 f98a 	bl	8002690 <FEB_LTC6811_Convert_Temperature>
 800237c:	eef0 7a40 	vmov.f32	s15, s0
 8002380:	4aac      	ldr	r2, [pc, #688]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002382:	4623      	mov	r3, r4
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	4423      	add	r3, r4
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4413      	add	r3, r2
 800238c:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8002390:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[8].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 8002394:	89fb      	ldrh	r3, [r7, #14]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	3301      	adds	r3, #1
 800239a:	4aa6      	ldr	r2, [pc, #664]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 800239c:	21e8      	movs	r1, #232	; 0xe8
 800239e:	fb01 f303 	mul.w	r3, r1, r3
 80023a2:	4413      	add	r3, r2
 80023a4:	334a      	adds	r3, #74	; 0x4a
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	89fc      	ldrh	r4, [r7, #14]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f970 	bl	8002690 <FEB_LTC6811_Convert_Temperature>
 80023b0:	eef0 7a40 	vmov.f32	s15, s0
 80023b4:	4a9f      	ldr	r2, [pc, #636]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 80023b6:	4623      	mov	r3, r4
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	4423      	add	r3, r4
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4413      	add	r3, r2
 80023c0:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 80023c4:	edc3 7a00 	vstr	s15, [r3]
    			break;
 80023c8:	e151      	b.n	800266e <FEB_LTC6811_Store_Temperature+0x3a6>
    		case 1:
    			accumulator.banks[bank_idx].cells[11].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 80023ca:	89fb      	ldrh	r3, [r7, #14]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4a99      	ldr	r2, [pc, #612]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 80023d0:	21e8      	movs	r1, #232	; 0xe8
 80023d2:	fb01 f303 	mul.w	r3, r1, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	3348      	adds	r3, #72	; 0x48
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	89fc      	ldrh	r4, [r7, #14]
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 f956 	bl	8002690 <FEB_LTC6811_Convert_Temperature>
 80023e4:	eef0 7a40 	vmov.f32	s15, s0
 80023e8:	4a92      	ldr	r2, [pc, #584]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 80023ea:	4623      	mov	r3, r4
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	4423      	add	r3, r4
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4413      	add	r3, r2
 80023f4:	f603 1368 	addw	r3, r3, #2408	; 0x968
 80023f8:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[15].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 80023fc:	89fb      	ldrh	r3, [r7, #14]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4a8c      	ldr	r2, [pc, #560]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002402:	21e8      	movs	r1, #232	; 0xe8
 8002404:	fb01 f303 	mul.w	r3, r1, r3
 8002408:	4413      	add	r3, r2
 800240a:	334a      	adds	r3, #74	; 0x4a
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	89fc      	ldrh	r4, [r7, #14]
 8002410:	4618      	mov	r0, r3
 8002412:	f000 f93d 	bl	8002690 <FEB_LTC6811_Convert_Temperature>
 8002416:	eef0 7a40 	vmov.f32	s15, s0
 800241a:	4a86      	ldr	r2, [pc, #536]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 800241c:	4623      	mov	r3, r4
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	4423      	add	r3, r4
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4413      	add	r3, r2
 8002426:	f603 1388 	addw	r3, r3, #2440	; 0x988
 800242a:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[3].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 800242e:	89fb      	ldrh	r3, [r7, #14]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	3301      	adds	r3, #1
 8002434:	4a7f      	ldr	r2, [pc, #508]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002436:	21e8      	movs	r1, #232	; 0xe8
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	4413      	add	r3, r2
 800243e:	3348      	adds	r3, #72	; 0x48
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	89fc      	ldrh	r4, [r7, #14]
 8002444:	4618      	mov	r0, r3
 8002446:	f000 f923 	bl	8002690 <FEB_LTC6811_Convert_Temperature>
 800244a:	eef0 7a40 	vmov.f32	s15, s0
 800244e:	4a79      	ldr	r2, [pc, #484]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002450:	4623      	mov	r3, r4
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	4423      	add	r3, r4
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4413      	add	r3, r2
 800245a:	f603 1328 	addw	r3, r3, #2344	; 0x928
 800245e:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[7].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 8002462:	89fb      	ldrh	r3, [r7, #14]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	3301      	adds	r3, #1
 8002468:	4a72      	ldr	r2, [pc, #456]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 800246a:	21e8      	movs	r1, #232	; 0xe8
 800246c:	fb01 f303 	mul.w	r3, r1, r3
 8002470:	4413      	add	r3, r2
 8002472:	334a      	adds	r3, #74	; 0x4a
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	89fc      	ldrh	r4, [r7, #14]
 8002478:	4618      	mov	r0, r3
 800247a:	f000 f909 	bl	8002690 <FEB_LTC6811_Convert_Temperature>
 800247e:	eef0 7a40 	vmov.f32	s15, s0
 8002482:	4a6c      	ldr	r2, [pc, #432]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002484:	4623      	mov	r3, r4
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	4423      	add	r3, r4
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4413      	add	r3, r2
 800248e:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8002492:	edc3 7a00 	vstr	s15, [r3]
    			break;
 8002496:	e0ea      	b.n	800266e <FEB_LTC6811_Store_Temperature+0x3a6>
    		case 2:
    			accumulator.banks[bank_idx].cells[10].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 8002498:	89fb      	ldrh	r3, [r7, #14]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4a65      	ldr	r2, [pc, #404]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 800249e:	21e8      	movs	r1, #232	; 0xe8
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	3348      	adds	r3, #72	; 0x48
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	89fc      	ldrh	r4, [r7, #14]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 f8ef 	bl	8002690 <FEB_LTC6811_Convert_Temperature>
 80024b2:	eef0 7a40 	vmov.f32	s15, s0
 80024b6:	4a5f      	ldr	r2, [pc, #380]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 80024b8:	4623      	mov	r3, r4
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	4423      	add	r3, r4
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 80024c6:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[14].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 80024ca:	89fb      	ldrh	r3, [r7, #14]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4a59      	ldr	r2, [pc, #356]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 80024d0:	21e8      	movs	r1, #232	; 0xe8
 80024d2:	fb01 f303 	mul.w	r3, r1, r3
 80024d6:	4413      	add	r3, r2
 80024d8:	334a      	adds	r3, #74	; 0x4a
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	89fc      	ldrh	r4, [r7, #14]
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 f8d6 	bl	8002690 <FEB_LTC6811_Convert_Temperature>
 80024e4:	eef0 7a40 	vmov.f32	s15, s0
 80024e8:	4a52      	ldr	r2, [pc, #328]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 80024ea:	4623      	mov	r3, r4
 80024ec:	011b      	lsls	r3, r3, #4
 80024ee:	4423      	add	r3, r4
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 6318 	add.w	r3, r3, #2432	; 0x980
 80024f8:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[2].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 80024fc:	89fb      	ldrh	r3, [r7, #14]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	3301      	adds	r3, #1
 8002502:	4a4c      	ldr	r2, [pc, #304]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002504:	21e8      	movs	r1, #232	; 0xe8
 8002506:	fb01 f303 	mul.w	r3, r1, r3
 800250a:	4413      	add	r3, r2
 800250c:	3348      	adds	r3, #72	; 0x48
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	89fc      	ldrh	r4, [r7, #14]
 8002512:	4618      	mov	r0, r3
 8002514:	f000 f8bc 	bl	8002690 <FEB_LTC6811_Convert_Temperature>
 8002518:	eef0 7a40 	vmov.f32	s15, s0
 800251c:	4a45      	ldr	r2, [pc, #276]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 800251e:	4623      	mov	r3, r4
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	4423      	add	r3, r4
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4413      	add	r3, r2
 8002528:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 800252c:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[6].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 8002530:	89fb      	ldrh	r3, [r7, #14]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	3301      	adds	r3, #1
 8002536:	4a3f      	ldr	r2, [pc, #252]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002538:	21e8      	movs	r1, #232	; 0xe8
 800253a:	fb01 f303 	mul.w	r3, r1, r3
 800253e:	4413      	add	r3, r2
 8002540:	334a      	adds	r3, #74	; 0x4a
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	89fc      	ldrh	r4, [r7, #14]
 8002546:	4618      	mov	r0, r3
 8002548:	f000 f8a2 	bl	8002690 <FEB_LTC6811_Convert_Temperature>
 800254c:	eef0 7a40 	vmov.f32	s15, s0
 8002550:	4a38      	ldr	r2, [pc, #224]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002552:	4623      	mov	r3, r4
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	4423      	add	r3, r4
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	4413      	add	r3, r2
 800255c:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8002560:	edc3 7a00 	vstr	s15, [r3]
    			break;
 8002564:	e083      	b.n	800266e <FEB_LTC6811_Store_Temperature+0x3a6>
    		case 3:
    			accumulator.banks[bank_idx].cells[9].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 8002566:	89fb      	ldrh	r3, [r7, #14]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4a32      	ldr	r2, [pc, #200]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 800256c:	21e8      	movs	r1, #232	; 0xe8
 800256e:	fb01 f303 	mul.w	r3, r1, r3
 8002572:	4413      	add	r3, r2
 8002574:	3348      	adds	r3, #72	; 0x48
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	89fc      	ldrh	r4, [r7, #14]
 800257a:	4618      	mov	r0, r3
 800257c:	f000 f888 	bl	8002690 <FEB_LTC6811_Convert_Temperature>
 8002580:	eef0 7a40 	vmov.f32	s15, s0
 8002584:	4a2b      	ldr	r2, [pc, #172]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002586:	4623      	mov	r3, r4
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	4423      	add	r3, r4
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4413      	add	r3, r2
 8002590:	f603 1358 	addw	r3, r3, #2392	; 0x958
 8002594:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[13].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 8002598:	89fb      	ldrh	r3, [r7, #14]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4a25      	ldr	r2, [pc, #148]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 800259e:	21e8      	movs	r1, #232	; 0xe8
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	334a      	adds	r3, #74	; 0x4a
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	89fc      	ldrh	r4, [r7, #14]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 f86f 	bl	8002690 <FEB_LTC6811_Convert_Temperature>
 80025b2:	eef0 7a40 	vmov.f32	s15, s0
 80025b6:	4a1f      	ldr	r2, [pc, #124]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 80025b8:	4623      	mov	r3, r4
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	4423      	add	r3, r4
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	f603 1378 	addw	r3, r3, #2424	; 0x978
 80025c6:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[1].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 80025ca:	89fb      	ldrh	r3, [r7, #14]
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	3301      	adds	r3, #1
 80025d0:	4a18      	ldr	r2, [pc, #96]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 80025d2:	21e8      	movs	r1, #232	; 0xe8
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4413      	add	r3, r2
 80025da:	3348      	adds	r3, #72	; 0x48
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	89fc      	ldrh	r4, [r7, #14]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 f855 	bl	8002690 <FEB_LTC6811_Convert_Temperature>
 80025e6:	eef0 7a40 	vmov.f32	s15, s0
 80025ea:	4a12      	ldr	r2, [pc, #72]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 80025ec:	4623      	mov	r3, r4
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	4423      	add	r3, r4
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4413      	add	r3, r2
 80025f6:	f603 1318 	addw	r3, r3, #2328	; 0x918
 80025fa:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[5].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 80025fe:	89fb      	ldrh	r3, [r7, #14]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	3301      	adds	r3, #1
 8002604:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002606:	21e8      	movs	r1, #232	; 0xe8
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	4413      	add	r3, r2
 800260e:	334a      	adds	r3, #74	; 0x4a
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	89fc      	ldrh	r4, [r7, #14]
 8002614:	4618      	mov	r0, r3
 8002616:	f000 f83b 	bl	8002690 <FEB_LTC6811_Convert_Temperature>
 800261a:	eef0 7a40 	vmov.f32	s15, s0
 800261e:	4a05      	ldr	r2, [pc, #20]	; (8002634 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002620:	4623      	mov	r3, r4
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	4423      	add	r3, r4
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4413      	add	r3, r2
 800262a:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800262e:	edc3 7a00 	vstr	s15, [r3]
    			break;
 8002632:	e01c      	b.n	800266e <FEB_LTC6811_Store_Temperature+0x3a6>
 8002634:	200026c8 	.word	0x200026c8
    		case 4:
    			accumulator.banks[bank_idx].cells[0].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 8002638:	89fb      	ldrh	r3, [r7, #14]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	3301      	adds	r3, #1
 800263e:	4a12      	ldr	r2, [pc, #72]	; (8002688 <FEB_LTC6811_Store_Temperature+0x3c0>)
 8002640:	21e8      	movs	r1, #232	; 0xe8
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	3348      	adds	r3, #72	; 0x48
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	89fc      	ldrh	r4, [r7, #14]
 800264e:	4618      	mov	r0, r3
 8002650:	f000 f81e 	bl	8002690 <FEB_LTC6811_Convert_Temperature>
 8002654:	eef0 7a40 	vmov.f32	s15, s0
 8002658:	4a0b      	ldr	r2, [pc, #44]	; (8002688 <FEB_LTC6811_Store_Temperature+0x3c0>)
 800265a:	4623      	mov	r3, r4
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	4423      	add	r3, r4
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	4413      	add	r3, r2
 8002664:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8002668:	edc3 7a00 	vstr	s15, [r3]
    			break;
 800266c:	bf00      	nop
    for (uint16_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 800266e:	89fb      	ldrh	r3, [r7, #14]
 8002670:	3301      	adds	r3, #1
 8002672:	81fb      	strh	r3, [r7, #14]
 8002674:	89fb      	ldrh	r3, [r7, #14]
 8002676:	2b04      	cmp	r3, #4
 8002678:	f67f ae2e 	bls.w	80022d8 <FEB_LTC6811_Store_Temperature+0x10>
    	}
    }
}
 800267c:	bf00      	nop
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	bd90      	pop	{r4, r7, pc}
 8002686:	bf00      	nop
 8002688:	200026c8 	.word	0x200026c8
 800268c:	00000000 	.word	0x00000000

08002690 <FEB_LTC6811_Convert_Temperature>:

/*
 * @param value := Voltage (100uV) from LTC6811
 */
float FEB_LTC6811_Convert_Temperature(uint16_t value) {
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	80fb      	strh	r3, [r7, #6]
	// Check for error: value = 2^16 - 1
	if (value == 65535) {
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d102      	bne.n	80026aa <FEB_LTC6811_Convert_Temperature+0x1a>
		return -42;
 80026a4:	eddf 7a10 	vldr	s15, [pc, #64]	; 80026e8 <FEB_LTC6811_Convert_Temperature+0x58>
 80026a8:	e015      	b.n	80026d6 <FEB_LTC6811_Convert_Temperature+0x46>
	}
	//return value * 0.0001;
	return FEB_LTC6811_Temp_LUT_Get_Temperature(value * 0.0001);
 80026aa:	88fb      	ldrh	r3, [r7, #6]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fd ff59 	bl	8000564 <__aeabi_i2d>
 80026b2:	a30b      	add	r3, pc, #44	; (adr r3, 80026e0 <FEB_LTC6811_Convert_Temperature+0x50>)
 80026b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b8:	f7fd ffbe 	bl	8000638 <__aeabi_dmul>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4610      	mov	r0, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	f7fe fab0 	bl	8000c28 <__aeabi_d2f>
 80026c8:	4603      	mov	r3, r0
 80026ca:	ee00 3a10 	vmov	s0, r3
 80026ce:	f000 f92f 	bl	8002930 <FEB_LTC6811_Temp_LUT_Get_Temperature>
 80026d2:	eef0 7a40 	vmov.f32	s15, s0
}
 80026d6:	eeb0 0a67 	vmov.f32	s0, s15
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	eb1c432d 	.word	0xeb1c432d
 80026e4:	3f1a36e2 	.word	0x3f1a36e2
 80026e8:	c2280000 	.word	0xc2280000

080026ec <FEB_LTC6811_Validate_Temperature>:

// ******************** Temperature Interface ********************

void FEB_LTC6811_Validate_Temperature(void) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
	if (FEB_BMS_Shutdown_State == 1) {
 80026f2:	4b32      	ldr	r3, [pc, #200]	; (80027bc <FEB_LTC6811_Validate_Temperature+0xd0>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d05c      	beq.n	80027b4 <FEB_LTC6811_Validate_Temperature+0xc8>
		return;
	}
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 80026fa:	2300      	movs	r3, #0
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	e055      	b.n	80027ac <FEB_LTC6811_Validate_Temperature+0xc0>
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8002700:	2300      	movs	r3, #0
 8002702:	73bb      	strb	r3, [r7, #14]
 8002704:	e04c      	b.n	80027a0 <FEB_LTC6811_Validate_Temperature+0xb4>
			float temperature = accumulator.banks[bank_idx].cells[cell_idx].temperature;
 8002706:	7bfa      	ldrb	r2, [r7, #15]
 8002708:	7bb9      	ldrb	r1, [r7, #14]
 800270a:	482d      	ldr	r0, [pc, #180]	; (80027c0 <FEB_LTC6811_Validate_Temperature+0xd4>)
 800270c:	4613      	mov	r3, r2
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	4413      	add	r3, r2
 8002712:	440b      	add	r3, r1
 8002714:	f503 7391 	add.w	r3, r3, #290	; 0x122
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4403      	add	r3, r0
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	60bb      	str	r3, [r7, #8]
			if (fabs(temperature - -42.0f) < 0.1f || fabs(temperature  - -41.0f) < 0.1f) {
 8002720:	edd7 7a02 	vldr	s15, [r7, #8]
 8002724:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80027c4 <FEB_LTC6811_Validate_Temperature+0xd8>
 8002728:	ee77 7a87 	vadd.f32	s15, s15, s14
 800272c:	eef0 7ae7 	vabs.f32	s15, s15
 8002730:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80027c8 <FEB_LTC6811_Validate_Temperature+0xdc>
 8002734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273c:	d42c      	bmi.n	8002798 <FEB_LTC6811_Validate_Temperature+0xac>
 800273e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002742:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80027cc <FEB_LTC6811_Validate_Temperature+0xe0>
 8002746:	ee77 7a87 	vadd.f32	s15, s15, s14
 800274a:	eef0 7ae7 	vabs.f32	s15, s15
 800274e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80027c8 <FEB_LTC6811_Validate_Temperature+0xdc>
 8002752:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275a:	d41d      	bmi.n	8002798 <FEB_LTC6811_Validate_Temperature+0xac>
			  // TK: override error code, might want to disable this after fixing the segments
			  continue;
			}
			float min_temperature = FEB_LTC6811_CELL_MIN_OPERATION_TEMPERATURE;
 800275c:	4b1c      	ldr	r3, [pc, #112]	; (80027d0 <FEB_LTC6811_Validate_Temperature+0xe4>)
 800275e:	607b      	str	r3, [r7, #4]
			float max_temperature = FEB_LTC6811_CELL_MAX_OPERATION_TEMPERATURE;
 8002760:	4b1c      	ldr	r3, [pc, #112]	; (80027d4 <FEB_LTC6811_Validate_Temperature+0xe8>)
 8002762:	603b      	str	r3, [r7, #0]
			if (FEB_CAN_CHARGER_STATE == 1) {
				min_temperature = FEB_LTC6811_CELL_MIN_CHARGING_TEMPERATURE;
				max_temperature = FEB_LTC6811_CELL_MAX_CHARGING_TEMPERATURE;
			}
			if (temperature < min_temperature) {
 8002764:	ed97 7a02 	vldr	s14, [r7, #8]
 8002768:	edd7 7a01 	vldr	s15, [r7, #4]
 800276c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002774:	d503      	bpl.n	800277e <FEB_LTC6811_Validate_Temperature+0x92>
				FEB_BMS_Shutdown_Initiate("Module under temperature");
 8002776:	4818      	ldr	r0, [pc, #96]	; (80027d8 <FEB_LTC6811_Validate_Temperature+0xec>)
 8002778:	f7fe fc4c 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
 800277c:	e00d      	b.n	800279a <FEB_LTC6811_Validate_Temperature+0xae>
			} else if (temperature > max_temperature) {
 800277e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002782:	edd7 7a00 	vldr	s15, [r7]
 8002786:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800278a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800278e:	dd04      	ble.n	800279a <FEB_LTC6811_Validate_Temperature+0xae>
				FEB_BMS_Shutdown_Initiate("Module over temperature");
 8002790:	4812      	ldr	r0, [pc, #72]	; (80027dc <FEB_LTC6811_Validate_Temperature+0xf0>)
 8002792:	f7fe fc3f 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
 8002796:	e000      	b.n	800279a <FEB_LTC6811_Validate_Temperature+0xae>
			  continue;
 8002798:	bf00      	nop
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 800279a:	7bbb      	ldrb	r3, [r7, #14]
 800279c:	3301      	adds	r3, #1
 800279e:	73bb      	strb	r3, [r7, #14]
 80027a0:	7bbb      	ldrb	r3, [r7, #14]
 80027a2:	2b10      	cmp	r3, #16
 80027a4:	d9af      	bls.n	8002706 <FEB_LTC6811_Validate_Temperature+0x1a>
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
 80027a8:	3301      	adds	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d9a6      	bls.n	8002700 <FEB_LTC6811_Validate_Temperature+0x14>
 80027b2:	e000      	b.n	80027b6 <FEB_LTC6811_Validate_Temperature+0xca>
		return;
 80027b4:	bf00      	nop
			}
		}
	}
}
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	200025e8 	.word	0x200025e8
 80027c0:	200026c8 	.word	0x200026c8
 80027c4:	42280000 	.word	0x42280000
 80027c8:	3dcccccd 	.word	0x3dcccccd
 80027cc:	42240000 	.word	0x42240000
 80027d0:	c1a00000 	.word	0xc1a00000
 80027d4:	42700000 	.word	0x42700000
 80027d8:	0800c72c 	.word	0x0800c72c
 80027dc:	0800c748 	.word	0x0800c748

080027e0 <FEB_LTC6811_UART_Transmit_Temperature>:

void FEB_LTC6811_UART_Transmit_Temperature() {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	f5ad 6da1 	sub.w	sp, sp, #1288	; 0x508
 80027e6:	af00      	add	r7, sp, #0
	char UART_Str[1024];
	char temp_str[256];

	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 80027e8:	2300      	movs	r3, #0
 80027ea:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 80027ee:	e05f      	b.n	80028b0 <FEB_LTC6811_UART_Transmit_Temperature+0xd0>
		// Add bank_idx, cell_idx to {@code UART_Str}
		sprintf(UART_Str, "%d", (bank_idx << FEB_LTC6811_UART_BITS_PER_MESSAGE) + FEB_LTC6811_UART_TEMPERATURE_ID);
 80027f0:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80027fc:	4931      	ldr	r1, [pc, #196]	; (80028c4 <FEB_LTC6811_UART_Transmit_Temperature+0xe4>)
 80027fe:	4618      	mov	r0, r3
 8002800:	f007 fcf6 	bl	800a1f0 <siprintf>


		// Add values to {@code UART_Str}
		for (uint16_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8002804:	2300      	movs	r3, #0
 8002806:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 800280a:	e02b      	b.n	8002864 <FEB_LTC6811_UART_Transmit_Temperature+0x84>
			float temperature = accumulator.banks[bank_idx].cells[cell_idx].temperature;
 800280c:	f897 2507 	ldrb.w	r2, [r7, #1287]	; 0x507
 8002810:	f8b7 1504 	ldrh.w	r1, [r7, #1284]	; 0x504
 8002814:	482c      	ldr	r0, [pc, #176]	; (80028c8 <FEB_LTC6811_UART_Transmit_Temperature+0xe8>)
 8002816:	4613      	mov	r3, r2
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	4413      	add	r3, r2
 800281c:	440b      	add	r3, r1
 800281e:	f503 7391 	add.w	r3, r3, #290	; 0x122
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	4403      	add	r3, r0
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 800282c:	6013      	str	r3, [r2, #0]

			sprintf(temp_str, " %f", temperature);
 800282e:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	f7fd fea8 	bl	8000588 <__aeabi_f2d>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4638      	mov	r0, r7
 800283e:	4923      	ldr	r1, [pc, #140]	; (80028cc <FEB_LTC6811_UART_Transmit_Temperature+0xec>)
 8002840:	f007 fcd6 	bl	800a1f0 <siprintf>
			strncat(UART_Str, temp_str, strlen(temp_str));
 8002844:	463b      	mov	r3, r7
 8002846:	4618      	mov	r0, r3
 8002848:	f7fd fce2 	bl	8000210 <strlen>
 800284c:	4602      	mov	r2, r0
 800284e:	4639      	mov	r1, r7
 8002850:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002854:	4618      	mov	r0, r3
 8002856:	f007 fceb 	bl	800a230 <strncat>
		for (uint16_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 800285a:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 800285e:	3301      	adds	r3, #1
 8002860:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8002864:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8002868:	2b10      	cmp	r3, #16
 800286a:	d9cf      	bls.n	800280c <FEB_LTC6811_UART_Transmit_Temperature+0x2c>
		}

		// Add '\n' to {@code UART_Str}
		sprintf(temp_str, "\n");
 800286c:	463b      	mov	r3, r7
 800286e:	4918      	ldr	r1, [pc, #96]	; (80028d0 <FEB_LTC6811_UART_Transmit_Temperature+0xf0>)
 8002870:	4618      	mov	r0, r3
 8002872:	f007 fcbd 	bl	800a1f0 <siprintf>
		strncat(UART_Str, temp_str, strlen(temp_str));
 8002876:	463b      	mov	r3, r7
 8002878:	4618      	mov	r0, r3
 800287a:	f7fd fcc9 	bl	8000210 <strlen>
 800287e:	4602      	mov	r2, r0
 8002880:	4639      	mov	r1, r7
 8002882:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002886:	4618      	mov	r0, r3
 8002888:	f007 fcd2 	bl	800a230 <strncat>
		HAL_UART_Transmit(&huart2, (uint8_t*) UART_Str, strlen(UART_Str), 100);
 800288c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002890:	4618      	mov	r0, r3
 8002892:	f7fd fcbd 	bl	8000210 <strlen>
 8002896:	4603      	mov	r3, r0
 8002898:	b29a      	uxth	r2, r3
 800289a:	f507 7180 	add.w	r1, r7, #256	; 0x100
 800289e:	2364      	movs	r3, #100	; 0x64
 80028a0:	480c      	ldr	r0, [pc, #48]	; (80028d4 <FEB_LTC6811_UART_Transmit_Temperature+0xf4>)
 80028a2:	f006 fb94 	bl	8008fce <HAL_UART_Transmit>
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 80028a6:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 80028aa:	3301      	adds	r3, #1
 80028ac:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 80028b0:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d99b      	bls.n	80027f0 <FEB_LTC6811_UART_Transmit_Temperature+0x10>
	}
}
 80028b8:	bf00      	nop
 80028ba:	bf00      	nop
 80028bc:	f507 67a1 	add.w	r7, r7, #1288	; 0x508
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	0800c6f0 	.word	0x0800c6f0
 80028c8:	200026c8 	.word	0x200026c8
 80028cc:	0800c728 	.word	0x0800c728
 80028d0:	0800c6f8 	.word	0x0800c6f8
 80028d4:	20003490 	.word	0x20003490

080028d8 <FEB_LTC6811_Clear_Temperature>:

void FEB_LTC6811_Clear_Temperature(void) {
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 80028de:	2300      	movs	r3, #0
 80028e0:	71fb      	strb	r3, [r7, #7]
 80028e2:	e019      	b.n	8002918 <FEB_LTC6811_Clear_Temperature+0x40>
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 80028e4:	2300      	movs	r3, #0
 80028e6:	71bb      	strb	r3, [r7, #6]
 80028e8:	e010      	b.n	800290c <FEB_LTC6811_Clear_Temperature+0x34>
			accumulator.banks[bank_idx].cells[cell_idx].temperature = 0;
 80028ea:	79fa      	ldrb	r2, [r7, #7]
 80028ec:	79b9      	ldrb	r1, [r7, #6]
 80028ee:	480f      	ldr	r0, [pc, #60]	; (800292c <FEB_LTC6811_Clear_Temperature+0x54>)
 80028f0:	4613      	mov	r3, r2
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	4413      	add	r3, r2
 80028f6:	440b      	add	r3, r1
 80028f8:	f503 7391 	add.w	r3, r3, #290	; 0x122
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4403      	add	r3, r0
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8002906:	79bb      	ldrb	r3, [r7, #6]
 8002908:	3301      	adds	r3, #1
 800290a:	71bb      	strb	r3, [r7, #6]
 800290c:	79bb      	ldrb	r3, [r7, #6]
 800290e:	2b10      	cmp	r3, #16
 8002910:	d9eb      	bls.n	80028ea <FEB_LTC6811_Clear_Temperature+0x12>
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	3301      	adds	r3, #1
 8002916:	71fb      	strb	r3, [r7, #7]
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	2b04      	cmp	r3, #4
 800291c:	d9e2      	bls.n	80028e4 <FEB_LTC6811_Clear_Temperature+0xc>
		}
	}
}
 800291e:	bf00      	nop
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	200026c8 	.word	0x200026c8

08002930 <FEB_LTC6811_Temp_LUT_Get_Temperature>:

static float FEB_LTC6811_Temp_Map[][2] = {{1.3, 120.0}, {1.301, 119.5}, {1.302, 119.0}, {1.303, 118.5}, {1.304, 118.0}, {1.305, 117.5}, {1.306, 117.0}, {1.307, 116.5}, {1.308, 116.0}, {1.309, 115.5}, {1.31, 115.0}, {1.311, 114.5}, {1.312, 114.0}, {1.313, 113.5}, {1.314, 113.0}, {1.315, 112.5}, {1.316, 112.0}, {1.317, 111.5}, {1.318, 111.0}, {1.319, 110.5}, {1.32, 110.0}, {1.321, 109.5}, {1.322, 109.0}, {1.323, 108.5}, {1.324, 108.0}, {1.325, 107.5}, {1.326, 107.0}, {1.327, 106.5}, {1.328, 106.0}, {1.329, 105.5}, {1.33, 105.0}, {1.331, 104.5}, {1.332, 104.0}, {1.333, 103.5}, {1.334, 103.0}, {1.335, 102.5}, {1.336, 102.0}, {1.337, 101.5}, {1.338, 101.0}, {1.339, 100.5}, {1.34, 100.0}, {1.341, 99.5}, {1.342, 99.0}, {1.343, 98.5}, {1.344, 98.0}, {1.345, 97.5}, {1.346, 97.0}, {1.347, 96.5}, {1.348, 96.0}, {1.349, 95.5}, {1.35, 95.0}, {1.351, 94.75}, {1.352, 94.5}, {1.353, 94.25}, {1.354, 94.0}, {1.355, 93.75}, {1.356, 93.5}, {1.357, 93.25}, {1.358, 93.0}, {1.359, 92.75}, {1.36, 92.5}, {1.361, 92.25}, {1.362, 92.0}, {1.363, 91.75}, {1.364, 91.5}, {1.365, 91.25}, {1.366, 91.0}, {1.367, 90.75}, {1.368, 90.5}, {1.369, 90.25}, {1.37, 90.0}, {1.371, 89.5}, {1.372, 89.0}, {1.373, 88.5}, {1.374, 88.0}, {1.375, 87.5}, {1.376, 87.0}, {1.377, 86.5}, {1.378, 86.0}, {1.379, 85.5}, {1.38, 85.0}, {1.381, 84.75}, {1.382, 84.5}, {1.383, 84.25}, {1.384, 84.0}, {1.385, 83.75}, {1.386, 83.5}, {1.387, 83.25}, {1.388, 83.0}, {1.389, 82.75}, {1.39, 82.5}, {1.391, 82.25}, {1.392, 82.0}, {1.393, 81.75}, {1.394, 81.5}, {1.395, 81.25}, {1.396, 81.0}, {1.397, 80.75}, {1.398, 80.5}, {1.399, 80.25}, {1.4, 80.0}, {1.401, 79.8333}, {1.402, 79.6667}, {1.403, 79.5}, {1.404, 79.3333}, {1.405, 79.1667}, {1.406, 79.0}, {1.407, 78.8333}, {1.408, 78.6667}, {1.409, 78.5}, {1.41, 78.3333}, {1.411, 78.1667}, {1.412, 78.0}, {1.413, 77.8333}, {1.414, 77.6667}, {1.415, 77.5}, {1.416, 77.3333}, {1.417, 77.1667}, {1.418, 77.0}, {1.419, 76.8333}, {1.42, 76.6667}, {1.421, 76.5}, {1.422, 76.3333}, {1.423, 76.1667}, {1.424, 76.0}, {1.425, 75.8333}, {1.426, 75.6667}, {1.427, 75.5}, {1.428, 75.3333}, {1.429, 75.1667}, {1.43, 75.0}, {1.431, 74.75}, {1.432, 74.5}, {1.433, 74.25}, {1.434, 74.0}, {1.435, 73.75}, {1.436, 73.5}, {1.437, 73.25}, {1.438, 73.0}, {1.439, 72.75}, {1.44, 72.5}, {1.441, 72.25}, {1.442, 72.0}, {1.443, 71.75}, {1.444, 71.5}, {1.445, 71.25}, {1.446, 71.0}, {1.447, 70.75}, {1.448, 70.5}, {1.449, 70.25}, {1.45, 70.0}, {1.451, 69.8333}, {1.452, 69.6667}, {1.453, 69.5}, {1.454, 69.3333}, {1.455, 69.1667}, {1.456, 69.0}, {1.457, 68.8333}, {1.458, 68.6667}, {1.459, 68.5}, {1.46, 68.3333}, {1.461, 68.1667}, {1.462, 68.0}, {1.463, 67.8333}, {1.464, 67.6667}, {1.465, 67.5}, {1.466, 67.3333}, {1.467, 67.1667}, {1.468, 67.0}, {1.469, 66.8333}, {1.47, 66.6667}, {1.471, 66.5}, {1.472, 66.3333}, {1.473, 66.1667}, {1.474, 66.0}, {1.475, 65.8333}, {1.476, 65.6667}, {1.477, 65.5}, {1.478, 65.3333}, {1.479, 65.1667}, {1.48, 65.0}, {1.481, 64.8333}, {1.482, 64.6667}, {1.483, 64.5}, {1.484, 64.3333}, {1.485, 64.1667}, {1.486, 64.0}, {1.487, 63.8333}, {1.488, 63.6667}, {1.489, 63.5}, {1.49, 63.3333}, {1.491, 63.1667}, {1.492, 63.0}, {1.493, 62.8333}, {1.494, 62.6667}, {1.495, 62.5}, {1.496, 62.3333}, {1.497, 62.1667}, {1.498, 62.0}, {1.499, 61.8333}, {1.5, 61.6667}, {1.501, 61.5}, {1.502, 61.3333}, {1.503, 61.1667}, {1.504, 61.0}, {1.505, 60.8333}, {1.506, 60.6667}, {1.507, 60.5}, {1.508, 60.3333}, {1.509, 60.1667}, {1.51, 60.0}, {1.511, 59.875}, {1.512, 59.75}, {1.513, 59.625}, {1.514, 59.5}, {1.515, 59.375}, {1.516, 59.25}, {1.517, 59.125}, {1.518, 59.0}, {1.519, 58.875}, {1.52, 58.75}, {1.521, 58.625}, {1.522, 58.5}, {1.523, 58.375}, {1.524, 58.25}, {1.525, 58.125}, {1.526, 58.0}, {1.527, 57.875}, {1.528, 57.75}, {1.529, 57.625}, {1.53, 57.5}, {1.531, 57.375}, {1.532, 57.25}, {1.533, 57.125}, {1.534, 57.0}, {1.535, 56.875}, {1.536, 56.75}, {1.537, 56.625}, {1.538, 56.5}, {1.539, 56.375}, {1.54, 56.25}, {1.541, 56.125}, {1.542, 56.0}, {1.543, 55.875}, {1.544, 55.75}, {1.545, 55.625}, {1.546, 55.5}, {1.547, 55.375}, {1.548, 55.25}, {1.549, 55.125}, {1.55, 55.0}, {1.551, 54.875}, {1.552, 54.75}, {1.553, 54.625}, {1.554, 54.5}, {1.555, 54.375}, {1.556, 54.25}, {1.557, 54.125}, {1.558, 54.0}, {1.559, 53.875}, {1.56, 53.75}, {1.561, 53.625}, {1.562, 53.5}, {1.563, 53.375}, {1.564, 53.25}, {1.565, 53.125}, {1.566, 53.0}, {1.567, 52.875}, {1.568, 52.75}, {1.569, 52.625}, {1.57, 52.5}, {1.571, 52.375}, {1.572, 52.25}, {1.573, 52.125}, {1.574, 52.0}, {1.575, 51.875}, {1.576, 51.75}, {1.577, 51.625}, {1.578, 51.5}, {1.579, 51.375}, {1.58, 51.25}, {1.581, 51.125}, {1.582, 51.0}, {1.583, 50.875}, {1.584, 50.75}, {1.585, 50.625}, {1.586, 50.5}, {1.587, 50.375}, {1.588, 50.25}, {1.589, 50.125}, {1.59, 50.0}, {1.591, 49.875}, {1.592, 49.75}, {1.593, 49.625}, {1.594, 49.5}, {1.595, 49.375}, {1.596, 49.25}, {1.597, 49.125}, {1.598, 49.0}, {1.599, 48.875}, {1.6, 48.75}, {1.601, 48.625}, {1.602, 48.5}, {1.603, 48.375}, {1.604, 48.25}, {1.605, 48.125}, {1.606, 48.0}, {1.607, 47.875}, {1.608, 47.75}, {1.609, 47.625}, {1.61, 47.5}, {1.611, 47.375}, {1.612, 47.25}, {1.613, 47.125}, {1.614, 47.0}, {1.615, 46.875}, {1.616, 46.75}, {1.617, 46.625}, {1.618, 46.5}, {1.619, 46.375}, {1.62, 46.25}, {1.621, 46.125}, {1.622, 46.0}, {1.623, 45.875}, {1.624, 45.75}, {1.625, 45.625}, {1.626, 45.5}, {1.627, 45.375}, {1.628, 45.25}, {1.629, 45.125}, {1.63, 45.0}, {1.631, 44.9}, {1.632, 44.8}, {1.633, 44.7}, {1.634, 44.6}, {1.635, 44.5}, {1.636, 44.4}, {1.637, 44.3}, {1.638, 44.2}, {1.639, 44.1}, {1.64, 44.0}, {1.641, 43.9}, {1.642, 43.8}, {1.643, 43.7}, {1.644, 43.6}, {1.645, 43.5}, {1.646, 43.4}, {1.647, 43.3}, {1.648, 43.2}, {1.649, 43.1}, {1.65, 43.0}, {1.651, 42.9}, {1.652, 42.8}, {1.653, 42.7}, {1.654, 42.6}, {1.655, 42.5}, {1.656, 42.4}, {1.657, 42.3}, {1.658, 42.2}, {1.659, 42.1}, {1.66, 42.0}, {1.661, 41.9}, {1.662, 41.8}, {1.663, 41.7}, {1.664, 41.6}, {1.665, 41.5}, {1.666, 41.4}, {1.667, 41.3}, {1.668, 41.2}, {1.669, 41.1}, {1.67, 41.0}, {1.671, 40.9}, {1.672, 40.8}, {1.673, 40.7}, {1.674, 40.6}, {1.675, 40.5}, {1.676, 40.4}, {1.677, 40.3}, {1.678, 40.2}, {1.679, 40.1}, {1.68, 40.0}, {1.681, 39.9167}, {1.682, 39.8333}, {1.683, 39.75}, {1.684, 39.6667}, {1.685, 39.5833}, {1.686, 39.5}, {1.687, 39.4167}, {1.688, 39.3333}, {1.689, 39.25}, {1.69, 39.1667}, {1.691, 39.0833}, {1.692, 39.0}, {1.693, 38.9167}, {1.694, 38.8333}, {1.695, 38.75}, {1.696, 38.6667}, {1.697, 38.5833}, {1.698, 38.5}, {1.699, 38.4167}, {1.7, 38.3333}, {1.701, 38.25}, {1.702, 38.1667}, {1.703, 38.0833}, {1.704, 38.0}, {1.705, 37.9167}, {1.706, 37.8333}, {1.707, 37.75}, {1.708, 37.6667}, {1.709, 37.5833}, {1.71, 37.5}, {1.711, 37.4167}, {1.712, 37.3333}, {1.713, 37.25}, {1.714, 37.1667}, {1.715, 37.0833}, {1.716, 37.0}, {1.717, 36.9167}, {1.718, 36.8333}, {1.719, 36.75}, {1.72, 36.6667}, {1.721, 36.5833}, {1.722, 36.5}, {1.723, 36.4167}, {1.724, 36.3333}, {1.725, 36.25}, {1.726, 36.1667}, {1.727, 36.0833}, {1.728, 36.0}, {1.729, 35.9167}, {1.73, 35.8333}, {1.731, 35.75}, {1.732, 35.6667}, {1.733, 35.5833}, {1.734, 35.5}, {1.735, 35.4167}, {1.736, 35.3333}, {1.737, 35.25}, {1.738, 35.1667}, {1.739, 35.0833}, {1.74, 35.0}, {1.741, 34.9167}, {1.742, 34.8333}, {1.743, 34.75}, {1.744, 34.6667}, {1.745, 34.5833}, {1.746, 34.5}, {1.747, 34.4167}, {1.748, 34.3333}, {1.749, 34.25}, {1.75, 34.1667}, {1.751, 34.0833}, {1.752, 34.0}, {1.753, 33.9167}, {1.754, 33.8333}, {1.755, 33.75}, {1.756, 33.6667}, {1.757, 33.5833}, {1.758, 33.5}, {1.759, 33.4167}, {1.76, 33.3333}, {1.761, 33.25}, {1.762, 33.1667}, {1.763, 33.0833}, {1.764, 33.0}, {1.765, 32.9167}, {1.766, 32.8333}, {1.767, 32.75}, {1.768, 32.6667}, {1.769, 32.5833}, {1.77, 32.5}, {1.771, 32.4167}, {1.772, 32.3333}, {1.773, 32.25}, {1.774, 32.1667}, {1.775, 32.0833}, {1.776, 32.0}, {1.777, 31.9167}, {1.778, 31.8333}, {1.779, 31.75}, {1.78, 31.6667}, {1.781, 31.5833}, {1.782, 31.5}, {1.783, 31.4167}, {1.784, 31.3333}, {1.785, 31.25}, {1.786, 31.1667}, {1.787, 31.0833}, {1.788, 31.0}, {1.789, 30.9167}, {1.79, 30.8333}, {1.791, 30.75}, {1.792, 30.6667}, {1.793, 30.5833}, {1.794, 30.5}, {1.795, 30.4167}, {1.796, 30.3333}, {1.797, 30.25}, {1.798, 30.1667}, {1.799, 30.0833}, {1.8, 30.0}, {1.801, 29.9167}, {1.802, 29.8333}, {1.803, 29.75}, {1.804, 29.6667}, {1.805, 29.5833}, {1.806, 29.5}, {1.807, 29.4167}, {1.808, 29.3333}, {1.809, 29.25}, {1.81, 29.1667}, {1.811, 29.0833}, {1.812, 29.0}, {1.813, 28.9167}, {1.814, 28.8333}, {1.815, 28.75}, {1.816, 28.6667}, {1.817, 28.5833}, {1.818, 28.5}, {1.819, 28.4167}, {1.82, 28.3333}, {1.821, 28.25}, {1.822, 28.1667}, {1.823, 28.0833}, {1.824, 28.0}, {1.825, 27.9167}, {1.826, 27.8333}, {1.827, 27.75}, {1.828, 27.6667}, {1.829, 27.5833}, {1.83, 27.5}, {1.831, 27.4167}, {1.832, 27.3333}, {1.833, 27.25}, {1.834, 27.1667}, {1.835, 27.0833}, {1.836, 27.0}, {1.837, 26.9167}, {1.838, 26.8333}, {1.839, 26.75}, {1.84, 26.6667}, {1.841, 26.5833}, {1.842, 26.5}, {1.843, 26.4167}, {1.844, 26.3333}, {1.845, 26.25}, {1.846, 26.1667}, {1.847, 26.0833}, {1.848, 26.0}, {1.849, 25.9167}, {1.85, 25.8333}, {1.851, 25.75}, {1.852, 25.6667}, {1.853, 25.5833}, {1.854, 25.5}, {1.855, 25.4167}, {1.856, 25.3333}, {1.857, 25.25}, {1.858, 25.1667}, {1.859, 25.0833}, {1.86, 25.0}, {1.861, 24.9167}, {1.862, 24.8333}, {1.863, 24.75}, {1.864, 24.6667}, {1.865, 24.5833}, {1.866, 24.5}, {1.867, 24.4167}, {1.868, 24.3333}, {1.869, 24.25}, {1.87, 24.1667}, {1.871, 24.0833}, {1.872, 24.0}, {1.873, 23.9167}, {1.874, 23.8333}, {1.875, 23.75}, {1.876, 23.6667}, {1.877, 23.5833}, {1.878, 23.5}, {1.879, 23.4167}, {1.88, 23.3333}, {1.881, 23.25}, {1.882, 23.1667}, {1.883, 23.0833}, {1.884, 23.0}, {1.885, 22.9167}, {1.886, 22.8333}, {1.887, 22.75}, {1.888, 22.6667}, {1.889, 22.5833}, {1.89, 22.5}, {1.891, 22.4167}, {1.892, 22.3333}, {1.893, 22.25}, {1.894, 22.1667}, {1.895, 22.0833}, {1.896, 22.0}, {1.897, 21.9167}, {1.898, 21.8333}, {1.899, 21.75}, {1.9, 21.6667}, {1.901, 21.5833}, {1.902, 21.5}, {1.903, 21.4167}, {1.904, 21.3333}, {1.905, 21.25}, {1.906, 21.1667}, {1.907, 21.0833}, {1.908, 21.0}, {1.909, 20.9167}, {1.91, 20.8333}, {1.911, 20.75}, {1.912, 20.6667}, {1.913, 20.5833}, {1.914, 20.5}, {1.915, 20.4167}, {1.916, 20.3333}, {1.917, 20.25}, {1.918, 20.1667}, {1.919, 20.0833}, {1.92, 20.0}, {1.921, 19.9286}, {1.922, 19.8571}, {1.923, 19.7857}, {1.924, 19.7143}, {1.925, 19.6429}, {1.926, 19.5714}, {1.927, 19.5}, {1.928, 19.4286}, {1.929, 19.3571}, {1.93, 19.2857}, {1.931, 19.2143}, {1.932, 19.1429}, {1.933, 19.0714}, {1.934, 19.0}, {1.935, 18.9286}, {1.936, 18.8571}, {1.937, 18.7857}, {1.938, 18.7143}, {1.939, 18.6429}, {1.94, 18.5714}, {1.941, 18.5}, {1.942, 18.4286}, {1.943, 18.3571}, {1.944, 18.2857}, {1.945, 18.2143}, {1.946, 18.1429}, {1.947, 18.0714}, {1.948, 18.0}, {1.949, 17.9286}, {1.95, 17.8571}, {1.951, 17.7857}, {1.952, 17.7143}, {1.953, 17.6429}, {1.954, 17.5714}, {1.955, 17.5}, {1.956, 17.4286}, {1.957, 17.3571}, {1.958, 17.2857}, {1.959, 17.2143}, {1.96, 17.1429}, {1.961, 17.0714}, {1.962, 17.0}, {1.963, 16.9286}, {1.964, 16.8571}, {1.965, 16.7857}, {1.966, 16.7143}, {1.967, 16.6429}, {1.968, 16.5714}, {1.969, 16.5}, {1.97, 16.4286}, {1.971, 16.3571}, {1.972, 16.2857}, {1.973, 16.2143}, {1.974, 16.1429}, {1.975, 16.0714}, {1.976, 16.0}, {1.977, 15.9286}, {1.978, 15.8571}, {1.979, 15.7857}, {1.98, 15.7143}, {1.981, 15.6429}, {1.982, 15.5714}, {1.983, 15.5}, {1.984, 15.4286}, {1.985, 15.3571}, {1.986, 15.2857}, {1.987, 15.2143}, {1.988, 15.1429}, {1.989, 15.0714}, {1.99, 15.0}, {1.991, 14.9167}, {1.992, 14.8333}, {1.993, 14.75}, {1.994, 14.6667}, {1.995, 14.5833}, {1.996, 14.5}, {1.997, 14.4167}, {1.998, 14.3333}, {1.999, 14.25}, {2.0, 14.1667}, {2.001, 14.0833}, {2.002, 14.0}, {2.003, 13.9167}, {2.004, 13.8333}, {2.005, 13.75}, {2.006, 13.6667}, {2.007, 13.5833}, {2.008, 13.5}, {2.009, 13.4167}, {2.01, 13.3333}, {2.011, 13.25}, {2.012, 13.1667}, {2.013, 13.0833}, {2.014, 13.0}, {2.015, 12.9167}, {2.016, 12.8333}, {2.017, 12.75}, {2.018, 12.6667}, {2.019, 12.5833}, {2.02, 12.5}, {2.021, 12.4167}, {2.022, 12.3333}, {2.023, 12.25}, {2.024, 12.1667}, {2.025, 12.0833}, {2.026, 12.0}, {2.027, 11.9167}, {2.028, 11.8333}, {2.029, 11.75}, {2.03, 11.6667}, {2.031, 11.5833}, {2.032, 11.5}, {2.033, 11.4167}, {2.034, 11.3333}, {2.035, 11.25}, {2.036, 11.1667}, {2.037, 11.0833}, {2.038, 11.0}, {2.039, 10.9167}, {2.04, 10.8333}, {2.041, 10.75}, {2.042, 10.6667}, {2.043, 10.5833}, {2.044, 10.5}, {2.045, 10.4167}, {2.046, 10.3333}, {2.047, 10.25}, {2.048, 10.1667}, {2.049, 10.0833}, {2.05, 10.0}, {2.051, 9.9167}, {2.052, 9.8333}, {2.053, 9.75}, {2.054, 9.6667}, {2.055, 9.5833}, {2.056, 9.5}, {2.057, 9.4167}, {2.058, 9.3333}, {2.059, 9.25}, {2.06, 9.1667}, {2.061, 9.0833}, {2.062, 9.0}, {2.063, 8.9167}, {2.064, 8.8333}, {2.065, 8.75}, {2.066, 8.6667}, {2.067, 8.5833}, {2.068, 8.5}, {2.069, 8.4167}, {2.07, 8.3333}, {2.071, 8.25}, {2.072, 8.1667}, {2.073, 8.0833}, {2.074, 8.0}, {2.075, 7.9167}, {2.076, 7.8333}, {2.077, 7.75}, {2.078, 7.6667}, {2.079, 7.5833}, {2.08, 7.5}, {2.081, 7.4167}, {2.082, 7.3333}, {2.083, 7.25}, {2.084, 7.1667}, {2.085, 7.0833}, {2.086, 7.0}, {2.087, 6.9167}, {2.088, 6.8333}, {2.089, 6.75}, {2.09, 6.6667}, {2.091, 6.5833}, {2.092, 6.5}, {2.093, 6.4167}, {2.094, 6.3333}, {2.095, 6.25}, {2.096, 6.1667}, {2.097, 6.0833}, {2.098, 6.0}, {2.099, 5.9167}, {2.1, 5.8333}, {2.101, 5.75}, {2.102, 5.6667}, {2.103, 5.5833}, {2.104, 5.5}, {2.105, 5.4167}, {2.106, 5.3333}, {2.107, 5.25}, {2.108, 5.1667}, {2.109, 5.0833}, {2.11, 5.0}, {2.111, 4.9167}, {2.112, 4.8333}, {2.113, 4.75}, {2.114, 4.6667}, {2.115, 4.5833}, {2.116, 4.5}, {2.117, 4.4167}, {2.118, 4.3333}, {2.119, 4.25}, {2.12, 4.1667}, {2.121, 4.0833}, {2.122, 4.0}, {2.123, 3.9167}, {2.124, 3.8333}, {2.125, 3.75}, {2.126, 3.6667}, {2.127, 3.5833}, {2.128, 3.5}, {2.129, 3.4167}, {2.13, 3.3333}, {2.131, 3.25}, {2.132, 3.1667}, {2.133, 3.0833}, {2.134, 3.0}, {2.135, 2.9167}, {2.136, 2.8333}, {2.137, 2.75}, {2.138, 2.6667}, {2.139, 2.5833}, {2.14, 2.5}, {2.141, 2.4167}, {2.142, 2.3333}, {2.143, 2.25}, {2.144, 2.1667}, {2.145, 2.0833}, {2.146, 2.0}, {2.147, 1.9167}, {2.148, 1.8333}, {2.149, 1.75}, {2.15, 1.6667}, {2.151, 1.5833}, {2.152, 1.5}, {2.153, 1.4167}, {2.154, 1.3333}, {2.155, 1.25}, {2.156, 1.1667}, {2.157, 1.0833}, {2.158, 1.0}, {2.159, 0.9167}, {2.16, 0.8333}, {2.161, 0.75}, {2.162, 0.6667}, {2.163, 0.5833}, {2.164, 0.5}, {2.165, 0.4167}, {2.166, 0.3333}, {2.167, 0.25}, {2.168, 0.1667}, {2.169, 0.0833}, {2.17, 0.0}, {2.171, -0.0833}, {2.172, -0.1667}, {2.173, -0.25}, {2.174, -0.3333}, {2.175, -0.4167}, {2.176, -0.5}, {2.177, -0.5833}, {2.178, -0.6667}, {2.179, -0.75}, {2.18, -0.8333}, {2.181, -0.9167}, {2.182, -1.0}, {2.183, -1.0833}, {2.184, -1.1667}, {2.185, -1.25}, {2.186, -1.3333}, {2.187, -1.4167}, {2.188, -1.5}, {2.189, -1.5833}, {2.19, -1.6667}, {2.191, -1.75}, {2.192, -1.8333}, {2.193, -1.9167}, {2.194, -2.0}, {2.195, -2.0833}, {2.196, -2.1667}, {2.197, -2.25}, {2.198, -2.3333}, {2.199, -2.4167}, {2.2, -2.5}, {2.201, -2.5833}, {2.202, -2.6667}, {2.203, -2.75}, {2.204, -2.8333}, {2.205, -2.9167}, {2.206, -3.0}, {2.207, -3.0833}, {2.208, -3.1667}, {2.209, -3.25}, {2.21, -3.3333}, {2.211, -3.4167}, {2.212, -3.5}, {2.213, -3.5833}, {2.214, -3.6667}, {2.215, -3.75}, {2.216, -3.8333}, {2.217, -3.9167}, {2.218, -4.0}, {2.219, -4.0833}, {2.22, -4.1667}, {2.221, -4.25}, {2.222, -4.3333}, {2.223, -4.4167}, {2.224, -4.5}, {2.225, -4.5833}, {2.226, -4.6667}, {2.227, -4.75}, {2.228, -4.8333}, {2.229, -4.9167}, {2.23, -5.0}, {2.231, -5.125}, {2.232, -5.25}, {2.233, -5.375}, {2.234, -5.5}, {2.235, -5.625}, {2.236, -5.75}, {2.237, -5.875}, {2.238, -6.0}, {2.239, -6.125}, {2.24, -6.25}, {2.241, -6.375}, {2.242, -6.5}, {2.243, -6.625}, {2.244, -6.75}, {2.245, -6.875}, {2.246, -7.0}, {2.247, -7.125}, {2.248, -7.25}, {2.249, -7.375}, {2.25, -7.5}, {2.251, -7.625}, {2.252, -7.75}, {2.253, -7.875}, {2.254, -8.0}, {2.255, -8.125}, {2.256, -8.25}, {2.257, -8.375}, {2.258, -8.5}, {2.259, -8.625}, {2.26, -8.75}, {2.261, -8.875}, {2.262, -9.0}, {2.263, -9.125}, {2.264, -9.25}, {2.265, -9.375}, {2.266, -9.5}, {2.267, -9.625}, {2.268, -9.75}, {2.269, -9.875}, {2.27, -10.0}, {2.271, -10.1}, {2.272, -10.2}, {2.273, -10.3}, {2.274, -10.4}, {2.275, -10.5}, {2.276, -10.6}, {2.277, -10.7}, {2.278, -10.8}, {2.279, -10.9}, {2.28, -11.0}, {2.281, -11.1}, {2.282, -11.2}, {2.283, -11.3}, {2.284, -11.4}, {2.285, -11.5}, {2.286, -11.6}, {2.287, -11.7}, {2.288, -11.8}, {2.289, -11.9}, {2.29, -12.0}, {2.291, -12.1}, {2.292, -12.2}, {2.293, -12.3}, {2.294, -12.4}, {2.295, -12.5}, {2.296, -12.6}, {2.297, -12.7}, {2.298, -12.8}, {2.299, -12.9}, {2.3, -13.0}, {2.301, -13.1}, {2.302, -13.2}, {2.303, -13.3}, {2.304, -13.4}, {2.305, -13.5}, {2.306, -13.6}, {2.307, -13.7}, {2.308, -13.8}, {2.309, -13.9}, {2.31, -14.0}, {2.311, -14.1}, {2.312, -14.2}, {2.313, -14.3}, {2.314, -14.4}, {2.315, -14.5}, {2.316, -14.6}, {2.317, -14.7}, {2.318, -14.8}, {2.319, -14.9}, {2.32, -15.0}, {2.321, -15.1667}, {2.322, -15.3333}, {2.323, -15.5}, {2.324, -15.6667}, {2.325, -15.8333}, {2.326, -16.0}, {2.327, -16.1667}, {2.328, -16.3333}, {2.329, -16.5}, {2.33, -16.6667}, {2.331, -16.8333}, {2.332, -17.0}, {2.333, -17.1667}, {2.334, -17.3333}, {2.335, -17.5}, {2.336, -17.6667}, {2.337, -17.8333}, {2.338, -18.0}, {2.339, -18.1667}, {2.34, -18.3333}, {2.341, -18.5}, {2.342, -18.6667}, {2.343, -18.8333}, {2.344, -19.0}, {2.345, -19.1667}, {2.346, -19.3333}, {2.347, -19.5}, {2.348, -19.6667}, {2.349, -19.8333}, {2.35, -20.0}, {2.351, -20.1667}, {2.352, -20.3333}, {2.353, -20.5}, {2.354, -20.6667}, {2.355, -20.8333}, {2.356, -21.0}, {2.357, -21.1667}, {2.358, -21.3333}, {2.359, -21.5}, {2.36, -21.6667}, {2.361, -21.8333}, {2.362, -22.0}, {2.363, -22.1667}, {2.364, -22.3333}, {2.365, -22.5}, {2.366, -22.6667}, {2.367, -22.8333}, {2.368, -23.0}, {2.369, -23.1667}, {2.37, -23.3333}, {2.371, -23.5}, {2.372, -23.6667}, {2.373, -23.8333}, {2.374, -24.0}, {2.375, -24.1667}, {2.376, -24.3333}, {2.377, -24.5}, {2.378, -24.6667}, {2.379, -24.8333}, {2.38, -25.0}, {2.381, -25.25}, {2.382, -25.5}, {2.383, -25.75}, {2.384, -26.0}, {2.385, -26.25}, {2.386, -26.5}, {2.387, -26.75}, {2.388, -27.0}, {2.389, -27.25}, {2.39, -27.5}, {2.391, -27.75}, {2.392, -28.0}, {2.393, -28.25}, {2.394, -28.5}, {2.395, -28.75}, {2.396, -29.0}, {2.397, -29.25}, {2.398, -29.5}, {2.399, -29.75}, {2.4, -30.0}, {2.401, -30.25}, {2.402, -30.5}, {2.403, -30.75}, {2.404, -31.0}, {2.405, -31.25}, {2.406, -31.5}, {2.407, -31.75}, {2.408, -32.0}, {2.409, -32.25}, {2.41, -32.5}, {2.411, -32.75}, {2.412, -33.0}, {2.413, -33.25}, {2.414, -33.5}, {2.415, -33.75}, {2.416, -34.0}, {2.417, -34.25}, {2.418, -34.5}, {2.419, -34.75}, {2.42, -35.0}, {2.421, -35.25}, {2.422, -35.5}, {2.423, -35.75}, {2.424, -36.0}, {2.425, -36.25}, {2.426, -36.5}, {2.427, -36.75}, {2.428, -37.0}, {2.429, -37.25}, {2.43, -37.5}, {2.431, -37.75}, {2.432, -38.0}, {2.433, -38.25}, {2.434, -38.5}, {2.435, -38.75}, {2.436, -39.0}, {2.437, -39.25}, {2.438, -39.5}, {2.439, -39.75}, {2.44, -40.0}};

// ********************************** Functions **********************************

float FEB_LTC6811_Temp_LUT_Get_Temperature(float voltage) {
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	ed87 0a01 	vstr	s0, [r7, #4]
	if (voltage < FEB_LTC6811_TEMP_LUT_MIN_MAP_VOLT || voltage > FEB_LTC6811_TEMP_LUT_MAX_MAP_VOLT) {
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fd fe24 	bl	8000588 <__aeabi_f2d>
 8002940:	a323      	add	r3, pc, #140	; (adr r3, 80029d0 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xa0>)
 8002942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002946:	f7fe f8e9 	bl	8000b1c <__aeabi_dcmplt>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10a      	bne.n	8002966 <FEB_LTC6811_Temp_LUT_Get_Temperature+0x36>
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7fd fe19 	bl	8000588 <__aeabi_f2d>
 8002956:	a324      	add	r3, pc, #144	; (adr r3, 80029e8 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xb8>)
 8002958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295c:	f7fe f8fc 	bl	8000b58 <__aeabi_dcmpgt>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <FEB_LTC6811_Temp_LUT_Get_Temperature+0x3a>
		return -41.0;
 8002966:	4b1e      	ldr	r3, [pc, #120]	; (80029e0 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xb0>)
 8002968:	e028      	b.n	80029bc <FEB_LTC6811_Temp_LUT_Get_Temperature+0x8c>
	}
	uint16_t index = (uint16_t) round((voltage - FEB_LTC6811_TEMP_LUT_MIN_MAP_VOLT) / FEB_LTC6811_TEMP_LUT_RESOLUTION);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7fd fe0c 	bl	8000588 <__aeabi_f2d>
 8002970:	a317      	add	r3, pc, #92	; (adr r3, 80029d0 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xa0>)
 8002972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002976:	f7fd fca7 	bl	80002c8 <__aeabi_dsub>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4610      	mov	r0, r2
 8002980:	4619      	mov	r1, r3
 8002982:	a315      	add	r3, pc, #84	; (adr r3, 80029d8 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xa8>)
 8002984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002988:	f7fd ff80 	bl	800088c <__aeabi_ddiv>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	ec43 2b17 	vmov	d7, r2, r3
 8002994:	eeb0 0a47 	vmov.f32	s0, s14
 8002998:	eef0 0a67 	vmov.f32	s1, s15
 800299c:	f009 fdbc 	bl	800c518 <round>
 80029a0:	ec53 2b10 	vmov	r2, r3, d0
 80029a4:	4610      	mov	r0, r2
 80029a6:	4619      	mov	r1, r3
 80029a8:	f7fe f91e 	bl	8000be8 <__aeabi_d2uiz>
 80029ac:	4603      	mov	r3, r0
 80029ae:	81fb      	strh	r3, [r7, #14]
	return FEB_LTC6811_Temp_Map[index][1];
 80029b0:	89fb      	ldrh	r3, [r7, #14]
 80029b2:	4a0c      	ldr	r2, [pc, #48]	; (80029e4 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xb4>)
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4413      	add	r3, r2
 80029b8:	3304      	adds	r3, #4
 80029ba:	681b      	ldr	r3, [r3, #0]
}
 80029bc:	ee07 3a90 	vmov	s15, r3
 80029c0:	eeb0 0a67 	vmov.f32	s0, s15
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	f3af 8000 	nop.w
 80029d0:	cccccccd 	.word	0xcccccccd
 80029d4:	3ff4cccc 	.word	0x3ff4cccc
 80029d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80029dc:	3f50624d 	.word	0x3f50624d
 80029e0:	c2240000 	.word	0xc2240000
 80029e4:	20000048 	.word	0x20000048
 80029e8:	b851eb85 	.word	0xb851eb85
 80029ec:	4003851e 	.word	0x4003851e

080029f0 <FEB_Math_Uint32_To_Signed_Long>:

#include "FEB_Math.h"

// ********************************** Functions **********************************

long FEB_Math_Uint32_To_Signed_Long(uint32_t value) {
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
	return (value & 0x7FFFFFFF) - (value & (0b1 << 31));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80029fe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <FEB_Math_Uint16_To_Int16>:

int16_t FEB_Math_Uint16_To_Int16(uint16_t value) {
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	4603      	mov	r3, r0
 8002a16:	80fb      	strh	r3, [r7, #6]
	return (value & 0x7FFF) - (value & (0b1 << 15));
 8002a18:	88fb      	ldrh	r3, [r7, #6]
 8002a1a:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 8002a1e:	f483 037f 	eor.w	r3, r3, #16711680	; 0xff0000
 8002a22:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	b21b      	sxth	r3, r3
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <FEB_Timer_Init>:

extern TIM_HandleTypeDef htim4;

// ********************************** Initialize **********************************

void FEB_Timer_Init(void) {
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim4);
 8002a40:	4802      	ldr	r0, [pc, #8]	; (8002a4c <FEB_Timer_Init+0x10>)
 8002a42:	f005 fb85 	bl	8008150 <HAL_TIM_Base_Start>
}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20003448 	.word	0x20003448

08002a50 <FEB_Timer_Delay_Micro>:

// ********************************** Functions **********************************

void FEB_Timer_Delay_Micro(uint16_t delay) {
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <FEB_Timer_Delay_Micro+0x30>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 8002a62:	bf00      	nop
 8002a64:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <FEB_Timer_Delay_Micro+0x30>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a6a:	88fb      	ldrh	r3, [r7, #6]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d3f9      	bcc.n	8002a64 <FEB_Timer_Delay_Micro+0x14>
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20003448 	.word	0x20003448

08002a84 <LTC6811_init_reg_limits>:

/* Initialize the Register limits */
void LTC6811_init_reg_limits(uint8_t total_ic, //The number of ICs in the system
							cell_asic *ic  //A two dimensional array where data will be written
							)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	6039      	str	r1, [r7, #0]
 8002a8e:	71fb      	strb	r3, [r7, #7]
  for (uint8_t cic=0; cic<total_ic; cic++)
 8002a90:	2300      	movs	r3, #0
 8002a92:	73fb      	strb	r3, [r7, #15]
 8002a94:	e038      	b.n	8002b08 <LTC6811_init_reg_limits+0x84>
  {
    ic[cic].ic_reg.cell_channels=12;
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	22e8      	movs	r2, #232	; 0xe8
 8002a9a:	fb02 f303 	mul.w	r3, r2, r3
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	220c      	movs	r2, #12
 8002aa4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    ic[cic].ic_reg.stat_channels=4;
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	22e8      	movs	r2, #232	; 0xe8
 8002aac:	fb02 f303 	mul.w	r3, r2, r3
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	2204      	movs	r2, #4
 8002ab6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    ic[cic].ic_reg.aux_channels=6;
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	22e8      	movs	r2, #232	; 0xe8
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	2206      	movs	r2, #6
 8002ac8:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
    ic[cic].ic_reg.num_cv_reg=4;
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	22e8      	movs	r2, #232	; 0xe8
 8002ad0:	fb02 f303 	mul.w	r3, r2, r3
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	2204      	movs	r2, #4
 8002ada:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
    ic[cic].ic_reg.num_gpio_reg=2;
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
 8002ae0:	22e8      	movs	r2, #232	; 0xe8
 8002ae2:	fb02 f303 	mul.w	r3, r2, r3
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	4413      	add	r3, r2
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    ic[cic].ic_reg.num_stat_reg=3;
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	22e8      	movs	r2, #232	; 0xe8
 8002af4:	fb02 f303 	mul.w	r3, r2, r3
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	4413      	add	r3, r2
 8002afc:	2203      	movs	r2, #3
 8002afe:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
  for (uint8_t cic=0; cic<total_ic; cic++)
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
 8002b04:	3301      	adds	r3, #1
 8002b06:	73fb      	strb	r3, [r7, #15]
 8002b08:	7bfa      	ldrb	r2, [r7, #15]
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d3c2      	bcc.n	8002a96 <LTC6811_init_reg_limits+0x12>
  }
}
 8002b10:	bf00      	nop
 8002b12:	bf00      	nop
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <LTC6811_wrcfg>:
order so the last device's configuration is written first.
*/
void LTC6811_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic *ic //A two dimensional array of the configuration data that will be written
                  )
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	4603      	mov	r3, r0
 8002b26:	6039      	str	r1, [r7, #0]
 8002b28:	71fb      	strb	r3, [r7, #7]
  LTC681x_wrcfg(total_ic,ic);
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	6839      	ldr	r1, [r7, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 f9c4 	bl	8002ebc <LTC681x_wrcfg>
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <LTC6811_adcv>:
/* Starts cell voltage conversion */
void LTC6811_adcv(uint8_t MD, //ADC Mode
				  uint8_t DCP, //Discharge Permit
				  uint8_t CH //Cell Channels to be measured
				  )
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	71fb      	strb	r3, [r7, #7]
 8002b46:	460b      	mov	r3, r1
 8002b48:	71bb      	strb	r3, [r7, #6]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	717b      	strb	r3, [r7, #5]
  LTC681x_adcv(MD,DCP,CH);
 8002b4e:	797a      	ldrb	r2, [r7, #5]
 8002b50:	79b9      	ldrb	r1, [r7, #6]
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f000 fa30 	bl	8002fba <LTC681x_adcv>
}
 8002b5a:	bf00      	nop
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <LTC6811_adax>:

/* Start a GPIO and Vref2 Conversion */
void LTC6811_adax(uint8_t MD, //ADC Mode
				  uint8_t CHG //GPIO Channels to be measured
				  )
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	4603      	mov	r3, r0
 8002b6a:	460a      	mov	r2, r1
 8002b6c:	71fb      	strb	r3, [r7, #7]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	71bb      	strb	r3, [r7, #6]
  LTC681x_adax(MD,CHG);
 8002b72:	79ba      	ldrb	r2, [r7, #6]
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	4611      	mov	r1, r2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 fa49 	bl	8003010 <LTC681x_adax>
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <LTC6811_rdcv>:
*/
uint8_t LTC6811_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // The number of ICs in the system
                     cell_asic *ic // Array of the parsed cell codes
                    )
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b084      	sub	sp, #16
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	603a      	str	r2, [r7, #0]
 8002b90:	71fb      	strb	r3, [r7, #7]
 8002b92:	460b      	mov	r3, r1
 8002b94:	71bb      	strb	r3, [r7, #6]
  int8_t pec_error = 0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	73fb      	strb	r3, [r7, #15]
  pec_error = LTC681x_rdcv(reg,total_ic,ic);
 8002b9a:	79b9      	ldrb	r1, [r7, #6]
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 fa5a 	bl	800305a <LTC681x_rdcv>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	73fb      	strb	r3, [r7, #15]
  return(pec_error);
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <LTC6811_rdaux>:
*/
int8_t LTC6811_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
                     uint8_t total_ic,//The number of ICs in the system
                     cell_asic *ic//A two dimensional array of the gpio voltage codes.
                     )
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	603a      	str	r2, [r7, #0]
 8002bbe:	71fb      	strb	r3, [r7, #7]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	71bb      	strb	r3, [r7, #6]
  int8_t pec_error = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	73fb      	strb	r3, [r7, #15]
  LTC681x_rdaux(reg,total_ic,ic);
 8002bc8:	79b9      	ldrb	r1, [r7, #6]
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 faf7 	bl	80031c2 <LTC681x_rdaux>
  return (pec_error);
 8002bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <LTC6811_pollAdc>:
  return(LTC681x_pladc());
}

//This function will block operation until the ADC has finished it's conversion */
uint32_t LTC6811_pollAdc()
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  return(LTC681x_pollAdc());
 8002be4:	f000 fcb8 	bl	8003558 <LTC681x_pollAdc>
 8002be8:	4603      	mov	r3, r0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	bd80      	pop	{r7, pc}

08002bee <LTC6811_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC6811_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that will store the data
							 )
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b082      	sub	sp, #8
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	6039      	str	r1, [r7, #0]
 8002bf8:	71fb      	strb	r3, [r7, #7]
  LTC681x_reset_crc_count(total_ic,ic);
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	6839      	ldr	r1, [r7, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fe92 	bl	8003928 <LTC681x_reset_crc_count>
}
 8002c04:	bf00      	nop
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <LTC6811_init_cfg>:

/* Helper function to initialize CFG variables.*/
void LTC6811_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that will store the data
					  )
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	6039      	str	r1, [r7, #0]
 8002c16:	71fb      	strb	r3, [r7, #7]
  LTC681x_init_cfg(total_ic,ic);
 8002c18:	79fb      	ldrb	r3, [r7, #7]
 8002c1a:	6839      	ldr	r1, [r7, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 fee9 	bl	80039f4 <LTC681x_init_cfg>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <LTC6811_set_cfgr>:
					  bool dcc[12],// The DCC bit
					  bool dcto[4],// The Dcto bit
					  uint16_t uv, // The UV bit
					  uint16_t  ov // The OV bit
					  )
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b088      	sub	sp, #32
 8002c2e:	af06      	add	r7, sp, #24
 8002c30:	6039      	str	r1, [r7, #0]
 8002c32:	4611      	mov	r1, r2
 8002c34:	461a      	mov	r2, r3
 8002c36:	4603      	mov	r3, r0
 8002c38:	71fb      	strb	r3, [r7, #7]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	71bb      	strb	r3, [r7, #6]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	717b      	strb	r3, [r7, #5]
  LTC681x_set_cfgr(nIC ,ic,refon,adcopt,gpio,dcc,dcto, uv, ov);
 8002c42:	7979      	ldrb	r1, [r7, #5]
 8002c44:	79ba      	ldrb	r2, [r7, #6]
 8002c46:	79f8      	ldrb	r0, [r7, #7]
 8002c48:	8c3b      	ldrh	r3, [r7, #32]
 8002c4a:	9304      	str	r3, [sp, #16]
 8002c4c:	8bbb      	ldrh	r3, [r7, #28]
 8002c4e:	9303      	str	r3, [sp, #12]
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	9302      	str	r3, [sp, #8]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	9301      	str	r3, [sp, #4]
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	6839      	ldr	r1, [r7, #0]
 8002c60:	f000 fef2 	bl	8003a48 <LTC681x_set_cfgr>
}
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <wakeup_idle>:
                                0x585a, 0x8ba7, 0x4e3e, 0x450c, 0x8095
                               };

/* Wake isoSPI up from IDlE state and enters the READY state */
void wakeup_idle(uint8_t total_ic) //Number of ICs in the system
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<total_ic; i++)
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	e00b      	b.n	8002c94 <wakeup_idle+0x28>
	{
	   cs_low(CS_PIN);
 8002c7c:	200a      	movs	r0, #10
 8002c7e:	f001 f949 	bl	8003f14 <cs_low>
	   spi_read_byte(0xff);//Guarantees the isoSPI will be in ready mode
 8002c82:	20ff      	movs	r0, #255	; 0xff
 8002c84:	f001 f9b0 	bl	8003fe8 <spi_read_byte>
	   cs_high(CS_PIN);
 8002c88:	200a      	movs	r0, #10
 8002c8a:	f001 f953 	bl	8003f34 <cs_high>
	for (int i =0; i<total_ic; i++)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	3301      	adds	r3, #1
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	dbef      	blt.n	8002c7c <wakeup_idle+0x10>
	}
}
 8002c9c:	bf00      	nop
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <wakeup_sleep>:

/* Generic wakeup command to wake the LTC681x from sleep state */
void wakeup_sleep(uint8_t total_ic) //Number of ICs in the system
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<total_ic; i++)
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	e00f      	b.n	8002cd6 <wakeup_sleep+0x30>
	{
	   cs_low(CS_PIN);
 8002cb6:	200a      	movs	r0, #10
 8002cb8:	f001 f92c 	bl	8003f14 <cs_low>
	   delay_u(300); // Guarantees the LTC681x will be in standby
 8002cbc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002cc0:	f001 f91b 	bl	8003efa <delay_u>
	   cs_high(CS_PIN);
 8002cc4:	200a      	movs	r0, #10
 8002cc6:	f001 f935 	bl	8003f34 <cs_high>
	   delay_u(10);
 8002cca:	200a      	movs	r0, #10
 8002ccc:	f001 f915 	bl	8003efa <delay_u>
	for (int i =0; i<total_ic; i++)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	dbeb      	blt.n	8002cb6 <wakeup_sleep+0x10>
	}
}
 8002cde:	bf00      	nop
 8002ce0:	bf00      	nop
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <cmd_68>:

/* Generic function to write 68xx commands. Function calculates PEC for tx_cmd data. */
void cmd_68(uint8_t tx_cmd[2]) //The command to be transmitted
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	cmd[0] = tx_cmd[0];
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	723b      	strb	r3, [r7, #8]
	cmd[1] =  tx_cmd[1];
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	785b      	ldrb	r3, [r3, #1]
 8002cfa:	727b      	strb	r3, [r7, #9]
	cmd_pec = pec15_calc(2, cmd);
 8002cfc:	f107 0308 	add.w	r3, r7, #8
 8002d00:	4619      	mov	r1, r3
 8002d02:	2002      	movs	r0, #2
 8002d04:	f000 f8a6 	bl	8002e54 <pec15_calc>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8002d0c:	89fb      	ldrh	r3, [r7, #14]
 8002d0e:	0a1b      	lsrs	r3, r3, #8
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8002d16:	89fb      	ldrh	r3, [r7, #14]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 8002d1c:	200a      	movs	r0, #10
 8002d1e:	f001 f8f9 	bl	8003f14 <cs_low>
	spi_write_array(4,cmd);
 8002d22:	f107 0308 	add.w	r3, r7, #8
 8002d26:	4619      	mov	r1, r3
 8002d28:	2004      	movs	r0, #4
 8002d2a:	f001 f913 	bl	8003f54 <spi_write_array>
	cs_high(CS_PIN);
 8002d2e:	200a      	movs	r0, #10
 8002d30:	f001 f900 	bl	8003f34 <cs_high>
}
 8002d34:	bf00      	nop
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
			  uint8_t tx_cmd[2], //The command to be transmitted
			  uint8_t data[] // Payload Data
			  )
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b088      	sub	sp, #32
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	73fb      	strb	r3, [r7, #15]
	const uint8_t BYTES_IN_REG = 6;
 8002d4a:	2306      	movs	r3, #6
 8002d4c:	773b      	strb	r3, [r7, #28]
	const uint8_t CMD_LEN = 4+(8*total_ic);
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	3304      	adds	r3, #4
 8002d56:	76fb      	strb	r3, [r7, #27]
	uint8_t *cmd;
	uint16_t data_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index;

	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8002d58:	7efb      	ldrb	r3, [r7, #27]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f006 fcd6 	bl	800970c <malloc>
 8002d60:	4603      	mov	r3, r0
 8002d62:	617b      	str	r3, [r7, #20]
	cmd[0] = tx_cmd[0];
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	781a      	ldrb	r2, [r3, #0]
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	701a      	strb	r2, [r3, #0]
	cmd[1] = tx_cmd[1];
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	7852      	ldrb	r2, [r2, #1]
 8002d74:	701a      	strb	r2, [r3, #0]
	cmd_pec = pec15_calc(2, cmd);
 8002d76:	6979      	ldr	r1, [r7, #20]
 8002d78:	2002      	movs	r0, #2
 8002d7a:	f000 f86b 	bl	8002e54 <pec15_calc>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8002d82:	8a7b      	ldrh	r3, [r7, #18]
 8002d84:	0a1b      	lsrs	r3, r3, #8
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	3302      	adds	r3, #2
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t)(cmd_pec);
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	3303      	adds	r3, #3
 8002d94:	8a7a      	ldrh	r2, [r7, #18]
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 8002d9a:	2304      	movs	r3, #4
 8002d9c:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each LTC681x, this loops starts with the last IC on the stack.
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	77bb      	strb	r3, [r7, #30]
 8002da2:	e042      	b.n	8002e2a <write_68+0xee>
    {	                                                                            //The first configuration written is received by the last IC in the daisy chain
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8002da4:	2300      	movs	r3, #0
 8002da6:	777b      	strb	r3, [r7, #29]
 8002da8:	e016      	b.n	8002dd8 <write_68+0x9c>
		{
			cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 8002daa:	7fbb      	ldrb	r3, [r7, #30]
 8002dac:	1e5a      	subs	r2, r3, #1
 8002dae:	4613      	mov	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4413      	add	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	461a      	mov	r2, r3
 8002db8:	7f7b      	ldrb	r3, [r7, #29]
 8002dba:	4413      	add	r3, r2
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	441a      	add	r2, r3
 8002dc2:	7ffb      	ldrb	r3, [r7, #31]
 8002dc4:	6979      	ldr	r1, [r7, #20]
 8002dc6:	440b      	add	r3, r1
 8002dc8:	7812      	ldrb	r2, [r2, #0]
 8002dca:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 8002dcc:	7ffb      	ldrb	r3, [r7, #31]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8002dd2:	7f7b      	ldrb	r3, [r7, #29]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	777b      	strb	r3, [r7, #29]
 8002dd8:	7f7a      	ldrb	r2, [r7, #29]
 8002dda:	7f3b      	ldrb	r3, [r7, #28]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d3e4      	bcc.n	8002daa <write_68+0x6e>
		}

		data_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &data[(current_ic-1)*6]);    // Calculating the PEC for each ICs configuration register data
 8002de0:	7fbb      	ldrb	r3, [r7, #30]
 8002de2:	1e5a      	subs	r2, r3, #1
 8002de4:	4613      	mov	r3, r2
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	4413      	add	r3, r2
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	461a      	mov	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	441a      	add	r2, r3
 8002df2:	7f3b      	ldrb	r3, [r7, #28]
 8002df4:	4611      	mov	r1, r2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 f82c 	bl	8002e54 <pec15_calc>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	823b      	strh	r3, [r7, #16]
		cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 8002e00:	8a3b      	ldrh	r3, [r7, #16]
 8002e02:	0a1b      	lsrs	r3, r3, #8
 8002e04:	b299      	uxth	r1, r3
 8002e06:	7ffb      	ldrb	r3, [r7, #31]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	b2ca      	uxtb	r2, r1
 8002e0e:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t)data_pec;
 8002e10:	7ffb      	ldrb	r3, [r7, #31]
 8002e12:	3301      	adds	r3, #1
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	4413      	add	r3, r2
 8002e18:	8a3a      	ldrh	r2, [r7, #16]
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 8002e1e:	7ffb      	ldrb	r3, [r7, #31]
 8002e20:	3302      	adds	r3, #2
 8002e22:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each LTC681x, this loops starts with the last IC on the stack.
 8002e24:	7fbb      	ldrb	r3, [r7, #30]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	77bb      	strb	r3, [r7, #30]
 8002e2a:	7fbb      	ldrb	r3, [r7, #30]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1b9      	bne.n	8002da4 <write_68+0x68>
	}

	cs_low(CS_PIN);
 8002e30:	200a      	movs	r0, #10
 8002e32:	f001 f86f 	bl	8003f14 <cs_low>
	spi_write_array(CMD_LEN, cmd);
 8002e36:	7efb      	ldrb	r3, [r7, #27]
 8002e38:	6979      	ldr	r1, [r7, #20]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f001 f88a 	bl	8003f54 <spi_write_array>
	cs_high(CS_PIN);
 8002e40:	200a      	movs	r0, #10
 8002e42:	f001 f877 	bl	8003f34 <cs_high>

	free(cmd);
 8002e46:	6978      	ldr	r0, [r7, #20]
 8002e48:	f006 fc68 	bl	800971c <free>
}
 8002e4c:	bf00      	nop
 8002e4e:	3720      	adds	r7, #32
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <pec15_calc>:

/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	6039      	str	r1, [r7, #0]
 8002e5e:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder,addr;
	remainder = 16;//initialize the PEC
 8002e60:	2310      	movs	r3, #16
 8002e62:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8002e64:	2300      	movs	r3, #0
 8002e66:	737b      	strb	r3, [r7, #13]
 8002e68:	e019      	b.n	8002e9e <pec15_calc+0x4a>
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 8002e6a:	89fb      	ldrh	r3, [r7, #14]
 8002e6c:	09db      	lsrs	r3, r3, #7
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	7b7b      	ldrb	r3, [r7, #13]
 8002e72:	6839      	ldr	r1, [r7, #0]
 8002e74:	440b      	add	r3, r1
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	4053      	eors	r3, r2
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	817b      	strh	r3, [r7, #10]
		remainder = (remainder<<8)^crc15Table[addr];
 8002e82:	89fb      	ldrh	r3, [r7, #14]
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	b21a      	sxth	r2, r3
 8002e88:	897b      	ldrh	r3, [r7, #10]
 8002e8a:	490b      	ldr	r1, [pc, #44]	; (8002eb8 <pec15_calc+0x64>)
 8002e8c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002e90:	b21b      	sxth	r3, r3
 8002e92:	4053      	eors	r3, r2
 8002e94:	b21b      	sxth	r3, r3
 8002e96:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8002e98:	7b7b      	ldrb	r3, [r7, #13]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	737b      	strb	r3, [r7, #13]
 8002e9e:	7b7a      	ldrb	r2, [r7, #13]
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d3e1      	bcc.n	8002e6a <pec15_calc+0x16>
	}

	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8002ea6:	89fb      	ldrh	r3, [r7, #14]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	b29b      	uxth	r3, r3
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	0800c760 	.word	0x0800c760

08002ebc <LTC681x_wrcfg>:

/* Write the LTC681x CFGRA */
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[]  // A two dimensional array of the configuration data that will be written
                  )
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b0c4      	sub	sp, #272	; 0x110
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002ec8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ecc:	6019      	str	r1, [r3, #0]
 8002ece:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002ed2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002ed6:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = {0x00 , 0x01} ;
 8002ed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002edc:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t c_ic = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8002eec:	2300      	movs	r3, #0
 8002eee:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8002ef2:	e048      	b.n	8002f86 <LTC681x_wrcfg+0xca>
	{
		if (ic->isospi_reverse == false)
 8002ef4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002ef8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8002f02:	f083 0301 	eor.w	r3, r3, #1
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d004      	beq.n	8002f16 <LTC681x_wrcfg+0x5a>
		{
			c_ic = current_ic;
 8002f0c:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002f10:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8002f14:	e00b      	b.n	8002f2e <LTC681x_wrcfg+0x72>
		}
		else
		{
			c_ic = total_ic - current_ic - 1;
 8002f16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002f1a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002f1e:	781a      	ldrb	r2, [r3, #0]
 8002f20:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
		}

		for (uint8_t data = 0; data<6; data++)
 8002f2e:	2300      	movs	r3, #0
 8002f30:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8002f34:	e01e      	b.n	8002f74 <LTC681x_wrcfg+0xb8>
		{
			write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 8002f36:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8002f3a:	22e8      	movs	r2, #232	; 0xe8
 8002f3c:	fb02 f303 	mul.w	r3, r2, r3
 8002f40:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002f44:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002f48:	6812      	ldr	r2, [r2, #0]
 8002f4a:	18d1      	adds	r1, r2, r3
 8002f4c:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8002f50:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002f54:	5c89      	ldrb	r1, [r1, r2]
 8002f56:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002f5a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8002f5e:	54d1      	strb	r1, [r2, r3]
			write_count++;
 8002f60:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002f64:	3301      	adds	r3, #1
 8002f66:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		for (uint8_t data = 0; data<6; data++)
 8002f6a:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8002f6e:	3301      	adds	r3, #1
 8002f70:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8002f74:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8002f78:	2b05      	cmp	r3, #5
 8002f7a:	d9dc      	bls.n	8002f36 <LTC681x_wrcfg+0x7a>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8002f7c:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002f80:	3301      	adds	r3, #1
 8002f82:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8002f86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002f8a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002f8e:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d3ad      	bcc.n	8002ef4 <LTC681x_wrcfg+0x38>
		}
	}
	write_68(total_ic, cmd, write_buffer);
 8002f98:	f107 0208 	add.w	r2, r7, #8
 8002f9c:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002fa0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002fa4:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff fec6 	bl	8002d3c <write_68>
}
 8002fb0:	bf00      	nop
 8002fb2:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <LTC681x_adcv>:
/* Starts ADC conversion for cell voltage */
void LTC681x_adcv( uint8_t MD, //ADC Mode
				   uint8_t DCP, //Discharge Permit
				   uint8_t CH //Cell Channels to be measured
                 )
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	71fb      	strb	r3, [r7, #7]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	71bb      	strb	r3, [r7, #6]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[2];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	105b      	asrs	r3, r3, #1
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
 8002fda:	3302      	adds	r3, #2
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	733b      	strb	r3, [r7, #12]
	md_bits = (MD & 0x01) << 7;
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	01db      	lsls	r3, r3, #7
 8002fe4:	73fb      	strb	r3, [r7, #15]
	cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8002fe6:	79bb      	ldrb	r3, [r7, #6]
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	4413      	add	r3, r2
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	797b      	ldrb	r3, [r7, #5]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	3360      	adds	r3, #96	; 0x60
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	737b      	strb	r3, [r7, #13]

	cmd_68(cmd);
 8002ffe:	f107 030c 	add.w	r3, r7, #12
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff fe70 	bl	8002ce8 <cmd_68>
}
 8003008:	bf00      	nop
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <LTC681x_adax>:

/* Start ADC Conversion for GPIO and Vref2  */
void LTC681x_adax(uint8_t MD, //ADC Mode
				  uint8_t CHG //GPIO Channels to be measured
				  )
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	460a      	mov	r2, r1
 800301a:	71fb      	strb	r3, [r7, #7]
 800301c:	4613      	mov	r3, r2
 800301e:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	105b      	asrs	r3, r3, #1
 8003024:	b2db      	uxtb	r3, r3
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	3304      	adds	r3, #4
 8003030:	b2db      	uxtb	r3, r3
 8003032:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8003034:	79fb      	ldrb	r3, [r7, #7]
 8003036:	01db      	lsls	r3, r3, #7
 8003038:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG ;
 800303a:	7bfa      	ldrb	r2, [r7, #15]
 800303c:	79bb      	ldrb	r3, [r7, #6]
 800303e:	4413      	add	r3, r2
 8003040:	b2db      	uxtb	r3, r3
 8003042:	3360      	adds	r3, #96	; 0x60
 8003044:	b2db      	uxtb	r3, r3
 8003046:	727b      	strb	r3, [r7, #9]

	cmd_68(cmd);
 8003048:	f107 0308 	add.w	r3, r7, #8
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff fe4b 	bl	8002ce8 <cmd_68>
}
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <LTC681x_rdcv>:
*/
uint8_t LTC681x_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // The number of ICs in the system
                     cell_asic *ic // Array of the parsed cell codes
                    )
{
 800305a:	b5b0      	push	{r4, r5, r7, lr}
 800305c:	b088      	sub	sp, #32
 800305e:	af02      	add	r7, sp, #8
 8003060:	4603      	mov	r3, r0
 8003062:	603a      	str	r2, [r7, #0]
 8003064:	71fb      	strb	r3, [r7, #7]
 8003066:	460b      	mov	r3, r1
 8003068:	71bb      	strb	r3, [r7, #6]
	int8_t pec_error = 0;
 800306a:	2300      	movs	r3, #0
 800306c:	75fb      	strb	r3, [r7, #23]
	uint8_t *cell_data;
	uint8_t c_ic = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	75bb      	strb	r3, [r7, #22]
	cell_data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8003072:	79bb      	ldrb	r3, [r7, #6]
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4618      	mov	r0, r3
 8003078:	f006 fb48 	bl	800970c <malloc>
 800307c:	4603      	mov	r3, r0
 800307e:	60bb      	str	r3, [r7, #8]

	if (reg == 0)
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d14b      	bne.n	800311e <LTC681x_rdcv+0xc4>
	{
		for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8003086:	2301      	movs	r3, #1
 8003088:	757b      	strb	r3, [r7, #21]
 800308a:	e041      	b.n	8003110 <LTC681x_rdcv+0xb6>
		{
			LTC681x_rdcv_reg(cell_reg, total_ic,cell_data );
 800308c:	79b9      	ldrb	r1, [r7, #6]
 800308e:	7d7b      	ldrb	r3, [r7, #21]
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	4618      	mov	r0, r3
 8003094:	f000 f93d 	bl	8003312 <LTC681x_rdcv_reg>
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8003098:	2300      	movs	r3, #0
 800309a:	613b      	str	r3, [r7, #16]
 800309c:	e031      	b.n	8003102 <LTC681x_rdcv+0xa8>
			{
			if (ic->isospi_reverse == false)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 80030a4:	f083 0301 	eor.w	r3, r3, #1
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <LTC681x_rdcv+0x5a>
			{
			  c_ic = current_ic;
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	75bb      	strb	r3, [r7, #22]
 80030b2:	e006      	b.n	80030c2 <LTC681x_rdcv+0x68>
			}
			else
			{
			  c_ic = total_ic - current_ic - 1;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	79ba      	ldrb	r2, [r7, #6]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	3b01      	subs	r3, #1
 80030c0:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	b2d8      	uxtb	r0, r3
												&ic[c_ic].cells.c_codes[0],
 80030c6:	7dbb      	ldrb	r3, [r7, #22]
 80030c8:	22e8      	movs	r2, #232	; 0xe8
 80030ca:	fb02 f303 	mul.w	r3, r2, r3
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 80030d2:	f103 041e 	add.w	r4, r3, #30
												&ic[c_ic].cells.pec_match[0]);
 80030d6:	7dbb      	ldrb	r3, [r7, #22]
 80030d8:	22e8      	movs	r2, #232	; 0xe8
 80030da:	fb02 f303 	mul.w	r3, r2, r3
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 80030e2:	3342      	adds	r3, #66	; 0x42
 80030e4:	7d79      	ldrb	r1, [r7, #21]
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	4623      	mov	r3, r4
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	f000 f9c2 	bl	8003474 <parse_cells>
 80030f0:	4603      	mov	r3, r0
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	7dfb      	ldrb	r3, [r7, #23]
 80030f6:	4413      	add	r3, r2
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	75fb      	strb	r3, [r7, #23]
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	3301      	adds	r3, #1
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	79bb      	ldrb	r3, [r7, #6]
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	429a      	cmp	r2, r3
 8003108:	dbc9      	blt.n	800309e <LTC681x_rdcv+0x44>
		for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 800310a:	7d7b      	ldrb	r3, [r7, #21]
 800310c:	3301      	adds	r3, #1
 800310e:	757b      	strb	r3, [r7, #21]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8003116:	7d7a      	ldrb	r2, [r7, #21]
 8003118:	429a      	cmp	r2, r3
 800311a:	d9b7      	bls.n	800308c <LTC681x_rdcv+0x32>
 800311c:	e043      	b.n	80031a6 <LTC681x_rdcv+0x14c>
		}
	}

	else
	{
		LTC681x_rdcv_reg(reg, total_ic,cell_data);
 800311e:	79b9      	ldrb	r1, [r7, #6]
 8003120:	79fb      	ldrb	r3, [r7, #7]
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	4618      	mov	r0, r3
 8003126:	f000 f8f4 	bl	8003312 <LTC681x_rdcv_reg>

		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	e036      	b.n	800319e <LTC681x_rdcv+0x144>
		{
			if (ic->isospi_reverse == false)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8003136:	f083 0301 	eor.w	r3, r3, #1
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d002      	beq.n	8003146 <LTC681x_rdcv+0xec>
			{
			c_ic = current_ic;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	75bb      	strb	r3, [r7, #22]
 8003144:	e006      	b.n	8003154 <LTC681x_rdcv+0xfa>
			}
			else
			{
			c_ic = total_ic - current_ic - 1;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	79ba      	ldrb	r2, [r7, #6]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	3b01      	subs	r3, #1
 8003152:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	b2d8      	uxtb	r0, r3
 8003158:	7dbb      	ldrb	r3, [r7, #22]
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	461a      	mov	r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	189c      	adds	r4, r3, r2
											  &ic[c_ic].cells.c_codes[0],
 8003162:	7dbb      	ldrb	r3, [r7, #22]
 8003164:	22e8      	movs	r2, #232	; 0xe8
 8003166:	fb02 f303 	mul.w	r3, r2, r3
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 800316e:	f103 051e 	add.w	r5, r3, #30
											  &ic[c_ic].cells.pec_match[0]);
 8003172:	7dbb      	ldrb	r3, [r7, #22]
 8003174:	22e8      	movs	r2, #232	; 0xe8
 8003176:	fb02 f303 	mul.w	r3, r2, r3
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 800317e:	3342      	adds	r3, #66	; 0x42
 8003180:	79f9      	ldrb	r1, [r7, #7]
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	462b      	mov	r3, r5
 8003186:	4622      	mov	r2, r4
 8003188:	f000 f974 	bl	8003474 <parse_cells>
 800318c:	4603      	mov	r3, r0
 800318e:	b2da      	uxtb	r2, r3
 8003190:	7dfb      	ldrb	r3, [r7, #23]
 8003192:	4413      	add	r3, r2
 8003194:	b2db      	uxtb	r3, r3
 8003196:	75fb      	strb	r3, [r7, #23]
		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	3301      	adds	r3, #1
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	79bb      	ldrb	r3, [r7, #6]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	dbc4      	blt.n	8003130 <LTC681x_rdcv+0xd6>
		}
	}
	LTC681x_check_pec(total_ic,CELL,ic);
 80031a6:	79bb      	ldrb	r3, [r7, #6]
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	2101      	movs	r1, #1
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 fa17 	bl	80035e0 <LTC681x_check_pec>
	free(cell_data);
 80031b2:	68b8      	ldr	r0, [r7, #8]
 80031b4:	f006 fab2 	bl	800971c <free>

	return(pec_error);
 80031b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bdb0      	pop	{r4, r5, r7, pc}

080031c2 <LTC681x_rdaux>:
*/
int8_t LTC681x_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
                     uint8_t total_ic,//The number of ICs in the system
                     cell_asic *ic//A two dimensional array of the gpio voltage codes.
                    )
{
 80031c2:	b590      	push	{r4, r7, lr}
 80031c4:	b089      	sub	sp, #36	; 0x24
 80031c6:	af02      	add	r7, sp, #8
 80031c8:	4603      	mov	r3, r0
 80031ca:	603a      	str	r2, [r7, #0]
 80031cc:	71fb      	strb	r3, [r7, #7]
 80031ce:	460b      	mov	r3, r1
 80031d0:	71bb      	strb	r3, [r7, #6]
	uint8_t *data;
	int8_t pec_error = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	75fb      	strb	r3, [r7, #23]
	uint8_t c_ic =0;
 80031d6:	2300      	movs	r3, #0
 80031d8:	75bb      	strb	r3, [r7, #22]
	data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 80031da:	79bb      	ldrb	r3, [r7, #6]
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	4618      	mov	r0, r3
 80031e0:	f006 fa94 	bl	800970c <malloc>
 80031e4:	4603      	mov	r3, r0
 80031e6:	60bb      	str	r3, [r7, #8]

	if (reg == 0)
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d147      	bne.n	800327e <LTC681x_rdaux+0xbc>
	{
		for (uint8_t gpio_reg = 1; gpio_reg<ic[0].ic_reg.num_gpio_reg+1; gpio_reg++) //Executes once for each of the LTC681x aux voltage registers
 80031ee:	2301      	movs	r3, #1
 80031f0:	757b      	strb	r3, [r7, #21]
 80031f2:	e03d      	b.n	8003270 <LTC681x_rdaux+0xae>
		{
			LTC681x_rdaux_reg(gpio_reg, total_ic,data);                 //Reads the raw auxiliary register data into the data[] array
 80031f4:	79b9      	ldrb	r1, [r7, #6]
 80031f6:	7d7b      	ldrb	r3, [r7, #21]
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 f8e7 	bl	80033ce <LTC681x_rdaux_reg>
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8003200:	2300      	movs	r3, #0
 8003202:	613b      	str	r3, [r7, #16]
 8003204:	e02d      	b.n	8003262 <LTC681x_rdaux+0xa0>
			{
				if (ic->isospi_reverse == false)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 800320c:	f083 0301 	eor.w	r3, r3, #1
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <LTC681x_rdaux+0x5a>
				{
				  c_ic = current_ic;
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	75bb      	strb	r3, [r7, #22]
 800321a:	e006      	b.n	800322a <LTC681x_rdaux+0x68>
				}
				else
				{
				  c_ic = total_ic - current_ic - 1;
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	b2db      	uxtb	r3, r3
 8003220:	79ba      	ldrb	r2, [r7, #6]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	b2db      	uxtb	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	75bb      	strb	r3, [r7, #22]
				}
				pec_error = parse_cells(current_ic,gpio_reg, data,
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	b2d8      	uxtb	r0, r3
										&ic[c_ic].aux.a_codes[0],
 800322e:	7dbb      	ldrb	r3, [r7, #22]
 8003230:	22e8      	movs	r2, #232	; 0xe8
 8003232:	fb02 f303 	mul.w	r3, r2, r3
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	4413      	add	r3, r2
				pec_error = parse_cells(current_ic,gpio_reg, data,
 800323a:	f103 0448 	add.w	r4, r3, #72	; 0x48
										&ic[c_ic].aux.pec_match[0]);
 800323e:	7dbb      	ldrb	r3, [r7, #22]
 8003240:	22e8      	movs	r2, #232	; 0xe8
 8003242:	fb02 f303 	mul.w	r3, r2, r3
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	4413      	add	r3, r2
				pec_error = parse_cells(current_ic,gpio_reg, data,
 800324a:	335a      	adds	r3, #90	; 0x5a
 800324c:	7d79      	ldrb	r1, [r7, #21]
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	4623      	mov	r3, r4
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	f000 f90e 	bl	8003474 <parse_cells>
 8003258:	4603      	mov	r3, r0
 800325a:	75fb      	strb	r3, [r7, #23]
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	3301      	adds	r3, #1
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	79bb      	ldrb	r3, [r7, #6]
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	429a      	cmp	r2, r3
 8003268:	dbcd      	blt.n	8003206 <LTC681x_rdaux+0x44>
		for (uint8_t gpio_reg = 1; gpio_reg<ic[0].ic_reg.num_gpio_reg+1; gpio_reg++) //Executes once for each of the LTC681x aux voltage registers
 800326a:	7d7b      	ldrb	r3, [r7, #21]
 800326c:	3301      	adds	r3, #1
 800326e:	757b      	strb	r3, [r7, #21]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8003276:	7d7a      	ldrb	r2, [r7, #21]
 8003278:	429a      	cmp	r2, r3
 800327a:	d9bb      	bls.n	80031f4 <LTC681x_rdaux+0x32>
 800327c:	e03a      	b.n	80032f4 <LTC681x_rdaux+0x132>
			}
		}
	}
	else
	{
		LTC681x_rdaux_reg(reg, total_ic, data);
 800327e:	79b9      	ldrb	r1, [r7, #6]
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	4618      	mov	r0, r3
 8003286:	f000 f8a2 	bl	80033ce <LTC681x_rdaux_reg>

		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	e02d      	b.n	80032ec <LTC681x_rdaux+0x12a>
		{
			if (ic->isospi_reverse == false)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8003296:	f083 0301 	eor.w	r3, r3, #1
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <LTC681x_rdaux+0xe4>
			{
			c_ic = current_ic;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	75bb      	strb	r3, [r7, #22]
 80032a4:	e006      	b.n	80032b4 <LTC681x_rdaux+0xf2>
			}
			else
			{
			c_ic = total_ic - current_ic - 1;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	79ba      	ldrb	r2, [r7, #6]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	3b01      	subs	r3, #1
 80032b2:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = parse_cells(current_ic,reg, data,
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	b2d8      	uxtb	r0, r3
								  &ic[c_ic].aux.a_codes[0],
 80032b8:	7dbb      	ldrb	r3, [r7, #22]
 80032ba:	22e8      	movs	r2, #232	; 0xe8
 80032bc:	fb02 f303 	mul.w	r3, r2, r3
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	4413      	add	r3, r2
			pec_error = parse_cells(current_ic,reg, data,
 80032c4:	f103 0448 	add.w	r4, r3, #72	; 0x48
								  &ic[c_ic].aux.pec_match[0]);
 80032c8:	7dbb      	ldrb	r3, [r7, #22]
 80032ca:	22e8      	movs	r2, #232	; 0xe8
 80032cc:	fb02 f303 	mul.w	r3, r2, r3
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	4413      	add	r3, r2
			pec_error = parse_cells(current_ic,reg, data,
 80032d4:	335a      	adds	r3, #90	; 0x5a
 80032d6:	79f9      	ldrb	r1, [r7, #7]
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	4623      	mov	r3, r4
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	f000 f8c9 	bl	8003474 <parse_cells>
 80032e2:	4603      	mov	r3, r0
 80032e4:	75fb      	strb	r3, [r7, #23]
		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	3301      	adds	r3, #1
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	79bb      	ldrb	r3, [r7, #6]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	dbcd      	blt.n	8003290 <LTC681x_rdaux+0xce>
		}
	}
	LTC681x_check_pec(total_ic,AUX,ic);
 80032f4:	79bb      	ldrb	r3, [r7, #6]
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	2102      	movs	r1, #2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 f970 	bl	80035e0 <LTC681x_check_pec>
	free(data);
 8003300:	68b8      	ldr	r0, [r7, #8]
 8003302:	f006 fa0b 	bl	800971c <free>

	return (pec_error);
 8003306:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800330a:	4618      	mov	r0, r3
 800330c:	371c      	adds	r7, #28
 800330e:	46bd      	mov	sp, r7
 8003310:	bd90      	pop	{r4, r7, pc}

08003312 <LTC681x_rdcv_reg>:
/* Writes the command and reads the raw cell voltage register data */
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
                      uint8_t total_ic, //the number of ICs in the
                      uint8_t *data //An array of the unparsed cell codes
                     )
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	4603      	mov	r3, r0
 800331a:	603a      	str	r2, [r7, #0]
 800331c:	71fb      	strb	r3, [r7, #7]
 800331e:	460b      	mov	r3, r1
 8003320:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; //Number of bytes in each ICs register + 2 bytes for the PEC
 8003322:	2308      	movs	r3, #8
 8003324:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //1: RDCVA
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d104      	bne.n	8003336 <LTC681x_rdcv_reg+0x24>
	{
		cmd[1] = 0x04;
 800332c:	2304      	movs	r3, #4
 800332e:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003330:	2300      	movs	r3, #0
 8003332:	723b      	strb	r3, [r7, #8]
 8003334:	e026      	b.n	8003384 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 2) //2: RDCVB
 8003336:	79fb      	ldrb	r3, [r7, #7]
 8003338:	2b02      	cmp	r3, #2
 800333a:	d104      	bne.n	8003346 <LTC681x_rdcv_reg+0x34>
	{
		cmd[1] = 0x06;
 800333c:	2306      	movs	r3, #6
 800333e:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003340:	2300      	movs	r3, #0
 8003342:	723b      	strb	r3, [r7, #8]
 8003344:	e01e      	b.n	8003384 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 3) //3: RDCVC
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	2b03      	cmp	r3, #3
 800334a:	d104      	bne.n	8003356 <LTC681x_rdcv_reg+0x44>
	{
		cmd[1] = 0x08;
 800334c:	2308      	movs	r3, #8
 800334e:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003350:	2300      	movs	r3, #0
 8003352:	723b      	strb	r3, [r7, #8]
 8003354:	e016      	b.n	8003384 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 4) //4: RDCVD
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	2b04      	cmp	r3, #4
 800335a:	d104      	bne.n	8003366 <LTC681x_rdcv_reg+0x54>
	{
		cmd[1] = 0x0A;
 800335c:	230a      	movs	r3, #10
 800335e:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003360:	2300      	movs	r3, #0
 8003362:	723b      	strb	r3, [r7, #8]
 8003364:	e00e      	b.n	8003384 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 5) //4: RDCVE
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	2b05      	cmp	r3, #5
 800336a:	d104      	bne.n	8003376 <LTC681x_rdcv_reg+0x64>
	{
		cmd[1] = 0x09;
 800336c:	2309      	movs	r3, #9
 800336e:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003370:	2300      	movs	r3, #0
 8003372:	723b      	strb	r3, [r7, #8]
 8003374:	e006      	b.n	8003384 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 6) //4: RDCVF
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	2b06      	cmp	r3, #6
 800337a:	d103      	bne.n	8003384 <LTC681x_rdcv_reg+0x72>
	{
		cmd[1] = 0x0B;
 800337c:	230b      	movs	r3, #11
 800337e:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003380:	2300      	movs	r3, #0
 8003382:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 8003384:	f107 0308 	add.w	r3, r7, #8
 8003388:	4619      	mov	r1, r3
 800338a:	2002      	movs	r0, #2
 800338c:	f7ff fd62 	bl	8002e54 <pec15_calc>
 8003390:	4603      	mov	r3, r0
 8003392:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8003394:	89bb      	ldrh	r3, [r7, #12]
 8003396:	0a1b      	lsrs	r3, r3, #8
 8003398:	b29b      	uxth	r3, r3
 800339a:	b2db      	uxtb	r3, r3
 800339c:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 800339e:	89bb      	ldrh	r3, [r7, #12]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 80033a4:	200a      	movs	r0, #10
 80033a6:	f000 fdb5 	bl	8003f14 <cs_low>
	spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 80033aa:	7bfa      	ldrb	r2, [r7, #15]
 80033ac:	79bb      	ldrb	r3, [r7, #6]
 80033ae:	fb12 f303 	smulbb	r3, r2, r3
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	f107 0008 	add.w	r0, r7, #8
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	2104      	movs	r1, #4
 80033bc:	f000 fdde 	bl	8003f7c <spi_write_read>
	cs_high(CS_PIN);
 80033c0:	200a      	movs	r0, #10
 80033c2:	f000 fdb7 	bl	8003f34 <cs_high>
}
 80033c6:	bf00      	nop
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <LTC681x_rdaux_reg>:
*/
void LTC681x_rdaux_reg(uint8_t reg, //Determines which GPIO voltage register is read back
                       uint8_t total_ic, //The number of ICs in the system
                       uint8_t *data //Array of the unparsed auxiliary codes
                      )
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b084      	sub	sp, #16
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	4603      	mov	r3, r0
 80033d6:	603a      	str	r2, [r7, #0]
 80033d8:	71fb      	strb	r3, [r7, #7]
 80033da:	460b      	mov	r3, r1
 80033dc:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; // Number of bytes in the register + 2 bytes for the PEC
 80033de:	2308      	movs	r3, #8
 80033e0:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //Read back auxiliary group A
 80033e2:	79fb      	ldrb	r3, [r7, #7]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d104      	bne.n	80033f2 <LTC681x_rdaux_reg+0x24>
	{
		cmd[1] = 0x0C;
 80033e8:	230c      	movs	r3, #12
 80033ea:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80033ec:	2300      	movs	r3, #0
 80033ee:	723b      	strb	r3, [r7, #8]
 80033f0:	e01b      	b.n	800342a <LTC681x_rdaux_reg+0x5c>
	}
	else if (reg == 2)  //Read back auxiliary group B
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d104      	bne.n	8003402 <LTC681x_rdaux_reg+0x34>
	{
		cmd[1] = 0x0E;
 80033f8:	230e      	movs	r3, #14
 80033fa:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80033fc:	2300      	movs	r3, #0
 80033fe:	723b      	strb	r3, [r7, #8]
 8003400:	e013      	b.n	800342a <LTC681x_rdaux_reg+0x5c>
	}
	else if (reg == 3)  //Read back auxiliary group C
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	2b03      	cmp	r3, #3
 8003406:	d104      	bne.n	8003412 <LTC681x_rdaux_reg+0x44>
	{
		cmd[1] = 0x0D;
 8003408:	230d      	movs	r3, #13
 800340a:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800340c:	2300      	movs	r3, #0
 800340e:	723b      	strb	r3, [r7, #8]
 8003410:	e00b      	b.n	800342a <LTC681x_rdaux_reg+0x5c>
	}
	else if (reg == 4)  //Read back auxiliary group D
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	2b04      	cmp	r3, #4
 8003416:	d104      	bne.n	8003422 <LTC681x_rdaux_reg+0x54>
	{
		cmd[1] = 0x0F;
 8003418:	230f      	movs	r3, #15
 800341a:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800341c:	2300      	movs	r3, #0
 800341e:	723b      	strb	r3, [r7, #8]
 8003420:	e003      	b.n	800342a <LTC681x_rdaux_reg+0x5c>
	}
	else          //Read back auxiliary group A
	{
		cmd[1] = 0x0C;
 8003422:	230c      	movs	r3, #12
 8003424:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003426:	2300      	movs	r3, #0
 8003428:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 800342a:	f107 0308 	add.w	r3, r7, #8
 800342e:	4619      	mov	r1, r3
 8003430:	2002      	movs	r0, #2
 8003432:	f7ff fd0f 	bl	8002e54 <pec15_calc>
 8003436:	4603      	mov	r3, r0
 8003438:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 800343a:	89bb      	ldrh	r3, [r7, #12]
 800343c:	0a1b      	lsrs	r3, r3, #8
 800343e:	b29b      	uxth	r3, r3
 8003440:	b2db      	uxtb	r3, r3
 8003442:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8003444:	89bb      	ldrh	r3, [r7, #12]
 8003446:	b2db      	uxtb	r3, r3
 8003448:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 800344a:	200a      	movs	r0, #10
 800344c:	f000 fd62 	bl	8003f14 <cs_low>
	spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 8003450:	7bfa      	ldrb	r2, [r7, #15]
 8003452:	79bb      	ldrb	r3, [r7, #6]
 8003454:	fb12 f303 	smulbb	r3, r2, r3
 8003458:	b2db      	uxtb	r3, r3
 800345a:	f107 0008 	add.w	r0, r7, #8
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	2104      	movs	r1, #4
 8003462:	f000 fd8b 	bl	8003f7c <spi_write_read>
	cs_high(CS_PIN);
 8003466:	200a      	movs	r0, #10
 8003468:	f000 fd64 	bl	8003f34 <cs_high>
}
 800346c:	bf00      	nop
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <parse_cells>:
					uint8_t cell_reg,  // Type of register
					uint8_t cell_data[], // Unparsed data
					uint16_t *cell_codes, // Parsed data
					uint8_t *ic_pec // PEC error
					)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af00      	add	r7, sp, #0
 800347a:	60ba      	str	r2, [r7, #8]
 800347c:	607b      	str	r3, [r7, #4]
 800347e:	4603      	mov	r3, r0
 8003480:	73fb      	strb	r3, [r7, #15]
 8003482:	460b      	mov	r3, r1
 8003484:	73bb      	strb	r3, [r7, #14]
	const uint8_t BYT_IN_REG = 6;
 8003486:	2306      	movs	r3, #6
 8003488:	773b      	strb	r3, [r7, #28]
	const uint8_t CELL_IN_REG = 3;
 800348a:	2303      	movs	r3, #3
 800348c:	76fb      	strb	r3, [r7, #27]
	int8_t pec_error = 0;
 800348e:	2300      	movs	r3, #0
 8003490:	77fb      	strb	r3, [r7, #31]
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = current_ic*NUM_RX_BYT; //data counter
 8003492:	7bfb      	ldrb	r3, [r7, #15]
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	77bb      	strb	r3, [r7, #30]


	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8003498:	2300      	movs	r3, #0
 800349a:	777b      	strb	r3, [r7, #29]
 800349c:	e020      	b.n	80034e0 <parse_cells+0x6c>
	{																		// loops once for each of the 3 codes in the register

		parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each code is received as two bytes and is combined to
 800349e:	7fbb      	ldrb	r3, [r7, #30]
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	4413      	add	r3, r2
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	7fbb      	ldrb	r3, [r7, #30]
 80034aa:	3301      	adds	r3, #1
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	440b      	add	r3, r1
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	021b      	lsls	r3, r3, #8
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	4413      	add	r3, r2
 80034ba:	82bb      	strh	r3, [r7, #20]
																				   // create the parsed code
		cell_codes[current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 80034bc:	7f7a      	ldrb	r2, [r7, #29]
 80034be:	7bbb      	ldrb	r3, [r7, #14]
 80034c0:	3b01      	subs	r3, #1
 80034c2:	7ef9      	ldrb	r1, [r7, #27]
 80034c4:	fb01 f303 	mul.w	r3, r1, r3
 80034c8:	4413      	add	r3, r2
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	4413      	add	r3, r2
 80034d0:	8aba      	ldrh	r2, [r7, #20]
 80034d2:	801a      	strh	r2, [r3, #0]

		data_counter = data_counter + 2;                       //Because the codes are two bytes, the data counter
 80034d4:	7fbb      	ldrb	r3, [r7, #30]
 80034d6:	3302      	adds	r3, #2
 80034d8:	77bb      	strb	r3, [r7, #30]
	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 80034da:	7f7b      	ldrb	r3, [r7, #29]
 80034dc:	3301      	adds	r3, #1
 80034de:	777b      	strb	r3, [r7, #29]
 80034e0:	7f7a      	ldrb	r2, [r7, #29]
 80034e2:	7efb      	ldrb	r3, [r7, #27]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d3da      	bcc.n	800349e <parse_cells+0x2a>
															  //must increment by two for each parsed code
	}
	received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 80034e8:	7fbb      	ldrb	r3, [r7, #30]
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	4413      	add	r3, r2
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	021b      	lsls	r3, r3, #8
 80034f2:	b21a      	sxth	r2, r3
 80034f4:	7fbb      	ldrb	r3, [r7, #30]
 80034f6:	3301      	adds	r3, #1
 80034f8:	68b9      	ldr	r1, [r7, #8]
 80034fa:	440b      	add	r3, r1
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	b21b      	sxth	r3, r3
 8003500:	4313      	orrs	r3, r2
 8003502:	b21b      	sxth	r3, r3
 8003504:	833b      	strh	r3, [r7, #24]
																			   //after the 6 cell voltage data bytes
	data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8003506:	7bfb      	ldrb	r3, [r7, #15]
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	461a      	mov	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	441a      	add	r2, r3
 8003510:	7f3b      	ldrb	r3, [r7, #28]
 8003512:	4611      	mov	r1, r2
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fc9d 	bl	8002e54 <pec15_calc>
 800351a:	4603      	mov	r3, r0
 800351c:	82fb      	strh	r3, [r7, #22]

	if (received_pec != data_pec)
 800351e:	8b3a      	ldrh	r2, [r7, #24]
 8003520:	8afb      	ldrh	r3, [r7, #22]
 8003522:	429a      	cmp	r2, r3
 8003524:	d008      	beq.n	8003538 <parse_cells+0xc4>
	{
		pec_error = 1;                             //The pec_error variable is simply set negative if any PEC errors
 8003526:	2301      	movs	r3, #1
 8003528:	77fb      	strb	r3, [r7, #31]
		ic_pec[cell_reg-1]=1;
 800352a:	7bbb      	ldrb	r3, [r7, #14]
 800352c:	3b01      	subs	r3, #1
 800352e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003530:	4413      	add	r3, r2
 8003532:	2201      	movs	r2, #1
 8003534:	701a      	strb	r2, [r3, #0]
 8003536:	e005      	b.n	8003544 <parse_cells+0xd0>
	}
	else
	{
		ic_pec[cell_reg-1]=0;
 8003538:	7bbb      	ldrb	r3, [r7, #14]
 800353a:	3b01      	subs	r3, #1
 800353c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800353e:	4413      	add	r3, r2
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]
	}
	data_counter=data_counter+2;
 8003544:	7fbb      	ldrb	r3, [r7, #30]
 8003546:	3302      	adds	r3, #2
 8003548:	77bb      	strb	r3, [r7, #30]

	return(pec_error);
 800354a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3720      	adds	r7, #32
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <LTC681x_pollAdc>:
	return(adc_state);
}

/* This function will block operation until the ADC has finished it's conversion */
uint32_t LTC681x_pollAdc()
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 8003562:	2300      	movs	r3, #0
 8003564:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 800356a:	2307      	movs	r3, #7
 800356c:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 800356e:	2314      	movs	r3, #20
 8003570:	717b      	strb	r3, [r7, #5]
	cmd_pec = pec15_calc(2, cmd);
 8003572:	1d3b      	adds	r3, r7, #4
 8003574:	4619      	mov	r1, r3
 8003576:	2002      	movs	r0, #2
 8003578:	f7ff fc6c 	bl	8002e54 <pec15_calc>
 800357c:	4603      	mov	r3, r0
 800357e:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8003580:	893b      	ldrh	r3, [r7, #8]
 8003582:	0a1b      	lsrs	r3, r3, #8
 8003584:	b29b      	uxth	r3, r3
 8003586:	b2db      	uxtb	r3, r3
 8003588:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t)(cmd_pec);
 800358a:	893b      	ldrh	r3, [r7, #8]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	71fb      	strb	r3, [r7, #7]

	cs_low(CS_PIN);
 8003590:	200a      	movs	r0, #10
 8003592:	f000 fcbf 	bl	8003f14 <cs_low>
	spi_write_array(4,cmd);
 8003596:	1d3b      	adds	r3, r7, #4
 8003598:	4619      	mov	r1, r3
 800359a:	2004      	movs	r0, #4
 800359c:	f000 fcda 	bl	8003f54 <spi_write_array>
	while ((counter<200000)&&(finished == 0))
 80035a0:	e00d      	b.n	80035be <LTC681x_pollAdc+0x66>
	{
		current_time = spi_read_byte(0xff);
 80035a2:	20ff      	movs	r0, #255	; 0xff
 80035a4:	f000 fd20 	bl	8003fe8 <spi_read_byte>
 80035a8:	4603      	mov	r3, r0
 80035aa:	72bb      	strb	r3, [r7, #10]
		if (current_time>0)
 80035ac:	7abb      	ldrb	r3, [r7, #10]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <LTC681x_pollAdc+0x60>
		{
			finished = 1;
 80035b2:	2301      	movs	r3, #1
 80035b4:	72fb      	strb	r3, [r7, #11]
 80035b6:	e002      	b.n	80035be <LTC681x_pollAdc+0x66>
		}
		else
		{
			counter = counter + 10;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	330a      	adds	r3, #10
 80035bc:	60fb      	str	r3, [r7, #12]
	while ((counter<200000)&&(finished == 0))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4a06      	ldr	r2, [pc, #24]	; (80035dc <LTC681x_pollAdc+0x84>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d802      	bhi.n	80035cc <LTC681x_pollAdc+0x74>
 80035c6:	7afb      	ldrb	r3, [r7, #11]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0ea      	beq.n	80035a2 <LTC681x_pollAdc+0x4a>
		}
	}
	cs_high(CS_PIN);
 80035cc:	200a      	movs	r0, #10
 80035ce:	f000 fcb1 	bl	8003f34 <cs_high>

	return(counter);
 80035d2:	68fb      	ldr	r3, [r7, #12]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	00030d3f 	.word	0x00030d3f

080035e0 <LTC681x_check_pec>:
/* Helper function that increments PEC counters */
void LTC681x_check_pec(uint8_t total_ic, //Number of ICs in the system
					   uint8_t reg, //Type of Register
					   cell_asic *ic //A two dimensional array that stores the data
					   )
{
 80035e0:	b480      	push	{r7}
 80035e2:	b08b      	sub	sp, #44	; 0x2c
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	603a      	str	r2, [r7, #0]
 80035ea:	71fb      	strb	r3, [r7, #7]
 80035ec:	460b      	mov	r3, r1
 80035ee:	71bb      	strb	r3, [r7, #6]
	switch (reg)
 80035f0:	79bb      	ldrb	r3, [r7, #6]
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	f200 8191 	bhi.w	800391a <LTC681x_check_pec+0x33a>
 80035f8:	a201      	add	r2, pc, #4	; (adr r2, 8003600 <LTC681x_check_pec+0x20>)
 80035fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fe:	bf00      	nop
 8003600:	08003615 	.word	0x08003615
 8003604:	08003711 	.word	0x08003711
 8003608:	080037c3 	.word	0x080037c3
 800360c:	0800386f 	.word	0x0800386f
 8003610:	08003693 	.word	0x08003693
	{
		case LTC681x_CFGR:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003614:	2300      	movs	r3, #0
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
 8003618:	e036      	b.n	8003688 <LTC681x_check_pec+0xa8>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].config.rx_pec_match;
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	22e8      	movs	r2, #232	; 0xe8
 800361e:	fb02 f303 	mul.w	r3, r2, r3
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	4413      	add	r3, r2
 8003626:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	22e8      	movs	r2, #232	; 0xe8
 800362e:	fb02 f303 	mul.w	r3, r2, r3
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	4413      	add	r3, r2
 8003636:	7b9b      	ldrb	r3, [r3, #14]
 8003638:	b29a      	uxth	r2, r3
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	20e8      	movs	r0, #232	; 0xe8
 800363e:	fb00 f303 	mul.w	r3, r0, r3
 8003642:	6838      	ldr	r0, [r7, #0]
 8003644:	4403      	add	r3, r0
 8003646:	440a      	add	r2, r1
 8003648:	b292      	uxth	r2, r2
 800364a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].config.rx_pec_match;
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	22e8      	movs	r2, #232	; 0xe8
 8003652:	fb02 f303 	mul.w	r3, r2, r3
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	4413      	add	r3, r2
 800365a:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	22e8      	movs	r2, #232	; 0xe8
 8003662:	fb02 f303 	mul.w	r3, r2, r3
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	4413      	add	r3, r2
 800366a:	7b9b      	ldrb	r3, [r3, #14]
 800366c:	b29a      	uxth	r2, r3
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	20e8      	movs	r0, #232	; 0xe8
 8003672:	fb00 f303 	mul.w	r3, r0, r3
 8003676:	6838      	ldr	r0, [r7, #0]
 8003678:	4403      	add	r3, r0
 800367a:	440a      	add	r2, r1
 800367c:	b292      	uxth	r2, r2
 800367e:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	3301      	adds	r3, #1
 8003686:	627b      	str	r3, [r7, #36]	; 0x24
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368c:	429a      	cmp	r2, r3
 800368e:	dbc4      	blt.n	800361a <LTC681x_check_pec+0x3a>
		  }
		break;
 8003690:	e144      	b.n	800391c <LTC681x_check_pec+0x33c>

		case CFGRB:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003692:	2300      	movs	r3, #0
 8003694:	623b      	str	r3, [r7, #32]
 8003696:	e036      	b.n	8003706 <LTC681x_check_pec+0x126>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configb.rx_pec_match;
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	22e8      	movs	r2, #232	; 0xe8
 800369c:	fb02 f303 	mul.w	r3, r2, r3
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	4413      	add	r3, r2
 80036a4:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	22e8      	movs	r2, #232	; 0xe8
 80036ac:	fb02 f303 	mul.w	r3, r2, r3
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	4413      	add	r3, r2
 80036b4:	7f5b      	ldrb	r3, [r3, #29]
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	20e8      	movs	r0, #232	; 0xe8
 80036bc:	fb00 f303 	mul.w	r3, r0, r3
 80036c0:	6838      	ldr	r0, [r7, #0]
 80036c2:	4403      	add	r3, r0
 80036c4:	440a      	add	r2, r1
 80036c6:	b292      	uxth	r2, r2
 80036c8:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configb.rx_pec_match;
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	22e8      	movs	r2, #232	; 0xe8
 80036d0:	fb02 f303 	mul.w	r3, r2, r3
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	4413      	add	r3, r2
 80036d8:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	22e8      	movs	r2, #232	; 0xe8
 80036e0:	fb02 f303 	mul.w	r3, r2, r3
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	4413      	add	r3, r2
 80036e8:	7f5b      	ldrb	r3, [r3, #29]
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	20e8      	movs	r0, #232	; 0xe8
 80036f0:	fb00 f303 	mul.w	r3, r0, r3
 80036f4:	6838      	ldr	r0, [r7, #0]
 80036f6:	4403      	add	r3, r0
 80036f8:	440a      	add	r2, r1
 80036fa:	b292      	uxth	r2, r2
 80036fc:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	3301      	adds	r3, #1
 8003704:	623b      	str	r3, [r7, #32]
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	6a3a      	ldr	r2, [r7, #32]
 800370a:	429a      	cmp	r2, r3
 800370c:	dbc4      	blt.n	8003698 <LTC681x_check_pec+0xb8>
		  }
		break;
 800370e:	e105      	b.n	800391c <LTC681x_check_pec+0x33c>
		case CELL:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003710:	2300      	movs	r3, #0
 8003712:	61fb      	str	r3, [r7, #28]
 8003714:	e050      	b.n	80037b8 <LTC681x_check_pec+0x1d8>
		  {
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 8003716:	2300      	movs	r3, #0
 8003718:	61bb      	str	r3, [r7, #24]
 800371a:	e043      	b.n	80037a4 <LTC681x_check_pec+0x1c4>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].cells.pec_match[i];
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	22e8      	movs	r2, #232	; 0xe8
 8003720:	fb02 f303 	mul.w	r3, r2, r3
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	4413      	add	r3, r2
 8003728:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	22e8      	movs	r2, #232	; 0xe8
 8003730:	fb02 f303 	mul.w	r3, r2, r3
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	441a      	add	r2, r3
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	4413      	add	r3, r2
 800373c:	3342      	adds	r3, #66	; 0x42
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	b29a      	uxth	r2, r3
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	20e8      	movs	r0, #232	; 0xe8
 8003746:	fb00 f303 	mul.w	r3, r0, r3
 800374a:	6838      	ldr	r0, [r7, #0]
 800374c:	4403      	add	r3, r0
 800374e:	440a      	add	r2, r1
 8003750:	b292      	uxth	r2, r2
 8003752:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.cell_pec[i] = ic[current_ic].crc_count.cell_pec[i] + ic[current_ic].cells.pec_match[i];
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	22e8      	movs	r2, #232	; 0xe8
 800375a:	fb02 f303 	mul.w	r3, r2, r3
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	441a      	add	r2, r3
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	3360      	adds	r3, #96	; 0x60
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	4413      	add	r3, r2
 800376a:	8899      	ldrh	r1, [r3, #4]
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	22e8      	movs	r2, #232	; 0xe8
 8003770:	fb02 f303 	mul.w	r3, r2, r3
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	441a      	add	r2, r3
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	4413      	add	r3, r2
 800377c:	3342      	adds	r3, #66	; 0x42
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	b29b      	uxth	r3, r3
 8003782:	69fa      	ldr	r2, [r7, #28]
 8003784:	20e8      	movs	r0, #232	; 0xe8
 8003786:	fb00 f202 	mul.w	r2, r0, r2
 800378a:	6838      	ldr	r0, [r7, #0]
 800378c:	4402      	add	r2, r0
 800378e:	440b      	add	r3, r1
 8003790:	b299      	uxth	r1, r3
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	3360      	adds	r3, #96	; 0x60
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4413      	add	r3, r2
 800379a:	460a      	mov	r2, r1
 800379c:	809a      	strh	r2, [r3, #4]
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	3301      	adds	r3, #1
 80037a2:	61bb      	str	r3, [r7, #24]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 80037aa:	461a      	mov	r2, r3
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	4293      	cmp	r3, r2
 80037b0:	dbb4      	blt.n	800371c <LTC681x_check_pec+0x13c>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	3301      	adds	r3, #1
 80037b6:	61fb      	str	r3, [r7, #28]
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	69fa      	ldr	r2, [r7, #28]
 80037bc:	429a      	cmp	r2, r3
 80037be:	dbaa      	blt.n	8003716 <LTC681x_check_pec+0x136>
			}
		  }
		break;
 80037c0:	e0ac      	b.n	800391c <LTC681x_check_pec+0x33c>
		case AUX:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	e04d      	b.n	8003864 <LTC681x_check_pec+0x284>
		  {
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 80037c8:	2300      	movs	r3, #0
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	e040      	b.n	8003850 <LTC681x_check_pec+0x270>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + (ic[current_ic].aux.pec_match[i]);
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	22e8      	movs	r2, #232	; 0xe8
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	4413      	add	r3, r2
 80037da:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	22e8      	movs	r2, #232	; 0xe8
 80037e2:	fb02 f303 	mul.w	r3, r2, r3
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	441a      	add	r2, r3
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4413      	add	r3, r2
 80037ee:	335a      	adds	r3, #90	; 0x5a
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	20e8      	movs	r0, #232	; 0xe8
 80037f8:	fb00 f303 	mul.w	r3, r0, r3
 80037fc:	6838      	ldr	r0, [r7, #0]
 80037fe:	4403      	add	r3, r0
 8003800:	440a      	add	r2, r1
 8003802:	b292      	uxth	r2, r2
 8003804:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.aux_pec[i] = ic[current_ic].crc_count.aux_pec[i] + (ic[current_ic].aux.pec_match[i]);
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	22e8      	movs	r2, #232	; 0xe8
 800380c:	fb02 f303 	mul.w	r3, r2, r3
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	4413      	add	r3, r2
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	3268      	adds	r2, #104	; 0x68
 8003818:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	22e8      	movs	r2, #232	; 0xe8
 8003820:	fb02 f303 	mul.w	r3, r2, r3
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	441a      	add	r2, r3
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4413      	add	r3, r2
 800382c:	335a      	adds	r3, #90	; 0x5a
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	b29a      	uxth	r2, r3
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	20e8      	movs	r0, #232	; 0xe8
 8003836:	fb00 f303 	mul.w	r3, r0, r3
 800383a:	6838      	ldr	r0, [r7, #0]
 800383c:	4403      	add	r3, r0
 800383e:	440a      	add	r2, r1
 8003840:	b291      	uxth	r1, r2
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	3268      	adds	r2, #104	; 0x68
 8003846:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	3301      	adds	r3, #1
 800384e:	613b      	str	r3, [r7, #16]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8003856:	461a      	mov	r2, r3
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4293      	cmp	r3, r2
 800385c:	dbb7      	blt.n	80037ce <LTC681x_check_pec+0x1ee>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	3301      	adds	r3, #1
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	429a      	cmp	r2, r3
 800386a:	dbad      	blt.n	80037c8 <LTC681x_check_pec+0x1e8>
			}
		  }

		break;
 800386c:	e056      	b.n	800391c <LTC681x_check_pec+0x33c>
		case STAT:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800386e:	2300      	movs	r3, #0
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	e04d      	b.n	8003910 <LTC681x_check_pec+0x330>
		  {

			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8003874:	2300      	movs	r3, #0
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	e040      	b.n	80038fc <LTC681x_check_pec+0x31c>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].stat.pec_match[i];
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	22e8      	movs	r2, #232	; 0xe8
 800387e:	fb02 f303 	mul.w	r3, r2, r3
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	4413      	add	r3, r2
 8003886:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	22e8      	movs	r2, #232	; 0xe8
 800388e:	fb02 f303 	mul.w	r3, r2, r3
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	441a      	add	r2, r3
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	4413      	add	r3, r2
 800389a:	336b      	adds	r3, #107	; 0x6b
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	20e8      	movs	r0, #232	; 0xe8
 80038a4:	fb00 f303 	mul.w	r3, r0, r3
 80038a8:	6838      	ldr	r0, [r7, #0]
 80038aa:	4403      	add	r3, r0
 80038ac:	440a      	add	r2, r1
 80038ae:	b292      	uxth	r2, r2
 80038b0:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.stat_pec[i] = ic[current_ic].crc_count.stat_pec[i] + ic[current_ic].stat.pec_match[i];
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	22e8      	movs	r2, #232	; 0xe8
 80038b8:	fb02 f303 	mul.w	r3, r2, r3
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	4413      	add	r3, r2
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	326c      	adds	r2, #108	; 0x6c
 80038c4:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	22e8      	movs	r2, #232	; 0xe8
 80038cc:	fb02 f303 	mul.w	r3, r2, r3
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	441a      	add	r2, r3
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4413      	add	r3, r2
 80038d8:	336b      	adds	r3, #107	; 0x6b
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	20e8      	movs	r0, #232	; 0xe8
 80038e2:	fb00 f303 	mul.w	r3, r0, r3
 80038e6:	6838      	ldr	r0, [r7, #0]
 80038e8:	4403      	add	r3, r0
 80038ea:	440a      	add	r2, r1
 80038ec:	b291      	uxth	r1, r2
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	326c      	adds	r2, #108	; 0x6c
 80038f2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	3301      	adds	r3, #1
 80038fa:	60bb      	str	r3, [r7, #8]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8003902:	3b01      	subs	r3, #1
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	429a      	cmp	r2, r3
 8003908:	dbb7      	blt.n	800387a <LTC681x_check_pec+0x29a>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	3301      	adds	r3, #1
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	79fb      	ldrb	r3, [r7, #7]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	429a      	cmp	r2, r3
 8003916:	dbad      	blt.n	8003874 <LTC681x_check_pec+0x294>
			}
		  }
		break;
 8003918:	e000      	b.n	800391c <LTC681x_check_pec+0x33c>
		default:
		break;
 800391a:	bf00      	nop
	}
}
 800391c:	bf00      	nop
 800391e:	372c      	adds	r7, #44	; 0x2c
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <LTC681x_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC681x_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that stores the data
							 )
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	6039      	str	r1, [r7, #0]
 8003932:	71fb      	strb	r3, [r7, #7]
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003934:	2300      	movs	r3, #0
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	e051      	b.n	80039de <LTC681x_reset_crc_count+0xb6>
	{
		ic[current_ic].crc_count.pec_count = 0;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	22e8      	movs	r2, #232	; 0xe8
 800393e:	fb02 f303 	mul.w	r3, r2, r3
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	4413      	add	r3, r2
 8003946:	2200      	movs	r2, #0
 8003948:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		ic[current_ic].crc_count.cfgr_pec = 0;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	22e8      	movs	r2, #232	; 0xe8
 8003950:	fb02 f303 	mul.w	r3, r2, r3
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	4413      	add	r3, r2
 8003958:	2200      	movs	r2, #0
 800395a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		for (int i=0; i<6; i++)
 800395e:	2300      	movs	r3, #0
 8003960:	613b      	str	r3, [r7, #16]
 8003962:	e00e      	b.n	8003982 <LTC681x_reset_crc_count+0x5a>
		{
			ic[current_ic].crc_count.cell_pec[i]=0;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	22e8      	movs	r2, #232	; 0xe8
 8003968:	fb02 f303 	mul.w	r3, r2, r3
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	441a      	add	r2, r3
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	3360      	adds	r3, #96	; 0x60
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	4413      	add	r3, r2
 8003978:	2200      	movs	r2, #0
 800397a:	809a      	strh	r2, [r3, #4]
		for (int i=0; i<6; i++)
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	3301      	adds	r3, #1
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	2b05      	cmp	r3, #5
 8003986:	dded      	ble.n	8003964 <LTC681x_reset_crc_count+0x3c>

		}
		for (int i=0; i<4; i++)
 8003988:	2300      	movs	r3, #0
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	e00d      	b.n	80039aa <LTC681x_reset_crc_count+0x82>
		{
			ic[current_ic].crc_count.aux_pec[i]=0;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	22e8      	movs	r2, #232	; 0xe8
 8003992:	fb02 f303 	mul.w	r3, r2, r3
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	4413      	add	r3, r2
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	3268      	adds	r2, #104	; 0x68
 800399e:	2100      	movs	r1, #0
 80039a0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int i=0; i<4; i++)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	3301      	adds	r3, #1
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b03      	cmp	r3, #3
 80039ae:	ddee      	ble.n	800398e <LTC681x_reset_crc_count+0x66>
		}
		for (int i=0; i<2; i++)
 80039b0:	2300      	movs	r3, #0
 80039b2:	60bb      	str	r3, [r7, #8]
 80039b4:	e00d      	b.n	80039d2 <LTC681x_reset_crc_count+0xaa>
		{
			ic[current_ic].crc_count.stat_pec[i]=0;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	22e8      	movs	r2, #232	; 0xe8
 80039ba:	fb02 f303 	mul.w	r3, r2, r3
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	4413      	add	r3, r2
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	326c      	adds	r2, #108	; 0x6c
 80039c6:	2100      	movs	r1, #0
 80039c8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int i=0; i<2; i++)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	3301      	adds	r3, #1
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	ddee      	ble.n	80039b6 <LTC681x_reset_crc_count+0x8e>
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	3301      	adds	r3, #1
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	79fb      	ldrb	r3, [r7, #7]
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	dba9      	blt.n	800393a <LTC681x_reset_crc_count+0x12>
		}
	}
}
 80039e6:	bf00      	nop
 80039e8:	bf00      	nop
 80039ea:	371c      	adds	r7, #28
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <LTC681x_init_cfg>:

/* Helper function to initialize CFG variables */
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that stores the data
					  )
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	6039      	str	r1, [r7, #0]
 80039fe:	71fb      	strb	r3, [r7, #7]
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8003a00:	2300      	movs	r3, #0
 8003a02:	73fb      	strb	r3, [r7, #15]
 8003a04:	e015      	b.n	8003a32 <LTC681x_init_cfg+0x3e>
	{
		for (int j =0; j<6; j++)
 8003a06:	2300      	movs	r3, #0
 8003a08:	60bb      	str	r3, [r7, #8]
 8003a0a:	e00c      	b.n	8003a26 <LTC681x_init_cfg+0x32>
		{
		  ic[current_ic].config.tx_data[j] = 0;
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	22e8      	movs	r2, #232	; 0xe8
 8003a10:	fb02 f303 	mul.w	r3, r2, r3
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	441a      	add	r2, r3
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	701a      	strb	r2, [r3, #0]
		for (int j =0; j<6; j++)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	3301      	adds	r3, #1
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b05      	cmp	r3, #5
 8003a2a:	ddef      	ble.n	8003a0c <LTC681x_init_cfg+0x18>
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	73fb      	strb	r3, [r7, #15]
 8003a32:	7bfa      	ldrb	r2, [r7, #15]
 8003a34:	79fb      	ldrb	r3, [r7, #7]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d3e5      	bcc.n	8003a06 <LTC681x_init_cfg+0x12>
		}
	}
}
 8003a3a:	bf00      	nop
 8003a3c:	bf00      	nop
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <LTC681x_set_cfgr>:
					 bool dcc[12], // The DCC bits
					 bool dcto[4], // The Dcto bits
					 uint16_t uv, // The UV value
					 uint16_t  ov // The OV value
					 )
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6039      	str	r1, [r7, #0]
 8003a50:	4611      	mov	r1, r2
 8003a52:	461a      	mov	r2, r3
 8003a54:	4603      	mov	r3, r0
 8003a56:	71fb      	strb	r3, [r7, #7]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	71bb      	strb	r3, [r7, #6]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	717b      	strb	r3, [r7, #5]
	LTC681x_set_cfgr_refon(nIC,ic,refon);
 8003a60:	79ba      	ldrb	r2, [r7, #6]
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	6839      	ldr	r1, [r7, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 f828 	bl	8003abc <LTC681x_set_cfgr_refon>
	LTC681x_set_cfgr_adcopt(nIC,ic,adcopt);
 8003a6c:	797a      	ldrb	r2, [r7, #5]
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	6839      	ldr	r1, [r7, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 f856 	bl	8003b24 <LTC681x_set_cfgr_adcopt>
	LTC681x_set_cfgr_gpio(nIC,ic,gpio);
 8003a78:	79fb      	ldrb	r3, [r7, #7]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	6839      	ldr	r1, [r7, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 f884 	bl	8003b8c <LTC681x_set_cfgr_gpio>
	LTC681x_set_cfgr_dis(nIC,ic,dcc);
 8003a84:	79fb      	ldrb	r3, [r7, #7]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	6839      	ldr	r1, [r7, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 f8ce 	bl	8003c2c <LTC681x_set_cfgr_dis>
	LTC681x_set_cfgr_dcto(nIC,ic,dcto);
 8003a90:	79fb      	ldrb	r3, [r7, #7]
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	6839      	ldr	r1, [r7, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 f957 	bl	8003d4a <LTC681x_set_cfgr_dcto>
	LTC681x_set_cfgr_uv(nIC, ic, uv);
 8003a9c:	8bba      	ldrh	r2, [r7, #28]
 8003a9e:	79fb      	ldrb	r3, [r7, #7]
 8003aa0:	6839      	ldr	r1, [r7, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 f9a1 	bl	8003dea <LTC681x_set_cfgr_uv>
	LTC681x_set_cfgr_ov(nIC, ic, ov);
 8003aa8:	8c3a      	ldrh	r2, [r7, #32]
 8003aaa:	79fb      	ldrb	r3, [r7, #7]
 8003aac:	6839      	ldr	r1, [r7, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 f9e1 	bl	8003e76 <LTC681x_set_cfgr_ov>
}
 8003ab4:	bf00      	nop
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <LTC681x_set_cfgr_refon>:

/* Helper function to set the REFON bit */
void LTC681x_set_cfgr_refon(uint8_t nIC, cell_asic *ic, bool refon)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	6039      	str	r1, [r7, #0]
 8003ac6:	71fb      	strb	r3, [r7, #7]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	71bb      	strb	r3, [r7, #6]
	if (refon) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x04;
 8003acc:	79bb      	ldrb	r3, [r7, #6]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d011      	beq.n	8003af6 <LTC681x_set_cfgr_refon+0x3a>
 8003ad2:	79fb      	ldrb	r3, [r7, #7]
 8003ad4:	22e8      	movs	r2, #232	; 0xe8
 8003ad6:	fb02 f303 	mul.w	r3, r2, r3
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	4413      	add	r3, r2
 8003ade:	781a      	ldrb	r2, [r3, #0]
 8003ae0:	79fb      	ldrb	r3, [r7, #7]
 8003ae2:	21e8      	movs	r1, #232	; 0xe8
 8003ae4:	fb01 f303 	mul.w	r3, r1, r3
 8003ae8:	6839      	ldr	r1, [r7, #0]
 8003aea:	440b      	add	r3, r1
 8003aec:	f042 0204 	orr.w	r2, r2, #4
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
}
 8003af4:	e010      	b.n	8003b18 <LTC681x_set_cfgr_refon+0x5c>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	22e8      	movs	r2, #232	; 0xe8
 8003afa:	fb02 f303 	mul.w	r3, r2, r3
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	4413      	add	r3, r2
 8003b02:	781a      	ldrb	r2, [r3, #0]
 8003b04:	79fb      	ldrb	r3, [r7, #7]
 8003b06:	21e8      	movs	r1, #232	; 0xe8
 8003b08:	fb01 f303 	mul.w	r3, r1, r3
 8003b0c:	6839      	ldr	r1, [r7, #0]
 8003b0e:	440b      	add	r3, r1
 8003b10:	f022 0204 	bic.w	r2, r2, #4
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	701a      	strb	r2, [r3, #0]
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <LTC681x_set_cfgr_adcopt>:

/* Helper function to set the ADCOPT bit */
void LTC681x_set_cfgr_adcopt(uint8_t nIC, cell_asic *ic, bool adcopt)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	6039      	str	r1, [r7, #0]
 8003b2e:	71fb      	strb	r3, [r7, #7]
 8003b30:	4613      	mov	r3, r2
 8003b32:	71bb      	strb	r3, [r7, #6]
	if (adcopt) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x01;
 8003b34:	79bb      	ldrb	r3, [r7, #6]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d011      	beq.n	8003b5e <LTC681x_set_cfgr_adcopt+0x3a>
 8003b3a:	79fb      	ldrb	r3, [r7, #7]
 8003b3c:	22e8      	movs	r2, #232	; 0xe8
 8003b3e:	fb02 f303 	mul.w	r3, r2, r3
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	4413      	add	r3, r2
 8003b46:	781a      	ldrb	r2, [r3, #0]
 8003b48:	79fb      	ldrb	r3, [r7, #7]
 8003b4a:	21e8      	movs	r1, #232	; 0xe8
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	6839      	ldr	r1, [r7, #0]
 8003b52:	440b      	add	r3, r1
 8003b54:	f042 0201 	orr.w	r2, r2, #1
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
}
 8003b5c:	e010      	b.n	8003b80 <LTC681x_set_cfgr_adcopt+0x5c>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
 8003b5e:	79fb      	ldrb	r3, [r7, #7]
 8003b60:	22e8      	movs	r2, #232	; 0xe8
 8003b62:	fb02 f303 	mul.w	r3, r2, r3
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	4413      	add	r3, r2
 8003b6a:	781a      	ldrb	r2, [r3, #0]
 8003b6c:	79fb      	ldrb	r3, [r7, #7]
 8003b6e:	21e8      	movs	r1, #232	; 0xe8
 8003b70:	fb01 f303 	mul.w	r3, r1, r3
 8003b74:	6839      	ldr	r1, [r7, #0]
 8003b76:	440b      	add	r3, r1
 8003b78:	f022 0201 	bic.w	r2, r2, #1
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	701a      	strb	r2, [r3, #0]
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <LTC681x_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void LTC681x_set_cfgr_gpio(uint8_t nIC, cell_asic *ic,bool gpio[5])
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	4603      	mov	r3, r0
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
 8003b98:	73fb      	strb	r3, [r7, #15]
	for (int i =0; i<5; i++)
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	e03b      	b.n	8003c18 <LTC681x_set_cfgr_gpio+0x8c>
	{
		if (gpio[i])ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|(0x01<<(i+3));
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d018      	beq.n	8003bde <LTC681x_set_cfgr_gpio+0x52>
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
 8003bae:	22e8      	movs	r2, #232	; 0xe8
 8003bb0:	fb02 f303 	mul.w	r3, r2, r3
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	b25a      	sxtb	r2, r3
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	3303      	adds	r3, #3
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc6:	b25b      	sxtb	r3, r3
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	b259      	sxtb	r1, r3
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	22e8      	movs	r2, #232	; 0xe8
 8003bd0:	fb02 f303 	mul.w	r3, r2, r3
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	b2ca      	uxtb	r2, r1
 8003bda:	701a      	strb	r2, [r3, #0]
 8003bdc:	e019      	b.n	8003c12 <LTC681x_set_cfgr_gpio+0x86>
		else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&(~(0x01<<(i+3)));
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
 8003be0:	22e8      	movs	r2, #232	; 0xe8
 8003be2:	fb02 f303 	mul.w	r3, r2, r3
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	4413      	add	r3, r2
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	b25a      	sxtb	r2, r3
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	3303      	adds	r3, #3
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf8:	b25b      	sxtb	r3, r3
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	b25b      	sxtb	r3, r3
 8003bfe:	4013      	ands	r3, r2
 8003c00:	b259      	sxtb	r1, r3
 8003c02:	7bfb      	ldrb	r3, [r7, #15]
 8003c04:	22e8      	movs	r2, #232	; 0xe8
 8003c06:	fb02 f303 	mul.w	r3, r2, r3
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	b2ca      	uxtb	r2, r1
 8003c10:	701a      	strb	r2, [r3, #0]
	for (int i =0; i<5; i++)
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	3301      	adds	r3, #1
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	ddc0      	ble.n	8003ba0 <LTC681x_set_cfgr_gpio+0x14>
	}
}
 8003c1e:	bf00      	nop
 8003c20:	bf00      	nop
 8003c22:	371c      	adds	r7, #28
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <LTC681x_set_cfgr_dis>:

/* Helper function to control discharge */
void LTC681x_set_cfgr_dis(uint8_t nIC, cell_asic *ic,bool dcc[12])
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	4603      	mov	r3, r0
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
 8003c38:	73fb      	strb	r3, [r7, #15]
	for (int i =0; i<8; i++)
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	e039      	b.n	8003cb4 <LTC681x_set_cfgr_dis+0x88>
	{
		if (dcc[i])ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]|(0x01<<i);
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	4413      	add	r3, r2
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d017      	beq.n	8003c7c <LTC681x_set_cfgr_dis+0x50>
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
 8003c4e:	22e8      	movs	r2, #232	; 0xe8
 8003c50:	fb02 f303 	mul.w	r3, r2, r3
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	4413      	add	r3, r2
 8003c58:	791b      	ldrb	r3, [r3, #4]
 8003c5a:	b25a      	sxtb	r2, r3
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	fa01 f303 	lsl.w	r3, r1, r3
 8003c64:	b25b      	sxtb	r3, r3
 8003c66:	4313      	orrs	r3, r2
 8003c68:	b259      	sxtb	r1, r3
 8003c6a:	7bfb      	ldrb	r3, [r7, #15]
 8003c6c:	22e8      	movs	r2, #232	; 0xe8
 8003c6e:	fb02 f303 	mul.w	r3, r2, r3
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	4413      	add	r3, r2
 8003c76:	b2ca      	uxtb	r2, r1
 8003c78:	711a      	strb	r2, [r3, #4]
 8003c7a:	e018      	b.n	8003cae <LTC681x_set_cfgr_dis+0x82>
		else ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]& (~(0x01<<i));
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
 8003c7e:	22e8      	movs	r2, #232	; 0xe8
 8003c80:	fb02 f303 	mul.w	r3, r2, r3
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	4413      	add	r3, r2
 8003c88:	791b      	ldrb	r3, [r3, #4]
 8003c8a:	b25a      	sxtb	r2, r3
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	fa01 f303 	lsl.w	r3, r1, r3
 8003c94:	b25b      	sxtb	r3, r3
 8003c96:	43db      	mvns	r3, r3
 8003c98:	b25b      	sxtb	r3, r3
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	b259      	sxtb	r1, r3
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	22e8      	movs	r2, #232	; 0xe8
 8003ca2:	fb02 f303 	mul.w	r3, r2, r3
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	4413      	add	r3, r2
 8003caa:	b2ca      	uxtb	r2, r1
 8003cac:	711a      	strb	r2, [r3, #4]
	for (int i =0; i<8; i++)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	2b07      	cmp	r3, #7
 8003cb8:	ddc2      	ble.n	8003c40 <LTC681x_set_cfgr_dis+0x14>
	}
	for (int i =0; i<4; i++)
 8003cba:	2300      	movs	r3, #0
 8003cbc:	613b      	str	r3, [r7, #16]
 8003cbe:	e03a      	b.n	8003d36 <LTC681x_set_cfgr_dis+0x10a>
	{
		if (dcc[i+8])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<i);
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	3308      	adds	r3, #8
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d017      	beq.n	8003cfe <LTC681x_set_cfgr_dis+0xd2>
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
 8003cd0:	22e8      	movs	r2, #232	; 0xe8
 8003cd2:	fb02 f303 	mul.w	r3, r2, r3
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	4413      	add	r3, r2
 8003cda:	795b      	ldrb	r3, [r3, #5]
 8003cdc:	b25a      	sxtb	r2, r3
 8003cde:	2101      	movs	r1, #1
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce6:	b25b      	sxtb	r3, r3
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	b259      	sxtb	r1, r3
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
 8003cee:	22e8      	movs	r2, #232	; 0xe8
 8003cf0:	fb02 f303 	mul.w	r3, r2, r3
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	b2ca      	uxtb	r2, r1
 8003cfa:	715a      	strb	r2, [r3, #5]
 8003cfc:	e018      	b.n	8003d30 <LTC681x_set_cfgr_dis+0x104>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<i));
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
 8003d00:	22e8      	movs	r2, #232	; 0xe8
 8003d02:	fb02 f303 	mul.w	r3, r2, r3
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	4413      	add	r3, r2
 8003d0a:	795b      	ldrb	r3, [r3, #5]
 8003d0c:	b25a      	sxtb	r2, r3
 8003d0e:	2101      	movs	r1, #1
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	fa01 f303 	lsl.w	r3, r1, r3
 8003d16:	b25b      	sxtb	r3, r3
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	b25b      	sxtb	r3, r3
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	b259      	sxtb	r1, r3
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
 8003d22:	22e8      	movs	r2, #232	; 0xe8
 8003d24:	fb02 f303 	mul.w	r3, r2, r3
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	b2ca      	uxtb	r2, r1
 8003d2e:	715a      	strb	r2, [r3, #5]
	for (int i =0; i<4; i++)
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	3301      	adds	r3, #1
 8003d34:	613b      	str	r3, [r7, #16]
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	ddc1      	ble.n	8003cc0 <LTC681x_set_cfgr_dis+0x94>
	}
}
 8003d3c:	bf00      	nop
 8003d3e:	bf00      	nop
 8003d40:	371c      	adds	r7, #28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <LTC681x_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic,bool dcto[4])
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b087      	sub	sp, #28
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	4603      	mov	r3, r0
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	607a      	str	r2, [r7, #4]
 8003d56:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<4;i++)
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	e03b      	b.n	8003dd6 <LTC681x_set_cfgr_dcto+0x8c>
	{
		if(dcto[i])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<(i+4));
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	4413      	add	r3, r2
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d018      	beq.n	8003d9c <LTC681x_set_cfgr_dcto+0x52>
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
 8003d6c:	22e8      	movs	r2, #232	; 0xe8
 8003d6e:	fb02 f303 	mul.w	r3, r2, r3
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	4413      	add	r3, r2
 8003d76:	795b      	ldrb	r3, [r3, #5]
 8003d78:	b25a      	sxtb	r2, r3
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	2101      	movs	r1, #1
 8003d80:	fa01 f303 	lsl.w	r3, r1, r3
 8003d84:	b25b      	sxtb	r3, r3
 8003d86:	4313      	orrs	r3, r2
 8003d88:	b259      	sxtb	r1, r3
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
 8003d8c:	22e8      	movs	r2, #232	; 0xe8
 8003d8e:	fb02 f303 	mul.w	r3, r2, r3
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	4413      	add	r3, r2
 8003d96:	b2ca      	uxtb	r2, r1
 8003d98:	715a      	strb	r2, [r3, #5]
 8003d9a:	e019      	b.n	8003dd0 <LTC681x_set_cfgr_dcto+0x86>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<(i+4)));
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
 8003d9e:	22e8      	movs	r2, #232	; 0xe8
 8003da0:	fb02 f303 	mul.w	r3, r2, r3
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	4413      	add	r3, r2
 8003da8:	795b      	ldrb	r3, [r3, #5]
 8003daa:	b25a      	sxtb	r2, r3
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	3304      	adds	r3, #4
 8003db0:	2101      	movs	r1, #1
 8003db2:	fa01 f303 	lsl.w	r3, r1, r3
 8003db6:	b25b      	sxtb	r3, r3
 8003db8:	43db      	mvns	r3, r3
 8003dba:	b25b      	sxtb	r3, r3
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	b259      	sxtb	r1, r3
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
 8003dc2:	22e8      	movs	r2, #232	; 0xe8
 8003dc4:	fb02 f303 	mul.w	r3, r2, r3
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	4413      	add	r3, r2
 8003dcc:	b2ca      	uxtb	r2, r1
 8003dce:	715a      	strb	r2, [r3, #5]
	for(int i =0;i<4;i++)
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	ddc0      	ble.n	8003d5e <LTC681x_set_cfgr_dcto+0x14>
	}
}
 8003ddc:	bf00      	nop
 8003dde:	bf00      	nop
 8003de0:	371c      	adds	r7, #28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <LTC681x_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic *ic,uint16_t uv)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b085      	sub	sp, #20
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	4603      	mov	r3, r0
 8003df2:	6039      	str	r1, [r7, #0]
 8003df4:	71fb      	strb	r3, [r7, #7]
 8003df6:	4613      	mov	r3, r2
 8003df8:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (uv/16)-1;
 8003dfa:	88bb      	ldrh	r3, [r7, #4]
 8003dfc:	091b      	lsrs	r3, r3, #4
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	81fb      	strh	r3, [r7, #14]
	ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 8003e04:	79fb      	ldrb	r3, [r7, #7]
 8003e06:	22e8      	movs	r2, #232	; 0xe8
 8003e08:	fb02 f303 	mul.w	r3, r2, r3
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	4413      	add	r3, r2
 8003e10:	89fa      	ldrh	r2, [r7, #14]
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	705a      	strb	r2, [r3, #1]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0xF0;
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	22e8      	movs	r2, #232	; 0xe8
 8003e1a:	fb02 f303 	mul.w	r3, r2, r3
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	4413      	add	r3, r2
 8003e22:	789a      	ldrb	r2, [r3, #2]
 8003e24:	79fb      	ldrb	r3, [r7, #7]
 8003e26:	21e8      	movs	r1, #232	; 0xe8
 8003e28:	fb01 f303 	mul.w	r3, r1, r3
 8003e2c:	6839      	ldr	r1, [r7, #0]
 8003e2e:	440b      	add	r3, r1
 8003e30:	f022 020f 	bic.w	r2, r2, #15
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x0F00 & tmp)>>8);
 8003e38:	79fb      	ldrb	r3, [r7, #7]
 8003e3a:	22e8      	movs	r2, #232	; 0xe8
 8003e3c:	fb02 f303 	mul.w	r3, r2, r3
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	4413      	add	r3, r2
 8003e44:	789b      	ldrb	r3, [r3, #2]
 8003e46:	b25a      	sxtb	r2, r3
 8003e48:	89fb      	ldrh	r3, [r7, #14]
 8003e4a:	0a1b      	lsrs	r3, r3, #8
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	b25b      	sxtb	r3, r3
 8003e50:	f003 030f 	and.w	r3, r3, #15
 8003e54:	b25b      	sxtb	r3, r3
 8003e56:	4313      	orrs	r3, r2
 8003e58:	b259      	sxtb	r1, r3
 8003e5a:	79fb      	ldrb	r3, [r7, #7]
 8003e5c:	22e8      	movs	r2, #232	; 0xe8
 8003e5e:	fb02 f303 	mul.w	r3, r2, r3
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	4413      	add	r3, r2
 8003e66:	b2ca      	uxtb	r2, r1
 8003e68:	709a      	strb	r2, [r3, #2]
}
 8003e6a:	bf00      	nop
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <LTC681x_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void LTC681x_set_cfgr_ov(uint8_t nIC, cell_asic *ic,uint16_t ov)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b085      	sub	sp, #20
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	6039      	str	r1, [r7, #0]
 8003e80:	71fb      	strb	r3, [r7, #7]
 8003e82:	4613      	mov	r3, r2
 8003e84:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (ov/16);
 8003e86:	88bb      	ldrh	r3, [r7, #4]
 8003e88:	091b      	lsrs	r3, r3, #4
 8003e8a:	81fb      	strh	r3, [r7, #14]
	ic[nIC].config.tx_data[3] = 0x00FF & (tmp>>4);
 8003e8c:	89fb      	ldrh	r3, [r7, #14]
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	b299      	uxth	r1, r3
 8003e92:	79fb      	ldrb	r3, [r7, #7]
 8003e94:	22e8      	movs	r2, #232	; 0xe8
 8003e96:	fb02 f303 	mul.w	r3, r2, r3
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	b2ca      	uxtb	r2, r1
 8003ea0:	70da      	strb	r2, [r3, #3]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0x0F;
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	22e8      	movs	r2, #232	; 0xe8
 8003ea6:	fb02 f303 	mul.w	r3, r2, r3
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	4413      	add	r3, r2
 8003eae:	789a      	ldrb	r2, [r3, #2]
 8003eb0:	79fb      	ldrb	r3, [r7, #7]
 8003eb2:	21e8      	movs	r1, #232	; 0xe8
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	6839      	ldr	r1, [r7, #0]
 8003eba:	440b      	add	r3, r1
 8003ebc:	f002 020f 	and.w	r2, r2, #15
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x000F & tmp)<<4);
 8003ec4:	79fb      	ldrb	r3, [r7, #7]
 8003ec6:	22e8      	movs	r2, #232	; 0xe8
 8003ec8:	fb02 f303 	mul.w	r3, r2, r3
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	4413      	add	r3, r2
 8003ed0:	789b      	ldrb	r3, [r3, #2]
 8003ed2:	b25a      	sxtb	r2, r3
 8003ed4:	89fb      	ldrh	r3, [r7, #14]
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	b25b      	sxtb	r3, r3
 8003eda:	4313      	orrs	r3, r2
 8003edc:	b259      	sxtb	r1, r3
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	22e8      	movs	r2, #232	; 0xe8
 8003ee2:	fb02 f303 	mul.w	r3, r2, r3
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	4413      	add	r3, r2
 8003eea:	b2ca      	uxtb	r2, r1
 8003eec:	709a      	strb	r2, [r3, #2]
}
 8003eee:	bf00      	nop
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <delay_u>:

// ********************************** Functions **********************************

// ******************** Delay ********************

void delay_u(uint16_t micro) {
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b082      	sub	sp, #8
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	4603      	mov	r3, r0
 8003f02:	80fb      	strh	r3, [r7, #6]
	FEB_Timer_Delay_Micro(micro);
 8003f04:	88fb      	ldrh	r3, [r7, #6]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fe fda2 	bl	8002a50 <FEB_Timer_Delay_Micro>
}
 8003f0c:	bf00      	nop
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <cs_low>:
	HAL_Delay(milli);
}

// ******************** SPI ********************

void cs_low(uint8_t pin) {
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8003f1e:	2200      	movs	r2, #0
 8003f20:	2108      	movs	r1, #8
 8003f22:	4803      	ldr	r0, [pc, #12]	; (8003f30 <cs_low+0x1c>)
 8003f24:	f002 fd1a 	bl	800695c <HAL_GPIO_WritePin>
}
 8003f28:	bf00      	nop
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40020800 	.word	0x40020800

08003f34 <cs_high>:

void cs_high(uint8_t pin) {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8003f3e:	2201      	movs	r2, #1
 8003f40:	2108      	movs	r1, #8
 8003f42:	4803      	ldr	r0, [pc, #12]	; (8003f50 <cs_high+0x1c>)
 8003f44:	f002 fd0a 	bl	800695c <HAL_GPIO_WritePin>
}
 8003f48:	bf00      	nop
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40020800 	.word	0x40020800

08003f54 <spi_write_array>:

void spi_write_array(uint8_t len, uint8_t data[]) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	6039      	str	r1, [r7, #0]
 8003f5e:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, data, len, 100);
 8003f60:	79fb      	ldrb	r3, [r7, #7]
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	2364      	movs	r3, #100	; 0x64
 8003f66:	6839      	ldr	r1, [r7, #0]
 8003f68:	4803      	ldr	r0, [pc, #12]	; (8003f78 <spi_write_array+0x24>)
 8003f6a:	f003 fb82 	bl	8007672 <HAL_SPI_Transmit>
}
 8003f6e:	bf00      	nop
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	20003360 	.word	0x20003360

08003f7c <spi_write_read>:

void spi_write_read(uint8_t tx_Data[], uint8_t tx_len, uint8_t *rx_data, uint8_t rx_len) {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	607a      	str	r2, [r7, #4]
 8003f86:	461a      	mov	r2, r3
 8003f88:	460b      	mov	r3, r1
 8003f8a:	72fb      	strb	r3, [r7, #11]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	72bb      	strb	r3, [r7, #10]
	for (uint8_t i = 0; i < tx_len; i++) {
 8003f90:	2300      	movs	r3, #0
 8003f92:	75fb      	strb	r3, [r7, #23]
 8003f94:	e00a      	b.n	8003fac <spi_write_read+0x30>
		HAL_SPI_Transmit(&hspi1, &tx_Data[i], 1, 100);
 8003f96:	7dfb      	ldrb	r3, [r7, #23]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	18d1      	adds	r1, r2, r3
 8003f9c:	2364      	movs	r3, #100	; 0x64
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	4810      	ldr	r0, [pc, #64]	; (8003fe4 <spi_write_read+0x68>)
 8003fa2:	f003 fb66 	bl	8007672 <HAL_SPI_Transmit>
	for (uint8_t i = 0; i < tx_len; i++) {
 8003fa6:	7dfb      	ldrb	r3, [r7, #23]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	75fb      	strb	r3, [r7, #23]
 8003fac:	7dfa      	ldrb	r2, [r7, #23]
 8003fae:	7afb      	ldrb	r3, [r7, #11]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d3f0      	bcc.n	8003f96 <spi_write_read+0x1a>
	}

	for (uint8_t i = 0; i < rx_len; i++) {
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	75bb      	strb	r3, [r7, #22]
 8003fb8:	e00a      	b.n	8003fd0 <spi_write_read+0x54>
		HAL_SPI_Receive(&hspi1, &rx_data[i], 1, 100);
 8003fba:	7dbb      	ldrb	r3, [r7, #22]
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	18d1      	adds	r1, r2, r3
 8003fc0:	2364      	movs	r3, #100	; 0x64
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	4807      	ldr	r0, [pc, #28]	; (8003fe4 <spi_write_read+0x68>)
 8003fc6:	f003 fc90 	bl	80078ea <HAL_SPI_Receive>
	for (uint8_t i = 0; i < rx_len; i++) {
 8003fca:	7dbb      	ldrb	r3, [r7, #22]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	75bb      	strb	r3, [r7, #22]
 8003fd0:	7dba      	ldrb	r2, [r7, #22]
 8003fd2:	7abb      	ldrb	r3, [r7, #10]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d3f0      	bcc.n	8003fba <spi_write_read+0x3e>
	}
}
 8003fd8:	bf00      	nop
 8003fda:	bf00      	nop
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20003360 	.word	0x20003360

08003fe8 <spi_read_byte>:

uint8_t spi_read_byte(uint8_t tx_dat) {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	71fb      	strb	r3, [r7, #7]
  uint8_t data;
  HAL_SPI_Receive(&hspi1, &data, 1, 100);
 8003ff2:	f107 010f 	add.w	r1, r7, #15
 8003ff6:	2364      	movs	r3, #100	; 0x64
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	4804      	ldr	r0, [pc, #16]	; (800400c <spi_read_byte+0x24>)
 8003ffc:	f003 fc75 	bl	80078ea <HAL_SPI_Receive>
  return data;
 8004000:	7bfb      	ldrb	r3, [r7, #15]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	20003360 	.word	0x20003360

08004010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004014:	f001 f802 	bl	800501c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004018:	f000 f84c 	bl	80040b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800401c:	f000 fba2 	bl	8004764 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004020:	f000 fb76 	bl	8004710 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8004024:	f000 f958 	bl	80042d8 <MX_CAN1_Init>
  MX_SPI1_Init();
 8004028:	f000 f9c2 	bl	80043b0 <MX_SPI1_Init>
  MX_CAN2_Init();
 800402c:	f000 f98a 	bl	8004344 <MX_CAN2_Init>
  MX_TIM1_Init();
 8004030:	f000 f9f4 	bl	800441c <MX_TIM1_Init>
  MX_TIM2_Init();
 8004034:	f000 fa9e 	bl	8004574 <MX_TIM2_Init>
  MX_TIM4_Init();
 8004038:	f000 fb1c 	bl	8004674 <MX_TIM4_Init>
  MX_ADC1_Init();
 800403c:	f000 f8a8 	bl	8004190 <MX_ADC1_Init>
  MX_ADC2_Init();
 8004040:	f000 f8f8 	bl	8004234 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  FEB_BMS_AIR_Open();
 8004044:	f7fc ffc2 	bl	8000fcc <FEB_BMS_AIR_Open>
  FEB_BMS_Shutdown_Startup();
 8004048:	f7fc ffd8 	bl	8000ffc <FEB_BMS_Shutdown_Startup>
  FEB_BMS_State_Validate();
 800404c:	f7fd f82c 	bl	80010a8 <FEB_BMS_State_Validate>

  FEB_LTC6811_Init();
 8004050:	f7fd fd76 	bl	8001b40 <FEB_LTC6811_Init>
  FEB_CAN_Init();
 8004054:	f7fd f830 	bl	80010b8 <FEB_CAN_Init>
  FEB_CAN_Charger_Init();
 8004058:	f7fd f898 	bl	800118c <FEB_CAN_Charger_Init>
  FEB_Timer_Init();
 800405c:	f7fe fcee 	bl	8002a3c <FEB_Timer_Init>
  FEB_Fan_Init();
 8004060:	f7fd fbb4 	bl	80017cc <FEB_Fan_Init>

  HAL_Delay(1000);
 8004064:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004068:	f001 f84a 	bl	8005100 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // *********************** Reset State ***********************
    FEB_LTC6811_Clear_Voltage();
 800406c:	f7fe f856 	bl	800211c <FEB_LTC6811_Clear_Voltage>
    FEB_LTC6811_Clear_Temperature();
 8004070:	f7fe fc32 	bl	80028d8 <FEB_LTC6811_Clear_Temperature>

    // *********************** Cell Voltage ***********************
    FEB_LTC6811_Poll_Voltage();
 8004074:	f7fd fdd2 	bl	8001c1c <FEB_LTC6811_Poll_Voltage>
      FEB_LTC6811_Validate_Voltage();
 8004078:	f7fd ff4e 	bl	8001f18 <FEB_LTC6811_Validate_Voltage>
    FEB_LTC6811_UART_Transmit_Voltage();
 800407c:	f7fd ff9a 	bl	8001fb4 <FEB_LTC6811_UART_Transmit_Voltage>

    // *********************** Cell Temperature ***********************
    FEB_LTC6811_Poll_Temperature();
 8004080:	f7fe f87a 	bl	8002178 <FEB_LTC6811_Poll_Temperature>
      FEB_LTC6811_Validate_Temperature();
 8004084:	f7fe fb32 	bl	80026ec <FEB_LTC6811_Validate_Temperature>
    FEB_LTC6811_UART_Transmit_Temperature();
 8004088:	f7fe fbaa 	bl	80027e0 <FEB_LTC6811_UART_Transmit_Temperature>

    // *********************** IVT ***********************
    FEB_CAN_IVT_Process();
 800408c:	f7fd fa14 	bl	80014b8 <FEB_CAN_IVT_Process>

    // *********************** Cell Balance ***********************
    FEB_LTC6811_Balance_Cells();
 8004090:	f7fd fe8a 	bl	8001da8 <FEB_LTC6811_Balance_Cells>
    FEB_LTC6811_UART_Transmit_Discharge();
 8004094:	f7fd febc 	bl	8001e10 <FEB_LTC6811_UART_Transmit_Discharge>

    // *********************** Charger ***********************
    FEB_CAN_Charger_Process(&hcan1);
 8004098:	4805      	ldr	r0, [pc, #20]	; (80040b0 <main+0xa0>)
 800409a:	f7fd f927 	bl	80012ec <FEB_CAN_Charger_Process>

    // *********************** Fan ***********************
    FEB_Fan_Process();
 800409e:	f7fd fca3 	bl	80019e8 <FEB_Fan_Process>

    // *********************** Inverter ***********************
    FEB_CAN_Inverter_Process();
 80040a2:	f7fd fb51 	bl	8001748 <FEB_CAN_Inverter_Process>

    if (FEB_CAN_CHARGER_STATE == 1) {
      HAL_Delay(1000);	// 1Hz
    } else {
      HAL_Delay(200);		// 5Hz
 80040a6:	20c8      	movs	r0, #200	; 0xc8
 80040a8:	f001 f82a 	bl	8005100 <HAL_Delay>
    FEB_LTC6811_Clear_Voltage();
 80040ac:	e7de      	b.n	800406c <main+0x5c>
 80040ae:	bf00      	nop
 80040b0:	20003310 	.word	0x20003310

080040b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b094      	sub	sp, #80	; 0x50
 80040b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040ba:	f107 031c 	add.w	r3, r7, #28
 80040be:	2234      	movs	r2, #52	; 0x34
 80040c0:	2100      	movs	r1, #0
 80040c2:	4618      	mov	r0, r3
 80040c4:	f005 fb32 	bl	800972c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040c8:	f107 0308 	add.w	r3, r7, #8
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	605a      	str	r2, [r3, #4]
 80040d2:	609a      	str	r2, [r3, #8]
 80040d4:	60da      	str	r2, [r3, #12]
 80040d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80040d8:	2300      	movs	r3, #0
 80040da:	607b      	str	r3, [r7, #4]
 80040dc:	4b2a      	ldr	r3, [pc, #168]	; (8004188 <SystemClock_Config+0xd4>)
 80040de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e0:	4a29      	ldr	r2, [pc, #164]	; (8004188 <SystemClock_Config+0xd4>)
 80040e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e6:	6413      	str	r3, [r2, #64]	; 0x40
 80040e8:	4b27      	ldr	r3, [pc, #156]	; (8004188 <SystemClock_Config+0xd4>)
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f0:	607b      	str	r3, [r7, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80040f4:	2300      	movs	r3, #0
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	4b24      	ldr	r3, [pc, #144]	; (800418c <SystemClock_Config+0xd8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004100:	4a22      	ldr	r2, [pc, #136]	; (800418c <SystemClock_Config+0xd8>)
 8004102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	4b20      	ldr	r3, [pc, #128]	; (800418c <SystemClock_Config+0xd8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004110:	603b      	str	r3, [r7, #0]
 8004112:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004114:	2302      	movs	r3, #2
 8004116:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004118:	2301      	movs	r3, #1
 800411a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800411c:	2310      	movs	r3, #16
 800411e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004120:	2302      	movs	r3, #2
 8004122:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004124:	2300      	movs	r3, #0
 8004126:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004128:	2308      	movs	r3, #8
 800412a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 800412c:	2380      	movs	r3, #128	; 0x80
 800412e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004130:	2302      	movs	r3, #2
 8004132:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004134:	2302      	movs	r3, #2
 8004136:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004138:	2302      	movs	r3, #2
 800413a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800413c:	f107 031c 	add.w	r3, r7, #28
 8004140:	4618      	mov	r0, r3
 8004142:	f002 ff6f 	bl	8007024 <HAL_RCC_OscConfig>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800414c:	f000 fb74 	bl	8004838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004150:	230f      	movs	r3, #15
 8004152:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004154:	2302      	movs	r3, #2
 8004156:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004158:	2300      	movs	r3, #0
 800415a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800415c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004160:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004166:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004168:	f107 0308 	add.w	r3, r7, #8
 800416c:	2104      	movs	r1, #4
 800416e:	4618      	mov	r0, r3
 8004170:	f002 fc0e 	bl	8006990 <HAL_RCC_ClockConfig>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800417a:	f000 fb5d 	bl	8004838 <Error_Handler>
  }
}
 800417e:	bf00      	nop
 8004180:	3750      	adds	r7, #80	; 0x50
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	40023800 	.word	0x40023800
 800418c:	40007000 	.word	0x40007000

08004190 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004196:	463b      	mov	r3, r7
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	609a      	str	r2, [r3, #8]
 80041a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80041a2:	4b21      	ldr	r3, [pc, #132]	; (8004228 <MX_ADC1_Init+0x98>)
 80041a4:	4a21      	ldr	r2, [pc, #132]	; (800422c <MX_ADC1_Init+0x9c>)
 80041a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80041a8:	4b1f      	ldr	r3, [pc, #124]	; (8004228 <MX_ADC1_Init+0x98>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80041ae:	4b1e      	ldr	r3, [pc, #120]	; (8004228 <MX_ADC1_Init+0x98>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80041b4:	4b1c      	ldr	r3, [pc, #112]	; (8004228 <MX_ADC1_Init+0x98>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80041ba:	4b1b      	ldr	r3, [pc, #108]	; (8004228 <MX_ADC1_Init+0x98>)
 80041bc:	2200      	movs	r2, #0
 80041be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80041c0:	4b19      	ldr	r3, [pc, #100]	; (8004228 <MX_ADC1_Init+0x98>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80041c8:	4b17      	ldr	r3, [pc, #92]	; (8004228 <MX_ADC1_Init+0x98>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80041ce:	4b16      	ldr	r3, [pc, #88]	; (8004228 <MX_ADC1_Init+0x98>)
 80041d0:	4a17      	ldr	r2, [pc, #92]	; (8004230 <MX_ADC1_Init+0xa0>)
 80041d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80041d4:	4b14      	ldr	r3, [pc, #80]	; (8004228 <MX_ADC1_Init+0x98>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80041da:	4b13      	ldr	r3, [pc, #76]	; (8004228 <MX_ADC1_Init+0x98>)
 80041dc:	2201      	movs	r2, #1
 80041de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80041e0:	4b11      	ldr	r3, [pc, #68]	; (8004228 <MX_ADC1_Init+0x98>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80041e8:	4b0f      	ldr	r3, [pc, #60]	; (8004228 <MX_ADC1_Init+0x98>)
 80041ea:	2201      	movs	r2, #1
 80041ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80041ee:	480e      	ldr	r0, [pc, #56]	; (8004228 <MX_ADC1_Init+0x98>)
 80041f0:	f000 ffaa 	bl	8005148 <HAL_ADC_Init>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80041fa:	f000 fb1d 	bl	8004838 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80041fe:	2308      	movs	r3, #8
 8004200:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004202:	2301      	movs	r3, #1
 8004204:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004206:	2300      	movs	r3, #0
 8004208:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800420a:	463b      	mov	r3, r7
 800420c:	4619      	mov	r1, r3
 800420e:	4806      	ldr	r0, [pc, #24]	; (8004228 <MX_ADC1_Init+0x98>)
 8004210:	f001 f948 	bl	80054a4 <HAL_ADC_ConfigChannel>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800421a:	f000 fb0d 	bl	8004838 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800421e:	bf00      	nop
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20003280 	.word	0x20003280
 800422c:	40012000 	.word	0x40012000
 8004230:	0f000001 	.word	0x0f000001

08004234 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800423a:	463b      	mov	r3, r7
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	605a      	str	r2, [r3, #4]
 8004242:	609a      	str	r2, [r3, #8]
 8004244:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004246:	4b21      	ldr	r3, [pc, #132]	; (80042cc <MX_ADC2_Init+0x98>)
 8004248:	4a21      	ldr	r2, [pc, #132]	; (80042d0 <MX_ADC2_Init+0x9c>)
 800424a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800424c:	4b1f      	ldr	r3, [pc, #124]	; (80042cc <MX_ADC2_Init+0x98>)
 800424e:	2200      	movs	r2, #0
 8004250:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004252:	4b1e      	ldr	r3, [pc, #120]	; (80042cc <MX_ADC2_Init+0x98>)
 8004254:	2200      	movs	r2, #0
 8004256:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8004258:	4b1c      	ldr	r3, [pc, #112]	; (80042cc <MX_ADC2_Init+0x98>)
 800425a:	2200      	movs	r2, #0
 800425c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800425e:	4b1b      	ldr	r3, [pc, #108]	; (80042cc <MX_ADC2_Init+0x98>)
 8004260:	2200      	movs	r2, #0
 8004262:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004264:	4b19      	ldr	r3, [pc, #100]	; (80042cc <MX_ADC2_Init+0x98>)
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800426c:	4b17      	ldr	r3, [pc, #92]	; (80042cc <MX_ADC2_Init+0x98>)
 800426e:	2200      	movs	r2, #0
 8004270:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004272:	4b16      	ldr	r3, [pc, #88]	; (80042cc <MX_ADC2_Init+0x98>)
 8004274:	4a17      	ldr	r2, [pc, #92]	; (80042d4 <MX_ADC2_Init+0xa0>)
 8004276:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004278:	4b14      	ldr	r3, [pc, #80]	; (80042cc <MX_ADC2_Init+0x98>)
 800427a:	2200      	movs	r2, #0
 800427c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800427e:	4b13      	ldr	r3, [pc, #76]	; (80042cc <MX_ADC2_Init+0x98>)
 8004280:	2201      	movs	r2, #1
 8004282:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8004284:	4b11      	ldr	r3, [pc, #68]	; (80042cc <MX_ADC2_Init+0x98>)
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800428c:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <MX_ADC2_Init+0x98>)
 800428e:	2201      	movs	r2, #1
 8004290:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004292:	480e      	ldr	r0, [pc, #56]	; (80042cc <MX_ADC2_Init+0x98>)
 8004294:	f000 ff58 	bl	8005148 <HAL_ADC_Init>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800429e:	f000 facb 	bl	8004838 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80042a2:	2309      	movs	r3, #9
 80042a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80042a6:	2301      	movs	r3, #1
 80042a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80042aa:	2300      	movs	r3, #0
 80042ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80042ae:	463b      	mov	r3, r7
 80042b0:	4619      	mov	r1, r3
 80042b2:	4806      	ldr	r0, [pc, #24]	; (80042cc <MX_ADC2_Init+0x98>)
 80042b4:	f001 f8f6 	bl	80054a4 <HAL_ADC_ConfigChannel>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80042be:	f000 fabb 	bl	8004838 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80042c2:	bf00      	nop
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	200032c8 	.word	0x200032c8
 80042d0:	40012100 	.word	0x40012100
 80042d4:	0f000001 	.word	0x0f000001

080042d8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80042dc:	4b17      	ldr	r3, [pc, #92]	; (800433c <MX_CAN1_Init+0x64>)
 80042de:	4a18      	ldr	r2, [pc, #96]	; (8004340 <MX_CAN1_Init+0x68>)
 80042e0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80042e2:	4b16      	ldr	r3, [pc, #88]	; (800433c <MX_CAN1_Init+0x64>)
 80042e4:	2210      	movs	r2, #16
 80042e6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80042e8:	4b14      	ldr	r3, [pc, #80]	; (800433c <MX_CAN1_Init+0x64>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80042ee:	4b13      	ldr	r3, [pc, #76]	; (800433c <MX_CAN1_Init+0x64>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80042f4:	4b11      	ldr	r3, [pc, #68]	; (800433c <MX_CAN1_Init+0x64>)
 80042f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80042fa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80042fc:	4b0f      	ldr	r3, [pc, #60]	; (800433c <MX_CAN1_Init+0x64>)
 80042fe:	2200      	movs	r2, #0
 8004300:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8004302:	4b0e      	ldr	r3, [pc, #56]	; (800433c <MX_CAN1_Init+0x64>)
 8004304:	2200      	movs	r2, #0
 8004306:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8004308:	4b0c      	ldr	r3, [pc, #48]	; (800433c <MX_CAN1_Init+0x64>)
 800430a:	2200      	movs	r2, #0
 800430c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800430e:	4b0b      	ldr	r3, [pc, #44]	; (800433c <MX_CAN1_Init+0x64>)
 8004310:	2200      	movs	r2, #0
 8004312:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8004314:	4b09      	ldr	r3, [pc, #36]	; (800433c <MX_CAN1_Init+0x64>)
 8004316:	2200      	movs	r2, #0
 8004318:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800431a:	4b08      	ldr	r3, [pc, #32]	; (800433c <MX_CAN1_Init+0x64>)
 800431c:	2200      	movs	r2, #0
 800431e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8004320:	4b06      	ldr	r3, [pc, #24]	; (800433c <MX_CAN1_Init+0x64>)
 8004322:	2200      	movs	r2, #0
 8004324:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8004326:	4805      	ldr	r0, [pc, #20]	; (800433c <MX_CAN1_Init+0x64>)
 8004328:	f001 faea 	bl	8005900 <HAL_CAN_Init>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8004332:	f000 fa81 	bl	8004838 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8004336:	bf00      	nop
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20003310 	.word	0x20003310
 8004340:	40006400 	.word	0x40006400

08004344 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8004348:	4b17      	ldr	r3, [pc, #92]	; (80043a8 <MX_CAN2_Init+0x64>)
 800434a:	4a18      	ldr	r2, [pc, #96]	; (80043ac <MX_CAN2_Init+0x68>)
 800434c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800434e:	4b16      	ldr	r3, [pc, #88]	; (80043a8 <MX_CAN2_Init+0x64>)
 8004350:	2210      	movs	r2, #16
 8004352:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8004354:	4b14      	ldr	r3, [pc, #80]	; (80043a8 <MX_CAN2_Init+0x64>)
 8004356:	2200      	movs	r2, #0
 8004358:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800435a:	4b13      	ldr	r3, [pc, #76]	; (80043a8 <MX_CAN2_Init+0x64>)
 800435c:	2200      	movs	r2, #0
 800435e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8004360:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <MX_CAN2_Init+0x64>)
 8004362:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004366:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8004368:	4b0f      	ldr	r3, [pc, #60]	; (80043a8 <MX_CAN2_Init+0x64>)
 800436a:	2200      	movs	r2, #0
 800436c:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800436e:	4b0e      	ldr	r3, [pc, #56]	; (80043a8 <MX_CAN2_Init+0x64>)
 8004370:	2200      	movs	r2, #0
 8004372:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8004374:	4b0c      	ldr	r3, [pc, #48]	; (80043a8 <MX_CAN2_Init+0x64>)
 8004376:	2200      	movs	r2, #0
 8004378:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800437a:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <MX_CAN2_Init+0x64>)
 800437c:	2200      	movs	r2, #0
 800437e:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8004380:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <MX_CAN2_Init+0x64>)
 8004382:	2200      	movs	r2, #0
 8004384:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8004386:	4b08      	ldr	r3, [pc, #32]	; (80043a8 <MX_CAN2_Init+0x64>)
 8004388:	2200      	movs	r2, #0
 800438a:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800438c:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <MX_CAN2_Init+0x64>)
 800438e:	2200      	movs	r2, #0
 8004390:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8004392:	4805      	ldr	r0, [pc, #20]	; (80043a8 <MX_CAN2_Init+0x64>)
 8004394:	f001 fab4 	bl	8005900 <HAL_CAN_Init>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 800439e:	f000 fa4b 	bl	8004838 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80043a2:	bf00      	nop
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	20003338 	.word	0x20003338
 80043ac:	40006800 	.word	0x40006800

080043b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80043b4:	4b17      	ldr	r3, [pc, #92]	; (8004414 <MX_SPI1_Init+0x64>)
 80043b6:	4a18      	ldr	r2, [pc, #96]	; (8004418 <MX_SPI1_Init+0x68>)
 80043b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80043ba:	4b16      	ldr	r3, [pc, #88]	; (8004414 <MX_SPI1_Init+0x64>)
 80043bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80043c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80043c2:	4b14      	ldr	r3, [pc, #80]	; (8004414 <MX_SPI1_Init+0x64>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80043c8:	4b12      	ldr	r3, [pc, #72]	; (8004414 <MX_SPI1_Init+0x64>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80043ce:	4b11      	ldr	r3, [pc, #68]	; (8004414 <MX_SPI1_Init+0x64>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80043d4:	4b0f      	ldr	r3, [pc, #60]	; (8004414 <MX_SPI1_Init+0x64>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80043da:	4b0e      	ldr	r3, [pc, #56]	; (8004414 <MX_SPI1_Init+0x64>)
 80043dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80043e2:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <MX_SPI1_Init+0x64>)
 80043e4:	2228      	movs	r2, #40	; 0x28
 80043e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043e8:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <MX_SPI1_Init+0x64>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80043ee:	4b09      	ldr	r3, [pc, #36]	; (8004414 <MX_SPI1_Init+0x64>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043f4:	4b07      	ldr	r3, [pc, #28]	; (8004414 <MX_SPI1_Init+0x64>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80043fa:	4b06      	ldr	r3, [pc, #24]	; (8004414 <MX_SPI1_Init+0x64>)
 80043fc:	220a      	movs	r2, #10
 80043fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004400:	4804      	ldr	r0, [pc, #16]	; (8004414 <MX_SPI1_Init+0x64>)
 8004402:	f003 f8ad 	bl	8007560 <HAL_SPI_Init>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800440c:	f000 fa14 	bl	8004838 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004410:	bf00      	nop
 8004412:	bd80      	pop	{r7, pc}
 8004414:	20003360 	.word	0x20003360
 8004418:	40013000 	.word	0x40013000

0800441c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b096      	sub	sp, #88	; 0x58
 8004420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004422:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	605a      	str	r2, [r3, #4]
 800442c:	609a      	str	r2, [r3, #8]
 800442e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004430:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800443a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	605a      	str	r2, [r3, #4]
 8004444:	609a      	str	r2, [r3, #8]
 8004446:	60da      	str	r2, [r3, #12]
 8004448:	611a      	str	r2, [r3, #16]
 800444a:	615a      	str	r2, [r3, #20]
 800444c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800444e:	1d3b      	adds	r3, r7, #4
 8004450:	2220      	movs	r2, #32
 8004452:	2100      	movs	r1, #0
 8004454:	4618      	mov	r0, r3
 8004456:	f005 f969 	bl	800972c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800445a:	4b44      	ldr	r3, [pc, #272]	; (800456c <MX_TIM1_Init+0x150>)
 800445c:	4a44      	ldr	r2, [pc, #272]	; (8004570 <MX_TIM1_Init+0x154>)
 800445e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004460:	4b42      	ldr	r3, [pc, #264]	; (800456c <MX_TIM1_Init+0x150>)
 8004462:	2200      	movs	r2, #0
 8004464:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004466:	4b41      	ldr	r3, [pc, #260]	; (800456c <MX_TIM1_Init+0x150>)
 8004468:	2200      	movs	r2, #0
 800446a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800446c:	4b3f      	ldr	r3, [pc, #252]	; (800456c <MX_TIM1_Init+0x150>)
 800446e:	22ff      	movs	r2, #255	; 0xff
 8004470:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004472:	4b3e      	ldr	r3, [pc, #248]	; (800456c <MX_TIM1_Init+0x150>)
 8004474:	2200      	movs	r2, #0
 8004476:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004478:	4b3c      	ldr	r3, [pc, #240]	; (800456c <MX_TIM1_Init+0x150>)
 800447a:	2200      	movs	r2, #0
 800447c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800447e:	4b3b      	ldr	r3, [pc, #236]	; (800456c <MX_TIM1_Init+0x150>)
 8004480:	2200      	movs	r2, #0
 8004482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004484:	4839      	ldr	r0, [pc, #228]	; (800456c <MX_TIM1_Init+0x150>)
 8004486:	f003 fe13 	bl	80080b0 <HAL_TIM_Base_Init>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8004490:	f000 f9d2 	bl	8004838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004498:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800449a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800449e:	4619      	mov	r1, r3
 80044a0:	4832      	ldr	r0, [pc, #200]	; (800456c <MX_TIM1_Init+0x150>)
 80044a2:	f004 f8a1 	bl	80085e8 <HAL_TIM_ConfigClockSource>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80044ac:	f000 f9c4 	bl	8004838 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80044b0:	482e      	ldr	r0, [pc, #184]	; (800456c <MX_TIM1_Init+0x150>)
 80044b2:	f003 feb5 	bl	8008220 <HAL_TIM_PWM_Init>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80044bc:	f000 f9bc 	bl	8004838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044c0:	2300      	movs	r3, #0
 80044c2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044c4:	2300      	movs	r3, #0
 80044c6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80044c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80044cc:	4619      	mov	r1, r3
 80044ce:	4827      	ldr	r0, [pc, #156]	; (800456c <MX_TIM1_Init+0x150>)
 80044d0:	f004 fc62 	bl	8008d98 <HAL_TIMEx_MasterConfigSynchronization>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80044da:	f000 f9ad 	bl	8004838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044de:	2360      	movs	r3, #96	; 0x60
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80044e2:	2300      	movs	r3, #0
 80044e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044e6:	2300      	movs	r3, #0
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80044ea:	2300      	movs	r3, #0
 80044ec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044ee:	2300      	movs	r3, #0
 80044f0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80044f2:	2300      	movs	r3, #0
 80044f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80044f6:	2300      	movs	r3, #0
 80044f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044fe:	2200      	movs	r2, #0
 8004500:	4619      	mov	r1, r3
 8004502:	481a      	ldr	r0, [pc, #104]	; (800456c <MX_TIM1_Init+0x150>)
 8004504:	f003 ffae 	bl	8008464 <HAL_TIM_PWM_ConfigChannel>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800450e:	f000 f993 	bl	8004838 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004516:	2204      	movs	r2, #4
 8004518:	4619      	mov	r1, r3
 800451a:	4814      	ldr	r0, [pc, #80]	; (800456c <MX_TIM1_Init+0x150>)
 800451c:	f003 ffa2 	bl	8008464 <HAL_TIM_PWM_ConfigChannel>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8004526:	f000 f987 	bl	8004838 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800452a:	2300      	movs	r3, #0
 800452c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800452e:	2300      	movs	r3, #0
 8004530:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004532:	2300      	movs	r3, #0
 8004534:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004536:	2300      	movs	r3, #0
 8004538:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800453a:	2300      	movs	r3, #0
 800453c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800453e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004542:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004544:	2300      	movs	r3, #0
 8004546:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004548:	1d3b      	adds	r3, r7, #4
 800454a:	4619      	mov	r1, r3
 800454c:	4807      	ldr	r0, [pc, #28]	; (800456c <MX_TIM1_Init+0x150>)
 800454e:	f004 fc9f 	bl	8008e90 <HAL_TIMEx_ConfigBreakDeadTime>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8004558:	f000 f96e 	bl	8004838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800455c:	4803      	ldr	r0, [pc, #12]	; (800456c <MX_TIM1_Init+0x150>)
 800455e:	f000 fb63 	bl	8004c28 <HAL_TIM_MspPostInit>

}
 8004562:	bf00      	nop
 8004564:	3758      	adds	r7, #88	; 0x58
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	200033b8 	.word	0x200033b8
 8004570:	40010000 	.word	0x40010000

08004574 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b08e      	sub	sp, #56	; 0x38
 8004578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800457a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	605a      	str	r2, [r3, #4]
 8004584:	609a      	str	r2, [r3, #8]
 8004586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004588:	f107 0320 	add.w	r3, r7, #32
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004592:	1d3b      	adds	r3, r7, #4
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	605a      	str	r2, [r3, #4]
 800459a:	609a      	str	r2, [r3, #8]
 800459c:	60da      	str	r2, [r3, #12]
 800459e:	611a      	str	r2, [r3, #16]
 80045a0:	615a      	str	r2, [r3, #20]
 80045a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80045a4:	4b32      	ldr	r3, [pc, #200]	; (8004670 <MX_TIM2_Init+0xfc>)
 80045a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80045aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80045ac:	4b30      	ldr	r3, [pc, #192]	; (8004670 <MX_TIM2_Init+0xfc>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045b2:	4b2f      	ldr	r3, [pc, #188]	; (8004670 <MX_TIM2_Init+0xfc>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80045b8:	4b2d      	ldr	r3, [pc, #180]	; (8004670 <MX_TIM2_Init+0xfc>)
 80045ba:	22ff      	movs	r2, #255	; 0xff
 80045bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045be:	4b2c      	ldr	r3, [pc, #176]	; (8004670 <MX_TIM2_Init+0xfc>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045c4:	4b2a      	ldr	r3, [pc, #168]	; (8004670 <MX_TIM2_Init+0xfc>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80045ca:	4829      	ldr	r0, [pc, #164]	; (8004670 <MX_TIM2_Init+0xfc>)
 80045cc:	f003 fd70 	bl	80080b0 <HAL_TIM_Base_Init>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80045d6:	f000 f92f 	bl	8004838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80045e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045e4:	4619      	mov	r1, r3
 80045e6:	4822      	ldr	r0, [pc, #136]	; (8004670 <MX_TIM2_Init+0xfc>)
 80045e8:	f003 fffe 	bl	80085e8 <HAL_TIM_ConfigClockSource>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80045f2:	f000 f921 	bl	8004838 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80045f6:	481e      	ldr	r0, [pc, #120]	; (8004670 <MX_TIM2_Init+0xfc>)
 80045f8:	f003 fe12 	bl	8008220 <HAL_TIM_PWM_Init>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8004602:	f000 f919 	bl	8004838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004606:	2300      	movs	r3, #0
 8004608:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800460a:	2300      	movs	r3, #0
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800460e:	f107 0320 	add.w	r3, r7, #32
 8004612:	4619      	mov	r1, r3
 8004614:	4816      	ldr	r0, [pc, #88]	; (8004670 <MX_TIM2_Init+0xfc>)
 8004616:	f004 fbbf 	bl	8008d98 <HAL_TIMEx_MasterConfigSynchronization>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8004620:	f000 f90a 	bl	8004838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004624:	2360      	movs	r3, #96	; 0x60
 8004626:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004628:	2300      	movs	r3, #0
 800462a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004630:	2300      	movs	r3, #0
 8004632:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004634:	1d3b      	adds	r3, r7, #4
 8004636:	2200      	movs	r2, #0
 8004638:	4619      	mov	r1, r3
 800463a:	480d      	ldr	r0, [pc, #52]	; (8004670 <MX_TIM2_Init+0xfc>)
 800463c:	f003 ff12 	bl	8008464 <HAL_TIM_PWM_ConfigChannel>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8004646:	f000 f8f7 	bl	8004838 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800464a:	1d3b      	adds	r3, r7, #4
 800464c:	2204      	movs	r2, #4
 800464e:	4619      	mov	r1, r3
 8004650:	4807      	ldr	r0, [pc, #28]	; (8004670 <MX_TIM2_Init+0xfc>)
 8004652:	f003 ff07 	bl	8008464 <HAL_TIM_PWM_ConfigChannel>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 800465c:	f000 f8ec 	bl	8004838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004660:	4803      	ldr	r0, [pc, #12]	; (8004670 <MX_TIM2_Init+0xfc>)
 8004662:	f000 fae1 	bl	8004c28 <HAL_TIM_MspPostInit>

}
 8004666:	bf00      	nop
 8004668:	3738      	adds	r7, #56	; 0x38
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20003400 	.word	0x20003400

08004674 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800467a:	f107 0308 	add.w	r3, r7, #8
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	605a      	str	r2, [r3, #4]
 8004684:	609a      	str	r2, [r3, #8]
 8004686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004688:	463b      	mov	r3, r7
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004690:	4b1d      	ldr	r3, [pc, #116]	; (8004708 <MX_TIM4_Init+0x94>)
 8004692:	4a1e      	ldr	r2, [pc, #120]	; (800470c <MX_TIM4_Init+0x98>)
 8004694:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 8004696:	4b1c      	ldr	r3, [pc, #112]	; (8004708 <MX_TIM4_Init+0x94>)
 8004698:	223f      	movs	r2, #63	; 0x3f
 800469a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800469c:	4b1a      	ldr	r3, [pc, #104]	; (8004708 <MX_TIM4_Init+0x94>)
 800469e:	2200      	movs	r2, #0
 80046a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80046a2:	4b19      	ldr	r3, [pc, #100]	; (8004708 <MX_TIM4_Init+0x94>)
 80046a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046aa:	4b17      	ldr	r3, [pc, #92]	; (8004708 <MX_TIM4_Init+0x94>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046b0:	4b15      	ldr	r3, [pc, #84]	; (8004708 <MX_TIM4_Init+0x94>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80046b6:	4814      	ldr	r0, [pc, #80]	; (8004708 <MX_TIM4_Init+0x94>)
 80046b8:	f003 fcfa 	bl	80080b0 <HAL_TIM_Base_Init>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80046c2:	f000 f8b9 	bl	8004838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80046cc:	f107 0308 	add.w	r3, r7, #8
 80046d0:	4619      	mov	r1, r3
 80046d2:	480d      	ldr	r0, [pc, #52]	; (8004708 <MX_TIM4_Init+0x94>)
 80046d4:	f003 ff88 	bl	80085e8 <HAL_TIM_ConfigClockSource>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80046de:	f000 f8ab 	bl	8004838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046e2:	2300      	movs	r3, #0
 80046e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046e6:	2300      	movs	r3, #0
 80046e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80046ea:	463b      	mov	r3, r7
 80046ec:	4619      	mov	r1, r3
 80046ee:	4806      	ldr	r0, [pc, #24]	; (8004708 <MX_TIM4_Init+0x94>)
 80046f0:	f004 fb52 	bl	8008d98 <HAL_TIMEx_MasterConfigSynchronization>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80046fa:	f000 f89d 	bl	8004838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80046fe:	bf00      	nop
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20003448 	.word	0x20003448
 800470c:	40000800 	.word	0x40000800

08004710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004714:	4b11      	ldr	r3, [pc, #68]	; (800475c <MX_USART2_UART_Init+0x4c>)
 8004716:	4a12      	ldr	r2, [pc, #72]	; (8004760 <MX_USART2_UART_Init+0x50>)
 8004718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800471a:	4b10      	ldr	r3, [pc, #64]	; (800475c <MX_USART2_UART_Init+0x4c>)
 800471c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004722:	4b0e      	ldr	r3, [pc, #56]	; (800475c <MX_USART2_UART_Init+0x4c>)
 8004724:	2200      	movs	r2, #0
 8004726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004728:	4b0c      	ldr	r3, [pc, #48]	; (800475c <MX_USART2_UART_Init+0x4c>)
 800472a:	2200      	movs	r2, #0
 800472c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800472e:	4b0b      	ldr	r3, [pc, #44]	; (800475c <MX_USART2_UART_Init+0x4c>)
 8004730:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004734:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8004736:	4b09      	ldr	r3, [pc, #36]	; (800475c <MX_USART2_UART_Init+0x4c>)
 8004738:	2208      	movs	r2, #8
 800473a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800473c:	4b07      	ldr	r3, [pc, #28]	; (800475c <MX_USART2_UART_Init+0x4c>)
 800473e:	2200      	movs	r2, #0
 8004740:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004742:	4b06      	ldr	r3, [pc, #24]	; (800475c <MX_USART2_UART_Init+0x4c>)
 8004744:	2200      	movs	r2, #0
 8004746:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004748:	4804      	ldr	r0, [pc, #16]	; (800475c <MX_USART2_UART_Init+0x4c>)
 800474a:	f004 fbf3 	bl	8008f34 <HAL_UART_Init>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8004754:	f000 f870 	bl	8004838 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004758:	bf00      	nop
 800475a:	bd80      	pop	{r7, pc}
 800475c:	20003490 	.word	0x20003490
 8004760:	40004400 	.word	0x40004400

08004764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b088      	sub	sp, #32
 8004768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800476a:	f107 030c 	add.w	r3, r7, #12
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	605a      	str	r2, [r3, #4]
 8004774:	609a      	str	r2, [r3, #8]
 8004776:	60da      	str	r2, [r3, #12]
 8004778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800477a:	2300      	movs	r3, #0
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	4b2b      	ldr	r3, [pc, #172]	; (800482c <MX_GPIO_Init+0xc8>)
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	4a2a      	ldr	r2, [pc, #168]	; (800482c <MX_GPIO_Init+0xc8>)
 8004784:	f043 0304 	orr.w	r3, r3, #4
 8004788:	6313      	str	r3, [r2, #48]	; 0x30
 800478a:	4b28      	ldr	r3, [pc, #160]	; (800482c <MX_GPIO_Init+0xc8>)
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	f003 0304 	and.w	r3, r3, #4
 8004792:	60bb      	str	r3, [r7, #8]
 8004794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004796:	2300      	movs	r3, #0
 8004798:	607b      	str	r3, [r7, #4]
 800479a:	4b24      	ldr	r3, [pc, #144]	; (800482c <MX_GPIO_Init+0xc8>)
 800479c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479e:	4a23      	ldr	r2, [pc, #140]	; (800482c <MX_GPIO_Init+0xc8>)
 80047a0:	f043 0301 	orr.w	r3, r3, #1
 80047a4:	6313      	str	r3, [r2, #48]	; 0x30
 80047a6:	4b21      	ldr	r3, [pc, #132]	; (800482c <MX_GPIO_Init+0xc8>)
 80047a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	607b      	str	r3, [r7, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047b2:	2300      	movs	r3, #0
 80047b4:	603b      	str	r3, [r7, #0]
 80047b6:	4b1d      	ldr	r3, [pc, #116]	; (800482c <MX_GPIO_Init+0xc8>)
 80047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ba:	4a1c      	ldr	r2, [pc, #112]	; (800482c <MX_GPIO_Init+0xc8>)
 80047bc:	f043 0302 	orr.w	r3, r3, #2
 80047c0:	6313      	str	r3, [r2, #48]	; 0x30
 80047c2:	4b1a      	ldr	r3, [pc, #104]	; (800482c <MX_GPIO_Init+0xc8>)
 80047c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9, GPIO_PIN_RESET);
 80047ce:	2200      	movs	r2, #0
 80047d0:	f240 210e 	movw	r1, #526	; 0x20e
 80047d4:	4816      	ldr	r0, [pc, #88]	; (8004830 <MX_GPIO_Init+0xcc>)
 80047d6:	f002 f8c1 	bl	800695c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 80047da:	2200      	movs	r2, #0
 80047dc:	f240 4104 	movw	r1, #1028	; 0x404
 80047e0:	4814      	ldr	r0, [pc, #80]	; (8004834 <MX_GPIO_Init+0xd0>)
 80047e2:	f002 f8bb 	bl	800695c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 PC3 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9;
 80047e6:	f240 230e 	movw	r3, #526	; 0x20e
 80047ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047ec:	2301      	movs	r3, #1
 80047ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f0:	2300      	movs	r3, #0
 80047f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047f4:	2300      	movs	r3, #0
 80047f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047f8:	f107 030c 	add.w	r3, r7, #12
 80047fc:	4619      	mov	r1, r3
 80047fe:	480c      	ldr	r0, [pc, #48]	; (8004830 <MX_GPIO_Init+0xcc>)
 8004800:	f001 ff18 	bl	8006634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8004804:	f240 4304 	movw	r3, #1028	; 0x404
 8004808:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800480a:	2301      	movs	r3, #1
 800480c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480e:	2300      	movs	r3, #0
 8004810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004812:	2300      	movs	r3, #0
 8004814:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004816:	f107 030c 	add.w	r3, r7, #12
 800481a:	4619      	mov	r1, r3
 800481c:	4805      	ldr	r0, [pc, #20]	; (8004834 <MX_GPIO_Init+0xd0>)
 800481e:	f001 ff09 	bl	8006634 <HAL_GPIO_Init>

}
 8004822:	bf00      	nop
 8004824:	3720      	adds	r7, #32
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	40023800 	.word	0x40023800
 8004830:	40020800 	.word	0x40020800
 8004834:	40020400 	.word	0x40020400

08004838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800483c:	b672      	cpsid	i
}
 800483e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004840:	e7fe      	b.n	8004840 <Error_Handler+0x8>
	...

08004844 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800484a:	2300      	movs	r3, #0
 800484c:	607b      	str	r3, [r7, #4]
 800484e:	4b10      	ldr	r3, [pc, #64]	; (8004890 <HAL_MspInit+0x4c>)
 8004850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004852:	4a0f      	ldr	r2, [pc, #60]	; (8004890 <HAL_MspInit+0x4c>)
 8004854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004858:	6453      	str	r3, [r2, #68]	; 0x44
 800485a:	4b0d      	ldr	r3, [pc, #52]	; (8004890 <HAL_MspInit+0x4c>)
 800485c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004862:	607b      	str	r3, [r7, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004866:	2300      	movs	r3, #0
 8004868:	603b      	str	r3, [r7, #0]
 800486a:	4b09      	ldr	r3, [pc, #36]	; (8004890 <HAL_MspInit+0x4c>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	4a08      	ldr	r2, [pc, #32]	; (8004890 <HAL_MspInit+0x4c>)
 8004870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004874:	6413      	str	r3, [r2, #64]	; 0x40
 8004876:	4b06      	ldr	r3, [pc, #24]	; (8004890 <HAL_MspInit+0x4c>)
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800487e:	603b      	str	r3, [r7, #0]
 8004880:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004882:	2007      	movs	r0, #7
 8004884:	f001 fe94 	bl	80065b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004888:	bf00      	nop
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40023800 	.word	0x40023800

08004894 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b08c      	sub	sp, #48	; 0x30
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800489c:	f107 031c 	add.w	r3, r7, #28
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	605a      	str	r2, [r3, #4]
 80048a6:	609a      	str	r2, [r3, #8]
 80048a8:	60da      	str	r2, [r3, #12]
 80048aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a2e      	ldr	r2, [pc, #184]	; (800496c <HAL_ADC_MspInit+0xd8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d128      	bne.n	8004908 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80048b6:	2300      	movs	r3, #0
 80048b8:	61bb      	str	r3, [r7, #24]
 80048ba:	4b2d      	ldr	r3, [pc, #180]	; (8004970 <HAL_ADC_MspInit+0xdc>)
 80048bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048be:	4a2c      	ldr	r2, [pc, #176]	; (8004970 <HAL_ADC_MspInit+0xdc>)
 80048c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c4:	6453      	str	r3, [r2, #68]	; 0x44
 80048c6:	4b2a      	ldr	r3, [pc, #168]	; (8004970 <HAL_ADC_MspInit+0xdc>)
 80048c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ce:	61bb      	str	r3, [r7, #24]
 80048d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048d2:	2300      	movs	r3, #0
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	4b26      	ldr	r3, [pc, #152]	; (8004970 <HAL_ADC_MspInit+0xdc>)
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048da:	4a25      	ldr	r2, [pc, #148]	; (8004970 <HAL_ADC_MspInit+0xdc>)
 80048dc:	f043 0302 	orr.w	r3, r3, #2
 80048e0:	6313      	str	r3, [r2, #48]	; 0x30
 80048e2:	4b23      	ldr	r3, [pc, #140]	; (8004970 <HAL_ADC_MspInit+0xdc>)
 80048e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80048ee:	2301      	movs	r3, #1
 80048f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048f2:	2303      	movs	r3, #3
 80048f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f6:	2300      	movs	r3, #0
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048fa:	f107 031c 	add.w	r3, r7, #28
 80048fe:	4619      	mov	r1, r3
 8004900:	481c      	ldr	r0, [pc, #112]	; (8004974 <HAL_ADC_MspInit+0xe0>)
 8004902:	f001 fe97 	bl	8006634 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004906:	e02c      	b.n	8004962 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a1a      	ldr	r2, [pc, #104]	; (8004978 <HAL_ADC_MspInit+0xe4>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d127      	bne.n	8004962 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004912:	2300      	movs	r3, #0
 8004914:	613b      	str	r3, [r7, #16]
 8004916:	4b16      	ldr	r3, [pc, #88]	; (8004970 <HAL_ADC_MspInit+0xdc>)
 8004918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491a:	4a15      	ldr	r2, [pc, #84]	; (8004970 <HAL_ADC_MspInit+0xdc>)
 800491c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004920:	6453      	str	r3, [r2, #68]	; 0x44
 8004922:	4b13      	ldr	r3, [pc, #76]	; (8004970 <HAL_ADC_MspInit+0xdc>)
 8004924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800492a:	613b      	str	r3, [r7, #16]
 800492c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800492e:	2300      	movs	r3, #0
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	4b0f      	ldr	r3, [pc, #60]	; (8004970 <HAL_ADC_MspInit+0xdc>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	4a0e      	ldr	r2, [pc, #56]	; (8004970 <HAL_ADC_MspInit+0xdc>)
 8004938:	f043 0302 	orr.w	r3, r3, #2
 800493c:	6313      	str	r3, [r2, #48]	; 0x30
 800493e:	4b0c      	ldr	r3, [pc, #48]	; (8004970 <HAL_ADC_MspInit+0xdc>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800494a:	2302      	movs	r3, #2
 800494c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800494e:	2303      	movs	r3, #3
 8004950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004952:	2300      	movs	r3, #0
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004956:	f107 031c 	add.w	r3, r7, #28
 800495a:	4619      	mov	r1, r3
 800495c:	4805      	ldr	r0, [pc, #20]	; (8004974 <HAL_ADC_MspInit+0xe0>)
 800495e:	f001 fe69 	bl	8006634 <HAL_GPIO_Init>
}
 8004962:	bf00      	nop
 8004964:	3730      	adds	r7, #48	; 0x30
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	40012000 	.word	0x40012000
 8004970:	40023800 	.word	0x40023800
 8004974:	40020400 	.word	0x40020400
 8004978:	40012100 	.word	0x40012100

0800497c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08c      	sub	sp, #48	; 0x30
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004984:	f107 031c 	add.w	r3, r7, #28
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	605a      	str	r2, [r3, #4]
 800498e:	609a      	str	r2, [r3, #8]
 8004990:	60da      	str	r2, [r3, #12]
 8004992:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a53      	ldr	r2, [pc, #332]	; (8004ae8 <HAL_CAN_MspInit+0x16c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d146      	bne.n	8004a2c <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800499e:	4b53      	ldr	r3, [pc, #332]	; (8004aec <HAL_CAN_MspInit+0x170>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3301      	adds	r3, #1
 80049a4:	4a51      	ldr	r2, [pc, #324]	; (8004aec <HAL_CAN_MspInit+0x170>)
 80049a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80049a8:	4b50      	ldr	r3, [pc, #320]	; (8004aec <HAL_CAN_MspInit+0x170>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d10d      	bne.n	80049cc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80049b0:	2300      	movs	r3, #0
 80049b2:	61bb      	str	r3, [r7, #24]
 80049b4:	4b4e      	ldr	r3, [pc, #312]	; (8004af0 <HAL_CAN_MspInit+0x174>)
 80049b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b8:	4a4d      	ldr	r2, [pc, #308]	; (8004af0 <HAL_CAN_MspInit+0x174>)
 80049ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80049be:	6413      	str	r3, [r2, #64]	; 0x40
 80049c0:	4b4b      	ldr	r3, [pc, #300]	; (8004af0 <HAL_CAN_MspInit+0x174>)
 80049c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c8:	61bb      	str	r3, [r7, #24]
 80049ca:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	4b47      	ldr	r3, [pc, #284]	; (8004af0 <HAL_CAN_MspInit+0x174>)
 80049d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d4:	4a46      	ldr	r2, [pc, #280]	; (8004af0 <HAL_CAN_MspInit+0x174>)
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	6313      	str	r3, [r2, #48]	; 0x30
 80049dc:	4b44      	ldr	r3, [pc, #272]	; (8004af0 <HAL_CAN_MspInit+0x174>)
 80049de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80049e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80049ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ee:	2302      	movs	r3, #2
 80049f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f2:	2300      	movs	r3, #0
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049f6:	2303      	movs	r3, #3
 80049f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80049fa:	2309      	movs	r3, #9
 80049fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049fe:	f107 031c 	add.w	r3, r7, #28
 8004a02:	4619      	mov	r1, r3
 8004a04:	483b      	ldr	r0, [pc, #236]	; (8004af4 <HAL_CAN_MspInit+0x178>)
 8004a06:	f001 fe15 	bl	8006634 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	2014      	movs	r0, #20
 8004a10:	f001 fdd9 	bl	80065c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004a14:	2014      	movs	r0, #20
 8004a16:	f001 fdf2 	bl	80065fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	2015      	movs	r0, #21
 8004a20:	f001 fdd1 	bl	80065c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8004a24:	2015      	movs	r0, #21
 8004a26:	f001 fdea 	bl	80065fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8004a2a:	e058      	b.n	8004ade <HAL_CAN_MspInit+0x162>
  else if(hcan->Instance==CAN2)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a31      	ldr	r2, [pc, #196]	; (8004af8 <HAL_CAN_MspInit+0x17c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d153      	bne.n	8004ade <HAL_CAN_MspInit+0x162>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004a36:	2300      	movs	r3, #0
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	4b2d      	ldr	r3, [pc, #180]	; (8004af0 <HAL_CAN_MspInit+0x174>)
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	4a2c      	ldr	r2, [pc, #176]	; (8004af0 <HAL_CAN_MspInit+0x174>)
 8004a40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a44:	6413      	str	r3, [r2, #64]	; 0x40
 8004a46:	4b2a      	ldr	r3, [pc, #168]	; (8004af0 <HAL_CAN_MspInit+0x174>)
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a4e:	613b      	str	r3, [r7, #16]
 8004a50:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004a52:	4b26      	ldr	r3, [pc, #152]	; (8004aec <HAL_CAN_MspInit+0x170>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	3301      	adds	r3, #1
 8004a58:	4a24      	ldr	r2, [pc, #144]	; (8004aec <HAL_CAN_MspInit+0x170>)
 8004a5a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004a5c:	4b23      	ldr	r3, [pc, #140]	; (8004aec <HAL_CAN_MspInit+0x170>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d10d      	bne.n	8004a80 <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004a64:	2300      	movs	r3, #0
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	4b21      	ldr	r3, [pc, #132]	; (8004af0 <HAL_CAN_MspInit+0x174>)
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	4a20      	ldr	r2, [pc, #128]	; (8004af0 <HAL_CAN_MspInit+0x174>)
 8004a6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a72:	6413      	str	r3, [r2, #64]	; 0x40
 8004a74:	4b1e      	ldr	r3, [pc, #120]	; (8004af0 <HAL_CAN_MspInit+0x174>)
 8004a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a80:	2300      	movs	r3, #0
 8004a82:	60bb      	str	r3, [r7, #8]
 8004a84:	4b1a      	ldr	r3, [pc, #104]	; (8004af0 <HAL_CAN_MspInit+0x174>)
 8004a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a88:	4a19      	ldr	r2, [pc, #100]	; (8004af0 <HAL_CAN_MspInit+0x174>)
 8004a8a:	f043 0302 	orr.w	r3, r3, #2
 8004a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8004a90:	4b17      	ldr	r3, [pc, #92]	; (8004af0 <HAL_CAN_MspInit+0x174>)
 8004a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	60bb      	str	r3, [r7, #8]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004a9c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8004aae:	2309      	movs	r3, #9
 8004ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ab2:	f107 031c 	add.w	r3, r7, #28
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4810      	ldr	r0, [pc, #64]	; (8004afc <HAL_CAN_MspInit+0x180>)
 8004aba:	f001 fdbb 	bl	8006634 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8004abe:	2200      	movs	r2, #0
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	2040      	movs	r0, #64	; 0x40
 8004ac4:	f001 fd7f 	bl	80065c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8004ac8:	2040      	movs	r0, #64	; 0x40
 8004aca:	f001 fd98 	bl	80065fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8004ace:	2200      	movs	r2, #0
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	2041      	movs	r0, #65	; 0x41
 8004ad4:	f001 fd77 	bl	80065c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8004ad8:	2041      	movs	r0, #65	; 0x41
 8004ada:	f001 fd90 	bl	80065fe <HAL_NVIC_EnableIRQ>
}
 8004ade:	bf00      	nop
 8004ae0:	3730      	adds	r7, #48	; 0x30
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40006400 	.word	0x40006400
 8004aec:	200034d4 	.word	0x200034d4
 8004af0:	40023800 	.word	0x40023800
 8004af4:	40020000 	.word	0x40020000
 8004af8:	40006800 	.word	0x40006800
 8004afc:	40020400 	.word	0x40020400

08004b00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b08a      	sub	sp, #40	; 0x28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b08:	f107 0314 	add.w	r3, r7, #20
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	605a      	str	r2, [r3, #4]
 8004b12:	609a      	str	r2, [r3, #8]
 8004b14:	60da      	str	r2, [r3, #12]
 8004b16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a19      	ldr	r2, [pc, #100]	; (8004b84 <HAL_SPI_MspInit+0x84>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d12b      	bne.n	8004b7a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004b22:	2300      	movs	r3, #0
 8004b24:	613b      	str	r3, [r7, #16]
 8004b26:	4b18      	ldr	r3, [pc, #96]	; (8004b88 <HAL_SPI_MspInit+0x88>)
 8004b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2a:	4a17      	ldr	r2, [pc, #92]	; (8004b88 <HAL_SPI_MspInit+0x88>)
 8004b2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b30:	6453      	str	r3, [r2, #68]	; 0x44
 8004b32:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <HAL_SPI_MspInit+0x88>)
 8004b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b3a:	613b      	str	r3, [r7, #16]
 8004b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60fb      	str	r3, [r7, #12]
 8004b42:	4b11      	ldr	r3, [pc, #68]	; (8004b88 <HAL_SPI_MspInit+0x88>)
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	4a10      	ldr	r2, [pc, #64]	; (8004b88 <HAL_SPI_MspInit+0x88>)
 8004b48:	f043 0301 	orr.w	r3, r3, #1
 8004b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b4e:	4b0e      	ldr	r3, [pc, #56]	; (8004b88 <HAL_SPI_MspInit+0x88>)
 8004b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004b5a:	23e0      	movs	r3, #224	; 0xe0
 8004b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b5e:	2302      	movs	r3, #2
 8004b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b66:	2303      	movs	r3, #3
 8004b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004b6a:	2305      	movs	r3, #5
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b6e:	f107 0314 	add.w	r3, r7, #20
 8004b72:	4619      	mov	r1, r3
 8004b74:	4805      	ldr	r0, [pc, #20]	; (8004b8c <HAL_SPI_MspInit+0x8c>)
 8004b76:	f001 fd5d 	bl	8006634 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004b7a:	bf00      	nop
 8004b7c:	3728      	adds	r7, #40	; 0x28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	40013000 	.word	0x40013000
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	40020000 	.word	0x40020000

08004b90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a1f      	ldr	r2, [pc, #124]	; (8004c1c <HAL_TIM_Base_MspInit+0x8c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d10e      	bne.n	8004bc0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	617b      	str	r3, [r7, #20]
 8004ba6:	4b1e      	ldr	r3, [pc, #120]	; (8004c20 <HAL_TIM_Base_MspInit+0x90>)
 8004ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004baa:	4a1d      	ldr	r2, [pc, #116]	; (8004c20 <HAL_TIM_Base_MspInit+0x90>)
 8004bac:	f043 0301 	orr.w	r3, r3, #1
 8004bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8004bb2:	4b1b      	ldr	r3, [pc, #108]	; (8004c20 <HAL_TIM_Base_MspInit+0x90>)
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004bbe:	e026      	b.n	8004c0e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc8:	d10e      	bne.n	8004be8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004bca:	2300      	movs	r3, #0
 8004bcc:	613b      	str	r3, [r7, #16]
 8004bce:	4b14      	ldr	r3, [pc, #80]	; (8004c20 <HAL_TIM_Base_MspInit+0x90>)
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	4a13      	ldr	r2, [pc, #76]	; (8004c20 <HAL_TIM_Base_MspInit+0x90>)
 8004bd4:	f043 0301 	orr.w	r3, r3, #1
 8004bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bda:	4b11      	ldr	r3, [pc, #68]	; (8004c20 <HAL_TIM_Base_MspInit+0x90>)
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	613b      	str	r3, [r7, #16]
 8004be4:	693b      	ldr	r3, [r7, #16]
}
 8004be6:	e012      	b.n	8004c0e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a0d      	ldr	r2, [pc, #52]	; (8004c24 <HAL_TIM_Base_MspInit+0x94>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d10d      	bne.n	8004c0e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <HAL_TIM_Base_MspInit+0x90>)
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	4a09      	ldr	r2, [pc, #36]	; (8004c20 <HAL_TIM_Base_MspInit+0x90>)
 8004bfc:	f043 0304 	orr.w	r3, r3, #4
 8004c00:	6413      	str	r3, [r2, #64]	; 0x40
 8004c02:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <HAL_TIM_Base_MspInit+0x90>)
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	f003 0304 	and.w	r3, r3, #4
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
}
 8004c0e:	bf00      	nop
 8004c10:	371c      	adds	r7, #28
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	40010000 	.word	0x40010000
 8004c20:	40023800 	.word	0x40023800
 8004c24:	40000800 	.word	0x40000800

08004c28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08a      	sub	sp, #40	; 0x28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c30:	f107 0314 	add.w	r3, r7, #20
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	605a      	str	r2, [r3, #4]
 8004c3a:	609a      	str	r2, [r3, #8]
 8004c3c:	60da      	str	r2, [r3, #12]
 8004c3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a24      	ldr	r2, [pc, #144]	; (8004cd8 <HAL_TIM_MspPostInit+0xb0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d11f      	bne.n	8004c8a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	613b      	str	r3, [r7, #16]
 8004c4e:	4b23      	ldr	r3, [pc, #140]	; (8004cdc <HAL_TIM_MspPostInit+0xb4>)
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	4a22      	ldr	r2, [pc, #136]	; (8004cdc <HAL_TIM_MspPostInit+0xb4>)
 8004c54:	f043 0301 	orr.w	r3, r3, #1
 8004c58:	6313      	str	r3, [r2, #48]	; 0x30
 8004c5a:	4b20      	ldr	r3, [pc, #128]	; (8004cdc <HAL_TIM_MspPostInit+0xb4>)
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	613b      	str	r3, [r7, #16]
 8004c64:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004c66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c70:	2300      	movs	r3, #0
 8004c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c74:	2300      	movs	r3, #0
 8004c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c7c:	f107 0314 	add.w	r3, r7, #20
 8004c80:	4619      	mov	r1, r3
 8004c82:	4817      	ldr	r0, [pc, #92]	; (8004ce0 <HAL_TIM_MspPostInit+0xb8>)
 8004c84:	f001 fcd6 	bl	8006634 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004c88:	e022      	b.n	8004cd0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c92:	d11d      	bne.n	8004cd0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c94:	2300      	movs	r3, #0
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	4b10      	ldr	r3, [pc, #64]	; (8004cdc <HAL_TIM_MspPostInit+0xb4>)
 8004c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9c:	4a0f      	ldr	r2, [pc, #60]	; (8004cdc <HAL_TIM_MspPostInit+0xb4>)
 8004c9e:	f043 0301 	orr.w	r3, r3, #1
 8004ca2:	6313      	str	r3, [r2, #48]	; 0x30
 8004ca4:	4b0d      	ldr	r3, [pc, #52]	; (8004cdc <HAL_TIM_MspPostInit+0xb4>)
 8004ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	60fb      	str	r3, [r7, #12]
 8004cae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cc4:	f107 0314 	add.w	r3, r7, #20
 8004cc8:	4619      	mov	r1, r3
 8004cca:	4805      	ldr	r0, [pc, #20]	; (8004ce0 <HAL_TIM_MspPostInit+0xb8>)
 8004ccc:	f001 fcb2 	bl	8006634 <HAL_GPIO_Init>
}
 8004cd0:	bf00      	nop
 8004cd2:	3728      	adds	r7, #40	; 0x28
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	40010000 	.word	0x40010000
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	40020000 	.word	0x40020000

08004ce4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b08a      	sub	sp, #40	; 0x28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cec:	f107 0314 	add.w	r3, r7, #20
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	605a      	str	r2, [r3, #4]
 8004cf6:	609a      	str	r2, [r3, #8]
 8004cf8:	60da      	str	r2, [r3, #12]
 8004cfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a19      	ldr	r2, [pc, #100]	; (8004d68 <HAL_UART_MspInit+0x84>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d12b      	bne.n	8004d5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d06:	2300      	movs	r3, #0
 8004d08:	613b      	str	r3, [r7, #16]
 8004d0a:	4b18      	ldr	r3, [pc, #96]	; (8004d6c <HAL_UART_MspInit+0x88>)
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	4a17      	ldr	r2, [pc, #92]	; (8004d6c <HAL_UART_MspInit+0x88>)
 8004d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d14:	6413      	str	r3, [r2, #64]	; 0x40
 8004d16:	4b15      	ldr	r3, [pc, #84]	; (8004d6c <HAL_UART_MspInit+0x88>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1e:	613b      	str	r3, [r7, #16]
 8004d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d22:	2300      	movs	r3, #0
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	4b11      	ldr	r3, [pc, #68]	; (8004d6c <HAL_UART_MspInit+0x88>)
 8004d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2a:	4a10      	ldr	r2, [pc, #64]	; (8004d6c <HAL_UART_MspInit+0x88>)
 8004d2c:	f043 0301 	orr.w	r3, r3, #1
 8004d30:	6313      	str	r3, [r2, #48]	; 0x30
 8004d32:	4b0e      	ldr	r3, [pc, #56]	; (8004d6c <HAL_UART_MspInit+0x88>)
 8004d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004d3e:	230c      	movs	r3, #12
 8004d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d42:	2302      	movs	r3, #2
 8004d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d46:	2300      	movs	r3, #0
 8004d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004d4e:	2307      	movs	r3, #7
 8004d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d52:	f107 0314 	add.w	r3, r7, #20
 8004d56:	4619      	mov	r1, r3
 8004d58:	4805      	ldr	r0, [pc, #20]	; (8004d70 <HAL_UART_MspInit+0x8c>)
 8004d5a:	f001 fc6b 	bl	8006634 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004d5e:	bf00      	nop
 8004d60:	3728      	adds	r7, #40	; 0x28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40004400 	.word	0x40004400
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	40020000 	.word	0x40020000

08004d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d78:	e7fe      	b.n	8004d78 <NMI_Handler+0x4>

08004d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d7e:	e7fe      	b.n	8004d7e <HardFault_Handler+0x4>

08004d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d84:	e7fe      	b.n	8004d84 <MemManage_Handler+0x4>

08004d86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d86:	b480      	push	{r7}
 8004d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d8a:	e7fe      	b.n	8004d8a <BusFault_Handler+0x4>

08004d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d90:	e7fe      	b.n	8004d90 <UsageFault_Handler+0x4>

08004d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d92:	b480      	push	{r7}
 8004d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d96:	bf00      	nop
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004da4:	bf00      	nop
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004dae:	b480      	push	{r7}
 8004db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004db2:	bf00      	nop
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004dc0:	f000 f97e 	bl	80050c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004dc4:	bf00      	nop
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004dcc:	4802      	ldr	r0, [pc, #8]	; (8004dd8 <CAN1_RX0_IRQHandler+0x10>)
 8004dce:	f001 f8ef 	bl	8005fb0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004dd2:	bf00      	nop
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20003310 	.word	0x20003310

08004ddc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004de0:	4802      	ldr	r0, [pc, #8]	; (8004dec <CAN1_RX1_IRQHandler+0x10>)
 8004de2:	f001 f8e5 	bl	8005fb0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8004de6:	bf00      	nop
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	20003310 	.word	0x20003310

08004df0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004df4:	4802      	ldr	r0, [pc, #8]	; (8004e00 <CAN2_RX0_IRQHandler+0x10>)
 8004df6:	f001 f8db 	bl	8005fb0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8004dfa:	bf00      	nop
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	20003338 	.word	0x20003338

08004e04 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004e08:	4802      	ldr	r0, [pc, #8]	; (8004e14 <CAN2_RX1_IRQHandler+0x10>)
 8004e0a:	f001 f8d1 	bl	8005fb0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8004e0e:	bf00      	nop
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	20003338 	.word	0x20003338

08004e18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
	return 1;
 8004e1c:	2301      	movs	r3, #1
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <_kill>:

int _kill(int pid, int sig)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004e32:	f004 fc41 	bl	80096b8 <__errno>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2216      	movs	r2, #22
 8004e3a:	601a      	str	r2, [r3, #0]
	return -1;
 8004e3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <_exit>:

void _exit (int status)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004e50:	f04f 31ff 	mov.w	r1, #4294967295
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7ff ffe7 	bl	8004e28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004e5a:	e7fe      	b.n	8004e5a <_exit+0x12>

08004e5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	e00a      	b.n	8004e84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004e6e:	f3af 8000 	nop.w
 8004e72:	4601      	mov	r1, r0
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	60ba      	str	r2, [r7, #8]
 8004e7a:	b2ca      	uxtb	r2, r1
 8004e7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	3301      	adds	r3, #1
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	dbf0      	blt.n	8004e6e <_read+0x12>
	}

return len;
 8004e8c:	687b      	ldr	r3, [r7, #4]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b086      	sub	sp, #24
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	617b      	str	r3, [r7, #20]
 8004ea6:	e009      	b.n	8004ebc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	60ba      	str	r2, [r7, #8]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	dbf1      	blt.n	8004ea8 <_write+0x12>
	}
	return len;
 8004ec4:	687b      	ldr	r3, [r7, #4]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <_close>:

int _close(int file)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
	return -1;
 8004ed6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
 8004eee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ef6:	605a      	str	r2, [r3, #4]
	return 0;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <_isatty>:

int _isatty(int file)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
	return 1;
 8004f0e:	2301      	movs	r3, #1
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
	return 0;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
	...

08004f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f40:	4a14      	ldr	r2, [pc, #80]	; (8004f94 <_sbrk+0x5c>)
 8004f42:	4b15      	ldr	r3, [pc, #84]	; (8004f98 <_sbrk+0x60>)
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f4c:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <_sbrk+0x64>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d102      	bne.n	8004f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f54:	4b11      	ldr	r3, [pc, #68]	; (8004f9c <_sbrk+0x64>)
 8004f56:	4a12      	ldr	r2, [pc, #72]	; (8004fa0 <_sbrk+0x68>)
 8004f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f5a:	4b10      	ldr	r3, [pc, #64]	; (8004f9c <_sbrk+0x64>)
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4413      	add	r3, r2
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d207      	bcs.n	8004f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f68:	f004 fba6 	bl	80096b8 <__errno>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	220c      	movs	r2, #12
 8004f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f72:	f04f 33ff 	mov.w	r3, #4294967295
 8004f76:	e009      	b.n	8004f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f78:	4b08      	ldr	r3, [pc, #32]	; (8004f9c <_sbrk+0x64>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f7e:	4b07      	ldr	r3, [pc, #28]	; (8004f9c <_sbrk+0x64>)
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4413      	add	r3, r2
 8004f86:	4a05      	ldr	r2, [pc, #20]	; (8004f9c <_sbrk+0x64>)
 8004f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	20020000 	.word	0x20020000
 8004f98:	00000400 	.word	0x00000400
 8004f9c:	200034d8 	.word	0x200034d8
 8004fa0:	200034f0 	.word	0x200034f0

08004fa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004fa8:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <SystemInit+0x20>)
 8004faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fae:	4a05      	ldr	r2, [pc, #20]	; (8004fc4 <SystemInit+0x20>)
 8004fb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004fb8:	bf00      	nop
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	e000ed00 	.word	0xe000ed00

08004fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004fc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005000 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004fcc:	480d      	ldr	r0, [pc, #52]	; (8005004 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004fce:	490e      	ldr	r1, [pc, #56]	; (8005008 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004fd0:	4a0e      	ldr	r2, [pc, #56]	; (800500c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004fd4:	e002      	b.n	8004fdc <LoopCopyDataInit>

08004fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004fda:	3304      	adds	r3, #4

08004fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004fe0:	d3f9      	bcc.n	8004fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004fe2:	4a0b      	ldr	r2, [pc, #44]	; (8005010 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004fe4:	4c0b      	ldr	r4, [pc, #44]	; (8005014 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004fe8:	e001      	b.n	8004fee <LoopFillZerobss>

08004fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004fec:	3204      	adds	r2, #4

08004fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ff0:	d3fb      	bcc.n	8004fea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004ff2:	f7ff ffd7 	bl	8004fa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ff6:	f004 fb65 	bl	80096c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ffa:	f7ff f809 	bl	8004010 <main>
  bx  lr    
 8004ffe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005000:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005008:	200025cc 	.word	0x200025cc
  ldr r2, =_sidata
 800500c:	0800cd64 	.word	0x0800cd64
  ldr r2, =_sbss
 8005010:	200025cc 	.word	0x200025cc
  ldr r4, =_ebss
 8005014:	200034f0 	.word	0x200034f0

08005018 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005018:	e7fe      	b.n	8005018 <ADC_IRQHandler>
	...

0800501c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005020:	4b0e      	ldr	r3, [pc, #56]	; (800505c <HAL_Init+0x40>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a0d      	ldr	r2, [pc, #52]	; (800505c <HAL_Init+0x40>)
 8005026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800502a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800502c:	4b0b      	ldr	r3, [pc, #44]	; (800505c <HAL_Init+0x40>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a0a      	ldr	r2, [pc, #40]	; (800505c <HAL_Init+0x40>)
 8005032:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005036:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005038:	4b08      	ldr	r3, [pc, #32]	; (800505c <HAL_Init+0x40>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a07      	ldr	r2, [pc, #28]	; (800505c <HAL_Init+0x40>)
 800503e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005042:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005044:	2003      	movs	r0, #3
 8005046:	f001 fab3 	bl	80065b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800504a:	2000      	movs	r0, #0
 800504c:	f000 f808 	bl	8005060 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005050:	f7ff fbf8 	bl	8004844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	40023c00 	.word	0x40023c00

08005060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005068:	4b12      	ldr	r3, [pc, #72]	; (80050b4 <HAL_InitTick+0x54>)
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	4b12      	ldr	r3, [pc, #72]	; (80050b8 <HAL_InitTick+0x58>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	4619      	mov	r1, r3
 8005072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005076:	fbb3 f3f1 	udiv	r3, r3, r1
 800507a:	fbb2 f3f3 	udiv	r3, r2, r3
 800507e:	4618      	mov	r0, r3
 8005080:	f001 facb 	bl	800661a <HAL_SYSTICK_Config>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e00e      	b.n	80050ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b0f      	cmp	r3, #15
 8005092:	d80a      	bhi.n	80050aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005094:	2200      	movs	r2, #0
 8005096:	6879      	ldr	r1, [r7, #4]
 8005098:	f04f 30ff 	mov.w	r0, #4294967295
 800509c:	f001 fa93 	bl	80065c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80050a0:	4a06      	ldr	r2, [pc, #24]	; (80050bc <HAL_InitTick+0x5c>)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	e000      	b.n	80050ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	200023f0 	.word	0x200023f0
 80050b8:	200023f8 	.word	0x200023f8
 80050bc:	200023f4 	.word	0x200023f4

080050c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050c0:	b480      	push	{r7}
 80050c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050c4:	4b06      	ldr	r3, [pc, #24]	; (80050e0 <HAL_IncTick+0x20>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	461a      	mov	r2, r3
 80050ca:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <HAL_IncTick+0x24>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4413      	add	r3, r2
 80050d0:	4a04      	ldr	r2, [pc, #16]	; (80050e4 <HAL_IncTick+0x24>)
 80050d2:	6013      	str	r3, [r2, #0]
}
 80050d4:	bf00      	nop
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	200023f8 	.word	0x200023f8
 80050e4:	200034dc 	.word	0x200034dc

080050e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  return uwTick;
 80050ec:	4b03      	ldr	r3, [pc, #12]	; (80050fc <HAL_GetTick+0x14>)
 80050ee:	681b      	ldr	r3, [r3, #0]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	200034dc 	.word	0x200034dc

08005100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005108:	f7ff ffee 	bl	80050e8 <HAL_GetTick>
 800510c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005118:	d005      	beq.n	8005126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800511a:	4b0a      	ldr	r3, [pc, #40]	; (8005144 <HAL_Delay+0x44>)
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	461a      	mov	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4413      	add	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005126:	bf00      	nop
 8005128:	f7ff ffde 	bl	80050e8 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	429a      	cmp	r2, r3
 8005136:	d8f7      	bhi.n	8005128 <HAL_Delay+0x28>
  {
  }
}
 8005138:	bf00      	nop
 800513a:	bf00      	nop
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	200023f8 	.word	0x200023f8

08005148 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005150:	2300      	movs	r3, #0
 8005152:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e033      	b.n	80051c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	2b00      	cmp	r3, #0
 8005164:	d109      	bne.n	800517a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7ff fb94 	bl	8004894 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	f003 0310 	and.w	r3, r3, #16
 8005182:	2b00      	cmp	r3, #0
 8005184:	d118      	bne.n	80051b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800518e:	f023 0302 	bic.w	r3, r3, #2
 8005192:	f043 0202 	orr.w	r2, r3, #2
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fab4 	bl	8005708 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	f023 0303 	bic.w	r3, r3, #3
 80051ae:	f043 0201 	orr.w	r2, r3, #1
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	641a      	str	r2, [r3, #64]	; 0x40
 80051b6:	e001      	b.n	80051bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
	...

080051d0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d101      	bne.n	80051ea <HAL_ADC_Start+0x1a>
 80051e6:	2302      	movs	r3, #2
 80051e8:	e0b2      	b.n	8005350 <HAL_ADC_Start+0x180>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d018      	beq.n	8005232 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 0201 	orr.w	r2, r2, #1
 800520e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005210:	4b52      	ldr	r3, [pc, #328]	; (800535c <HAL_ADC_Start+0x18c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a52      	ldr	r2, [pc, #328]	; (8005360 <HAL_ADC_Start+0x190>)
 8005216:	fba2 2303 	umull	r2, r3, r2, r3
 800521a:	0c9a      	lsrs	r2, r3, #18
 800521c:	4613      	mov	r3, r2
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	4413      	add	r3, r2
 8005222:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005224:	e002      	b.n	800522c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	3b01      	subs	r3, #1
 800522a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f9      	bne.n	8005226 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b01      	cmp	r3, #1
 800523e:	d17a      	bne.n	8005336 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005244:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005248:	f023 0301 	bic.w	r3, r3, #1
 800524c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800525e:	2b00      	cmp	r3, #0
 8005260:	d007      	beq.n	8005272 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800526a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800527a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800527e:	d106      	bne.n	800528e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005284:	f023 0206 	bic.w	r2, r3, #6
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	645a      	str	r2, [r3, #68]	; 0x44
 800528c:	e002      	b.n	8005294 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800529c:	4b31      	ldr	r3, [pc, #196]	; (8005364 <HAL_ADC_Start+0x194>)
 800529e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80052a8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f003 031f 	and.w	r3, r3, #31
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d12a      	bne.n	800530c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a2b      	ldr	r2, [pc, #172]	; (8005368 <HAL_ADC_Start+0x198>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d015      	beq.n	80052ec <HAL_ADC_Start+0x11c>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a29      	ldr	r2, [pc, #164]	; (800536c <HAL_ADC_Start+0x19c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d105      	bne.n	80052d6 <HAL_ADC_Start+0x106>
 80052ca:	4b26      	ldr	r3, [pc, #152]	; (8005364 <HAL_ADC_Start+0x194>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f003 031f 	and.w	r3, r3, #31
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a25      	ldr	r2, [pc, #148]	; (8005370 <HAL_ADC_Start+0x1a0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d136      	bne.n	800534e <HAL_ADC_Start+0x17e>
 80052e0:	4b20      	ldr	r3, [pc, #128]	; (8005364 <HAL_ADC_Start+0x194>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d130      	bne.n	800534e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d129      	bne.n	800534e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005308:	609a      	str	r2, [r3, #8]
 800530a:	e020      	b.n	800534e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a15      	ldr	r2, [pc, #84]	; (8005368 <HAL_ADC_Start+0x198>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d11b      	bne.n	800534e <HAL_ADC_Start+0x17e>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d114      	bne.n	800534e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689a      	ldr	r2, [r3, #8]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005332:	609a      	str	r2, [r3, #8]
 8005334:	e00b      	b.n	800534e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	f043 0210 	orr.w	r2, r3, #16
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005346:	f043 0201 	orr.w	r2, r3, #1
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	200023f0 	.word	0x200023f0
 8005360:	431bde83 	.word	0x431bde83
 8005364:	40012300 	.word	0x40012300
 8005368:	40012000 	.word	0x40012000
 800536c:	40012100 	.word	0x40012100
 8005370:	40012200 	.word	0x40012200

08005374 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800538c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005390:	d113      	bne.n	80053ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800539c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053a0:	d10b      	bne.n	80053ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	f043 0220 	orr.w	r2, r3, #32
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e063      	b.n	8005482 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80053ba:	f7ff fe95 	bl	80050e8 <HAL_GetTick>
 80053be:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80053c0:	e021      	b.n	8005406 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c8:	d01d      	beq.n	8005406 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d007      	beq.n	80053e0 <HAL_ADC_PollForConversion+0x6c>
 80053d0:	f7ff fe8a 	bl	80050e8 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d212      	bcs.n	8005406 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d00b      	beq.n	8005406 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	f043 0204 	orr.w	r2, r3, #4
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e03d      	b.n	8005482 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b02      	cmp	r3, #2
 8005412:	d1d6      	bne.n	80053c2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f06f 0212 	mvn.w	r2, #18
 800541c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d123      	bne.n	8005480 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800543c:	2b00      	cmp	r3, #0
 800543e:	d11f      	bne.n	8005480 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005446:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800544a:	2b00      	cmp	r3, #0
 800544c:	d006      	beq.n	800545c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005458:	2b00      	cmp	r3, #0
 800545a:	d111      	bne.n	8005480 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005460:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d105      	bne.n	8005480 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	f043 0201 	orr.w	r2, r3, #1
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005498:	4618      	mov	r0, r3
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d101      	bne.n	80054c0 <HAL_ADC_ConfigChannel+0x1c>
 80054bc:	2302      	movs	r3, #2
 80054be:	e113      	b.n	80056e8 <HAL_ADC_ConfigChannel+0x244>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b09      	cmp	r3, #9
 80054ce:	d925      	bls.n	800551c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68d9      	ldr	r1, [r3, #12]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	b29b      	uxth	r3, r3
 80054dc:	461a      	mov	r2, r3
 80054de:	4613      	mov	r3, r2
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	4413      	add	r3, r2
 80054e4:	3b1e      	subs	r3, #30
 80054e6:	2207      	movs	r2, #7
 80054e8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ec:	43da      	mvns	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	400a      	ands	r2, r1
 80054f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68d9      	ldr	r1, [r3, #12]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	b29b      	uxth	r3, r3
 8005506:	4618      	mov	r0, r3
 8005508:	4603      	mov	r3, r0
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	4403      	add	r3, r0
 800550e:	3b1e      	subs	r3, #30
 8005510:	409a      	lsls	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	60da      	str	r2, [r3, #12]
 800551a:	e022      	b.n	8005562 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6919      	ldr	r1, [r3, #16]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	b29b      	uxth	r3, r3
 8005528:	461a      	mov	r2, r3
 800552a:	4613      	mov	r3, r2
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	4413      	add	r3, r2
 8005530:	2207      	movs	r2, #7
 8005532:	fa02 f303 	lsl.w	r3, r2, r3
 8005536:	43da      	mvns	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	400a      	ands	r2, r1
 800553e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6919      	ldr	r1, [r3, #16]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	689a      	ldr	r2, [r3, #8]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	b29b      	uxth	r3, r3
 8005550:	4618      	mov	r0, r3
 8005552:	4603      	mov	r3, r0
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	4403      	add	r3, r0
 8005558:	409a      	lsls	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b06      	cmp	r3, #6
 8005568:	d824      	bhi.n	80055b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	4613      	mov	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	3b05      	subs	r3, #5
 800557c:	221f      	movs	r2, #31
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	43da      	mvns	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	400a      	ands	r2, r1
 800558a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	b29b      	uxth	r3, r3
 8005598:	4618      	mov	r0, r3
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	4613      	mov	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	3b05      	subs	r3, #5
 80055a6:	fa00 f203 	lsl.w	r2, r0, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	635a      	str	r2, [r3, #52]	; 0x34
 80055b2:	e04c      	b.n	800564e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2b0c      	cmp	r3, #12
 80055ba:	d824      	bhi.n	8005606 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	4613      	mov	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	3b23      	subs	r3, #35	; 0x23
 80055ce:	221f      	movs	r2, #31
 80055d0:	fa02 f303 	lsl.w	r3, r2, r3
 80055d4:	43da      	mvns	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	400a      	ands	r2, r1
 80055dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	4618      	mov	r0, r3
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	4613      	mov	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	3b23      	subs	r3, #35	; 0x23
 80055f8:	fa00 f203 	lsl.w	r2, r0, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	631a      	str	r2, [r3, #48]	; 0x30
 8005604:	e023      	b.n	800564e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	4613      	mov	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	3b41      	subs	r3, #65	; 0x41
 8005618:	221f      	movs	r2, #31
 800561a:	fa02 f303 	lsl.w	r3, r2, r3
 800561e:	43da      	mvns	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	400a      	ands	r2, r1
 8005626:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	b29b      	uxth	r3, r3
 8005634:	4618      	mov	r0, r3
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	4613      	mov	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	3b41      	subs	r3, #65	; 0x41
 8005642:	fa00 f203 	lsl.w	r2, r0, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800564e:	4b29      	ldr	r3, [pc, #164]	; (80056f4 <HAL_ADC_ConfigChannel+0x250>)
 8005650:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a28      	ldr	r2, [pc, #160]	; (80056f8 <HAL_ADC_ConfigChannel+0x254>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d10f      	bne.n	800567c <HAL_ADC_ConfigChannel+0x1d8>
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b12      	cmp	r3, #18
 8005662:	d10b      	bne.n	800567c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a1d      	ldr	r2, [pc, #116]	; (80056f8 <HAL_ADC_ConfigChannel+0x254>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d12b      	bne.n	80056de <HAL_ADC_ConfigChannel+0x23a>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a1c      	ldr	r2, [pc, #112]	; (80056fc <HAL_ADC_ConfigChannel+0x258>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d003      	beq.n	8005698 <HAL_ADC_ConfigChannel+0x1f4>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b11      	cmp	r3, #17
 8005696:	d122      	bne.n	80056de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a11      	ldr	r2, [pc, #68]	; (80056fc <HAL_ADC_ConfigChannel+0x258>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d111      	bne.n	80056de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80056ba:	4b11      	ldr	r3, [pc, #68]	; (8005700 <HAL_ADC_ConfigChannel+0x25c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a11      	ldr	r2, [pc, #68]	; (8005704 <HAL_ADC_ConfigChannel+0x260>)
 80056c0:	fba2 2303 	umull	r2, r3, r2, r3
 80056c4:	0c9a      	lsrs	r2, r3, #18
 80056c6:	4613      	mov	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	005b      	lsls	r3, r3, #1
 80056ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80056d0:	e002      	b.n	80056d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	3b01      	subs	r3, #1
 80056d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1f9      	bne.n	80056d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	40012300 	.word	0x40012300
 80056f8:	40012000 	.word	0x40012000
 80056fc:	10000012 	.word	0x10000012
 8005700:	200023f0 	.word	0x200023f0
 8005704:	431bde83 	.word	0x431bde83

08005708 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005710:	4b79      	ldr	r3, [pc, #484]	; (80058f8 <ADC_Init+0x1f0>)
 8005712:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	431a      	orrs	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800573c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6859      	ldr	r1, [r3, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	021a      	lsls	r2, r3, #8
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005760:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6859      	ldr	r1, [r3, #4]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689a      	ldr	r2, [r3, #8]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005782:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6899      	ldr	r1, [r3, #8]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68da      	ldr	r2, [r3, #12]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579a:	4a58      	ldr	r2, [pc, #352]	; (80058fc <ADC_Init+0x1f4>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d022      	beq.n	80057e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80057ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6899      	ldr	r1, [r3, #8]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80057d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6899      	ldr	r1, [r3, #8]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	609a      	str	r2, [r3, #8]
 80057e4:	e00f      	b.n	8005806 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80057f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005804:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0202 	bic.w	r2, r2, #2
 8005814:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6899      	ldr	r1, [r3, #8]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	7e1b      	ldrb	r3, [r3, #24]
 8005820:	005a      	lsls	r2, r3, #1
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d01b      	beq.n	800586c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005842:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005852:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6859      	ldr	r1, [r3, #4]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	3b01      	subs	r3, #1
 8005860:	035a      	lsls	r2, r3, #13
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	605a      	str	r2, [r3, #4]
 800586a:	e007      	b.n	800587c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800587a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800588a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	3b01      	subs	r3, #1
 8005898:	051a      	lsls	r2, r3, #20
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80058b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6899      	ldr	r1, [r3, #8]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058be:	025a      	lsls	r2, r3, #9
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689a      	ldr	r2, [r3, #8]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6899      	ldr	r1, [r3, #8]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	029a      	lsls	r2, r3, #10
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	609a      	str	r2, [r3, #8]
}
 80058ec:	bf00      	nop
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	40012300 	.word	0x40012300
 80058fc:	0f000001 	.word	0x0f000001

08005900 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e0ed      	b.n	8005aee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d102      	bne.n	8005924 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7ff f82c 	bl	800497c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0201 	orr.w	r2, r2, #1
 8005932:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005934:	f7ff fbd8 	bl	80050e8 <HAL_GetTick>
 8005938:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800593a:	e012      	b.n	8005962 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800593c:	f7ff fbd4 	bl	80050e8 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b0a      	cmp	r3, #10
 8005948:	d90b      	bls.n	8005962 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2205      	movs	r2, #5
 800595a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e0c5      	b.n	8005aee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d0e5      	beq.n	800593c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0202 	bic.w	r2, r2, #2
 800597e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005980:	f7ff fbb2 	bl	80050e8 <HAL_GetTick>
 8005984:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005986:	e012      	b.n	80059ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005988:	f7ff fbae 	bl	80050e8 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b0a      	cmp	r3, #10
 8005994:	d90b      	bls.n	80059ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2205      	movs	r2, #5
 80059a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e09f      	b.n	8005aee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1e5      	bne.n	8005988 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	7e1b      	ldrb	r3, [r3, #24]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d108      	bne.n	80059d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	e007      	b.n	80059e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	7e5b      	ldrb	r3, [r3, #25]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d108      	bne.n	8005a00 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	e007      	b.n	8005a10 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	7e9b      	ldrb	r3, [r3, #26]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d108      	bne.n	8005a2a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0220 	orr.w	r2, r2, #32
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	e007      	b.n	8005a3a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0220 	bic.w	r2, r2, #32
 8005a38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	7edb      	ldrb	r3, [r3, #27]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d108      	bne.n	8005a54 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 0210 	bic.w	r2, r2, #16
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	e007      	b.n	8005a64 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0210 	orr.w	r2, r2, #16
 8005a62:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	7f1b      	ldrb	r3, [r3, #28]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d108      	bne.n	8005a7e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0208 	orr.w	r2, r2, #8
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	e007      	b.n	8005a8e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0208 	bic.w	r2, r2, #8
 8005a8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	7f5b      	ldrb	r3, [r3, #29]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d108      	bne.n	8005aa8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f042 0204 	orr.w	r2, r2, #4
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	e007      	b.n	8005ab8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 0204 	bic.w	r2, r2, #4
 8005ab6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	ea42 0103 	orr.w	r1, r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	1e5a      	subs	r2, r3, #1
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b087      	sub	sp, #28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b0e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005b10:	7cfb      	ldrb	r3, [r7, #19]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d003      	beq.n	8005b1e <HAL_CAN_ConfigFilter+0x26>
 8005b16:	7cfb      	ldrb	r3, [r7, #19]
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	f040 80be 	bne.w	8005c9a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005b1e:	4b65      	ldr	r3, [pc, #404]	; (8005cb4 <HAL_CAN_ConfigFilter+0x1bc>)
 8005b20:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b28:	f043 0201 	orr.w	r2, r3, #1
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b38:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	021b      	lsls	r3, r3, #8
 8005b4e:	431a      	orrs	r2, r3
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	f003 031f 	and.w	r3, r3, #31
 8005b5e:	2201      	movs	r2, #1
 8005b60:	fa02 f303 	lsl.w	r3, r2, r3
 8005b64:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	43db      	mvns	r3, r3
 8005b70:	401a      	ands	r2, r3
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	69db      	ldr	r3, [r3, #28]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d123      	bne.n	8005bc8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	43db      	mvns	r3, r3
 8005b8a:	401a      	ands	r2, r3
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005ba2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	3248      	adds	r2, #72	; 0x48
 8005ba8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005bbc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005bbe:	6979      	ldr	r1, [r7, #20]
 8005bc0:	3348      	adds	r3, #72	; 0x48
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	440b      	add	r3, r1
 8005bc6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d122      	bne.n	8005c16 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005bf0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	3248      	adds	r2, #72	; 0x48
 8005bf6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005c0a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005c0c:	6979      	ldr	r1, [r7, #20]
 8005c0e:	3348      	adds	r3, #72	; 0x48
 8005c10:	00db      	lsls	r3, r3, #3
 8005c12:	440b      	add	r3, r1
 8005c14:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d109      	bne.n	8005c32 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	43db      	mvns	r3, r3
 8005c28:	401a      	ands	r2, r3
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005c30:	e007      	b.n	8005c42 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d109      	bne.n	8005c5e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	43db      	mvns	r3, r3
 8005c54:	401a      	ands	r2, r3
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005c5c:	e007      	b.n	8005c6e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	431a      	orrs	r2, r3
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d107      	bne.n	8005c86 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c8c:	f023 0201 	bic.w	r2, r3, #1
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	e006      	b.n	8005ca8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
  }
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	371c      	adds	r7, #28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	40006400 	.word	0x40006400

08005cb8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d12e      	bne.n	8005d2a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0201 	bic.w	r2, r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ce4:	f7ff fa00 	bl	80050e8 <HAL_GetTick>
 8005ce8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005cea:	e012      	b.n	8005d12 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005cec:	f7ff f9fc 	bl	80050e8 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b0a      	cmp	r3, #10
 8005cf8:	d90b      	bls.n	8005d12 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2205      	movs	r2, #5
 8005d0a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e012      	b.n	8005d38 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1e5      	bne.n	8005cec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	e006      	b.n	8005d38 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
  }
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
 8005d4c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d54:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005d56:	7dfb      	ldrb	r3, [r7, #23]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d003      	beq.n	8005d64 <HAL_CAN_GetRxMessage+0x24>
 8005d5c:	7dfb      	ldrb	r3, [r7, #23]
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	f040 80f3 	bne.w	8005f4a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10e      	bne.n	8005d88 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f003 0303 	and.w	r3, r3, #3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d116      	bne.n	8005da6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e0e7      	b.n	8005f58 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	f003 0303 	and.w	r3, r3, #3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d107      	bne.n	8005da6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e0d8      	b.n	8005f58 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	331b      	adds	r3, #27
 8005dae:	011b      	lsls	r3, r3, #4
 8005db0:	4413      	add	r3, r2
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0204 	and.w	r2, r3, #4
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10c      	bne.n	8005dde <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	331b      	adds	r3, #27
 8005dcc:	011b      	lsls	r3, r3, #4
 8005dce:	4413      	add	r3, r2
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	0d5b      	lsrs	r3, r3, #21
 8005dd4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	e00b      	b.n	8005df6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	331b      	adds	r3, #27
 8005de6:	011b      	lsls	r3, r3, #4
 8005de8:	4413      	add	r3, r2
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	08db      	lsrs	r3, r3, #3
 8005dee:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	331b      	adds	r3, #27
 8005dfe:	011b      	lsls	r3, r3, #4
 8005e00:	4413      	add	r3, r2
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0202 	and.w	r2, r3, #2
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	331b      	adds	r3, #27
 8005e14:	011b      	lsls	r3, r3, #4
 8005e16:	4413      	add	r3, r2
 8005e18:	3304      	adds	r3, #4
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 020f 	and.w	r2, r3, #15
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	331b      	adds	r3, #27
 8005e2c:	011b      	lsls	r3, r3, #4
 8005e2e:	4413      	add	r3, r2
 8005e30:	3304      	adds	r3, #4
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	0a1b      	lsrs	r3, r3, #8
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	331b      	adds	r3, #27
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	4413      	add	r3, r2
 8005e48:	3304      	adds	r3, #4
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	0c1b      	lsrs	r3, r3, #16
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	011b      	lsls	r3, r3, #4
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	011b      	lsls	r3, r3, #4
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	0a1a      	lsrs	r2, r3, #8
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	b2d2      	uxtb	r2, r2
 8005e82:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	011b      	lsls	r3, r3, #4
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	0c1a      	lsrs	r2, r3, #16
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	3302      	adds	r3, #2
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	011b      	lsls	r3, r3, #4
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	0e1a      	lsrs	r2, r3, #24
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	3303      	adds	r3, #3
 8005eb4:	b2d2      	uxtb	r2, r2
 8005eb6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	3304      	adds	r3, #4
 8005ecc:	b2d2      	uxtb	r2, r2
 8005ece:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	011b      	lsls	r3, r3, #4
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	0a1a      	lsrs	r2, r3, #8
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	3305      	adds	r3, #5
 8005ee6:	b2d2      	uxtb	r2, r2
 8005ee8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	011b      	lsls	r3, r3, #4
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	0c1a      	lsrs	r2, r3, #16
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	3306      	adds	r3, #6
 8005f00:	b2d2      	uxtb	r2, r2
 8005f02:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	011b      	lsls	r3, r3, #4
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	0e1a      	lsrs	r2, r3, #24
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	3307      	adds	r3, #7
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d108      	bne.n	8005f36 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0220 	orr.w	r2, r2, #32
 8005f32:	60da      	str	r2, [r3, #12]
 8005f34:	e007      	b.n	8005f46 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	691a      	ldr	r2, [r3, #16]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f042 0220 	orr.w	r2, r2, #32
 8005f44:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	e006      	b.n	8005f58 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
  }
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	371c      	adds	r7, #28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f74:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d002      	beq.n	8005f82 <HAL_CAN_ActivateNotification+0x1e>
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d109      	bne.n	8005f96 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6959      	ldr	r1, [r3, #20]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	683a      	ldr	r2, [r7, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005f92:	2300      	movs	r3, #0
 8005f94:	e006      	b.n	8005fa4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
  }
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b08a      	sub	sp, #40	; 0x28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005fec:	6a3b      	ldr	r3, [r7, #32]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d07c      	beq.n	80060f0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	f003 0301 	and.w	r3, r3, #1
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d023      	beq.n	8006048 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2201      	movs	r2, #1
 8006006:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f983 	bl	800631e <HAL_CAN_TxMailbox0CompleteCallback>
 8006018:	e016      	b.n	8006048 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	f003 0304 	and.w	r3, r3, #4
 8006020:	2b00      	cmp	r3, #0
 8006022:	d004      	beq.n	800602e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800602a:	627b      	str	r3, [r7, #36]	; 0x24
 800602c:	e00c      	b.n	8006048 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	f003 0308 	and.w	r3, r3, #8
 8006034:	2b00      	cmp	r3, #0
 8006036:	d004      	beq.n	8006042 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800603e:	627b      	str	r3, [r7, #36]	; 0x24
 8006040:	e002      	b.n	8006048 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f989 	bl	800635a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604e:	2b00      	cmp	r3, #0
 8006050:	d024      	beq.n	800609c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f44f 7280 	mov.w	r2, #256	; 0x100
 800605a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f963 	bl	8006332 <HAL_CAN_TxMailbox1CompleteCallback>
 800606c:	e016      	b.n	800609c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006074:	2b00      	cmp	r3, #0
 8006076:	d004      	beq.n	8006082 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800607e:	627b      	str	r3, [r7, #36]	; 0x24
 8006080:	e00c      	b.n	800609c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006088:	2b00      	cmp	r3, #0
 800608a:	d004      	beq.n	8006096 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
 8006094:	e002      	b.n	800609c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f969 	bl	800636e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d024      	beq.n	80060f0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80060ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f943 	bl	8006346 <HAL_CAN_TxMailbox2CompleteCallback>
 80060c0:	e016      	b.n	80060f0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d004      	beq.n	80060d6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24
 80060d4:	e00c      	b.n	80060f0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d004      	beq.n	80060ea <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060e6:	627b      	str	r3, [r7, #36]	; 0x24
 80060e8:	e002      	b.n	80060f0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f949 	bl	8006382 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	f003 0308 	and.w	r3, r3, #8
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00c      	beq.n	8006114 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f003 0310 	and.w	r3, r3, #16
 8006100:	2b00      	cmp	r3, #0
 8006102:	d007      	beq.n	8006114 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800610a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2210      	movs	r2, #16
 8006112:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	f003 0304 	and.w	r3, r3, #4
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00b      	beq.n	8006136 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f003 0308 	and.w	r3, r3, #8
 8006124:	2b00      	cmp	r3, #0
 8006126:	d006      	beq.n	8006136 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2208      	movs	r2, #8
 800612e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f930 	bl	8006396 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d009      	beq.n	8006154 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	f003 0303 	and.w	r3, r3, #3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7fa fff6 	bl	8001140 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006154:	6a3b      	ldr	r3, [r7, #32]
 8006156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00c      	beq.n	8006178 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f003 0310 	and.w	r3, r3, #16
 8006164:	2b00      	cmp	r3, #0
 8006166:	d007      	beq.n	8006178 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800616e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2210      	movs	r2, #16
 8006176:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006178:	6a3b      	ldr	r3, [r7, #32]
 800617a:	f003 0320 	and.w	r3, r3, #32
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00b      	beq.n	800619a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f003 0308 	and.w	r3, r3, #8
 8006188:	2b00      	cmp	r3, #0
 800618a:	d006      	beq.n	800619a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2208      	movs	r2, #8
 8006192:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 f912 	bl	80063be <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	f003 0310 	and.w	r3, r3, #16
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d009      	beq.n	80061b8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d002      	beq.n	80061b8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f8f9 	bl	80063aa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00b      	beq.n	80061da <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	f003 0310 	and.w	r3, r3, #16
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d006      	beq.n	80061da <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2210      	movs	r2, #16
 80061d2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f8fc 	bl	80063d2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00b      	beq.n	80061fc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	f003 0308 	and.w	r3, r3, #8
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d006      	beq.n	80061fc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2208      	movs	r2, #8
 80061f4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f8f5 	bl	80063e6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d07b      	beq.n	80062fe <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	f003 0304 	and.w	r3, r3, #4
 800620c:	2b00      	cmp	r3, #0
 800620e:	d072      	beq.n	80062f6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006216:	2b00      	cmp	r3, #0
 8006218:	d008      	beq.n	800622c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006220:	2b00      	cmp	r3, #0
 8006222:	d003      	beq.n	800622c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006226:	f043 0301 	orr.w	r3, r3, #1
 800622a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006232:	2b00      	cmp	r3, #0
 8006234:	d008      	beq.n	8006248 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800623c:	2b00      	cmp	r3, #0
 800623e:	d003      	beq.n	8006248 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	f043 0302 	orr.w	r3, r3, #2
 8006246:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800624e:	2b00      	cmp	r3, #0
 8006250:	d008      	beq.n	8006264 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006258:	2b00      	cmp	r3, #0
 800625a:	d003      	beq.n	8006264 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	f043 0304 	orr.w	r3, r3, #4
 8006262:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800626a:	2b00      	cmp	r3, #0
 800626c:	d043      	beq.n	80062f6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006274:	2b00      	cmp	r3, #0
 8006276:	d03e      	beq.n	80062f6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800627e:	2b60      	cmp	r3, #96	; 0x60
 8006280:	d02b      	beq.n	80062da <HAL_CAN_IRQHandler+0x32a>
 8006282:	2b60      	cmp	r3, #96	; 0x60
 8006284:	d82e      	bhi.n	80062e4 <HAL_CAN_IRQHandler+0x334>
 8006286:	2b50      	cmp	r3, #80	; 0x50
 8006288:	d022      	beq.n	80062d0 <HAL_CAN_IRQHandler+0x320>
 800628a:	2b50      	cmp	r3, #80	; 0x50
 800628c:	d82a      	bhi.n	80062e4 <HAL_CAN_IRQHandler+0x334>
 800628e:	2b40      	cmp	r3, #64	; 0x40
 8006290:	d019      	beq.n	80062c6 <HAL_CAN_IRQHandler+0x316>
 8006292:	2b40      	cmp	r3, #64	; 0x40
 8006294:	d826      	bhi.n	80062e4 <HAL_CAN_IRQHandler+0x334>
 8006296:	2b30      	cmp	r3, #48	; 0x30
 8006298:	d010      	beq.n	80062bc <HAL_CAN_IRQHandler+0x30c>
 800629a:	2b30      	cmp	r3, #48	; 0x30
 800629c:	d822      	bhi.n	80062e4 <HAL_CAN_IRQHandler+0x334>
 800629e:	2b10      	cmp	r3, #16
 80062a0:	d002      	beq.n	80062a8 <HAL_CAN_IRQHandler+0x2f8>
 80062a2:	2b20      	cmp	r3, #32
 80062a4:	d005      	beq.n	80062b2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80062a6:	e01d      	b.n	80062e4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	f043 0308 	orr.w	r3, r3, #8
 80062ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80062b0:	e019      	b.n	80062e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	f043 0310 	orr.w	r3, r3, #16
 80062b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80062ba:	e014      	b.n	80062e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062be:	f043 0320 	orr.w	r3, r3, #32
 80062c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80062c4:	e00f      	b.n	80062e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80062ce:	e00a      	b.n	80062e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80062d8:	e005      	b.n	80062e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80062e2:	e000      	b.n	80062e6 <HAL_CAN_IRQHandler+0x336>
            break;
 80062e4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	699a      	ldr	r2, [r3, #24]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80062f4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2204      	movs	r2, #4
 80062fc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	2b00      	cmp	r3, #0
 8006302:	d008      	beq.n	8006316 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	431a      	orrs	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 f872 	bl	80063fa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006316:	bf00      	nop
 8006318:	3728      	adds	r7, #40	; 0x28
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800631e:	b480      	push	{r7}
 8006320:	b083      	sub	sp, #12
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006326:	bf00      	nop
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800633a:	bf00      	nop
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006346:	b480      	push	{r7}
 8006348:	b083      	sub	sp, #12
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800634e:	bf00      	nop
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800635a:	b480      	push	{r7}
 800635c:	b083      	sub	sp, #12
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006362:	bf00      	nop
 8006364:	370c      	adds	r7, #12
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800636e:	b480      	push	{r7}
 8006370:	b083      	sub	sp, #12
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006376:	bf00      	nop
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006382:	b480      	push	{r7}
 8006384:	b083      	sub	sp, #12
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800638a:	bf00      	nop
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80063be:	b480      	push	{r7}
 80063c0:	b083      	sub	sp, #12
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80063c6:	bf00      	nop
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80063da:	bf00      	nop
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b083      	sub	sp, #12
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80063ee:	bf00      	nop
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b083      	sub	sp, #12
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006402:	bf00      	nop
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
	...

08006410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f003 0307 	and.w	r3, r3, #7
 800641e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006420:	4b0c      	ldr	r3, [pc, #48]	; (8006454 <__NVIC_SetPriorityGrouping+0x44>)
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800642c:	4013      	ands	r3, r2
 800642e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800643c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006442:	4a04      	ldr	r2, [pc, #16]	; (8006454 <__NVIC_SetPriorityGrouping+0x44>)
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	60d3      	str	r3, [r2, #12]
}
 8006448:	bf00      	nop
 800644a:	3714      	adds	r7, #20
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	e000ed00 	.word	0xe000ed00

08006458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006458:	b480      	push	{r7}
 800645a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800645c:	4b04      	ldr	r3, [pc, #16]	; (8006470 <__NVIC_GetPriorityGrouping+0x18>)
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	0a1b      	lsrs	r3, r3, #8
 8006462:	f003 0307 	and.w	r3, r3, #7
}
 8006466:	4618      	mov	r0, r3
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	e000ed00 	.word	0xe000ed00

08006474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	4603      	mov	r3, r0
 800647c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800647e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006482:	2b00      	cmp	r3, #0
 8006484:	db0b      	blt.n	800649e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006486:	79fb      	ldrb	r3, [r7, #7]
 8006488:	f003 021f 	and.w	r2, r3, #31
 800648c:	4907      	ldr	r1, [pc, #28]	; (80064ac <__NVIC_EnableIRQ+0x38>)
 800648e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006492:	095b      	lsrs	r3, r3, #5
 8006494:	2001      	movs	r0, #1
 8006496:	fa00 f202 	lsl.w	r2, r0, r2
 800649a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800649e:	bf00      	nop
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	e000e100 	.word	0xe000e100

080064b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	4603      	mov	r3, r0
 80064b8:	6039      	str	r1, [r7, #0]
 80064ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	db0a      	blt.n	80064da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	490c      	ldr	r1, [pc, #48]	; (80064fc <__NVIC_SetPriority+0x4c>)
 80064ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ce:	0112      	lsls	r2, r2, #4
 80064d0:	b2d2      	uxtb	r2, r2
 80064d2:	440b      	add	r3, r1
 80064d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80064d8:	e00a      	b.n	80064f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	4908      	ldr	r1, [pc, #32]	; (8006500 <__NVIC_SetPriority+0x50>)
 80064e0:	79fb      	ldrb	r3, [r7, #7]
 80064e2:	f003 030f 	and.w	r3, r3, #15
 80064e6:	3b04      	subs	r3, #4
 80064e8:	0112      	lsls	r2, r2, #4
 80064ea:	b2d2      	uxtb	r2, r2
 80064ec:	440b      	add	r3, r1
 80064ee:	761a      	strb	r2, [r3, #24]
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	e000e100 	.word	0xe000e100
 8006500:	e000ed00 	.word	0xe000ed00

08006504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006504:	b480      	push	{r7}
 8006506:	b089      	sub	sp, #36	; 0x24
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f003 0307 	and.w	r3, r3, #7
 8006516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	f1c3 0307 	rsb	r3, r3, #7
 800651e:	2b04      	cmp	r3, #4
 8006520:	bf28      	it	cs
 8006522:	2304      	movcs	r3, #4
 8006524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	3304      	adds	r3, #4
 800652a:	2b06      	cmp	r3, #6
 800652c:	d902      	bls.n	8006534 <NVIC_EncodePriority+0x30>
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	3b03      	subs	r3, #3
 8006532:	e000      	b.n	8006536 <NVIC_EncodePriority+0x32>
 8006534:	2300      	movs	r3, #0
 8006536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006538:	f04f 32ff 	mov.w	r2, #4294967295
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	fa02 f303 	lsl.w	r3, r2, r3
 8006542:	43da      	mvns	r2, r3
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	401a      	ands	r2, r3
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800654c:	f04f 31ff 	mov.w	r1, #4294967295
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	fa01 f303 	lsl.w	r3, r1, r3
 8006556:	43d9      	mvns	r1, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800655c:	4313      	orrs	r3, r2
         );
}
 800655e:	4618      	mov	r0, r3
 8006560:	3724      	adds	r7, #36	; 0x24
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
	...

0800656c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	3b01      	subs	r3, #1
 8006578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800657c:	d301      	bcc.n	8006582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800657e:	2301      	movs	r3, #1
 8006580:	e00f      	b.n	80065a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006582:	4a0a      	ldr	r2, [pc, #40]	; (80065ac <SysTick_Config+0x40>)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	3b01      	subs	r3, #1
 8006588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800658a:	210f      	movs	r1, #15
 800658c:	f04f 30ff 	mov.w	r0, #4294967295
 8006590:	f7ff ff8e 	bl	80064b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006594:	4b05      	ldr	r3, [pc, #20]	; (80065ac <SysTick_Config+0x40>)
 8006596:	2200      	movs	r2, #0
 8006598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800659a:	4b04      	ldr	r3, [pc, #16]	; (80065ac <SysTick_Config+0x40>)
 800659c:	2207      	movs	r2, #7
 800659e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	e000e010 	.word	0xe000e010

080065b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f7ff ff29 	bl	8006410 <__NVIC_SetPriorityGrouping>
}
 80065be:	bf00      	nop
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b086      	sub	sp, #24
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	4603      	mov	r3, r0
 80065ce:	60b9      	str	r1, [r7, #8]
 80065d0:	607a      	str	r2, [r7, #4]
 80065d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80065d4:	2300      	movs	r3, #0
 80065d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80065d8:	f7ff ff3e 	bl	8006458 <__NVIC_GetPriorityGrouping>
 80065dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	68b9      	ldr	r1, [r7, #8]
 80065e2:	6978      	ldr	r0, [r7, #20]
 80065e4:	f7ff ff8e 	bl	8006504 <NVIC_EncodePriority>
 80065e8:	4602      	mov	r2, r0
 80065ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ee:	4611      	mov	r1, r2
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7ff ff5d 	bl	80064b0 <__NVIC_SetPriority>
}
 80065f6:	bf00      	nop
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b082      	sub	sp, #8
 8006602:	af00      	add	r7, sp, #0
 8006604:	4603      	mov	r3, r0
 8006606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800660c:	4618      	mov	r0, r3
 800660e:	f7ff ff31 	bl	8006474 <__NVIC_EnableIRQ>
}
 8006612:	bf00      	nop
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b082      	sub	sp, #8
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7ff ffa2 	bl	800656c <SysTick_Config>
 8006628:	4603      	mov	r3, r0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
	...

08006634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006634:	b480      	push	{r7}
 8006636:	b089      	sub	sp, #36	; 0x24
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800663e:	2300      	movs	r3, #0
 8006640:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006642:	2300      	movs	r3, #0
 8006644:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006646:	2300      	movs	r3, #0
 8006648:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800664a:	2300      	movs	r3, #0
 800664c:	61fb      	str	r3, [r7, #28]
 800664e:	e165      	b.n	800691c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006650:	2201      	movs	r2, #1
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	fa02 f303 	lsl.w	r3, r2, r3
 8006658:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	4013      	ands	r3, r2
 8006662:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	429a      	cmp	r2, r3
 800666a:	f040 8154 	bne.w	8006916 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f003 0303 	and.w	r3, r3, #3
 8006676:	2b01      	cmp	r3, #1
 8006678:	d005      	beq.n	8006686 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006682:	2b02      	cmp	r3, #2
 8006684:	d130      	bne.n	80066e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	005b      	lsls	r3, r3, #1
 8006690:	2203      	movs	r2, #3
 8006692:	fa02 f303 	lsl.w	r3, r2, r3
 8006696:	43db      	mvns	r3, r3
 8006698:	69ba      	ldr	r2, [r7, #24]
 800669a:	4013      	ands	r3, r2
 800669c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	68da      	ldr	r2, [r3, #12]
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	005b      	lsls	r3, r3, #1
 80066a6:	fa02 f303 	lsl.w	r3, r2, r3
 80066aa:	69ba      	ldr	r2, [r7, #24]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80066bc:	2201      	movs	r2, #1
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	fa02 f303 	lsl.w	r3, r2, r3
 80066c4:	43db      	mvns	r3, r3
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	4013      	ands	r3, r2
 80066ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	091b      	lsrs	r3, r3, #4
 80066d2:	f003 0201 	and.w	r2, r3, #1
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	fa02 f303 	lsl.w	r3, r2, r3
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	4313      	orrs	r3, r2
 80066e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	69ba      	ldr	r2, [r7, #24]
 80066e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f003 0303 	and.w	r3, r3, #3
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d017      	beq.n	8006724 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	005b      	lsls	r3, r3, #1
 80066fe:	2203      	movs	r2, #3
 8006700:	fa02 f303 	lsl.w	r3, r2, r3
 8006704:	43db      	mvns	r3, r3
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	4013      	ands	r3, r2
 800670a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	689a      	ldr	r2, [r3, #8]
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	005b      	lsls	r3, r3, #1
 8006714:	fa02 f303 	lsl.w	r3, r2, r3
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	4313      	orrs	r3, r2
 800671c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	69ba      	ldr	r2, [r7, #24]
 8006722:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f003 0303 	and.w	r3, r3, #3
 800672c:	2b02      	cmp	r3, #2
 800672e:	d123      	bne.n	8006778 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	08da      	lsrs	r2, r3, #3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	3208      	adds	r2, #8
 8006738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800673c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	f003 0307 	and.w	r3, r3, #7
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	220f      	movs	r2, #15
 8006748:	fa02 f303 	lsl.w	r3, r2, r3
 800674c:	43db      	mvns	r3, r3
 800674e:	69ba      	ldr	r2, [r7, #24]
 8006750:	4013      	ands	r3, r2
 8006752:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	691a      	ldr	r2, [r3, #16]
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	f003 0307 	and.w	r3, r3, #7
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	fa02 f303 	lsl.w	r3, r2, r3
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	4313      	orrs	r3, r2
 8006768:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	08da      	lsrs	r2, r3, #3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	3208      	adds	r2, #8
 8006772:	69b9      	ldr	r1, [r7, #24]
 8006774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	005b      	lsls	r3, r3, #1
 8006782:	2203      	movs	r2, #3
 8006784:	fa02 f303 	lsl.w	r3, r2, r3
 8006788:	43db      	mvns	r3, r3
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	4013      	ands	r3, r2
 800678e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f003 0203 	and.w	r2, r3, #3
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	fa02 f303 	lsl.w	r3, r2, r3
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	69ba      	ldr	r2, [r7, #24]
 80067aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 80ae 	beq.w	8006916 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067ba:	2300      	movs	r3, #0
 80067bc:	60fb      	str	r3, [r7, #12]
 80067be:	4b5d      	ldr	r3, [pc, #372]	; (8006934 <HAL_GPIO_Init+0x300>)
 80067c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c2:	4a5c      	ldr	r2, [pc, #368]	; (8006934 <HAL_GPIO_Init+0x300>)
 80067c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067c8:	6453      	str	r3, [r2, #68]	; 0x44
 80067ca:	4b5a      	ldr	r3, [pc, #360]	; (8006934 <HAL_GPIO_Init+0x300>)
 80067cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067d2:	60fb      	str	r3, [r7, #12]
 80067d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80067d6:	4a58      	ldr	r2, [pc, #352]	; (8006938 <HAL_GPIO_Init+0x304>)
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	089b      	lsrs	r3, r3, #2
 80067dc:	3302      	adds	r3, #2
 80067de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	f003 0303 	and.w	r3, r3, #3
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	220f      	movs	r2, #15
 80067ee:	fa02 f303 	lsl.w	r3, r2, r3
 80067f2:	43db      	mvns	r3, r3
 80067f4:	69ba      	ldr	r2, [r7, #24]
 80067f6:	4013      	ands	r3, r2
 80067f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a4f      	ldr	r2, [pc, #316]	; (800693c <HAL_GPIO_Init+0x308>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d025      	beq.n	800684e <HAL_GPIO_Init+0x21a>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a4e      	ldr	r2, [pc, #312]	; (8006940 <HAL_GPIO_Init+0x30c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d01f      	beq.n	800684a <HAL_GPIO_Init+0x216>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a4d      	ldr	r2, [pc, #308]	; (8006944 <HAL_GPIO_Init+0x310>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d019      	beq.n	8006846 <HAL_GPIO_Init+0x212>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a4c      	ldr	r2, [pc, #304]	; (8006948 <HAL_GPIO_Init+0x314>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d013      	beq.n	8006842 <HAL_GPIO_Init+0x20e>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a4b      	ldr	r2, [pc, #300]	; (800694c <HAL_GPIO_Init+0x318>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d00d      	beq.n	800683e <HAL_GPIO_Init+0x20a>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a4a      	ldr	r2, [pc, #296]	; (8006950 <HAL_GPIO_Init+0x31c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d007      	beq.n	800683a <HAL_GPIO_Init+0x206>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a49      	ldr	r2, [pc, #292]	; (8006954 <HAL_GPIO_Init+0x320>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d101      	bne.n	8006836 <HAL_GPIO_Init+0x202>
 8006832:	2306      	movs	r3, #6
 8006834:	e00c      	b.n	8006850 <HAL_GPIO_Init+0x21c>
 8006836:	2307      	movs	r3, #7
 8006838:	e00a      	b.n	8006850 <HAL_GPIO_Init+0x21c>
 800683a:	2305      	movs	r3, #5
 800683c:	e008      	b.n	8006850 <HAL_GPIO_Init+0x21c>
 800683e:	2304      	movs	r3, #4
 8006840:	e006      	b.n	8006850 <HAL_GPIO_Init+0x21c>
 8006842:	2303      	movs	r3, #3
 8006844:	e004      	b.n	8006850 <HAL_GPIO_Init+0x21c>
 8006846:	2302      	movs	r3, #2
 8006848:	e002      	b.n	8006850 <HAL_GPIO_Init+0x21c>
 800684a:	2301      	movs	r3, #1
 800684c:	e000      	b.n	8006850 <HAL_GPIO_Init+0x21c>
 800684e:	2300      	movs	r3, #0
 8006850:	69fa      	ldr	r2, [r7, #28]
 8006852:	f002 0203 	and.w	r2, r2, #3
 8006856:	0092      	lsls	r2, r2, #2
 8006858:	4093      	lsls	r3, r2
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	4313      	orrs	r3, r2
 800685e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006860:	4935      	ldr	r1, [pc, #212]	; (8006938 <HAL_GPIO_Init+0x304>)
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	089b      	lsrs	r3, r3, #2
 8006866:	3302      	adds	r3, #2
 8006868:	69ba      	ldr	r2, [r7, #24]
 800686a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800686e:	4b3a      	ldr	r3, [pc, #232]	; (8006958 <HAL_GPIO_Init+0x324>)
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	43db      	mvns	r3, r3
 8006878:	69ba      	ldr	r2, [r7, #24]
 800687a:	4013      	ands	r3, r2
 800687c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d003      	beq.n	8006892 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	4313      	orrs	r3, r2
 8006890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006892:	4a31      	ldr	r2, [pc, #196]	; (8006958 <HAL_GPIO_Init+0x324>)
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006898:	4b2f      	ldr	r3, [pc, #188]	; (8006958 <HAL_GPIO_Init+0x324>)
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	43db      	mvns	r3, r3
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	4013      	ands	r3, r2
 80068a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d003      	beq.n	80068bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80068b4:	69ba      	ldr	r2, [r7, #24]
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80068bc:	4a26      	ldr	r2, [pc, #152]	; (8006958 <HAL_GPIO_Init+0x324>)
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80068c2:	4b25      	ldr	r3, [pc, #148]	; (8006958 <HAL_GPIO_Init+0x324>)
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	43db      	mvns	r3, r3
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	4013      	ands	r3, r2
 80068d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80068e6:	4a1c      	ldr	r2, [pc, #112]	; (8006958 <HAL_GPIO_Init+0x324>)
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80068ec:	4b1a      	ldr	r3, [pc, #104]	; (8006958 <HAL_GPIO_Init+0x324>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	43db      	mvns	r3, r3
 80068f6:	69ba      	ldr	r2, [r7, #24]
 80068f8:	4013      	ands	r3, r2
 80068fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006908:	69ba      	ldr	r2, [r7, #24]
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	4313      	orrs	r3, r2
 800690e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006910:	4a11      	ldr	r2, [pc, #68]	; (8006958 <HAL_GPIO_Init+0x324>)
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	3301      	adds	r3, #1
 800691a:	61fb      	str	r3, [r7, #28]
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	2b0f      	cmp	r3, #15
 8006920:	f67f ae96 	bls.w	8006650 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006924:	bf00      	nop
 8006926:	bf00      	nop
 8006928:	3724      	adds	r7, #36	; 0x24
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	40023800 	.word	0x40023800
 8006938:	40013800 	.word	0x40013800
 800693c:	40020000 	.word	0x40020000
 8006940:	40020400 	.word	0x40020400
 8006944:	40020800 	.word	0x40020800
 8006948:	40020c00 	.word	0x40020c00
 800694c:	40021000 	.word	0x40021000
 8006950:	40021400 	.word	0x40021400
 8006954:	40021800 	.word	0x40021800
 8006958:	40013c00 	.word	0x40013c00

0800695c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	460b      	mov	r3, r1
 8006966:	807b      	strh	r3, [r7, #2]
 8006968:	4613      	mov	r3, r2
 800696a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800696c:	787b      	ldrb	r3, [r7, #1]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d003      	beq.n	800697a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006972:	887a      	ldrh	r2, [r7, #2]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006978:	e003      	b.n	8006982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800697a:	887b      	ldrh	r3, [r7, #2]
 800697c:	041a      	lsls	r2, r3, #16
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	619a      	str	r2, [r3, #24]
}
 8006982:	bf00      	nop
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
	...

08006990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e0cc      	b.n	8006b3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069a4:	4b68      	ldr	r3, [pc, #416]	; (8006b48 <HAL_RCC_ClockConfig+0x1b8>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 030f 	and.w	r3, r3, #15
 80069ac:	683a      	ldr	r2, [r7, #0]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d90c      	bls.n	80069cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069b2:	4b65      	ldr	r3, [pc, #404]	; (8006b48 <HAL_RCC_ClockConfig+0x1b8>)
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	b2d2      	uxtb	r2, r2
 80069b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ba:	4b63      	ldr	r3, [pc, #396]	; (8006b48 <HAL_RCC_ClockConfig+0x1b8>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 030f 	and.w	r3, r3, #15
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d001      	beq.n	80069cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e0b8      	b.n	8006b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0302 	and.w	r3, r3, #2
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d020      	beq.n	8006a1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0304 	and.w	r3, r3, #4
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d005      	beq.n	80069f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069e4:	4b59      	ldr	r3, [pc, #356]	; (8006b4c <HAL_RCC_ClockConfig+0x1bc>)
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	4a58      	ldr	r2, [pc, #352]	; (8006b4c <HAL_RCC_ClockConfig+0x1bc>)
 80069ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80069ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0308 	and.w	r3, r3, #8
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d005      	beq.n	8006a08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069fc:	4b53      	ldr	r3, [pc, #332]	; (8006b4c <HAL_RCC_ClockConfig+0x1bc>)
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	4a52      	ldr	r2, [pc, #328]	; (8006b4c <HAL_RCC_ClockConfig+0x1bc>)
 8006a02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a08:	4b50      	ldr	r3, [pc, #320]	; (8006b4c <HAL_RCC_ClockConfig+0x1bc>)
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	494d      	ldr	r1, [pc, #308]	; (8006b4c <HAL_RCC_ClockConfig+0x1bc>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d044      	beq.n	8006ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d107      	bne.n	8006a3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a2e:	4b47      	ldr	r3, [pc, #284]	; (8006b4c <HAL_RCC_ClockConfig+0x1bc>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d119      	bne.n	8006a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e07f      	b.n	8006b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d003      	beq.n	8006a4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a4a:	2b03      	cmp	r3, #3
 8006a4c:	d107      	bne.n	8006a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a4e:	4b3f      	ldr	r3, [pc, #252]	; (8006b4c <HAL_RCC_ClockConfig+0x1bc>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d109      	bne.n	8006a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e06f      	b.n	8006b3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a5e:	4b3b      	ldr	r3, [pc, #236]	; (8006b4c <HAL_RCC_ClockConfig+0x1bc>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0302 	and.w	r3, r3, #2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e067      	b.n	8006b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a6e:	4b37      	ldr	r3, [pc, #220]	; (8006b4c <HAL_RCC_ClockConfig+0x1bc>)
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f023 0203 	bic.w	r2, r3, #3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	4934      	ldr	r1, [pc, #208]	; (8006b4c <HAL_RCC_ClockConfig+0x1bc>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a80:	f7fe fb32 	bl	80050e8 <HAL_GetTick>
 8006a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a86:	e00a      	b.n	8006a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a88:	f7fe fb2e 	bl	80050e8 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e04f      	b.n	8006b3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a9e:	4b2b      	ldr	r3, [pc, #172]	; (8006b4c <HAL_RCC_ClockConfig+0x1bc>)
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f003 020c 	and.w	r2, r3, #12
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d1eb      	bne.n	8006a88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ab0:	4b25      	ldr	r3, [pc, #148]	; (8006b48 <HAL_RCC_ClockConfig+0x1b8>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 030f 	and.w	r3, r3, #15
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d20c      	bcs.n	8006ad8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006abe:	4b22      	ldr	r3, [pc, #136]	; (8006b48 <HAL_RCC_ClockConfig+0x1b8>)
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	b2d2      	uxtb	r2, r2
 8006ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ac6:	4b20      	ldr	r3, [pc, #128]	; (8006b48 <HAL_RCC_ClockConfig+0x1b8>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d001      	beq.n	8006ad8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e032      	b.n	8006b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0304 	and.w	r3, r3, #4
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d008      	beq.n	8006af6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ae4:	4b19      	ldr	r3, [pc, #100]	; (8006b4c <HAL_RCC_ClockConfig+0x1bc>)
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	4916      	ldr	r1, [pc, #88]	; (8006b4c <HAL_RCC_ClockConfig+0x1bc>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0308 	and.w	r3, r3, #8
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d009      	beq.n	8006b16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b02:	4b12      	ldr	r3, [pc, #72]	; (8006b4c <HAL_RCC_ClockConfig+0x1bc>)
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	00db      	lsls	r3, r3, #3
 8006b10:	490e      	ldr	r1, [pc, #56]	; (8006b4c <HAL_RCC_ClockConfig+0x1bc>)
 8006b12:	4313      	orrs	r3, r2
 8006b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b16:	f000 f855 	bl	8006bc4 <HAL_RCC_GetSysClockFreq>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	4b0b      	ldr	r3, [pc, #44]	; (8006b4c <HAL_RCC_ClockConfig+0x1bc>)
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	091b      	lsrs	r3, r3, #4
 8006b22:	f003 030f 	and.w	r3, r3, #15
 8006b26:	490a      	ldr	r1, [pc, #40]	; (8006b50 <HAL_RCC_ClockConfig+0x1c0>)
 8006b28:	5ccb      	ldrb	r3, [r1, r3]
 8006b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b2e:	4a09      	ldr	r2, [pc, #36]	; (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b32:	4b09      	ldr	r3, [pc, #36]	; (8006b58 <HAL_RCC_ClockConfig+0x1c8>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7fe fa92 	bl	8005060 <HAL_InitTick>

  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	40023c00 	.word	0x40023c00
 8006b4c:	40023800 	.word	0x40023800
 8006b50:	0800c960 	.word	0x0800c960
 8006b54:	200023f0 	.word	0x200023f0
 8006b58:	200023f4 	.word	0x200023f4

08006b5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b60:	4b03      	ldr	r3, [pc, #12]	; (8006b70 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b62:	681b      	ldr	r3, [r3, #0]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	200023f0 	.word	0x200023f0

08006b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b78:	f7ff fff0 	bl	8006b5c <HAL_RCC_GetHCLKFreq>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	4b05      	ldr	r3, [pc, #20]	; (8006b94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	0a9b      	lsrs	r3, r3, #10
 8006b84:	f003 0307 	and.w	r3, r3, #7
 8006b88:	4903      	ldr	r1, [pc, #12]	; (8006b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b8a:	5ccb      	ldrb	r3, [r1, r3]
 8006b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	40023800 	.word	0x40023800
 8006b98:	0800c970 	.word	0x0800c970

08006b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006ba0:	f7ff ffdc 	bl	8006b5c <HAL_RCC_GetHCLKFreq>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	4b05      	ldr	r3, [pc, #20]	; (8006bbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	0b5b      	lsrs	r3, r3, #13
 8006bac:	f003 0307 	and.w	r3, r3, #7
 8006bb0:	4903      	ldr	r1, [pc, #12]	; (8006bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bb2:	5ccb      	ldrb	r3, [r1, r3]
 8006bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	40023800 	.word	0x40023800
 8006bc0:	0800c970 	.word	0x0800c970

08006bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bc8:	b0ae      	sub	sp, #184	; 0xb8
 8006bca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006be4:	2300      	movs	r3, #0
 8006be6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bea:	4bcb      	ldr	r3, [pc, #812]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x354>)
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f003 030c 	and.w	r3, r3, #12
 8006bf2:	2b0c      	cmp	r3, #12
 8006bf4:	f200 8206 	bhi.w	8007004 <HAL_RCC_GetSysClockFreq+0x440>
 8006bf8:	a201      	add	r2, pc, #4	; (adr r2, 8006c00 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfe:	bf00      	nop
 8006c00:	08006c35 	.word	0x08006c35
 8006c04:	08007005 	.word	0x08007005
 8006c08:	08007005 	.word	0x08007005
 8006c0c:	08007005 	.word	0x08007005
 8006c10:	08006c3d 	.word	0x08006c3d
 8006c14:	08007005 	.word	0x08007005
 8006c18:	08007005 	.word	0x08007005
 8006c1c:	08007005 	.word	0x08007005
 8006c20:	08006c45 	.word	0x08006c45
 8006c24:	08007005 	.word	0x08007005
 8006c28:	08007005 	.word	0x08007005
 8006c2c:	08007005 	.word	0x08007005
 8006c30:	08006e35 	.word	0x08006e35
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c34:	4bb9      	ldr	r3, [pc, #740]	; (8006f1c <HAL_RCC_GetSysClockFreq+0x358>)
 8006c36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8006c3a:	e1e7      	b.n	800700c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c3c:	4bb8      	ldr	r3, [pc, #736]	; (8006f20 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006c3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006c42:	e1e3      	b.n	800700c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c44:	4bb4      	ldr	r3, [pc, #720]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x354>)
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c50:	4bb1      	ldr	r3, [pc, #708]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x354>)
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d071      	beq.n	8006d40 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c5c:	4bae      	ldr	r3, [pc, #696]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x354>)
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	099b      	lsrs	r3, r3, #6
 8006c62:	2200      	movs	r2, #0
 8006c64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c68:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006c6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c78:	2300      	movs	r3, #0
 8006c7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006c7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006c82:	4622      	mov	r2, r4
 8006c84:	462b      	mov	r3, r5
 8006c86:	f04f 0000 	mov.w	r0, #0
 8006c8a:	f04f 0100 	mov.w	r1, #0
 8006c8e:	0159      	lsls	r1, r3, #5
 8006c90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c94:	0150      	lsls	r0, r2, #5
 8006c96:	4602      	mov	r2, r0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4621      	mov	r1, r4
 8006c9c:	1a51      	subs	r1, r2, r1
 8006c9e:	6439      	str	r1, [r7, #64]	; 0x40
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	eb63 0301 	sbc.w	r3, r3, r1
 8006ca6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ca8:	f04f 0200 	mov.w	r2, #0
 8006cac:	f04f 0300 	mov.w	r3, #0
 8006cb0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006cb4:	4649      	mov	r1, r9
 8006cb6:	018b      	lsls	r3, r1, #6
 8006cb8:	4641      	mov	r1, r8
 8006cba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006cbe:	4641      	mov	r1, r8
 8006cc0:	018a      	lsls	r2, r1, #6
 8006cc2:	4641      	mov	r1, r8
 8006cc4:	1a51      	subs	r1, r2, r1
 8006cc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8006cc8:	4649      	mov	r1, r9
 8006cca:	eb63 0301 	sbc.w	r3, r3, r1
 8006cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cd0:	f04f 0200 	mov.w	r2, #0
 8006cd4:	f04f 0300 	mov.w	r3, #0
 8006cd8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006cdc:	4649      	mov	r1, r9
 8006cde:	00cb      	lsls	r3, r1, #3
 8006ce0:	4641      	mov	r1, r8
 8006ce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ce6:	4641      	mov	r1, r8
 8006ce8:	00ca      	lsls	r2, r1, #3
 8006cea:	4610      	mov	r0, r2
 8006cec:	4619      	mov	r1, r3
 8006cee:	4603      	mov	r3, r0
 8006cf0:	4622      	mov	r2, r4
 8006cf2:	189b      	adds	r3, r3, r2
 8006cf4:	633b      	str	r3, [r7, #48]	; 0x30
 8006cf6:	462b      	mov	r3, r5
 8006cf8:	460a      	mov	r2, r1
 8006cfa:	eb42 0303 	adc.w	r3, r2, r3
 8006cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8006d00:	f04f 0200 	mov.w	r2, #0
 8006d04:	f04f 0300 	mov.w	r3, #0
 8006d08:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006d0c:	4629      	mov	r1, r5
 8006d0e:	024b      	lsls	r3, r1, #9
 8006d10:	4621      	mov	r1, r4
 8006d12:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d16:	4621      	mov	r1, r4
 8006d18:	024a      	lsls	r2, r1, #9
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d22:	2200      	movs	r2, #0
 8006d24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d2c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006d30:	f7f9 ffca 	bl	8000cc8 <__aeabi_uldivmod>
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	4613      	mov	r3, r2
 8006d3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d3e:	e067      	b.n	8006e10 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d40:	4b75      	ldr	r3, [pc, #468]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x354>)
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	099b      	lsrs	r3, r3, #6
 8006d46:	2200      	movs	r2, #0
 8006d48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d4c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006d50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d58:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d5e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006d62:	4622      	mov	r2, r4
 8006d64:	462b      	mov	r3, r5
 8006d66:	f04f 0000 	mov.w	r0, #0
 8006d6a:	f04f 0100 	mov.w	r1, #0
 8006d6e:	0159      	lsls	r1, r3, #5
 8006d70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d74:	0150      	lsls	r0, r2, #5
 8006d76:	4602      	mov	r2, r0
 8006d78:	460b      	mov	r3, r1
 8006d7a:	4621      	mov	r1, r4
 8006d7c:	1a51      	subs	r1, r2, r1
 8006d7e:	62b9      	str	r1, [r7, #40]	; 0x28
 8006d80:	4629      	mov	r1, r5
 8006d82:	eb63 0301 	sbc.w	r3, r3, r1
 8006d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d88:	f04f 0200 	mov.w	r2, #0
 8006d8c:	f04f 0300 	mov.w	r3, #0
 8006d90:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006d94:	4649      	mov	r1, r9
 8006d96:	018b      	lsls	r3, r1, #6
 8006d98:	4641      	mov	r1, r8
 8006d9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d9e:	4641      	mov	r1, r8
 8006da0:	018a      	lsls	r2, r1, #6
 8006da2:	4641      	mov	r1, r8
 8006da4:	ebb2 0a01 	subs.w	sl, r2, r1
 8006da8:	4649      	mov	r1, r9
 8006daa:	eb63 0b01 	sbc.w	fp, r3, r1
 8006dae:	f04f 0200 	mov.w	r2, #0
 8006db2:	f04f 0300 	mov.w	r3, #0
 8006db6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006dba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006dbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006dc2:	4692      	mov	sl, r2
 8006dc4:	469b      	mov	fp, r3
 8006dc6:	4623      	mov	r3, r4
 8006dc8:	eb1a 0303 	adds.w	r3, sl, r3
 8006dcc:	623b      	str	r3, [r7, #32]
 8006dce:	462b      	mov	r3, r5
 8006dd0:	eb4b 0303 	adc.w	r3, fp, r3
 8006dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8006dd6:	f04f 0200 	mov.w	r2, #0
 8006dda:	f04f 0300 	mov.w	r3, #0
 8006dde:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006de2:	4629      	mov	r1, r5
 8006de4:	028b      	lsls	r3, r1, #10
 8006de6:	4621      	mov	r1, r4
 8006de8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006dec:	4621      	mov	r1, r4
 8006dee:	028a      	lsls	r2, r1, #10
 8006df0:	4610      	mov	r0, r2
 8006df2:	4619      	mov	r1, r3
 8006df4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006df8:	2200      	movs	r2, #0
 8006dfa:	673b      	str	r3, [r7, #112]	; 0x70
 8006dfc:	677a      	str	r2, [r7, #116]	; 0x74
 8006dfe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006e02:	f7f9 ff61 	bl	8000cc8 <__aeabi_uldivmod>
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e10:	4b41      	ldr	r3, [pc, #260]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	0c1b      	lsrs	r3, r3, #16
 8006e16:	f003 0303 	and.w	r3, r3, #3
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	005b      	lsls	r3, r3, #1
 8006e1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006e22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006e32:	e0eb      	b.n	800700c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e34:	4b38      	ldr	r3, [pc, #224]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e40:	4b35      	ldr	r3, [pc, #212]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d06b      	beq.n	8006f24 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e4c:	4b32      	ldr	r3, [pc, #200]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	099b      	lsrs	r3, r3, #6
 8006e52:	2200      	movs	r2, #0
 8006e54:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e5e:	663b      	str	r3, [r7, #96]	; 0x60
 8006e60:	2300      	movs	r3, #0
 8006e62:	667b      	str	r3, [r7, #100]	; 0x64
 8006e64:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006e68:	4622      	mov	r2, r4
 8006e6a:	462b      	mov	r3, r5
 8006e6c:	f04f 0000 	mov.w	r0, #0
 8006e70:	f04f 0100 	mov.w	r1, #0
 8006e74:	0159      	lsls	r1, r3, #5
 8006e76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e7a:	0150      	lsls	r0, r2, #5
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4621      	mov	r1, r4
 8006e82:	1a51      	subs	r1, r2, r1
 8006e84:	61b9      	str	r1, [r7, #24]
 8006e86:	4629      	mov	r1, r5
 8006e88:	eb63 0301 	sbc.w	r3, r3, r1
 8006e8c:	61fb      	str	r3, [r7, #28]
 8006e8e:	f04f 0200 	mov.w	r2, #0
 8006e92:	f04f 0300 	mov.w	r3, #0
 8006e96:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006e9a:	4659      	mov	r1, fp
 8006e9c:	018b      	lsls	r3, r1, #6
 8006e9e:	4651      	mov	r1, sl
 8006ea0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ea4:	4651      	mov	r1, sl
 8006ea6:	018a      	lsls	r2, r1, #6
 8006ea8:	4651      	mov	r1, sl
 8006eaa:	ebb2 0801 	subs.w	r8, r2, r1
 8006eae:	4659      	mov	r1, fp
 8006eb0:	eb63 0901 	sbc.w	r9, r3, r1
 8006eb4:	f04f 0200 	mov.w	r2, #0
 8006eb8:	f04f 0300 	mov.w	r3, #0
 8006ebc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ec0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ec4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ec8:	4690      	mov	r8, r2
 8006eca:	4699      	mov	r9, r3
 8006ecc:	4623      	mov	r3, r4
 8006ece:	eb18 0303 	adds.w	r3, r8, r3
 8006ed2:	613b      	str	r3, [r7, #16]
 8006ed4:	462b      	mov	r3, r5
 8006ed6:	eb49 0303 	adc.w	r3, r9, r3
 8006eda:	617b      	str	r3, [r7, #20]
 8006edc:	f04f 0200 	mov.w	r2, #0
 8006ee0:	f04f 0300 	mov.w	r3, #0
 8006ee4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006ee8:	4629      	mov	r1, r5
 8006eea:	024b      	lsls	r3, r1, #9
 8006eec:	4621      	mov	r1, r4
 8006eee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ef2:	4621      	mov	r1, r4
 8006ef4:	024a      	lsls	r2, r1, #9
 8006ef6:	4610      	mov	r0, r2
 8006ef8:	4619      	mov	r1, r3
 8006efa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006efe:	2200      	movs	r2, #0
 8006f00:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f02:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006f04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006f08:	f7f9 fede 	bl	8000cc8 <__aeabi_uldivmod>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4613      	mov	r3, r2
 8006f12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f16:	e065      	b.n	8006fe4 <HAL_RCC_GetSysClockFreq+0x420>
 8006f18:	40023800 	.word	0x40023800
 8006f1c:	00f42400 	.word	0x00f42400
 8006f20:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f24:	4b3d      	ldr	r3, [pc, #244]	; (800701c <HAL_RCC_GetSysClockFreq+0x458>)
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	099b      	lsrs	r3, r3, #6
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	4611      	mov	r1, r2
 8006f30:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006f34:	653b      	str	r3, [r7, #80]	; 0x50
 8006f36:	2300      	movs	r3, #0
 8006f38:	657b      	str	r3, [r7, #84]	; 0x54
 8006f3a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006f3e:	4642      	mov	r2, r8
 8006f40:	464b      	mov	r3, r9
 8006f42:	f04f 0000 	mov.w	r0, #0
 8006f46:	f04f 0100 	mov.w	r1, #0
 8006f4a:	0159      	lsls	r1, r3, #5
 8006f4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f50:	0150      	lsls	r0, r2, #5
 8006f52:	4602      	mov	r2, r0
 8006f54:	460b      	mov	r3, r1
 8006f56:	4641      	mov	r1, r8
 8006f58:	1a51      	subs	r1, r2, r1
 8006f5a:	60b9      	str	r1, [r7, #8]
 8006f5c:	4649      	mov	r1, r9
 8006f5e:	eb63 0301 	sbc.w	r3, r3, r1
 8006f62:	60fb      	str	r3, [r7, #12]
 8006f64:	f04f 0200 	mov.w	r2, #0
 8006f68:	f04f 0300 	mov.w	r3, #0
 8006f6c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006f70:	4659      	mov	r1, fp
 8006f72:	018b      	lsls	r3, r1, #6
 8006f74:	4651      	mov	r1, sl
 8006f76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f7a:	4651      	mov	r1, sl
 8006f7c:	018a      	lsls	r2, r1, #6
 8006f7e:	4651      	mov	r1, sl
 8006f80:	1a54      	subs	r4, r2, r1
 8006f82:	4659      	mov	r1, fp
 8006f84:	eb63 0501 	sbc.w	r5, r3, r1
 8006f88:	f04f 0200 	mov.w	r2, #0
 8006f8c:	f04f 0300 	mov.w	r3, #0
 8006f90:	00eb      	lsls	r3, r5, #3
 8006f92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f96:	00e2      	lsls	r2, r4, #3
 8006f98:	4614      	mov	r4, r2
 8006f9a:	461d      	mov	r5, r3
 8006f9c:	4643      	mov	r3, r8
 8006f9e:	18e3      	adds	r3, r4, r3
 8006fa0:	603b      	str	r3, [r7, #0]
 8006fa2:	464b      	mov	r3, r9
 8006fa4:	eb45 0303 	adc.w	r3, r5, r3
 8006fa8:	607b      	str	r3, [r7, #4]
 8006faa:	f04f 0200 	mov.w	r2, #0
 8006fae:	f04f 0300 	mov.w	r3, #0
 8006fb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	028b      	lsls	r3, r1, #10
 8006fba:	4621      	mov	r1, r4
 8006fbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006fc0:	4621      	mov	r1, r4
 8006fc2:	028a      	lsls	r2, r1, #10
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fcc:	2200      	movs	r2, #0
 8006fce:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fd0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006fd2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006fd6:	f7f9 fe77 	bl	8000cc8 <__aeabi_uldivmod>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	460b      	mov	r3, r1
 8006fde:	4613      	mov	r3, r2
 8006fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006fe4:	4b0d      	ldr	r3, [pc, #52]	; (800701c <HAL_RCC_GetSysClockFreq+0x458>)
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	0f1b      	lsrs	r3, r3, #28
 8006fea:	f003 0307 	and.w	r3, r3, #7
 8006fee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006ff2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ff6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ffe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007002:	e003      	b.n	800700c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007004:	4b06      	ldr	r3, [pc, #24]	; (8007020 <HAL_RCC_GetSysClockFreq+0x45c>)
 8007006:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800700a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800700c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007010:	4618      	mov	r0, r3
 8007012:	37b8      	adds	r7, #184	; 0xb8
 8007014:	46bd      	mov	sp, r7
 8007016:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800701a:	bf00      	nop
 800701c:	40023800 	.word	0x40023800
 8007020:	00f42400 	.word	0x00f42400

08007024 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e28d      	b.n	8007552 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b00      	cmp	r3, #0
 8007040:	f000 8083 	beq.w	800714a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007044:	4b94      	ldr	r3, [pc, #592]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f003 030c 	and.w	r3, r3, #12
 800704c:	2b04      	cmp	r3, #4
 800704e:	d019      	beq.n	8007084 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007050:	4b91      	ldr	r3, [pc, #580]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007058:	2b08      	cmp	r3, #8
 800705a:	d106      	bne.n	800706a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800705c:	4b8e      	ldr	r3, [pc, #568]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007064:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007068:	d00c      	beq.n	8007084 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800706a:	4b8b      	ldr	r3, [pc, #556]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007072:	2b0c      	cmp	r3, #12
 8007074:	d112      	bne.n	800709c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007076:	4b88      	ldr	r3, [pc, #544]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800707e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007082:	d10b      	bne.n	800709c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007084:	4b84      	ldr	r3, [pc, #528]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d05b      	beq.n	8007148 <HAL_RCC_OscConfig+0x124>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d157      	bne.n	8007148 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e25a      	b.n	8007552 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070a4:	d106      	bne.n	80070b4 <HAL_RCC_OscConfig+0x90>
 80070a6:	4b7c      	ldr	r3, [pc, #496]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a7b      	ldr	r2, [pc, #492]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 80070ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070b0:	6013      	str	r3, [r2, #0]
 80070b2:	e01d      	b.n	80070f0 <HAL_RCC_OscConfig+0xcc>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070bc:	d10c      	bne.n	80070d8 <HAL_RCC_OscConfig+0xb4>
 80070be:	4b76      	ldr	r3, [pc, #472]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a75      	ldr	r2, [pc, #468]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 80070c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070c8:	6013      	str	r3, [r2, #0]
 80070ca:	4b73      	ldr	r3, [pc, #460]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a72      	ldr	r2, [pc, #456]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 80070d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070d4:	6013      	str	r3, [r2, #0]
 80070d6:	e00b      	b.n	80070f0 <HAL_RCC_OscConfig+0xcc>
 80070d8:	4b6f      	ldr	r3, [pc, #444]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a6e      	ldr	r2, [pc, #440]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 80070de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070e2:	6013      	str	r3, [r2, #0]
 80070e4:	4b6c      	ldr	r3, [pc, #432]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a6b      	ldr	r2, [pc, #428]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 80070ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d013      	beq.n	8007120 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f8:	f7fd fff6 	bl	80050e8 <HAL_GetTick>
 80070fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070fe:	e008      	b.n	8007112 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007100:	f7fd fff2 	bl	80050e8 <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	2b64      	cmp	r3, #100	; 0x64
 800710c:	d901      	bls.n	8007112 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e21f      	b.n	8007552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007112:	4b61      	ldr	r3, [pc, #388]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d0f0      	beq.n	8007100 <HAL_RCC_OscConfig+0xdc>
 800711e:	e014      	b.n	800714a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007120:	f7fd ffe2 	bl	80050e8 <HAL_GetTick>
 8007124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007126:	e008      	b.n	800713a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007128:	f7fd ffde 	bl	80050e8 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b64      	cmp	r3, #100	; 0x64
 8007134:	d901      	bls.n	800713a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e20b      	b.n	8007552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800713a:	4b57      	ldr	r3, [pc, #348]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1f0      	bne.n	8007128 <HAL_RCC_OscConfig+0x104>
 8007146:	e000      	b.n	800714a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0302 	and.w	r3, r3, #2
 8007152:	2b00      	cmp	r3, #0
 8007154:	d06f      	beq.n	8007236 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007156:	4b50      	ldr	r3, [pc, #320]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f003 030c 	and.w	r3, r3, #12
 800715e:	2b00      	cmp	r3, #0
 8007160:	d017      	beq.n	8007192 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007162:	4b4d      	ldr	r3, [pc, #308]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800716a:	2b08      	cmp	r3, #8
 800716c:	d105      	bne.n	800717a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800716e:	4b4a      	ldr	r3, [pc, #296]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00b      	beq.n	8007192 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800717a:	4b47      	ldr	r3, [pc, #284]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007182:	2b0c      	cmp	r3, #12
 8007184:	d11c      	bne.n	80071c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007186:	4b44      	ldr	r3, [pc, #272]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d116      	bne.n	80071c0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007192:	4b41      	ldr	r3, [pc, #260]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b00      	cmp	r3, #0
 800719c:	d005      	beq.n	80071aa <HAL_RCC_OscConfig+0x186>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d001      	beq.n	80071aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e1d3      	b.n	8007552 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071aa:	4b3b      	ldr	r3, [pc, #236]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	00db      	lsls	r3, r3, #3
 80071b8:	4937      	ldr	r1, [pc, #220]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071be:	e03a      	b.n	8007236 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d020      	beq.n	800720a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071c8:	4b34      	ldr	r3, [pc, #208]	; (800729c <HAL_RCC_OscConfig+0x278>)
 80071ca:	2201      	movs	r2, #1
 80071cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ce:	f7fd ff8b 	bl	80050e8 <HAL_GetTick>
 80071d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071d4:	e008      	b.n	80071e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071d6:	f7fd ff87 	bl	80050e8 <HAL_GetTick>
 80071da:	4602      	mov	r2, r0
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d901      	bls.n	80071e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e1b4      	b.n	8007552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071e8:	4b2b      	ldr	r3, [pc, #172]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0302 	and.w	r3, r3, #2
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d0f0      	beq.n	80071d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071f4:	4b28      	ldr	r3, [pc, #160]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	00db      	lsls	r3, r3, #3
 8007202:	4925      	ldr	r1, [pc, #148]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 8007204:	4313      	orrs	r3, r2
 8007206:	600b      	str	r3, [r1, #0]
 8007208:	e015      	b.n	8007236 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800720a:	4b24      	ldr	r3, [pc, #144]	; (800729c <HAL_RCC_OscConfig+0x278>)
 800720c:	2200      	movs	r2, #0
 800720e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007210:	f7fd ff6a 	bl	80050e8 <HAL_GetTick>
 8007214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007216:	e008      	b.n	800722a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007218:	f7fd ff66 	bl	80050e8 <HAL_GetTick>
 800721c:	4602      	mov	r2, r0
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	2b02      	cmp	r3, #2
 8007224:	d901      	bls.n	800722a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e193      	b.n	8007552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800722a:	4b1b      	ldr	r3, [pc, #108]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0302 	and.w	r3, r3, #2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1f0      	bne.n	8007218 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0308 	and.w	r3, r3, #8
 800723e:	2b00      	cmp	r3, #0
 8007240:	d036      	beq.n	80072b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d016      	beq.n	8007278 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800724a:	4b15      	ldr	r3, [pc, #84]	; (80072a0 <HAL_RCC_OscConfig+0x27c>)
 800724c:	2201      	movs	r2, #1
 800724e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007250:	f7fd ff4a 	bl	80050e8 <HAL_GetTick>
 8007254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007256:	e008      	b.n	800726a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007258:	f7fd ff46 	bl	80050e8 <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	2b02      	cmp	r3, #2
 8007264:	d901      	bls.n	800726a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e173      	b.n	8007552 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800726a:	4b0b      	ldr	r3, [pc, #44]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 800726c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	2b00      	cmp	r3, #0
 8007274:	d0f0      	beq.n	8007258 <HAL_RCC_OscConfig+0x234>
 8007276:	e01b      	b.n	80072b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007278:	4b09      	ldr	r3, [pc, #36]	; (80072a0 <HAL_RCC_OscConfig+0x27c>)
 800727a:	2200      	movs	r2, #0
 800727c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800727e:	f7fd ff33 	bl	80050e8 <HAL_GetTick>
 8007282:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007284:	e00e      	b.n	80072a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007286:	f7fd ff2f 	bl	80050e8 <HAL_GetTick>
 800728a:	4602      	mov	r2, r0
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	2b02      	cmp	r3, #2
 8007292:	d907      	bls.n	80072a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	e15c      	b.n	8007552 <HAL_RCC_OscConfig+0x52e>
 8007298:	40023800 	.word	0x40023800
 800729c:	42470000 	.word	0x42470000
 80072a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072a4:	4b8a      	ldr	r3, [pc, #552]	; (80074d0 <HAL_RCC_OscConfig+0x4ac>)
 80072a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072a8:	f003 0302 	and.w	r3, r3, #2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1ea      	bne.n	8007286 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0304 	and.w	r3, r3, #4
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f000 8097 	beq.w	80073ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072be:	2300      	movs	r3, #0
 80072c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072c2:	4b83      	ldr	r3, [pc, #524]	; (80074d0 <HAL_RCC_OscConfig+0x4ac>)
 80072c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10f      	bne.n	80072ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072ce:	2300      	movs	r3, #0
 80072d0:	60bb      	str	r3, [r7, #8]
 80072d2:	4b7f      	ldr	r3, [pc, #508]	; (80074d0 <HAL_RCC_OscConfig+0x4ac>)
 80072d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d6:	4a7e      	ldr	r2, [pc, #504]	; (80074d0 <HAL_RCC_OscConfig+0x4ac>)
 80072d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072dc:	6413      	str	r3, [r2, #64]	; 0x40
 80072de:	4b7c      	ldr	r3, [pc, #496]	; (80074d0 <HAL_RCC_OscConfig+0x4ac>)
 80072e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072e6:	60bb      	str	r3, [r7, #8]
 80072e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072ea:	2301      	movs	r3, #1
 80072ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072ee:	4b79      	ldr	r3, [pc, #484]	; (80074d4 <HAL_RCC_OscConfig+0x4b0>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d118      	bne.n	800732c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072fa:	4b76      	ldr	r3, [pc, #472]	; (80074d4 <HAL_RCC_OscConfig+0x4b0>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a75      	ldr	r2, [pc, #468]	; (80074d4 <HAL_RCC_OscConfig+0x4b0>)
 8007300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007306:	f7fd feef 	bl	80050e8 <HAL_GetTick>
 800730a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800730c:	e008      	b.n	8007320 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800730e:	f7fd feeb 	bl	80050e8 <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	2b02      	cmp	r3, #2
 800731a:	d901      	bls.n	8007320 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	e118      	b.n	8007552 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007320:	4b6c      	ldr	r3, [pc, #432]	; (80074d4 <HAL_RCC_OscConfig+0x4b0>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007328:	2b00      	cmp	r3, #0
 800732a:	d0f0      	beq.n	800730e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d106      	bne.n	8007342 <HAL_RCC_OscConfig+0x31e>
 8007334:	4b66      	ldr	r3, [pc, #408]	; (80074d0 <HAL_RCC_OscConfig+0x4ac>)
 8007336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007338:	4a65      	ldr	r2, [pc, #404]	; (80074d0 <HAL_RCC_OscConfig+0x4ac>)
 800733a:	f043 0301 	orr.w	r3, r3, #1
 800733e:	6713      	str	r3, [r2, #112]	; 0x70
 8007340:	e01c      	b.n	800737c <HAL_RCC_OscConfig+0x358>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	2b05      	cmp	r3, #5
 8007348:	d10c      	bne.n	8007364 <HAL_RCC_OscConfig+0x340>
 800734a:	4b61      	ldr	r3, [pc, #388]	; (80074d0 <HAL_RCC_OscConfig+0x4ac>)
 800734c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800734e:	4a60      	ldr	r2, [pc, #384]	; (80074d0 <HAL_RCC_OscConfig+0x4ac>)
 8007350:	f043 0304 	orr.w	r3, r3, #4
 8007354:	6713      	str	r3, [r2, #112]	; 0x70
 8007356:	4b5e      	ldr	r3, [pc, #376]	; (80074d0 <HAL_RCC_OscConfig+0x4ac>)
 8007358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800735a:	4a5d      	ldr	r2, [pc, #372]	; (80074d0 <HAL_RCC_OscConfig+0x4ac>)
 800735c:	f043 0301 	orr.w	r3, r3, #1
 8007360:	6713      	str	r3, [r2, #112]	; 0x70
 8007362:	e00b      	b.n	800737c <HAL_RCC_OscConfig+0x358>
 8007364:	4b5a      	ldr	r3, [pc, #360]	; (80074d0 <HAL_RCC_OscConfig+0x4ac>)
 8007366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007368:	4a59      	ldr	r2, [pc, #356]	; (80074d0 <HAL_RCC_OscConfig+0x4ac>)
 800736a:	f023 0301 	bic.w	r3, r3, #1
 800736e:	6713      	str	r3, [r2, #112]	; 0x70
 8007370:	4b57      	ldr	r3, [pc, #348]	; (80074d0 <HAL_RCC_OscConfig+0x4ac>)
 8007372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007374:	4a56      	ldr	r2, [pc, #344]	; (80074d0 <HAL_RCC_OscConfig+0x4ac>)
 8007376:	f023 0304 	bic.w	r3, r3, #4
 800737a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d015      	beq.n	80073b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007384:	f7fd feb0 	bl	80050e8 <HAL_GetTick>
 8007388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800738a:	e00a      	b.n	80073a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800738c:	f7fd feac 	bl	80050e8 <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	f241 3288 	movw	r2, #5000	; 0x1388
 800739a:	4293      	cmp	r3, r2
 800739c:	d901      	bls.n	80073a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e0d7      	b.n	8007552 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073a2:	4b4b      	ldr	r3, [pc, #300]	; (80074d0 <HAL_RCC_OscConfig+0x4ac>)
 80073a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a6:	f003 0302 	and.w	r3, r3, #2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d0ee      	beq.n	800738c <HAL_RCC_OscConfig+0x368>
 80073ae:	e014      	b.n	80073da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073b0:	f7fd fe9a 	bl	80050e8 <HAL_GetTick>
 80073b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073b6:	e00a      	b.n	80073ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073b8:	f7fd fe96 	bl	80050e8 <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d901      	bls.n	80073ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80073ca:	2303      	movs	r3, #3
 80073cc:	e0c1      	b.n	8007552 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073ce:	4b40      	ldr	r3, [pc, #256]	; (80074d0 <HAL_RCC_OscConfig+0x4ac>)
 80073d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d2:	f003 0302 	and.w	r3, r3, #2
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1ee      	bne.n	80073b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80073da:	7dfb      	ldrb	r3, [r7, #23]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d105      	bne.n	80073ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073e0:	4b3b      	ldr	r3, [pc, #236]	; (80074d0 <HAL_RCC_OscConfig+0x4ac>)
 80073e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e4:	4a3a      	ldr	r2, [pc, #232]	; (80074d0 <HAL_RCC_OscConfig+0x4ac>)
 80073e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 80ad 	beq.w	8007550 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80073f6:	4b36      	ldr	r3, [pc, #216]	; (80074d0 <HAL_RCC_OscConfig+0x4ac>)
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f003 030c 	and.w	r3, r3, #12
 80073fe:	2b08      	cmp	r3, #8
 8007400:	d060      	beq.n	80074c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	2b02      	cmp	r3, #2
 8007408:	d145      	bne.n	8007496 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800740a:	4b33      	ldr	r3, [pc, #204]	; (80074d8 <HAL_RCC_OscConfig+0x4b4>)
 800740c:	2200      	movs	r2, #0
 800740e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007410:	f7fd fe6a 	bl	80050e8 <HAL_GetTick>
 8007414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007416:	e008      	b.n	800742a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007418:	f7fd fe66 	bl	80050e8 <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	2b02      	cmp	r3, #2
 8007424:	d901      	bls.n	800742a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e093      	b.n	8007552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800742a:	4b29      	ldr	r3, [pc, #164]	; (80074d0 <HAL_RCC_OscConfig+0x4ac>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1f0      	bne.n	8007418 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	69da      	ldr	r2, [r3, #28]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	431a      	orrs	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007444:	019b      	lsls	r3, r3, #6
 8007446:	431a      	orrs	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744c:	085b      	lsrs	r3, r3, #1
 800744e:	3b01      	subs	r3, #1
 8007450:	041b      	lsls	r3, r3, #16
 8007452:	431a      	orrs	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007458:	061b      	lsls	r3, r3, #24
 800745a:	431a      	orrs	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007460:	071b      	lsls	r3, r3, #28
 8007462:	491b      	ldr	r1, [pc, #108]	; (80074d0 <HAL_RCC_OscConfig+0x4ac>)
 8007464:	4313      	orrs	r3, r2
 8007466:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007468:	4b1b      	ldr	r3, [pc, #108]	; (80074d8 <HAL_RCC_OscConfig+0x4b4>)
 800746a:	2201      	movs	r2, #1
 800746c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800746e:	f7fd fe3b 	bl	80050e8 <HAL_GetTick>
 8007472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007474:	e008      	b.n	8007488 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007476:	f7fd fe37 	bl	80050e8 <HAL_GetTick>
 800747a:	4602      	mov	r2, r0
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	2b02      	cmp	r3, #2
 8007482:	d901      	bls.n	8007488 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e064      	b.n	8007552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007488:	4b11      	ldr	r3, [pc, #68]	; (80074d0 <HAL_RCC_OscConfig+0x4ac>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d0f0      	beq.n	8007476 <HAL_RCC_OscConfig+0x452>
 8007494:	e05c      	b.n	8007550 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007496:	4b10      	ldr	r3, [pc, #64]	; (80074d8 <HAL_RCC_OscConfig+0x4b4>)
 8007498:	2200      	movs	r2, #0
 800749a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800749c:	f7fd fe24 	bl	80050e8 <HAL_GetTick>
 80074a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074a2:	e008      	b.n	80074b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074a4:	f7fd fe20 	bl	80050e8 <HAL_GetTick>
 80074a8:	4602      	mov	r2, r0
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d901      	bls.n	80074b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e04d      	b.n	8007552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074b6:	4b06      	ldr	r3, [pc, #24]	; (80074d0 <HAL_RCC_OscConfig+0x4ac>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1f0      	bne.n	80074a4 <HAL_RCC_OscConfig+0x480>
 80074c2:	e045      	b.n	8007550 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d107      	bne.n	80074dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e040      	b.n	8007552 <HAL_RCC_OscConfig+0x52e>
 80074d0:	40023800 	.word	0x40023800
 80074d4:	40007000 	.word	0x40007000
 80074d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80074dc:	4b1f      	ldr	r3, [pc, #124]	; (800755c <HAL_RCC_OscConfig+0x538>)
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d030      	beq.n	800754c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d129      	bne.n	800754c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007502:	429a      	cmp	r2, r3
 8007504:	d122      	bne.n	800754c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800750c:	4013      	ands	r3, r2
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007512:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007514:	4293      	cmp	r3, r2
 8007516:	d119      	bne.n	800754c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007522:	085b      	lsrs	r3, r3, #1
 8007524:	3b01      	subs	r3, #1
 8007526:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007528:	429a      	cmp	r2, r3
 800752a:	d10f      	bne.n	800754c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007536:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007538:	429a      	cmp	r2, r3
 800753a:	d107      	bne.n	800754c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007546:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007548:	429a      	cmp	r2, r3
 800754a:	d001      	beq.n	8007550 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e000      	b.n	8007552 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3718      	adds	r7, #24
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	40023800 	.word	0x40023800

08007560 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e07b      	b.n	800766a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007576:	2b00      	cmp	r3, #0
 8007578:	d108      	bne.n	800758c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007582:	d009      	beq.n	8007598 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	61da      	str	r2, [r3, #28]
 800758a:	e005      	b.n	8007598 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d106      	bne.n	80075b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7fd faa4 	bl	8004b00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2202      	movs	r2, #2
 80075bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80075e0:	431a      	orrs	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075ea:	431a      	orrs	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	f003 0302 	and.w	r3, r3, #2
 80075f4:	431a      	orrs	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	431a      	orrs	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007608:	431a      	orrs	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007612:	431a      	orrs	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800761c:	ea42 0103 	orr.w	r1, r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007624:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	430a      	orrs	r2, r1
 800762e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	0c1b      	lsrs	r3, r3, #16
 8007636:	f003 0104 	and.w	r1, r3, #4
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	f003 0210 	and.w	r2, r3, #16
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	69da      	ldr	r2, [r3, #28]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007658:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b088      	sub	sp, #32
 8007676:	af00      	add	r7, sp, #0
 8007678:	60f8      	str	r0, [r7, #12]
 800767a:	60b9      	str	r1, [r7, #8]
 800767c:	603b      	str	r3, [r7, #0]
 800767e:	4613      	mov	r3, r2
 8007680:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800768c:	2b01      	cmp	r3, #1
 800768e:	d101      	bne.n	8007694 <HAL_SPI_Transmit+0x22>
 8007690:	2302      	movs	r3, #2
 8007692:	e126      	b.n	80078e2 <HAL_SPI_Transmit+0x270>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800769c:	f7fd fd24 	bl	80050e8 <HAL_GetTick>
 80076a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80076a2:	88fb      	ldrh	r3, [r7, #6]
 80076a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d002      	beq.n	80076b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80076b2:	2302      	movs	r3, #2
 80076b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076b6:	e10b      	b.n	80078d0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d002      	beq.n	80076c4 <HAL_SPI_Transmit+0x52>
 80076be:	88fb      	ldrh	r3, [r7, #6]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d102      	bne.n	80076ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076c8:	e102      	b.n	80078d0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2203      	movs	r2, #3
 80076ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	88fa      	ldrh	r2, [r7, #6]
 80076e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	88fa      	ldrh	r2, [r7, #6]
 80076e8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007710:	d10f      	bne.n	8007732 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007720:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007730:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800773c:	2b40      	cmp	r3, #64	; 0x40
 800773e:	d007      	beq.n	8007750 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800774e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007758:	d14b      	bne.n	80077f2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d002      	beq.n	8007768 <HAL_SPI_Transmit+0xf6>
 8007762:	8afb      	ldrh	r3, [r7, #22]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d13e      	bne.n	80077e6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776c:	881a      	ldrh	r2, [r3, #0]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007778:	1c9a      	adds	r2, r3, #2
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007782:	b29b      	uxth	r3, r3
 8007784:	3b01      	subs	r3, #1
 8007786:	b29a      	uxth	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800778c:	e02b      	b.n	80077e6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	f003 0302 	and.w	r3, r3, #2
 8007798:	2b02      	cmp	r3, #2
 800779a:	d112      	bne.n	80077c2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a0:	881a      	ldrh	r2, [r3, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ac:	1c9a      	adds	r2, r3, #2
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	3b01      	subs	r3, #1
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	86da      	strh	r2, [r3, #54]	; 0x36
 80077c0:	e011      	b.n	80077e6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077c2:	f7fd fc91 	bl	80050e8 <HAL_GetTick>
 80077c6:	4602      	mov	r2, r0
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d803      	bhi.n	80077da <HAL_SPI_Transmit+0x168>
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d8:	d102      	bne.n	80077e0 <HAL_SPI_Transmit+0x16e>
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d102      	bne.n	80077e6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80077e4:	e074      	b.n	80078d0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1ce      	bne.n	800778e <HAL_SPI_Transmit+0x11c>
 80077f0:	e04c      	b.n	800788c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d002      	beq.n	8007800 <HAL_SPI_Transmit+0x18e>
 80077fa:	8afb      	ldrh	r3, [r7, #22]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d140      	bne.n	8007882 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	330c      	adds	r3, #12
 800780a:	7812      	ldrb	r2, [r2, #0]
 800780c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007812:	1c5a      	adds	r2, r3, #1
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800781c:	b29b      	uxth	r3, r3
 800781e:	3b01      	subs	r3, #1
 8007820:	b29a      	uxth	r2, r3
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007826:	e02c      	b.n	8007882 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f003 0302 	and.w	r3, r3, #2
 8007832:	2b02      	cmp	r3, #2
 8007834:	d113      	bne.n	800785e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	330c      	adds	r3, #12
 8007840:	7812      	ldrb	r2, [r2, #0]
 8007842:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007848:	1c5a      	adds	r2, r3, #1
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007852:	b29b      	uxth	r3, r3
 8007854:	3b01      	subs	r3, #1
 8007856:	b29a      	uxth	r2, r3
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	86da      	strh	r2, [r3, #54]	; 0x36
 800785c:	e011      	b.n	8007882 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800785e:	f7fd fc43 	bl	80050e8 <HAL_GetTick>
 8007862:	4602      	mov	r2, r0
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	429a      	cmp	r2, r3
 800786c:	d803      	bhi.n	8007876 <HAL_SPI_Transmit+0x204>
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007874:	d102      	bne.n	800787c <HAL_SPI_Transmit+0x20a>
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d102      	bne.n	8007882 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007880:	e026      	b.n	80078d0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007886:	b29b      	uxth	r3, r3
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1cd      	bne.n	8007828 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800788c:	69ba      	ldr	r2, [r7, #24]
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 fbcb 	bl	800802c <SPI_EndRxTxTransaction>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2220      	movs	r2, #32
 80078a0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10a      	bne.n	80078c0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078aa:	2300      	movs	r3, #0
 80078ac:	613b      	str	r3, [r7, #16]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	613b      	str	r3, [r7, #16]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	613b      	str	r3, [r7, #16]
 80078be:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d002      	beq.n	80078ce <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	77fb      	strb	r3, [r7, #31]
 80078cc:	e000      	b.n	80078d0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80078ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80078e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3720      	adds	r7, #32
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b088      	sub	sp, #32
 80078ee:	af02      	add	r7, sp, #8
 80078f0:	60f8      	str	r0, [r7, #12]
 80078f2:	60b9      	str	r1, [r7, #8]
 80078f4:	603b      	str	r3, [r7, #0]
 80078f6:	4613      	mov	r3, r2
 80078f8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007906:	d112      	bne.n	800792e <HAL_SPI_Receive+0x44>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10e      	bne.n	800792e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2204      	movs	r2, #4
 8007914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007918:	88fa      	ldrh	r2, [r7, #6]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	4613      	mov	r3, r2
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	68b9      	ldr	r1, [r7, #8]
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f000 f8f1 	bl	8007b0c <HAL_SPI_TransmitReceive>
 800792a:	4603      	mov	r3, r0
 800792c:	e0ea      	b.n	8007b04 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007934:	2b01      	cmp	r3, #1
 8007936:	d101      	bne.n	800793c <HAL_SPI_Receive+0x52>
 8007938:	2302      	movs	r3, #2
 800793a:	e0e3      	b.n	8007b04 <HAL_SPI_Receive+0x21a>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007944:	f7fd fbd0 	bl	80050e8 <HAL_GetTick>
 8007948:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b01      	cmp	r3, #1
 8007954:	d002      	beq.n	800795c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007956:	2302      	movs	r3, #2
 8007958:	75fb      	strb	r3, [r7, #23]
    goto error;
 800795a:	e0ca      	b.n	8007af2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d002      	beq.n	8007968 <HAL_SPI_Receive+0x7e>
 8007962:	88fb      	ldrh	r3, [r7, #6]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d102      	bne.n	800796e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800796c:	e0c1      	b.n	8007af2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2204      	movs	r2, #4
 8007972:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	88fa      	ldrh	r2, [r7, #6]
 8007986:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	88fa      	ldrh	r2, [r7, #6]
 800798c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079b4:	d10f      	bne.n	80079d6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80079d4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e0:	2b40      	cmp	r3, #64	; 0x40
 80079e2:	d007      	beq.n	80079f4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079f2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d162      	bne.n	8007ac2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80079fc:	e02e      	b.n	8007a5c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d115      	bne.n	8007a38 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f103 020c 	add.w	r2, r3, #12
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a18:	7812      	ldrb	r2, [r2, #0]
 8007a1a:	b2d2      	uxtb	r2, r2
 8007a1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a22:	1c5a      	adds	r2, r3, #1
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a36:	e011      	b.n	8007a5c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a38:	f7fd fb56 	bl	80050e8 <HAL_GetTick>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d803      	bhi.n	8007a50 <HAL_SPI_Receive+0x166>
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a4e:	d102      	bne.n	8007a56 <HAL_SPI_Receive+0x16c>
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d102      	bne.n	8007a5c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007a5a:	e04a      	b.n	8007af2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1cb      	bne.n	80079fe <HAL_SPI_Receive+0x114>
 8007a66:	e031      	b.n	8007acc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d113      	bne.n	8007a9e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68da      	ldr	r2, [r3, #12]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a80:	b292      	uxth	r2, r2
 8007a82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a88:	1c9a      	adds	r2, r3, #2
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	3b01      	subs	r3, #1
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a9c:	e011      	b.n	8007ac2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a9e:	f7fd fb23 	bl	80050e8 <HAL_GetTick>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	683a      	ldr	r2, [r7, #0]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d803      	bhi.n	8007ab6 <HAL_SPI_Receive+0x1cc>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab4:	d102      	bne.n	8007abc <HAL_SPI_Receive+0x1d2>
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d102      	bne.n	8007ac2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007ac0:	e017      	b.n	8007af2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1cd      	bne.n	8007a68 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	6839      	ldr	r1, [r7, #0]
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f000 fa45 	bl	8007f60 <SPI_EndRxTransaction>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2220      	movs	r2, #32
 8007ae0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d002      	beq.n	8007af0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	75fb      	strb	r3, [r7, #23]
 8007aee:	e000      	b.n	8007af2 <HAL_SPI_Receive+0x208>
  }

error :
 8007af0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b08c      	sub	sp, #48	; 0x30
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
 8007b18:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d101      	bne.n	8007b32 <HAL_SPI_TransmitReceive+0x26>
 8007b2e:	2302      	movs	r3, #2
 8007b30:	e18a      	b.n	8007e48 <HAL_SPI_TransmitReceive+0x33c>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b3a:	f7fd fad5 	bl	80050e8 <HAL_GetTick>
 8007b3e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007b50:	887b      	ldrh	r3, [r7, #2]
 8007b52:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d00f      	beq.n	8007b7c <HAL_SPI_TransmitReceive+0x70>
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b62:	d107      	bne.n	8007b74 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d103      	bne.n	8007b74 <HAL_SPI_TransmitReceive+0x68>
 8007b6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b70:	2b04      	cmp	r3, #4
 8007b72:	d003      	beq.n	8007b7c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007b74:	2302      	movs	r3, #2
 8007b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007b7a:	e15b      	b.n	8007e34 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d005      	beq.n	8007b8e <HAL_SPI_TransmitReceive+0x82>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <HAL_SPI_TransmitReceive+0x82>
 8007b88:	887b      	ldrh	r3, [r7, #2]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d103      	bne.n	8007b96 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007b94:	e14e      	b.n	8007e34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b04      	cmp	r3, #4
 8007ba0:	d003      	beq.n	8007baa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2205      	movs	r2, #5
 8007ba6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	887a      	ldrh	r2, [r7, #2]
 8007bba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	887a      	ldrh	r2, [r7, #2]
 8007bc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	887a      	ldrh	r2, [r7, #2]
 8007bcc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	887a      	ldrh	r2, [r7, #2]
 8007bd2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bea:	2b40      	cmp	r3, #64	; 0x40
 8007bec:	d007      	beq.n	8007bfe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bfc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c06:	d178      	bne.n	8007cfa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d002      	beq.n	8007c16 <HAL_SPI_TransmitReceive+0x10a>
 8007c10:	8b7b      	ldrh	r3, [r7, #26]
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d166      	bne.n	8007ce4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1a:	881a      	ldrh	r2, [r3, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c26:	1c9a      	adds	r2, r3, #2
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	3b01      	subs	r3, #1
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c3a:	e053      	b.n	8007ce4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f003 0302 	and.w	r3, r3, #2
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d11b      	bne.n	8007c82 <HAL_SPI_TransmitReceive+0x176>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d016      	beq.n	8007c82 <HAL_SPI_TransmitReceive+0x176>
 8007c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d113      	bne.n	8007c82 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c5e:	881a      	ldrh	r2, [r3, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6a:	1c9a      	adds	r2, r3, #2
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	3b01      	subs	r3, #1
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f003 0301 	and.w	r3, r3, #1
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d119      	bne.n	8007cc4 <HAL_SPI_TransmitReceive+0x1b8>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d014      	beq.n	8007cc4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68da      	ldr	r2, [r3, #12]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca4:	b292      	uxth	r2, r2
 8007ca6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cac:	1c9a      	adds	r2, r3, #2
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007cc4:	f7fd fa10 	bl	80050e8 <HAL_GetTick>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d807      	bhi.n	8007ce4 <HAL_SPI_TransmitReceive+0x1d8>
 8007cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cda:	d003      	beq.n	8007ce4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007ce2:	e0a7      	b.n	8007e34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1a6      	bne.n	8007c3c <HAL_SPI_TransmitReceive+0x130>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1a1      	bne.n	8007c3c <HAL_SPI_TransmitReceive+0x130>
 8007cf8:	e07c      	b.n	8007df4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d002      	beq.n	8007d08 <HAL_SPI_TransmitReceive+0x1fc>
 8007d02:	8b7b      	ldrh	r3, [r7, #26]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d16b      	bne.n	8007de0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	330c      	adds	r3, #12
 8007d12:	7812      	ldrb	r2, [r2, #0]
 8007d14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1a:	1c5a      	adds	r2, r3, #1
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	3b01      	subs	r3, #1
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d2e:	e057      	b.n	8007de0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f003 0302 	and.w	r3, r3, #2
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d11c      	bne.n	8007d78 <HAL_SPI_TransmitReceive+0x26c>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d017      	beq.n	8007d78 <HAL_SPI_TransmitReceive+0x26c>
 8007d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d114      	bne.n	8007d78 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	330c      	adds	r3, #12
 8007d58:	7812      	ldrb	r2, [r2, #0]
 8007d5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d60:	1c5a      	adds	r2, r3, #1
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d74:	2300      	movs	r3, #0
 8007d76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d119      	bne.n	8007dba <HAL_SPI_TransmitReceive+0x2ae>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d014      	beq.n	8007dba <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68da      	ldr	r2, [r3, #12]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9a:	b2d2      	uxtb	r2, r2
 8007d9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da2:	1c5a      	adds	r2, r3, #1
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	3b01      	subs	r3, #1
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007db6:	2301      	movs	r3, #1
 8007db8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007dba:	f7fd f995 	bl	80050e8 <HAL_GetTick>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d803      	bhi.n	8007dd2 <HAL_SPI_TransmitReceive+0x2c6>
 8007dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd0:	d102      	bne.n	8007dd8 <HAL_SPI_TransmitReceive+0x2cc>
 8007dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d103      	bne.n	8007de0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007dde:	e029      	b.n	8007e34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1a2      	bne.n	8007d30 <HAL_SPI_TransmitReceive+0x224>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d19d      	bne.n	8007d30 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007df6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f000 f917 	bl	800802c <SPI_EndRxTxTransaction>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d006      	beq.n	8007e12 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2220      	movs	r2, #32
 8007e0e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007e10:	e010      	b.n	8007e34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10b      	bne.n	8007e32 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	617b      	str	r3, [r7, #20]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	617b      	str	r3, [r7, #20]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	617b      	str	r3, [r7, #20]
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	e000      	b.n	8007e34 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007e32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007e44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3730      	adds	r7, #48	; 0x30
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b088      	sub	sp, #32
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	603b      	str	r3, [r7, #0]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e60:	f7fd f942 	bl	80050e8 <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e68:	1a9b      	subs	r3, r3, r2
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e70:	f7fd f93a 	bl	80050e8 <HAL_GetTick>
 8007e74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e76:	4b39      	ldr	r3, [pc, #228]	; (8007f5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	015b      	lsls	r3, r3, #5
 8007e7c:	0d1b      	lsrs	r3, r3, #20
 8007e7e:	69fa      	ldr	r2, [r7, #28]
 8007e80:	fb02 f303 	mul.w	r3, r2, r3
 8007e84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e86:	e054      	b.n	8007f32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e8e:	d050      	beq.n	8007f32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e90:	f7fd f92a 	bl	80050e8 <HAL_GetTick>
 8007e94:	4602      	mov	r2, r0
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	69fa      	ldr	r2, [r7, #28]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d902      	bls.n	8007ea6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d13d      	bne.n	8007f22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007eb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ebe:	d111      	bne.n	8007ee4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ec8:	d004      	beq.n	8007ed4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ed2:	d107      	bne.n	8007ee4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ee2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eec:	d10f      	bne.n	8007f0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007efc:	601a      	str	r2, [r3, #0]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e017      	b.n	8007f52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	689a      	ldr	r2, [r3, #8]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	bf0c      	ite	eq
 8007f42:	2301      	moveq	r3, #1
 8007f44:	2300      	movne	r3, #0
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	461a      	mov	r2, r3
 8007f4a:	79fb      	ldrb	r3, [r7, #7]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d19b      	bne.n	8007e88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3720      	adds	r7, #32
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	200023f0 	.word	0x200023f0

08007f60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af02      	add	r7, sp, #8
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f74:	d111      	bne.n	8007f9a <SPI_EndRxTransaction+0x3a>
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f7e:	d004      	beq.n	8007f8a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f88:	d107      	bne.n	8007f9a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f98:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fa2:	d12a      	bne.n	8007ffa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fac:	d012      	beq.n	8007fd4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	2180      	movs	r1, #128	; 0x80
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f7ff ff49 	bl	8007e50 <SPI_WaitFlagStateUntilTimeout>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d02d      	beq.n	8008020 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fc8:	f043 0220 	orr.w	r2, r3, #32
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e026      	b.n	8008022 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	2101      	movs	r1, #1
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f7ff ff36 	bl	8007e50 <SPI_WaitFlagStateUntilTimeout>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d01a      	beq.n	8008020 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fee:	f043 0220 	orr.w	r2, r3, #32
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e013      	b.n	8008022 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	2200      	movs	r2, #0
 8008002:	2101      	movs	r1, #1
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f7ff ff23 	bl	8007e50 <SPI_WaitFlagStateUntilTimeout>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d007      	beq.n	8008020 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008014:	f043 0220 	orr.w	r2, r3, #32
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800801c:	2303      	movs	r3, #3
 800801e:	e000      	b.n	8008022 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
	...

0800802c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b088      	sub	sp, #32
 8008030:	af02      	add	r7, sp, #8
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008038:	4b1b      	ldr	r3, [pc, #108]	; (80080a8 <SPI_EndRxTxTransaction+0x7c>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a1b      	ldr	r2, [pc, #108]	; (80080ac <SPI_EndRxTxTransaction+0x80>)
 800803e:	fba2 2303 	umull	r2, r3, r2, r3
 8008042:	0d5b      	lsrs	r3, r3, #21
 8008044:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008048:	fb02 f303 	mul.w	r3, r2, r3
 800804c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008056:	d112      	bne.n	800807e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	9300      	str	r3, [sp, #0]
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	2200      	movs	r2, #0
 8008060:	2180      	movs	r1, #128	; 0x80
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f7ff fef4 	bl	8007e50 <SPI_WaitFlagStateUntilTimeout>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d016      	beq.n	800809c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008072:	f043 0220 	orr.w	r2, r3, #32
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800807a:	2303      	movs	r3, #3
 800807c:	e00f      	b.n	800809e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00a      	beq.n	800809a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	3b01      	subs	r3, #1
 8008088:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008094:	2b80      	cmp	r3, #128	; 0x80
 8008096:	d0f2      	beq.n	800807e <SPI_EndRxTxTransaction+0x52>
 8008098:	e000      	b.n	800809c <SPI_EndRxTxTransaction+0x70>
        break;
 800809a:	bf00      	nop
  }

  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3718      	adds	r7, #24
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	200023f0 	.word	0x200023f0
 80080ac:	165e9f81 	.word	0x165e9f81

080080b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d101      	bne.n	80080c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e041      	b.n	8008146 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d106      	bne.n	80080dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7fc fd5a 	bl	8004b90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2202      	movs	r2, #2
 80080e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	3304      	adds	r3, #4
 80080ec:	4619      	mov	r1, r3
 80080ee:	4610      	mov	r0, r2
 80080f0:	f000 fb42 	bl	8008778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
	...

08008150 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800815e:	b2db      	uxtb	r3, r3
 8008160:	2b01      	cmp	r3, #1
 8008162:	d001      	beq.n	8008168 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e046      	b.n	80081f6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2202      	movs	r2, #2
 800816c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a23      	ldr	r2, [pc, #140]	; (8008204 <HAL_TIM_Base_Start+0xb4>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d022      	beq.n	80081c0 <HAL_TIM_Base_Start+0x70>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008182:	d01d      	beq.n	80081c0 <HAL_TIM_Base_Start+0x70>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a1f      	ldr	r2, [pc, #124]	; (8008208 <HAL_TIM_Base_Start+0xb8>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d018      	beq.n	80081c0 <HAL_TIM_Base_Start+0x70>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a1e      	ldr	r2, [pc, #120]	; (800820c <HAL_TIM_Base_Start+0xbc>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d013      	beq.n	80081c0 <HAL_TIM_Base_Start+0x70>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a1c      	ldr	r2, [pc, #112]	; (8008210 <HAL_TIM_Base_Start+0xc0>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d00e      	beq.n	80081c0 <HAL_TIM_Base_Start+0x70>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a1b      	ldr	r2, [pc, #108]	; (8008214 <HAL_TIM_Base_Start+0xc4>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d009      	beq.n	80081c0 <HAL_TIM_Base_Start+0x70>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a19      	ldr	r2, [pc, #100]	; (8008218 <HAL_TIM_Base_Start+0xc8>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d004      	beq.n	80081c0 <HAL_TIM_Base_Start+0x70>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a18      	ldr	r2, [pc, #96]	; (800821c <HAL_TIM_Base_Start+0xcc>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d111      	bne.n	80081e4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	f003 0307 	and.w	r3, r3, #7
 80081ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2b06      	cmp	r3, #6
 80081d0:	d010      	beq.n	80081f4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f042 0201 	orr.w	r2, r2, #1
 80081e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081e2:	e007      	b.n	80081f4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f042 0201 	orr.w	r2, r2, #1
 80081f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	40010000 	.word	0x40010000
 8008208:	40000400 	.word	0x40000400
 800820c:	40000800 	.word	0x40000800
 8008210:	40000c00 	.word	0x40000c00
 8008214:	40010400 	.word	0x40010400
 8008218:	40014000 	.word	0x40014000
 800821c:	40001800 	.word	0x40001800

08008220 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d101      	bne.n	8008232 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e041      	b.n	80082b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b00      	cmp	r3, #0
 800823c:	d106      	bne.n	800824c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f839 	bl	80082be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2202      	movs	r2, #2
 8008250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	3304      	adds	r3, #4
 800825c:	4619      	mov	r1, r3
 800825e:	4610      	mov	r0, r2
 8008260:	f000 fa8a 	bl	8008778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80082c6:	bf00      	nop
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
	...

080082d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d109      	bne.n	80082f8 <HAL_TIM_PWM_Start+0x24>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	bf14      	ite	ne
 80082f0:	2301      	movne	r3, #1
 80082f2:	2300      	moveq	r3, #0
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	e022      	b.n	800833e <HAL_TIM_PWM_Start+0x6a>
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	2b04      	cmp	r3, #4
 80082fc:	d109      	bne.n	8008312 <HAL_TIM_PWM_Start+0x3e>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008304:	b2db      	uxtb	r3, r3
 8008306:	2b01      	cmp	r3, #1
 8008308:	bf14      	ite	ne
 800830a:	2301      	movne	r3, #1
 800830c:	2300      	moveq	r3, #0
 800830e:	b2db      	uxtb	r3, r3
 8008310:	e015      	b.n	800833e <HAL_TIM_PWM_Start+0x6a>
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	2b08      	cmp	r3, #8
 8008316:	d109      	bne.n	800832c <HAL_TIM_PWM_Start+0x58>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b01      	cmp	r3, #1
 8008322:	bf14      	ite	ne
 8008324:	2301      	movne	r3, #1
 8008326:	2300      	moveq	r3, #0
 8008328:	b2db      	uxtb	r3, r3
 800832a:	e008      	b.n	800833e <HAL_TIM_PWM_Start+0x6a>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008332:	b2db      	uxtb	r3, r3
 8008334:	2b01      	cmp	r3, #1
 8008336:	bf14      	ite	ne
 8008338:	2301      	movne	r3, #1
 800833a:	2300      	moveq	r3, #0
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	d001      	beq.n	8008346 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	e07c      	b.n	8008440 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d104      	bne.n	8008356 <HAL_TIM_PWM_Start+0x82>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2202      	movs	r2, #2
 8008350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008354:	e013      	b.n	800837e <HAL_TIM_PWM_Start+0xaa>
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	2b04      	cmp	r3, #4
 800835a:	d104      	bne.n	8008366 <HAL_TIM_PWM_Start+0x92>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2202      	movs	r2, #2
 8008360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008364:	e00b      	b.n	800837e <HAL_TIM_PWM_Start+0xaa>
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	2b08      	cmp	r3, #8
 800836a:	d104      	bne.n	8008376 <HAL_TIM_PWM_Start+0xa2>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2202      	movs	r2, #2
 8008370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008374:	e003      	b.n	800837e <HAL_TIM_PWM_Start+0xaa>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2202      	movs	r2, #2
 800837a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2201      	movs	r2, #1
 8008384:	6839      	ldr	r1, [r7, #0]
 8008386:	4618      	mov	r0, r3
 8008388:	f000 fce0 	bl	8008d4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a2d      	ldr	r2, [pc, #180]	; (8008448 <HAL_TIM_PWM_Start+0x174>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d004      	beq.n	80083a0 <HAL_TIM_PWM_Start+0xcc>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a2c      	ldr	r2, [pc, #176]	; (800844c <HAL_TIM_PWM_Start+0x178>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d101      	bne.n	80083a4 <HAL_TIM_PWM_Start+0xd0>
 80083a0:	2301      	movs	r3, #1
 80083a2:	e000      	b.n	80083a6 <HAL_TIM_PWM_Start+0xd2>
 80083a4:	2300      	movs	r3, #0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d007      	beq.n	80083ba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a22      	ldr	r2, [pc, #136]	; (8008448 <HAL_TIM_PWM_Start+0x174>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d022      	beq.n	800840a <HAL_TIM_PWM_Start+0x136>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083cc:	d01d      	beq.n	800840a <HAL_TIM_PWM_Start+0x136>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a1f      	ldr	r2, [pc, #124]	; (8008450 <HAL_TIM_PWM_Start+0x17c>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d018      	beq.n	800840a <HAL_TIM_PWM_Start+0x136>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a1d      	ldr	r2, [pc, #116]	; (8008454 <HAL_TIM_PWM_Start+0x180>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d013      	beq.n	800840a <HAL_TIM_PWM_Start+0x136>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a1c      	ldr	r2, [pc, #112]	; (8008458 <HAL_TIM_PWM_Start+0x184>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d00e      	beq.n	800840a <HAL_TIM_PWM_Start+0x136>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a16      	ldr	r2, [pc, #88]	; (800844c <HAL_TIM_PWM_Start+0x178>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d009      	beq.n	800840a <HAL_TIM_PWM_Start+0x136>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a18      	ldr	r2, [pc, #96]	; (800845c <HAL_TIM_PWM_Start+0x188>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d004      	beq.n	800840a <HAL_TIM_PWM_Start+0x136>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a16      	ldr	r2, [pc, #88]	; (8008460 <HAL_TIM_PWM_Start+0x18c>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d111      	bne.n	800842e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	f003 0307 	and.w	r3, r3, #7
 8008414:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2b06      	cmp	r3, #6
 800841a:	d010      	beq.n	800843e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f042 0201 	orr.w	r2, r2, #1
 800842a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800842c:	e007      	b.n	800843e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f042 0201 	orr.w	r2, r2, #1
 800843c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3710      	adds	r7, #16
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	40010000 	.word	0x40010000
 800844c:	40010400 	.word	0x40010400
 8008450:	40000400 	.word	0x40000400
 8008454:	40000800 	.word	0x40000800
 8008458:	40000c00 	.word	0x40000c00
 800845c:	40014000 	.word	0x40014000
 8008460:	40001800 	.word	0x40001800

08008464 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008470:	2300      	movs	r3, #0
 8008472:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800847a:	2b01      	cmp	r3, #1
 800847c:	d101      	bne.n	8008482 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800847e:	2302      	movs	r3, #2
 8008480:	e0ae      	b.n	80085e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2b0c      	cmp	r3, #12
 800848e:	f200 809f 	bhi.w	80085d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008492:	a201      	add	r2, pc, #4	; (adr r2, 8008498 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008498:	080084cd 	.word	0x080084cd
 800849c:	080085d1 	.word	0x080085d1
 80084a0:	080085d1 	.word	0x080085d1
 80084a4:	080085d1 	.word	0x080085d1
 80084a8:	0800850d 	.word	0x0800850d
 80084ac:	080085d1 	.word	0x080085d1
 80084b0:	080085d1 	.word	0x080085d1
 80084b4:	080085d1 	.word	0x080085d1
 80084b8:	0800854f 	.word	0x0800854f
 80084bc:	080085d1 	.word	0x080085d1
 80084c0:	080085d1 	.word	0x080085d1
 80084c4:	080085d1 	.word	0x080085d1
 80084c8:	0800858f 	.word	0x0800858f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	68b9      	ldr	r1, [r7, #8]
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 f9f0 	bl	80088b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	699a      	ldr	r2, [r3, #24]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f042 0208 	orr.w	r2, r2, #8
 80084e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	699a      	ldr	r2, [r3, #24]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f022 0204 	bic.w	r2, r2, #4
 80084f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	6999      	ldr	r1, [r3, #24]
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	691a      	ldr	r2, [r3, #16]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	430a      	orrs	r2, r1
 8008508:	619a      	str	r2, [r3, #24]
      break;
 800850a:	e064      	b.n	80085d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68b9      	ldr	r1, [r7, #8]
 8008512:	4618      	mov	r0, r3
 8008514:	f000 fa40 	bl	8008998 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	699a      	ldr	r2, [r3, #24]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008526:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	699a      	ldr	r2, [r3, #24]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6999      	ldr	r1, [r3, #24]
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	021a      	lsls	r2, r3, #8
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	430a      	orrs	r2, r1
 800854a:	619a      	str	r2, [r3, #24]
      break;
 800854c:	e043      	b.n	80085d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	68b9      	ldr	r1, [r7, #8]
 8008554:	4618      	mov	r0, r3
 8008556:	f000 fa95 	bl	8008a84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	69da      	ldr	r2, [r3, #28]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f042 0208 	orr.w	r2, r2, #8
 8008568:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	69da      	ldr	r2, [r3, #28]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f022 0204 	bic.w	r2, r2, #4
 8008578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	69d9      	ldr	r1, [r3, #28]
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	691a      	ldr	r2, [r3, #16]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	430a      	orrs	r2, r1
 800858a:	61da      	str	r2, [r3, #28]
      break;
 800858c:	e023      	b.n	80085d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68b9      	ldr	r1, [r7, #8]
 8008594:	4618      	mov	r0, r3
 8008596:	f000 fae9 	bl	8008b6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	69da      	ldr	r2, [r3, #28]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	69da      	ldr	r2, [r3, #28]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	69d9      	ldr	r1, [r3, #28]
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	021a      	lsls	r2, r3, #8
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	430a      	orrs	r2, r1
 80085cc:	61da      	str	r2, [r3, #28]
      break;
 80085ce:	e002      	b.n	80085d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	75fb      	strb	r3, [r7, #23]
      break;
 80085d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085de:	7dfb      	ldrb	r3, [r7, #23]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3718      	adds	r7, #24
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085f2:	2300      	movs	r3, #0
 80085f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d101      	bne.n	8008604 <HAL_TIM_ConfigClockSource+0x1c>
 8008600:	2302      	movs	r3, #2
 8008602:	e0b4      	b.n	800876e <HAL_TIM_ConfigClockSource+0x186>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2202      	movs	r2, #2
 8008610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800862a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68ba      	ldr	r2, [r7, #8]
 8008632:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800863c:	d03e      	beq.n	80086bc <HAL_TIM_ConfigClockSource+0xd4>
 800863e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008642:	f200 8087 	bhi.w	8008754 <HAL_TIM_ConfigClockSource+0x16c>
 8008646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800864a:	f000 8086 	beq.w	800875a <HAL_TIM_ConfigClockSource+0x172>
 800864e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008652:	d87f      	bhi.n	8008754 <HAL_TIM_ConfigClockSource+0x16c>
 8008654:	2b70      	cmp	r3, #112	; 0x70
 8008656:	d01a      	beq.n	800868e <HAL_TIM_ConfigClockSource+0xa6>
 8008658:	2b70      	cmp	r3, #112	; 0x70
 800865a:	d87b      	bhi.n	8008754 <HAL_TIM_ConfigClockSource+0x16c>
 800865c:	2b60      	cmp	r3, #96	; 0x60
 800865e:	d050      	beq.n	8008702 <HAL_TIM_ConfigClockSource+0x11a>
 8008660:	2b60      	cmp	r3, #96	; 0x60
 8008662:	d877      	bhi.n	8008754 <HAL_TIM_ConfigClockSource+0x16c>
 8008664:	2b50      	cmp	r3, #80	; 0x50
 8008666:	d03c      	beq.n	80086e2 <HAL_TIM_ConfigClockSource+0xfa>
 8008668:	2b50      	cmp	r3, #80	; 0x50
 800866a:	d873      	bhi.n	8008754 <HAL_TIM_ConfigClockSource+0x16c>
 800866c:	2b40      	cmp	r3, #64	; 0x40
 800866e:	d058      	beq.n	8008722 <HAL_TIM_ConfigClockSource+0x13a>
 8008670:	2b40      	cmp	r3, #64	; 0x40
 8008672:	d86f      	bhi.n	8008754 <HAL_TIM_ConfigClockSource+0x16c>
 8008674:	2b30      	cmp	r3, #48	; 0x30
 8008676:	d064      	beq.n	8008742 <HAL_TIM_ConfigClockSource+0x15a>
 8008678:	2b30      	cmp	r3, #48	; 0x30
 800867a:	d86b      	bhi.n	8008754 <HAL_TIM_ConfigClockSource+0x16c>
 800867c:	2b20      	cmp	r3, #32
 800867e:	d060      	beq.n	8008742 <HAL_TIM_ConfigClockSource+0x15a>
 8008680:	2b20      	cmp	r3, #32
 8008682:	d867      	bhi.n	8008754 <HAL_TIM_ConfigClockSource+0x16c>
 8008684:	2b00      	cmp	r3, #0
 8008686:	d05c      	beq.n	8008742 <HAL_TIM_ConfigClockSource+0x15a>
 8008688:	2b10      	cmp	r3, #16
 800868a:	d05a      	beq.n	8008742 <HAL_TIM_ConfigClockSource+0x15a>
 800868c:	e062      	b.n	8008754 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6818      	ldr	r0, [r3, #0]
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	6899      	ldr	r1, [r3, #8]
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	685a      	ldr	r2, [r3, #4]
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	f000 fb35 	bl	8008d0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80086b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	609a      	str	r2, [r3, #8]
      break;
 80086ba:	e04f      	b.n	800875c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6818      	ldr	r0, [r3, #0]
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	6899      	ldr	r1, [r3, #8]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	685a      	ldr	r2, [r3, #4]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	f000 fb1e 	bl	8008d0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	689a      	ldr	r2, [r3, #8]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086de:	609a      	str	r2, [r3, #8]
      break;
 80086e0:	e03c      	b.n	800875c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6818      	ldr	r0, [r3, #0]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	6859      	ldr	r1, [r3, #4]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	461a      	mov	r2, r3
 80086f0:	f000 fa92 	bl	8008c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2150      	movs	r1, #80	; 0x50
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 faeb 	bl	8008cd6 <TIM_ITRx_SetConfig>
      break;
 8008700:	e02c      	b.n	800875c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6818      	ldr	r0, [r3, #0]
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	6859      	ldr	r1, [r3, #4]
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	461a      	mov	r2, r3
 8008710:	f000 fab1 	bl	8008c76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2160      	movs	r1, #96	; 0x60
 800871a:	4618      	mov	r0, r3
 800871c:	f000 fadb 	bl	8008cd6 <TIM_ITRx_SetConfig>
      break;
 8008720:	e01c      	b.n	800875c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6818      	ldr	r0, [r3, #0]
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	6859      	ldr	r1, [r3, #4]
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	461a      	mov	r2, r3
 8008730:	f000 fa72 	bl	8008c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2140      	movs	r1, #64	; 0x40
 800873a:	4618      	mov	r0, r3
 800873c:	f000 facb 	bl	8008cd6 <TIM_ITRx_SetConfig>
      break;
 8008740:	e00c      	b.n	800875c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4619      	mov	r1, r3
 800874c:	4610      	mov	r0, r2
 800874e:	f000 fac2 	bl	8008cd6 <TIM_ITRx_SetConfig>
      break;
 8008752:	e003      	b.n	800875c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	73fb      	strb	r3, [r7, #15]
      break;
 8008758:	e000      	b.n	800875c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800875a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800876c:	7bfb      	ldrb	r3, [r7, #15]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
	...

08008778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4a40      	ldr	r2, [pc, #256]	; (800888c <TIM_Base_SetConfig+0x114>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d013      	beq.n	80087b8 <TIM_Base_SetConfig+0x40>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008796:	d00f      	beq.n	80087b8 <TIM_Base_SetConfig+0x40>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a3d      	ldr	r2, [pc, #244]	; (8008890 <TIM_Base_SetConfig+0x118>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d00b      	beq.n	80087b8 <TIM_Base_SetConfig+0x40>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4a3c      	ldr	r2, [pc, #240]	; (8008894 <TIM_Base_SetConfig+0x11c>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d007      	beq.n	80087b8 <TIM_Base_SetConfig+0x40>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a3b      	ldr	r2, [pc, #236]	; (8008898 <TIM_Base_SetConfig+0x120>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d003      	beq.n	80087b8 <TIM_Base_SetConfig+0x40>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a3a      	ldr	r2, [pc, #232]	; (800889c <TIM_Base_SetConfig+0x124>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d108      	bne.n	80087ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	68fa      	ldr	r2, [r7, #12]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a2f      	ldr	r2, [pc, #188]	; (800888c <TIM_Base_SetConfig+0x114>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d02b      	beq.n	800882a <TIM_Base_SetConfig+0xb2>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087d8:	d027      	beq.n	800882a <TIM_Base_SetConfig+0xb2>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a2c      	ldr	r2, [pc, #176]	; (8008890 <TIM_Base_SetConfig+0x118>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d023      	beq.n	800882a <TIM_Base_SetConfig+0xb2>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a2b      	ldr	r2, [pc, #172]	; (8008894 <TIM_Base_SetConfig+0x11c>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d01f      	beq.n	800882a <TIM_Base_SetConfig+0xb2>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a2a      	ldr	r2, [pc, #168]	; (8008898 <TIM_Base_SetConfig+0x120>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d01b      	beq.n	800882a <TIM_Base_SetConfig+0xb2>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a29      	ldr	r2, [pc, #164]	; (800889c <TIM_Base_SetConfig+0x124>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d017      	beq.n	800882a <TIM_Base_SetConfig+0xb2>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a28      	ldr	r2, [pc, #160]	; (80088a0 <TIM_Base_SetConfig+0x128>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d013      	beq.n	800882a <TIM_Base_SetConfig+0xb2>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a27      	ldr	r2, [pc, #156]	; (80088a4 <TIM_Base_SetConfig+0x12c>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d00f      	beq.n	800882a <TIM_Base_SetConfig+0xb2>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a26      	ldr	r2, [pc, #152]	; (80088a8 <TIM_Base_SetConfig+0x130>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d00b      	beq.n	800882a <TIM_Base_SetConfig+0xb2>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a25      	ldr	r2, [pc, #148]	; (80088ac <TIM_Base_SetConfig+0x134>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d007      	beq.n	800882a <TIM_Base_SetConfig+0xb2>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a24      	ldr	r2, [pc, #144]	; (80088b0 <TIM_Base_SetConfig+0x138>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d003      	beq.n	800882a <TIM_Base_SetConfig+0xb2>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a23      	ldr	r2, [pc, #140]	; (80088b4 <TIM_Base_SetConfig+0x13c>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d108      	bne.n	800883c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	4313      	orrs	r3, r2
 800883a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	4313      	orrs	r3, r2
 8008848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	689a      	ldr	r2, [r3, #8]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a0a      	ldr	r2, [pc, #40]	; (800888c <TIM_Base_SetConfig+0x114>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d003      	beq.n	8008870 <TIM_Base_SetConfig+0xf8>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a0c      	ldr	r2, [pc, #48]	; (800889c <TIM_Base_SetConfig+0x124>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d103      	bne.n	8008878 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	691a      	ldr	r2, [r3, #16]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	615a      	str	r2, [r3, #20]
}
 800887e:	bf00      	nop
 8008880:	3714      	adds	r7, #20
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	40010000 	.word	0x40010000
 8008890:	40000400 	.word	0x40000400
 8008894:	40000800 	.word	0x40000800
 8008898:	40000c00 	.word	0x40000c00
 800889c:	40010400 	.word	0x40010400
 80088a0:	40014000 	.word	0x40014000
 80088a4:	40014400 	.word	0x40014400
 80088a8:	40014800 	.word	0x40014800
 80088ac:	40001800 	.word	0x40001800
 80088b0:	40001c00 	.word	0x40001c00
 80088b4:	40002000 	.word	0x40002000

080088b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b087      	sub	sp, #28
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a1b      	ldr	r3, [r3, #32]
 80088c6:	f023 0201 	bic.w	r2, r3, #1
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	699b      	ldr	r3, [r3, #24]
 80088de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f023 0303 	bic.w	r3, r3, #3
 80088ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	f023 0302 	bic.w	r3, r3, #2
 8008900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	4313      	orrs	r3, r2
 800890a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4a20      	ldr	r2, [pc, #128]	; (8008990 <TIM_OC1_SetConfig+0xd8>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d003      	beq.n	800891c <TIM_OC1_SetConfig+0x64>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a1f      	ldr	r2, [pc, #124]	; (8008994 <TIM_OC1_SetConfig+0xdc>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d10c      	bne.n	8008936 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	f023 0308 	bic.w	r3, r3, #8
 8008922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	697a      	ldr	r2, [r7, #20]
 800892a:	4313      	orrs	r3, r2
 800892c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	f023 0304 	bic.w	r3, r3, #4
 8008934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a15      	ldr	r2, [pc, #84]	; (8008990 <TIM_OC1_SetConfig+0xd8>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d003      	beq.n	8008946 <TIM_OC1_SetConfig+0x8e>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a14      	ldr	r2, [pc, #80]	; (8008994 <TIM_OC1_SetConfig+0xdc>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d111      	bne.n	800896a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800894c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	695b      	ldr	r3, [r3, #20]
 800895a:	693a      	ldr	r2, [r7, #16]
 800895c:	4313      	orrs	r3, r2
 800895e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	699b      	ldr	r3, [r3, #24]
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	4313      	orrs	r3, r2
 8008968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	685a      	ldr	r2, [r3, #4]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	621a      	str	r2, [r3, #32]
}
 8008984:	bf00      	nop
 8008986:	371c      	adds	r7, #28
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr
 8008990:	40010000 	.word	0x40010000
 8008994:	40010400 	.word	0x40010400

08008998 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008998:	b480      	push	{r7}
 800899a:	b087      	sub	sp, #28
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	f023 0210 	bic.w	r2, r3, #16
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	699b      	ldr	r3, [r3, #24]
 80089be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	021b      	lsls	r3, r3, #8
 80089d6:	68fa      	ldr	r2, [r7, #12]
 80089d8:	4313      	orrs	r3, r2
 80089da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	f023 0320 	bic.w	r3, r3, #32
 80089e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	011b      	lsls	r3, r3, #4
 80089ea:	697a      	ldr	r2, [r7, #20]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a22      	ldr	r2, [pc, #136]	; (8008a7c <TIM_OC2_SetConfig+0xe4>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d003      	beq.n	8008a00 <TIM_OC2_SetConfig+0x68>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a21      	ldr	r2, [pc, #132]	; (8008a80 <TIM_OC2_SetConfig+0xe8>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d10d      	bne.n	8008a1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	011b      	lsls	r3, r3, #4
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a17      	ldr	r2, [pc, #92]	; (8008a7c <TIM_OC2_SetConfig+0xe4>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d003      	beq.n	8008a2c <TIM_OC2_SetConfig+0x94>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a16      	ldr	r2, [pc, #88]	; (8008a80 <TIM_OC2_SetConfig+0xe8>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d113      	bne.n	8008a54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	695b      	ldr	r3, [r3, #20]
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	693a      	ldr	r2, [r7, #16]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	699b      	ldr	r3, [r3, #24]
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	693a      	ldr	r2, [r7, #16]
 8008a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	685a      	ldr	r2, [r3, #4]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	697a      	ldr	r2, [r7, #20]
 8008a6c:	621a      	str	r2, [r3, #32]
}
 8008a6e:	bf00      	nop
 8008a70:	371c      	adds	r7, #28
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr
 8008a7a:	bf00      	nop
 8008a7c:	40010000 	.word	0x40010000
 8008a80:	40010400 	.word	0x40010400

08008a84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b087      	sub	sp, #28
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a1b      	ldr	r3, [r3, #32]
 8008a92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a1b      	ldr	r3, [r3, #32]
 8008a9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	69db      	ldr	r3, [r3, #28]
 8008aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f023 0303 	bic.w	r3, r3, #3
 8008aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	021b      	lsls	r3, r3, #8
 8008ad4:	697a      	ldr	r2, [r7, #20]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a21      	ldr	r2, [pc, #132]	; (8008b64 <TIM_OC3_SetConfig+0xe0>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d003      	beq.n	8008aea <TIM_OC3_SetConfig+0x66>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a20      	ldr	r2, [pc, #128]	; (8008b68 <TIM_OC3_SetConfig+0xe4>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d10d      	bne.n	8008b06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008af0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	021b      	lsls	r3, r3, #8
 8008af8:	697a      	ldr	r2, [r7, #20]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a16      	ldr	r2, [pc, #88]	; (8008b64 <TIM_OC3_SetConfig+0xe0>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d003      	beq.n	8008b16 <TIM_OC3_SetConfig+0x92>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4a15      	ldr	r2, [pc, #84]	; (8008b68 <TIM_OC3_SetConfig+0xe4>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d113      	bne.n	8008b3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	695b      	ldr	r3, [r3, #20]
 8008b2a:	011b      	lsls	r3, r3, #4
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	699b      	ldr	r3, [r3, #24]
 8008b36:	011b      	lsls	r3, r3, #4
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	693a      	ldr	r2, [r7, #16]
 8008b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	685a      	ldr	r2, [r3, #4]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	697a      	ldr	r2, [r7, #20]
 8008b56:	621a      	str	r2, [r3, #32]
}
 8008b58:	bf00      	nop
 8008b5a:	371c      	adds	r7, #28
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr
 8008b64:	40010000 	.word	0x40010000
 8008b68:	40010400 	.word	0x40010400

08008b6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b087      	sub	sp, #28
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6a1b      	ldr	r3, [r3, #32]
 8008b7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	69db      	ldr	r3, [r3, #28]
 8008b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	021b      	lsls	r3, r3, #8
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008bb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	031b      	lsls	r3, r3, #12
 8008bbe:	693a      	ldr	r2, [r7, #16]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a12      	ldr	r2, [pc, #72]	; (8008c10 <TIM_OC4_SetConfig+0xa4>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d003      	beq.n	8008bd4 <TIM_OC4_SetConfig+0x68>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a11      	ldr	r2, [pc, #68]	; (8008c14 <TIM_OC4_SetConfig+0xa8>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d109      	bne.n	8008be8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	695b      	ldr	r3, [r3, #20]
 8008be0:	019b      	lsls	r3, r3, #6
 8008be2:	697a      	ldr	r2, [r7, #20]
 8008be4:	4313      	orrs	r3, r2
 8008be6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	697a      	ldr	r2, [r7, #20]
 8008bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	685a      	ldr	r2, [r3, #4]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	621a      	str	r2, [r3, #32]
}
 8008c02:	bf00      	nop
 8008c04:	371c      	adds	r7, #28
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	40010000 	.word	0x40010000
 8008c14:	40010400 	.word	0x40010400

08008c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b087      	sub	sp, #28
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6a1b      	ldr	r3, [r3, #32]
 8008c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6a1b      	ldr	r3, [r3, #32]
 8008c2e:	f023 0201 	bic.w	r2, r3, #1
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	011b      	lsls	r3, r3, #4
 8008c48:	693a      	ldr	r2, [r7, #16]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	f023 030a 	bic.w	r3, r3, #10
 8008c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c56:	697a      	ldr	r2, [r7, #20]
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	693a      	ldr	r2, [r7, #16]
 8008c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	697a      	ldr	r2, [r7, #20]
 8008c68:	621a      	str	r2, [r3, #32]
}
 8008c6a:	bf00      	nop
 8008c6c:	371c      	adds	r7, #28
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr

08008c76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c76:	b480      	push	{r7}
 8008c78:	b087      	sub	sp, #28
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	60f8      	str	r0, [r7, #12]
 8008c7e:	60b9      	str	r1, [r7, #8]
 8008c80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6a1b      	ldr	r3, [r3, #32]
 8008c86:	f023 0210 	bic.w	r2, r3, #16
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	699b      	ldr	r3, [r3, #24]
 8008c92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6a1b      	ldr	r3, [r3, #32]
 8008c98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ca0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	031b      	lsls	r3, r3, #12
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008cb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	011b      	lsls	r3, r3, #4
 8008cb8:	693a      	ldr	r2, [r7, #16]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	621a      	str	r2, [r3, #32]
}
 8008cca:	bf00      	nop
 8008ccc:	371c      	adds	r7, #28
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	b085      	sub	sp, #20
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
 8008cde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	f043 0307 	orr.w	r3, r3, #7
 8008cf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	609a      	str	r2, [r3, #8]
}
 8008d00:	bf00      	nop
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b087      	sub	sp, #28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	607a      	str	r2, [r7, #4]
 8008d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	021a      	lsls	r2, r3, #8
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	431a      	orrs	r2, r3
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	697a      	ldr	r2, [r7, #20]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	697a      	ldr	r2, [r7, #20]
 8008d3e:	609a      	str	r2, [r3, #8]
}
 8008d40:	bf00      	nop
 8008d42:	371c      	adds	r7, #28
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b087      	sub	sp, #28
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	f003 031f 	and.w	r3, r3, #31
 8008d5e:	2201      	movs	r2, #1
 8008d60:	fa02 f303 	lsl.w	r3, r2, r3
 8008d64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6a1a      	ldr	r2, [r3, #32]
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	43db      	mvns	r3, r3
 8008d6e:	401a      	ands	r2, r3
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6a1a      	ldr	r2, [r3, #32]
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	f003 031f 	and.w	r3, r3, #31
 8008d7e:	6879      	ldr	r1, [r7, #4]
 8008d80:	fa01 f303 	lsl.w	r3, r1, r3
 8008d84:	431a      	orrs	r2, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	621a      	str	r2, [r3, #32]
}
 8008d8a:	bf00      	nop
 8008d8c:	371c      	adds	r7, #28
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
	...

08008d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d101      	bne.n	8008db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008dac:	2302      	movs	r3, #2
 8008dae:	e05a      	b.n	8008e66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2202      	movs	r2, #2
 8008dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a21      	ldr	r2, [pc, #132]	; (8008e74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d022      	beq.n	8008e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dfc:	d01d      	beq.n	8008e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a1d      	ldr	r2, [pc, #116]	; (8008e78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d018      	beq.n	8008e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a1b      	ldr	r2, [pc, #108]	; (8008e7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d013      	beq.n	8008e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a1a      	ldr	r2, [pc, #104]	; (8008e80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d00e      	beq.n	8008e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a18      	ldr	r2, [pc, #96]	; (8008e84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d009      	beq.n	8008e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a17      	ldr	r2, [pc, #92]	; (8008e88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d004      	beq.n	8008e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a15      	ldr	r2, [pc, #84]	; (8008e8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d10c      	bne.n	8008e54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	68ba      	ldr	r2, [r7, #8]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68ba      	ldr	r2, [r7, #8]
 8008e52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3714      	adds	r7, #20
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	40010000 	.word	0x40010000
 8008e78:	40000400 	.word	0x40000400
 8008e7c:	40000800 	.word	0x40000800
 8008e80:	40000c00 	.word	0x40000c00
 8008e84:	40010400 	.word	0x40010400
 8008e88:	40014000 	.word	0x40014000
 8008e8c:	40001800 	.word	0x40001800

08008e90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d101      	bne.n	8008eac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008ea8:	2302      	movs	r3, #2
 8008eaa:	e03d      	b.n	8008f28 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	69db      	ldr	r3, [r3, #28]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3714      	adds	r7, #20
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d101      	bne.n	8008f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	e03f      	b.n	8008fc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d106      	bne.n	8008f60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f7fb fec2 	bl	8004ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2224      	movs	r2, #36	; 0x24
 8008f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68da      	ldr	r2, [r3, #12]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f929 	bl	80091d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	691a      	ldr	r2, [r3, #16]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	695a      	ldr	r2, [r3, #20]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68da      	ldr	r2, [r3, #12]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008fac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2220      	movs	r2, #32
 8008fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2220      	movs	r2, #32
 8008fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3708      	adds	r7, #8
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b08a      	sub	sp, #40	; 0x28
 8008fd2:	af02      	add	r7, sp, #8
 8008fd4:	60f8      	str	r0, [r7, #12]
 8008fd6:	60b9      	str	r1, [r7, #8]
 8008fd8:	603b      	str	r3, [r7, #0]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b20      	cmp	r3, #32
 8008fec:	d17c      	bne.n	80090e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d002      	beq.n	8008ffa <HAL_UART_Transmit+0x2c>
 8008ff4:	88fb      	ldrh	r3, [r7, #6]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d101      	bne.n	8008ffe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e075      	b.n	80090ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009004:	2b01      	cmp	r3, #1
 8009006:	d101      	bne.n	800900c <HAL_UART_Transmit+0x3e>
 8009008:	2302      	movs	r3, #2
 800900a:	e06e      	b.n	80090ea <HAL_UART_Transmit+0x11c>
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2201      	movs	r2, #1
 8009010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2200      	movs	r2, #0
 8009018:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2221      	movs	r2, #33	; 0x21
 800901e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009022:	f7fc f861 	bl	80050e8 <HAL_GetTick>
 8009026:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	88fa      	ldrh	r2, [r7, #6]
 800902c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	88fa      	ldrh	r2, [r7, #6]
 8009032:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800903c:	d108      	bne.n	8009050 <HAL_UART_Transmit+0x82>
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d104      	bne.n	8009050 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009046:	2300      	movs	r3, #0
 8009048:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	61bb      	str	r3, [r7, #24]
 800904e:	e003      	b.n	8009058 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009054:	2300      	movs	r3, #0
 8009056:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009060:	e02a      	b.n	80090b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	9300      	str	r3, [sp, #0]
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	2200      	movs	r2, #0
 800906a:	2180      	movs	r1, #128	; 0x80
 800906c:	68f8      	ldr	r0, [r7, #12]
 800906e:	f000 f840 	bl	80090f2 <UART_WaitOnFlagUntilTimeout>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d001      	beq.n	800907c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009078:	2303      	movs	r3, #3
 800907a:	e036      	b.n	80090ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d10b      	bne.n	800909a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	881b      	ldrh	r3, [r3, #0]
 8009086:	461a      	mov	r2, r3
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009090:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	3302      	adds	r3, #2
 8009096:	61bb      	str	r3, [r7, #24]
 8009098:	e007      	b.n	80090aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	781a      	ldrb	r2, [r3, #0]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	3301      	adds	r3, #1
 80090a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	3b01      	subs	r3, #1
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80090bc:	b29b      	uxth	r3, r3
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1cf      	bne.n	8009062 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	9300      	str	r3, [sp, #0]
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	2200      	movs	r2, #0
 80090ca:	2140      	movs	r1, #64	; 0x40
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f000 f810 	bl	80090f2 <UART_WaitOnFlagUntilTimeout>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d001      	beq.n	80090dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80090d8:	2303      	movs	r3, #3
 80090da:	e006      	b.n	80090ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2220      	movs	r2, #32
 80090e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	e000      	b.n	80090ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80090e8:	2302      	movs	r3, #2
  }
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3720      	adds	r7, #32
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b090      	sub	sp, #64	; 0x40
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	60f8      	str	r0, [r7, #12]
 80090fa:	60b9      	str	r1, [r7, #8]
 80090fc:	603b      	str	r3, [r7, #0]
 80090fe:	4613      	mov	r3, r2
 8009100:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009102:	e050      	b.n	80091a6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910a:	d04c      	beq.n	80091a6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800910c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800910e:	2b00      	cmp	r3, #0
 8009110:	d007      	beq.n	8009122 <UART_WaitOnFlagUntilTimeout+0x30>
 8009112:	f7fb ffe9 	bl	80050e8 <HAL_GetTick>
 8009116:	4602      	mov	r2, r0
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	1ad3      	subs	r3, r2, r3
 800911c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800911e:	429a      	cmp	r2, r3
 8009120:	d241      	bcs.n	80091a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	330c      	adds	r3, #12
 8009128:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912c:	e853 3f00 	ldrex	r3, [r3]
 8009130:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009134:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	330c      	adds	r3, #12
 8009140:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009142:	637a      	str	r2, [r7, #52]	; 0x34
 8009144:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009146:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009148:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800914a:	e841 2300 	strex	r3, r2, [r1]
 800914e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1e5      	bne.n	8009122 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	3314      	adds	r3, #20
 800915c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	e853 3f00 	ldrex	r3, [r3]
 8009164:	613b      	str	r3, [r7, #16]
   return(result);
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	f023 0301 	bic.w	r3, r3, #1
 800916c:	63bb      	str	r3, [r7, #56]	; 0x38
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	3314      	adds	r3, #20
 8009174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009176:	623a      	str	r2, [r7, #32]
 8009178:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917a:	69f9      	ldr	r1, [r7, #28]
 800917c:	6a3a      	ldr	r2, [r7, #32]
 800917e:	e841 2300 	strex	r3, r2, [r1]
 8009182:	61bb      	str	r3, [r7, #24]
   return(result);
 8009184:	69bb      	ldr	r3, [r7, #24]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1e5      	bne.n	8009156 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2220      	movs	r2, #32
 800918e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2220      	movs	r2, #32
 8009196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80091a2:	2303      	movs	r3, #3
 80091a4:	e00f      	b.n	80091c6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	4013      	ands	r3, r2
 80091b0:	68ba      	ldr	r2, [r7, #8]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	bf0c      	ite	eq
 80091b6:	2301      	moveq	r3, #1
 80091b8:	2300      	movne	r3, #0
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	461a      	mov	r2, r3
 80091be:	79fb      	ldrb	r3, [r7, #7]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d09f      	beq.n	8009104 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3740      	adds	r7, #64	; 0x40
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
	...

080091d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091d4:	b0c0      	sub	sp, #256	; 0x100
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80091e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091ec:	68d9      	ldr	r1, [r3, #12]
 80091ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	ea40 0301 	orr.w	r3, r0, r1
 80091f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80091fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091fe:	689a      	ldr	r2, [r3, #8]
 8009200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	431a      	orrs	r2, r3
 8009208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800920c:	695b      	ldr	r3, [r3, #20]
 800920e:	431a      	orrs	r2, r3
 8009210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009214:	69db      	ldr	r3, [r3, #28]
 8009216:	4313      	orrs	r3, r2
 8009218:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800921c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009228:	f021 010c 	bic.w	r1, r1, #12
 800922c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009236:	430b      	orrs	r3, r1
 8009238:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800923a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800924a:	6999      	ldr	r1, [r3, #24]
 800924c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	ea40 0301 	orr.w	r3, r0, r1
 8009256:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	4b8f      	ldr	r3, [pc, #572]	; (800949c <UART_SetConfig+0x2cc>)
 8009260:	429a      	cmp	r2, r3
 8009262:	d005      	beq.n	8009270 <UART_SetConfig+0xa0>
 8009264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	4b8d      	ldr	r3, [pc, #564]	; (80094a0 <UART_SetConfig+0x2d0>)
 800926c:	429a      	cmp	r2, r3
 800926e:	d104      	bne.n	800927a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009270:	f7fd fc94 	bl	8006b9c <HAL_RCC_GetPCLK2Freq>
 8009274:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009278:	e003      	b.n	8009282 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800927a:	f7fd fc7b 	bl	8006b74 <HAL_RCC_GetPCLK1Freq>
 800927e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009286:	69db      	ldr	r3, [r3, #28]
 8009288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800928c:	f040 810c 	bne.w	80094a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009294:	2200      	movs	r2, #0
 8009296:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800929a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800929e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80092a2:	4622      	mov	r2, r4
 80092a4:	462b      	mov	r3, r5
 80092a6:	1891      	adds	r1, r2, r2
 80092a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80092aa:	415b      	adcs	r3, r3
 80092ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80092b2:	4621      	mov	r1, r4
 80092b4:	eb12 0801 	adds.w	r8, r2, r1
 80092b8:	4629      	mov	r1, r5
 80092ba:	eb43 0901 	adc.w	r9, r3, r1
 80092be:	f04f 0200 	mov.w	r2, #0
 80092c2:	f04f 0300 	mov.w	r3, #0
 80092c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80092ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80092ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80092d2:	4690      	mov	r8, r2
 80092d4:	4699      	mov	r9, r3
 80092d6:	4623      	mov	r3, r4
 80092d8:	eb18 0303 	adds.w	r3, r8, r3
 80092dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80092e0:	462b      	mov	r3, r5
 80092e2:	eb49 0303 	adc.w	r3, r9, r3
 80092e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80092ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80092f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80092fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80092fe:	460b      	mov	r3, r1
 8009300:	18db      	adds	r3, r3, r3
 8009302:	653b      	str	r3, [r7, #80]	; 0x50
 8009304:	4613      	mov	r3, r2
 8009306:	eb42 0303 	adc.w	r3, r2, r3
 800930a:	657b      	str	r3, [r7, #84]	; 0x54
 800930c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009310:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009314:	f7f7 fcd8 	bl	8000cc8 <__aeabi_uldivmod>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
 800931c:	4b61      	ldr	r3, [pc, #388]	; (80094a4 <UART_SetConfig+0x2d4>)
 800931e:	fba3 2302 	umull	r2, r3, r3, r2
 8009322:	095b      	lsrs	r3, r3, #5
 8009324:	011c      	lsls	r4, r3, #4
 8009326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800932a:	2200      	movs	r2, #0
 800932c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009330:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009334:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009338:	4642      	mov	r2, r8
 800933a:	464b      	mov	r3, r9
 800933c:	1891      	adds	r1, r2, r2
 800933e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009340:	415b      	adcs	r3, r3
 8009342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009344:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009348:	4641      	mov	r1, r8
 800934a:	eb12 0a01 	adds.w	sl, r2, r1
 800934e:	4649      	mov	r1, r9
 8009350:	eb43 0b01 	adc.w	fp, r3, r1
 8009354:	f04f 0200 	mov.w	r2, #0
 8009358:	f04f 0300 	mov.w	r3, #0
 800935c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009360:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009364:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009368:	4692      	mov	sl, r2
 800936a:	469b      	mov	fp, r3
 800936c:	4643      	mov	r3, r8
 800936e:	eb1a 0303 	adds.w	r3, sl, r3
 8009372:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009376:	464b      	mov	r3, r9
 8009378:	eb4b 0303 	adc.w	r3, fp, r3
 800937c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800938c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009390:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009394:	460b      	mov	r3, r1
 8009396:	18db      	adds	r3, r3, r3
 8009398:	643b      	str	r3, [r7, #64]	; 0x40
 800939a:	4613      	mov	r3, r2
 800939c:	eb42 0303 	adc.w	r3, r2, r3
 80093a0:	647b      	str	r3, [r7, #68]	; 0x44
 80093a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80093a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80093aa:	f7f7 fc8d 	bl	8000cc8 <__aeabi_uldivmod>
 80093ae:	4602      	mov	r2, r0
 80093b0:	460b      	mov	r3, r1
 80093b2:	4611      	mov	r1, r2
 80093b4:	4b3b      	ldr	r3, [pc, #236]	; (80094a4 <UART_SetConfig+0x2d4>)
 80093b6:	fba3 2301 	umull	r2, r3, r3, r1
 80093ba:	095b      	lsrs	r3, r3, #5
 80093bc:	2264      	movs	r2, #100	; 0x64
 80093be:	fb02 f303 	mul.w	r3, r2, r3
 80093c2:	1acb      	subs	r3, r1, r3
 80093c4:	00db      	lsls	r3, r3, #3
 80093c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80093ca:	4b36      	ldr	r3, [pc, #216]	; (80094a4 <UART_SetConfig+0x2d4>)
 80093cc:	fba3 2302 	umull	r2, r3, r3, r2
 80093d0:	095b      	lsrs	r3, r3, #5
 80093d2:	005b      	lsls	r3, r3, #1
 80093d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80093d8:	441c      	add	r4, r3
 80093da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093de:	2200      	movs	r2, #0
 80093e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80093e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80093e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80093ec:	4642      	mov	r2, r8
 80093ee:	464b      	mov	r3, r9
 80093f0:	1891      	adds	r1, r2, r2
 80093f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80093f4:	415b      	adcs	r3, r3
 80093f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80093fc:	4641      	mov	r1, r8
 80093fe:	1851      	adds	r1, r2, r1
 8009400:	6339      	str	r1, [r7, #48]	; 0x30
 8009402:	4649      	mov	r1, r9
 8009404:	414b      	adcs	r3, r1
 8009406:	637b      	str	r3, [r7, #52]	; 0x34
 8009408:	f04f 0200 	mov.w	r2, #0
 800940c:	f04f 0300 	mov.w	r3, #0
 8009410:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009414:	4659      	mov	r1, fp
 8009416:	00cb      	lsls	r3, r1, #3
 8009418:	4651      	mov	r1, sl
 800941a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800941e:	4651      	mov	r1, sl
 8009420:	00ca      	lsls	r2, r1, #3
 8009422:	4610      	mov	r0, r2
 8009424:	4619      	mov	r1, r3
 8009426:	4603      	mov	r3, r0
 8009428:	4642      	mov	r2, r8
 800942a:	189b      	adds	r3, r3, r2
 800942c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009430:	464b      	mov	r3, r9
 8009432:	460a      	mov	r2, r1
 8009434:	eb42 0303 	adc.w	r3, r2, r3
 8009438:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800943c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009448:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800944c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009450:	460b      	mov	r3, r1
 8009452:	18db      	adds	r3, r3, r3
 8009454:	62bb      	str	r3, [r7, #40]	; 0x28
 8009456:	4613      	mov	r3, r2
 8009458:	eb42 0303 	adc.w	r3, r2, r3
 800945c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800945e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009462:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009466:	f7f7 fc2f 	bl	8000cc8 <__aeabi_uldivmod>
 800946a:	4602      	mov	r2, r0
 800946c:	460b      	mov	r3, r1
 800946e:	4b0d      	ldr	r3, [pc, #52]	; (80094a4 <UART_SetConfig+0x2d4>)
 8009470:	fba3 1302 	umull	r1, r3, r3, r2
 8009474:	095b      	lsrs	r3, r3, #5
 8009476:	2164      	movs	r1, #100	; 0x64
 8009478:	fb01 f303 	mul.w	r3, r1, r3
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	00db      	lsls	r3, r3, #3
 8009480:	3332      	adds	r3, #50	; 0x32
 8009482:	4a08      	ldr	r2, [pc, #32]	; (80094a4 <UART_SetConfig+0x2d4>)
 8009484:	fba2 2303 	umull	r2, r3, r2, r3
 8009488:	095b      	lsrs	r3, r3, #5
 800948a:	f003 0207 	and.w	r2, r3, #7
 800948e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4422      	add	r2, r4
 8009496:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009498:	e105      	b.n	80096a6 <UART_SetConfig+0x4d6>
 800949a:	bf00      	nop
 800949c:	40011000 	.word	0x40011000
 80094a0:	40011400 	.word	0x40011400
 80094a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80094a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094ac:	2200      	movs	r2, #0
 80094ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80094b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80094b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80094ba:	4642      	mov	r2, r8
 80094bc:	464b      	mov	r3, r9
 80094be:	1891      	adds	r1, r2, r2
 80094c0:	6239      	str	r1, [r7, #32]
 80094c2:	415b      	adcs	r3, r3
 80094c4:	627b      	str	r3, [r7, #36]	; 0x24
 80094c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80094ca:	4641      	mov	r1, r8
 80094cc:	1854      	adds	r4, r2, r1
 80094ce:	4649      	mov	r1, r9
 80094d0:	eb43 0501 	adc.w	r5, r3, r1
 80094d4:	f04f 0200 	mov.w	r2, #0
 80094d8:	f04f 0300 	mov.w	r3, #0
 80094dc:	00eb      	lsls	r3, r5, #3
 80094de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80094e2:	00e2      	lsls	r2, r4, #3
 80094e4:	4614      	mov	r4, r2
 80094e6:	461d      	mov	r5, r3
 80094e8:	4643      	mov	r3, r8
 80094ea:	18e3      	adds	r3, r4, r3
 80094ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80094f0:	464b      	mov	r3, r9
 80094f2:	eb45 0303 	adc.w	r3, r5, r3
 80094f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80094fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009506:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800950a:	f04f 0200 	mov.w	r2, #0
 800950e:	f04f 0300 	mov.w	r3, #0
 8009512:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009516:	4629      	mov	r1, r5
 8009518:	008b      	lsls	r3, r1, #2
 800951a:	4621      	mov	r1, r4
 800951c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009520:	4621      	mov	r1, r4
 8009522:	008a      	lsls	r2, r1, #2
 8009524:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009528:	f7f7 fbce 	bl	8000cc8 <__aeabi_uldivmod>
 800952c:	4602      	mov	r2, r0
 800952e:	460b      	mov	r3, r1
 8009530:	4b60      	ldr	r3, [pc, #384]	; (80096b4 <UART_SetConfig+0x4e4>)
 8009532:	fba3 2302 	umull	r2, r3, r3, r2
 8009536:	095b      	lsrs	r3, r3, #5
 8009538:	011c      	lsls	r4, r3, #4
 800953a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800953e:	2200      	movs	r2, #0
 8009540:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009544:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009548:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800954c:	4642      	mov	r2, r8
 800954e:	464b      	mov	r3, r9
 8009550:	1891      	adds	r1, r2, r2
 8009552:	61b9      	str	r1, [r7, #24]
 8009554:	415b      	adcs	r3, r3
 8009556:	61fb      	str	r3, [r7, #28]
 8009558:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800955c:	4641      	mov	r1, r8
 800955e:	1851      	adds	r1, r2, r1
 8009560:	6139      	str	r1, [r7, #16]
 8009562:	4649      	mov	r1, r9
 8009564:	414b      	adcs	r3, r1
 8009566:	617b      	str	r3, [r7, #20]
 8009568:	f04f 0200 	mov.w	r2, #0
 800956c:	f04f 0300 	mov.w	r3, #0
 8009570:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009574:	4659      	mov	r1, fp
 8009576:	00cb      	lsls	r3, r1, #3
 8009578:	4651      	mov	r1, sl
 800957a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800957e:	4651      	mov	r1, sl
 8009580:	00ca      	lsls	r2, r1, #3
 8009582:	4610      	mov	r0, r2
 8009584:	4619      	mov	r1, r3
 8009586:	4603      	mov	r3, r0
 8009588:	4642      	mov	r2, r8
 800958a:	189b      	adds	r3, r3, r2
 800958c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009590:	464b      	mov	r3, r9
 8009592:	460a      	mov	r2, r1
 8009594:	eb42 0303 	adc.w	r3, r2, r3
 8009598:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800959c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80095a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80095a8:	f04f 0200 	mov.w	r2, #0
 80095ac:	f04f 0300 	mov.w	r3, #0
 80095b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80095b4:	4649      	mov	r1, r9
 80095b6:	008b      	lsls	r3, r1, #2
 80095b8:	4641      	mov	r1, r8
 80095ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095be:	4641      	mov	r1, r8
 80095c0:	008a      	lsls	r2, r1, #2
 80095c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80095c6:	f7f7 fb7f 	bl	8000cc8 <__aeabi_uldivmod>
 80095ca:	4602      	mov	r2, r0
 80095cc:	460b      	mov	r3, r1
 80095ce:	4b39      	ldr	r3, [pc, #228]	; (80096b4 <UART_SetConfig+0x4e4>)
 80095d0:	fba3 1302 	umull	r1, r3, r3, r2
 80095d4:	095b      	lsrs	r3, r3, #5
 80095d6:	2164      	movs	r1, #100	; 0x64
 80095d8:	fb01 f303 	mul.w	r3, r1, r3
 80095dc:	1ad3      	subs	r3, r2, r3
 80095de:	011b      	lsls	r3, r3, #4
 80095e0:	3332      	adds	r3, #50	; 0x32
 80095e2:	4a34      	ldr	r2, [pc, #208]	; (80096b4 <UART_SetConfig+0x4e4>)
 80095e4:	fba2 2303 	umull	r2, r3, r2, r3
 80095e8:	095b      	lsrs	r3, r3, #5
 80095ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095ee:	441c      	add	r4, r3
 80095f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095f4:	2200      	movs	r2, #0
 80095f6:	673b      	str	r3, [r7, #112]	; 0x70
 80095f8:	677a      	str	r2, [r7, #116]	; 0x74
 80095fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80095fe:	4642      	mov	r2, r8
 8009600:	464b      	mov	r3, r9
 8009602:	1891      	adds	r1, r2, r2
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	415b      	adcs	r3, r3
 8009608:	60fb      	str	r3, [r7, #12]
 800960a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800960e:	4641      	mov	r1, r8
 8009610:	1851      	adds	r1, r2, r1
 8009612:	6039      	str	r1, [r7, #0]
 8009614:	4649      	mov	r1, r9
 8009616:	414b      	adcs	r3, r1
 8009618:	607b      	str	r3, [r7, #4]
 800961a:	f04f 0200 	mov.w	r2, #0
 800961e:	f04f 0300 	mov.w	r3, #0
 8009622:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009626:	4659      	mov	r1, fp
 8009628:	00cb      	lsls	r3, r1, #3
 800962a:	4651      	mov	r1, sl
 800962c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009630:	4651      	mov	r1, sl
 8009632:	00ca      	lsls	r2, r1, #3
 8009634:	4610      	mov	r0, r2
 8009636:	4619      	mov	r1, r3
 8009638:	4603      	mov	r3, r0
 800963a:	4642      	mov	r2, r8
 800963c:	189b      	adds	r3, r3, r2
 800963e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009640:	464b      	mov	r3, r9
 8009642:	460a      	mov	r2, r1
 8009644:	eb42 0303 	adc.w	r3, r2, r3
 8009648:	66fb      	str	r3, [r7, #108]	; 0x6c
 800964a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	663b      	str	r3, [r7, #96]	; 0x60
 8009654:	667a      	str	r2, [r7, #100]	; 0x64
 8009656:	f04f 0200 	mov.w	r2, #0
 800965a:	f04f 0300 	mov.w	r3, #0
 800965e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009662:	4649      	mov	r1, r9
 8009664:	008b      	lsls	r3, r1, #2
 8009666:	4641      	mov	r1, r8
 8009668:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800966c:	4641      	mov	r1, r8
 800966e:	008a      	lsls	r2, r1, #2
 8009670:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009674:	f7f7 fb28 	bl	8000cc8 <__aeabi_uldivmod>
 8009678:	4602      	mov	r2, r0
 800967a:	460b      	mov	r3, r1
 800967c:	4b0d      	ldr	r3, [pc, #52]	; (80096b4 <UART_SetConfig+0x4e4>)
 800967e:	fba3 1302 	umull	r1, r3, r3, r2
 8009682:	095b      	lsrs	r3, r3, #5
 8009684:	2164      	movs	r1, #100	; 0x64
 8009686:	fb01 f303 	mul.w	r3, r1, r3
 800968a:	1ad3      	subs	r3, r2, r3
 800968c:	011b      	lsls	r3, r3, #4
 800968e:	3332      	adds	r3, #50	; 0x32
 8009690:	4a08      	ldr	r2, [pc, #32]	; (80096b4 <UART_SetConfig+0x4e4>)
 8009692:	fba2 2303 	umull	r2, r3, r2, r3
 8009696:	095b      	lsrs	r3, r3, #5
 8009698:	f003 020f 	and.w	r2, r3, #15
 800969c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4422      	add	r2, r4
 80096a4:	609a      	str	r2, [r3, #8]
}
 80096a6:	bf00      	nop
 80096a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80096ac:	46bd      	mov	sp, r7
 80096ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096b2:	bf00      	nop
 80096b4:	51eb851f 	.word	0x51eb851f

080096b8 <__errno>:
 80096b8:	4b01      	ldr	r3, [pc, #4]	; (80096c0 <__errno+0x8>)
 80096ba:	6818      	ldr	r0, [r3, #0]
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	200023fc 	.word	0x200023fc

080096c4 <__libc_init_array>:
 80096c4:	b570      	push	{r4, r5, r6, lr}
 80096c6:	4d0d      	ldr	r5, [pc, #52]	; (80096fc <__libc_init_array+0x38>)
 80096c8:	4c0d      	ldr	r4, [pc, #52]	; (8009700 <__libc_init_array+0x3c>)
 80096ca:	1b64      	subs	r4, r4, r5
 80096cc:	10a4      	asrs	r4, r4, #2
 80096ce:	2600      	movs	r6, #0
 80096d0:	42a6      	cmp	r6, r4
 80096d2:	d109      	bne.n	80096e8 <__libc_init_array+0x24>
 80096d4:	4d0b      	ldr	r5, [pc, #44]	; (8009704 <__libc_init_array+0x40>)
 80096d6:	4c0c      	ldr	r4, [pc, #48]	; (8009708 <__libc_init_array+0x44>)
 80096d8:	f002 ff64 	bl	800c5a4 <_init>
 80096dc:	1b64      	subs	r4, r4, r5
 80096de:	10a4      	asrs	r4, r4, #2
 80096e0:	2600      	movs	r6, #0
 80096e2:	42a6      	cmp	r6, r4
 80096e4:	d105      	bne.n	80096f2 <__libc_init_array+0x2e>
 80096e6:	bd70      	pop	{r4, r5, r6, pc}
 80096e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ec:	4798      	blx	r3
 80096ee:	3601      	adds	r6, #1
 80096f0:	e7ee      	b.n	80096d0 <__libc_init_array+0xc>
 80096f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80096f6:	4798      	blx	r3
 80096f8:	3601      	adds	r6, #1
 80096fa:	e7f2      	b.n	80096e2 <__libc_init_array+0x1e>
 80096fc:	0800cd5c 	.word	0x0800cd5c
 8009700:	0800cd5c 	.word	0x0800cd5c
 8009704:	0800cd5c 	.word	0x0800cd5c
 8009708:	0800cd60 	.word	0x0800cd60

0800970c <malloc>:
 800970c:	4b02      	ldr	r3, [pc, #8]	; (8009718 <malloc+0xc>)
 800970e:	4601      	mov	r1, r0
 8009710:	6818      	ldr	r0, [r3, #0]
 8009712:	f000 b87f 	b.w	8009814 <_malloc_r>
 8009716:	bf00      	nop
 8009718:	200023fc 	.word	0x200023fc

0800971c <free>:
 800971c:	4b02      	ldr	r3, [pc, #8]	; (8009728 <free+0xc>)
 800971e:	4601      	mov	r1, r0
 8009720:	6818      	ldr	r0, [r3, #0]
 8009722:	f000 b80b 	b.w	800973c <_free_r>
 8009726:	bf00      	nop
 8009728:	200023fc 	.word	0x200023fc

0800972c <memset>:
 800972c:	4402      	add	r2, r0
 800972e:	4603      	mov	r3, r0
 8009730:	4293      	cmp	r3, r2
 8009732:	d100      	bne.n	8009736 <memset+0xa>
 8009734:	4770      	bx	lr
 8009736:	f803 1b01 	strb.w	r1, [r3], #1
 800973a:	e7f9      	b.n	8009730 <memset+0x4>

0800973c <_free_r>:
 800973c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800973e:	2900      	cmp	r1, #0
 8009740:	d044      	beq.n	80097cc <_free_r+0x90>
 8009742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009746:	9001      	str	r0, [sp, #4]
 8009748:	2b00      	cmp	r3, #0
 800974a:	f1a1 0404 	sub.w	r4, r1, #4
 800974e:	bfb8      	it	lt
 8009750:	18e4      	addlt	r4, r4, r3
 8009752:	f001 fc0d 	bl	800af70 <__malloc_lock>
 8009756:	4a1e      	ldr	r2, [pc, #120]	; (80097d0 <_free_r+0x94>)
 8009758:	9801      	ldr	r0, [sp, #4]
 800975a:	6813      	ldr	r3, [r2, #0]
 800975c:	b933      	cbnz	r3, 800976c <_free_r+0x30>
 800975e:	6063      	str	r3, [r4, #4]
 8009760:	6014      	str	r4, [r2, #0]
 8009762:	b003      	add	sp, #12
 8009764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009768:	f001 bc08 	b.w	800af7c <__malloc_unlock>
 800976c:	42a3      	cmp	r3, r4
 800976e:	d908      	bls.n	8009782 <_free_r+0x46>
 8009770:	6825      	ldr	r5, [r4, #0]
 8009772:	1961      	adds	r1, r4, r5
 8009774:	428b      	cmp	r3, r1
 8009776:	bf01      	itttt	eq
 8009778:	6819      	ldreq	r1, [r3, #0]
 800977a:	685b      	ldreq	r3, [r3, #4]
 800977c:	1949      	addeq	r1, r1, r5
 800977e:	6021      	streq	r1, [r4, #0]
 8009780:	e7ed      	b.n	800975e <_free_r+0x22>
 8009782:	461a      	mov	r2, r3
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	b10b      	cbz	r3, 800978c <_free_r+0x50>
 8009788:	42a3      	cmp	r3, r4
 800978a:	d9fa      	bls.n	8009782 <_free_r+0x46>
 800978c:	6811      	ldr	r1, [r2, #0]
 800978e:	1855      	adds	r5, r2, r1
 8009790:	42a5      	cmp	r5, r4
 8009792:	d10b      	bne.n	80097ac <_free_r+0x70>
 8009794:	6824      	ldr	r4, [r4, #0]
 8009796:	4421      	add	r1, r4
 8009798:	1854      	adds	r4, r2, r1
 800979a:	42a3      	cmp	r3, r4
 800979c:	6011      	str	r1, [r2, #0]
 800979e:	d1e0      	bne.n	8009762 <_free_r+0x26>
 80097a0:	681c      	ldr	r4, [r3, #0]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	6053      	str	r3, [r2, #4]
 80097a6:	4421      	add	r1, r4
 80097a8:	6011      	str	r1, [r2, #0]
 80097aa:	e7da      	b.n	8009762 <_free_r+0x26>
 80097ac:	d902      	bls.n	80097b4 <_free_r+0x78>
 80097ae:	230c      	movs	r3, #12
 80097b0:	6003      	str	r3, [r0, #0]
 80097b2:	e7d6      	b.n	8009762 <_free_r+0x26>
 80097b4:	6825      	ldr	r5, [r4, #0]
 80097b6:	1961      	adds	r1, r4, r5
 80097b8:	428b      	cmp	r3, r1
 80097ba:	bf04      	itt	eq
 80097bc:	6819      	ldreq	r1, [r3, #0]
 80097be:	685b      	ldreq	r3, [r3, #4]
 80097c0:	6063      	str	r3, [r4, #4]
 80097c2:	bf04      	itt	eq
 80097c4:	1949      	addeq	r1, r1, r5
 80097c6:	6021      	streq	r1, [r4, #0]
 80097c8:	6054      	str	r4, [r2, #4]
 80097ca:	e7ca      	b.n	8009762 <_free_r+0x26>
 80097cc:	b003      	add	sp, #12
 80097ce:	bd30      	pop	{r4, r5, pc}
 80097d0:	200034e0 	.word	0x200034e0

080097d4 <sbrk_aligned>:
 80097d4:	b570      	push	{r4, r5, r6, lr}
 80097d6:	4e0e      	ldr	r6, [pc, #56]	; (8009810 <sbrk_aligned+0x3c>)
 80097d8:	460c      	mov	r4, r1
 80097da:	6831      	ldr	r1, [r6, #0]
 80097dc:	4605      	mov	r5, r0
 80097de:	b911      	cbnz	r1, 80097e6 <sbrk_aligned+0x12>
 80097e0:	f000 fcf6 	bl	800a1d0 <_sbrk_r>
 80097e4:	6030      	str	r0, [r6, #0]
 80097e6:	4621      	mov	r1, r4
 80097e8:	4628      	mov	r0, r5
 80097ea:	f000 fcf1 	bl	800a1d0 <_sbrk_r>
 80097ee:	1c43      	adds	r3, r0, #1
 80097f0:	d00a      	beq.n	8009808 <sbrk_aligned+0x34>
 80097f2:	1cc4      	adds	r4, r0, #3
 80097f4:	f024 0403 	bic.w	r4, r4, #3
 80097f8:	42a0      	cmp	r0, r4
 80097fa:	d007      	beq.n	800980c <sbrk_aligned+0x38>
 80097fc:	1a21      	subs	r1, r4, r0
 80097fe:	4628      	mov	r0, r5
 8009800:	f000 fce6 	bl	800a1d0 <_sbrk_r>
 8009804:	3001      	adds	r0, #1
 8009806:	d101      	bne.n	800980c <sbrk_aligned+0x38>
 8009808:	f04f 34ff 	mov.w	r4, #4294967295
 800980c:	4620      	mov	r0, r4
 800980e:	bd70      	pop	{r4, r5, r6, pc}
 8009810:	200034e4 	.word	0x200034e4

08009814 <_malloc_r>:
 8009814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009818:	1ccd      	adds	r5, r1, #3
 800981a:	f025 0503 	bic.w	r5, r5, #3
 800981e:	3508      	adds	r5, #8
 8009820:	2d0c      	cmp	r5, #12
 8009822:	bf38      	it	cc
 8009824:	250c      	movcc	r5, #12
 8009826:	2d00      	cmp	r5, #0
 8009828:	4607      	mov	r7, r0
 800982a:	db01      	blt.n	8009830 <_malloc_r+0x1c>
 800982c:	42a9      	cmp	r1, r5
 800982e:	d905      	bls.n	800983c <_malloc_r+0x28>
 8009830:	230c      	movs	r3, #12
 8009832:	603b      	str	r3, [r7, #0]
 8009834:	2600      	movs	r6, #0
 8009836:	4630      	mov	r0, r6
 8009838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800983c:	4e2e      	ldr	r6, [pc, #184]	; (80098f8 <_malloc_r+0xe4>)
 800983e:	f001 fb97 	bl	800af70 <__malloc_lock>
 8009842:	6833      	ldr	r3, [r6, #0]
 8009844:	461c      	mov	r4, r3
 8009846:	bb34      	cbnz	r4, 8009896 <_malloc_r+0x82>
 8009848:	4629      	mov	r1, r5
 800984a:	4638      	mov	r0, r7
 800984c:	f7ff ffc2 	bl	80097d4 <sbrk_aligned>
 8009850:	1c43      	adds	r3, r0, #1
 8009852:	4604      	mov	r4, r0
 8009854:	d14d      	bne.n	80098f2 <_malloc_r+0xde>
 8009856:	6834      	ldr	r4, [r6, #0]
 8009858:	4626      	mov	r6, r4
 800985a:	2e00      	cmp	r6, #0
 800985c:	d140      	bne.n	80098e0 <_malloc_r+0xcc>
 800985e:	6823      	ldr	r3, [r4, #0]
 8009860:	4631      	mov	r1, r6
 8009862:	4638      	mov	r0, r7
 8009864:	eb04 0803 	add.w	r8, r4, r3
 8009868:	f000 fcb2 	bl	800a1d0 <_sbrk_r>
 800986c:	4580      	cmp	r8, r0
 800986e:	d13a      	bne.n	80098e6 <_malloc_r+0xd2>
 8009870:	6821      	ldr	r1, [r4, #0]
 8009872:	3503      	adds	r5, #3
 8009874:	1a6d      	subs	r5, r5, r1
 8009876:	f025 0503 	bic.w	r5, r5, #3
 800987a:	3508      	adds	r5, #8
 800987c:	2d0c      	cmp	r5, #12
 800987e:	bf38      	it	cc
 8009880:	250c      	movcc	r5, #12
 8009882:	4629      	mov	r1, r5
 8009884:	4638      	mov	r0, r7
 8009886:	f7ff ffa5 	bl	80097d4 <sbrk_aligned>
 800988a:	3001      	adds	r0, #1
 800988c:	d02b      	beq.n	80098e6 <_malloc_r+0xd2>
 800988e:	6823      	ldr	r3, [r4, #0]
 8009890:	442b      	add	r3, r5
 8009892:	6023      	str	r3, [r4, #0]
 8009894:	e00e      	b.n	80098b4 <_malloc_r+0xa0>
 8009896:	6822      	ldr	r2, [r4, #0]
 8009898:	1b52      	subs	r2, r2, r5
 800989a:	d41e      	bmi.n	80098da <_malloc_r+0xc6>
 800989c:	2a0b      	cmp	r2, #11
 800989e:	d916      	bls.n	80098ce <_malloc_r+0xba>
 80098a0:	1961      	adds	r1, r4, r5
 80098a2:	42a3      	cmp	r3, r4
 80098a4:	6025      	str	r5, [r4, #0]
 80098a6:	bf18      	it	ne
 80098a8:	6059      	strne	r1, [r3, #4]
 80098aa:	6863      	ldr	r3, [r4, #4]
 80098ac:	bf08      	it	eq
 80098ae:	6031      	streq	r1, [r6, #0]
 80098b0:	5162      	str	r2, [r4, r5]
 80098b2:	604b      	str	r3, [r1, #4]
 80098b4:	4638      	mov	r0, r7
 80098b6:	f104 060b 	add.w	r6, r4, #11
 80098ba:	f001 fb5f 	bl	800af7c <__malloc_unlock>
 80098be:	f026 0607 	bic.w	r6, r6, #7
 80098c2:	1d23      	adds	r3, r4, #4
 80098c4:	1af2      	subs	r2, r6, r3
 80098c6:	d0b6      	beq.n	8009836 <_malloc_r+0x22>
 80098c8:	1b9b      	subs	r3, r3, r6
 80098ca:	50a3      	str	r3, [r4, r2]
 80098cc:	e7b3      	b.n	8009836 <_malloc_r+0x22>
 80098ce:	6862      	ldr	r2, [r4, #4]
 80098d0:	42a3      	cmp	r3, r4
 80098d2:	bf0c      	ite	eq
 80098d4:	6032      	streq	r2, [r6, #0]
 80098d6:	605a      	strne	r2, [r3, #4]
 80098d8:	e7ec      	b.n	80098b4 <_malloc_r+0xa0>
 80098da:	4623      	mov	r3, r4
 80098dc:	6864      	ldr	r4, [r4, #4]
 80098de:	e7b2      	b.n	8009846 <_malloc_r+0x32>
 80098e0:	4634      	mov	r4, r6
 80098e2:	6876      	ldr	r6, [r6, #4]
 80098e4:	e7b9      	b.n	800985a <_malloc_r+0x46>
 80098e6:	230c      	movs	r3, #12
 80098e8:	603b      	str	r3, [r7, #0]
 80098ea:	4638      	mov	r0, r7
 80098ec:	f001 fb46 	bl	800af7c <__malloc_unlock>
 80098f0:	e7a1      	b.n	8009836 <_malloc_r+0x22>
 80098f2:	6025      	str	r5, [r4, #0]
 80098f4:	e7de      	b.n	80098b4 <_malloc_r+0xa0>
 80098f6:	bf00      	nop
 80098f8:	200034e0 	.word	0x200034e0

080098fc <__cvt>:
 80098fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009900:	ec55 4b10 	vmov	r4, r5, d0
 8009904:	2d00      	cmp	r5, #0
 8009906:	460e      	mov	r6, r1
 8009908:	4619      	mov	r1, r3
 800990a:	462b      	mov	r3, r5
 800990c:	bfbb      	ittet	lt
 800990e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009912:	461d      	movlt	r5, r3
 8009914:	2300      	movge	r3, #0
 8009916:	232d      	movlt	r3, #45	; 0x2d
 8009918:	700b      	strb	r3, [r1, #0]
 800991a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800991c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009920:	4691      	mov	r9, r2
 8009922:	f023 0820 	bic.w	r8, r3, #32
 8009926:	bfbc      	itt	lt
 8009928:	4622      	movlt	r2, r4
 800992a:	4614      	movlt	r4, r2
 800992c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009930:	d005      	beq.n	800993e <__cvt+0x42>
 8009932:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009936:	d100      	bne.n	800993a <__cvt+0x3e>
 8009938:	3601      	adds	r6, #1
 800993a:	2102      	movs	r1, #2
 800993c:	e000      	b.n	8009940 <__cvt+0x44>
 800993e:	2103      	movs	r1, #3
 8009940:	ab03      	add	r3, sp, #12
 8009942:	9301      	str	r3, [sp, #4]
 8009944:	ab02      	add	r3, sp, #8
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	ec45 4b10 	vmov	d0, r4, r5
 800994c:	4653      	mov	r3, sl
 800994e:	4632      	mov	r2, r6
 8009950:	f000 fd0e 	bl	800a370 <_dtoa_r>
 8009954:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009958:	4607      	mov	r7, r0
 800995a:	d102      	bne.n	8009962 <__cvt+0x66>
 800995c:	f019 0f01 	tst.w	r9, #1
 8009960:	d022      	beq.n	80099a8 <__cvt+0xac>
 8009962:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009966:	eb07 0906 	add.w	r9, r7, r6
 800996a:	d110      	bne.n	800998e <__cvt+0x92>
 800996c:	783b      	ldrb	r3, [r7, #0]
 800996e:	2b30      	cmp	r3, #48	; 0x30
 8009970:	d10a      	bne.n	8009988 <__cvt+0x8c>
 8009972:	2200      	movs	r2, #0
 8009974:	2300      	movs	r3, #0
 8009976:	4620      	mov	r0, r4
 8009978:	4629      	mov	r1, r5
 800997a:	f7f7 f8c5 	bl	8000b08 <__aeabi_dcmpeq>
 800997e:	b918      	cbnz	r0, 8009988 <__cvt+0x8c>
 8009980:	f1c6 0601 	rsb	r6, r6, #1
 8009984:	f8ca 6000 	str.w	r6, [sl]
 8009988:	f8da 3000 	ldr.w	r3, [sl]
 800998c:	4499      	add	r9, r3
 800998e:	2200      	movs	r2, #0
 8009990:	2300      	movs	r3, #0
 8009992:	4620      	mov	r0, r4
 8009994:	4629      	mov	r1, r5
 8009996:	f7f7 f8b7 	bl	8000b08 <__aeabi_dcmpeq>
 800999a:	b108      	cbz	r0, 80099a0 <__cvt+0xa4>
 800999c:	f8cd 900c 	str.w	r9, [sp, #12]
 80099a0:	2230      	movs	r2, #48	; 0x30
 80099a2:	9b03      	ldr	r3, [sp, #12]
 80099a4:	454b      	cmp	r3, r9
 80099a6:	d307      	bcc.n	80099b8 <__cvt+0xbc>
 80099a8:	9b03      	ldr	r3, [sp, #12]
 80099aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099ac:	1bdb      	subs	r3, r3, r7
 80099ae:	4638      	mov	r0, r7
 80099b0:	6013      	str	r3, [r2, #0]
 80099b2:	b004      	add	sp, #16
 80099b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099b8:	1c59      	adds	r1, r3, #1
 80099ba:	9103      	str	r1, [sp, #12]
 80099bc:	701a      	strb	r2, [r3, #0]
 80099be:	e7f0      	b.n	80099a2 <__cvt+0xa6>

080099c0 <__exponent>:
 80099c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099c2:	4603      	mov	r3, r0
 80099c4:	2900      	cmp	r1, #0
 80099c6:	bfb8      	it	lt
 80099c8:	4249      	neglt	r1, r1
 80099ca:	f803 2b02 	strb.w	r2, [r3], #2
 80099ce:	bfb4      	ite	lt
 80099d0:	222d      	movlt	r2, #45	; 0x2d
 80099d2:	222b      	movge	r2, #43	; 0x2b
 80099d4:	2909      	cmp	r1, #9
 80099d6:	7042      	strb	r2, [r0, #1]
 80099d8:	dd2a      	ble.n	8009a30 <__exponent+0x70>
 80099da:	f10d 0407 	add.w	r4, sp, #7
 80099de:	46a4      	mov	ip, r4
 80099e0:	270a      	movs	r7, #10
 80099e2:	46a6      	mov	lr, r4
 80099e4:	460a      	mov	r2, r1
 80099e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80099ea:	fb07 1516 	mls	r5, r7, r6, r1
 80099ee:	3530      	adds	r5, #48	; 0x30
 80099f0:	2a63      	cmp	r2, #99	; 0x63
 80099f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80099f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80099fa:	4631      	mov	r1, r6
 80099fc:	dcf1      	bgt.n	80099e2 <__exponent+0x22>
 80099fe:	3130      	adds	r1, #48	; 0x30
 8009a00:	f1ae 0502 	sub.w	r5, lr, #2
 8009a04:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009a08:	1c44      	adds	r4, r0, #1
 8009a0a:	4629      	mov	r1, r5
 8009a0c:	4561      	cmp	r1, ip
 8009a0e:	d30a      	bcc.n	8009a26 <__exponent+0x66>
 8009a10:	f10d 0209 	add.w	r2, sp, #9
 8009a14:	eba2 020e 	sub.w	r2, r2, lr
 8009a18:	4565      	cmp	r5, ip
 8009a1a:	bf88      	it	hi
 8009a1c:	2200      	movhi	r2, #0
 8009a1e:	4413      	add	r3, r2
 8009a20:	1a18      	subs	r0, r3, r0
 8009a22:	b003      	add	sp, #12
 8009a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a2a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009a2e:	e7ed      	b.n	8009a0c <__exponent+0x4c>
 8009a30:	2330      	movs	r3, #48	; 0x30
 8009a32:	3130      	adds	r1, #48	; 0x30
 8009a34:	7083      	strb	r3, [r0, #2]
 8009a36:	70c1      	strb	r1, [r0, #3]
 8009a38:	1d03      	adds	r3, r0, #4
 8009a3a:	e7f1      	b.n	8009a20 <__exponent+0x60>

08009a3c <_printf_float>:
 8009a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a40:	ed2d 8b02 	vpush	{d8}
 8009a44:	b08d      	sub	sp, #52	; 0x34
 8009a46:	460c      	mov	r4, r1
 8009a48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009a4c:	4616      	mov	r6, r2
 8009a4e:	461f      	mov	r7, r3
 8009a50:	4605      	mov	r5, r0
 8009a52:	f001 fa7b 	bl	800af4c <_localeconv_r>
 8009a56:	f8d0 a000 	ldr.w	sl, [r0]
 8009a5a:	4650      	mov	r0, sl
 8009a5c:	f7f6 fbd8 	bl	8000210 <strlen>
 8009a60:	2300      	movs	r3, #0
 8009a62:	930a      	str	r3, [sp, #40]	; 0x28
 8009a64:	6823      	ldr	r3, [r4, #0]
 8009a66:	9305      	str	r3, [sp, #20]
 8009a68:	f8d8 3000 	ldr.w	r3, [r8]
 8009a6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009a70:	3307      	adds	r3, #7
 8009a72:	f023 0307 	bic.w	r3, r3, #7
 8009a76:	f103 0208 	add.w	r2, r3, #8
 8009a7a:	f8c8 2000 	str.w	r2, [r8]
 8009a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a82:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009a86:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009a8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009a8e:	9307      	str	r3, [sp, #28]
 8009a90:	f8cd 8018 	str.w	r8, [sp, #24]
 8009a94:	ee08 0a10 	vmov	s16, r0
 8009a98:	4b9f      	ldr	r3, [pc, #636]	; (8009d18 <_printf_float+0x2dc>)
 8009a9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa2:	f7f7 f863 	bl	8000b6c <__aeabi_dcmpun>
 8009aa6:	bb88      	cbnz	r0, 8009b0c <_printf_float+0xd0>
 8009aa8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009aac:	4b9a      	ldr	r3, [pc, #616]	; (8009d18 <_printf_float+0x2dc>)
 8009aae:	f04f 32ff 	mov.w	r2, #4294967295
 8009ab2:	f7f7 f83d 	bl	8000b30 <__aeabi_dcmple>
 8009ab6:	bb48      	cbnz	r0, 8009b0c <_printf_float+0xd0>
 8009ab8:	2200      	movs	r2, #0
 8009aba:	2300      	movs	r3, #0
 8009abc:	4640      	mov	r0, r8
 8009abe:	4649      	mov	r1, r9
 8009ac0:	f7f7 f82c 	bl	8000b1c <__aeabi_dcmplt>
 8009ac4:	b110      	cbz	r0, 8009acc <_printf_float+0x90>
 8009ac6:	232d      	movs	r3, #45	; 0x2d
 8009ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009acc:	4b93      	ldr	r3, [pc, #588]	; (8009d1c <_printf_float+0x2e0>)
 8009ace:	4894      	ldr	r0, [pc, #592]	; (8009d20 <_printf_float+0x2e4>)
 8009ad0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009ad4:	bf94      	ite	ls
 8009ad6:	4698      	movls	r8, r3
 8009ad8:	4680      	movhi	r8, r0
 8009ada:	2303      	movs	r3, #3
 8009adc:	6123      	str	r3, [r4, #16]
 8009ade:	9b05      	ldr	r3, [sp, #20]
 8009ae0:	f023 0204 	bic.w	r2, r3, #4
 8009ae4:	6022      	str	r2, [r4, #0]
 8009ae6:	f04f 0900 	mov.w	r9, #0
 8009aea:	9700      	str	r7, [sp, #0]
 8009aec:	4633      	mov	r3, r6
 8009aee:	aa0b      	add	r2, sp, #44	; 0x2c
 8009af0:	4621      	mov	r1, r4
 8009af2:	4628      	mov	r0, r5
 8009af4:	f000 f9d8 	bl	8009ea8 <_printf_common>
 8009af8:	3001      	adds	r0, #1
 8009afa:	f040 8090 	bne.w	8009c1e <_printf_float+0x1e2>
 8009afe:	f04f 30ff 	mov.w	r0, #4294967295
 8009b02:	b00d      	add	sp, #52	; 0x34
 8009b04:	ecbd 8b02 	vpop	{d8}
 8009b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b0c:	4642      	mov	r2, r8
 8009b0e:	464b      	mov	r3, r9
 8009b10:	4640      	mov	r0, r8
 8009b12:	4649      	mov	r1, r9
 8009b14:	f7f7 f82a 	bl	8000b6c <__aeabi_dcmpun>
 8009b18:	b140      	cbz	r0, 8009b2c <_printf_float+0xf0>
 8009b1a:	464b      	mov	r3, r9
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	bfbc      	itt	lt
 8009b20:	232d      	movlt	r3, #45	; 0x2d
 8009b22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009b26:	487f      	ldr	r0, [pc, #508]	; (8009d24 <_printf_float+0x2e8>)
 8009b28:	4b7f      	ldr	r3, [pc, #508]	; (8009d28 <_printf_float+0x2ec>)
 8009b2a:	e7d1      	b.n	8009ad0 <_printf_float+0x94>
 8009b2c:	6863      	ldr	r3, [r4, #4]
 8009b2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009b32:	9206      	str	r2, [sp, #24]
 8009b34:	1c5a      	adds	r2, r3, #1
 8009b36:	d13f      	bne.n	8009bb8 <_printf_float+0x17c>
 8009b38:	2306      	movs	r3, #6
 8009b3a:	6063      	str	r3, [r4, #4]
 8009b3c:	9b05      	ldr	r3, [sp, #20]
 8009b3e:	6861      	ldr	r1, [r4, #4]
 8009b40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009b44:	2300      	movs	r3, #0
 8009b46:	9303      	str	r3, [sp, #12]
 8009b48:	ab0a      	add	r3, sp, #40	; 0x28
 8009b4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009b4e:	ab09      	add	r3, sp, #36	; 0x24
 8009b50:	ec49 8b10 	vmov	d0, r8, r9
 8009b54:	9300      	str	r3, [sp, #0]
 8009b56:	6022      	str	r2, [r4, #0]
 8009b58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	f7ff fecd 	bl	80098fc <__cvt>
 8009b62:	9b06      	ldr	r3, [sp, #24]
 8009b64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b66:	2b47      	cmp	r3, #71	; 0x47
 8009b68:	4680      	mov	r8, r0
 8009b6a:	d108      	bne.n	8009b7e <_printf_float+0x142>
 8009b6c:	1cc8      	adds	r0, r1, #3
 8009b6e:	db02      	blt.n	8009b76 <_printf_float+0x13a>
 8009b70:	6863      	ldr	r3, [r4, #4]
 8009b72:	4299      	cmp	r1, r3
 8009b74:	dd41      	ble.n	8009bfa <_printf_float+0x1be>
 8009b76:	f1ab 0b02 	sub.w	fp, fp, #2
 8009b7a:	fa5f fb8b 	uxtb.w	fp, fp
 8009b7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b82:	d820      	bhi.n	8009bc6 <_printf_float+0x18a>
 8009b84:	3901      	subs	r1, #1
 8009b86:	465a      	mov	r2, fp
 8009b88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009b8c:	9109      	str	r1, [sp, #36]	; 0x24
 8009b8e:	f7ff ff17 	bl	80099c0 <__exponent>
 8009b92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b94:	1813      	adds	r3, r2, r0
 8009b96:	2a01      	cmp	r2, #1
 8009b98:	4681      	mov	r9, r0
 8009b9a:	6123      	str	r3, [r4, #16]
 8009b9c:	dc02      	bgt.n	8009ba4 <_printf_float+0x168>
 8009b9e:	6822      	ldr	r2, [r4, #0]
 8009ba0:	07d2      	lsls	r2, r2, #31
 8009ba2:	d501      	bpl.n	8009ba8 <_printf_float+0x16c>
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	6123      	str	r3, [r4, #16]
 8009ba8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d09c      	beq.n	8009aea <_printf_float+0xae>
 8009bb0:	232d      	movs	r3, #45	; 0x2d
 8009bb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bb6:	e798      	b.n	8009aea <_printf_float+0xae>
 8009bb8:	9a06      	ldr	r2, [sp, #24]
 8009bba:	2a47      	cmp	r2, #71	; 0x47
 8009bbc:	d1be      	bne.n	8009b3c <_printf_float+0x100>
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1bc      	bne.n	8009b3c <_printf_float+0x100>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e7b9      	b.n	8009b3a <_printf_float+0xfe>
 8009bc6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009bca:	d118      	bne.n	8009bfe <_printf_float+0x1c2>
 8009bcc:	2900      	cmp	r1, #0
 8009bce:	6863      	ldr	r3, [r4, #4]
 8009bd0:	dd0b      	ble.n	8009bea <_printf_float+0x1ae>
 8009bd2:	6121      	str	r1, [r4, #16]
 8009bd4:	b913      	cbnz	r3, 8009bdc <_printf_float+0x1a0>
 8009bd6:	6822      	ldr	r2, [r4, #0]
 8009bd8:	07d0      	lsls	r0, r2, #31
 8009bda:	d502      	bpl.n	8009be2 <_printf_float+0x1a6>
 8009bdc:	3301      	adds	r3, #1
 8009bde:	440b      	add	r3, r1
 8009be0:	6123      	str	r3, [r4, #16]
 8009be2:	65a1      	str	r1, [r4, #88]	; 0x58
 8009be4:	f04f 0900 	mov.w	r9, #0
 8009be8:	e7de      	b.n	8009ba8 <_printf_float+0x16c>
 8009bea:	b913      	cbnz	r3, 8009bf2 <_printf_float+0x1b6>
 8009bec:	6822      	ldr	r2, [r4, #0]
 8009bee:	07d2      	lsls	r2, r2, #31
 8009bf0:	d501      	bpl.n	8009bf6 <_printf_float+0x1ba>
 8009bf2:	3302      	adds	r3, #2
 8009bf4:	e7f4      	b.n	8009be0 <_printf_float+0x1a4>
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e7f2      	b.n	8009be0 <_printf_float+0x1a4>
 8009bfa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c00:	4299      	cmp	r1, r3
 8009c02:	db05      	blt.n	8009c10 <_printf_float+0x1d4>
 8009c04:	6823      	ldr	r3, [r4, #0]
 8009c06:	6121      	str	r1, [r4, #16]
 8009c08:	07d8      	lsls	r0, r3, #31
 8009c0a:	d5ea      	bpl.n	8009be2 <_printf_float+0x1a6>
 8009c0c:	1c4b      	adds	r3, r1, #1
 8009c0e:	e7e7      	b.n	8009be0 <_printf_float+0x1a4>
 8009c10:	2900      	cmp	r1, #0
 8009c12:	bfd4      	ite	le
 8009c14:	f1c1 0202 	rsble	r2, r1, #2
 8009c18:	2201      	movgt	r2, #1
 8009c1a:	4413      	add	r3, r2
 8009c1c:	e7e0      	b.n	8009be0 <_printf_float+0x1a4>
 8009c1e:	6823      	ldr	r3, [r4, #0]
 8009c20:	055a      	lsls	r2, r3, #21
 8009c22:	d407      	bmi.n	8009c34 <_printf_float+0x1f8>
 8009c24:	6923      	ldr	r3, [r4, #16]
 8009c26:	4642      	mov	r2, r8
 8009c28:	4631      	mov	r1, r6
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	47b8      	blx	r7
 8009c2e:	3001      	adds	r0, #1
 8009c30:	d12c      	bne.n	8009c8c <_printf_float+0x250>
 8009c32:	e764      	b.n	8009afe <_printf_float+0xc2>
 8009c34:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009c38:	f240 80e0 	bls.w	8009dfc <_printf_float+0x3c0>
 8009c3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c40:	2200      	movs	r2, #0
 8009c42:	2300      	movs	r3, #0
 8009c44:	f7f6 ff60 	bl	8000b08 <__aeabi_dcmpeq>
 8009c48:	2800      	cmp	r0, #0
 8009c4a:	d034      	beq.n	8009cb6 <_printf_float+0x27a>
 8009c4c:	4a37      	ldr	r2, [pc, #220]	; (8009d2c <_printf_float+0x2f0>)
 8009c4e:	2301      	movs	r3, #1
 8009c50:	4631      	mov	r1, r6
 8009c52:	4628      	mov	r0, r5
 8009c54:	47b8      	blx	r7
 8009c56:	3001      	adds	r0, #1
 8009c58:	f43f af51 	beq.w	8009afe <_printf_float+0xc2>
 8009c5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c60:	429a      	cmp	r2, r3
 8009c62:	db02      	blt.n	8009c6a <_printf_float+0x22e>
 8009c64:	6823      	ldr	r3, [r4, #0]
 8009c66:	07d8      	lsls	r0, r3, #31
 8009c68:	d510      	bpl.n	8009c8c <_printf_float+0x250>
 8009c6a:	ee18 3a10 	vmov	r3, s16
 8009c6e:	4652      	mov	r2, sl
 8009c70:	4631      	mov	r1, r6
 8009c72:	4628      	mov	r0, r5
 8009c74:	47b8      	blx	r7
 8009c76:	3001      	adds	r0, #1
 8009c78:	f43f af41 	beq.w	8009afe <_printf_float+0xc2>
 8009c7c:	f04f 0800 	mov.w	r8, #0
 8009c80:	f104 091a 	add.w	r9, r4, #26
 8009c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c86:	3b01      	subs	r3, #1
 8009c88:	4543      	cmp	r3, r8
 8009c8a:	dc09      	bgt.n	8009ca0 <_printf_float+0x264>
 8009c8c:	6823      	ldr	r3, [r4, #0]
 8009c8e:	079b      	lsls	r3, r3, #30
 8009c90:	f100 8105 	bmi.w	8009e9e <_printf_float+0x462>
 8009c94:	68e0      	ldr	r0, [r4, #12]
 8009c96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c98:	4298      	cmp	r0, r3
 8009c9a:	bfb8      	it	lt
 8009c9c:	4618      	movlt	r0, r3
 8009c9e:	e730      	b.n	8009b02 <_printf_float+0xc6>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	464a      	mov	r2, r9
 8009ca4:	4631      	mov	r1, r6
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	47b8      	blx	r7
 8009caa:	3001      	adds	r0, #1
 8009cac:	f43f af27 	beq.w	8009afe <_printf_float+0xc2>
 8009cb0:	f108 0801 	add.w	r8, r8, #1
 8009cb4:	e7e6      	b.n	8009c84 <_printf_float+0x248>
 8009cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	dc39      	bgt.n	8009d30 <_printf_float+0x2f4>
 8009cbc:	4a1b      	ldr	r2, [pc, #108]	; (8009d2c <_printf_float+0x2f0>)
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	4631      	mov	r1, r6
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	47b8      	blx	r7
 8009cc6:	3001      	adds	r0, #1
 8009cc8:	f43f af19 	beq.w	8009afe <_printf_float+0xc2>
 8009ccc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	d102      	bne.n	8009cda <_printf_float+0x29e>
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	07d9      	lsls	r1, r3, #31
 8009cd8:	d5d8      	bpl.n	8009c8c <_printf_float+0x250>
 8009cda:	ee18 3a10 	vmov	r3, s16
 8009cde:	4652      	mov	r2, sl
 8009ce0:	4631      	mov	r1, r6
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	47b8      	blx	r7
 8009ce6:	3001      	adds	r0, #1
 8009ce8:	f43f af09 	beq.w	8009afe <_printf_float+0xc2>
 8009cec:	f04f 0900 	mov.w	r9, #0
 8009cf0:	f104 0a1a 	add.w	sl, r4, #26
 8009cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cf6:	425b      	negs	r3, r3
 8009cf8:	454b      	cmp	r3, r9
 8009cfa:	dc01      	bgt.n	8009d00 <_printf_float+0x2c4>
 8009cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cfe:	e792      	b.n	8009c26 <_printf_float+0x1ea>
 8009d00:	2301      	movs	r3, #1
 8009d02:	4652      	mov	r2, sl
 8009d04:	4631      	mov	r1, r6
 8009d06:	4628      	mov	r0, r5
 8009d08:	47b8      	blx	r7
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	f43f aef7 	beq.w	8009afe <_printf_float+0xc2>
 8009d10:	f109 0901 	add.w	r9, r9, #1
 8009d14:	e7ee      	b.n	8009cf4 <_printf_float+0x2b8>
 8009d16:	bf00      	nop
 8009d18:	7fefffff 	.word	0x7fefffff
 8009d1c:	0800c97c 	.word	0x0800c97c
 8009d20:	0800c980 	.word	0x0800c980
 8009d24:	0800c988 	.word	0x0800c988
 8009d28:	0800c984 	.word	0x0800c984
 8009d2c:	0800c98c 	.word	0x0800c98c
 8009d30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d34:	429a      	cmp	r2, r3
 8009d36:	bfa8      	it	ge
 8009d38:	461a      	movge	r2, r3
 8009d3a:	2a00      	cmp	r2, #0
 8009d3c:	4691      	mov	r9, r2
 8009d3e:	dc37      	bgt.n	8009db0 <_printf_float+0x374>
 8009d40:	f04f 0b00 	mov.w	fp, #0
 8009d44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d48:	f104 021a 	add.w	r2, r4, #26
 8009d4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d4e:	9305      	str	r3, [sp, #20]
 8009d50:	eba3 0309 	sub.w	r3, r3, r9
 8009d54:	455b      	cmp	r3, fp
 8009d56:	dc33      	bgt.n	8009dc0 <_printf_float+0x384>
 8009d58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	db3b      	blt.n	8009dd8 <_printf_float+0x39c>
 8009d60:	6823      	ldr	r3, [r4, #0]
 8009d62:	07da      	lsls	r2, r3, #31
 8009d64:	d438      	bmi.n	8009dd8 <_printf_float+0x39c>
 8009d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d68:	9a05      	ldr	r2, [sp, #20]
 8009d6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d6c:	1a9a      	subs	r2, r3, r2
 8009d6e:	eba3 0901 	sub.w	r9, r3, r1
 8009d72:	4591      	cmp	r9, r2
 8009d74:	bfa8      	it	ge
 8009d76:	4691      	movge	r9, r2
 8009d78:	f1b9 0f00 	cmp.w	r9, #0
 8009d7c:	dc35      	bgt.n	8009dea <_printf_float+0x3ae>
 8009d7e:	f04f 0800 	mov.w	r8, #0
 8009d82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d86:	f104 0a1a 	add.w	sl, r4, #26
 8009d8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d8e:	1a9b      	subs	r3, r3, r2
 8009d90:	eba3 0309 	sub.w	r3, r3, r9
 8009d94:	4543      	cmp	r3, r8
 8009d96:	f77f af79 	ble.w	8009c8c <_printf_float+0x250>
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	4652      	mov	r2, sl
 8009d9e:	4631      	mov	r1, r6
 8009da0:	4628      	mov	r0, r5
 8009da2:	47b8      	blx	r7
 8009da4:	3001      	adds	r0, #1
 8009da6:	f43f aeaa 	beq.w	8009afe <_printf_float+0xc2>
 8009daa:	f108 0801 	add.w	r8, r8, #1
 8009dae:	e7ec      	b.n	8009d8a <_printf_float+0x34e>
 8009db0:	4613      	mov	r3, r2
 8009db2:	4631      	mov	r1, r6
 8009db4:	4642      	mov	r2, r8
 8009db6:	4628      	mov	r0, r5
 8009db8:	47b8      	blx	r7
 8009dba:	3001      	adds	r0, #1
 8009dbc:	d1c0      	bne.n	8009d40 <_printf_float+0x304>
 8009dbe:	e69e      	b.n	8009afe <_printf_float+0xc2>
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	4631      	mov	r1, r6
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	9205      	str	r2, [sp, #20]
 8009dc8:	47b8      	blx	r7
 8009dca:	3001      	adds	r0, #1
 8009dcc:	f43f ae97 	beq.w	8009afe <_printf_float+0xc2>
 8009dd0:	9a05      	ldr	r2, [sp, #20]
 8009dd2:	f10b 0b01 	add.w	fp, fp, #1
 8009dd6:	e7b9      	b.n	8009d4c <_printf_float+0x310>
 8009dd8:	ee18 3a10 	vmov	r3, s16
 8009ddc:	4652      	mov	r2, sl
 8009dde:	4631      	mov	r1, r6
 8009de0:	4628      	mov	r0, r5
 8009de2:	47b8      	blx	r7
 8009de4:	3001      	adds	r0, #1
 8009de6:	d1be      	bne.n	8009d66 <_printf_float+0x32a>
 8009de8:	e689      	b.n	8009afe <_printf_float+0xc2>
 8009dea:	9a05      	ldr	r2, [sp, #20]
 8009dec:	464b      	mov	r3, r9
 8009dee:	4442      	add	r2, r8
 8009df0:	4631      	mov	r1, r6
 8009df2:	4628      	mov	r0, r5
 8009df4:	47b8      	blx	r7
 8009df6:	3001      	adds	r0, #1
 8009df8:	d1c1      	bne.n	8009d7e <_printf_float+0x342>
 8009dfa:	e680      	b.n	8009afe <_printf_float+0xc2>
 8009dfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009dfe:	2a01      	cmp	r2, #1
 8009e00:	dc01      	bgt.n	8009e06 <_printf_float+0x3ca>
 8009e02:	07db      	lsls	r3, r3, #31
 8009e04:	d538      	bpl.n	8009e78 <_printf_float+0x43c>
 8009e06:	2301      	movs	r3, #1
 8009e08:	4642      	mov	r2, r8
 8009e0a:	4631      	mov	r1, r6
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	47b8      	blx	r7
 8009e10:	3001      	adds	r0, #1
 8009e12:	f43f ae74 	beq.w	8009afe <_printf_float+0xc2>
 8009e16:	ee18 3a10 	vmov	r3, s16
 8009e1a:	4652      	mov	r2, sl
 8009e1c:	4631      	mov	r1, r6
 8009e1e:	4628      	mov	r0, r5
 8009e20:	47b8      	blx	r7
 8009e22:	3001      	adds	r0, #1
 8009e24:	f43f ae6b 	beq.w	8009afe <_printf_float+0xc2>
 8009e28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	2300      	movs	r3, #0
 8009e30:	f7f6 fe6a 	bl	8000b08 <__aeabi_dcmpeq>
 8009e34:	b9d8      	cbnz	r0, 8009e6e <_printf_float+0x432>
 8009e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e38:	f108 0201 	add.w	r2, r8, #1
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	4631      	mov	r1, r6
 8009e40:	4628      	mov	r0, r5
 8009e42:	47b8      	blx	r7
 8009e44:	3001      	adds	r0, #1
 8009e46:	d10e      	bne.n	8009e66 <_printf_float+0x42a>
 8009e48:	e659      	b.n	8009afe <_printf_float+0xc2>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	4652      	mov	r2, sl
 8009e4e:	4631      	mov	r1, r6
 8009e50:	4628      	mov	r0, r5
 8009e52:	47b8      	blx	r7
 8009e54:	3001      	adds	r0, #1
 8009e56:	f43f ae52 	beq.w	8009afe <_printf_float+0xc2>
 8009e5a:	f108 0801 	add.w	r8, r8, #1
 8009e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e60:	3b01      	subs	r3, #1
 8009e62:	4543      	cmp	r3, r8
 8009e64:	dcf1      	bgt.n	8009e4a <_printf_float+0x40e>
 8009e66:	464b      	mov	r3, r9
 8009e68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009e6c:	e6dc      	b.n	8009c28 <_printf_float+0x1ec>
 8009e6e:	f04f 0800 	mov.w	r8, #0
 8009e72:	f104 0a1a 	add.w	sl, r4, #26
 8009e76:	e7f2      	b.n	8009e5e <_printf_float+0x422>
 8009e78:	2301      	movs	r3, #1
 8009e7a:	4642      	mov	r2, r8
 8009e7c:	e7df      	b.n	8009e3e <_printf_float+0x402>
 8009e7e:	2301      	movs	r3, #1
 8009e80:	464a      	mov	r2, r9
 8009e82:	4631      	mov	r1, r6
 8009e84:	4628      	mov	r0, r5
 8009e86:	47b8      	blx	r7
 8009e88:	3001      	adds	r0, #1
 8009e8a:	f43f ae38 	beq.w	8009afe <_printf_float+0xc2>
 8009e8e:	f108 0801 	add.w	r8, r8, #1
 8009e92:	68e3      	ldr	r3, [r4, #12]
 8009e94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e96:	1a5b      	subs	r3, r3, r1
 8009e98:	4543      	cmp	r3, r8
 8009e9a:	dcf0      	bgt.n	8009e7e <_printf_float+0x442>
 8009e9c:	e6fa      	b.n	8009c94 <_printf_float+0x258>
 8009e9e:	f04f 0800 	mov.w	r8, #0
 8009ea2:	f104 0919 	add.w	r9, r4, #25
 8009ea6:	e7f4      	b.n	8009e92 <_printf_float+0x456>

08009ea8 <_printf_common>:
 8009ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009eac:	4616      	mov	r6, r2
 8009eae:	4699      	mov	r9, r3
 8009eb0:	688a      	ldr	r2, [r1, #8]
 8009eb2:	690b      	ldr	r3, [r1, #16]
 8009eb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	bfb8      	it	lt
 8009ebc:	4613      	movlt	r3, r2
 8009ebe:	6033      	str	r3, [r6, #0]
 8009ec0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ec4:	4607      	mov	r7, r0
 8009ec6:	460c      	mov	r4, r1
 8009ec8:	b10a      	cbz	r2, 8009ece <_printf_common+0x26>
 8009eca:	3301      	adds	r3, #1
 8009ecc:	6033      	str	r3, [r6, #0]
 8009ece:	6823      	ldr	r3, [r4, #0]
 8009ed0:	0699      	lsls	r1, r3, #26
 8009ed2:	bf42      	ittt	mi
 8009ed4:	6833      	ldrmi	r3, [r6, #0]
 8009ed6:	3302      	addmi	r3, #2
 8009ed8:	6033      	strmi	r3, [r6, #0]
 8009eda:	6825      	ldr	r5, [r4, #0]
 8009edc:	f015 0506 	ands.w	r5, r5, #6
 8009ee0:	d106      	bne.n	8009ef0 <_printf_common+0x48>
 8009ee2:	f104 0a19 	add.w	sl, r4, #25
 8009ee6:	68e3      	ldr	r3, [r4, #12]
 8009ee8:	6832      	ldr	r2, [r6, #0]
 8009eea:	1a9b      	subs	r3, r3, r2
 8009eec:	42ab      	cmp	r3, r5
 8009eee:	dc26      	bgt.n	8009f3e <_printf_common+0x96>
 8009ef0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ef4:	1e13      	subs	r3, r2, #0
 8009ef6:	6822      	ldr	r2, [r4, #0]
 8009ef8:	bf18      	it	ne
 8009efa:	2301      	movne	r3, #1
 8009efc:	0692      	lsls	r2, r2, #26
 8009efe:	d42b      	bmi.n	8009f58 <_printf_common+0xb0>
 8009f00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f04:	4649      	mov	r1, r9
 8009f06:	4638      	mov	r0, r7
 8009f08:	47c0      	blx	r8
 8009f0a:	3001      	adds	r0, #1
 8009f0c:	d01e      	beq.n	8009f4c <_printf_common+0xa4>
 8009f0e:	6823      	ldr	r3, [r4, #0]
 8009f10:	68e5      	ldr	r5, [r4, #12]
 8009f12:	6832      	ldr	r2, [r6, #0]
 8009f14:	f003 0306 	and.w	r3, r3, #6
 8009f18:	2b04      	cmp	r3, #4
 8009f1a:	bf08      	it	eq
 8009f1c:	1aad      	subeq	r5, r5, r2
 8009f1e:	68a3      	ldr	r3, [r4, #8]
 8009f20:	6922      	ldr	r2, [r4, #16]
 8009f22:	bf0c      	ite	eq
 8009f24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f28:	2500      	movne	r5, #0
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	bfc4      	itt	gt
 8009f2e:	1a9b      	subgt	r3, r3, r2
 8009f30:	18ed      	addgt	r5, r5, r3
 8009f32:	2600      	movs	r6, #0
 8009f34:	341a      	adds	r4, #26
 8009f36:	42b5      	cmp	r5, r6
 8009f38:	d11a      	bne.n	8009f70 <_printf_common+0xc8>
 8009f3a:	2000      	movs	r0, #0
 8009f3c:	e008      	b.n	8009f50 <_printf_common+0xa8>
 8009f3e:	2301      	movs	r3, #1
 8009f40:	4652      	mov	r2, sl
 8009f42:	4649      	mov	r1, r9
 8009f44:	4638      	mov	r0, r7
 8009f46:	47c0      	blx	r8
 8009f48:	3001      	adds	r0, #1
 8009f4a:	d103      	bne.n	8009f54 <_printf_common+0xac>
 8009f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f54:	3501      	adds	r5, #1
 8009f56:	e7c6      	b.n	8009ee6 <_printf_common+0x3e>
 8009f58:	18e1      	adds	r1, r4, r3
 8009f5a:	1c5a      	adds	r2, r3, #1
 8009f5c:	2030      	movs	r0, #48	; 0x30
 8009f5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f62:	4422      	add	r2, r4
 8009f64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f6c:	3302      	adds	r3, #2
 8009f6e:	e7c7      	b.n	8009f00 <_printf_common+0x58>
 8009f70:	2301      	movs	r3, #1
 8009f72:	4622      	mov	r2, r4
 8009f74:	4649      	mov	r1, r9
 8009f76:	4638      	mov	r0, r7
 8009f78:	47c0      	blx	r8
 8009f7a:	3001      	adds	r0, #1
 8009f7c:	d0e6      	beq.n	8009f4c <_printf_common+0xa4>
 8009f7e:	3601      	adds	r6, #1
 8009f80:	e7d9      	b.n	8009f36 <_printf_common+0x8e>
	...

08009f84 <_printf_i>:
 8009f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f88:	7e0f      	ldrb	r7, [r1, #24]
 8009f8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f8c:	2f78      	cmp	r7, #120	; 0x78
 8009f8e:	4691      	mov	r9, r2
 8009f90:	4680      	mov	r8, r0
 8009f92:	460c      	mov	r4, r1
 8009f94:	469a      	mov	sl, r3
 8009f96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f9a:	d807      	bhi.n	8009fac <_printf_i+0x28>
 8009f9c:	2f62      	cmp	r7, #98	; 0x62
 8009f9e:	d80a      	bhi.n	8009fb6 <_printf_i+0x32>
 8009fa0:	2f00      	cmp	r7, #0
 8009fa2:	f000 80d8 	beq.w	800a156 <_printf_i+0x1d2>
 8009fa6:	2f58      	cmp	r7, #88	; 0x58
 8009fa8:	f000 80a3 	beq.w	800a0f2 <_printf_i+0x16e>
 8009fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fb4:	e03a      	b.n	800a02c <_printf_i+0xa8>
 8009fb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009fba:	2b15      	cmp	r3, #21
 8009fbc:	d8f6      	bhi.n	8009fac <_printf_i+0x28>
 8009fbe:	a101      	add	r1, pc, #4	; (adr r1, 8009fc4 <_printf_i+0x40>)
 8009fc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fc4:	0800a01d 	.word	0x0800a01d
 8009fc8:	0800a031 	.word	0x0800a031
 8009fcc:	08009fad 	.word	0x08009fad
 8009fd0:	08009fad 	.word	0x08009fad
 8009fd4:	08009fad 	.word	0x08009fad
 8009fd8:	08009fad 	.word	0x08009fad
 8009fdc:	0800a031 	.word	0x0800a031
 8009fe0:	08009fad 	.word	0x08009fad
 8009fe4:	08009fad 	.word	0x08009fad
 8009fe8:	08009fad 	.word	0x08009fad
 8009fec:	08009fad 	.word	0x08009fad
 8009ff0:	0800a13d 	.word	0x0800a13d
 8009ff4:	0800a061 	.word	0x0800a061
 8009ff8:	0800a11f 	.word	0x0800a11f
 8009ffc:	08009fad 	.word	0x08009fad
 800a000:	08009fad 	.word	0x08009fad
 800a004:	0800a15f 	.word	0x0800a15f
 800a008:	08009fad 	.word	0x08009fad
 800a00c:	0800a061 	.word	0x0800a061
 800a010:	08009fad 	.word	0x08009fad
 800a014:	08009fad 	.word	0x08009fad
 800a018:	0800a127 	.word	0x0800a127
 800a01c:	682b      	ldr	r3, [r5, #0]
 800a01e:	1d1a      	adds	r2, r3, #4
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	602a      	str	r2, [r5, #0]
 800a024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a028:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a02c:	2301      	movs	r3, #1
 800a02e:	e0a3      	b.n	800a178 <_printf_i+0x1f4>
 800a030:	6820      	ldr	r0, [r4, #0]
 800a032:	6829      	ldr	r1, [r5, #0]
 800a034:	0606      	lsls	r6, r0, #24
 800a036:	f101 0304 	add.w	r3, r1, #4
 800a03a:	d50a      	bpl.n	800a052 <_printf_i+0xce>
 800a03c:	680e      	ldr	r6, [r1, #0]
 800a03e:	602b      	str	r3, [r5, #0]
 800a040:	2e00      	cmp	r6, #0
 800a042:	da03      	bge.n	800a04c <_printf_i+0xc8>
 800a044:	232d      	movs	r3, #45	; 0x2d
 800a046:	4276      	negs	r6, r6
 800a048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a04c:	485e      	ldr	r0, [pc, #376]	; (800a1c8 <_printf_i+0x244>)
 800a04e:	230a      	movs	r3, #10
 800a050:	e019      	b.n	800a086 <_printf_i+0x102>
 800a052:	680e      	ldr	r6, [r1, #0]
 800a054:	602b      	str	r3, [r5, #0]
 800a056:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a05a:	bf18      	it	ne
 800a05c:	b236      	sxthne	r6, r6
 800a05e:	e7ef      	b.n	800a040 <_printf_i+0xbc>
 800a060:	682b      	ldr	r3, [r5, #0]
 800a062:	6820      	ldr	r0, [r4, #0]
 800a064:	1d19      	adds	r1, r3, #4
 800a066:	6029      	str	r1, [r5, #0]
 800a068:	0601      	lsls	r1, r0, #24
 800a06a:	d501      	bpl.n	800a070 <_printf_i+0xec>
 800a06c:	681e      	ldr	r6, [r3, #0]
 800a06e:	e002      	b.n	800a076 <_printf_i+0xf2>
 800a070:	0646      	lsls	r6, r0, #25
 800a072:	d5fb      	bpl.n	800a06c <_printf_i+0xe8>
 800a074:	881e      	ldrh	r6, [r3, #0]
 800a076:	4854      	ldr	r0, [pc, #336]	; (800a1c8 <_printf_i+0x244>)
 800a078:	2f6f      	cmp	r7, #111	; 0x6f
 800a07a:	bf0c      	ite	eq
 800a07c:	2308      	moveq	r3, #8
 800a07e:	230a      	movne	r3, #10
 800a080:	2100      	movs	r1, #0
 800a082:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a086:	6865      	ldr	r5, [r4, #4]
 800a088:	60a5      	str	r5, [r4, #8]
 800a08a:	2d00      	cmp	r5, #0
 800a08c:	bfa2      	ittt	ge
 800a08e:	6821      	ldrge	r1, [r4, #0]
 800a090:	f021 0104 	bicge.w	r1, r1, #4
 800a094:	6021      	strge	r1, [r4, #0]
 800a096:	b90e      	cbnz	r6, 800a09c <_printf_i+0x118>
 800a098:	2d00      	cmp	r5, #0
 800a09a:	d04d      	beq.n	800a138 <_printf_i+0x1b4>
 800a09c:	4615      	mov	r5, r2
 800a09e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a0a2:	fb03 6711 	mls	r7, r3, r1, r6
 800a0a6:	5dc7      	ldrb	r7, [r0, r7]
 800a0a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a0ac:	4637      	mov	r7, r6
 800a0ae:	42bb      	cmp	r3, r7
 800a0b0:	460e      	mov	r6, r1
 800a0b2:	d9f4      	bls.n	800a09e <_printf_i+0x11a>
 800a0b4:	2b08      	cmp	r3, #8
 800a0b6:	d10b      	bne.n	800a0d0 <_printf_i+0x14c>
 800a0b8:	6823      	ldr	r3, [r4, #0]
 800a0ba:	07de      	lsls	r6, r3, #31
 800a0bc:	d508      	bpl.n	800a0d0 <_printf_i+0x14c>
 800a0be:	6923      	ldr	r3, [r4, #16]
 800a0c0:	6861      	ldr	r1, [r4, #4]
 800a0c2:	4299      	cmp	r1, r3
 800a0c4:	bfde      	ittt	le
 800a0c6:	2330      	movle	r3, #48	; 0x30
 800a0c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a0d0:	1b52      	subs	r2, r2, r5
 800a0d2:	6122      	str	r2, [r4, #16]
 800a0d4:	f8cd a000 	str.w	sl, [sp]
 800a0d8:	464b      	mov	r3, r9
 800a0da:	aa03      	add	r2, sp, #12
 800a0dc:	4621      	mov	r1, r4
 800a0de:	4640      	mov	r0, r8
 800a0e0:	f7ff fee2 	bl	8009ea8 <_printf_common>
 800a0e4:	3001      	adds	r0, #1
 800a0e6:	d14c      	bne.n	800a182 <_printf_i+0x1fe>
 800a0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ec:	b004      	add	sp, #16
 800a0ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0f2:	4835      	ldr	r0, [pc, #212]	; (800a1c8 <_printf_i+0x244>)
 800a0f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a0f8:	6829      	ldr	r1, [r5, #0]
 800a0fa:	6823      	ldr	r3, [r4, #0]
 800a0fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800a100:	6029      	str	r1, [r5, #0]
 800a102:	061d      	lsls	r5, r3, #24
 800a104:	d514      	bpl.n	800a130 <_printf_i+0x1ac>
 800a106:	07df      	lsls	r7, r3, #31
 800a108:	bf44      	itt	mi
 800a10a:	f043 0320 	orrmi.w	r3, r3, #32
 800a10e:	6023      	strmi	r3, [r4, #0]
 800a110:	b91e      	cbnz	r6, 800a11a <_printf_i+0x196>
 800a112:	6823      	ldr	r3, [r4, #0]
 800a114:	f023 0320 	bic.w	r3, r3, #32
 800a118:	6023      	str	r3, [r4, #0]
 800a11a:	2310      	movs	r3, #16
 800a11c:	e7b0      	b.n	800a080 <_printf_i+0xfc>
 800a11e:	6823      	ldr	r3, [r4, #0]
 800a120:	f043 0320 	orr.w	r3, r3, #32
 800a124:	6023      	str	r3, [r4, #0]
 800a126:	2378      	movs	r3, #120	; 0x78
 800a128:	4828      	ldr	r0, [pc, #160]	; (800a1cc <_printf_i+0x248>)
 800a12a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a12e:	e7e3      	b.n	800a0f8 <_printf_i+0x174>
 800a130:	0659      	lsls	r1, r3, #25
 800a132:	bf48      	it	mi
 800a134:	b2b6      	uxthmi	r6, r6
 800a136:	e7e6      	b.n	800a106 <_printf_i+0x182>
 800a138:	4615      	mov	r5, r2
 800a13a:	e7bb      	b.n	800a0b4 <_printf_i+0x130>
 800a13c:	682b      	ldr	r3, [r5, #0]
 800a13e:	6826      	ldr	r6, [r4, #0]
 800a140:	6961      	ldr	r1, [r4, #20]
 800a142:	1d18      	adds	r0, r3, #4
 800a144:	6028      	str	r0, [r5, #0]
 800a146:	0635      	lsls	r5, r6, #24
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	d501      	bpl.n	800a150 <_printf_i+0x1cc>
 800a14c:	6019      	str	r1, [r3, #0]
 800a14e:	e002      	b.n	800a156 <_printf_i+0x1d2>
 800a150:	0670      	lsls	r0, r6, #25
 800a152:	d5fb      	bpl.n	800a14c <_printf_i+0x1c8>
 800a154:	8019      	strh	r1, [r3, #0]
 800a156:	2300      	movs	r3, #0
 800a158:	6123      	str	r3, [r4, #16]
 800a15a:	4615      	mov	r5, r2
 800a15c:	e7ba      	b.n	800a0d4 <_printf_i+0x150>
 800a15e:	682b      	ldr	r3, [r5, #0]
 800a160:	1d1a      	adds	r2, r3, #4
 800a162:	602a      	str	r2, [r5, #0]
 800a164:	681d      	ldr	r5, [r3, #0]
 800a166:	6862      	ldr	r2, [r4, #4]
 800a168:	2100      	movs	r1, #0
 800a16a:	4628      	mov	r0, r5
 800a16c:	f7f6 f858 	bl	8000220 <memchr>
 800a170:	b108      	cbz	r0, 800a176 <_printf_i+0x1f2>
 800a172:	1b40      	subs	r0, r0, r5
 800a174:	6060      	str	r0, [r4, #4]
 800a176:	6863      	ldr	r3, [r4, #4]
 800a178:	6123      	str	r3, [r4, #16]
 800a17a:	2300      	movs	r3, #0
 800a17c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a180:	e7a8      	b.n	800a0d4 <_printf_i+0x150>
 800a182:	6923      	ldr	r3, [r4, #16]
 800a184:	462a      	mov	r2, r5
 800a186:	4649      	mov	r1, r9
 800a188:	4640      	mov	r0, r8
 800a18a:	47d0      	blx	sl
 800a18c:	3001      	adds	r0, #1
 800a18e:	d0ab      	beq.n	800a0e8 <_printf_i+0x164>
 800a190:	6823      	ldr	r3, [r4, #0]
 800a192:	079b      	lsls	r3, r3, #30
 800a194:	d413      	bmi.n	800a1be <_printf_i+0x23a>
 800a196:	68e0      	ldr	r0, [r4, #12]
 800a198:	9b03      	ldr	r3, [sp, #12]
 800a19a:	4298      	cmp	r0, r3
 800a19c:	bfb8      	it	lt
 800a19e:	4618      	movlt	r0, r3
 800a1a0:	e7a4      	b.n	800a0ec <_printf_i+0x168>
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	4632      	mov	r2, r6
 800a1a6:	4649      	mov	r1, r9
 800a1a8:	4640      	mov	r0, r8
 800a1aa:	47d0      	blx	sl
 800a1ac:	3001      	adds	r0, #1
 800a1ae:	d09b      	beq.n	800a0e8 <_printf_i+0x164>
 800a1b0:	3501      	adds	r5, #1
 800a1b2:	68e3      	ldr	r3, [r4, #12]
 800a1b4:	9903      	ldr	r1, [sp, #12]
 800a1b6:	1a5b      	subs	r3, r3, r1
 800a1b8:	42ab      	cmp	r3, r5
 800a1ba:	dcf2      	bgt.n	800a1a2 <_printf_i+0x21e>
 800a1bc:	e7eb      	b.n	800a196 <_printf_i+0x212>
 800a1be:	2500      	movs	r5, #0
 800a1c0:	f104 0619 	add.w	r6, r4, #25
 800a1c4:	e7f5      	b.n	800a1b2 <_printf_i+0x22e>
 800a1c6:	bf00      	nop
 800a1c8:	0800c98e 	.word	0x0800c98e
 800a1cc:	0800c99f 	.word	0x0800c99f

0800a1d0 <_sbrk_r>:
 800a1d0:	b538      	push	{r3, r4, r5, lr}
 800a1d2:	4d06      	ldr	r5, [pc, #24]	; (800a1ec <_sbrk_r+0x1c>)
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	4604      	mov	r4, r0
 800a1d8:	4608      	mov	r0, r1
 800a1da:	602b      	str	r3, [r5, #0]
 800a1dc:	f7fa feac 	bl	8004f38 <_sbrk>
 800a1e0:	1c43      	adds	r3, r0, #1
 800a1e2:	d102      	bne.n	800a1ea <_sbrk_r+0x1a>
 800a1e4:	682b      	ldr	r3, [r5, #0]
 800a1e6:	b103      	cbz	r3, 800a1ea <_sbrk_r+0x1a>
 800a1e8:	6023      	str	r3, [r4, #0]
 800a1ea:	bd38      	pop	{r3, r4, r5, pc}
 800a1ec:	200034e8 	.word	0x200034e8

0800a1f0 <siprintf>:
 800a1f0:	b40e      	push	{r1, r2, r3}
 800a1f2:	b500      	push	{lr}
 800a1f4:	b09c      	sub	sp, #112	; 0x70
 800a1f6:	ab1d      	add	r3, sp, #116	; 0x74
 800a1f8:	9002      	str	r0, [sp, #8]
 800a1fa:	9006      	str	r0, [sp, #24]
 800a1fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a200:	4809      	ldr	r0, [pc, #36]	; (800a228 <siprintf+0x38>)
 800a202:	9107      	str	r1, [sp, #28]
 800a204:	9104      	str	r1, [sp, #16]
 800a206:	4909      	ldr	r1, [pc, #36]	; (800a22c <siprintf+0x3c>)
 800a208:	f853 2b04 	ldr.w	r2, [r3], #4
 800a20c:	9105      	str	r1, [sp, #20]
 800a20e:	6800      	ldr	r0, [r0, #0]
 800a210:	9301      	str	r3, [sp, #4]
 800a212:	a902      	add	r1, sp, #8
 800a214:	f001 faae 	bl	800b774 <_svfiprintf_r>
 800a218:	9b02      	ldr	r3, [sp, #8]
 800a21a:	2200      	movs	r2, #0
 800a21c:	701a      	strb	r2, [r3, #0]
 800a21e:	b01c      	add	sp, #112	; 0x70
 800a220:	f85d eb04 	ldr.w	lr, [sp], #4
 800a224:	b003      	add	sp, #12
 800a226:	4770      	bx	lr
 800a228:	200023fc 	.word	0x200023fc
 800a22c:	ffff0208 	.word	0xffff0208

0800a230 <strncat>:
 800a230:	b530      	push	{r4, r5, lr}
 800a232:	4604      	mov	r4, r0
 800a234:	7825      	ldrb	r5, [r4, #0]
 800a236:	4623      	mov	r3, r4
 800a238:	3401      	adds	r4, #1
 800a23a:	2d00      	cmp	r5, #0
 800a23c:	d1fa      	bne.n	800a234 <strncat+0x4>
 800a23e:	3a01      	subs	r2, #1
 800a240:	d304      	bcc.n	800a24c <strncat+0x1c>
 800a242:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a246:	f803 4b01 	strb.w	r4, [r3], #1
 800a24a:	b904      	cbnz	r4, 800a24e <strncat+0x1e>
 800a24c:	bd30      	pop	{r4, r5, pc}
 800a24e:	2a00      	cmp	r2, #0
 800a250:	d1f5      	bne.n	800a23e <strncat+0xe>
 800a252:	701a      	strb	r2, [r3, #0]
 800a254:	e7f3      	b.n	800a23e <strncat+0xe>

0800a256 <quorem>:
 800a256:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a25a:	6903      	ldr	r3, [r0, #16]
 800a25c:	690c      	ldr	r4, [r1, #16]
 800a25e:	42a3      	cmp	r3, r4
 800a260:	4607      	mov	r7, r0
 800a262:	f2c0 8081 	blt.w	800a368 <quorem+0x112>
 800a266:	3c01      	subs	r4, #1
 800a268:	f101 0814 	add.w	r8, r1, #20
 800a26c:	f100 0514 	add.w	r5, r0, #20
 800a270:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a274:	9301      	str	r3, [sp, #4]
 800a276:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a27a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a27e:	3301      	adds	r3, #1
 800a280:	429a      	cmp	r2, r3
 800a282:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a286:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a28a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a28e:	d331      	bcc.n	800a2f4 <quorem+0x9e>
 800a290:	f04f 0e00 	mov.w	lr, #0
 800a294:	4640      	mov	r0, r8
 800a296:	46ac      	mov	ip, r5
 800a298:	46f2      	mov	sl, lr
 800a29a:	f850 2b04 	ldr.w	r2, [r0], #4
 800a29e:	b293      	uxth	r3, r2
 800a2a0:	fb06 e303 	mla	r3, r6, r3, lr
 800a2a4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	ebaa 0303 	sub.w	r3, sl, r3
 800a2ae:	f8dc a000 	ldr.w	sl, [ip]
 800a2b2:	0c12      	lsrs	r2, r2, #16
 800a2b4:	fa13 f38a 	uxtah	r3, r3, sl
 800a2b8:	fb06 e202 	mla	r2, r6, r2, lr
 800a2bc:	9300      	str	r3, [sp, #0]
 800a2be:	9b00      	ldr	r3, [sp, #0]
 800a2c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a2c4:	b292      	uxth	r2, r2
 800a2c6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a2ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2ce:	f8bd 3000 	ldrh.w	r3, [sp]
 800a2d2:	4581      	cmp	r9, r0
 800a2d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2d8:	f84c 3b04 	str.w	r3, [ip], #4
 800a2dc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a2e0:	d2db      	bcs.n	800a29a <quorem+0x44>
 800a2e2:	f855 300b 	ldr.w	r3, [r5, fp]
 800a2e6:	b92b      	cbnz	r3, 800a2f4 <quorem+0x9e>
 800a2e8:	9b01      	ldr	r3, [sp, #4]
 800a2ea:	3b04      	subs	r3, #4
 800a2ec:	429d      	cmp	r5, r3
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	d32e      	bcc.n	800a350 <quorem+0xfa>
 800a2f2:	613c      	str	r4, [r7, #16]
 800a2f4:	4638      	mov	r0, r7
 800a2f6:	f001 f8c9 	bl	800b48c <__mcmp>
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	db24      	blt.n	800a348 <quorem+0xf2>
 800a2fe:	3601      	adds	r6, #1
 800a300:	4628      	mov	r0, r5
 800a302:	f04f 0c00 	mov.w	ip, #0
 800a306:	f858 2b04 	ldr.w	r2, [r8], #4
 800a30a:	f8d0 e000 	ldr.w	lr, [r0]
 800a30e:	b293      	uxth	r3, r2
 800a310:	ebac 0303 	sub.w	r3, ip, r3
 800a314:	0c12      	lsrs	r2, r2, #16
 800a316:	fa13 f38e 	uxtah	r3, r3, lr
 800a31a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a31e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a322:	b29b      	uxth	r3, r3
 800a324:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a328:	45c1      	cmp	r9, r8
 800a32a:	f840 3b04 	str.w	r3, [r0], #4
 800a32e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a332:	d2e8      	bcs.n	800a306 <quorem+0xb0>
 800a334:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a338:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a33c:	b922      	cbnz	r2, 800a348 <quorem+0xf2>
 800a33e:	3b04      	subs	r3, #4
 800a340:	429d      	cmp	r5, r3
 800a342:	461a      	mov	r2, r3
 800a344:	d30a      	bcc.n	800a35c <quorem+0x106>
 800a346:	613c      	str	r4, [r7, #16]
 800a348:	4630      	mov	r0, r6
 800a34a:	b003      	add	sp, #12
 800a34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a350:	6812      	ldr	r2, [r2, #0]
 800a352:	3b04      	subs	r3, #4
 800a354:	2a00      	cmp	r2, #0
 800a356:	d1cc      	bne.n	800a2f2 <quorem+0x9c>
 800a358:	3c01      	subs	r4, #1
 800a35a:	e7c7      	b.n	800a2ec <quorem+0x96>
 800a35c:	6812      	ldr	r2, [r2, #0]
 800a35e:	3b04      	subs	r3, #4
 800a360:	2a00      	cmp	r2, #0
 800a362:	d1f0      	bne.n	800a346 <quorem+0xf0>
 800a364:	3c01      	subs	r4, #1
 800a366:	e7eb      	b.n	800a340 <quorem+0xea>
 800a368:	2000      	movs	r0, #0
 800a36a:	e7ee      	b.n	800a34a <quorem+0xf4>
 800a36c:	0000      	movs	r0, r0
	...

0800a370 <_dtoa_r>:
 800a370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a374:	ed2d 8b04 	vpush	{d8-d9}
 800a378:	ec57 6b10 	vmov	r6, r7, d0
 800a37c:	b093      	sub	sp, #76	; 0x4c
 800a37e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a380:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a384:	9106      	str	r1, [sp, #24]
 800a386:	ee10 aa10 	vmov	sl, s0
 800a38a:	4604      	mov	r4, r0
 800a38c:	9209      	str	r2, [sp, #36]	; 0x24
 800a38e:	930c      	str	r3, [sp, #48]	; 0x30
 800a390:	46bb      	mov	fp, r7
 800a392:	b975      	cbnz	r5, 800a3b2 <_dtoa_r+0x42>
 800a394:	2010      	movs	r0, #16
 800a396:	f7ff f9b9 	bl	800970c <malloc>
 800a39a:	4602      	mov	r2, r0
 800a39c:	6260      	str	r0, [r4, #36]	; 0x24
 800a39e:	b920      	cbnz	r0, 800a3aa <_dtoa_r+0x3a>
 800a3a0:	4ba7      	ldr	r3, [pc, #668]	; (800a640 <_dtoa_r+0x2d0>)
 800a3a2:	21ea      	movs	r1, #234	; 0xea
 800a3a4:	48a7      	ldr	r0, [pc, #668]	; (800a644 <_dtoa_r+0x2d4>)
 800a3a6:	f001 fae5 	bl	800b974 <__assert_func>
 800a3aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a3ae:	6005      	str	r5, [r0, #0]
 800a3b0:	60c5      	str	r5, [r0, #12]
 800a3b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3b4:	6819      	ldr	r1, [r3, #0]
 800a3b6:	b151      	cbz	r1, 800a3ce <_dtoa_r+0x5e>
 800a3b8:	685a      	ldr	r2, [r3, #4]
 800a3ba:	604a      	str	r2, [r1, #4]
 800a3bc:	2301      	movs	r3, #1
 800a3be:	4093      	lsls	r3, r2
 800a3c0:	608b      	str	r3, [r1, #8]
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	f000 fe20 	bl	800b008 <_Bfree>
 800a3c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	601a      	str	r2, [r3, #0]
 800a3ce:	1e3b      	subs	r3, r7, #0
 800a3d0:	bfaa      	itet	ge
 800a3d2:	2300      	movge	r3, #0
 800a3d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a3d8:	f8c8 3000 	strge.w	r3, [r8]
 800a3dc:	4b9a      	ldr	r3, [pc, #616]	; (800a648 <_dtoa_r+0x2d8>)
 800a3de:	bfbc      	itt	lt
 800a3e0:	2201      	movlt	r2, #1
 800a3e2:	f8c8 2000 	strlt.w	r2, [r8]
 800a3e6:	ea33 030b 	bics.w	r3, r3, fp
 800a3ea:	d11b      	bne.n	800a424 <_dtoa_r+0xb4>
 800a3ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3ee:	f242 730f 	movw	r3, #9999	; 0x270f
 800a3f2:	6013      	str	r3, [r2, #0]
 800a3f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a3f8:	4333      	orrs	r3, r6
 800a3fa:	f000 8592 	beq.w	800af22 <_dtoa_r+0xbb2>
 800a3fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a400:	b963      	cbnz	r3, 800a41c <_dtoa_r+0xac>
 800a402:	4b92      	ldr	r3, [pc, #584]	; (800a64c <_dtoa_r+0x2dc>)
 800a404:	e022      	b.n	800a44c <_dtoa_r+0xdc>
 800a406:	4b92      	ldr	r3, [pc, #584]	; (800a650 <_dtoa_r+0x2e0>)
 800a408:	9301      	str	r3, [sp, #4]
 800a40a:	3308      	adds	r3, #8
 800a40c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a40e:	6013      	str	r3, [r2, #0]
 800a410:	9801      	ldr	r0, [sp, #4]
 800a412:	b013      	add	sp, #76	; 0x4c
 800a414:	ecbd 8b04 	vpop	{d8-d9}
 800a418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a41c:	4b8b      	ldr	r3, [pc, #556]	; (800a64c <_dtoa_r+0x2dc>)
 800a41e:	9301      	str	r3, [sp, #4]
 800a420:	3303      	adds	r3, #3
 800a422:	e7f3      	b.n	800a40c <_dtoa_r+0x9c>
 800a424:	2200      	movs	r2, #0
 800a426:	2300      	movs	r3, #0
 800a428:	4650      	mov	r0, sl
 800a42a:	4659      	mov	r1, fp
 800a42c:	f7f6 fb6c 	bl	8000b08 <__aeabi_dcmpeq>
 800a430:	ec4b ab19 	vmov	d9, sl, fp
 800a434:	4680      	mov	r8, r0
 800a436:	b158      	cbz	r0, 800a450 <_dtoa_r+0xe0>
 800a438:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a43a:	2301      	movs	r3, #1
 800a43c:	6013      	str	r3, [r2, #0]
 800a43e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a440:	2b00      	cmp	r3, #0
 800a442:	f000 856b 	beq.w	800af1c <_dtoa_r+0xbac>
 800a446:	4883      	ldr	r0, [pc, #524]	; (800a654 <_dtoa_r+0x2e4>)
 800a448:	6018      	str	r0, [r3, #0]
 800a44a:	1e43      	subs	r3, r0, #1
 800a44c:	9301      	str	r3, [sp, #4]
 800a44e:	e7df      	b.n	800a410 <_dtoa_r+0xa0>
 800a450:	ec4b ab10 	vmov	d0, sl, fp
 800a454:	aa10      	add	r2, sp, #64	; 0x40
 800a456:	a911      	add	r1, sp, #68	; 0x44
 800a458:	4620      	mov	r0, r4
 800a45a:	f001 f8bd 	bl	800b5d8 <__d2b>
 800a45e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a462:	ee08 0a10 	vmov	s16, r0
 800a466:	2d00      	cmp	r5, #0
 800a468:	f000 8084 	beq.w	800a574 <_dtoa_r+0x204>
 800a46c:	ee19 3a90 	vmov	r3, s19
 800a470:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a474:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a478:	4656      	mov	r6, sl
 800a47a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a47e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a482:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a486:	4b74      	ldr	r3, [pc, #464]	; (800a658 <_dtoa_r+0x2e8>)
 800a488:	2200      	movs	r2, #0
 800a48a:	4630      	mov	r0, r6
 800a48c:	4639      	mov	r1, r7
 800a48e:	f7f5 ff1b 	bl	80002c8 <__aeabi_dsub>
 800a492:	a365      	add	r3, pc, #404	; (adr r3, 800a628 <_dtoa_r+0x2b8>)
 800a494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a498:	f7f6 f8ce 	bl	8000638 <__aeabi_dmul>
 800a49c:	a364      	add	r3, pc, #400	; (adr r3, 800a630 <_dtoa_r+0x2c0>)
 800a49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a2:	f7f5 ff13 	bl	80002cc <__adddf3>
 800a4a6:	4606      	mov	r6, r0
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	460f      	mov	r7, r1
 800a4ac:	f7f6 f85a 	bl	8000564 <__aeabi_i2d>
 800a4b0:	a361      	add	r3, pc, #388	; (adr r3, 800a638 <_dtoa_r+0x2c8>)
 800a4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b6:	f7f6 f8bf 	bl	8000638 <__aeabi_dmul>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	460b      	mov	r3, r1
 800a4be:	4630      	mov	r0, r6
 800a4c0:	4639      	mov	r1, r7
 800a4c2:	f7f5 ff03 	bl	80002cc <__adddf3>
 800a4c6:	4606      	mov	r6, r0
 800a4c8:	460f      	mov	r7, r1
 800a4ca:	f7f6 fb65 	bl	8000b98 <__aeabi_d2iz>
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	9000      	str	r0, [sp, #0]
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	4630      	mov	r0, r6
 800a4d6:	4639      	mov	r1, r7
 800a4d8:	f7f6 fb20 	bl	8000b1c <__aeabi_dcmplt>
 800a4dc:	b150      	cbz	r0, 800a4f4 <_dtoa_r+0x184>
 800a4de:	9800      	ldr	r0, [sp, #0]
 800a4e0:	f7f6 f840 	bl	8000564 <__aeabi_i2d>
 800a4e4:	4632      	mov	r2, r6
 800a4e6:	463b      	mov	r3, r7
 800a4e8:	f7f6 fb0e 	bl	8000b08 <__aeabi_dcmpeq>
 800a4ec:	b910      	cbnz	r0, 800a4f4 <_dtoa_r+0x184>
 800a4ee:	9b00      	ldr	r3, [sp, #0]
 800a4f0:	3b01      	subs	r3, #1
 800a4f2:	9300      	str	r3, [sp, #0]
 800a4f4:	9b00      	ldr	r3, [sp, #0]
 800a4f6:	2b16      	cmp	r3, #22
 800a4f8:	d85a      	bhi.n	800a5b0 <_dtoa_r+0x240>
 800a4fa:	9a00      	ldr	r2, [sp, #0]
 800a4fc:	4b57      	ldr	r3, [pc, #348]	; (800a65c <_dtoa_r+0x2ec>)
 800a4fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a506:	ec51 0b19 	vmov	r0, r1, d9
 800a50a:	f7f6 fb07 	bl	8000b1c <__aeabi_dcmplt>
 800a50e:	2800      	cmp	r0, #0
 800a510:	d050      	beq.n	800a5b4 <_dtoa_r+0x244>
 800a512:	9b00      	ldr	r3, [sp, #0]
 800a514:	3b01      	subs	r3, #1
 800a516:	9300      	str	r3, [sp, #0]
 800a518:	2300      	movs	r3, #0
 800a51a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a51c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a51e:	1b5d      	subs	r5, r3, r5
 800a520:	1e6b      	subs	r3, r5, #1
 800a522:	9305      	str	r3, [sp, #20]
 800a524:	bf45      	ittet	mi
 800a526:	f1c5 0301 	rsbmi	r3, r5, #1
 800a52a:	9304      	strmi	r3, [sp, #16]
 800a52c:	2300      	movpl	r3, #0
 800a52e:	2300      	movmi	r3, #0
 800a530:	bf4c      	ite	mi
 800a532:	9305      	strmi	r3, [sp, #20]
 800a534:	9304      	strpl	r3, [sp, #16]
 800a536:	9b00      	ldr	r3, [sp, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	db3d      	blt.n	800a5b8 <_dtoa_r+0x248>
 800a53c:	9b05      	ldr	r3, [sp, #20]
 800a53e:	9a00      	ldr	r2, [sp, #0]
 800a540:	920a      	str	r2, [sp, #40]	; 0x28
 800a542:	4413      	add	r3, r2
 800a544:	9305      	str	r3, [sp, #20]
 800a546:	2300      	movs	r3, #0
 800a548:	9307      	str	r3, [sp, #28]
 800a54a:	9b06      	ldr	r3, [sp, #24]
 800a54c:	2b09      	cmp	r3, #9
 800a54e:	f200 8089 	bhi.w	800a664 <_dtoa_r+0x2f4>
 800a552:	2b05      	cmp	r3, #5
 800a554:	bfc4      	itt	gt
 800a556:	3b04      	subgt	r3, #4
 800a558:	9306      	strgt	r3, [sp, #24]
 800a55a:	9b06      	ldr	r3, [sp, #24]
 800a55c:	f1a3 0302 	sub.w	r3, r3, #2
 800a560:	bfcc      	ite	gt
 800a562:	2500      	movgt	r5, #0
 800a564:	2501      	movle	r5, #1
 800a566:	2b03      	cmp	r3, #3
 800a568:	f200 8087 	bhi.w	800a67a <_dtoa_r+0x30a>
 800a56c:	e8df f003 	tbb	[pc, r3]
 800a570:	59383a2d 	.word	0x59383a2d
 800a574:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a578:	441d      	add	r5, r3
 800a57a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a57e:	2b20      	cmp	r3, #32
 800a580:	bfc1      	itttt	gt
 800a582:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a586:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a58a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a58e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a592:	bfda      	itte	le
 800a594:	f1c3 0320 	rsble	r3, r3, #32
 800a598:	fa06 f003 	lslle.w	r0, r6, r3
 800a59c:	4318      	orrgt	r0, r3
 800a59e:	f7f5 ffd1 	bl	8000544 <__aeabi_ui2d>
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	4606      	mov	r6, r0
 800a5a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a5aa:	3d01      	subs	r5, #1
 800a5ac:	930e      	str	r3, [sp, #56]	; 0x38
 800a5ae:	e76a      	b.n	800a486 <_dtoa_r+0x116>
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	e7b2      	b.n	800a51a <_dtoa_r+0x1aa>
 800a5b4:	900b      	str	r0, [sp, #44]	; 0x2c
 800a5b6:	e7b1      	b.n	800a51c <_dtoa_r+0x1ac>
 800a5b8:	9b04      	ldr	r3, [sp, #16]
 800a5ba:	9a00      	ldr	r2, [sp, #0]
 800a5bc:	1a9b      	subs	r3, r3, r2
 800a5be:	9304      	str	r3, [sp, #16]
 800a5c0:	4253      	negs	r3, r2
 800a5c2:	9307      	str	r3, [sp, #28]
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	930a      	str	r3, [sp, #40]	; 0x28
 800a5c8:	e7bf      	b.n	800a54a <_dtoa_r+0x1da>
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	9308      	str	r3, [sp, #32]
 800a5ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	dc55      	bgt.n	800a680 <_dtoa_r+0x310>
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a5da:	461a      	mov	r2, r3
 800a5dc:	9209      	str	r2, [sp, #36]	; 0x24
 800a5de:	e00c      	b.n	800a5fa <_dtoa_r+0x28a>
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	e7f3      	b.n	800a5cc <_dtoa_r+0x25c>
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5e8:	9308      	str	r3, [sp, #32]
 800a5ea:	9b00      	ldr	r3, [sp, #0]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	9302      	str	r3, [sp, #8]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	9303      	str	r3, [sp, #12]
 800a5f6:	bfb8      	it	lt
 800a5f8:	2301      	movlt	r3, #1
 800a5fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	6042      	str	r2, [r0, #4]
 800a600:	2204      	movs	r2, #4
 800a602:	f102 0614 	add.w	r6, r2, #20
 800a606:	429e      	cmp	r6, r3
 800a608:	6841      	ldr	r1, [r0, #4]
 800a60a:	d93d      	bls.n	800a688 <_dtoa_r+0x318>
 800a60c:	4620      	mov	r0, r4
 800a60e:	f000 fcbb 	bl	800af88 <_Balloc>
 800a612:	9001      	str	r0, [sp, #4]
 800a614:	2800      	cmp	r0, #0
 800a616:	d13b      	bne.n	800a690 <_dtoa_r+0x320>
 800a618:	4b11      	ldr	r3, [pc, #68]	; (800a660 <_dtoa_r+0x2f0>)
 800a61a:	4602      	mov	r2, r0
 800a61c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a620:	e6c0      	b.n	800a3a4 <_dtoa_r+0x34>
 800a622:	2301      	movs	r3, #1
 800a624:	e7df      	b.n	800a5e6 <_dtoa_r+0x276>
 800a626:	bf00      	nop
 800a628:	636f4361 	.word	0x636f4361
 800a62c:	3fd287a7 	.word	0x3fd287a7
 800a630:	8b60c8b3 	.word	0x8b60c8b3
 800a634:	3fc68a28 	.word	0x3fc68a28
 800a638:	509f79fb 	.word	0x509f79fb
 800a63c:	3fd34413 	.word	0x3fd34413
 800a640:	0800c9bd 	.word	0x0800c9bd
 800a644:	0800c9d4 	.word	0x0800c9d4
 800a648:	7ff00000 	.word	0x7ff00000
 800a64c:	0800c9b9 	.word	0x0800c9b9
 800a650:	0800c9b0 	.word	0x0800c9b0
 800a654:	0800c98d 	.word	0x0800c98d
 800a658:	3ff80000 	.word	0x3ff80000
 800a65c:	0800cac8 	.word	0x0800cac8
 800a660:	0800ca2f 	.word	0x0800ca2f
 800a664:	2501      	movs	r5, #1
 800a666:	2300      	movs	r3, #0
 800a668:	9306      	str	r3, [sp, #24]
 800a66a:	9508      	str	r5, [sp, #32]
 800a66c:	f04f 33ff 	mov.w	r3, #4294967295
 800a670:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a674:	2200      	movs	r2, #0
 800a676:	2312      	movs	r3, #18
 800a678:	e7b0      	b.n	800a5dc <_dtoa_r+0x26c>
 800a67a:	2301      	movs	r3, #1
 800a67c:	9308      	str	r3, [sp, #32]
 800a67e:	e7f5      	b.n	800a66c <_dtoa_r+0x2fc>
 800a680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a682:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a686:	e7b8      	b.n	800a5fa <_dtoa_r+0x28a>
 800a688:	3101      	adds	r1, #1
 800a68a:	6041      	str	r1, [r0, #4]
 800a68c:	0052      	lsls	r2, r2, #1
 800a68e:	e7b8      	b.n	800a602 <_dtoa_r+0x292>
 800a690:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a692:	9a01      	ldr	r2, [sp, #4]
 800a694:	601a      	str	r2, [r3, #0]
 800a696:	9b03      	ldr	r3, [sp, #12]
 800a698:	2b0e      	cmp	r3, #14
 800a69a:	f200 809d 	bhi.w	800a7d8 <_dtoa_r+0x468>
 800a69e:	2d00      	cmp	r5, #0
 800a6a0:	f000 809a 	beq.w	800a7d8 <_dtoa_r+0x468>
 800a6a4:	9b00      	ldr	r3, [sp, #0]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	dd32      	ble.n	800a710 <_dtoa_r+0x3a0>
 800a6aa:	4ab7      	ldr	r2, [pc, #732]	; (800a988 <_dtoa_r+0x618>)
 800a6ac:	f003 030f 	and.w	r3, r3, #15
 800a6b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a6b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6b8:	9b00      	ldr	r3, [sp, #0]
 800a6ba:	05d8      	lsls	r0, r3, #23
 800a6bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a6c0:	d516      	bpl.n	800a6f0 <_dtoa_r+0x380>
 800a6c2:	4bb2      	ldr	r3, [pc, #712]	; (800a98c <_dtoa_r+0x61c>)
 800a6c4:	ec51 0b19 	vmov	r0, r1, d9
 800a6c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a6cc:	f7f6 f8de 	bl	800088c <__aeabi_ddiv>
 800a6d0:	f007 070f 	and.w	r7, r7, #15
 800a6d4:	4682      	mov	sl, r0
 800a6d6:	468b      	mov	fp, r1
 800a6d8:	2503      	movs	r5, #3
 800a6da:	4eac      	ldr	r6, [pc, #688]	; (800a98c <_dtoa_r+0x61c>)
 800a6dc:	b957      	cbnz	r7, 800a6f4 <_dtoa_r+0x384>
 800a6de:	4642      	mov	r2, r8
 800a6e0:	464b      	mov	r3, r9
 800a6e2:	4650      	mov	r0, sl
 800a6e4:	4659      	mov	r1, fp
 800a6e6:	f7f6 f8d1 	bl	800088c <__aeabi_ddiv>
 800a6ea:	4682      	mov	sl, r0
 800a6ec:	468b      	mov	fp, r1
 800a6ee:	e028      	b.n	800a742 <_dtoa_r+0x3d2>
 800a6f0:	2502      	movs	r5, #2
 800a6f2:	e7f2      	b.n	800a6da <_dtoa_r+0x36a>
 800a6f4:	07f9      	lsls	r1, r7, #31
 800a6f6:	d508      	bpl.n	800a70a <_dtoa_r+0x39a>
 800a6f8:	4640      	mov	r0, r8
 800a6fa:	4649      	mov	r1, r9
 800a6fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a700:	f7f5 ff9a 	bl	8000638 <__aeabi_dmul>
 800a704:	3501      	adds	r5, #1
 800a706:	4680      	mov	r8, r0
 800a708:	4689      	mov	r9, r1
 800a70a:	107f      	asrs	r7, r7, #1
 800a70c:	3608      	adds	r6, #8
 800a70e:	e7e5      	b.n	800a6dc <_dtoa_r+0x36c>
 800a710:	f000 809b 	beq.w	800a84a <_dtoa_r+0x4da>
 800a714:	9b00      	ldr	r3, [sp, #0]
 800a716:	4f9d      	ldr	r7, [pc, #628]	; (800a98c <_dtoa_r+0x61c>)
 800a718:	425e      	negs	r6, r3
 800a71a:	4b9b      	ldr	r3, [pc, #620]	; (800a988 <_dtoa_r+0x618>)
 800a71c:	f006 020f 	and.w	r2, r6, #15
 800a720:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a728:	ec51 0b19 	vmov	r0, r1, d9
 800a72c:	f7f5 ff84 	bl	8000638 <__aeabi_dmul>
 800a730:	1136      	asrs	r6, r6, #4
 800a732:	4682      	mov	sl, r0
 800a734:	468b      	mov	fp, r1
 800a736:	2300      	movs	r3, #0
 800a738:	2502      	movs	r5, #2
 800a73a:	2e00      	cmp	r6, #0
 800a73c:	d17a      	bne.n	800a834 <_dtoa_r+0x4c4>
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1d3      	bne.n	800a6ea <_dtoa_r+0x37a>
 800a742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a744:	2b00      	cmp	r3, #0
 800a746:	f000 8082 	beq.w	800a84e <_dtoa_r+0x4de>
 800a74a:	4b91      	ldr	r3, [pc, #580]	; (800a990 <_dtoa_r+0x620>)
 800a74c:	2200      	movs	r2, #0
 800a74e:	4650      	mov	r0, sl
 800a750:	4659      	mov	r1, fp
 800a752:	f7f6 f9e3 	bl	8000b1c <__aeabi_dcmplt>
 800a756:	2800      	cmp	r0, #0
 800a758:	d079      	beq.n	800a84e <_dtoa_r+0x4de>
 800a75a:	9b03      	ldr	r3, [sp, #12]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d076      	beq.n	800a84e <_dtoa_r+0x4de>
 800a760:	9b02      	ldr	r3, [sp, #8]
 800a762:	2b00      	cmp	r3, #0
 800a764:	dd36      	ble.n	800a7d4 <_dtoa_r+0x464>
 800a766:	9b00      	ldr	r3, [sp, #0]
 800a768:	4650      	mov	r0, sl
 800a76a:	4659      	mov	r1, fp
 800a76c:	1e5f      	subs	r7, r3, #1
 800a76e:	2200      	movs	r2, #0
 800a770:	4b88      	ldr	r3, [pc, #544]	; (800a994 <_dtoa_r+0x624>)
 800a772:	f7f5 ff61 	bl	8000638 <__aeabi_dmul>
 800a776:	9e02      	ldr	r6, [sp, #8]
 800a778:	4682      	mov	sl, r0
 800a77a:	468b      	mov	fp, r1
 800a77c:	3501      	adds	r5, #1
 800a77e:	4628      	mov	r0, r5
 800a780:	f7f5 fef0 	bl	8000564 <__aeabi_i2d>
 800a784:	4652      	mov	r2, sl
 800a786:	465b      	mov	r3, fp
 800a788:	f7f5 ff56 	bl	8000638 <__aeabi_dmul>
 800a78c:	4b82      	ldr	r3, [pc, #520]	; (800a998 <_dtoa_r+0x628>)
 800a78e:	2200      	movs	r2, #0
 800a790:	f7f5 fd9c 	bl	80002cc <__adddf3>
 800a794:	46d0      	mov	r8, sl
 800a796:	46d9      	mov	r9, fp
 800a798:	4682      	mov	sl, r0
 800a79a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a79e:	2e00      	cmp	r6, #0
 800a7a0:	d158      	bne.n	800a854 <_dtoa_r+0x4e4>
 800a7a2:	4b7e      	ldr	r3, [pc, #504]	; (800a99c <_dtoa_r+0x62c>)
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	4640      	mov	r0, r8
 800a7a8:	4649      	mov	r1, r9
 800a7aa:	f7f5 fd8d 	bl	80002c8 <__aeabi_dsub>
 800a7ae:	4652      	mov	r2, sl
 800a7b0:	465b      	mov	r3, fp
 800a7b2:	4680      	mov	r8, r0
 800a7b4:	4689      	mov	r9, r1
 800a7b6:	f7f6 f9cf 	bl	8000b58 <__aeabi_dcmpgt>
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	f040 8295 	bne.w	800acea <_dtoa_r+0x97a>
 800a7c0:	4652      	mov	r2, sl
 800a7c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a7c6:	4640      	mov	r0, r8
 800a7c8:	4649      	mov	r1, r9
 800a7ca:	f7f6 f9a7 	bl	8000b1c <__aeabi_dcmplt>
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	f040 8289 	bne.w	800ace6 <_dtoa_r+0x976>
 800a7d4:	ec5b ab19 	vmov	sl, fp, d9
 800a7d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	f2c0 8148 	blt.w	800aa70 <_dtoa_r+0x700>
 800a7e0:	9a00      	ldr	r2, [sp, #0]
 800a7e2:	2a0e      	cmp	r2, #14
 800a7e4:	f300 8144 	bgt.w	800aa70 <_dtoa_r+0x700>
 800a7e8:	4b67      	ldr	r3, [pc, #412]	; (800a988 <_dtoa_r+0x618>)
 800a7ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a7f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f280 80d5 	bge.w	800a9a4 <_dtoa_r+0x634>
 800a7fa:	9b03      	ldr	r3, [sp, #12]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	f300 80d1 	bgt.w	800a9a4 <_dtoa_r+0x634>
 800a802:	f040 826f 	bne.w	800ace4 <_dtoa_r+0x974>
 800a806:	4b65      	ldr	r3, [pc, #404]	; (800a99c <_dtoa_r+0x62c>)
 800a808:	2200      	movs	r2, #0
 800a80a:	4640      	mov	r0, r8
 800a80c:	4649      	mov	r1, r9
 800a80e:	f7f5 ff13 	bl	8000638 <__aeabi_dmul>
 800a812:	4652      	mov	r2, sl
 800a814:	465b      	mov	r3, fp
 800a816:	f7f6 f995 	bl	8000b44 <__aeabi_dcmpge>
 800a81a:	9e03      	ldr	r6, [sp, #12]
 800a81c:	4637      	mov	r7, r6
 800a81e:	2800      	cmp	r0, #0
 800a820:	f040 8245 	bne.w	800acae <_dtoa_r+0x93e>
 800a824:	9d01      	ldr	r5, [sp, #4]
 800a826:	2331      	movs	r3, #49	; 0x31
 800a828:	f805 3b01 	strb.w	r3, [r5], #1
 800a82c:	9b00      	ldr	r3, [sp, #0]
 800a82e:	3301      	adds	r3, #1
 800a830:	9300      	str	r3, [sp, #0]
 800a832:	e240      	b.n	800acb6 <_dtoa_r+0x946>
 800a834:	07f2      	lsls	r2, r6, #31
 800a836:	d505      	bpl.n	800a844 <_dtoa_r+0x4d4>
 800a838:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a83c:	f7f5 fefc 	bl	8000638 <__aeabi_dmul>
 800a840:	3501      	adds	r5, #1
 800a842:	2301      	movs	r3, #1
 800a844:	1076      	asrs	r6, r6, #1
 800a846:	3708      	adds	r7, #8
 800a848:	e777      	b.n	800a73a <_dtoa_r+0x3ca>
 800a84a:	2502      	movs	r5, #2
 800a84c:	e779      	b.n	800a742 <_dtoa_r+0x3d2>
 800a84e:	9f00      	ldr	r7, [sp, #0]
 800a850:	9e03      	ldr	r6, [sp, #12]
 800a852:	e794      	b.n	800a77e <_dtoa_r+0x40e>
 800a854:	9901      	ldr	r1, [sp, #4]
 800a856:	4b4c      	ldr	r3, [pc, #304]	; (800a988 <_dtoa_r+0x618>)
 800a858:	4431      	add	r1, r6
 800a85a:	910d      	str	r1, [sp, #52]	; 0x34
 800a85c:	9908      	ldr	r1, [sp, #32]
 800a85e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a862:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a866:	2900      	cmp	r1, #0
 800a868:	d043      	beq.n	800a8f2 <_dtoa_r+0x582>
 800a86a:	494d      	ldr	r1, [pc, #308]	; (800a9a0 <_dtoa_r+0x630>)
 800a86c:	2000      	movs	r0, #0
 800a86e:	f7f6 f80d 	bl	800088c <__aeabi_ddiv>
 800a872:	4652      	mov	r2, sl
 800a874:	465b      	mov	r3, fp
 800a876:	f7f5 fd27 	bl	80002c8 <__aeabi_dsub>
 800a87a:	9d01      	ldr	r5, [sp, #4]
 800a87c:	4682      	mov	sl, r0
 800a87e:	468b      	mov	fp, r1
 800a880:	4649      	mov	r1, r9
 800a882:	4640      	mov	r0, r8
 800a884:	f7f6 f988 	bl	8000b98 <__aeabi_d2iz>
 800a888:	4606      	mov	r6, r0
 800a88a:	f7f5 fe6b 	bl	8000564 <__aeabi_i2d>
 800a88e:	4602      	mov	r2, r0
 800a890:	460b      	mov	r3, r1
 800a892:	4640      	mov	r0, r8
 800a894:	4649      	mov	r1, r9
 800a896:	f7f5 fd17 	bl	80002c8 <__aeabi_dsub>
 800a89a:	3630      	adds	r6, #48	; 0x30
 800a89c:	f805 6b01 	strb.w	r6, [r5], #1
 800a8a0:	4652      	mov	r2, sl
 800a8a2:	465b      	mov	r3, fp
 800a8a4:	4680      	mov	r8, r0
 800a8a6:	4689      	mov	r9, r1
 800a8a8:	f7f6 f938 	bl	8000b1c <__aeabi_dcmplt>
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	d163      	bne.n	800a978 <_dtoa_r+0x608>
 800a8b0:	4642      	mov	r2, r8
 800a8b2:	464b      	mov	r3, r9
 800a8b4:	4936      	ldr	r1, [pc, #216]	; (800a990 <_dtoa_r+0x620>)
 800a8b6:	2000      	movs	r0, #0
 800a8b8:	f7f5 fd06 	bl	80002c8 <__aeabi_dsub>
 800a8bc:	4652      	mov	r2, sl
 800a8be:	465b      	mov	r3, fp
 800a8c0:	f7f6 f92c 	bl	8000b1c <__aeabi_dcmplt>
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	f040 80b5 	bne.w	800aa34 <_dtoa_r+0x6c4>
 800a8ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8cc:	429d      	cmp	r5, r3
 800a8ce:	d081      	beq.n	800a7d4 <_dtoa_r+0x464>
 800a8d0:	4b30      	ldr	r3, [pc, #192]	; (800a994 <_dtoa_r+0x624>)
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	4650      	mov	r0, sl
 800a8d6:	4659      	mov	r1, fp
 800a8d8:	f7f5 feae 	bl	8000638 <__aeabi_dmul>
 800a8dc:	4b2d      	ldr	r3, [pc, #180]	; (800a994 <_dtoa_r+0x624>)
 800a8de:	4682      	mov	sl, r0
 800a8e0:	468b      	mov	fp, r1
 800a8e2:	4640      	mov	r0, r8
 800a8e4:	4649      	mov	r1, r9
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f7f5 fea6 	bl	8000638 <__aeabi_dmul>
 800a8ec:	4680      	mov	r8, r0
 800a8ee:	4689      	mov	r9, r1
 800a8f0:	e7c6      	b.n	800a880 <_dtoa_r+0x510>
 800a8f2:	4650      	mov	r0, sl
 800a8f4:	4659      	mov	r1, fp
 800a8f6:	f7f5 fe9f 	bl	8000638 <__aeabi_dmul>
 800a8fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8fc:	9d01      	ldr	r5, [sp, #4]
 800a8fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800a900:	4682      	mov	sl, r0
 800a902:	468b      	mov	fp, r1
 800a904:	4649      	mov	r1, r9
 800a906:	4640      	mov	r0, r8
 800a908:	f7f6 f946 	bl	8000b98 <__aeabi_d2iz>
 800a90c:	4606      	mov	r6, r0
 800a90e:	f7f5 fe29 	bl	8000564 <__aeabi_i2d>
 800a912:	3630      	adds	r6, #48	; 0x30
 800a914:	4602      	mov	r2, r0
 800a916:	460b      	mov	r3, r1
 800a918:	4640      	mov	r0, r8
 800a91a:	4649      	mov	r1, r9
 800a91c:	f7f5 fcd4 	bl	80002c8 <__aeabi_dsub>
 800a920:	f805 6b01 	strb.w	r6, [r5], #1
 800a924:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a926:	429d      	cmp	r5, r3
 800a928:	4680      	mov	r8, r0
 800a92a:	4689      	mov	r9, r1
 800a92c:	f04f 0200 	mov.w	r2, #0
 800a930:	d124      	bne.n	800a97c <_dtoa_r+0x60c>
 800a932:	4b1b      	ldr	r3, [pc, #108]	; (800a9a0 <_dtoa_r+0x630>)
 800a934:	4650      	mov	r0, sl
 800a936:	4659      	mov	r1, fp
 800a938:	f7f5 fcc8 	bl	80002cc <__adddf3>
 800a93c:	4602      	mov	r2, r0
 800a93e:	460b      	mov	r3, r1
 800a940:	4640      	mov	r0, r8
 800a942:	4649      	mov	r1, r9
 800a944:	f7f6 f908 	bl	8000b58 <__aeabi_dcmpgt>
 800a948:	2800      	cmp	r0, #0
 800a94a:	d173      	bne.n	800aa34 <_dtoa_r+0x6c4>
 800a94c:	4652      	mov	r2, sl
 800a94e:	465b      	mov	r3, fp
 800a950:	4913      	ldr	r1, [pc, #76]	; (800a9a0 <_dtoa_r+0x630>)
 800a952:	2000      	movs	r0, #0
 800a954:	f7f5 fcb8 	bl	80002c8 <__aeabi_dsub>
 800a958:	4602      	mov	r2, r0
 800a95a:	460b      	mov	r3, r1
 800a95c:	4640      	mov	r0, r8
 800a95e:	4649      	mov	r1, r9
 800a960:	f7f6 f8dc 	bl	8000b1c <__aeabi_dcmplt>
 800a964:	2800      	cmp	r0, #0
 800a966:	f43f af35 	beq.w	800a7d4 <_dtoa_r+0x464>
 800a96a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a96c:	1e6b      	subs	r3, r5, #1
 800a96e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a970:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a974:	2b30      	cmp	r3, #48	; 0x30
 800a976:	d0f8      	beq.n	800a96a <_dtoa_r+0x5fa>
 800a978:	9700      	str	r7, [sp, #0]
 800a97a:	e049      	b.n	800aa10 <_dtoa_r+0x6a0>
 800a97c:	4b05      	ldr	r3, [pc, #20]	; (800a994 <_dtoa_r+0x624>)
 800a97e:	f7f5 fe5b 	bl	8000638 <__aeabi_dmul>
 800a982:	4680      	mov	r8, r0
 800a984:	4689      	mov	r9, r1
 800a986:	e7bd      	b.n	800a904 <_dtoa_r+0x594>
 800a988:	0800cac8 	.word	0x0800cac8
 800a98c:	0800caa0 	.word	0x0800caa0
 800a990:	3ff00000 	.word	0x3ff00000
 800a994:	40240000 	.word	0x40240000
 800a998:	401c0000 	.word	0x401c0000
 800a99c:	40140000 	.word	0x40140000
 800a9a0:	3fe00000 	.word	0x3fe00000
 800a9a4:	9d01      	ldr	r5, [sp, #4]
 800a9a6:	4656      	mov	r6, sl
 800a9a8:	465f      	mov	r7, fp
 800a9aa:	4642      	mov	r2, r8
 800a9ac:	464b      	mov	r3, r9
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	4639      	mov	r1, r7
 800a9b2:	f7f5 ff6b 	bl	800088c <__aeabi_ddiv>
 800a9b6:	f7f6 f8ef 	bl	8000b98 <__aeabi_d2iz>
 800a9ba:	4682      	mov	sl, r0
 800a9bc:	f7f5 fdd2 	bl	8000564 <__aeabi_i2d>
 800a9c0:	4642      	mov	r2, r8
 800a9c2:	464b      	mov	r3, r9
 800a9c4:	f7f5 fe38 	bl	8000638 <__aeabi_dmul>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	4630      	mov	r0, r6
 800a9ce:	4639      	mov	r1, r7
 800a9d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a9d4:	f7f5 fc78 	bl	80002c8 <__aeabi_dsub>
 800a9d8:	f805 6b01 	strb.w	r6, [r5], #1
 800a9dc:	9e01      	ldr	r6, [sp, #4]
 800a9de:	9f03      	ldr	r7, [sp, #12]
 800a9e0:	1bae      	subs	r6, r5, r6
 800a9e2:	42b7      	cmp	r7, r6
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	d135      	bne.n	800aa56 <_dtoa_r+0x6e6>
 800a9ea:	f7f5 fc6f 	bl	80002cc <__adddf3>
 800a9ee:	4642      	mov	r2, r8
 800a9f0:	464b      	mov	r3, r9
 800a9f2:	4606      	mov	r6, r0
 800a9f4:	460f      	mov	r7, r1
 800a9f6:	f7f6 f8af 	bl	8000b58 <__aeabi_dcmpgt>
 800a9fa:	b9d0      	cbnz	r0, 800aa32 <_dtoa_r+0x6c2>
 800a9fc:	4642      	mov	r2, r8
 800a9fe:	464b      	mov	r3, r9
 800aa00:	4630      	mov	r0, r6
 800aa02:	4639      	mov	r1, r7
 800aa04:	f7f6 f880 	bl	8000b08 <__aeabi_dcmpeq>
 800aa08:	b110      	cbz	r0, 800aa10 <_dtoa_r+0x6a0>
 800aa0a:	f01a 0f01 	tst.w	sl, #1
 800aa0e:	d110      	bne.n	800aa32 <_dtoa_r+0x6c2>
 800aa10:	4620      	mov	r0, r4
 800aa12:	ee18 1a10 	vmov	r1, s16
 800aa16:	f000 faf7 	bl	800b008 <_Bfree>
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	9800      	ldr	r0, [sp, #0]
 800aa1e:	702b      	strb	r3, [r5, #0]
 800aa20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa22:	3001      	adds	r0, #1
 800aa24:	6018      	str	r0, [r3, #0]
 800aa26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f43f acf1 	beq.w	800a410 <_dtoa_r+0xa0>
 800aa2e:	601d      	str	r5, [r3, #0]
 800aa30:	e4ee      	b.n	800a410 <_dtoa_r+0xa0>
 800aa32:	9f00      	ldr	r7, [sp, #0]
 800aa34:	462b      	mov	r3, r5
 800aa36:	461d      	mov	r5, r3
 800aa38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa3c:	2a39      	cmp	r2, #57	; 0x39
 800aa3e:	d106      	bne.n	800aa4e <_dtoa_r+0x6de>
 800aa40:	9a01      	ldr	r2, [sp, #4]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d1f7      	bne.n	800aa36 <_dtoa_r+0x6c6>
 800aa46:	9901      	ldr	r1, [sp, #4]
 800aa48:	2230      	movs	r2, #48	; 0x30
 800aa4a:	3701      	adds	r7, #1
 800aa4c:	700a      	strb	r2, [r1, #0]
 800aa4e:	781a      	ldrb	r2, [r3, #0]
 800aa50:	3201      	adds	r2, #1
 800aa52:	701a      	strb	r2, [r3, #0]
 800aa54:	e790      	b.n	800a978 <_dtoa_r+0x608>
 800aa56:	4ba6      	ldr	r3, [pc, #664]	; (800acf0 <_dtoa_r+0x980>)
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f7f5 fded 	bl	8000638 <__aeabi_dmul>
 800aa5e:	2200      	movs	r2, #0
 800aa60:	2300      	movs	r3, #0
 800aa62:	4606      	mov	r6, r0
 800aa64:	460f      	mov	r7, r1
 800aa66:	f7f6 f84f 	bl	8000b08 <__aeabi_dcmpeq>
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	d09d      	beq.n	800a9aa <_dtoa_r+0x63a>
 800aa6e:	e7cf      	b.n	800aa10 <_dtoa_r+0x6a0>
 800aa70:	9a08      	ldr	r2, [sp, #32]
 800aa72:	2a00      	cmp	r2, #0
 800aa74:	f000 80d7 	beq.w	800ac26 <_dtoa_r+0x8b6>
 800aa78:	9a06      	ldr	r2, [sp, #24]
 800aa7a:	2a01      	cmp	r2, #1
 800aa7c:	f300 80ba 	bgt.w	800abf4 <_dtoa_r+0x884>
 800aa80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa82:	2a00      	cmp	r2, #0
 800aa84:	f000 80b2 	beq.w	800abec <_dtoa_r+0x87c>
 800aa88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aa8c:	9e07      	ldr	r6, [sp, #28]
 800aa8e:	9d04      	ldr	r5, [sp, #16]
 800aa90:	9a04      	ldr	r2, [sp, #16]
 800aa92:	441a      	add	r2, r3
 800aa94:	9204      	str	r2, [sp, #16]
 800aa96:	9a05      	ldr	r2, [sp, #20]
 800aa98:	2101      	movs	r1, #1
 800aa9a:	441a      	add	r2, r3
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	9205      	str	r2, [sp, #20]
 800aaa0:	f000 fb6a 	bl	800b178 <__i2b>
 800aaa4:	4607      	mov	r7, r0
 800aaa6:	2d00      	cmp	r5, #0
 800aaa8:	dd0c      	ble.n	800aac4 <_dtoa_r+0x754>
 800aaaa:	9b05      	ldr	r3, [sp, #20]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	dd09      	ble.n	800aac4 <_dtoa_r+0x754>
 800aab0:	42ab      	cmp	r3, r5
 800aab2:	9a04      	ldr	r2, [sp, #16]
 800aab4:	bfa8      	it	ge
 800aab6:	462b      	movge	r3, r5
 800aab8:	1ad2      	subs	r2, r2, r3
 800aaba:	9204      	str	r2, [sp, #16]
 800aabc:	9a05      	ldr	r2, [sp, #20]
 800aabe:	1aed      	subs	r5, r5, r3
 800aac0:	1ad3      	subs	r3, r2, r3
 800aac2:	9305      	str	r3, [sp, #20]
 800aac4:	9b07      	ldr	r3, [sp, #28]
 800aac6:	b31b      	cbz	r3, 800ab10 <_dtoa_r+0x7a0>
 800aac8:	9b08      	ldr	r3, [sp, #32]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	f000 80af 	beq.w	800ac2e <_dtoa_r+0x8be>
 800aad0:	2e00      	cmp	r6, #0
 800aad2:	dd13      	ble.n	800aafc <_dtoa_r+0x78c>
 800aad4:	4639      	mov	r1, r7
 800aad6:	4632      	mov	r2, r6
 800aad8:	4620      	mov	r0, r4
 800aada:	f000 fc0d 	bl	800b2f8 <__pow5mult>
 800aade:	ee18 2a10 	vmov	r2, s16
 800aae2:	4601      	mov	r1, r0
 800aae4:	4607      	mov	r7, r0
 800aae6:	4620      	mov	r0, r4
 800aae8:	f000 fb5c 	bl	800b1a4 <__multiply>
 800aaec:	ee18 1a10 	vmov	r1, s16
 800aaf0:	4680      	mov	r8, r0
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	f000 fa88 	bl	800b008 <_Bfree>
 800aaf8:	ee08 8a10 	vmov	s16, r8
 800aafc:	9b07      	ldr	r3, [sp, #28]
 800aafe:	1b9a      	subs	r2, r3, r6
 800ab00:	d006      	beq.n	800ab10 <_dtoa_r+0x7a0>
 800ab02:	ee18 1a10 	vmov	r1, s16
 800ab06:	4620      	mov	r0, r4
 800ab08:	f000 fbf6 	bl	800b2f8 <__pow5mult>
 800ab0c:	ee08 0a10 	vmov	s16, r0
 800ab10:	2101      	movs	r1, #1
 800ab12:	4620      	mov	r0, r4
 800ab14:	f000 fb30 	bl	800b178 <__i2b>
 800ab18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	4606      	mov	r6, r0
 800ab1e:	f340 8088 	ble.w	800ac32 <_dtoa_r+0x8c2>
 800ab22:	461a      	mov	r2, r3
 800ab24:	4601      	mov	r1, r0
 800ab26:	4620      	mov	r0, r4
 800ab28:	f000 fbe6 	bl	800b2f8 <__pow5mult>
 800ab2c:	9b06      	ldr	r3, [sp, #24]
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	4606      	mov	r6, r0
 800ab32:	f340 8081 	ble.w	800ac38 <_dtoa_r+0x8c8>
 800ab36:	f04f 0800 	mov.w	r8, #0
 800ab3a:	6933      	ldr	r3, [r6, #16]
 800ab3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ab40:	6918      	ldr	r0, [r3, #16]
 800ab42:	f000 fac9 	bl	800b0d8 <__hi0bits>
 800ab46:	f1c0 0020 	rsb	r0, r0, #32
 800ab4a:	9b05      	ldr	r3, [sp, #20]
 800ab4c:	4418      	add	r0, r3
 800ab4e:	f010 001f 	ands.w	r0, r0, #31
 800ab52:	f000 8092 	beq.w	800ac7a <_dtoa_r+0x90a>
 800ab56:	f1c0 0320 	rsb	r3, r0, #32
 800ab5a:	2b04      	cmp	r3, #4
 800ab5c:	f340 808a 	ble.w	800ac74 <_dtoa_r+0x904>
 800ab60:	f1c0 001c 	rsb	r0, r0, #28
 800ab64:	9b04      	ldr	r3, [sp, #16]
 800ab66:	4403      	add	r3, r0
 800ab68:	9304      	str	r3, [sp, #16]
 800ab6a:	9b05      	ldr	r3, [sp, #20]
 800ab6c:	4403      	add	r3, r0
 800ab6e:	4405      	add	r5, r0
 800ab70:	9305      	str	r3, [sp, #20]
 800ab72:	9b04      	ldr	r3, [sp, #16]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	dd07      	ble.n	800ab88 <_dtoa_r+0x818>
 800ab78:	ee18 1a10 	vmov	r1, s16
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	4620      	mov	r0, r4
 800ab80:	f000 fc14 	bl	800b3ac <__lshift>
 800ab84:	ee08 0a10 	vmov	s16, r0
 800ab88:	9b05      	ldr	r3, [sp, #20]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	dd05      	ble.n	800ab9a <_dtoa_r+0x82a>
 800ab8e:	4631      	mov	r1, r6
 800ab90:	461a      	mov	r2, r3
 800ab92:	4620      	mov	r0, r4
 800ab94:	f000 fc0a 	bl	800b3ac <__lshift>
 800ab98:	4606      	mov	r6, r0
 800ab9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d06e      	beq.n	800ac7e <_dtoa_r+0x90e>
 800aba0:	ee18 0a10 	vmov	r0, s16
 800aba4:	4631      	mov	r1, r6
 800aba6:	f000 fc71 	bl	800b48c <__mcmp>
 800abaa:	2800      	cmp	r0, #0
 800abac:	da67      	bge.n	800ac7e <_dtoa_r+0x90e>
 800abae:	9b00      	ldr	r3, [sp, #0]
 800abb0:	3b01      	subs	r3, #1
 800abb2:	ee18 1a10 	vmov	r1, s16
 800abb6:	9300      	str	r3, [sp, #0]
 800abb8:	220a      	movs	r2, #10
 800abba:	2300      	movs	r3, #0
 800abbc:	4620      	mov	r0, r4
 800abbe:	f000 fa45 	bl	800b04c <__multadd>
 800abc2:	9b08      	ldr	r3, [sp, #32]
 800abc4:	ee08 0a10 	vmov	s16, r0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	f000 81b1 	beq.w	800af30 <_dtoa_r+0xbc0>
 800abce:	2300      	movs	r3, #0
 800abd0:	4639      	mov	r1, r7
 800abd2:	220a      	movs	r2, #10
 800abd4:	4620      	mov	r0, r4
 800abd6:	f000 fa39 	bl	800b04c <__multadd>
 800abda:	9b02      	ldr	r3, [sp, #8]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	4607      	mov	r7, r0
 800abe0:	f300 808e 	bgt.w	800ad00 <_dtoa_r+0x990>
 800abe4:	9b06      	ldr	r3, [sp, #24]
 800abe6:	2b02      	cmp	r3, #2
 800abe8:	dc51      	bgt.n	800ac8e <_dtoa_r+0x91e>
 800abea:	e089      	b.n	800ad00 <_dtoa_r+0x990>
 800abec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800abf2:	e74b      	b.n	800aa8c <_dtoa_r+0x71c>
 800abf4:	9b03      	ldr	r3, [sp, #12]
 800abf6:	1e5e      	subs	r6, r3, #1
 800abf8:	9b07      	ldr	r3, [sp, #28]
 800abfa:	42b3      	cmp	r3, r6
 800abfc:	bfbf      	itttt	lt
 800abfe:	9b07      	ldrlt	r3, [sp, #28]
 800ac00:	9607      	strlt	r6, [sp, #28]
 800ac02:	1af2      	sublt	r2, r6, r3
 800ac04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ac06:	bfb6      	itet	lt
 800ac08:	189b      	addlt	r3, r3, r2
 800ac0a:	1b9e      	subge	r6, r3, r6
 800ac0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ac0e:	9b03      	ldr	r3, [sp, #12]
 800ac10:	bfb8      	it	lt
 800ac12:	2600      	movlt	r6, #0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	bfb7      	itett	lt
 800ac18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ac1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ac20:	1a9d      	sublt	r5, r3, r2
 800ac22:	2300      	movlt	r3, #0
 800ac24:	e734      	b.n	800aa90 <_dtoa_r+0x720>
 800ac26:	9e07      	ldr	r6, [sp, #28]
 800ac28:	9d04      	ldr	r5, [sp, #16]
 800ac2a:	9f08      	ldr	r7, [sp, #32]
 800ac2c:	e73b      	b.n	800aaa6 <_dtoa_r+0x736>
 800ac2e:	9a07      	ldr	r2, [sp, #28]
 800ac30:	e767      	b.n	800ab02 <_dtoa_r+0x792>
 800ac32:	9b06      	ldr	r3, [sp, #24]
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	dc18      	bgt.n	800ac6a <_dtoa_r+0x8fa>
 800ac38:	f1ba 0f00 	cmp.w	sl, #0
 800ac3c:	d115      	bne.n	800ac6a <_dtoa_r+0x8fa>
 800ac3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac42:	b993      	cbnz	r3, 800ac6a <_dtoa_r+0x8fa>
 800ac44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ac48:	0d1b      	lsrs	r3, r3, #20
 800ac4a:	051b      	lsls	r3, r3, #20
 800ac4c:	b183      	cbz	r3, 800ac70 <_dtoa_r+0x900>
 800ac4e:	9b04      	ldr	r3, [sp, #16]
 800ac50:	3301      	adds	r3, #1
 800ac52:	9304      	str	r3, [sp, #16]
 800ac54:	9b05      	ldr	r3, [sp, #20]
 800ac56:	3301      	adds	r3, #1
 800ac58:	9305      	str	r3, [sp, #20]
 800ac5a:	f04f 0801 	mov.w	r8, #1
 800ac5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f47f af6a 	bne.w	800ab3a <_dtoa_r+0x7ca>
 800ac66:	2001      	movs	r0, #1
 800ac68:	e76f      	b.n	800ab4a <_dtoa_r+0x7da>
 800ac6a:	f04f 0800 	mov.w	r8, #0
 800ac6e:	e7f6      	b.n	800ac5e <_dtoa_r+0x8ee>
 800ac70:	4698      	mov	r8, r3
 800ac72:	e7f4      	b.n	800ac5e <_dtoa_r+0x8ee>
 800ac74:	f43f af7d 	beq.w	800ab72 <_dtoa_r+0x802>
 800ac78:	4618      	mov	r0, r3
 800ac7a:	301c      	adds	r0, #28
 800ac7c:	e772      	b.n	800ab64 <_dtoa_r+0x7f4>
 800ac7e:	9b03      	ldr	r3, [sp, #12]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	dc37      	bgt.n	800acf4 <_dtoa_r+0x984>
 800ac84:	9b06      	ldr	r3, [sp, #24]
 800ac86:	2b02      	cmp	r3, #2
 800ac88:	dd34      	ble.n	800acf4 <_dtoa_r+0x984>
 800ac8a:	9b03      	ldr	r3, [sp, #12]
 800ac8c:	9302      	str	r3, [sp, #8]
 800ac8e:	9b02      	ldr	r3, [sp, #8]
 800ac90:	b96b      	cbnz	r3, 800acae <_dtoa_r+0x93e>
 800ac92:	4631      	mov	r1, r6
 800ac94:	2205      	movs	r2, #5
 800ac96:	4620      	mov	r0, r4
 800ac98:	f000 f9d8 	bl	800b04c <__multadd>
 800ac9c:	4601      	mov	r1, r0
 800ac9e:	4606      	mov	r6, r0
 800aca0:	ee18 0a10 	vmov	r0, s16
 800aca4:	f000 fbf2 	bl	800b48c <__mcmp>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	f73f adbb 	bgt.w	800a824 <_dtoa_r+0x4b4>
 800acae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acb0:	9d01      	ldr	r5, [sp, #4]
 800acb2:	43db      	mvns	r3, r3
 800acb4:	9300      	str	r3, [sp, #0]
 800acb6:	f04f 0800 	mov.w	r8, #0
 800acba:	4631      	mov	r1, r6
 800acbc:	4620      	mov	r0, r4
 800acbe:	f000 f9a3 	bl	800b008 <_Bfree>
 800acc2:	2f00      	cmp	r7, #0
 800acc4:	f43f aea4 	beq.w	800aa10 <_dtoa_r+0x6a0>
 800acc8:	f1b8 0f00 	cmp.w	r8, #0
 800accc:	d005      	beq.n	800acda <_dtoa_r+0x96a>
 800acce:	45b8      	cmp	r8, r7
 800acd0:	d003      	beq.n	800acda <_dtoa_r+0x96a>
 800acd2:	4641      	mov	r1, r8
 800acd4:	4620      	mov	r0, r4
 800acd6:	f000 f997 	bl	800b008 <_Bfree>
 800acda:	4639      	mov	r1, r7
 800acdc:	4620      	mov	r0, r4
 800acde:	f000 f993 	bl	800b008 <_Bfree>
 800ace2:	e695      	b.n	800aa10 <_dtoa_r+0x6a0>
 800ace4:	2600      	movs	r6, #0
 800ace6:	4637      	mov	r7, r6
 800ace8:	e7e1      	b.n	800acae <_dtoa_r+0x93e>
 800acea:	9700      	str	r7, [sp, #0]
 800acec:	4637      	mov	r7, r6
 800acee:	e599      	b.n	800a824 <_dtoa_r+0x4b4>
 800acf0:	40240000 	.word	0x40240000
 800acf4:	9b08      	ldr	r3, [sp, #32]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f000 80ca 	beq.w	800ae90 <_dtoa_r+0xb20>
 800acfc:	9b03      	ldr	r3, [sp, #12]
 800acfe:	9302      	str	r3, [sp, #8]
 800ad00:	2d00      	cmp	r5, #0
 800ad02:	dd05      	ble.n	800ad10 <_dtoa_r+0x9a0>
 800ad04:	4639      	mov	r1, r7
 800ad06:	462a      	mov	r2, r5
 800ad08:	4620      	mov	r0, r4
 800ad0a:	f000 fb4f 	bl	800b3ac <__lshift>
 800ad0e:	4607      	mov	r7, r0
 800ad10:	f1b8 0f00 	cmp.w	r8, #0
 800ad14:	d05b      	beq.n	800adce <_dtoa_r+0xa5e>
 800ad16:	6879      	ldr	r1, [r7, #4]
 800ad18:	4620      	mov	r0, r4
 800ad1a:	f000 f935 	bl	800af88 <_Balloc>
 800ad1e:	4605      	mov	r5, r0
 800ad20:	b928      	cbnz	r0, 800ad2e <_dtoa_r+0x9be>
 800ad22:	4b87      	ldr	r3, [pc, #540]	; (800af40 <_dtoa_r+0xbd0>)
 800ad24:	4602      	mov	r2, r0
 800ad26:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ad2a:	f7ff bb3b 	b.w	800a3a4 <_dtoa_r+0x34>
 800ad2e:	693a      	ldr	r2, [r7, #16]
 800ad30:	3202      	adds	r2, #2
 800ad32:	0092      	lsls	r2, r2, #2
 800ad34:	f107 010c 	add.w	r1, r7, #12
 800ad38:	300c      	adds	r0, #12
 800ad3a:	f000 f90b 	bl	800af54 <memcpy>
 800ad3e:	2201      	movs	r2, #1
 800ad40:	4629      	mov	r1, r5
 800ad42:	4620      	mov	r0, r4
 800ad44:	f000 fb32 	bl	800b3ac <__lshift>
 800ad48:	9b01      	ldr	r3, [sp, #4]
 800ad4a:	f103 0901 	add.w	r9, r3, #1
 800ad4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ad52:	4413      	add	r3, r2
 800ad54:	9305      	str	r3, [sp, #20]
 800ad56:	f00a 0301 	and.w	r3, sl, #1
 800ad5a:	46b8      	mov	r8, r7
 800ad5c:	9304      	str	r3, [sp, #16]
 800ad5e:	4607      	mov	r7, r0
 800ad60:	4631      	mov	r1, r6
 800ad62:	ee18 0a10 	vmov	r0, s16
 800ad66:	f7ff fa76 	bl	800a256 <quorem>
 800ad6a:	4641      	mov	r1, r8
 800ad6c:	9002      	str	r0, [sp, #8]
 800ad6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ad72:	ee18 0a10 	vmov	r0, s16
 800ad76:	f000 fb89 	bl	800b48c <__mcmp>
 800ad7a:	463a      	mov	r2, r7
 800ad7c:	9003      	str	r0, [sp, #12]
 800ad7e:	4631      	mov	r1, r6
 800ad80:	4620      	mov	r0, r4
 800ad82:	f000 fb9f 	bl	800b4c4 <__mdiff>
 800ad86:	68c2      	ldr	r2, [r0, #12]
 800ad88:	f109 3bff 	add.w	fp, r9, #4294967295
 800ad8c:	4605      	mov	r5, r0
 800ad8e:	bb02      	cbnz	r2, 800add2 <_dtoa_r+0xa62>
 800ad90:	4601      	mov	r1, r0
 800ad92:	ee18 0a10 	vmov	r0, s16
 800ad96:	f000 fb79 	bl	800b48c <__mcmp>
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	4629      	mov	r1, r5
 800ad9e:	4620      	mov	r0, r4
 800ada0:	9207      	str	r2, [sp, #28]
 800ada2:	f000 f931 	bl	800b008 <_Bfree>
 800ada6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800adaa:	ea43 0102 	orr.w	r1, r3, r2
 800adae:	9b04      	ldr	r3, [sp, #16]
 800adb0:	430b      	orrs	r3, r1
 800adb2:	464d      	mov	r5, r9
 800adb4:	d10f      	bne.n	800add6 <_dtoa_r+0xa66>
 800adb6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800adba:	d02a      	beq.n	800ae12 <_dtoa_r+0xaa2>
 800adbc:	9b03      	ldr	r3, [sp, #12]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	dd02      	ble.n	800adc8 <_dtoa_r+0xa58>
 800adc2:	9b02      	ldr	r3, [sp, #8]
 800adc4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800adc8:	f88b a000 	strb.w	sl, [fp]
 800adcc:	e775      	b.n	800acba <_dtoa_r+0x94a>
 800adce:	4638      	mov	r0, r7
 800add0:	e7ba      	b.n	800ad48 <_dtoa_r+0x9d8>
 800add2:	2201      	movs	r2, #1
 800add4:	e7e2      	b.n	800ad9c <_dtoa_r+0xa2c>
 800add6:	9b03      	ldr	r3, [sp, #12]
 800add8:	2b00      	cmp	r3, #0
 800adda:	db04      	blt.n	800ade6 <_dtoa_r+0xa76>
 800addc:	9906      	ldr	r1, [sp, #24]
 800adde:	430b      	orrs	r3, r1
 800ade0:	9904      	ldr	r1, [sp, #16]
 800ade2:	430b      	orrs	r3, r1
 800ade4:	d122      	bne.n	800ae2c <_dtoa_r+0xabc>
 800ade6:	2a00      	cmp	r2, #0
 800ade8:	ddee      	ble.n	800adc8 <_dtoa_r+0xa58>
 800adea:	ee18 1a10 	vmov	r1, s16
 800adee:	2201      	movs	r2, #1
 800adf0:	4620      	mov	r0, r4
 800adf2:	f000 fadb 	bl	800b3ac <__lshift>
 800adf6:	4631      	mov	r1, r6
 800adf8:	ee08 0a10 	vmov	s16, r0
 800adfc:	f000 fb46 	bl	800b48c <__mcmp>
 800ae00:	2800      	cmp	r0, #0
 800ae02:	dc03      	bgt.n	800ae0c <_dtoa_r+0xa9c>
 800ae04:	d1e0      	bne.n	800adc8 <_dtoa_r+0xa58>
 800ae06:	f01a 0f01 	tst.w	sl, #1
 800ae0a:	d0dd      	beq.n	800adc8 <_dtoa_r+0xa58>
 800ae0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ae10:	d1d7      	bne.n	800adc2 <_dtoa_r+0xa52>
 800ae12:	2339      	movs	r3, #57	; 0x39
 800ae14:	f88b 3000 	strb.w	r3, [fp]
 800ae18:	462b      	mov	r3, r5
 800ae1a:	461d      	mov	r5, r3
 800ae1c:	3b01      	subs	r3, #1
 800ae1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ae22:	2a39      	cmp	r2, #57	; 0x39
 800ae24:	d071      	beq.n	800af0a <_dtoa_r+0xb9a>
 800ae26:	3201      	adds	r2, #1
 800ae28:	701a      	strb	r2, [r3, #0]
 800ae2a:	e746      	b.n	800acba <_dtoa_r+0x94a>
 800ae2c:	2a00      	cmp	r2, #0
 800ae2e:	dd07      	ble.n	800ae40 <_dtoa_r+0xad0>
 800ae30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ae34:	d0ed      	beq.n	800ae12 <_dtoa_r+0xaa2>
 800ae36:	f10a 0301 	add.w	r3, sl, #1
 800ae3a:	f88b 3000 	strb.w	r3, [fp]
 800ae3e:	e73c      	b.n	800acba <_dtoa_r+0x94a>
 800ae40:	9b05      	ldr	r3, [sp, #20]
 800ae42:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ae46:	4599      	cmp	r9, r3
 800ae48:	d047      	beq.n	800aeda <_dtoa_r+0xb6a>
 800ae4a:	ee18 1a10 	vmov	r1, s16
 800ae4e:	2300      	movs	r3, #0
 800ae50:	220a      	movs	r2, #10
 800ae52:	4620      	mov	r0, r4
 800ae54:	f000 f8fa 	bl	800b04c <__multadd>
 800ae58:	45b8      	cmp	r8, r7
 800ae5a:	ee08 0a10 	vmov	s16, r0
 800ae5e:	f04f 0300 	mov.w	r3, #0
 800ae62:	f04f 020a 	mov.w	r2, #10
 800ae66:	4641      	mov	r1, r8
 800ae68:	4620      	mov	r0, r4
 800ae6a:	d106      	bne.n	800ae7a <_dtoa_r+0xb0a>
 800ae6c:	f000 f8ee 	bl	800b04c <__multadd>
 800ae70:	4680      	mov	r8, r0
 800ae72:	4607      	mov	r7, r0
 800ae74:	f109 0901 	add.w	r9, r9, #1
 800ae78:	e772      	b.n	800ad60 <_dtoa_r+0x9f0>
 800ae7a:	f000 f8e7 	bl	800b04c <__multadd>
 800ae7e:	4639      	mov	r1, r7
 800ae80:	4680      	mov	r8, r0
 800ae82:	2300      	movs	r3, #0
 800ae84:	220a      	movs	r2, #10
 800ae86:	4620      	mov	r0, r4
 800ae88:	f000 f8e0 	bl	800b04c <__multadd>
 800ae8c:	4607      	mov	r7, r0
 800ae8e:	e7f1      	b.n	800ae74 <_dtoa_r+0xb04>
 800ae90:	9b03      	ldr	r3, [sp, #12]
 800ae92:	9302      	str	r3, [sp, #8]
 800ae94:	9d01      	ldr	r5, [sp, #4]
 800ae96:	ee18 0a10 	vmov	r0, s16
 800ae9a:	4631      	mov	r1, r6
 800ae9c:	f7ff f9db 	bl	800a256 <quorem>
 800aea0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aea4:	9b01      	ldr	r3, [sp, #4]
 800aea6:	f805 ab01 	strb.w	sl, [r5], #1
 800aeaa:	1aea      	subs	r2, r5, r3
 800aeac:	9b02      	ldr	r3, [sp, #8]
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	dd09      	ble.n	800aec6 <_dtoa_r+0xb56>
 800aeb2:	ee18 1a10 	vmov	r1, s16
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	220a      	movs	r2, #10
 800aeba:	4620      	mov	r0, r4
 800aebc:	f000 f8c6 	bl	800b04c <__multadd>
 800aec0:	ee08 0a10 	vmov	s16, r0
 800aec4:	e7e7      	b.n	800ae96 <_dtoa_r+0xb26>
 800aec6:	9b02      	ldr	r3, [sp, #8]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	bfc8      	it	gt
 800aecc:	461d      	movgt	r5, r3
 800aece:	9b01      	ldr	r3, [sp, #4]
 800aed0:	bfd8      	it	le
 800aed2:	2501      	movle	r5, #1
 800aed4:	441d      	add	r5, r3
 800aed6:	f04f 0800 	mov.w	r8, #0
 800aeda:	ee18 1a10 	vmov	r1, s16
 800aede:	2201      	movs	r2, #1
 800aee0:	4620      	mov	r0, r4
 800aee2:	f000 fa63 	bl	800b3ac <__lshift>
 800aee6:	4631      	mov	r1, r6
 800aee8:	ee08 0a10 	vmov	s16, r0
 800aeec:	f000 face 	bl	800b48c <__mcmp>
 800aef0:	2800      	cmp	r0, #0
 800aef2:	dc91      	bgt.n	800ae18 <_dtoa_r+0xaa8>
 800aef4:	d102      	bne.n	800aefc <_dtoa_r+0xb8c>
 800aef6:	f01a 0f01 	tst.w	sl, #1
 800aefa:	d18d      	bne.n	800ae18 <_dtoa_r+0xaa8>
 800aefc:	462b      	mov	r3, r5
 800aefe:	461d      	mov	r5, r3
 800af00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af04:	2a30      	cmp	r2, #48	; 0x30
 800af06:	d0fa      	beq.n	800aefe <_dtoa_r+0xb8e>
 800af08:	e6d7      	b.n	800acba <_dtoa_r+0x94a>
 800af0a:	9a01      	ldr	r2, [sp, #4]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d184      	bne.n	800ae1a <_dtoa_r+0xaaa>
 800af10:	9b00      	ldr	r3, [sp, #0]
 800af12:	3301      	adds	r3, #1
 800af14:	9300      	str	r3, [sp, #0]
 800af16:	2331      	movs	r3, #49	; 0x31
 800af18:	7013      	strb	r3, [r2, #0]
 800af1a:	e6ce      	b.n	800acba <_dtoa_r+0x94a>
 800af1c:	4b09      	ldr	r3, [pc, #36]	; (800af44 <_dtoa_r+0xbd4>)
 800af1e:	f7ff ba95 	b.w	800a44c <_dtoa_r+0xdc>
 800af22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af24:	2b00      	cmp	r3, #0
 800af26:	f47f aa6e 	bne.w	800a406 <_dtoa_r+0x96>
 800af2a:	4b07      	ldr	r3, [pc, #28]	; (800af48 <_dtoa_r+0xbd8>)
 800af2c:	f7ff ba8e 	b.w	800a44c <_dtoa_r+0xdc>
 800af30:	9b02      	ldr	r3, [sp, #8]
 800af32:	2b00      	cmp	r3, #0
 800af34:	dcae      	bgt.n	800ae94 <_dtoa_r+0xb24>
 800af36:	9b06      	ldr	r3, [sp, #24]
 800af38:	2b02      	cmp	r3, #2
 800af3a:	f73f aea8 	bgt.w	800ac8e <_dtoa_r+0x91e>
 800af3e:	e7a9      	b.n	800ae94 <_dtoa_r+0xb24>
 800af40:	0800ca2f 	.word	0x0800ca2f
 800af44:	0800c98c 	.word	0x0800c98c
 800af48:	0800c9b0 	.word	0x0800c9b0

0800af4c <_localeconv_r>:
 800af4c:	4800      	ldr	r0, [pc, #0]	; (800af50 <_localeconv_r+0x4>)
 800af4e:	4770      	bx	lr
 800af50:	20002550 	.word	0x20002550

0800af54 <memcpy>:
 800af54:	440a      	add	r2, r1
 800af56:	4291      	cmp	r1, r2
 800af58:	f100 33ff 	add.w	r3, r0, #4294967295
 800af5c:	d100      	bne.n	800af60 <memcpy+0xc>
 800af5e:	4770      	bx	lr
 800af60:	b510      	push	{r4, lr}
 800af62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af6a:	4291      	cmp	r1, r2
 800af6c:	d1f9      	bne.n	800af62 <memcpy+0xe>
 800af6e:	bd10      	pop	{r4, pc}

0800af70 <__malloc_lock>:
 800af70:	4801      	ldr	r0, [pc, #4]	; (800af78 <__malloc_lock+0x8>)
 800af72:	f000 bd30 	b.w	800b9d6 <__retarget_lock_acquire_recursive>
 800af76:	bf00      	nop
 800af78:	200034ec 	.word	0x200034ec

0800af7c <__malloc_unlock>:
 800af7c:	4801      	ldr	r0, [pc, #4]	; (800af84 <__malloc_unlock+0x8>)
 800af7e:	f000 bd2b 	b.w	800b9d8 <__retarget_lock_release_recursive>
 800af82:	bf00      	nop
 800af84:	200034ec 	.word	0x200034ec

0800af88 <_Balloc>:
 800af88:	b570      	push	{r4, r5, r6, lr}
 800af8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af8c:	4604      	mov	r4, r0
 800af8e:	460d      	mov	r5, r1
 800af90:	b976      	cbnz	r6, 800afb0 <_Balloc+0x28>
 800af92:	2010      	movs	r0, #16
 800af94:	f7fe fbba 	bl	800970c <malloc>
 800af98:	4602      	mov	r2, r0
 800af9a:	6260      	str	r0, [r4, #36]	; 0x24
 800af9c:	b920      	cbnz	r0, 800afa8 <_Balloc+0x20>
 800af9e:	4b18      	ldr	r3, [pc, #96]	; (800b000 <_Balloc+0x78>)
 800afa0:	4818      	ldr	r0, [pc, #96]	; (800b004 <_Balloc+0x7c>)
 800afa2:	2166      	movs	r1, #102	; 0x66
 800afa4:	f000 fce6 	bl	800b974 <__assert_func>
 800afa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afac:	6006      	str	r6, [r0, #0]
 800afae:	60c6      	str	r6, [r0, #12]
 800afb0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800afb2:	68f3      	ldr	r3, [r6, #12]
 800afb4:	b183      	cbz	r3, 800afd8 <_Balloc+0x50>
 800afb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afb8:	68db      	ldr	r3, [r3, #12]
 800afba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800afbe:	b9b8      	cbnz	r0, 800aff0 <_Balloc+0x68>
 800afc0:	2101      	movs	r1, #1
 800afc2:	fa01 f605 	lsl.w	r6, r1, r5
 800afc6:	1d72      	adds	r2, r6, #5
 800afc8:	0092      	lsls	r2, r2, #2
 800afca:	4620      	mov	r0, r4
 800afcc:	f000 fb60 	bl	800b690 <_calloc_r>
 800afd0:	b160      	cbz	r0, 800afec <_Balloc+0x64>
 800afd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800afd6:	e00e      	b.n	800aff6 <_Balloc+0x6e>
 800afd8:	2221      	movs	r2, #33	; 0x21
 800afda:	2104      	movs	r1, #4
 800afdc:	4620      	mov	r0, r4
 800afde:	f000 fb57 	bl	800b690 <_calloc_r>
 800afe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afe4:	60f0      	str	r0, [r6, #12]
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d1e4      	bne.n	800afb6 <_Balloc+0x2e>
 800afec:	2000      	movs	r0, #0
 800afee:	bd70      	pop	{r4, r5, r6, pc}
 800aff0:	6802      	ldr	r2, [r0, #0]
 800aff2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aff6:	2300      	movs	r3, #0
 800aff8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800affc:	e7f7      	b.n	800afee <_Balloc+0x66>
 800affe:	bf00      	nop
 800b000:	0800c9bd 	.word	0x0800c9bd
 800b004:	0800ca40 	.word	0x0800ca40

0800b008 <_Bfree>:
 800b008:	b570      	push	{r4, r5, r6, lr}
 800b00a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b00c:	4605      	mov	r5, r0
 800b00e:	460c      	mov	r4, r1
 800b010:	b976      	cbnz	r6, 800b030 <_Bfree+0x28>
 800b012:	2010      	movs	r0, #16
 800b014:	f7fe fb7a 	bl	800970c <malloc>
 800b018:	4602      	mov	r2, r0
 800b01a:	6268      	str	r0, [r5, #36]	; 0x24
 800b01c:	b920      	cbnz	r0, 800b028 <_Bfree+0x20>
 800b01e:	4b09      	ldr	r3, [pc, #36]	; (800b044 <_Bfree+0x3c>)
 800b020:	4809      	ldr	r0, [pc, #36]	; (800b048 <_Bfree+0x40>)
 800b022:	218a      	movs	r1, #138	; 0x8a
 800b024:	f000 fca6 	bl	800b974 <__assert_func>
 800b028:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b02c:	6006      	str	r6, [r0, #0]
 800b02e:	60c6      	str	r6, [r0, #12]
 800b030:	b13c      	cbz	r4, 800b042 <_Bfree+0x3a>
 800b032:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b034:	6862      	ldr	r2, [r4, #4]
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b03c:	6021      	str	r1, [r4, #0]
 800b03e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b042:	bd70      	pop	{r4, r5, r6, pc}
 800b044:	0800c9bd 	.word	0x0800c9bd
 800b048:	0800ca40 	.word	0x0800ca40

0800b04c <__multadd>:
 800b04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b050:	690d      	ldr	r5, [r1, #16]
 800b052:	4607      	mov	r7, r0
 800b054:	460c      	mov	r4, r1
 800b056:	461e      	mov	r6, r3
 800b058:	f101 0c14 	add.w	ip, r1, #20
 800b05c:	2000      	movs	r0, #0
 800b05e:	f8dc 3000 	ldr.w	r3, [ip]
 800b062:	b299      	uxth	r1, r3
 800b064:	fb02 6101 	mla	r1, r2, r1, r6
 800b068:	0c1e      	lsrs	r6, r3, #16
 800b06a:	0c0b      	lsrs	r3, r1, #16
 800b06c:	fb02 3306 	mla	r3, r2, r6, r3
 800b070:	b289      	uxth	r1, r1
 800b072:	3001      	adds	r0, #1
 800b074:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b078:	4285      	cmp	r5, r0
 800b07a:	f84c 1b04 	str.w	r1, [ip], #4
 800b07e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b082:	dcec      	bgt.n	800b05e <__multadd+0x12>
 800b084:	b30e      	cbz	r6, 800b0ca <__multadd+0x7e>
 800b086:	68a3      	ldr	r3, [r4, #8]
 800b088:	42ab      	cmp	r3, r5
 800b08a:	dc19      	bgt.n	800b0c0 <__multadd+0x74>
 800b08c:	6861      	ldr	r1, [r4, #4]
 800b08e:	4638      	mov	r0, r7
 800b090:	3101      	adds	r1, #1
 800b092:	f7ff ff79 	bl	800af88 <_Balloc>
 800b096:	4680      	mov	r8, r0
 800b098:	b928      	cbnz	r0, 800b0a6 <__multadd+0x5a>
 800b09a:	4602      	mov	r2, r0
 800b09c:	4b0c      	ldr	r3, [pc, #48]	; (800b0d0 <__multadd+0x84>)
 800b09e:	480d      	ldr	r0, [pc, #52]	; (800b0d4 <__multadd+0x88>)
 800b0a0:	21b5      	movs	r1, #181	; 0xb5
 800b0a2:	f000 fc67 	bl	800b974 <__assert_func>
 800b0a6:	6922      	ldr	r2, [r4, #16]
 800b0a8:	3202      	adds	r2, #2
 800b0aa:	f104 010c 	add.w	r1, r4, #12
 800b0ae:	0092      	lsls	r2, r2, #2
 800b0b0:	300c      	adds	r0, #12
 800b0b2:	f7ff ff4f 	bl	800af54 <memcpy>
 800b0b6:	4621      	mov	r1, r4
 800b0b8:	4638      	mov	r0, r7
 800b0ba:	f7ff ffa5 	bl	800b008 <_Bfree>
 800b0be:	4644      	mov	r4, r8
 800b0c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b0c4:	3501      	adds	r5, #1
 800b0c6:	615e      	str	r6, [r3, #20]
 800b0c8:	6125      	str	r5, [r4, #16]
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0d0:	0800ca2f 	.word	0x0800ca2f
 800b0d4:	0800ca40 	.word	0x0800ca40

0800b0d8 <__hi0bits>:
 800b0d8:	0c03      	lsrs	r3, r0, #16
 800b0da:	041b      	lsls	r3, r3, #16
 800b0dc:	b9d3      	cbnz	r3, 800b114 <__hi0bits+0x3c>
 800b0de:	0400      	lsls	r0, r0, #16
 800b0e0:	2310      	movs	r3, #16
 800b0e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b0e6:	bf04      	itt	eq
 800b0e8:	0200      	lsleq	r0, r0, #8
 800b0ea:	3308      	addeq	r3, #8
 800b0ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b0f0:	bf04      	itt	eq
 800b0f2:	0100      	lsleq	r0, r0, #4
 800b0f4:	3304      	addeq	r3, #4
 800b0f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b0fa:	bf04      	itt	eq
 800b0fc:	0080      	lsleq	r0, r0, #2
 800b0fe:	3302      	addeq	r3, #2
 800b100:	2800      	cmp	r0, #0
 800b102:	db05      	blt.n	800b110 <__hi0bits+0x38>
 800b104:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b108:	f103 0301 	add.w	r3, r3, #1
 800b10c:	bf08      	it	eq
 800b10e:	2320      	moveq	r3, #32
 800b110:	4618      	mov	r0, r3
 800b112:	4770      	bx	lr
 800b114:	2300      	movs	r3, #0
 800b116:	e7e4      	b.n	800b0e2 <__hi0bits+0xa>

0800b118 <__lo0bits>:
 800b118:	6803      	ldr	r3, [r0, #0]
 800b11a:	f013 0207 	ands.w	r2, r3, #7
 800b11e:	4601      	mov	r1, r0
 800b120:	d00b      	beq.n	800b13a <__lo0bits+0x22>
 800b122:	07da      	lsls	r2, r3, #31
 800b124:	d423      	bmi.n	800b16e <__lo0bits+0x56>
 800b126:	0798      	lsls	r0, r3, #30
 800b128:	bf49      	itett	mi
 800b12a:	085b      	lsrmi	r3, r3, #1
 800b12c:	089b      	lsrpl	r3, r3, #2
 800b12e:	2001      	movmi	r0, #1
 800b130:	600b      	strmi	r3, [r1, #0]
 800b132:	bf5c      	itt	pl
 800b134:	600b      	strpl	r3, [r1, #0]
 800b136:	2002      	movpl	r0, #2
 800b138:	4770      	bx	lr
 800b13a:	b298      	uxth	r0, r3
 800b13c:	b9a8      	cbnz	r0, 800b16a <__lo0bits+0x52>
 800b13e:	0c1b      	lsrs	r3, r3, #16
 800b140:	2010      	movs	r0, #16
 800b142:	b2da      	uxtb	r2, r3
 800b144:	b90a      	cbnz	r2, 800b14a <__lo0bits+0x32>
 800b146:	3008      	adds	r0, #8
 800b148:	0a1b      	lsrs	r3, r3, #8
 800b14a:	071a      	lsls	r2, r3, #28
 800b14c:	bf04      	itt	eq
 800b14e:	091b      	lsreq	r3, r3, #4
 800b150:	3004      	addeq	r0, #4
 800b152:	079a      	lsls	r2, r3, #30
 800b154:	bf04      	itt	eq
 800b156:	089b      	lsreq	r3, r3, #2
 800b158:	3002      	addeq	r0, #2
 800b15a:	07da      	lsls	r2, r3, #31
 800b15c:	d403      	bmi.n	800b166 <__lo0bits+0x4e>
 800b15e:	085b      	lsrs	r3, r3, #1
 800b160:	f100 0001 	add.w	r0, r0, #1
 800b164:	d005      	beq.n	800b172 <__lo0bits+0x5a>
 800b166:	600b      	str	r3, [r1, #0]
 800b168:	4770      	bx	lr
 800b16a:	4610      	mov	r0, r2
 800b16c:	e7e9      	b.n	800b142 <__lo0bits+0x2a>
 800b16e:	2000      	movs	r0, #0
 800b170:	4770      	bx	lr
 800b172:	2020      	movs	r0, #32
 800b174:	4770      	bx	lr
	...

0800b178 <__i2b>:
 800b178:	b510      	push	{r4, lr}
 800b17a:	460c      	mov	r4, r1
 800b17c:	2101      	movs	r1, #1
 800b17e:	f7ff ff03 	bl	800af88 <_Balloc>
 800b182:	4602      	mov	r2, r0
 800b184:	b928      	cbnz	r0, 800b192 <__i2b+0x1a>
 800b186:	4b05      	ldr	r3, [pc, #20]	; (800b19c <__i2b+0x24>)
 800b188:	4805      	ldr	r0, [pc, #20]	; (800b1a0 <__i2b+0x28>)
 800b18a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b18e:	f000 fbf1 	bl	800b974 <__assert_func>
 800b192:	2301      	movs	r3, #1
 800b194:	6144      	str	r4, [r0, #20]
 800b196:	6103      	str	r3, [r0, #16]
 800b198:	bd10      	pop	{r4, pc}
 800b19a:	bf00      	nop
 800b19c:	0800ca2f 	.word	0x0800ca2f
 800b1a0:	0800ca40 	.word	0x0800ca40

0800b1a4 <__multiply>:
 800b1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a8:	4691      	mov	r9, r2
 800b1aa:	690a      	ldr	r2, [r1, #16]
 800b1ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	bfb8      	it	lt
 800b1b4:	460b      	movlt	r3, r1
 800b1b6:	460c      	mov	r4, r1
 800b1b8:	bfbc      	itt	lt
 800b1ba:	464c      	movlt	r4, r9
 800b1bc:	4699      	movlt	r9, r3
 800b1be:	6927      	ldr	r7, [r4, #16]
 800b1c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b1c4:	68a3      	ldr	r3, [r4, #8]
 800b1c6:	6861      	ldr	r1, [r4, #4]
 800b1c8:	eb07 060a 	add.w	r6, r7, sl
 800b1cc:	42b3      	cmp	r3, r6
 800b1ce:	b085      	sub	sp, #20
 800b1d0:	bfb8      	it	lt
 800b1d2:	3101      	addlt	r1, #1
 800b1d4:	f7ff fed8 	bl	800af88 <_Balloc>
 800b1d8:	b930      	cbnz	r0, 800b1e8 <__multiply+0x44>
 800b1da:	4602      	mov	r2, r0
 800b1dc:	4b44      	ldr	r3, [pc, #272]	; (800b2f0 <__multiply+0x14c>)
 800b1de:	4845      	ldr	r0, [pc, #276]	; (800b2f4 <__multiply+0x150>)
 800b1e0:	f240 115d 	movw	r1, #349	; 0x15d
 800b1e4:	f000 fbc6 	bl	800b974 <__assert_func>
 800b1e8:	f100 0514 	add.w	r5, r0, #20
 800b1ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b1f0:	462b      	mov	r3, r5
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	4543      	cmp	r3, r8
 800b1f6:	d321      	bcc.n	800b23c <__multiply+0x98>
 800b1f8:	f104 0314 	add.w	r3, r4, #20
 800b1fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b200:	f109 0314 	add.w	r3, r9, #20
 800b204:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b208:	9202      	str	r2, [sp, #8]
 800b20a:	1b3a      	subs	r2, r7, r4
 800b20c:	3a15      	subs	r2, #21
 800b20e:	f022 0203 	bic.w	r2, r2, #3
 800b212:	3204      	adds	r2, #4
 800b214:	f104 0115 	add.w	r1, r4, #21
 800b218:	428f      	cmp	r7, r1
 800b21a:	bf38      	it	cc
 800b21c:	2204      	movcc	r2, #4
 800b21e:	9201      	str	r2, [sp, #4]
 800b220:	9a02      	ldr	r2, [sp, #8]
 800b222:	9303      	str	r3, [sp, #12]
 800b224:	429a      	cmp	r2, r3
 800b226:	d80c      	bhi.n	800b242 <__multiply+0x9e>
 800b228:	2e00      	cmp	r6, #0
 800b22a:	dd03      	ble.n	800b234 <__multiply+0x90>
 800b22c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b230:	2b00      	cmp	r3, #0
 800b232:	d05a      	beq.n	800b2ea <__multiply+0x146>
 800b234:	6106      	str	r6, [r0, #16]
 800b236:	b005      	add	sp, #20
 800b238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b23c:	f843 2b04 	str.w	r2, [r3], #4
 800b240:	e7d8      	b.n	800b1f4 <__multiply+0x50>
 800b242:	f8b3 a000 	ldrh.w	sl, [r3]
 800b246:	f1ba 0f00 	cmp.w	sl, #0
 800b24a:	d024      	beq.n	800b296 <__multiply+0xf2>
 800b24c:	f104 0e14 	add.w	lr, r4, #20
 800b250:	46a9      	mov	r9, r5
 800b252:	f04f 0c00 	mov.w	ip, #0
 800b256:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b25a:	f8d9 1000 	ldr.w	r1, [r9]
 800b25e:	fa1f fb82 	uxth.w	fp, r2
 800b262:	b289      	uxth	r1, r1
 800b264:	fb0a 110b 	mla	r1, sl, fp, r1
 800b268:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b26c:	f8d9 2000 	ldr.w	r2, [r9]
 800b270:	4461      	add	r1, ip
 800b272:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b276:	fb0a c20b 	mla	r2, sl, fp, ip
 800b27a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b27e:	b289      	uxth	r1, r1
 800b280:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b284:	4577      	cmp	r7, lr
 800b286:	f849 1b04 	str.w	r1, [r9], #4
 800b28a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b28e:	d8e2      	bhi.n	800b256 <__multiply+0xb2>
 800b290:	9a01      	ldr	r2, [sp, #4]
 800b292:	f845 c002 	str.w	ip, [r5, r2]
 800b296:	9a03      	ldr	r2, [sp, #12]
 800b298:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b29c:	3304      	adds	r3, #4
 800b29e:	f1b9 0f00 	cmp.w	r9, #0
 800b2a2:	d020      	beq.n	800b2e6 <__multiply+0x142>
 800b2a4:	6829      	ldr	r1, [r5, #0]
 800b2a6:	f104 0c14 	add.w	ip, r4, #20
 800b2aa:	46ae      	mov	lr, r5
 800b2ac:	f04f 0a00 	mov.w	sl, #0
 800b2b0:	f8bc b000 	ldrh.w	fp, [ip]
 800b2b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b2b8:	fb09 220b 	mla	r2, r9, fp, r2
 800b2bc:	4492      	add	sl, r2
 800b2be:	b289      	uxth	r1, r1
 800b2c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b2c4:	f84e 1b04 	str.w	r1, [lr], #4
 800b2c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b2cc:	f8be 1000 	ldrh.w	r1, [lr]
 800b2d0:	0c12      	lsrs	r2, r2, #16
 800b2d2:	fb09 1102 	mla	r1, r9, r2, r1
 800b2d6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b2da:	4567      	cmp	r7, ip
 800b2dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b2e0:	d8e6      	bhi.n	800b2b0 <__multiply+0x10c>
 800b2e2:	9a01      	ldr	r2, [sp, #4]
 800b2e4:	50a9      	str	r1, [r5, r2]
 800b2e6:	3504      	adds	r5, #4
 800b2e8:	e79a      	b.n	800b220 <__multiply+0x7c>
 800b2ea:	3e01      	subs	r6, #1
 800b2ec:	e79c      	b.n	800b228 <__multiply+0x84>
 800b2ee:	bf00      	nop
 800b2f0:	0800ca2f 	.word	0x0800ca2f
 800b2f4:	0800ca40 	.word	0x0800ca40

0800b2f8 <__pow5mult>:
 800b2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2fc:	4615      	mov	r5, r2
 800b2fe:	f012 0203 	ands.w	r2, r2, #3
 800b302:	4606      	mov	r6, r0
 800b304:	460f      	mov	r7, r1
 800b306:	d007      	beq.n	800b318 <__pow5mult+0x20>
 800b308:	4c25      	ldr	r4, [pc, #148]	; (800b3a0 <__pow5mult+0xa8>)
 800b30a:	3a01      	subs	r2, #1
 800b30c:	2300      	movs	r3, #0
 800b30e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b312:	f7ff fe9b 	bl	800b04c <__multadd>
 800b316:	4607      	mov	r7, r0
 800b318:	10ad      	asrs	r5, r5, #2
 800b31a:	d03d      	beq.n	800b398 <__pow5mult+0xa0>
 800b31c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b31e:	b97c      	cbnz	r4, 800b340 <__pow5mult+0x48>
 800b320:	2010      	movs	r0, #16
 800b322:	f7fe f9f3 	bl	800970c <malloc>
 800b326:	4602      	mov	r2, r0
 800b328:	6270      	str	r0, [r6, #36]	; 0x24
 800b32a:	b928      	cbnz	r0, 800b338 <__pow5mult+0x40>
 800b32c:	4b1d      	ldr	r3, [pc, #116]	; (800b3a4 <__pow5mult+0xac>)
 800b32e:	481e      	ldr	r0, [pc, #120]	; (800b3a8 <__pow5mult+0xb0>)
 800b330:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b334:	f000 fb1e 	bl	800b974 <__assert_func>
 800b338:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b33c:	6004      	str	r4, [r0, #0]
 800b33e:	60c4      	str	r4, [r0, #12]
 800b340:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b344:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b348:	b94c      	cbnz	r4, 800b35e <__pow5mult+0x66>
 800b34a:	f240 2171 	movw	r1, #625	; 0x271
 800b34e:	4630      	mov	r0, r6
 800b350:	f7ff ff12 	bl	800b178 <__i2b>
 800b354:	2300      	movs	r3, #0
 800b356:	f8c8 0008 	str.w	r0, [r8, #8]
 800b35a:	4604      	mov	r4, r0
 800b35c:	6003      	str	r3, [r0, #0]
 800b35e:	f04f 0900 	mov.w	r9, #0
 800b362:	07eb      	lsls	r3, r5, #31
 800b364:	d50a      	bpl.n	800b37c <__pow5mult+0x84>
 800b366:	4639      	mov	r1, r7
 800b368:	4622      	mov	r2, r4
 800b36a:	4630      	mov	r0, r6
 800b36c:	f7ff ff1a 	bl	800b1a4 <__multiply>
 800b370:	4639      	mov	r1, r7
 800b372:	4680      	mov	r8, r0
 800b374:	4630      	mov	r0, r6
 800b376:	f7ff fe47 	bl	800b008 <_Bfree>
 800b37a:	4647      	mov	r7, r8
 800b37c:	106d      	asrs	r5, r5, #1
 800b37e:	d00b      	beq.n	800b398 <__pow5mult+0xa0>
 800b380:	6820      	ldr	r0, [r4, #0]
 800b382:	b938      	cbnz	r0, 800b394 <__pow5mult+0x9c>
 800b384:	4622      	mov	r2, r4
 800b386:	4621      	mov	r1, r4
 800b388:	4630      	mov	r0, r6
 800b38a:	f7ff ff0b 	bl	800b1a4 <__multiply>
 800b38e:	6020      	str	r0, [r4, #0]
 800b390:	f8c0 9000 	str.w	r9, [r0]
 800b394:	4604      	mov	r4, r0
 800b396:	e7e4      	b.n	800b362 <__pow5mult+0x6a>
 800b398:	4638      	mov	r0, r7
 800b39a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b39e:	bf00      	nop
 800b3a0:	0800cb90 	.word	0x0800cb90
 800b3a4:	0800c9bd 	.word	0x0800c9bd
 800b3a8:	0800ca40 	.word	0x0800ca40

0800b3ac <__lshift>:
 800b3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3b0:	460c      	mov	r4, r1
 800b3b2:	6849      	ldr	r1, [r1, #4]
 800b3b4:	6923      	ldr	r3, [r4, #16]
 800b3b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b3ba:	68a3      	ldr	r3, [r4, #8]
 800b3bc:	4607      	mov	r7, r0
 800b3be:	4691      	mov	r9, r2
 800b3c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b3c4:	f108 0601 	add.w	r6, r8, #1
 800b3c8:	42b3      	cmp	r3, r6
 800b3ca:	db0b      	blt.n	800b3e4 <__lshift+0x38>
 800b3cc:	4638      	mov	r0, r7
 800b3ce:	f7ff fddb 	bl	800af88 <_Balloc>
 800b3d2:	4605      	mov	r5, r0
 800b3d4:	b948      	cbnz	r0, 800b3ea <__lshift+0x3e>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	4b2a      	ldr	r3, [pc, #168]	; (800b484 <__lshift+0xd8>)
 800b3da:	482b      	ldr	r0, [pc, #172]	; (800b488 <__lshift+0xdc>)
 800b3dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b3e0:	f000 fac8 	bl	800b974 <__assert_func>
 800b3e4:	3101      	adds	r1, #1
 800b3e6:	005b      	lsls	r3, r3, #1
 800b3e8:	e7ee      	b.n	800b3c8 <__lshift+0x1c>
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	f100 0114 	add.w	r1, r0, #20
 800b3f0:	f100 0210 	add.w	r2, r0, #16
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	4553      	cmp	r3, sl
 800b3f8:	db37      	blt.n	800b46a <__lshift+0xbe>
 800b3fa:	6920      	ldr	r0, [r4, #16]
 800b3fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b400:	f104 0314 	add.w	r3, r4, #20
 800b404:	f019 091f 	ands.w	r9, r9, #31
 800b408:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b40c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b410:	d02f      	beq.n	800b472 <__lshift+0xc6>
 800b412:	f1c9 0e20 	rsb	lr, r9, #32
 800b416:	468a      	mov	sl, r1
 800b418:	f04f 0c00 	mov.w	ip, #0
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	fa02 f209 	lsl.w	r2, r2, r9
 800b422:	ea42 020c 	orr.w	r2, r2, ip
 800b426:	f84a 2b04 	str.w	r2, [sl], #4
 800b42a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b42e:	4298      	cmp	r0, r3
 800b430:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b434:	d8f2      	bhi.n	800b41c <__lshift+0x70>
 800b436:	1b03      	subs	r3, r0, r4
 800b438:	3b15      	subs	r3, #21
 800b43a:	f023 0303 	bic.w	r3, r3, #3
 800b43e:	3304      	adds	r3, #4
 800b440:	f104 0215 	add.w	r2, r4, #21
 800b444:	4290      	cmp	r0, r2
 800b446:	bf38      	it	cc
 800b448:	2304      	movcc	r3, #4
 800b44a:	f841 c003 	str.w	ip, [r1, r3]
 800b44e:	f1bc 0f00 	cmp.w	ip, #0
 800b452:	d001      	beq.n	800b458 <__lshift+0xac>
 800b454:	f108 0602 	add.w	r6, r8, #2
 800b458:	3e01      	subs	r6, #1
 800b45a:	4638      	mov	r0, r7
 800b45c:	612e      	str	r6, [r5, #16]
 800b45e:	4621      	mov	r1, r4
 800b460:	f7ff fdd2 	bl	800b008 <_Bfree>
 800b464:	4628      	mov	r0, r5
 800b466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b46a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b46e:	3301      	adds	r3, #1
 800b470:	e7c1      	b.n	800b3f6 <__lshift+0x4a>
 800b472:	3904      	subs	r1, #4
 800b474:	f853 2b04 	ldr.w	r2, [r3], #4
 800b478:	f841 2f04 	str.w	r2, [r1, #4]!
 800b47c:	4298      	cmp	r0, r3
 800b47e:	d8f9      	bhi.n	800b474 <__lshift+0xc8>
 800b480:	e7ea      	b.n	800b458 <__lshift+0xac>
 800b482:	bf00      	nop
 800b484:	0800ca2f 	.word	0x0800ca2f
 800b488:	0800ca40 	.word	0x0800ca40

0800b48c <__mcmp>:
 800b48c:	b530      	push	{r4, r5, lr}
 800b48e:	6902      	ldr	r2, [r0, #16]
 800b490:	690c      	ldr	r4, [r1, #16]
 800b492:	1b12      	subs	r2, r2, r4
 800b494:	d10e      	bne.n	800b4b4 <__mcmp+0x28>
 800b496:	f100 0314 	add.w	r3, r0, #20
 800b49a:	3114      	adds	r1, #20
 800b49c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b4a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b4a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b4a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b4ac:	42a5      	cmp	r5, r4
 800b4ae:	d003      	beq.n	800b4b8 <__mcmp+0x2c>
 800b4b0:	d305      	bcc.n	800b4be <__mcmp+0x32>
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	4610      	mov	r0, r2
 800b4b6:	bd30      	pop	{r4, r5, pc}
 800b4b8:	4283      	cmp	r3, r0
 800b4ba:	d3f3      	bcc.n	800b4a4 <__mcmp+0x18>
 800b4bc:	e7fa      	b.n	800b4b4 <__mcmp+0x28>
 800b4be:	f04f 32ff 	mov.w	r2, #4294967295
 800b4c2:	e7f7      	b.n	800b4b4 <__mcmp+0x28>

0800b4c4 <__mdiff>:
 800b4c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c8:	460c      	mov	r4, r1
 800b4ca:	4606      	mov	r6, r0
 800b4cc:	4611      	mov	r1, r2
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	4690      	mov	r8, r2
 800b4d2:	f7ff ffdb 	bl	800b48c <__mcmp>
 800b4d6:	1e05      	subs	r5, r0, #0
 800b4d8:	d110      	bne.n	800b4fc <__mdiff+0x38>
 800b4da:	4629      	mov	r1, r5
 800b4dc:	4630      	mov	r0, r6
 800b4de:	f7ff fd53 	bl	800af88 <_Balloc>
 800b4e2:	b930      	cbnz	r0, 800b4f2 <__mdiff+0x2e>
 800b4e4:	4b3a      	ldr	r3, [pc, #232]	; (800b5d0 <__mdiff+0x10c>)
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	f240 2132 	movw	r1, #562	; 0x232
 800b4ec:	4839      	ldr	r0, [pc, #228]	; (800b5d4 <__mdiff+0x110>)
 800b4ee:	f000 fa41 	bl	800b974 <__assert_func>
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b4f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4fc:	bfa4      	itt	ge
 800b4fe:	4643      	movge	r3, r8
 800b500:	46a0      	movge	r8, r4
 800b502:	4630      	mov	r0, r6
 800b504:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b508:	bfa6      	itte	ge
 800b50a:	461c      	movge	r4, r3
 800b50c:	2500      	movge	r5, #0
 800b50e:	2501      	movlt	r5, #1
 800b510:	f7ff fd3a 	bl	800af88 <_Balloc>
 800b514:	b920      	cbnz	r0, 800b520 <__mdiff+0x5c>
 800b516:	4b2e      	ldr	r3, [pc, #184]	; (800b5d0 <__mdiff+0x10c>)
 800b518:	4602      	mov	r2, r0
 800b51a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b51e:	e7e5      	b.n	800b4ec <__mdiff+0x28>
 800b520:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b524:	6926      	ldr	r6, [r4, #16]
 800b526:	60c5      	str	r5, [r0, #12]
 800b528:	f104 0914 	add.w	r9, r4, #20
 800b52c:	f108 0514 	add.w	r5, r8, #20
 800b530:	f100 0e14 	add.w	lr, r0, #20
 800b534:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b538:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b53c:	f108 0210 	add.w	r2, r8, #16
 800b540:	46f2      	mov	sl, lr
 800b542:	2100      	movs	r1, #0
 800b544:	f859 3b04 	ldr.w	r3, [r9], #4
 800b548:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b54c:	fa1f f883 	uxth.w	r8, r3
 800b550:	fa11 f18b 	uxtah	r1, r1, fp
 800b554:	0c1b      	lsrs	r3, r3, #16
 800b556:	eba1 0808 	sub.w	r8, r1, r8
 800b55a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b55e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b562:	fa1f f888 	uxth.w	r8, r8
 800b566:	1419      	asrs	r1, r3, #16
 800b568:	454e      	cmp	r6, r9
 800b56a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b56e:	f84a 3b04 	str.w	r3, [sl], #4
 800b572:	d8e7      	bhi.n	800b544 <__mdiff+0x80>
 800b574:	1b33      	subs	r3, r6, r4
 800b576:	3b15      	subs	r3, #21
 800b578:	f023 0303 	bic.w	r3, r3, #3
 800b57c:	3304      	adds	r3, #4
 800b57e:	3415      	adds	r4, #21
 800b580:	42a6      	cmp	r6, r4
 800b582:	bf38      	it	cc
 800b584:	2304      	movcc	r3, #4
 800b586:	441d      	add	r5, r3
 800b588:	4473      	add	r3, lr
 800b58a:	469e      	mov	lr, r3
 800b58c:	462e      	mov	r6, r5
 800b58e:	4566      	cmp	r6, ip
 800b590:	d30e      	bcc.n	800b5b0 <__mdiff+0xec>
 800b592:	f10c 0203 	add.w	r2, ip, #3
 800b596:	1b52      	subs	r2, r2, r5
 800b598:	f022 0203 	bic.w	r2, r2, #3
 800b59c:	3d03      	subs	r5, #3
 800b59e:	45ac      	cmp	ip, r5
 800b5a0:	bf38      	it	cc
 800b5a2:	2200      	movcc	r2, #0
 800b5a4:	441a      	add	r2, r3
 800b5a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b5aa:	b17b      	cbz	r3, 800b5cc <__mdiff+0x108>
 800b5ac:	6107      	str	r7, [r0, #16]
 800b5ae:	e7a3      	b.n	800b4f8 <__mdiff+0x34>
 800b5b0:	f856 8b04 	ldr.w	r8, [r6], #4
 800b5b4:	fa11 f288 	uxtah	r2, r1, r8
 800b5b8:	1414      	asrs	r4, r2, #16
 800b5ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b5be:	b292      	uxth	r2, r2
 800b5c0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b5c4:	f84e 2b04 	str.w	r2, [lr], #4
 800b5c8:	1421      	asrs	r1, r4, #16
 800b5ca:	e7e0      	b.n	800b58e <__mdiff+0xca>
 800b5cc:	3f01      	subs	r7, #1
 800b5ce:	e7ea      	b.n	800b5a6 <__mdiff+0xe2>
 800b5d0:	0800ca2f 	.word	0x0800ca2f
 800b5d4:	0800ca40 	.word	0x0800ca40

0800b5d8 <__d2b>:
 800b5d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5dc:	4689      	mov	r9, r1
 800b5de:	2101      	movs	r1, #1
 800b5e0:	ec57 6b10 	vmov	r6, r7, d0
 800b5e4:	4690      	mov	r8, r2
 800b5e6:	f7ff fccf 	bl	800af88 <_Balloc>
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	b930      	cbnz	r0, 800b5fc <__d2b+0x24>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	4b25      	ldr	r3, [pc, #148]	; (800b688 <__d2b+0xb0>)
 800b5f2:	4826      	ldr	r0, [pc, #152]	; (800b68c <__d2b+0xb4>)
 800b5f4:	f240 310a 	movw	r1, #778	; 0x30a
 800b5f8:	f000 f9bc 	bl	800b974 <__assert_func>
 800b5fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b600:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b604:	bb35      	cbnz	r5, 800b654 <__d2b+0x7c>
 800b606:	2e00      	cmp	r6, #0
 800b608:	9301      	str	r3, [sp, #4]
 800b60a:	d028      	beq.n	800b65e <__d2b+0x86>
 800b60c:	4668      	mov	r0, sp
 800b60e:	9600      	str	r6, [sp, #0]
 800b610:	f7ff fd82 	bl	800b118 <__lo0bits>
 800b614:	9900      	ldr	r1, [sp, #0]
 800b616:	b300      	cbz	r0, 800b65a <__d2b+0x82>
 800b618:	9a01      	ldr	r2, [sp, #4]
 800b61a:	f1c0 0320 	rsb	r3, r0, #32
 800b61e:	fa02 f303 	lsl.w	r3, r2, r3
 800b622:	430b      	orrs	r3, r1
 800b624:	40c2      	lsrs	r2, r0
 800b626:	6163      	str	r3, [r4, #20]
 800b628:	9201      	str	r2, [sp, #4]
 800b62a:	9b01      	ldr	r3, [sp, #4]
 800b62c:	61a3      	str	r3, [r4, #24]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	bf14      	ite	ne
 800b632:	2202      	movne	r2, #2
 800b634:	2201      	moveq	r2, #1
 800b636:	6122      	str	r2, [r4, #16]
 800b638:	b1d5      	cbz	r5, 800b670 <__d2b+0x98>
 800b63a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b63e:	4405      	add	r5, r0
 800b640:	f8c9 5000 	str.w	r5, [r9]
 800b644:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b648:	f8c8 0000 	str.w	r0, [r8]
 800b64c:	4620      	mov	r0, r4
 800b64e:	b003      	add	sp, #12
 800b650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b658:	e7d5      	b.n	800b606 <__d2b+0x2e>
 800b65a:	6161      	str	r1, [r4, #20]
 800b65c:	e7e5      	b.n	800b62a <__d2b+0x52>
 800b65e:	a801      	add	r0, sp, #4
 800b660:	f7ff fd5a 	bl	800b118 <__lo0bits>
 800b664:	9b01      	ldr	r3, [sp, #4]
 800b666:	6163      	str	r3, [r4, #20]
 800b668:	2201      	movs	r2, #1
 800b66a:	6122      	str	r2, [r4, #16]
 800b66c:	3020      	adds	r0, #32
 800b66e:	e7e3      	b.n	800b638 <__d2b+0x60>
 800b670:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b674:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b678:	f8c9 0000 	str.w	r0, [r9]
 800b67c:	6918      	ldr	r0, [r3, #16]
 800b67e:	f7ff fd2b 	bl	800b0d8 <__hi0bits>
 800b682:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b686:	e7df      	b.n	800b648 <__d2b+0x70>
 800b688:	0800ca2f 	.word	0x0800ca2f
 800b68c:	0800ca40 	.word	0x0800ca40

0800b690 <_calloc_r>:
 800b690:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b692:	fba1 2402 	umull	r2, r4, r1, r2
 800b696:	b94c      	cbnz	r4, 800b6ac <_calloc_r+0x1c>
 800b698:	4611      	mov	r1, r2
 800b69a:	9201      	str	r2, [sp, #4]
 800b69c:	f7fe f8ba 	bl	8009814 <_malloc_r>
 800b6a0:	9a01      	ldr	r2, [sp, #4]
 800b6a2:	4605      	mov	r5, r0
 800b6a4:	b930      	cbnz	r0, 800b6b4 <_calloc_r+0x24>
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	b003      	add	sp, #12
 800b6aa:	bd30      	pop	{r4, r5, pc}
 800b6ac:	220c      	movs	r2, #12
 800b6ae:	6002      	str	r2, [r0, #0]
 800b6b0:	2500      	movs	r5, #0
 800b6b2:	e7f8      	b.n	800b6a6 <_calloc_r+0x16>
 800b6b4:	4621      	mov	r1, r4
 800b6b6:	f7fe f839 	bl	800972c <memset>
 800b6ba:	e7f4      	b.n	800b6a6 <_calloc_r+0x16>

0800b6bc <__ssputs_r>:
 800b6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6c0:	688e      	ldr	r6, [r1, #8]
 800b6c2:	429e      	cmp	r6, r3
 800b6c4:	4682      	mov	sl, r0
 800b6c6:	460c      	mov	r4, r1
 800b6c8:	4690      	mov	r8, r2
 800b6ca:	461f      	mov	r7, r3
 800b6cc:	d838      	bhi.n	800b740 <__ssputs_r+0x84>
 800b6ce:	898a      	ldrh	r2, [r1, #12]
 800b6d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b6d4:	d032      	beq.n	800b73c <__ssputs_r+0x80>
 800b6d6:	6825      	ldr	r5, [r4, #0]
 800b6d8:	6909      	ldr	r1, [r1, #16]
 800b6da:	eba5 0901 	sub.w	r9, r5, r1
 800b6de:	6965      	ldr	r5, [r4, #20]
 800b6e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	444b      	add	r3, r9
 800b6ec:	106d      	asrs	r5, r5, #1
 800b6ee:	429d      	cmp	r5, r3
 800b6f0:	bf38      	it	cc
 800b6f2:	461d      	movcc	r5, r3
 800b6f4:	0553      	lsls	r3, r2, #21
 800b6f6:	d531      	bpl.n	800b75c <__ssputs_r+0xa0>
 800b6f8:	4629      	mov	r1, r5
 800b6fa:	f7fe f88b 	bl	8009814 <_malloc_r>
 800b6fe:	4606      	mov	r6, r0
 800b700:	b950      	cbnz	r0, 800b718 <__ssputs_r+0x5c>
 800b702:	230c      	movs	r3, #12
 800b704:	f8ca 3000 	str.w	r3, [sl]
 800b708:	89a3      	ldrh	r3, [r4, #12]
 800b70a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b70e:	81a3      	strh	r3, [r4, #12]
 800b710:	f04f 30ff 	mov.w	r0, #4294967295
 800b714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b718:	6921      	ldr	r1, [r4, #16]
 800b71a:	464a      	mov	r2, r9
 800b71c:	f7ff fc1a 	bl	800af54 <memcpy>
 800b720:	89a3      	ldrh	r3, [r4, #12]
 800b722:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b72a:	81a3      	strh	r3, [r4, #12]
 800b72c:	6126      	str	r6, [r4, #16]
 800b72e:	6165      	str	r5, [r4, #20]
 800b730:	444e      	add	r6, r9
 800b732:	eba5 0509 	sub.w	r5, r5, r9
 800b736:	6026      	str	r6, [r4, #0]
 800b738:	60a5      	str	r5, [r4, #8]
 800b73a:	463e      	mov	r6, r7
 800b73c:	42be      	cmp	r6, r7
 800b73e:	d900      	bls.n	800b742 <__ssputs_r+0x86>
 800b740:	463e      	mov	r6, r7
 800b742:	6820      	ldr	r0, [r4, #0]
 800b744:	4632      	mov	r2, r6
 800b746:	4641      	mov	r1, r8
 800b748:	f000 f959 	bl	800b9fe <memmove>
 800b74c:	68a3      	ldr	r3, [r4, #8]
 800b74e:	1b9b      	subs	r3, r3, r6
 800b750:	60a3      	str	r3, [r4, #8]
 800b752:	6823      	ldr	r3, [r4, #0]
 800b754:	4433      	add	r3, r6
 800b756:	6023      	str	r3, [r4, #0]
 800b758:	2000      	movs	r0, #0
 800b75a:	e7db      	b.n	800b714 <__ssputs_r+0x58>
 800b75c:	462a      	mov	r2, r5
 800b75e:	f000 f968 	bl	800ba32 <_realloc_r>
 800b762:	4606      	mov	r6, r0
 800b764:	2800      	cmp	r0, #0
 800b766:	d1e1      	bne.n	800b72c <__ssputs_r+0x70>
 800b768:	6921      	ldr	r1, [r4, #16]
 800b76a:	4650      	mov	r0, sl
 800b76c:	f7fd ffe6 	bl	800973c <_free_r>
 800b770:	e7c7      	b.n	800b702 <__ssputs_r+0x46>
	...

0800b774 <_svfiprintf_r>:
 800b774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b778:	4698      	mov	r8, r3
 800b77a:	898b      	ldrh	r3, [r1, #12]
 800b77c:	061b      	lsls	r3, r3, #24
 800b77e:	b09d      	sub	sp, #116	; 0x74
 800b780:	4607      	mov	r7, r0
 800b782:	460d      	mov	r5, r1
 800b784:	4614      	mov	r4, r2
 800b786:	d50e      	bpl.n	800b7a6 <_svfiprintf_r+0x32>
 800b788:	690b      	ldr	r3, [r1, #16]
 800b78a:	b963      	cbnz	r3, 800b7a6 <_svfiprintf_r+0x32>
 800b78c:	2140      	movs	r1, #64	; 0x40
 800b78e:	f7fe f841 	bl	8009814 <_malloc_r>
 800b792:	6028      	str	r0, [r5, #0]
 800b794:	6128      	str	r0, [r5, #16]
 800b796:	b920      	cbnz	r0, 800b7a2 <_svfiprintf_r+0x2e>
 800b798:	230c      	movs	r3, #12
 800b79a:	603b      	str	r3, [r7, #0]
 800b79c:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a0:	e0d1      	b.n	800b946 <_svfiprintf_r+0x1d2>
 800b7a2:	2340      	movs	r3, #64	; 0x40
 800b7a4:	616b      	str	r3, [r5, #20]
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	9309      	str	r3, [sp, #36]	; 0x24
 800b7aa:	2320      	movs	r3, #32
 800b7ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7b4:	2330      	movs	r3, #48	; 0x30
 800b7b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b960 <_svfiprintf_r+0x1ec>
 800b7ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7be:	f04f 0901 	mov.w	r9, #1
 800b7c2:	4623      	mov	r3, r4
 800b7c4:	469a      	mov	sl, r3
 800b7c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7ca:	b10a      	cbz	r2, 800b7d0 <_svfiprintf_r+0x5c>
 800b7cc:	2a25      	cmp	r2, #37	; 0x25
 800b7ce:	d1f9      	bne.n	800b7c4 <_svfiprintf_r+0x50>
 800b7d0:	ebba 0b04 	subs.w	fp, sl, r4
 800b7d4:	d00b      	beq.n	800b7ee <_svfiprintf_r+0x7a>
 800b7d6:	465b      	mov	r3, fp
 800b7d8:	4622      	mov	r2, r4
 800b7da:	4629      	mov	r1, r5
 800b7dc:	4638      	mov	r0, r7
 800b7de:	f7ff ff6d 	bl	800b6bc <__ssputs_r>
 800b7e2:	3001      	adds	r0, #1
 800b7e4:	f000 80aa 	beq.w	800b93c <_svfiprintf_r+0x1c8>
 800b7e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7ea:	445a      	add	r2, fp
 800b7ec:	9209      	str	r2, [sp, #36]	; 0x24
 800b7ee:	f89a 3000 	ldrb.w	r3, [sl]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	f000 80a2 	beq.w	800b93c <_svfiprintf_r+0x1c8>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b7fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b802:	f10a 0a01 	add.w	sl, sl, #1
 800b806:	9304      	str	r3, [sp, #16]
 800b808:	9307      	str	r3, [sp, #28]
 800b80a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b80e:	931a      	str	r3, [sp, #104]	; 0x68
 800b810:	4654      	mov	r4, sl
 800b812:	2205      	movs	r2, #5
 800b814:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b818:	4851      	ldr	r0, [pc, #324]	; (800b960 <_svfiprintf_r+0x1ec>)
 800b81a:	f7f4 fd01 	bl	8000220 <memchr>
 800b81e:	9a04      	ldr	r2, [sp, #16]
 800b820:	b9d8      	cbnz	r0, 800b85a <_svfiprintf_r+0xe6>
 800b822:	06d0      	lsls	r0, r2, #27
 800b824:	bf44      	itt	mi
 800b826:	2320      	movmi	r3, #32
 800b828:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b82c:	0711      	lsls	r1, r2, #28
 800b82e:	bf44      	itt	mi
 800b830:	232b      	movmi	r3, #43	; 0x2b
 800b832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b836:	f89a 3000 	ldrb.w	r3, [sl]
 800b83a:	2b2a      	cmp	r3, #42	; 0x2a
 800b83c:	d015      	beq.n	800b86a <_svfiprintf_r+0xf6>
 800b83e:	9a07      	ldr	r2, [sp, #28]
 800b840:	4654      	mov	r4, sl
 800b842:	2000      	movs	r0, #0
 800b844:	f04f 0c0a 	mov.w	ip, #10
 800b848:	4621      	mov	r1, r4
 800b84a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b84e:	3b30      	subs	r3, #48	; 0x30
 800b850:	2b09      	cmp	r3, #9
 800b852:	d94e      	bls.n	800b8f2 <_svfiprintf_r+0x17e>
 800b854:	b1b0      	cbz	r0, 800b884 <_svfiprintf_r+0x110>
 800b856:	9207      	str	r2, [sp, #28]
 800b858:	e014      	b.n	800b884 <_svfiprintf_r+0x110>
 800b85a:	eba0 0308 	sub.w	r3, r0, r8
 800b85e:	fa09 f303 	lsl.w	r3, r9, r3
 800b862:	4313      	orrs	r3, r2
 800b864:	9304      	str	r3, [sp, #16]
 800b866:	46a2      	mov	sl, r4
 800b868:	e7d2      	b.n	800b810 <_svfiprintf_r+0x9c>
 800b86a:	9b03      	ldr	r3, [sp, #12]
 800b86c:	1d19      	adds	r1, r3, #4
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	9103      	str	r1, [sp, #12]
 800b872:	2b00      	cmp	r3, #0
 800b874:	bfbb      	ittet	lt
 800b876:	425b      	neglt	r3, r3
 800b878:	f042 0202 	orrlt.w	r2, r2, #2
 800b87c:	9307      	strge	r3, [sp, #28]
 800b87e:	9307      	strlt	r3, [sp, #28]
 800b880:	bfb8      	it	lt
 800b882:	9204      	strlt	r2, [sp, #16]
 800b884:	7823      	ldrb	r3, [r4, #0]
 800b886:	2b2e      	cmp	r3, #46	; 0x2e
 800b888:	d10c      	bne.n	800b8a4 <_svfiprintf_r+0x130>
 800b88a:	7863      	ldrb	r3, [r4, #1]
 800b88c:	2b2a      	cmp	r3, #42	; 0x2a
 800b88e:	d135      	bne.n	800b8fc <_svfiprintf_r+0x188>
 800b890:	9b03      	ldr	r3, [sp, #12]
 800b892:	1d1a      	adds	r2, r3, #4
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	9203      	str	r2, [sp, #12]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	bfb8      	it	lt
 800b89c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b8a0:	3402      	adds	r4, #2
 800b8a2:	9305      	str	r3, [sp, #20]
 800b8a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b970 <_svfiprintf_r+0x1fc>
 800b8a8:	7821      	ldrb	r1, [r4, #0]
 800b8aa:	2203      	movs	r2, #3
 800b8ac:	4650      	mov	r0, sl
 800b8ae:	f7f4 fcb7 	bl	8000220 <memchr>
 800b8b2:	b140      	cbz	r0, 800b8c6 <_svfiprintf_r+0x152>
 800b8b4:	2340      	movs	r3, #64	; 0x40
 800b8b6:	eba0 000a 	sub.w	r0, r0, sl
 800b8ba:	fa03 f000 	lsl.w	r0, r3, r0
 800b8be:	9b04      	ldr	r3, [sp, #16]
 800b8c0:	4303      	orrs	r3, r0
 800b8c2:	3401      	adds	r4, #1
 800b8c4:	9304      	str	r3, [sp, #16]
 800b8c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8ca:	4826      	ldr	r0, [pc, #152]	; (800b964 <_svfiprintf_r+0x1f0>)
 800b8cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8d0:	2206      	movs	r2, #6
 800b8d2:	f7f4 fca5 	bl	8000220 <memchr>
 800b8d6:	2800      	cmp	r0, #0
 800b8d8:	d038      	beq.n	800b94c <_svfiprintf_r+0x1d8>
 800b8da:	4b23      	ldr	r3, [pc, #140]	; (800b968 <_svfiprintf_r+0x1f4>)
 800b8dc:	bb1b      	cbnz	r3, 800b926 <_svfiprintf_r+0x1b2>
 800b8de:	9b03      	ldr	r3, [sp, #12]
 800b8e0:	3307      	adds	r3, #7
 800b8e2:	f023 0307 	bic.w	r3, r3, #7
 800b8e6:	3308      	adds	r3, #8
 800b8e8:	9303      	str	r3, [sp, #12]
 800b8ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8ec:	4433      	add	r3, r6
 800b8ee:	9309      	str	r3, [sp, #36]	; 0x24
 800b8f0:	e767      	b.n	800b7c2 <_svfiprintf_r+0x4e>
 800b8f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8f6:	460c      	mov	r4, r1
 800b8f8:	2001      	movs	r0, #1
 800b8fa:	e7a5      	b.n	800b848 <_svfiprintf_r+0xd4>
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	3401      	adds	r4, #1
 800b900:	9305      	str	r3, [sp, #20]
 800b902:	4619      	mov	r1, r3
 800b904:	f04f 0c0a 	mov.w	ip, #10
 800b908:	4620      	mov	r0, r4
 800b90a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b90e:	3a30      	subs	r2, #48	; 0x30
 800b910:	2a09      	cmp	r2, #9
 800b912:	d903      	bls.n	800b91c <_svfiprintf_r+0x1a8>
 800b914:	2b00      	cmp	r3, #0
 800b916:	d0c5      	beq.n	800b8a4 <_svfiprintf_r+0x130>
 800b918:	9105      	str	r1, [sp, #20]
 800b91a:	e7c3      	b.n	800b8a4 <_svfiprintf_r+0x130>
 800b91c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b920:	4604      	mov	r4, r0
 800b922:	2301      	movs	r3, #1
 800b924:	e7f0      	b.n	800b908 <_svfiprintf_r+0x194>
 800b926:	ab03      	add	r3, sp, #12
 800b928:	9300      	str	r3, [sp, #0]
 800b92a:	462a      	mov	r2, r5
 800b92c:	4b0f      	ldr	r3, [pc, #60]	; (800b96c <_svfiprintf_r+0x1f8>)
 800b92e:	a904      	add	r1, sp, #16
 800b930:	4638      	mov	r0, r7
 800b932:	f7fe f883 	bl	8009a3c <_printf_float>
 800b936:	1c42      	adds	r2, r0, #1
 800b938:	4606      	mov	r6, r0
 800b93a:	d1d6      	bne.n	800b8ea <_svfiprintf_r+0x176>
 800b93c:	89ab      	ldrh	r3, [r5, #12]
 800b93e:	065b      	lsls	r3, r3, #25
 800b940:	f53f af2c 	bmi.w	800b79c <_svfiprintf_r+0x28>
 800b944:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b946:	b01d      	add	sp, #116	; 0x74
 800b948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b94c:	ab03      	add	r3, sp, #12
 800b94e:	9300      	str	r3, [sp, #0]
 800b950:	462a      	mov	r2, r5
 800b952:	4b06      	ldr	r3, [pc, #24]	; (800b96c <_svfiprintf_r+0x1f8>)
 800b954:	a904      	add	r1, sp, #16
 800b956:	4638      	mov	r0, r7
 800b958:	f7fe fb14 	bl	8009f84 <_printf_i>
 800b95c:	e7eb      	b.n	800b936 <_svfiprintf_r+0x1c2>
 800b95e:	bf00      	nop
 800b960:	0800cb9c 	.word	0x0800cb9c
 800b964:	0800cba6 	.word	0x0800cba6
 800b968:	08009a3d 	.word	0x08009a3d
 800b96c:	0800b6bd 	.word	0x0800b6bd
 800b970:	0800cba2 	.word	0x0800cba2

0800b974 <__assert_func>:
 800b974:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b976:	4614      	mov	r4, r2
 800b978:	461a      	mov	r2, r3
 800b97a:	4b09      	ldr	r3, [pc, #36]	; (800b9a0 <__assert_func+0x2c>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4605      	mov	r5, r0
 800b980:	68d8      	ldr	r0, [r3, #12]
 800b982:	b14c      	cbz	r4, 800b998 <__assert_func+0x24>
 800b984:	4b07      	ldr	r3, [pc, #28]	; (800b9a4 <__assert_func+0x30>)
 800b986:	9100      	str	r1, [sp, #0]
 800b988:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b98c:	4906      	ldr	r1, [pc, #24]	; (800b9a8 <__assert_func+0x34>)
 800b98e:	462b      	mov	r3, r5
 800b990:	f000 f80e 	bl	800b9b0 <fiprintf>
 800b994:	f000 faa4 	bl	800bee0 <abort>
 800b998:	4b04      	ldr	r3, [pc, #16]	; (800b9ac <__assert_func+0x38>)
 800b99a:	461c      	mov	r4, r3
 800b99c:	e7f3      	b.n	800b986 <__assert_func+0x12>
 800b99e:	bf00      	nop
 800b9a0:	200023fc 	.word	0x200023fc
 800b9a4:	0800cbad 	.word	0x0800cbad
 800b9a8:	0800cbba 	.word	0x0800cbba
 800b9ac:	0800cbe8 	.word	0x0800cbe8

0800b9b0 <fiprintf>:
 800b9b0:	b40e      	push	{r1, r2, r3}
 800b9b2:	b503      	push	{r0, r1, lr}
 800b9b4:	4601      	mov	r1, r0
 800b9b6:	ab03      	add	r3, sp, #12
 800b9b8:	4805      	ldr	r0, [pc, #20]	; (800b9d0 <fiprintf+0x20>)
 800b9ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9be:	6800      	ldr	r0, [r0, #0]
 800b9c0:	9301      	str	r3, [sp, #4]
 800b9c2:	f000 f88f 	bl	800bae4 <_vfiprintf_r>
 800b9c6:	b002      	add	sp, #8
 800b9c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9cc:	b003      	add	sp, #12
 800b9ce:	4770      	bx	lr
 800b9d0:	200023fc 	.word	0x200023fc

0800b9d4 <__retarget_lock_init_recursive>:
 800b9d4:	4770      	bx	lr

0800b9d6 <__retarget_lock_acquire_recursive>:
 800b9d6:	4770      	bx	lr

0800b9d8 <__retarget_lock_release_recursive>:
 800b9d8:	4770      	bx	lr

0800b9da <__ascii_mbtowc>:
 800b9da:	b082      	sub	sp, #8
 800b9dc:	b901      	cbnz	r1, 800b9e0 <__ascii_mbtowc+0x6>
 800b9de:	a901      	add	r1, sp, #4
 800b9e0:	b142      	cbz	r2, 800b9f4 <__ascii_mbtowc+0x1a>
 800b9e2:	b14b      	cbz	r3, 800b9f8 <__ascii_mbtowc+0x1e>
 800b9e4:	7813      	ldrb	r3, [r2, #0]
 800b9e6:	600b      	str	r3, [r1, #0]
 800b9e8:	7812      	ldrb	r2, [r2, #0]
 800b9ea:	1e10      	subs	r0, r2, #0
 800b9ec:	bf18      	it	ne
 800b9ee:	2001      	movne	r0, #1
 800b9f0:	b002      	add	sp, #8
 800b9f2:	4770      	bx	lr
 800b9f4:	4610      	mov	r0, r2
 800b9f6:	e7fb      	b.n	800b9f0 <__ascii_mbtowc+0x16>
 800b9f8:	f06f 0001 	mvn.w	r0, #1
 800b9fc:	e7f8      	b.n	800b9f0 <__ascii_mbtowc+0x16>

0800b9fe <memmove>:
 800b9fe:	4288      	cmp	r0, r1
 800ba00:	b510      	push	{r4, lr}
 800ba02:	eb01 0402 	add.w	r4, r1, r2
 800ba06:	d902      	bls.n	800ba0e <memmove+0x10>
 800ba08:	4284      	cmp	r4, r0
 800ba0a:	4623      	mov	r3, r4
 800ba0c:	d807      	bhi.n	800ba1e <memmove+0x20>
 800ba0e:	1e43      	subs	r3, r0, #1
 800ba10:	42a1      	cmp	r1, r4
 800ba12:	d008      	beq.n	800ba26 <memmove+0x28>
 800ba14:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba18:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba1c:	e7f8      	b.n	800ba10 <memmove+0x12>
 800ba1e:	4402      	add	r2, r0
 800ba20:	4601      	mov	r1, r0
 800ba22:	428a      	cmp	r2, r1
 800ba24:	d100      	bne.n	800ba28 <memmove+0x2a>
 800ba26:	bd10      	pop	{r4, pc}
 800ba28:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba2c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba30:	e7f7      	b.n	800ba22 <memmove+0x24>

0800ba32 <_realloc_r>:
 800ba32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba36:	4680      	mov	r8, r0
 800ba38:	4614      	mov	r4, r2
 800ba3a:	460e      	mov	r6, r1
 800ba3c:	b921      	cbnz	r1, 800ba48 <_realloc_r+0x16>
 800ba3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba42:	4611      	mov	r1, r2
 800ba44:	f7fd bee6 	b.w	8009814 <_malloc_r>
 800ba48:	b92a      	cbnz	r2, 800ba56 <_realloc_r+0x24>
 800ba4a:	f7fd fe77 	bl	800973c <_free_r>
 800ba4e:	4625      	mov	r5, r4
 800ba50:	4628      	mov	r0, r5
 800ba52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba56:	f000 fc67 	bl	800c328 <_malloc_usable_size_r>
 800ba5a:	4284      	cmp	r4, r0
 800ba5c:	4607      	mov	r7, r0
 800ba5e:	d802      	bhi.n	800ba66 <_realloc_r+0x34>
 800ba60:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba64:	d812      	bhi.n	800ba8c <_realloc_r+0x5a>
 800ba66:	4621      	mov	r1, r4
 800ba68:	4640      	mov	r0, r8
 800ba6a:	f7fd fed3 	bl	8009814 <_malloc_r>
 800ba6e:	4605      	mov	r5, r0
 800ba70:	2800      	cmp	r0, #0
 800ba72:	d0ed      	beq.n	800ba50 <_realloc_r+0x1e>
 800ba74:	42bc      	cmp	r4, r7
 800ba76:	4622      	mov	r2, r4
 800ba78:	4631      	mov	r1, r6
 800ba7a:	bf28      	it	cs
 800ba7c:	463a      	movcs	r2, r7
 800ba7e:	f7ff fa69 	bl	800af54 <memcpy>
 800ba82:	4631      	mov	r1, r6
 800ba84:	4640      	mov	r0, r8
 800ba86:	f7fd fe59 	bl	800973c <_free_r>
 800ba8a:	e7e1      	b.n	800ba50 <_realloc_r+0x1e>
 800ba8c:	4635      	mov	r5, r6
 800ba8e:	e7df      	b.n	800ba50 <_realloc_r+0x1e>

0800ba90 <__sfputc_r>:
 800ba90:	6893      	ldr	r3, [r2, #8]
 800ba92:	3b01      	subs	r3, #1
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	b410      	push	{r4}
 800ba98:	6093      	str	r3, [r2, #8]
 800ba9a:	da08      	bge.n	800baae <__sfputc_r+0x1e>
 800ba9c:	6994      	ldr	r4, [r2, #24]
 800ba9e:	42a3      	cmp	r3, r4
 800baa0:	db01      	blt.n	800baa6 <__sfputc_r+0x16>
 800baa2:	290a      	cmp	r1, #10
 800baa4:	d103      	bne.n	800baae <__sfputc_r+0x1e>
 800baa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baaa:	f000 b94b 	b.w	800bd44 <__swbuf_r>
 800baae:	6813      	ldr	r3, [r2, #0]
 800bab0:	1c58      	adds	r0, r3, #1
 800bab2:	6010      	str	r0, [r2, #0]
 800bab4:	7019      	strb	r1, [r3, #0]
 800bab6:	4608      	mov	r0, r1
 800bab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800babc:	4770      	bx	lr

0800babe <__sfputs_r>:
 800babe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bac0:	4606      	mov	r6, r0
 800bac2:	460f      	mov	r7, r1
 800bac4:	4614      	mov	r4, r2
 800bac6:	18d5      	adds	r5, r2, r3
 800bac8:	42ac      	cmp	r4, r5
 800baca:	d101      	bne.n	800bad0 <__sfputs_r+0x12>
 800bacc:	2000      	movs	r0, #0
 800bace:	e007      	b.n	800bae0 <__sfputs_r+0x22>
 800bad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bad4:	463a      	mov	r2, r7
 800bad6:	4630      	mov	r0, r6
 800bad8:	f7ff ffda 	bl	800ba90 <__sfputc_r>
 800badc:	1c43      	adds	r3, r0, #1
 800bade:	d1f3      	bne.n	800bac8 <__sfputs_r+0xa>
 800bae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bae4 <_vfiprintf_r>:
 800bae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae8:	460d      	mov	r5, r1
 800baea:	b09d      	sub	sp, #116	; 0x74
 800baec:	4614      	mov	r4, r2
 800baee:	4698      	mov	r8, r3
 800baf0:	4606      	mov	r6, r0
 800baf2:	b118      	cbz	r0, 800bafc <_vfiprintf_r+0x18>
 800baf4:	6983      	ldr	r3, [r0, #24]
 800baf6:	b90b      	cbnz	r3, 800bafc <_vfiprintf_r+0x18>
 800baf8:	f000 fb14 	bl	800c124 <__sinit>
 800bafc:	4b89      	ldr	r3, [pc, #548]	; (800bd24 <_vfiprintf_r+0x240>)
 800bafe:	429d      	cmp	r5, r3
 800bb00:	d11b      	bne.n	800bb3a <_vfiprintf_r+0x56>
 800bb02:	6875      	ldr	r5, [r6, #4]
 800bb04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb06:	07d9      	lsls	r1, r3, #31
 800bb08:	d405      	bmi.n	800bb16 <_vfiprintf_r+0x32>
 800bb0a:	89ab      	ldrh	r3, [r5, #12]
 800bb0c:	059a      	lsls	r2, r3, #22
 800bb0e:	d402      	bmi.n	800bb16 <_vfiprintf_r+0x32>
 800bb10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb12:	f7ff ff60 	bl	800b9d6 <__retarget_lock_acquire_recursive>
 800bb16:	89ab      	ldrh	r3, [r5, #12]
 800bb18:	071b      	lsls	r3, r3, #28
 800bb1a:	d501      	bpl.n	800bb20 <_vfiprintf_r+0x3c>
 800bb1c:	692b      	ldr	r3, [r5, #16]
 800bb1e:	b9eb      	cbnz	r3, 800bb5c <_vfiprintf_r+0x78>
 800bb20:	4629      	mov	r1, r5
 800bb22:	4630      	mov	r0, r6
 800bb24:	f000 f96e 	bl	800be04 <__swsetup_r>
 800bb28:	b1c0      	cbz	r0, 800bb5c <_vfiprintf_r+0x78>
 800bb2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb2c:	07dc      	lsls	r4, r3, #31
 800bb2e:	d50e      	bpl.n	800bb4e <_vfiprintf_r+0x6a>
 800bb30:	f04f 30ff 	mov.w	r0, #4294967295
 800bb34:	b01d      	add	sp, #116	; 0x74
 800bb36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb3a:	4b7b      	ldr	r3, [pc, #492]	; (800bd28 <_vfiprintf_r+0x244>)
 800bb3c:	429d      	cmp	r5, r3
 800bb3e:	d101      	bne.n	800bb44 <_vfiprintf_r+0x60>
 800bb40:	68b5      	ldr	r5, [r6, #8]
 800bb42:	e7df      	b.n	800bb04 <_vfiprintf_r+0x20>
 800bb44:	4b79      	ldr	r3, [pc, #484]	; (800bd2c <_vfiprintf_r+0x248>)
 800bb46:	429d      	cmp	r5, r3
 800bb48:	bf08      	it	eq
 800bb4a:	68f5      	ldreq	r5, [r6, #12]
 800bb4c:	e7da      	b.n	800bb04 <_vfiprintf_r+0x20>
 800bb4e:	89ab      	ldrh	r3, [r5, #12]
 800bb50:	0598      	lsls	r0, r3, #22
 800bb52:	d4ed      	bmi.n	800bb30 <_vfiprintf_r+0x4c>
 800bb54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb56:	f7ff ff3f 	bl	800b9d8 <__retarget_lock_release_recursive>
 800bb5a:	e7e9      	b.n	800bb30 <_vfiprintf_r+0x4c>
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	9309      	str	r3, [sp, #36]	; 0x24
 800bb60:	2320      	movs	r3, #32
 800bb62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb66:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb6a:	2330      	movs	r3, #48	; 0x30
 800bb6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bd30 <_vfiprintf_r+0x24c>
 800bb70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb74:	f04f 0901 	mov.w	r9, #1
 800bb78:	4623      	mov	r3, r4
 800bb7a:	469a      	mov	sl, r3
 800bb7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb80:	b10a      	cbz	r2, 800bb86 <_vfiprintf_r+0xa2>
 800bb82:	2a25      	cmp	r2, #37	; 0x25
 800bb84:	d1f9      	bne.n	800bb7a <_vfiprintf_r+0x96>
 800bb86:	ebba 0b04 	subs.w	fp, sl, r4
 800bb8a:	d00b      	beq.n	800bba4 <_vfiprintf_r+0xc0>
 800bb8c:	465b      	mov	r3, fp
 800bb8e:	4622      	mov	r2, r4
 800bb90:	4629      	mov	r1, r5
 800bb92:	4630      	mov	r0, r6
 800bb94:	f7ff ff93 	bl	800babe <__sfputs_r>
 800bb98:	3001      	adds	r0, #1
 800bb9a:	f000 80aa 	beq.w	800bcf2 <_vfiprintf_r+0x20e>
 800bb9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bba0:	445a      	add	r2, fp
 800bba2:	9209      	str	r2, [sp, #36]	; 0x24
 800bba4:	f89a 3000 	ldrb.w	r3, [sl]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	f000 80a2 	beq.w	800bcf2 <_vfiprintf_r+0x20e>
 800bbae:	2300      	movs	r3, #0
 800bbb0:	f04f 32ff 	mov.w	r2, #4294967295
 800bbb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbb8:	f10a 0a01 	add.w	sl, sl, #1
 800bbbc:	9304      	str	r3, [sp, #16]
 800bbbe:	9307      	str	r3, [sp, #28]
 800bbc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbc4:	931a      	str	r3, [sp, #104]	; 0x68
 800bbc6:	4654      	mov	r4, sl
 800bbc8:	2205      	movs	r2, #5
 800bbca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbce:	4858      	ldr	r0, [pc, #352]	; (800bd30 <_vfiprintf_r+0x24c>)
 800bbd0:	f7f4 fb26 	bl	8000220 <memchr>
 800bbd4:	9a04      	ldr	r2, [sp, #16]
 800bbd6:	b9d8      	cbnz	r0, 800bc10 <_vfiprintf_r+0x12c>
 800bbd8:	06d1      	lsls	r1, r2, #27
 800bbda:	bf44      	itt	mi
 800bbdc:	2320      	movmi	r3, #32
 800bbde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbe2:	0713      	lsls	r3, r2, #28
 800bbe4:	bf44      	itt	mi
 800bbe6:	232b      	movmi	r3, #43	; 0x2b
 800bbe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbec:	f89a 3000 	ldrb.w	r3, [sl]
 800bbf0:	2b2a      	cmp	r3, #42	; 0x2a
 800bbf2:	d015      	beq.n	800bc20 <_vfiprintf_r+0x13c>
 800bbf4:	9a07      	ldr	r2, [sp, #28]
 800bbf6:	4654      	mov	r4, sl
 800bbf8:	2000      	movs	r0, #0
 800bbfa:	f04f 0c0a 	mov.w	ip, #10
 800bbfe:	4621      	mov	r1, r4
 800bc00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc04:	3b30      	subs	r3, #48	; 0x30
 800bc06:	2b09      	cmp	r3, #9
 800bc08:	d94e      	bls.n	800bca8 <_vfiprintf_r+0x1c4>
 800bc0a:	b1b0      	cbz	r0, 800bc3a <_vfiprintf_r+0x156>
 800bc0c:	9207      	str	r2, [sp, #28]
 800bc0e:	e014      	b.n	800bc3a <_vfiprintf_r+0x156>
 800bc10:	eba0 0308 	sub.w	r3, r0, r8
 800bc14:	fa09 f303 	lsl.w	r3, r9, r3
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	9304      	str	r3, [sp, #16]
 800bc1c:	46a2      	mov	sl, r4
 800bc1e:	e7d2      	b.n	800bbc6 <_vfiprintf_r+0xe2>
 800bc20:	9b03      	ldr	r3, [sp, #12]
 800bc22:	1d19      	adds	r1, r3, #4
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	9103      	str	r1, [sp, #12]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	bfbb      	ittet	lt
 800bc2c:	425b      	neglt	r3, r3
 800bc2e:	f042 0202 	orrlt.w	r2, r2, #2
 800bc32:	9307      	strge	r3, [sp, #28]
 800bc34:	9307      	strlt	r3, [sp, #28]
 800bc36:	bfb8      	it	lt
 800bc38:	9204      	strlt	r2, [sp, #16]
 800bc3a:	7823      	ldrb	r3, [r4, #0]
 800bc3c:	2b2e      	cmp	r3, #46	; 0x2e
 800bc3e:	d10c      	bne.n	800bc5a <_vfiprintf_r+0x176>
 800bc40:	7863      	ldrb	r3, [r4, #1]
 800bc42:	2b2a      	cmp	r3, #42	; 0x2a
 800bc44:	d135      	bne.n	800bcb2 <_vfiprintf_r+0x1ce>
 800bc46:	9b03      	ldr	r3, [sp, #12]
 800bc48:	1d1a      	adds	r2, r3, #4
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	9203      	str	r2, [sp, #12]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	bfb8      	it	lt
 800bc52:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc56:	3402      	adds	r4, #2
 800bc58:	9305      	str	r3, [sp, #20]
 800bc5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bd40 <_vfiprintf_r+0x25c>
 800bc5e:	7821      	ldrb	r1, [r4, #0]
 800bc60:	2203      	movs	r2, #3
 800bc62:	4650      	mov	r0, sl
 800bc64:	f7f4 fadc 	bl	8000220 <memchr>
 800bc68:	b140      	cbz	r0, 800bc7c <_vfiprintf_r+0x198>
 800bc6a:	2340      	movs	r3, #64	; 0x40
 800bc6c:	eba0 000a 	sub.w	r0, r0, sl
 800bc70:	fa03 f000 	lsl.w	r0, r3, r0
 800bc74:	9b04      	ldr	r3, [sp, #16]
 800bc76:	4303      	orrs	r3, r0
 800bc78:	3401      	adds	r4, #1
 800bc7a:	9304      	str	r3, [sp, #16]
 800bc7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc80:	482c      	ldr	r0, [pc, #176]	; (800bd34 <_vfiprintf_r+0x250>)
 800bc82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc86:	2206      	movs	r2, #6
 800bc88:	f7f4 faca 	bl	8000220 <memchr>
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	d03f      	beq.n	800bd10 <_vfiprintf_r+0x22c>
 800bc90:	4b29      	ldr	r3, [pc, #164]	; (800bd38 <_vfiprintf_r+0x254>)
 800bc92:	bb1b      	cbnz	r3, 800bcdc <_vfiprintf_r+0x1f8>
 800bc94:	9b03      	ldr	r3, [sp, #12]
 800bc96:	3307      	adds	r3, #7
 800bc98:	f023 0307 	bic.w	r3, r3, #7
 800bc9c:	3308      	adds	r3, #8
 800bc9e:	9303      	str	r3, [sp, #12]
 800bca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bca2:	443b      	add	r3, r7
 800bca4:	9309      	str	r3, [sp, #36]	; 0x24
 800bca6:	e767      	b.n	800bb78 <_vfiprintf_r+0x94>
 800bca8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcac:	460c      	mov	r4, r1
 800bcae:	2001      	movs	r0, #1
 800bcb0:	e7a5      	b.n	800bbfe <_vfiprintf_r+0x11a>
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	3401      	adds	r4, #1
 800bcb6:	9305      	str	r3, [sp, #20]
 800bcb8:	4619      	mov	r1, r3
 800bcba:	f04f 0c0a 	mov.w	ip, #10
 800bcbe:	4620      	mov	r0, r4
 800bcc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcc4:	3a30      	subs	r2, #48	; 0x30
 800bcc6:	2a09      	cmp	r2, #9
 800bcc8:	d903      	bls.n	800bcd2 <_vfiprintf_r+0x1ee>
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d0c5      	beq.n	800bc5a <_vfiprintf_r+0x176>
 800bcce:	9105      	str	r1, [sp, #20]
 800bcd0:	e7c3      	b.n	800bc5a <_vfiprintf_r+0x176>
 800bcd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcd6:	4604      	mov	r4, r0
 800bcd8:	2301      	movs	r3, #1
 800bcda:	e7f0      	b.n	800bcbe <_vfiprintf_r+0x1da>
 800bcdc:	ab03      	add	r3, sp, #12
 800bcde:	9300      	str	r3, [sp, #0]
 800bce0:	462a      	mov	r2, r5
 800bce2:	4b16      	ldr	r3, [pc, #88]	; (800bd3c <_vfiprintf_r+0x258>)
 800bce4:	a904      	add	r1, sp, #16
 800bce6:	4630      	mov	r0, r6
 800bce8:	f7fd fea8 	bl	8009a3c <_printf_float>
 800bcec:	4607      	mov	r7, r0
 800bcee:	1c78      	adds	r0, r7, #1
 800bcf0:	d1d6      	bne.n	800bca0 <_vfiprintf_r+0x1bc>
 800bcf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcf4:	07d9      	lsls	r1, r3, #31
 800bcf6:	d405      	bmi.n	800bd04 <_vfiprintf_r+0x220>
 800bcf8:	89ab      	ldrh	r3, [r5, #12]
 800bcfa:	059a      	lsls	r2, r3, #22
 800bcfc:	d402      	bmi.n	800bd04 <_vfiprintf_r+0x220>
 800bcfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd00:	f7ff fe6a 	bl	800b9d8 <__retarget_lock_release_recursive>
 800bd04:	89ab      	ldrh	r3, [r5, #12]
 800bd06:	065b      	lsls	r3, r3, #25
 800bd08:	f53f af12 	bmi.w	800bb30 <_vfiprintf_r+0x4c>
 800bd0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd0e:	e711      	b.n	800bb34 <_vfiprintf_r+0x50>
 800bd10:	ab03      	add	r3, sp, #12
 800bd12:	9300      	str	r3, [sp, #0]
 800bd14:	462a      	mov	r2, r5
 800bd16:	4b09      	ldr	r3, [pc, #36]	; (800bd3c <_vfiprintf_r+0x258>)
 800bd18:	a904      	add	r1, sp, #16
 800bd1a:	4630      	mov	r0, r6
 800bd1c:	f7fe f932 	bl	8009f84 <_printf_i>
 800bd20:	e7e4      	b.n	800bcec <_vfiprintf_r+0x208>
 800bd22:	bf00      	nop
 800bd24:	0800cd14 	.word	0x0800cd14
 800bd28:	0800cd34 	.word	0x0800cd34
 800bd2c:	0800ccf4 	.word	0x0800ccf4
 800bd30:	0800cb9c 	.word	0x0800cb9c
 800bd34:	0800cba6 	.word	0x0800cba6
 800bd38:	08009a3d 	.word	0x08009a3d
 800bd3c:	0800babf 	.word	0x0800babf
 800bd40:	0800cba2 	.word	0x0800cba2

0800bd44 <__swbuf_r>:
 800bd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd46:	460e      	mov	r6, r1
 800bd48:	4614      	mov	r4, r2
 800bd4a:	4605      	mov	r5, r0
 800bd4c:	b118      	cbz	r0, 800bd56 <__swbuf_r+0x12>
 800bd4e:	6983      	ldr	r3, [r0, #24]
 800bd50:	b90b      	cbnz	r3, 800bd56 <__swbuf_r+0x12>
 800bd52:	f000 f9e7 	bl	800c124 <__sinit>
 800bd56:	4b21      	ldr	r3, [pc, #132]	; (800bddc <__swbuf_r+0x98>)
 800bd58:	429c      	cmp	r4, r3
 800bd5a:	d12b      	bne.n	800bdb4 <__swbuf_r+0x70>
 800bd5c:	686c      	ldr	r4, [r5, #4]
 800bd5e:	69a3      	ldr	r3, [r4, #24]
 800bd60:	60a3      	str	r3, [r4, #8]
 800bd62:	89a3      	ldrh	r3, [r4, #12]
 800bd64:	071a      	lsls	r2, r3, #28
 800bd66:	d52f      	bpl.n	800bdc8 <__swbuf_r+0x84>
 800bd68:	6923      	ldr	r3, [r4, #16]
 800bd6a:	b36b      	cbz	r3, 800bdc8 <__swbuf_r+0x84>
 800bd6c:	6923      	ldr	r3, [r4, #16]
 800bd6e:	6820      	ldr	r0, [r4, #0]
 800bd70:	1ac0      	subs	r0, r0, r3
 800bd72:	6963      	ldr	r3, [r4, #20]
 800bd74:	b2f6      	uxtb	r6, r6
 800bd76:	4283      	cmp	r3, r0
 800bd78:	4637      	mov	r7, r6
 800bd7a:	dc04      	bgt.n	800bd86 <__swbuf_r+0x42>
 800bd7c:	4621      	mov	r1, r4
 800bd7e:	4628      	mov	r0, r5
 800bd80:	f000 f93c 	bl	800bffc <_fflush_r>
 800bd84:	bb30      	cbnz	r0, 800bdd4 <__swbuf_r+0x90>
 800bd86:	68a3      	ldr	r3, [r4, #8]
 800bd88:	3b01      	subs	r3, #1
 800bd8a:	60a3      	str	r3, [r4, #8]
 800bd8c:	6823      	ldr	r3, [r4, #0]
 800bd8e:	1c5a      	adds	r2, r3, #1
 800bd90:	6022      	str	r2, [r4, #0]
 800bd92:	701e      	strb	r6, [r3, #0]
 800bd94:	6963      	ldr	r3, [r4, #20]
 800bd96:	3001      	adds	r0, #1
 800bd98:	4283      	cmp	r3, r0
 800bd9a:	d004      	beq.n	800bda6 <__swbuf_r+0x62>
 800bd9c:	89a3      	ldrh	r3, [r4, #12]
 800bd9e:	07db      	lsls	r3, r3, #31
 800bda0:	d506      	bpl.n	800bdb0 <__swbuf_r+0x6c>
 800bda2:	2e0a      	cmp	r6, #10
 800bda4:	d104      	bne.n	800bdb0 <__swbuf_r+0x6c>
 800bda6:	4621      	mov	r1, r4
 800bda8:	4628      	mov	r0, r5
 800bdaa:	f000 f927 	bl	800bffc <_fflush_r>
 800bdae:	b988      	cbnz	r0, 800bdd4 <__swbuf_r+0x90>
 800bdb0:	4638      	mov	r0, r7
 800bdb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdb4:	4b0a      	ldr	r3, [pc, #40]	; (800bde0 <__swbuf_r+0x9c>)
 800bdb6:	429c      	cmp	r4, r3
 800bdb8:	d101      	bne.n	800bdbe <__swbuf_r+0x7a>
 800bdba:	68ac      	ldr	r4, [r5, #8]
 800bdbc:	e7cf      	b.n	800bd5e <__swbuf_r+0x1a>
 800bdbe:	4b09      	ldr	r3, [pc, #36]	; (800bde4 <__swbuf_r+0xa0>)
 800bdc0:	429c      	cmp	r4, r3
 800bdc2:	bf08      	it	eq
 800bdc4:	68ec      	ldreq	r4, [r5, #12]
 800bdc6:	e7ca      	b.n	800bd5e <__swbuf_r+0x1a>
 800bdc8:	4621      	mov	r1, r4
 800bdca:	4628      	mov	r0, r5
 800bdcc:	f000 f81a 	bl	800be04 <__swsetup_r>
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	d0cb      	beq.n	800bd6c <__swbuf_r+0x28>
 800bdd4:	f04f 37ff 	mov.w	r7, #4294967295
 800bdd8:	e7ea      	b.n	800bdb0 <__swbuf_r+0x6c>
 800bdda:	bf00      	nop
 800bddc:	0800cd14 	.word	0x0800cd14
 800bde0:	0800cd34 	.word	0x0800cd34
 800bde4:	0800ccf4 	.word	0x0800ccf4

0800bde8 <__ascii_wctomb>:
 800bde8:	b149      	cbz	r1, 800bdfe <__ascii_wctomb+0x16>
 800bdea:	2aff      	cmp	r2, #255	; 0xff
 800bdec:	bf85      	ittet	hi
 800bdee:	238a      	movhi	r3, #138	; 0x8a
 800bdf0:	6003      	strhi	r3, [r0, #0]
 800bdf2:	700a      	strbls	r2, [r1, #0]
 800bdf4:	f04f 30ff 	movhi.w	r0, #4294967295
 800bdf8:	bf98      	it	ls
 800bdfa:	2001      	movls	r0, #1
 800bdfc:	4770      	bx	lr
 800bdfe:	4608      	mov	r0, r1
 800be00:	4770      	bx	lr
	...

0800be04 <__swsetup_r>:
 800be04:	4b32      	ldr	r3, [pc, #200]	; (800bed0 <__swsetup_r+0xcc>)
 800be06:	b570      	push	{r4, r5, r6, lr}
 800be08:	681d      	ldr	r5, [r3, #0]
 800be0a:	4606      	mov	r6, r0
 800be0c:	460c      	mov	r4, r1
 800be0e:	b125      	cbz	r5, 800be1a <__swsetup_r+0x16>
 800be10:	69ab      	ldr	r3, [r5, #24]
 800be12:	b913      	cbnz	r3, 800be1a <__swsetup_r+0x16>
 800be14:	4628      	mov	r0, r5
 800be16:	f000 f985 	bl	800c124 <__sinit>
 800be1a:	4b2e      	ldr	r3, [pc, #184]	; (800bed4 <__swsetup_r+0xd0>)
 800be1c:	429c      	cmp	r4, r3
 800be1e:	d10f      	bne.n	800be40 <__swsetup_r+0x3c>
 800be20:	686c      	ldr	r4, [r5, #4]
 800be22:	89a3      	ldrh	r3, [r4, #12]
 800be24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be28:	0719      	lsls	r1, r3, #28
 800be2a:	d42c      	bmi.n	800be86 <__swsetup_r+0x82>
 800be2c:	06dd      	lsls	r5, r3, #27
 800be2e:	d411      	bmi.n	800be54 <__swsetup_r+0x50>
 800be30:	2309      	movs	r3, #9
 800be32:	6033      	str	r3, [r6, #0]
 800be34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be38:	81a3      	strh	r3, [r4, #12]
 800be3a:	f04f 30ff 	mov.w	r0, #4294967295
 800be3e:	e03e      	b.n	800bebe <__swsetup_r+0xba>
 800be40:	4b25      	ldr	r3, [pc, #148]	; (800bed8 <__swsetup_r+0xd4>)
 800be42:	429c      	cmp	r4, r3
 800be44:	d101      	bne.n	800be4a <__swsetup_r+0x46>
 800be46:	68ac      	ldr	r4, [r5, #8]
 800be48:	e7eb      	b.n	800be22 <__swsetup_r+0x1e>
 800be4a:	4b24      	ldr	r3, [pc, #144]	; (800bedc <__swsetup_r+0xd8>)
 800be4c:	429c      	cmp	r4, r3
 800be4e:	bf08      	it	eq
 800be50:	68ec      	ldreq	r4, [r5, #12]
 800be52:	e7e6      	b.n	800be22 <__swsetup_r+0x1e>
 800be54:	0758      	lsls	r0, r3, #29
 800be56:	d512      	bpl.n	800be7e <__swsetup_r+0x7a>
 800be58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be5a:	b141      	cbz	r1, 800be6e <__swsetup_r+0x6a>
 800be5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be60:	4299      	cmp	r1, r3
 800be62:	d002      	beq.n	800be6a <__swsetup_r+0x66>
 800be64:	4630      	mov	r0, r6
 800be66:	f7fd fc69 	bl	800973c <_free_r>
 800be6a:	2300      	movs	r3, #0
 800be6c:	6363      	str	r3, [r4, #52]	; 0x34
 800be6e:	89a3      	ldrh	r3, [r4, #12]
 800be70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be74:	81a3      	strh	r3, [r4, #12]
 800be76:	2300      	movs	r3, #0
 800be78:	6063      	str	r3, [r4, #4]
 800be7a:	6923      	ldr	r3, [r4, #16]
 800be7c:	6023      	str	r3, [r4, #0]
 800be7e:	89a3      	ldrh	r3, [r4, #12]
 800be80:	f043 0308 	orr.w	r3, r3, #8
 800be84:	81a3      	strh	r3, [r4, #12]
 800be86:	6923      	ldr	r3, [r4, #16]
 800be88:	b94b      	cbnz	r3, 800be9e <__swsetup_r+0x9a>
 800be8a:	89a3      	ldrh	r3, [r4, #12]
 800be8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be94:	d003      	beq.n	800be9e <__swsetup_r+0x9a>
 800be96:	4621      	mov	r1, r4
 800be98:	4630      	mov	r0, r6
 800be9a:	f000 fa05 	bl	800c2a8 <__smakebuf_r>
 800be9e:	89a0      	ldrh	r0, [r4, #12]
 800bea0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bea4:	f010 0301 	ands.w	r3, r0, #1
 800bea8:	d00a      	beq.n	800bec0 <__swsetup_r+0xbc>
 800beaa:	2300      	movs	r3, #0
 800beac:	60a3      	str	r3, [r4, #8]
 800beae:	6963      	ldr	r3, [r4, #20]
 800beb0:	425b      	negs	r3, r3
 800beb2:	61a3      	str	r3, [r4, #24]
 800beb4:	6923      	ldr	r3, [r4, #16]
 800beb6:	b943      	cbnz	r3, 800beca <__swsetup_r+0xc6>
 800beb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bebc:	d1ba      	bne.n	800be34 <__swsetup_r+0x30>
 800bebe:	bd70      	pop	{r4, r5, r6, pc}
 800bec0:	0781      	lsls	r1, r0, #30
 800bec2:	bf58      	it	pl
 800bec4:	6963      	ldrpl	r3, [r4, #20]
 800bec6:	60a3      	str	r3, [r4, #8]
 800bec8:	e7f4      	b.n	800beb4 <__swsetup_r+0xb0>
 800beca:	2000      	movs	r0, #0
 800becc:	e7f7      	b.n	800bebe <__swsetup_r+0xba>
 800bece:	bf00      	nop
 800bed0:	200023fc 	.word	0x200023fc
 800bed4:	0800cd14 	.word	0x0800cd14
 800bed8:	0800cd34 	.word	0x0800cd34
 800bedc:	0800ccf4 	.word	0x0800ccf4

0800bee0 <abort>:
 800bee0:	b508      	push	{r3, lr}
 800bee2:	2006      	movs	r0, #6
 800bee4:	f000 fa50 	bl	800c388 <raise>
 800bee8:	2001      	movs	r0, #1
 800beea:	f7f8 ffad 	bl	8004e48 <_exit>
	...

0800bef0 <__sflush_r>:
 800bef0:	898a      	ldrh	r2, [r1, #12]
 800bef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bef6:	4605      	mov	r5, r0
 800bef8:	0710      	lsls	r0, r2, #28
 800befa:	460c      	mov	r4, r1
 800befc:	d458      	bmi.n	800bfb0 <__sflush_r+0xc0>
 800befe:	684b      	ldr	r3, [r1, #4]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	dc05      	bgt.n	800bf10 <__sflush_r+0x20>
 800bf04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	dc02      	bgt.n	800bf10 <__sflush_r+0x20>
 800bf0a:	2000      	movs	r0, #0
 800bf0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf12:	2e00      	cmp	r6, #0
 800bf14:	d0f9      	beq.n	800bf0a <__sflush_r+0x1a>
 800bf16:	2300      	movs	r3, #0
 800bf18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf1c:	682f      	ldr	r7, [r5, #0]
 800bf1e:	602b      	str	r3, [r5, #0]
 800bf20:	d032      	beq.n	800bf88 <__sflush_r+0x98>
 800bf22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf24:	89a3      	ldrh	r3, [r4, #12]
 800bf26:	075a      	lsls	r2, r3, #29
 800bf28:	d505      	bpl.n	800bf36 <__sflush_r+0x46>
 800bf2a:	6863      	ldr	r3, [r4, #4]
 800bf2c:	1ac0      	subs	r0, r0, r3
 800bf2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf30:	b10b      	cbz	r3, 800bf36 <__sflush_r+0x46>
 800bf32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf34:	1ac0      	subs	r0, r0, r3
 800bf36:	2300      	movs	r3, #0
 800bf38:	4602      	mov	r2, r0
 800bf3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf3c:	6a21      	ldr	r1, [r4, #32]
 800bf3e:	4628      	mov	r0, r5
 800bf40:	47b0      	blx	r6
 800bf42:	1c43      	adds	r3, r0, #1
 800bf44:	89a3      	ldrh	r3, [r4, #12]
 800bf46:	d106      	bne.n	800bf56 <__sflush_r+0x66>
 800bf48:	6829      	ldr	r1, [r5, #0]
 800bf4a:	291d      	cmp	r1, #29
 800bf4c:	d82c      	bhi.n	800bfa8 <__sflush_r+0xb8>
 800bf4e:	4a2a      	ldr	r2, [pc, #168]	; (800bff8 <__sflush_r+0x108>)
 800bf50:	40ca      	lsrs	r2, r1
 800bf52:	07d6      	lsls	r6, r2, #31
 800bf54:	d528      	bpl.n	800bfa8 <__sflush_r+0xb8>
 800bf56:	2200      	movs	r2, #0
 800bf58:	6062      	str	r2, [r4, #4]
 800bf5a:	04d9      	lsls	r1, r3, #19
 800bf5c:	6922      	ldr	r2, [r4, #16]
 800bf5e:	6022      	str	r2, [r4, #0]
 800bf60:	d504      	bpl.n	800bf6c <__sflush_r+0x7c>
 800bf62:	1c42      	adds	r2, r0, #1
 800bf64:	d101      	bne.n	800bf6a <__sflush_r+0x7a>
 800bf66:	682b      	ldr	r3, [r5, #0]
 800bf68:	b903      	cbnz	r3, 800bf6c <__sflush_r+0x7c>
 800bf6a:	6560      	str	r0, [r4, #84]	; 0x54
 800bf6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf6e:	602f      	str	r7, [r5, #0]
 800bf70:	2900      	cmp	r1, #0
 800bf72:	d0ca      	beq.n	800bf0a <__sflush_r+0x1a>
 800bf74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf78:	4299      	cmp	r1, r3
 800bf7a:	d002      	beq.n	800bf82 <__sflush_r+0x92>
 800bf7c:	4628      	mov	r0, r5
 800bf7e:	f7fd fbdd 	bl	800973c <_free_r>
 800bf82:	2000      	movs	r0, #0
 800bf84:	6360      	str	r0, [r4, #52]	; 0x34
 800bf86:	e7c1      	b.n	800bf0c <__sflush_r+0x1c>
 800bf88:	6a21      	ldr	r1, [r4, #32]
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	4628      	mov	r0, r5
 800bf8e:	47b0      	blx	r6
 800bf90:	1c41      	adds	r1, r0, #1
 800bf92:	d1c7      	bne.n	800bf24 <__sflush_r+0x34>
 800bf94:	682b      	ldr	r3, [r5, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d0c4      	beq.n	800bf24 <__sflush_r+0x34>
 800bf9a:	2b1d      	cmp	r3, #29
 800bf9c:	d001      	beq.n	800bfa2 <__sflush_r+0xb2>
 800bf9e:	2b16      	cmp	r3, #22
 800bfa0:	d101      	bne.n	800bfa6 <__sflush_r+0xb6>
 800bfa2:	602f      	str	r7, [r5, #0]
 800bfa4:	e7b1      	b.n	800bf0a <__sflush_r+0x1a>
 800bfa6:	89a3      	ldrh	r3, [r4, #12]
 800bfa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfac:	81a3      	strh	r3, [r4, #12]
 800bfae:	e7ad      	b.n	800bf0c <__sflush_r+0x1c>
 800bfb0:	690f      	ldr	r7, [r1, #16]
 800bfb2:	2f00      	cmp	r7, #0
 800bfb4:	d0a9      	beq.n	800bf0a <__sflush_r+0x1a>
 800bfb6:	0793      	lsls	r3, r2, #30
 800bfb8:	680e      	ldr	r6, [r1, #0]
 800bfba:	bf08      	it	eq
 800bfbc:	694b      	ldreq	r3, [r1, #20]
 800bfbe:	600f      	str	r7, [r1, #0]
 800bfc0:	bf18      	it	ne
 800bfc2:	2300      	movne	r3, #0
 800bfc4:	eba6 0807 	sub.w	r8, r6, r7
 800bfc8:	608b      	str	r3, [r1, #8]
 800bfca:	f1b8 0f00 	cmp.w	r8, #0
 800bfce:	dd9c      	ble.n	800bf0a <__sflush_r+0x1a>
 800bfd0:	6a21      	ldr	r1, [r4, #32]
 800bfd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bfd4:	4643      	mov	r3, r8
 800bfd6:	463a      	mov	r2, r7
 800bfd8:	4628      	mov	r0, r5
 800bfda:	47b0      	blx	r6
 800bfdc:	2800      	cmp	r0, #0
 800bfde:	dc06      	bgt.n	800bfee <__sflush_r+0xfe>
 800bfe0:	89a3      	ldrh	r3, [r4, #12]
 800bfe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfe6:	81a3      	strh	r3, [r4, #12]
 800bfe8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfec:	e78e      	b.n	800bf0c <__sflush_r+0x1c>
 800bfee:	4407      	add	r7, r0
 800bff0:	eba8 0800 	sub.w	r8, r8, r0
 800bff4:	e7e9      	b.n	800bfca <__sflush_r+0xda>
 800bff6:	bf00      	nop
 800bff8:	20400001 	.word	0x20400001

0800bffc <_fflush_r>:
 800bffc:	b538      	push	{r3, r4, r5, lr}
 800bffe:	690b      	ldr	r3, [r1, #16]
 800c000:	4605      	mov	r5, r0
 800c002:	460c      	mov	r4, r1
 800c004:	b913      	cbnz	r3, 800c00c <_fflush_r+0x10>
 800c006:	2500      	movs	r5, #0
 800c008:	4628      	mov	r0, r5
 800c00a:	bd38      	pop	{r3, r4, r5, pc}
 800c00c:	b118      	cbz	r0, 800c016 <_fflush_r+0x1a>
 800c00e:	6983      	ldr	r3, [r0, #24]
 800c010:	b90b      	cbnz	r3, 800c016 <_fflush_r+0x1a>
 800c012:	f000 f887 	bl	800c124 <__sinit>
 800c016:	4b14      	ldr	r3, [pc, #80]	; (800c068 <_fflush_r+0x6c>)
 800c018:	429c      	cmp	r4, r3
 800c01a:	d11b      	bne.n	800c054 <_fflush_r+0x58>
 800c01c:	686c      	ldr	r4, [r5, #4]
 800c01e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d0ef      	beq.n	800c006 <_fflush_r+0xa>
 800c026:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c028:	07d0      	lsls	r0, r2, #31
 800c02a:	d404      	bmi.n	800c036 <_fflush_r+0x3a>
 800c02c:	0599      	lsls	r1, r3, #22
 800c02e:	d402      	bmi.n	800c036 <_fflush_r+0x3a>
 800c030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c032:	f7ff fcd0 	bl	800b9d6 <__retarget_lock_acquire_recursive>
 800c036:	4628      	mov	r0, r5
 800c038:	4621      	mov	r1, r4
 800c03a:	f7ff ff59 	bl	800bef0 <__sflush_r>
 800c03e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c040:	07da      	lsls	r2, r3, #31
 800c042:	4605      	mov	r5, r0
 800c044:	d4e0      	bmi.n	800c008 <_fflush_r+0xc>
 800c046:	89a3      	ldrh	r3, [r4, #12]
 800c048:	059b      	lsls	r3, r3, #22
 800c04a:	d4dd      	bmi.n	800c008 <_fflush_r+0xc>
 800c04c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c04e:	f7ff fcc3 	bl	800b9d8 <__retarget_lock_release_recursive>
 800c052:	e7d9      	b.n	800c008 <_fflush_r+0xc>
 800c054:	4b05      	ldr	r3, [pc, #20]	; (800c06c <_fflush_r+0x70>)
 800c056:	429c      	cmp	r4, r3
 800c058:	d101      	bne.n	800c05e <_fflush_r+0x62>
 800c05a:	68ac      	ldr	r4, [r5, #8]
 800c05c:	e7df      	b.n	800c01e <_fflush_r+0x22>
 800c05e:	4b04      	ldr	r3, [pc, #16]	; (800c070 <_fflush_r+0x74>)
 800c060:	429c      	cmp	r4, r3
 800c062:	bf08      	it	eq
 800c064:	68ec      	ldreq	r4, [r5, #12]
 800c066:	e7da      	b.n	800c01e <_fflush_r+0x22>
 800c068:	0800cd14 	.word	0x0800cd14
 800c06c:	0800cd34 	.word	0x0800cd34
 800c070:	0800ccf4 	.word	0x0800ccf4

0800c074 <std>:
 800c074:	2300      	movs	r3, #0
 800c076:	b510      	push	{r4, lr}
 800c078:	4604      	mov	r4, r0
 800c07a:	e9c0 3300 	strd	r3, r3, [r0]
 800c07e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c082:	6083      	str	r3, [r0, #8]
 800c084:	8181      	strh	r1, [r0, #12]
 800c086:	6643      	str	r3, [r0, #100]	; 0x64
 800c088:	81c2      	strh	r2, [r0, #14]
 800c08a:	6183      	str	r3, [r0, #24]
 800c08c:	4619      	mov	r1, r3
 800c08e:	2208      	movs	r2, #8
 800c090:	305c      	adds	r0, #92	; 0x5c
 800c092:	f7fd fb4b 	bl	800972c <memset>
 800c096:	4b05      	ldr	r3, [pc, #20]	; (800c0ac <std+0x38>)
 800c098:	6263      	str	r3, [r4, #36]	; 0x24
 800c09a:	4b05      	ldr	r3, [pc, #20]	; (800c0b0 <std+0x3c>)
 800c09c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c09e:	4b05      	ldr	r3, [pc, #20]	; (800c0b4 <std+0x40>)
 800c0a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c0a2:	4b05      	ldr	r3, [pc, #20]	; (800c0b8 <std+0x44>)
 800c0a4:	6224      	str	r4, [r4, #32]
 800c0a6:	6323      	str	r3, [r4, #48]	; 0x30
 800c0a8:	bd10      	pop	{r4, pc}
 800c0aa:	bf00      	nop
 800c0ac:	0800c3c1 	.word	0x0800c3c1
 800c0b0:	0800c3e3 	.word	0x0800c3e3
 800c0b4:	0800c41b 	.word	0x0800c41b
 800c0b8:	0800c43f 	.word	0x0800c43f

0800c0bc <_cleanup_r>:
 800c0bc:	4901      	ldr	r1, [pc, #4]	; (800c0c4 <_cleanup_r+0x8>)
 800c0be:	f000 b8af 	b.w	800c220 <_fwalk_reent>
 800c0c2:	bf00      	nop
 800c0c4:	0800bffd 	.word	0x0800bffd

0800c0c8 <__sfmoreglue>:
 800c0c8:	b570      	push	{r4, r5, r6, lr}
 800c0ca:	2268      	movs	r2, #104	; 0x68
 800c0cc:	1e4d      	subs	r5, r1, #1
 800c0ce:	4355      	muls	r5, r2
 800c0d0:	460e      	mov	r6, r1
 800c0d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c0d6:	f7fd fb9d 	bl	8009814 <_malloc_r>
 800c0da:	4604      	mov	r4, r0
 800c0dc:	b140      	cbz	r0, 800c0f0 <__sfmoreglue+0x28>
 800c0de:	2100      	movs	r1, #0
 800c0e0:	e9c0 1600 	strd	r1, r6, [r0]
 800c0e4:	300c      	adds	r0, #12
 800c0e6:	60a0      	str	r0, [r4, #8]
 800c0e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c0ec:	f7fd fb1e 	bl	800972c <memset>
 800c0f0:	4620      	mov	r0, r4
 800c0f2:	bd70      	pop	{r4, r5, r6, pc}

0800c0f4 <__sfp_lock_acquire>:
 800c0f4:	4801      	ldr	r0, [pc, #4]	; (800c0fc <__sfp_lock_acquire+0x8>)
 800c0f6:	f7ff bc6e 	b.w	800b9d6 <__retarget_lock_acquire_recursive>
 800c0fa:	bf00      	nop
 800c0fc:	200034ed 	.word	0x200034ed

0800c100 <__sfp_lock_release>:
 800c100:	4801      	ldr	r0, [pc, #4]	; (800c108 <__sfp_lock_release+0x8>)
 800c102:	f7ff bc69 	b.w	800b9d8 <__retarget_lock_release_recursive>
 800c106:	bf00      	nop
 800c108:	200034ed 	.word	0x200034ed

0800c10c <__sinit_lock_acquire>:
 800c10c:	4801      	ldr	r0, [pc, #4]	; (800c114 <__sinit_lock_acquire+0x8>)
 800c10e:	f7ff bc62 	b.w	800b9d6 <__retarget_lock_acquire_recursive>
 800c112:	bf00      	nop
 800c114:	200034ee 	.word	0x200034ee

0800c118 <__sinit_lock_release>:
 800c118:	4801      	ldr	r0, [pc, #4]	; (800c120 <__sinit_lock_release+0x8>)
 800c11a:	f7ff bc5d 	b.w	800b9d8 <__retarget_lock_release_recursive>
 800c11e:	bf00      	nop
 800c120:	200034ee 	.word	0x200034ee

0800c124 <__sinit>:
 800c124:	b510      	push	{r4, lr}
 800c126:	4604      	mov	r4, r0
 800c128:	f7ff fff0 	bl	800c10c <__sinit_lock_acquire>
 800c12c:	69a3      	ldr	r3, [r4, #24]
 800c12e:	b11b      	cbz	r3, 800c138 <__sinit+0x14>
 800c130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c134:	f7ff bff0 	b.w	800c118 <__sinit_lock_release>
 800c138:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c13c:	6523      	str	r3, [r4, #80]	; 0x50
 800c13e:	4b13      	ldr	r3, [pc, #76]	; (800c18c <__sinit+0x68>)
 800c140:	4a13      	ldr	r2, [pc, #76]	; (800c190 <__sinit+0x6c>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	62a2      	str	r2, [r4, #40]	; 0x28
 800c146:	42a3      	cmp	r3, r4
 800c148:	bf04      	itt	eq
 800c14a:	2301      	moveq	r3, #1
 800c14c:	61a3      	streq	r3, [r4, #24]
 800c14e:	4620      	mov	r0, r4
 800c150:	f000 f820 	bl	800c194 <__sfp>
 800c154:	6060      	str	r0, [r4, #4]
 800c156:	4620      	mov	r0, r4
 800c158:	f000 f81c 	bl	800c194 <__sfp>
 800c15c:	60a0      	str	r0, [r4, #8]
 800c15e:	4620      	mov	r0, r4
 800c160:	f000 f818 	bl	800c194 <__sfp>
 800c164:	2200      	movs	r2, #0
 800c166:	60e0      	str	r0, [r4, #12]
 800c168:	2104      	movs	r1, #4
 800c16a:	6860      	ldr	r0, [r4, #4]
 800c16c:	f7ff ff82 	bl	800c074 <std>
 800c170:	68a0      	ldr	r0, [r4, #8]
 800c172:	2201      	movs	r2, #1
 800c174:	2109      	movs	r1, #9
 800c176:	f7ff ff7d 	bl	800c074 <std>
 800c17a:	68e0      	ldr	r0, [r4, #12]
 800c17c:	2202      	movs	r2, #2
 800c17e:	2112      	movs	r1, #18
 800c180:	f7ff ff78 	bl	800c074 <std>
 800c184:	2301      	movs	r3, #1
 800c186:	61a3      	str	r3, [r4, #24]
 800c188:	e7d2      	b.n	800c130 <__sinit+0xc>
 800c18a:	bf00      	nop
 800c18c:	0800c978 	.word	0x0800c978
 800c190:	0800c0bd 	.word	0x0800c0bd

0800c194 <__sfp>:
 800c194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c196:	4607      	mov	r7, r0
 800c198:	f7ff ffac 	bl	800c0f4 <__sfp_lock_acquire>
 800c19c:	4b1e      	ldr	r3, [pc, #120]	; (800c218 <__sfp+0x84>)
 800c19e:	681e      	ldr	r6, [r3, #0]
 800c1a0:	69b3      	ldr	r3, [r6, #24]
 800c1a2:	b913      	cbnz	r3, 800c1aa <__sfp+0x16>
 800c1a4:	4630      	mov	r0, r6
 800c1a6:	f7ff ffbd 	bl	800c124 <__sinit>
 800c1aa:	3648      	adds	r6, #72	; 0x48
 800c1ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c1b0:	3b01      	subs	r3, #1
 800c1b2:	d503      	bpl.n	800c1bc <__sfp+0x28>
 800c1b4:	6833      	ldr	r3, [r6, #0]
 800c1b6:	b30b      	cbz	r3, 800c1fc <__sfp+0x68>
 800c1b8:	6836      	ldr	r6, [r6, #0]
 800c1ba:	e7f7      	b.n	800c1ac <__sfp+0x18>
 800c1bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c1c0:	b9d5      	cbnz	r5, 800c1f8 <__sfp+0x64>
 800c1c2:	4b16      	ldr	r3, [pc, #88]	; (800c21c <__sfp+0x88>)
 800c1c4:	60e3      	str	r3, [r4, #12]
 800c1c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c1ca:	6665      	str	r5, [r4, #100]	; 0x64
 800c1cc:	f7ff fc02 	bl	800b9d4 <__retarget_lock_init_recursive>
 800c1d0:	f7ff ff96 	bl	800c100 <__sfp_lock_release>
 800c1d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c1d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c1dc:	6025      	str	r5, [r4, #0]
 800c1de:	61a5      	str	r5, [r4, #24]
 800c1e0:	2208      	movs	r2, #8
 800c1e2:	4629      	mov	r1, r5
 800c1e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c1e8:	f7fd faa0 	bl	800972c <memset>
 800c1ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c1f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c1f4:	4620      	mov	r0, r4
 800c1f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1f8:	3468      	adds	r4, #104	; 0x68
 800c1fa:	e7d9      	b.n	800c1b0 <__sfp+0x1c>
 800c1fc:	2104      	movs	r1, #4
 800c1fe:	4638      	mov	r0, r7
 800c200:	f7ff ff62 	bl	800c0c8 <__sfmoreglue>
 800c204:	4604      	mov	r4, r0
 800c206:	6030      	str	r0, [r6, #0]
 800c208:	2800      	cmp	r0, #0
 800c20a:	d1d5      	bne.n	800c1b8 <__sfp+0x24>
 800c20c:	f7ff ff78 	bl	800c100 <__sfp_lock_release>
 800c210:	230c      	movs	r3, #12
 800c212:	603b      	str	r3, [r7, #0]
 800c214:	e7ee      	b.n	800c1f4 <__sfp+0x60>
 800c216:	bf00      	nop
 800c218:	0800c978 	.word	0x0800c978
 800c21c:	ffff0001 	.word	0xffff0001

0800c220 <_fwalk_reent>:
 800c220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c224:	4606      	mov	r6, r0
 800c226:	4688      	mov	r8, r1
 800c228:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c22c:	2700      	movs	r7, #0
 800c22e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c232:	f1b9 0901 	subs.w	r9, r9, #1
 800c236:	d505      	bpl.n	800c244 <_fwalk_reent+0x24>
 800c238:	6824      	ldr	r4, [r4, #0]
 800c23a:	2c00      	cmp	r4, #0
 800c23c:	d1f7      	bne.n	800c22e <_fwalk_reent+0xe>
 800c23e:	4638      	mov	r0, r7
 800c240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c244:	89ab      	ldrh	r3, [r5, #12]
 800c246:	2b01      	cmp	r3, #1
 800c248:	d907      	bls.n	800c25a <_fwalk_reent+0x3a>
 800c24a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c24e:	3301      	adds	r3, #1
 800c250:	d003      	beq.n	800c25a <_fwalk_reent+0x3a>
 800c252:	4629      	mov	r1, r5
 800c254:	4630      	mov	r0, r6
 800c256:	47c0      	blx	r8
 800c258:	4307      	orrs	r7, r0
 800c25a:	3568      	adds	r5, #104	; 0x68
 800c25c:	e7e9      	b.n	800c232 <_fwalk_reent+0x12>

0800c25e <__swhatbuf_r>:
 800c25e:	b570      	push	{r4, r5, r6, lr}
 800c260:	460e      	mov	r6, r1
 800c262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c266:	2900      	cmp	r1, #0
 800c268:	b096      	sub	sp, #88	; 0x58
 800c26a:	4614      	mov	r4, r2
 800c26c:	461d      	mov	r5, r3
 800c26e:	da08      	bge.n	800c282 <__swhatbuf_r+0x24>
 800c270:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c274:	2200      	movs	r2, #0
 800c276:	602a      	str	r2, [r5, #0]
 800c278:	061a      	lsls	r2, r3, #24
 800c27a:	d410      	bmi.n	800c29e <__swhatbuf_r+0x40>
 800c27c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c280:	e00e      	b.n	800c2a0 <__swhatbuf_r+0x42>
 800c282:	466a      	mov	r2, sp
 800c284:	f000 f902 	bl	800c48c <_fstat_r>
 800c288:	2800      	cmp	r0, #0
 800c28a:	dbf1      	blt.n	800c270 <__swhatbuf_r+0x12>
 800c28c:	9a01      	ldr	r2, [sp, #4]
 800c28e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c292:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c296:	425a      	negs	r2, r3
 800c298:	415a      	adcs	r2, r3
 800c29a:	602a      	str	r2, [r5, #0]
 800c29c:	e7ee      	b.n	800c27c <__swhatbuf_r+0x1e>
 800c29e:	2340      	movs	r3, #64	; 0x40
 800c2a0:	2000      	movs	r0, #0
 800c2a2:	6023      	str	r3, [r4, #0]
 800c2a4:	b016      	add	sp, #88	; 0x58
 800c2a6:	bd70      	pop	{r4, r5, r6, pc}

0800c2a8 <__smakebuf_r>:
 800c2a8:	898b      	ldrh	r3, [r1, #12]
 800c2aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c2ac:	079d      	lsls	r5, r3, #30
 800c2ae:	4606      	mov	r6, r0
 800c2b0:	460c      	mov	r4, r1
 800c2b2:	d507      	bpl.n	800c2c4 <__smakebuf_r+0x1c>
 800c2b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c2b8:	6023      	str	r3, [r4, #0]
 800c2ba:	6123      	str	r3, [r4, #16]
 800c2bc:	2301      	movs	r3, #1
 800c2be:	6163      	str	r3, [r4, #20]
 800c2c0:	b002      	add	sp, #8
 800c2c2:	bd70      	pop	{r4, r5, r6, pc}
 800c2c4:	ab01      	add	r3, sp, #4
 800c2c6:	466a      	mov	r2, sp
 800c2c8:	f7ff ffc9 	bl	800c25e <__swhatbuf_r>
 800c2cc:	9900      	ldr	r1, [sp, #0]
 800c2ce:	4605      	mov	r5, r0
 800c2d0:	4630      	mov	r0, r6
 800c2d2:	f7fd fa9f 	bl	8009814 <_malloc_r>
 800c2d6:	b948      	cbnz	r0, 800c2ec <__smakebuf_r+0x44>
 800c2d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2dc:	059a      	lsls	r2, r3, #22
 800c2de:	d4ef      	bmi.n	800c2c0 <__smakebuf_r+0x18>
 800c2e0:	f023 0303 	bic.w	r3, r3, #3
 800c2e4:	f043 0302 	orr.w	r3, r3, #2
 800c2e8:	81a3      	strh	r3, [r4, #12]
 800c2ea:	e7e3      	b.n	800c2b4 <__smakebuf_r+0xc>
 800c2ec:	4b0d      	ldr	r3, [pc, #52]	; (800c324 <__smakebuf_r+0x7c>)
 800c2ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800c2f0:	89a3      	ldrh	r3, [r4, #12]
 800c2f2:	6020      	str	r0, [r4, #0]
 800c2f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2f8:	81a3      	strh	r3, [r4, #12]
 800c2fa:	9b00      	ldr	r3, [sp, #0]
 800c2fc:	6163      	str	r3, [r4, #20]
 800c2fe:	9b01      	ldr	r3, [sp, #4]
 800c300:	6120      	str	r0, [r4, #16]
 800c302:	b15b      	cbz	r3, 800c31c <__smakebuf_r+0x74>
 800c304:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c308:	4630      	mov	r0, r6
 800c30a:	f000 f8d1 	bl	800c4b0 <_isatty_r>
 800c30e:	b128      	cbz	r0, 800c31c <__smakebuf_r+0x74>
 800c310:	89a3      	ldrh	r3, [r4, #12]
 800c312:	f023 0303 	bic.w	r3, r3, #3
 800c316:	f043 0301 	orr.w	r3, r3, #1
 800c31a:	81a3      	strh	r3, [r4, #12]
 800c31c:	89a0      	ldrh	r0, [r4, #12]
 800c31e:	4305      	orrs	r5, r0
 800c320:	81a5      	strh	r5, [r4, #12]
 800c322:	e7cd      	b.n	800c2c0 <__smakebuf_r+0x18>
 800c324:	0800c0bd 	.word	0x0800c0bd

0800c328 <_malloc_usable_size_r>:
 800c328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c32c:	1f18      	subs	r0, r3, #4
 800c32e:	2b00      	cmp	r3, #0
 800c330:	bfbc      	itt	lt
 800c332:	580b      	ldrlt	r3, [r1, r0]
 800c334:	18c0      	addlt	r0, r0, r3
 800c336:	4770      	bx	lr

0800c338 <_raise_r>:
 800c338:	291f      	cmp	r1, #31
 800c33a:	b538      	push	{r3, r4, r5, lr}
 800c33c:	4604      	mov	r4, r0
 800c33e:	460d      	mov	r5, r1
 800c340:	d904      	bls.n	800c34c <_raise_r+0x14>
 800c342:	2316      	movs	r3, #22
 800c344:	6003      	str	r3, [r0, #0]
 800c346:	f04f 30ff 	mov.w	r0, #4294967295
 800c34a:	bd38      	pop	{r3, r4, r5, pc}
 800c34c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c34e:	b112      	cbz	r2, 800c356 <_raise_r+0x1e>
 800c350:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c354:	b94b      	cbnz	r3, 800c36a <_raise_r+0x32>
 800c356:	4620      	mov	r0, r4
 800c358:	f000 f830 	bl	800c3bc <_getpid_r>
 800c35c:	462a      	mov	r2, r5
 800c35e:	4601      	mov	r1, r0
 800c360:	4620      	mov	r0, r4
 800c362:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c366:	f000 b817 	b.w	800c398 <_kill_r>
 800c36a:	2b01      	cmp	r3, #1
 800c36c:	d00a      	beq.n	800c384 <_raise_r+0x4c>
 800c36e:	1c59      	adds	r1, r3, #1
 800c370:	d103      	bne.n	800c37a <_raise_r+0x42>
 800c372:	2316      	movs	r3, #22
 800c374:	6003      	str	r3, [r0, #0]
 800c376:	2001      	movs	r0, #1
 800c378:	e7e7      	b.n	800c34a <_raise_r+0x12>
 800c37a:	2400      	movs	r4, #0
 800c37c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c380:	4628      	mov	r0, r5
 800c382:	4798      	blx	r3
 800c384:	2000      	movs	r0, #0
 800c386:	e7e0      	b.n	800c34a <_raise_r+0x12>

0800c388 <raise>:
 800c388:	4b02      	ldr	r3, [pc, #8]	; (800c394 <raise+0xc>)
 800c38a:	4601      	mov	r1, r0
 800c38c:	6818      	ldr	r0, [r3, #0]
 800c38e:	f7ff bfd3 	b.w	800c338 <_raise_r>
 800c392:	bf00      	nop
 800c394:	200023fc 	.word	0x200023fc

0800c398 <_kill_r>:
 800c398:	b538      	push	{r3, r4, r5, lr}
 800c39a:	4d07      	ldr	r5, [pc, #28]	; (800c3b8 <_kill_r+0x20>)
 800c39c:	2300      	movs	r3, #0
 800c39e:	4604      	mov	r4, r0
 800c3a0:	4608      	mov	r0, r1
 800c3a2:	4611      	mov	r1, r2
 800c3a4:	602b      	str	r3, [r5, #0]
 800c3a6:	f7f8 fd3f 	bl	8004e28 <_kill>
 800c3aa:	1c43      	adds	r3, r0, #1
 800c3ac:	d102      	bne.n	800c3b4 <_kill_r+0x1c>
 800c3ae:	682b      	ldr	r3, [r5, #0]
 800c3b0:	b103      	cbz	r3, 800c3b4 <_kill_r+0x1c>
 800c3b2:	6023      	str	r3, [r4, #0]
 800c3b4:	bd38      	pop	{r3, r4, r5, pc}
 800c3b6:	bf00      	nop
 800c3b8:	200034e8 	.word	0x200034e8

0800c3bc <_getpid_r>:
 800c3bc:	f7f8 bd2c 	b.w	8004e18 <_getpid>

0800c3c0 <__sread>:
 800c3c0:	b510      	push	{r4, lr}
 800c3c2:	460c      	mov	r4, r1
 800c3c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3c8:	f000 f894 	bl	800c4f4 <_read_r>
 800c3cc:	2800      	cmp	r0, #0
 800c3ce:	bfab      	itete	ge
 800c3d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c3d2:	89a3      	ldrhlt	r3, [r4, #12]
 800c3d4:	181b      	addge	r3, r3, r0
 800c3d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c3da:	bfac      	ite	ge
 800c3dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800c3de:	81a3      	strhlt	r3, [r4, #12]
 800c3e0:	bd10      	pop	{r4, pc}

0800c3e2 <__swrite>:
 800c3e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3e6:	461f      	mov	r7, r3
 800c3e8:	898b      	ldrh	r3, [r1, #12]
 800c3ea:	05db      	lsls	r3, r3, #23
 800c3ec:	4605      	mov	r5, r0
 800c3ee:	460c      	mov	r4, r1
 800c3f0:	4616      	mov	r6, r2
 800c3f2:	d505      	bpl.n	800c400 <__swrite+0x1e>
 800c3f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3f8:	2302      	movs	r3, #2
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	f000 f868 	bl	800c4d0 <_lseek_r>
 800c400:	89a3      	ldrh	r3, [r4, #12]
 800c402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c406:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c40a:	81a3      	strh	r3, [r4, #12]
 800c40c:	4632      	mov	r2, r6
 800c40e:	463b      	mov	r3, r7
 800c410:	4628      	mov	r0, r5
 800c412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c416:	f000 b817 	b.w	800c448 <_write_r>

0800c41a <__sseek>:
 800c41a:	b510      	push	{r4, lr}
 800c41c:	460c      	mov	r4, r1
 800c41e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c422:	f000 f855 	bl	800c4d0 <_lseek_r>
 800c426:	1c43      	adds	r3, r0, #1
 800c428:	89a3      	ldrh	r3, [r4, #12]
 800c42a:	bf15      	itete	ne
 800c42c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c42e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c432:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c436:	81a3      	strheq	r3, [r4, #12]
 800c438:	bf18      	it	ne
 800c43a:	81a3      	strhne	r3, [r4, #12]
 800c43c:	bd10      	pop	{r4, pc}

0800c43e <__sclose>:
 800c43e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c442:	f000 b813 	b.w	800c46c <_close_r>
	...

0800c448 <_write_r>:
 800c448:	b538      	push	{r3, r4, r5, lr}
 800c44a:	4d07      	ldr	r5, [pc, #28]	; (800c468 <_write_r+0x20>)
 800c44c:	4604      	mov	r4, r0
 800c44e:	4608      	mov	r0, r1
 800c450:	4611      	mov	r1, r2
 800c452:	2200      	movs	r2, #0
 800c454:	602a      	str	r2, [r5, #0]
 800c456:	461a      	mov	r2, r3
 800c458:	f7f8 fd1d 	bl	8004e96 <_write>
 800c45c:	1c43      	adds	r3, r0, #1
 800c45e:	d102      	bne.n	800c466 <_write_r+0x1e>
 800c460:	682b      	ldr	r3, [r5, #0]
 800c462:	b103      	cbz	r3, 800c466 <_write_r+0x1e>
 800c464:	6023      	str	r3, [r4, #0]
 800c466:	bd38      	pop	{r3, r4, r5, pc}
 800c468:	200034e8 	.word	0x200034e8

0800c46c <_close_r>:
 800c46c:	b538      	push	{r3, r4, r5, lr}
 800c46e:	4d06      	ldr	r5, [pc, #24]	; (800c488 <_close_r+0x1c>)
 800c470:	2300      	movs	r3, #0
 800c472:	4604      	mov	r4, r0
 800c474:	4608      	mov	r0, r1
 800c476:	602b      	str	r3, [r5, #0]
 800c478:	f7f8 fd29 	bl	8004ece <_close>
 800c47c:	1c43      	adds	r3, r0, #1
 800c47e:	d102      	bne.n	800c486 <_close_r+0x1a>
 800c480:	682b      	ldr	r3, [r5, #0]
 800c482:	b103      	cbz	r3, 800c486 <_close_r+0x1a>
 800c484:	6023      	str	r3, [r4, #0]
 800c486:	bd38      	pop	{r3, r4, r5, pc}
 800c488:	200034e8 	.word	0x200034e8

0800c48c <_fstat_r>:
 800c48c:	b538      	push	{r3, r4, r5, lr}
 800c48e:	4d07      	ldr	r5, [pc, #28]	; (800c4ac <_fstat_r+0x20>)
 800c490:	2300      	movs	r3, #0
 800c492:	4604      	mov	r4, r0
 800c494:	4608      	mov	r0, r1
 800c496:	4611      	mov	r1, r2
 800c498:	602b      	str	r3, [r5, #0]
 800c49a:	f7f8 fd24 	bl	8004ee6 <_fstat>
 800c49e:	1c43      	adds	r3, r0, #1
 800c4a0:	d102      	bne.n	800c4a8 <_fstat_r+0x1c>
 800c4a2:	682b      	ldr	r3, [r5, #0]
 800c4a4:	b103      	cbz	r3, 800c4a8 <_fstat_r+0x1c>
 800c4a6:	6023      	str	r3, [r4, #0]
 800c4a8:	bd38      	pop	{r3, r4, r5, pc}
 800c4aa:	bf00      	nop
 800c4ac:	200034e8 	.word	0x200034e8

0800c4b0 <_isatty_r>:
 800c4b0:	b538      	push	{r3, r4, r5, lr}
 800c4b2:	4d06      	ldr	r5, [pc, #24]	; (800c4cc <_isatty_r+0x1c>)
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	4604      	mov	r4, r0
 800c4b8:	4608      	mov	r0, r1
 800c4ba:	602b      	str	r3, [r5, #0]
 800c4bc:	f7f8 fd23 	bl	8004f06 <_isatty>
 800c4c0:	1c43      	adds	r3, r0, #1
 800c4c2:	d102      	bne.n	800c4ca <_isatty_r+0x1a>
 800c4c4:	682b      	ldr	r3, [r5, #0]
 800c4c6:	b103      	cbz	r3, 800c4ca <_isatty_r+0x1a>
 800c4c8:	6023      	str	r3, [r4, #0]
 800c4ca:	bd38      	pop	{r3, r4, r5, pc}
 800c4cc:	200034e8 	.word	0x200034e8

0800c4d0 <_lseek_r>:
 800c4d0:	b538      	push	{r3, r4, r5, lr}
 800c4d2:	4d07      	ldr	r5, [pc, #28]	; (800c4f0 <_lseek_r+0x20>)
 800c4d4:	4604      	mov	r4, r0
 800c4d6:	4608      	mov	r0, r1
 800c4d8:	4611      	mov	r1, r2
 800c4da:	2200      	movs	r2, #0
 800c4dc:	602a      	str	r2, [r5, #0]
 800c4de:	461a      	mov	r2, r3
 800c4e0:	f7f8 fd1c 	bl	8004f1c <_lseek>
 800c4e4:	1c43      	adds	r3, r0, #1
 800c4e6:	d102      	bne.n	800c4ee <_lseek_r+0x1e>
 800c4e8:	682b      	ldr	r3, [r5, #0]
 800c4ea:	b103      	cbz	r3, 800c4ee <_lseek_r+0x1e>
 800c4ec:	6023      	str	r3, [r4, #0]
 800c4ee:	bd38      	pop	{r3, r4, r5, pc}
 800c4f0:	200034e8 	.word	0x200034e8

0800c4f4 <_read_r>:
 800c4f4:	b538      	push	{r3, r4, r5, lr}
 800c4f6:	4d07      	ldr	r5, [pc, #28]	; (800c514 <_read_r+0x20>)
 800c4f8:	4604      	mov	r4, r0
 800c4fa:	4608      	mov	r0, r1
 800c4fc:	4611      	mov	r1, r2
 800c4fe:	2200      	movs	r2, #0
 800c500:	602a      	str	r2, [r5, #0]
 800c502:	461a      	mov	r2, r3
 800c504:	f7f8 fcaa 	bl	8004e5c <_read>
 800c508:	1c43      	adds	r3, r0, #1
 800c50a:	d102      	bne.n	800c512 <_read_r+0x1e>
 800c50c:	682b      	ldr	r3, [r5, #0]
 800c50e:	b103      	cbz	r3, 800c512 <_read_r+0x1e>
 800c510:	6023      	str	r3, [r4, #0]
 800c512:	bd38      	pop	{r3, r4, r5, pc}
 800c514:	200034e8 	.word	0x200034e8

0800c518 <round>:
 800c518:	ec51 0b10 	vmov	r0, r1, d0
 800c51c:	b570      	push	{r4, r5, r6, lr}
 800c51e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800c522:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800c526:	2c13      	cmp	r4, #19
 800c528:	ee10 2a10 	vmov	r2, s0
 800c52c:	460b      	mov	r3, r1
 800c52e:	dc19      	bgt.n	800c564 <round+0x4c>
 800c530:	2c00      	cmp	r4, #0
 800c532:	da09      	bge.n	800c548 <round+0x30>
 800c534:	3401      	adds	r4, #1
 800c536:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800c53a:	d103      	bne.n	800c544 <round+0x2c>
 800c53c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c540:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c544:	2200      	movs	r2, #0
 800c546:	e028      	b.n	800c59a <round+0x82>
 800c548:	4d15      	ldr	r5, [pc, #84]	; (800c5a0 <round+0x88>)
 800c54a:	4125      	asrs	r5, r4
 800c54c:	ea01 0605 	and.w	r6, r1, r5
 800c550:	4332      	orrs	r2, r6
 800c552:	d00e      	beq.n	800c572 <round+0x5a>
 800c554:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c558:	fa42 f404 	asr.w	r4, r2, r4
 800c55c:	4423      	add	r3, r4
 800c55e:	ea23 0305 	bic.w	r3, r3, r5
 800c562:	e7ef      	b.n	800c544 <round+0x2c>
 800c564:	2c33      	cmp	r4, #51	; 0x33
 800c566:	dd07      	ble.n	800c578 <round+0x60>
 800c568:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800c56c:	d101      	bne.n	800c572 <round+0x5a>
 800c56e:	f7f3 fead 	bl	80002cc <__adddf3>
 800c572:	ec41 0b10 	vmov	d0, r0, r1
 800c576:	bd70      	pop	{r4, r5, r6, pc}
 800c578:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800c57c:	f04f 35ff 	mov.w	r5, #4294967295
 800c580:	40f5      	lsrs	r5, r6
 800c582:	4228      	tst	r0, r5
 800c584:	d0f5      	beq.n	800c572 <round+0x5a>
 800c586:	2101      	movs	r1, #1
 800c588:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800c58c:	fa01 f404 	lsl.w	r4, r1, r4
 800c590:	1912      	adds	r2, r2, r4
 800c592:	bf28      	it	cs
 800c594:	185b      	addcs	r3, r3, r1
 800c596:	ea22 0205 	bic.w	r2, r2, r5
 800c59a:	4619      	mov	r1, r3
 800c59c:	4610      	mov	r0, r2
 800c59e:	e7e8      	b.n	800c572 <round+0x5a>
 800c5a0:	000fffff 	.word	0x000fffff

0800c5a4 <_init>:
 800c5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5a6:	bf00      	nop
 800c5a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5aa:	bc08      	pop	{r3}
 800c5ac:	469e      	mov	lr, r3
 800c5ae:	4770      	bx	lr

0800c5b0 <_fini>:
 800c5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b2:	bf00      	nop
 800c5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5b6:	bc08      	pop	{r3}
 800c5b8:	469e      	mov	lr, r3
 800c5ba:	4770      	bx	lr
