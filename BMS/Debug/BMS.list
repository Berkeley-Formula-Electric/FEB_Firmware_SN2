
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b53c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  0800b710  0800b710  0001b710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd1c  0800bd1c  000225b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd1c  0800bd1c  0001bd1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd24  0800bd24  000225b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd24  0800bd24  0001bd24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd28  0800bd28  0001bd28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000025b4  20000000  0800bd2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  200025b4  0800e2e0  000225b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002a30  0800e2e0  00022a30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000225b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019fab  00000000  00000000  000225e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003885  00000000  00000000  0003c58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b0  00000000  00000000  0003fe18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001530  00000000  00000000  000414c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000265f0  00000000  00000000  000429f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c31c  00000000  00000000  00068fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8cb0  00000000  00000000  00085304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015dfb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070d0  00000000  00000000  0015e004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200025b4 	.word	0x200025b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b6f4 	.word	0x0800b6f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200025b8 	.word	0x200025b8
 800020c:	0800b6f4 	.word	0x0800b6f4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b974 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <FEB_BMS_Precharge_Open>:
extern CAN_HandleTypeDef hcan1;
extern UART_HandleTypeDef huart2;

// ********************************** Functions **********************************

void FEB_BMS_Precharge_Open(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <FEB_BMS_Precharge_Open+0x14>)
 8000fd6:	f004 fdd3 	bl	8005b80 <HAL_GPIO_WritePin>
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40020800 	.word	0x40020800

08000fe4 <FEB_BMS_Precharge_Close>:

void FEB_BMS_Precharge_Close(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2104      	movs	r1, #4
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <FEB_BMS_Precharge_Close+0x14>)
 8000fee:	f004 fdc7 	bl	8005b80 <HAL_GPIO_WritePin>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40020800 	.word	0x40020800

08000ffc <FEB_BMS_Shutdown_Startup>:
extern CAN_HandleTypeDef hcan1;
extern UART_HandleTypeDef huart2;

// ********************************** Functions **********************************

void FEB_BMS_Shutdown_Startup(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	2102      	movs	r1, #2
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <FEB_BMS_Shutdown_Startup+0x14>)
 8001006:	f004 fdbb 	bl	8005b80 <HAL_GPIO_WritePin>
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40020800 	.word	0x40020800

08001014 <FEB_BMS_Shutdown_Initiate>:

void FEB_BMS_Shutdown_Initiate(void) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b0a0      	sub	sp, #128	; 0x80
 8001018:	af00      	add	r7, sp, #0
	// Shutdown Circuit
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	2102      	movs	r1, #2
 800101e:	480a      	ldr	r0, [pc, #40]	; (8001048 <FEB_BMS_Shutdown_Initiate+0x34>)
 8001020:	f004 fdae 	bl	8005b80 <HAL_GPIO_WritePin>

	// Broadcast Message
	char str[128];
	sprintf(str, "Shutdown!\n");
 8001024:	463b      	mov	r3, r7
 8001026:	4909      	ldr	r1, [pc, #36]	; (800104c <FEB_BMS_Shutdown_Initiate+0x38>)
 8001028:	4618      	mov	r0, r3
 800102a:	f008 f989 	bl	8009340 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 100);
 800102e:	463b      	mov	r3, r7
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff f8ed 	bl	8000210 <strlen>
 8001036:	4603      	mov	r3, r0
 8001038:	b29a      	uxth	r2, r3
 800103a:	4639      	mov	r1, r7
 800103c:	2364      	movs	r3, #100	; 0x64
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <FEB_BMS_Shutdown_Initiate+0x3c>)
 8001040:	f007 f86d 	bl	800811e <HAL_UART_Transmit>
	if (FEB_LTC6811_Balance_Cells_State == 1) {
		FEB_LTC6811_Clear_Balance_Cells();
	}

	// Do nothing
	while (1) {}
 8001044:	e7fe      	b.n	8001044 <FEB_BMS_Shutdown_Initiate+0x30>
 8001046:	bf00      	nop
 8001048:	40020800 	.word	0x40020800
 800104c:	0800b710 	.word	0x0800b710
 8001050:	200029d0 	.word	0x200029d0

08001054 <FEB_BMS_State_Validate>:

#include "FEB_BMS_State.h"

// ********************************** Functions **********************************

void FEB_BMS_State_Validate(void) {
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
	if (FEB_CAN_CHARGER_START_CHARGE == 1 && FEB_LTC6811_Balance_Cells_State == 1) {
		FEB_BMS_Shutdown_Initiate();
	}
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <FEB_CAN_Init>:
uint8_t FEB_CAN_RxData[8];
uint32_t FEB_CAN_TxMailbox;

// ******************** CAN ********************

void FEB_CAN_Init() {
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	FEB_CAN_Filter_Config();
 8001068:	f000 f814 	bl	8001094 <FEB_CAN_Filter_Config>
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800106c:	4807      	ldr	r0, [pc, #28]	; (800108c <FEB_CAN_Init+0x28>)
 800106e:	f003 ff35 	bl	8004edc <HAL_CAN_Start>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <FEB_CAN_Init+0x18>
		FEB_BMS_Shutdown_Initiate();
 8001078:	f7ff ffcc 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
	}
	HAL_CAN_ActivateNotification(&hcan1, FEB_CAN_FIFO_Interrupt);
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <FEB_CAN_Init+0x2c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	4802      	ldr	r0, [pc, #8]	; (800108c <FEB_CAN_Init+0x28>)
 8001084:	f004 f880 	bl	8005188 <HAL_CAN_ActivateNotification>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20002898 	.word	0x20002898
 8001090:	20000000 	.word	0x20000000

08001094 <FEB_CAN_Filter_Config>:

void FEB_CAN_Filter_Config() {
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
	uint8_t bank = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	71fb      	strb	r3, [r7, #7]
	bank = FEB_CAN_IVT_Filter_Config(&hcan1, FEB_CAN_FIFO_Assignment, bank);
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <FEB_CAN_Filter_Config+0x38>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	79fa      	ldrb	r2, [r7, #7]
 80010a4:	4619      	mov	r1, r3
 80010a6:	480a      	ldr	r0, [pc, #40]	; (80010d0 <FEB_CAN_Filter_Config+0x3c>)
 80010a8:	f000 f8ea 	bl	8001280 <FEB_CAN_IVT_Filter_Config>
 80010ac:	4603      	mov	r3, r0
 80010ae:	71fb      	strb	r3, [r7, #7]
	bank = FEB_CAN_Charger_Filter_Config(&hcan1, FEB_CAN_FIFO_Assignment, bank);
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <FEB_CAN_Filter_Config+0x38>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	79fa      	ldrb	r2, [r7, #7]
 80010b6:	4619      	mov	r1, r3
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <FEB_CAN_Filter_Config+0x3c>)
 80010ba:	f000 f834 	bl	8001126 <FEB_CAN_Charger_Filter_Config>
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200025ec 	.word	0x200025ec
 80010d0:	20002898 	.word	0x20002898

080010d4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, FEB_CAN_FIFO_Assignment, &FEB_CAN_RxHeader, FEB_CAN_RxData) == HAL_OK) {
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80010e4:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f003 ff3c 	bl	8004f64 <HAL_CAN_GetRxMessage>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d107      	bne.n	8001102 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
		FEB_CAN_IVT_Store_Msg(&FEB_CAN_RxHeader, FEB_CAN_RxData);
 80010f2:	4907      	ldr	r1, [pc, #28]	; (8001110 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80010f4:	4807      	ldr	r0, [pc, #28]	; (8001114 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80010f6:	f000 f903 	bl	8001300 <FEB_CAN_IVT_Store_Msg>
		FEB_CAN_Charger_Store_Msg(&FEB_CAN_RxHeader, FEB_CAN_RxData);
 80010fa:	4905      	ldr	r1, [pc, #20]	; (8001110 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80010fe:	f000 f845 	bl	800118c <FEB_CAN_Charger_Store_Msg>
	}
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200025ec 	.word	0x200025ec
 8001110:	200025f0 	.word	0x200025f0
 8001114:	200025d0 	.word	0x200025d0

08001118 <FEB_CAN_Charger_Init>:

// ********************************** Functions **********************************

// ******************** Startup ********************

void FEB_CAN_Charger_Init() {
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
	if (FEB_CAN_CHARGER_START_CHARGE == 0) {
		return;
 800111c:	bf00      	nop
	FEB_CAN_Charger_BMS_Message.max_voltage = (uint16_t) (MAX_VOLTAGE * CELLS_PER_BANK * NUM_BANKS * 10);
	FEB_CAN_Charger_BMS_Message.max_current = (uint16_t) (MAX_CHARGING_CURRENT * 10);
	FEB_CAN_Charger_BMS_Message.control = 0;

	FEB_CAN_Charger_State_Bool = 0;
}
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <FEB_CAN_Charger_Filter_Config>:

// ******************** CAN ********************

uint8_t FEB_CAN_Charger_Filter_Config(CAN_HandleTypeDef* hcan, uint8_t FIFO_Assignment, uint8_t bank) {
 8001126:	b580      	push	{r7, lr}
 8001128:	b08c      	sub	sp, #48	; 0x30
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	460b      	mov	r3, r1
 8001130:	70fb      	strb	r3, [r7, #3]
 8001132:	4613      	mov	r3, r2
 8001134:	70bb      	strb	r3, [r7, #2]
	CAN_FilterTypeDef my_can_filter_config;

	my_can_filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8001136:	2301      	movs	r3, #1
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
	my_can_filter_config.FilterBank = bank;
 800113a:	78bb      	ldrb	r3, [r7, #2]
 800113c:	61fb      	str	r3, [r7, #28]
	my_can_filter_config.FilterFIFOAssignment = FIFO_Assignment;
 800113e:	78fb      	ldrb	r3, [r7, #3]
 8001140:	61bb      	str	r3, [r7, #24]
	my_can_filter_config.FilterIdHigh = FEB_CAN_CHARGER_CHARGER_ID >> 13; 			// First 16 bits
 8001142:	f24c 73fa 	movw	r3, #51194	; 0xc7fa
 8001146:	60bb      	str	r3, [r7, #8]
	my_can_filter_config.FilterIdLow = (FEB_CAN_CHARGER_CHARGER_ID & 0x1FFF) << 3;	// Last 13 bits
 8001148:	f248 7328 	movw	r3, #34600	; 0x8728
 800114c:	60fb      	str	r3, [r7, #12]
	my_can_filter_config.FilterMaskIdHigh = 0xFFFF; 								// Mask first 16 bits
 800114e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001152:	613b      	str	r3, [r7, #16]
	my_can_filter_config.FilterMaskIdLow = 0xFFF8;									// Mask last 13 bits
 8001154:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001158:	617b      	str	r3, [r7, #20]
	my_can_filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
	my_can_filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 800115e:	2301      	movs	r3, #1
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
	my_can_filter_config.SlaveStartFilterBank = 27;
 8001162:	231b      	movs	r3, #27
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_CAN_ConfigFilter(hcan, &my_can_filter_config)) {
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	4619      	mov	r1, r3
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f003 fdd5 	bl	8004d1c <HAL_CAN_ConfigFilter>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <FEB_CAN_Charger_Filter_Config+0x56>
		Error_Handler();
 8001178:	f003 f8d6 	bl	8004328 <Error_Handler>
	}

	return ++bank;
 800117c:	78bb      	ldrb	r3, [r7, #2]
 800117e:	3301      	adds	r3, #1
 8001180:	70bb      	strb	r3, [r7, #2]
 8001182:	78bb      	ldrb	r3, [r7, #2]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3730      	adds	r7, #48	; 0x30
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <FEB_CAN_Charger_Store_Msg>:
	if (HAL_CAN_AddTxMessage(hcan, &FEB_CAN_TxHeader, FEB_CAN_TxData, &FEB_CAN_TxMailbox) != HAL_OK) {
	  Error_Handler();
	}
}

void FEB_CAN_Charger_Store_Msg(CAN_RxHeaderTypeDef* pHeader, uint8_t RxData[]) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
	switch(pHeader->ExtId) {
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	4a17      	ldr	r2, [pc, #92]	; (80011f8 <FEB_CAN_Charger_Store_Msg+0x6c>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d127      	bne.n	80011f0 <FEB_CAN_Charger_Store_Msg+0x64>
	    	case FEB_CAN_CHARGER_CHARGER_ID:
	    		FEB_CAN_Charger_Charger_Message.operating_voltage = (RxData[0] << 8) + RxData[1];
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	4413      	add	r3, r2
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <FEB_CAN_Charger_Store_Msg+0x70>)
 80011b8:	801a      	strh	r2, [r3, #0]
	    		FEB_CAN_Charger_Charger_Message.operating_current = (RxData[2] << 8) + RxData[3];
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	3302      	adds	r3, #2
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	3303      	adds	r3, #3
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	4413      	add	r3, r2
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <FEB_CAN_Charger_Store_Msg+0x70>)
 80011d4:	805a      	strh	r2, [r3, #2]
	    		FEB_CAN_Charger_Charger_Message.status = RxData[4];
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	3304      	adds	r3, #4
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <FEB_CAN_Charger_Store_Msg+0x70>)
 80011e0:	809a      	strh	r2, [r3, #4]
				FEB_CAN_Charger_Validate_Status(RxData[4]);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	3304      	adds	r3, #4
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 f809 	bl	8001200 <FEB_CAN_Charger_Validate_Status>
				break;
 80011ee:	bf00      	nop
	}
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	18ff50e5 	.word	0x18ff50e5
 80011fc:	200025f8 	.word	0x200025f8

08001200 <FEB_CAN_Charger_Validate_Status>:



// ******************** Charger Process Data ********************

void FEB_CAN_Charger_Validate_Status(uint8_t status) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
	// Failure bits, 0 (no error), 1 (error)
	uint8_t hardware_failure 			= (status >> 7) & 0b1;
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	09db      	lsrs	r3, r3, #7
 800120e:	73fb      	strb	r3, [r7, #15]
	uint8_t temperature_failure 		= (status >> 6) & 0b1;
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	099b      	lsrs	r3, r3, #6
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	73bb      	strb	r3, [r7, #14]
	uint8_t input_voltage_failure 		= (status >> 5) & 0b1;
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	b2db      	uxtb	r3, r3
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	737b      	strb	r3, [r7, #13]
	uint8_t starting_state_failure 		= (status >> 4) & 0b1;
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	091b      	lsrs	r3, r3, #4
 800122c:	b2db      	uxtb	r3, r3
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	733b      	strb	r3, [r7, #12]
	uint8_t communication_state_failure = (status >> 3) & 0b1;
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	08db      	lsrs	r3, r3, #3
 8001238:	b2db      	uxtb	r3, r3
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	72fb      	strb	r3, [r7, #11]

	if (hardware_failure == 1 			||
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d00b      	beq.n	800125e <FEB_CAN_Charger_Validate_Status+0x5e>
 8001246:	7bbb      	ldrb	r3, [r7, #14]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d008      	beq.n	800125e <FEB_CAN_Charger_Validate_Status+0x5e>
		temperature_failure == 1 		||
 800124c:	7b7b      	ldrb	r3, [r7, #13]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d005      	beq.n	800125e <FEB_CAN_Charger_Validate_Status+0x5e>
		input_voltage_failure == 1		||
 8001252:	7b3b      	ldrb	r3, [r7, #12]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d002      	beq.n	800125e <FEB_CAN_Charger_Validate_Status+0x5e>
		starting_state_failure == 1		||
 8001258:	7afb      	ldrb	r3, [r7, #11]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d101      	bne.n	8001262 <FEB_CAN_Charger_Validate_Status+0x62>
		communication_state_failure == 1) {
		FEB_BMS_Shutdown_Initiate();
 800125e:	f7ff fed9 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
	}
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <FEB_CAN_Charger_Process>:

void FEB_CAN_Charger_Process(CAN_HandleTypeDef* hcan) {
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
	if (FEB_CAN_CHARGER_START_CHARGE == 0 || FEB_CAN_Charger_State_Bool == 1) {
		return;
 8001272:	bf00      	nop
	if (FEB_LTC6811_Cells_Charged() == 1) {
		FEB_CAN_Charger_Stop_Charge(hcan);
	} else {
		FEB_CAN_Charger_Transmit(hcan);
	}
}
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <FEB_CAN_IVT_Filter_Config>:
// ********************************** Functions **********************************


// ******************** CAN ********************

uint8_t FEB_CAN_IVT_Filter_Config(CAN_HandleTypeDef* hcan, uint8_t FIFO_Assignment, uint8_t bank) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b08e      	sub	sp, #56	; 0x38
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	70fb      	strb	r3, [r7, #3]
 800128c:	4613      	mov	r3, r2
 800128e:	70bb      	strb	r3, [r7, #2]
	for (int i = 0; i < 4; i++, bank++) {
 8001290:	2300      	movs	r3, #0
 8001292:	637b      	str	r3, [r7, #52]	; 0x34
 8001294:	e029      	b.n	80012ea <FEB_CAN_IVT_Filter_Config+0x6a>
		CAN_FilterTypeDef filter_config;

		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8001296:	2301      	movs	r3, #1
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
		filter_config.FilterBank = bank;
 800129a:	78bb      	ldrb	r3, [r7, #2]
 800129c:	623b      	str	r3, [r7, #32]
		filter_config.FilterFIFOAssignment = FIFO_Assignment;
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	61fb      	str	r3, [r7, #28]
		filter_config.FilterIdHigh = FEB_CAN_IVT_Filter_ID_Arr[i] << 5;
 80012a2:	4a16      	ldr	r2, [pc, #88]	; (80012fc <FEB_CAN_IVT_Filter_Config+0x7c>)
 80012a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012aa:	015b      	lsls	r3, r3, #5
 80012ac:	60fb      	str	r3, [r7, #12]
		filter_config.FilterIdLow = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
		filter_config.FilterMaskIdHigh = 0x7FF << 5;
 80012b2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80012b6:	617b      	str	r3, [r7, #20]
		filter_config.FilterMaskIdLow = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 80012c0:	2301      	movs	r3, #1
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.SlaveStartFilterBank = 27;
 80012c4:	231b      	movs	r3, #27
 80012c6:	633b      	str	r3, [r7, #48]	; 0x30

		if(HAL_CAN_ConfigFilter(hcan, &filter_config)) {
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	4619      	mov	r1, r3
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f003 fd24 	bl	8004d1c <HAL_CAN_ConfigFilter>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <FEB_CAN_IVT_Filter_Config+0x5e>
			Error_Handler();
 80012da:	f003 f825 	bl	8004328 <Error_Handler>
	for (int i = 0; i < 4; i++, bank++) {
 80012de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e0:	3301      	adds	r3, #1
 80012e2:	637b      	str	r3, [r7, #52]	; 0x34
 80012e4:	78bb      	ldrb	r3, [r7, #2]
 80012e6:	3301      	adds	r3, #1
 80012e8:	70bb      	strb	r3, [r7, #2]
 80012ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	ddd2      	ble.n	8001296 <FEB_CAN_IVT_Filter_Config+0x16>
		}
	}
	return bank;
 80012f0:	78bb      	ldrb	r3, [r7, #2]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3738      	adds	r7, #56	; 0x38
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000004 	.word	0x20000004

08001300 <FEB_CAN_IVT_Store_Msg>:

void FEB_CAN_IVT_Store_Msg(CAN_RxHeaderTypeDef* pHeader, uint8_t RxData[]) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
	uint32_t value;
    switch(pHeader->StdId) {
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f2a3 5321 	subw	r3, r3, #1313	; 0x521
 8001312:	2b03      	cmp	r3, #3
 8001314:	d87e      	bhi.n	8001414 <FEB_CAN_IVT_Store_Msg+0x114>
 8001316:	a201      	add	r2, pc, #4	; (adr r2, 800131c <FEB_CAN_IVT_Store_Msg+0x1c>)
 8001318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131c:	0800132d 	.word	0x0800132d
 8001320:	08001367 	.word	0x08001367
 8001324:	080013a1 	.word	0x080013a1
 8001328:	080013db 	.word	0x080013db
    	case FEB_CAN_IVT_CURRENT_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	3302      	adds	r3, #2
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	061a      	lsls	r2, r3, #24
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	3303      	adds	r3, #3
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	041b      	lsls	r3, r3, #16
 800133c:	441a      	add	r2, r3
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	3304      	adds	r3, #4
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	4413      	add	r3, r2
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	3205      	adds	r2, #5
 800134c:	7812      	ldrb	r2, [r2, #0]
 800134e:	4413      	add	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
    	    FEB_CAN_IVT_MESSAGE.IVT_Current = unsignedToSignedLong(value);
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f000 f8f2 	bl	800153c <unsignedToSignedLong>
 8001358:	4603      	mov	r3, r0
 800135a:	4a30      	ldr	r2, [pc, #192]	; (800141c <FEB_CAN_IVT_Store_Msg+0x11c>)
 800135c:	6013      	str	r3, [r2, #0]
    	    FEB_CAN_IVT_FLAG.IVT_Current = 1;
 800135e:	4b30      	ldr	r3, [pc, #192]	; (8001420 <FEB_CAN_IVT_Store_Msg+0x120>)
 8001360:	2201      	movs	r2, #1
 8001362:	701a      	strb	r2, [r3, #0]
    		break;
 8001364:	e056      	b.n	8001414 <FEB_CAN_IVT_Store_Msg+0x114>
    	case FEB_CAN_IVT_VOLTAGE1_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	3302      	adds	r3, #2
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	061a      	lsls	r2, r3, #24
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	3303      	adds	r3, #3
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	041b      	lsls	r3, r3, #16
 8001376:	441a      	add	r2, r3
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	3304      	adds	r3, #4
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	4413      	add	r3, r2
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	3205      	adds	r2, #5
 8001386:	7812      	ldrb	r2, [r2, #0]
 8001388:	4413      	add	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]
    	    FEB_CAN_IVT_MESSAGE.IVT_Voltage1 = unsignedToSignedLong(value);
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f000 f8d5 	bl	800153c <unsignedToSignedLong>
 8001392:	4603      	mov	r3, r0
 8001394:	4a21      	ldr	r2, [pc, #132]	; (800141c <FEB_CAN_IVT_Store_Msg+0x11c>)
 8001396:	6053      	str	r3, [r2, #4]
    	    FEB_CAN_IVT_FLAG.IVT_Voltage1 = 1;
 8001398:	4b21      	ldr	r3, [pc, #132]	; (8001420 <FEB_CAN_IVT_Store_Msg+0x120>)
 800139a:	2201      	movs	r2, #1
 800139c:	705a      	strb	r2, [r3, #1]
    		break;
 800139e:	e039      	b.n	8001414 <FEB_CAN_IVT_Store_Msg+0x114>
    	case FEB_CAN_IVT_VOLTAGE2_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	3302      	adds	r3, #2
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	061a      	lsls	r2, r3, #24
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	3303      	adds	r3, #3
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	041b      	lsls	r3, r3, #16
 80013b0:	441a      	add	r2, r3
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	3304      	adds	r3, #4
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	4413      	add	r3, r2
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	3205      	adds	r2, #5
 80013c0:	7812      	ldrb	r2, [r2, #0]
 80013c2:	4413      	add	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]
    	    FEB_CAN_IVT_MESSAGE.IVT_Voltage2 = unsignedToSignedLong(value);
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f000 f8b8 	bl	800153c <unsignedToSignedLong>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4a13      	ldr	r2, [pc, #76]	; (800141c <FEB_CAN_IVT_Store_Msg+0x11c>)
 80013d0:	6093      	str	r3, [r2, #8]
    	    FEB_CAN_IVT_FLAG.IVT_Voltage2 = 1;
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <FEB_CAN_IVT_Store_Msg+0x120>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	709a      	strb	r2, [r3, #2]
    		break;
 80013d8:	e01c      	b.n	8001414 <FEB_CAN_IVT_Store_Msg+0x114>
    	case FEB_CAN_IVT_VOLTAGE3_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	3302      	adds	r3, #2
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	061a      	lsls	r2, r3, #24
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	3303      	adds	r3, #3
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	041b      	lsls	r3, r3, #16
 80013ea:	441a      	add	r2, r3
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	3304      	adds	r3, #4
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	4413      	add	r3, r2
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	3205      	adds	r2, #5
 80013fa:	7812      	ldrb	r2, [r2, #0]
 80013fc:	4413      	add	r3, r2
 80013fe:	60fb      	str	r3, [r7, #12]
    		FEB_CAN_IVT_MESSAGE.IVT_Voltage3 = unsignedToSignedLong(value);
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f000 f89b 	bl	800153c <unsignedToSignedLong>
 8001406:	4603      	mov	r3, r0
 8001408:	4a04      	ldr	r2, [pc, #16]	; (800141c <FEB_CAN_IVT_Store_Msg+0x11c>)
 800140a:	60d3      	str	r3, [r2, #12]
    		FEB_CAN_IVT_FLAG.IVT_Voltage3 = 1;
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <FEB_CAN_IVT_Store_Msg+0x120>)
 800140e:	2201      	movs	r2, #1
 8001410:	70da      	strb	r2, [r3, #3]
    		break;
 8001412:	bf00      	nop
    }
}
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20002604 	.word	0x20002604
 8001420:	20002600 	.word	0x20002600
 8001424:	00000000 	.word	0x00000000

08001428 <FEB_CAN_IVT_Process>:

// ******************** IVT Process Data  ********************

void FEB_CAN_IVT_Process(void) {
 8001428:	b5b0      	push	{r4, r5, r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
	if (FEB_CAN_CHARGER_START_CHARGE == 1 || FEB_LTC6811_Balance_Cells_State == 1) {
		return;
	}
	if (FEB_CAN_IVT_FLAG.IVT_Current == 1) {
 800142e:	4b40      	ldr	r3, [pc, #256]	; (8001530 <FEB_CAN_IVT_Process+0x108>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d124      	bne.n	8001480 <FEB_CAN_IVT_Process+0x58>
		FEB_CAN_IVT_FLAG.IVT_Current = 0;
 8001436:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <FEB_CAN_IVT_Process+0x108>)
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
		float Ivt_Current_A = (float) FEB_CAN_IVT_MESSAGE.IVT_Voltage3 * 0.001;
 800143c:	4b3d      	ldr	r3, [pc, #244]	; (8001534 <FEB_CAN_IVT_Process+0x10c>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	ee07 3a90 	vmov	s15, r3
 8001444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001448:	ee17 0a90 	vmov	r0, s15
 800144c:	f7ff f89c 	bl	8000588 <__aeabi_f2d>
 8001450:	a333      	add	r3, pc, #204	; (adr r3, 8001520 <FEB_CAN_IVT_Process+0xf8>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	f7ff f8ef 	bl	8000638 <__aeabi_dmul>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f7ff fbe1 	bl	8000c28 <__aeabi_d2f>
 8001466:	4603      	mov	r3, r0
 8001468:	607b      	str	r3, [r7, #4]
		if (Ivt_Current_A > MAX_OPERATING_CURRENT) {
 800146a:	edd7 7a01 	vldr	s15, [r7, #4]
 800146e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001538 <FEB_CAN_IVT_Process+0x110>
 8001472:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147a:	dd01      	ble.n	8001480 <FEB_CAN_IVT_Process+0x58>
			FEB_BMS_Shutdown_Initiate();
 800147c:	f7ff fdca 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
		}
	}
	if (FEB_CAN_IVT_FLAG.IVT_Voltage1 == 1) {
 8001480:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <FEB_CAN_IVT_Process+0x108>)
 8001482:	785b      	ldrb	r3, [r3, #1]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d102      	bne.n	800148e <FEB_CAN_IVT_Process+0x66>
		FEB_CAN_IVT_FLAG.IVT_Voltage1 = 0;
 8001488:	4b29      	ldr	r3, [pc, #164]	; (8001530 <FEB_CAN_IVT_Process+0x108>)
 800148a:	2200      	movs	r2, #0
 800148c:	705a      	strb	r2, [r3, #1]
		// Do something

	}
	if (FEB_CAN_IVT_FLAG.IVT_Voltage2 == 1) {
 800148e:	4b28      	ldr	r3, [pc, #160]	; (8001530 <FEB_CAN_IVT_Process+0x108>)
 8001490:	789b      	ldrb	r3, [r3, #2]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d102      	bne.n	800149c <FEB_CAN_IVT_Process+0x74>
		FEB_CAN_IVT_FLAG.IVT_Voltage2 = 0;
 8001496:	4b26      	ldr	r3, [pc, #152]	; (8001530 <FEB_CAN_IVT_Process+0x108>)
 8001498:	2200      	movs	r2, #0
 800149a:	709a      	strb	r2, [r3, #2]
		// Do Something
	}
	if (FEB_CAN_IVT_FLAG.IVT_Voltage3 == 1) {
 800149c:	4b24      	ldr	r3, [pc, #144]	; (8001530 <FEB_CAN_IVT_Process+0x108>)
 800149e:	78db      	ldrb	r3, [r3, #3]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d138      	bne.n	8001516 <FEB_CAN_IVT_Process+0xee>
		FEB_CAN_IVT_FLAG.IVT_Voltage3 = 0;
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <FEB_CAN_IVT_Process+0x108>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	70da      	strb	r2, [r3, #3]
		float Ivt_Voltage_V = ((float) FEB_CAN_IVT_MESSAGE.IVT_Voltage3) * 0.001;
 80014aa:	4b22      	ldr	r3, [pc, #136]	; (8001534 <FEB_CAN_IVT_Process+0x10c>)
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	ee07 3a90 	vmov	s15, r3
 80014b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b6:	ee17 0a90 	vmov	r0, s15
 80014ba:	f7ff f865 	bl	8000588 <__aeabi_f2d>
 80014be:	a318      	add	r3, pc, #96	; (adr r3, 8001520 <FEB_CAN_IVT_Process+0xf8>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8b8 	bl	8000638 <__aeabi_dmul>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	f7ff fbaa 	bl	8000c28 <__aeabi_d2f>
 80014d4:	4603      	mov	r3, r0
 80014d6:	603b      	str	r3, [r7, #0]
		if (Ivt_Voltage_V > FEB_LTC6811_Total_Bank_Voltage() * 0.9) {
 80014d8:	6838      	ldr	r0, [r7, #0]
 80014da:	f7ff f855 	bl	8000588 <__aeabi_f2d>
 80014de:	4604      	mov	r4, r0
 80014e0:	460d      	mov	r5, r1
 80014e2:	f000 fce3 	bl	8001eac <FEB_LTC6811_Total_Bank_Voltage>
 80014e6:	ee10 3a10 	vmov	r3, s0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f84c 	bl	8000588 <__aeabi_f2d>
 80014f0:	a30d      	add	r3, pc, #52	; (adr r3, 8001528 <FEB_CAN_IVT_Process+0x100>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	f7ff f89f 	bl	8000638 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4620      	mov	r0, r4
 8001500:	4629      	mov	r1, r5
 8001502:	f7ff fb29 	bl	8000b58 <__aeabi_dcmpgt>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <FEB_CAN_IVT_Process+0xea>
			// Broadcast Message
			FEB_BMS_Precharge_Close();
 800150c:	f7ff fd6a 	bl	8000fe4 <FEB_BMS_Precharge_Close>
 8001510:	e001      	b.n	8001516 <FEB_CAN_IVT_Process+0xee>
		} else {
			FEB_BMS_Precharge_Open();
 8001512:	f7ff fd5b 	bl	8000fcc <FEB_BMS_Precharge_Open>
		}
	}
}
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bdb0      	pop	{r4, r5, r7, pc}
 800151c:	f3af 8000 	nop.w
 8001520:	d2f1a9fc 	.word	0xd2f1a9fc
 8001524:	3f50624d 	.word	0x3f50624d
 8001528:	cccccccd 	.word	0xcccccccd
 800152c:	3feccccc 	.word	0x3feccccc
 8001530:	20002600 	.word	0x20002600
 8001534:	20002604 	.word	0x20002604
 8001538:	425c0000 	.word	0x425c0000

0800153c <unsignedToSignedLong>:

long unsignedToSignedLong(uint32_t value) {
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	return (value & 0x7FFFFFFF) - (value & (0b1 << 31));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800154a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <FEB_Fan_Init>:
static uint8_t FEB_Fan_3_Speed = 0;		// 0-255
static uint8_t FEB_Fan_4_Speed = 0;		// 0-255

// ********************************** Functions **********************************

void FEB_Fan_Init(void) {
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001560:	2100      	movs	r1, #0
 8001562:	480e      	ldr	r0, [pc, #56]	; (800159c <FEB_Fan_Init+0x40>)
 8001564:	f005 ff5e 	bl	8007424 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001568:	2104      	movs	r1, #4
 800156a:	480c      	ldr	r0, [pc, #48]	; (800159c <FEB_Fan_Init+0x40>)
 800156c:	f005 ff5a 	bl	8007424 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001570:	2100      	movs	r1, #0
 8001572:	480b      	ldr	r0, [pc, #44]	; (80015a0 <FEB_Fan_Init+0x44>)
 8001574:	f005 ff56 	bl	8007424 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001578:	2104      	movs	r1, #4
 800157a:	4809      	ldr	r0, [pc, #36]	; (80015a0 <FEB_Fan_Init+0x44>)
 800157c:	f005 ff52 	bl	8007424 <HAL_TIM_PWM_Start>

	FEB_Fan_1_Speed_Set(255);
 8001580:	20ff      	movs	r0, #255	; 0xff
 8001582:	f000 f80f 	bl	80015a4 <FEB_Fan_1_Speed_Set>
	FEB_Fan_2_Speed_Set(255);
 8001586:	20ff      	movs	r0, #255	; 0xff
 8001588:	f000 f824 	bl	80015d4 <FEB_Fan_2_Speed_Set>
	FEB_Fan_3_Speed_Set(255);
 800158c:	20ff      	movs	r0, #255	; 0xff
 800158e:	f000 f839 	bl	8001604 <FEB_Fan_3_Speed_Set>
	FEB_Fan_4_Speed_Set(255);
 8001592:	20ff      	movs	r0, #255	; 0xff
 8001594:	f000 f84e 	bl	8001634 <FEB_Fan_4_Speed_Set>
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20002940 	.word	0x20002940
 80015a0:	20002988 	.word	0x20002988

080015a4 <FEB_Fan_1_Speed_Set>:

void FEB_Fan_1_Speed_Set(uint8_t speed) {
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
	FEB_Fan_1_Speed = speed;
 80015ae:	4a07      	ldr	r2, [pc, #28]	; (80015cc <FEB_Fan_1_Speed_Set+0x28>)
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, FEB_Fan_1_Speed);
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <FEB_Fan_1_Speed_Set+0x28>)
 80015b6:	781a      	ldrb	r2, [r3, #0]
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <FEB_Fan_1_Speed_Set+0x2c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20002614 	.word	0x20002614
 80015d0:	20002940 	.word	0x20002940

080015d4 <FEB_Fan_2_Speed_Set>:

void FEB_Fan_2_Speed_Set(uint8_t speed) {
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
	FEB_Fan_2_Speed = speed;
 80015de:	4a07      	ldr	r2, [pc, #28]	; (80015fc <FEB_Fan_2_Speed_Set+0x28>)
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, FEB_Fan_2_Speed);
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <FEB_Fan_2_Speed_Set+0x28>)
 80015e6:	781a      	ldrb	r2, [r3, #0]
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <FEB_Fan_2_Speed_Set+0x2c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	639a      	str	r2, [r3, #56]	; 0x38
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20002615 	.word	0x20002615
 8001600:	20002940 	.word	0x20002940

08001604 <FEB_Fan_3_Speed_Set>:

void FEB_Fan_3_Speed_Set(uint8_t speed) {
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
	FEB_Fan_3_Speed = speed;
 800160e:	4a07      	ldr	r2, [pc, #28]	; (800162c <FEB_Fan_3_Speed_Set+0x28>)
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, FEB_Fan_3_Speed);
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <FEB_Fan_3_Speed_Set+0x28>)
 8001616:	781a      	ldrb	r2, [r3, #0]
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <FEB_Fan_3_Speed_Set+0x2c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20002616 	.word	0x20002616
 8001630:	20002988 	.word	0x20002988

08001634 <FEB_Fan_4_Speed_Set>:

void FEB_Fan_4_Speed_Set(uint8_t speed) {
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
	FEB_Fan_4_Speed = speed;
 800163e:	4a07      	ldr	r2, [pc, #28]	; (800165c <FEB_Fan_4_Speed_Set+0x28>)
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, FEB_Fan_4_Speed);
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <FEB_Fan_4_Speed_Set+0x28>)
 8001646:	781a      	ldrb	r2, [r3, #0]
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <FEB_Fan_4_Speed_Set+0x2c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20002617 	.word	0x20002617
 8001660:	20002988 	.word	0x20002988

08001664 <FEB_LTC6811_Setup>:
// Set accumulator
static Accumulator accumulator;

// ********************************** Functions **********************************

void FEB_LTC6811_Setup(void) {
 8001664:	b590      	push	{r4, r7, lr}
 8001666:	b089      	sub	sp, #36	; 0x24
 8001668:	af06      	add	r7, sp, #24
	FEB_LTC6811_Config_Cell_Discharge();
 800166a:	f000 f83f 	bl	80016ec <FEB_LTC6811_Config_Cell_Discharge>

	LTC6811_init_cfg(NUM_IC, accumulator.IC_config);
 800166e:	4917      	ldr	r1, [pc, #92]	; (80016cc <FEB_LTC6811_Setup+0x68>)
 8001670:	2002      	movs	r0, #2
 8001672:	f001 f949 	bl	8002908 <LTC6811_init_cfg>
	for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 8001676:	2300      	movs	r3, #0
 8001678:	71fb      	strb	r3, [r7, #7]
 800167a:	e018      	b.n	80016ae <FEB_LTC6811_Setup+0x4a>
		LTC6811_set_cfgr(current_ic, accumulator.IC_config, REFON, ADCOPT, GPIOBITS_A, DCCBITS_A, DCTOBITS, UV, OV);
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <FEB_LTC6811_Setup+0x6c>)
 800167e:	7819      	ldrb	r1, [r3, #0]
 8001680:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <FEB_LTC6811_Setup+0x70>)
 8001682:	781c      	ldrb	r4, [r3, #0]
 8001684:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <FEB_LTC6811_Setup+0x74>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	4a14      	ldr	r2, [pc, #80]	; (80016dc <FEB_LTC6811_Setup+0x78>)
 800168a:	8812      	ldrh	r2, [r2, #0]
 800168c:	79f8      	ldrb	r0, [r7, #7]
 800168e:	9204      	str	r2, [sp, #16]
 8001690:	9303      	str	r3, [sp, #12]
 8001692:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <FEB_LTC6811_Setup+0x7c>)
 8001694:	9302      	str	r3, [sp, #8]
 8001696:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <FEB_LTC6811_Setup+0x80>)
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <FEB_LTC6811_Setup+0x84>)
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	4623      	mov	r3, r4
 80016a0:	460a      	mov	r2, r1
 80016a2:	490a      	ldr	r1, [pc, #40]	; (80016cc <FEB_LTC6811_Setup+0x68>)
 80016a4:	f001 f93f 	bl	8002926 <LTC6811_set_cfgr>
	for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	3301      	adds	r3, #1
 80016ac:	71fb      	strb	r3, [r7, #7]
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d9e3      	bls.n	800167c <FEB_LTC6811_Setup+0x18>
	}
	LTC6811_reset_crc_count(NUM_IC, accumulator.IC_config);
 80016b4:	4905      	ldr	r1, [pc, #20]	; (80016cc <FEB_LTC6811_Setup+0x68>)
 80016b6:	2002      	movs	r0, #2
 80016b8:	f001 f917 	bl	80028ea <LTC6811_reset_crc_count>
	LTC6811_init_reg_limits(NUM_IC, accumulator.IC_config);
 80016bc:	4903      	ldr	r1, [pc, #12]	; (80016cc <FEB_LTC6811_Setup+0x68>)
 80016be:	2002      	movs	r0, #2
 80016c0:	f001 f85e 	bl	8002780 <LTC6811_init_reg_limits>
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd90      	pop	{r4, r7, pc}
 80016cc:	20002640 	.word	0x20002640
 80016d0:	2000001d 	.word	0x2000001d
 80016d4:	20002630 	.word	0x20002630
 80016d8:	20000026 	.word	0x20000026
 80016dc:	20000028 	.word	0x20000028
 80016e0:	2000002c 	.word	0x2000002c
 80016e4:	20002634 	.word	0x20002634
 80016e8:	20000020 	.word	0x20000020

080016ec <FEB_LTC6811_Config_Cell_Discharge>:

void FEB_LTC6811_Config_Cell_Discharge(void) {
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NUM_IC; i++) {
 80016f2:	2300      	movs	r3, #0
 80016f4:	71fb      	strb	r3, [r7, #7]
 80016f6:	e016      	b.n	8001726 <FEB_LTC6811_Config_Cell_Discharge+0x3a>
		for (uint8_t j = 0; j < CELLS_PER_DAUGHTER_BOARD; j++) {
 80016f8:	2300      	movs	r3, #0
 80016fa:	71bb      	strb	r3, [r7, #6]
 80016fc:	e00d      	b.n	800171a <FEB_LTC6811_Config_Cell_Discharge+0x2e>
			FEB_LTC6811_Cell_Discharge[i][j] = 0;
 80016fe:	79fa      	ldrb	r2, [r7, #7]
 8001700:	79b9      	ldrb	r1, [r7, #6]
 8001702:	480e      	ldr	r0, [pc, #56]	; (800173c <FEB_LTC6811_Config_Cell_Discharge+0x50>)
 8001704:	4613      	mov	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	4413      	add	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4403      	add	r3, r0
 800170e:	440b      	add	r3, r1
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < CELLS_PER_DAUGHTER_BOARD; j++) {
 8001714:	79bb      	ldrb	r3, [r7, #6]
 8001716:	3301      	adds	r3, #1
 8001718:	71bb      	strb	r3, [r7, #6]
 800171a:	79bb      	ldrb	r3, [r7, #6]
 800171c:	2b0b      	cmp	r3, #11
 800171e:	d9ee      	bls.n	80016fe <FEB_LTC6811_Config_Cell_Discharge+0x12>
	for (uint8_t i = 0; i < NUM_IC; i++) {
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	3301      	adds	r3, #1
 8001724:	71fb      	strb	r3, [r7, #7]
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d9e5      	bls.n	80016f8 <FEB_LTC6811_Config_Cell_Discharge+0xc>
		}
	}
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20002618 	.word	0x20002618

08001740 <FEB_LTC6811_Poll_Voltage>:

// ******************** Read Voltage ********************

void FEB_LTC6811_Poll_Voltage(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	FEB_LTC6811_Start_Cell_ADC_Measurement();
 8001744:	f000 f806 	bl	8001754 <FEB_LTC6811_Start_Cell_ADC_Measurement>
	FEB_LTC6811_Read_Cell_Voltage_Registers();
 8001748:	f000 f812 	bl	8001770 <FEB_LTC6811_Read_Cell_Voltage_Registers>
	FEB_LTC6811_Store_Voltage();
 800174c:	f000 f81e 	bl	800178c <FEB_LTC6811_Store_Voltage>
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}

08001754 <FEB_LTC6811_Start_Cell_ADC_Measurement>:

void FEB_LTC6811_Start_Cell_ADC_Measurement(void) {
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 8001758:	2002      	movs	r0, #2
 800175a:	f001 f922 	bl	80029a2 <wakeup_sleep>
	LTC6811_adcv(ADC_CONVERSION_MODE, ADC_DCP, CELL_CH_TO_CONVERT);
 800175e:	2200      	movs	r2, #0
 8001760:	2101      	movs	r1, #1
 8001762:	2002      	movs	r0, #2
 8001764:	f001 f868 	bl	8002838 <LTC6811_adcv>
	LTC6811_pollAdc();
 8001768:	f001 f8b8 	bl	80028dc <LTC6811_pollAdc>
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <FEB_LTC6811_Read_Cell_Voltage_Registers>:

void FEB_LTC6811_Read_Cell_Voltage_Registers(void) {
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 8001774:	2002      	movs	r0, #2
 8001776:	f001 f914 	bl	80029a2 <wakeup_sleep>
	LTC6811_rdcv(SEL_ALL_REG, NUM_IC, accumulator.IC_config);
 800177a:	4a03      	ldr	r2, [pc, #12]	; (8001788 <FEB_LTC6811_Read_Cell_Voltage_Registers+0x18>)
 800177c:	2102      	movs	r1, #2
 800177e:	2000      	movs	r0, #0
 8001780:	f001 f87f 	bl	8002882 <LTC6811_rdcv>
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20002640 	.word	0x20002640

0800178c <FEB_LTC6811_Store_Voltage>:

void FEB_LTC6811_Store_Voltage(void) {
 800178c:	b590      	push	{r4, r7, lr}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
    for (uint16_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001792:	2300      	movs	r3, #0
 8001794:	80fb      	strh	r3, [r7, #6]
 8001796:	e1b8      	b.n	8001b0a <FEB_LTC6811_Store_Voltage+0x37e>
    	accumulator.banks[bank_idx].cells[16].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[0]);
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4ad3      	ldr	r2, [pc, #844]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 800179e:	21e8      	movs	r1, #232	; 0xe8
 80017a0:	fb01 f303 	mul.w	r3, r1, r3
 80017a4:	4413      	add	r3, r2
 80017a6:	331e      	adds	r3, #30
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	88fc      	ldrh	r4, [r7, #6]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 f9b7 	bl	8001b20 <FEB_LTC6811_Convert_Voltage>
 80017b2:	eef0 7a40 	vmov.f32	s15, s0
 80017b6:	4acd      	ldr	r2, [pc, #820]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 80017b8:	4623      	mov	r3, r4
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	4423      	add	r3, r4
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	4413      	add	r3, r2
 80017c2:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80017c6:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[15].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[1]);
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4ac7      	ldr	r2, [pc, #796]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 80017d0:	21e8      	movs	r1, #232	; 0xe8
 80017d2:	fb01 f303 	mul.w	r3, r1, r3
 80017d6:	4413      	add	r3, r2
 80017d8:	3320      	adds	r3, #32
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	88fc      	ldrh	r4, [r7, #6]
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 f99e 	bl	8001b20 <FEB_LTC6811_Convert_Voltage>
 80017e4:	eef0 7a40 	vmov.f32	s15, s0
 80017e8:	4ac0      	ldr	r2, [pc, #768]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 80017ea:	4623      	mov	r3, r4
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	4423      	add	r3, r4
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	4413      	add	r3, r2
 80017f4:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80017f8:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[14].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[2]);
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4aba      	ldr	r2, [pc, #744]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 8001802:	21e8      	movs	r1, #232	; 0xe8
 8001804:	fb01 f303 	mul.w	r3, r1, r3
 8001808:	4413      	add	r3, r2
 800180a:	3322      	adds	r3, #34	; 0x22
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	88fc      	ldrh	r4, [r7, #6]
 8001810:	4618      	mov	r0, r3
 8001812:	f000 f985 	bl	8001b20 <FEB_LTC6811_Convert_Voltage>
 8001816:	eef0 7a40 	vmov.f32	s15, s0
 800181a:	4ab4      	ldr	r2, [pc, #720]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 800181c:	4623      	mov	r3, r4
 800181e:	011b      	lsls	r3, r3, #4
 8001820:	4423      	add	r3, r4
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4413      	add	r3, r2
 8001826:	f503 7311 	add.w	r3, r3, #580	; 0x244
 800182a:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[13].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[3]);
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4aae      	ldr	r2, [pc, #696]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 8001834:	21e8      	movs	r1, #232	; 0xe8
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	4413      	add	r3, r2
 800183c:	3324      	adds	r3, #36	; 0x24
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	88fc      	ldrh	r4, [r7, #6]
 8001842:	4618      	mov	r0, r3
 8001844:	f000 f96c 	bl	8001b20 <FEB_LTC6811_Convert_Voltage>
 8001848:	eef0 7a40 	vmov.f32	s15, s0
 800184c:	4aa7      	ldr	r2, [pc, #668]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 800184e:	4623      	mov	r3, r4
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	4423      	add	r3, r4
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	4413      	add	r3, r2
 8001858:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800185c:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[12].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[6]);
 8001860:	88fb      	ldrh	r3, [r7, #6]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4aa1      	ldr	r2, [pc, #644]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 8001866:	21e8      	movs	r1, #232	; 0xe8
 8001868:	fb01 f303 	mul.w	r3, r1, r3
 800186c:	4413      	add	r3, r2
 800186e:	332a      	adds	r3, #42	; 0x2a
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	88fc      	ldrh	r4, [r7, #6]
 8001874:	4618      	mov	r0, r3
 8001876:	f000 f953 	bl	8001b20 <FEB_LTC6811_Convert_Voltage>
 800187a:	eef0 7a40 	vmov.f32	s15, s0
 800187e:	4a9b      	ldr	r2, [pc, #620]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 8001880:	4623      	mov	r3, r4
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	4423      	add	r3, r4
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	4413      	add	r3, r2
 800188a:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800188e:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[11].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[7]);
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4a95      	ldr	r2, [pc, #596]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 8001898:	21e8      	movs	r1, #232	; 0xe8
 800189a:	fb01 f303 	mul.w	r3, r1, r3
 800189e:	4413      	add	r3, r2
 80018a0:	332c      	adds	r3, #44	; 0x2c
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	88fc      	ldrh	r4, [r7, #6]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 f93a 	bl	8001b20 <FEB_LTC6811_Convert_Voltage>
 80018ac:	eef0 7a40 	vmov.f32	s15, s0
 80018b0:	4a8e      	ldr	r2, [pc, #568]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 80018b2:	4623      	mov	r3, r4
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	4423      	add	r3, r4
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4413      	add	r3, r2
 80018bc:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 80018c0:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[10].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[8]);
 80018c4:	88fb      	ldrh	r3, [r7, #6]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	4a88      	ldr	r2, [pc, #544]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 80018ca:	21e8      	movs	r1, #232	; 0xe8
 80018cc:	fb01 f303 	mul.w	r3, r1, r3
 80018d0:	4413      	add	r3, r2
 80018d2:	332e      	adds	r3, #46	; 0x2e
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	88fc      	ldrh	r4, [r7, #6]
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 f921 	bl	8001b20 <FEB_LTC6811_Convert_Voltage>
 80018de:	eef0 7a40 	vmov.f32	s15, s0
 80018e2:	4a82      	ldr	r2, [pc, #520]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 80018e4:	4623      	mov	r3, r4
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	4423      	add	r3, r4
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	4413      	add	r3, r2
 80018ee:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80018f2:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[9].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[9]);
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4a7c      	ldr	r2, [pc, #496]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 80018fc:	21e8      	movs	r1, #232	; 0xe8
 80018fe:	fb01 f303 	mul.w	r3, r1, r3
 8001902:	4413      	add	r3, r2
 8001904:	3330      	adds	r3, #48	; 0x30
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	88fc      	ldrh	r4, [r7, #6]
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f908 	bl	8001b20 <FEB_LTC6811_Convert_Voltage>
 8001910:	eef0 7a40 	vmov.f32	s15, s0
 8001914:	4a75      	ldr	r2, [pc, #468]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 8001916:	4623      	mov	r3, r4
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	4423      	add	r3, r4
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	4413      	add	r3, r2
 8001920:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001924:	edc3 7a00 	vstr	s15, [r3]

    	accumulator.banks[bank_idx].cells[8].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[0]);
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	3301      	adds	r3, #1
 800192e:	4a6f      	ldr	r2, [pc, #444]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 8001930:	21e8      	movs	r1, #232	; 0xe8
 8001932:	fb01 f303 	mul.w	r3, r1, r3
 8001936:	4413      	add	r3, r2
 8001938:	331e      	adds	r3, #30
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	88fc      	ldrh	r4, [r7, #6]
 800193e:	4618      	mov	r0, r3
 8001940:	f000 f8ee 	bl	8001b20 <FEB_LTC6811_Convert_Voltage>
 8001944:	eef0 7a40 	vmov.f32	s15, s0
 8001948:	4a68      	ldr	r2, [pc, #416]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 800194a:	4623      	mov	r3, r4
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	4423      	add	r3, r4
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	4413      	add	r3, r2
 8001954:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001958:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[7].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[1]);
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	3301      	adds	r3, #1
 8001962:	4a62      	ldr	r2, [pc, #392]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 8001964:	21e8      	movs	r1, #232	; 0xe8
 8001966:	fb01 f303 	mul.w	r3, r1, r3
 800196a:	4413      	add	r3, r2
 800196c:	3320      	adds	r3, #32
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	88fc      	ldrh	r4, [r7, #6]
 8001972:	4618      	mov	r0, r3
 8001974:	f000 f8d4 	bl	8001b20 <FEB_LTC6811_Convert_Voltage>
 8001978:	eef0 7a40 	vmov.f32	s15, s0
 800197c:	4a5b      	ldr	r2, [pc, #364]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 800197e:	4623      	mov	r3, r4
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	4423      	add	r3, r4
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	4413      	add	r3, r2
 8001988:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800198c:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[6].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[2]);
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	3301      	adds	r3, #1
 8001996:	4a55      	ldr	r2, [pc, #340]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 8001998:	21e8      	movs	r1, #232	; 0xe8
 800199a:	fb01 f303 	mul.w	r3, r1, r3
 800199e:	4413      	add	r3, r2
 80019a0:	3322      	adds	r3, #34	; 0x22
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	88fc      	ldrh	r4, [r7, #6]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f8ba 	bl	8001b20 <FEB_LTC6811_Convert_Voltage>
 80019ac:	eef0 7a40 	vmov.f32	s15, s0
 80019b0:	4a4e      	ldr	r2, [pc, #312]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 80019b2:	4623      	mov	r3, r4
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	4423      	add	r3, r4
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	4413      	add	r3, r2
 80019bc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80019c0:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[5].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[3]);
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	3301      	adds	r3, #1
 80019ca:	4a48      	ldr	r2, [pc, #288]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 80019cc:	21e8      	movs	r1, #232	; 0xe8
 80019ce:	fb01 f303 	mul.w	r3, r1, r3
 80019d2:	4413      	add	r3, r2
 80019d4:	3324      	adds	r3, #36	; 0x24
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	88fc      	ldrh	r4, [r7, #6]
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 f8a0 	bl	8001b20 <FEB_LTC6811_Convert_Voltage>
 80019e0:	eef0 7a40 	vmov.f32	s15, s0
 80019e4:	4a41      	ldr	r2, [pc, #260]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 80019e6:	4623      	mov	r3, r4
 80019e8:	011b      	lsls	r3, r3, #4
 80019ea:	4423      	add	r3, r4
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	4413      	add	r3, r2
 80019f0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80019f4:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[4].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[4]);
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	3301      	adds	r3, #1
 80019fe:	4a3b      	ldr	r2, [pc, #236]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 8001a00:	21e8      	movs	r1, #232	; 0xe8
 8001a02:	fb01 f303 	mul.w	r3, r1, r3
 8001a06:	4413      	add	r3, r2
 8001a08:	3326      	adds	r3, #38	; 0x26
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	88fc      	ldrh	r4, [r7, #6]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 f886 	bl	8001b20 <FEB_LTC6811_Convert_Voltage>
 8001a14:	eef0 7a40 	vmov.f32	s15, s0
 8001a18:	4a34      	ldr	r2, [pc, #208]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 8001a1a:	4623      	mov	r3, r4
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	4423      	add	r3, r4
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4413      	add	r3, r2
 8001a24:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001a28:	edc3 7a00 	vstr	s15, [r3]
      	accumulator.banks[bank_idx].cells[3].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[6]);
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	3301      	adds	r3, #1
 8001a32:	4a2e      	ldr	r2, [pc, #184]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 8001a34:	21e8      	movs	r1, #232	; 0xe8
 8001a36:	fb01 f303 	mul.w	r3, r1, r3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	332a      	adds	r3, #42	; 0x2a
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	88fc      	ldrh	r4, [r7, #6]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 f86c 	bl	8001b20 <FEB_LTC6811_Convert_Voltage>
 8001a48:	eef0 7a40 	vmov.f32	s15, s0
 8001a4c:	4a27      	ldr	r2, [pc, #156]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 8001a4e:	4623      	mov	r3, r4
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	4423      	add	r3, r4
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	4413      	add	r3, r2
 8001a58:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8001a5c:	edc3 7a00 	vstr	s15, [r3]
      	accumulator.banks[bank_idx].cells[2].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[7]);
 8001a60:	88fb      	ldrh	r3, [r7, #6]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	3301      	adds	r3, #1
 8001a66:	4a21      	ldr	r2, [pc, #132]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 8001a68:	21e8      	movs	r1, #232	; 0xe8
 8001a6a:	fb01 f303 	mul.w	r3, r1, r3
 8001a6e:	4413      	add	r3, r2
 8001a70:	332c      	adds	r3, #44	; 0x2c
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	88fc      	ldrh	r4, [r7, #6]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 f852 	bl	8001b20 <FEB_LTC6811_Convert_Voltage>
 8001a7c:	eef0 7a40 	vmov.f32	s15, s0
 8001a80:	4a1a      	ldr	r2, [pc, #104]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 8001a82:	4623      	mov	r3, r4
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	4423      	add	r3, r4
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001a90:	edc3 7a00 	vstr	s15, [r3]
      	accumulator.banks[bank_idx].cells[1].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[8]);
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	3301      	adds	r3, #1
 8001a9a:	4a14      	ldr	r2, [pc, #80]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 8001a9c:	21e8      	movs	r1, #232	; 0xe8
 8001a9e:	fb01 f303 	mul.w	r3, r1, r3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	332e      	adds	r3, #46	; 0x2e
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	88fc      	ldrh	r4, [r7, #6]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 f838 	bl	8001b20 <FEB_LTC6811_Convert_Voltage>
 8001ab0:	eef0 7a40 	vmov.f32	s15, s0
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 8001ab6:	4623      	mov	r3, r4
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	4423      	add	r3, r4
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	4413      	add	r3, r2
 8001ac0:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8001ac4:	edc3 7a00 	vstr	s15, [r3]
      	accumulator.banks[bank_idx].cells[0].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[9]);
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	3301      	adds	r3, #1
 8001ace:	4a07      	ldr	r2, [pc, #28]	; (8001aec <FEB_LTC6811_Store_Voltage+0x360>)
 8001ad0:	21e8      	movs	r1, #232	; 0xe8
 8001ad2:	fb01 f303 	mul.w	r3, r1, r3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3330      	adds	r3, #48	; 0x30
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	88fc      	ldrh	r4, [r7, #6]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f81e 	bl	8001b20 <FEB_LTC6811_Convert_Voltage>
 8001ae4:	eef0 7a40 	vmov.f32	s15, s0
 8001ae8:	e002      	b.n	8001af0 <FEB_LTC6811_Store_Voltage+0x364>
 8001aea:	bf00      	nop
 8001aec:	20002640 	.word	0x20002640
 8001af0:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <FEB_LTC6811_Store_Voltage+0x390>)
 8001af2:	4623      	mov	r3, r4
 8001af4:	011b      	lsls	r3, r3, #4
 8001af6:	4423      	add	r3, r4
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4413      	add	r3, r2
 8001afc:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8001b00:	edc3 7a00 	vstr	s15, [r3]
    for (uint16_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	3301      	adds	r3, #1
 8001b08:	80fb      	strh	r3, [r7, #6]
 8001b0a:	88fb      	ldrh	r3, [r7, #6]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f43f ae43 	beq.w	8001798 <FEB_LTC6811_Store_Voltage+0xc>
    }
}
 8001b12:	bf00      	nop
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd90      	pop	{r4, r7, pc}
 8001b1c:	20002640 	.word	0x20002640

08001b20 <FEB_LTC6811_Convert_Voltage>:

/*
 * @param value := Voltage (100uV) from LTC6811
 */
float FEB_LTC6811_Convert_Voltage(uint16_t value) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	80fb      	strh	r3, [r7, #6]
	// Check for error: value = 2^16 - 1
	if (value == 65535) {
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d101      	bne.n	8001b38 <FEB_LTC6811_Convert_Voltage+0x18>
		return -42;
 8001b34:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <FEB_LTC6811_Convert_Voltage+0x50>)
 8001b36:	e00f      	b.n	8001b58 <FEB_LTC6811_Convert_Voltage+0x38>
	}
	return value * 0.0001;
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fd12 	bl	8000564 <__aeabi_i2d>
 8001b40:	a309      	add	r3, pc, #36	; (adr r3, 8001b68 <FEB_LTC6811_Convert_Voltage+0x48>)
 8001b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b46:	f7fe fd77 	bl	8000638 <__aeabi_dmul>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4610      	mov	r0, r2
 8001b50:	4619      	mov	r1, r3
 8001b52:	f7ff f869 	bl	8000c28 <__aeabi_d2f>
 8001b56:	4603      	mov	r3, r0
}
 8001b58:	ee07 3a90 	vmov	s15, r3
 8001b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	eb1c432d 	.word	0xeb1c432d
 8001b6c:	3f1a36e2 	.word	0x3f1a36e2
 8001b70:	c2280000 	.word	0xc2280000

08001b74 <FEB_LTC6811_Get_IC>:

// ******************** Voltage Cell Balance ********************

uint8_t FEB_LTC6811_Get_IC(uint8_t bank, uint8_t cell) {
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	460a      	mov	r2, r1
 8001b7e:	71fb      	strb	r3, [r7, #7]
 8001b80:	4613      	mov	r3, r2
 8001b82:	71bb      	strb	r3, [r7, #6]
	if (cell < 9) {
 8001b84:	79bb      	ldrb	r3, [r7, #6]
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d805      	bhi.n	8001b96 <FEB_LTC6811_Get_IC+0x22>
		return bank * 2 + 1;
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	3301      	adds	r3, #1
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	e002      	b.n	8001b9c <FEB_LTC6811_Get_IC+0x28>
	} else {
		return bank * 2;
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	b2db      	uxtb	r3, r3
	}
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <FEB_LTC6811_Cell_Idx>:

uint8_t FEB_LTC6811_Cell_Idx(uint8_t cell) {
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
	return FEB_LTC6811_Cell_Idx_Map[cell];
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	4a03      	ldr	r2, [pc, #12]	; (8001bc4 <FEB_LTC6811_Cell_Idx+0x1c>)
 8001bb6:	5cd3      	ldrb	r3, [r2, r3]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	2000000c 	.word	0x2000000c

08001bc8 <FEB_LTC6811_Balance_Cells>:
	// Set target voltage
	FEB_LTC6811_Target_Voltage = lowest_voltage;
	FEB_LTC6811_Target_Voltage_Set = 1;
}

void FEB_LTC6811_Balance_Cells(void) {
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
	if (FEB_LTC6811_Balance_Cells_State == 0 || FEB_LTC6811_Cells_Balanced == 1) {
		return;
 8001bcc:	bf00      	nop
	if (cells_balanced == 1) {
		FEB_LTC6811_Cells_Balanced = 1;
		FEB_LTC6811_Clear_Balance_Cells();
	}

}
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <FEB_LTC6811_Configure_DCCBITS_A>:

void FEB_LTC6811_Clear_Balance_Cell(uint8_t bank, uint8_t cell) {
	FEB_LTC6811_Cell_Discharge[FEB_LTC6811_Get_IC(bank, cell)][FEB_LTC6811_Cell_Idx(cell)] = 0;
}

void FEB_LTC6811_Configure_DCCBITS_A(uint8_t ic) {
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < CELLS_PER_DAUGHTER_BOARD; i++) {
 8001be2:	2300      	movs	r3, #0
 8001be4:	73fb      	strb	r3, [r7, #15]
 8001be6:	e014      	b.n	8001c12 <FEB_LTC6811_Configure_DCCBITS_A+0x3a>
		DCCBITS_A[i] = FEB_LTC6811_Cell_Discharge[ic][i];
 8001be8:	79fa      	ldrb	r2, [r7, #7]
 8001bea:	7bf9      	ldrb	r1, [r7, #15]
 8001bec:	480e      	ldr	r0, [pc, #56]	; (8001c28 <FEB_LTC6811_Configure_DCCBITS_A+0x50>)
 8001bee:	4613      	mov	r3, r2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	4413      	add	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4403      	add	r3, r0
 8001bf8:	440b      	add	r3, r1
 8001bfa:	781a      	ldrb	r2, [r3, #0]
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	2a00      	cmp	r2, #0
 8001c00:	bf14      	ite	ne
 8001c02:	2201      	movne	r2, #1
 8001c04:	2200      	moveq	r2, #0
 8001c06:	b2d1      	uxtb	r1, r2
 8001c08:	4a08      	ldr	r2, [pc, #32]	; (8001c2c <FEB_LTC6811_Configure_DCCBITS_A+0x54>)
 8001c0a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < CELLS_PER_DAUGHTER_BOARD; i++) {
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	73fb      	strb	r3, [r7, #15]
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	2b0b      	cmp	r3, #11
 8001c16:	d9e7      	bls.n	8001be8 <FEB_LTC6811_Configure_DCCBITS_A+0x10>
	}
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20002618 	.word	0x20002618
 8001c2c:	20002634 	.word	0x20002634

08001c30 <FEB_LTC6811_UART_Transmit_Discharge>:

void FEB_LTC6811_UART_Transmit_Discharge(void) {
 8001c30:	b590      	push	{r4, r7, lr}
 8001c32:	f2ad 5d0c 	subw	sp, sp, #1292	; 0x50c
 8001c36:	af00      	add	r7, sp, #0
	char UART_str[1024];
	char temp_str[256];

	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 8001c3e:	e067      	b.n	8001d10 <FEB_LTC6811_UART_Transmit_Discharge+0xe0>
		// Add bank_idx, cell_idx to {@code UART_Str}
		sprintf(UART_str, "%d", (bank_idx << UART_BITS_PER_MESSAGE) + UART_DISCHARGE_ID);
 8001c40:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	1c9a      	adds	r2, r3, #2
 8001c48:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001c4c:	4935      	ldr	r1, [pc, #212]	; (8001d24 <FEB_LTC6811_UART_Transmit_Discharge+0xf4>)
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f007 fb76 	bl	8009340 <siprintf>


		// Add values to {@code UART_Str}
		for (uint16_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001c54:	2300      	movs	r3, #0
 8001c56:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8001c5a:	e033      	b.n	8001cc4 <FEB_LTC6811_UART_Transmit_Discharge+0x94>
			uint8_t state = FEB_LTC6811_Cell_Discharge[FEB_LTC6811_Get_IC(bank_idx, cell_idx)][FEB_LTC6811_Cell_Idx(cell_idx)];
 8001c5c:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff83 	bl	8001b74 <FEB_LTC6811_Get_IC>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461c      	mov	r4, r3
 8001c72:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff95 	bl	8001ba8 <FEB_LTC6811_Cell_Idx>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4619      	mov	r1, r3
 8001c82:	4a29      	ldr	r2, [pc, #164]	; (8001d28 <FEB_LTC6811_UART_Transmit_Discharge+0xf8>)
 8001c84:	4623      	mov	r3, r4
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4423      	add	r3, r4
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	440b      	add	r3, r1
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	f887 3503 	strb.w	r3, [r7, #1283]	; 0x503
			sprintf(temp_str, " %d", state);
 8001c96:	f897 2503 	ldrb.w	r2, [r7, #1283]	; 0x503
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	4923      	ldr	r1, [pc, #140]	; (8001d2c <FEB_LTC6811_UART_Transmit_Discharge+0xfc>)
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f007 fb4e 	bl	8009340 <siprintf>
			strncat(UART_str, temp_str, strlen(temp_str));
 8001ca4:	463b      	mov	r3, r7
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fab2 	bl	8000210 <strlen>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4639      	mov	r1, r7
 8001cb0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f007 fb63 	bl	8009380 <strncat>
		for (uint16_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001cba:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8001cc4:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001cc8:	2b10      	cmp	r3, #16
 8001cca:	d9c7      	bls.n	8001c5c <FEB_LTC6811_UART_Transmit_Discharge+0x2c>
		}

		// Add '\n' to {@code UART_Str}
		sprintf(temp_str, "\n");
 8001ccc:	463b      	mov	r3, r7
 8001cce:	4918      	ldr	r1, [pc, #96]	; (8001d30 <FEB_LTC6811_UART_Transmit_Discharge+0x100>)
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f007 fb35 	bl	8009340 <siprintf>
		strncat(UART_str, temp_str, strlen(temp_str));
 8001cd6:	463b      	mov	r3, r7
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fa99 	bl	8000210 <strlen>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	4639      	mov	r1, r7
 8001ce2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f007 fb4a 	bl	8009380 <strncat>

		HAL_UART_Transmit(&huart2, (uint8_t*) UART_str, strlen(UART_str), 100);
 8001cec:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fa8d 	bl	8000210 <strlen>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8001cfe:	2364      	movs	r3, #100	; 0x64
 8001d00:	480c      	ldr	r0, [pc, #48]	; (8001d34 <FEB_LTC6811_UART_Transmit_Discharge+0x104>)
 8001d02:	f006 fa0c 	bl	800811e <HAL_UART_Transmit>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001d06:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 8001d10:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d093      	beq.n	8001c40 <FEB_LTC6811_UART_Transmit_Discharge+0x10>
	}
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	f207 570c 	addw	r7, r7, #1292	; 0x50c
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd90      	pop	{r4, r7, pc}
 8001d24:	0800b71c 	.word	0x0800b71c
 8001d28:	20002618 	.word	0x20002618
 8001d2c:	0800b720 	.word	0x0800b720
 8001d30:	0800b724 	.word	0x0800b724
 8001d34:	200029d0 	.word	0x200029d0

08001d38 <FEB_LTC6811_Validate_Voltage>:

// ******************** Voltage Interface ********************

void FEB_LTC6811_Validate_Voltage(void) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001d3e:	2300      	movs	r3, #0
 8001d40:	71fb      	strb	r3, [r7, #7]
 8001d42:	e02c      	b.n	8001d9e <FEB_LTC6811_Validate_Voltage+0x66>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001d44:	2300      	movs	r3, #0
 8001d46:	71bb      	strb	r3, [r7, #6]
 8001d48:	e023      	b.n	8001d92 <FEB_LTC6811_Validate_Voltage+0x5a>
			float voltage = accumulator.banks[bank_idx].cells[cell_idx].voltage;
 8001d4a:	79fa      	ldrb	r2, [r7, #7]
 8001d4c:	79b9      	ldrb	r1, [r7, #6]
 8001d4e:	4818      	ldr	r0, [pc, #96]	; (8001db0 <FEB_LTC6811_Validate_Voltage+0x78>)
 8001d50:	4613      	mov	r3, r2
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	4413      	add	r3, r2
 8001d56:	440b      	add	r3, r1
 8001d58:	333a      	adds	r3, #58	; 0x3a
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4403      	add	r3, r0
 8001d5e:	3304      	adds	r3, #4
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	603b      	str	r3, [r7, #0]
			if (voltage < MIN_VOLTAGE || voltage > MAX_VOLTAGE) {
 8001d64:	edd7 7a00 	vldr	s15, [r7]
 8001d68:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001d6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d74:	d408      	bmi.n	8001d88 <FEB_LTC6811_Validate_Voltage+0x50>
 8001d76:	edd7 7a00 	vldr	s15, [r7]
 8001d7a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001d7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d86:	dd01      	ble.n	8001d8c <FEB_LTC6811_Validate_Voltage+0x54>
				FEB_BMS_Shutdown_Initiate();
 8001d88:	f7ff f944 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001d8c:	79bb      	ldrb	r3, [r7, #6]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	71bb      	strb	r3, [r7, #6]
 8001d92:	79bb      	ldrb	r3, [r7, #6]
 8001d94:	2b10      	cmp	r3, #16
 8001d96:	d9d8      	bls.n	8001d4a <FEB_LTC6811_Validate_Voltage+0x12>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	71fb      	strb	r3, [r7, #7]
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0cf      	beq.n	8001d44 <FEB_LTC6811_Validate_Voltage+0xc>
			}
		}
	}
}
 8001da4:	bf00      	nop
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20002640 	.word	0x20002640

08001db4 <FEB_LTC6811_UART_Transmit_Voltage>:

void FEB_LTC6811_UART_Transmit_Voltage() {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	f5ad 6da1 	sub.w	sp, sp, #1288	; 0x508
 8001dba:	af00      	add	r7, sp, #0
	char UART_str[1024];
	char temp_str[256];

	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 8001dc2:	e05e      	b.n	8001e82 <FEB_LTC6811_UART_Transmit_Voltage+0xce>
		// Add bank_idx, cell_idx to {@code UART_Str}
		sprintf(UART_str, "%d", (bank_idx << UART_BITS_PER_MESSAGE) + UART_VOLTAGE_ID);
 8001dc4:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001dc8:	00da      	lsls	r2, r3, #3
 8001dca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001dce:	4932      	ldr	r1, [pc, #200]	; (8001e98 <FEB_LTC6811_UART_Transmit_Voltage+0xe4>)
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f007 fab5 	bl	8009340 <siprintf>


		// Add values to {@code UART_Str}
		for (uint16_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8001ddc:	e02b      	b.n	8001e36 <FEB_LTC6811_UART_Transmit_Voltage+0x82>
			float voltage = accumulator.banks[bank_idx].cells[cell_idx].voltage;
 8001dde:	f897 2507 	ldrb.w	r2, [r7, #1287]	; 0x507
 8001de2:	f8b7 1504 	ldrh.w	r1, [r7, #1284]	; 0x504
 8001de6:	482d      	ldr	r0, [pc, #180]	; (8001e9c <FEB_LTC6811_UART_Transmit_Voltage+0xe8>)
 8001de8:	4613      	mov	r3, r2
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	4413      	add	r3, r2
 8001dee:	440b      	add	r3, r1
 8001df0:	333a      	adds	r3, #58	; 0x3a
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4403      	add	r3, r0
 8001df6:	3304      	adds	r3, #4
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 8001dfe:	6013      	str	r3, [r2, #0]

			sprintf(temp_str, " %f", voltage);
 8001e00:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	f7fe fbbf 	bl	8000588 <__aeabi_f2d>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4638      	mov	r0, r7
 8001e10:	4923      	ldr	r1, [pc, #140]	; (8001ea0 <FEB_LTC6811_UART_Transmit_Voltage+0xec>)
 8001e12:	f007 fa95 	bl	8009340 <siprintf>
			strncat(UART_str, temp_str, strlen(temp_str));
 8001e16:	463b      	mov	r3, r7
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe f9f9 	bl	8000210 <strlen>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	4639      	mov	r1, r7
 8001e22:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e26:	4618      	mov	r0, r3
 8001e28:	f007 faaa 	bl	8009380 <strncat>
		for (uint16_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001e2c:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001e30:	3301      	adds	r3, #1
 8001e32:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8001e36:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001e3a:	2b10      	cmp	r3, #16
 8001e3c:	d9cf      	bls.n	8001dde <FEB_LTC6811_UART_Transmit_Voltage+0x2a>
		}

		// Add '\n' to {@code UART_Str}
		sprintf(temp_str, "\n");
 8001e3e:	463b      	mov	r3, r7
 8001e40:	4918      	ldr	r1, [pc, #96]	; (8001ea4 <FEB_LTC6811_UART_Transmit_Voltage+0xf0>)
 8001e42:	4618      	mov	r0, r3
 8001e44:	f007 fa7c 	bl	8009340 <siprintf>
		strncat(UART_str, temp_str, strlen(temp_str));
 8001e48:	463b      	mov	r3, r7
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe f9e0 	bl	8000210 <strlen>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4639      	mov	r1, r7
 8001e54:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f007 fa91 	bl	8009380 <strncat>

		HAL_UART_Transmit(&huart2, (uint8_t*) UART_str, strlen(UART_str), 100);
 8001e5e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe f9d4 	bl	8000210 <strlen>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8001e70:	2364      	movs	r3, #100	; 0x64
 8001e72:	480d      	ldr	r0, [pc, #52]	; (8001ea8 <FEB_LTC6811_UART_Transmit_Voltage+0xf4>)
 8001e74:	f006 f953 	bl	800811e <HAL_UART_Transmit>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001e78:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 8001e82:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d09c      	beq.n	8001dc4 <FEB_LTC6811_UART_Transmit_Voltage+0x10>
	}
}
 8001e8a:	bf00      	nop
 8001e8c:	bf00      	nop
 8001e8e:	f507 67a1 	add.w	r7, r7, #1288	; 0x508
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	0800b71c 	.word	0x0800b71c
 8001e9c:	20002640 	.word	0x20002640
 8001ea0:	0800b728 	.word	0x0800b728
 8001ea4:	0800b724 	.word	0x0800b724
 8001ea8:	200029d0 	.word	0x200029d0

08001eac <FEB_LTC6811_Total_Bank_Voltage>:

float FEB_LTC6811_Total_Bank_Voltage(void) {
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
	float total_voltage = 0;
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	607b      	str	r3, [r7, #4]

	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001eb8:	2300      	movs	r3, #0
 8001eba:	70fb      	strb	r3, [r7, #3]
 8001ebc:	e01e      	b.n	8001efc <FEB_LTC6811_Total_Bank_Voltage+0x50>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	70bb      	strb	r3, [r7, #2]
 8001ec2:	e015      	b.n	8001ef0 <FEB_LTC6811_Total_Bank_Voltage+0x44>
			total_voltage += accumulator.banks[bank_idx].cells[cell_idx].voltage;
 8001ec4:	78fa      	ldrb	r2, [r7, #3]
 8001ec6:	78b9      	ldrb	r1, [r7, #2]
 8001ec8:	4813      	ldr	r0, [pc, #76]	; (8001f18 <FEB_LTC6811_Total_Bank_Voltage+0x6c>)
 8001eca:	4613      	mov	r3, r2
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	4413      	add	r3, r2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	333a      	adds	r3, #58	; 0x3a
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4403      	add	r3, r0
 8001ed8:	3304      	adds	r3, #4
 8001eda:	edd3 7a00 	vldr	s15, [r3]
 8001ede:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ee2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee6:	edc7 7a01 	vstr	s15, [r7, #4]
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001eea:	78bb      	ldrb	r3, [r7, #2]
 8001eec:	3301      	adds	r3, #1
 8001eee:	70bb      	strb	r3, [r7, #2]
 8001ef0:	78bb      	ldrb	r3, [r7, #2]
 8001ef2:	2b10      	cmp	r3, #16
 8001ef4:	d9e6      	bls.n	8001ec4 <FEB_LTC6811_Total_Bank_Voltage+0x18>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001ef6:	78fb      	ldrb	r3, [r7, #3]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	70fb      	strb	r3, [r7, #3]
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0dd      	beq.n	8001ebe <FEB_LTC6811_Total_Bank_Voltage+0x12>
		}
	}

	return total_voltage;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	ee07 3a90 	vmov	s15, r3
}
 8001f08:	eeb0 0a67 	vmov.f32	s0, s15
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	20002640 	.word	0x20002640

08001f1c <FEB_LTC6811_Clear_Voltage>:
		}
	}
	return 0;
}

void FEB_LTC6811_Clear_Voltage(void) {
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001f22:	2300      	movs	r3, #0
 8001f24:	71fb      	strb	r3, [r7, #7]
 8001f26:	e019      	b.n	8001f5c <FEB_LTC6811_Clear_Voltage+0x40>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001f28:	2300      	movs	r3, #0
 8001f2a:	71bb      	strb	r3, [r7, #6]
 8001f2c:	e010      	b.n	8001f50 <FEB_LTC6811_Clear_Voltage+0x34>
			accumulator.banks[bank_idx].cells[cell_idx].voltage = 0;
 8001f2e:	79fa      	ldrb	r2, [r7, #7]
 8001f30:	79b9      	ldrb	r1, [r7, #6]
 8001f32:	480f      	ldr	r0, [pc, #60]	; (8001f70 <FEB_LTC6811_Clear_Voltage+0x54>)
 8001f34:	4613      	mov	r3, r2
 8001f36:	011b      	lsls	r3, r3, #4
 8001f38:	4413      	add	r3, r2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	333a      	adds	r3, #58	; 0x3a
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4403      	add	r3, r0
 8001f42:	3304      	adds	r3, #4
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001f4a:	79bb      	ldrb	r3, [r7, #6]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	71bb      	strb	r3, [r7, #6]
 8001f50:	79bb      	ldrb	r3, [r7, #6]
 8001f52:	2b10      	cmp	r3, #16
 8001f54:	d9eb      	bls.n	8001f2e <FEB_LTC6811_Clear_Voltage+0x12>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	71fb      	strb	r3, [r7, #7]
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0e2      	beq.n	8001f28 <FEB_LTC6811_Clear_Voltage+0xc>
		}
	}
}
 8001f62:	bf00      	nop
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	20002640 	.word	0x20002640

08001f74 <FEB_LTC6811_Poll_Temperature>:

// ******************** Read Temperature ********************

void FEB_LTC6811_Poll_Temperature(void) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
	for (uint8_t channel = 0; channel <= 4; channel++) {
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	71fb      	strb	r3, [r7, #7]
 8001f7e:	e00e      	b.n	8001f9e <FEB_LTC6811_Poll_Temperature+0x2a>
		FEB_LTC6811_Update_GPIO(channel);
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f814 	bl	8001fb0 <FEB_LTC6811_Update_GPIO>
		FEB_LTC6811_Start_GPIO_ADC_Measurement();
 8001f88:	f000 f880 	bl	800208c <FEB_LTC6811_Start_GPIO_ADC_Measurement>
		FEB_LTC6811_Read_Aux_Voltages();
 8001f8c:	f000 f88c 	bl	80020a8 <FEB_LTC6811_Read_Aux_Voltages>
		FEB_LTC6811_Store_Temperature(channel);
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 f896 	bl	80020c4 <FEB_LTC6811_Store_Temperature>
	for (uint8_t channel = 0; channel <= 4; channel++) {
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	71fb      	strb	r3, [r7, #7]
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d9ed      	bls.n	8001f80 <FEB_LTC6811_Poll_Temperature+0xc>
	}
}
 8001fa4:	bf00      	nop
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <FEB_LTC6811_Update_GPIO>:

void FEB_LTC6811_Update_GPIO(uint8_t channel) {
 8001fb0:	b590      	push	{r4, r7, lr}
 8001fb2:	b08b      	sub	sp, #44	; 0x2c
 8001fb4:	af06      	add	r7, sp, #24
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	71fb      	strb	r3, [r7, #7]
	GPIOBITS_A[0] = 0b1;					// ADC
 8001fba:	4b2c      	ldr	r3, [pc, #176]	; (800206c <FEB_LTC6811_Update_GPIO+0xbc>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]
	GPIOBITS_A[1] = 0b1;					// ADC
 8001fc0:	4b2a      	ldr	r3, [pc, #168]	; (800206c <FEB_LTC6811_Update_GPIO+0xbc>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	705a      	strb	r2, [r3, #1]
	GPIOBITS_A[2] = (channel >> 0) & 0b1;	// MUX Select
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf14      	ite	ne
 8001fd0:	2301      	movne	r3, #1
 8001fd2:	2300      	moveq	r3, #0
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4b25      	ldr	r3, [pc, #148]	; (800206c <FEB_LTC6811_Update_GPIO+0xbc>)
 8001fd8:	709a      	strb	r2, [r3, #2]
	GPIOBITS_A[3] = (channel >> 1) & 0b1;	// MUX Select
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	085b      	lsrs	r3, r3, #1
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	bf14      	ite	ne
 8001fe8:	2301      	movne	r3, #1
 8001fea:	2300      	moveq	r3, #0
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4b1f      	ldr	r3, [pc, #124]	; (800206c <FEB_LTC6811_Update_GPIO+0xbc>)
 8001ff0:	70da      	strb	r2, [r3, #3]
	GPIOBITS_A[4] = (channel >> 2) & 0b1;	// MUX Select
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	089b      	lsrs	r3, r3, #2
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf14      	ite	ne
 8002000:	2301      	movne	r3, #1
 8002002:	2300      	moveq	r3, #0
 8002004:	b2da      	uxtb	r2, r3
 8002006:	4b19      	ldr	r3, [pc, #100]	; (800206c <FEB_LTC6811_Update_GPIO+0xbc>)
 8002008:	711a      	strb	r2, [r3, #4]

    wakeup_sleep(NUM_IC);
 800200a:	2002      	movs	r0, #2
 800200c:	f000 fcc9 	bl	80029a2 <wakeup_sleep>
    for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 8002010:	2300      	movs	r3, #0
 8002012:	73fb      	strb	r3, [r7, #15]
 8002014:	e01c      	b.n	8002050 <FEB_LTC6811_Update_GPIO+0xa0>
    	FEB_LTC6811_Configure_DCCBITS_A(current_ic);
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fddd 	bl	8001bd8 <FEB_LTC6811_Configure_DCCBITS_A>
		LTC6811_set_cfgr(current_ic, accumulator.IC_config, REFON, ADCOPT, GPIOBITS_A, DCCBITS_A, DCTOBITS, UV, OV);
 800201e:	4b14      	ldr	r3, [pc, #80]	; (8002070 <FEB_LTC6811_Update_GPIO+0xc0>)
 8002020:	7819      	ldrb	r1, [r3, #0]
 8002022:	4b14      	ldr	r3, [pc, #80]	; (8002074 <FEB_LTC6811_Update_GPIO+0xc4>)
 8002024:	781c      	ldrb	r4, [r3, #0]
 8002026:	4b14      	ldr	r3, [pc, #80]	; (8002078 <FEB_LTC6811_Update_GPIO+0xc8>)
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	4a14      	ldr	r2, [pc, #80]	; (800207c <FEB_LTC6811_Update_GPIO+0xcc>)
 800202c:	8812      	ldrh	r2, [r2, #0]
 800202e:	7bf8      	ldrb	r0, [r7, #15]
 8002030:	9204      	str	r2, [sp, #16]
 8002032:	9303      	str	r3, [sp, #12]
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <FEB_LTC6811_Update_GPIO+0xd0>)
 8002036:	9302      	str	r3, [sp, #8]
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <FEB_LTC6811_Update_GPIO+0xd4>)
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <FEB_LTC6811_Update_GPIO+0xbc>)
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	4623      	mov	r3, r4
 8002042:	460a      	mov	r2, r1
 8002044:	4910      	ldr	r1, [pc, #64]	; (8002088 <FEB_LTC6811_Update_GPIO+0xd8>)
 8002046:	f000 fc6e 	bl	8002926 <LTC6811_set_cfgr>
    for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	3301      	adds	r3, #1
 800204e:	73fb      	strb	r3, [r7, #15]
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d9df      	bls.n	8002016 <FEB_LTC6811_Update_GPIO+0x66>
    }
    wakeup_idle(NUM_IC);
 8002056:	2002      	movs	r0, #2
 8002058:	f000 fc86 	bl	8002968 <wakeup_idle>
    LTC6811_wrcfg(NUM_IC, accumulator.IC_config);
 800205c:	490a      	ldr	r1, [pc, #40]	; (8002088 <FEB_LTC6811_Update_GPIO+0xd8>)
 800205e:	2002      	movs	r0, #2
 8002060:	f000 fbdb 	bl	800281a <LTC6811_wrcfg>
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	bd90      	pop	{r4, r7, pc}
 800206c:	20000020 	.word	0x20000020
 8002070:	2000001d 	.word	0x2000001d
 8002074:	20002630 	.word	0x20002630
 8002078:	20000026 	.word	0x20000026
 800207c:	20000028 	.word	0x20000028
 8002080:	2000002c 	.word	0x2000002c
 8002084:	20002634 	.word	0x20002634
 8002088:	20002640 	.word	0x20002640

0800208c <FEB_LTC6811_Start_GPIO_ADC_Measurement>:

void FEB_LTC6811_Start_GPIO_ADC_Measurement(void) {
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 8002090:	2002      	movs	r0, #2
 8002092:	f000 fc86 	bl	80029a2 <wakeup_sleep>
	LTC6811_adax(ADC_CONVERSION_MODE, AUX_CH_TO_CONVERT);
 8002096:	2100      	movs	r1, #0
 8002098:	2002      	movs	r0, #2
 800209a:	f000 fbe0 	bl	800285e <LTC6811_adax>
	LTC6811_pollAdc();
 800209e:	f000 fc1d 	bl	80028dc <LTC6811_pollAdc>
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <FEB_LTC6811_Read_Aux_Voltages>:

void FEB_LTC6811_Read_Aux_Voltages(void) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 80020ac:	2002      	movs	r0, #2
 80020ae:	f000 fc78 	bl	80029a2 <wakeup_sleep>
	LTC6811_rdaux(SEL_ALL_REG, NUM_IC, accumulator.IC_config);
 80020b2:	4a03      	ldr	r2, [pc, #12]	; (80020c0 <FEB_LTC6811_Read_Aux_Voltages+0x18>)
 80020b4:	2102      	movs	r1, #2
 80020b6:	2000      	movs	r0, #0
 80020b8:	f000 fbfa 	bl	80028b0 <LTC6811_rdaux>
}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20002640 	.word	0x20002640

080020c4 <FEB_LTC6811_Store_Temperature>:

void FEB_LTC6811_Store_Temperature(uint8_t channel) {
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
    for (uint16_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 80020ce:	2300      	movs	r3, #0
 80020d0:	81fb      	strh	r3, [r7, #14]
 80020d2:	e1cd      	b.n	8002470 <FEB_LTC6811_Store_Temperature+0x3ac>
    	switch (channel) {
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	f200 81c7 	bhi.w	800246a <FEB_LTC6811_Store_Temperature+0x3a6>
 80020dc:	a201      	add	r2, pc, #4	; (adr r2, 80020e4 <FEB_LTC6811_Store_Temperature+0x20>)
 80020de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e2:	bf00      	nop
 80020e4:	080020f9 	.word	0x080020f9
 80020e8:	080021c7 	.word	0x080021c7
 80020ec:	08002295 	.word	0x08002295
 80020f0:	08002363 	.word	0x08002363
 80020f4:	08002435 	.word	0x08002435
    		case 0:
    			accumulator.banks[bank_idx].cells[12].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 80020f8:	89fb      	ldrh	r3, [r7, #14]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4acc      	ldr	r2, [pc, #816]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 80020fe:	21e8      	movs	r1, #232	; 0xe8
 8002100:	fb01 f303 	mul.w	r3, r1, r3
 8002104:	4413      	add	r3, r2
 8002106:	3348      	adds	r3, #72	; 0x48
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	89fc      	ldrh	r4, [r7, #14]
 800210c:	4618      	mov	r0, r3
 800210e:	f000 f9bb 	bl	8002488 <FEB_LTC6811_Convert_Temperature>
 8002112:	eef0 7a40 	vmov.f32	s15, s0
 8002116:	4ac6      	ldr	r2, [pc, #792]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002118:	4623      	mov	r3, r4
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	4423      	add	r3, r4
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002126:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[16].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 800212a:	89fb      	ldrh	r3, [r7, #14]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4ac0      	ldr	r2, [pc, #768]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002130:	21e8      	movs	r1, #232	; 0xe8
 8002132:	fb01 f303 	mul.w	r3, r1, r3
 8002136:	4413      	add	r3, r2
 8002138:	334a      	adds	r3, #74	; 0x4a
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	89fc      	ldrh	r4, [r7, #14]
 800213e:	4618      	mov	r0, r3
 8002140:	f000 f9a2 	bl	8002488 <FEB_LTC6811_Convert_Temperature>
 8002144:	eef0 7a40 	vmov.f32	s15, s0
 8002148:	4ab9      	ldr	r2, [pc, #740]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 800214a:	4623      	mov	r3, r4
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	4423      	add	r3, r4
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4413      	add	r3, r2
 8002154:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002158:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[4].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 800215c:	89fb      	ldrh	r3, [r7, #14]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	3301      	adds	r3, #1
 8002162:	4ab3      	ldr	r2, [pc, #716]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002164:	21e8      	movs	r1, #232	; 0xe8
 8002166:	fb01 f303 	mul.w	r3, r1, r3
 800216a:	4413      	add	r3, r2
 800216c:	3348      	adds	r3, #72	; 0x48
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	89fc      	ldrh	r4, [r7, #14]
 8002172:	4618      	mov	r0, r3
 8002174:	f000 f988 	bl	8002488 <FEB_LTC6811_Convert_Temperature>
 8002178:	eef0 7a40 	vmov.f32	s15, s0
 800217c:	4aac      	ldr	r2, [pc, #688]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 800217e:	4623      	mov	r3, r4
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	4423      	add	r3, r4
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4413      	add	r3, r2
 8002188:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800218c:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[8].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 8002190:	89fb      	ldrh	r3, [r7, #14]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	3301      	adds	r3, #1
 8002196:	4aa6      	ldr	r2, [pc, #664]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002198:	21e8      	movs	r1, #232	; 0xe8
 800219a:	fb01 f303 	mul.w	r3, r1, r3
 800219e:	4413      	add	r3, r2
 80021a0:	334a      	adds	r3, #74	; 0x4a
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	89fc      	ldrh	r4, [r7, #14]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 f96e 	bl	8002488 <FEB_LTC6811_Convert_Temperature>
 80021ac:	eef0 7a40 	vmov.f32	s15, s0
 80021b0:	4a9f      	ldr	r2, [pc, #636]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 80021b2:	4623      	mov	r3, r4
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	4423      	add	r3, r4
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021c0:	edc3 7a00 	vstr	s15, [r3]
    			break;
 80021c4:	e151      	b.n	800246a <FEB_LTC6811_Store_Temperature+0x3a6>
    		case 1:
    			accumulator.banks[bank_idx].cells[11].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 80021c6:	89fb      	ldrh	r3, [r7, #14]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4a99      	ldr	r2, [pc, #612]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 80021cc:	21e8      	movs	r1, #232	; 0xe8
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	3348      	adds	r3, #72	; 0x48
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	89fc      	ldrh	r4, [r7, #14]
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f954 	bl	8002488 <FEB_LTC6811_Convert_Temperature>
 80021e0:	eef0 7a40 	vmov.f32	s15, s0
 80021e4:	4a92      	ldr	r2, [pc, #584]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 80021e6:	4623      	mov	r3, r4
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	4423      	add	r3, r4
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4413      	add	r3, r2
 80021f0:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80021f4:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[15].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 80021f8:	89fb      	ldrh	r3, [r7, #14]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4a8c      	ldr	r2, [pc, #560]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 80021fe:	21e8      	movs	r1, #232	; 0xe8
 8002200:	fb01 f303 	mul.w	r3, r1, r3
 8002204:	4413      	add	r3, r2
 8002206:	334a      	adds	r3, #74	; 0x4a
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	89fc      	ldrh	r4, [r7, #14]
 800220c:	4618      	mov	r0, r3
 800220e:	f000 f93b 	bl	8002488 <FEB_LTC6811_Convert_Temperature>
 8002212:	eef0 7a40 	vmov.f32	s15, s0
 8002216:	4a86      	ldr	r2, [pc, #536]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002218:	4623      	mov	r3, r4
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	4423      	add	r3, r4
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4413      	add	r3, r2
 8002222:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8002226:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[3].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 800222a:	89fb      	ldrh	r3, [r7, #14]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	3301      	adds	r3, #1
 8002230:	4a7f      	ldr	r2, [pc, #508]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002232:	21e8      	movs	r1, #232	; 0xe8
 8002234:	fb01 f303 	mul.w	r3, r1, r3
 8002238:	4413      	add	r3, r2
 800223a:	3348      	adds	r3, #72	; 0x48
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	89fc      	ldrh	r4, [r7, #14]
 8002240:	4618      	mov	r0, r3
 8002242:	f000 f921 	bl	8002488 <FEB_LTC6811_Convert_Temperature>
 8002246:	eef0 7a40 	vmov.f32	s15, s0
 800224a:	4a79      	ldr	r2, [pc, #484]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 800224c:	4623      	mov	r3, r4
 800224e:	011b      	lsls	r3, r3, #4
 8002250:	4423      	add	r3, r4
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4413      	add	r3, r2
 8002256:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800225a:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[7].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 800225e:	89fb      	ldrh	r3, [r7, #14]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	3301      	adds	r3, #1
 8002264:	4a72      	ldr	r2, [pc, #456]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002266:	21e8      	movs	r1, #232	; 0xe8
 8002268:	fb01 f303 	mul.w	r3, r1, r3
 800226c:	4413      	add	r3, r2
 800226e:	334a      	adds	r3, #74	; 0x4a
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	89fc      	ldrh	r4, [r7, #14]
 8002274:	4618      	mov	r0, r3
 8002276:	f000 f907 	bl	8002488 <FEB_LTC6811_Convert_Temperature>
 800227a:	eef0 7a40 	vmov.f32	s15, s0
 800227e:	4a6c      	ldr	r2, [pc, #432]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002280:	4623      	mov	r3, r4
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	4423      	add	r3, r4
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4413      	add	r3, r2
 800228a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800228e:	edc3 7a00 	vstr	s15, [r3]
    			break;
 8002292:	e0ea      	b.n	800246a <FEB_LTC6811_Store_Temperature+0x3a6>
    		case 2:
    			accumulator.banks[bank_idx].cells[10].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 8002294:	89fb      	ldrh	r3, [r7, #14]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4a65      	ldr	r2, [pc, #404]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 800229a:	21e8      	movs	r1, #232	; 0xe8
 800229c:	fb01 f303 	mul.w	r3, r1, r3
 80022a0:	4413      	add	r3, r2
 80022a2:	3348      	adds	r3, #72	; 0x48
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	89fc      	ldrh	r4, [r7, #14]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 f8ed 	bl	8002488 <FEB_LTC6811_Convert_Temperature>
 80022ae:	eef0 7a40 	vmov.f32	s15, s0
 80022b2:	4a5f      	ldr	r2, [pc, #380]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 80022b4:	4623      	mov	r3, r4
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	4423      	add	r3, r4
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80022c2:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[14].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 80022c6:	89fb      	ldrh	r3, [r7, #14]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4a59      	ldr	r2, [pc, #356]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 80022cc:	21e8      	movs	r1, #232	; 0xe8
 80022ce:	fb01 f303 	mul.w	r3, r1, r3
 80022d2:	4413      	add	r3, r2
 80022d4:	334a      	adds	r3, #74	; 0x4a
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	89fc      	ldrh	r4, [r7, #14]
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 f8d4 	bl	8002488 <FEB_LTC6811_Convert_Temperature>
 80022e0:	eef0 7a40 	vmov.f32	s15, s0
 80022e4:	4a52      	ldr	r2, [pc, #328]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 80022e6:	4623      	mov	r3, r4
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	4423      	add	r3, r4
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4413      	add	r3, r2
 80022f0:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80022f4:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[2].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 80022f8:	89fb      	ldrh	r3, [r7, #14]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	3301      	adds	r3, #1
 80022fe:	4a4c      	ldr	r2, [pc, #304]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002300:	21e8      	movs	r1, #232	; 0xe8
 8002302:	fb01 f303 	mul.w	r3, r1, r3
 8002306:	4413      	add	r3, r2
 8002308:	3348      	adds	r3, #72	; 0x48
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	89fc      	ldrh	r4, [r7, #14]
 800230e:	4618      	mov	r0, r3
 8002310:	f000 f8ba 	bl	8002488 <FEB_LTC6811_Convert_Temperature>
 8002314:	eef0 7a40 	vmov.f32	s15, s0
 8002318:	4a45      	ldr	r2, [pc, #276]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 800231a:	4623      	mov	r3, r4
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	4423      	add	r3, r4
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4413      	add	r3, r2
 8002324:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8002328:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[6].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 800232c:	89fb      	ldrh	r3, [r7, #14]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	3301      	adds	r3, #1
 8002332:	4a3f      	ldr	r2, [pc, #252]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002334:	21e8      	movs	r1, #232	; 0xe8
 8002336:	fb01 f303 	mul.w	r3, r1, r3
 800233a:	4413      	add	r3, r2
 800233c:	334a      	adds	r3, #74	; 0x4a
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	89fc      	ldrh	r4, [r7, #14]
 8002342:	4618      	mov	r0, r3
 8002344:	f000 f8a0 	bl	8002488 <FEB_LTC6811_Convert_Temperature>
 8002348:	eef0 7a40 	vmov.f32	s15, s0
 800234c:	4a38      	ldr	r2, [pc, #224]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 800234e:	4623      	mov	r3, r4
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	4423      	add	r3, r4
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4413      	add	r3, r2
 8002358:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800235c:	edc3 7a00 	vstr	s15, [r3]
    			break;
 8002360:	e083      	b.n	800246a <FEB_LTC6811_Store_Temperature+0x3a6>
    		case 3:
    			accumulator.banks[bank_idx].cells[9].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 8002362:	89fb      	ldrh	r3, [r7, #14]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4a32      	ldr	r2, [pc, #200]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002368:	21e8      	movs	r1, #232	; 0xe8
 800236a:	fb01 f303 	mul.w	r3, r1, r3
 800236e:	4413      	add	r3, r2
 8002370:	3348      	adds	r3, #72	; 0x48
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	89fc      	ldrh	r4, [r7, #14]
 8002376:	4618      	mov	r0, r3
 8002378:	f000 f886 	bl	8002488 <FEB_LTC6811_Convert_Temperature>
 800237c:	eef0 7a40 	vmov.f32	s15, s0
 8002380:	4a2b      	ldr	r2, [pc, #172]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002382:	4623      	mov	r3, r4
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	4423      	add	r3, r4
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4413      	add	r3, r2
 800238c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8002390:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[13].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 8002394:	89fb      	ldrh	r3, [r7, #14]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	4a25      	ldr	r2, [pc, #148]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 800239a:	21e8      	movs	r1, #232	; 0xe8
 800239c:	fb01 f303 	mul.w	r3, r1, r3
 80023a0:	4413      	add	r3, r2
 80023a2:	334a      	adds	r3, #74	; 0x4a
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	89fc      	ldrh	r4, [r7, #14]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 f86d 	bl	8002488 <FEB_LTC6811_Convert_Temperature>
 80023ae:	eef0 7a40 	vmov.f32	s15, s0
 80023b2:	4a1f      	ldr	r2, [pc, #124]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 80023b4:	4623      	mov	r3, r4
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	4423      	add	r3, r4
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4413      	add	r3, r2
 80023be:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80023c2:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[1].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 80023c6:	89fb      	ldrh	r3, [r7, #14]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	3301      	adds	r3, #1
 80023cc:	4a18      	ldr	r2, [pc, #96]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 80023ce:	21e8      	movs	r1, #232	; 0xe8
 80023d0:	fb01 f303 	mul.w	r3, r1, r3
 80023d4:	4413      	add	r3, r2
 80023d6:	3348      	adds	r3, #72	; 0x48
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	89fc      	ldrh	r4, [r7, #14]
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 f853 	bl	8002488 <FEB_LTC6811_Convert_Temperature>
 80023e2:	eef0 7a40 	vmov.f32	s15, s0
 80023e6:	4a12      	ldr	r2, [pc, #72]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 80023e8:	4623      	mov	r3, r4
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	4423      	add	r3, r4
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80023f6:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[5].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 80023fa:	89fb      	ldrh	r3, [r7, #14]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	3301      	adds	r3, #1
 8002400:	4a0b      	ldr	r2, [pc, #44]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002402:	21e8      	movs	r1, #232	; 0xe8
 8002404:	fb01 f303 	mul.w	r3, r1, r3
 8002408:	4413      	add	r3, r2
 800240a:	334a      	adds	r3, #74	; 0x4a
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	89fc      	ldrh	r4, [r7, #14]
 8002410:	4618      	mov	r0, r3
 8002412:	f000 f839 	bl	8002488 <FEB_LTC6811_Convert_Temperature>
 8002416:	eef0 7a40 	vmov.f32	s15, s0
 800241a:	4a05      	ldr	r2, [pc, #20]	; (8002430 <FEB_LTC6811_Store_Temperature+0x36c>)
 800241c:	4623      	mov	r3, r4
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	4423      	add	r3, r4
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4413      	add	r3, r2
 8002426:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800242a:	edc3 7a00 	vstr	s15, [r3]
    			break;
 800242e:	e01c      	b.n	800246a <FEB_LTC6811_Store_Temperature+0x3a6>
 8002430:	20002640 	.word	0x20002640
    		case 4:
    			accumulator.banks[bank_idx].cells[0].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 8002434:	89fb      	ldrh	r3, [r7, #14]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	3301      	adds	r3, #1
 800243a:	4a12      	ldr	r2, [pc, #72]	; (8002484 <FEB_LTC6811_Store_Temperature+0x3c0>)
 800243c:	21e8      	movs	r1, #232	; 0xe8
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	4413      	add	r3, r2
 8002444:	3348      	adds	r3, #72	; 0x48
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	89fc      	ldrh	r4, [r7, #14]
 800244a:	4618      	mov	r0, r3
 800244c:	f000 f81c 	bl	8002488 <FEB_LTC6811_Convert_Temperature>
 8002450:	eef0 7a40 	vmov.f32	s15, s0
 8002454:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <FEB_LTC6811_Store_Temperature+0x3c0>)
 8002456:	4623      	mov	r3, r4
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	4423      	add	r3, r4
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4413      	add	r3, r2
 8002460:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8002464:	edc3 7a00 	vstr	s15, [r3]
    			break;
 8002468:	bf00      	nop
    for (uint16_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 800246a:	89fb      	ldrh	r3, [r7, #14]
 800246c:	3301      	adds	r3, #1
 800246e:	81fb      	strh	r3, [r7, #14]
 8002470:	89fb      	ldrh	r3, [r7, #14]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f43f ae2e 	beq.w	80020d4 <FEB_LTC6811_Store_Temperature+0x10>
    	}
    }
}
 8002478:	bf00      	nop
 800247a:	bf00      	nop
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	bd90      	pop	{r4, r7, pc}
 8002482:	bf00      	nop
 8002484:	20002640 	.word	0x20002640

08002488 <FEB_LTC6811_Convert_Temperature>:

/*
 * @param value := Voltage (100uV) from LTC6811
 */
float FEB_LTC6811_Convert_Temperature(uint16_t value) {
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	80fb      	strh	r3, [r7, #6]
	// Check for error: value = 2^16 - 1
	if (value == 65535) {
 8002492:	88fb      	ldrh	r3, [r7, #6]
 8002494:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002498:	4293      	cmp	r3, r2
 800249a:	d102      	bne.n	80024a2 <FEB_LTC6811_Convert_Temperature+0x1a>
		return -42;
 800249c:	eddf 7a10 	vldr	s15, [pc, #64]	; 80024e0 <FEB_LTC6811_Convert_Temperature+0x58>
 80024a0:	e015      	b.n	80024ce <FEB_LTC6811_Convert_Temperature+0x46>
	}
	//return value * 0.0001;
	return FEB_LTC6811_Temp_LUT_Get_Temperature(value * 0.0001);
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fe f85d 	bl	8000564 <__aeabi_i2d>
 80024aa:	a30b      	add	r3, pc, #44	; (adr r3, 80024d8 <FEB_LTC6811_Convert_Temperature+0x50>)
 80024ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b0:	f7fe f8c2 	bl	8000638 <__aeabi_dmul>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	f7fe fbb4 	bl	8000c28 <__aeabi_d2f>
 80024c0:	4603      	mov	r3, r0
 80024c2:	ee00 3a10 	vmov	s0, r3
 80024c6:	f000 f8fb 	bl	80026c0 <FEB_LTC6811_Temp_LUT_Get_Temperature>
 80024ca:	eef0 7a40 	vmov.f32	s15, s0
}
 80024ce:	eeb0 0a67 	vmov.f32	s0, s15
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	eb1c432d 	.word	0xeb1c432d
 80024dc:	3f1a36e2 	.word	0x3f1a36e2
 80024e0:	c2280000 	.word	0xc2280000

080024e4 <FEB_LTC6811_Validate_Temperature>:

// ******************** Temperature Interface ********************

void FEB_LTC6811_Validate_Temperature(void) {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 80024ea:	2300      	movs	r3, #0
 80024ec:	73fb      	strb	r3, [r7, #15]
 80024ee:	e02f      	b.n	8002550 <FEB_LTC6811_Validate_Temperature+0x6c>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 80024f0:	2300      	movs	r3, #0
 80024f2:	73bb      	strb	r3, [r7, #14]
 80024f4:	e026      	b.n	8002544 <FEB_LTC6811_Validate_Temperature+0x60>
			float temperature = accumulator.banks[bank_idx].cells[cell_idx].temperature;
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	7bb9      	ldrb	r1, [r7, #14]
 80024fa:	4819      	ldr	r0, [pc, #100]	; (8002560 <FEB_LTC6811_Validate_Temperature+0x7c>)
 80024fc:	4613      	mov	r3, r2
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	4413      	add	r3, r2
 8002502:	440b      	add	r3, r1
 8002504:	333a      	adds	r3, #58	; 0x3a
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4403      	add	r3, r0
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	60bb      	str	r3, [r7, #8]
			float min_temperature = MIN_OPERATION_TEMPERATURE;
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <FEB_LTC6811_Validate_Temperature+0x80>)
 8002510:	607b      	str	r3, [r7, #4]
			float max_temperature = MAX_OPERATION_TEMPERATURE;
 8002512:	4b15      	ldr	r3, [pc, #84]	; (8002568 <FEB_LTC6811_Validate_Temperature+0x84>)
 8002514:	603b      	str	r3, [r7, #0]
			if (FEB_CAN_CHARGER_START_CHARGE == 1) {
				min_temperature = MIN_CHARGING_TEMPERATURE;
				max_temperature = MAX_CHARGING_TEMPERATURE;
			}
			if (temperature < min_temperature || temperature > max_temperature) {
 8002516:	ed97 7a02 	vldr	s14, [r7, #8]
 800251a:	edd7 7a01 	vldr	s15, [r7, #4]
 800251e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002526:	d408      	bmi.n	800253a <FEB_LTC6811_Validate_Temperature+0x56>
 8002528:	ed97 7a02 	vldr	s14, [r7, #8]
 800252c:	edd7 7a00 	vldr	s15, [r7]
 8002530:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002538:	dd01      	ble.n	800253e <FEB_LTC6811_Validate_Temperature+0x5a>
				FEB_BMS_Shutdown_Initiate();
 800253a:	f7fe fd6b 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 800253e:	7bbb      	ldrb	r3, [r7, #14]
 8002540:	3301      	adds	r3, #1
 8002542:	73bb      	strb	r3, [r7, #14]
 8002544:	7bbb      	ldrb	r3, [r7, #14]
 8002546:	2b10      	cmp	r3, #16
 8002548:	d9d5      	bls.n	80024f6 <FEB_LTC6811_Validate_Temperature+0x12>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	3301      	adds	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0cc      	beq.n	80024f0 <FEB_LTC6811_Validate_Temperature+0xc>
			}
		}
	}
}
 8002556:	bf00      	nop
 8002558:	bf00      	nop
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20002640 	.word	0x20002640
 8002564:	c1a00000 	.word	0xc1a00000
 8002568:	42700000 	.word	0x42700000

0800256c <FEB_LTC6811_UART_Transmit_Temperature>:

void FEB_LTC6811_UART_Transmit_Temperature() {
 800256c:	b580      	push	{r7, lr}
 800256e:	f5ad 6da1 	sub.w	sp, sp, #1288	; 0x508
 8002572:	af00      	add	r7, sp, #0
	char UART_Str[1024];
	char temp_str[256];

	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8002574:	2300      	movs	r3, #0
 8002576:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 800257a:	e05e      	b.n	800263a <FEB_LTC6811_UART_Transmit_Temperature+0xce>
		// Add bank_idx, cell_idx to {@code UART_Str}
		sprintf(UART_Str, "%d", (bank_idx << UART_BITS_PER_MESSAGE) + UART_TEMPERATURE_ID);
 800257c:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002588:	4931      	ldr	r1, [pc, #196]	; (8002650 <FEB_LTC6811_UART_Transmit_Temperature+0xe4>)
 800258a:	4618      	mov	r0, r3
 800258c:	f006 fed8 	bl	8009340 <siprintf>


		// Add values to {@code UART_Str}
		for (uint16_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8002590:	2300      	movs	r3, #0
 8002592:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8002596:	e02a      	b.n	80025ee <FEB_LTC6811_UART_Transmit_Temperature+0x82>
			float temperature = accumulator.banks[bank_idx].cells[cell_idx].temperature;
 8002598:	f897 2507 	ldrb.w	r2, [r7, #1287]	; 0x507
 800259c:	f8b7 1504 	ldrh.w	r1, [r7, #1284]	; 0x504
 80025a0:	482c      	ldr	r0, [pc, #176]	; (8002654 <FEB_LTC6811_UART_Transmit_Temperature+0xe8>)
 80025a2:	4613      	mov	r3, r2
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	4413      	add	r3, r2
 80025a8:	440b      	add	r3, r1
 80025aa:	333a      	adds	r3, #58	; 0x3a
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	4403      	add	r3, r0
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 80025b6:	6013      	str	r3, [r2, #0]

			sprintf(temp_str, " %f", temperature);
 80025b8:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	f7fd ffe3 	bl	8000588 <__aeabi_f2d>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4638      	mov	r0, r7
 80025c8:	4923      	ldr	r1, [pc, #140]	; (8002658 <FEB_LTC6811_UART_Transmit_Temperature+0xec>)
 80025ca:	f006 feb9 	bl	8009340 <siprintf>
			strncat(UART_Str, temp_str, strlen(temp_str));
 80025ce:	463b      	mov	r3, r7
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fd fe1d 	bl	8000210 <strlen>
 80025d6:	4602      	mov	r2, r0
 80025d8:	4639      	mov	r1, r7
 80025da:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80025de:	4618      	mov	r0, r3
 80025e0:	f006 fece 	bl	8009380 <strncat>
		for (uint16_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 80025e4:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 80025e8:	3301      	adds	r3, #1
 80025ea:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 80025ee:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 80025f2:	2b10      	cmp	r3, #16
 80025f4:	d9d0      	bls.n	8002598 <FEB_LTC6811_UART_Transmit_Temperature+0x2c>
		}

		// Add '\n' to {@code UART_Str}
		sprintf(temp_str, "\n");
 80025f6:	463b      	mov	r3, r7
 80025f8:	4918      	ldr	r1, [pc, #96]	; (800265c <FEB_LTC6811_UART_Transmit_Temperature+0xf0>)
 80025fa:	4618      	mov	r0, r3
 80025fc:	f006 fea0 	bl	8009340 <siprintf>
		strncat(UART_Str, temp_str, strlen(temp_str));
 8002600:	463b      	mov	r3, r7
 8002602:	4618      	mov	r0, r3
 8002604:	f7fd fe04 	bl	8000210 <strlen>
 8002608:	4602      	mov	r2, r0
 800260a:	4639      	mov	r1, r7
 800260c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002610:	4618      	mov	r0, r3
 8002612:	f006 feb5 	bl	8009380 <strncat>
		HAL_UART_Transmit(&huart2, (uint8_t*) UART_Str, strlen(UART_Str), 100);
 8002616:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800261a:	4618      	mov	r0, r3
 800261c:	f7fd fdf8 	bl	8000210 <strlen>
 8002620:	4603      	mov	r3, r0
 8002622:	b29a      	uxth	r2, r3
 8002624:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8002628:	2364      	movs	r3, #100	; 0x64
 800262a:	480d      	ldr	r0, [pc, #52]	; (8002660 <FEB_LTC6811_UART_Transmit_Temperature+0xf4>)
 800262c:	f005 fd77 	bl	800811e <HAL_UART_Transmit>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8002630:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8002634:	3301      	adds	r3, #1
 8002636:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 800263a:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 800263e:	2b00      	cmp	r3, #0
 8002640:	d09c      	beq.n	800257c <FEB_LTC6811_UART_Transmit_Temperature+0x10>
	}
}
 8002642:	bf00      	nop
 8002644:	bf00      	nop
 8002646:	f507 67a1 	add.w	r7, r7, #1288	; 0x508
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	0800b71c 	.word	0x0800b71c
 8002654:	20002640 	.word	0x20002640
 8002658:	0800b728 	.word	0x0800b728
 800265c:	0800b724 	.word	0x0800b724
 8002660:	200029d0 	.word	0x200029d0

08002664 <FEB_LTC6811_Clear_Temperature>:

void FEB_LTC6811_Clear_Temperature(void) {
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 800266a:	2300      	movs	r3, #0
 800266c:	71fb      	strb	r3, [r7, #7]
 800266e:	e018      	b.n	80026a2 <FEB_LTC6811_Clear_Temperature+0x3e>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8002670:	2300      	movs	r3, #0
 8002672:	71bb      	strb	r3, [r7, #6]
 8002674:	e00f      	b.n	8002696 <FEB_LTC6811_Clear_Temperature+0x32>
			accumulator.banks[bank_idx].cells[cell_idx].temperature = 0;
 8002676:	79fa      	ldrb	r2, [r7, #7]
 8002678:	79b9      	ldrb	r1, [r7, #6]
 800267a:	480f      	ldr	r0, [pc, #60]	; (80026b8 <FEB_LTC6811_Clear_Temperature+0x54>)
 800267c:	4613      	mov	r3, r2
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	4413      	add	r3, r2
 8002682:	440b      	add	r3, r1
 8002684:	333a      	adds	r3, #58	; 0x3a
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4403      	add	r3, r0
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8002690:	79bb      	ldrb	r3, [r7, #6]
 8002692:	3301      	adds	r3, #1
 8002694:	71bb      	strb	r3, [r7, #6]
 8002696:	79bb      	ldrb	r3, [r7, #6]
 8002698:	2b10      	cmp	r3, #16
 800269a:	d9ec      	bls.n	8002676 <FEB_LTC6811_Clear_Temperature+0x12>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	3301      	adds	r3, #1
 80026a0:	71fb      	strb	r3, [r7, #7]
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0e3      	beq.n	8002670 <FEB_LTC6811_Clear_Temperature+0xc>
		}
	}
}
 80026a8:	bf00      	nop
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	20002640 	.word	0x20002640
 80026bc:	00000000 	.word	0x00000000

080026c0 <FEB_LTC6811_Temp_LUT_Get_Temperature>:

float FEB_LTC6811_TEMP_MAP[][2] = {{1.3, 120.0}, {1.301, 119.5}, {1.302, 119.0}, {1.303, 118.5}, {1.304, 118.0}, {1.305, 117.5}, {1.306, 117.0}, {1.307, 116.5}, {1.308, 116.0}, {1.309, 115.5}, {1.31, 115.0}, {1.311, 114.5}, {1.312, 114.0}, {1.313, 113.5}, {1.314, 113.0}, {1.315, 112.5}, {1.316, 112.0}, {1.317, 111.5}, {1.318, 111.0}, {1.319, 110.5}, {1.32, 110.0}, {1.321, 109.5}, {1.322, 109.0}, {1.323, 108.5}, {1.324, 108.0}, {1.325, 107.5}, {1.326, 107.0}, {1.327, 106.5}, {1.328, 106.0}, {1.329, 105.5}, {1.33, 105.0}, {1.331, 104.5}, {1.332, 104.0}, {1.333, 103.5}, {1.334, 103.0}, {1.335, 102.5}, {1.336, 102.0}, {1.337, 101.5}, {1.338, 101.0}, {1.339, 100.5}, {1.34, 100.0}, {1.341, 99.5}, {1.342, 99.0}, {1.343, 98.5}, {1.344, 98.0}, {1.345, 97.5}, {1.346, 97.0}, {1.347, 96.5}, {1.348, 96.0}, {1.349, 95.5}, {1.35, 95.0}, {1.351, 94.75}, {1.352, 94.5}, {1.353, 94.25}, {1.354, 94.0}, {1.355, 93.75}, {1.356, 93.5}, {1.357, 93.25}, {1.358, 93.0}, {1.359, 92.75}, {1.36, 92.5}, {1.361, 92.25}, {1.362, 92.0}, {1.363, 91.75}, {1.364, 91.5}, {1.365, 91.25}, {1.366, 91.0}, {1.367, 90.75}, {1.368, 90.5}, {1.369, 90.25}, {1.37, 90.0}, {1.371, 89.5}, {1.372, 89.0}, {1.373, 88.5}, {1.374, 88.0}, {1.375, 87.5}, {1.376, 87.0}, {1.377, 86.5}, {1.378, 86.0}, {1.379, 85.5}, {1.38, 85.0}, {1.381, 84.75}, {1.382, 84.5}, {1.383, 84.25}, {1.384, 84.0}, {1.385, 83.75}, {1.386, 83.5}, {1.387, 83.25}, {1.388, 83.0}, {1.389, 82.75}, {1.39, 82.5}, {1.391, 82.25}, {1.392, 82.0}, {1.393, 81.75}, {1.394, 81.5}, {1.395, 81.25}, {1.396, 81.0}, {1.397, 80.75}, {1.398, 80.5}, {1.399, 80.25}, {1.4, 80.0}, {1.401, 79.8333}, {1.402, 79.6667}, {1.403, 79.5}, {1.404, 79.3333}, {1.405, 79.1667}, {1.406, 79.0}, {1.407, 78.8333}, {1.408, 78.6667}, {1.409, 78.5}, {1.41, 78.3333}, {1.411, 78.1667}, {1.412, 78.0}, {1.413, 77.8333}, {1.414, 77.6667}, {1.415, 77.5}, {1.416, 77.3333}, {1.417, 77.1667}, {1.418, 77.0}, {1.419, 76.8333}, {1.42, 76.6667}, {1.421, 76.5}, {1.422, 76.3333}, {1.423, 76.1667}, {1.424, 76.0}, {1.425, 75.8333}, {1.426, 75.6667}, {1.427, 75.5}, {1.428, 75.3333}, {1.429, 75.1667}, {1.43, 75.0}, {1.431, 74.75}, {1.432, 74.5}, {1.433, 74.25}, {1.434, 74.0}, {1.435, 73.75}, {1.436, 73.5}, {1.437, 73.25}, {1.438, 73.0}, {1.439, 72.75}, {1.44, 72.5}, {1.441, 72.25}, {1.442, 72.0}, {1.443, 71.75}, {1.444, 71.5}, {1.445, 71.25}, {1.446, 71.0}, {1.447, 70.75}, {1.448, 70.5}, {1.449, 70.25}, {1.45, 70.0}, {1.451, 69.8333}, {1.452, 69.6667}, {1.453, 69.5}, {1.454, 69.3333}, {1.455, 69.1667}, {1.456, 69.0}, {1.457, 68.8333}, {1.458, 68.6667}, {1.459, 68.5}, {1.46, 68.3333}, {1.461, 68.1667}, {1.462, 68.0}, {1.463, 67.8333}, {1.464, 67.6667}, {1.465, 67.5}, {1.466, 67.3333}, {1.467, 67.1667}, {1.468, 67.0}, {1.469, 66.8333}, {1.47, 66.6667}, {1.471, 66.5}, {1.472, 66.3333}, {1.473, 66.1667}, {1.474, 66.0}, {1.475, 65.8333}, {1.476, 65.6667}, {1.477, 65.5}, {1.478, 65.3333}, {1.479, 65.1667}, {1.48, 65.0}, {1.481, 64.8333}, {1.482, 64.6667}, {1.483, 64.5}, {1.484, 64.3333}, {1.485, 64.1667}, {1.486, 64.0}, {1.487, 63.8333}, {1.488, 63.6667}, {1.489, 63.5}, {1.49, 63.3333}, {1.491, 63.1667}, {1.492, 63.0}, {1.493, 62.8333}, {1.494, 62.6667}, {1.495, 62.5}, {1.496, 62.3333}, {1.497, 62.1667}, {1.498, 62.0}, {1.499, 61.8333}, {1.5, 61.6667}, {1.501, 61.5}, {1.502, 61.3333}, {1.503, 61.1667}, {1.504, 61.0}, {1.505, 60.8333}, {1.506, 60.6667}, {1.507, 60.5}, {1.508, 60.3333}, {1.509, 60.1667}, {1.51, 60.0}, {1.511, 59.875}, {1.512, 59.75}, {1.513, 59.625}, {1.514, 59.5}, {1.515, 59.375}, {1.516, 59.25}, {1.517, 59.125}, {1.518, 59.0}, {1.519, 58.875}, {1.52, 58.75}, {1.521, 58.625}, {1.522, 58.5}, {1.523, 58.375}, {1.524, 58.25}, {1.525, 58.125}, {1.526, 58.0}, {1.527, 57.875}, {1.528, 57.75}, {1.529, 57.625}, {1.53, 57.5}, {1.531, 57.375}, {1.532, 57.25}, {1.533, 57.125}, {1.534, 57.0}, {1.535, 56.875}, {1.536, 56.75}, {1.537, 56.625}, {1.538, 56.5}, {1.539, 56.375}, {1.54, 56.25}, {1.541, 56.125}, {1.542, 56.0}, {1.543, 55.875}, {1.544, 55.75}, {1.545, 55.625}, {1.546, 55.5}, {1.547, 55.375}, {1.548, 55.25}, {1.549, 55.125}, {1.55, 55.0}, {1.551, 54.875}, {1.552, 54.75}, {1.553, 54.625}, {1.554, 54.5}, {1.555, 54.375}, {1.556, 54.25}, {1.557, 54.125}, {1.558, 54.0}, {1.559, 53.875}, {1.56, 53.75}, {1.561, 53.625}, {1.562, 53.5}, {1.563, 53.375}, {1.564, 53.25}, {1.565, 53.125}, {1.566, 53.0}, {1.567, 52.875}, {1.568, 52.75}, {1.569, 52.625}, {1.57, 52.5}, {1.571, 52.375}, {1.572, 52.25}, {1.573, 52.125}, {1.574, 52.0}, {1.575, 51.875}, {1.576, 51.75}, {1.577, 51.625}, {1.578, 51.5}, {1.579, 51.375}, {1.58, 51.25}, {1.581, 51.125}, {1.582, 51.0}, {1.583, 50.875}, {1.584, 50.75}, {1.585, 50.625}, {1.586, 50.5}, {1.587, 50.375}, {1.588, 50.25}, {1.589, 50.125}, {1.59, 50.0}, {1.591, 49.875}, {1.592, 49.75}, {1.593, 49.625}, {1.594, 49.5}, {1.595, 49.375}, {1.596, 49.25}, {1.597, 49.125}, {1.598, 49.0}, {1.599, 48.875}, {1.6, 48.75}, {1.601, 48.625}, {1.602, 48.5}, {1.603, 48.375}, {1.604, 48.25}, {1.605, 48.125}, {1.606, 48.0}, {1.607, 47.875}, {1.608, 47.75}, {1.609, 47.625}, {1.61, 47.5}, {1.611, 47.375}, {1.612, 47.25}, {1.613, 47.125}, {1.614, 47.0}, {1.615, 46.875}, {1.616, 46.75}, {1.617, 46.625}, {1.618, 46.5}, {1.619, 46.375}, {1.62, 46.25}, {1.621, 46.125}, {1.622, 46.0}, {1.623, 45.875}, {1.624, 45.75}, {1.625, 45.625}, {1.626, 45.5}, {1.627, 45.375}, {1.628, 45.25}, {1.629, 45.125}, {1.63, 45.0}, {1.631, 44.9}, {1.632, 44.8}, {1.633, 44.7}, {1.634, 44.6}, {1.635, 44.5}, {1.636, 44.4}, {1.637, 44.3}, {1.638, 44.2}, {1.639, 44.1}, {1.64, 44.0}, {1.641, 43.9}, {1.642, 43.8}, {1.643, 43.7}, {1.644, 43.6}, {1.645, 43.5}, {1.646, 43.4}, {1.647, 43.3}, {1.648, 43.2}, {1.649, 43.1}, {1.65, 43.0}, {1.651, 42.9}, {1.652, 42.8}, {1.653, 42.7}, {1.654, 42.6}, {1.655, 42.5}, {1.656, 42.4}, {1.657, 42.3}, {1.658, 42.2}, {1.659, 42.1}, {1.66, 42.0}, {1.661, 41.9}, {1.662, 41.8}, {1.663, 41.7}, {1.664, 41.6}, {1.665, 41.5}, {1.666, 41.4}, {1.667, 41.3}, {1.668, 41.2}, {1.669, 41.1}, {1.67, 41.0}, {1.671, 40.9}, {1.672, 40.8}, {1.673, 40.7}, {1.674, 40.6}, {1.675, 40.5}, {1.676, 40.4}, {1.677, 40.3}, {1.678, 40.2}, {1.679, 40.1}, {1.68, 40.0}, {1.681, 39.9167}, {1.682, 39.8333}, {1.683, 39.75}, {1.684, 39.6667}, {1.685, 39.5833}, {1.686, 39.5}, {1.687, 39.4167}, {1.688, 39.3333}, {1.689, 39.25}, {1.69, 39.1667}, {1.691, 39.0833}, {1.692, 39.0}, {1.693, 38.9167}, {1.694, 38.8333}, {1.695, 38.75}, {1.696, 38.6667}, {1.697, 38.5833}, {1.698, 38.5}, {1.699, 38.4167}, {1.7, 38.3333}, {1.701, 38.25}, {1.702, 38.1667}, {1.703, 38.0833}, {1.704, 38.0}, {1.705, 37.9167}, {1.706, 37.8333}, {1.707, 37.75}, {1.708, 37.6667}, {1.709, 37.5833}, {1.71, 37.5}, {1.711, 37.4167}, {1.712, 37.3333}, {1.713, 37.25}, {1.714, 37.1667}, {1.715, 37.0833}, {1.716, 37.0}, {1.717, 36.9167}, {1.718, 36.8333}, {1.719, 36.75}, {1.72, 36.6667}, {1.721, 36.5833}, {1.722, 36.5}, {1.723, 36.4167}, {1.724, 36.3333}, {1.725, 36.25}, {1.726, 36.1667}, {1.727, 36.0833}, {1.728, 36.0}, {1.729, 35.9167}, {1.73, 35.8333}, {1.731, 35.75}, {1.732, 35.6667}, {1.733, 35.5833}, {1.734, 35.5}, {1.735, 35.4167}, {1.736, 35.3333}, {1.737, 35.25}, {1.738, 35.1667}, {1.739, 35.0833}, {1.74, 35.0}, {1.741, 34.9167}, {1.742, 34.8333}, {1.743, 34.75}, {1.744, 34.6667}, {1.745, 34.5833}, {1.746, 34.5}, {1.747, 34.4167}, {1.748, 34.3333}, {1.749, 34.25}, {1.75, 34.1667}, {1.751, 34.0833}, {1.752, 34.0}, {1.753, 33.9167}, {1.754, 33.8333}, {1.755, 33.75}, {1.756, 33.6667}, {1.757, 33.5833}, {1.758, 33.5}, {1.759, 33.4167}, {1.76, 33.3333}, {1.761, 33.25}, {1.762, 33.1667}, {1.763, 33.0833}, {1.764, 33.0}, {1.765, 32.9167}, {1.766, 32.8333}, {1.767, 32.75}, {1.768, 32.6667}, {1.769, 32.5833}, {1.77, 32.5}, {1.771, 32.4167}, {1.772, 32.3333}, {1.773, 32.25}, {1.774, 32.1667}, {1.775, 32.0833}, {1.776, 32.0}, {1.777, 31.9167}, {1.778, 31.8333}, {1.779, 31.75}, {1.78, 31.6667}, {1.781, 31.5833}, {1.782, 31.5}, {1.783, 31.4167}, {1.784, 31.3333}, {1.785, 31.25}, {1.786, 31.1667}, {1.787, 31.0833}, {1.788, 31.0}, {1.789, 30.9167}, {1.79, 30.8333}, {1.791, 30.75}, {1.792, 30.6667}, {1.793, 30.5833}, {1.794, 30.5}, {1.795, 30.4167}, {1.796, 30.3333}, {1.797, 30.25}, {1.798, 30.1667}, {1.799, 30.0833}, {1.8, 30.0}, {1.801, 29.9167}, {1.802, 29.8333}, {1.803, 29.75}, {1.804, 29.6667}, {1.805, 29.5833}, {1.806, 29.5}, {1.807, 29.4167}, {1.808, 29.3333}, {1.809, 29.25}, {1.81, 29.1667}, {1.811, 29.0833}, {1.812, 29.0}, {1.813, 28.9167}, {1.814, 28.8333}, {1.815, 28.75}, {1.816, 28.6667}, {1.817, 28.5833}, {1.818, 28.5}, {1.819, 28.4167}, {1.82, 28.3333}, {1.821, 28.25}, {1.822, 28.1667}, {1.823, 28.0833}, {1.824, 28.0}, {1.825, 27.9167}, {1.826, 27.8333}, {1.827, 27.75}, {1.828, 27.6667}, {1.829, 27.5833}, {1.83, 27.5}, {1.831, 27.4167}, {1.832, 27.3333}, {1.833, 27.25}, {1.834, 27.1667}, {1.835, 27.0833}, {1.836, 27.0}, {1.837, 26.9167}, {1.838, 26.8333}, {1.839, 26.75}, {1.84, 26.6667}, {1.841, 26.5833}, {1.842, 26.5}, {1.843, 26.4167}, {1.844, 26.3333}, {1.845, 26.25}, {1.846, 26.1667}, {1.847, 26.0833}, {1.848, 26.0}, {1.849, 25.9167}, {1.85, 25.8333}, {1.851, 25.75}, {1.852, 25.6667}, {1.853, 25.5833}, {1.854, 25.5}, {1.855, 25.4167}, {1.856, 25.3333}, {1.857, 25.25}, {1.858, 25.1667}, {1.859, 25.0833}, {1.86, 25.0}, {1.861, 24.9167}, {1.862, 24.8333}, {1.863, 24.75}, {1.864, 24.6667}, {1.865, 24.5833}, {1.866, 24.5}, {1.867, 24.4167}, {1.868, 24.3333}, {1.869, 24.25}, {1.87, 24.1667}, {1.871, 24.0833}, {1.872, 24.0}, {1.873, 23.9167}, {1.874, 23.8333}, {1.875, 23.75}, {1.876, 23.6667}, {1.877, 23.5833}, {1.878, 23.5}, {1.879, 23.4167}, {1.88, 23.3333}, {1.881, 23.25}, {1.882, 23.1667}, {1.883, 23.0833}, {1.884, 23.0}, {1.885, 22.9167}, {1.886, 22.8333}, {1.887, 22.75}, {1.888, 22.6667}, {1.889, 22.5833}, {1.89, 22.5}, {1.891, 22.4167}, {1.892, 22.3333}, {1.893, 22.25}, {1.894, 22.1667}, {1.895, 22.0833}, {1.896, 22.0}, {1.897, 21.9167}, {1.898, 21.8333}, {1.899, 21.75}, {1.9, 21.6667}, {1.901, 21.5833}, {1.902, 21.5}, {1.903, 21.4167}, {1.904, 21.3333}, {1.905, 21.25}, {1.906, 21.1667}, {1.907, 21.0833}, {1.908, 21.0}, {1.909, 20.9167}, {1.91, 20.8333}, {1.911, 20.75}, {1.912, 20.6667}, {1.913, 20.5833}, {1.914, 20.5}, {1.915, 20.4167}, {1.916, 20.3333}, {1.917, 20.25}, {1.918, 20.1667}, {1.919, 20.0833}, {1.92, 20.0}, {1.921, 19.9286}, {1.922, 19.8571}, {1.923, 19.7857}, {1.924, 19.7143}, {1.925, 19.6429}, {1.926, 19.5714}, {1.927, 19.5}, {1.928, 19.4286}, {1.929, 19.3571}, {1.93, 19.2857}, {1.931, 19.2143}, {1.932, 19.1429}, {1.933, 19.0714}, {1.934, 19.0}, {1.935, 18.9286}, {1.936, 18.8571}, {1.937, 18.7857}, {1.938, 18.7143}, {1.939, 18.6429}, {1.94, 18.5714}, {1.941, 18.5}, {1.942, 18.4286}, {1.943, 18.3571}, {1.944, 18.2857}, {1.945, 18.2143}, {1.946, 18.1429}, {1.947, 18.0714}, {1.948, 18.0}, {1.949, 17.9286}, {1.95, 17.8571}, {1.951, 17.7857}, {1.952, 17.7143}, {1.953, 17.6429}, {1.954, 17.5714}, {1.955, 17.5}, {1.956, 17.4286}, {1.957, 17.3571}, {1.958, 17.2857}, {1.959, 17.2143}, {1.96, 17.1429}, {1.961, 17.0714}, {1.962, 17.0}, {1.963, 16.9286}, {1.964, 16.8571}, {1.965, 16.7857}, {1.966, 16.7143}, {1.967, 16.6429}, {1.968, 16.5714}, {1.969, 16.5}, {1.97, 16.4286}, {1.971, 16.3571}, {1.972, 16.2857}, {1.973, 16.2143}, {1.974, 16.1429}, {1.975, 16.0714}, {1.976, 16.0}, {1.977, 15.9286}, {1.978, 15.8571}, {1.979, 15.7857}, {1.98, 15.7143}, {1.981, 15.6429}, {1.982, 15.5714}, {1.983, 15.5}, {1.984, 15.4286}, {1.985, 15.3571}, {1.986, 15.2857}, {1.987, 15.2143}, {1.988, 15.1429}, {1.989, 15.0714}, {1.99, 15.0}, {1.991, 14.9167}, {1.992, 14.8333}, {1.993, 14.75}, {1.994, 14.6667}, {1.995, 14.5833}, {1.996, 14.5}, {1.997, 14.4167}, {1.998, 14.3333}, {1.999, 14.25}, {2.0, 14.1667}, {2.001, 14.0833}, {2.002, 14.0}, {2.003, 13.9167}, {2.004, 13.8333}, {2.005, 13.75}, {2.006, 13.6667}, {2.007, 13.5833}, {2.008, 13.5}, {2.009, 13.4167}, {2.01, 13.3333}, {2.011, 13.25}, {2.012, 13.1667}, {2.013, 13.0833}, {2.014, 13.0}, {2.015, 12.9167}, {2.016, 12.8333}, {2.017, 12.75}, {2.018, 12.6667}, {2.019, 12.5833}, {2.02, 12.5}, {2.021, 12.4167}, {2.022, 12.3333}, {2.023, 12.25}, {2.024, 12.1667}, {2.025, 12.0833}, {2.026, 12.0}, {2.027, 11.9167}, {2.028, 11.8333}, {2.029, 11.75}, {2.03, 11.6667}, {2.031, 11.5833}, {2.032, 11.5}, {2.033, 11.4167}, {2.034, 11.3333}, {2.035, 11.25}, {2.036, 11.1667}, {2.037, 11.0833}, {2.038, 11.0}, {2.039, 10.9167}, {2.04, 10.8333}, {2.041, 10.75}, {2.042, 10.6667}, {2.043, 10.5833}, {2.044, 10.5}, {2.045, 10.4167}, {2.046, 10.3333}, {2.047, 10.25}, {2.048, 10.1667}, {2.049, 10.0833}, {2.05, 10.0}, {2.051, 9.9167}, {2.052, 9.8333}, {2.053, 9.75}, {2.054, 9.6667}, {2.055, 9.5833}, {2.056, 9.5}, {2.057, 9.4167}, {2.058, 9.3333}, {2.059, 9.25}, {2.06, 9.1667}, {2.061, 9.0833}, {2.062, 9.0}, {2.063, 8.9167}, {2.064, 8.8333}, {2.065, 8.75}, {2.066, 8.6667}, {2.067, 8.5833}, {2.068, 8.5}, {2.069, 8.4167}, {2.07, 8.3333}, {2.071, 8.25}, {2.072, 8.1667}, {2.073, 8.0833}, {2.074, 8.0}, {2.075, 7.9167}, {2.076, 7.8333}, {2.077, 7.75}, {2.078, 7.6667}, {2.079, 7.5833}, {2.08, 7.5}, {2.081, 7.4167}, {2.082, 7.3333}, {2.083, 7.25}, {2.084, 7.1667}, {2.085, 7.0833}, {2.086, 7.0}, {2.087, 6.9167}, {2.088, 6.8333}, {2.089, 6.75}, {2.09, 6.6667}, {2.091, 6.5833}, {2.092, 6.5}, {2.093, 6.4167}, {2.094, 6.3333}, {2.095, 6.25}, {2.096, 6.1667}, {2.097, 6.0833}, {2.098, 6.0}, {2.099, 5.9167}, {2.1, 5.8333}, {2.101, 5.75}, {2.102, 5.6667}, {2.103, 5.5833}, {2.104, 5.5}, {2.105, 5.4167}, {2.106, 5.3333}, {2.107, 5.25}, {2.108, 5.1667}, {2.109, 5.0833}, {2.11, 5.0}, {2.111, 4.9167}, {2.112, 4.8333}, {2.113, 4.75}, {2.114, 4.6667}, {2.115, 4.5833}, {2.116, 4.5}, {2.117, 4.4167}, {2.118, 4.3333}, {2.119, 4.25}, {2.12, 4.1667}, {2.121, 4.0833}, {2.122, 4.0}, {2.123, 3.9167}, {2.124, 3.8333}, {2.125, 3.75}, {2.126, 3.6667}, {2.127, 3.5833}, {2.128, 3.5}, {2.129, 3.4167}, {2.13, 3.3333}, {2.131, 3.25}, {2.132, 3.1667}, {2.133, 3.0833}, {2.134, 3.0}, {2.135, 2.9167}, {2.136, 2.8333}, {2.137, 2.75}, {2.138, 2.6667}, {2.139, 2.5833}, {2.14, 2.5}, {2.141, 2.4167}, {2.142, 2.3333}, {2.143, 2.25}, {2.144, 2.1667}, {2.145, 2.0833}, {2.146, 2.0}, {2.147, 1.9167}, {2.148, 1.8333}, {2.149, 1.75}, {2.15, 1.6667}, {2.151, 1.5833}, {2.152, 1.5}, {2.153, 1.4167}, {2.154, 1.3333}, {2.155, 1.25}, {2.156, 1.1667}, {2.157, 1.0833}, {2.158, 1.0}, {2.159, 0.9167}, {2.16, 0.8333}, {2.161, 0.75}, {2.162, 0.6667}, {2.163, 0.5833}, {2.164, 0.5}, {2.165, 0.4167}, {2.166, 0.3333}, {2.167, 0.25}, {2.168, 0.1667}, {2.169, 0.0833}, {2.17, 0.0}, {2.171, -0.0833}, {2.172, -0.1667}, {2.173, -0.25}, {2.174, -0.3333}, {2.175, -0.4167}, {2.176, -0.5}, {2.177, -0.5833}, {2.178, -0.6667}, {2.179, -0.75}, {2.18, -0.8333}, {2.181, -0.9167}, {2.182, -1.0}, {2.183, -1.0833}, {2.184, -1.1667}, {2.185, -1.25}, {2.186, -1.3333}, {2.187, -1.4167}, {2.188, -1.5}, {2.189, -1.5833}, {2.19, -1.6667}, {2.191, -1.75}, {2.192, -1.8333}, {2.193, -1.9167}, {2.194, -2.0}, {2.195, -2.0833}, {2.196, -2.1667}, {2.197, -2.25}, {2.198, -2.3333}, {2.199, -2.4167}, {2.2, -2.5}, {2.201, -2.5833}, {2.202, -2.6667}, {2.203, -2.75}, {2.204, -2.8333}, {2.205, -2.9167}, {2.206, -3.0}, {2.207, -3.0833}, {2.208, -3.1667}, {2.209, -3.25}, {2.21, -3.3333}, {2.211, -3.4167}, {2.212, -3.5}, {2.213, -3.5833}, {2.214, -3.6667}, {2.215, -3.75}, {2.216, -3.8333}, {2.217, -3.9167}, {2.218, -4.0}, {2.219, -4.0833}, {2.22, -4.1667}, {2.221, -4.25}, {2.222, -4.3333}, {2.223, -4.4167}, {2.224, -4.5}, {2.225, -4.5833}, {2.226, -4.6667}, {2.227, -4.75}, {2.228, -4.8333}, {2.229, -4.9167}, {2.23, -5.0}, {2.231, -5.125}, {2.232, -5.25}, {2.233, -5.375}, {2.234, -5.5}, {2.235, -5.625}, {2.236, -5.75}, {2.237, -5.875}, {2.238, -6.0}, {2.239, -6.125}, {2.24, -6.25}, {2.241, -6.375}, {2.242, -6.5}, {2.243, -6.625}, {2.244, -6.75}, {2.245, -6.875}, {2.246, -7.0}, {2.247, -7.125}, {2.248, -7.25}, {2.249, -7.375}, {2.25, -7.5}, {2.251, -7.625}, {2.252, -7.75}, {2.253, -7.875}, {2.254, -8.0}, {2.255, -8.125}, {2.256, -8.25}, {2.257, -8.375}, {2.258, -8.5}, {2.259, -8.625}, {2.26, -8.75}, {2.261, -8.875}, {2.262, -9.0}, {2.263, -9.125}, {2.264, -9.25}, {2.265, -9.375}, {2.266, -9.5}, {2.267, -9.625}, {2.268, -9.75}, {2.269, -9.875}, {2.27, -10.0}, {2.271, -10.1}, {2.272, -10.2}, {2.273, -10.3}, {2.274, -10.4}, {2.275, -10.5}, {2.276, -10.6}, {2.277, -10.7}, {2.278, -10.8}, {2.279, -10.9}, {2.28, -11.0}, {2.281, -11.1}, {2.282, -11.2}, {2.283, -11.3}, {2.284, -11.4}, {2.285, -11.5}, {2.286, -11.6}, {2.287, -11.7}, {2.288, -11.8}, {2.289, -11.9}, {2.29, -12.0}, {2.291, -12.1}, {2.292, -12.2}, {2.293, -12.3}, {2.294, -12.4}, {2.295, -12.5}, {2.296, -12.6}, {2.297, -12.7}, {2.298, -12.8}, {2.299, -12.9}, {2.3, -13.0}, {2.301, -13.1}, {2.302, -13.2}, {2.303, -13.3}, {2.304, -13.4}, {2.305, -13.5}, {2.306, -13.6}, {2.307, -13.7}, {2.308, -13.8}, {2.309, -13.9}, {2.31, -14.0}, {2.311, -14.1}, {2.312, -14.2}, {2.313, -14.3}, {2.314, -14.4}, {2.315, -14.5}, {2.316, -14.6}, {2.317, -14.7}, {2.318, -14.8}, {2.319, -14.9}, {2.32, -15.0}, {2.321, -15.1667}, {2.322, -15.3333}, {2.323, -15.5}, {2.324, -15.6667}, {2.325, -15.8333}, {2.326, -16.0}, {2.327, -16.1667}, {2.328, -16.3333}, {2.329, -16.5}, {2.33, -16.6667}, {2.331, -16.8333}, {2.332, -17.0}, {2.333, -17.1667}, {2.334, -17.3333}, {2.335, -17.5}, {2.336, -17.6667}, {2.337, -17.8333}, {2.338, -18.0}, {2.339, -18.1667}, {2.34, -18.3333}, {2.341, -18.5}, {2.342, -18.6667}, {2.343, -18.8333}, {2.344, -19.0}, {2.345, -19.1667}, {2.346, -19.3333}, {2.347, -19.5}, {2.348, -19.6667}, {2.349, -19.8333}, {2.35, -20.0}, {2.351, -20.1667}, {2.352, -20.3333}, {2.353, -20.5}, {2.354, -20.6667}, {2.355, -20.8333}, {2.356, -21.0}, {2.357, -21.1667}, {2.358, -21.3333}, {2.359, -21.5}, {2.36, -21.6667}, {2.361, -21.8333}, {2.362, -22.0}, {2.363, -22.1667}, {2.364, -22.3333}, {2.365, -22.5}, {2.366, -22.6667}, {2.367, -22.8333}, {2.368, -23.0}, {2.369, -23.1667}, {2.37, -23.3333}, {2.371, -23.5}, {2.372, -23.6667}, {2.373, -23.8333}, {2.374, -24.0}, {2.375, -24.1667}, {2.376, -24.3333}, {2.377, -24.5}, {2.378, -24.6667}, {2.379, -24.8333}, {2.38, -25.0}, {2.381, -25.25}, {2.382, -25.5}, {2.383, -25.75}, {2.384, -26.0}, {2.385, -26.25}, {2.386, -26.5}, {2.387, -26.75}, {2.388, -27.0}, {2.389, -27.25}, {2.39, -27.5}, {2.391, -27.75}, {2.392, -28.0}, {2.393, -28.25}, {2.394, -28.5}, {2.395, -28.75}, {2.396, -29.0}, {2.397, -29.25}, {2.398, -29.5}, {2.399, -29.75}, {2.4, -30.0}, {2.401, -30.25}, {2.402, -30.5}, {2.403, -30.75}, {2.404, -31.0}, {2.405, -31.25}, {2.406, -31.5}, {2.407, -31.75}, {2.408, -32.0}, {2.409, -32.25}, {2.41, -32.5}, {2.411, -32.75}, {2.412, -33.0}, {2.413, -33.25}, {2.414, -33.5}, {2.415, -33.75}, {2.416, -34.0}, {2.417, -34.25}, {2.418, -34.5}, {2.419, -34.75}, {2.42, -35.0}, {2.421, -35.25}, {2.422, -35.5}, {2.423, -35.75}, {2.424, -36.0}, {2.425, -36.25}, {2.426, -36.5}, {2.427, -36.75}, {2.428, -37.0}, {2.429, -37.25}, {2.43, -37.5}, {2.431, -37.75}, {2.432, -38.0}, {2.433, -38.25}, {2.434, -38.5}, {2.435, -38.75}, {2.436, -39.0}, {2.437, -39.25}, {2.438, -39.5}, {2.439, -39.75}, {2.44, -40.0}};

// ********************************** Functions **********************************

float FEB_LTC6811_Temp_LUT_Get_Temperature(float voltage) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	ed87 0a01 	vstr	s0, [r7, #4]
	if (voltage < FEB_LTC6811_TEMP_LUT_MIN_MAP_VOLT || voltage > FEB_LTC6811_TEMP_LUT_MAX_MAP_VOLT) {
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7fd ff5c 	bl	8000588 <__aeabi_f2d>
 80026d0:	a323      	add	r3, pc, #140	; (adr r3, 8002760 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xa0>)
 80026d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d6:	f7fe fa21 	bl	8000b1c <__aeabi_dcmplt>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10a      	bne.n	80026f6 <FEB_LTC6811_Temp_LUT_Get_Temperature+0x36>
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7fd ff51 	bl	8000588 <__aeabi_f2d>
 80026e6:	a324      	add	r3, pc, #144	; (adr r3, 8002778 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xb8>)
 80026e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ec:	f7fe fa34 	bl	8000b58 <__aeabi_dcmpgt>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <FEB_LTC6811_Temp_LUT_Get_Temperature+0x3a>
		return -42.0;
 80026f6:	4b1e      	ldr	r3, [pc, #120]	; (8002770 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xb0>)
 80026f8:	e028      	b.n	800274c <FEB_LTC6811_Temp_LUT_Get_Temperature+0x8c>
	}

	uint16_t index = (uint16_t) round((voltage - FEB_LTC6811_TEMP_LUT_MIN_MAP_VOLT) / FEB_LTC6811_TEMP_LUT_RESOLUTION);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7fd ff44 	bl	8000588 <__aeabi_f2d>
 8002700:	a317      	add	r3, pc, #92	; (adr r3, 8002760 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xa0>)
 8002702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002706:	f7fd fddf 	bl	80002c8 <__aeabi_dsub>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4610      	mov	r0, r2
 8002710:	4619      	mov	r1, r3
 8002712:	a315      	add	r3, pc, #84	; (adr r3, 8002768 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xa8>)
 8002714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002718:	f7fe f8b8 	bl	800088c <__aeabi_ddiv>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	ec43 2b17 	vmov	d7, r2, r3
 8002724:	eeb0 0a47 	vmov.f32	s0, s14
 8002728:	eef0 0a67 	vmov.f32	s1, s15
 800272c:	f008 ff9c 	bl	800b668 <round>
 8002730:	ec53 2b10 	vmov	r2, r3, d0
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	f7fe fa56 	bl	8000be8 <__aeabi_d2uiz>
 800273c:	4603      	mov	r3, r0
 800273e:	81fb      	strh	r3, [r7, #14]
	return FEB_LTC6811_TEMP_MAP[index][1];
 8002740:	89fb      	ldrh	r3, [r7, #14]
 8002742:	4a0c      	ldr	r2, [pc, #48]	; (8002774 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xb4>)
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4413      	add	r3, r2
 8002748:	3304      	adds	r3, #4
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	ee07 3a90 	vmov	s15, r3
 8002750:	eeb0 0a67 	vmov.f32	s0, s15
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	f3af 8000 	nop.w
 8002760:	cccccccd 	.word	0xcccccccd
 8002764:	3ff4cccc 	.word	0x3ff4cccc
 8002768:	d2f1a9fc 	.word	0xd2f1a9fc
 800276c:	3f50624d 	.word	0x3f50624d
 8002770:	c2280000 	.word	0xc2280000
 8002774:	20000030 	.word	0x20000030
 8002778:	b851eb85 	.word	0xb851eb85
 800277c:	4003851e 	.word	0x4003851e

08002780 <LTC6811_init_reg_limits>:

/* Initialize the Register limits */
void LTC6811_init_reg_limits(uint8_t total_ic, //The number of ICs in the system
							cell_asic *ic  //A two dimensional array where data will be written
							)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	6039      	str	r1, [r7, #0]
 800278a:	71fb      	strb	r3, [r7, #7]
  for (uint8_t cic=0; cic<total_ic; cic++)
 800278c:	2300      	movs	r3, #0
 800278e:	73fb      	strb	r3, [r7, #15]
 8002790:	e038      	b.n	8002804 <LTC6811_init_reg_limits+0x84>
  {
    ic[cic].ic_reg.cell_channels=12;
 8002792:	7bfb      	ldrb	r3, [r7, #15]
 8002794:	22e8      	movs	r2, #232	; 0xe8
 8002796:	fb02 f303 	mul.w	r3, r2, r3
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	4413      	add	r3, r2
 800279e:	220c      	movs	r2, #12
 80027a0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    ic[cic].ic_reg.stat_channels=4;
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	22e8      	movs	r2, #232	; 0xe8
 80027a8:	fb02 f303 	mul.w	r3, r2, r3
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	4413      	add	r3, r2
 80027b0:	2204      	movs	r2, #4
 80027b2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    ic[cic].ic_reg.aux_channels=6;
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
 80027b8:	22e8      	movs	r2, #232	; 0xe8
 80027ba:	fb02 f303 	mul.w	r3, r2, r3
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	4413      	add	r3, r2
 80027c2:	2206      	movs	r2, #6
 80027c4:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
    ic[cic].ic_reg.num_cv_reg=4;
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	22e8      	movs	r2, #232	; 0xe8
 80027cc:	fb02 f303 	mul.w	r3, r2, r3
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	4413      	add	r3, r2
 80027d4:	2204      	movs	r2, #4
 80027d6:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
    ic[cic].ic_reg.num_gpio_reg=2;
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	22e8      	movs	r2, #232	; 0xe8
 80027de:	fb02 f303 	mul.w	r3, r2, r3
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	4413      	add	r3, r2
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    ic[cic].ic_reg.num_stat_reg=3;
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	22e8      	movs	r2, #232	; 0xe8
 80027f0:	fb02 f303 	mul.w	r3, r2, r3
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	4413      	add	r3, r2
 80027f8:	2203      	movs	r2, #3
 80027fa:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
  for (uint8_t cic=0; cic<total_ic; cic++)
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	3301      	adds	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
 8002804:	7bfa      	ldrb	r2, [r7, #15]
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	429a      	cmp	r2, r3
 800280a:	d3c2      	bcc.n	8002792 <LTC6811_init_reg_limits+0x12>
  }
}
 800280c:	bf00      	nop
 800280e:	bf00      	nop
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <LTC6811_wrcfg>:
order so the last device's configuration is written first.
*/
void LTC6811_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic *ic //A two dimensional array of the configuration data that will be written
                  )
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	6039      	str	r1, [r7, #0]
 8002824:	71fb      	strb	r3, [r7, #7]
  LTC681x_wrcfg(total_ic,ic);
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	6839      	ldr	r1, [r7, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f000 f9c4 	bl	8002bb8 <LTC681x_wrcfg>
}
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <LTC6811_adcv>:
/* Starts cell voltage conversion */
void LTC6811_adcv(uint8_t MD, //ADC Mode
				  uint8_t DCP, //Discharge Permit
				  uint8_t CH //Cell Channels to be measured
				  )
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	71fb      	strb	r3, [r7, #7]
 8002842:	460b      	mov	r3, r1
 8002844:	71bb      	strb	r3, [r7, #6]
 8002846:	4613      	mov	r3, r2
 8002848:	717b      	strb	r3, [r7, #5]
  LTC681x_adcv(MD,DCP,CH);
 800284a:	797a      	ldrb	r2, [r7, #5]
 800284c:	79b9      	ldrb	r1, [r7, #6]
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	4618      	mov	r0, r3
 8002852:	f000 fa30 	bl	8002cb6 <LTC681x_adcv>
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <LTC6811_adax>:

/* Start a GPIO and Vref2 Conversion */
void LTC6811_adax(uint8_t MD, //ADC Mode
				  uint8_t CHG //GPIO Channels to be measured
				  )
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	4603      	mov	r3, r0
 8002866:	460a      	mov	r2, r1
 8002868:	71fb      	strb	r3, [r7, #7]
 800286a:	4613      	mov	r3, r2
 800286c:	71bb      	strb	r3, [r7, #6]
  LTC681x_adax(MD,CHG);
 800286e:	79ba      	ldrb	r2, [r7, #6]
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	4611      	mov	r1, r2
 8002874:	4618      	mov	r0, r3
 8002876:	f000 fa49 	bl	8002d0c <LTC681x_adax>
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <LTC6811_rdcv>:
*/
uint8_t LTC6811_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // The number of ICs in the system
                     cell_asic *ic // Array of the parsed cell codes
                    )
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b084      	sub	sp, #16
 8002886:	af00      	add	r7, sp, #0
 8002888:	4603      	mov	r3, r0
 800288a:	603a      	str	r2, [r7, #0]
 800288c:	71fb      	strb	r3, [r7, #7]
 800288e:	460b      	mov	r3, r1
 8002890:	71bb      	strb	r3, [r7, #6]
  int8_t pec_error = 0;
 8002892:	2300      	movs	r3, #0
 8002894:	73fb      	strb	r3, [r7, #15]
  pec_error = LTC681x_rdcv(reg,total_ic,ic);
 8002896:	79b9      	ldrb	r1, [r7, #6]
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f000 fa5a 	bl	8002d56 <LTC681x_rdcv>
 80028a2:	4603      	mov	r3, r0
 80028a4:	73fb      	strb	r3, [r7, #15]
  return(pec_error);
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <LTC6811_rdaux>:
*/
int8_t LTC6811_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
                     uint8_t total_ic,//The number of ICs in the system
                     cell_asic *ic//A two dimensional array of the gpio voltage codes.
                     )
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	603a      	str	r2, [r7, #0]
 80028ba:	71fb      	strb	r3, [r7, #7]
 80028bc:	460b      	mov	r3, r1
 80028be:	71bb      	strb	r3, [r7, #6]
  int8_t pec_error = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	73fb      	strb	r3, [r7, #15]
  LTC681x_rdaux(reg,total_ic,ic);
 80028c4:	79b9      	ldrb	r1, [r7, #6]
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 faf7 	bl	8002ebe <LTC681x_rdaux>
  return (pec_error);
 80028d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <LTC6811_pollAdc>:
  return(LTC681x_pladc());
}

//This function will block operation until the ADC has finished it's conversion */
uint32_t LTC6811_pollAdc()
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  return(LTC681x_pollAdc());
 80028e0:	f000 fcb8 	bl	8003254 <LTC681x_pollAdc>
 80028e4:	4603      	mov	r3, r0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	bd80      	pop	{r7, pc}

080028ea <LTC6811_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC6811_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that will store the data
							 )
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	4603      	mov	r3, r0
 80028f2:	6039      	str	r1, [r7, #0]
 80028f4:	71fb      	strb	r3, [r7, #7]
  LTC681x_reset_crc_count(total_ic,ic);
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	6839      	ldr	r1, [r7, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fe92 	bl	8003624 <LTC681x_reset_crc_count>
}
 8002900:	bf00      	nop
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <LTC6811_init_cfg>:

/* Helper function to initialize CFG variables.*/
void LTC6811_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that will store the data
					  )
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	6039      	str	r1, [r7, #0]
 8002912:	71fb      	strb	r3, [r7, #7]
  LTC681x_init_cfg(total_ic,ic);
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	6839      	ldr	r1, [r7, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f000 fee9 	bl	80036f0 <LTC681x_init_cfg>
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <LTC6811_set_cfgr>:
					  bool dcc[12],// The DCC bit
					  bool dcto[4],// The Dcto bit
					  uint16_t uv, // The UV bit
					  uint16_t  ov // The OV bit
					  )
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b088      	sub	sp, #32
 800292a:	af06      	add	r7, sp, #24
 800292c:	6039      	str	r1, [r7, #0]
 800292e:	4611      	mov	r1, r2
 8002930:	461a      	mov	r2, r3
 8002932:	4603      	mov	r3, r0
 8002934:	71fb      	strb	r3, [r7, #7]
 8002936:	460b      	mov	r3, r1
 8002938:	71bb      	strb	r3, [r7, #6]
 800293a:	4613      	mov	r3, r2
 800293c:	717b      	strb	r3, [r7, #5]
  LTC681x_set_cfgr(nIC ,ic,refon,adcopt,gpio,dcc,dcto, uv, ov);
 800293e:	7979      	ldrb	r1, [r7, #5]
 8002940:	79ba      	ldrb	r2, [r7, #6]
 8002942:	79f8      	ldrb	r0, [r7, #7]
 8002944:	8c3b      	ldrh	r3, [r7, #32]
 8002946:	9304      	str	r3, [sp, #16]
 8002948:	8bbb      	ldrh	r3, [r7, #28]
 800294a:	9303      	str	r3, [sp, #12]
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	9302      	str	r3, [sp, #8]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	460b      	mov	r3, r1
 800295a:	6839      	ldr	r1, [r7, #0]
 800295c:	f000 fef2 	bl	8003744 <LTC681x_set_cfgr>
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <wakeup_idle>:
                                0x585a, 0x8ba7, 0x4e3e, 0x450c, 0x8095
                               };

/* Wake isoSPI up from IDlE state and enters the READY state */
void wakeup_idle(uint8_t total_ic) //Number of ICs in the system
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<total_ic; i++)
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	e00b      	b.n	8002990 <wakeup_idle+0x28>
	{
	   cs_low(CS_PIN);
 8002978:	200a      	movs	r0, #10
 800297a:	f001 f93d 	bl	8003bf8 <cs_low>
	   spi_read_byte(0xff);//Guarantees the isoSPI will be in ready mode
 800297e:	20ff      	movs	r0, #255	; 0xff
 8002980:	f001 f9b0 	bl	8003ce4 <spi_read_byte>
	   cs_high(CS_PIN);
 8002984:	200a      	movs	r0, #10
 8002986:	f001 f947 	bl	8003c18 <cs_high>
	for (int i =0; i<total_ic; i++)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	3301      	adds	r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	429a      	cmp	r2, r3
 8002996:	dbef      	blt.n	8002978 <wakeup_idle+0x10>
	}
}
 8002998:	bf00      	nop
 800299a:	bf00      	nop
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <wakeup_sleep>:

/* Generic wakeup command to wake the LTC681x from sleep state */
void wakeup_sleep(uint8_t total_ic) //Number of ICs in the system
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b084      	sub	sp, #16
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	4603      	mov	r3, r0
 80029aa:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<total_ic; i++)
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	e00f      	b.n	80029d2 <wakeup_sleep+0x30>
	{
	   cs_low(CS_PIN);
 80029b2:	200a      	movs	r0, #10
 80029b4:	f001 f920 	bl	8003bf8 <cs_low>
	   delay_u(300); // Guarantees the LTC681x will be in standby
 80029b8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80029bc:	f001 f93c 	bl	8003c38 <delay_u>
	   cs_high(CS_PIN);
 80029c0:	200a      	movs	r0, #10
 80029c2:	f001 f929 	bl	8003c18 <cs_high>
	   delay_u(10);
 80029c6:	200a      	movs	r0, #10
 80029c8:	f001 f936 	bl	8003c38 <delay_u>
	for (int i =0; i<total_ic; i++)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	3301      	adds	r3, #1
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	dbeb      	blt.n	80029b2 <wakeup_sleep+0x10>
	}
}
 80029da:	bf00      	nop
 80029dc:	bf00      	nop
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <cmd_68>:

/* Generic function to write 68xx commands. Function calculates PEC for tx_cmd data. */
void cmd_68(uint8_t tx_cmd[2]) //The command to be transmitted
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	cmd[0] = tx_cmd[0];
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	723b      	strb	r3, [r7, #8]
	cmd[1] =  tx_cmd[1];
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	785b      	ldrb	r3, [r3, #1]
 80029f6:	727b      	strb	r3, [r7, #9]
	cmd_pec = pec15_calc(2, cmd);
 80029f8:	f107 0308 	add.w	r3, r7, #8
 80029fc:	4619      	mov	r1, r3
 80029fe:	2002      	movs	r0, #2
 8002a00:	f000 f8a6 	bl	8002b50 <pec15_calc>
 8002a04:	4603      	mov	r3, r0
 8002a06:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8002a08:	89fb      	ldrh	r3, [r7, #14]
 8002a0a:	0a1b      	lsrs	r3, r3, #8
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8002a12:	89fb      	ldrh	r3, [r7, #14]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 8002a18:	200a      	movs	r0, #10
 8002a1a:	f001 f8ed 	bl	8003bf8 <cs_low>
	spi_write_array(4,cmd);
 8002a1e:	f107 0308 	add.w	r3, r7, #8
 8002a22:	4619      	mov	r1, r3
 8002a24:	2004      	movs	r0, #4
 8002a26:	f001 f913 	bl	8003c50 <spi_write_array>
	cs_high(CS_PIN);
 8002a2a:	200a      	movs	r0, #10
 8002a2c:	f001 f8f4 	bl	8003c18 <cs_high>
}
 8002a30:	bf00      	nop
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
			  uint8_t tx_cmd[2], //The command to be transmitted
			  uint8_t data[] // Payload Data
			  )
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	73fb      	strb	r3, [r7, #15]
	const uint8_t BYTES_IN_REG = 6;
 8002a46:	2306      	movs	r3, #6
 8002a48:	773b      	strb	r3, [r7, #28]
	const uint8_t CMD_LEN = 4+(8*total_ic);
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	3304      	adds	r3, #4
 8002a52:	76fb      	strb	r3, [r7, #27]
	uint8_t *cmd;
	uint16_t data_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index;

	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8002a54:	7efb      	ldrb	r3, [r7, #27]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f005 ff00 	bl	800885c <malloc>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	617b      	str	r3, [r7, #20]
	cmd[0] = tx_cmd[0];
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	781a      	ldrb	r2, [r3, #0]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	701a      	strb	r2, [r3, #0]
	cmd[1] = tx_cmd[1];
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	7852      	ldrb	r2, [r2, #1]
 8002a70:	701a      	strb	r2, [r3, #0]
	cmd_pec = pec15_calc(2, cmd);
 8002a72:	6979      	ldr	r1, [r7, #20]
 8002a74:	2002      	movs	r0, #2
 8002a76:	f000 f86b 	bl	8002b50 <pec15_calc>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8002a7e:	8a7b      	ldrh	r3, [r7, #18]
 8002a80:	0a1b      	lsrs	r3, r3, #8
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	3302      	adds	r3, #2
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t)(cmd_pec);
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	3303      	adds	r3, #3
 8002a90:	8a7a      	ldrh	r2, [r7, #18]
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 8002a96:	2304      	movs	r3, #4
 8002a98:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each LTC681x, this loops starts with the last IC on the stack.
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	77bb      	strb	r3, [r7, #30]
 8002a9e:	e042      	b.n	8002b26 <write_68+0xee>
    {	                                                                            //The first configuration written is received by the last IC in the daisy chain
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	777b      	strb	r3, [r7, #29]
 8002aa4:	e016      	b.n	8002ad4 <write_68+0x9c>
		{
			cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 8002aa6:	7fbb      	ldrb	r3, [r7, #30]
 8002aa8:	1e5a      	subs	r2, r3, #1
 8002aaa:	4613      	mov	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	4413      	add	r3, r2
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	7f7b      	ldrb	r3, [r7, #29]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	461a      	mov	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	441a      	add	r2, r3
 8002abe:	7ffb      	ldrb	r3, [r7, #31]
 8002ac0:	6979      	ldr	r1, [r7, #20]
 8002ac2:	440b      	add	r3, r1
 8002ac4:	7812      	ldrb	r2, [r2, #0]
 8002ac6:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 8002ac8:	7ffb      	ldrb	r3, [r7, #31]
 8002aca:	3301      	adds	r3, #1
 8002acc:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8002ace:	7f7b      	ldrb	r3, [r7, #29]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	777b      	strb	r3, [r7, #29]
 8002ad4:	7f7a      	ldrb	r2, [r7, #29]
 8002ad6:	7f3b      	ldrb	r3, [r7, #28]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d3e4      	bcc.n	8002aa6 <write_68+0x6e>
		}

		data_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &data[(current_ic-1)*6]);    // Calculating the PEC for each ICs configuration register data
 8002adc:	7fbb      	ldrb	r3, [r7, #30]
 8002ade:	1e5a      	subs	r2, r3, #1
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	4413      	add	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	461a      	mov	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	441a      	add	r2, r3
 8002aee:	7f3b      	ldrb	r3, [r7, #28]
 8002af0:	4611      	mov	r1, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 f82c 	bl	8002b50 <pec15_calc>
 8002af8:	4603      	mov	r3, r0
 8002afa:	823b      	strh	r3, [r7, #16]
		cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 8002afc:	8a3b      	ldrh	r3, [r7, #16]
 8002afe:	0a1b      	lsrs	r3, r3, #8
 8002b00:	b299      	uxth	r1, r3
 8002b02:	7ffb      	ldrb	r3, [r7, #31]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	4413      	add	r3, r2
 8002b08:	b2ca      	uxtb	r2, r1
 8002b0a:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t)data_pec;
 8002b0c:	7ffb      	ldrb	r3, [r7, #31]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	4413      	add	r3, r2
 8002b14:	8a3a      	ldrh	r2, [r7, #16]
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 8002b1a:	7ffb      	ldrb	r3, [r7, #31]
 8002b1c:	3302      	adds	r3, #2
 8002b1e:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each LTC681x, this loops starts with the last IC on the stack.
 8002b20:	7fbb      	ldrb	r3, [r7, #30]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	77bb      	strb	r3, [r7, #30]
 8002b26:	7fbb      	ldrb	r3, [r7, #30]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1b9      	bne.n	8002aa0 <write_68+0x68>
	}

	cs_low(CS_PIN);
 8002b2c:	200a      	movs	r0, #10
 8002b2e:	f001 f863 	bl	8003bf8 <cs_low>
	spi_write_array(CMD_LEN, cmd);
 8002b32:	7efb      	ldrb	r3, [r7, #27]
 8002b34:	6979      	ldr	r1, [r7, #20]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f001 f88a 	bl	8003c50 <spi_write_array>
	cs_high(CS_PIN);
 8002b3c:	200a      	movs	r0, #10
 8002b3e:	f001 f86b 	bl	8003c18 <cs_high>

	free(cmd);
 8002b42:	6978      	ldr	r0, [r7, #20]
 8002b44:	f005 fe92 	bl	800886c <free>
}
 8002b48:	bf00      	nop
 8002b4a:	3720      	adds	r7, #32
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <pec15_calc>:

/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	6039      	str	r1, [r7, #0]
 8002b5a:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder,addr;
	remainder = 16;//initialize the PEC
 8002b5c:	2310      	movs	r3, #16
 8002b5e:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8002b60:	2300      	movs	r3, #0
 8002b62:	737b      	strb	r3, [r7, #13]
 8002b64:	e019      	b.n	8002b9a <pec15_calc+0x4a>
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 8002b66:	89fb      	ldrh	r3, [r7, #14]
 8002b68:	09db      	lsrs	r3, r3, #7
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	7b7b      	ldrb	r3, [r7, #13]
 8002b6e:	6839      	ldr	r1, [r7, #0]
 8002b70:	440b      	add	r3, r1
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	4053      	eors	r3, r2
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	817b      	strh	r3, [r7, #10]
		remainder = (remainder<<8)^crc15Table[addr];
 8002b7e:	89fb      	ldrh	r3, [r7, #14]
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	b21a      	sxth	r2, r3
 8002b84:	897b      	ldrh	r3, [r7, #10]
 8002b86:	490b      	ldr	r1, [pc, #44]	; (8002bb4 <pec15_calc+0x64>)
 8002b88:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002b8c:	b21b      	sxth	r3, r3
 8002b8e:	4053      	eors	r3, r2
 8002b90:	b21b      	sxth	r3, r3
 8002b92:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8002b94:	7b7b      	ldrb	r3, [r7, #13]
 8002b96:	3301      	adds	r3, #1
 8002b98:	737b      	strb	r3, [r7, #13]
 8002b9a:	7b7a      	ldrb	r2, [r7, #13]
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d3e1      	bcc.n	8002b66 <pec15_calc+0x16>
	}

	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8002ba2:	89fb      	ldrh	r3, [r7, #14]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	b29b      	uxth	r3, r3
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	0800b72c 	.word	0x0800b72c

08002bb8 <LTC681x_wrcfg>:

/* Write the LTC681x CFGRA */
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[]  // A two dimensional array of the configuration data that will be written
                  )
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b0c4      	sub	sp, #272	; 0x110
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002bc4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002bc8:	6019      	str	r1, [r3, #0]
 8002bca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002bce:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002bd2:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = {0x00 , 0x01} ;
 8002bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bd8:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t c_ic = 0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8002be8:	2300      	movs	r3, #0
 8002bea:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8002bee:	e048      	b.n	8002c82 <LTC681x_wrcfg+0xca>
	{
		if (ic->isospi_reverse == false)
 8002bf0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002bf4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8002bfe:	f083 0301 	eor.w	r3, r3, #1
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d004      	beq.n	8002c12 <LTC681x_wrcfg+0x5a>
		{
			c_ic = current_ic;
 8002c08:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002c0c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8002c10:	e00b      	b.n	8002c2a <LTC681x_wrcfg+0x72>
		}
		else
		{
			c_ic = total_ic - current_ic - 1;
 8002c12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c16:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002c1a:	781a      	ldrb	r2, [r3, #0]
 8002c1c:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
		}

		for (uint8_t data = 0; data<6; data++)
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8002c30:	e01e      	b.n	8002c70 <LTC681x_wrcfg+0xb8>
		{
			write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 8002c32:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8002c36:	22e8      	movs	r2, #232	; 0xe8
 8002c38:	fb02 f303 	mul.w	r3, r2, r3
 8002c3c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002c40:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002c44:	6812      	ldr	r2, [r2, #0]
 8002c46:	18d1      	adds	r1, r2, r3
 8002c48:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8002c4c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002c50:	5c89      	ldrb	r1, [r1, r2]
 8002c52:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002c56:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8002c5a:	54d1      	strb	r1, [r2, r3]
			write_count++;
 8002c5c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002c60:	3301      	adds	r3, #1
 8002c62:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		for (uint8_t data = 0; data<6; data++)
 8002c66:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8002c70:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8002c74:	2b05      	cmp	r3, #5
 8002c76:	d9dc      	bls.n	8002c32 <LTC681x_wrcfg+0x7a>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8002c78:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8002c82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c86:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002c8a:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d3ad      	bcc.n	8002bf0 <LTC681x_wrcfg+0x38>
		}
	}
	write_68(total_ic, cmd, write_buffer);
 8002c94:	f107 0208 	add.w	r2, r7, #8
 8002c98:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002c9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002ca0:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fec6 	bl	8002a38 <write_68>
}
 8002cac:	bf00      	nop
 8002cae:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <LTC681x_adcv>:
/* Starts ADC conversion for cell voltage */
void LTC681x_adcv( uint8_t MD, //ADC Mode
				   uint8_t DCP, //Discharge Permit
				   uint8_t CH //Cell Channels to be measured
                 )
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	71fb      	strb	r3, [r7, #7]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	71bb      	strb	r3, [r7, #6]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[2];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8002cc8:	79fb      	ldrb	r3, [r7, #7]
 8002cca:	105b      	asrs	r3, r3, #1
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	3302      	adds	r3, #2
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	733b      	strb	r3, [r7, #12]
	md_bits = (MD & 0x01) << 7;
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	01db      	lsls	r3, r3, #7
 8002ce0:	73fb      	strb	r3, [r7, #15]
	cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8002ce2:	79bb      	ldrb	r3, [r7, #6]
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	4413      	add	r3, r2
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	797b      	ldrb	r3, [r7, #5]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	3360      	adds	r3, #96	; 0x60
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	737b      	strb	r3, [r7, #13]

	cmd_68(cmd);
 8002cfa:	f107 030c 	add.w	r3, r7, #12
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff fe70 	bl	80029e4 <cmd_68>
}
 8002d04:	bf00      	nop
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <LTC681x_adax>:

/* Start ADC Conversion for GPIO and Vref2  */
void LTC681x_adax(uint8_t MD, //ADC Mode
				  uint8_t CHG //GPIO Channels to be measured
				  )
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	460a      	mov	r2, r1
 8002d16:	71fb      	strb	r3, [r7, #7]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	105b      	asrs	r3, r3, #1
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	01db      	lsls	r3, r3, #7
 8002d34:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG ;
 8002d36:	7bfa      	ldrb	r2, [r7, #15]
 8002d38:	79bb      	ldrb	r3, [r7, #6]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	3360      	adds	r3, #96	; 0x60
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	727b      	strb	r3, [r7, #9]

	cmd_68(cmd);
 8002d44:	f107 0308 	add.w	r3, r7, #8
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff fe4b 	bl	80029e4 <cmd_68>
}
 8002d4e:	bf00      	nop
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <LTC681x_rdcv>:
*/
uint8_t LTC681x_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // The number of ICs in the system
                     cell_asic *ic // Array of the parsed cell codes
                    )
{
 8002d56:	b5b0      	push	{r4, r5, r7, lr}
 8002d58:	b088      	sub	sp, #32
 8002d5a:	af02      	add	r7, sp, #8
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	603a      	str	r2, [r7, #0]
 8002d60:	71fb      	strb	r3, [r7, #7]
 8002d62:	460b      	mov	r3, r1
 8002d64:	71bb      	strb	r3, [r7, #6]
	int8_t pec_error = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	75fb      	strb	r3, [r7, #23]
	uint8_t *cell_data;
	uint8_t c_ic = 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	75bb      	strb	r3, [r7, #22]
	cell_data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8002d6e:	79bb      	ldrb	r3, [r7, #6]
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4618      	mov	r0, r3
 8002d74:	f005 fd72 	bl	800885c <malloc>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	60bb      	str	r3, [r7, #8]

	if (reg == 0)
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d14b      	bne.n	8002e1a <LTC681x_rdcv+0xc4>
	{
		for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8002d82:	2301      	movs	r3, #1
 8002d84:	757b      	strb	r3, [r7, #21]
 8002d86:	e041      	b.n	8002e0c <LTC681x_rdcv+0xb6>
		{
			LTC681x_rdcv_reg(cell_reg, total_ic,cell_data );
 8002d88:	79b9      	ldrb	r1, [r7, #6]
 8002d8a:	7d7b      	ldrb	r3, [r7, #21]
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 f93d 	bl	800300e <LTC681x_rdcv_reg>
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002d94:	2300      	movs	r3, #0
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	e031      	b.n	8002dfe <LTC681x_rdcv+0xa8>
			{
			if (ic->isospi_reverse == false)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8002da0:	f083 0301 	eor.w	r3, r3, #1
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d002      	beq.n	8002db0 <LTC681x_rdcv+0x5a>
			{
			  c_ic = current_ic;
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	75bb      	strb	r3, [r7, #22]
 8002dae:	e006      	b.n	8002dbe <LTC681x_rdcv+0x68>
			}
			else
			{
			  c_ic = total_ic - current_ic - 1;
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	79ba      	ldrb	r2, [r7, #6]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	b2d8      	uxtb	r0, r3
												&ic[c_ic].cells.c_codes[0],
 8002dc2:	7dbb      	ldrb	r3, [r7, #22]
 8002dc4:	22e8      	movs	r2, #232	; 0xe8
 8002dc6:	fb02 f303 	mul.w	r3, r2, r3
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8002dce:	f103 041e 	add.w	r4, r3, #30
												&ic[c_ic].cells.pec_match[0]);
 8002dd2:	7dbb      	ldrb	r3, [r7, #22]
 8002dd4:	22e8      	movs	r2, #232	; 0xe8
 8002dd6:	fb02 f303 	mul.w	r3, r2, r3
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8002dde:	3342      	adds	r3, #66	; 0x42
 8002de0:	7d79      	ldrb	r1, [r7, #21]
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	4623      	mov	r3, r4
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	f000 f9c2 	bl	8003170 <parse_cells>
 8002dec:	4603      	mov	r3, r0
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
 8002df2:	4413      	add	r3, r2
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	75fb      	strb	r3, [r7, #23]
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	79bb      	ldrb	r3, [r7, #6]
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	dbc9      	blt.n	8002d9a <LTC681x_rdcv+0x44>
		for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8002e06:	7d7b      	ldrb	r3, [r7, #21]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	757b      	strb	r3, [r7, #21]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8002e12:	7d7a      	ldrb	r2, [r7, #21]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d9b7      	bls.n	8002d88 <LTC681x_rdcv+0x32>
 8002e18:	e043      	b.n	8002ea2 <LTC681x_rdcv+0x14c>
		}
	}

	else
	{
		LTC681x_rdcv_reg(reg, total_ic,cell_data);
 8002e1a:	79b9      	ldrb	r1, [r7, #6]
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 f8f4 	bl	800300e <LTC681x_rdcv_reg>

		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	e036      	b.n	8002e9a <LTC681x_rdcv+0x144>
		{
			if (ic->isospi_reverse == false)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8002e32:	f083 0301 	eor.w	r3, r3, #1
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <LTC681x_rdcv+0xec>
			{
			c_ic = current_ic;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	75bb      	strb	r3, [r7, #22]
 8002e40:	e006      	b.n	8002e50 <LTC681x_rdcv+0xfa>
			}
			else
			{
			c_ic = total_ic - current_ic - 1;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	79ba      	ldrb	r2, [r7, #6]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	b2d8      	uxtb	r0, r3
 8002e54:	7dbb      	ldrb	r3, [r7, #22]
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	189c      	adds	r4, r3, r2
											  &ic[c_ic].cells.c_codes[0],
 8002e5e:	7dbb      	ldrb	r3, [r7, #22]
 8002e60:	22e8      	movs	r2, #232	; 0xe8
 8002e62:	fb02 f303 	mul.w	r3, r2, r3
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8002e6a:	f103 051e 	add.w	r5, r3, #30
											  &ic[c_ic].cells.pec_match[0]);
 8002e6e:	7dbb      	ldrb	r3, [r7, #22]
 8002e70:	22e8      	movs	r2, #232	; 0xe8
 8002e72:	fb02 f303 	mul.w	r3, r2, r3
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8002e7a:	3342      	adds	r3, #66	; 0x42
 8002e7c:	79f9      	ldrb	r1, [r7, #7]
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	462b      	mov	r3, r5
 8002e82:	4622      	mov	r2, r4
 8002e84:	f000 f974 	bl	8003170 <parse_cells>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
 8002e8e:	4413      	add	r3, r2
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	75fb      	strb	r3, [r7, #23]
		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	3301      	adds	r3, #1
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	79bb      	ldrb	r3, [r7, #6]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	dbc4      	blt.n	8002e2c <LTC681x_rdcv+0xd6>
		}
	}
	LTC681x_check_pec(total_ic,CELL,ic);
 8002ea2:	79bb      	ldrb	r3, [r7, #6]
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 fa17 	bl	80032dc <LTC681x_check_pec>
	free(cell_data);
 8002eae:	68b8      	ldr	r0, [r7, #8]
 8002eb0:	f005 fcdc 	bl	800886c <free>

	return(pec_error);
 8002eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bdb0      	pop	{r4, r5, r7, pc}

08002ebe <LTC681x_rdaux>:
*/
int8_t LTC681x_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
                     uint8_t total_ic,//The number of ICs in the system
                     cell_asic *ic//A two dimensional array of the gpio voltage codes.
                    )
{
 8002ebe:	b590      	push	{r4, r7, lr}
 8002ec0:	b089      	sub	sp, #36	; 0x24
 8002ec2:	af02      	add	r7, sp, #8
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	603a      	str	r2, [r7, #0]
 8002ec8:	71fb      	strb	r3, [r7, #7]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	71bb      	strb	r3, [r7, #6]
	uint8_t *data;
	int8_t pec_error = 0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	75fb      	strb	r3, [r7, #23]
	uint8_t c_ic =0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	75bb      	strb	r3, [r7, #22]
	data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8002ed6:	79bb      	ldrb	r3, [r7, #6]
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4618      	mov	r0, r3
 8002edc:	f005 fcbe 	bl	800885c <malloc>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	60bb      	str	r3, [r7, #8]

	if (reg == 0)
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d147      	bne.n	8002f7a <LTC681x_rdaux+0xbc>
	{
		for (uint8_t gpio_reg = 1; gpio_reg<ic[0].ic_reg.num_gpio_reg+1; gpio_reg++) //Executes once for each of the LTC681x aux voltage registers
 8002eea:	2301      	movs	r3, #1
 8002eec:	757b      	strb	r3, [r7, #21]
 8002eee:	e03d      	b.n	8002f6c <LTC681x_rdaux+0xae>
		{
			LTC681x_rdaux_reg(gpio_reg, total_ic,data);                 //Reads the raw auxiliary register data into the data[] array
 8002ef0:	79b9      	ldrb	r1, [r7, #6]
 8002ef2:	7d7b      	ldrb	r3, [r7, #21]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 f8e7 	bl	80030ca <LTC681x_rdaux_reg>
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002efc:	2300      	movs	r3, #0
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	e02d      	b.n	8002f5e <LTC681x_rdaux+0xa0>
			{
				if (ic->isospi_reverse == false)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8002f08:	f083 0301 	eor.w	r3, r3, #1
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <LTC681x_rdaux+0x5a>
				{
				  c_ic = current_ic;
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	75bb      	strb	r3, [r7, #22]
 8002f16:	e006      	b.n	8002f26 <LTC681x_rdaux+0x68>
				}
				else
				{
				  c_ic = total_ic - current_ic - 1;
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	79ba      	ldrb	r2, [r7, #6]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	75bb      	strb	r3, [r7, #22]
				}
				pec_error = parse_cells(current_ic,gpio_reg, data,
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	b2d8      	uxtb	r0, r3
										&ic[c_ic].aux.a_codes[0],
 8002f2a:	7dbb      	ldrb	r3, [r7, #22]
 8002f2c:	22e8      	movs	r2, #232	; 0xe8
 8002f2e:	fb02 f303 	mul.w	r3, r2, r3
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	4413      	add	r3, r2
				pec_error = parse_cells(current_ic,gpio_reg, data,
 8002f36:	f103 0448 	add.w	r4, r3, #72	; 0x48
										&ic[c_ic].aux.pec_match[0]);
 8002f3a:	7dbb      	ldrb	r3, [r7, #22]
 8002f3c:	22e8      	movs	r2, #232	; 0xe8
 8002f3e:	fb02 f303 	mul.w	r3, r2, r3
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	4413      	add	r3, r2
				pec_error = parse_cells(current_ic,gpio_reg, data,
 8002f46:	335a      	adds	r3, #90	; 0x5a
 8002f48:	7d79      	ldrb	r1, [r7, #21]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	4623      	mov	r3, r4
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	f000 f90e 	bl	8003170 <parse_cells>
 8002f54:	4603      	mov	r3, r0
 8002f56:	75fb      	strb	r3, [r7, #23]
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	79bb      	ldrb	r3, [r7, #6]
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	dbcd      	blt.n	8002f02 <LTC681x_rdaux+0x44>
		for (uint8_t gpio_reg = 1; gpio_reg<ic[0].ic_reg.num_gpio_reg+1; gpio_reg++) //Executes once for each of the LTC681x aux voltage registers
 8002f66:	7d7b      	ldrb	r3, [r7, #21]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	757b      	strb	r3, [r7, #21]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8002f72:	7d7a      	ldrb	r2, [r7, #21]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d9bb      	bls.n	8002ef0 <LTC681x_rdaux+0x32>
 8002f78:	e03a      	b.n	8002ff0 <LTC681x_rdaux+0x132>
			}
		}
	}
	else
	{
		LTC681x_rdaux_reg(reg, total_ic, data);
 8002f7a:	79b9      	ldrb	r1, [r7, #6]
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 f8a2 	bl	80030ca <LTC681x_rdaux_reg>

		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	e02d      	b.n	8002fe8 <LTC681x_rdaux+0x12a>
		{
			if (ic->isospi_reverse == false)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8002f92:	f083 0301 	eor.w	r3, r3, #1
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <LTC681x_rdaux+0xe4>
			{
			c_ic = current_ic;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	75bb      	strb	r3, [r7, #22]
 8002fa0:	e006      	b.n	8002fb0 <LTC681x_rdaux+0xf2>
			}
			else
			{
			c_ic = total_ic - current_ic - 1;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	79ba      	ldrb	r2, [r7, #6]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = parse_cells(current_ic,reg, data,
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	b2d8      	uxtb	r0, r3
								  &ic[c_ic].aux.a_codes[0],
 8002fb4:	7dbb      	ldrb	r3, [r7, #22]
 8002fb6:	22e8      	movs	r2, #232	; 0xe8
 8002fb8:	fb02 f303 	mul.w	r3, r2, r3
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	4413      	add	r3, r2
			pec_error = parse_cells(current_ic,reg, data,
 8002fc0:	f103 0448 	add.w	r4, r3, #72	; 0x48
								  &ic[c_ic].aux.pec_match[0]);
 8002fc4:	7dbb      	ldrb	r3, [r7, #22]
 8002fc6:	22e8      	movs	r2, #232	; 0xe8
 8002fc8:	fb02 f303 	mul.w	r3, r2, r3
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	4413      	add	r3, r2
			pec_error = parse_cells(current_ic,reg, data,
 8002fd0:	335a      	adds	r3, #90	; 0x5a
 8002fd2:	79f9      	ldrb	r1, [r7, #7]
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	4623      	mov	r3, r4
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	f000 f8c9 	bl	8003170 <parse_cells>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	75fb      	strb	r3, [r7, #23]
		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	79bb      	ldrb	r3, [r7, #6]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	dbcd      	blt.n	8002f8c <LTC681x_rdaux+0xce>
		}
	}
	LTC681x_check_pec(total_ic,AUX,ic);
 8002ff0:	79bb      	ldrb	r3, [r7, #6]
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	2102      	movs	r1, #2
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 f970 	bl	80032dc <LTC681x_check_pec>
	free(data);
 8002ffc:	68b8      	ldr	r0, [r7, #8]
 8002ffe:	f005 fc35 	bl	800886c <free>

	return (pec_error);
 8003002:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003006:	4618      	mov	r0, r3
 8003008:	371c      	adds	r7, #28
 800300a:	46bd      	mov	sp, r7
 800300c:	bd90      	pop	{r4, r7, pc}

0800300e <LTC681x_rdcv_reg>:
/* Writes the command and reads the raw cell voltage register data */
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
                      uint8_t total_ic, //the number of ICs in the
                      uint8_t *data //An array of the unparsed cell codes
                     )
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b084      	sub	sp, #16
 8003012:	af00      	add	r7, sp, #0
 8003014:	4603      	mov	r3, r0
 8003016:	603a      	str	r2, [r7, #0]
 8003018:	71fb      	strb	r3, [r7, #7]
 800301a:	460b      	mov	r3, r1
 800301c:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; //Number of bytes in each ICs register + 2 bytes for the PEC
 800301e:	2308      	movs	r3, #8
 8003020:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //1: RDCVA
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d104      	bne.n	8003032 <LTC681x_rdcv_reg+0x24>
	{
		cmd[1] = 0x04;
 8003028:	2304      	movs	r3, #4
 800302a:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800302c:	2300      	movs	r3, #0
 800302e:	723b      	strb	r3, [r7, #8]
 8003030:	e026      	b.n	8003080 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 2) //2: RDCVB
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d104      	bne.n	8003042 <LTC681x_rdcv_reg+0x34>
	{
		cmd[1] = 0x06;
 8003038:	2306      	movs	r3, #6
 800303a:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800303c:	2300      	movs	r3, #0
 800303e:	723b      	strb	r3, [r7, #8]
 8003040:	e01e      	b.n	8003080 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 3) //3: RDCVC
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	2b03      	cmp	r3, #3
 8003046:	d104      	bne.n	8003052 <LTC681x_rdcv_reg+0x44>
	{
		cmd[1] = 0x08;
 8003048:	2308      	movs	r3, #8
 800304a:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800304c:	2300      	movs	r3, #0
 800304e:	723b      	strb	r3, [r7, #8]
 8003050:	e016      	b.n	8003080 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 4) //4: RDCVD
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	2b04      	cmp	r3, #4
 8003056:	d104      	bne.n	8003062 <LTC681x_rdcv_reg+0x54>
	{
		cmd[1] = 0x0A;
 8003058:	230a      	movs	r3, #10
 800305a:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800305c:	2300      	movs	r3, #0
 800305e:	723b      	strb	r3, [r7, #8]
 8003060:	e00e      	b.n	8003080 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 5) //4: RDCVE
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	2b05      	cmp	r3, #5
 8003066:	d104      	bne.n	8003072 <LTC681x_rdcv_reg+0x64>
	{
		cmd[1] = 0x09;
 8003068:	2309      	movs	r3, #9
 800306a:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800306c:	2300      	movs	r3, #0
 800306e:	723b      	strb	r3, [r7, #8]
 8003070:	e006      	b.n	8003080 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 6) //4: RDCVF
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	2b06      	cmp	r3, #6
 8003076:	d103      	bne.n	8003080 <LTC681x_rdcv_reg+0x72>
	{
		cmd[1] = 0x0B;
 8003078:	230b      	movs	r3, #11
 800307a:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800307c:	2300      	movs	r3, #0
 800307e:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 8003080:	f107 0308 	add.w	r3, r7, #8
 8003084:	4619      	mov	r1, r3
 8003086:	2002      	movs	r0, #2
 8003088:	f7ff fd62 	bl	8002b50 <pec15_calc>
 800308c:	4603      	mov	r3, r0
 800308e:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8003090:	89bb      	ldrh	r3, [r7, #12]
 8003092:	0a1b      	lsrs	r3, r3, #8
 8003094:	b29b      	uxth	r3, r3
 8003096:	b2db      	uxtb	r3, r3
 8003098:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 800309a:	89bb      	ldrh	r3, [r7, #12]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 80030a0:	200a      	movs	r0, #10
 80030a2:	f000 fda9 	bl	8003bf8 <cs_low>
	spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 80030a6:	7bfa      	ldrb	r2, [r7, #15]
 80030a8:	79bb      	ldrb	r3, [r7, #6]
 80030aa:	fb12 f303 	smulbb	r3, r2, r3
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f107 0008 	add.w	r0, r7, #8
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	2104      	movs	r1, #4
 80030b8:	f000 fdde 	bl	8003c78 <spi_write_read>
	cs_high(CS_PIN);
 80030bc:	200a      	movs	r0, #10
 80030be:	f000 fdab 	bl	8003c18 <cs_high>
}
 80030c2:	bf00      	nop
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <LTC681x_rdaux_reg>:
*/
void LTC681x_rdaux_reg(uint8_t reg, //Determines which GPIO voltage register is read back
                       uint8_t total_ic, //The number of ICs in the system
                       uint8_t *data //Array of the unparsed auxiliary codes
                      )
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b084      	sub	sp, #16
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	4603      	mov	r3, r0
 80030d2:	603a      	str	r2, [r7, #0]
 80030d4:	71fb      	strb	r3, [r7, #7]
 80030d6:	460b      	mov	r3, r1
 80030d8:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; // Number of bytes in the register + 2 bytes for the PEC
 80030da:	2308      	movs	r3, #8
 80030dc:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //Read back auxiliary group A
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d104      	bne.n	80030ee <LTC681x_rdaux_reg+0x24>
	{
		cmd[1] = 0x0C;
 80030e4:	230c      	movs	r3, #12
 80030e6:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80030e8:	2300      	movs	r3, #0
 80030ea:	723b      	strb	r3, [r7, #8]
 80030ec:	e01b      	b.n	8003126 <LTC681x_rdaux_reg+0x5c>
	}
	else if (reg == 2)  //Read back auxiliary group B
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d104      	bne.n	80030fe <LTC681x_rdaux_reg+0x34>
	{
		cmd[1] = 0x0E;
 80030f4:	230e      	movs	r3, #14
 80030f6:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80030f8:	2300      	movs	r3, #0
 80030fa:	723b      	strb	r3, [r7, #8]
 80030fc:	e013      	b.n	8003126 <LTC681x_rdaux_reg+0x5c>
	}
	else if (reg == 3)  //Read back auxiliary group C
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	2b03      	cmp	r3, #3
 8003102:	d104      	bne.n	800310e <LTC681x_rdaux_reg+0x44>
	{
		cmd[1] = 0x0D;
 8003104:	230d      	movs	r3, #13
 8003106:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003108:	2300      	movs	r3, #0
 800310a:	723b      	strb	r3, [r7, #8]
 800310c:	e00b      	b.n	8003126 <LTC681x_rdaux_reg+0x5c>
	}
	else if (reg == 4)  //Read back auxiliary group D
 800310e:	79fb      	ldrb	r3, [r7, #7]
 8003110:	2b04      	cmp	r3, #4
 8003112:	d104      	bne.n	800311e <LTC681x_rdaux_reg+0x54>
	{
		cmd[1] = 0x0F;
 8003114:	230f      	movs	r3, #15
 8003116:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003118:	2300      	movs	r3, #0
 800311a:	723b      	strb	r3, [r7, #8]
 800311c:	e003      	b.n	8003126 <LTC681x_rdaux_reg+0x5c>
	}
	else          //Read back auxiliary group A
	{
		cmd[1] = 0x0C;
 800311e:	230c      	movs	r3, #12
 8003120:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003122:	2300      	movs	r3, #0
 8003124:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 8003126:	f107 0308 	add.w	r3, r7, #8
 800312a:	4619      	mov	r1, r3
 800312c:	2002      	movs	r0, #2
 800312e:	f7ff fd0f 	bl	8002b50 <pec15_calc>
 8003132:	4603      	mov	r3, r0
 8003134:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8003136:	89bb      	ldrh	r3, [r7, #12]
 8003138:	0a1b      	lsrs	r3, r3, #8
 800313a:	b29b      	uxth	r3, r3
 800313c:	b2db      	uxtb	r3, r3
 800313e:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8003140:	89bb      	ldrh	r3, [r7, #12]
 8003142:	b2db      	uxtb	r3, r3
 8003144:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 8003146:	200a      	movs	r0, #10
 8003148:	f000 fd56 	bl	8003bf8 <cs_low>
	spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	79bb      	ldrb	r3, [r7, #6]
 8003150:	fb12 f303 	smulbb	r3, r2, r3
 8003154:	b2db      	uxtb	r3, r3
 8003156:	f107 0008 	add.w	r0, r7, #8
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	2104      	movs	r1, #4
 800315e:	f000 fd8b 	bl	8003c78 <spi_write_read>
	cs_high(CS_PIN);
 8003162:	200a      	movs	r0, #10
 8003164:	f000 fd58 	bl	8003c18 <cs_high>
}
 8003168:	bf00      	nop
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <parse_cells>:
					uint8_t cell_reg,  // Type of register
					uint8_t cell_data[], // Unparsed data
					uint16_t *cell_codes, // Parsed data
					uint8_t *ic_pec // PEC error
					)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af00      	add	r7, sp, #0
 8003176:	60ba      	str	r2, [r7, #8]
 8003178:	607b      	str	r3, [r7, #4]
 800317a:	4603      	mov	r3, r0
 800317c:	73fb      	strb	r3, [r7, #15]
 800317e:	460b      	mov	r3, r1
 8003180:	73bb      	strb	r3, [r7, #14]
	const uint8_t BYT_IN_REG = 6;
 8003182:	2306      	movs	r3, #6
 8003184:	773b      	strb	r3, [r7, #28]
	const uint8_t CELL_IN_REG = 3;
 8003186:	2303      	movs	r3, #3
 8003188:	76fb      	strb	r3, [r7, #27]
	int8_t pec_error = 0;
 800318a:	2300      	movs	r3, #0
 800318c:	77fb      	strb	r3, [r7, #31]
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = current_ic*NUM_RX_BYT; //data counter
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	77bb      	strb	r3, [r7, #30]


	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8003194:	2300      	movs	r3, #0
 8003196:	777b      	strb	r3, [r7, #29]
 8003198:	e020      	b.n	80031dc <parse_cells+0x6c>
	{																		// loops once for each of the 3 codes in the register

		parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each code is received as two bytes and is combined to
 800319a:	7fbb      	ldrb	r3, [r7, #30]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	4413      	add	r3, r2
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	7fbb      	ldrb	r3, [r7, #30]
 80031a6:	3301      	adds	r3, #1
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	440b      	add	r3, r1
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	4413      	add	r3, r2
 80031b6:	82bb      	strh	r3, [r7, #20]
																				   // create the parsed code
		cell_codes[current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 80031b8:	7f7a      	ldrb	r2, [r7, #29]
 80031ba:	7bbb      	ldrb	r3, [r7, #14]
 80031bc:	3b01      	subs	r3, #1
 80031be:	7ef9      	ldrb	r1, [r7, #27]
 80031c0:	fb01 f303 	mul.w	r3, r1, r3
 80031c4:	4413      	add	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	4413      	add	r3, r2
 80031cc:	8aba      	ldrh	r2, [r7, #20]
 80031ce:	801a      	strh	r2, [r3, #0]

		data_counter = data_counter + 2;                       //Because the codes are two bytes, the data counter
 80031d0:	7fbb      	ldrb	r3, [r7, #30]
 80031d2:	3302      	adds	r3, #2
 80031d4:	77bb      	strb	r3, [r7, #30]
	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 80031d6:	7f7b      	ldrb	r3, [r7, #29]
 80031d8:	3301      	adds	r3, #1
 80031da:	777b      	strb	r3, [r7, #29]
 80031dc:	7f7a      	ldrb	r2, [r7, #29]
 80031de:	7efb      	ldrb	r3, [r7, #27]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d3da      	bcc.n	800319a <parse_cells+0x2a>
															  //must increment by two for each parsed code
	}
	received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 80031e4:	7fbb      	ldrb	r3, [r7, #30]
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	4413      	add	r3, r2
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	021b      	lsls	r3, r3, #8
 80031ee:	b21a      	sxth	r2, r3
 80031f0:	7fbb      	ldrb	r3, [r7, #30]
 80031f2:	3301      	adds	r3, #1
 80031f4:	68b9      	ldr	r1, [r7, #8]
 80031f6:	440b      	add	r3, r1
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	b21b      	sxth	r3, r3
 80031fc:	4313      	orrs	r3, r2
 80031fe:	b21b      	sxth	r3, r3
 8003200:	833b      	strh	r3, [r7, #24]
																			   //after the 6 cell voltage data bytes
	data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	461a      	mov	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	441a      	add	r2, r3
 800320c:	7f3b      	ldrb	r3, [r7, #28]
 800320e:	4611      	mov	r1, r2
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff fc9d 	bl	8002b50 <pec15_calc>
 8003216:	4603      	mov	r3, r0
 8003218:	82fb      	strh	r3, [r7, #22]

	if (received_pec != data_pec)
 800321a:	8b3a      	ldrh	r2, [r7, #24]
 800321c:	8afb      	ldrh	r3, [r7, #22]
 800321e:	429a      	cmp	r2, r3
 8003220:	d008      	beq.n	8003234 <parse_cells+0xc4>
	{
		pec_error = 1;                             //The pec_error variable is simply set negative if any PEC errors
 8003222:	2301      	movs	r3, #1
 8003224:	77fb      	strb	r3, [r7, #31]
		ic_pec[cell_reg-1]=1;
 8003226:	7bbb      	ldrb	r3, [r7, #14]
 8003228:	3b01      	subs	r3, #1
 800322a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800322c:	4413      	add	r3, r2
 800322e:	2201      	movs	r2, #1
 8003230:	701a      	strb	r2, [r3, #0]
 8003232:	e005      	b.n	8003240 <parse_cells+0xd0>
	}
	else
	{
		ic_pec[cell_reg-1]=0;
 8003234:	7bbb      	ldrb	r3, [r7, #14]
 8003236:	3b01      	subs	r3, #1
 8003238:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800323a:	4413      	add	r3, r2
 800323c:	2200      	movs	r2, #0
 800323e:	701a      	strb	r2, [r3, #0]
	}
	data_counter=data_counter+2;
 8003240:	7fbb      	ldrb	r3, [r7, #30]
 8003242:	3302      	adds	r3, #2
 8003244:	77bb      	strb	r3, [r7, #30]

	return(pec_error);
 8003246:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3720      	adds	r7, #32
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <LTC681x_pollAdc>:
	return(adc_state);
}

/* This function will block operation until the ADC has finished it's conversion */
uint32_t LTC681x_pollAdc()
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 800325e:	2300      	movs	r3, #0
 8003260:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8003266:	2307      	movs	r3, #7
 8003268:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 800326a:	2314      	movs	r3, #20
 800326c:	717b      	strb	r3, [r7, #5]
	cmd_pec = pec15_calc(2, cmd);
 800326e:	1d3b      	adds	r3, r7, #4
 8003270:	4619      	mov	r1, r3
 8003272:	2002      	movs	r0, #2
 8003274:	f7ff fc6c 	bl	8002b50 <pec15_calc>
 8003278:	4603      	mov	r3, r0
 800327a:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 800327c:	893b      	ldrh	r3, [r7, #8]
 800327e:	0a1b      	lsrs	r3, r3, #8
 8003280:	b29b      	uxth	r3, r3
 8003282:	b2db      	uxtb	r3, r3
 8003284:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t)(cmd_pec);
 8003286:	893b      	ldrh	r3, [r7, #8]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	71fb      	strb	r3, [r7, #7]

	cs_low(CS_PIN);
 800328c:	200a      	movs	r0, #10
 800328e:	f000 fcb3 	bl	8003bf8 <cs_low>
	spi_write_array(4,cmd);
 8003292:	1d3b      	adds	r3, r7, #4
 8003294:	4619      	mov	r1, r3
 8003296:	2004      	movs	r0, #4
 8003298:	f000 fcda 	bl	8003c50 <spi_write_array>
	while ((counter<200000)&&(finished == 0))
 800329c:	e00d      	b.n	80032ba <LTC681x_pollAdc+0x66>
	{
		current_time = spi_read_byte(0xff);
 800329e:	20ff      	movs	r0, #255	; 0xff
 80032a0:	f000 fd20 	bl	8003ce4 <spi_read_byte>
 80032a4:	4603      	mov	r3, r0
 80032a6:	72bb      	strb	r3, [r7, #10]
		if (current_time>0)
 80032a8:	7abb      	ldrb	r3, [r7, #10]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <LTC681x_pollAdc+0x60>
		{
			finished = 1;
 80032ae:	2301      	movs	r3, #1
 80032b0:	72fb      	strb	r3, [r7, #11]
 80032b2:	e002      	b.n	80032ba <LTC681x_pollAdc+0x66>
		}
		else
		{
			counter = counter + 10;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	330a      	adds	r3, #10
 80032b8:	60fb      	str	r3, [r7, #12]
	while ((counter<200000)&&(finished == 0))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4a06      	ldr	r2, [pc, #24]	; (80032d8 <LTC681x_pollAdc+0x84>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d802      	bhi.n	80032c8 <LTC681x_pollAdc+0x74>
 80032c2:	7afb      	ldrb	r3, [r7, #11]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0ea      	beq.n	800329e <LTC681x_pollAdc+0x4a>
		}
	}
	cs_high(CS_PIN);
 80032c8:	200a      	movs	r0, #10
 80032ca:	f000 fca5 	bl	8003c18 <cs_high>

	return(counter);
 80032ce:	68fb      	ldr	r3, [r7, #12]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	00030d3f 	.word	0x00030d3f

080032dc <LTC681x_check_pec>:
/* Helper function that increments PEC counters */
void LTC681x_check_pec(uint8_t total_ic, //Number of ICs in the system
					   uint8_t reg, //Type of Register
					   cell_asic *ic //A two dimensional array that stores the data
					   )
{
 80032dc:	b480      	push	{r7}
 80032de:	b08b      	sub	sp, #44	; 0x2c
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	603a      	str	r2, [r7, #0]
 80032e6:	71fb      	strb	r3, [r7, #7]
 80032e8:	460b      	mov	r3, r1
 80032ea:	71bb      	strb	r3, [r7, #6]
	switch (reg)
 80032ec:	79bb      	ldrb	r3, [r7, #6]
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	f200 8191 	bhi.w	8003616 <LTC681x_check_pec+0x33a>
 80032f4:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <LTC681x_check_pec+0x20>)
 80032f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fa:	bf00      	nop
 80032fc:	08003311 	.word	0x08003311
 8003300:	0800340d 	.word	0x0800340d
 8003304:	080034bf 	.word	0x080034bf
 8003308:	0800356b 	.word	0x0800356b
 800330c:	0800338f 	.word	0x0800338f
	{
		case LTC681x_CFGR:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003310:	2300      	movs	r3, #0
 8003312:	627b      	str	r3, [r7, #36]	; 0x24
 8003314:	e036      	b.n	8003384 <LTC681x_check_pec+0xa8>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].config.rx_pec_match;
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	22e8      	movs	r2, #232	; 0xe8
 800331a:	fb02 f303 	mul.w	r3, r2, r3
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	4413      	add	r3, r2
 8003322:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	22e8      	movs	r2, #232	; 0xe8
 800332a:	fb02 f303 	mul.w	r3, r2, r3
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	4413      	add	r3, r2
 8003332:	7b9b      	ldrb	r3, [r3, #14]
 8003334:	b29a      	uxth	r2, r3
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	20e8      	movs	r0, #232	; 0xe8
 800333a:	fb00 f303 	mul.w	r3, r0, r3
 800333e:	6838      	ldr	r0, [r7, #0]
 8003340:	4403      	add	r3, r0
 8003342:	440a      	add	r2, r1
 8003344:	b292      	uxth	r2, r2
 8003346:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].config.rx_pec_match;
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	22e8      	movs	r2, #232	; 0xe8
 800334e:	fb02 f303 	mul.w	r3, r2, r3
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	4413      	add	r3, r2
 8003356:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	22e8      	movs	r2, #232	; 0xe8
 800335e:	fb02 f303 	mul.w	r3, r2, r3
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	4413      	add	r3, r2
 8003366:	7b9b      	ldrb	r3, [r3, #14]
 8003368:	b29a      	uxth	r2, r3
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	20e8      	movs	r0, #232	; 0xe8
 800336e:	fb00 f303 	mul.w	r3, r0, r3
 8003372:	6838      	ldr	r0, [r7, #0]
 8003374:	4403      	add	r3, r0
 8003376:	440a      	add	r2, r1
 8003378:	b292      	uxth	r2, r2
 800337a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	3301      	adds	r3, #1
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
 8003384:	79fb      	ldrb	r3, [r7, #7]
 8003386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003388:	429a      	cmp	r2, r3
 800338a:	dbc4      	blt.n	8003316 <LTC681x_check_pec+0x3a>
		  }
		break;
 800338c:	e144      	b.n	8003618 <LTC681x_check_pec+0x33c>

		case CFGRB:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800338e:	2300      	movs	r3, #0
 8003390:	623b      	str	r3, [r7, #32]
 8003392:	e036      	b.n	8003402 <LTC681x_check_pec+0x126>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configb.rx_pec_match;
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	22e8      	movs	r2, #232	; 0xe8
 8003398:	fb02 f303 	mul.w	r3, r2, r3
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	4413      	add	r3, r2
 80033a0:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	22e8      	movs	r2, #232	; 0xe8
 80033a8:	fb02 f303 	mul.w	r3, r2, r3
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	4413      	add	r3, r2
 80033b0:	7f5b      	ldrb	r3, [r3, #29]
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	20e8      	movs	r0, #232	; 0xe8
 80033b8:	fb00 f303 	mul.w	r3, r0, r3
 80033bc:	6838      	ldr	r0, [r7, #0]
 80033be:	4403      	add	r3, r0
 80033c0:	440a      	add	r2, r1
 80033c2:	b292      	uxth	r2, r2
 80033c4:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configb.rx_pec_match;
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	22e8      	movs	r2, #232	; 0xe8
 80033cc:	fb02 f303 	mul.w	r3, r2, r3
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	4413      	add	r3, r2
 80033d4:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	22e8      	movs	r2, #232	; 0xe8
 80033dc:	fb02 f303 	mul.w	r3, r2, r3
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	4413      	add	r3, r2
 80033e4:	7f5b      	ldrb	r3, [r3, #29]
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	20e8      	movs	r0, #232	; 0xe8
 80033ec:	fb00 f303 	mul.w	r3, r0, r3
 80033f0:	6838      	ldr	r0, [r7, #0]
 80033f2:	4403      	add	r3, r0
 80033f4:	440a      	add	r2, r1
 80033f6:	b292      	uxth	r2, r2
 80033f8:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	3301      	adds	r3, #1
 8003400:	623b      	str	r3, [r7, #32]
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	6a3a      	ldr	r2, [r7, #32]
 8003406:	429a      	cmp	r2, r3
 8003408:	dbc4      	blt.n	8003394 <LTC681x_check_pec+0xb8>
		  }
		break;
 800340a:	e105      	b.n	8003618 <LTC681x_check_pec+0x33c>
		case CELL:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800340c:	2300      	movs	r3, #0
 800340e:	61fb      	str	r3, [r7, #28]
 8003410:	e050      	b.n	80034b4 <LTC681x_check_pec+0x1d8>
		  {
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 8003412:	2300      	movs	r3, #0
 8003414:	61bb      	str	r3, [r7, #24]
 8003416:	e043      	b.n	80034a0 <LTC681x_check_pec+0x1c4>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].cells.pec_match[i];
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	22e8      	movs	r2, #232	; 0xe8
 800341c:	fb02 f303 	mul.w	r3, r2, r3
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	4413      	add	r3, r2
 8003424:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	22e8      	movs	r2, #232	; 0xe8
 800342c:	fb02 f303 	mul.w	r3, r2, r3
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	441a      	add	r2, r3
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	4413      	add	r3, r2
 8003438:	3342      	adds	r3, #66	; 0x42
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	b29a      	uxth	r2, r3
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	20e8      	movs	r0, #232	; 0xe8
 8003442:	fb00 f303 	mul.w	r3, r0, r3
 8003446:	6838      	ldr	r0, [r7, #0]
 8003448:	4403      	add	r3, r0
 800344a:	440a      	add	r2, r1
 800344c:	b292      	uxth	r2, r2
 800344e:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.cell_pec[i] = ic[current_ic].crc_count.cell_pec[i] + ic[current_ic].cells.pec_match[i];
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	22e8      	movs	r2, #232	; 0xe8
 8003456:	fb02 f303 	mul.w	r3, r2, r3
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	441a      	add	r2, r3
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	3360      	adds	r3, #96	; 0x60
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	4413      	add	r3, r2
 8003466:	8899      	ldrh	r1, [r3, #4]
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	22e8      	movs	r2, #232	; 0xe8
 800346c:	fb02 f303 	mul.w	r3, r2, r3
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	441a      	add	r2, r3
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	4413      	add	r3, r2
 8003478:	3342      	adds	r3, #66	; 0x42
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	b29b      	uxth	r3, r3
 800347e:	69fa      	ldr	r2, [r7, #28]
 8003480:	20e8      	movs	r0, #232	; 0xe8
 8003482:	fb00 f202 	mul.w	r2, r0, r2
 8003486:	6838      	ldr	r0, [r7, #0]
 8003488:	4402      	add	r2, r0
 800348a:	440b      	add	r3, r1
 800348c:	b299      	uxth	r1, r3
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	3360      	adds	r3, #96	; 0x60
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	4413      	add	r3, r2
 8003496:	460a      	mov	r2, r1
 8003498:	809a      	strh	r2, [r3, #4]
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	3301      	adds	r3, #1
 800349e:	61bb      	str	r3, [r7, #24]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 80034a6:	461a      	mov	r2, r3
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	4293      	cmp	r3, r2
 80034ac:	dbb4      	blt.n	8003418 <LTC681x_check_pec+0x13c>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	3301      	adds	r3, #1
 80034b2:	61fb      	str	r3, [r7, #28]
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	dbaa      	blt.n	8003412 <LTC681x_check_pec+0x136>
			}
		  }
		break;
 80034bc:	e0ac      	b.n	8003618 <LTC681x_check_pec+0x33c>
		case AUX:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	e04d      	b.n	8003560 <LTC681x_check_pec+0x284>
		  {
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 80034c4:	2300      	movs	r3, #0
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	e040      	b.n	800354c <LTC681x_check_pec+0x270>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + (ic[current_ic].aux.pec_match[i]);
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	22e8      	movs	r2, #232	; 0xe8
 80034ce:	fb02 f303 	mul.w	r3, r2, r3
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	4413      	add	r3, r2
 80034d6:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	22e8      	movs	r2, #232	; 0xe8
 80034de:	fb02 f303 	mul.w	r3, r2, r3
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	441a      	add	r2, r3
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	4413      	add	r3, r2
 80034ea:	335a      	adds	r3, #90	; 0x5a
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	20e8      	movs	r0, #232	; 0xe8
 80034f4:	fb00 f303 	mul.w	r3, r0, r3
 80034f8:	6838      	ldr	r0, [r7, #0]
 80034fa:	4403      	add	r3, r0
 80034fc:	440a      	add	r2, r1
 80034fe:	b292      	uxth	r2, r2
 8003500:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.aux_pec[i] = ic[current_ic].crc_count.aux_pec[i] + (ic[current_ic].aux.pec_match[i]);
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	22e8      	movs	r2, #232	; 0xe8
 8003508:	fb02 f303 	mul.w	r3, r2, r3
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	4413      	add	r3, r2
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	3268      	adds	r2, #104	; 0x68
 8003514:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	22e8      	movs	r2, #232	; 0xe8
 800351c:	fb02 f303 	mul.w	r3, r2, r3
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	441a      	add	r2, r3
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	4413      	add	r3, r2
 8003528:	335a      	adds	r3, #90	; 0x5a
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	b29a      	uxth	r2, r3
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	20e8      	movs	r0, #232	; 0xe8
 8003532:	fb00 f303 	mul.w	r3, r0, r3
 8003536:	6838      	ldr	r0, [r7, #0]
 8003538:	4403      	add	r3, r0
 800353a:	440a      	add	r2, r1
 800353c:	b291      	uxth	r1, r2
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	3268      	adds	r2, #104	; 0x68
 8003542:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	3301      	adds	r3, #1
 800354a:	613b      	str	r3, [r7, #16]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8003552:	461a      	mov	r2, r3
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4293      	cmp	r3, r2
 8003558:	dbb7      	blt.n	80034ca <LTC681x_check_pec+0x1ee>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	3301      	adds	r3, #1
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	429a      	cmp	r2, r3
 8003566:	dbad      	blt.n	80034c4 <LTC681x_check_pec+0x1e8>
			}
		  }

		break;
 8003568:	e056      	b.n	8003618 <LTC681x_check_pec+0x33c>
		case STAT:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	e04d      	b.n	800360c <LTC681x_check_pec+0x330>
		  {

			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8003570:	2300      	movs	r3, #0
 8003572:	60bb      	str	r3, [r7, #8]
 8003574:	e040      	b.n	80035f8 <LTC681x_check_pec+0x31c>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].stat.pec_match[i];
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	22e8      	movs	r2, #232	; 0xe8
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	4413      	add	r3, r2
 8003582:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	22e8      	movs	r2, #232	; 0xe8
 800358a:	fb02 f303 	mul.w	r3, r2, r3
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	441a      	add	r2, r3
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	4413      	add	r3, r2
 8003596:	336b      	adds	r3, #107	; 0x6b
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	20e8      	movs	r0, #232	; 0xe8
 80035a0:	fb00 f303 	mul.w	r3, r0, r3
 80035a4:	6838      	ldr	r0, [r7, #0]
 80035a6:	4403      	add	r3, r0
 80035a8:	440a      	add	r2, r1
 80035aa:	b292      	uxth	r2, r2
 80035ac:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.stat_pec[i] = ic[current_ic].crc_count.stat_pec[i] + ic[current_ic].stat.pec_match[i];
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	22e8      	movs	r2, #232	; 0xe8
 80035b4:	fb02 f303 	mul.w	r3, r2, r3
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	4413      	add	r3, r2
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	326c      	adds	r2, #108	; 0x6c
 80035c0:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	22e8      	movs	r2, #232	; 0xe8
 80035c8:	fb02 f303 	mul.w	r3, r2, r3
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	441a      	add	r2, r3
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	4413      	add	r3, r2
 80035d4:	336b      	adds	r3, #107	; 0x6b
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	b29a      	uxth	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	20e8      	movs	r0, #232	; 0xe8
 80035de:	fb00 f303 	mul.w	r3, r0, r3
 80035e2:	6838      	ldr	r0, [r7, #0]
 80035e4:	4403      	add	r3, r0
 80035e6:	440a      	add	r2, r1
 80035e8:	b291      	uxth	r1, r2
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	326c      	adds	r2, #108	; 0x6c
 80035ee:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	3301      	adds	r3, #1
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80035fe:	3b01      	subs	r3, #1
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	429a      	cmp	r2, r3
 8003604:	dbb7      	blt.n	8003576 <LTC681x_check_pec+0x29a>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	3301      	adds	r3, #1
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	79fb      	ldrb	r3, [r7, #7]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	429a      	cmp	r2, r3
 8003612:	dbad      	blt.n	8003570 <LTC681x_check_pec+0x294>
			}
		  }
		break;
 8003614:	e000      	b.n	8003618 <LTC681x_check_pec+0x33c>
		default:
		break;
 8003616:	bf00      	nop
	}
}
 8003618:	bf00      	nop
 800361a:	372c      	adds	r7, #44	; 0x2c
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <LTC681x_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC681x_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that stores the data
							 )
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	6039      	str	r1, [r7, #0]
 800362e:	71fb      	strb	r3, [r7, #7]
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	e051      	b.n	80036da <LTC681x_reset_crc_count+0xb6>
	{
		ic[current_ic].crc_count.pec_count = 0;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	22e8      	movs	r2, #232	; 0xe8
 800363a:	fb02 f303 	mul.w	r3, r2, r3
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	4413      	add	r3, r2
 8003642:	2200      	movs	r2, #0
 8003644:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		ic[current_ic].crc_count.cfgr_pec = 0;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	22e8      	movs	r2, #232	; 0xe8
 800364c:	fb02 f303 	mul.w	r3, r2, r3
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	4413      	add	r3, r2
 8003654:	2200      	movs	r2, #0
 8003656:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		for (int i=0; i<6; i++)
 800365a:	2300      	movs	r3, #0
 800365c:	613b      	str	r3, [r7, #16]
 800365e:	e00e      	b.n	800367e <LTC681x_reset_crc_count+0x5a>
		{
			ic[current_ic].crc_count.cell_pec[i]=0;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	22e8      	movs	r2, #232	; 0xe8
 8003664:	fb02 f303 	mul.w	r3, r2, r3
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	441a      	add	r2, r3
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	3360      	adds	r3, #96	; 0x60
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	4413      	add	r3, r2
 8003674:	2200      	movs	r2, #0
 8003676:	809a      	strh	r2, [r3, #4]
		for (int i=0; i<6; i++)
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	3301      	adds	r3, #1
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	2b05      	cmp	r3, #5
 8003682:	dded      	ble.n	8003660 <LTC681x_reset_crc_count+0x3c>

		}
		for (int i=0; i<4; i++)
 8003684:	2300      	movs	r3, #0
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	e00d      	b.n	80036a6 <LTC681x_reset_crc_count+0x82>
		{
			ic[current_ic].crc_count.aux_pec[i]=0;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	22e8      	movs	r2, #232	; 0xe8
 800368e:	fb02 f303 	mul.w	r3, r2, r3
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	4413      	add	r3, r2
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	3268      	adds	r2, #104	; 0x68
 800369a:	2100      	movs	r1, #0
 800369c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int i=0; i<4; i++)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	3301      	adds	r3, #1
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	ddee      	ble.n	800368a <LTC681x_reset_crc_count+0x66>
		}
		for (int i=0; i<2; i++)
 80036ac:	2300      	movs	r3, #0
 80036ae:	60bb      	str	r3, [r7, #8]
 80036b0:	e00d      	b.n	80036ce <LTC681x_reset_crc_count+0xaa>
		{
			ic[current_ic].crc_count.stat_pec[i]=0;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	22e8      	movs	r2, #232	; 0xe8
 80036b6:	fb02 f303 	mul.w	r3, r2, r3
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	4413      	add	r3, r2
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	326c      	adds	r2, #108	; 0x6c
 80036c2:	2100      	movs	r1, #0
 80036c4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int i=0; i<2; i++)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	3301      	adds	r3, #1
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	ddee      	ble.n	80036b2 <LTC681x_reset_crc_count+0x8e>
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	3301      	adds	r3, #1
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	429a      	cmp	r2, r3
 80036e0:	dba9      	blt.n	8003636 <LTC681x_reset_crc_count+0x12>
		}
	}
}
 80036e2:	bf00      	nop
 80036e4:	bf00      	nop
 80036e6:	371c      	adds	r7, #28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <LTC681x_init_cfg>:

/* Helper function to initialize CFG variables */
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that stores the data
					  )
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	6039      	str	r1, [r7, #0]
 80036fa:	71fb      	strb	r3, [r7, #7]
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 80036fc:	2300      	movs	r3, #0
 80036fe:	73fb      	strb	r3, [r7, #15]
 8003700:	e015      	b.n	800372e <LTC681x_init_cfg+0x3e>
	{
		for (int j =0; j<6; j++)
 8003702:	2300      	movs	r3, #0
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	e00c      	b.n	8003722 <LTC681x_init_cfg+0x32>
		{
		  ic[current_ic].config.tx_data[j] = 0;
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	22e8      	movs	r2, #232	; 0xe8
 800370c:	fb02 f303 	mul.w	r3, r2, r3
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	441a      	add	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4413      	add	r3, r2
 8003718:	2200      	movs	r2, #0
 800371a:	701a      	strb	r2, [r3, #0]
		for (int j =0; j<6; j++)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	3301      	adds	r3, #1
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b05      	cmp	r3, #5
 8003726:	ddef      	ble.n	8003708 <LTC681x_init_cfg+0x18>
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	3301      	adds	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
 800372e:	7bfa      	ldrb	r2, [r7, #15]
 8003730:	79fb      	ldrb	r3, [r7, #7]
 8003732:	429a      	cmp	r2, r3
 8003734:	d3e5      	bcc.n	8003702 <LTC681x_init_cfg+0x12>
		}
	}
}
 8003736:	bf00      	nop
 8003738:	bf00      	nop
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <LTC681x_set_cfgr>:
					 bool dcc[12], // The DCC bits
					 bool dcto[4], // The Dcto bits
					 uint16_t uv, // The UV value
					 uint16_t  ov // The OV value
					 )
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6039      	str	r1, [r7, #0]
 800374c:	4611      	mov	r1, r2
 800374e:	461a      	mov	r2, r3
 8003750:	4603      	mov	r3, r0
 8003752:	71fb      	strb	r3, [r7, #7]
 8003754:	460b      	mov	r3, r1
 8003756:	71bb      	strb	r3, [r7, #6]
 8003758:	4613      	mov	r3, r2
 800375a:	717b      	strb	r3, [r7, #5]
	LTC681x_set_cfgr_refon(nIC,ic,refon);
 800375c:	79ba      	ldrb	r2, [r7, #6]
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	6839      	ldr	r1, [r7, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f000 f828 	bl	80037b8 <LTC681x_set_cfgr_refon>
	LTC681x_set_cfgr_adcopt(nIC,ic,adcopt);
 8003768:	797a      	ldrb	r2, [r7, #5]
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	6839      	ldr	r1, [r7, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f000 f856 	bl	8003820 <LTC681x_set_cfgr_adcopt>
	LTC681x_set_cfgr_gpio(nIC,ic,gpio);
 8003774:	79fb      	ldrb	r3, [r7, #7]
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	6839      	ldr	r1, [r7, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f000 f884 	bl	8003888 <LTC681x_set_cfgr_gpio>
	LTC681x_set_cfgr_dis(nIC,ic,dcc);
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	6839      	ldr	r1, [r7, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f000 f8ce 	bl	8003928 <LTC681x_set_cfgr_dis>
	LTC681x_set_cfgr_dcto(nIC,ic,dcto);
 800378c:	79fb      	ldrb	r3, [r7, #7]
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	6839      	ldr	r1, [r7, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f000 f957 	bl	8003a46 <LTC681x_set_cfgr_dcto>
	LTC681x_set_cfgr_uv(nIC, ic, uv);
 8003798:	8bba      	ldrh	r2, [r7, #28]
 800379a:	79fb      	ldrb	r3, [r7, #7]
 800379c:	6839      	ldr	r1, [r7, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 f9a1 	bl	8003ae6 <LTC681x_set_cfgr_uv>
	LTC681x_set_cfgr_ov(nIC, ic, ov);
 80037a4:	8c3a      	ldrh	r2, [r7, #32]
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	6839      	ldr	r1, [r7, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 f9e1 	bl	8003b72 <LTC681x_set_cfgr_ov>
}
 80037b0:	bf00      	nop
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <LTC681x_set_cfgr_refon>:

/* Helper function to set the REFON bit */
void LTC681x_set_cfgr_refon(uint8_t nIC, cell_asic *ic, bool refon)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	6039      	str	r1, [r7, #0]
 80037c2:	71fb      	strb	r3, [r7, #7]
 80037c4:	4613      	mov	r3, r2
 80037c6:	71bb      	strb	r3, [r7, #6]
	if (refon) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x04;
 80037c8:	79bb      	ldrb	r3, [r7, #6]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d011      	beq.n	80037f2 <LTC681x_set_cfgr_refon+0x3a>
 80037ce:	79fb      	ldrb	r3, [r7, #7]
 80037d0:	22e8      	movs	r2, #232	; 0xe8
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	4413      	add	r3, r2
 80037da:	781a      	ldrb	r2, [r3, #0]
 80037dc:	79fb      	ldrb	r3, [r7, #7]
 80037de:	21e8      	movs	r1, #232	; 0xe8
 80037e0:	fb01 f303 	mul.w	r3, r1, r3
 80037e4:	6839      	ldr	r1, [r7, #0]
 80037e6:	440b      	add	r3, r1
 80037e8:	f042 0204 	orr.w	r2, r2, #4
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
}
 80037f0:	e010      	b.n	8003814 <LTC681x_set_cfgr_refon+0x5c>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
 80037f2:	79fb      	ldrb	r3, [r7, #7]
 80037f4:	22e8      	movs	r2, #232	; 0xe8
 80037f6:	fb02 f303 	mul.w	r3, r2, r3
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	4413      	add	r3, r2
 80037fe:	781a      	ldrb	r2, [r3, #0]
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	21e8      	movs	r1, #232	; 0xe8
 8003804:	fb01 f303 	mul.w	r3, r1, r3
 8003808:	6839      	ldr	r1, [r7, #0]
 800380a:	440b      	add	r3, r1
 800380c:	f022 0204 	bic.w	r2, r2, #4
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	701a      	strb	r2, [r3, #0]
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <LTC681x_set_cfgr_adcopt>:

/* Helper function to set the ADCOPT bit */
void LTC681x_set_cfgr_adcopt(uint8_t nIC, cell_asic *ic, bool adcopt)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	4603      	mov	r3, r0
 8003828:	6039      	str	r1, [r7, #0]
 800382a:	71fb      	strb	r3, [r7, #7]
 800382c:	4613      	mov	r3, r2
 800382e:	71bb      	strb	r3, [r7, #6]
	if (adcopt) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x01;
 8003830:	79bb      	ldrb	r3, [r7, #6]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d011      	beq.n	800385a <LTC681x_set_cfgr_adcopt+0x3a>
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	22e8      	movs	r2, #232	; 0xe8
 800383a:	fb02 f303 	mul.w	r3, r2, r3
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	4413      	add	r3, r2
 8003842:	781a      	ldrb	r2, [r3, #0]
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	21e8      	movs	r1, #232	; 0xe8
 8003848:	fb01 f303 	mul.w	r3, r1, r3
 800384c:	6839      	ldr	r1, [r7, #0]
 800384e:	440b      	add	r3, r1
 8003850:	f042 0201 	orr.w	r2, r2, #1
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
}
 8003858:	e010      	b.n	800387c <LTC681x_set_cfgr_adcopt+0x5c>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
 800385a:	79fb      	ldrb	r3, [r7, #7]
 800385c:	22e8      	movs	r2, #232	; 0xe8
 800385e:	fb02 f303 	mul.w	r3, r2, r3
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	4413      	add	r3, r2
 8003866:	781a      	ldrb	r2, [r3, #0]
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	21e8      	movs	r1, #232	; 0xe8
 800386c:	fb01 f303 	mul.w	r3, r1, r3
 8003870:	6839      	ldr	r1, [r7, #0]
 8003872:	440b      	add	r3, r1
 8003874:	f022 0201 	bic.w	r2, r2, #1
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	701a      	strb	r2, [r3, #0]
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <LTC681x_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void LTC681x_set_cfgr_gpio(uint8_t nIC, cell_asic *ic,bool gpio[5])
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	73fb      	strb	r3, [r7, #15]
	for (int i =0; i<5; i++)
 8003896:	2300      	movs	r3, #0
 8003898:	617b      	str	r3, [r7, #20]
 800389a:	e03b      	b.n	8003914 <LTC681x_set_cfgr_gpio+0x8c>
	{
		if (gpio[i])ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|(0x01<<(i+3));
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	4413      	add	r3, r2
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d018      	beq.n	80038da <LTC681x_set_cfgr_gpio+0x52>
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	22e8      	movs	r2, #232	; 0xe8
 80038ac:	fb02 f303 	mul.w	r3, r2, r3
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	4413      	add	r3, r2
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	b25a      	sxtb	r2, r3
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	3303      	adds	r3, #3
 80038bc:	2101      	movs	r1, #1
 80038be:	fa01 f303 	lsl.w	r3, r1, r3
 80038c2:	b25b      	sxtb	r3, r3
 80038c4:	4313      	orrs	r3, r2
 80038c6:	b259      	sxtb	r1, r3
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	22e8      	movs	r2, #232	; 0xe8
 80038cc:	fb02 f303 	mul.w	r3, r2, r3
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	4413      	add	r3, r2
 80038d4:	b2ca      	uxtb	r2, r1
 80038d6:	701a      	strb	r2, [r3, #0]
 80038d8:	e019      	b.n	800390e <LTC681x_set_cfgr_gpio+0x86>
		else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&(~(0x01<<(i+3)));
 80038da:	7bfb      	ldrb	r3, [r7, #15]
 80038dc:	22e8      	movs	r2, #232	; 0xe8
 80038de:	fb02 f303 	mul.w	r3, r2, r3
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	4413      	add	r3, r2
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	b25a      	sxtb	r2, r3
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	3303      	adds	r3, #3
 80038ee:	2101      	movs	r1, #1
 80038f0:	fa01 f303 	lsl.w	r3, r1, r3
 80038f4:	b25b      	sxtb	r3, r3
 80038f6:	43db      	mvns	r3, r3
 80038f8:	b25b      	sxtb	r3, r3
 80038fa:	4013      	ands	r3, r2
 80038fc:	b259      	sxtb	r1, r3
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
 8003900:	22e8      	movs	r2, #232	; 0xe8
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	4413      	add	r3, r2
 800390a:	b2ca      	uxtb	r2, r1
 800390c:	701a      	strb	r2, [r3, #0]
	for (int i =0; i<5; i++)
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	3301      	adds	r3, #1
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2b04      	cmp	r3, #4
 8003918:	ddc0      	ble.n	800389c <LTC681x_set_cfgr_gpio+0x14>
	}
}
 800391a:	bf00      	nop
 800391c:	bf00      	nop
 800391e:	371c      	adds	r7, #28
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <LTC681x_set_cfgr_dis>:

/* Helper function to control discharge */
void LTC681x_set_cfgr_dis(uint8_t nIC, cell_asic *ic,bool dcc[12])
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	73fb      	strb	r3, [r7, #15]
	for (int i =0; i<8; i++)
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]
 800393a:	e039      	b.n	80039b0 <LTC681x_set_cfgr_dis+0x88>
	{
		if (dcc[i])ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]|(0x01<<i);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	4413      	add	r3, r2
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d017      	beq.n	8003978 <LTC681x_set_cfgr_dis+0x50>
 8003948:	7bfb      	ldrb	r3, [r7, #15]
 800394a:	22e8      	movs	r2, #232	; 0xe8
 800394c:	fb02 f303 	mul.w	r3, r2, r3
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	4413      	add	r3, r2
 8003954:	791b      	ldrb	r3, [r3, #4]
 8003956:	b25a      	sxtb	r2, r3
 8003958:	2101      	movs	r1, #1
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	fa01 f303 	lsl.w	r3, r1, r3
 8003960:	b25b      	sxtb	r3, r3
 8003962:	4313      	orrs	r3, r2
 8003964:	b259      	sxtb	r1, r3
 8003966:	7bfb      	ldrb	r3, [r7, #15]
 8003968:	22e8      	movs	r2, #232	; 0xe8
 800396a:	fb02 f303 	mul.w	r3, r2, r3
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	4413      	add	r3, r2
 8003972:	b2ca      	uxtb	r2, r1
 8003974:	711a      	strb	r2, [r3, #4]
 8003976:	e018      	b.n	80039aa <LTC681x_set_cfgr_dis+0x82>
		else ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]& (~(0x01<<i));
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	22e8      	movs	r2, #232	; 0xe8
 800397c:	fb02 f303 	mul.w	r3, r2, r3
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	4413      	add	r3, r2
 8003984:	791b      	ldrb	r3, [r3, #4]
 8003986:	b25a      	sxtb	r2, r3
 8003988:	2101      	movs	r1, #1
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	fa01 f303 	lsl.w	r3, r1, r3
 8003990:	b25b      	sxtb	r3, r3
 8003992:	43db      	mvns	r3, r3
 8003994:	b25b      	sxtb	r3, r3
 8003996:	4013      	ands	r3, r2
 8003998:	b259      	sxtb	r1, r3
 800399a:	7bfb      	ldrb	r3, [r7, #15]
 800399c:	22e8      	movs	r2, #232	; 0xe8
 800399e:	fb02 f303 	mul.w	r3, r2, r3
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	4413      	add	r3, r2
 80039a6:	b2ca      	uxtb	r2, r1
 80039a8:	711a      	strb	r2, [r3, #4]
	for (int i =0; i<8; i++)
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	3301      	adds	r3, #1
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2b07      	cmp	r3, #7
 80039b4:	ddc2      	ble.n	800393c <LTC681x_set_cfgr_dis+0x14>
	}
	for (int i =0; i<4; i++)
 80039b6:	2300      	movs	r3, #0
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	e03a      	b.n	8003a32 <LTC681x_set_cfgr_dis+0x10a>
	{
		if (dcc[i+8])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<i);
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	3308      	adds	r3, #8
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	4413      	add	r3, r2
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d017      	beq.n	80039fa <LTC681x_set_cfgr_dis+0xd2>
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	22e8      	movs	r2, #232	; 0xe8
 80039ce:	fb02 f303 	mul.w	r3, r2, r3
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	4413      	add	r3, r2
 80039d6:	795b      	ldrb	r3, [r3, #5]
 80039d8:	b25a      	sxtb	r2, r3
 80039da:	2101      	movs	r1, #1
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	fa01 f303 	lsl.w	r3, r1, r3
 80039e2:	b25b      	sxtb	r3, r3
 80039e4:	4313      	orrs	r3, r2
 80039e6:	b259      	sxtb	r1, r3
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	22e8      	movs	r2, #232	; 0xe8
 80039ec:	fb02 f303 	mul.w	r3, r2, r3
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	4413      	add	r3, r2
 80039f4:	b2ca      	uxtb	r2, r1
 80039f6:	715a      	strb	r2, [r3, #5]
 80039f8:	e018      	b.n	8003a2c <LTC681x_set_cfgr_dis+0x104>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<i));
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
 80039fc:	22e8      	movs	r2, #232	; 0xe8
 80039fe:	fb02 f303 	mul.w	r3, r2, r3
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	4413      	add	r3, r2
 8003a06:	795b      	ldrb	r3, [r3, #5]
 8003a08:	b25a      	sxtb	r2, r3
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a12:	b25b      	sxtb	r3, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	b25b      	sxtb	r3, r3
 8003a18:	4013      	ands	r3, r2
 8003a1a:	b259      	sxtb	r1, r3
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	22e8      	movs	r2, #232	; 0xe8
 8003a20:	fb02 f303 	mul.w	r3, r2, r3
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	4413      	add	r3, r2
 8003a28:	b2ca      	uxtb	r2, r1
 8003a2a:	715a      	strb	r2, [r3, #5]
	for (int i =0; i<4; i++)
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	ddc1      	ble.n	80039bc <LTC681x_set_cfgr_dis+0x94>
	}
}
 8003a38:	bf00      	nop
 8003a3a:	bf00      	nop
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <LTC681x_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic,bool dcto[4])
{
 8003a46:	b480      	push	{r7}
 8003a48:	b087      	sub	sp, #28
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<4;i++)
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	e03b      	b.n	8003ad2 <LTC681x_set_cfgr_dcto+0x8c>
	{
		if(dcto[i])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<(i+4));
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	4413      	add	r3, r2
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d018      	beq.n	8003a98 <LTC681x_set_cfgr_dcto+0x52>
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
 8003a68:	22e8      	movs	r2, #232	; 0xe8
 8003a6a:	fb02 f303 	mul.w	r3, r2, r3
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	4413      	add	r3, r2
 8003a72:	795b      	ldrb	r3, [r3, #5]
 8003a74:	b25a      	sxtb	r2, r3
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a80:	b25b      	sxtb	r3, r3
 8003a82:	4313      	orrs	r3, r2
 8003a84:	b259      	sxtb	r1, r3
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
 8003a88:	22e8      	movs	r2, #232	; 0xe8
 8003a8a:	fb02 f303 	mul.w	r3, r2, r3
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	4413      	add	r3, r2
 8003a92:	b2ca      	uxtb	r2, r1
 8003a94:	715a      	strb	r2, [r3, #5]
 8003a96:	e019      	b.n	8003acc <LTC681x_set_cfgr_dcto+0x86>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<(i+4)));
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	22e8      	movs	r2, #232	; 0xe8
 8003a9c:	fb02 f303 	mul.w	r3, r2, r3
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	795b      	ldrb	r3, [r3, #5]
 8003aa6:	b25a      	sxtb	r2, r3
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	3304      	adds	r3, #4
 8003aac:	2101      	movs	r1, #1
 8003aae:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab2:	b25b      	sxtb	r3, r3
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	b25b      	sxtb	r3, r3
 8003ab8:	4013      	ands	r3, r2
 8003aba:	b259      	sxtb	r1, r3
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
 8003abe:	22e8      	movs	r2, #232	; 0xe8
 8003ac0:	fb02 f303 	mul.w	r3, r2, r3
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	b2ca      	uxtb	r2, r1
 8003aca:	715a      	strb	r2, [r3, #5]
	for(int i =0;i<4;i++)
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	ddc0      	ble.n	8003a5a <LTC681x_set_cfgr_dcto+0x14>
	}
}
 8003ad8:	bf00      	nop
 8003ada:	bf00      	nop
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <LTC681x_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic *ic,uint16_t uv)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b085      	sub	sp, #20
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	4603      	mov	r3, r0
 8003aee:	6039      	str	r1, [r7, #0]
 8003af0:	71fb      	strb	r3, [r7, #7]
 8003af2:	4613      	mov	r3, r2
 8003af4:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (uv/16)-1;
 8003af6:	88bb      	ldrh	r3, [r7, #4]
 8003af8:	091b      	lsrs	r3, r3, #4
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	81fb      	strh	r3, [r7, #14]
	ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	22e8      	movs	r2, #232	; 0xe8
 8003b04:	fb02 f303 	mul.w	r3, r2, r3
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	89fa      	ldrh	r2, [r7, #14]
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	705a      	strb	r2, [r3, #1]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0xF0;
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	22e8      	movs	r2, #232	; 0xe8
 8003b16:	fb02 f303 	mul.w	r3, r2, r3
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	789a      	ldrb	r2, [r3, #2]
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	21e8      	movs	r1, #232	; 0xe8
 8003b24:	fb01 f303 	mul.w	r3, r1, r3
 8003b28:	6839      	ldr	r1, [r7, #0]
 8003b2a:	440b      	add	r3, r1
 8003b2c:	f022 020f 	bic.w	r2, r2, #15
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x0F00 & tmp)>>8);
 8003b34:	79fb      	ldrb	r3, [r7, #7]
 8003b36:	22e8      	movs	r2, #232	; 0xe8
 8003b38:	fb02 f303 	mul.w	r3, r2, r3
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	4413      	add	r3, r2
 8003b40:	789b      	ldrb	r3, [r3, #2]
 8003b42:	b25a      	sxtb	r2, r3
 8003b44:	89fb      	ldrh	r3, [r7, #14]
 8003b46:	0a1b      	lsrs	r3, r3, #8
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	b25b      	sxtb	r3, r3
 8003b4c:	f003 030f 	and.w	r3, r3, #15
 8003b50:	b25b      	sxtb	r3, r3
 8003b52:	4313      	orrs	r3, r2
 8003b54:	b259      	sxtb	r1, r3
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	22e8      	movs	r2, #232	; 0xe8
 8003b5a:	fb02 f303 	mul.w	r3, r2, r3
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	4413      	add	r3, r2
 8003b62:	b2ca      	uxtb	r2, r1
 8003b64:	709a      	strb	r2, [r3, #2]
}
 8003b66:	bf00      	nop
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <LTC681x_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void LTC681x_set_cfgr_ov(uint8_t nIC, cell_asic *ic,uint16_t ov)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b085      	sub	sp, #20
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	4603      	mov	r3, r0
 8003b7a:	6039      	str	r1, [r7, #0]
 8003b7c:	71fb      	strb	r3, [r7, #7]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (ov/16);
 8003b82:	88bb      	ldrh	r3, [r7, #4]
 8003b84:	091b      	lsrs	r3, r3, #4
 8003b86:	81fb      	strh	r3, [r7, #14]
	ic[nIC].config.tx_data[3] = 0x00FF & (tmp>>4);
 8003b88:	89fb      	ldrh	r3, [r7, #14]
 8003b8a:	091b      	lsrs	r3, r3, #4
 8003b8c:	b299      	uxth	r1, r3
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	22e8      	movs	r2, #232	; 0xe8
 8003b92:	fb02 f303 	mul.w	r3, r2, r3
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	4413      	add	r3, r2
 8003b9a:	b2ca      	uxtb	r2, r1
 8003b9c:	70da      	strb	r2, [r3, #3]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0x0F;
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	22e8      	movs	r2, #232	; 0xe8
 8003ba2:	fb02 f303 	mul.w	r3, r2, r3
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	4413      	add	r3, r2
 8003baa:	789a      	ldrb	r2, [r3, #2]
 8003bac:	79fb      	ldrb	r3, [r7, #7]
 8003bae:	21e8      	movs	r1, #232	; 0xe8
 8003bb0:	fb01 f303 	mul.w	r3, r1, r3
 8003bb4:	6839      	ldr	r1, [r7, #0]
 8003bb6:	440b      	add	r3, r1
 8003bb8:	f002 020f 	and.w	r2, r2, #15
 8003bbc:	b2d2      	uxtb	r2, r2
 8003bbe:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x000F & tmp)<<4);
 8003bc0:	79fb      	ldrb	r3, [r7, #7]
 8003bc2:	22e8      	movs	r2, #232	; 0xe8
 8003bc4:	fb02 f303 	mul.w	r3, r2, r3
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	4413      	add	r3, r2
 8003bcc:	789b      	ldrb	r3, [r3, #2]
 8003bce:	b25a      	sxtb	r2, r3
 8003bd0:	89fb      	ldrh	r3, [r7, #14]
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	b25b      	sxtb	r3, r3
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	b259      	sxtb	r1, r3
 8003bda:	79fb      	ldrb	r3, [r7, #7]
 8003bdc:	22e8      	movs	r2, #232	; 0xe8
 8003bde:	fb02 f303 	mul.w	r3, r2, r3
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	4413      	add	r3, r2
 8003be6:	b2ca      	uxtb	r2, r1
 8003be8:	709a      	strb	r2, [r3, #2]
}
 8003bea:	bf00      	nop
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
	...

08003bf8 <cs_low>:
#include "stm32f4xx_hal.h"

extern SPI_HandleTypeDef hspi1;

void cs_low(uint8_t pin)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8003c02:	2200      	movs	r2, #0
 8003c04:	2140      	movs	r1, #64	; 0x40
 8003c06:	4803      	ldr	r0, [pc, #12]	; (8003c14 <cs_low+0x1c>)
 8003c08:	f001 ffba 	bl	8005b80 <HAL_GPIO_WritePin>
}
 8003c0c:	bf00      	nop
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40020400 	.word	0x40020400

08003c18 <cs_high>:

void cs_high(uint8_t pin)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	4603      	mov	r3, r0
 8003c20:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8003c22:	2201      	movs	r2, #1
 8003c24:	2140      	movs	r1, #64	; 0x40
 8003c26:	4803      	ldr	r0, [pc, #12]	; (8003c34 <cs_high+0x1c>)
 8003c28:	f001 ffaa 	bl	8005b80 <HAL_GPIO_WritePin>
}
 8003c2c:	bf00      	nop
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40020400 	.word	0x40020400

08003c38 <delay_u>:

void delay_u(uint16_t micro)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	80fb      	strh	r3, [r7, #6]
  HAL_Delay(1);
 8003c42:	2001      	movs	r0, #1
 8003c44:	f000 ff4a 	bl	8004adc <HAL_Delay>
}
 8003c48:	bf00      	nop
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <spi_write_array>:
Writes an array of bytes out of the SPI port
*/
void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
                     uint8_t data[] //Array of bytes to be written on the SPI port
                    )
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	6039      	str	r1, [r7, #0]
 8003c5a:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi1, data, len, 100);
 8003c5c:	79fb      	ldrb	r3, [r7, #7]
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	2364      	movs	r3, #100	; 0x64
 8003c62:	6839      	ldr	r1, [r7, #0]
 8003c64:	4803      	ldr	r0, [pc, #12]	; (8003c74 <spi_write_array+0x24>)
 8003c66:	f002 fe16 	bl	8006896 <HAL_SPI_Transmit>
}
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	200028e8 	.word	0x200028e8

08003c78 <spi_write_read>:
void spi_write_read(uint8_t tx_Data[],//array of data to be written on SPI port
                    uint8_t tx_len, //length of the tx data arry
                    uint8_t *rx_data,//Input: array that will store the data read by the SPI port
                    uint8_t rx_len //Option: number of bytes to be read from the SPI port
                   )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	607a      	str	r2, [r7, #4]
 8003c82:	461a      	mov	r2, r3
 8003c84:	460b      	mov	r3, r1
 8003c86:	72fb      	strb	r3, [r7, #11]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	72bb      	strb	r3, [r7, #10]
  for (uint8_t i = 0; i < tx_len; i++)
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	75fb      	strb	r3, [r7, #23]
 8003c90:	e00a      	b.n	8003ca8 <spi_write_read+0x30>
  {
    HAL_SPI_Transmit(&hspi1, &tx_Data[i], 1, 100);
 8003c92:	7dfb      	ldrb	r3, [r7, #23]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	18d1      	adds	r1, r2, r3
 8003c98:	2364      	movs	r3, #100	; 0x64
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	4810      	ldr	r0, [pc, #64]	; (8003ce0 <spi_write_read+0x68>)
 8003c9e:	f002 fdfa 	bl	8006896 <HAL_SPI_Transmit>
  for (uint8_t i = 0; i < tx_len; i++)
 8003ca2:	7dfb      	ldrb	r3, [r7, #23]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	75fb      	strb	r3, [r7, #23]
 8003ca8:	7dfa      	ldrb	r2, [r7, #23]
 8003caa:	7afb      	ldrb	r3, [r7, #11]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d3f0      	bcc.n	8003c92 <spi_write_read+0x1a>
  }

  for (uint8_t i = 0; i < rx_len; i++)
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	75bb      	strb	r3, [r7, #22]
 8003cb4:	e00a      	b.n	8003ccc <spi_write_read+0x54>
  {
	HAL_SPI_Receive(&hspi1, &rx_data[i], 1, 100);
 8003cb6:	7dbb      	ldrb	r3, [r7, #22]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	18d1      	adds	r1, r2, r3
 8003cbc:	2364      	movs	r3, #100	; 0x64
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	4807      	ldr	r0, [pc, #28]	; (8003ce0 <spi_write_read+0x68>)
 8003cc2:	f002 ff24 	bl	8006b0e <HAL_SPI_Receive>
  for (uint8_t i = 0; i < rx_len; i++)
 8003cc6:	7dbb      	ldrb	r3, [r7, #22]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	75bb      	strb	r3, [r7, #22]
 8003ccc:	7dba      	ldrb	r2, [r7, #22]
 8003cce:	7abb      	ldrb	r3, [r7, #10]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d3f0      	bcc.n	8003cb6 <spi_write_read+0x3e>
  }

}
 8003cd4:	bf00      	nop
 8003cd6:	bf00      	nop
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	200028e8 	.word	0x200028e8

08003ce4 <spi_read_byte>:


uint8_t spi_read_byte(uint8_t tx_dat)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	4603      	mov	r3, r0
 8003cec:	71fb      	strb	r3, [r7, #7]
  uint8_t data;
  HAL_SPI_Receive(&hspi1, &data, 1, 100);
 8003cee:	f107 010f 	add.w	r1, r7, #15
 8003cf2:	2364      	movs	r3, #100	; 0x64
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	4804      	ldr	r0, [pc, #16]	; (8003d08 <spi_read_byte+0x24>)
 8003cf8:	f002 ff09 	bl	8006b0e <HAL_SPI_Receive>
  return(data);
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	200028e8 	.word	0x200028e8

08003d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d10:	f000 fe72 	bl	80049f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d14:	f000 f83c 	bl	8003d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d18:	f000 faa0 	bl	800425c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003d1c:	f000 fa74 	bl	8004208 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8003d20:	f000 f8a4 	bl	8003e6c <MX_CAN1_Init>
  MX_SPI1_Init();
 8003d24:	f000 f90e 	bl	8003f44 <MX_SPI1_Init>
  MX_CAN2_Init();
 8003d28:	f000 f8d6 	bl	8003ed8 <MX_CAN2_Init>
  MX_TIM1_Init();
 8003d2c:	f000 f940 	bl	8003fb0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003d30:	f000 f9ea 	bl	8004108 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  FEB_BMS_State_Validate();
 8003d34:	f7fd f98e 	bl	8001054 <FEB_BMS_State_Validate>
  FEB_LTC6811_Setup();
 8003d38:	f7fd fc94 	bl	8001664 <FEB_LTC6811_Setup>
  FEB_BMS_Shutdown_Startup();
 8003d3c:	f7fd f95e 	bl	8000ffc <FEB_BMS_Shutdown_Startup>
  FEB_BMS_Precharge_Open();
 8003d40:	f7fd f944 	bl	8000fcc <FEB_BMS_Precharge_Open>
  FEB_CAN_Init();
 8003d44:	f7fd f98e 	bl	8001064 <FEB_CAN_Init>
  FEB_CAN_Charger_Init();
 8003d48:	f7fd f9e6 	bl	8001118 <FEB_CAN_Charger_Init>
  FEB_Fan_Init();
 8003d4c:	f7fd fc06 	bl	800155c <FEB_Fan_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// *********************** Reset State ***********************
	FEB_LTC6811_Clear_Voltage();
 8003d50:	f7fe f8e4 	bl	8001f1c <FEB_LTC6811_Clear_Voltage>
	FEB_LTC6811_Clear_Temperature();
 8003d54:	f7fe fc86 	bl	8002664 <FEB_LTC6811_Clear_Temperature>

	// *********************** Cell Voltage ***********************
	FEB_LTC6811_Poll_Voltage();
 8003d58:	f7fd fcf2 	bl	8001740 <FEB_LTC6811_Poll_Voltage>
  	FEB_LTC6811_Validate_Voltage();
 8003d5c:	f7fd ffec 	bl	8001d38 <FEB_LTC6811_Validate_Voltage>
	FEB_LTC6811_UART_Transmit_Voltage();
 8003d60:	f7fe f828 	bl	8001db4 <FEB_LTC6811_UART_Transmit_Voltage>

	// *********************** Cell Temperature ***********************
	FEB_LTC6811_Poll_Temperature();
 8003d64:	f7fe f906 	bl	8001f74 <FEB_LTC6811_Poll_Temperature>
  	FEB_LTC6811_Validate_Temperature();
 8003d68:	f7fe fbbc 	bl	80024e4 <FEB_LTC6811_Validate_Temperature>
	FEB_LTC6811_UART_Transmit_Temperature();
 8003d6c:	f7fe fbfe 	bl	800256c <FEB_LTC6811_UART_Transmit_Temperature>

	// *********************** IVT ***********************
	FEB_CAN_IVT_Process();
 8003d70:	f7fd fb5a 	bl	8001428 <FEB_CAN_IVT_Process>

	// *********************** Cell Balance ***********************
	FEB_LTC6811_Balance_Cells();
 8003d74:	f7fd ff28 	bl	8001bc8 <FEB_LTC6811_Balance_Cells>
	FEB_LTC6811_UART_Transmit_Discharge();
 8003d78:	f7fd ff5a 	bl	8001c30 <FEB_LTC6811_UART_Transmit_Discharge>

	// *********************** Charger ***********************
	FEB_CAN_Charger_Process(&hcan1);
 8003d7c:	4803      	ldr	r0, [pc, #12]	; (8003d8c <main+0x80>)
 8003d7e:	f7fd fa74 	bl	800126a <FEB_CAN_Charger_Process>

	if (FEB_CAN_CHARGER_START_CHARGE == 1) {
		HAL_Delay(1000);	// 1Hz
	} else {
		HAL_Delay(200);		// 5Hz
 8003d82:	20c8      	movs	r0, #200	; 0xc8
 8003d84:	f000 feaa 	bl	8004adc <HAL_Delay>
	FEB_LTC6811_Clear_Voltage();
 8003d88:	e7e2      	b.n	8003d50 <main+0x44>
 8003d8a:	bf00      	nop
 8003d8c:	20002898 	.word	0x20002898

08003d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b094      	sub	sp, #80	; 0x50
 8003d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d96:	f107 031c 	add.w	r3, r7, #28
 8003d9a:	2234      	movs	r2, #52	; 0x34
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f004 fd6c 	bl	800887c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003da4:	f107 0308 	add.w	r3, r7, #8
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	609a      	str	r2, [r3, #8]
 8003db0:	60da      	str	r2, [r3, #12]
 8003db2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003db4:	2300      	movs	r3, #0
 8003db6:	607b      	str	r3, [r7, #4]
 8003db8:	4b2a      	ldr	r3, [pc, #168]	; (8003e64 <SystemClock_Config+0xd4>)
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	4a29      	ldr	r2, [pc, #164]	; (8003e64 <SystemClock_Config+0xd4>)
 8003dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc2:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc4:	4b27      	ldr	r3, [pc, #156]	; (8003e64 <SystemClock_Config+0xd4>)
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dcc:	607b      	str	r3, [r7, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	4b24      	ldr	r3, [pc, #144]	; (8003e68 <SystemClock_Config+0xd8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003ddc:	4a22      	ldr	r2, [pc, #136]	; (8003e68 <SystemClock_Config+0xd8>)
 8003dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	4b20      	ldr	r3, [pc, #128]	; (8003e68 <SystemClock_Config+0xd8>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003dec:	603b      	str	r3, [r7, #0]
 8003dee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003df0:	2302      	movs	r3, #2
 8003df2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003df4:	2301      	movs	r3, #1
 8003df6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003df8:	2310      	movs	r3, #16
 8003dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e00:	2300      	movs	r3, #0
 8003e02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003e04:	2308      	movs	r3, #8
 8003e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 8003e08:	2380      	movs	r3, #128	; 0x80
 8003e0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003e10:	2302      	movs	r3, #2
 8003e12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003e14:	2302      	movs	r3, #2
 8003e16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e18:	f107 031c 	add.w	r3, r7, #28
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f002 fa13 	bl	8006248 <HAL_RCC_OscConfig>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003e28:	f000 fa7e 	bl	8004328 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e2c:	230f      	movs	r3, #15
 8003e2e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e30:	2302      	movs	r3, #2
 8003e32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e34:	2300      	movs	r3, #0
 8003e36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003e38:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003e3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e42:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003e44:	f107 0308 	add.w	r3, r7, #8
 8003e48:	2104      	movs	r1, #4
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f001 feb2 	bl	8005bb4 <HAL_RCC_ClockConfig>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8003e56:	f000 fa67 	bl	8004328 <Error_Handler>
  }
}
 8003e5a:	bf00      	nop
 8003e5c:	3750      	adds	r7, #80	; 0x50
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40023800 	.word	0x40023800
 8003e68:	40007000 	.word	0x40007000

08003e6c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003e70:	4b17      	ldr	r3, [pc, #92]	; (8003ed0 <MX_CAN1_Init+0x64>)
 8003e72:	4a18      	ldr	r2, [pc, #96]	; (8003ed4 <MX_CAN1_Init+0x68>)
 8003e74:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8003e76:	4b16      	ldr	r3, [pc, #88]	; (8003ed0 <MX_CAN1_Init+0x64>)
 8003e78:	2210      	movs	r2, #16
 8003e7a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003e7c:	4b14      	ldr	r3, [pc, #80]	; (8003ed0 <MX_CAN1_Init+0x64>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003e82:	4b13      	ldr	r3, [pc, #76]	; (8003ed0 <MX_CAN1_Init+0x64>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8003e88:	4b11      	ldr	r3, [pc, #68]	; (8003ed0 <MX_CAN1_Init+0x64>)
 8003e8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e8e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003e90:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <MX_CAN1_Init+0x64>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003e96:	4b0e      	ldr	r3, [pc, #56]	; (8003ed0 <MX_CAN1_Init+0x64>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003e9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ed0 <MX_CAN1_Init+0x64>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003ea2:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <MX_CAN1_Init+0x64>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003ea8:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <MX_CAN1_Init+0x64>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003eae:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <MX_CAN1_Init+0x64>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003eb4:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <MX_CAN1_Init+0x64>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003eba:	4805      	ldr	r0, [pc, #20]	; (8003ed0 <MX_CAN1_Init+0x64>)
 8003ebc:	f000 fe32 	bl	8004b24 <HAL_CAN_Init>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8003ec6:	f000 fa2f 	bl	8004328 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003eca:	bf00      	nop
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	20002898 	.word	0x20002898
 8003ed4:	40006400 	.word	0x40006400

08003ed8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8003edc:	4b17      	ldr	r3, [pc, #92]	; (8003f3c <MX_CAN2_Init+0x64>)
 8003ede:	4a18      	ldr	r2, [pc, #96]	; (8003f40 <MX_CAN2_Init+0x68>)
 8003ee0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8003ee2:	4b16      	ldr	r3, [pc, #88]	; (8003f3c <MX_CAN2_Init+0x64>)
 8003ee4:	2210      	movs	r2, #16
 8003ee6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8003ee8:	4b14      	ldr	r3, [pc, #80]	; (8003f3c <MX_CAN2_Init+0x64>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003eee:	4b13      	ldr	r3, [pc, #76]	; (8003f3c <MX_CAN2_Init+0x64>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8003ef4:	4b11      	ldr	r3, [pc, #68]	; (8003f3c <MX_CAN2_Init+0x64>)
 8003ef6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003efa:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003efc:	4b0f      	ldr	r3, [pc, #60]	; (8003f3c <MX_CAN2_Init+0x64>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8003f02:	4b0e      	ldr	r3, [pc, #56]	; (8003f3c <MX_CAN2_Init+0x64>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8003f08:	4b0c      	ldr	r3, [pc, #48]	; (8003f3c <MX_CAN2_Init+0x64>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8003f0e:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <MX_CAN2_Init+0x64>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8003f14:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <MX_CAN2_Init+0x64>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8003f1a:	4b08      	ldr	r3, [pc, #32]	; (8003f3c <MX_CAN2_Init+0x64>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8003f20:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <MX_CAN2_Init+0x64>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8003f26:	4805      	ldr	r0, [pc, #20]	; (8003f3c <MX_CAN2_Init+0x64>)
 8003f28:	f000 fdfc 	bl	8004b24 <HAL_CAN_Init>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8003f32:	f000 f9f9 	bl	8004328 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8003f36:	bf00      	nop
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	200028c0 	.word	0x200028c0
 8003f40:	40006800 	.word	0x40006800

08003f44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003f48:	4b17      	ldr	r3, [pc, #92]	; (8003fa8 <MX_SPI1_Init+0x64>)
 8003f4a:	4a18      	ldr	r2, [pc, #96]	; (8003fac <MX_SPI1_Init+0x68>)
 8003f4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003f4e:	4b16      	ldr	r3, [pc, #88]	; (8003fa8 <MX_SPI1_Init+0x64>)
 8003f50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003f56:	4b14      	ldr	r3, [pc, #80]	; (8003fa8 <MX_SPI1_Init+0x64>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f5c:	4b12      	ldr	r3, [pc, #72]	; (8003fa8 <MX_SPI1_Init+0x64>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f62:	4b11      	ldr	r3, [pc, #68]	; (8003fa8 <MX_SPI1_Init+0x64>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f68:	4b0f      	ldr	r3, [pc, #60]	; (8003fa8 <MX_SPI1_Init+0x64>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f6e:	4b0e      	ldr	r3, [pc, #56]	; (8003fa8 <MX_SPI1_Init+0x64>)
 8003f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003f76:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <MX_SPI1_Init+0x64>)
 8003f78:	2228      	movs	r2, #40	; 0x28
 8003f7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <MX_SPI1_Init+0x64>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f82:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <MX_SPI1_Init+0x64>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f88:	4b07      	ldr	r3, [pc, #28]	; (8003fa8 <MX_SPI1_Init+0x64>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003f8e:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <MX_SPI1_Init+0x64>)
 8003f90:	220a      	movs	r2, #10
 8003f92:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003f94:	4804      	ldr	r0, [pc, #16]	; (8003fa8 <MX_SPI1_Init+0x64>)
 8003f96:	f002 fbf5 	bl	8006784 <HAL_SPI_Init>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003fa0:	f000 f9c2 	bl	8004328 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003fa4:	bf00      	nop
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	200028e8 	.word	0x200028e8
 8003fac:	40013000 	.word	0x40013000

08003fb0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b096      	sub	sp, #88	; 0x58
 8003fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	605a      	str	r2, [r3, #4]
 8003fc0:	609a      	str	r2, [r3, #8]
 8003fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	605a      	str	r2, [r3, #4]
 8003fd8:	609a      	str	r2, [r3, #8]
 8003fda:	60da      	str	r2, [r3, #12]
 8003fdc:	611a      	str	r2, [r3, #16]
 8003fde:	615a      	str	r2, [r3, #20]
 8003fe0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003fe2:	1d3b      	adds	r3, r7, #4
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f004 fc47 	bl	800887c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003fee:	4b44      	ldr	r3, [pc, #272]	; (8004100 <MX_TIM1_Init+0x150>)
 8003ff0:	4a44      	ldr	r2, [pc, #272]	; (8004104 <MX_TIM1_Init+0x154>)
 8003ff2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003ff4:	4b42      	ldr	r3, [pc, #264]	; (8004100 <MX_TIM1_Init+0x150>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ffa:	4b41      	ldr	r3, [pc, #260]	; (8004100 <MX_TIM1_Init+0x150>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8004000:	4b3f      	ldr	r3, [pc, #252]	; (8004100 <MX_TIM1_Init+0x150>)
 8004002:	22ff      	movs	r2, #255	; 0xff
 8004004:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004006:	4b3e      	ldr	r3, [pc, #248]	; (8004100 <MX_TIM1_Init+0x150>)
 8004008:	2200      	movs	r2, #0
 800400a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800400c:	4b3c      	ldr	r3, [pc, #240]	; (8004100 <MX_TIM1_Init+0x150>)
 800400e:	2200      	movs	r2, #0
 8004010:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004012:	4b3b      	ldr	r3, [pc, #236]	; (8004100 <MX_TIM1_Init+0x150>)
 8004014:	2200      	movs	r2, #0
 8004016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004018:	4839      	ldr	r0, [pc, #228]	; (8004100 <MX_TIM1_Init+0x150>)
 800401a:	f003 f95b 	bl	80072d4 <HAL_TIM_Base_Init>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8004024:	f000 f980 	bl	8004328 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800402c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800402e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004032:	4619      	mov	r1, r3
 8004034:	4832      	ldr	r0, [pc, #200]	; (8004100 <MX_TIM1_Init+0x150>)
 8004036:	f003 fb7f 	bl	8007738 <HAL_TIM_ConfigClockSource>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8004040:	f000 f972 	bl	8004328 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004044:	482e      	ldr	r0, [pc, #184]	; (8004100 <MX_TIM1_Init+0x150>)
 8004046:	f003 f994 	bl	8007372 <HAL_TIM_PWM_Init>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8004050:	f000 f96a 	bl	8004328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004054:	2300      	movs	r3, #0
 8004056:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004058:	2300      	movs	r3, #0
 800405a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800405c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004060:	4619      	mov	r1, r3
 8004062:	4827      	ldr	r0, [pc, #156]	; (8004100 <MX_TIM1_Init+0x150>)
 8004064:	f003 ff40 	bl	8007ee8 <HAL_TIMEx_MasterConfigSynchronization>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800406e:	f000 f95b 	bl	8004328 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004072:	2360      	movs	r3, #96	; 0x60
 8004074:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004076:	2300      	movs	r3, #0
 8004078:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800407a:	2300      	movs	r3, #0
 800407c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800407e:	2300      	movs	r3, #0
 8004080:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004082:	2300      	movs	r3, #0
 8004084:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004086:	2300      	movs	r3, #0
 8004088:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800408a:	2300      	movs	r3, #0
 800408c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800408e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004092:	2200      	movs	r2, #0
 8004094:	4619      	mov	r1, r3
 8004096:	481a      	ldr	r0, [pc, #104]	; (8004100 <MX_TIM1_Init+0x150>)
 8004098:	f003 fa8c 	bl	80075b4 <HAL_TIM_PWM_ConfigChannel>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80040a2:	f000 f941 	bl	8004328 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80040a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040aa:	2204      	movs	r2, #4
 80040ac:	4619      	mov	r1, r3
 80040ae:	4814      	ldr	r0, [pc, #80]	; (8004100 <MX_TIM1_Init+0x150>)
 80040b0:	f003 fa80 	bl	80075b4 <HAL_TIM_PWM_ConfigChannel>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80040ba:	f000 f935 	bl	8004328 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80040be:	2300      	movs	r3, #0
 80040c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80040c2:	2300      	movs	r3, #0
 80040c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80040ca:	2300      	movs	r3, #0
 80040cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80040d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80040d8:	2300      	movs	r3, #0
 80040da:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80040dc:	1d3b      	adds	r3, r7, #4
 80040de:	4619      	mov	r1, r3
 80040e0:	4807      	ldr	r0, [pc, #28]	; (8004100 <MX_TIM1_Init+0x150>)
 80040e2:	f003 ff7d 	bl	8007fe0 <HAL_TIMEx_ConfigBreakDeadTime>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80040ec:	f000 f91c 	bl	8004328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80040f0:	4803      	ldr	r0, [pc, #12]	; (8004100 <MX_TIM1_Init+0x150>)
 80040f2:	f000 fa87 	bl	8004604 <HAL_TIM_MspPostInit>

}
 80040f6:	bf00      	nop
 80040f8:	3758      	adds	r7, #88	; 0x58
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20002940 	.word	0x20002940
 8004104:	40010000 	.word	0x40010000

08004108 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08e      	sub	sp, #56	; 0x38
 800410c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800410e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	605a      	str	r2, [r3, #4]
 8004118:	609a      	str	r2, [r3, #8]
 800411a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800411c:	f107 0320 	add.w	r3, r7, #32
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004126:	1d3b      	adds	r3, r7, #4
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	605a      	str	r2, [r3, #4]
 800412e:	609a      	str	r2, [r3, #8]
 8004130:	60da      	str	r2, [r3, #12]
 8004132:	611a      	str	r2, [r3, #16]
 8004134:	615a      	str	r2, [r3, #20]
 8004136:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004138:	4b32      	ldr	r3, [pc, #200]	; (8004204 <MX_TIM2_Init+0xfc>)
 800413a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800413e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004140:	4b30      	ldr	r3, [pc, #192]	; (8004204 <MX_TIM2_Init+0xfc>)
 8004142:	2200      	movs	r2, #0
 8004144:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004146:	4b2f      	ldr	r3, [pc, #188]	; (8004204 <MX_TIM2_Init+0xfc>)
 8004148:	2200      	movs	r2, #0
 800414a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 800414c:	4b2d      	ldr	r3, [pc, #180]	; (8004204 <MX_TIM2_Init+0xfc>)
 800414e:	22ff      	movs	r2, #255	; 0xff
 8004150:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004152:	4b2c      	ldr	r3, [pc, #176]	; (8004204 <MX_TIM2_Init+0xfc>)
 8004154:	2200      	movs	r2, #0
 8004156:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004158:	4b2a      	ldr	r3, [pc, #168]	; (8004204 <MX_TIM2_Init+0xfc>)
 800415a:	2200      	movs	r2, #0
 800415c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800415e:	4829      	ldr	r0, [pc, #164]	; (8004204 <MX_TIM2_Init+0xfc>)
 8004160:	f003 f8b8 	bl	80072d4 <HAL_TIM_Base_Init>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800416a:	f000 f8dd 	bl	8004328 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800416e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004172:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004174:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004178:	4619      	mov	r1, r3
 800417a:	4822      	ldr	r0, [pc, #136]	; (8004204 <MX_TIM2_Init+0xfc>)
 800417c:	f003 fadc 	bl	8007738 <HAL_TIM_ConfigClockSource>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8004186:	f000 f8cf 	bl	8004328 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800418a:	481e      	ldr	r0, [pc, #120]	; (8004204 <MX_TIM2_Init+0xfc>)
 800418c:	f003 f8f1 	bl	8007372 <HAL_TIM_PWM_Init>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8004196:	f000 f8c7 	bl	8004328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800419a:	2300      	movs	r3, #0
 800419c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800419e:	2300      	movs	r3, #0
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80041a2:	f107 0320 	add.w	r3, r7, #32
 80041a6:	4619      	mov	r1, r3
 80041a8:	4816      	ldr	r0, [pc, #88]	; (8004204 <MX_TIM2_Init+0xfc>)
 80041aa:	f003 fe9d 	bl	8007ee8 <HAL_TIMEx_MasterConfigSynchronization>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80041b4:	f000 f8b8 	bl	8004328 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041b8:	2360      	movs	r3, #96	; 0x60
 80041ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80041bc:	2300      	movs	r3, #0
 80041be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041c0:	2300      	movs	r3, #0
 80041c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041c8:	1d3b      	adds	r3, r7, #4
 80041ca:	2200      	movs	r2, #0
 80041cc:	4619      	mov	r1, r3
 80041ce:	480d      	ldr	r0, [pc, #52]	; (8004204 <MX_TIM2_Init+0xfc>)
 80041d0:	f003 f9f0 	bl	80075b4 <HAL_TIM_PWM_ConfigChannel>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80041da:	f000 f8a5 	bl	8004328 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80041de:	1d3b      	adds	r3, r7, #4
 80041e0:	2204      	movs	r2, #4
 80041e2:	4619      	mov	r1, r3
 80041e4:	4807      	ldr	r0, [pc, #28]	; (8004204 <MX_TIM2_Init+0xfc>)
 80041e6:	f003 f9e5 	bl	80075b4 <HAL_TIM_PWM_ConfigChannel>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 80041f0:	f000 f89a 	bl	8004328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80041f4:	4803      	ldr	r0, [pc, #12]	; (8004204 <MX_TIM2_Init+0xfc>)
 80041f6:	f000 fa05 	bl	8004604 <HAL_TIM_MspPostInit>

}
 80041fa:	bf00      	nop
 80041fc:	3738      	adds	r7, #56	; 0x38
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20002988 	.word	0x20002988

08004208 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800420c:	4b11      	ldr	r3, [pc, #68]	; (8004254 <MX_USART2_UART_Init+0x4c>)
 800420e:	4a12      	ldr	r2, [pc, #72]	; (8004258 <MX_USART2_UART_Init+0x50>)
 8004210:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004212:	4b10      	ldr	r3, [pc, #64]	; (8004254 <MX_USART2_UART_Init+0x4c>)
 8004214:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004218:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800421a:	4b0e      	ldr	r3, [pc, #56]	; (8004254 <MX_USART2_UART_Init+0x4c>)
 800421c:	2200      	movs	r2, #0
 800421e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004220:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <MX_USART2_UART_Init+0x4c>)
 8004222:	2200      	movs	r2, #0
 8004224:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8004226:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <MX_USART2_UART_Init+0x4c>)
 8004228:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800422c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 800422e:	4b09      	ldr	r3, [pc, #36]	; (8004254 <MX_USART2_UART_Init+0x4c>)
 8004230:	2208      	movs	r2, #8
 8004232:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004234:	4b07      	ldr	r3, [pc, #28]	; (8004254 <MX_USART2_UART_Init+0x4c>)
 8004236:	2200      	movs	r2, #0
 8004238:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800423a:	4b06      	ldr	r3, [pc, #24]	; (8004254 <MX_USART2_UART_Init+0x4c>)
 800423c:	2200      	movs	r2, #0
 800423e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004240:	4804      	ldr	r0, [pc, #16]	; (8004254 <MX_USART2_UART_Init+0x4c>)
 8004242:	f003 ff1f 	bl	8008084 <HAL_UART_Init>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 800424c:	f000 f86c 	bl	8004328 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004250:	bf00      	nop
 8004252:	bd80      	pop	{r7, pc}
 8004254:	200029d0 	.word	0x200029d0
 8004258:	40004400 	.word	0x40004400

0800425c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004262:	f107 030c 	add.w	r3, r7, #12
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	605a      	str	r2, [r3, #4]
 800426c:	609a      	str	r2, [r3, #8]
 800426e:	60da      	str	r2, [r3, #12]
 8004270:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004272:	2300      	movs	r3, #0
 8004274:	60bb      	str	r3, [r7, #8]
 8004276:	4b29      	ldr	r3, [pc, #164]	; (800431c <MX_GPIO_Init+0xc0>)
 8004278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427a:	4a28      	ldr	r2, [pc, #160]	; (800431c <MX_GPIO_Init+0xc0>)
 800427c:	f043 0304 	orr.w	r3, r3, #4
 8004280:	6313      	str	r3, [r2, #48]	; 0x30
 8004282:	4b26      	ldr	r3, [pc, #152]	; (800431c <MX_GPIO_Init+0xc0>)
 8004284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	60bb      	str	r3, [r7, #8]
 800428c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800428e:	2300      	movs	r3, #0
 8004290:	607b      	str	r3, [r7, #4]
 8004292:	4b22      	ldr	r3, [pc, #136]	; (800431c <MX_GPIO_Init+0xc0>)
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	4a21      	ldr	r2, [pc, #132]	; (800431c <MX_GPIO_Init+0xc0>)
 8004298:	f043 0301 	orr.w	r3, r3, #1
 800429c:	6313      	str	r3, [r2, #48]	; 0x30
 800429e:	4b1f      	ldr	r3, [pc, #124]	; (800431c <MX_GPIO_Init+0xc0>)
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	607b      	str	r3, [r7, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80042aa:	2300      	movs	r3, #0
 80042ac:	603b      	str	r3, [r7, #0]
 80042ae:	4b1b      	ldr	r3, [pc, #108]	; (800431c <MX_GPIO_Init+0xc0>)
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	4a1a      	ldr	r2, [pc, #104]	; (800431c <MX_GPIO_Init+0xc0>)
 80042b4:	f043 0302 	orr.w	r3, r3, #2
 80042b8:	6313      	str	r3, [r2, #48]	; 0x30
 80042ba:	4b18      	ldr	r3, [pc, #96]	; (800431c <MX_GPIO_Init+0xc0>)
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80042c6:	2200      	movs	r2, #0
 80042c8:	2106      	movs	r1, #6
 80042ca:	4815      	ldr	r0, [pc, #84]	; (8004320 <MX_GPIO_Init+0xc4>)
 80042cc:	f001 fc58 	bl	8005b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80042d0:	2200      	movs	r2, #0
 80042d2:	2140      	movs	r1, #64	; 0x40
 80042d4:	4813      	ldr	r0, [pc, #76]	; (8004324 <MX_GPIO_Init+0xc8>)
 80042d6:	f001 fc53 	bl	8005b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80042da:	2306      	movs	r3, #6
 80042dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042de:	2301      	movs	r3, #1
 80042e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e6:	2300      	movs	r3, #0
 80042e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042ea:	f107 030c 	add.w	r3, r7, #12
 80042ee:	4619      	mov	r1, r3
 80042f0:	480b      	ldr	r0, [pc, #44]	; (8004320 <MX_GPIO_Init+0xc4>)
 80042f2:	f001 fab1 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80042f6:	2340      	movs	r3, #64	; 0x40
 80042f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042fa:	2301      	movs	r3, #1
 80042fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004302:	2300      	movs	r3, #0
 8004304:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004306:	f107 030c 	add.w	r3, r7, #12
 800430a:	4619      	mov	r1, r3
 800430c:	4805      	ldr	r0, [pc, #20]	; (8004324 <MX_GPIO_Init+0xc8>)
 800430e:	f001 faa3 	bl	8005858 <HAL_GPIO_Init>

}
 8004312:	bf00      	nop
 8004314:	3720      	adds	r7, #32
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40023800 	.word	0x40023800
 8004320:	40020800 	.word	0x40020800
 8004324:	40020400 	.word	0x40020400

08004328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800432c:	b672      	cpsid	i
}
 800432e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004330:	e7fe      	b.n	8004330 <Error_Handler+0x8>
	...

08004334 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800433a:	2300      	movs	r3, #0
 800433c:	607b      	str	r3, [r7, #4]
 800433e:	4b10      	ldr	r3, [pc, #64]	; (8004380 <HAL_MspInit+0x4c>)
 8004340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004342:	4a0f      	ldr	r2, [pc, #60]	; (8004380 <HAL_MspInit+0x4c>)
 8004344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004348:	6453      	str	r3, [r2, #68]	; 0x44
 800434a:	4b0d      	ldr	r3, [pc, #52]	; (8004380 <HAL_MspInit+0x4c>)
 800434c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004352:	607b      	str	r3, [r7, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004356:	2300      	movs	r3, #0
 8004358:	603b      	str	r3, [r7, #0]
 800435a:	4b09      	ldr	r3, [pc, #36]	; (8004380 <HAL_MspInit+0x4c>)
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	4a08      	ldr	r2, [pc, #32]	; (8004380 <HAL_MspInit+0x4c>)
 8004360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004364:	6413      	str	r3, [r2, #64]	; 0x40
 8004366:	4b06      	ldr	r3, [pc, #24]	; (8004380 <HAL_MspInit+0x4c>)
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436e:	603b      	str	r3, [r7, #0]
 8004370:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004372:	2007      	movs	r0, #7
 8004374:	f001 fa2e 	bl	80057d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004378:	bf00      	nop
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	40023800 	.word	0x40023800

08004384 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b08c      	sub	sp, #48	; 0x30
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800438c:	f107 031c 	add.w	r3, r7, #28
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	605a      	str	r2, [r3, #4]
 8004396:	609a      	str	r2, [r3, #8]
 8004398:	60da      	str	r2, [r3, #12]
 800439a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a53      	ldr	r2, [pc, #332]	; (80044f0 <HAL_CAN_MspInit+0x16c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d146      	bne.n	8004434 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80043a6:	4b53      	ldr	r3, [pc, #332]	; (80044f4 <HAL_CAN_MspInit+0x170>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3301      	adds	r3, #1
 80043ac:	4a51      	ldr	r2, [pc, #324]	; (80044f4 <HAL_CAN_MspInit+0x170>)
 80043ae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80043b0:	4b50      	ldr	r3, [pc, #320]	; (80044f4 <HAL_CAN_MspInit+0x170>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d10d      	bne.n	80043d4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80043b8:	2300      	movs	r3, #0
 80043ba:	61bb      	str	r3, [r7, #24]
 80043bc:	4b4e      	ldr	r3, [pc, #312]	; (80044f8 <HAL_CAN_MspInit+0x174>)
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	4a4d      	ldr	r2, [pc, #308]	; (80044f8 <HAL_CAN_MspInit+0x174>)
 80043c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043c6:	6413      	str	r3, [r2, #64]	; 0x40
 80043c8:	4b4b      	ldr	r3, [pc, #300]	; (80044f8 <HAL_CAN_MspInit+0x174>)
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d0:	61bb      	str	r3, [r7, #24]
 80043d2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043d4:	2300      	movs	r3, #0
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	4b47      	ldr	r3, [pc, #284]	; (80044f8 <HAL_CAN_MspInit+0x174>)
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043dc:	4a46      	ldr	r2, [pc, #280]	; (80044f8 <HAL_CAN_MspInit+0x174>)
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	6313      	str	r3, [r2, #48]	; 0x30
 80043e4:	4b44      	ldr	r3, [pc, #272]	; (80044f8 <HAL_CAN_MspInit+0x174>)
 80043e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80043f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80043f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f6:	2302      	movs	r3, #2
 80043f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043fe:	2303      	movs	r3, #3
 8004400:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004402:	2309      	movs	r3, #9
 8004404:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004406:	f107 031c 	add.w	r3, r7, #28
 800440a:	4619      	mov	r1, r3
 800440c:	483b      	ldr	r0, [pc, #236]	; (80044fc <HAL_CAN_MspInit+0x178>)
 800440e:	f001 fa23 	bl	8005858 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8004412:	2200      	movs	r2, #0
 8004414:	2100      	movs	r1, #0
 8004416:	2014      	movs	r0, #20
 8004418:	f001 f9e7 	bl	80057ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800441c:	2014      	movs	r0, #20
 800441e:	f001 fa00 	bl	8005822 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8004422:	2200      	movs	r2, #0
 8004424:	2100      	movs	r1, #0
 8004426:	2015      	movs	r0, #21
 8004428:	f001 f9df 	bl	80057ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800442c:	2015      	movs	r0, #21
 800442e:	f001 f9f8 	bl	8005822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8004432:	e058      	b.n	80044e6 <HAL_CAN_MspInit+0x162>
  else if(hcan->Instance==CAN2)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a31      	ldr	r2, [pc, #196]	; (8004500 <HAL_CAN_MspInit+0x17c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d153      	bne.n	80044e6 <HAL_CAN_MspInit+0x162>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800443e:	2300      	movs	r3, #0
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	4b2d      	ldr	r3, [pc, #180]	; (80044f8 <HAL_CAN_MspInit+0x174>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	4a2c      	ldr	r2, [pc, #176]	; (80044f8 <HAL_CAN_MspInit+0x174>)
 8004448:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800444c:	6413      	str	r3, [r2, #64]	; 0x40
 800444e:	4b2a      	ldr	r3, [pc, #168]	; (80044f8 <HAL_CAN_MspInit+0x174>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800445a:	4b26      	ldr	r3, [pc, #152]	; (80044f4 <HAL_CAN_MspInit+0x170>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3301      	adds	r3, #1
 8004460:	4a24      	ldr	r2, [pc, #144]	; (80044f4 <HAL_CAN_MspInit+0x170>)
 8004462:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004464:	4b23      	ldr	r3, [pc, #140]	; (80044f4 <HAL_CAN_MspInit+0x170>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d10d      	bne.n	8004488 <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800446c:	2300      	movs	r3, #0
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	4b21      	ldr	r3, [pc, #132]	; (80044f8 <HAL_CAN_MspInit+0x174>)
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	4a20      	ldr	r2, [pc, #128]	; (80044f8 <HAL_CAN_MspInit+0x174>)
 8004476:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800447a:	6413      	str	r3, [r2, #64]	; 0x40
 800447c:	4b1e      	ldr	r3, [pc, #120]	; (80044f8 <HAL_CAN_MspInit+0x174>)
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004488:	2300      	movs	r3, #0
 800448a:	60bb      	str	r3, [r7, #8]
 800448c:	4b1a      	ldr	r3, [pc, #104]	; (80044f8 <HAL_CAN_MspInit+0x174>)
 800448e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004490:	4a19      	ldr	r2, [pc, #100]	; (80044f8 <HAL_CAN_MspInit+0x174>)
 8004492:	f043 0302 	orr.w	r3, r3, #2
 8004496:	6313      	str	r3, [r2, #48]	; 0x30
 8004498:	4b17      	ldr	r3, [pc, #92]	; (80044f8 <HAL_CAN_MspInit+0x174>)
 800449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	60bb      	str	r3, [r7, #8]
 80044a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80044a4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80044a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044aa:	2302      	movs	r3, #2
 80044ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044b2:	2303      	movs	r3, #3
 80044b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80044b6:	2309      	movs	r3, #9
 80044b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ba:	f107 031c 	add.w	r3, r7, #28
 80044be:	4619      	mov	r1, r3
 80044c0:	4810      	ldr	r0, [pc, #64]	; (8004504 <HAL_CAN_MspInit+0x180>)
 80044c2:	f001 f9c9 	bl	8005858 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80044c6:	2200      	movs	r2, #0
 80044c8:	2100      	movs	r1, #0
 80044ca:	2040      	movs	r0, #64	; 0x40
 80044cc:	f001 f98d 	bl	80057ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80044d0:	2040      	movs	r0, #64	; 0x40
 80044d2:	f001 f9a6 	bl	8005822 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 80044d6:	2200      	movs	r2, #0
 80044d8:	2100      	movs	r1, #0
 80044da:	2041      	movs	r0, #65	; 0x41
 80044dc:	f001 f985 	bl	80057ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80044e0:	2041      	movs	r0, #65	; 0x41
 80044e2:	f001 f99e 	bl	8005822 <HAL_NVIC_EnableIRQ>
}
 80044e6:	bf00      	nop
 80044e8:	3730      	adds	r7, #48	; 0x30
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	40006400 	.word	0x40006400
 80044f4:	20002a14 	.word	0x20002a14
 80044f8:	40023800 	.word	0x40023800
 80044fc:	40020000 	.word	0x40020000
 8004500:	40006800 	.word	0x40006800
 8004504:	40020400 	.word	0x40020400

08004508 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b08a      	sub	sp, #40	; 0x28
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004510:	f107 0314 	add.w	r3, r7, #20
 8004514:	2200      	movs	r2, #0
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	605a      	str	r2, [r3, #4]
 800451a:	609a      	str	r2, [r3, #8]
 800451c:	60da      	str	r2, [r3, #12]
 800451e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a19      	ldr	r2, [pc, #100]	; (800458c <HAL_SPI_MspInit+0x84>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d12b      	bne.n	8004582 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800452a:	2300      	movs	r3, #0
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	4b18      	ldr	r3, [pc, #96]	; (8004590 <HAL_SPI_MspInit+0x88>)
 8004530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004532:	4a17      	ldr	r2, [pc, #92]	; (8004590 <HAL_SPI_MspInit+0x88>)
 8004534:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004538:	6453      	str	r3, [r2, #68]	; 0x44
 800453a:	4b15      	ldr	r3, [pc, #84]	; (8004590 <HAL_SPI_MspInit+0x88>)
 800453c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004542:	613b      	str	r3, [r7, #16]
 8004544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004546:	2300      	movs	r3, #0
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	4b11      	ldr	r3, [pc, #68]	; (8004590 <HAL_SPI_MspInit+0x88>)
 800454c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454e:	4a10      	ldr	r2, [pc, #64]	; (8004590 <HAL_SPI_MspInit+0x88>)
 8004550:	f043 0301 	orr.w	r3, r3, #1
 8004554:	6313      	str	r3, [r2, #48]	; 0x30
 8004556:	4b0e      	ldr	r3, [pc, #56]	; (8004590 <HAL_SPI_MspInit+0x88>)
 8004558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004562:	23e0      	movs	r3, #224	; 0xe0
 8004564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004566:	2302      	movs	r3, #2
 8004568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800456a:	2300      	movs	r3, #0
 800456c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800456e:	2303      	movs	r3, #3
 8004570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004572:	2305      	movs	r3, #5
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004576:	f107 0314 	add.w	r3, r7, #20
 800457a:	4619      	mov	r1, r3
 800457c:	4805      	ldr	r0, [pc, #20]	; (8004594 <HAL_SPI_MspInit+0x8c>)
 800457e:	f001 f96b 	bl	8005858 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004582:	bf00      	nop
 8004584:	3728      	adds	r7, #40	; 0x28
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	40013000 	.word	0x40013000
 8004590:	40023800 	.word	0x40023800
 8004594:	40020000 	.word	0x40020000

08004598 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a15      	ldr	r2, [pc, #84]	; (80045fc <HAL_TIM_Base_MspInit+0x64>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d10e      	bne.n	80045c8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	4b14      	ldr	r3, [pc, #80]	; (8004600 <HAL_TIM_Base_MspInit+0x68>)
 80045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b2:	4a13      	ldr	r2, [pc, #76]	; (8004600 <HAL_TIM_Base_MspInit+0x68>)
 80045b4:	f043 0301 	orr.w	r3, r3, #1
 80045b8:	6453      	str	r3, [r2, #68]	; 0x44
 80045ba:	4b11      	ldr	r3, [pc, #68]	; (8004600 <HAL_TIM_Base_MspInit+0x68>)
 80045bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80045c6:	e012      	b.n	80045ee <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d0:	d10d      	bne.n	80045ee <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045d2:	2300      	movs	r3, #0
 80045d4:	60bb      	str	r3, [r7, #8]
 80045d6:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <HAL_TIM_Base_MspInit+0x68>)
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	4a09      	ldr	r2, [pc, #36]	; (8004600 <HAL_TIM_Base_MspInit+0x68>)
 80045dc:	f043 0301 	orr.w	r3, r3, #1
 80045e0:	6413      	str	r3, [r2, #64]	; 0x40
 80045e2:	4b07      	ldr	r3, [pc, #28]	; (8004600 <HAL_TIM_Base_MspInit+0x68>)
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	60bb      	str	r3, [r7, #8]
 80045ec:	68bb      	ldr	r3, [r7, #8]
}
 80045ee:	bf00      	nop
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40010000 	.word	0x40010000
 8004600:	40023800 	.word	0x40023800

08004604 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b08a      	sub	sp, #40	; 0x28
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800460c:	f107 0314 	add.w	r3, r7, #20
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	605a      	str	r2, [r3, #4]
 8004616:	609a      	str	r2, [r3, #8]
 8004618:	60da      	str	r2, [r3, #12]
 800461a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a24      	ldr	r2, [pc, #144]	; (80046b4 <HAL_TIM_MspPostInit+0xb0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d11f      	bne.n	8004666 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004626:	2300      	movs	r3, #0
 8004628:	613b      	str	r3, [r7, #16]
 800462a:	4b23      	ldr	r3, [pc, #140]	; (80046b8 <HAL_TIM_MspPostInit+0xb4>)
 800462c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462e:	4a22      	ldr	r2, [pc, #136]	; (80046b8 <HAL_TIM_MspPostInit+0xb4>)
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	6313      	str	r3, [r2, #48]	; 0x30
 8004636:	4b20      	ldr	r3, [pc, #128]	; (80046b8 <HAL_TIM_MspPostInit+0xb4>)
 8004638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	613b      	str	r3, [r7, #16]
 8004640:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004642:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004648:	2302      	movs	r3, #2
 800464a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800464c:	2300      	movs	r3, #0
 800464e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004650:	2300      	movs	r3, #0
 8004652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004654:	2301      	movs	r3, #1
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004658:	f107 0314 	add.w	r3, r7, #20
 800465c:	4619      	mov	r1, r3
 800465e:	4817      	ldr	r0, [pc, #92]	; (80046bc <HAL_TIM_MspPostInit+0xb8>)
 8004660:	f001 f8fa 	bl	8005858 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004664:	e022      	b.n	80046ac <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800466e:	d11d      	bne.n	80046ac <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004670:	2300      	movs	r3, #0
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	4b10      	ldr	r3, [pc, #64]	; (80046b8 <HAL_TIM_MspPostInit+0xb4>)
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	4a0f      	ldr	r2, [pc, #60]	; (80046b8 <HAL_TIM_MspPostInit+0xb4>)
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	6313      	str	r3, [r2, #48]	; 0x30
 8004680:	4b0d      	ldr	r3, [pc, #52]	; (80046b8 <HAL_TIM_MspPostInit+0xb4>)
 8004682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800468c:	2303      	movs	r3, #3
 800468e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004690:	2302      	movs	r3, #2
 8004692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004694:	2300      	movs	r3, #0
 8004696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004698:	2300      	movs	r3, #0
 800469a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800469c:	2301      	movs	r3, #1
 800469e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046a0:	f107 0314 	add.w	r3, r7, #20
 80046a4:	4619      	mov	r1, r3
 80046a6:	4805      	ldr	r0, [pc, #20]	; (80046bc <HAL_TIM_MspPostInit+0xb8>)
 80046a8:	f001 f8d6 	bl	8005858 <HAL_GPIO_Init>
}
 80046ac:	bf00      	nop
 80046ae:	3728      	adds	r7, #40	; 0x28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40010000 	.word	0x40010000
 80046b8:	40023800 	.word	0x40023800
 80046bc:	40020000 	.word	0x40020000

080046c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08a      	sub	sp, #40	; 0x28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046c8:	f107 0314 	add.w	r3, r7, #20
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	605a      	str	r2, [r3, #4]
 80046d2:	609a      	str	r2, [r3, #8]
 80046d4:	60da      	str	r2, [r3, #12]
 80046d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a19      	ldr	r2, [pc, #100]	; (8004744 <HAL_UART_MspInit+0x84>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d12b      	bne.n	800473a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80046e2:	2300      	movs	r3, #0
 80046e4:	613b      	str	r3, [r7, #16]
 80046e6:	4b18      	ldr	r3, [pc, #96]	; (8004748 <HAL_UART_MspInit+0x88>)
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	4a17      	ldr	r2, [pc, #92]	; (8004748 <HAL_UART_MspInit+0x88>)
 80046ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046f0:	6413      	str	r3, [r2, #64]	; 0x40
 80046f2:	4b15      	ldr	r3, [pc, #84]	; (8004748 <HAL_UART_MspInit+0x88>)
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fa:	613b      	str	r3, [r7, #16]
 80046fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046fe:	2300      	movs	r3, #0
 8004700:	60fb      	str	r3, [r7, #12]
 8004702:	4b11      	ldr	r3, [pc, #68]	; (8004748 <HAL_UART_MspInit+0x88>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	4a10      	ldr	r2, [pc, #64]	; (8004748 <HAL_UART_MspInit+0x88>)
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	6313      	str	r3, [r2, #48]	; 0x30
 800470e:	4b0e      	ldr	r3, [pc, #56]	; (8004748 <HAL_UART_MspInit+0x88>)
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800471a:	230c      	movs	r3, #12
 800471c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800471e:	2302      	movs	r3, #2
 8004720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004722:	2300      	movs	r3, #0
 8004724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004726:	2303      	movs	r3, #3
 8004728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800472a:	2307      	movs	r3, #7
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800472e:	f107 0314 	add.w	r3, r7, #20
 8004732:	4619      	mov	r1, r3
 8004734:	4805      	ldr	r0, [pc, #20]	; (800474c <HAL_UART_MspInit+0x8c>)
 8004736:	f001 f88f 	bl	8005858 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800473a:	bf00      	nop
 800473c:	3728      	adds	r7, #40	; 0x28
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40004400 	.word	0x40004400
 8004748:	40023800 	.word	0x40023800
 800474c:	40020000 	.word	0x40020000

08004750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004754:	e7fe      	b.n	8004754 <NMI_Handler+0x4>

08004756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004756:	b480      	push	{r7}
 8004758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800475a:	e7fe      	b.n	800475a <HardFault_Handler+0x4>

0800475c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004760:	e7fe      	b.n	8004760 <MemManage_Handler+0x4>

08004762 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004762:	b480      	push	{r7}
 8004764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004766:	e7fe      	b.n	8004766 <BusFault_Handler+0x4>

08004768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800476c:	e7fe      	b.n	800476c <UsageFault_Handler+0x4>

0800476e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800476e:	b480      	push	{r7}
 8004770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004772:	bf00      	nop
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004780:	bf00      	nop
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800478a:	b480      	push	{r7}
 800478c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800478e:	bf00      	nop
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800479c:	f000 f97e 	bl	8004a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047a0:	bf00      	nop
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80047a8:	4802      	ldr	r0, [pc, #8]	; (80047b4 <CAN1_RX0_IRQHandler+0x10>)
 80047aa:	f000 fd13 	bl	80051d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80047ae:	bf00      	nop
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	20002898 	.word	0x20002898

080047b8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80047bc:	4802      	ldr	r0, [pc, #8]	; (80047c8 <CAN1_RX1_IRQHandler+0x10>)
 80047be:	f000 fd09 	bl	80051d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80047c2:	bf00      	nop
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	20002898 	.word	0x20002898

080047cc <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80047d0:	4802      	ldr	r0, [pc, #8]	; (80047dc <CAN2_RX0_IRQHandler+0x10>)
 80047d2:	f000 fcff 	bl	80051d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80047d6:	bf00      	nop
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	200028c0 	.word	0x200028c0

080047e0 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80047e4:	4802      	ldr	r0, [pc, #8]	; (80047f0 <CAN2_RX1_IRQHandler+0x10>)
 80047e6:	f000 fcf5 	bl	80051d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80047ea:	bf00      	nop
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	200028c0 	.word	0x200028c0

080047f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
	return 1;
 80047f8:	2301      	movs	r3, #1
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <_kill>:

int _kill(int pid, int sig)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800480e:	f003 fffb 	bl	8008808 <__errno>
 8004812:	4603      	mov	r3, r0
 8004814:	2216      	movs	r2, #22
 8004816:	601a      	str	r2, [r3, #0]
	return -1;
 8004818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800481c:	4618      	mov	r0, r3
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <_exit>:

void _exit (int status)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800482c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7ff ffe7 	bl	8004804 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004836:	e7fe      	b.n	8004836 <_exit+0x12>

08004838 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	e00a      	b.n	8004860 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800484a:	f3af 8000 	nop.w
 800484e:	4601      	mov	r1, r0
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	60ba      	str	r2, [r7, #8]
 8004856:	b2ca      	uxtb	r2, r1
 8004858:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	3301      	adds	r3, #1
 800485e:	617b      	str	r3, [r7, #20]
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	429a      	cmp	r2, r3
 8004866:	dbf0      	blt.n	800484a <_read+0x12>
	}

return len;
 8004868:	687b      	ldr	r3, [r7, #4]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3718      	adds	r7, #24
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b086      	sub	sp, #24
 8004876:	af00      	add	r7, sp, #0
 8004878:	60f8      	str	r0, [r7, #12]
 800487a:	60b9      	str	r1, [r7, #8]
 800487c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800487e:	2300      	movs	r3, #0
 8004880:	617b      	str	r3, [r7, #20]
 8004882:	e009      	b.n	8004898 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	60ba      	str	r2, [r7, #8]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	4618      	mov	r0, r3
 800488e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	3301      	adds	r3, #1
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	429a      	cmp	r2, r3
 800489e:	dbf1      	blt.n	8004884 <_write+0x12>
	}
	return len;
 80048a0:	687b      	ldr	r3, [r7, #4]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <_close>:

int _close(int file)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
	return -1;
 80048b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048d2:	605a      	str	r2, [r3, #4]
	return 0;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <_isatty>:

int _isatty(int file)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
	return 1;
 80048ea:	2301      	movs	r3, #1
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
	return 0;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
	...

08004914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800491c:	4a14      	ldr	r2, [pc, #80]	; (8004970 <_sbrk+0x5c>)
 800491e:	4b15      	ldr	r3, [pc, #84]	; (8004974 <_sbrk+0x60>)
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004928:	4b13      	ldr	r3, [pc, #76]	; (8004978 <_sbrk+0x64>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d102      	bne.n	8004936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004930:	4b11      	ldr	r3, [pc, #68]	; (8004978 <_sbrk+0x64>)
 8004932:	4a12      	ldr	r2, [pc, #72]	; (800497c <_sbrk+0x68>)
 8004934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004936:	4b10      	ldr	r3, [pc, #64]	; (8004978 <_sbrk+0x64>)
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4413      	add	r3, r2
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	429a      	cmp	r2, r3
 8004942:	d207      	bcs.n	8004954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004944:	f003 ff60 	bl	8008808 <__errno>
 8004948:	4603      	mov	r3, r0
 800494a:	220c      	movs	r2, #12
 800494c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800494e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004952:	e009      	b.n	8004968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004954:	4b08      	ldr	r3, [pc, #32]	; (8004978 <_sbrk+0x64>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800495a:	4b07      	ldr	r3, [pc, #28]	; (8004978 <_sbrk+0x64>)
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4413      	add	r3, r2
 8004962:	4a05      	ldr	r2, [pc, #20]	; (8004978 <_sbrk+0x64>)
 8004964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004966:	68fb      	ldr	r3, [r7, #12]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	20020000 	.word	0x20020000
 8004974:	00000400 	.word	0x00000400
 8004978:	20002a18 	.word	0x20002a18
 800497c:	20002a30 	.word	0x20002a30

08004980 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004984:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <SystemInit+0x20>)
 8004986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498a:	4a05      	ldr	r2, [pc, #20]	; (80049a0 <SystemInit+0x20>)
 800498c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	e000ed00 	.word	0xe000ed00

080049a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80049a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80049a8:	480d      	ldr	r0, [pc, #52]	; (80049e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80049aa:	490e      	ldr	r1, [pc, #56]	; (80049e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80049ac:	4a0e      	ldr	r2, [pc, #56]	; (80049e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80049ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049b0:	e002      	b.n	80049b8 <LoopCopyDataInit>

080049b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049b6:	3304      	adds	r3, #4

080049b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049bc:	d3f9      	bcc.n	80049b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049be:	4a0b      	ldr	r2, [pc, #44]	; (80049ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80049c0:	4c0b      	ldr	r4, [pc, #44]	; (80049f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80049c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049c4:	e001      	b.n	80049ca <LoopFillZerobss>

080049c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049c8:	3204      	adds	r2, #4

080049ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049cc:	d3fb      	bcc.n	80049c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80049ce:	f7ff ffd7 	bl	8004980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80049d2:	f003 ff1f 	bl	8008814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049d6:	f7ff f999 	bl	8003d0c <main>
  bx  lr    
 80049da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80049dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80049e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049e4:	200025b4 	.word	0x200025b4
  ldr r2, =_sidata
 80049e8:	0800bd2c 	.word	0x0800bd2c
  ldr r2, =_sbss
 80049ec:	200025b4 	.word	0x200025b4
  ldr r4, =_ebss
 80049f0:	20002a30 	.word	0x20002a30

080049f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049f4:	e7fe      	b.n	80049f4 <ADC_IRQHandler>
	...

080049f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80049fc:	4b0e      	ldr	r3, [pc, #56]	; (8004a38 <HAL_Init+0x40>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a0d      	ldr	r2, [pc, #52]	; (8004a38 <HAL_Init+0x40>)
 8004a02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a08:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <HAL_Init+0x40>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a0a      	ldr	r2, [pc, #40]	; (8004a38 <HAL_Init+0x40>)
 8004a0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a14:	4b08      	ldr	r3, [pc, #32]	; (8004a38 <HAL_Init+0x40>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a07      	ldr	r2, [pc, #28]	; (8004a38 <HAL_Init+0x40>)
 8004a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a20:	2003      	movs	r0, #3
 8004a22:	f000 fed7 	bl	80057d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a26:	2000      	movs	r0, #0
 8004a28:	f000 f808 	bl	8004a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a2c:	f7ff fc82 	bl	8004334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	40023c00 	.word	0x40023c00

08004a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a44:	4b12      	ldr	r3, [pc, #72]	; (8004a90 <HAL_InitTick+0x54>)
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	4b12      	ldr	r3, [pc, #72]	; (8004a94 <HAL_InitTick+0x58>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 feef 	bl	800583e <HAL_SYSTICK_Config>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e00e      	b.n	8004a88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b0f      	cmp	r3, #15
 8004a6e:	d80a      	bhi.n	8004a86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a70:	2200      	movs	r2, #0
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a78:	f000 feb7 	bl	80057ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a7c:	4a06      	ldr	r2, [pc, #24]	; (8004a98 <HAL_InitTick+0x5c>)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
 8004a84:	e000      	b.n	8004a88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	200023d8 	.word	0x200023d8
 8004a94:	200023e0 	.word	0x200023e0
 8004a98:	200023dc 	.word	0x200023dc

08004a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004aa0:	4b06      	ldr	r3, [pc, #24]	; (8004abc <HAL_IncTick+0x20>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <HAL_IncTick+0x24>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4413      	add	r3, r2
 8004aac:	4a04      	ldr	r2, [pc, #16]	; (8004ac0 <HAL_IncTick+0x24>)
 8004aae:	6013      	str	r3, [r2, #0]
}
 8004ab0:	bf00      	nop
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	200023e0 	.word	0x200023e0
 8004ac0:	20002a1c 	.word	0x20002a1c

08004ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8004ac8:	4b03      	ldr	r3, [pc, #12]	; (8004ad8 <HAL_GetTick+0x14>)
 8004aca:	681b      	ldr	r3, [r3, #0]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	20002a1c 	.word	0x20002a1c

08004adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ae4:	f7ff ffee 	bl	8004ac4 <HAL_GetTick>
 8004ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004af4:	d005      	beq.n	8004b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004af6:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <HAL_Delay+0x44>)
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4413      	add	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b02:	bf00      	nop
 8004b04:	f7ff ffde 	bl	8004ac4 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d8f7      	bhi.n	8004b04 <HAL_Delay+0x28>
  {
  }
}
 8004b14:	bf00      	nop
 8004b16:	bf00      	nop
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	200023e0 	.word	0x200023e0

08004b24 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e0ed      	b.n	8004d12 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d102      	bne.n	8004b48 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7ff fc1e 	bl	8004384 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0201 	orr.w	r2, r2, #1
 8004b56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b58:	f7ff ffb4 	bl	8004ac4 <HAL_GetTick>
 8004b5c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004b5e:	e012      	b.n	8004b86 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b60:	f7ff ffb0 	bl	8004ac4 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b0a      	cmp	r3, #10
 8004b6c:	d90b      	bls.n	8004b86 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2205      	movs	r2, #5
 8004b7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e0c5      	b.n	8004d12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0e5      	beq.n	8004b60 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0202 	bic.w	r2, r2, #2
 8004ba2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ba4:	f7ff ff8e 	bl	8004ac4 <HAL_GetTick>
 8004ba8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004baa:	e012      	b.n	8004bd2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004bac:	f7ff ff8a 	bl	8004ac4 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b0a      	cmp	r3, #10
 8004bb8:	d90b      	bls.n	8004bd2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2205      	movs	r2, #5
 8004bca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e09f      	b.n	8004d12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1e5      	bne.n	8004bac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	7e1b      	ldrb	r3, [r3, #24]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d108      	bne.n	8004bfa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	e007      	b.n	8004c0a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	7e5b      	ldrb	r3, [r3, #25]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d108      	bne.n	8004c24 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	e007      	b.n	8004c34 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c32:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	7e9b      	ldrb	r3, [r3, #26]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d108      	bne.n	8004c4e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0220 	orr.w	r2, r2, #32
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	e007      	b.n	8004c5e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 0220 	bic.w	r2, r2, #32
 8004c5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	7edb      	ldrb	r3, [r3, #27]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d108      	bne.n	8004c78 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0210 	bic.w	r2, r2, #16
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	e007      	b.n	8004c88 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f042 0210 	orr.w	r2, r2, #16
 8004c86:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	7f1b      	ldrb	r3, [r3, #28]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d108      	bne.n	8004ca2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0208 	orr.w	r2, r2, #8
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	e007      	b.n	8004cb2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0208 	bic.w	r2, r2, #8
 8004cb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	7f5b      	ldrb	r3, [r3, #29]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d108      	bne.n	8004ccc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0204 	orr.w	r2, r2, #4
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	e007      	b.n	8004cdc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0204 	bic.w	r2, r2, #4
 8004cda:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	ea42 0103 	orr.w	r1, r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	1e5a      	subs	r2, r3, #1
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d32:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004d34:	7cfb      	ldrb	r3, [r7, #19]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d003      	beq.n	8004d42 <HAL_CAN_ConfigFilter+0x26>
 8004d3a:	7cfb      	ldrb	r3, [r7, #19]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	f040 80be 	bne.w	8004ebe <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004d42:	4b65      	ldr	r3, [pc, #404]	; (8004ed8 <HAL_CAN_ConfigFilter+0x1bc>)
 8004d44:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d4c:	f043 0201 	orr.w	r2, r3, #1
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d5c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	021b      	lsls	r3, r3, #8
 8004d72:	431a      	orrs	r2, r3
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	f003 031f 	and.w	r3, r3, #31
 8004d82:	2201      	movs	r2, #1
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	43db      	mvns	r3, r3
 8004d94:	401a      	ands	r2, r3
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d123      	bne.n	8004dec <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	43db      	mvns	r3, r3
 8004dae:	401a      	ands	r2, r3
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004dc6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	3248      	adds	r2, #72	; 0x48
 8004dcc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004de0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004de2:	6979      	ldr	r1, [r7, #20]
 8004de4:	3348      	adds	r3, #72	; 0x48
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	440b      	add	r3, r1
 8004dea:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d122      	bne.n	8004e3a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e14:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	3248      	adds	r2, #72	; 0x48
 8004e1a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e2e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e30:	6979      	ldr	r1, [r7, #20]
 8004e32:	3348      	adds	r3, #72	; 0x48
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	440b      	add	r3, r1
 8004e38:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d109      	bne.n	8004e56 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	43db      	mvns	r3, r3
 8004e4c:	401a      	ands	r2, r3
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004e54:	e007      	b.n	8004e66 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	43db      	mvns	r3, r3
 8004e78:	401a      	ands	r2, r3
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004e80:	e007      	b.n	8004e92 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d107      	bne.n	8004eaa <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004eb0:	f023 0201 	bic.w	r2, r3, #1
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	e006      	b.n	8004ecc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
  }
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	371c      	adds	r7, #28
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	40006400 	.word	0x40006400

08004edc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d12e      	bne.n	8004f4e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0201 	bic.w	r2, r2, #1
 8004f06:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f08:	f7ff fddc 	bl	8004ac4 <HAL_GetTick>
 8004f0c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004f0e:	e012      	b.n	8004f36 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f10:	f7ff fdd8 	bl	8004ac4 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b0a      	cmp	r3, #10
 8004f1c:	d90b      	bls.n	8004f36 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2205      	movs	r2, #5
 8004f2e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e012      	b.n	8004f5c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1e5      	bne.n	8004f10 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	e006      	b.n	8004f5c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
  }
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f78:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f7a:	7dfb      	ldrb	r3, [r7, #23]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d003      	beq.n	8004f88 <HAL_CAN_GetRxMessage+0x24>
 8004f80:	7dfb      	ldrb	r3, [r7, #23]
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	f040 80f3 	bne.w	800516e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10e      	bne.n	8004fac <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f003 0303 	and.w	r3, r3, #3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d116      	bne.n	8004fca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e0e7      	b.n	800517c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d107      	bne.n	8004fca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e0d8      	b.n	800517c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	331b      	adds	r3, #27
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	4413      	add	r3, r2
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0204 	and.w	r2, r3, #4
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10c      	bne.n	8005002 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	331b      	adds	r3, #27
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	4413      	add	r3, r2
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	0d5b      	lsrs	r3, r3, #21
 8004ff8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	e00b      	b.n	800501a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	331b      	adds	r3, #27
 800500a:	011b      	lsls	r3, r3, #4
 800500c:	4413      	add	r3, r2
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	08db      	lsrs	r3, r3, #3
 8005012:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	331b      	adds	r3, #27
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	4413      	add	r3, r2
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0202 	and.w	r2, r3, #2
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	331b      	adds	r3, #27
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	4413      	add	r3, r2
 800503c:	3304      	adds	r3, #4
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 020f 	and.w	r2, r3, #15
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	331b      	adds	r3, #27
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	4413      	add	r3, r2
 8005054:	3304      	adds	r3, #4
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	0a1b      	lsrs	r3, r3, #8
 800505a:	b2da      	uxtb	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	331b      	adds	r3, #27
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	4413      	add	r3, r2
 800506c:	3304      	adds	r3, #4
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	0c1b      	lsrs	r3, r3, #16
 8005072:	b29a      	uxth	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	4413      	add	r3, r2
 8005082:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	b2da      	uxtb	r2, r3
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	011b      	lsls	r3, r3, #4
 8005096:	4413      	add	r3, r2
 8005098:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	0a1a      	lsrs	r2, r3, #8
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	3301      	adds	r3, #1
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	0c1a      	lsrs	r2, r3, #16
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	3302      	adds	r3, #2
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	0e1a      	lsrs	r2, r3, #24
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	3303      	adds	r3, #3
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	3304      	adds	r3, #4
 80050f0:	b2d2      	uxtb	r2, r2
 80050f2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	011b      	lsls	r3, r3, #4
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	0a1a      	lsrs	r2, r3, #8
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	3305      	adds	r3, #5
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	4413      	add	r3, r2
 8005118:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	0c1a      	lsrs	r2, r3, #16
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	3306      	adds	r3, #6
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	4413      	add	r3, r2
 8005132:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	0e1a      	lsrs	r2, r3, #24
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	3307      	adds	r3, #7
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d108      	bne.n	800515a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0220 	orr.w	r2, r2, #32
 8005156:	60da      	str	r2, [r3, #12]
 8005158:	e007      	b.n	800516a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	691a      	ldr	r2, [r3, #16]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 0220 	orr.w	r2, r2, #32
 8005168:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	e006      	b.n	800517c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
  }
}
 800517c:	4618      	mov	r0, r3
 800517e:	371c      	adds	r7, #28
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005198:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800519a:	7bfb      	ldrb	r3, [r7, #15]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d002      	beq.n	80051a6 <HAL_CAN_ActivateNotification+0x1e>
 80051a0:	7bfb      	ldrb	r3, [r7, #15]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d109      	bne.n	80051ba <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6959      	ldr	r1, [r3, #20]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	e006      	b.n	80051c8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
  }
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08a      	sub	sp, #40	; 0x28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80051dc:	2300      	movs	r3, #0
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d07c      	beq.n	8005314 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	d023      	beq.n	800526c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2201      	movs	r2, #1
 800522a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f983 	bl	8005542 <HAL_CAN_TxMailbox0CompleteCallback>
 800523c:	e016      	b.n	800526c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d004      	beq.n	8005252 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800524e:	627b      	str	r3, [r7, #36]	; 0x24
 8005250:	e00c      	b.n	800526c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b00      	cmp	r3, #0
 800525a:	d004      	beq.n	8005266 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005262:	627b      	str	r3, [r7, #36]	; 0x24
 8005264:	e002      	b.n	800526c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f989 	bl	800557e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005272:	2b00      	cmp	r3, #0
 8005274:	d024      	beq.n	80052c0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800527e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f963 	bl	8005556 <HAL_CAN_TxMailbox1CompleteCallback>
 8005290:	e016      	b.n	80052c0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005298:	2b00      	cmp	r3, #0
 800529a:	d004      	beq.n	80052a6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80052a2:	627b      	str	r3, [r7, #36]	; 0x24
 80052a4:	e00c      	b.n	80052c0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d004      	beq.n	80052ba <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052b6:	627b      	str	r3, [r7, #36]	; 0x24
 80052b8:	e002      	b.n	80052c0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f969 	bl	8005592 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d024      	beq.n	8005314 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80052d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f943 	bl	800556a <HAL_CAN_TxMailbox2CompleteCallback>
 80052e4:	e016      	b.n	8005314 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d004      	beq.n	80052fa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052f6:	627b      	str	r3, [r7, #36]	; 0x24
 80052f8:	e00c      	b.n	8005314 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d004      	beq.n	800530e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800530a:	627b      	str	r3, [r7, #36]	; 0x24
 800530c:	e002      	b.n	8005314 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f949 	bl	80055a6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	f003 0308 	and.w	r3, r3, #8
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00c      	beq.n	8005338 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f003 0310 	and.w	r3, r3, #16
 8005324:	2b00      	cmp	r3, #0
 8005326:	d007      	beq.n	8005338 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800532e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2210      	movs	r2, #16
 8005336:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005338:	6a3b      	ldr	r3, [r7, #32]
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00b      	beq.n	800535a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f003 0308 	and.w	r3, r3, #8
 8005348:	2b00      	cmp	r3, #0
 800534a:	d006      	beq.n	800535a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2208      	movs	r2, #8
 8005352:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f930 	bl	80055ba <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800535a:	6a3b      	ldr	r3, [r7, #32]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d009      	beq.n	8005378 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f003 0303 	and.w	r3, r3, #3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7fb feae 	bl	80010d4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00c      	beq.n	800539c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f003 0310 	and.w	r3, r3, #16
 8005388:	2b00      	cmp	r3, #0
 800538a:	d007      	beq.n	800539c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005392:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2210      	movs	r2, #16
 800539a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	f003 0320 	and.w	r3, r3, #32
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00b      	beq.n	80053be <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f003 0308 	and.w	r3, r3, #8
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d006      	beq.n	80053be <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2208      	movs	r2, #8
 80053b6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f912 	bl	80055e2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	f003 0310 	and.w	r3, r3, #16
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d009      	beq.n	80053dc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f8f9 	bl	80055ce <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00b      	beq.n	80053fe <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	f003 0310 	and.w	r3, r3, #16
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d006      	beq.n	80053fe <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2210      	movs	r2, #16
 80053f6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f8fc 	bl	80055f6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00b      	beq.n	8005420 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	f003 0308 	and.w	r3, r3, #8
 800540e:	2b00      	cmp	r3, #0
 8005410:	d006      	beq.n	8005420 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2208      	movs	r2, #8
 8005418:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f8f5 	bl	800560a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d07b      	beq.n	8005522 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b00      	cmp	r3, #0
 8005432:	d072      	beq.n	800551a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543a:	2b00      	cmp	r3, #0
 800543c:	d008      	beq.n	8005450 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	f043 0301 	orr.w	r3, r3, #1
 800544e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005456:	2b00      	cmp	r3, #0
 8005458:	d008      	beq.n	800546c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	f043 0302 	orr.w	r3, r3, #2
 800546a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005472:	2b00      	cmp	r3, #0
 8005474:	d008      	beq.n	8005488 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	f043 0304 	orr.w	r3, r3, #4
 8005486:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800548e:	2b00      	cmp	r3, #0
 8005490:	d043      	beq.n	800551a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005498:	2b00      	cmp	r3, #0
 800549a:	d03e      	beq.n	800551a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054a2:	2b60      	cmp	r3, #96	; 0x60
 80054a4:	d02b      	beq.n	80054fe <HAL_CAN_IRQHandler+0x32a>
 80054a6:	2b60      	cmp	r3, #96	; 0x60
 80054a8:	d82e      	bhi.n	8005508 <HAL_CAN_IRQHandler+0x334>
 80054aa:	2b50      	cmp	r3, #80	; 0x50
 80054ac:	d022      	beq.n	80054f4 <HAL_CAN_IRQHandler+0x320>
 80054ae:	2b50      	cmp	r3, #80	; 0x50
 80054b0:	d82a      	bhi.n	8005508 <HAL_CAN_IRQHandler+0x334>
 80054b2:	2b40      	cmp	r3, #64	; 0x40
 80054b4:	d019      	beq.n	80054ea <HAL_CAN_IRQHandler+0x316>
 80054b6:	2b40      	cmp	r3, #64	; 0x40
 80054b8:	d826      	bhi.n	8005508 <HAL_CAN_IRQHandler+0x334>
 80054ba:	2b30      	cmp	r3, #48	; 0x30
 80054bc:	d010      	beq.n	80054e0 <HAL_CAN_IRQHandler+0x30c>
 80054be:	2b30      	cmp	r3, #48	; 0x30
 80054c0:	d822      	bhi.n	8005508 <HAL_CAN_IRQHandler+0x334>
 80054c2:	2b10      	cmp	r3, #16
 80054c4:	d002      	beq.n	80054cc <HAL_CAN_IRQHandler+0x2f8>
 80054c6:	2b20      	cmp	r3, #32
 80054c8:	d005      	beq.n	80054d6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80054ca:	e01d      	b.n	8005508 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	f043 0308 	orr.w	r3, r3, #8
 80054d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054d4:	e019      	b.n	800550a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	f043 0310 	orr.w	r3, r3, #16
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054de:	e014      	b.n	800550a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	f043 0320 	orr.w	r3, r3, #32
 80054e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054e8:	e00f      	b.n	800550a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054f2:	e00a      	b.n	800550a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054fc:	e005      	b.n	800550a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005504:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005506:	e000      	b.n	800550a <HAL_CAN_IRQHandler+0x336>
            break;
 8005508:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	699a      	ldr	r2, [r3, #24]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005518:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2204      	movs	r2, #4
 8005520:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	2b00      	cmp	r3, #0
 8005526:	d008      	beq.n	800553a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f872 	bl	800561e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800553a:	bf00      	nop
 800553c:	3728      	adds	r7, #40	; 0x28
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800554a:	bf00      	nop
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800555e:	bf00      	nop
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b083      	sub	sp, #12
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b083      	sub	sp, #12
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80055fe:	bf00      	nop
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005626:	bf00      	nop
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
	...

08005634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f003 0307 	and.w	r3, r3, #7
 8005642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005644:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <__NVIC_SetPriorityGrouping+0x44>)
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005650:	4013      	ands	r3, r2
 8005652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800565c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005666:	4a04      	ldr	r2, [pc, #16]	; (8005678 <__NVIC_SetPriorityGrouping+0x44>)
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	60d3      	str	r3, [r2, #12]
}
 800566c:	bf00      	nop
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	e000ed00 	.word	0xe000ed00

0800567c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800567c:	b480      	push	{r7}
 800567e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005680:	4b04      	ldr	r3, [pc, #16]	; (8005694 <__NVIC_GetPriorityGrouping+0x18>)
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	0a1b      	lsrs	r3, r3, #8
 8005686:	f003 0307 	and.w	r3, r3, #7
}
 800568a:	4618      	mov	r0, r3
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr
 8005694:	e000ed00 	.word	0xe000ed00

08005698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	4603      	mov	r3, r0
 80056a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	db0b      	blt.n	80056c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056aa:	79fb      	ldrb	r3, [r7, #7]
 80056ac:	f003 021f 	and.w	r2, r3, #31
 80056b0:	4907      	ldr	r1, [pc, #28]	; (80056d0 <__NVIC_EnableIRQ+0x38>)
 80056b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b6:	095b      	lsrs	r3, r3, #5
 80056b8:	2001      	movs	r0, #1
 80056ba:	fa00 f202 	lsl.w	r2, r0, r2
 80056be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80056c2:	bf00      	nop
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	e000e100 	.word	0xe000e100

080056d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	4603      	mov	r3, r0
 80056dc:	6039      	str	r1, [r7, #0]
 80056de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	db0a      	blt.n	80056fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	490c      	ldr	r1, [pc, #48]	; (8005720 <__NVIC_SetPriority+0x4c>)
 80056ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056f2:	0112      	lsls	r2, r2, #4
 80056f4:	b2d2      	uxtb	r2, r2
 80056f6:	440b      	add	r3, r1
 80056f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056fc:	e00a      	b.n	8005714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	b2da      	uxtb	r2, r3
 8005702:	4908      	ldr	r1, [pc, #32]	; (8005724 <__NVIC_SetPriority+0x50>)
 8005704:	79fb      	ldrb	r3, [r7, #7]
 8005706:	f003 030f 	and.w	r3, r3, #15
 800570a:	3b04      	subs	r3, #4
 800570c:	0112      	lsls	r2, r2, #4
 800570e:	b2d2      	uxtb	r2, r2
 8005710:	440b      	add	r3, r1
 8005712:	761a      	strb	r2, [r3, #24]
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	e000e100 	.word	0xe000e100
 8005724:	e000ed00 	.word	0xe000ed00

08005728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005728:	b480      	push	{r7}
 800572a:	b089      	sub	sp, #36	; 0x24
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f003 0307 	and.w	r3, r3, #7
 800573a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	f1c3 0307 	rsb	r3, r3, #7
 8005742:	2b04      	cmp	r3, #4
 8005744:	bf28      	it	cs
 8005746:	2304      	movcs	r3, #4
 8005748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	3304      	adds	r3, #4
 800574e:	2b06      	cmp	r3, #6
 8005750:	d902      	bls.n	8005758 <NVIC_EncodePriority+0x30>
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	3b03      	subs	r3, #3
 8005756:	e000      	b.n	800575a <NVIC_EncodePriority+0x32>
 8005758:	2300      	movs	r3, #0
 800575a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800575c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	fa02 f303 	lsl.w	r3, r2, r3
 8005766:	43da      	mvns	r2, r3
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	401a      	ands	r2, r3
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005770:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	fa01 f303 	lsl.w	r3, r1, r3
 800577a:	43d9      	mvns	r1, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005780:	4313      	orrs	r3, r2
         );
}
 8005782:	4618      	mov	r0, r3
 8005784:	3724      	adds	r7, #36	; 0x24
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
	...

08005790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3b01      	subs	r3, #1
 800579c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057a0:	d301      	bcc.n	80057a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057a2:	2301      	movs	r3, #1
 80057a4:	e00f      	b.n	80057c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057a6:	4a0a      	ldr	r2, [pc, #40]	; (80057d0 <SysTick_Config+0x40>)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3b01      	subs	r3, #1
 80057ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057ae:	210f      	movs	r1, #15
 80057b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057b4:	f7ff ff8e 	bl	80056d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057b8:	4b05      	ldr	r3, [pc, #20]	; (80057d0 <SysTick_Config+0x40>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057be:	4b04      	ldr	r3, [pc, #16]	; (80057d0 <SysTick_Config+0x40>)
 80057c0:	2207      	movs	r2, #7
 80057c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	e000e010 	.word	0xe000e010

080057d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7ff ff29 	bl	8005634 <__NVIC_SetPriorityGrouping>
}
 80057e2:	bf00      	nop
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b086      	sub	sp, #24
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	4603      	mov	r3, r0
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	607a      	str	r2, [r7, #4]
 80057f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057fc:	f7ff ff3e 	bl	800567c <__NVIC_GetPriorityGrouping>
 8005800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	6978      	ldr	r0, [r7, #20]
 8005808:	f7ff ff8e 	bl	8005728 <NVIC_EncodePriority>
 800580c:	4602      	mov	r2, r0
 800580e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005812:	4611      	mov	r1, r2
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff ff5d 	bl	80056d4 <__NVIC_SetPriority>
}
 800581a:	bf00      	nop
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b082      	sub	sp, #8
 8005826:	af00      	add	r7, sp, #0
 8005828:	4603      	mov	r3, r0
 800582a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800582c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005830:	4618      	mov	r0, r3
 8005832:	f7ff ff31 	bl	8005698 <__NVIC_EnableIRQ>
}
 8005836:	bf00      	nop
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b082      	sub	sp, #8
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7ff ffa2 	bl	8005790 <SysTick_Config>
 800584c:	4603      	mov	r3, r0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
	...

08005858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005858:	b480      	push	{r7}
 800585a:	b089      	sub	sp, #36	; 0x24
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005862:	2300      	movs	r3, #0
 8005864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005866:	2300      	movs	r3, #0
 8005868:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800586a:	2300      	movs	r3, #0
 800586c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800586e:	2300      	movs	r3, #0
 8005870:	61fb      	str	r3, [r7, #28]
 8005872:	e165      	b.n	8005b40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005874:	2201      	movs	r2, #1
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	fa02 f303 	lsl.w	r3, r2, r3
 800587c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	4013      	ands	r3, r2
 8005886:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	429a      	cmp	r2, r3
 800588e:	f040 8154 	bne.w	8005b3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	2b01      	cmp	r3, #1
 800589c:	d005      	beq.n	80058aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d130      	bne.n	800590c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	2203      	movs	r2, #3
 80058b6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ba:	43db      	mvns	r3, r3
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	4013      	ands	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	fa02 f303 	lsl.w	r3, r2, r3
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058e0:	2201      	movs	r2, #1
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	fa02 f303 	lsl.w	r3, r2, r3
 80058e8:	43db      	mvns	r3, r3
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	4013      	ands	r3, r2
 80058ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	091b      	lsrs	r3, r3, #4
 80058f6:	f003 0201 	and.w	r2, r3, #1
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	4313      	orrs	r3, r2
 8005904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f003 0303 	and.w	r3, r3, #3
 8005914:	2b03      	cmp	r3, #3
 8005916:	d017      	beq.n	8005948 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	005b      	lsls	r3, r3, #1
 8005922:	2203      	movs	r2, #3
 8005924:	fa02 f303 	lsl.w	r3, r2, r3
 8005928:	43db      	mvns	r3, r3
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	4013      	ands	r3, r2
 800592e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	fa02 f303 	lsl.w	r3, r2, r3
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	4313      	orrs	r3, r2
 8005940:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d123      	bne.n	800599c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	08da      	lsrs	r2, r3, #3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3208      	adds	r2, #8
 800595c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005960:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	220f      	movs	r2, #15
 800596c:	fa02 f303 	lsl.w	r3, r2, r3
 8005970:	43db      	mvns	r3, r3
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	4013      	ands	r3, r2
 8005976:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	691a      	ldr	r2, [r3, #16]
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	fa02 f303 	lsl.w	r3, r2, r3
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	4313      	orrs	r3, r2
 800598c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	08da      	lsrs	r2, r3, #3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	3208      	adds	r2, #8
 8005996:	69b9      	ldr	r1, [r7, #24]
 8005998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	2203      	movs	r2, #3
 80059a8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ac:	43db      	mvns	r3, r3
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	4013      	ands	r3, r2
 80059b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f003 0203 	and.w	r2, r3, #3
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	fa02 f303 	lsl.w	r3, r2, r3
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 80ae 	beq.w	8005b3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059de:	2300      	movs	r3, #0
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	4b5d      	ldr	r3, [pc, #372]	; (8005b58 <HAL_GPIO_Init+0x300>)
 80059e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e6:	4a5c      	ldr	r2, [pc, #368]	; (8005b58 <HAL_GPIO_Init+0x300>)
 80059e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059ec:	6453      	str	r3, [r2, #68]	; 0x44
 80059ee:	4b5a      	ldr	r3, [pc, #360]	; (8005b58 <HAL_GPIO_Init+0x300>)
 80059f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059fa:	4a58      	ldr	r2, [pc, #352]	; (8005b5c <HAL_GPIO_Init+0x304>)
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	089b      	lsrs	r3, r3, #2
 8005a00:	3302      	adds	r3, #2
 8005a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	220f      	movs	r2, #15
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	43db      	mvns	r3, r3
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a4f      	ldr	r2, [pc, #316]	; (8005b60 <HAL_GPIO_Init+0x308>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d025      	beq.n	8005a72 <HAL_GPIO_Init+0x21a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a4e      	ldr	r2, [pc, #312]	; (8005b64 <HAL_GPIO_Init+0x30c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d01f      	beq.n	8005a6e <HAL_GPIO_Init+0x216>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a4d      	ldr	r2, [pc, #308]	; (8005b68 <HAL_GPIO_Init+0x310>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d019      	beq.n	8005a6a <HAL_GPIO_Init+0x212>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a4c      	ldr	r2, [pc, #304]	; (8005b6c <HAL_GPIO_Init+0x314>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d013      	beq.n	8005a66 <HAL_GPIO_Init+0x20e>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a4b      	ldr	r2, [pc, #300]	; (8005b70 <HAL_GPIO_Init+0x318>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00d      	beq.n	8005a62 <HAL_GPIO_Init+0x20a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a4a      	ldr	r2, [pc, #296]	; (8005b74 <HAL_GPIO_Init+0x31c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d007      	beq.n	8005a5e <HAL_GPIO_Init+0x206>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a49      	ldr	r2, [pc, #292]	; (8005b78 <HAL_GPIO_Init+0x320>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d101      	bne.n	8005a5a <HAL_GPIO_Init+0x202>
 8005a56:	2306      	movs	r3, #6
 8005a58:	e00c      	b.n	8005a74 <HAL_GPIO_Init+0x21c>
 8005a5a:	2307      	movs	r3, #7
 8005a5c:	e00a      	b.n	8005a74 <HAL_GPIO_Init+0x21c>
 8005a5e:	2305      	movs	r3, #5
 8005a60:	e008      	b.n	8005a74 <HAL_GPIO_Init+0x21c>
 8005a62:	2304      	movs	r3, #4
 8005a64:	e006      	b.n	8005a74 <HAL_GPIO_Init+0x21c>
 8005a66:	2303      	movs	r3, #3
 8005a68:	e004      	b.n	8005a74 <HAL_GPIO_Init+0x21c>
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	e002      	b.n	8005a74 <HAL_GPIO_Init+0x21c>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e000      	b.n	8005a74 <HAL_GPIO_Init+0x21c>
 8005a72:	2300      	movs	r3, #0
 8005a74:	69fa      	ldr	r2, [r7, #28]
 8005a76:	f002 0203 	and.w	r2, r2, #3
 8005a7a:	0092      	lsls	r2, r2, #2
 8005a7c:	4093      	lsls	r3, r2
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a84:	4935      	ldr	r1, [pc, #212]	; (8005b5c <HAL_GPIO_Init+0x304>)
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	089b      	lsrs	r3, r3, #2
 8005a8a:	3302      	adds	r3, #2
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a92:	4b3a      	ldr	r3, [pc, #232]	; (8005b7c <HAL_GPIO_Init+0x324>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	43db      	mvns	r3, r3
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ab6:	4a31      	ldr	r2, [pc, #196]	; (8005b7c <HAL_GPIO_Init+0x324>)
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005abc:	4b2f      	ldr	r3, [pc, #188]	; (8005b7c <HAL_GPIO_Init+0x324>)
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	43db      	mvns	r3, r3
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	4013      	ands	r3, r2
 8005aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ae0:	4a26      	ldr	r2, [pc, #152]	; (8005b7c <HAL_GPIO_Init+0x324>)
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005ae6:	4b25      	ldr	r3, [pc, #148]	; (8005b7c <HAL_GPIO_Init+0x324>)
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	43db      	mvns	r3, r3
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	4013      	ands	r3, r2
 8005af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b0a:	4a1c      	ldr	r2, [pc, #112]	; (8005b7c <HAL_GPIO_Init+0x324>)
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b10:	4b1a      	ldr	r3, [pc, #104]	; (8005b7c <HAL_GPIO_Init+0x324>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	43db      	mvns	r3, r3
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b34:	4a11      	ldr	r2, [pc, #68]	; (8005b7c <HAL_GPIO_Init+0x324>)
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	61fb      	str	r3, [r7, #28]
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	2b0f      	cmp	r3, #15
 8005b44:	f67f ae96 	bls.w	8005874 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b48:	bf00      	nop
 8005b4a:	bf00      	nop
 8005b4c:	3724      	adds	r7, #36	; 0x24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	40023800 	.word	0x40023800
 8005b5c:	40013800 	.word	0x40013800
 8005b60:	40020000 	.word	0x40020000
 8005b64:	40020400 	.word	0x40020400
 8005b68:	40020800 	.word	0x40020800
 8005b6c:	40020c00 	.word	0x40020c00
 8005b70:	40021000 	.word	0x40021000
 8005b74:	40021400 	.word	0x40021400
 8005b78:	40021800 	.word	0x40021800
 8005b7c:	40013c00 	.word	0x40013c00

08005b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	807b      	strh	r3, [r7, #2]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b90:	787b      	ldrb	r3, [r7, #1]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b96:	887a      	ldrh	r2, [r7, #2]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b9c:	e003      	b.n	8005ba6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b9e:	887b      	ldrh	r3, [r7, #2]
 8005ba0:	041a      	lsls	r2, r3, #16
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	619a      	str	r2, [r3, #24]
}
 8005ba6:	bf00      	nop
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
	...

08005bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e0cc      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bc8:	4b68      	ldr	r3, [pc, #416]	; (8005d6c <HAL_RCC_ClockConfig+0x1b8>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 030f 	and.w	r3, r3, #15
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d90c      	bls.n	8005bf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bd6:	4b65      	ldr	r3, [pc, #404]	; (8005d6c <HAL_RCC_ClockConfig+0x1b8>)
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bde:	4b63      	ldr	r3, [pc, #396]	; (8005d6c <HAL_RCC_ClockConfig+0x1b8>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 030f 	and.w	r3, r3, #15
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d001      	beq.n	8005bf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e0b8      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d020      	beq.n	8005c3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0304 	and.w	r3, r3, #4
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d005      	beq.n	8005c14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c08:	4b59      	ldr	r3, [pc, #356]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	4a58      	ldr	r2, [pc, #352]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0308 	and.w	r3, r3, #8
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d005      	beq.n	8005c2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c20:	4b53      	ldr	r3, [pc, #332]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	4a52      	ldr	r2, [pc, #328]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c2c:	4b50      	ldr	r3, [pc, #320]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	494d      	ldr	r1, [pc, #308]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d044      	beq.n	8005cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d107      	bne.n	8005c62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c52:	4b47      	ldr	r3, [pc, #284]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d119      	bne.n	8005c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e07f      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d003      	beq.n	8005c72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d107      	bne.n	8005c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c72:	4b3f      	ldr	r3, [pc, #252]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d109      	bne.n	8005c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e06f      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c82:	4b3b      	ldr	r3, [pc, #236]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e067      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c92:	4b37      	ldr	r3, [pc, #220]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f023 0203 	bic.w	r2, r3, #3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	4934      	ldr	r1, [pc, #208]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ca4:	f7fe ff0e 	bl	8004ac4 <HAL_GetTick>
 8005ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005caa:	e00a      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cac:	f7fe ff0a 	bl	8004ac4 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e04f      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cc2:	4b2b      	ldr	r3, [pc, #172]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f003 020c 	and.w	r2, r3, #12
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d1eb      	bne.n	8005cac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cd4:	4b25      	ldr	r3, [pc, #148]	; (8005d6c <HAL_RCC_ClockConfig+0x1b8>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 030f 	and.w	r3, r3, #15
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d20c      	bcs.n	8005cfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ce2:	4b22      	ldr	r3, [pc, #136]	; (8005d6c <HAL_RCC_ClockConfig+0x1b8>)
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cea:	4b20      	ldr	r3, [pc, #128]	; (8005d6c <HAL_RCC_ClockConfig+0x1b8>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 030f 	and.w	r3, r3, #15
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d001      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e032      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d008      	beq.n	8005d1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d08:	4b19      	ldr	r3, [pc, #100]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	4916      	ldr	r1, [pc, #88]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0308 	and.w	r3, r3, #8
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d009      	beq.n	8005d3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d26:	4b12      	ldr	r3, [pc, #72]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	490e      	ldr	r1, [pc, #56]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d3a:	f000 f855 	bl	8005de8 <HAL_RCC_GetSysClockFreq>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	4b0b      	ldr	r3, [pc, #44]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	091b      	lsrs	r3, r3, #4
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	490a      	ldr	r1, [pc, #40]	; (8005d74 <HAL_RCC_ClockConfig+0x1c0>)
 8005d4c:	5ccb      	ldrb	r3, [r1, r3]
 8005d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d52:	4a09      	ldr	r2, [pc, #36]	; (8005d78 <HAL_RCC_ClockConfig+0x1c4>)
 8005d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d56:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <HAL_RCC_ClockConfig+0x1c8>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fe fe6e 	bl	8004a3c <HAL_InitTick>

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	40023c00 	.word	0x40023c00
 8005d70:	40023800 	.word	0x40023800
 8005d74:	0800b92c 	.word	0x0800b92c
 8005d78:	200023d8 	.word	0x200023d8
 8005d7c:	200023dc 	.word	0x200023dc

08005d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d80:	b480      	push	{r7}
 8005d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d84:	4b03      	ldr	r3, [pc, #12]	; (8005d94 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d86:	681b      	ldr	r3, [r3, #0]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	200023d8 	.word	0x200023d8

08005d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d9c:	f7ff fff0 	bl	8005d80 <HAL_RCC_GetHCLKFreq>
 8005da0:	4602      	mov	r2, r0
 8005da2:	4b05      	ldr	r3, [pc, #20]	; (8005db8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	0a9b      	lsrs	r3, r3, #10
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	4903      	ldr	r1, [pc, #12]	; (8005dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dae:	5ccb      	ldrb	r3, [r1, r3]
 8005db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	40023800 	.word	0x40023800
 8005dbc:	0800b93c 	.word	0x0800b93c

08005dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005dc4:	f7ff ffdc 	bl	8005d80 <HAL_RCC_GetHCLKFreq>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	0b5b      	lsrs	r3, r3, #13
 8005dd0:	f003 0307 	and.w	r3, r3, #7
 8005dd4:	4903      	ldr	r1, [pc, #12]	; (8005de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dd6:	5ccb      	ldrb	r3, [r1, r3]
 8005dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	40023800 	.word	0x40023800
 8005de4:	0800b93c 	.word	0x0800b93c

08005de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dec:	b0ae      	sub	sp, #184	; 0xb8
 8005dee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e0e:	4bcb      	ldr	r3, [pc, #812]	; (800613c <HAL_RCC_GetSysClockFreq+0x354>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f003 030c 	and.w	r3, r3, #12
 8005e16:	2b0c      	cmp	r3, #12
 8005e18:	f200 8206 	bhi.w	8006228 <HAL_RCC_GetSysClockFreq+0x440>
 8005e1c:	a201      	add	r2, pc, #4	; (adr r2, 8005e24 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e22:	bf00      	nop
 8005e24:	08005e59 	.word	0x08005e59
 8005e28:	08006229 	.word	0x08006229
 8005e2c:	08006229 	.word	0x08006229
 8005e30:	08006229 	.word	0x08006229
 8005e34:	08005e61 	.word	0x08005e61
 8005e38:	08006229 	.word	0x08006229
 8005e3c:	08006229 	.word	0x08006229
 8005e40:	08006229 	.word	0x08006229
 8005e44:	08005e69 	.word	0x08005e69
 8005e48:	08006229 	.word	0x08006229
 8005e4c:	08006229 	.word	0x08006229
 8005e50:	08006229 	.word	0x08006229
 8005e54:	08006059 	.word	0x08006059
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e58:	4bb9      	ldr	r3, [pc, #740]	; (8006140 <HAL_RCC_GetSysClockFreq+0x358>)
 8005e5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005e5e:	e1e7      	b.n	8006230 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e60:	4bb8      	ldr	r3, [pc, #736]	; (8006144 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005e62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005e66:	e1e3      	b.n	8006230 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e68:	4bb4      	ldr	r3, [pc, #720]	; (800613c <HAL_RCC_GetSysClockFreq+0x354>)
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e74:	4bb1      	ldr	r3, [pc, #708]	; (800613c <HAL_RCC_GetSysClockFreq+0x354>)
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d071      	beq.n	8005f64 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e80:	4bae      	ldr	r3, [pc, #696]	; (800613c <HAL_RCC_GetSysClockFreq+0x354>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	099b      	lsrs	r3, r3, #6
 8005e86:	2200      	movs	r2, #0
 8005e88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e8c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005e90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ea2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005ea6:	4622      	mov	r2, r4
 8005ea8:	462b      	mov	r3, r5
 8005eaa:	f04f 0000 	mov.w	r0, #0
 8005eae:	f04f 0100 	mov.w	r1, #0
 8005eb2:	0159      	lsls	r1, r3, #5
 8005eb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005eb8:	0150      	lsls	r0, r2, #5
 8005eba:	4602      	mov	r2, r0
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	1a51      	subs	r1, r2, r1
 8005ec2:	6439      	str	r1, [r7, #64]	; 0x40
 8005ec4:	4629      	mov	r1, r5
 8005ec6:	eb63 0301 	sbc.w	r3, r3, r1
 8005eca:	647b      	str	r3, [r7, #68]	; 0x44
 8005ecc:	f04f 0200 	mov.w	r2, #0
 8005ed0:	f04f 0300 	mov.w	r3, #0
 8005ed4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005ed8:	4649      	mov	r1, r9
 8005eda:	018b      	lsls	r3, r1, #6
 8005edc:	4641      	mov	r1, r8
 8005ede:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ee2:	4641      	mov	r1, r8
 8005ee4:	018a      	lsls	r2, r1, #6
 8005ee6:	4641      	mov	r1, r8
 8005ee8:	1a51      	subs	r1, r2, r1
 8005eea:	63b9      	str	r1, [r7, #56]	; 0x38
 8005eec:	4649      	mov	r1, r9
 8005eee:	eb63 0301 	sbc.w	r3, r3, r1
 8005ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	f04f 0300 	mov.w	r3, #0
 8005efc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005f00:	4649      	mov	r1, r9
 8005f02:	00cb      	lsls	r3, r1, #3
 8005f04:	4641      	mov	r1, r8
 8005f06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f0a:	4641      	mov	r1, r8
 8005f0c:	00ca      	lsls	r2, r1, #3
 8005f0e:	4610      	mov	r0, r2
 8005f10:	4619      	mov	r1, r3
 8005f12:	4603      	mov	r3, r0
 8005f14:	4622      	mov	r2, r4
 8005f16:	189b      	adds	r3, r3, r2
 8005f18:	633b      	str	r3, [r7, #48]	; 0x30
 8005f1a:	462b      	mov	r3, r5
 8005f1c:	460a      	mov	r2, r1
 8005f1e:	eb42 0303 	adc.w	r3, r2, r3
 8005f22:	637b      	str	r3, [r7, #52]	; 0x34
 8005f24:	f04f 0200 	mov.w	r2, #0
 8005f28:	f04f 0300 	mov.w	r3, #0
 8005f2c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005f30:	4629      	mov	r1, r5
 8005f32:	024b      	lsls	r3, r1, #9
 8005f34:	4621      	mov	r1, r4
 8005f36:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f3a:	4621      	mov	r1, r4
 8005f3c:	024a      	lsls	r2, r1, #9
 8005f3e:	4610      	mov	r0, r2
 8005f40:	4619      	mov	r1, r3
 8005f42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005f50:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005f54:	f7fa feb8 	bl	8000cc8 <__aeabi_uldivmod>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f62:	e067      	b.n	8006034 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f64:	4b75      	ldr	r3, [pc, #468]	; (800613c <HAL_RCC_GetSysClockFreq+0x354>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	099b      	lsrs	r3, r3, #6
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f70:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005f74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f7e:	2300      	movs	r3, #0
 8005f80:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f82:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005f86:	4622      	mov	r2, r4
 8005f88:	462b      	mov	r3, r5
 8005f8a:	f04f 0000 	mov.w	r0, #0
 8005f8e:	f04f 0100 	mov.w	r1, #0
 8005f92:	0159      	lsls	r1, r3, #5
 8005f94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f98:	0150      	lsls	r0, r2, #5
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	1a51      	subs	r1, r2, r1
 8005fa2:	62b9      	str	r1, [r7, #40]	; 0x28
 8005fa4:	4629      	mov	r1, r5
 8005fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8005faa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fac:	f04f 0200 	mov.w	r2, #0
 8005fb0:	f04f 0300 	mov.w	r3, #0
 8005fb4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005fb8:	4649      	mov	r1, r9
 8005fba:	018b      	lsls	r3, r1, #6
 8005fbc:	4641      	mov	r1, r8
 8005fbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fc2:	4641      	mov	r1, r8
 8005fc4:	018a      	lsls	r2, r1, #6
 8005fc6:	4641      	mov	r1, r8
 8005fc8:	ebb2 0a01 	subs.w	sl, r2, r1
 8005fcc:	4649      	mov	r1, r9
 8005fce:	eb63 0b01 	sbc.w	fp, r3, r1
 8005fd2:	f04f 0200 	mov.w	r2, #0
 8005fd6:	f04f 0300 	mov.w	r3, #0
 8005fda:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005fde:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005fe2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fe6:	4692      	mov	sl, r2
 8005fe8:	469b      	mov	fp, r3
 8005fea:	4623      	mov	r3, r4
 8005fec:	eb1a 0303 	adds.w	r3, sl, r3
 8005ff0:	623b      	str	r3, [r7, #32]
 8005ff2:	462b      	mov	r3, r5
 8005ff4:	eb4b 0303 	adc.w	r3, fp, r3
 8005ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8005ffa:	f04f 0200 	mov.w	r2, #0
 8005ffe:	f04f 0300 	mov.w	r3, #0
 8006002:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006006:	4629      	mov	r1, r5
 8006008:	028b      	lsls	r3, r1, #10
 800600a:	4621      	mov	r1, r4
 800600c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006010:	4621      	mov	r1, r4
 8006012:	028a      	lsls	r2, r1, #10
 8006014:	4610      	mov	r0, r2
 8006016:	4619      	mov	r1, r3
 8006018:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800601c:	2200      	movs	r2, #0
 800601e:	673b      	str	r3, [r7, #112]	; 0x70
 8006020:	677a      	str	r2, [r7, #116]	; 0x74
 8006022:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006026:	f7fa fe4f 	bl	8000cc8 <__aeabi_uldivmod>
 800602a:	4602      	mov	r2, r0
 800602c:	460b      	mov	r3, r1
 800602e:	4613      	mov	r3, r2
 8006030:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006034:	4b41      	ldr	r3, [pc, #260]	; (800613c <HAL_RCC_GetSysClockFreq+0x354>)
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	0c1b      	lsrs	r3, r3, #16
 800603a:	f003 0303 	and.w	r3, r3, #3
 800603e:	3301      	adds	r3, #1
 8006040:	005b      	lsls	r3, r3, #1
 8006042:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006046:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800604a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800604e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006052:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006056:	e0eb      	b.n	8006230 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006058:	4b38      	ldr	r3, [pc, #224]	; (800613c <HAL_RCC_GetSysClockFreq+0x354>)
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006060:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006064:	4b35      	ldr	r3, [pc, #212]	; (800613c <HAL_RCC_GetSysClockFreq+0x354>)
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d06b      	beq.n	8006148 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006070:	4b32      	ldr	r3, [pc, #200]	; (800613c <HAL_RCC_GetSysClockFreq+0x354>)
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	099b      	lsrs	r3, r3, #6
 8006076:	2200      	movs	r2, #0
 8006078:	66bb      	str	r3, [r7, #104]	; 0x68
 800607a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800607c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800607e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006082:	663b      	str	r3, [r7, #96]	; 0x60
 8006084:	2300      	movs	r3, #0
 8006086:	667b      	str	r3, [r7, #100]	; 0x64
 8006088:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800608c:	4622      	mov	r2, r4
 800608e:	462b      	mov	r3, r5
 8006090:	f04f 0000 	mov.w	r0, #0
 8006094:	f04f 0100 	mov.w	r1, #0
 8006098:	0159      	lsls	r1, r3, #5
 800609a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800609e:	0150      	lsls	r0, r2, #5
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	4621      	mov	r1, r4
 80060a6:	1a51      	subs	r1, r2, r1
 80060a8:	61b9      	str	r1, [r7, #24]
 80060aa:	4629      	mov	r1, r5
 80060ac:	eb63 0301 	sbc.w	r3, r3, r1
 80060b0:	61fb      	str	r3, [r7, #28]
 80060b2:	f04f 0200 	mov.w	r2, #0
 80060b6:	f04f 0300 	mov.w	r3, #0
 80060ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80060be:	4659      	mov	r1, fp
 80060c0:	018b      	lsls	r3, r1, #6
 80060c2:	4651      	mov	r1, sl
 80060c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80060c8:	4651      	mov	r1, sl
 80060ca:	018a      	lsls	r2, r1, #6
 80060cc:	4651      	mov	r1, sl
 80060ce:	ebb2 0801 	subs.w	r8, r2, r1
 80060d2:	4659      	mov	r1, fp
 80060d4:	eb63 0901 	sbc.w	r9, r3, r1
 80060d8:	f04f 0200 	mov.w	r2, #0
 80060dc:	f04f 0300 	mov.w	r3, #0
 80060e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060ec:	4690      	mov	r8, r2
 80060ee:	4699      	mov	r9, r3
 80060f0:	4623      	mov	r3, r4
 80060f2:	eb18 0303 	adds.w	r3, r8, r3
 80060f6:	613b      	str	r3, [r7, #16]
 80060f8:	462b      	mov	r3, r5
 80060fa:	eb49 0303 	adc.w	r3, r9, r3
 80060fe:	617b      	str	r3, [r7, #20]
 8006100:	f04f 0200 	mov.w	r2, #0
 8006104:	f04f 0300 	mov.w	r3, #0
 8006108:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800610c:	4629      	mov	r1, r5
 800610e:	024b      	lsls	r3, r1, #9
 8006110:	4621      	mov	r1, r4
 8006112:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006116:	4621      	mov	r1, r4
 8006118:	024a      	lsls	r2, r1, #9
 800611a:	4610      	mov	r0, r2
 800611c:	4619      	mov	r1, r3
 800611e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006122:	2200      	movs	r2, #0
 8006124:	65bb      	str	r3, [r7, #88]	; 0x58
 8006126:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006128:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800612c:	f7fa fdcc 	bl	8000cc8 <__aeabi_uldivmod>
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4613      	mov	r3, r2
 8006136:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800613a:	e065      	b.n	8006208 <HAL_RCC_GetSysClockFreq+0x420>
 800613c:	40023800 	.word	0x40023800
 8006140:	00f42400 	.word	0x00f42400
 8006144:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006148:	4b3d      	ldr	r3, [pc, #244]	; (8006240 <HAL_RCC_GetSysClockFreq+0x458>)
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	099b      	lsrs	r3, r3, #6
 800614e:	2200      	movs	r2, #0
 8006150:	4618      	mov	r0, r3
 8006152:	4611      	mov	r1, r2
 8006154:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006158:	653b      	str	r3, [r7, #80]	; 0x50
 800615a:	2300      	movs	r3, #0
 800615c:	657b      	str	r3, [r7, #84]	; 0x54
 800615e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006162:	4642      	mov	r2, r8
 8006164:	464b      	mov	r3, r9
 8006166:	f04f 0000 	mov.w	r0, #0
 800616a:	f04f 0100 	mov.w	r1, #0
 800616e:	0159      	lsls	r1, r3, #5
 8006170:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006174:	0150      	lsls	r0, r2, #5
 8006176:	4602      	mov	r2, r0
 8006178:	460b      	mov	r3, r1
 800617a:	4641      	mov	r1, r8
 800617c:	1a51      	subs	r1, r2, r1
 800617e:	60b9      	str	r1, [r7, #8]
 8006180:	4649      	mov	r1, r9
 8006182:	eb63 0301 	sbc.w	r3, r3, r1
 8006186:	60fb      	str	r3, [r7, #12]
 8006188:	f04f 0200 	mov.w	r2, #0
 800618c:	f04f 0300 	mov.w	r3, #0
 8006190:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006194:	4659      	mov	r1, fp
 8006196:	018b      	lsls	r3, r1, #6
 8006198:	4651      	mov	r1, sl
 800619a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800619e:	4651      	mov	r1, sl
 80061a0:	018a      	lsls	r2, r1, #6
 80061a2:	4651      	mov	r1, sl
 80061a4:	1a54      	subs	r4, r2, r1
 80061a6:	4659      	mov	r1, fp
 80061a8:	eb63 0501 	sbc.w	r5, r3, r1
 80061ac:	f04f 0200 	mov.w	r2, #0
 80061b0:	f04f 0300 	mov.w	r3, #0
 80061b4:	00eb      	lsls	r3, r5, #3
 80061b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061ba:	00e2      	lsls	r2, r4, #3
 80061bc:	4614      	mov	r4, r2
 80061be:	461d      	mov	r5, r3
 80061c0:	4643      	mov	r3, r8
 80061c2:	18e3      	adds	r3, r4, r3
 80061c4:	603b      	str	r3, [r7, #0]
 80061c6:	464b      	mov	r3, r9
 80061c8:	eb45 0303 	adc.w	r3, r5, r3
 80061cc:	607b      	str	r3, [r7, #4]
 80061ce:	f04f 0200 	mov.w	r2, #0
 80061d2:	f04f 0300 	mov.w	r3, #0
 80061d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061da:	4629      	mov	r1, r5
 80061dc:	028b      	lsls	r3, r1, #10
 80061de:	4621      	mov	r1, r4
 80061e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061e4:	4621      	mov	r1, r4
 80061e6:	028a      	lsls	r2, r1, #10
 80061e8:	4610      	mov	r0, r2
 80061ea:	4619      	mov	r1, r3
 80061ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061f0:	2200      	movs	r2, #0
 80061f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80061f4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80061f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80061fa:	f7fa fd65 	bl	8000cc8 <__aeabi_uldivmod>
 80061fe:	4602      	mov	r2, r0
 8006200:	460b      	mov	r3, r1
 8006202:	4613      	mov	r3, r2
 8006204:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006208:	4b0d      	ldr	r3, [pc, #52]	; (8006240 <HAL_RCC_GetSysClockFreq+0x458>)
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	0f1b      	lsrs	r3, r3, #28
 800620e:	f003 0307 	and.w	r3, r3, #7
 8006212:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006216:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800621a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800621e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006222:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006226:	e003      	b.n	8006230 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006228:	4b06      	ldr	r3, [pc, #24]	; (8006244 <HAL_RCC_GetSysClockFreq+0x45c>)
 800622a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800622e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006230:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006234:	4618      	mov	r0, r3
 8006236:	37b8      	adds	r7, #184	; 0xb8
 8006238:	46bd      	mov	sp, r7
 800623a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800623e:	bf00      	nop
 8006240:	40023800 	.word	0x40023800
 8006244:	00f42400 	.word	0x00f42400

08006248 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e28d      	b.n	8006776 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 8083 	beq.w	800636e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006268:	4b94      	ldr	r3, [pc, #592]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f003 030c 	and.w	r3, r3, #12
 8006270:	2b04      	cmp	r3, #4
 8006272:	d019      	beq.n	80062a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006274:	4b91      	ldr	r3, [pc, #580]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800627c:	2b08      	cmp	r3, #8
 800627e:	d106      	bne.n	800628e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006280:	4b8e      	ldr	r3, [pc, #568]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006288:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800628c:	d00c      	beq.n	80062a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800628e:	4b8b      	ldr	r3, [pc, #556]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006296:	2b0c      	cmp	r3, #12
 8006298:	d112      	bne.n	80062c0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800629a:	4b88      	ldr	r3, [pc, #544]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062a6:	d10b      	bne.n	80062c0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062a8:	4b84      	ldr	r3, [pc, #528]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d05b      	beq.n	800636c <HAL_RCC_OscConfig+0x124>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d157      	bne.n	800636c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e25a      	b.n	8006776 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062c8:	d106      	bne.n	80062d8 <HAL_RCC_OscConfig+0x90>
 80062ca:	4b7c      	ldr	r3, [pc, #496]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a7b      	ldr	r2, [pc, #492]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 80062d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	e01d      	b.n	8006314 <HAL_RCC_OscConfig+0xcc>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062e0:	d10c      	bne.n	80062fc <HAL_RCC_OscConfig+0xb4>
 80062e2:	4b76      	ldr	r3, [pc, #472]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a75      	ldr	r2, [pc, #468]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 80062e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062ec:	6013      	str	r3, [r2, #0]
 80062ee:	4b73      	ldr	r3, [pc, #460]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a72      	ldr	r2, [pc, #456]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 80062f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062f8:	6013      	str	r3, [r2, #0]
 80062fa:	e00b      	b.n	8006314 <HAL_RCC_OscConfig+0xcc>
 80062fc:	4b6f      	ldr	r3, [pc, #444]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a6e      	ldr	r2, [pc, #440]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 8006302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006306:	6013      	str	r3, [r2, #0]
 8006308:	4b6c      	ldr	r3, [pc, #432]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a6b      	ldr	r2, [pc, #428]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 800630e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d013      	beq.n	8006344 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800631c:	f7fe fbd2 	bl	8004ac4 <HAL_GetTick>
 8006320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006322:	e008      	b.n	8006336 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006324:	f7fe fbce 	bl	8004ac4 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b64      	cmp	r3, #100	; 0x64
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e21f      	b.n	8006776 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006336:	4b61      	ldr	r3, [pc, #388]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0f0      	beq.n	8006324 <HAL_RCC_OscConfig+0xdc>
 8006342:	e014      	b.n	800636e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006344:	f7fe fbbe 	bl	8004ac4 <HAL_GetTick>
 8006348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800634a:	e008      	b.n	800635e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800634c:	f7fe fbba 	bl	8004ac4 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b64      	cmp	r3, #100	; 0x64
 8006358:	d901      	bls.n	800635e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e20b      	b.n	8006776 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800635e:	4b57      	ldr	r3, [pc, #348]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1f0      	bne.n	800634c <HAL_RCC_OscConfig+0x104>
 800636a:	e000      	b.n	800636e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800636c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b00      	cmp	r3, #0
 8006378:	d06f      	beq.n	800645a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800637a:	4b50      	ldr	r3, [pc, #320]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f003 030c 	and.w	r3, r3, #12
 8006382:	2b00      	cmp	r3, #0
 8006384:	d017      	beq.n	80063b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006386:	4b4d      	ldr	r3, [pc, #308]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800638e:	2b08      	cmp	r3, #8
 8006390:	d105      	bne.n	800639e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006392:	4b4a      	ldr	r3, [pc, #296]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00b      	beq.n	80063b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800639e:	4b47      	ldr	r3, [pc, #284]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80063a6:	2b0c      	cmp	r3, #12
 80063a8:	d11c      	bne.n	80063e4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063aa:	4b44      	ldr	r3, [pc, #272]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d116      	bne.n	80063e4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063b6:	4b41      	ldr	r3, [pc, #260]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d005      	beq.n	80063ce <HAL_RCC_OscConfig+0x186>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d001      	beq.n	80063ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e1d3      	b.n	8006776 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ce:	4b3b      	ldr	r3, [pc, #236]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	00db      	lsls	r3, r3, #3
 80063dc:	4937      	ldr	r1, [pc, #220]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063e2:	e03a      	b.n	800645a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d020      	beq.n	800642e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063ec:	4b34      	ldr	r3, [pc, #208]	; (80064c0 <HAL_RCC_OscConfig+0x278>)
 80063ee:	2201      	movs	r2, #1
 80063f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f2:	f7fe fb67 	bl	8004ac4 <HAL_GetTick>
 80063f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063f8:	e008      	b.n	800640c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063fa:	f7fe fb63 	bl	8004ac4 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	2b02      	cmp	r3, #2
 8006406:	d901      	bls.n	800640c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e1b4      	b.n	8006776 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800640c:	4b2b      	ldr	r3, [pc, #172]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d0f0      	beq.n	80063fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006418:	4b28      	ldr	r3, [pc, #160]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	4925      	ldr	r1, [pc, #148]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 8006428:	4313      	orrs	r3, r2
 800642a:	600b      	str	r3, [r1, #0]
 800642c:	e015      	b.n	800645a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800642e:	4b24      	ldr	r3, [pc, #144]	; (80064c0 <HAL_RCC_OscConfig+0x278>)
 8006430:	2200      	movs	r2, #0
 8006432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006434:	f7fe fb46 	bl	8004ac4 <HAL_GetTick>
 8006438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800643a:	e008      	b.n	800644e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800643c:	f7fe fb42 	bl	8004ac4 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	2b02      	cmp	r3, #2
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e193      	b.n	8006776 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800644e:	4b1b      	ldr	r3, [pc, #108]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1f0      	bne.n	800643c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0308 	and.w	r3, r3, #8
 8006462:	2b00      	cmp	r3, #0
 8006464:	d036      	beq.n	80064d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d016      	beq.n	800649c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800646e:	4b15      	ldr	r3, [pc, #84]	; (80064c4 <HAL_RCC_OscConfig+0x27c>)
 8006470:	2201      	movs	r2, #1
 8006472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006474:	f7fe fb26 	bl	8004ac4 <HAL_GetTick>
 8006478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800647a:	e008      	b.n	800648e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800647c:	f7fe fb22 	bl	8004ac4 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	2b02      	cmp	r3, #2
 8006488:	d901      	bls.n	800648e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e173      	b.n	8006776 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800648e:	4b0b      	ldr	r3, [pc, #44]	; (80064bc <HAL_RCC_OscConfig+0x274>)
 8006490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b00      	cmp	r3, #0
 8006498:	d0f0      	beq.n	800647c <HAL_RCC_OscConfig+0x234>
 800649a:	e01b      	b.n	80064d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800649c:	4b09      	ldr	r3, [pc, #36]	; (80064c4 <HAL_RCC_OscConfig+0x27c>)
 800649e:	2200      	movs	r2, #0
 80064a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064a2:	f7fe fb0f 	bl	8004ac4 <HAL_GetTick>
 80064a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064a8:	e00e      	b.n	80064c8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064aa:	f7fe fb0b 	bl	8004ac4 <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d907      	bls.n	80064c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e15c      	b.n	8006776 <HAL_RCC_OscConfig+0x52e>
 80064bc:	40023800 	.word	0x40023800
 80064c0:	42470000 	.word	0x42470000
 80064c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064c8:	4b8a      	ldr	r3, [pc, #552]	; (80066f4 <HAL_RCC_OscConfig+0x4ac>)
 80064ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1ea      	bne.n	80064aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0304 	and.w	r3, r3, #4
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 8097 	beq.w	8006610 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064e2:	2300      	movs	r3, #0
 80064e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064e6:	4b83      	ldr	r3, [pc, #524]	; (80066f4 <HAL_RCC_OscConfig+0x4ac>)
 80064e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10f      	bne.n	8006512 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064f2:	2300      	movs	r3, #0
 80064f4:	60bb      	str	r3, [r7, #8]
 80064f6:	4b7f      	ldr	r3, [pc, #508]	; (80066f4 <HAL_RCC_OscConfig+0x4ac>)
 80064f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fa:	4a7e      	ldr	r2, [pc, #504]	; (80066f4 <HAL_RCC_OscConfig+0x4ac>)
 80064fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006500:	6413      	str	r3, [r2, #64]	; 0x40
 8006502:	4b7c      	ldr	r3, [pc, #496]	; (80066f4 <HAL_RCC_OscConfig+0x4ac>)
 8006504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800650a:	60bb      	str	r3, [r7, #8]
 800650c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800650e:	2301      	movs	r3, #1
 8006510:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006512:	4b79      	ldr	r3, [pc, #484]	; (80066f8 <HAL_RCC_OscConfig+0x4b0>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651a:	2b00      	cmp	r3, #0
 800651c:	d118      	bne.n	8006550 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800651e:	4b76      	ldr	r3, [pc, #472]	; (80066f8 <HAL_RCC_OscConfig+0x4b0>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a75      	ldr	r2, [pc, #468]	; (80066f8 <HAL_RCC_OscConfig+0x4b0>)
 8006524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800652a:	f7fe facb 	bl	8004ac4 <HAL_GetTick>
 800652e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006530:	e008      	b.n	8006544 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006532:	f7fe fac7 	bl	8004ac4 <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	2b02      	cmp	r3, #2
 800653e:	d901      	bls.n	8006544 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e118      	b.n	8006776 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006544:	4b6c      	ldr	r3, [pc, #432]	; (80066f8 <HAL_RCC_OscConfig+0x4b0>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654c:	2b00      	cmp	r3, #0
 800654e:	d0f0      	beq.n	8006532 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d106      	bne.n	8006566 <HAL_RCC_OscConfig+0x31e>
 8006558:	4b66      	ldr	r3, [pc, #408]	; (80066f4 <HAL_RCC_OscConfig+0x4ac>)
 800655a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655c:	4a65      	ldr	r2, [pc, #404]	; (80066f4 <HAL_RCC_OscConfig+0x4ac>)
 800655e:	f043 0301 	orr.w	r3, r3, #1
 8006562:	6713      	str	r3, [r2, #112]	; 0x70
 8006564:	e01c      	b.n	80065a0 <HAL_RCC_OscConfig+0x358>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	2b05      	cmp	r3, #5
 800656c:	d10c      	bne.n	8006588 <HAL_RCC_OscConfig+0x340>
 800656e:	4b61      	ldr	r3, [pc, #388]	; (80066f4 <HAL_RCC_OscConfig+0x4ac>)
 8006570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006572:	4a60      	ldr	r2, [pc, #384]	; (80066f4 <HAL_RCC_OscConfig+0x4ac>)
 8006574:	f043 0304 	orr.w	r3, r3, #4
 8006578:	6713      	str	r3, [r2, #112]	; 0x70
 800657a:	4b5e      	ldr	r3, [pc, #376]	; (80066f4 <HAL_RCC_OscConfig+0x4ac>)
 800657c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657e:	4a5d      	ldr	r2, [pc, #372]	; (80066f4 <HAL_RCC_OscConfig+0x4ac>)
 8006580:	f043 0301 	orr.w	r3, r3, #1
 8006584:	6713      	str	r3, [r2, #112]	; 0x70
 8006586:	e00b      	b.n	80065a0 <HAL_RCC_OscConfig+0x358>
 8006588:	4b5a      	ldr	r3, [pc, #360]	; (80066f4 <HAL_RCC_OscConfig+0x4ac>)
 800658a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658c:	4a59      	ldr	r2, [pc, #356]	; (80066f4 <HAL_RCC_OscConfig+0x4ac>)
 800658e:	f023 0301 	bic.w	r3, r3, #1
 8006592:	6713      	str	r3, [r2, #112]	; 0x70
 8006594:	4b57      	ldr	r3, [pc, #348]	; (80066f4 <HAL_RCC_OscConfig+0x4ac>)
 8006596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006598:	4a56      	ldr	r2, [pc, #344]	; (80066f4 <HAL_RCC_OscConfig+0x4ac>)
 800659a:	f023 0304 	bic.w	r3, r3, #4
 800659e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d015      	beq.n	80065d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a8:	f7fe fa8c 	bl	8004ac4 <HAL_GetTick>
 80065ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065ae:	e00a      	b.n	80065c6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065b0:	f7fe fa88 	bl	8004ac4 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80065be:	4293      	cmp	r3, r2
 80065c0:	d901      	bls.n	80065c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e0d7      	b.n	8006776 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065c6:	4b4b      	ldr	r3, [pc, #300]	; (80066f4 <HAL_RCC_OscConfig+0x4ac>)
 80065c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0ee      	beq.n	80065b0 <HAL_RCC_OscConfig+0x368>
 80065d2:	e014      	b.n	80065fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065d4:	f7fe fa76 	bl	8004ac4 <HAL_GetTick>
 80065d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065da:	e00a      	b.n	80065f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065dc:	f7fe fa72 	bl	8004ac4 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e0c1      	b.n	8006776 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065f2:	4b40      	ldr	r3, [pc, #256]	; (80066f4 <HAL_RCC_OscConfig+0x4ac>)
 80065f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1ee      	bne.n	80065dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065fe:	7dfb      	ldrb	r3, [r7, #23]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d105      	bne.n	8006610 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006604:	4b3b      	ldr	r3, [pc, #236]	; (80066f4 <HAL_RCC_OscConfig+0x4ac>)
 8006606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006608:	4a3a      	ldr	r2, [pc, #232]	; (80066f4 <HAL_RCC_OscConfig+0x4ac>)
 800660a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800660e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	2b00      	cmp	r3, #0
 8006616:	f000 80ad 	beq.w	8006774 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800661a:	4b36      	ldr	r3, [pc, #216]	; (80066f4 <HAL_RCC_OscConfig+0x4ac>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f003 030c 	and.w	r3, r3, #12
 8006622:	2b08      	cmp	r3, #8
 8006624:	d060      	beq.n	80066e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	2b02      	cmp	r3, #2
 800662c:	d145      	bne.n	80066ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800662e:	4b33      	ldr	r3, [pc, #204]	; (80066fc <HAL_RCC_OscConfig+0x4b4>)
 8006630:	2200      	movs	r2, #0
 8006632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006634:	f7fe fa46 	bl	8004ac4 <HAL_GetTick>
 8006638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800663a:	e008      	b.n	800664e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800663c:	f7fe fa42 	bl	8004ac4 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	2b02      	cmp	r3, #2
 8006648:	d901      	bls.n	800664e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e093      	b.n	8006776 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800664e:	4b29      	ldr	r3, [pc, #164]	; (80066f4 <HAL_RCC_OscConfig+0x4ac>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1f0      	bne.n	800663c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	69da      	ldr	r2, [r3, #28]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	431a      	orrs	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006668:	019b      	lsls	r3, r3, #6
 800666a:	431a      	orrs	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006670:	085b      	lsrs	r3, r3, #1
 8006672:	3b01      	subs	r3, #1
 8006674:	041b      	lsls	r3, r3, #16
 8006676:	431a      	orrs	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667c:	061b      	lsls	r3, r3, #24
 800667e:	431a      	orrs	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006684:	071b      	lsls	r3, r3, #28
 8006686:	491b      	ldr	r1, [pc, #108]	; (80066f4 <HAL_RCC_OscConfig+0x4ac>)
 8006688:	4313      	orrs	r3, r2
 800668a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800668c:	4b1b      	ldr	r3, [pc, #108]	; (80066fc <HAL_RCC_OscConfig+0x4b4>)
 800668e:	2201      	movs	r2, #1
 8006690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006692:	f7fe fa17 	bl	8004ac4 <HAL_GetTick>
 8006696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006698:	e008      	b.n	80066ac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800669a:	f7fe fa13 	bl	8004ac4 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d901      	bls.n	80066ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e064      	b.n	8006776 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066ac:	4b11      	ldr	r3, [pc, #68]	; (80066f4 <HAL_RCC_OscConfig+0x4ac>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d0f0      	beq.n	800669a <HAL_RCC_OscConfig+0x452>
 80066b8:	e05c      	b.n	8006774 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066ba:	4b10      	ldr	r3, [pc, #64]	; (80066fc <HAL_RCC_OscConfig+0x4b4>)
 80066bc:	2200      	movs	r2, #0
 80066be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c0:	f7fe fa00 	bl	8004ac4 <HAL_GetTick>
 80066c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066c6:	e008      	b.n	80066da <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066c8:	f7fe f9fc 	bl	8004ac4 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d901      	bls.n	80066da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e04d      	b.n	8006776 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066da:	4b06      	ldr	r3, [pc, #24]	; (80066f4 <HAL_RCC_OscConfig+0x4ac>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1f0      	bne.n	80066c8 <HAL_RCC_OscConfig+0x480>
 80066e6:	e045      	b.n	8006774 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d107      	bne.n	8006700 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e040      	b.n	8006776 <HAL_RCC_OscConfig+0x52e>
 80066f4:	40023800 	.word	0x40023800
 80066f8:	40007000 	.word	0x40007000
 80066fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006700:	4b1f      	ldr	r3, [pc, #124]	; (8006780 <HAL_RCC_OscConfig+0x538>)
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d030      	beq.n	8006770 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006718:	429a      	cmp	r2, r3
 800671a:	d129      	bne.n	8006770 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006726:	429a      	cmp	r2, r3
 8006728:	d122      	bne.n	8006770 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006730:	4013      	ands	r3, r2
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006736:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006738:	4293      	cmp	r3, r2
 800673a:	d119      	bne.n	8006770 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006746:	085b      	lsrs	r3, r3, #1
 8006748:	3b01      	subs	r3, #1
 800674a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800674c:	429a      	cmp	r2, r3
 800674e:	d10f      	bne.n	8006770 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800675c:	429a      	cmp	r2, r3
 800675e:	d107      	bne.n	8006770 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800676c:	429a      	cmp	r2, r3
 800676e:	d001      	beq.n	8006774 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e000      	b.n	8006776 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3718      	adds	r7, #24
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	40023800 	.word	0x40023800

08006784 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e07b      	b.n	800688e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679a:	2b00      	cmp	r3, #0
 800679c:	d108      	bne.n	80067b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067a6:	d009      	beq.n	80067bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	61da      	str	r2, [r3, #28]
 80067ae:	e005      	b.n	80067bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d106      	bne.n	80067dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7fd fe96 	bl	8004508 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2202      	movs	r2, #2
 80067e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006804:	431a      	orrs	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800680e:	431a      	orrs	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	431a      	orrs	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	431a      	orrs	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800682c:	431a      	orrs	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	69db      	ldr	r3, [r3, #28]
 8006832:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006836:	431a      	orrs	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a1b      	ldr	r3, [r3, #32]
 800683c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006840:	ea42 0103 	orr.w	r1, r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006848:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	430a      	orrs	r2, r1
 8006852:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	0c1b      	lsrs	r3, r3, #16
 800685a:	f003 0104 	and.w	r1, r3, #4
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006862:	f003 0210 	and.w	r2, r3, #16
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	430a      	orrs	r2, r1
 800686c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69da      	ldr	r2, [r3, #28]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800687c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b088      	sub	sp, #32
 800689a:	af00      	add	r7, sp, #0
 800689c:	60f8      	str	r0, [r7, #12]
 800689e:	60b9      	str	r1, [r7, #8]
 80068a0:	603b      	str	r3, [r7, #0]
 80068a2:	4613      	mov	r3, r2
 80068a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d101      	bne.n	80068b8 <HAL_SPI_Transmit+0x22>
 80068b4:	2302      	movs	r3, #2
 80068b6:	e126      	b.n	8006b06 <HAL_SPI_Transmit+0x270>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068c0:	f7fe f900 	bl	8004ac4 <HAL_GetTick>
 80068c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80068c6:	88fb      	ldrh	r3, [r7, #6]
 80068c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d002      	beq.n	80068dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80068d6:	2302      	movs	r3, #2
 80068d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068da:	e10b      	b.n	8006af4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d002      	beq.n	80068e8 <HAL_SPI_Transmit+0x52>
 80068e2:	88fb      	ldrh	r3, [r7, #6]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d102      	bne.n	80068ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068ec:	e102      	b.n	8006af4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2203      	movs	r2, #3
 80068f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	88fa      	ldrh	r2, [r7, #6]
 8006906:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	88fa      	ldrh	r2, [r7, #6]
 800690c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006934:	d10f      	bne.n	8006956 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006944:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006954:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006960:	2b40      	cmp	r3, #64	; 0x40
 8006962:	d007      	beq.n	8006974 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006972:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800697c:	d14b      	bne.n	8006a16 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d002      	beq.n	800698c <HAL_SPI_Transmit+0xf6>
 8006986:	8afb      	ldrh	r3, [r7, #22]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d13e      	bne.n	8006a0a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006990:	881a      	ldrh	r2, [r3, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699c:	1c9a      	adds	r2, r3, #2
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	3b01      	subs	r3, #1
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80069b0:	e02b      	b.n	8006a0a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d112      	bne.n	80069e6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c4:	881a      	ldrh	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d0:	1c9a      	adds	r2, r3, #2
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069da:	b29b      	uxth	r3, r3
 80069dc:	3b01      	subs	r3, #1
 80069de:	b29a      	uxth	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80069e4:	e011      	b.n	8006a0a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069e6:	f7fe f86d 	bl	8004ac4 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	683a      	ldr	r2, [r7, #0]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d803      	bhi.n	80069fe <HAL_SPI_Transmit+0x168>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069fc:	d102      	bne.n	8006a04 <HAL_SPI_Transmit+0x16e>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d102      	bne.n	8006a0a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a08:	e074      	b.n	8006af4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1ce      	bne.n	80069b2 <HAL_SPI_Transmit+0x11c>
 8006a14:	e04c      	b.n	8006ab0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d002      	beq.n	8006a24 <HAL_SPI_Transmit+0x18e>
 8006a1e:	8afb      	ldrh	r3, [r7, #22]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d140      	bne.n	8006aa6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	330c      	adds	r3, #12
 8006a2e:	7812      	ldrb	r2, [r2, #0]
 8006a30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	3b01      	subs	r3, #1
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006a4a:	e02c      	b.n	8006aa6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f003 0302 	and.w	r3, r3, #2
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d113      	bne.n	8006a82 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	330c      	adds	r3, #12
 8006a64:	7812      	ldrb	r2, [r2, #0]
 8006a66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6c:	1c5a      	adds	r2, r3, #1
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006a80:	e011      	b.n	8006aa6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a82:	f7fe f81f 	bl	8004ac4 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d803      	bhi.n	8006a9a <HAL_SPI_Transmit+0x204>
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a98:	d102      	bne.n	8006aa0 <HAL_SPI_Transmit+0x20a>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d102      	bne.n	8006aa6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006aa4:	e026      	b.n	8006af4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1cd      	bne.n	8006a4c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 fbcb 	bl	8007250 <SPI_EndRxTxTransaction>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d002      	beq.n	8006ac6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10a      	bne.n	8006ae4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ace:	2300      	movs	r3, #0
 8006ad0:	613b      	str	r3, [r7, #16]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	613b      	str	r3, [r7, #16]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	613b      	str	r3, [r7, #16]
 8006ae2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d002      	beq.n	8006af2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	77fb      	strb	r3, [r7, #31]
 8006af0:	e000      	b.n	8006af4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006af2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b04:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3720      	adds	r7, #32
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b088      	sub	sp, #32
 8006b12:	af02      	add	r7, sp, #8
 8006b14:	60f8      	str	r0, [r7, #12]
 8006b16:	60b9      	str	r1, [r7, #8]
 8006b18:	603b      	str	r3, [r7, #0]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b2a:	d112      	bne.n	8006b52 <HAL_SPI_Receive+0x44>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10e      	bne.n	8006b52 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2204      	movs	r2, #4
 8006b38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006b3c:	88fa      	ldrh	r2, [r7, #6]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	4613      	mov	r3, r2
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	68b9      	ldr	r1, [r7, #8]
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f000 f8f1 	bl	8006d30 <HAL_SPI_TransmitReceive>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	e0ea      	b.n	8006d28 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d101      	bne.n	8006b60 <HAL_SPI_Receive+0x52>
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	e0e3      	b.n	8006d28 <HAL_SPI_Receive+0x21a>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b68:	f7fd ffac 	bl	8004ac4 <HAL_GetTick>
 8006b6c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d002      	beq.n	8006b80 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b7e:	e0ca      	b.n	8006d16 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d002      	beq.n	8006b8c <HAL_SPI_Receive+0x7e>
 8006b86:	88fb      	ldrh	r3, [r7, #6]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d102      	bne.n	8006b92 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b90:	e0c1      	b.n	8006d16 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2204      	movs	r2, #4
 8006b96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	88fa      	ldrh	r2, [r7, #6]
 8006baa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	88fa      	ldrh	r2, [r7, #6]
 8006bb0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bd8:	d10f      	bne.n	8006bfa <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006be8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006bf8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c04:	2b40      	cmp	r3, #64	; 0x40
 8006c06:	d007      	beq.n	8006c18 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c16:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d162      	bne.n	8006ce6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006c20:	e02e      	b.n	8006c80 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d115      	bne.n	8006c5c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f103 020c 	add.w	r2, r3, #12
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3c:	7812      	ldrb	r2, [r2, #0]
 8006c3e:	b2d2      	uxtb	r2, r2
 8006c40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c46:	1c5a      	adds	r2, r3, #1
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	3b01      	subs	r3, #1
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c5a:	e011      	b.n	8006c80 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c5c:	f7fd ff32 	bl	8004ac4 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	683a      	ldr	r2, [r7, #0]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d803      	bhi.n	8006c74 <HAL_SPI_Receive+0x166>
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c72:	d102      	bne.n	8006c7a <HAL_SPI_Receive+0x16c>
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d102      	bne.n	8006c80 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006c7e:	e04a      	b.n	8006d16 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1cb      	bne.n	8006c22 <HAL_SPI_Receive+0x114>
 8006c8a:	e031      	b.n	8006cf0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d113      	bne.n	8006cc2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68da      	ldr	r2, [r3, #12]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca4:	b292      	uxth	r2, r2
 8006ca6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cac:	1c9a      	adds	r2, r3, #2
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006cc0:	e011      	b.n	8006ce6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cc2:	f7fd feff 	bl	8004ac4 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	683a      	ldr	r2, [r7, #0]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d803      	bhi.n	8006cda <HAL_SPI_Receive+0x1cc>
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cd8:	d102      	bne.n	8006ce0 <HAL_SPI_Receive+0x1d2>
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d102      	bne.n	8006ce6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006ce4:	e017      	b.n	8006d16 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1cd      	bne.n	8006c8c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f000 fa45 	bl	8007184 <SPI_EndRxTransaction>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d002      	beq.n	8006d06 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2220      	movs	r2, #32
 8006d04:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d002      	beq.n	8006d14 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	75fb      	strb	r3, [r7, #23]
 8006d12:	e000      	b.n	8006d16 <HAL_SPI_Receive+0x208>
  }

error :
 8006d14:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3718      	adds	r7, #24
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08c      	sub	sp, #48	; 0x30
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
 8006d3c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d42:	2300      	movs	r3, #0
 8006d44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d101      	bne.n	8006d56 <HAL_SPI_TransmitReceive+0x26>
 8006d52:	2302      	movs	r3, #2
 8006d54:	e18a      	b.n	800706c <HAL_SPI_TransmitReceive+0x33c>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d5e:	f7fd feb1 	bl	8004ac4 <HAL_GetTick>
 8006d62:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006d74:	887b      	ldrh	r3, [r7, #2]
 8006d76:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d00f      	beq.n	8006da0 <HAL_SPI_TransmitReceive+0x70>
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d86:	d107      	bne.n	8006d98 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d103      	bne.n	8006d98 <HAL_SPI_TransmitReceive+0x68>
 8006d90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d94:	2b04      	cmp	r3, #4
 8006d96:	d003      	beq.n	8006da0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006d98:	2302      	movs	r3, #2
 8006d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006d9e:	e15b      	b.n	8007058 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d005      	beq.n	8006db2 <HAL_SPI_TransmitReceive+0x82>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <HAL_SPI_TransmitReceive+0x82>
 8006dac:	887b      	ldrh	r3, [r7, #2]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d103      	bne.n	8006dba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006db8:	e14e      	b.n	8007058 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	d003      	beq.n	8006dce <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2205      	movs	r2, #5
 8006dca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	887a      	ldrh	r2, [r7, #2]
 8006dde:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	887a      	ldrh	r2, [r7, #2]
 8006de4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	887a      	ldrh	r2, [r7, #2]
 8006df0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	887a      	ldrh	r2, [r7, #2]
 8006df6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0e:	2b40      	cmp	r3, #64	; 0x40
 8006e10:	d007      	beq.n	8006e22 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e2a:	d178      	bne.n	8006f1e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d002      	beq.n	8006e3a <HAL_SPI_TransmitReceive+0x10a>
 8006e34:	8b7b      	ldrh	r3, [r7, #26]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d166      	bne.n	8006f08 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3e:	881a      	ldrh	r2, [r3, #0]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4a:	1c9a      	adds	r2, r3, #2
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	3b01      	subs	r3, #1
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e5e:	e053      	b.n	8006f08 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d11b      	bne.n	8006ea6 <HAL_SPI_TransmitReceive+0x176>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d016      	beq.n	8006ea6 <HAL_SPI_TransmitReceive+0x176>
 8006e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d113      	bne.n	8006ea6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e82:	881a      	ldrh	r2, [r3, #0]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8e:	1c9a      	adds	r2, r3, #2
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d119      	bne.n	8006ee8 <HAL_SPI_TransmitReceive+0x1b8>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d014      	beq.n	8006ee8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68da      	ldr	r2, [r3, #12]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec8:	b292      	uxth	r2, r2
 8006eca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed0:	1c9a      	adds	r2, r3, #2
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	3b01      	subs	r3, #1
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ee8:	f7fd fdec 	bl	8004ac4 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d807      	bhi.n	8006f08 <HAL_SPI_TransmitReceive+0x1d8>
 8006ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006efe:	d003      	beq.n	8006f08 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006f06:	e0a7      	b.n	8007058 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1a6      	bne.n	8006e60 <HAL_SPI_TransmitReceive+0x130>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1a1      	bne.n	8006e60 <HAL_SPI_TransmitReceive+0x130>
 8006f1c:	e07c      	b.n	8007018 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d002      	beq.n	8006f2c <HAL_SPI_TransmitReceive+0x1fc>
 8006f26:	8b7b      	ldrh	r3, [r7, #26]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d16b      	bne.n	8007004 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	330c      	adds	r3, #12
 8006f36:	7812      	ldrb	r2, [r2, #0]
 8006f38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3e:	1c5a      	adds	r2, r3, #1
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f52:	e057      	b.n	8007004 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d11c      	bne.n	8006f9c <HAL_SPI_TransmitReceive+0x26c>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d017      	beq.n	8006f9c <HAL_SPI_TransmitReceive+0x26c>
 8006f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d114      	bne.n	8006f9c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	330c      	adds	r3, #12
 8006f7c:	7812      	ldrb	r2, [r2, #0]
 8006f7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f84:	1c5a      	adds	r2, r3, #1
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	3b01      	subs	r3, #1
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f003 0301 	and.w	r3, r3, #1
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d119      	bne.n	8006fde <HAL_SPI_TransmitReceive+0x2ae>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d014      	beq.n	8006fde <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68da      	ldr	r2, [r3, #12]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbe:	b2d2      	uxtb	r2, r2
 8006fc0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc6:	1c5a      	adds	r2, r3, #1
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006fde:	f7fd fd71 	bl	8004ac4 <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d803      	bhi.n	8006ff6 <HAL_SPI_TransmitReceive+0x2c6>
 8006fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ff4:	d102      	bne.n	8006ffc <HAL_SPI_TransmitReceive+0x2cc>
 8006ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d103      	bne.n	8007004 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007002:	e029      	b.n	8007058 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007008:	b29b      	uxth	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1a2      	bne.n	8006f54 <HAL_SPI_TransmitReceive+0x224>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007012:	b29b      	uxth	r3, r3
 8007014:	2b00      	cmp	r3, #0
 8007016:	d19d      	bne.n	8006f54 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800701a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 f917 	bl	8007250 <SPI_EndRxTxTransaction>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d006      	beq.n	8007036 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2220      	movs	r2, #32
 8007032:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007034:	e010      	b.n	8007058 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10b      	bne.n	8007056 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800703e:	2300      	movs	r3, #0
 8007040:	617b      	str	r3, [r7, #20]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	617b      	str	r3, [r7, #20]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	617b      	str	r3, [r7, #20]
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	e000      	b.n	8007058 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007056:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007068:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800706c:	4618      	mov	r0, r3
 800706e:	3730      	adds	r7, #48	; 0x30
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b088      	sub	sp, #32
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	603b      	str	r3, [r7, #0]
 8007080:	4613      	mov	r3, r2
 8007082:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007084:	f7fd fd1e 	bl	8004ac4 <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708c:	1a9b      	subs	r3, r3, r2
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	4413      	add	r3, r2
 8007092:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007094:	f7fd fd16 	bl	8004ac4 <HAL_GetTick>
 8007098:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800709a:	4b39      	ldr	r3, [pc, #228]	; (8007180 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	015b      	lsls	r3, r3, #5
 80070a0:	0d1b      	lsrs	r3, r3, #20
 80070a2:	69fa      	ldr	r2, [r7, #28]
 80070a4:	fb02 f303 	mul.w	r3, r2, r3
 80070a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070aa:	e054      	b.n	8007156 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070b2:	d050      	beq.n	8007156 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070b4:	f7fd fd06 	bl	8004ac4 <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	69fa      	ldr	r2, [r7, #28]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d902      	bls.n	80070ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d13d      	bne.n	8007146 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80070d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070e2:	d111      	bne.n	8007108 <SPI_WaitFlagStateUntilTimeout+0x94>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070ec:	d004      	beq.n	80070f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070f6:	d107      	bne.n	8007108 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007106:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007110:	d10f      	bne.n	8007132 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007120:	601a      	str	r2, [r3, #0]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007130:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e017      	b.n	8007176 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d101      	bne.n	8007150 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800714c:	2300      	movs	r3, #0
 800714e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	3b01      	subs	r3, #1
 8007154:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	689a      	ldr	r2, [r3, #8]
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	4013      	ands	r3, r2
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	429a      	cmp	r2, r3
 8007164:	bf0c      	ite	eq
 8007166:	2301      	moveq	r3, #1
 8007168:	2300      	movne	r3, #0
 800716a:	b2db      	uxtb	r3, r3
 800716c:	461a      	mov	r2, r3
 800716e:	79fb      	ldrb	r3, [r7, #7]
 8007170:	429a      	cmp	r2, r3
 8007172:	d19b      	bne.n	80070ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3720      	adds	r7, #32
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	200023d8 	.word	0x200023d8

08007184 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af02      	add	r7, sp, #8
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007198:	d111      	bne.n	80071be <SPI_EndRxTransaction+0x3a>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071a2:	d004      	beq.n	80071ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071ac:	d107      	bne.n	80071be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071bc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071c6:	d12a      	bne.n	800721e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071d0:	d012      	beq.n	80071f8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2200      	movs	r2, #0
 80071da:	2180      	movs	r1, #128	; 0x80
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f7ff ff49 	bl	8007074 <SPI_WaitFlagStateUntilTimeout>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d02d      	beq.n	8007244 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ec:	f043 0220 	orr.w	r2, r3, #32
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e026      	b.n	8007246 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	2200      	movs	r2, #0
 8007200:	2101      	movs	r1, #1
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f7ff ff36 	bl	8007074 <SPI_WaitFlagStateUntilTimeout>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d01a      	beq.n	8007244 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007212:	f043 0220 	orr.w	r2, r3, #32
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e013      	b.n	8007246 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2200      	movs	r2, #0
 8007226:	2101      	movs	r1, #1
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f7ff ff23 	bl	8007074 <SPI_WaitFlagStateUntilTimeout>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d007      	beq.n	8007244 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007238:	f043 0220 	orr.w	r2, r3, #32
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e000      	b.n	8007246 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
	...

08007250 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b088      	sub	sp, #32
 8007254:	af02      	add	r7, sp, #8
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800725c:	4b1b      	ldr	r3, [pc, #108]	; (80072cc <SPI_EndRxTxTransaction+0x7c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a1b      	ldr	r2, [pc, #108]	; (80072d0 <SPI_EndRxTxTransaction+0x80>)
 8007262:	fba2 2303 	umull	r2, r3, r2, r3
 8007266:	0d5b      	lsrs	r3, r3, #21
 8007268:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800726c:	fb02 f303 	mul.w	r3, r2, r3
 8007270:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800727a:	d112      	bne.n	80072a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2200      	movs	r2, #0
 8007284:	2180      	movs	r1, #128	; 0x80
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f7ff fef4 	bl	8007074 <SPI_WaitFlagStateUntilTimeout>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d016      	beq.n	80072c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007296:	f043 0220 	orr.w	r2, r3, #32
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e00f      	b.n	80072c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00a      	beq.n	80072be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	3b01      	subs	r3, #1
 80072ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b8:	2b80      	cmp	r3, #128	; 0x80
 80072ba:	d0f2      	beq.n	80072a2 <SPI_EndRxTxTransaction+0x52>
 80072bc:	e000      	b.n	80072c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80072be:	bf00      	nop
  }

  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3718      	adds	r7, #24
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	200023d8 	.word	0x200023d8
 80072d0:	165e9f81 	.word	0x165e9f81

080072d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e041      	b.n	800736a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d106      	bne.n	8007300 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7fd f94c 	bl	8004598 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2202      	movs	r2, #2
 8007304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	3304      	adds	r3, #4
 8007310:	4619      	mov	r1, r3
 8007312:	4610      	mov	r0, r2
 8007314:	f000 fad8 	bl	80078c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3708      	adds	r7, #8
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b082      	sub	sp, #8
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d101      	bne.n	8007384 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e041      	b.n	8007408 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800738a:	b2db      	uxtb	r3, r3
 800738c:	2b00      	cmp	r3, #0
 800738e:	d106      	bne.n	800739e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f839 	bl	8007410 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2202      	movs	r2, #2
 80073a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	3304      	adds	r3, #4
 80073ae:	4619      	mov	r1, r3
 80073b0:	4610      	mov	r0, r2
 80073b2:	f000 fa89 	bl	80078c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007418:	bf00      	nop
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d109      	bne.n	8007448 <HAL_TIM_PWM_Start+0x24>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b01      	cmp	r3, #1
 800743e:	bf14      	ite	ne
 8007440:	2301      	movne	r3, #1
 8007442:	2300      	moveq	r3, #0
 8007444:	b2db      	uxtb	r3, r3
 8007446:	e022      	b.n	800748e <HAL_TIM_PWM_Start+0x6a>
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	2b04      	cmp	r3, #4
 800744c:	d109      	bne.n	8007462 <HAL_TIM_PWM_Start+0x3e>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b01      	cmp	r3, #1
 8007458:	bf14      	ite	ne
 800745a:	2301      	movne	r3, #1
 800745c:	2300      	moveq	r3, #0
 800745e:	b2db      	uxtb	r3, r3
 8007460:	e015      	b.n	800748e <HAL_TIM_PWM_Start+0x6a>
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	2b08      	cmp	r3, #8
 8007466:	d109      	bne.n	800747c <HAL_TIM_PWM_Start+0x58>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800746e:	b2db      	uxtb	r3, r3
 8007470:	2b01      	cmp	r3, #1
 8007472:	bf14      	ite	ne
 8007474:	2301      	movne	r3, #1
 8007476:	2300      	moveq	r3, #0
 8007478:	b2db      	uxtb	r3, r3
 800747a:	e008      	b.n	800748e <HAL_TIM_PWM_Start+0x6a>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007482:	b2db      	uxtb	r3, r3
 8007484:	2b01      	cmp	r3, #1
 8007486:	bf14      	ite	ne
 8007488:	2301      	movne	r3, #1
 800748a:	2300      	moveq	r3, #0
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e07c      	b.n	8007590 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d104      	bne.n	80074a6 <HAL_TIM_PWM_Start+0x82>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2202      	movs	r2, #2
 80074a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074a4:	e013      	b.n	80074ce <HAL_TIM_PWM_Start+0xaa>
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b04      	cmp	r3, #4
 80074aa:	d104      	bne.n	80074b6 <HAL_TIM_PWM_Start+0x92>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2202      	movs	r2, #2
 80074b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074b4:	e00b      	b.n	80074ce <HAL_TIM_PWM_Start+0xaa>
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2b08      	cmp	r3, #8
 80074ba:	d104      	bne.n	80074c6 <HAL_TIM_PWM_Start+0xa2>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2202      	movs	r2, #2
 80074c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074c4:	e003      	b.n	80074ce <HAL_TIM_PWM_Start+0xaa>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2202      	movs	r2, #2
 80074ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2201      	movs	r2, #1
 80074d4:	6839      	ldr	r1, [r7, #0]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 fce0 	bl	8007e9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a2d      	ldr	r2, [pc, #180]	; (8007598 <HAL_TIM_PWM_Start+0x174>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d004      	beq.n	80074f0 <HAL_TIM_PWM_Start+0xcc>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a2c      	ldr	r2, [pc, #176]	; (800759c <HAL_TIM_PWM_Start+0x178>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d101      	bne.n	80074f4 <HAL_TIM_PWM_Start+0xd0>
 80074f0:	2301      	movs	r3, #1
 80074f2:	e000      	b.n	80074f6 <HAL_TIM_PWM_Start+0xd2>
 80074f4:	2300      	movs	r3, #0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d007      	beq.n	800750a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007508:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a22      	ldr	r2, [pc, #136]	; (8007598 <HAL_TIM_PWM_Start+0x174>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d022      	beq.n	800755a <HAL_TIM_PWM_Start+0x136>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800751c:	d01d      	beq.n	800755a <HAL_TIM_PWM_Start+0x136>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a1f      	ldr	r2, [pc, #124]	; (80075a0 <HAL_TIM_PWM_Start+0x17c>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d018      	beq.n	800755a <HAL_TIM_PWM_Start+0x136>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a1d      	ldr	r2, [pc, #116]	; (80075a4 <HAL_TIM_PWM_Start+0x180>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d013      	beq.n	800755a <HAL_TIM_PWM_Start+0x136>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a1c      	ldr	r2, [pc, #112]	; (80075a8 <HAL_TIM_PWM_Start+0x184>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d00e      	beq.n	800755a <HAL_TIM_PWM_Start+0x136>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a16      	ldr	r2, [pc, #88]	; (800759c <HAL_TIM_PWM_Start+0x178>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d009      	beq.n	800755a <HAL_TIM_PWM_Start+0x136>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a18      	ldr	r2, [pc, #96]	; (80075ac <HAL_TIM_PWM_Start+0x188>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d004      	beq.n	800755a <HAL_TIM_PWM_Start+0x136>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a16      	ldr	r2, [pc, #88]	; (80075b0 <HAL_TIM_PWM_Start+0x18c>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d111      	bne.n	800757e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f003 0307 	and.w	r3, r3, #7
 8007564:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2b06      	cmp	r3, #6
 800756a:	d010      	beq.n	800758e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f042 0201 	orr.w	r2, r2, #1
 800757a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800757c:	e007      	b.n	800758e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f042 0201 	orr.w	r2, r2, #1
 800758c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	40010000 	.word	0x40010000
 800759c:	40010400 	.word	0x40010400
 80075a0:	40000400 	.word	0x40000400
 80075a4:	40000800 	.word	0x40000800
 80075a8:	40000c00 	.word	0x40000c00
 80075ac:	40014000 	.word	0x40014000
 80075b0:	40001800 	.word	0x40001800

080075b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075c0:	2300      	movs	r3, #0
 80075c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d101      	bne.n	80075d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80075ce:	2302      	movs	r3, #2
 80075d0:	e0ae      	b.n	8007730 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2b0c      	cmp	r3, #12
 80075de:	f200 809f 	bhi.w	8007720 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80075e2:	a201      	add	r2, pc, #4	; (adr r2, 80075e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80075e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e8:	0800761d 	.word	0x0800761d
 80075ec:	08007721 	.word	0x08007721
 80075f0:	08007721 	.word	0x08007721
 80075f4:	08007721 	.word	0x08007721
 80075f8:	0800765d 	.word	0x0800765d
 80075fc:	08007721 	.word	0x08007721
 8007600:	08007721 	.word	0x08007721
 8007604:	08007721 	.word	0x08007721
 8007608:	0800769f 	.word	0x0800769f
 800760c:	08007721 	.word	0x08007721
 8007610:	08007721 	.word	0x08007721
 8007614:	08007721 	.word	0x08007721
 8007618:	080076df 	.word	0x080076df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68b9      	ldr	r1, [r7, #8]
 8007622:	4618      	mov	r0, r3
 8007624:	f000 f9f0 	bl	8007a08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	699a      	ldr	r2, [r3, #24]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f042 0208 	orr.w	r2, r2, #8
 8007636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	699a      	ldr	r2, [r3, #24]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f022 0204 	bic.w	r2, r2, #4
 8007646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	6999      	ldr	r1, [r3, #24]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	691a      	ldr	r2, [r3, #16]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	430a      	orrs	r2, r1
 8007658:	619a      	str	r2, [r3, #24]
      break;
 800765a:	e064      	b.n	8007726 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68b9      	ldr	r1, [r7, #8]
 8007662:	4618      	mov	r0, r3
 8007664:	f000 fa40 	bl	8007ae8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	699a      	ldr	r2, [r3, #24]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	699a      	ldr	r2, [r3, #24]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6999      	ldr	r1, [r3, #24]
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	021a      	lsls	r2, r3, #8
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	430a      	orrs	r2, r1
 800769a:	619a      	str	r2, [r3, #24]
      break;
 800769c:	e043      	b.n	8007726 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68b9      	ldr	r1, [r7, #8]
 80076a4:	4618      	mov	r0, r3
 80076a6:	f000 fa95 	bl	8007bd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	69da      	ldr	r2, [r3, #28]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f042 0208 	orr.w	r2, r2, #8
 80076b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	69da      	ldr	r2, [r3, #28]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f022 0204 	bic.w	r2, r2, #4
 80076c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	69d9      	ldr	r1, [r3, #28]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	691a      	ldr	r2, [r3, #16]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	430a      	orrs	r2, r1
 80076da:	61da      	str	r2, [r3, #28]
      break;
 80076dc:	e023      	b.n	8007726 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68b9      	ldr	r1, [r7, #8]
 80076e4:	4618      	mov	r0, r3
 80076e6:	f000 fae9 	bl	8007cbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	69da      	ldr	r2, [r3, #28]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69da      	ldr	r2, [r3, #28]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	69d9      	ldr	r1, [r3, #28]
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	021a      	lsls	r2, r3, #8
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	61da      	str	r2, [r3, #28]
      break;
 800771e:	e002      	b.n	8007726 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	75fb      	strb	r3, [r7, #23]
      break;
 8007724:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800772e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007730:	4618      	mov	r0, r3
 8007732:	3718      	adds	r7, #24
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800774c:	2b01      	cmp	r3, #1
 800774e:	d101      	bne.n	8007754 <HAL_TIM_ConfigClockSource+0x1c>
 8007750:	2302      	movs	r3, #2
 8007752:	e0b4      	b.n	80078be <HAL_TIM_ConfigClockSource+0x186>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2202      	movs	r2, #2
 8007760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800777a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800778c:	d03e      	beq.n	800780c <HAL_TIM_ConfigClockSource+0xd4>
 800778e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007792:	f200 8087 	bhi.w	80078a4 <HAL_TIM_ConfigClockSource+0x16c>
 8007796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800779a:	f000 8086 	beq.w	80078aa <HAL_TIM_ConfigClockSource+0x172>
 800779e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077a2:	d87f      	bhi.n	80078a4 <HAL_TIM_ConfigClockSource+0x16c>
 80077a4:	2b70      	cmp	r3, #112	; 0x70
 80077a6:	d01a      	beq.n	80077de <HAL_TIM_ConfigClockSource+0xa6>
 80077a8:	2b70      	cmp	r3, #112	; 0x70
 80077aa:	d87b      	bhi.n	80078a4 <HAL_TIM_ConfigClockSource+0x16c>
 80077ac:	2b60      	cmp	r3, #96	; 0x60
 80077ae:	d050      	beq.n	8007852 <HAL_TIM_ConfigClockSource+0x11a>
 80077b0:	2b60      	cmp	r3, #96	; 0x60
 80077b2:	d877      	bhi.n	80078a4 <HAL_TIM_ConfigClockSource+0x16c>
 80077b4:	2b50      	cmp	r3, #80	; 0x50
 80077b6:	d03c      	beq.n	8007832 <HAL_TIM_ConfigClockSource+0xfa>
 80077b8:	2b50      	cmp	r3, #80	; 0x50
 80077ba:	d873      	bhi.n	80078a4 <HAL_TIM_ConfigClockSource+0x16c>
 80077bc:	2b40      	cmp	r3, #64	; 0x40
 80077be:	d058      	beq.n	8007872 <HAL_TIM_ConfigClockSource+0x13a>
 80077c0:	2b40      	cmp	r3, #64	; 0x40
 80077c2:	d86f      	bhi.n	80078a4 <HAL_TIM_ConfigClockSource+0x16c>
 80077c4:	2b30      	cmp	r3, #48	; 0x30
 80077c6:	d064      	beq.n	8007892 <HAL_TIM_ConfigClockSource+0x15a>
 80077c8:	2b30      	cmp	r3, #48	; 0x30
 80077ca:	d86b      	bhi.n	80078a4 <HAL_TIM_ConfigClockSource+0x16c>
 80077cc:	2b20      	cmp	r3, #32
 80077ce:	d060      	beq.n	8007892 <HAL_TIM_ConfigClockSource+0x15a>
 80077d0:	2b20      	cmp	r3, #32
 80077d2:	d867      	bhi.n	80078a4 <HAL_TIM_ConfigClockSource+0x16c>
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d05c      	beq.n	8007892 <HAL_TIM_ConfigClockSource+0x15a>
 80077d8:	2b10      	cmp	r3, #16
 80077da:	d05a      	beq.n	8007892 <HAL_TIM_ConfigClockSource+0x15a>
 80077dc:	e062      	b.n	80078a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6818      	ldr	r0, [r3, #0]
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	6899      	ldr	r1, [r3, #8]
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	685a      	ldr	r2, [r3, #4]
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	f000 fb35 	bl	8007e5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007800:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	609a      	str	r2, [r3, #8]
      break;
 800780a:	e04f      	b.n	80078ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6818      	ldr	r0, [r3, #0]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	6899      	ldr	r1, [r3, #8]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	f000 fb1e 	bl	8007e5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	689a      	ldr	r2, [r3, #8]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800782e:	609a      	str	r2, [r3, #8]
      break;
 8007830:	e03c      	b.n	80078ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6818      	ldr	r0, [r3, #0]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	6859      	ldr	r1, [r3, #4]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	461a      	mov	r2, r3
 8007840:	f000 fa92 	bl	8007d68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2150      	movs	r1, #80	; 0x50
 800784a:	4618      	mov	r0, r3
 800784c:	f000 faeb 	bl	8007e26 <TIM_ITRx_SetConfig>
      break;
 8007850:	e02c      	b.n	80078ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6818      	ldr	r0, [r3, #0]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	6859      	ldr	r1, [r3, #4]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	461a      	mov	r2, r3
 8007860:	f000 fab1 	bl	8007dc6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2160      	movs	r1, #96	; 0x60
 800786a:	4618      	mov	r0, r3
 800786c:	f000 fadb 	bl	8007e26 <TIM_ITRx_SetConfig>
      break;
 8007870:	e01c      	b.n	80078ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6818      	ldr	r0, [r3, #0]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	6859      	ldr	r1, [r3, #4]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	461a      	mov	r2, r3
 8007880:	f000 fa72 	bl	8007d68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2140      	movs	r1, #64	; 0x40
 800788a:	4618      	mov	r0, r3
 800788c:	f000 facb 	bl	8007e26 <TIM_ITRx_SetConfig>
      break;
 8007890:	e00c      	b.n	80078ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4619      	mov	r1, r3
 800789c:	4610      	mov	r0, r2
 800789e:	f000 fac2 	bl	8007e26 <TIM_ITRx_SetConfig>
      break;
 80078a2:	e003      	b.n	80078ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	73fb      	strb	r3, [r7, #15]
      break;
 80078a8:	e000      	b.n	80078ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80078aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
	...

080078c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a40      	ldr	r2, [pc, #256]	; (80079dc <TIM_Base_SetConfig+0x114>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d013      	beq.n	8007908 <TIM_Base_SetConfig+0x40>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078e6:	d00f      	beq.n	8007908 <TIM_Base_SetConfig+0x40>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a3d      	ldr	r2, [pc, #244]	; (80079e0 <TIM_Base_SetConfig+0x118>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d00b      	beq.n	8007908 <TIM_Base_SetConfig+0x40>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a3c      	ldr	r2, [pc, #240]	; (80079e4 <TIM_Base_SetConfig+0x11c>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d007      	beq.n	8007908 <TIM_Base_SetConfig+0x40>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a3b      	ldr	r2, [pc, #236]	; (80079e8 <TIM_Base_SetConfig+0x120>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d003      	beq.n	8007908 <TIM_Base_SetConfig+0x40>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a3a      	ldr	r2, [pc, #232]	; (80079ec <TIM_Base_SetConfig+0x124>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d108      	bne.n	800791a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800790e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	4313      	orrs	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a2f      	ldr	r2, [pc, #188]	; (80079dc <TIM_Base_SetConfig+0x114>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d02b      	beq.n	800797a <TIM_Base_SetConfig+0xb2>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007928:	d027      	beq.n	800797a <TIM_Base_SetConfig+0xb2>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a2c      	ldr	r2, [pc, #176]	; (80079e0 <TIM_Base_SetConfig+0x118>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d023      	beq.n	800797a <TIM_Base_SetConfig+0xb2>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a2b      	ldr	r2, [pc, #172]	; (80079e4 <TIM_Base_SetConfig+0x11c>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d01f      	beq.n	800797a <TIM_Base_SetConfig+0xb2>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a2a      	ldr	r2, [pc, #168]	; (80079e8 <TIM_Base_SetConfig+0x120>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d01b      	beq.n	800797a <TIM_Base_SetConfig+0xb2>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a29      	ldr	r2, [pc, #164]	; (80079ec <TIM_Base_SetConfig+0x124>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d017      	beq.n	800797a <TIM_Base_SetConfig+0xb2>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a28      	ldr	r2, [pc, #160]	; (80079f0 <TIM_Base_SetConfig+0x128>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d013      	beq.n	800797a <TIM_Base_SetConfig+0xb2>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a27      	ldr	r2, [pc, #156]	; (80079f4 <TIM_Base_SetConfig+0x12c>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d00f      	beq.n	800797a <TIM_Base_SetConfig+0xb2>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a26      	ldr	r2, [pc, #152]	; (80079f8 <TIM_Base_SetConfig+0x130>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d00b      	beq.n	800797a <TIM_Base_SetConfig+0xb2>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a25      	ldr	r2, [pc, #148]	; (80079fc <TIM_Base_SetConfig+0x134>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d007      	beq.n	800797a <TIM_Base_SetConfig+0xb2>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a24      	ldr	r2, [pc, #144]	; (8007a00 <TIM_Base_SetConfig+0x138>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d003      	beq.n	800797a <TIM_Base_SetConfig+0xb2>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a23      	ldr	r2, [pc, #140]	; (8007a04 <TIM_Base_SetConfig+0x13c>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d108      	bne.n	800798c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	4313      	orrs	r3, r2
 800798a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	4313      	orrs	r3, r2
 8007998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	689a      	ldr	r2, [r3, #8]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a0a      	ldr	r2, [pc, #40]	; (80079dc <TIM_Base_SetConfig+0x114>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d003      	beq.n	80079c0 <TIM_Base_SetConfig+0xf8>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a0c      	ldr	r2, [pc, #48]	; (80079ec <TIM_Base_SetConfig+0x124>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d103      	bne.n	80079c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	691a      	ldr	r2, [r3, #16]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	615a      	str	r2, [r3, #20]
}
 80079ce:	bf00      	nop
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	40010000 	.word	0x40010000
 80079e0:	40000400 	.word	0x40000400
 80079e4:	40000800 	.word	0x40000800
 80079e8:	40000c00 	.word	0x40000c00
 80079ec:	40010400 	.word	0x40010400
 80079f0:	40014000 	.word	0x40014000
 80079f4:	40014400 	.word	0x40014400
 80079f8:	40014800 	.word	0x40014800
 80079fc:	40001800 	.word	0x40001800
 8007a00:	40001c00 	.word	0x40001c00
 8007a04:	40002000 	.word	0x40002000

08007a08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b087      	sub	sp, #28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	f023 0201 	bic.w	r2, r3, #1
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f023 0303 	bic.w	r3, r3, #3
 8007a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	f023 0302 	bic.w	r3, r3, #2
 8007a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a20      	ldr	r2, [pc, #128]	; (8007ae0 <TIM_OC1_SetConfig+0xd8>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d003      	beq.n	8007a6c <TIM_OC1_SetConfig+0x64>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a1f      	ldr	r2, [pc, #124]	; (8007ae4 <TIM_OC1_SetConfig+0xdc>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d10c      	bne.n	8007a86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f023 0308 	bic.w	r3, r3, #8
 8007a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	f023 0304 	bic.w	r3, r3, #4
 8007a84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a15      	ldr	r2, [pc, #84]	; (8007ae0 <TIM_OC1_SetConfig+0xd8>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d003      	beq.n	8007a96 <TIM_OC1_SetConfig+0x8e>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a14      	ldr	r2, [pc, #80]	; (8007ae4 <TIM_OC1_SetConfig+0xdc>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d111      	bne.n	8007aba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	699b      	ldr	r3, [r3, #24]
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	697a      	ldr	r2, [r7, #20]
 8007ad2:	621a      	str	r2, [r3, #32]
}
 8007ad4:	bf00      	nop
 8007ad6:	371c      	adds	r7, #28
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	40010000 	.word	0x40010000
 8007ae4:	40010400 	.word	0x40010400

08007ae8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b087      	sub	sp, #28
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a1b      	ldr	r3, [r3, #32]
 8007af6:	f023 0210 	bic.w	r2, r3, #16
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	021b      	lsls	r3, r3, #8
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	f023 0320 	bic.w	r3, r3, #32
 8007b32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	011b      	lsls	r3, r3, #4
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a22      	ldr	r2, [pc, #136]	; (8007bcc <TIM_OC2_SetConfig+0xe4>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d003      	beq.n	8007b50 <TIM_OC2_SetConfig+0x68>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a21      	ldr	r2, [pc, #132]	; (8007bd0 <TIM_OC2_SetConfig+0xe8>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d10d      	bne.n	8007b6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	011b      	lsls	r3, r3, #4
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a17      	ldr	r2, [pc, #92]	; (8007bcc <TIM_OC2_SetConfig+0xe4>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d003      	beq.n	8007b7c <TIM_OC2_SetConfig+0x94>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a16      	ldr	r2, [pc, #88]	; (8007bd0 <TIM_OC2_SetConfig+0xe8>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d113      	bne.n	8007ba4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	695b      	ldr	r3, [r3, #20]
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	693a      	ldr	r2, [r7, #16]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	693a      	ldr	r2, [r7, #16]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	685a      	ldr	r2, [r3, #4]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	621a      	str	r2, [r3, #32]
}
 8007bbe:	bf00      	nop
 8007bc0:	371c      	adds	r7, #28
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	40010000 	.word	0x40010000
 8007bd0:	40010400 	.word	0x40010400

08007bd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b087      	sub	sp, #28
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f023 0303 	bic.w	r3, r3, #3
 8007c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	021b      	lsls	r3, r3, #8
 8007c24:	697a      	ldr	r2, [r7, #20]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a21      	ldr	r2, [pc, #132]	; (8007cb4 <TIM_OC3_SetConfig+0xe0>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d003      	beq.n	8007c3a <TIM_OC3_SetConfig+0x66>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a20      	ldr	r2, [pc, #128]	; (8007cb8 <TIM_OC3_SetConfig+0xe4>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d10d      	bne.n	8007c56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	021b      	lsls	r3, r3, #8
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a16      	ldr	r2, [pc, #88]	; (8007cb4 <TIM_OC3_SetConfig+0xe0>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d003      	beq.n	8007c66 <TIM_OC3_SetConfig+0x92>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a15      	ldr	r2, [pc, #84]	; (8007cb8 <TIM_OC3_SetConfig+0xe4>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d113      	bne.n	8007c8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	011b      	lsls	r3, r3, #4
 8007c7c:	693a      	ldr	r2, [r7, #16]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	011b      	lsls	r3, r3, #4
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	693a      	ldr	r2, [r7, #16]
 8007c92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	685a      	ldr	r2, [r3, #4]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	697a      	ldr	r2, [r7, #20]
 8007ca6:	621a      	str	r2, [r3, #32]
}
 8007ca8:	bf00      	nop
 8007caa:	371c      	adds	r7, #28
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr
 8007cb4:	40010000 	.word	0x40010000
 8007cb8:	40010400 	.word	0x40010400

08007cbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
 8007cca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	69db      	ldr	r3, [r3, #28]
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	021b      	lsls	r3, r3, #8
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	031b      	lsls	r3, r3, #12
 8007d0e:	693a      	ldr	r2, [r7, #16]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a12      	ldr	r2, [pc, #72]	; (8007d60 <TIM_OC4_SetConfig+0xa4>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d003      	beq.n	8007d24 <TIM_OC4_SetConfig+0x68>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a11      	ldr	r2, [pc, #68]	; (8007d64 <TIM_OC4_SetConfig+0xa8>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d109      	bne.n	8007d38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	695b      	ldr	r3, [r3, #20]
 8007d30:	019b      	lsls	r3, r3, #6
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	697a      	ldr	r2, [r7, #20]
 8007d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	685a      	ldr	r2, [r3, #4]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	621a      	str	r2, [r3, #32]
}
 8007d52:	bf00      	nop
 8007d54:	371c      	adds	r7, #28
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	40010000 	.word	0x40010000
 8007d64:	40010400 	.word	0x40010400

08007d68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b087      	sub	sp, #28
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6a1b      	ldr	r3, [r3, #32]
 8007d78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	f023 0201 	bic.w	r2, r3, #1
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	011b      	lsls	r3, r3, #4
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	f023 030a 	bic.w	r3, r3, #10
 8007da4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007da6:	697a      	ldr	r2, [r7, #20]
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	697a      	ldr	r2, [r7, #20]
 8007db8:	621a      	str	r2, [r3, #32]
}
 8007dba:	bf00      	nop
 8007dbc:	371c      	adds	r7, #28
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b087      	sub	sp, #28
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	60f8      	str	r0, [r7, #12]
 8007dce:	60b9      	str	r1, [r7, #8]
 8007dd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6a1b      	ldr	r3, [r3, #32]
 8007dd6:	f023 0210 	bic.w	r2, r3, #16
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6a1b      	ldr	r3, [r3, #32]
 8007de8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007df0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	031b      	lsls	r3, r3, #12
 8007df6:	697a      	ldr	r2, [r7, #20]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	011b      	lsls	r3, r3, #4
 8007e08:	693a      	ldr	r2, [r7, #16]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	697a      	ldr	r2, [r7, #20]
 8007e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	621a      	str	r2, [r3, #32]
}
 8007e1a:	bf00      	nop
 8007e1c:	371c      	adds	r7, #28
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b085      	sub	sp, #20
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
 8007e2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e3e:	683a      	ldr	r2, [r7, #0]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	f043 0307 	orr.w	r3, r3, #7
 8007e48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	609a      	str	r2, [r3, #8]
}
 8007e50:	bf00      	nop
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b087      	sub	sp, #28
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
 8007e68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	021a      	lsls	r2, r3, #8
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	431a      	orrs	r2, r3
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	697a      	ldr	r2, [r7, #20]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	609a      	str	r2, [r3, #8]
}
 8007e90:	bf00      	nop
 8007e92:	371c      	adds	r7, #28
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b087      	sub	sp, #28
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	f003 031f 	and.w	r3, r3, #31
 8007eae:	2201      	movs	r2, #1
 8007eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6a1a      	ldr	r2, [r3, #32]
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	43db      	mvns	r3, r3
 8007ebe:	401a      	ands	r2, r3
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6a1a      	ldr	r2, [r3, #32]
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	f003 031f 	and.w	r3, r3, #31
 8007ece:	6879      	ldr	r1, [r7, #4]
 8007ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	621a      	str	r2, [r3, #32]
}
 8007eda:	bf00      	nop
 8007edc:	371c      	adds	r7, #28
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
	...

08007ee8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d101      	bne.n	8007f00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007efc:	2302      	movs	r3, #2
 8007efe:	e05a      	b.n	8007fb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a21      	ldr	r2, [pc, #132]	; (8007fc4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d022      	beq.n	8007f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f4c:	d01d      	beq.n	8007f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a1d      	ldr	r2, [pc, #116]	; (8007fc8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d018      	beq.n	8007f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a1b      	ldr	r2, [pc, #108]	; (8007fcc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d013      	beq.n	8007f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a1a      	ldr	r2, [pc, #104]	; (8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d00e      	beq.n	8007f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a18      	ldr	r2, [pc, #96]	; (8007fd4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d009      	beq.n	8007f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a17      	ldr	r2, [pc, #92]	; (8007fd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d004      	beq.n	8007f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a15      	ldr	r2, [pc, #84]	; (8007fdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d10c      	bne.n	8007fa4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3714      	adds	r7, #20
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	40010000 	.word	0x40010000
 8007fc8:	40000400 	.word	0x40000400
 8007fcc:	40000800 	.word	0x40000800
 8007fd0:	40000c00 	.word	0x40000c00
 8007fd4:	40010400 	.word	0x40010400
 8007fd8:	40014000 	.word	0x40014000
 8007fdc:	40001800 	.word	0x40001800

08007fe0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007fea:	2300      	movs	r3, #0
 8007fec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d101      	bne.n	8007ffc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	e03d      	b.n	8008078 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	4313      	orrs	r3, r2
 8008010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	4313      	orrs	r3, r2
 800801e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	4313      	orrs	r3, r2
 800802c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4313      	orrs	r3, r2
 800803a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	4313      	orrs	r3, r2
 8008048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	4313      	orrs	r3, r2
 8008056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	69db      	ldr	r3, [r3, #28]
 8008062:	4313      	orrs	r3, r2
 8008064:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3714      	adds	r7, #20
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e03f      	b.n	8008116 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d106      	bne.n	80080b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7fc fb08 	bl	80046c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2224      	movs	r2, #36	; 0x24
 80080b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68da      	ldr	r2, [r3, #12]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 f929 	bl	8008320 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	691a      	ldr	r2, [r3, #16]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	695a      	ldr	r2, [r3, #20]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68da      	ldr	r2, [r3, #12]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2220      	movs	r2, #32
 8008108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2220      	movs	r2, #32
 8008110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3708      	adds	r7, #8
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b08a      	sub	sp, #40	; 0x28
 8008122:	af02      	add	r7, sp, #8
 8008124:	60f8      	str	r0, [r7, #12]
 8008126:	60b9      	str	r1, [r7, #8]
 8008128:	603b      	str	r3, [r7, #0]
 800812a:	4613      	mov	r3, r2
 800812c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800812e:	2300      	movs	r3, #0
 8008130:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b20      	cmp	r3, #32
 800813c:	d17c      	bne.n	8008238 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d002      	beq.n	800814a <HAL_UART_Transmit+0x2c>
 8008144:	88fb      	ldrh	r3, [r7, #6]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d101      	bne.n	800814e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e075      	b.n	800823a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008154:	2b01      	cmp	r3, #1
 8008156:	d101      	bne.n	800815c <HAL_UART_Transmit+0x3e>
 8008158:	2302      	movs	r3, #2
 800815a:	e06e      	b.n	800823a <HAL_UART_Transmit+0x11c>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2221      	movs	r2, #33	; 0x21
 800816e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008172:	f7fc fca7 	bl	8004ac4 <HAL_GetTick>
 8008176:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	88fa      	ldrh	r2, [r7, #6]
 800817c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	88fa      	ldrh	r2, [r7, #6]
 8008182:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800818c:	d108      	bne.n	80081a0 <HAL_UART_Transmit+0x82>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d104      	bne.n	80081a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008196:	2300      	movs	r3, #0
 8008198:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	61bb      	str	r3, [r7, #24]
 800819e:	e003      	b.n	80081a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081a4:	2300      	movs	r3, #0
 80081a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80081b0:	e02a      	b.n	8008208 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	9300      	str	r3, [sp, #0]
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	2200      	movs	r2, #0
 80081ba:	2180      	movs	r1, #128	; 0x80
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f000 f840 	bl	8008242 <UART_WaitOnFlagUntilTimeout>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d001      	beq.n	80081cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80081c8:	2303      	movs	r3, #3
 80081ca:	e036      	b.n	800823a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10b      	bne.n	80081ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	881b      	ldrh	r3, [r3, #0]
 80081d6:	461a      	mov	r2, r3
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	3302      	adds	r3, #2
 80081e6:	61bb      	str	r3, [r7, #24]
 80081e8:	e007      	b.n	80081fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	781a      	ldrb	r2, [r3, #0]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	3301      	adds	r3, #1
 80081f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081fe:	b29b      	uxth	r3, r3
 8008200:	3b01      	subs	r3, #1
 8008202:	b29a      	uxth	r2, r3
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800820c:	b29b      	uxth	r3, r3
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1cf      	bne.n	80081b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	2200      	movs	r2, #0
 800821a:	2140      	movs	r1, #64	; 0x40
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f000 f810 	bl	8008242 <UART_WaitOnFlagUntilTimeout>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d001      	beq.n	800822c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	e006      	b.n	800823a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2220      	movs	r2, #32
 8008230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008234:	2300      	movs	r3, #0
 8008236:	e000      	b.n	800823a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008238:	2302      	movs	r3, #2
  }
}
 800823a:	4618      	mov	r0, r3
 800823c:	3720      	adds	r7, #32
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b090      	sub	sp, #64	; 0x40
 8008246:	af00      	add	r7, sp, #0
 8008248:	60f8      	str	r0, [r7, #12]
 800824a:	60b9      	str	r1, [r7, #8]
 800824c:	603b      	str	r3, [r7, #0]
 800824e:	4613      	mov	r3, r2
 8008250:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008252:	e050      	b.n	80082f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008256:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800825a:	d04c      	beq.n	80082f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800825c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800825e:	2b00      	cmp	r3, #0
 8008260:	d007      	beq.n	8008272 <UART_WaitOnFlagUntilTimeout+0x30>
 8008262:	f7fc fc2f 	bl	8004ac4 <HAL_GetTick>
 8008266:	4602      	mov	r2, r0
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800826e:	429a      	cmp	r2, r3
 8008270:	d241      	bcs.n	80082f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	330c      	adds	r3, #12
 8008278:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827c:	e853 3f00 	ldrex	r3, [r3]
 8008280:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008284:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008288:	63fb      	str	r3, [r7, #60]	; 0x3c
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	330c      	adds	r3, #12
 8008290:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008292:	637a      	str	r2, [r7, #52]	; 0x34
 8008294:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008296:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008298:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800829a:	e841 2300 	strex	r3, r2, [r1]
 800829e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d1e5      	bne.n	8008272 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	3314      	adds	r3, #20
 80082ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	e853 3f00 	ldrex	r3, [r3]
 80082b4:	613b      	str	r3, [r7, #16]
   return(result);
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	f023 0301 	bic.w	r3, r3, #1
 80082bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	3314      	adds	r3, #20
 80082c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082c6:	623a      	str	r2, [r7, #32]
 80082c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ca:	69f9      	ldr	r1, [r7, #28]
 80082cc:	6a3a      	ldr	r2, [r7, #32]
 80082ce:	e841 2300 	strex	r3, r2, [r1]
 80082d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1e5      	bne.n	80082a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2220      	movs	r2, #32
 80082de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2220      	movs	r2, #32
 80082e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80082f2:	2303      	movs	r3, #3
 80082f4:	e00f      	b.n	8008316 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	4013      	ands	r3, r2
 8008300:	68ba      	ldr	r2, [r7, #8]
 8008302:	429a      	cmp	r2, r3
 8008304:	bf0c      	ite	eq
 8008306:	2301      	moveq	r3, #1
 8008308:	2300      	movne	r3, #0
 800830a:	b2db      	uxtb	r3, r3
 800830c:	461a      	mov	r2, r3
 800830e:	79fb      	ldrb	r3, [r7, #7]
 8008310:	429a      	cmp	r2, r3
 8008312:	d09f      	beq.n	8008254 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3740      	adds	r7, #64	; 0x40
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
	...

08008320 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008324:	b0c0      	sub	sp, #256	; 0x100
 8008326:	af00      	add	r7, sp, #0
 8008328:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800832c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800833c:	68d9      	ldr	r1, [r3, #12]
 800833e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	ea40 0301 	orr.w	r3, r0, r1
 8008348:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800834a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800834e:	689a      	ldr	r2, [r3, #8]
 8008350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	431a      	orrs	r2, r3
 8008358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	431a      	orrs	r2, r3
 8008360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	4313      	orrs	r3, r2
 8008368:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800836c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008378:	f021 010c 	bic.w	r1, r1, #12
 800837c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008386:	430b      	orrs	r3, r1
 8008388:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800838a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	695b      	ldr	r3, [r3, #20]
 8008392:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800839a:	6999      	ldr	r1, [r3, #24]
 800839c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	ea40 0301 	orr.w	r3, r0, r1
 80083a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80083a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	4b8f      	ldr	r3, [pc, #572]	; (80085ec <UART_SetConfig+0x2cc>)
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d005      	beq.n	80083c0 <UART_SetConfig+0xa0>
 80083b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	4b8d      	ldr	r3, [pc, #564]	; (80085f0 <UART_SetConfig+0x2d0>)
 80083bc:	429a      	cmp	r2, r3
 80083be:	d104      	bne.n	80083ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80083c0:	f7fd fcfe 	bl	8005dc0 <HAL_RCC_GetPCLK2Freq>
 80083c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80083c8:	e003      	b.n	80083d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80083ca:	f7fd fce5 	bl	8005d98 <HAL_RCC_GetPCLK1Freq>
 80083ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083d6:	69db      	ldr	r3, [r3, #28]
 80083d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083dc:	f040 810c 	bne.w	80085f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80083e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083e4:	2200      	movs	r2, #0
 80083e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80083ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80083ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80083f2:	4622      	mov	r2, r4
 80083f4:	462b      	mov	r3, r5
 80083f6:	1891      	adds	r1, r2, r2
 80083f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80083fa:	415b      	adcs	r3, r3
 80083fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008402:	4621      	mov	r1, r4
 8008404:	eb12 0801 	adds.w	r8, r2, r1
 8008408:	4629      	mov	r1, r5
 800840a:	eb43 0901 	adc.w	r9, r3, r1
 800840e:	f04f 0200 	mov.w	r2, #0
 8008412:	f04f 0300 	mov.w	r3, #0
 8008416:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800841a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800841e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008422:	4690      	mov	r8, r2
 8008424:	4699      	mov	r9, r3
 8008426:	4623      	mov	r3, r4
 8008428:	eb18 0303 	adds.w	r3, r8, r3
 800842c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008430:	462b      	mov	r3, r5
 8008432:	eb49 0303 	adc.w	r3, r9, r3
 8008436:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800843a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008446:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800844a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800844e:	460b      	mov	r3, r1
 8008450:	18db      	adds	r3, r3, r3
 8008452:	653b      	str	r3, [r7, #80]	; 0x50
 8008454:	4613      	mov	r3, r2
 8008456:	eb42 0303 	adc.w	r3, r2, r3
 800845a:	657b      	str	r3, [r7, #84]	; 0x54
 800845c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008460:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008464:	f7f8 fc30 	bl	8000cc8 <__aeabi_uldivmod>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	4b61      	ldr	r3, [pc, #388]	; (80085f4 <UART_SetConfig+0x2d4>)
 800846e:	fba3 2302 	umull	r2, r3, r3, r2
 8008472:	095b      	lsrs	r3, r3, #5
 8008474:	011c      	lsls	r4, r3, #4
 8008476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800847a:	2200      	movs	r2, #0
 800847c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008480:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008484:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008488:	4642      	mov	r2, r8
 800848a:	464b      	mov	r3, r9
 800848c:	1891      	adds	r1, r2, r2
 800848e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008490:	415b      	adcs	r3, r3
 8008492:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008494:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008498:	4641      	mov	r1, r8
 800849a:	eb12 0a01 	adds.w	sl, r2, r1
 800849e:	4649      	mov	r1, r9
 80084a0:	eb43 0b01 	adc.w	fp, r3, r1
 80084a4:	f04f 0200 	mov.w	r2, #0
 80084a8:	f04f 0300 	mov.w	r3, #0
 80084ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80084b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80084b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084b8:	4692      	mov	sl, r2
 80084ba:	469b      	mov	fp, r3
 80084bc:	4643      	mov	r3, r8
 80084be:	eb1a 0303 	adds.w	r3, sl, r3
 80084c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80084c6:	464b      	mov	r3, r9
 80084c8:	eb4b 0303 	adc.w	r3, fp, r3
 80084cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80084d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80084e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80084e4:	460b      	mov	r3, r1
 80084e6:	18db      	adds	r3, r3, r3
 80084e8:	643b      	str	r3, [r7, #64]	; 0x40
 80084ea:	4613      	mov	r3, r2
 80084ec:	eb42 0303 	adc.w	r3, r2, r3
 80084f0:	647b      	str	r3, [r7, #68]	; 0x44
 80084f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80084f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80084fa:	f7f8 fbe5 	bl	8000cc8 <__aeabi_uldivmod>
 80084fe:	4602      	mov	r2, r0
 8008500:	460b      	mov	r3, r1
 8008502:	4611      	mov	r1, r2
 8008504:	4b3b      	ldr	r3, [pc, #236]	; (80085f4 <UART_SetConfig+0x2d4>)
 8008506:	fba3 2301 	umull	r2, r3, r3, r1
 800850a:	095b      	lsrs	r3, r3, #5
 800850c:	2264      	movs	r2, #100	; 0x64
 800850e:	fb02 f303 	mul.w	r3, r2, r3
 8008512:	1acb      	subs	r3, r1, r3
 8008514:	00db      	lsls	r3, r3, #3
 8008516:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800851a:	4b36      	ldr	r3, [pc, #216]	; (80085f4 <UART_SetConfig+0x2d4>)
 800851c:	fba3 2302 	umull	r2, r3, r3, r2
 8008520:	095b      	lsrs	r3, r3, #5
 8008522:	005b      	lsls	r3, r3, #1
 8008524:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008528:	441c      	add	r4, r3
 800852a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800852e:	2200      	movs	r2, #0
 8008530:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008534:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008538:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800853c:	4642      	mov	r2, r8
 800853e:	464b      	mov	r3, r9
 8008540:	1891      	adds	r1, r2, r2
 8008542:	63b9      	str	r1, [r7, #56]	; 0x38
 8008544:	415b      	adcs	r3, r3
 8008546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008548:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800854c:	4641      	mov	r1, r8
 800854e:	1851      	adds	r1, r2, r1
 8008550:	6339      	str	r1, [r7, #48]	; 0x30
 8008552:	4649      	mov	r1, r9
 8008554:	414b      	adcs	r3, r1
 8008556:	637b      	str	r3, [r7, #52]	; 0x34
 8008558:	f04f 0200 	mov.w	r2, #0
 800855c:	f04f 0300 	mov.w	r3, #0
 8008560:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008564:	4659      	mov	r1, fp
 8008566:	00cb      	lsls	r3, r1, #3
 8008568:	4651      	mov	r1, sl
 800856a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800856e:	4651      	mov	r1, sl
 8008570:	00ca      	lsls	r2, r1, #3
 8008572:	4610      	mov	r0, r2
 8008574:	4619      	mov	r1, r3
 8008576:	4603      	mov	r3, r0
 8008578:	4642      	mov	r2, r8
 800857a:	189b      	adds	r3, r3, r2
 800857c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008580:	464b      	mov	r3, r9
 8008582:	460a      	mov	r2, r1
 8008584:	eb42 0303 	adc.w	r3, r2, r3
 8008588:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800858c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008598:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800859c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80085a0:	460b      	mov	r3, r1
 80085a2:	18db      	adds	r3, r3, r3
 80085a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80085a6:	4613      	mov	r3, r2
 80085a8:	eb42 0303 	adc.w	r3, r2, r3
 80085ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80085b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80085b6:	f7f8 fb87 	bl	8000cc8 <__aeabi_uldivmod>
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	4b0d      	ldr	r3, [pc, #52]	; (80085f4 <UART_SetConfig+0x2d4>)
 80085c0:	fba3 1302 	umull	r1, r3, r3, r2
 80085c4:	095b      	lsrs	r3, r3, #5
 80085c6:	2164      	movs	r1, #100	; 0x64
 80085c8:	fb01 f303 	mul.w	r3, r1, r3
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	00db      	lsls	r3, r3, #3
 80085d0:	3332      	adds	r3, #50	; 0x32
 80085d2:	4a08      	ldr	r2, [pc, #32]	; (80085f4 <UART_SetConfig+0x2d4>)
 80085d4:	fba2 2303 	umull	r2, r3, r2, r3
 80085d8:	095b      	lsrs	r3, r3, #5
 80085da:	f003 0207 	and.w	r2, r3, #7
 80085de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4422      	add	r2, r4
 80085e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80085e8:	e105      	b.n	80087f6 <UART_SetConfig+0x4d6>
 80085ea:	bf00      	nop
 80085ec:	40011000 	.word	0x40011000
 80085f0:	40011400 	.word	0x40011400
 80085f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085fc:	2200      	movs	r2, #0
 80085fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008602:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008606:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800860a:	4642      	mov	r2, r8
 800860c:	464b      	mov	r3, r9
 800860e:	1891      	adds	r1, r2, r2
 8008610:	6239      	str	r1, [r7, #32]
 8008612:	415b      	adcs	r3, r3
 8008614:	627b      	str	r3, [r7, #36]	; 0x24
 8008616:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800861a:	4641      	mov	r1, r8
 800861c:	1854      	adds	r4, r2, r1
 800861e:	4649      	mov	r1, r9
 8008620:	eb43 0501 	adc.w	r5, r3, r1
 8008624:	f04f 0200 	mov.w	r2, #0
 8008628:	f04f 0300 	mov.w	r3, #0
 800862c:	00eb      	lsls	r3, r5, #3
 800862e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008632:	00e2      	lsls	r2, r4, #3
 8008634:	4614      	mov	r4, r2
 8008636:	461d      	mov	r5, r3
 8008638:	4643      	mov	r3, r8
 800863a:	18e3      	adds	r3, r4, r3
 800863c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008640:	464b      	mov	r3, r9
 8008642:	eb45 0303 	adc.w	r3, r5, r3
 8008646:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800864a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008656:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800865a:	f04f 0200 	mov.w	r2, #0
 800865e:	f04f 0300 	mov.w	r3, #0
 8008662:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008666:	4629      	mov	r1, r5
 8008668:	008b      	lsls	r3, r1, #2
 800866a:	4621      	mov	r1, r4
 800866c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008670:	4621      	mov	r1, r4
 8008672:	008a      	lsls	r2, r1, #2
 8008674:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008678:	f7f8 fb26 	bl	8000cc8 <__aeabi_uldivmod>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	4b60      	ldr	r3, [pc, #384]	; (8008804 <UART_SetConfig+0x4e4>)
 8008682:	fba3 2302 	umull	r2, r3, r3, r2
 8008686:	095b      	lsrs	r3, r3, #5
 8008688:	011c      	lsls	r4, r3, #4
 800868a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800868e:	2200      	movs	r2, #0
 8008690:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008694:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008698:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800869c:	4642      	mov	r2, r8
 800869e:	464b      	mov	r3, r9
 80086a0:	1891      	adds	r1, r2, r2
 80086a2:	61b9      	str	r1, [r7, #24]
 80086a4:	415b      	adcs	r3, r3
 80086a6:	61fb      	str	r3, [r7, #28]
 80086a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086ac:	4641      	mov	r1, r8
 80086ae:	1851      	adds	r1, r2, r1
 80086b0:	6139      	str	r1, [r7, #16]
 80086b2:	4649      	mov	r1, r9
 80086b4:	414b      	adcs	r3, r1
 80086b6:	617b      	str	r3, [r7, #20]
 80086b8:	f04f 0200 	mov.w	r2, #0
 80086bc:	f04f 0300 	mov.w	r3, #0
 80086c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80086c4:	4659      	mov	r1, fp
 80086c6:	00cb      	lsls	r3, r1, #3
 80086c8:	4651      	mov	r1, sl
 80086ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086ce:	4651      	mov	r1, sl
 80086d0:	00ca      	lsls	r2, r1, #3
 80086d2:	4610      	mov	r0, r2
 80086d4:	4619      	mov	r1, r3
 80086d6:	4603      	mov	r3, r0
 80086d8:	4642      	mov	r2, r8
 80086da:	189b      	adds	r3, r3, r2
 80086dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80086e0:	464b      	mov	r3, r9
 80086e2:	460a      	mov	r2, r1
 80086e4:	eb42 0303 	adc.w	r3, r2, r3
 80086e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80086ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80086f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80086f8:	f04f 0200 	mov.w	r2, #0
 80086fc:	f04f 0300 	mov.w	r3, #0
 8008700:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008704:	4649      	mov	r1, r9
 8008706:	008b      	lsls	r3, r1, #2
 8008708:	4641      	mov	r1, r8
 800870a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800870e:	4641      	mov	r1, r8
 8008710:	008a      	lsls	r2, r1, #2
 8008712:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008716:	f7f8 fad7 	bl	8000cc8 <__aeabi_uldivmod>
 800871a:	4602      	mov	r2, r0
 800871c:	460b      	mov	r3, r1
 800871e:	4b39      	ldr	r3, [pc, #228]	; (8008804 <UART_SetConfig+0x4e4>)
 8008720:	fba3 1302 	umull	r1, r3, r3, r2
 8008724:	095b      	lsrs	r3, r3, #5
 8008726:	2164      	movs	r1, #100	; 0x64
 8008728:	fb01 f303 	mul.w	r3, r1, r3
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	011b      	lsls	r3, r3, #4
 8008730:	3332      	adds	r3, #50	; 0x32
 8008732:	4a34      	ldr	r2, [pc, #208]	; (8008804 <UART_SetConfig+0x4e4>)
 8008734:	fba2 2303 	umull	r2, r3, r2, r3
 8008738:	095b      	lsrs	r3, r3, #5
 800873a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800873e:	441c      	add	r4, r3
 8008740:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008744:	2200      	movs	r2, #0
 8008746:	673b      	str	r3, [r7, #112]	; 0x70
 8008748:	677a      	str	r2, [r7, #116]	; 0x74
 800874a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800874e:	4642      	mov	r2, r8
 8008750:	464b      	mov	r3, r9
 8008752:	1891      	adds	r1, r2, r2
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	415b      	adcs	r3, r3
 8008758:	60fb      	str	r3, [r7, #12]
 800875a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800875e:	4641      	mov	r1, r8
 8008760:	1851      	adds	r1, r2, r1
 8008762:	6039      	str	r1, [r7, #0]
 8008764:	4649      	mov	r1, r9
 8008766:	414b      	adcs	r3, r1
 8008768:	607b      	str	r3, [r7, #4]
 800876a:	f04f 0200 	mov.w	r2, #0
 800876e:	f04f 0300 	mov.w	r3, #0
 8008772:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008776:	4659      	mov	r1, fp
 8008778:	00cb      	lsls	r3, r1, #3
 800877a:	4651      	mov	r1, sl
 800877c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008780:	4651      	mov	r1, sl
 8008782:	00ca      	lsls	r2, r1, #3
 8008784:	4610      	mov	r0, r2
 8008786:	4619      	mov	r1, r3
 8008788:	4603      	mov	r3, r0
 800878a:	4642      	mov	r2, r8
 800878c:	189b      	adds	r3, r3, r2
 800878e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008790:	464b      	mov	r3, r9
 8008792:	460a      	mov	r2, r1
 8008794:	eb42 0303 	adc.w	r3, r2, r3
 8008798:	66fb      	str	r3, [r7, #108]	; 0x6c
 800879a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	663b      	str	r3, [r7, #96]	; 0x60
 80087a4:	667a      	str	r2, [r7, #100]	; 0x64
 80087a6:	f04f 0200 	mov.w	r2, #0
 80087aa:	f04f 0300 	mov.w	r3, #0
 80087ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80087b2:	4649      	mov	r1, r9
 80087b4:	008b      	lsls	r3, r1, #2
 80087b6:	4641      	mov	r1, r8
 80087b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087bc:	4641      	mov	r1, r8
 80087be:	008a      	lsls	r2, r1, #2
 80087c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80087c4:	f7f8 fa80 	bl	8000cc8 <__aeabi_uldivmod>
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	4b0d      	ldr	r3, [pc, #52]	; (8008804 <UART_SetConfig+0x4e4>)
 80087ce:	fba3 1302 	umull	r1, r3, r3, r2
 80087d2:	095b      	lsrs	r3, r3, #5
 80087d4:	2164      	movs	r1, #100	; 0x64
 80087d6:	fb01 f303 	mul.w	r3, r1, r3
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	011b      	lsls	r3, r3, #4
 80087de:	3332      	adds	r3, #50	; 0x32
 80087e0:	4a08      	ldr	r2, [pc, #32]	; (8008804 <UART_SetConfig+0x4e4>)
 80087e2:	fba2 2303 	umull	r2, r3, r2, r3
 80087e6:	095b      	lsrs	r3, r3, #5
 80087e8:	f003 020f 	and.w	r2, r3, #15
 80087ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4422      	add	r2, r4
 80087f4:	609a      	str	r2, [r3, #8]
}
 80087f6:	bf00      	nop
 80087f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80087fc:	46bd      	mov	sp, r7
 80087fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008802:	bf00      	nop
 8008804:	51eb851f 	.word	0x51eb851f

08008808 <__errno>:
 8008808:	4b01      	ldr	r3, [pc, #4]	; (8008810 <__errno+0x8>)
 800880a:	6818      	ldr	r0, [r3, #0]
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	200023e4 	.word	0x200023e4

08008814 <__libc_init_array>:
 8008814:	b570      	push	{r4, r5, r6, lr}
 8008816:	4d0d      	ldr	r5, [pc, #52]	; (800884c <__libc_init_array+0x38>)
 8008818:	4c0d      	ldr	r4, [pc, #52]	; (8008850 <__libc_init_array+0x3c>)
 800881a:	1b64      	subs	r4, r4, r5
 800881c:	10a4      	asrs	r4, r4, #2
 800881e:	2600      	movs	r6, #0
 8008820:	42a6      	cmp	r6, r4
 8008822:	d109      	bne.n	8008838 <__libc_init_array+0x24>
 8008824:	4d0b      	ldr	r5, [pc, #44]	; (8008854 <__libc_init_array+0x40>)
 8008826:	4c0c      	ldr	r4, [pc, #48]	; (8008858 <__libc_init_array+0x44>)
 8008828:	f002 ff64 	bl	800b6f4 <_init>
 800882c:	1b64      	subs	r4, r4, r5
 800882e:	10a4      	asrs	r4, r4, #2
 8008830:	2600      	movs	r6, #0
 8008832:	42a6      	cmp	r6, r4
 8008834:	d105      	bne.n	8008842 <__libc_init_array+0x2e>
 8008836:	bd70      	pop	{r4, r5, r6, pc}
 8008838:	f855 3b04 	ldr.w	r3, [r5], #4
 800883c:	4798      	blx	r3
 800883e:	3601      	adds	r6, #1
 8008840:	e7ee      	b.n	8008820 <__libc_init_array+0xc>
 8008842:	f855 3b04 	ldr.w	r3, [r5], #4
 8008846:	4798      	blx	r3
 8008848:	3601      	adds	r6, #1
 800884a:	e7f2      	b.n	8008832 <__libc_init_array+0x1e>
 800884c:	0800bd24 	.word	0x0800bd24
 8008850:	0800bd24 	.word	0x0800bd24
 8008854:	0800bd24 	.word	0x0800bd24
 8008858:	0800bd28 	.word	0x0800bd28

0800885c <malloc>:
 800885c:	4b02      	ldr	r3, [pc, #8]	; (8008868 <malloc+0xc>)
 800885e:	4601      	mov	r1, r0
 8008860:	6818      	ldr	r0, [r3, #0]
 8008862:	f000 b87f 	b.w	8008964 <_malloc_r>
 8008866:	bf00      	nop
 8008868:	200023e4 	.word	0x200023e4

0800886c <free>:
 800886c:	4b02      	ldr	r3, [pc, #8]	; (8008878 <free+0xc>)
 800886e:	4601      	mov	r1, r0
 8008870:	6818      	ldr	r0, [r3, #0]
 8008872:	f000 b80b 	b.w	800888c <_free_r>
 8008876:	bf00      	nop
 8008878:	200023e4 	.word	0x200023e4

0800887c <memset>:
 800887c:	4402      	add	r2, r0
 800887e:	4603      	mov	r3, r0
 8008880:	4293      	cmp	r3, r2
 8008882:	d100      	bne.n	8008886 <memset+0xa>
 8008884:	4770      	bx	lr
 8008886:	f803 1b01 	strb.w	r1, [r3], #1
 800888a:	e7f9      	b.n	8008880 <memset+0x4>

0800888c <_free_r>:
 800888c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800888e:	2900      	cmp	r1, #0
 8008890:	d044      	beq.n	800891c <_free_r+0x90>
 8008892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008896:	9001      	str	r0, [sp, #4]
 8008898:	2b00      	cmp	r3, #0
 800889a:	f1a1 0404 	sub.w	r4, r1, #4
 800889e:	bfb8      	it	lt
 80088a0:	18e4      	addlt	r4, r4, r3
 80088a2:	f001 fc0d 	bl	800a0c0 <__malloc_lock>
 80088a6:	4a1e      	ldr	r2, [pc, #120]	; (8008920 <_free_r+0x94>)
 80088a8:	9801      	ldr	r0, [sp, #4]
 80088aa:	6813      	ldr	r3, [r2, #0]
 80088ac:	b933      	cbnz	r3, 80088bc <_free_r+0x30>
 80088ae:	6063      	str	r3, [r4, #4]
 80088b0:	6014      	str	r4, [r2, #0]
 80088b2:	b003      	add	sp, #12
 80088b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088b8:	f001 bc08 	b.w	800a0cc <__malloc_unlock>
 80088bc:	42a3      	cmp	r3, r4
 80088be:	d908      	bls.n	80088d2 <_free_r+0x46>
 80088c0:	6825      	ldr	r5, [r4, #0]
 80088c2:	1961      	adds	r1, r4, r5
 80088c4:	428b      	cmp	r3, r1
 80088c6:	bf01      	itttt	eq
 80088c8:	6819      	ldreq	r1, [r3, #0]
 80088ca:	685b      	ldreq	r3, [r3, #4]
 80088cc:	1949      	addeq	r1, r1, r5
 80088ce:	6021      	streq	r1, [r4, #0]
 80088d0:	e7ed      	b.n	80088ae <_free_r+0x22>
 80088d2:	461a      	mov	r2, r3
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	b10b      	cbz	r3, 80088dc <_free_r+0x50>
 80088d8:	42a3      	cmp	r3, r4
 80088da:	d9fa      	bls.n	80088d2 <_free_r+0x46>
 80088dc:	6811      	ldr	r1, [r2, #0]
 80088de:	1855      	adds	r5, r2, r1
 80088e0:	42a5      	cmp	r5, r4
 80088e2:	d10b      	bne.n	80088fc <_free_r+0x70>
 80088e4:	6824      	ldr	r4, [r4, #0]
 80088e6:	4421      	add	r1, r4
 80088e8:	1854      	adds	r4, r2, r1
 80088ea:	42a3      	cmp	r3, r4
 80088ec:	6011      	str	r1, [r2, #0]
 80088ee:	d1e0      	bne.n	80088b2 <_free_r+0x26>
 80088f0:	681c      	ldr	r4, [r3, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	6053      	str	r3, [r2, #4]
 80088f6:	4421      	add	r1, r4
 80088f8:	6011      	str	r1, [r2, #0]
 80088fa:	e7da      	b.n	80088b2 <_free_r+0x26>
 80088fc:	d902      	bls.n	8008904 <_free_r+0x78>
 80088fe:	230c      	movs	r3, #12
 8008900:	6003      	str	r3, [r0, #0]
 8008902:	e7d6      	b.n	80088b2 <_free_r+0x26>
 8008904:	6825      	ldr	r5, [r4, #0]
 8008906:	1961      	adds	r1, r4, r5
 8008908:	428b      	cmp	r3, r1
 800890a:	bf04      	itt	eq
 800890c:	6819      	ldreq	r1, [r3, #0]
 800890e:	685b      	ldreq	r3, [r3, #4]
 8008910:	6063      	str	r3, [r4, #4]
 8008912:	bf04      	itt	eq
 8008914:	1949      	addeq	r1, r1, r5
 8008916:	6021      	streq	r1, [r4, #0]
 8008918:	6054      	str	r4, [r2, #4]
 800891a:	e7ca      	b.n	80088b2 <_free_r+0x26>
 800891c:	b003      	add	sp, #12
 800891e:	bd30      	pop	{r4, r5, pc}
 8008920:	20002a20 	.word	0x20002a20

08008924 <sbrk_aligned>:
 8008924:	b570      	push	{r4, r5, r6, lr}
 8008926:	4e0e      	ldr	r6, [pc, #56]	; (8008960 <sbrk_aligned+0x3c>)
 8008928:	460c      	mov	r4, r1
 800892a:	6831      	ldr	r1, [r6, #0]
 800892c:	4605      	mov	r5, r0
 800892e:	b911      	cbnz	r1, 8008936 <sbrk_aligned+0x12>
 8008930:	f000 fcf6 	bl	8009320 <_sbrk_r>
 8008934:	6030      	str	r0, [r6, #0]
 8008936:	4621      	mov	r1, r4
 8008938:	4628      	mov	r0, r5
 800893a:	f000 fcf1 	bl	8009320 <_sbrk_r>
 800893e:	1c43      	adds	r3, r0, #1
 8008940:	d00a      	beq.n	8008958 <sbrk_aligned+0x34>
 8008942:	1cc4      	adds	r4, r0, #3
 8008944:	f024 0403 	bic.w	r4, r4, #3
 8008948:	42a0      	cmp	r0, r4
 800894a:	d007      	beq.n	800895c <sbrk_aligned+0x38>
 800894c:	1a21      	subs	r1, r4, r0
 800894e:	4628      	mov	r0, r5
 8008950:	f000 fce6 	bl	8009320 <_sbrk_r>
 8008954:	3001      	adds	r0, #1
 8008956:	d101      	bne.n	800895c <sbrk_aligned+0x38>
 8008958:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800895c:	4620      	mov	r0, r4
 800895e:	bd70      	pop	{r4, r5, r6, pc}
 8008960:	20002a24 	.word	0x20002a24

08008964 <_malloc_r>:
 8008964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008968:	1ccd      	adds	r5, r1, #3
 800896a:	f025 0503 	bic.w	r5, r5, #3
 800896e:	3508      	adds	r5, #8
 8008970:	2d0c      	cmp	r5, #12
 8008972:	bf38      	it	cc
 8008974:	250c      	movcc	r5, #12
 8008976:	2d00      	cmp	r5, #0
 8008978:	4607      	mov	r7, r0
 800897a:	db01      	blt.n	8008980 <_malloc_r+0x1c>
 800897c:	42a9      	cmp	r1, r5
 800897e:	d905      	bls.n	800898c <_malloc_r+0x28>
 8008980:	230c      	movs	r3, #12
 8008982:	603b      	str	r3, [r7, #0]
 8008984:	2600      	movs	r6, #0
 8008986:	4630      	mov	r0, r6
 8008988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800898c:	4e2e      	ldr	r6, [pc, #184]	; (8008a48 <_malloc_r+0xe4>)
 800898e:	f001 fb97 	bl	800a0c0 <__malloc_lock>
 8008992:	6833      	ldr	r3, [r6, #0]
 8008994:	461c      	mov	r4, r3
 8008996:	bb34      	cbnz	r4, 80089e6 <_malloc_r+0x82>
 8008998:	4629      	mov	r1, r5
 800899a:	4638      	mov	r0, r7
 800899c:	f7ff ffc2 	bl	8008924 <sbrk_aligned>
 80089a0:	1c43      	adds	r3, r0, #1
 80089a2:	4604      	mov	r4, r0
 80089a4:	d14d      	bne.n	8008a42 <_malloc_r+0xde>
 80089a6:	6834      	ldr	r4, [r6, #0]
 80089a8:	4626      	mov	r6, r4
 80089aa:	2e00      	cmp	r6, #0
 80089ac:	d140      	bne.n	8008a30 <_malloc_r+0xcc>
 80089ae:	6823      	ldr	r3, [r4, #0]
 80089b0:	4631      	mov	r1, r6
 80089b2:	4638      	mov	r0, r7
 80089b4:	eb04 0803 	add.w	r8, r4, r3
 80089b8:	f000 fcb2 	bl	8009320 <_sbrk_r>
 80089bc:	4580      	cmp	r8, r0
 80089be:	d13a      	bne.n	8008a36 <_malloc_r+0xd2>
 80089c0:	6821      	ldr	r1, [r4, #0]
 80089c2:	3503      	adds	r5, #3
 80089c4:	1a6d      	subs	r5, r5, r1
 80089c6:	f025 0503 	bic.w	r5, r5, #3
 80089ca:	3508      	adds	r5, #8
 80089cc:	2d0c      	cmp	r5, #12
 80089ce:	bf38      	it	cc
 80089d0:	250c      	movcc	r5, #12
 80089d2:	4629      	mov	r1, r5
 80089d4:	4638      	mov	r0, r7
 80089d6:	f7ff ffa5 	bl	8008924 <sbrk_aligned>
 80089da:	3001      	adds	r0, #1
 80089dc:	d02b      	beq.n	8008a36 <_malloc_r+0xd2>
 80089de:	6823      	ldr	r3, [r4, #0]
 80089e0:	442b      	add	r3, r5
 80089e2:	6023      	str	r3, [r4, #0]
 80089e4:	e00e      	b.n	8008a04 <_malloc_r+0xa0>
 80089e6:	6822      	ldr	r2, [r4, #0]
 80089e8:	1b52      	subs	r2, r2, r5
 80089ea:	d41e      	bmi.n	8008a2a <_malloc_r+0xc6>
 80089ec:	2a0b      	cmp	r2, #11
 80089ee:	d916      	bls.n	8008a1e <_malloc_r+0xba>
 80089f0:	1961      	adds	r1, r4, r5
 80089f2:	42a3      	cmp	r3, r4
 80089f4:	6025      	str	r5, [r4, #0]
 80089f6:	bf18      	it	ne
 80089f8:	6059      	strne	r1, [r3, #4]
 80089fa:	6863      	ldr	r3, [r4, #4]
 80089fc:	bf08      	it	eq
 80089fe:	6031      	streq	r1, [r6, #0]
 8008a00:	5162      	str	r2, [r4, r5]
 8008a02:	604b      	str	r3, [r1, #4]
 8008a04:	4638      	mov	r0, r7
 8008a06:	f104 060b 	add.w	r6, r4, #11
 8008a0a:	f001 fb5f 	bl	800a0cc <__malloc_unlock>
 8008a0e:	f026 0607 	bic.w	r6, r6, #7
 8008a12:	1d23      	adds	r3, r4, #4
 8008a14:	1af2      	subs	r2, r6, r3
 8008a16:	d0b6      	beq.n	8008986 <_malloc_r+0x22>
 8008a18:	1b9b      	subs	r3, r3, r6
 8008a1a:	50a3      	str	r3, [r4, r2]
 8008a1c:	e7b3      	b.n	8008986 <_malloc_r+0x22>
 8008a1e:	6862      	ldr	r2, [r4, #4]
 8008a20:	42a3      	cmp	r3, r4
 8008a22:	bf0c      	ite	eq
 8008a24:	6032      	streq	r2, [r6, #0]
 8008a26:	605a      	strne	r2, [r3, #4]
 8008a28:	e7ec      	b.n	8008a04 <_malloc_r+0xa0>
 8008a2a:	4623      	mov	r3, r4
 8008a2c:	6864      	ldr	r4, [r4, #4]
 8008a2e:	e7b2      	b.n	8008996 <_malloc_r+0x32>
 8008a30:	4634      	mov	r4, r6
 8008a32:	6876      	ldr	r6, [r6, #4]
 8008a34:	e7b9      	b.n	80089aa <_malloc_r+0x46>
 8008a36:	230c      	movs	r3, #12
 8008a38:	603b      	str	r3, [r7, #0]
 8008a3a:	4638      	mov	r0, r7
 8008a3c:	f001 fb46 	bl	800a0cc <__malloc_unlock>
 8008a40:	e7a1      	b.n	8008986 <_malloc_r+0x22>
 8008a42:	6025      	str	r5, [r4, #0]
 8008a44:	e7de      	b.n	8008a04 <_malloc_r+0xa0>
 8008a46:	bf00      	nop
 8008a48:	20002a20 	.word	0x20002a20

08008a4c <__cvt>:
 8008a4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a50:	ec55 4b10 	vmov	r4, r5, d0
 8008a54:	2d00      	cmp	r5, #0
 8008a56:	460e      	mov	r6, r1
 8008a58:	4619      	mov	r1, r3
 8008a5a:	462b      	mov	r3, r5
 8008a5c:	bfbb      	ittet	lt
 8008a5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008a62:	461d      	movlt	r5, r3
 8008a64:	2300      	movge	r3, #0
 8008a66:	232d      	movlt	r3, #45	; 0x2d
 8008a68:	700b      	strb	r3, [r1, #0]
 8008a6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008a70:	4691      	mov	r9, r2
 8008a72:	f023 0820 	bic.w	r8, r3, #32
 8008a76:	bfbc      	itt	lt
 8008a78:	4622      	movlt	r2, r4
 8008a7a:	4614      	movlt	r4, r2
 8008a7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a80:	d005      	beq.n	8008a8e <__cvt+0x42>
 8008a82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008a86:	d100      	bne.n	8008a8a <__cvt+0x3e>
 8008a88:	3601      	adds	r6, #1
 8008a8a:	2102      	movs	r1, #2
 8008a8c:	e000      	b.n	8008a90 <__cvt+0x44>
 8008a8e:	2103      	movs	r1, #3
 8008a90:	ab03      	add	r3, sp, #12
 8008a92:	9301      	str	r3, [sp, #4]
 8008a94:	ab02      	add	r3, sp, #8
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	ec45 4b10 	vmov	d0, r4, r5
 8008a9c:	4653      	mov	r3, sl
 8008a9e:	4632      	mov	r2, r6
 8008aa0:	f000 fd0e 	bl	80094c0 <_dtoa_r>
 8008aa4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008aa8:	4607      	mov	r7, r0
 8008aaa:	d102      	bne.n	8008ab2 <__cvt+0x66>
 8008aac:	f019 0f01 	tst.w	r9, #1
 8008ab0:	d022      	beq.n	8008af8 <__cvt+0xac>
 8008ab2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ab6:	eb07 0906 	add.w	r9, r7, r6
 8008aba:	d110      	bne.n	8008ade <__cvt+0x92>
 8008abc:	783b      	ldrb	r3, [r7, #0]
 8008abe:	2b30      	cmp	r3, #48	; 0x30
 8008ac0:	d10a      	bne.n	8008ad8 <__cvt+0x8c>
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	4629      	mov	r1, r5
 8008aca:	f7f8 f81d 	bl	8000b08 <__aeabi_dcmpeq>
 8008ace:	b918      	cbnz	r0, 8008ad8 <__cvt+0x8c>
 8008ad0:	f1c6 0601 	rsb	r6, r6, #1
 8008ad4:	f8ca 6000 	str.w	r6, [sl]
 8008ad8:	f8da 3000 	ldr.w	r3, [sl]
 8008adc:	4499      	add	r9, r3
 8008ade:	2200      	movs	r2, #0
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	4629      	mov	r1, r5
 8008ae6:	f7f8 f80f 	bl	8000b08 <__aeabi_dcmpeq>
 8008aea:	b108      	cbz	r0, 8008af0 <__cvt+0xa4>
 8008aec:	f8cd 900c 	str.w	r9, [sp, #12]
 8008af0:	2230      	movs	r2, #48	; 0x30
 8008af2:	9b03      	ldr	r3, [sp, #12]
 8008af4:	454b      	cmp	r3, r9
 8008af6:	d307      	bcc.n	8008b08 <__cvt+0xbc>
 8008af8:	9b03      	ldr	r3, [sp, #12]
 8008afa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008afc:	1bdb      	subs	r3, r3, r7
 8008afe:	4638      	mov	r0, r7
 8008b00:	6013      	str	r3, [r2, #0]
 8008b02:	b004      	add	sp, #16
 8008b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b08:	1c59      	adds	r1, r3, #1
 8008b0a:	9103      	str	r1, [sp, #12]
 8008b0c:	701a      	strb	r2, [r3, #0]
 8008b0e:	e7f0      	b.n	8008af2 <__cvt+0xa6>

08008b10 <__exponent>:
 8008b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b12:	4603      	mov	r3, r0
 8008b14:	2900      	cmp	r1, #0
 8008b16:	bfb8      	it	lt
 8008b18:	4249      	neglt	r1, r1
 8008b1a:	f803 2b02 	strb.w	r2, [r3], #2
 8008b1e:	bfb4      	ite	lt
 8008b20:	222d      	movlt	r2, #45	; 0x2d
 8008b22:	222b      	movge	r2, #43	; 0x2b
 8008b24:	2909      	cmp	r1, #9
 8008b26:	7042      	strb	r2, [r0, #1]
 8008b28:	dd2a      	ble.n	8008b80 <__exponent+0x70>
 8008b2a:	f10d 0407 	add.w	r4, sp, #7
 8008b2e:	46a4      	mov	ip, r4
 8008b30:	270a      	movs	r7, #10
 8008b32:	46a6      	mov	lr, r4
 8008b34:	460a      	mov	r2, r1
 8008b36:	fb91 f6f7 	sdiv	r6, r1, r7
 8008b3a:	fb07 1516 	mls	r5, r7, r6, r1
 8008b3e:	3530      	adds	r5, #48	; 0x30
 8008b40:	2a63      	cmp	r2, #99	; 0x63
 8008b42:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008b46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008b4a:	4631      	mov	r1, r6
 8008b4c:	dcf1      	bgt.n	8008b32 <__exponent+0x22>
 8008b4e:	3130      	adds	r1, #48	; 0x30
 8008b50:	f1ae 0502 	sub.w	r5, lr, #2
 8008b54:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008b58:	1c44      	adds	r4, r0, #1
 8008b5a:	4629      	mov	r1, r5
 8008b5c:	4561      	cmp	r1, ip
 8008b5e:	d30a      	bcc.n	8008b76 <__exponent+0x66>
 8008b60:	f10d 0209 	add.w	r2, sp, #9
 8008b64:	eba2 020e 	sub.w	r2, r2, lr
 8008b68:	4565      	cmp	r5, ip
 8008b6a:	bf88      	it	hi
 8008b6c:	2200      	movhi	r2, #0
 8008b6e:	4413      	add	r3, r2
 8008b70:	1a18      	subs	r0, r3, r0
 8008b72:	b003      	add	sp, #12
 8008b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b7a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008b7e:	e7ed      	b.n	8008b5c <__exponent+0x4c>
 8008b80:	2330      	movs	r3, #48	; 0x30
 8008b82:	3130      	adds	r1, #48	; 0x30
 8008b84:	7083      	strb	r3, [r0, #2]
 8008b86:	70c1      	strb	r1, [r0, #3]
 8008b88:	1d03      	adds	r3, r0, #4
 8008b8a:	e7f1      	b.n	8008b70 <__exponent+0x60>

08008b8c <_printf_float>:
 8008b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b90:	ed2d 8b02 	vpush	{d8}
 8008b94:	b08d      	sub	sp, #52	; 0x34
 8008b96:	460c      	mov	r4, r1
 8008b98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008b9c:	4616      	mov	r6, r2
 8008b9e:	461f      	mov	r7, r3
 8008ba0:	4605      	mov	r5, r0
 8008ba2:	f001 fa7b 	bl	800a09c <_localeconv_r>
 8008ba6:	f8d0 a000 	ldr.w	sl, [r0]
 8008baa:	4650      	mov	r0, sl
 8008bac:	f7f7 fb30 	bl	8000210 <strlen>
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	930a      	str	r3, [sp, #40]	; 0x28
 8008bb4:	6823      	ldr	r3, [r4, #0]
 8008bb6:	9305      	str	r3, [sp, #20]
 8008bb8:	f8d8 3000 	ldr.w	r3, [r8]
 8008bbc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008bc0:	3307      	adds	r3, #7
 8008bc2:	f023 0307 	bic.w	r3, r3, #7
 8008bc6:	f103 0208 	add.w	r2, r3, #8
 8008bca:	f8c8 2000 	str.w	r2, [r8]
 8008bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008bd6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008bda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008bde:	9307      	str	r3, [sp, #28]
 8008be0:	f8cd 8018 	str.w	r8, [sp, #24]
 8008be4:	ee08 0a10 	vmov	s16, r0
 8008be8:	4b9f      	ldr	r3, [pc, #636]	; (8008e68 <_printf_float+0x2dc>)
 8008bea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bf2:	f7f7 ffbb 	bl	8000b6c <__aeabi_dcmpun>
 8008bf6:	bb88      	cbnz	r0, 8008c5c <_printf_float+0xd0>
 8008bf8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bfc:	4b9a      	ldr	r3, [pc, #616]	; (8008e68 <_printf_float+0x2dc>)
 8008bfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c02:	f7f7 ff95 	bl	8000b30 <__aeabi_dcmple>
 8008c06:	bb48      	cbnz	r0, 8008c5c <_printf_float+0xd0>
 8008c08:	2200      	movs	r2, #0
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	4640      	mov	r0, r8
 8008c0e:	4649      	mov	r1, r9
 8008c10:	f7f7 ff84 	bl	8000b1c <__aeabi_dcmplt>
 8008c14:	b110      	cbz	r0, 8008c1c <_printf_float+0x90>
 8008c16:	232d      	movs	r3, #45	; 0x2d
 8008c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c1c:	4b93      	ldr	r3, [pc, #588]	; (8008e6c <_printf_float+0x2e0>)
 8008c1e:	4894      	ldr	r0, [pc, #592]	; (8008e70 <_printf_float+0x2e4>)
 8008c20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008c24:	bf94      	ite	ls
 8008c26:	4698      	movls	r8, r3
 8008c28:	4680      	movhi	r8, r0
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	6123      	str	r3, [r4, #16]
 8008c2e:	9b05      	ldr	r3, [sp, #20]
 8008c30:	f023 0204 	bic.w	r2, r3, #4
 8008c34:	6022      	str	r2, [r4, #0]
 8008c36:	f04f 0900 	mov.w	r9, #0
 8008c3a:	9700      	str	r7, [sp, #0]
 8008c3c:	4633      	mov	r3, r6
 8008c3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008c40:	4621      	mov	r1, r4
 8008c42:	4628      	mov	r0, r5
 8008c44:	f000 f9d8 	bl	8008ff8 <_printf_common>
 8008c48:	3001      	adds	r0, #1
 8008c4a:	f040 8090 	bne.w	8008d6e <_printf_float+0x1e2>
 8008c4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c52:	b00d      	add	sp, #52	; 0x34
 8008c54:	ecbd 8b02 	vpop	{d8}
 8008c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c5c:	4642      	mov	r2, r8
 8008c5e:	464b      	mov	r3, r9
 8008c60:	4640      	mov	r0, r8
 8008c62:	4649      	mov	r1, r9
 8008c64:	f7f7 ff82 	bl	8000b6c <__aeabi_dcmpun>
 8008c68:	b140      	cbz	r0, 8008c7c <_printf_float+0xf0>
 8008c6a:	464b      	mov	r3, r9
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	bfbc      	itt	lt
 8008c70:	232d      	movlt	r3, #45	; 0x2d
 8008c72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008c76:	487f      	ldr	r0, [pc, #508]	; (8008e74 <_printf_float+0x2e8>)
 8008c78:	4b7f      	ldr	r3, [pc, #508]	; (8008e78 <_printf_float+0x2ec>)
 8008c7a:	e7d1      	b.n	8008c20 <_printf_float+0x94>
 8008c7c:	6863      	ldr	r3, [r4, #4]
 8008c7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008c82:	9206      	str	r2, [sp, #24]
 8008c84:	1c5a      	adds	r2, r3, #1
 8008c86:	d13f      	bne.n	8008d08 <_printf_float+0x17c>
 8008c88:	2306      	movs	r3, #6
 8008c8a:	6063      	str	r3, [r4, #4]
 8008c8c:	9b05      	ldr	r3, [sp, #20]
 8008c8e:	6861      	ldr	r1, [r4, #4]
 8008c90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008c94:	2300      	movs	r3, #0
 8008c96:	9303      	str	r3, [sp, #12]
 8008c98:	ab0a      	add	r3, sp, #40	; 0x28
 8008c9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008c9e:	ab09      	add	r3, sp, #36	; 0x24
 8008ca0:	ec49 8b10 	vmov	d0, r8, r9
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	6022      	str	r2, [r4, #0]
 8008ca8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008cac:	4628      	mov	r0, r5
 8008cae:	f7ff fecd 	bl	8008a4c <__cvt>
 8008cb2:	9b06      	ldr	r3, [sp, #24]
 8008cb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cb6:	2b47      	cmp	r3, #71	; 0x47
 8008cb8:	4680      	mov	r8, r0
 8008cba:	d108      	bne.n	8008cce <_printf_float+0x142>
 8008cbc:	1cc8      	adds	r0, r1, #3
 8008cbe:	db02      	blt.n	8008cc6 <_printf_float+0x13a>
 8008cc0:	6863      	ldr	r3, [r4, #4]
 8008cc2:	4299      	cmp	r1, r3
 8008cc4:	dd41      	ble.n	8008d4a <_printf_float+0x1be>
 8008cc6:	f1ab 0b02 	sub.w	fp, fp, #2
 8008cca:	fa5f fb8b 	uxtb.w	fp, fp
 8008cce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008cd2:	d820      	bhi.n	8008d16 <_printf_float+0x18a>
 8008cd4:	3901      	subs	r1, #1
 8008cd6:	465a      	mov	r2, fp
 8008cd8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008cdc:	9109      	str	r1, [sp, #36]	; 0x24
 8008cde:	f7ff ff17 	bl	8008b10 <__exponent>
 8008ce2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ce4:	1813      	adds	r3, r2, r0
 8008ce6:	2a01      	cmp	r2, #1
 8008ce8:	4681      	mov	r9, r0
 8008cea:	6123      	str	r3, [r4, #16]
 8008cec:	dc02      	bgt.n	8008cf4 <_printf_float+0x168>
 8008cee:	6822      	ldr	r2, [r4, #0]
 8008cf0:	07d2      	lsls	r2, r2, #31
 8008cf2:	d501      	bpl.n	8008cf8 <_printf_float+0x16c>
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	6123      	str	r3, [r4, #16]
 8008cf8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d09c      	beq.n	8008c3a <_printf_float+0xae>
 8008d00:	232d      	movs	r3, #45	; 0x2d
 8008d02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d06:	e798      	b.n	8008c3a <_printf_float+0xae>
 8008d08:	9a06      	ldr	r2, [sp, #24]
 8008d0a:	2a47      	cmp	r2, #71	; 0x47
 8008d0c:	d1be      	bne.n	8008c8c <_printf_float+0x100>
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1bc      	bne.n	8008c8c <_printf_float+0x100>
 8008d12:	2301      	movs	r3, #1
 8008d14:	e7b9      	b.n	8008c8a <_printf_float+0xfe>
 8008d16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008d1a:	d118      	bne.n	8008d4e <_printf_float+0x1c2>
 8008d1c:	2900      	cmp	r1, #0
 8008d1e:	6863      	ldr	r3, [r4, #4]
 8008d20:	dd0b      	ble.n	8008d3a <_printf_float+0x1ae>
 8008d22:	6121      	str	r1, [r4, #16]
 8008d24:	b913      	cbnz	r3, 8008d2c <_printf_float+0x1a0>
 8008d26:	6822      	ldr	r2, [r4, #0]
 8008d28:	07d0      	lsls	r0, r2, #31
 8008d2a:	d502      	bpl.n	8008d32 <_printf_float+0x1a6>
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	440b      	add	r3, r1
 8008d30:	6123      	str	r3, [r4, #16]
 8008d32:	65a1      	str	r1, [r4, #88]	; 0x58
 8008d34:	f04f 0900 	mov.w	r9, #0
 8008d38:	e7de      	b.n	8008cf8 <_printf_float+0x16c>
 8008d3a:	b913      	cbnz	r3, 8008d42 <_printf_float+0x1b6>
 8008d3c:	6822      	ldr	r2, [r4, #0]
 8008d3e:	07d2      	lsls	r2, r2, #31
 8008d40:	d501      	bpl.n	8008d46 <_printf_float+0x1ba>
 8008d42:	3302      	adds	r3, #2
 8008d44:	e7f4      	b.n	8008d30 <_printf_float+0x1a4>
 8008d46:	2301      	movs	r3, #1
 8008d48:	e7f2      	b.n	8008d30 <_printf_float+0x1a4>
 8008d4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d50:	4299      	cmp	r1, r3
 8008d52:	db05      	blt.n	8008d60 <_printf_float+0x1d4>
 8008d54:	6823      	ldr	r3, [r4, #0]
 8008d56:	6121      	str	r1, [r4, #16]
 8008d58:	07d8      	lsls	r0, r3, #31
 8008d5a:	d5ea      	bpl.n	8008d32 <_printf_float+0x1a6>
 8008d5c:	1c4b      	adds	r3, r1, #1
 8008d5e:	e7e7      	b.n	8008d30 <_printf_float+0x1a4>
 8008d60:	2900      	cmp	r1, #0
 8008d62:	bfd4      	ite	le
 8008d64:	f1c1 0202 	rsble	r2, r1, #2
 8008d68:	2201      	movgt	r2, #1
 8008d6a:	4413      	add	r3, r2
 8008d6c:	e7e0      	b.n	8008d30 <_printf_float+0x1a4>
 8008d6e:	6823      	ldr	r3, [r4, #0]
 8008d70:	055a      	lsls	r2, r3, #21
 8008d72:	d407      	bmi.n	8008d84 <_printf_float+0x1f8>
 8008d74:	6923      	ldr	r3, [r4, #16]
 8008d76:	4642      	mov	r2, r8
 8008d78:	4631      	mov	r1, r6
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	47b8      	blx	r7
 8008d7e:	3001      	adds	r0, #1
 8008d80:	d12c      	bne.n	8008ddc <_printf_float+0x250>
 8008d82:	e764      	b.n	8008c4e <_printf_float+0xc2>
 8008d84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d88:	f240 80e0 	bls.w	8008f4c <_printf_float+0x3c0>
 8008d8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d90:	2200      	movs	r2, #0
 8008d92:	2300      	movs	r3, #0
 8008d94:	f7f7 feb8 	bl	8000b08 <__aeabi_dcmpeq>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	d034      	beq.n	8008e06 <_printf_float+0x27a>
 8008d9c:	4a37      	ldr	r2, [pc, #220]	; (8008e7c <_printf_float+0x2f0>)
 8008d9e:	2301      	movs	r3, #1
 8008da0:	4631      	mov	r1, r6
 8008da2:	4628      	mov	r0, r5
 8008da4:	47b8      	blx	r7
 8008da6:	3001      	adds	r0, #1
 8008da8:	f43f af51 	beq.w	8008c4e <_printf_float+0xc2>
 8008dac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008db0:	429a      	cmp	r2, r3
 8008db2:	db02      	blt.n	8008dba <_printf_float+0x22e>
 8008db4:	6823      	ldr	r3, [r4, #0]
 8008db6:	07d8      	lsls	r0, r3, #31
 8008db8:	d510      	bpl.n	8008ddc <_printf_float+0x250>
 8008dba:	ee18 3a10 	vmov	r3, s16
 8008dbe:	4652      	mov	r2, sl
 8008dc0:	4631      	mov	r1, r6
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	47b8      	blx	r7
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	f43f af41 	beq.w	8008c4e <_printf_float+0xc2>
 8008dcc:	f04f 0800 	mov.w	r8, #0
 8008dd0:	f104 091a 	add.w	r9, r4, #26
 8008dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	4543      	cmp	r3, r8
 8008dda:	dc09      	bgt.n	8008df0 <_printf_float+0x264>
 8008ddc:	6823      	ldr	r3, [r4, #0]
 8008dde:	079b      	lsls	r3, r3, #30
 8008de0:	f100 8105 	bmi.w	8008fee <_printf_float+0x462>
 8008de4:	68e0      	ldr	r0, [r4, #12]
 8008de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008de8:	4298      	cmp	r0, r3
 8008dea:	bfb8      	it	lt
 8008dec:	4618      	movlt	r0, r3
 8008dee:	e730      	b.n	8008c52 <_printf_float+0xc6>
 8008df0:	2301      	movs	r3, #1
 8008df2:	464a      	mov	r2, r9
 8008df4:	4631      	mov	r1, r6
 8008df6:	4628      	mov	r0, r5
 8008df8:	47b8      	blx	r7
 8008dfa:	3001      	adds	r0, #1
 8008dfc:	f43f af27 	beq.w	8008c4e <_printf_float+0xc2>
 8008e00:	f108 0801 	add.w	r8, r8, #1
 8008e04:	e7e6      	b.n	8008dd4 <_printf_float+0x248>
 8008e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	dc39      	bgt.n	8008e80 <_printf_float+0x2f4>
 8008e0c:	4a1b      	ldr	r2, [pc, #108]	; (8008e7c <_printf_float+0x2f0>)
 8008e0e:	2301      	movs	r3, #1
 8008e10:	4631      	mov	r1, r6
 8008e12:	4628      	mov	r0, r5
 8008e14:	47b8      	blx	r7
 8008e16:	3001      	adds	r0, #1
 8008e18:	f43f af19 	beq.w	8008c4e <_printf_float+0xc2>
 8008e1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e20:	4313      	orrs	r3, r2
 8008e22:	d102      	bne.n	8008e2a <_printf_float+0x29e>
 8008e24:	6823      	ldr	r3, [r4, #0]
 8008e26:	07d9      	lsls	r1, r3, #31
 8008e28:	d5d8      	bpl.n	8008ddc <_printf_float+0x250>
 8008e2a:	ee18 3a10 	vmov	r3, s16
 8008e2e:	4652      	mov	r2, sl
 8008e30:	4631      	mov	r1, r6
 8008e32:	4628      	mov	r0, r5
 8008e34:	47b8      	blx	r7
 8008e36:	3001      	adds	r0, #1
 8008e38:	f43f af09 	beq.w	8008c4e <_printf_float+0xc2>
 8008e3c:	f04f 0900 	mov.w	r9, #0
 8008e40:	f104 0a1a 	add.w	sl, r4, #26
 8008e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e46:	425b      	negs	r3, r3
 8008e48:	454b      	cmp	r3, r9
 8008e4a:	dc01      	bgt.n	8008e50 <_printf_float+0x2c4>
 8008e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e4e:	e792      	b.n	8008d76 <_printf_float+0x1ea>
 8008e50:	2301      	movs	r3, #1
 8008e52:	4652      	mov	r2, sl
 8008e54:	4631      	mov	r1, r6
 8008e56:	4628      	mov	r0, r5
 8008e58:	47b8      	blx	r7
 8008e5a:	3001      	adds	r0, #1
 8008e5c:	f43f aef7 	beq.w	8008c4e <_printf_float+0xc2>
 8008e60:	f109 0901 	add.w	r9, r9, #1
 8008e64:	e7ee      	b.n	8008e44 <_printf_float+0x2b8>
 8008e66:	bf00      	nop
 8008e68:	7fefffff 	.word	0x7fefffff
 8008e6c:	0800b948 	.word	0x0800b948
 8008e70:	0800b94c 	.word	0x0800b94c
 8008e74:	0800b954 	.word	0x0800b954
 8008e78:	0800b950 	.word	0x0800b950
 8008e7c:	0800b958 	.word	0x0800b958
 8008e80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e84:	429a      	cmp	r2, r3
 8008e86:	bfa8      	it	ge
 8008e88:	461a      	movge	r2, r3
 8008e8a:	2a00      	cmp	r2, #0
 8008e8c:	4691      	mov	r9, r2
 8008e8e:	dc37      	bgt.n	8008f00 <_printf_float+0x374>
 8008e90:	f04f 0b00 	mov.w	fp, #0
 8008e94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e98:	f104 021a 	add.w	r2, r4, #26
 8008e9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e9e:	9305      	str	r3, [sp, #20]
 8008ea0:	eba3 0309 	sub.w	r3, r3, r9
 8008ea4:	455b      	cmp	r3, fp
 8008ea6:	dc33      	bgt.n	8008f10 <_printf_float+0x384>
 8008ea8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008eac:	429a      	cmp	r2, r3
 8008eae:	db3b      	blt.n	8008f28 <_printf_float+0x39c>
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	07da      	lsls	r2, r3, #31
 8008eb4:	d438      	bmi.n	8008f28 <_printf_float+0x39c>
 8008eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eb8:	9a05      	ldr	r2, [sp, #20]
 8008eba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ebc:	1a9a      	subs	r2, r3, r2
 8008ebe:	eba3 0901 	sub.w	r9, r3, r1
 8008ec2:	4591      	cmp	r9, r2
 8008ec4:	bfa8      	it	ge
 8008ec6:	4691      	movge	r9, r2
 8008ec8:	f1b9 0f00 	cmp.w	r9, #0
 8008ecc:	dc35      	bgt.n	8008f3a <_printf_float+0x3ae>
 8008ece:	f04f 0800 	mov.w	r8, #0
 8008ed2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ed6:	f104 0a1a 	add.w	sl, r4, #26
 8008eda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ede:	1a9b      	subs	r3, r3, r2
 8008ee0:	eba3 0309 	sub.w	r3, r3, r9
 8008ee4:	4543      	cmp	r3, r8
 8008ee6:	f77f af79 	ble.w	8008ddc <_printf_float+0x250>
 8008eea:	2301      	movs	r3, #1
 8008eec:	4652      	mov	r2, sl
 8008eee:	4631      	mov	r1, r6
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	47b8      	blx	r7
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	f43f aeaa 	beq.w	8008c4e <_printf_float+0xc2>
 8008efa:	f108 0801 	add.w	r8, r8, #1
 8008efe:	e7ec      	b.n	8008eda <_printf_float+0x34e>
 8008f00:	4613      	mov	r3, r2
 8008f02:	4631      	mov	r1, r6
 8008f04:	4642      	mov	r2, r8
 8008f06:	4628      	mov	r0, r5
 8008f08:	47b8      	blx	r7
 8008f0a:	3001      	adds	r0, #1
 8008f0c:	d1c0      	bne.n	8008e90 <_printf_float+0x304>
 8008f0e:	e69e      	b.n	8008c4e <_printf_float+0xc2>
 8008f10:	2301      	movs	r3, #1
 8008f12:	4631      	mov	r1, r6
 8008f14:	4628      	mov	r0, r5
 8008f16:	9205      	str	r2, [sp, #20]
 8008f18:	47b8      	blx	r7
 8008f1a:	3001      	adds	r0, #1
 8008f1c:	f43f ae97 	beq.w	8008c4e <_printf_float+0xc2>
 8008f20:	9a05      	ldr	r2, [sp, #20]
 8008f22:	f10b 0b01 	add.w	fp, fp, #1
 8008f26:	e7b9      	b.n	8008e9c <_printf_float+0x310>
 8008f28:	ee18 3a10 	vmov	r3, s16
 8008f2c:	4652      	mov	r2, sl
 8008f2e:	4631      	mov	r1, r6
 8008f30:	4628      	mov	r0, r5
 8008f32:	47b8      	blx	r7
 8008f34:	3001      	adds	r0, #1
 8008f36:	d1be      	bne.n	8008eb6 <_printf_float+0x32a>
 8008f38:	e689      	b.n	8008c4e <_printf_float+0xc2>
 8008f3a:	9a05      	ldr	r2, [sp, #20]
 8008f3c:	464b      	mov	r3, r9
 8008f3e:	4442      	add	r2, r8
 8008f40:	4631      	mov	r1, r6
 8008f42:	4628      	mov	r0, r5
 8008f44:	47b8      	blx	r7
 8008f46:	3001      	adds	r0, #1
 8008f48:	d1c1      	bne.n	8008ece <_printf_float+0x342>
 8008f4a:	e680      	b.n	8008c4e <_printf_float+0xc2>
 8008f4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f4e:	2a01      	cmp	r2, #1
 8008f50:	dc01      	bgt.n	8008f56 <_printf_float+0x3ca>
 8008f52:	07db      	lsls	r3, r3, #31
 8008f54:	d538      	bpl.n	8008fc8 <_printf_float+0x43c>
 8008f56:	2301      	movs	r3, #1
 8008f58:	4642      	mov	r2, r8
 8008f5a:	4631      	mov	r1, r6
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	47b8      	blx	r7
 8008f60:	3001      	adds	r0, #1
 8008f62:	f43f ae74 	beq.w	8008c4e <_printf_float+0xc2>
 8008f66:	ee18 3a10 	vmov	r3, s16
 8008f6a:	4652      	mov	r2, sl
 8008f6c:	4631      	mov	r1, r6
 8008f6e:	4628      	mov	r0, r5
 8008f70:	47b8      	blx	r7
 8008f72:	3001      	adds	r0, #1
 8008f74:	f43f ae6b 	beq.w	8008c4e <_printf_float+0xc2>
 8008f78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	2300      	movs	r3, #0
 8008f80:	f7f7 fdc2 	bl	8000b08 <__aeabi_dcmpeq>
 8008f84:	b9d8      	cbnz	r0, 8008fbe <_printf_float+0x432>
 8008f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f88:	f108 0201 	add.w	r2, r8, #1
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	4631      	mov	r1, r6
 8008f90:	4628      	mov	r0, r5
 8008f92:	47b8      	blx	r7
 8008f94:	3001      	adds	r0, #1
 8008f96:	d10e      	bne.n	8008fb6 <_printf_float+0x42a>
 8008f98:	e659      	b.n	8008c4e <_printf_float+0xc2>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	4652      	mov	r2, sl
 8008f9e:	4631      	mov	r1, r6
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	47b8      	blx	r7
 8008fa4:	3001      	adds	r0, #1
 8008fa6:	f43f ae52 	beq.w	8008c4e <_printf_float+0xc2>
 8008faa:	f108 0801 	add.w	r8, r8, #1
 8008fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	4543      	cmp	r3, r8
 8008fb4:	dcf1      	bgt.n	8008f9a <_printf_float+0x40e>
 8008fb6:	464b      	mov	r3, r9
 8008fb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008fbc:	e6dc      	b.n	8008d78 <_printf_float+0x1ec>
 8008fbe:	f04f 0800 	mov.w	r8, #0
 8008fc2:	f104 0a1a 	add.w	sl, r4, #26
 8008fc6:	e7f2      	b.n	8008fae <_printf_float+0x422>
 8008fc8:	2301      	movs	r3, #1
 8008fca:	4642      	mov	r2, r8
 8008fcc:	e7df      	b.n	8008f8e <_printf_float+0x402>
 8008fce:	2301      	movs	r3, #1
 8008fd0:	464a      	mov	r2, r9
 8008fd2:	4631      	mov	r1, r6
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	47b8      	blx	r7
 8008fd8:	3001      	adds	r0, #1
 8008fda:	f43f ae38 	beq.w	8008c4e <_printf_float+0xc2>
 8008fde:	f108 0801 	add.w	r8, r8, #1
 8008fe2:	68e3      	ldr	r3, [r4, #12]
 8008fe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fe6:	1a5b      	subs	r3, r3, r1
 8008fe8:	4543      	cmp	r3, r8
 8008fea:	dcf0      	bgt.n	8008fce <_printf_float+0x442>
 8008fec:	e6fa      	b.n	8008de4 <_printf_float+0x258>
 8008fee:	f04f 0800 	mov.w	r8, #0
 8008ff2:	f104 0919 	add.w	r9, r4, #25
 8008ff6:	e7f4      	b.n	8008fe2 <_printf_float+0x456>

08008ff8 <_printf_common>:
 8008ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ffc:	4616      	mov	r6, r2
 8008ffe:	4699      	mov	r9, r3
 8009000:	688a      	ldr	r2, [r1, #8]
 8009002:	690b      	ldr	r3, [r1, #16]
 8009004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009008:	4293      	cmp	r3, r2
 800900a:	bfb8      	it	lt
 800900c:	4613      	movlt	r3, r2
 800900e:	6033      	str	r3, [r6, #0]
 8009010:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009014:	4607      	mov	r7, r0
 8009016:	460c      	mov	r4, r1
 8009018:	b10a      	cbz	r2, 800901e <_printf_common+0x26>
 800901a:	3301      	adds	r3, #1
 800901c:	6033      	str	r3, [r6, #0]
 800901e:	6823      	ldr	r3, [r4, #0]
 8009020:	0699      	lsls	r1, r3, #26
 8009022:	bf42      	ittt	mi
 8009024:	6833      	ldrmi	r3, [r6, #0]
 8009026:	3302      	addmi	r3, #2
 8009028:	6033      	strmi	r3, [r6, #0]
 800902a:	6825      	ldr	r5, [r4, #0]
 800902c:	f015 0506 	ands.w	r5, r5, #6
 8009030:	d106      	bne.n	8009040 <_printf_common+0x48>
 8009032:	f104 0a19 	add.w	sl, r4, #25
 8009036:	68e3      	ldr	r3, [r4, #12]
 8009038:	6832      	ldr	r2, [r6, #0]
 800903a:	1a9b      	subs	r3, r3, r2
 800903c:	42ab      	cmp	r3, r5
 800903e:	dc26      	bgt.n	800908e <_printf_common+0x96>
 8009040:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009044:	1e13      	subs	r3, r2, #0
 8009046:	6822      	ldr	r2, [r4, #0]
 8009048:	bf18      	it	ne
 800904a:	2301      	movne	r3, #1
 800904c:	0692      	lsls	r2, r2, #26
 800904e:	d42b      	bmi.n	80090a8 <_printf_common+0xb0>
 8009050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009054:	4649      	mov	r1, r9
 8009056:	4638      	mov	r0, r7
 8009058:	47c0      	blx	r8
 800905a:	3001      	adds	r0, #1
 800905c:	d01e      	beq.n	800909c <_printf_common+0xa4>
 800905e:	6823      	ldr	r3, [r4, #0]
 8009060:	68e5      	ldr	r5, [r4, #12]
 8009062:	6832      	ldr	r2, [r6, #0]
 8009064:	f003 0306 	and.w	r3, r3, #6
 8009068:	2b04      	cmp	r3, #4
 800906a:	bf08      	it	eq
 800906c:	1aad      	subeq	r5, r5, r2
 800906e:	68a3      	ldr	r3, [r4, #8]
 8009070:	6922      	ldr	r2, [r4, #16]
 8009072:	bf0c      	ite	eq
 8009074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009078:	2500      	movne	r5, #0
 800907a:	4293      	cmp	r3, r2
 800907c:	bfc4      	itt	gt
 800907e:	1a9b      	subgt	r3, r3, r2
 8009080:	18ed      	addgt	r5, r5, r3
 8009082:	2600      	movs	r6, #0
 8009084:	341a      	adds	r4, #26
 8009086:	42b5      	cmp	r5, r6
 8009088:	d11a      	bne.n	80090c0 <_printf_common+0xc8>
 800908a:	2000      	movs	r0, #0
 800908c:	e008      	b.n	80090a0 <_printf_common+0xa8>
 800908e:	2301      	movs	r3, #1
 8009090:	4652      	mov	r2, sl
 8009092:	4649      	mov	r1, r9
 8009094:	4638      	mov	r0, r7
 8009096:	47c0      	blx	r8
 8009098:	3001      	adds	r0, #1
 800909a:	d103      	bne.n	80090a4 <_printf_common+0xac>
 800909c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090a4:	3501      	adds	r5, #1
 80090a6:	e7c6      	b.n	8009036 <_printf_common+0x3e>
 80090a8:	18e1      	adds	r1, r4, r3
 80090aa:	1c5a      	adds	r2, r3, #1
 80090ac:	2030      	movs	r0, #48	; 0x30
 80090ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090b2:	4422      	add	r2, r4
 80090b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090bc:	3302      	adds	r3, #2
 80090be:	e7c7      	b.n	8009050 <_printf_common+0x58>
 80090c0:	2301      	movs	r3, #1
 80090c2:	4622      	mov	r2, r4
 80090c4:	4649      	mov	r1, r9
 80090c6:	4638      	mov	r0, r7
 80090c8:	47c0      	blx	r8
 80090ca:	3001      	adds	r0, #1
 80090cc:	d0e6      	beq.n	800909c <_printf_common+0xa4>
 80090ce:	3601      	adds	r6, #1
 80090d0:	e7d9      	b.n	8009086 <_printf_common+0x8e>
	...

080090d4 <_printf_i>:
 80090d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090d8:	7e0f      	ldrb	r7, [r1, #24]
 80090da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090dc:	2f78      	cmp	r7, #120	; 0x78
 80090de:	4691      	mov	r9, r2
 80090e0:	4680      	mov	r8, r0
 80090e2:	460c      	mov	r4, r1
 80090e4:	469a      	mov	sl, r3
 80090e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80090ea:	d807      	bhi.n	80090fc <_printf_i+0x28>
 80090ec:	2f62      	cmp	r7, #98	; 0x62
 80090ee:	d80a      	bhi.n	8009106 <_printf_i+0x32>
 80090f0:	2f00      	cmp	r7, #0
 80090f2:	f000 80d8 	beq.w	80092a6 <_printf_i+0x1d2>
 80090f6:	2f58      	cmp	r7, #88	; 0x58
 80090f8:	f000 80a3 	beq.w	8009242 <_printf_i+0x16e>
 80090fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009100:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009104:	e03a      	b.n	800917c <_printf_i+0xa8>
 8009106:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800910a:	2b15      	cmp	r3, #21
 800910c:	d8f6      	bhi.n	80090fc <_printf_i+0x28>
 800910e:	a101      	add	r1, pc, #4	; (adr r1, 8009114 <_printf_i+0x40>)
 8009110:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009114:	0800916d 	.word	0x0800916d
 8009118:	08009181 	.word	0x08009181
 800911c:	080090fd 	.word	0x080090fd
 8009120:	080090fd 	.word	0x080090fd
 8009124:	080090fd 	.word	0x080090fd
 8009128:	080090fd 	.word	0x080090fd
 800912c:	08009181 	.word	0x08009181
 8009130:	080090fd 	.word	0x080090fd
 8009134:	080090fd 	.word	0x080090fd
 8009138:	080090fd 	.word	0x080090fd
 800913c:	080090fd 	.word	0x080090fd
 8009140:	0800928d 	.word	0x0800928d
 8009144:	080091b1 	.word	0x080091b1
 8009148:	0800926f 	.word	0x0800926f
 800914c:	080090fd 	.word	0x080090fd
 8009150:	080090fd 	.word	0x080090fd
 8009154:	080092af 	.word	0x080092af
 8009158:	080090fd 	.word	0x080090fd
 800915c:	080091b1 	.word	0x080091b1
 8009160:	080090fd 	.word	0x080090fd
 8009164:	080090fd 	.word	0x080090fd
 8009168:	08009277 	.word	0x08009277
 800916c:	682b      	ldr	r3, [r5, #0]
 800916e:	1d1a      	adds	r2, r3, #4
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	602a      	str	r2, [r5, #0]
 8009174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800917c:	2301      	movs	r3, #1
 800917e:	e0a3      	b.n	80092c8 <_printf_i+0x1f4>
 8009180:	6820      	ldr	r0, [r4, #0]
 8009182:	6829      	ldr	r1, [r5, #0]
 8009184:	0606      	lsls	r6, r0, #24
 8009186:	f101 0304 	add.w	r3, r1, #4
 800918a:	d50a      	bpl.n	80091a2 <_printf_i+0xce>
 800918c:	680e      	ldr	r6, [r1, #0]
 800918e:	602b      	str	r3, [r5, #0]
 8009190:	2e00      	cmp	r6, #0
 8009192:	da03      	bge.n	800919c <_printf_i+0xc8>
 8009194:	232d      	movs	r3, #45	; 0x2d
 8009196:	4276      	negs	r6, r6
 8009198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800919c:	485e      	ldr	r0, [pc, #376]	; (8009318 <_printf_i+0x244>)
 800919e:	230a      	movs	r3, #10
 80091a0:	e019      	b.n	80091d6 <_printf_i+0x102>
 80091a2:	680e      	ldr	r6, [r1, #0]
 80091a4:	602b      	str	r3, [r5, #0]
 80091a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80091aa:	bf18      	it	ne
 80091ac:	b236      	sxthne	r6, r6
 80091ae:	e7ef      	b.n	8009190 <_printf_i+0xbc>
 80091b0:	682b      	ldr	r3, [r5, #0]
 80091b2:	6820      	ldr	r0, [r4, #0]
 80091b4:	1d19      	adds	r1, r3, #4
 80091b6:	6029      	str	r1, [r5, #0]
 80091b8:	0601      	lsls	r1, r0, #24
 80091ba:	d501      	bpl.n	80091c0 <_printf_i+0xec>
 80091bc:	681e      	ldr	r6, [r3, #0]
 80091be:	e002      	b.n	80091c6 <_printf_i+0xf2>
 80091c0:	0646      	lsls	r6, r0, #25
 80091c2:	d5fb      	bpl.n	80091bc <_printf_i+0xe8>
 80091c4:	881e      	ldrh	r6, [r3, #0]
 80091c6:	4854      	ldr	r0, [pc, #336]	; (8009318 <_printf_i+0x244>)
 80091c8:	2f6f      	cmp	r7, #111	; 0x6f
 80091ca:	bf0c      	ite	eq
 80091cc:	2308      	moveq	r3, #8
 80091ce:	230a      	movne	r3, #10
 80091d0:	2100      	movs	r1, #0
 80091d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091d6:	6865      	ldr	r5, [r4, #4]
 80091d8:	60a5      	str	r5, [r4, #8]
 80091da:	2d00      	cmp	r5, #0
 80091dc:	bfa2      	ittt	ge
 80091de:	6821      	ldrge	r1, [r4, #0]
 80091e0:	f021 0104 	bicge.w	r1, r1, #4
 80091e4:	6021      	strge	r1, [r4, #0]
 80091e6:	b90e      	cbnz	r6, 80091ec <_printf_i+0x118>
 80091e8:	2d00      	cmp	r5, #0
 80091ea:	d04d      	beq.n	8009288 <_printf_i+0x1b4>
 80091ec:	4615      	mov	r5, r2
 80091ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80091f2:	fb03 6711 	mls	r7, r3, r1, r6
 80091f6:	5dc7      	ldrb	r7, [r0, r7]
 80091f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80091fc:	4637      	mov	r7, r6
 80091fe:	42bb      	cmp	r3, r7
 8009200:	460e      	mov	r6, r1
 8009202:	d9f4      	bls.n	80091ee <_printf_i+0x11a>
 8009204:	2b08      	cmp	r3, #8
 8009206:	d10b      	bne.n	8009220 <_printf_i+0x14c>
 8009208:	6823      	ldr	r3, [r4, #0]
 800920a:	07de      	lsls	r6, r3, #31
 800920c:	d508      	bpl.n	8009220 <_printf_i+0x14c>
 800920e:	6923      	ldr	r3, [r4, #16]
 8009210:	6861      	ldr	r1, [r4, #4]
 8009212:	4299      	cmp	r1, r3
 8009214:	bfde      	ittt	le
 8009216:	2330      	movle	r3, #48	; 0x30
 8009218:	f805 3c01 	strble.w	r3, [r5, #-1]
 800921c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009220:	1b52      	subs	r2, r2, r5
 8009222:	6122      	str	r2, [r4, #16]
 8009224:	f8cd a000 	str.w	sl, [sp]
 8009228:	464b      	mov	r3, r9
 800922a:	aa03      	add	r2, sp, #12
 800922c:	4621      	mov	r1, r4
 800922e:	4640      	mov	r0, r8
 8009230:	f7ff fee2 	bl	8008ff8 <_printf_common>
 8009234:	3001      	adds	r0, #1
 8009236:	d14c      	bne.n	80092d2 <_printf_i+0x1fe>
 8009238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800923c:	b004      	add	sp, #16
 800923e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009242:	4835      	ldr	r0, [pc, #212]	; (8009318 <_printf_i+0x244>)
 8009244:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009248:	6829      	ldr	r1, [r5, #0]
 800924a:	6823      	ldr	r3, [r4, #0]
 800924c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009250:	6029      	str	r1, [r5, #0]
 8009252:	061d      	lsls	r5, r3, #24
 8009254:	d514      	bpl.n	8009280 <_printf_i+0x1ac>
 8009256:	07df      	lsls	r7, r3, #31
 8009258:	bf44      	itt	mi
 800925a:	f043 0320 	orrmi.w	r3, r3, #32
 800925e:	6023      	strmi	r3, [r4, #0]
 8009260:	b91e      	cbnz	r6, 800926a <_printf_i+0x196>
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	f023 0320 	bic.w	r3, r3, #32
 8009268:	6023      	str	r3, [r4, #0]
 800926a:	2310      	movs	r3, #16
 800926c:	e7b0      	b.n	80091d0 <_printf_i+0xfc>
 800926e:	6823      	ldr	r3, [r4, #0]
 8009270:	f043 0320 	orr.w	r3, r3, #32
 8009274:	6023      	str	r3, [r4, #0]
 8009276:	2378      	movs	r3, #120	; 0x78
 8009278:	4828      	ldr	r0, [pc, #160]	; (800931c <_printf_i+0x248>)
 800927a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800927e:	e7e3      	b.n	8009248 <_printf_i+0x174>
 8009280:	0659      	lsls	r1, r3, #25
 8009282:	bf48      	it	mi
 8009284:	b2b6      	uxthmi	r6, r6
 8009286:	e7e6      	b.n	8009256 <_printf_i+0x182>
 8009288:	4615      	mov	r5, r2
 800928a:	e7bb      	b.n	8009204 <_printf_i+0x130>
 800928c:	682b      	ldr	r3, [r5, #0]
 800928e:	6826      	ldr	r6, [r4, #0]
 8009290:	6961      	ldr	r1, [r4, #20]
 8009292:	1d18      	adds	r0, r3, #4
 8009294:	6028      	str	r0, [r5, #0]
 8009296:	0635      	lsls	r5, r6, #24
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	d501      	bpl.n	80092a0 <_printf_i+0x1cc>
 800929c:	6019      	str	r1, [r3, #0]
 800929e:	e002      	b.n	80092a6 <_printf_i+0x1d2>
 80092a0:	0670      	lsls	r0, r6, #25
 80092a2:	d5fb      	bpl.n	800929c <_printf_i+0x1c8>
 80092a4:	8019      	strh	r1, [r3, #0]
 80092a6:	2300      	movs	r3, #0
 80092a8:	6123      	str	r3, [r4, #16]
 80092aa:	4615      	mov	r5, r2
 80092ac:	e7ba      	b.n	8009224 <_printf_i+0x150>
 80092ae:	682b      	ldr	r3, [r5, #0]
 80092b0:	1d1a      	adds	r2, r3, #4
 80092b2:	602a      	str	r2, [r5, #0]
 80092b4:	681d      	ldr	r5, [r3, #0]
 80092b6:	6862      	ldr	r2, [r4, #4]
 80092b8:	2100      	movs	r1, #0
 80092ba:	4628      	mov	r0, r5
 80092bc:	f7f6 ffb0 	bl	8000220 <memchr>
 80092c0:	b108      	cbz	r0, 80092c6 <_printf_i+0x1f2>
 80092c2:	1b40      	subs	r0, r0, r5
 80092c4:	6060      	str	r0, [r4, #4]
 80092c6:	6863      	ldr	r3, [r4, #4]
 80092c8:	6123      	str	r3, [r4, #16]
 80092ca:	2300      	movs	r3, #0
 80092cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092d0:	e7a8      	b.n	8009224 <_printf_i+0x150>
 80092d2:	6923      	ldr	r3, [r4, #16]
 80092d4:	462a      	mov	r2, r5
 80092d6:	4649      	mov	r1, r9
 80092d8:	4640      	mov	r0, r8
 80092da:	47d0      	blx	sl
 80092dc:	3001      	adds	r0, #1
 80092de:	d0ab      	beq.n	8009238 <_printf_i+0x164>
 80092e0:	6823      	ldr	r3, [r4, #0]
 80092e2:	079b      	lsls	r3, r3, #30
 80092e4:	d413      	bmi.n	800930e <_printf_i+0x23a>
 80092e6:	68e0      	ldr	r0, [r4, #12]
 80092e8:	9b03      	ldr	r3, [sp, #12]
 80092ea:	4298      	cmp	r0, r3
 80092ec:	bfb8      	it	lt
 80092ee:	4618      	movlt	r0, r3
 80092f0:	e7a4      	b.n	800923c <_printf_i+0x168>
 80092f2:	2301      	movs	r3, #1
 80092f4:	4632      	mov	r2, r6
 80092f6:	4649      	mov	r1, r9
 80092f8:	4640      	mov	r0, r8
 80092fa:	47d0      	blx	sl
 80092fc:	3001      	adds	r0, #1
 80092fe:	d09b      	beq.n	8009238 <_printf_i+0x164>
 8009300:	3501      	adds	r5, #1
 8009302:	68e3      	ldr	r3, [r4, #12]
 8009304:	9903      	ldr	r1, [sp, #12]
 8009306:	1a5b      	subs	r3, r3, r1
 8009308:	42ab      	cmp	r3, r5
 800930a:	dcf2      	bgt.n	80092f2 <_printf_i+0x21e>
 800930c:	e7eb      	b.n	80092e6 <_printf_i+0x212>
 800930e:	2500      	movs	r5, #0
 8009310:	f104 0619 	add.w	r6, r4, #25
 8009314:	e7f5      	b.n	8009302 <_printf_i+0x22e>
 8009316:	bf00      	nop
 8009318:	0800b95a 	.word	0x0800b95a
 800931c:	0800b96b 	.word	0x0800b96b

08009320 <_sbrk_r>:
 8009320:	b538      	push	{r3, r4, r5, lr}
 8009322:	4d06      	ldr	r5, [pc, #24]	; (800933c <_sbrk_r+0x1c>)
 8009324:	2300      	movs	r3, #0
 8009326:	4604      	mov	r4, r0
 8009328:	4608      	mov	r0, r1
 800932a:	602b      	str	r3, [r5, #0]
 800932c:	f7fb faf2 	bl	8004914 <_sbrk>
 8009330:	1c43      	adds	r3, r0, #1
 8009332:	d102      	bne.n	800933a <_sbrk_r+0x1a>
 8009334:	682b      	ldr	r3, [r5, #0]
 8009336:	b103      	cbz	r3, 800933a <_sbrk_r+0x1a>
 8009338:	6023      	str	r3, [r4, #0]
 800933a:	bd38      	pop	{r3, r4, r5, pc}
 800933c:	20002a28 	.word	0x20002a28

08009340 <siprintf>:
 8009340:	b40e      	push	{r1, r2, r3}
 8009342:	b500      	push	{lr}
 8009344:	b09c      	sub	sp, #112	; 0x70
 8009346:	ab1d      	add	r3, sp, #116	; 0x74
 8009348:	9002      	str	r0, [sp, #8]
 800934a:	9006      	str	r0, [sp, #24]
 800934c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009350:	4809      	ldr	r0, [pc, #36]	; (8009378 <siprintf+0x38>)
 8009352:	9107      	str	r1, [sp, #28]
 8009354:	9104      	str	r1, [sp, #16]
 8009356:	4909      	ldr	r1, [pc, #36]	; (800937c <siprintf+0x3c>)
 8009358:	f853 2b04 	ldr.w	r2, [r3], #4
 800935c:	9105      	str	r1, [sp, #20]
 800935e:	6800      	ldr	r0, [r0, #0]
 8009360:	9301      	str	r3, [sp, #4]
 8009362:	a902      	add	r1, sp, #8
 8009364:	f001 faae 	bl	800a8c4 <_svfiprintf_r>
 8009368:	9b02      	ldr	r3, [sp, #8]
 800936a:	2200      	movs	r2, #0
 800936c:	701a      	strb	r2, [r3, #0]
 800936e:	b01c      	add	sp, #112	; 0x70
 8009370:	f85d eb04 	ldr.w	lr, [sp], #4
 8009374:	b003      	add	sp, #12
 8009376:	4770      	bx	lr
 8009378:	200023e4 	.word	0x200023e4
 800937c:	ffff0208 	.word	0xffff0208

08009380 <strncat>:
 8009380:	b530      	push	{r4, r5, lr}
 8009382:	4604      	mov	r4, r0
 8009384:	7825      	ldrb	r5, [r4, #0]
 8009386:	4623      	mov	r3, r4
 8009388:	3401      	adds	r4, #1
 800938a:	2d00      	cmp	r5, #0
 800938c:	d1fa      	bne.n	8009384 <strncat+0x4>
 800938e:	3a01      	subs	r2, #1
 8009390:	d304      	bcc.n	800939c <strncat+0x1c>
 8009392:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009396:	f803 4b01 	strb.w	r4, [r3], #1
 800939a:	b904      	cbnz	r4, 800939e <strncat+0x1e>
 800939c:	bd30      	pop	{r4, r5, pc}
 800939e:	2a00      	cmp	r2, #0
 80093a0:	d1f5      	bne.n	800938e <strncat+0xe>
 80093a2:	701a      	strb	r2, [r3, #0]
 80093a4:	e7f3      	b.n	800938e <strncat+0xe>

080093a6 <quorem>:
 80093a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093aa:	6903      	ldr	r3, [r0, #16]
 80093ac:	690c      	ldr	r4, [r1, #16]
 80093ae:	42a3      	cmp	r3, r4
 80093b0:	4607      	mov	r7, r0
 80093b2:	f2c0 8081 	blt.w	80094b8 <quorem+0x112>
 80093b6:	3c01      	subs	r4, #1
 80093b8:	f101 0814 	add.w	r8, r1, #20
 80093bc:	f100 0514 	add.w	r5, r0, #20
 80093c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093c4:	9301      	str	r3, [sp, #4]
 80093c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80093ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093ce:	3301      	adds	r3, #1
 80093d0:	429a      	cmp	r2, r3
 80093d2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80093d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80093da:	fbb2 f6f3 	udiv	r6, r2, r3
 80093de:	d331      	bcc.n	8009444 <quorem+0x9e>
 80093e0:	f04f 0e00 	mov.w	lr, #0
 80093e4:	4640      	mov	r0, r8
 80093e6:	46ac      	mov	ip, r5
 80093e8:	46f2      	mov	sl, lr
 80093ea:	f850 2b04 	ldr.w	r2, [r0], #4
 80093ee:	b293      	uxth	r3, r2
 80093f0:	fb06 e303 	mla	r3, r6, r3, lr
 80093f4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	ebaa 0303 	sub.w	r3, sl, r3
 80093fe:	f8dc a000 	ldr.w	sl, [ip]
 8009402:	0c12      	lsrs	r2, r2, #16
 8009404:	fa13 f38a 	uxtah	r3, r3, sl
 8009408:	fb06 e202 	mla	r2, r6, r2, lr
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	9b00      	ldr	r3, [sp, #0]
 8009410:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009414:	b292      	uxth	r2, r2
 8009416:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800941a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800941e:	f8bd 3000 	ldrh.w	r3, [sp]
 8009422:	4581      	cmp	r9, r0
 8009424:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009428:	f84c 3b04 	str.w	r3, [ip], #4
 800942c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009430:	d2db      	bcs.n	80093ea <quorem+0x44>
 8009432:	f855 300b 	ldr.w	r3, [r5, fp]
 8009436:	b92b      	cbnz	r3, 8009444 <quorem+0x9e>
 8009438:	9b01      	ldr	r3, [sp, #4]
 800943a:	3b04      	subs	r3, #4
 800943c:	429d      	cmp	r5, r3
 800943e:	461a      	mov	r2, r3
 8009440:	d32e      	bcc.n	80094a0 <quorem+0xfa>
 8009442:	613c      	str	r4, [r7, #16]
 8009444:	4638      	mov	r0, r7
 8009446:	f001 f8c9 	bl	800a5dc <__mcmp>
 800944a:	2800      	cmp	r0, #0
 800944c:	db24      	blt.n	8009498 <quorem+0xf2>
 800944e:	3601      	adds	r6, #1
 8009450:	4628      	mov	r0, r5
 8009452:	f04f 0c00 	mov.w	ip, #0
 8009456:	f858 2b04 	ldr.w	r2, [r8], #4
 800945a:	f8d0 e000 	ldr.w	lr, [r0]
 800945e:	b293      	uxth	r3, r2
 8009460:	ebac 0303 	sub.w	r3, ip, r3
 8009464:	0c12      	lsrs	r2, r2, #16
 8009466:	fa13 f38e 	uxtah	r3, r3, lr
 800946a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800946e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009472:	b29b      	uxth	r3, r3
 8009474:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009478:	45c1      	cmp	r9, r8
 800947a:	f840 3b04 	str.w	r3, [r0], #4
 800947e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009482:	d2e8      	bcs.n	8009456 <quorem+0xb0>
 8009484:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009488:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800948c:	b922      	cbnz	r2, 8009498 <quorem+0xf2>
 800948e:	3b04      	subs	r3, #4
 8009490:	429d      	cmp	r5, r3
 8009492:	461a      	mov	r2, r3
 8009494:	d30a      	bcc.n	80094ac <quorem+0x106>
 8009496:	613c      	str	r4, [r7, #16]
 8009498:	4630      	mov	r0, r6
 800949a:	b003      	add	sp, #12
 800949c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a0:	6812      	ldr	r2, [r2, #0]
 80094a2:	3b04      	subs	r3, #4
 80094a4:	2a00      	cmp	r2, #0
 80094a6:	d1cc      	bne.n	8009442 <quorem+0x9c>
 80094a8:	3c01      	subs	r4, #1
 80094aa:	e7c7      	b.n	800943c <quorem+0x96>
 80094ac:	6812      	ldr	r2, [r2, #0]
 80094ae:	3b04      	subs	r3, #4
 80094b0:	2a00      	cmp	r2, #0
 80094b2:	d1f0      	bne.n	8009496 <quorem+0xf0>
 80094b4:	3c01      	subs	r4, #1
 80094b6:	e7eb      	b.n	8009490 <quorem+0xea>
 80094b8:	2000      	movs	r0, #0
 80094ba:	e7ee      	b.n	800949a <quorem+0xf4>
 80094bc:	0000      	movs	r0, r0
	...

080094c0 <_dtoa_r>:
 80094c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c4:	ed2d 8b04 	vpush	{d8-d9}
 80094c8:	ec57 6b10 	vmov	r6, r7, d0
 80094cc:	b093      	sub	sp, #76	; 0x4c
 80094ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80094d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80094d4:	9106      	str	r1, [sp, #24]
 80094d6:	ee10 aa10 	vmov	sl, s0
 80094da:	4604      	mov	r4, r0
 80094dc:	9209      	str	r2, [sp, #36]	; 0x24
 80094de:	930c      	str	r3, [sp, #48]	; 0x30
 80094e0:	46bb      	mov	fp, r7
 80094e2:	b975      	cbnz	r5, 8009502 <_dtoa_r+0x42>
 80094e4:	2010      	movs	r0, #16
 80094e6:	f7ff f9b9 	bl	800885c <malloc>
 80094ea:	4602      	mov	r2, r0
 80094ec:	6260      	str	r0, [r4, #36]	; 0x24
 80094ee:	b920      	cbnz	r0, 80094fa <_dtoa_r+0x3a>
 80094f0:	4ba7      	ldr	r3, [pc, #668]	; (8009790 <_dtoa_r+0x2d0>)
 80094f2:	21ea      	movs	r1, #234	; 0xea
 80094f4:	48a7      	ldr	r0, [pc, #668]	; (8009794 <_dtoa_r+0x2d4>)
 80094f6:	f001 fae5 	bl	800aac4 <__assert_func>
 80094fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80094fe:	6005      	str	r5, [r0, #0]
 8009500:	60c5      	str	r5, [r0, #12]
 8009502:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009504:	6819      	ldr	r1, [r3, #0]
 8009506:	b151      	cbz	r1, 800951e <_dtoa_r+0x5e>
 8009508:	685a      	ldr	r2, [r3, #4]
 800950a:	604a      	str	r2, [r1, #4]
 800950c:	2301      	movs	r3, #1
 800950e:	4093      	lsls	r3, r2
 8009510:	608b      	str	r3, [r1, #8]
 8009512:	4620      	mov	r0, r4
 8009514:	f000 fe20 	bl	800a158 <_Bfree>
 8009518:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800951a:	2200      	movs	r2, #0
 800951c:	601a      	str	r2, [r3, #0]
 800951e:	1e3b      	subs	r3, r7, #0
 8009520:	bfaa      	itet	ge
 8009522:	2300      	movge	r3, #0
 8009524:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009528:	f8c8 3000 	strge.w	r3, [r8]
 800952c:	4b9a      	ldr	r3, [pc, #616]	; (8009798 <_dtoa_r+0x2d8>)
 800952e:	bfbc      	itt	lt
 8009530:	2201      	movlt	r2, #1
 8009532:	f8c8 2000 	strlt.w	r2, [r8]
 8009536:	ea33 030b 	bics.w	r3, r3, fp
 800953a:	d11b      	bne.n	8009574 <_dtoa_r+0xb4>
 800953c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800953e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009542:	6013      	str	r3, [r2, #0]
 8009544:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009548:	4333      	orrs	r3, r6
 800954a:	f000 8592 	beq.w	800a072 <_dtoa_r+0xbb2>
 800954e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009550:	b963      	cbnz	r3, 800956c <_dtoa_r+0xac>
 8009552:	4b92      	ldr	r3, [pc, #584]	; (800979c <_dtoa_r+0x2dc>)
 8009554:	e022      	b.n	800959c <_dtoa_r+0xdc>
 8009556:	4b92      	ldr	r3, [pc, #584]	; (80097a0 <_dtoa_r+0x2e0>)
 8009558:	9301      	str	r3, [sp, #4]
 800955a:	3308      	adds	r3, #8
 800955c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800955e:	6013      	str	r3, [r2, #0]
 8009560:	9801      	ldr	r0, [sp, #4]
 8009562:	b013      	add	sp, #76	; 0x4c
 8009564:	ecbd 8b04 	vpop	{d8-d9}
 8009568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800956c:	4b8b      	ldr	r3, [pc, #556]	; (800979c <_dtoa_r+0x2dc>)
 800956e:	9301      	str	r3, [sp, #4]
 8009570:	3303      	adds	r3, #3
 8009572:	e7f3      	b.n	800955c <_dtoa_r+0x9c>
 8009574:	2200      	movs	r2, #0
 8009576:	2300      	movs	r3, #0
 8009578:	4650      	mov	r0, sl
 800957a:	4659      	mov	r1, fp
 800957c:	f7f7 fac4 	bl	8000b08 <__aeabi_dcmpeq>
 8009580:	ec4b ab19 	vmov	d9, sl, fp
 8009584:	4680      	mov	r8, r0
 8009586:	b158      	cbz	r0, 80095a0 <_dtoa_r+0xe0>
 8009588:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800958a:	2301      	movs	r3, #1
 800958c:	6013      	str	r3, [r2, #0]
 800958e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009590:	2b00      	cmp	r3, #0
 8009592:	f000 856b 	beq.w	800a06c <_dtoa_r+0xbac>
 8009596:	4883      	ldr	r0, [pc, #524]	; (80097a4 <_dtoa_r+0x2e4>)
 8009598:	6018      	str	r0, [r3, #0]
 800959a:	1e43      	subs	r3, r0, #1
 800959c:	9301      	str	r3, [sp, #4]
 800959e:	e7df      	b.n	8009560 <_dtoa_r+0xa0>
 80095a0:	ec4b ab10 	vmov	d0, sl, fp
 80095a4:	aa10      	add	r2, sp, #64	; 0x40
 80095a6:	a911      	add	r1, sp, #68	; 0x44
 80095a8:	4620      	mov	r0, r4
 80095aa:	f001 f8bd 	bl	800a728 <__d2b>
 80095ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80095b2:	ee08 0a10 	vmov	s16, r0
 80095b6:	2d00      	cmp	r5, #0
 80095b8:	f000 8084 	beq.w	80096c4 <_dtoa_r+0x204>
 80095bc:	ee19 3a90 	vmov	r3, s19
 80095c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80095c8:	4656      	mov	r6, sl
 80095ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80095ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80095d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80095d6:	4b74      	ldr	r3, [pc, #464]	; (80097a8 <_dtoa_r+0x2e8>)
 80095d8:	2200      	movs	r2, #0
 80095da:	4630      	mov	r0, r6
 80095dc:	4639      	mov	r1, r7
 80095de:	f7f6 fe73 	bl	80002c8 <__aeabi_dsub>
 80095e2:	a365      	add	r3, pc, #404	; (adr r3, 8009778 <_dtoa_r+0x2b8>)
 80095e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e8:	f7f7 f826 	bl	8000638 <__aeabi_dmul>
 80095ec:	a364      	add	r3, pc, #400	; (adr r3, 8009780 <_dtoa_r+0x2c0>)
 80095ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f2:	f7f6 fe6b 	bl	80002cc <__adddf3>
 80095f6:	4606      	mov	r6, r0
 80095f8:	4628      	mov	r0, r5
 80095fa:	460f      	mov	r7, r1
 80095fc:	f7f6 ffb2 	bl	8000564 <__aeabi_i2d>
 8009600:	a361      	add	r3, pc, #388	; (adr r3, 8009788 <_dtoa_r+0x2c8>)
 8009602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009606:	f7f7 f817 	bl	8000638 <__aeabi_dmul>
 800960a:	4602      	mov	r2, r0
 800960c:	460b      	mov	r3, r1
 800960e:	4630      	mov	r0, r6
 8009610:	4639      	mov	r1, r7
 8009612:	f7f6 fe5b 	bl	80002cc <__adddf3>
 8009616:	4606      	mov	r6, r0
 8009618:	460f      	mov	r7, r1
 800961a:	f7f7 fabd 	bl	8000b98 <__aeabi_d2iz>
 800961e:	2200      	movs	r2, #0
 8009620:	9000      	str	r0, [sp, #0]
 8009622:	2300      	movs	r3, #0
 8009624:	4630      	mov	r0, r6
 8009626:	4639      	mov	r1, r7
 8009628:	f7f7 fa78 	bl	8000b1c <__aeabi_dcmplt>
 800962c:	b150      	cbz	r0, 8009644 <_dtoa_r+0x184>
 800962e:	9800      	ldr	r0, [sp, #0]
 8009630:	f7f6 ff98 	bl	8000564 <__aeabi_i2d>
 8009634:	4632      	mov	r2, r6
 8009636:	463b      	mov	r3, r7
 8009638:	f7f7 fa66 	bl	8000b08 <__aeabi_dcmpeq>
 800963c:	b910      	cbnz	r0, 8009644 <_dtoa_r+0x184>
 800963e:	9b00      	ldr	r3, [sp, #0]
 8009640:	3b01      	subs	r3, #1
 8009642:	9300      	str	r3, [sp, #0]
 8009644:	9b00      	ldr	r3, [sp, #0]
 8009646:	2b16      	cmp	r3, #22
 8009648:	d85a      	bhi.n	8009700 <_dtoa_r+0x240>
 800964a:	9a00      	ldr	r2, [sp, #0]
 800964c:	4b57      	ldr	r3, [pc, #348]	; (80097ac <_dtoa_r+0x2ec>)
 800964e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009656:	ec51 0b19 	vmov	r0, r1, d9
 800965a:	f7f7 fa5f 	bl	8000b1c <__aeabi_dcmplt>
 800965e:	2800      	cmp	r0, #0
 8009660:	d050      	beq.n	8009704 <_dtoa_r+0x244>
 8009662:	9b00      	ldr	r3, [sp, #0]
 8009664:	3b01      	subs	r3, #1
 8009666:	9300      	str	r3, [sp, #0]
 8009668:	2300      	movs	r3, #0
 800966a:	930b      	str	r3, [sp, #44]	; 0x2c
 800966c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800966e:	1b5d      	subs	r5, r3, r5
 8009670:	1e6b      	subs	r3, r5, #1
 8009672:	9305      	str	r3, [sp, #20]
 8009674:	bf45      	ittet	mi
 8009676:	f1c5 0301 	rsbmi	r3, r5, #1
 800967a:	9304      	strmi	r3, [sp, #16]
 800967c:	2300      	movpl	r3, #0
 800967e:	2300      	movmi	r3, #0
 8009680:	bf4c      	ite	mi
 8009682:	9305      	strmi	r3, [sp, #20]
 8009684:	9304      	strpl	r3, [sp, #16]
 8009686:	9b00      	ldr	r3, [sp, #0]
 8009688:	2b00      	cmp	r3, #0
 800968a:	db3d      	blt.n	8009708 <_dtoa_r+0x248>
 800968c:	9b05      	ldr	r3, [sp, #20]
 800968e:	9a00      	ldr	r2, [sp, #0]
 8009690:	920a      	str	r2, [sp, #40]	; 0x28
 8009692:	4413      	add	r3, r2
 8009694:	9305      	str	r3, [sp, #20]
 8009696:	2300      	movs	r3, #0
 8009698:	9307      	str	r3, [sp, #28]
 800969a:	9b06      	ldr	r3, [sp, #24]
 800969c:	2b09      	cmp	r3, #9
 800969e:	f200 8089 	bhi.w	80097b4 <_dtoa_r+0x2f4>
 80096a2:	2b05      	cmp	r3, #5
 80096a4:	bfc4      	itt	gt
 80096a6:	3b04      	subgt	r3, #4
 80096a8:	9306      	strgt	r3, [sp, #24]
 80096aa:	9b06      	ldr	r3, [sp, #24]
 80096ac:	f1a3 0302 	sub.w	r3, r3, #2
 80096b0:	bfcc      	ite	gt
 80096b2:	2500      	movgt	r5, #0
 80096b4:	2501      	movle	r5, #1
 80096b6:	2b03      	cmp	r3, #3
 80096b8:	f200 8087 	bhi.w	80097ca <_dtoa_r+0x30a>
 80096bc:	e8df f003 	tbb	[pc, r3]
 80096c0:	59383a2d 	.word	0x59383a2d
 80096c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80096c8:	441d      	add	r5, r3
 80096ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80096ce:	2b20      	cmp	r3, #32
 80096d0:	bfc1      	itttt	gt
 80096d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80096d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80096da:	fa0b f303 	lslgt.w	r3, fp, r3
 80096de:	fa26 f000 	lsrgt.w	r0, r6, r0
 80096e2:	bfda      	itte	le
 80096e4:	f1c3 0320 	rsble	r3, r3, #32
 80096e8:	fa06 f003 	lslle.w	r0, r6, r3
 80096ec:	4318      	orrgt	r0, r3
 80096ee:	f7f6 ff29 	bl	8000544 <__aeabi_ui2d>
 80096f2:	2301      	movs	r3, #1
 80096f4:	4606      	mov	r6, r0
 80096f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80096fa:	3d01      	subs	r5, #1
 80096fc:	930e      	str	r3, [sp, #56]	; 0x38
 80096fe:	e76a      	b.n	80095d6 <_dtoa_r+0x116>
 8009700:	2301      	movs	r3, #1
 8009702:	e7b2      	b.n	800966a <_dtoa_r+0x1aa>
 8009704:	900b      	str	r0, [sp, #44]	; 0x2c
 8009706:	e7b1      	b.n	800966c <_dtoa_r+0x1ac>
 8009708:	9b04      	ldr	r3, [sp, #16]
 800970a:	9a00      	ldr	r2, [sp, #0]
 800970c:	1a9b      	subs	r3, r3, r2
 800970e:	9304      	str	r3, [sp, #16]
 8009710:	4253      	negs	r3, r2
 8009712:	9307      	str	r3, [sp, #28]
 8009714:	2300      	movs	r3, #0
 8009716:	930a      	str	r3, [sp, #40]	; 0x28
 8009718:	e7bf      	b.n	800969a <_dtoa_r+0x1da>
 800971a:	2300      	movs	r3, #0
 800971c:	9308      	str	r3, [sp, #32]
 800971e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009720:	2b00      	cmp	r3, #0
 8009722:	dc55      	bgt.n	80097d0 <_dtoa_r+0x310>
 8009724:	2301      	movs	r3, #1
 8009726:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800972a:	461a      	mov	r2, r3
 800972c:	9209      	str	r2, [sp, #36]	; 0x24
 800972e:	e00c      	b.n	800974a <_dtoa_r+0x28a>
 8009730:	2301      	movs	r3, #1
 8009732:	e7f3      	b.n	800971c <_dtoa_r+0x25c>
 8009734:	2300      	movs	r3, #0
 8009736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009738:	9308      	str	r3, [sp, #32]
 800973a:	9b00      	ldr	r3, [sp, #0]
 800973c:	4413      	add	r3, r2
 800973e:	9302      	str	r3, [sp, #8]
 8009740:	3301      	adds	r3, #1
 8009742:	2b01      	cmp	r3, #1
 8009744:	9303      	str	r3, [sp, #12]
 8009746:	bfb8      	it	lt
 8009748:	2301      	movlt	r3, #1
 800974a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800974c:	2200      	movs	r2, #0
 800974e:	6042      	str	r2, [r0, #4]
 8009750:	2204      	movs	r2, #4
 8009752:	f102 0614 	add.w	r6, r2, #20
 8009756:	429e      	cmp	r6, r3
 8009758:	6841      	ldr	r1, [r0, #4]
 800975a:	d93d      	bls.n	80097d8 <_dtoa_r+0x318>
 800975c:	4620      	mov	r0, r4
 800975e:	f000 fcbb 	bl	800a0d8 <_Balloc>
 8009762:	9001      	str	r0, [sp, #4]
 8009764:	2800      	cmp	r0, #0
 8009766:	d13b      	bne.n	80097e0 <_dtoa_r+0x320>
 8009768:	4b11      	ldr	r3, [pc, #68]	; (80097b0 <_dtoa_r+0x2f0>)
 800976a:	4602      	mov	r2, r0
 800976c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009770:	e6c0      	b.n	80094f4 <_dtoa_r+0x34>
 8009772:	2301      	movs	r3, #1
 8009774:	e7df      	b.n	8009736 <_dtoa_r+0x276>
 8009776:	bf00      	nop
 8009778:	636f4361 	.word	0x636f4361
 800977c:	3fd287a7 	.word	0x3fd287a7
 8009780:	8b60c8b3 	.word	0x8b60c8b3
 8009784:	3fc68a28 	.word	0x3fc68a28
 8009788:	509f79fb 	.word	0x509f79fb
 800978c:	3fd34413 	.word	0x3fd34413
 8009790:	0800b989 	.word	0x0800b989
 8009794:	0800b9a0 	.word	0x0800b9a0
 8009798:	7ff00000 	.word	0x7ff00000
 800979c:	0800b985 	.word	0x0800b985
 80097a0:	0800b97c 	.word	0x0800b97c
 80097a4:	0800b959 	.word	0x0800b959
 80097a8:	3ff80000 	.word	0x3ff80000
 80097ac:	0800ba90 	.word	0x0800ba90
 80097b0:	0800b9fb 	.word	0x0800b9fb
 80097b4:	2501      	movs	r5, #1
 80097b6:	2300      	movs	r3, #0
 80097b8:	9306      	str	r3, [sp, #24]
 80097ba:	9508      	str	r5, [sp, #32]
 80097bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80097c4:	2200      	movs	r2, #0
 80097c6:	2312      	movs	r3, #18
 80097c8:	e7b0      	b.n	800972c <_dtoa_r+0x26c>
 80097ca:	2301      	movs	r3, #1
 80097cc:	9308      	str	r3, [sp, #32]
 80097ce:	e7f5      	b.n	80097bc <_dtoa_r+0x2fc>
 80097d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80097d6:	e7b8      	b.n	800974a <_dtoa_r+0x28a>
 80097d8:	3101      	adds	r1, #1
 80097da:	6041      	str	r1, [r0, #4]
 80097dc:	0052      	lsls	r2, r2, #1
 80097de:	e7b8      	b.n	8009752 <_dtoa_r+0x292>
 80097e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097e2:	9a01      	ldr	r2, [sp, #4]
 80097e4:	601a      	str	r2, [r3, #0]
 80097e6:	9b03      	ldr	r3, [sp, #12]
 80097e8:	2b0e      	cmp	r3, #14
 80097ea:	f200 809d 	bhi.w	8009928 <_dtoa_r+0x468>
 80097ee:	2d00      	cmp	r5, #0
 80097f0:	f000 809a 	beq.w	8009928 <_dtoa_r+0x468>
 80097f4:	9b00      	ldr	r3, [sp, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	dd32      	ble.n	8009860 <_dtoa_r+0x3a0>
 80097fa:	4ab7      	ldr	r2, [pc, #732]	; (8009ad8 <_dtoa_r+0x618>)
 80097fc:	f003 030f 	and.w	r3, r3, #15
 8009800:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009804:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009808:	9b00      	ldr	r3, [sp, #0]
 800980a:	05d8      	lsls	r0, r3, #23
 800980c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009810:	d516      	bpl.n	8009840 <_dtoa_r+0x380>
 8009812:	4bb2      	ldr	r3, [pc, #712]	; (8009adc <_dtoa_r+0x61c>)
 8009814:	ec51 0b19 	vmov	r0, r1, d9
 8009818:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800981c:	f7f7 f836 	bl	800088c <__aeabi_ddiv>
 8009820:	f007 070f 	and.w	r7, r7, #15
 8009824:	4682      	mov	sl, r0
 8009826:	468b      	mov	fp, r1
 8009828:	2503      	movs	r5, #3
 800982a:	4eac      	ldr	r6, [pc, #688]	; (8009adc <_dtoa_r+0x61c>)
 800982c:	b957      	cbnz	r7, 8009844 <_dtoa_r+0x384>
 800982e:	4642      	mov	r2, r8
 8009830:	464b      	mov	r3, r9
 8009832:	4650      	mov	r0, sl
 8009834:	4659      	mov	r1, fp
 8009836:	f7f7 f829 	bl	800088c <__aeabi_ddiv>
 800983a:	4682      	mov	sl, r0
 800983c:	468b      	mov	fp, r1
 800983e:	e028      	b.n	8009892 <_dtoa_r+0x3d2>
 8009840:	2502      	movs	r5, #2
 8009842:	e7f2      	b.n	800982a <_dtoa_r+0x36a>
 8009844:	07f9      	lsls	r1, r7, #31
 8009846:	d508      	bpl.n	800985a <_dtoa_r+0x39a>
 8009848:	4640      	mov	r0, r8
 800984a:	4649      	mov	r1, r9
 800984c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009850:	f7f6 fef2 	bl	8000638 <__aeabi_dmul>
 8009854:	3501      	adds	r5, #1
 8009856:	4680      	mov	r8, r0
 8009858:	4689      	mov	r9, r1
 800985a:	107f      	asrs	r7, r7, #1
 800985c:	3608      	adds	r6, #8
 800985e:	e7e5      	b.n	800982c <_dtoa_r+0x36c>
 8009860:	f000 809b 	beq.w	800999a <_dtoa_r+0x4da>
 8009864:	9b00      	ldr	r3, [sp, #0]
 8009866:	4f9d      	ldr	r7, [pc, #628]	; (8009adc <_dtoa_r+0x61c>)
 8009868:	425e      	negs	r6, r3
 800986a:	4b9b      	ldr	r3, [pc, #620]	; (8009ad8 <_dtoa_r+0x618>)
 800986c:	f006 020f 	and.w	r2, r6, #15
 8009870:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009878:	ec51 0b19 	vmov	r0, r1, d9
 800987c:	f7f6 fedc 	bl	8000638 <__aeabi_dmul>
 8009880:	1136      	asrs	r6, r6, #4
 8009882:	4682      	mov	sl, r0
 8009884:	468b      	mov	fp, r1
 8009886:	2300      	movs	r3, #0
 8009888:	2502      	movs	r5, #2
 800988a:	2e00      	cmp	r6, #0
 800988c:	d17a      	bne.n	8009984 <_dtoa_r+0x4c4>
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1d3      	bne.n	800983a <_dtoa_r+0x37a>
 8009892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009894:	2b00      	cmp	r3, #0
 8009896:	f000 8082 	beq.w	800999e <_dtoa_r+0x4de>
 800989a:	4b91      	ldr	r3, [pc, #580]	; (8009ae0 <_dtoa_r+0x620>)
 800989c:	2200      	movs	r2, #0
 800989e:	4650      	mov	r0, sl
 80098a0:	4659      	mov	r1, fp
 80098a2:	f7f7 f93b 	bl	8000b1c <__aeabi_dcmplt>
 80098a6:	2800      	cmp	r0, #0
 80098a8:	d079      	beq.n	800999e <_dtoa_r+0x4de>
 80098aa:	9b03      	ldr	r3, [sp, #12]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d076      	beq.n	800999e <_dtoa_r+0x4de>
 80098b0:	9b02      	ldr	r3, [sp, #8]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	dd36      	ble.n	8009924 <_dtoa_r+0x464>
 80098b6:	9b00      	ldr	r3, [sp, #0]
 80098b8:	4650      	mov	r0, sl
 80098ba:	4659      	mov	r1, fp
 80098bc:	1e5f      	subs	r7, r3, #1
 80098be:	2200      	movs	r2, #0
 80098c0:	4b88      	ldr	r3, [pc, #544]	; (8009ae4 <_dtoa_r+0x624>)
 80098c2:	f7f6 feb9 	bl	8000638 <__aeabi_dmul>
 80098c6:	9e02      	ldr	r6, [sp, #8]
 80098c8:	4682      	mov	sl, r0
 80098ca:	468b      	mov	fp, r1
 80098cc:	3501      	adds	r5, #1
 80098ce:	4628      	mov	r0, r5
 80098d0:	f7f6 fe48 	bl	8000564 <__aeabi_i2d>
 80098d4:	4652      	mov	r2, sl
 80098d6:	465b      	mov	r3, fp
 80098d8:	f7f6 feae 	bl	8000638 <__aeabi_dmul>
 80098dc:	4b82      	ldr	r3, [pc, #520]	; (8009ae8 <_dtoa_r+0x628>)
 80098de:	2200      	movs	r2, #0
 80098e0:	f7f6 fcf4 	bl	80002cc <__adddf3>
 80098e4:	46d0      	mov	r8, sl
 80098e6:	46d9      	mov	r9, fp
 80098e8:	4682      	mov	sl, r0
 80098ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80098ee:	2e00      	cmp	r6, #0
 80098f0:	d158      	bne.n	80099a4 <_dtoa_r+0x4e4>
 80098f2:	4b7e      	ldr	r3, [pc, #504]	; (8009aec <_dtoa_r+0x62c>)
 80098f4:	2200      	movs	r2, #0
 80098f6:	4640      	mov	r0, r8
 80098f8:	4649      	mov	r1, r9
 80098fa:	f7f6 fce5 	bl	80002c8 <__aeabi_dsub>
 80098fe:	4652      	mov	r2, sl
 8009900:	465b      	mov	r3, fp
 8009902:	4680      	mov	r8, r0
 8009904:	4689      	mov	r9, r1
 8009906:	f7f7 f927 	bl	8000b58 <__aeabi_dcmpgt>
 800990a:	2800      	cmp	r0, #0
 800990c:	f040 8295 	bne.w	8009e3a <_dtoa_r+0x97a>
 8009910:	4652      	mov	r2, sl
 8009912:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009916:	4640      	mov	r0, r8
 8009918:	4649      	mov	r1, r9
 800991a:	f7f7 f8ff 	bl	8000b1c <__aeabi_dcmplt>
 800991e:	2800      	cmp	r0, #0
 8009920:	f040 8289 	bne.w	8009e36 <_dtoa_r+0x976>
 8009924:	ec5b ab19 	vmov	sl, fp, d9
 8009928:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800992a:	2b00      	cmp	r3, #0
 800992c:	f2c0 8148 	blt.w	8009bc0 <_dtoa_r+0x700>
 8009930:	9a00      	ldr	r2, [sp, #0]
 8009932:	2a0e      	cmp	r2, #14
 8009934:	f300 8144 	bgt.w	8009bc0 <_dtoa_r+0x700>
 8009938:	4b67      	ldr	r3, [pc, #412]	; (8009ad8 <_dtoa_r+0x618>)
 800993a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800993e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009944:	2b00      	cmp	r3, #0
 8009946:	f280 80d5 	bge.w	8009af4 <_dtoa_r+0x634>
 800994a:	9b03      	ldr	r3, [sp, #12]
 800994c:	2b00      	cmp	r3, #0
 800994e:	f300 80d1 	bgt.w	8009af4 <_dtoa_r+0x634>
 8009952:	f040 826f 	bne.w	8009e34 <_dtoa_r+0x974>
 8009956:	4b65      	ldr	r3, [pc, #404]	; (8009aec <_dtoa_r+0x62c>)
 8009958:	2200      	movs	r2, #0
 800995a:	4640      	mov	r0, r8
 800995c:	4649      	mov	r1, r9
 800995e:	f7f6 fe6b 	bl	8000638 <__aeabi_dmul>
 8009962:	4652      	mov	r2, sl
 8009964:	465b      	mov	r3, fp
 8009966:	f7f7 f8ed 	bl	8000b44 <__aeabi_dcmpge>
 800996a:	9e03      	ldr	r6, [sp, #12]
 800996c:	4637      	mov	r7, r6
 800996e:	2800      	cmp	r0, #0
 8009970:	f040 8245 	bne.w	8009dfe <_dtoa_r+0x93e>
 8009974:	9d01      	ldr	r5, [sp, #4]
 8009976:	2331      	movs	r3, #49	; 0x31
 8009978:	f805 3b01 	strb.w	r3, [r5], #1
 800997c:	9b00      	ldr	r3, [sp, #0]
 800997e:	3301      	adds	r3, #1
 8009980:	9300      	str	r3, [sp, #0]
 8009982:	e240      	b.n	8009e06 <_dtoa_r+0x946>
 8009984:	07f2      	lsls	r2, r6, #31
 8009986:	d505      	bpl.n	8009994 <_dtoa_r+0x4d4>
 8009988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800998c:	f7f6 fe54 	bl	8000638 <__aeabi_dmul>
 8009990:	3501      	adds	r5, #1
 8009992:	2301      	movs	r3, #1
 8009994:	1076      	asrs	r6, r6, #1
 8009996:	3708      	adds	r7, #8
 8009998:	e777      	b.n	800988a <_dtoa_r+0x3ca>
 800999a:	2502      	movs	r5, #2
 800999c:	e779      	b.n	8009892 <_dtoa_r+0x3d2>
 800999e:	9f00      	ldr	r7, [sp, #0]
 80099a0:	9e03      	ldr	r6, [sp, #12]
 80099a2:	e794      	b.n	80098ce <_dtoa_r+0x40e>
 80099a4:	9901      	ldr	r1, [sp, #4]
 80099a6:	4b4c      	ldr	r3, [pc, #304]	; (8009ad8 <_dtoa_r+0x618>)
 80099a8:	4431      	add	r1, r6
 80099aa:	910d      	str	r1, [sp, #52]	; 0x34
 80099ac:	9908      	ldr	r1, [sp, #32]
 80099ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80099b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80099b6:	2900      	cmp	r1, #0
 80099b8:	d043      	beq.n	8009a42 <_dtoa_r+0x582>
 80099ba:	494d      	ldr	r1, [pc, #308]	; (8009af0 <_dtoa_r+0x630>)
 80099bc:	2000      	movs	r0, #0
 80099be:	f7f6 ff65 	bl	800088c <__aeabi_ddiv>
 80099c2:	4652      	mov	r2, sl
 80099c4:	465b      	mov	r3, fp
 80099c6:	f7f6 fc7f 	bl	80002c8 <__aeabi_dsub>
 80099ca:	9d01      	ldr	r5, [sp, #4]
 80099cc:	4682      	mov	sl, r0
 80099ce:	468b      	mov	fp, r1
 80099d0:	4649      	mov	r1, r9
 80099d2:	4640      	mov	r0, r8
 80099d4:	f7f7 f8e0 	bl	8000b98 <__aeabi_d2iz>
 80099d8:	4606      	mov	r6, r0
 80099da:	f7f6 fdc3 	bl	8000564 <__aeabi_i2d>
 80099de:	4602      	mov	r2, r0
 80099e0:	460b      	mov	r3, r1
 80099e2:	4640      	mov	r0, r8
 80099e4:	4649      	mov	r1, r9
 80099e6:	f7f6 fc6f 	bl	80002c8 <__aeabi_dsub>
 80099ea:	3630      	adds	r6, #48	; 0x30
 80099ec:	f805 6b01 	strb.w	r6, [r5], #1
 80099f0:	4652      	mov	r2, sl
 80099f2:	465b      	mov	r3, fp
 80099f4:	4680      	mov	r8, r0
 80099f6:	4689      	mov	r9, r1
 80099f8:	f7f7 f890 	bl	8000b1c <__aeabi_dcmplt>
 80099fc:	2800      	cmp	r0, #0
 80099fe:	d163      	bne.n	8009ac8 <_dtoa_r+0x608>
 8009a00:	4642      	mov	r2, r8
 8009a02:	464b      	mov	r3, r9
 8009a04:	4936      	ldr	r1, [pc, #216]	; (8009ae0 <_dtoa_r+0x620>)
 8009a06:	2000      	movs	r0, #0
 8009a08:	f7f6 fc5e 	bl	80002c8 <__aeabi_dsub>
 8009a0c:	4652      	mov	r2, sl
 8009a0e:	465b      	mov	r3, fp
 8009a10:	f7f7 f884 	bl	8000b1c <__aeabi_dcmplt>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	f040 80b5 	bne.w	8009b84 <_dtoa_r+0x6c4>
 8009a1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a1c:	429d      	cmp	r5, r3
 8009a1e:	d081      	beq.n	8009924 <_dtoa_r+0x464>
 8009a20:	4b30      	ldr	r3, [pc, #192]	; (8009ae4 <_dtoa_r+0x624>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	4650      	mov	r0, sl
 8009a26:	4659      	mov	r1, fp
 8009a28:	f7f6 fe06 	bl	8000638 <__aeabi_dmul>
 8009a2c:	4b2d      	ldr	r3, [pc, #180]	; (8009ae4 <_dtoa_r+0x624>)
 8009a2e:	4682      	mov	sl, r0
 8009a30:	468b      	mov	fp, r1
 8009a32:	4640      	mov	r0, r8
 8009a34:	4649      	mov	r1, r9
 8009a36:	2200      	movs	r2, #0
 8009a38:	f7f6 fdfe 	bl	8000638 <__aeabi_dmul>
 8009a3c:	4680      	mov	r8, r0
 8009a3e:	4689      	mov	r9, r1
 8009a40:	e7c6      	b.n	80099d0 <_dtoa_r+0x510>
 8009a42:	4650      	mov	r0, sl
 8009a44:	4659      	mov	r1, fp
 8009a46:	f7f6 fdf7 	bl	8000638 <__aeabi_dmul>
 8009a4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a4c:	9d01      	ldr	r5, [sp, #4]
 8009a4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a50:	4682      	mov	sl, r0
 8009a52:	468b      	mov	fp, r1
 8009a54:	4649      	mov	r1, r9
 8009a56:	4640      	mov	r0, r8
 8009a58:	f7f7 f89e 	bl	8000b98 <__aeabi_d2iz>
 8009a5c:	4606      	mov	r6, r0
 8009a5e:	f7f6 fd81 	bl	8000564 <__aeabi_i2d>
 8009a62:	3630      	adds	r6, #48	; 0x30
 8009a64:	4602      	mov	r2, r0
 8009a66:	460b      	mov	r3, r1
 8009a68:	4640      	mov	r0, r8
 8009a6a:	4649      	mov	r1, r9
 8009a6c:	f7f6 fc2c 	bl	80002c8 <__aeabi_dsub>
 8009a70:	f805 6b01 	strb.w	r6, [r5], #1
 8009a74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a76:	429d      	cmp	r5, r3
 8009a78:	4680      	mov	r8, r0
 8009a7a:	4689      	mov	r9, r1
 8009a7c:	f04f 0200 	mov.w	r2, #0
 8009a80:	d124      	bne.n	8009acc <_dtoa_r+0x60c>
 8009a82:	4b1b      	ldr	r3, [pc, #108]	; (8009af0 <_dtoa_r+0x630>)
 8009a84:	4650      	mov	r0, sl
 8009a86:	4659      	mov	r1, fp
 8009a88:	f7f6 fc20 	bl	80002cc <__adddf3>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	460b      	mov	r3, r1
 8009a90:	4640      	mov	r0, r8
 8009a92:	4649      	mov	r1, r9
 8009a94:	f7f7 f860 	bl	8000b58 <__aeabi_dcmpgt>
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	d173      	bne.n	8009b84 <_dtoa_r+0x6c4>
 8009a9c:	4652      	mov	r2, sl
 8009a9e:	465b      	mov	r3, fp
 8009aa0:	4913      	ldr	r1, [pc, #76]	; (8009af0 <_dtoa_r+0x630>)
 8009aa2:	2000      	movs	r0, #0
 8009aa4:	f7f6 fc10 	bl	80002c8 <__aeabi_dsub>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	460b      	mov	r3, r1
 8009aac:	4640      	mov	r0, r8
 8009aae:	4649      	mov	r1, r9
 8009ab0:	f7f7 f834 	bl	8000b1c <__aeabi_dcmplt>
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	f43f af35 	beq.w	8009924 <_dtoa_r+0x464>
 8009aba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009abc:	1e6b      	subs	r3, r5, #1
 8009abe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ac0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009ac4:	2b30      	cmp	r3, #48	; 0x30
 8009ac6:	d0f8      	beq.n	8009aba <_dtoa_r+0x5fa>
 8009ac8:	9700      	str	r7, [sp, #0]
 8009aca:	e049      	b.n	8009b60 <_dtoa_r+0x6a0>
 8009acc:	4b05      	ldr	r3, [pc, #20]	; (8009ae4 <_dtoa_r+0x624>)
 8009ace:	f7f6 fdb3 	bl	8000638 <__aeabi_dmul>
 8009ad2:	4680      	mov	r8, r0
 8009ad4:	4689      	mov	r9, r1
 8009ad6:	e7bd      	b.n	8009a54 <_dtoa_r+0x594>
 8009ad8:	0800ba90 	.word	0x0800ba90
 8009adc:	0800ba68 	.word	0x0800ba68
 8009ae0:	3ff00000 	.word	0x3ff00000
 8009ae4:	40240000 	.word	0x40240000
 8009ae8:	401c0000 	.word	0x401c0000
 8009aec:	40140000 	.word	0x40140000
 8009af0:	3fe00000 	.word	0x3fe00000
 8009af4:	9d01      	ldr	r5, [sp, #4]
 8009af6:	4656      	mov	r6, sl
 8009af8:	465f      	mov	r7, fp
 8009afa:	4642      	mov	r2, r8
 8009afc:	464b      	mov	r3, r9
 8009afe:	4630      	mov	r0, r6
 8009b00:	4639      	mov	r1, r7
 8009b02:	f7f6 fec3 	bl	800088c <__aeabi_ddiv>
 8009b06:	f7f7 f847 	bl	8000b98 <__aeabi_d2iz>
 8009b0a:	4682      	mov	sl, r0
 8009b0c:	f7f6 fd2a 	bl	8000564 <__aeabi_i2d>
 8009b10:	4642      	mov	r2, r8
 8009b12:	464b      	mov	r3, r9
 8009b14:	f7f6 fd90 	bl	8000638 <__aeabi_dmul>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	4630      	mov	r0, r6
 8009b1e:	4639      	mov	r1, r7
 8009b20:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009b24:	f7f6 fbd0 	bl	80002c8 <__aeabi_dsub>
 8009b28:	f805 6b01 	strb.w	r6, [r5], #1
 8009b2c:	9e01      	ldr	r6, [sp, #4]
 8009b2e:	9f03      	ldr	r7, [sp, #12]
 8009b30:	1bae      	subs	r6, r5, r6
 8009b32:	42b7      	cmp	r7, r6
 8009b34:	4602      	mov	r2, r0
 8009b36:	460b      	mov	r3, r1
 8009b38:	d135      	bne.n	8009ba6 <_dtoa_r+0x6e6>
 8009b3a:	f7f6 fbc7 	bl	80002cc <__adddf3>
 8009b3e:	4642      	mov	r2, r8
 8009b40:	464b      	mov	r3, r9
 8009b42:	4606      	mov	r6, r0
 8009b44:	460f      	mov	r7, r1
 8009b46:	f7f7 f807 	bl	8000b58 <__aeabi_dcmpgt>
 8009b4a:	b9d0      	cbnz	r0, 8009b82 <_dtoa_r+0x6c2>
 8009b4c:	4642      	mov	r2, r8
 8009b4e:	464b      	mov	r3, r9
 8009b50:	4630      	mov	r0, r6
 8009b52:	4639      	mov	r1, r7
 8009b54:	f7f6 ffd8 	bl	8000b08 <__aeabi_dcmpeq>
 8009b58:	b110      	cbz	r0, 8009b60 <_dtoa_r+0x6a0>
 8009b5a:	f01a 0f01 	tst.w	sl, #1
 8009b5e:	d110      	bne.n	8009b82 <_dtoa_r+0x6c2>
 8009b60:	4620      	mov	r0, r4
 8009b62:	ee18 1a10 	vmov	r1, s16
 8009b66:	f000 faf7 	bl	800a158 <_Bfree>
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	9800      	ldr	r0, [sp, #0]
 8009b6e:	702b      	strb	r3, [r5, #0]
 8009b70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b72:	3001      	adds	r0, #1
 8009b74:	6018      	str	r0, [r3, #0]
 8009b76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f43f acf1 	beq.w	8009560 <_dtoa_r+0xa0>
 8009b7e:	601d      	str	r5, [r3, #0]
 8009b80:	e4ee      	b.n	8009560 <_dtoa_r+0xa0>
 8009b82:	9f00      	ldr	r7, [sp, #0]
 8009b84:	462b      	mov	r3, r5
 8009b86:	461d      	mov	r5, r3
 8009b88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b8c:	2a39      	cmp	r2, #57	; 0x39
 8009b8e:	d106      	bne.n	8009b9e <_dtoa_r+0x6de>
 8009b90:	9a01      	ldr	r2, [sp, #4]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d1f7      	bne.n	8009b86 <_dtoa_r+0x6c6>
 8009b96:	9901      	ldr	r1, [sp, #4]
 8009b98:	2230      	movs	r2, #48	; 0x30
 8009b9a:	3701      	adds	r7, #1
 8009b9c:	700a      	strb	r2, [r1, #0]
 8009b9e:	781a      	ldrb	r2, [r3, #0]
 8009ba0:	3201      	adds	r2, #1
 8009ba2:	701a      	strb	r2, [r3, #0]
 8009ba4:	e790      	b.n	8009ac8 <_dtoa_r+0x608>
 8009ba6:	4ba6      	ldr	r3, [pc, #664]	; (8009e40 <_dtoa_r+0x980>)
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f7f6 fd45 	bl	8000638 <__aeabi_dmul>
 8009bae:	2200      	movs	r2, #0
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	4606      	mov	r6, r0
 8009bb4:	460f      	mov	r7, r1
 8009bb6:	f7f6 ffa7 	bl	8000b08 <__aeabi_dcmpeq>
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	d09d      	beq.n	8009afa <_dtoa_r+0x63a>
 8009bbe:	e7cf      	b.n	8009b60 <_dtoa_r+0x6a0>
 8009bc0:	9a08      	ldr	r2, [sp, #32]
 8009bc2:	2a00      	cmp	r2, #0
 8009bc4:	f000 80d7 	beq.w	8009d76 <_dtoa_r+0x8b6>
 8009bc8:	9a06      	ldr	r2, [sp, #24]
 8009bca:	2a01      	cmp	r2, #1
 8009bcc:	f300 80ba 	bgt.w	8009d44 <_dtoa_r+0x884>
 8009bd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bd2:	2a00      	cmp	r2, #0
 8009bd4:	f000 80b2 	beq.w	8009d3c <_dtoa_r+0x87c>
 8009bd8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009bdc:	9e07      	ldr	r6, [sp, #28]
 8009bde:	9d04      	ldr	r5, [sp, #16]
 8009be0:	9a04      	ldr	r2, [sp, #16]
 8009be2:	441a      	add	r2, r3
 8009be4:	9204      	str	r2, [sp, #16]
 8009be6:	9a05      	ldr	r2, [sp, #20]
 8009be8:	2101      	movs	r1, #1
 8009bea:	441a      	add	r2, r3
 8009bec:	4620      	mov	r0, r4
 8009bee:	9205      	str	r2, [sp, #20]
 8009bf0:	f000 fb6a 	bl	800a2c8 <__i2b>
 8009bf4:	4607      	mov	r7, r0
 8009bf6:	2d00      	cmp	r5, #0
 8009bf8:	dd0c      	ble.n	8009c14 <_dtoa_r+0x754>
 8009bfa:	9b05      	ldr	r3, [sp, #20]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	dd09      	ble.n	8009c14 <_dtoa_r+0x754>
 8009c00:	42ab      	cmp	r3, r5
 8009c02:	9a04      	ldr	r2, [sp, #16]
 8009c04:	bfa8      	it	ge
 8009c06:	462b      	movge	r3, r5
 8009c08:	1ad2      	subs	r2, r2, r3
 8009c0a:	9204      	str	r2, [sp, #16]
 8009c0c:	9a05      	ldr	r2, [sp, #20]
 8009c0e:	1aed      	subs	r5, r5, r3
 8009c10:	1ad3      	subs	r3, r2, r3
 8009c12:	9305      	str	r3, [sp, #20]
 8009c14:	9b07      	ldr	r3, [sp, #28]
 8009c16:	b31b      	cbz	r3, 8009c60 <_dtoa_r+0x7a0>
 8009c18:	9b08      	ldr	r3, [sp, #32]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	f000 80af 	beq.w	8009d7e <_dtoa_r+0x8be>
 8009c20:	2e00      	cmp	r6, #0
 8009c22:	dd13      	ble.n	8009c4c <_dtoa_r+0x78c>
 8009c24:	4639      	mov	r1, r7
 8009c26:	4632      	mov	r2, r6
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f000 fc0d 	bl	800a448 <__pow5mult>
 8009c2e:	ee18 2a10 	vmov	r2, s16
 8009c32:	4601      	mov	r1, r0
 8009c34:	4607      	mov	r7, r0
 8009c36:	4620      	mov	r0, r4
 8009c38:	f000 fb5c 	bl	800a2f4 <__multiply>
 8009c3c:	ee18 1a10 	vmov	r1, s16
 8009c40:	4680      	mov	r8, r0
 8009c42:	4620      	mov	r0, r4
 8009c44:	f000 fa88 	bl	800a158 <_Bfree>
 8009c48:	ee08 8a10 	vmov	s16, r8
 8009c4c:	9b07      	ldr	r3, [sp, #28]
 8009c4e:	1b9a      	subs	r2, r3, r6
 8009c50:	d006      	beq.n	8009c60 <_dtoa_r+0x7a0>
 8009c52:	ee18 1a10 	vmov	r1, s16
 8009c56:	4620      	mov	r0, r4
 8009c58:	f000 fbf6 	bl	800a448 <__pow5mult>
 8009c5c:	ee08 0a10 	vmov	s16, r0
 8009c60:	2101      	movs	r1, #1
 8009c62:	4620      	mov	r0, r4
 8009c64:	f000 fb30 	bl	800a2c8 <__i2b>
 8009c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	4606      	mov	r6, r0
 8009c6e:	f340 8088 	ble.w	8009d82 <_dtoa_r+0x8c2>
 8009c72:	461a      	mov	r2, r3
 8009c74:	4601      	mov	r1, r0
 8009c76:	4620      	mov	r0, r4
 8009c78:	f000 fbe6 	bl	800a448 <__pow5mult>
 8009c7c:	9b06      	ldr	r3, [sp, #24]
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	4606      	mov	r6, r0
 8009c82:	f340 8081 	ble.w	8009d88 <_dtoa_r+0x8c8>
 8009c86:	f04f 0800 	mov.w	r8, #0
 8009c8a:	6933      	ldr	r3, [r6, #16]
 8009c8c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009c90:	6918      	ldr	r0, [r3, #16]
 8009c92:	f000 fac9 	bl	800a228 <__hi0bits>
 8009c96:	f1c0 0020 	rsb	r0, r0, #32
 8009c9a:	9b05      	ldr	r3, [sp, #20]
 8009c9c:	4418      	add	r0, r3
 8009c9e:	f010 001f 	ands.w	r0, r0, #31
 8009ca2:	f000 8092 	beq.w	8009dca <_dtoa_r+0x90a>
 8009ca6:	f1c0 0320 	rsb	r3, r0, #32
 8009caa:	2b04      	cmp	r3, #4
 8009cac:	f340 808a 	ble.w	8009dc4 <_dtoa_r+0x904>
 8009cb0:	f1c0 001c 	rsb	r0, r0, #28
 8009cb4:	9b04      	ldr	r3, [sp, #16]
 8009cb6:	4403      	add	r3, r0
 8009cb8:	9304      	str	r3, [sp, #16]
 8009cba:	9b05      	ldr	r3, [sp, #20]
 8009cbc:	4403      	add	r3, r0
 8009cbe:	4405      	add	r5, r0
 8009cc0:	9305      	str	r3, [sp, #20]
 8009cc2:	9b04      	ldr	r3, [sp, #16]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	dd07      	ble.n	8009cd8 <_dtoa_r+0x818>
 8009cc8:	ee18 1a10 	vmov	r1, s16
 8009ccc:	461a      	mov	r2, r3
 8009cce:	4620      	mov	r0, r4
 8009cd0:	f000 fc14 	bl	800a4fc <__lshift>
 8009cd4:	ee08 0a10 	vmov	s16, r0
 8009cd8:	9b05      	ldr	r3, [sp, #20]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	dd05      	ble.n	8009cea <_dtoa_r+0x82a>
 8009cde:	4631      	mov	r1, r6
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f000 fc0a 	bl	800a4fc <__lshift>
 8009ce8:	4606      	mov	r6, r0
 8009cea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d06e      	beq.n	8009dce <_dtoa_r+0x90e>
 8009cf0:	ee18 0a10 	vmov	r0, s16
 8009cf4:	4631      	mov	r1, r6
 8009cf6:	f000 fc71 	bl	800a5dc <__mcmp>
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	da67      	bge.n	8009dce <_dtoa_r+0x90e>
 8009cfe:	9b00      	ldr	r3, [sp, #0]
 8009d00:	3b01      	subs	r3, #1
 8009d02:	ee18 1a10 	vmov	r1, s16
 8009d06:	9300      	str	r3, [sp, #0]
 8009d08:	220a      	movs	r2, #10
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	f000 fa45 	bl	800a19c <__multadd>
 8009d12:	9b08      	ldr	r3, [sp, #32]
 8009d14:	ee08 0a10 	vmov	s16, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f000 81b1 	beq.w	800a080 <_dtoa_r+0xbc0>
 8009d1e:	2300      	movs	r3, #0
 8009d20:	4639      	mov	r1, r7
 8009d22:	220a      	movs	r2, #10
 8009d24:	4620      	mov	r0, r4
 8009d26:	f000 fa39 	bl	800a19c <__multadd>
 8009d2a:	9b02      	ldr	r3, [sp, #8]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	4607      	mov	r7, r0
 8009d30:	f300 808e 	bgt.w	8009e50 <_dtoa_r+0x990>
 8009d34:	9b06      	ldr	r3, [sp, #24]
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	dc51      	bgt.n	8009dde <_dtoa_r+0x91e>
 8009d3a:	e089      	b.n	8009e50 <_dtoa_r+0x990>
 8009d3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009d42:	e74b      	b.n	8009bdc <_dtoa_r+0x71c>
 8009d44:	9b03      	ldr	r3, [sp, #12]
 8009d46:	1e5e      	subs	r6, r3, #1
 8009d48:	9b07      	ldr	r3, [sp, #28]
 8009d4a:	42b3      	cmp	r3, r6
 8009d4c:	bfbf      	itttt	lt
 8009d4e:	9b07      	ldrlt	r3, [sp, #28]
 8009d50:	9607      	strlt	r6, [sp, #28]
 8009d52:	1af2      	sublt	r2, r6, r3
 8009d54:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009d56:	bfb6      	itet	lt
 8009d58:	189b      	addlt	r3, r3, r2
 8009d5a:	1b9e      	subge	r6, r3, r6
 8009d5c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009d5e:	9b03      	ldr	r3, [sp, #12]
 8009d60:	bfb8      	it	lt
 8009d62:	2600      	movlt	r6, #0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	bfb7      	itett	lt
 8009d68:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009d6c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009d70:	1a9d      	sublt	r5, r3, r2
 8009d72:	2300      	movlt	r3, #0
 8009d74:	e734      	b.n	8009be0 <_dtoa_r+0x720>
 8009d76:	9e07      	ldr	r6, [sp, #28]
 8009d78:	9d04      	ldr	r5, [sp, #16]
 8009d7a:	9f08      	ldr	r7, [sp, #32]
 8009d7c:	e73b      	b.n	8009bf6 <_dtoa_r+0x736>
 8009d7e:	9a07      	ldr	r2, [sp, #28]
 8009d80:	e767      	b.n	8009c52 <_dtoa_r+0x792>
 8009d82:	9b06      	ldr	r3, [sp, #24]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	dc18      	bgt.n	8009dba <_dtoa_r+0x8fa>
 8009d88:	f1ba 0f00 	cmp.w	sl, #0
 8009d8c:	d115      	bne.n	8009dba <_dtoa_r+0x8fa>
 8009d8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d92:	b993      	cbnz	r3, 8009dba <_dtoa_r+0x8fa>
 8009d94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d98:	0d1b      	lsrs	r3, r3, #20
 8009d9a:	051b      	lsls	r3, r3, #20
 8009d9c:	b183      	cbz	r3, 8009dc0 <_dtoa_r+0x900>
 8009d9e:	9b04      	ldr	r3, [sp, #16]
 8009da0:	3301      	adds	r3, #1
 8009da2:	9304      	str	r3, [sp, #16]
 8009da4:	9b05      	ldr	r3, [sp, #20]
 8009da6:	3301      	adds	r3, #1
 8009da8:	9305      	str	r3, [sp, #20]
 8009daa:	f04f 0801 	mov.w	r8, #1
 8009dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	f47f af6a 	bne.w	8009c8a <_dtoa_r+0x7ca>
 8009db6:	2001      	movs	r0, #1
 8009db8:	e76f      	b.n	8009c9a <_dtoa_r+0x7da>
 8009dba:	f04f 0800 	mov.w	r8, #0
 8009dbe:	e7f6      	b.n	8009dae <_dtoa_r+0x8ee>
 8009dc0:	4698      	mov	r8, r3
 8009dc2:	e7f4      	b.n	8009dae <_dtoa_r+0x8ee>
 8009dc4:	f43f af7d 	beq.w	8009cc2 <_dtoa_r+0x802>
 8009dc8:	4618      	mov	r0, r3
 8009dca:	301c      	adds	r0, #28
 8009dcc:	e772      	b.n	8009cb4 <_dtoa_r+0x7f4>
 8009dce:	9b03      	ldr	r3, [sp, #12]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	dc37      	bgt.n	8009e44 <_dtoa_r+0x984>
 8009dd4:	9b06      	ldr	r3, [sp, #24]
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	dd34      	ble.n	8009e44 <_dtoa_r+0x984>
 8009dda:	9b03      	ldr	r3, [sp, #12]
 8009ddc:	9302      	str	r3, [sp, #8]
 8009dde:	9b02      	ldr	r3, [sp, #8]
 8009de0:	b96b      	cbnz	r3, 8009dfe <_dtoa_r+0x93e>
 8009de2:	4631      	mov	r1, r6
 8009de4:	2205      	movs	r2, #5
 8009de6:	4620      	mov	r0, r4
 8009de8:	f000 f9d8 	bl	800a19c <__multadd>
 8009dec:	4601      	mov	r1, r0
 8009dee:	4606      	mov	r6, r0
 8009df0:	ee18 0a10 	vmov	r0, s16
 8009df4:	f000 fbf2 	bl	800a5dc <__mcmp>
 8009df8:	2800      	cmp	r0, #0
 8009dfa:	f73f adbb 	bgt.w	8009974 <_dtoa_r+0x4b4>
 8009dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e00:	9d01      	ldr	r5, [sp, #4]
 8009e02:	43db      	mvns	r3, r3
 8009e04:	9300      	str	r3, [sp, #0]
 8009e06:	f04f 0800 	mov.w	r8, #0
 8009e0a:	4631      	mov	r1, r6
 8009e0c:	4620      	mov	r0, r4
 8009e0e:	f000 f9a3 	bl	800a158 <_Bfree>
 8009e12:	2f00      	cmp	r7, #0
 8009e14:	f43f aea4 	beq.w	8009b60 <_dtoa_r+0x6a0>
 8009e18:	f1b8 0f00 	cmp.w	r8, #0
 8009e1c:	d005      	beq.n	8009e2a <_dtoa_r+0x96a>
 8009e1e:	45b8      	cmp	r8, r7
 8009e20:	d003      	beq.n	8009e2a <_dtoa_r+0x96a>
 8009e22:	4641      	mov	r1, r8
 8009e24:	4620      	mov	r0, r4
 8009e26:	f000 f997 	bl	800a158 <_Bfree>
 8009e2a:	4639      	mov	r1, r7
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f000 f993 	bl	800a158 <_Bfree>
 8009e32:	e695      	b.n	8009b60 <_dtoa_r+0x6a0>
 8009e34:	2600      	movs	r6, #0
 8009e36:	4637      	mov	r7, r6
 8009e38:	e7e1      	b.n	8009dfe <_dtoa_r+0x93e>
 8009e3a:	9700      	str	r7, [sp, #0]
 8009e3c:	4637      	mov	r7, r6
 8009e3e:	e599      	b.n	8009974 <_dtoa_r+0x4b4>
 8009e40:	40240000 	.word	0x40240000
 8009e44:	9b08      	ldr	r3, [sp, #32]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	f000 80ca 	beq.w	8009fe0 <_dtoa_r+0xb20>
 8009e4c:	9b03      	ldr	r3, [sp, #12]
 8009e4e:	9302      	str	r3, [sp, #8]
 8009e50:	2d00      	cmp	r5, #0
 8009e52:	dd05      	ble.n	8009e60 <_dtoa_r+0x9a0>
 8009e54:	4639      	mov	r1, r7
 8009e56:	462a      	mov	r2, r5
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f000 fb4f 	bl	800a4fc <__lshift>
 8009e5e:	4607      	mov	r7, r0
 8009e60:	f1b8 0f00 	cmp.w	r8, #0
 8009e64:	d05b      	beq.n	8009f1e <_dtoa_r+0xa5e>
 8009e66:	6879      	ldr	r1, [r7, #4]
 8009e68:	4620      	mov	r0, r4
 8009e6a:	f000 f935 	bl	800a0d8 <_Balloc>
 8009e6e:	4605      	mov	r5, r0
 8009e70:	b928      	cbnz	r0, 8009e7e <_dtoa_r+0x9be>
 8009e72:	4b87      	ldr	r3, [pc, #540]	; (800a090 <_dtoa_r+0xbd0>)
 8009e74:	4602      	mov	r2, r0
 8009e76:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009e7a:	f7ff bb3b 	b.w	80094f4 <_dtoa_r+0x34>
 8009e7e:	693a      	ldr	r2, [r7, #16]
 8009e80:	3202      	adds	r2, #2
 8009e82:	0092      	lsls	r2, r2, #2
 8009e84:	f107 010c 	add.w	r1, r7, #12
 8009e88:	300c      	adds	r0, #12
 8009e8a:	f000 f90b 	bl	800a0a4 <memcpy>
 8009e8e:	2201      	movs	r2, #1
 8009e90:	4629      	mov	r1, r5
 8009e92:	4620      	mov	r0, r4
 8009e94:	f000 fb32 	bl	800a4fc <__lshift>
 8009e98:	9b01      	ldr	r3, [sp, #4]
 8009e9a:	f103 0901 	add.w	r9, r3, #1
 8009e9e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	9305      	str	r3, [sp, #20]
 8009ea6:	f00a 0301 	and.w	r3, sl, #1
 8009eaa:	46b8      	mov	r8, r7
 8009eac:	9304      	str	r3, [sp, #16]
 8009eae:	4607      	mov	r7, r0
 8009eb0:	4631      	mov	r1, r6
 8009eb2:	ee18 0a10 	vmov	r0, s16
 8009eb6:	f7ff fa76 	bl	80093a6 <quorem>
 8009eba:	4641      	mov	r1, r8
 8009ebc:	9002      	str	r0, [sp, #8]
 8009ebe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009ec2:	ee18 0a10 	vmov	r0, s16
 8009ec6:	f000 fb89 	bl	800a5dc <__mcmp>
 8009eca:	463a      	mov	r2, r7
 8009ecc:	9003      	str	r0, [sp, #12]
 8009ece:	4631      	mov	r1, r6
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f000 fb9f 	bl	800a614 <__mdiff>
 8009ed6:	68c2      	ldr	r2, [r0, #12]
 8009ed8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8009edc:	4605      	mov	r5, r0
 8009ede:	bb02      	cbnz	r2, 8009f22 <_dtoa_r+0xa62>
 8009ee0:	4601      	mov	r1, r0
 8009ee2:	ee18 0a10 	vmov	r0, s16
 8009ee6:	f000 fb79 	bl	800a5dc <__mcmp>
 8009eea:	4602      	mov	r2, r0
 8009eec:	4629      	mov	r1, r5
 8009eee:	4620      	mov	r0, r4
 8009ef0:	9207      	str	r2, [sp, #28]
 8009ef2:	f000 f931 	bl	800a158 <_Bfree>
 8009ef6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009efa:	ea43 0102 	orr.w	r1, r3, r2
 8009efe:	9b04      	ldr	r3, [sp, #16]
 8009f00:	430b      	orrs	r3, r1
 8009f02:	464d      	mov	r5, r9
 8009f04:	d10f      	bne.n	8009f26 <_dtoa_r+0xa66>
 8009f06:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009f0a:	d02a      	beq.n	8009f62 <_dtoa_r+0xaa2>
 8009f0c:	9b03      	ldr	r3, [sp, #12]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	dd02      	ble.n	8009f18 <_dtoa_r+0xa58>
 8009f12:	9b02      	ldr	r3, [sp, #8]
 8009f14:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009f18:	f88b a000 	strb.w	sl, [fp]
 8009f1c:	e775      	b.n	8009e0a <_dtoa_r+0x94a>
 8009f1e:	4638      	mov	r0, r7
 8009f20:	e7ba      	b.n	8009e98 <_dtoa_r+0x9d8>
 8009f22:	2201      	movs	r2, #1
 8009f24:	e7e2      	b.n	8009eec <_dtoa_r+0xa2c>
 8009f26:	9b03      	ldr	r3, [sp, #12]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	db04      	blt.n	8009f36 <_dtoa_r+0xa76>
 8009f2c:	9906      	ldr	r1, [sp, #24]
 8009f2e:	430b      	orrs	r3, r1
 8009f30:	9904      	ldr	r1, [sp, #16]
 8009f32:	430b      	orrs	r3, r1
 8009f34:	d122      	bne.n	8009f7c <_dtoa_r+0xabc>
 8009f36:	2a00      	cmp	r2, #0
 8009f38:	ddee      	ble.n	8009f18 <_dtoa_r+0xa58>
 8009f3a:	ee18 1a10 	vmov	r1, s16
 8009f3e:	2201      	movs	r2, #1
 8009f40:	4620      	mov	r0, r4
 8009f42:	f000 fadb 	bl	800a4fc <__lshift>
 8009f46:	4631      	mov	r1, r6
 8009f48:	ee08 0a10 	vmov	s16, r0
 8009f4c:	f000 fb46 	bl	800a5dc <__mcmp>
 8009f50:	2800      	cmp	r0, #0
 8009f52:	dc03      	bgt.n	8009f5c <_dtoa_r+0xa9c>
 8009f54:	d1e0      	bne.n	8009f18 <_dtoa_r+0xa58>
 8009f56:	f01a 0f01 	tst.w	sl, #1
 8009f5a:	d0dd      	beq.n	8009f18 <_dtoa_r+0xa58>
 8009f5c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009f60:	d1d7      	bne.n	8009f12 <_dtoa_r+0xa52>
 8009f62:	2339      	movs	r3, #57	; 0x39
 8009f64:	f88b 3000 	strb.w	r3, [fp]
 8009f68:	462b      	mov	r3, r5
 8009f6a:	461d      	mov	r5, r3
 8009f6c:	3b01      	subs	r3, #1
 8009f6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009f72:	2a39      	cmp	r2, #57	; 0x39
 8009f74:	d071      	beq.n	800a05a <_dtoa_r+0xb9a>
 8009f76:	3201      	adds	r2, #1
 8009f78:	701a      	strb	r2, [r3, #0]
 8009f7a:	e746      	b.n	8009e0a <_dtoa_r+0x94a>
 8009f7c:	2a00      	cmp	r2, #0
 8009f7e:	dd07      	ble.n	8009f90 <_dtoa_r+0xad0>
 8009f80:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009f84:	d0ed      	beq.n	8009f62 <_dtoa_r+0xaa2>
 8009f86:	f10a 0301 	add.w	r3, sl, #1
 8009f8a:	f88b 3000 	strb.w	r3, [fp]
 8009f8e:	e73c      	b.n	8009e0a <_dtoa_r+0x94a>
 8009f90:	9b05      	ldr	r3, [sp, #20]
 8009f92:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009f96:	4599      	cmp	r9, r3
 8009f98:	d047      	beq.n	800a02a <_dtoa_r+0xb6a>
 8009f9a:	ee18 1a10 	vmov	r1, s16
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	220a      	movs	r2, #10
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	f000 f8fa 	bl	800a19c <__multadd>
 8009fa8:	45b8      	cmp	r8, r7
 8009faa:	ee08 0a10 	vmov	s16, r0
 8009fae:	f04f 0300 	mov.w	r3, #0
 8009fb2:	f04f 020a 	mov.w	r2, #10
 8009fb6:	4641      	mov	r1, r8
 8009fb8:	4620      	mov	r0, r4
 8009fba:	d106      	bne.n	8009fca <_dtoa_r+0xb0a>
 8009fbc:	f000 f8ee 	bl	800a19c <__multadd>
 8009fc0:	4680      	mov	r8, r0
 8009fc2:	4607      	mov	r7, r0
 8009fc4:	f109 0901 	add.w	r9, r9, #1
 8009fc8:	e772      	b.n	8009eb0 <_dtoa_r+0x9f0>
 8009fca:	f000 f8e7 	bl	800a19c <__multadd>
 8009fce:	4639      	mov	r1, r7
 8009fd0:	4680      	mov	r8, r0
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	220a      	movs	r2, #10
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	f000 f8e0 	bl	800a19c <__multadd>
 8009fdc:	4607      	mov	r7, r0
 8009fde:	e7f1      	b.n	8009fc4 <_dtoa_r+0xb04>
 8009fe0:	9b03      	ldr	r3, [sp, #12]
 8009fe2:	9302      	str	r3, [sp, #8]
 8009fe4:	9d01      	ldr	r5, [sp, #4]
 8009fe6:	ee18 0a10 	vmov	r0, s16
 8009fea:	4631      	mov	r1, r6
 8009fec:	f7ff f9db 	bl	80093a6 <quorem>
 8009ff0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009ff4:	9b01      	ldr	r3, [sp, #4]
 8009ff6:	f805 ab01 	strb.w	sl, [r5], #1
 8009ffa:	1aea      	subs	r2, r5, r3
 8009ffc:	9b02      	ldr	r3, [sp, #8]
 8009ffe:	4293      	cmp	r3, r2
 800a000:	dd09      	ble.n	800a016 <_dtoa_r+0xb56>
 800a002:	ee18 1a10 	vmov	r1, s16
 800a006:	2300      	movs	r3, #0
 800a008:	220a      	movs	r2, #10
 800a00a:	4620      	mov	r0, r4
 800a00c:	f000 f8c6 	bl	800a19c <__multadd>
 800a010:	ee08 0a10 	vmov	s16, r0
 800a014:	e7e7      	b.n	8009fe6 <_dtoa_r+0xb26>
 800a016:	9b02      	ldr	r3, [sp, #8]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	bfc8      	it	gt
 800a01c:	461d      	movgt	r5, r3
 800a01e:	9b01      	ldr	r3, [sp, #4]
 800a020:	bfd8      	it	le
 800a022:	2501      	movle	r5, #1
 800a024:	441d      	add	r5, r3
 800a026:	f04f 0800 	mov.w	r8, #0
 800a02a:	ee18 1a10 	vmov	r1, s16
 800a02e:	2201      	movs	r2, #1
 800a030:	4620      	mov	r0, r4
 800a032:	f000 fa63 	bl	800a4fc <__lshift>
 800a036:	4631      	mov	r1, r6
 800a038:	ee08 0a10 	vmov	s16, r0
 800a03c:	f000 face 	bl	800a5dc <__mcmp>
 800a040:	2800      	cmp	r0, #0
 800a042:	dc91      	bgt.n	8009f68 <_dtoa_r+0xaa8>
 800a044:	d102      	bne.n	800a04c <_dtoa_r+0xb8c>
 800a046:	f01a 0f01 	tst.w	sl, #1
 800a04a:	d18d      	bne.n	8009f68 <_dtoa_r+0xaa8>
 800a04c:	462b      	mov	r3, r5
 800a04e:	461d      	mov	r5, r3
 800a050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a054:	2a30      	cmp	r2, #48	; 0x30
 800a056:	d0fa      	beq.n	800a04e <_dtoa_r+0xb8e>
 800a058:	e6d7      	b.n	8009e0a <_dtoa_r+0x94a>
 800a05a:	9a01      	ldr	r2, [sp, #4]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d184      	bne.n	8009f6a <_dtoa_r+0xaaa>
 800a060:	9b00      	ldr	r3, [sp, #0]
 800a062:	3301      	adds	r3, #1
 800a064:	9300      	str	r3, [sp, #0]
 800a066:	2331      	movs	r3, #49	; 0x31
 800a068:	7013      	strb	r3, [r2, #0]
 800a06a:	e6ce      	b.n	8009e0a <_dtoa_r+0x94a>
 800a06c:	4b09      	ldr	r3, [pc, #36]	; (800a094 <_dtoa_r+0xbd4>)
 800a06e:	f7ff ba95 	b.w	800959c <_dtoa_r+0xdc>
 800a072:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a074:	2b00      	cmp	r3, #0
 800a076:	f47f aa6e 	bne.w	8009556 <_dtoa_r+0x96>
 800a07a:	4b07      	ldr	r3, [pc, #28]	; (800a098 <_dtoa_r+0xbd8>)
 800a07c:	f7ff ba8e 	b.w	800959c <_dtoa_r+0xdc>
 800a080:	9b02      	ldr	r3, [sp, #8]
 800a082:	2b00      	cmp	r3, #0
 800a084:	dcae      	bgt.n	8009fe4 <_dtoa_r+0xb24>
 800a086:	9b06      	ldr	r3, [sp, #24]
 800a088:	2b02      	cmp	r3, #2
 800a08a:	f73f aea8 	bgt.w	8009dde <_dtoa_r+0x91e>
 800a08e:	e7a9      	b.n	8009fe4 <_dtoa_r+0xb24>
 800a090:	0800b9fb 	.word	0x0800b9fb
 800a094:	0800b958 	.word	0x0800b958
 800a098:	0800b97c 	.word	0x0800b97c

0800a09c <_localeconv_r>:
 800a09c:	4800      	ldr	r0, [pc, #0]	; (800a0a0 <_localeconv_r+0x4>)
 800a09e:	4770      	bx	lr
 800a0a0:	20002538 	.word	0x20002538

0800a0a4 <memcpy>:
 800a0a4:	440a      	add	r2, r1
 800a0a6:	4291      	cmp	r1, r2
 800a0a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a0ac:	d100      	bne.n	800a0b0 <memcpy+0xc>
 800a0ae:	4770      	bx	lr
 800a0b0:	b510      	push	{r4, lr}
 800a0b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0ba:	4291      	cmp	r1, r2
 800a0bc:	d1f9      	bne.n	800a0b2 <memcpy+0xe>
 800a0be:	bd10      	pop	{r4, pc}

0800a0c0 <__malloc_lock>:
 800a0c0:	4801      	ldr	r0, [pc, #4]	; (800a0c8 <__malloc_lock+0x8>)
 800a0c2:	f000 bd30 	b.w	800ab26 <__retarget_lock_acquire_recursive>
 800a0c6:	bf00      	nop
 800a0c8:	20002a2c 	.word	0x20002a2c

0800a0cc <__malloc_unlock>:
 800a0cc:	4801      	ldr	r0, [pc, #4]	; (800a0d4 <__malloc_unlock+0x8>)
 800a0ce:	f000 bd2b 	b.w	800ab28 <__retarget_lock_release_recursive>
 800a0d2:	bf00      	nop
 800a0d4:	20002a2c 	.word	0x20002a2c

0800a0d8 <_Balloc>:
 800a0d8:	b570      	push	{r4, r5, r6, lr}
 800a0da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a0dc:	4604      	mov	r4, r0
 800a0de:	460d      	mov	r5, r1
 800a0e0:	b976      	cbnz	r6, 800a100 <_Balloc+0x28>
 800a0e2:	2010      	movs	r0, #16
 800a0e4:	f7fe fbba 	bl	800885c <malloc>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	6260      	str	r0, [r4, #36]	; 0x24
 800a0ec:	b920      	cbnz	r0, 800a0f8 <_Balloc+0x20>
 800a0ee:	4b18      	ldr	r3, [pc, #96]	; (800a150 <_Balloc+0x78>)
 800a0f0:	4818      	ldr	r0, [pc, #96]	; (800a154 <_Balloc+0x7c>)
 800a0f2:	2166      	movs	r1, #102	; 0x66
 800a0f4:	f000 fce6 	bl	800aac4 <__assert_func>
 800a0f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0fc:	6006      	str	r6, [r0, #0]
 800a0fe:	60c6      	str	r6, [r0, #12]
 800a100:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a102:	68f3      	ldr	r3, [r6, #12]
 800a104:	b183      	cbz	r3, 800a128 <_Balloc+0x50>
 800a106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a10e:	b9b8      	cbnz	r0, 800a140 <_Balloc+0x68>
 800a110:	2101      	movs	r1, #1
 800a112:	fa01 f605 	lsl.w	r6, r1, r5
 800a116:	1d72      	adds	r2, r6, #5
 800a118:	0092      	lsls	r2, r2, #2
 800a11a:	4620      	mov	r0, r4
 800a11c:	f000 fb60 	bl	800a7e0 <_calloc_r>
 800a120:	b160      	cbz	r0, 800a13c <_Balloc+0x64>
 800a122:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a126:	e00e      	b.n	800a146 <_Balloc+0x6e>
 800a128:	2221      	movs	r2, #33	; 0x21
 800a12a:	2104      	movs	r1, #4
 800a12c:	4620      	mov	r0, r4
 800a12e:	f000 fb57 	bl	800a7e0 <_calloc_r>
 800a132:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a134:	60f0      	str	r0, [r6, #12]
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d1e4      	bne.n	800a106 <_Balloc+0x2e>
 800a13c:	2000      	movs	r0, #0
 800a13e:	bd70      	pop	{r4, r5, r6, pc}
 800a140:	6802      	ldr	r2, [r0, #0]
 800a142:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a146:	2300      	movs	r3, #0
 800a148:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a14c:	e7f7      	b.n	800a13e <_Balloc+0x66>
 800a14e:	bf00      	nop
 800a150:	0800b989 	.word	0x0800b989
 800a154:	0800ba0c 	.word	0x0800ba0c

0800a158 <_Bfree>:
 800a158:	b570      	push	{r4, r5, r6, lr}
 800a15a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a15c:	4605      	mov	r5, r0
 800a15e:	460c      	mov	r4, r1
 800a160:	b976      	cbnz	r6, 800a180 <_Bfree+0x28>
 800a162:	2010      	movs	r0, #16
 800a164:	f7fe fb7a 	bl	800885c <malloc>
 800a168:	4602      	mov	r2, r0
 800a16a:	6268      	str	r0, [r5, #36]	; 0x24
 800a16c:	b920      	cbnz	r0, 800a178 <_Bfree+0x20>
 800a16e:	4b09      	ldr	r3, [pc, #36]	; (800a194 <_Bfree+0x3c>)
 800a170:	4809      	ldr	r0, [pc, #36]	; (800a198 <_Bfree+0x40>)
 800a172:	218a      	movs	r1, #138	; 0x8a
 800a174:	f000 fca6 	bl	800aac4 <__assert_func>
 800a178:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a17c:	6006      	str	r6, [r0, #0]
 800a17e:	60c6      	str	r6, [r0, #12]
 800a180:	b13c      	cbz	r4, 800a192 <_Bfree+0x3a>
 800a182:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a184:	6862      	ldr	r2, [r4, #4]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a18c:	6021      	str	r1, [r4, #0]
 800a18e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a192:	bd70      	pop	{r4, r5, r6, pc}
 800a194:	0800b989 	.word	0x0800b989
 800a198:	0800ba0c 	.word	0x0800ba0c

0800a19c <__multadd>:
 800a19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1a0:	690d      	ldr	r5, [r1, #16]
 800a1a2:	4607      	mov	r7, r0
 800a1a4:	460c      	mov	r4, r1
 800a1a6:	461e      	mov	r6, r3
 800a1a8:	f101 0c14 	add.w	ip, r1, #20
 800a1ac:	2000      	movs	r0, #0
 800a1ae:	f8dc 3000 	ldr.w	r3, [ip]
 800a1b2:	b299      	uxth	r1, r3
 800a1b4:	fb02 6101 	mla	r1, r2, r1, r6
 800a1b8:	0c1e      	lsrs	r6, r3, #16
 800a1ba:	0c0b      	lsrs	r3, r1, #16
 800a1bc:	fb02 3306 	mla	r3, r2, r6, r3
 800a1c0:	b289      	uxth	r1, r1
 800a1c2:	3001      	adds	r0, #1
 800a1c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a1c8:	4285      	cmp	r5, r0
 800a1ca:	f84c 1b04 	str.w	r1, [ip], #4
 800a1ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a1d2:	dcec      	bgt.n	800a1ae <__multadd+0x12>
 800a1d4:	b30e      	cbz	r6, 800a21a <__multadd+0x7e>
 800a1d6:	68a3      	ldr	r3, [r4, #8]
 800a1d8:	42ab      	cmp	r3, r5
 800a1da:	dc19      	bgt.n	800a210 <__multadd+0x74>
 800a1dc:	6861      	ldr	r1, [r4, #4]
 800a1de:	4638      	mov	r0, r7
 800a1e0:	3101      	adds	r1, #1
 800a1e2:	f7ff ff79 	bl	800a0d8 <_Balloc>
 800a1e6:	4680      	mov	r8, r0
 800a1e8:	b928      	cbnz	r0, 800a1f6 <__multadd+0x5a>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	4b0c      	ldr	r3, [pc, #48]	; (800a220 <__multadd+0x84>)
 800a1ee:	480d      	ldr	r0, [pc, #52]	; (800a224 <__multadd+0x88>)
 800a1f0:	21b5      	movs	r1, #181	; 0xb5
 800a1f2:	f000 fc67 	bl	800aac4 <__assert_func>
 800a1f6:	6922      	ldr	r2, [r4, #16]
 800a1f8:	3202      	adds	r2, #2
 800a1fa:	f104 010c 	add.w	r1, r4, #12
 800a1fe:	0092      	lsls	r2, r2, #2
 800a200:	300c      	adds	r0, #12
 800a202:	f7ff ff4f 	bl	800a0a4 <memcpy>
 800a206:	4621      	mov	r1, r4
 800a208:	4638      	mov	r0, r7
 800a20a:	f7ff ffa5 	bl	800a158 <_Bfree>
 800a20e:	4644      	mov	r4, r8
 800a210:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a214:	3501      	adds	r5, #1
 800a216:	615e      	str	r6, [r3, #20]
 800a218:	6125      	str	r5, [r4, #16]
 800a21a:	4620      	mov	r0, r4
 800a21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a220:	0800b9fb 	.word	0x0800b9fb
 800a224:	0800ba0c 	.word	0x0800ba0c

0800a228 <__hi0bits>:
 800a228:	0c03      	lsrs	r3, r0, #16
 800a22a:	041b      	lsls	r3, r3, #16
 800a22c:	b9d3      	cbnz	r3, 800a264 <__hi0bits+0x3c>
 800a22e:	0400      	lsls	r0, r0, #16
 800a230:	2310      	movs	r3, #16
 800a232:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a236:	bf04      	itt	eq
 800a238:	0200      	lsleq	r0, r0, #8
 800a23a:	3308      	addeq	r3, #8
 800a23c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a240:	bf04      	itt	eq
 800a242:	0100      	lsleq	r0, r0, #4
 800a244:	3304      	addeq	r3, #4
 800a246:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a24a:	bf04      	itt	eq
 800a24c:	0080      	lsleq	r0, r0, #2
 800a24e:	3302      	addeq	r3, #2
 800a250:	2800      	cmp	r0, #0
 800a252:	db05      	blt.n	800a260 <__hi0bits+0x38>
 800a254:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a258:	f103 0301 	add.w	r3, r3, #1
 800a25c:	bf08      	it	eq
 800a25e:	2320      	moveq	r3, #32
 800a260:	4618      	mov	r0, r3
 800a262:	4770      	bx	lr
 800a264:	2300      	movs	r3, #0
 800a266:	e7e4      	b.n	800a232 <__hi0bits+0xa>

0800a268 <__lo0bits>:
 800a268:	6803      	ldr	r3, [r0, #0]
 800a26a:	f013 0207 	ands.w	r2, r3, #7
 800a26e:	4601      	mov	r1, r0
 800a270:	d00b      	beq.n	800a28a <__lo0bits+0x22>
 800a272:	07da      	lsls	r2, r3, #31
 800a274:	d423      	bmi.n	800a2be <__lo0bits+0x56>
 800a276:	0798      	lsls	r0, r3, #30
 800a278:	bf49      	itett	mi
 800a27a:	085b      	lsrmi	r3, r3, #1
 800a27c:	089b      	lsrpl	r3, r3, #2
 800a27e:	2001      	movmi	r0, #1
 800a280:	600b      	strmi	r3, [r1, #0]
 800a282:	bf5c      	itt	pl
 800a284:	600b      	strpl	r3, [r1, #0]
 800a286:	2002      	movpl	r0, #2
 800a288:	4770      	bx	lr
 800a28a:	b298      	uxth	r0, r3
 800a28c:	b9a8      	cbnz	r0, 800a2ba <__lo0bits+0x52>
 800a28e:	0c1b      	lsrs	r3, r3, #16
 800a290:	2010      	movs	r0, #16
 800a292:	b2da      	uxtb	r2, r3
 800a294:	b90a      	cbnz	r2, 800a29a <__lo0bits+0x32>
 800a296:	3008      	adds	r0, #8
 800a298:	0a1b      	lsrs	r3, r3, #8
 800a29a:	071a      	lsls	r2, r3, #28
 800a29c:	bf04      	itt	eq
 800a29e:	091b      	lsreq	r3, r3, #4
 800a2a0:	3004      	addeq	r0, #4
 800a2a2:	079a      	lsls	r2, r3, #30
 800a2a4:	bf04      	itt	eq
 800a2a6:	089b      	lsreq	r3, r3, #2
 800a2a8:	3002      	addeq	r0, #2
 800a2aa:	07da      	lsls	r2, r3, #31
 800a2ac:	d403      	bmi.n	800a2b6 <__lo0bits+0x4e>
 800a2ae:	085b      	lsrs	r3, r3, #1
 800a2b0:	f100 0001 	add.w	r0, r0, #1
 800a2b4:	d005      	beq.n	800a2c2 <__lo0bits+0x5a>
 800a2b6:	600b      	str	r3, [r1, #0]
 800a2b8:	4770      	bx	lr
 800a2ba:	4610      	mov	r0, r2
 800a2bc:	e7e9      	b.n	800a292 <__lo0bits+0x2a>
 800a2be:	2000      	movs	r0, #0
 800a2c0:	4770      	bx	lr
 800a2c2:	2020      	movs	r0, #32
 800a2c4:	4770      	bx	lr
	...

0800a2c8 <__i2b>:
 800a2c8:	b510      	push	{r4, lr}
 800a2ca:	460c      	mov	r4, r1
 800a2cc:	2101      	movs	r1, #1
 800a2ce:	f7ff ff03 	bl	800a0d8 <_Balloc>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	b928      	cbnz	r0, 800a2e2 <__i2b+0x1a>
 800a2d6:	4b05      	ldr	r3, [pc, #20]	; (800a2ec <__i2b+0x24>)
 800a2d8:	4805      	ldr	r0, [pc, #20]	; (800a2f0 <__i2b+0x28>)
 800a2da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a2de:	f000 fbf1 	bl	800aac4 <__assert_func>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	6144      	str	r4, [r0, #20]
 800a2e6:	6103      	str	r3, [r0, #16]
 800a2e8:	bd10      	pop	{r4, pc}
 800a2ea:	bf00      	nop
 800a2ec:	0800b9fb 	.word	0x0800b9fb
 800a2f0:	0800ba0c 	.word	0x0800ba0c

0800a2f4 <__multiply>:
 800a2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f8:	4691      	mov	r9, r2
 800a2fa:	690a      	ldr	r2, [r1, #16]
 800a2fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a300:	429a      	cmp	r2, r3
 800a302:	bfb8      	it	lt
 800a304:	460b      	movlt	r3, r1
 800a306:	460c      	mov	r4, r1
 800a308:	bfbc      	itt	lt
 800a30a:	464c      	movlt	r4, r9
 800a30c:	4699      	movlt	r9, r3
 800a30e:	6927      	ldr	r7, [r4, #16]
 800a310:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a314:	68a3      	ldr	r3, [r4, #8]
 800a316:	6861      	ldr	r1, [r4, #4]
 800a318:	eb07 060a 	add.w	r6, r7, sl
 800a31c:	42b3      	cmp	r3, r6
 800a31e:	b085      	sub	sp, #20
 800a320:	bfb8      	it	lt
 800a322:	3101      	addlt	r1, #1
 800a324:	f7ff fed8 	bl	800a0d8 <_Balloc>
 800a328:	b930      	cbnz	r0, 800a338 <__multiply+0x44>
 800a32a:	4602      	mov	r2, r0
 800a32c:	4b44      	ldr	r3, [pc, #272]	; (800a440 <__multiply+0x14c>)
 800a32e:	4845      	ldr	r0, [pc, #276]	; (800a444 <__multiply+0x150>)
 800a330:	f240 115d 	movw	r1, #349	; 0x15d
 800a334:	f000 fbc6 	bl	800aac4 <__assert_func>
 800a338:	f100 0514 	add.w	r5, r0, #20
 800a33c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a340:	462b      	mov	r3, r5
 800a342:	2200      	movs	r2, #0
 800a344:	4543      	cmp	r3, r8
 800a346:	d321      	bcc.n	800a38c <__multiply+0x98>
 800a348:	f104 0314 	add.w	r3, r4, #20
 800a34c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a350:	f109 0314 	add.w	r3, r9, #20
 800a354:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a358:	9202      	str	r2, [sp, #8]
 800a35a:	1b3a      	subs	r2, r7, r4
 800a35c:	3a15      	subs	r2, #21
 800a35e:	f022 0203 	bic.w	r2, r2, #3
 800a362:	3204      	adds	r2, #4
 800a364:	f104 0115 	add.w	r1, r4, #21
 800a368:	428f      	cmp	r7, r1
 800a36a:	bf38      	it	cc
 800a36c:	2204      	movcc	r2, #4
 800a36e:	9201      	str	r2, [sp, #4]
 800a370:	9a02      	ldr	r2, [sp, #8]
 800a372:	9303      	str	r3, [sp, #12]
 800a374:	429a      	cmp	r2, r3
 800a376:	d80c      	bhi.n	800a392 <__multiply+0x9e>
 800a378:	2e00      	cmp	r6, #0
 800a37a:	dd03      	ble.n	800a384 <__multiply+0x90>
 800a37c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a380:	2b00      	cmp	r3, #0
 800a382:	d05a      	beq.n	800a43a <__multiply+0x146>
 800a384:	6106      	str	r6, [r0, #16]
 800a386:	b005      	add	sp, #20
 800a388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a38c:	f843 2b04 	str.w	r2, [r3], #4
 800a390:	e7d8      	b.n	800a344 <__multiply+0x50>
 800a392:	f8b3 a000 	ldrh.w	sl, [r3]
 800a396:	f1ba 0f00 	cmp.w	sl, #0
 800a39a:	d024      	beq.n	800a3e6 <__multiply+0xf2>
 800a39c:	f104 0e14 	add.w	lr, r4, #20
 800a3a0:	46a9      	mov	r9, r5
 800a3a2:	f04f 0c00 	mov.w	ip, #0
 800a3a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a3aa:	f8d9 1000 	ldr.w	r1, [r9]
 800a3ae:	fa1f fb82 	uxth.w	fp, r2
 800a3b2:	b289      	uxth	r1, r1
 800a3b4:	fb0a 110b 	mla	r1, sl, fp, r1
 800a3b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a3bc:	f8d9 2000 	ldr.w	r2, [r9]
 800a3c0:	4461      	add	r1, ip
 800a3c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3c6:	fb0a c20b 	mla	r2, sl, fp, ip
 800a3ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a3ce:	b289      	uxth	r1, r1
 800a3d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a3d4:	4577      	cmp	r7, lr
 800a3d6:	f849 1b04 	str.w	r1, [r9], #4
 800a3da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3de:	d8e2      	bhi.n	800a3a6 <__multiply+0xb2>
 800a3e0:	9a01      	ldr	r2, [sp, #4]
 800a3e2:	f845 c002 	str.w	ip, [r5, r2]
 800a3e6:	9a03      	ldr	r2, [sp, #12]
 800a3e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a3ec:	3304      	adds	r3, #4
 800a3ee:	f1b9 0f00 	cmp.w	r9, #0
 800a3f2:	d020      	beq.n	800a436 <__multiply+0x142>
 800a3f4:	6829      	ldr	r1, [r5, #0]
 800a3f6:	f104 0c14 	add.w	ip, r4, #20
 800a3fa:	46ae      	mov	lr, r5
 800a3fc:	f04f 0a00 	mov.w	sl, #0
 800a400:	f8bc b000 	ldrh.w	fp, [ip]
 800a404:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a408:	fb09 220b 	mla	r2, r9, fp, r2
 800a40c:	4492      	add	sl, r2
 800a40e:	b289      	uxth	r1, r1
 800a410:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a414:	f84e 1b04 	str.w	r1, [lr], #4
 800a418:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a41c:	f8be 1000 	ldrh.w	r1, [lr]
 800a420:	0c12      	lsrs	r2, r2, #16
 800a422:	fb09 1102 	mla	r1, r9, r2, r1
 800a426:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a42a:	4567      	cmp	r7, ip
 800a42c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a430:	d8e6      	bhi.n	800a400 <__multiply+0x10c>
 800a432:	9a01      	ldr	r2, [sp, #4]
 800a434:	50a9      	str	r1, [r5, r2]
 800a436:	3504      	adds	r5, #4
 800a438:	e79a      	b.n	800a370 <__multiply+0x7c>
 800a43a:	3e01      	subs	r6, #1
 800a43c:	e79c      	b.n	800a378 <__multiply+0x84>
 800a43e:	bf00      	nop
 800a440:	0800b9fb 	.word	0x0800b9fb
 800a444:	0800ba0c 	.word	0x0800ba0c

0800a448 <__pow5mult>:
 800a448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a44c:	4615      	mov	r5, r2
 800a44e:	f012 0203 	ands.w	r2, r2, #3
 800a452:	4606      	mov	r6, r0
 800a454:	460f      	mov	r7, r1
 800a456:	d007      	beq.n	800a468 <__pow5mult+0x20>
 800a458:	4c25      	ldr	r4, [pc, #148]	; (800a4f0 <__pow5mult+0xa8>)
 800a45a:	3a01      	subs	r2, #1
 800a45c:	2300      	movs	r3, #0
 800a45e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a462:	f7ff fe9b 	bl	800a19c <__multadd>
 800a466:	4607      	mov	r7, r0
 800a468:	10ad      	asrs	r5, r5, #2
 800a46a:	d03d      	beq.n	800a4e8 <__pow5mult+0xa0>
 800a46c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a46e:	b97c      	cbnz	r4, 800a490 <__pow5mult+0x48>
 800a470:	2010      	movs	r0, #16
 800a472:	f7fe f9f3 	bl	800885c <malloc>
 800a476:	4602      	mov	r2, r0
 800a478:	6270      	str	r0, [r6, #36]	; 0x24
 800a47a:	b928      	cbnz	r0, 800a488 <__pow5mult+0x40>
 800a47c:	4b1d      	ldr	r3, [pc, #116]	; (800a4f4 <__pow5mult+0xac>)
 800a47e:	481e      	ldr	r0, [pc, #120]	; (800a4f8 <__pow5mult+0xb0>)
 800a480:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a484:	f000 fb1e 	bl	800aac4 <__assert_func>
 800a488:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a48c:	6004      	str	r4, [r0, #0]
 800a48e:	60c4      	str	r4, [r0, #12]
 800a490:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a494:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a498:	b94c      	cbnz	r4, 800a4ae <__pow5mult+0x66>
 800a49a:	f240 2171 	movw	r1, #625	; 0x271
 800a49e:	4630      	mov	r0, r6
 800a4a0:	f7ff ff12 	bl	800a2c8 <__i2b>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	6003      	str	r3, [r0, #0]
 800a4ae:	f04f 0900 	mov.w	r9, #0
 800a4b2:	07eb      	lsls	r3, r5, #31
 800a4b4:	d50a      	bpl.n	800a4cc <__pow5mult+0x84>
 800a4b6:	4639      	mov	r1, r7
 800a4b8:	4622      	mov	r2, r4
 800a4ba:	4630      	mov	r0, r6
 800a4bc:	f7ff ff1a 	bl	800a2f4 <__multiply>
 800a4c0:	4639      	mov	r1, r7
 800a4c2:	4680      	mov	r8, r0
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	f7ff fe47 	bl	800a158 <_Bfree>
 800a4ca:	4647      	mov	r7, r8
 800a4cc:	106d      	asrs	r5, r5, #1
 800a4ce:	d00b      	beq.n	800a4e8 <__pow5mult+0xa0>
 800a4d0:	6820      	ldr	r0, [r4, #0]
 800a4d2:	b938      	cbnz	r0, 800a4e4 <__pow5mult+0x9c>
 800a4d4:	4622      	mov	r2, r4
 800a4d6:	4621      	mov	r1, r4
 800a4d8:	4630      	mov	r0, r6
 800a4da:	f7ff ff0b 	bl	800a2f4 <__multiply>
 800a4de:	6020      	str	r0, [r4, #0]
 800a4e0:	f8c0 9000 	str.w	r9, [r0]
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	e7e4      	b.n	800a4b2 <__pow5mult+0x6a>
 800a4e8:	4638      	mov	r0, r7
 800a4ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ee:	bf00      	nop
 800a4f0:	0800bb58 	.word	0x0800bb58
 800a4f4:	0800b989 	.word	0x0800b989
 800a4f8:	0800ba0c 	.word	0x0800ba0c

0800a4fc <__lshift>:
 800a4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a500:	460c      	mov	r4, r1
 800a502:	6849      	ldr	r1, [r1, #4]
 800a504:	6923      	ldr	r3, [r4, #16]
 800a506:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a50a:	68a3      	ldr	r3, [r4, #8]
 800a50c:	4607      	mov	r7, r0
 800a50e:	4691      	mov	r9, r2
 800a510:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a514:	f108 0601 	add.w	r6, r8, #1
 800a518:	42b3      	cmp	r3, r6
 800a51a:	db0b      	blt.n	800a534 <__lshift+0x38>
 800a51c:	4638      	mov	r0, r7
 800a51e:	f7ff fddb 	bl	800a0d8 <_Balloc>
 800a522:	4605      	mov	r5, r0
 800a524:	b948      	cbnz	r0, 800a53a <__lshift+0x3e>
 800a526:	4602      	mov	r2, r0
 800a528:	4b2a      	ldr	r3, [pc, #168]	; (800a5d4 <__lshift+0xd8>)
 800a52a:	482b      	ldr	r0, [pc, #172]	; (800a5d8 <__lshift+0xdc>)
 800a52c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a530:	f000 fac8 	bl	800aac4 <__assert_func>
 800a534:	3101      	adds	r1, #1
 800a536:	005b      	lsls	r3, r3, #1
 800a538:	e7ee      	b.n	800a518 <__lshift+0x1c>
 800a53a:	2300      	movs	r3, #0
 800a53c:	f100 0114 	add.w	r1, r0, #20
 800a540:	f100 0210 	add.w	r2, r0, #16
 800a544:	4618      	mov	r0, r3
 800a546:	4553      	cmp	r3, sl
 800a548:	db37      	blt.n	800a5ba <__lshift+0xbe>
 800a54a:	6920      	ldr	r0, [r4, #16]
 800a54c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a550:	f104 0314 	add.w	r3, r4, #20
 800a554:	f019 091f 	ands.w	r9, r9, #31
 800a558:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a55c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a560:	d02f      	beq.n	800a5c2 <__lshift+0xc6>
 800a562:	f1c9 0e20 	rsb	lr, r9, #32
 800a566:	468a      	mov	sl, r1
 800a568:	f04f 0c00 	mov.w	ip, #0
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	fa02 f209 	lsl.w	r2, r2, r9
 800a572:	ea42 020c 	orr.w	r2, r2, ip
 800a576:	f84a 2b04 	str.w	r2, [sl], #4
 800a57a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a57e:	4298      	cmp	r0, r3
 800a580:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a584:	d8f2      	bhi.n	800a56c <__lshift+0x70>
 800a586:	1b03      	subs	r3, r0, r4
 800a588:	3b15      	subs	r3, #21
 800a58a:	f023 0303 	bic.w	r3, r3, #3
 800a58e:	3304      	adds	r3, #4
 800a590:	f104 0215 	add.w	r2, r4, #21
 800a594:	4290      	cmp	r0, r2
 800a596:	bf38      	it	cc
 800a598:	2304      	movcc	r3, #4
 800a59a:	f841 c003 	str.w	ip, [r1, r3]
 800a59e:	f1bc 0f00 	cmp.w	ip, #0
 800a5a2:	d001      	beq.n	800a5a8 <__lshift+0xac>
 800a5a4:	f108 0602 	add.w	r6, r8, #2
 800a5a8:	3e01      	subs	r6, #1
 800a5aa:	4638      	mov	r0, r7
 800a5ac:	612e      	str	r6, [r5, #16]
 800a5ae:	4621      	mov	r1, r4
 800a5b0:	f7ff fdd2 	bl	800a158 <_Bfree>
 800a5b4:	4628      	mov	r0, r5
 800a5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800a5be:	3301      	adds	r3, #1
 800a5c0:	e7c1      	b.n	800a546 <__lshift+0x4a>
 800a5c2:	3904      	subs	r1, #4
 800a5c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5cc:	4298      	cmp	r0, r3
 800a5ce:	d8f9      	bhi.n	800a5c4 <__lshift+0xc8>
 800a5d0:	e7ea      	b.n	800a5a8 <__lshift+0xac>
 800a5d2:	bf00      	nop
 800a5d4:	0800b9fb 	.word	0x0800b9fb
 800a5d8:	0800ba0c 	.word	0x0800ba0c

0800a5dc <__mcmp>:
 800a5dc:	b530      	push	{r4, r5, lr}
 800a5de:	6902      	ldr	r2, [r0, #16]
 800a5e0:	690c      	ldr	r4, [r1, #16]
 800a5e2:	1b12      	subs	r2, r2, r4
 800a5e4:	d10e      	bne.n	800a604 <__mcmp+0x28>
 800a5e6:	f100 0314 	add.w	r3, r0, #20
 800a5ea:	3114      	adds	r1, #20
 800a5ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a5f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a5f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a5f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a5fc:	42a5      	cmp	r5, r4
 800a5fe:	d003      	beq.n	800a608 <__mcmp+0x2c>
 800a600:	d305      	bcc.n	800a60e <__mcmp+0x32>
 800a602:	2201      	movs	r2, #1
 800a604:	4610      	mov	r0, r2
 800a606:	bd30      	pop	{r4, r5, pc}
 800a608:	4283      	cmp	r3, r0
 800a60a:	d3f3      	bcc.n	800a5f4 <__mcmp+0x18>
 800a60c:	e7fa      	b.n	800a604 <__mcmp+0x28>
 800a60e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a612:	e7f7      	b.n	800a604 <__mcmp+0x28>

0800a614 <__mdiff>:
 800a614:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a618:	460c      	mov	r4, r1
 800a61a:	4606      	mov	r6, r0
 800a61c:	4611      	mov	r1, r2
 800a61e:	4620      	mov	r0, r4
 800a620:	4690      	mov	r8, r2
 800a622:	f7ff ffdb 	bl	800a5dc <__mcmp>
 800a626:	1e05      	subs	r5, r0, #0
 800a628:	d110      	bne.n	800a64c <__mdiff+0x38>
 800a62a:	4629      	mov	r1, r5
 800a62c:	4630      	mov	r0, r6
 800a62e:	f7ff fd53 	bl	800a0d8 <_Balloc>
 800a632:	b930      	cbnz	r0, 800a642 <__mdiff+0x2e>
 800a634:	4b3a      	ldr	r3, [pc, #232]	; (800a720 <__mdiff+0x10c>)
 800a636:	4602      	mov	r2, r0
 800a638:	f240 2132 	movw	r1, #562	; 0x232
 800a63c:	4839      	ldr	r0, [pc, #228]	; (800a724 <__mdiff+0x110>)
 800a63e:	f000 fa41 	bl	800aac4 <__assert_func>
 800a642:	2301      	movs	r3, #1
 800a644:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a648:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a64c:	bfa4      	itt	ge
 800a64e:	4643      	movge	r3, r8
 800a650:	46a0      	movge	r8, r4
 800a652:	4630      	mov	r0, r6
 800a654:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a658:	bfa6      	itte	ge
 800a65a:	461c      	movge	r4, r3
 800a65c:	2500      	movge	r5, #0
 800a65e:	2501      	movlt	r5, #1
 800a660:	f7ff fd3a 	bl	800a0d8 <_Balloc>
 800a664:	b920      	cbnz	r0, 800a670 <__mdiff+0x5c>
 800a666:	4b2e      	ldr	r3, [pc, #184]	; (800a720 <__mdiff+0x10c>)
 800a668:	4602      	mov	r2, r0
 800a66a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a66e:	e7e5      	b.n	800a63c <__mdiff+0x28>
 800a670:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a674:	6926      	ldr	r6, [r4, #16]
 800a676:	60c5      	str	r5, [r0, #12]
 800a678:	f104 0914 	add.w	r9, r4, #20
 800a67c:	f108 0514 	add.w	r5, r8, #20
 800a680:	f100 0e14 	add.w	lr, r0, #20
 800a684:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a688:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a68c:	f108 0210 	add.w	r2, r8, #16
 800a690:	46f2      	mov	sl, lr
 800a692:	2100      	movs	r1, #0
 800a694:	f859 3b04 	ldr.w	r3, [r9], #4
 800a698:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a69c:	fa1f f883 	uxth.w	r8, r3
 800a6a0:	fa11 f18b 	uxtah	r1, r1, fp
 800a6a4:	0c1b      	lsrs	r3, r3, #16
 800a6a6:	eba1 0808 	sub.w	r8, r1, r8
 800a6aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a6ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a6b2:	fa1f f888 	uxth.w	r8, r8
 800a6b6:	1419      	asrs	r1, r3, #16
 800a6b8:	454e      	cmp	r6, r9
 800a6ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a6be:	f84a 3b04 	str.w	r3, [sl], #4
 800a6c2:	d8e7      	bhi.n	800a694 <__mdiff+0x80>
 800a6c4:	1b33      	subs	r3, r6, r4
 800a6c6:	3b15      	subs	r3, #21
 800a6c8:	f023 0303 	bic.w	r3, r3, #3
 800a6cc:	3304      	adds	r3, #4
 800a6ce:	3415      	adds	r4, #21
 800a6d0:	42a6      	cmp	r6, r4
 800a6d2:	bf38      	it	cc
 800a6d4:	2304      	movcc	r3, #4
 800a6d6:	441d      	add	r5, r3
 800a6d8:	4473      	add	r3, lr
 800a6da:	469e      	mov	lr, r3
 800a6dc:	462e      	mov	r6, r5
 800a6de:	4566      	cmp	r6, ip
 800a6e0:	d30e      	bcc.n	800a700 <__mdiff+0xec>
 800a6e2:	f10c 0203 	add.w	r2, ip, #3
 800a6e6:	1b52      	subs	r2, r2, r5
 800a6e8:	f022 0203 	bic.w	r2, r2, #3
 800a6ec:	3d03      	subs	r5, #3
 800a6ee:	45ac      	cmp	ip, r5
 800a6f0:	bf38      	it	cc
 800a6f2:	2200      	movcc	r2, #0
 800a6f4:	441a      	add	r2, r3
 800a6f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a6fa:	b17b      	cbz	r3, 800a71c <__mdiff+0x108>
 800a6fc:	6107      	str	r7, [r0, #16]
 800a6fe:	e7a3      	b.n	800a648 <__mdiff+0x34>
 800a700:	f856 8b04 	ldr.w	r8, [r6], #4
 800a704:	fa11 f288 	uxtah	r2, r1, r8
 800a708:	1414      	asrs	r4, r2, #16
 800a70a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a70e:	b292      	uxth	r2, r2
 800a710:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a714:	f84e 2b04 	str.w	r2, [lr], #4
 800a718:	1421      	asrs	r1, r4, #16
 800a71a:	e7e0      	b.n	800a6de <__mdiff+0xca>
 800a71c:	3f01      	subs	r7, #1
 800a71e:	e7ea      	b.n	800a6f6 <__mdiff+0xe2>
 800a720:	0800b9fb 	.word	0x0800b9fb
 800a724:	0800ba0c 	.word	0x0800ba0c

0800a728 <__d2b>:
 800a728:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a72c:	4689      	mov	r9, r1
 800a72e:	2101      	movs	r1, #1
 800a730:	ec57 6b10 	vmov	r6, r7, d0
 800a734:	4690      	mov	r8, r2
 800a736:	f7ff fccf 	bl	800a0d8 <_Balloc>
 800a73a:	4604      	mov	r4, r0
 800a73c:	b930      	cbnz	r0, 800a74c <__d2b+0x24>
 800a73e:	4602      	mov	r2, r0
 800a740:	4b25      	ldr	r3, [pc, #148]	; (800a7d8 <__d2b+0xb0>)
 800a742:	4826      	ldr	r0, [pc, #152]	; (800a7dc <__d2b+0xb4>)
 800a744:	f240 310a 	movw	r1, #778	; 0x30a
 800a748:	f000 f9bc 	bl	800aac4 <__assert_func>
 800a74c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a750:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a754:	bb35      	cbnz	r5, 800a7a4 <__d2b+0x7c>
 800a756:	2e00      	cmp	r6, #0
 800a758:	9301      	str	r3, [sp, #4]
 800a75a:	d028      	beq.n	800a7ae <__d2b+0x86>
 800a75c:	4668      	mov	r0, sp
 800a75e:	9600      	str	r6, [sp, #0]
 800a760:	f7ff fd82 	bl	800a268 <__lo0bits>
 800a764:	9900      	ldr	r1, [sp, #0]
 800a766:	b300      	cbz	r0, 800a7aa <__d2b+0x82>
 800a768:	9a01      	ldr	r2, [sp, #4]
 800a76a:	f1c0 0320 	rsb	r3, r0, #32
 800a76e:	fa02 f303 	lsl.w	r3, r2, r3
 800a772:	430b      	orrs	r3, r1
 800a774:	40c2      	lsrs	r2, r0
 800a776:	6163      	str	r3, [r4, #20]
 800a778:	9201      	str	r2, [sp, #4]
 800a77a:	9b01      	ldr	r3, [sp, #4]
 800a77c:	61a3      	str	r3, [r4, #24]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	bf14      	ite	ne
 800a782:	2202      	movne	r2, #2
 800a784:	2201      	moveq	r2, #1
 800a786:	6122      	str	r2, [r4, #16]
 800a788:	b1d5      	cbz	r5, 800a7c0 <__d2b+0x98>
 800a78a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a78e:	4405      	add	r5, r0
 800a790:	f8c9 5000 	str.w	r5, [r9]
 800a794:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a798:	f8c8 0000 	str.w	r0, [r8]
 800a79c:	4620      	mov	r0, r4
 800a79e:	b003      	add	sp, #12
 800a7a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7a8:	e7d5      	b.n	800a756 <__d2b+0x2e>
 800a7aa:	6161      	str	r1, [r4, #20]
 800a7ac:	e7e5      	b.n	800a77a <__d2b+0x52>
 800a7ae:	a801      	add	r0, sp, #4
 800a7b0:	f7ff fd5a 	bl	800a268 <__lo0bits>
 800a7b4:	9b01      	ldr	r3, [sp, #4]
 800a7b6:	6163      	str	r3, [r4, #20]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	6122      	str	r2, [r4, #16]
 800a7bc:	3020      	adds	r0, #32
 800a7be:	e7e3      	b.n	800a788 <__d2b+0x60>
 800a7c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a7c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a7c8:	f8c9 0000 	str.w	r0, [r9]
 800a7cc:	6918      	ldr	r0, [r3, #16]
 800a7ce:	f7ff fd2b 	bl	800a228 <__hi0bits>
 800a7d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a7d6:	e7df      	b.n	800a798 <__d2b+0x70>
 800a7d8:	0800b9fb 	.word	0x0800b9fb
 800a7dc:	0800ba0c 	.word	0x0800ba0c

0800a7e0 <_calloc_r>:
 800a7e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7e2:	fba1 2402 	umull	r2, r4, r1, r2
 800a7e6:	b94c      	cbnz	r4, 800a7fc <_calloc_r+0x1c>
 800a7e8:	4611      	mov	r1, r2
 800a7ea:	9201      	str	r2, [sp, #4]
 800a7ec:	f7fe f8ba 	bl	8008964 <_malloc_r>
 800a7f0:	9a01      	ldr	r2, [sp, #4]
 800a7f2:	4605      	mov	r5, r0
 800a7f4:	b930      	cbnz	r0, 800a804 <_calloc_r+0x24>
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	b003      	add	sp, #12
 800a7fa:	bd30      	pop	{r4, r5, pc}
 800a7fc:	220c      	movs	r2, #12
 800a7fe:	6002      	str	r2, [r0, #0]
 800a800:	2500      	movs	r5, #0
 800a802:	e7f8      	b.n	800a7f6 <_calloc_r+0x16>
 800a804:	4621      	mov	r1, r4
 800a806:	f7fe f839 	bl	800887c <memset>
 800a80a:	e7f4      	b.n	800a7f6 <_calloc_r+0x16>

0800a80c <__ssputs_r>:
 800a80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a810:	688e      	ldr	r6, [r1, #8]
 800a812:	429e      	cmp	r6, r3
 800a814:	4682      	mov	sl, r0
 800a816:	460c      	mov	r4, r1
 800a818:	4690      	mov	r8, r2
 800a81a:	461f      	mov	r7, r3
 800a81c:	d838      	bhi.n	800a890 <__ssputs_r+0x84>
 800a81e:	898a      	ldrh	r2, [r1, #12]
 800a820:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a824:	d032      	beq.n	800a88c <__ssputs_r+0x80>
 800a826:	6825      	ldr	r5, [r4, #0]
 800a828:	6909      	ldr	r1, [r1, #16]
 800a82a:	eba5 0901 	sub.w	r9, r5, r1
 800a82e:	6965      	ldr	r5, [r4, #20]
 800a830:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a834:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a838:	3301      	adds	r3, #1
 800a83a:	444b      	add	r3, r9
 800a83c:	106d      	asrs	r5, r5, #1
 800a83e:	429d      	cmp	r5, r3
 800a840:	bf38      	it	cc
 800a842:	461d      	movcc	r5, r3
 800a844:	0553      	lsls	r3, r2, #21
 800a846:	d531      	bpl.n	800a8ac <__ssputs_r+0xa0>
 800a848:	4629      	mov	r1, r5
 800a84a:	f7fe f88b 	bl	8008964 <_malloc_r>
 800a84e:	4606      	mov	r6, r0
 800a850:	b950      	cbnz	r0, 800a868 <__ssputs_r+0x5c>
 800a852:	230c      	movs	r3, #12
 800a854:	f8ca 3000 	str.w	r3, [sl]
 800a858:	89a3      	ldrh	r3, [r4, #12]
 800a85a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a85e:	81a3      	strh	r3, [r4, #12]
 800a860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a868:	6921      	ldr	r1, [r4, #16]
 800a86a:	464a      	mov	r2, r9
 800a86c:	f7ff fc1a 	bl	800a0a4 <memcpy>
 800a870:	89a3      	ldrh	r3, [r4, #12]
 800a872:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a87a:	81a3      	strh	r3, [r4, #12]
 800a87c:	6126      	str	r6, [r4, #16]
 800a87e:	6165      	str	r5, [r4, #20]
 800a880:	444e      	add	r6, r9
 800a882:	eba5 0509 	sub.w	r5, r5, r9
 800a886:	6026      	str	r6, [r4, #0]
 800a888:	60a5      	str	r5, [r4, #8]
 800a88a:	463e      	mov	r6, r7
 800a88c:	42be      	cmp	r6, r7
 800a88e:	d900      	bls.n	800a892 <__ssputs_r+0x86>
 800a890:	463e      	mov	r6, r7
 800a892:	6820      	ldr	r0, [r4, #0]
 800a894:	4632      	mov	r2, r6
 800a896:	4641      	mov	r1, r8
 800a898:	f000 f959 	bl	800ab4e <memmove>
 800a89c:	68a3      	ldr	r3, [r4, #8]
 800a89e:	1b9b      	subs	r3, r3, r6
 800a8a0:	60a3      	str	r3, [r4, #8]
 800a8a2:	6823      	ldr	r3, [r4, #0]
 800a8a4:	4433      	add	r3, r6
 800a8a6:	6023      	str	r3, [r4, #0]
 800a8a8:	2000      	movs	r0, #0
 800a8aa:	e7db      	b.n	800a864 <__ssputs_r+0x58>
 800a8ac:	462a      	mov	r2, r5
 800a8ae:	f000 f968 	bl	800ab82 <_realloc_r>
 800a8b2:	4606      	mov	r6, r0
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	d1e1      	bne.n	800a87c <__ssputs_r+0x70>
 800a8b8:	6921      	ldr	r1, [r4, #16]
 800a8ba:	4650      	mov	r0, sl
 800a8bc:	f7fd ffe6 	bl	800888c <_free_r>
 800a8c0:	e7c7      	b.n	800a852 <__ssputs_r+0x46>
	...

0800a8c4 <_svfiprintf_r>:
 800a8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c8:	4698      	mov	r8, r3
 800a8ca:	898b      	ldrh	r3, [r1, #12]
 800a8cc:	061b      	lsls	r3, r3, #24
 800a8ce:	b09d      	sub	sp, #116	; 0x74
 800a8d0:	4607      	mov	r7, r0
 800a8d2:	460d      	mov	r5, r1
 800a8d4:	4614      	mov	r4, r2
 800a8d6:	d50e      	bpl.n	800a8f6 <_svfiprintf_r+0x32>
 800a8d8:	690b      	ldr	r3, [r1, #16]
 800a8da:	b963      	cbnz	r3, 800a8f6 <_svfiprintf_r+0x32>
 800a8dc:	2140      	movs	r1, #64	; 0x40
 800a8de:	f7fe f841 	bl	8008964 <_malloc_r>
 800a8e2:	6028      	str	r0, [r5, #0]
 800a8e4:	6128      	str	r0, [r5, #16]
 800a8e6:	b920      	cbnz	r0, 800a8f2 <_svfiprintf_r+0x2e>
 800a8e8:	230c      	movs	r3, #12
 800a8ea:	603b      	str	r3, [r7, #0]
 800a8ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8f0:	e0d1      	b.n	800aa96 <_svfiprintf_r+0x1d2>
 800a8f2:	2340      	movs	r3, #64	; 0x40
 800a8f4:	616b      	str	r3, [r5, #20]
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	9309      	str	r3, [sp, #36]	; 0x24
 800a8fa:	2320      	movs	r3, #32
 800a8fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a900:	f8cd 800c 	str.w	r8, [sp, #12]
 800a904:	2330      	movs	r3, #48	; 0x30
 800a906:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aab0 <_svfiprintf_r+0x1ec>
 800a90a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a90e:	f04f 0901 	mov.w	r9, #1
 800a912:	4623      	mov	r3, r4
 800a914:	469a      	mov	sl, r3
 800a916:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a91a:	b10a      	cbz	r2, 800a920 <_svfiprintf_r+0x5c>
 800a91c:	2a25      	cmp	r2, #37	; 0x25
 800a91e:	d1f9      	bne.n	800a914 <_svfiprintf_r+0x50>
 800a920:	ebba 0b04 	subs.w	fp, sl, r4
 800a924:	d00b      	beq.n	800a93e <_svfiprintf_r+0x7a>
 800a926:	465b      	mov	r3, fp
 800a928:	4622      	mov	r2, r4
 800a92a:	4629      	mov	r1, r5
 800a92c:	4638      	mov	r0, r7
 800a92e:	f7ff ff6d 	bl	800a80c <__ssputs_r>
 800a932:	3001      	adds	r0, #1
 800a934:	f000 80aa 	beq.w	800aa8c <_svfiprintf_r+0x1c8>
 800a938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a93a:	445a      	add	r2, fp
 800a93c:	9209      	str	r2, [sp, #36]	; 0x24
 800a93e:	f89a 3000 	ldrb.w	r3, [sl]
 800a942:	2b00      	cmp	r3, #0
 800a944:	f000 80a2 	beq.w	800aa8c <_svfiprintf_r+0x1c8>
 800a948:	2300      	movs	r3, #0
 800a94a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a94e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a952:	f10a 0a01 	add.w	sl, sl, #1
 800a956:	9304      	str	r3, [sp, #16]
 800a958:	9307      	str	r3, [sp, #28]
 800a95a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a95e:	931a      	str	r3, [sp, #104]	; 0x68
 800a960:	4654      	mov	r4, sl
 800a962:	2205      	movs	r2, #5
 800a964:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a968:	4851      	ldr	r0, [pc, #324]	; (800aab0 <_svfiprintf_r+0x1ec>)
 800a96a:	f7f5 fc59 	bl	8000220 <memchr>
 800a96e:	9a04      	ldr	r2, [sp, #16]
 800a970:	b9d8      	cbnz	r0, 800a9aa <_svfiprintf_r+0xe6>
 800a972:	06d0      	lsls	r0, r2, #27
 800a974:	bf44      	itt	mi
 800a976:	2320      	movmi	r3, #32
 800a978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a97c:	0711      	lsls	r1, r2, #28
 800a97e:	bf44      	itt	mi
 800a980:	232b      	movmi	r3, #43	; 0x2b
 800a982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a986:	f89a 3000 	ldrb.w	r3, [sl]
 800a98a:	2b2a      	cmp	r3, #42	; 0x2a
 800a98c:	d015      	beq.n	800a9ba <_svfiprintf_r+0xf6>
 800a98e:	9a07      	ldr	r2, [sp, #28]
 800a990:	4654      	mov	r4, sl
 800a992:	2000      	movs	r0, #0
 800a994:	f04f 0c0a 	mov.w	ip, #10
 800a998:	4621      	mov	r1, r4
 800a99a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a99e:	3b30      	subs	r3, #48	; 0x30
 800a9a0:	2b09      	cmp	r3, #9
 800a9a2:	d94e      	bls.n	800aa42 <_svfiprintf_r+0x17e>
 800a9a4:	b1b0      	cbz	r0, 800a9d4 <_svfiprintf_r+0x110>
 800a9a6:	9207      	str	r2, [sp, #28]
 800a9a8:	e014      	b.n	800a9d4 <_svfiprintf_r+0x110>
 800a9aa:	eba0 0308 	sub.w	r3, r0, r8
 800a9ae:	fa09 f303 	lsl.w	r3, r9, r3
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	9304      	str	r3, [sp, #16]
 800a9b6:	46a2      	mov	sl, r4
 800a9b8:	e7d2      	b.n	800a960 <_svfiprintf_r+0x9c>
 800a9ba:	9b03      	ldr	r3, [sp, #12]
 800a9bc:	1d19      	adds	r1, r3, #4
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	9103      	str	r1, [sp, #12]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	bfbb      	ittet	lt
 800a9c6:	425b      	neglt	r3, r3
 800a9c8:	f042 0202 	orrlt.w	r2, r2, #2
 800a9cc:	9307      	strge	r3, [sp, #28]
 800a9ce:	9307      	strlt	r3, [sp, #28]
 800a9d0:	bfb8      	it	lt
 800a9d2:	9204      	strlt	r2, [sp, #16]
 800a9d4:	7823      	ldrb	r3, [r4, #0]
 800a9d6:	2b2e      	cmp	r3, #46	; 0x2e
 800a9d8:	d10c      	bne.n	800a9f4 <_svfiprintf_r+0x130>
 800a9da:	7863      	ldrb	r3, [r4, #1]
 800a9dc:	2b2a      	cmp	r3, #42	; 0x2a
 800a9de:	d135      	bne.n	800aa4c <_svfiprintf_r+0x188>
 800a9e0:	9b03      	ldr	r3, [sp, #12]
 800a9e2:	1d1a      	adds	r2, r3, #4
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	9203      	str	r2, [sp, #12]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	bfb8      	it	lt
 800a9ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a9f0:	3402      	adds	r4, #2
 800a9f2:	9305      	str	r3, [sp, #20]
 800a9f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aac0 <_svfiprintf_r+0x1fc>
 800a9f8:	7821      	ldrb	r1, [r4, #0]
 800a9fa:	2203      	movs	r2, #3
 800a9fc:	4650      	mov	r0, sl
 800a9fe:	f7f5 fc0f 	bl	8000220 <memchr>
 800aa02:	b140      	cbz	r0, 800aa16 <_svfiprintf_r+0x152>
 800aa04:	2340      	movs	r3, #64	; 0x40
 800aa06:	eba0 000a 	sub.w	r0, r0, sl
 800aa0a:	fa03 f000 	lsl.w	r0, r3, r0
 800aa0e:	9b04      	ldr	r3, [sp, #16]
 800aa10:	4303      	orrs	r3, r0
 800aa12:	3401      	adds	r4, #1
 800aa14:	9304      	str	r3, [sp, #16]
 800aa16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa1a:	4826      	ldr	r0, [pc, #152]	; (800aab4 <_svfiprintf_r+0x1f0>)
 800aa1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa20:	2206      	movs	r2, #6
 800aa22:	f7f5 fbfd 	bl	8000220 <memchr>
 800aa26:	2800      	cmp	r0, #0
 800aa28:	d038      	beq.n	800aa9c <_svfiprintf_r+0x1d8>
 800aa2a:	4b23      	ldr	r3, [pc, #140]	; (800aab8 <_svfiprintf_r+0x1f4>)
 800aa2c:	bb1b      	cbnz	r3, 800aa76 <_svfiprintf_r+0x1b2>
 800aa2e:	9b03      	ldr	r3, [sp, #12]
 800aa30:	3307      	adds	r3, #7
 800aa32:	f023 0307 	bic.w	r3, r3, #7
 800aa36:	3308      	adds	r3, #8
 800aa38:	9303      	str	r3, [sp, #12]
 800aa3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa3c:	4433      	add	r3, r6
 800aa3e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa40:	e767      	b.n	800a912 <_svfiprintf_r+0x4e>
 800aa42:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa46:	460c      	mov	r4, r1
 800aa48:	2001      	movs	r0, #1
 800aa4a:	e7a5      	b.n	800a998 <_svfiprintf_r+0xd4>
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	3401      	adds	r4, #1
 800aa50:	9305      	str	r3, [sp, #20]
 800aa52:	4619      	mov	r1, r3
 800aa54:	f04f 0c0a 	mov.w	ip, #10
 800aa58:	4620      	mov	r0, r4
 800aa5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa5e:	3a30      	subs	r2, #48	; 0x30
 800aa60:	2a09      	cmp	r2, #9
 800aa62:	d903      	bls.n	800aa6c <_svfiprintf_r+0x1a8>
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d0c5      	beq.n	800a9f4 <_svfiprintf_r+0x130>
 800aa68:	9105      	str	r1, [sp, #20]
 800aa6a:	e7c3      	b.n	800a9f4 <_svfiprintf_r+0x130>
 800aa6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa70:	4604      	mov	r4, r0
 800aa72:	2301      	movs	r3, #1
 800aa74:	e7f0      	b.n	800aa58 <_svfiprintf_r+0x194>
 800aa76:	ab03      	add	r3, sp, #12
 800aa78:	9300      	str	r3, [sp, #0]
 800aa7a:	462a      	mov	r2, r5
 800aa7c:	4b0f      	ldr	r3, [pc, #60]	; (800aabc <_svfiprintf_r+0x1f8>)
 800aa7e:	a904      	add	r1, sp, #16
 800aa80:	4638      	mov	r0, r7
 800aa82:	f7fe f883 	bl	8008b8c <_printf_float>
 800aa86:	1c42      	adds	r2, r0, #1
 800aa88:	4606      	mov	r6, r0
 800aa8a:	d1d6      	bne.n	800aa3a <_svfiprintf_r+0x176>
 800aa8c:	89ab      	ldrh	r3, [r5, #12]
 800aa8e:	065b      	lsls	r3, r3, #25
 800aa90:	f53f af2c 	bmi.w	800a8ec <_svfiprintf_r+0x28>
 800aa94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa96:	b01d      	add	sp, #116	; 0x74
 800aa98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa9c:	ab03      	add	r3, sp, #12
 800aa9e:	9300      	str	r3, [sp, #0]
 800aaa0:	462a      	mov	r2, r5
 800aaa2:	4b06      	ldr	r3, [pc, #24]	; (800aabc <_svfiprintf_r+0x1f8>)
 800aaa4:	a904      	add	r1, sp, #16
 800aaa6:	4638      	mov	r0, r7
 800aaa8:	f7fe fb14 	bl	80090d4 <_printf_i>
 800aaac:	e7eb      	b.n	800aa86 <_svfiprintf_r+0x1c2>
 800aaae:	bf00      	nop
 800aab0:	0800bb64 	.word	0x0800bb64
 800aab4:	0800bb6e 	.word	0x0800bb6e
 800aab8:	08008b8d 	.word	0x08008b8d
 800aabc:	0800a80d 	.word	0x0800a80d
 800aac0:	0800bb6a 	.word	0x0800bb6a

0800aac4 <__assert_func>:
 800aac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aac6:	4614      	mov	r4, r2
 800aac8:	461a      	mov	r2, r3
 800aaca:	4b09      	ldr	r3, [pc, #36]	; (800aaf0 <__assert_func+0x2c>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4605      	mov	r5, r0
 800aad0:	68d8      	ldr	r0, [r3, #12]
 800aad2:	b14c      	cbz	r4, 800aae8 <__assert_func+0x24>
 800aad4:	4b07      	ldr	r3, [pc, #28]	; (800aaf4 <__assert_func+0x30>)
 800aad6:	9100      	str	r1, [sp, #0]
 800aad8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aadc:	4906      	ldr	r1, [pc, #24]	; (800aaf8 <__assert_func+0x34>)
 800aade:	462b      	mov	r3, r5
 800aae0:	f000 f80e 	bl	800ab00 <fiprintf>
 800aae4:	f000 faa4 	bl	800b030 <abort>
 800aae8:	4b04      	ldr	r3, [pc, #16]	; (800aafc <__assert_func+0x38>)
 800aaea:	461c      	mov	r4, r3
 800aaec:	e7f3      	b.n	800aad6 <__assert_func+0x12>
 800aaee:	bf00      	nop
 800aaf0:	200023e4 	.word	0x200023e4
 800aaf4:	0800bb75 	.word	0x0800bb75
 800aaf8:	0800bb82 	.word	0x0800bb82
 800aafc:	0800bbb0 	.word	0x0800bbb0

0800ab00 <fiprintf>:
 800ab00:	b40e      	push	{r1, r2, r3}
 800ab02:	b503      	push	{r0, r1, lr}
 800ab04:	4601      	mov	r1, r0
 800ab06:	ab03      	add	r3, sp, #12
 800ab08:	4805      	ldr	r0, [pc, #20]	; (800ab20 <fiprintf+0x20>)
 800ab0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab0e:	6800      	ldr	r0, [r0, #0]
 800ab10:	9301      	str	r3, [sp, #4]
 800ab12:	f000 f88f 	bl	800ac34 <_vfiprintf_r>
 800ab16:	b002      	add	sp, #8
 800ab18:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab1c:	b003      	add	sp, #12
 800ab1e:	4770      	bx	lr
 800ab20:	200023e4 	.word	0x200023e4

0800ab24 <__retarget_lock_init_recursive>:
 800ab24:	4770      	bx	lr

0800ab26 <__retarget_lock_acquire_recursive>:
 800ab26:	4770      	bx	lr

0800ab28 <__retarget_lock_release_recursive>:
 800ab28:	4770      	bx	lr

0800ab2a <__ascii_mbtowc>:
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	b901      	cbnz	r1, 800ab30 <__ascii_mbtowc+0x6>
 800ab2e:	a901      	add	r1, sp, #4
 800ab30:	b142      	cbz	r2, 800ab44 <__ascii_mbtowc+0x1a>
 800ab32:	b14b      	cbz	r3, 800ab48 <__ascii_mbtowc+0x1e>
 800ab34:	7813      	ldrb	r3, [r2, #0]
 800ab36:	600b      	str	r3, [r1, #0]
 800ab38:	7812      	ldrb	r2, [r2, #0]
 800ab3a:	1e10      	subs	r0, r2, #0
 800ab3c:	bf18      	it	ne
 800ab3e:	2001      	movne	r0, #1
 800ab40:	b002      	add	sp, #8
 800ab42:	4770      	bx	lr
 800ab44:	4610      	mov	r0, r2
 800ab46:	e7fb      	b.n	800ab40 <__ascii_mbtowc+0x16>
 800ab48:	f06f 0001 	mvn.w	r0, #1
 800ab4c:	e7f8      	b.n	800ab40 <__ascii_mbtowc+0x16>

0800ab4e <memmove>:
 800ab4e:	4288      	cmp	r0, r1
 800ab50:	b510      	push	{r4, lr}
 800ab52:	eb01 0402 	add.w	r4, r1, r2
 800ab56:	d902      	bls.n	800ab5e <memmove+0x10>
 800ab58:	4284      	cmp	r4, r0
 800ab5a:	4623      	mov	r3, r4
 800ab5c:	d807      	bhi.n	800ab6e <memmove+0x20>
 800ab5e:	1e43      	subs	r3, r0, #1
 800ab60:	42a1      	cmp	r1, r4
 800ab62:	d008      	beq.n	800ab76 <memmove+0x28>
 800ab64:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab68:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab6c:	e7f8      	b.n	800ab60 <memmove+0x12>
 800ab6e:	4402      	add	r2, r0
 800ab70:	4601      	mov	r1, r0
 800ab72:	428a      	cmp	r2, r1
 800ab74:	d100      	bne.n	800ab78 <memmove+0x2a>
 800ab76:	bd10      	pop	{r4, pc}
 800ab78:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab7c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab80:	e7f7      	b.n	800ab72 <memmove+0x24>

0800ab82 <_realloc_r>:
 800ab82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab86:	4680      	mov	r8, r0
 800ab88:	4614      	mov	r4, r2
 800ab8a:	460e      	mov	r6, r1
 800ab8c:	b921      	cbnz	r1, 800ab98 <_realloc_r+0x16>
 800ab8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab92:	4611      	mov	r1, r2
 800ab94:	f7fd bee6 	b.w	8008964 <_malloc_r>
 800ab98:	b92a      	cbnz	r2, 800aba6 <_realloc_r+0x24>
 800ab9a:	f7fd fe77 	bl	800888c <_free_r>
 800ab9e:	4625      	mov	r5, r4
 800aba0:	4628      	mov	r0, r5
 800aba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aba6:	f000 fc67 	bl	800b478 <_malloc_usable_size_r>
 800abaa:	4284      	cmp	r4, r0
 800abac:	4607      	mov	r7, r0
 800abae:	d802      	bhi.n	800abb6 <_realloc_r+0x34>
 800abb0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800abb4:	d812      	bhi.n	800abdc <_realloc_r+0x5a>
 800abb6:	4621      	mov	r1, r4
 800abb8:	4640      	mov	r0, r8
 800abba:	f7fd fed3 	bl	8008964 <_malloc_r>
 800abbe:	4605      	mov	r5, r0
 800abc0:	2800      	cmp	r0, #0
 800abc2:	d0ed      	beq.n	800aba0 <_realloc_r+0x1e>
 800abc4:	42bc      	cmp	r4, r7
 800abc6:	4622      	mov	r2, r4
 800abc8:	4631      	mov	r1, r6
 800abca:	bf28      	it	cs
 800abcc:	463a      	movcs	r2, r7
 800abce:	f7ff fa69 	bl	800a0a4 <memcpy>
 800abd2:	4631      	mov	r1, r6
 800abd4:	4640      	mov	r0, r8
 800abd6:	f7fd fe59 	bl	800888c <_free_r>
 800abda:	e7e1      	b.n	800aba0 <_realloc_r+0x1e>
 800abdc:	4635      	mov	r5, r6
 800abde:	e7df      	b.n	800aba0 <_realloc_r+0x1e>

0800abe0 <__sfputc_r>:
 800abe0:	6893      	ldr	r3, [r2, #8]
 800abe2:	3b01      	subs	r3, #1
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	b410      	push	{r4}
 800abe8:	6093      	str	r3, [r2, #8]
 800abea:	da08      	bge.n	800abfe <__sfputc_r+0x1e>
 800abec:	6994      	ldr	r4, [r2, #24]
 800abee:	42a3      	cmp	r3, r4
 800abf0:	db01      	blt.n	800abf6 <__sfputc_r+0x16>
 800abf2:	290a      	cmp	r1, #10
 800abf4:	d103      	bne.n	800abfe <__sfputc_r+0x1e>
 800abf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abfa:	f000 b94b 	b.w	800ae94 <__swbuf_r>
 800abfe:	6813      	ldr	r3, [r2, #0]
 800ac00:	1c58      	adds	r0, r3, #1
 800ac02:	6010      	str	r0, [r2, #0]
 800ac04:	7019      	strb	r1, [r3, #0]
 800ac06:	4608      	mov	r0, r1
 800ac08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac0c:	4770      	bx	lr

0800ac0e <__sfputs_r>:
 800ac0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac10:	4606      	mov	r6, r0
 800ac12:	460f      	mov	r7, r1
 800ac14:	4614      	mov	r4, r2
 800ac16:	18d5      	adds	r5, r2, r3
 800ac18:	42ac      	cmp	r4, r5
 800ac1a:	d101      	bne.n	800ac20 <__sfputs_r+0x12>
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	e007      	b.n	800ac30 <__sfputs_r+0x22>
 800ac20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac24:	463a      	mov	r2, r7
 800ac26:	4630      	mov	r0, r6
 800ac28:	f7ff ffda 	bl	800abe0 <__sfputc_r>
 800ac2c:	1c43      	adds	r3, r0, #1
 800ac2e:	d1f3      	bne.n	800ac18 <__sfputs_r+0xa>
 800ac30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac34 <_vfiprintf_r>:
 800ac34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac38:	460d      	mov	r5, r1
 800ac3a:	b09d      	sub	sp, #116	; 0x74
 800ac3c:	4614      	mov	r4, r2
 800ac3e:	4698      	mov	r8, r3
 800ac40:	4606      	mov	r6, r0
 800ac42:	b118      	cbz	r0, 800ac4c <_vfiprintf_r+0x18>
 800ac44:	6983      	ldr	r3, [r0, #24]
 800ac46:	b90b      	cbnz	r3, 800ac4c <_vfiprintf_r+0x18>
 800ac48:	f000 fb14 	bl	800b274 <__sinit>
 800ac4c:	4b89      	ldr	r3, [pc, #548]	; (800ae74 <_vfiprintf_r+0x240>)
 800ac4e:	429d      	cmp	r5, r3
 800ac50:	d11b      	bne.n	800ac8a <_vfiprintf_r+0x56>
 800ac52:	6875      	ldr	r5, [r6, #4]
 800ac54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac56:	07d9      	lsls	r1, r3, #31
 800ac58:	d405      	bmi.n	800ac66 <_vfiprintf_r+0x32>
 800ac5a:	89ab      	ldrh	r3, [r5, #12]
 800ac5c:	059a      	lsls	r2, r3, #22
 800ac5e:	d402      	bmi.n	800ac66 <_vfiprintf_r+0x32>
 800ac60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac62:	f7ff ff60 	bl	800ab26 <__retarget_lock_acquire_recursive>
 800ac66:	89ab      	ldrh	r3, [r5, #12]
 800ac68:	071b      	lsls	r3, r3, #28
 800ac6a:	d501      	bpl.n	800ac70 <_vfiprintf_r+0x3c>
 800ac6c:	692b      	ldr	r3, [r5, #16]
 800ac6e:	b9eb      	cbnz	r3, 800acac <_vfiprintf_r+0x78>
 800ac70:	4629      	mov	r1, r5
 800ac72:	4630      	mov	r0, r6
 800ac74:	f000 f96e 	bl	800af54 <__swsetup_r>
 800ac78:	b1c0      	cbz	r0, 800acac <_vfiprintf_r+0x78>
 800ac7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac7c:	07dc      	lsls	r4, r3, #31
 800ac7e:	d50e      	bpl.n	800ac9e <_vfiprintf_r+0x6a>
 800ac80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac84:	b01d      	add	sp, #116	; 0x74
 800ac86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac8a:	4b7b      	ldr	r3, [pc, #492]	; (800ae78 <_vfiprintf_r+0x244>)
 800ac8c:	429d      	cmp	r5, r3
 800ac8e:	d101      	bne.n	800ac94 <_vfiprintf_r+0x60>
 800ac90:	68b5      	ldr	r5, [r6, #8]
 800ac92:	e7df      	b.n	800ac54 <_vfiprintf_r+0x20>
 800ac94:	4b79      	ldr	r3, [pc, #484]	; (800ae7c <_vfiprintf_r+0x248>)
 800ac96:	429d      	cmp	r5, r3
 800ac98:	bf08      	it	eq
 800ac9a:	68f5      	ldreq	r5, [r6, #12]
 800ac9c:	e7da      	b.n	800ac54 <_vfiprintf_r+0x20>
 800ac9e:	89ab      	ldrh	r3, [r5, #12]
 800aca0:	0598      	lsls	r0, r3, #22
 800aca2:	d4ed      	bmi.n	800ac80 <_vfiprintf_r+0x4c>
 800aca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aca6:	f7ff ff3f 	bl	800ab28 <__retarget_lock_release_recursive>
 800acaa:	e7e9      	b.n	800ac80 <_vfiprintf_r+0x4c>
 800acac:	2300      	movs	r3, #0
 800acae:	9309      	str	r3, [sp, #36]	; 0x24
 800acb0:	2320      	movs	r3, #32
 800acb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800acba:	2330      	movs	r3, #48	; 0x30
 800acbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ae80 <_vfiprintf_r+0x24c>
 800acc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800acc4:	f04f 0901 	mov.w	r9, #1
 800acc8:	4623      	mov	r3, r4
 800acca:	469a      	mov	sl, r3
 800accc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acd0:	b10a      	cbz	r2, 800acd6 <_vfiprintf_r+0xa2>
 800acd2:	2a25      	cmp	r2, #37	; 0x25
 800acd4:	d1f9      	bne.n	800acca <_vfiprintf_r+0x96>
 800acd6:	ebba 0b04 	subs.w	fp, sl, r4
 800acda:	d00b      	beq.n	800acf4 <_vfiprintf_r+0xc0>
 800acdc:	465b      	mov	r3, fp
 800acde:	4622      	mov	r2, r4
 800ace0:	4629      	mov	r1, r5
 800ace2:	4630      	mov	r0, r6
 800ace4:	f7ff ff93 	bl	800ac0e <__sfputs_r>
 800ace8:	3001      	adds	r0, #1
 800acea:	f000 80aa 	beq.w	800ae42 <_vfiprintf_r+0x20e>
 800acee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acf0:	445a      	add	r2, fp
 800acf2:	9209      	str	r2, [sp, #36]	; 0x24
 800acf4:	f89a 3000 	ldrb.w	r3, [sl]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	f000 80a2 	beq.w	800ae42 <_vfiprintf_r+0x20e>
 800acfe:	2300      	movs	r3, #0
 800ad00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad08:	f10a 0a01 	add.w	sl, sl, #1
 800ad0c:	9304      	str	r3, [sp, #16]
 800ad0e:	9307      	str	r3, [sp, #28]
 800ad10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad14:	931a      	str	r3, [sp, #104]	; 0x68
 800ad16:	4654      	mov	r4, sl
 800ad18:	2205      	movs	r2, #5
 800ad1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad1e:	4858      	ldr	r0, [pc, #352]	; (800ae80 <_vfiprintf_r+0x24c>)
 800ad20:	f7f5 fa7e 	bl	8000220 <memchr>
 800ad24:	9a04      	ldr	r2, [sp, #16]
 800ad26:	b9d8      	cbnz	r0, 800ad60 <_vfiprintf_r+0x12c>
 800ad28:	06d1      	lsls	r1, r2, #27
 800ad2a:	bf44      	itt	mi
 800ad2c:	2320      	movmi	r3, #32
 800ad2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad32:	0713      	lsls	r3, r2, #28
 800ad34:	bf44      	itt	mi
 800ad36:	232b      	movmi	r3, #43	; 0x2b
 800ad38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ad40:	2b2a      	cmp	r3, #42	; 0x2a
 800ad42:	d015      	beq.n	800ad70 <_vfiprintf_r+0x13c>
 800ad44:	9a07      	ldr	r2, [sp, #28]
 800ad46:	4654      	mov	r4, sl
 800ad48:	2000      	movs	r0, #0
 800ad4a:	f04f 0c0a 	mov.w	ip, #10
 800ad4e:	4621      	mov	r1, r4
 800ad50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad54:	3b30      	subs	r3, #48	; 0x30
 800ad56:	2b09      	cmp	r3, #9
 800ad58:	d94e      	bls.n	800adf8 <_vfiprintf_r+0x1c4>
 800ad5a:	b1b0      	cbz	r0, 800ad8a <_vfiprintf_r+0x156>
 800ad5c:	9207      	str	r2, [sp, #28]
 800ad5e:	e014      	b.n	800ad8a <_vfiprintf_r+0x156>
 800ad60:	eba0 0308 	sub.w	r3, r0, r8
 800ad64:	fa09 f303 	lsl.w	r3, r9, r3
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	9304      	str	r3, [sp, #16]
 800ad6c:	46a2      	mov	sl, r4
 800ad6e:	e7d2      	b.n	800ad16 <_vfiprintf_r+0xe2>
 800ad70:	9b03      	ldr	r3, [sp, #12]
 800ad72:	1d19      	adds	r1, r3, #4
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	9103      	str	r1, [sp, #12]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	bfbb      	ittet	lt
 800ad7c:	425b      	neglt	r3, r3
 800ad7e:	f042 0202 	orrlt.w	r2, r2, #2
 800ad82:	9307      	strge	r3, [sp, #28]
 800ad84:	9307      	strlt	r3, [sp, #28]
 800ad86:	bfb8      	it	lt
 800ad88:	9204      	strlt	r2, [sp, #16]
 800ad8a:	7823      	ldrb	r3, [r4, #0]
 800ad8c:	2b2e      	cmp	r3, #46	; 0x2e
 800ad8e:	d10c      	bne.n	800adaa <_vfiprintf_r+0x176>
 800ad90:	7863      	ldrb	r3, [r4, #1]
 800ad92:	2b2a      	cmp	r3, #42	; 0x2a
 800ad94:	d135      	bne.n	800ae02 <_vfiprintf_r+0x1ce>
 800ad96:	9b03      	ldr	r3, [sp, #12]
 800ad98:	1d1a      	adds	r2, r3, #4
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	9203      	str	r2, [sp, #12]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	bfb8      	it	lt
 800ada2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ada6:	3402      	adds	r4, #2
 800ada8:	9305      	str	r3, [sp, #20]
 800adaa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ae90 <_vfiprintf_r+0x25c>
 800adae:	7821      	ldrb	r1, [r4, #0]
 800adb0:	2203      	movs	r2, #3
 800adb2:	4650      	mov	r0, sl
 800adb4:	f7f5 fa34 	bl	8000220 <memchr>
 800adb8:	b140      	cbz	r0, 800adcc <_vfiprintf_r+0x198>
 800adba:	2340      	movs	r3, #64	; 0x40
 800adbc:	eba0 000a 	sub.w	r0, r0, sl
 800adc0:	fa03 f000 	lsl.w	r0, r3, r0
 800adc4:	9b04      	ldr	r3, [sp, #16]
 800adc6:	4303      	orrs	r3, r0
 800adc8:	3401      	adds	r4, #1
 800adca:	9304      	str	r3, [sp, #16]
 800adcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800add0:	482c      	ldr	r0, [pc, #176]	; (800ae84 <_vfiprintf_r+0x250>)
 800add2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800add6:	2206      	movs	r2, #6
 800add8:	f7f5 fa22 	bl	8000220 <memchr>
 800addc:	2800      	cmp	r0, #0
 800adde:	d03f      	beq.n	800ae60 <_vfiprintf_r+0x22c>
 800ade0:	4b29      	ldr	r3, [pc, #164]	; (800ae88 <_vfiprintf_r+0x254>)
 800ade2:	bb1b      	cbnz	r3, 800ae2c <_vfiprintf_r+0x1f8>
 800ade4:	9b03      	ldr	r3, [sp, #12]
 800ade6:	3307      	adds	r3, #7
 800ade8:	f023 0307 	bic.w	r3, r3, #7
 800adec:	3308      	adds	r3, #8
 800adee:	9303      	str	r3, [sp, #12]
 800adf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adf2:	443b      	add	r3, r7
 800adf4:	9309      	str	r3, [sp, #36]	; 0x24
 800adf6:	e767      	b.n	800acc8 <_vfiprintf_r+0x94>
 800adf8:	fb0c 3202 	mla	r2, ip, r2, r3
 800adfc:	460c      	mov	r4, r1
 800adfe:	2001      	movs	r0, #1
 800ae00:	e7a5      	b.n	800ad4e <_vfiprintf_r+0x11a>
 800ae02:	2300      	movs	r3, #0
 800ae04:	3401      	adds	r4, #1
 800ae06:	9305      	str	r3, [sp, #20]
 800ae08:	4619      	mov	r1, r3
 800ae0a:	f04f 0c0a 	mov.w	ip, #10
 800ae0e:	4620      	mov	r0, r4
 800ae10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae14:	3a30      	subs	r2, #48	; 0x30
 800ae16:	2a09      	cmp	r2, #9
 800ae18:	d903      	bls.n	800ae22 <_vfiprintf_r+0x1ee>
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d0c5      	beq.n	800adaa <_vfiprintf_r+0x176>
 800ae1e:	9105      	str	r1, [sp, #20]
 800ae20:	e7c3      	b.n	800adaa <_vfiprintf_r+0x176>
 800ae22:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae26:	4604      	mov	r4, r0
 800ae28:	2301      	movs	r3, #1
 800ae2a:	e7f0      	b.n	800ae0e <_vfiprintf_r+0x1da>
 800ae2c:	ab03      	add	r3, sp, #12
 800ae2e:	9300      	str	r3, [sp, #0]
 800ae30:	462a      	mov	r2, r5
 800ae32:	4b16      	ldr	r3, [pc, #88]	; (800ae8c <_vfiprintf_r+0x258>)
 800ae34:	a904      	add	r1, sp, #16
 800ae36:	4630      	mov	r0, r6
 800ae38:	f7fd fea8 	bl	8008b8c <_printf_float>
 800ae3c:	4607      	mov	r7, r0
 800ae3e:	1c78      	adds	r0, r7, #1
 800ae40:	d1d6      	bne.n	800adf0 <_vfiprintf_r+0x1bc>
 800ae42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae44:	07d9      	lsls	r1, r3, #31
 800ae46:	d405      	bmi.n	800ae54 <_vfiprintf_r+0x220>
 800ae48:	89ab      	ldrh	r3, [r5, #12]
 800ae4a:	059a      	lsls	r2, r3, #22
 800ae4c:	d402      	bmi.n	800ae54 <_vfiprintf_r+0x220>
 800ae4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae50:	f7ff fe6a 	bl	800ab28 <__retarget_lock_release_recursive>
 800ae54:	89ab      	ldrh	r3, [r5, #12]
 800ae56:	065b      	lsls	r3, r3, #25
 800ae58:	f53f af12 	bmi.w	800ac80 <_vfiprintf_r+0x4c>
 800ae5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae5e:	e711      	b.n	800ac84 <_vfiprintf_r+0x50>
 800ae60:	ab03      	add	r3, sp, #12
 800ae62:	9300      	str	r3, [sp, #0]
 800ae64:	462a      	mov	r2, r5
 800ae66:	4b09      	ldr	r3, [pc, #36]	; (800ae8c <_vfiprintf_r+0x258>)
 800ae68:	a904      	add	r1, sp, #16
 800ae6a:	4630      	mov	r0, r6
 800ae6c:	f7fe f932 	bl	80090d4 <_printf_i>
 800ae70:	e7e4      	b.n	800ae3c <_vfiprintf_r+0x208>
 800ae72:	bf00      	nop
 800ae74:	0800bcdc 	.word	0x0800bcdc
 800ae78:	0800bcfc 	.word	0x0800bcfc
 800ae7c:	0800bcbc 	.word	0x0800bcbc
 800ae80:	0800bb64 	.word	0x0800bb64
 800ae84:	0800bb6e 	.word	0x0800bb6e
 800ae88:	08008b8d 	.word	0x08008b8d
 800ae8c:	0800ac0f 	.word	0x0800ac0f
 800ae90:	0800bb6a 	.word	0x0800bb6a

0800ae94 <__swbuf_r>:
 800ae94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae96:	460e      	mov	r6, r1
 800ae98:	4614      	mov	r4, r2
 800ae9a:	4605      	mov	r5, r0
 800ae9c:	b118      	cbz	r0, 800aea6 <__swbuf_r+0x12>
 800ae9e:	6983      	ldr	r3, [r0, #24]
 800aea0:	b90b      	cbnz	r3, 800aea6 <__swbuf_r+0x12>
 800aea2:	f000 f9e7 	bl	800b274 <__sinit>
 800aea6:	4b21      	ldr	r3, [pc, #132]	; (800af2c <__swbuf_r+0x98>)
 800aea8:	429c      	cmp	r4, r3
 800aeaa:	d12b      	bne.n	800af04 <__swbuf_r+0x70>
 800aeac:	686c      	ldr	r4, [r5, #4]
 800aeae:	69a3      	ldr	r3, [r4, #24]
 800aeb0:	60a3      	str	r3, [r4, #8]
 800aeb2:	89a3      	ldrh	r3, [r4, #12]
 800aeb4:	071a      	lsls	r2, r3, #28
 800aeb6:	d52f      	bpl.n	800af18 <__swbuf_r+0x84>
 800aeb8:	6923      	ldr	r3, [r4, #16]
 800aeba:	b36b      	cbz	r3, 800af18 <__swbuf_r+0x84>
 800aebc:	6923      	ldr	r3, [r4, #16]
 800aebe:	6820      	ldr	r0, [r4, #0]
 800aec0:	1ac0      	subs	r0, r0, r3
 800aec2:	6963      	ldr	r3, [r4, #20]
 800aec4:	b2f6      	uxtb	r6, r6
 800aec6:	4283      	cmp	r3, r0
 800aec8:	4637      	mov	r7, r6
 800aeca:	dc04      	bgt.n	800aed6 <__swbuf_r+0x42>
 800aecc:	4621      	mov	r1, r4
 800aece:	4628      	mov	r0, r5
 800aed0:	f000 f93c 	bl	800b14c <_fflush_r>
 800aed4:	bb30      	cbnz	r0, 800af24 <__swbuf_r+0x90>
 800aed6:	68a3      	ldr	r3, [r4, #8]
 800aed8:	3b01      	subs	r3, #1
 800aeda:	60a3      	str	r3, [r4, #8]
 800aedc:	6823      	ldr	r3, [r4, #0]
 800aede:	1c5a      	adds	r2, r3, #1
 800aee0:	6022      	str	r2, [r4, #0]
 800aee2:	701e      	strb	r6, [r3, #0]
 800aee4:	6963      	ldr	r3, [r4, #20]
 800aee6:	3001      	adds	r0, #1
 800aee8:	4283      	cmp	r3, r0
 800aeea:	d004      	beq.n	800aef6 <__swbuf_r+0x62>
 800aeec:	89a3      	ldrh	r3, [r4, #12]
 800aeee:	07db      	lsls	r3, r3, #31
 800aef0:	d506      	bpl.n	800af00 <__swbuf_r+0x6c>
 800aef2:	2e0a      	cmp	r6, #10
 800aef4:	d104      	bne.n	800af00 <__swbuf_r+0x6c>
 800aef6:	4621      	mov	r1, r4
 800aef8:	4628      	mov	r0, r5
 800aefa:	f000 f927 	bl	800b14c <_fflush_r>
 800aefe:	b988      	cbnz	r0, 800af24 <__swbuf_r+0x90>
 800af00:	4638      	mov	r0, r7
 800af02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af04:	4b0a      	ldr	r3, [pc, #40]	; (800af30 <__swbuf_r+0x9c>)
 800af06:	429c      	cmp	r4, r3
 800af08:	d101      	bne.n	800af0e <__swbuf_r+0x7a>
 800af0a:	68ac      	ldr	r4, [r5, #8]
 800af0c:	e7cf      	b.n	800aeae <__swbuf_r+0x1a>
 800af0e:	4b09      	ldr	r3, [pc, #36]	; (800af34 <__swbuf_r+0xa0>)
 800af10:	429c      	cmp	r4, r3
 800af12:	bf08      	it	eq
 800af14:	68ec      	ldreq	r4, [r5, #12]
 800af16:	e7ca      	b.n	800aeae <__swbuf_r+0x1a>
 800af18:	4621      	mov	r1, r4
 800af1a:	4628      	mov	r0, r5
 800af1c:	f000 f81a 	bl	800af54 <__swsetup_r>
 800af20:	2800      	cmp	r0, #0
 800af22:	d0cb      	beq.n	800aebc <__swbuf_r+0x28>
 800af24:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800af28:	e7ea      	b.n	800af00 <__swbuf_r+0x6c>
 800af2a:	bf00      	nop
 800af2c:	0800bcdc 	.word	0x0800bcdc
 800af30:	0800bcfc 	.word	0x0800bcfc
 800af34:	0800bcbc 	.word	0x0800bcbc

0800af38 <__ascii_wctomb>:
 800af38:	b149      	cbz	r1, 800af4e <__ascii_wctomb+0x16>
 800af3a:	2aff      	cmp	r2, #255	; 0xff
 800af3c:	bf85      	ittet	hi
 800af3e:	238a      	movhi	r3, #138	; 0x8a
 800af40:	6003      	strhi	r3, [r0, #0]
 800af42:	700a      	strbls	r2, [r1, #0]
 800af44:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800af48:	bf98      	it	ls
 800af4a:	2001      	movls	r0, #1
 800af4c:	4770      	bx	lr
 800af4e:	4608      	mov	r0, r1
 800af50:	4770      	bx	lr
	...

0800af54 <__swsetup_r>:
 800af54:	4b32      	ldr	r3, [pc, #200]	; (800b020 <__swsetup_r+0xcc>)
 800af56:	b570      	push	{r4, r5, r6, lr}
 800af58:	681d      	ldr	r5, [r3, #0]
 800af5a:	4606      	mov	r6, r0
 800af5c:	460c      	mov	r4, r1
 800af5e:	b125      	cbz	r5, 800af6a <__swsetup_r+0x16>
 800af60:	69ab      	ldr	r3, [r5, #24]
 800af62:	b913      	cbnz	r3, 800af6a <__swsetup_r+0x16>
 800af64:	4628      	mov	r0, r5
 800af66:	f000 f985 	bl	800b274 <__sinit>
 800af6a:	4b2e      	ldr	r3, [pc, #184]	; (800b024 <__swsetup_r+0xd0>)
 800af6c:	429c      	cmp	r4, r3
 800af6e:	d10f      	bne.n	800af90 <__swsetup_r+0x3c>
 800af70:	686c      	ldr	r4, [r5, #4]
 800af72:	89a3      	ldrh	r3, [r4, #12]
 800af74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af78:	0719      	lsls	r1, r3, #28
 800af7a:	d42c      	bmi.n	800afd6 <__swsetup_r+0x82>
 800af7c:	06dd      	lsls	r5, r3, #27
 800af7e:	d411      	bmi.n	800afa4 <__swsetup_r+0x50>
 800af80:	2309      	movs	r3, #9
 800af82:	6033      	str	r3, [r6, #0]
 800af84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af88:	81a3      	strh	r3, [r4, #12]
 800af8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af8e:	e03e      	b.n	800b00e <__swsetup_r+0xba>
 800af90:	4b25      	ldr	r3, [pc, #148]	; (800b028 <__swsetup_r+0xd4>)
 800af92:	429c      	cmp	r4, r3
 800af94:	d101      	bne.n	800af9a <__swsetup_r+0x46>
 800af96:	68ac      	ldr	r4, [r5, #8]
 800af98:	e7eb      	b.n	800af72 <__swsetup_r+0x1e>
 800af9a:	4b24      	ldr	r3, [pc, #144]	; (800b02c <__swsetup_r+0xd8>)
 800af9c:	429c      	cmp	r4, r3
 800af9e:	bf08      	it	eq
 800afa0:	68ec      	ldreq	r4, [r5, #12]
 800afa2:	e7e6      	b.n	800af72 <__swsetup_r+0x1e>
 800afa4:	0758      	lsls	r0, r3, #29
 800afa6:	d512      	bpl.n	800afce <__swsetup_r+0x7a>
 800afa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afaa:	b141      	cbz	r1, 800afbe <__swsetup_r+0x6a>
 800afac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afb0:	4299      	cmp	r1, r3
 800afb2:	d002      	beq.n	800afba <__swsetup_r+0x66>
 800afb4:	4630      	mov	r0, r6
 800afb6:	f7fd fc69 	bl	800888c <_free_r>
 800afba:	2300      	movs	r3, #0
 800afbc:	6363      	str	r3, [r4, #52]	; 0x34
 800afbe:	89a3      	ldrh	r3, [r4, #12]
 800afc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800afc4:	81a3      	strh	r3, [r4, #12]
 800afc6:	2300      	movs	r3, #0
 800afc8:	6063      	str	r3, [r4, #4]
 800afca:	6923      	ldr	r3, [r4, #16]
 800afcc:	6023      	str	r3, [r4, #0]
 800afce:	89a3      	ldrh	r3, [r4, #12]
 800afd0:	f043 0308 	orr.w	r3, r3, #8
 800afd4:	81a3      	strh	r3, [r4, #12]
 800afd6:	6923      	ldr	r3, [r4, #16]
 800afd8:	b94b      	cbnz	r3, 800afee <__swsetup_r+0x9a>
 800afda:	89a3      	ldrh	r3, [r4, #12]
 800afdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800afe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afe4:	d003      	beq.n	800afee <__swsetup_r+0x9a>
 800afe6:	4621      	mov	r1, r4
 800afe8:	4630      	mov	r0, r6
 800afea:	f000 fa05 	bl	800b3f8 <__smakebuf_r>
 800afee:	89a0      	ldrh	r0, [r4, #12]
 800aff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aff4:	f010 0301 	ands.w	r3, r0, #1
 800aff8:	d00a      	beq.n	800b010 <__swsetup_r+0xbc>
 800affa:	2300      	movs	r3, #0
 800affc:	60a3      	str	r3, [r4, #8]
 800affe:	6963      	ldr	r3, [r4, #20]
 800b000:	425b      	negs	r3, r3
 800b002:	61a3      	str	r3, [r4, #24]
 800b004:	6923      	ldr	r3, [r4, #16]
 800b006:	b943      	cbnz	r3, 800b01a <__swsetup_r+0xc6>
 800b008:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b00c:	d1ba      	bne.n	800af84 <__swsetup_r+0x30>
 800b00e:	bd70      	pop	{r4, r5, r6, pc}
 800b010:	0781      	lsls	r1, r0, #30
 800b012:	bf58      	it	pl
 800b014:	6963      	ldrpl	r3, [r4, #20]
 800b016:	60a3      	str	r3, [r4, #8]
 800b018:	e7f4      	b.n	800b004 <__swsetup_r+0xb0>
 800b01a:	2000      	movs	r0, #0
 800b01c:	e7f7      	b.n	800b00e <__swsetup_r+0xba>
 800b01e:	bf00      	nop
 800b020:	200023e4 	.word	0x200023e4
 800b024:	0800bcdc 	.word	0x0800bcdc
 800b028:	0800bcfc 	.word	0x0800bcfc
 800b02c:	0800bcbc 	.word	0x0800bcbc

0800b030 <abort>:
 800b030:	b508      	push	{r3, lr}
 800b032:	2006      	movs	r0, #6
 800b034:	f000 fa50 	bl	800b4d8 <raise>
 800b038:	2001      	movs	r0, #1
 800b03a:	f7f9 fbf3 	bl	8004824 <_exit>
	...

0800b040 <__sflush_r>:
 800b040:	898a      	ldrh	r2, [r1, #12]
 800b042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b046:	4605      	mov	r5, r0
 800b048:	0710      	lsls	r0, r2, #28
 800b04a:	460c      	mov	r4, r1
 800b04c:	d458      	bmi.n	800b100 <__sflush_r+0xc0>
 800b04e:	684b      	ldr	r3, [r1, #4]
 800b050:	2b00      	cmp	r3, #0
 800b052:	dc05      	bgt.n	800b060 <__sflush_r+0x20>
 800b054:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b056:	2b00      	cmp	r3, #0
 800b058:	dc02      	bgt.n	800b060 <__sflush_r+0x20>
 800b05a:	2000      	movs	r0, #0
 800b05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b060:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b062:	2e00      	cmp	r6, #0
 800b064:	d0f9      	beq.n	800b05a <__sflush_r+0x1a>
 800b066:	2300      	movs	r3, #0
 800b068:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b06c:	682f      	ldr	r7, [r5, #0]
 800b06e:	602b      	str	r3, [r5, #0]
 800b070:	d032      	beq.n	800b0d8 <__sflush_r+0x98>
 800b072:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b074:	89a3      	ldrh	r3, [r4, #12]
 800b076:	075a      	lsls	r2, r3, #29
 800b078:	d505      	bpl.n	800b086 <__sflush_r+0x46>
 800b07a:	6863      	ldr	r3, [r4, #4]
 800b07c:	1ac0      	subs	r0, r0, r3
 800b07e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b080:	b10b      	cbz	r3, 800b086 <__sflush_r+0x46>
 800b082:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b084:	1ac0      	subs	r0, r0, r3
 800b086:	2300      	movs	r3, #0
 800b088:	4602      	mov	r2, r0
 800b08a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b08c:	6a21      	ldr	r1, [r4, #32]
 800b08e:	4628      	mov	r0, r5
 800b090:	47b0      	blx	r6
 800b092:	1c43      	adds	r3, r0, #1
 800b094:	89a3      	ldrh	r3, [r4, #12]
 800b096:	d106      	bne.n	800b0a6 <__sflush_r+0x66>
 800b098:	6829      	ldr	r1, [r5, #0]
 800b09a:	291d      	cmp	r1, #29
 800b09c:	d82c      	bhi.n	800b0f8 <__sflush_r+0xb8>
 800b09e:	4a2a      	ldr	r2, [pc, #168]	; (800b148 <__sflush_r+0x108>)
 800b0a0:	40ca      	lsrs	r2, r1
 800b0a2:	07d6      	lsls	r6, r2, #31
 800b0a4:	d528      	bpl.n	800b0f8 <__sflush_r+0xb8>
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	6062      	str	r2, [r4, #4]
 800b0aa:	04d9      	lsls	r1, r3, #19
 800b0ac:	6922      	ldr	r2, [r4, #16]
 800b0ae:	6022      	str	r2, [r4, #0]
 800b0b0:	d504      	bpl.n	800b0bc <__sflush_r+0x7c>
 800b0b2:	1c42      	adds	r2, r0, #1
 800b0b4:	d101      	bne.n	800b0ba <__sflush_r+0x7a>
 800b0b6:	682b      	ldr	r3, [r5, #0]
 800b0b8:	b903      	cbnz	r3, 800b0bc <__sflush_r+0x7c>
 800b0ba:	6560      	str	r0, [r4, #84]	; 0x54
 800b0bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0be:	602f      	str	r7, [r5, #0]
 800b0c0:	2900      	cmp	r1, #0
 800b0c2:	d0ca      	beq.n	800b05a <__sflush_r+0x1a>
 800b0c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0c8:	4299      	cmp	r1, r3
 800b0ca:	d002      	beq.n	800b0d2 <__sflush_r+0x92>
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	f7fd fbdd 	bl	800888c <_free_r>
 800b0d2:	2000      	movs	r0, #0
 800b0d4:	6360      	str	r0, [r4, #52]	; 0x34
 800b0d6:	e7c1      	b.n	800b05c <__sflush_r+0x1c>
 800b0d8:	6a21      	ldr	r1, [r4, #32]
 800b0da:	2301      	movs	r3, #1
 800b0dc:	4628      	mov	r0, r5
 800b0de:	47b0      	blx	r6
 800b0e0:	1c41      	adds	r1, r0, #1
 800b0e2:	d1c7      	bne.n	800b074 <__sflush_r+0x34>
 800b0e4:	682b      	ldr	r3, [r5, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d0c4      	beq.n	800b074 <__sflush_r+0x34>
 800b0ea:	2b1d      	cmp	r3, #29
 800b0ec:	d001      	beq.n	800b0f2 <__sflush_r+0xb2>
 800b0ee:	2b16      	cmp	r3, #22
 800b0f0:	d101      	bne.n	800b0f6 <__sflush_r+0xb6>
 800b0f2:	602f      	str	r7, [r5, #0]
 800b0f4:	e7b1      	b.n	800b05a <__sflush_r+0x1a>
 800b0f6:	89a3      	ldrh	r3, [r4, #12]
 800b0f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0fc:	81a3      	strh	r3, [r4, #12]
 800b0fe:	e7ad      	b.n	800b05c <__sflush_r+0x1c>
 800b100:	690f      	ldr	r7, [r1, #16]
 800b102:	2f00      	cmp	r7, #0
 800b104:	d0a9      	beq.n	800b05a <__sflush_r+0x1a>
 800b106:	0793      	lsls	r3, r2, #30
 800b108:	680e      	ldr	r6, [r1, #0]
 800b10a:	bf08      	it	eq
 800b10c:	694b      	ldreq	r3, [r1, #20]
 800b10e:	600f      	str	r7, [r1, #0]
 800b110:	bf18      	it	ne
 800b112:	2300      	movne	r3, #0
 800b114:	eba6 0807 	sub.w	r8, r6, r7
 800b118:	608b      	str	r3, [r1, #8]
 800b11a:	f1b8 0f00 	cmp.w	r8, #0
 800b11e:	dd9c      	ble.n	800b05a <__sflush_r+0x1a>
 800b120:	6a21      	ldr	r1, [r4, #32]
 800b122:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b124:	4643      	mov	r3, r8
 800b126:	463a      	mov	r2, r7
 800b128:	4628      	mov	r0, r5
 800b12a:	47b0      	blx	r6
 800b12c:	2800      	cmp	r0, #0
 800b12e:	dc06      	bgt.n	800b13e <__sflush_r+0xfe>
 800b130:	89a3      	ldrh	r3, [r4, #12]
 800b132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b136:	81a3      	strh	r3, [r4, #12]
 800b138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b13c:	e78e      	b.n	800b05c <__sflush_r+0x1c>
 800b13e:	4407      	add	r7, r0
 800b140:	eba8 0800 	sub.w	r8, r8, r0
 800b144:	e7e9      	b.n	800b11a <__sflush_r+0xda>
 800b146:	bf00      	nop
 800b148:	20400001 	.word	0x20400001

0800b14c <_fflush_r>:
 800b14c:	b538      	push	{r3, r4, r5, lr}
 800b14e:	690b      	ldr	r3, [r1, #16]
 800b150:	4605      	mov	r5, r0
 800b152:	460c      	mov	r4, r1
 800b154:	b913      	cbnz	r3, 800b15c <_fflush_r+0x10>
 800b156:	2500      	movs	r5, #0
 800b158:	4628      	mov	r0, r5
 800b15a:	bd38      	pop	{r3, r4, r5, pc}
 800b15c:	b118      	cbz	r0, 800b166 <_fflush_r+0x1a>
 800b15e:	6983      	ldr	r3, [r0, #24]
 800b160:	b90b      	cbnz	r3, 800b166 <_fflush_r+0x1a>
 800b162:	f000 f887 	bl	800b274 <__sinit>
 800b166:	4b14      	ldr	r3, [pc, #80]	; (800b1b8 <_fflush_r+0x6c>)
 800b168:	429c      	cmp	r4, r3
 800b16a:	d11b      	bne.n	800b1a4 <_fflush_r+0x58>
 800b16c:	686c      	ldr	r4, [r5, #4]
 800b16e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d0ef      	beq.n	800b156 <_fflush_r+0xa>
 800b176:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b178:	07d0      	lsls	r0, r2, #31
 800b17a:	d404      	bmi.n	800b186 <_fflush_r+0x3a>
 800b17c:	0599      	lsls	r1, r3, #22
 800b17e:	d402      	bmi.n	800b186 <_fflush_r+0x3a>
 800b180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b182:	f7ff fcd0 	bl	800ab26 <__retarget_lock_acquire_recursive>
 800b186:	4628      	mov	r0, r5
 800b188:	4621      	mov	r1, r4
 800b18a:	f7ff ff59 	bl	800b040 <__sflush_r>
 800b18e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b190:	07da      	lsls	r2, r3, #31
 800b192:	4605      	mov	r5, r0
 800b194:	d4e0      	bmi.n	800b158 <_fflush_r+0xc>
 800b196:	89a3      	ldrh	r3, [r4, #12]
 800b198:	059b      	lsls	r3, r3, #22
 800b19a:	d4dd      	bmi.n	800b158 <_fflush_r+0xc>
 800b19c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b19e:	f7ff fcc3 	bl	800ab28 <__retarget_lock_release_recursive>
 800b1a2:	e7d9      	b.n	800b158 <_fflush_r+0xc>
 800b1a4:	4b05      	ldr	r3, [pc, #20]	; (800b1bc <_fflush_r+0x70>)
 800b1a6:	429c      	cmp	r4, r3
 800b1a8:	d101      	bne.n	800b1ae <_fflush_r+0x62>
 800b1aa:	68ac      	ldr	r4, [r5, #8]
 800b1ac:	e7df      	b.n	800b16e <_fflush_r+0x22>
 800b1ae:	4b04      	ldr	r3, [pc, #16]	; (800b1c0 <_fflush_r+0x74>)
 800b1b0:	429c      	cmp	r4, r3
 800b1b2:	bf08      	it	eq
 800b1b4:	68ec      	ldreq	r4, [r5, #12]
 800b1b6:	e7da      	b.n	800b16e <_fflush_r+0x22>
 800b1b8:	0800bcdc 	.word	0x0800bcdc
 800b1bc:	0800bcfc 	.word	0x0800bcfc
 800b1c0:	0800bcbc 	.word	0x0800bcbc

0800b1c4 <std>:
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	b510      	push	{r4, lr}
 800b1c8:	4604      	mov	r4, r0
 800b1ca:	e9c0 3300 	strd	r3, r3, [r0]
 800b1ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b1d2:	6083      	str	r3, [r0, #8]
 800b1d4:	8181      	strh	r1, [r0, #12]
 800b1d6:	6643      	str	r3, [r0, #100]	; 0x64
 800b1d8:	81c2      	strh	r2, [r0, #14]
 800b1da:	6183      	str	r3, [r0, #24]
 800b1dc:	4619      	mov	r1, r3
 800b1de:	2208      	movs	r2, #8
 800b1e0:	305c      	adds	r0, #92	; 0x5c
 800b1e2:	f7fd fb4b 	bl	800887c <memset>
 800b1e6:	4b05      	ldr	r3, [pc, #20]	; (800b1fc <std+0x38>)
 800b1e8:	6263      	str	r3, [r4, #36]	; 0x24
 800b1ea:	4b05      	ldr	r3, [pc, #20]	; (800b200 <std+0x3c>)
 800b1ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800b1ee:	4b05      	ldr	r3, [pc, #20]	; (800b204 <std+0x40>)
 800b1f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b1f2:	4b05      	ldr	r3, [pc, #20]	; (800b208 <std+0x44>)
 800b1f4:	6224      	str	r4, [r4, #32]
 800b1f6:	6323      	str	r3, [r4, #48]	; 0x30
 800b1f8:	bd10      	pop	{r4, pc}
 800b1fa:	bf00      	nop
 800b1fc:	0800b511 	.word	0x0800b511
 800b200:	0800b533 	.word	0x0800b533
 800b204:	0800b56b 	.word	0x0800b56b
 800b208:	0800b58f 	.word	0x0800b58f

0800b20c <_cleanup_r>:
 800b20c:	4901      	ldr	r1, [pc, #4]	; (800b214 <_cleanup_r+0x8>)
 800b20e:	f000 b8af 	b.w	800b370 <_fwalk_reent>
 800b212:	bf00      	nop
 800b214:	0800b14d 	.word	0x0800b14d

0800b218 <__sfmoreglue>:
 800b218:	b570      	push	{r4, r5, r6, lr}
 800b21a:	2268      	movs	r2, #104	; 0x68
 800b21c:	1e4d      	subs	r5, r1, #1
 800b21e:	4355      	muls	r5, r2
 800b220:	460e      	mov	r6, r1
 800b222:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b226:	f7fd fb9d 	bl	8008964 <_malloc_r>
 800b22a:	4604      	mov	r4, r0
 800b22c:	b140      	cbz	r0, 800b240 <__sfmoreglue+0x28>
 800b22e:	2100      	movs	r1, #0
 800b230:	e9c0 1600 	strd	r1, r6, [r0]
 800b234:	300c      	adds	r0, #12
 800b236:	60a0      	str	r0, [r4, #8]
 800b238:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b23c:	f7fd fb1e 	bl	800887c <memset>
 800b240:	4620      	mov	r0, r4
 800b242:	bd70      	pop	{r4, r5, r6, pc}

0800b244 <__sfp_lock_acquire>:
 800b244:	4801      	ldr	r0, [pc, #4]	; (800b24c <__sfp_lock_acquire+0x8>)
 800b246:	f7ff bc6e 	b.w	800ab26 <__retarget_lock_acquire_recursive>
 800b24a:	bf00      	nop
 800b24c:	20002a2d 	.word	0x20002a2d

0800b250 <__sfp_lock_release>:
 800b250:	4801      	ldr	r0, [pc, #4]	; (800b258 <__sfp_lock_release+0x8>)
 800b252:	f7ff bc69 	b.w	800ab28 <__retarget_lock_release_recursive>
 800b256:	bf00      	nop
 800b258:	20002a2d 	.word	0x20002a2d

0800b25c <__sinit_lock_acquire>:
 800b25c:	4801      	ldr	r0, [pc, #4]	; (800b264 <__sinit_lock_acquire+0x8>)
 800b25e:	f7ff bc62 	b.w	800ab26 <__retarget_lock_acquire_recursive>
 800b262:	bf00      	nop
 800b264:	20002a2e 	.word	0x20002a2e

0800b268 <__sinit_lock_release>:
 800b268:	4801      	ldr	r0, [pc, #4]	; (800b270 <__sinit_lock_release+0x8>)
 800b26a:	f7ff bc5d 	b.w	800ab28 <__retarget_lock_release_recursive>
 800b26e:	bf00      	nop
 800b270:	20002a2e 	.word	0x20002a2e

0800b274 <__sinit>:
 800b274:	b510      	push	{r4, lr}
 800b276:	4604      	mov	r4, r0
 800b278:	f7ff fff0 	bl	800b25c <__sinit_lock_acquire>
 800b27c:	69a3      	ldr	r3, [r4, #24]
 800b27e:	b11b      	cbz	r3, 800b288 <__sinit+0x14>
 800b280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b284:	f7ff bff0 	b.w	800b268 <__sinit_lock_release>
 800b288:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b28c:	6523      	str	r3, [r4, #80]	; 0x50
 800b28e:	4b13      	ldr	r3, [pc, #76]	; (800b2dc <__sinit+0x68>)
 800b290:	4a13      	ldr	r2, [pc, #76]	; (800b2e0 <__sinit+0x6c>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	62a2      	str	r2, [r4, #40]	; 0x28
 800b296:	42a3      	cmp	r3, r4
 800b298:	bf04      	itt	eq
 800b29a:	2301      	moveq	r3, #1
 800b29c:	61a3      	streq	r3, [r4, #24]
 800b29e:	4620      	mov	r0, r4
 800b2a0:	f000 f820 	bl	800b2e4 <__sfp>
 800b2a4:	6060      	str	r0, [r4, #4]
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	f000 f81c 	bl	800b2e4 <__sfp>
 800b2ac:	60a0      	str	r0, [r4, #8]
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	f000 f818 	bl	800b2e4 <__sfp>
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	60e0      	str	r0, [r4, #12]
 800b2b8:	2104      	movs	r1, #4
 800b2ba:	6860      	ldr	r0, [r4, #4]
 800b2bc:	f7ff ff82 	bl	800b1c4 <std>
 800b2c0:	68a0      	ldr	r0, [r4, #8]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	2109      	movs	r1, #9
 800b2c6:	f7ff ff7d 	bl	800b1c4 <std>
 800b2ca:	68e0      	ldr	r0, [r4, #12]
 800b2cc:	2202      	movs	r2, #2
 800b2ce:	2112      	movs	r1, #18
 800b2d0:	f7ff ff78 	bl	800b1c4 <std>
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	61a3      	str	r3, [r4, #24]
 800b2d8:	e7d2      	b.n	800b280 <__sinit+0xc>
 800b2da:	bf00      	nop
 800b2dc:	0800b944 	.word	0x0800b944
 800b2e0:	0800b20d 	.word	0x0800b20d

0800b2e4 <__sfp>:
 800b2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2e6:	4607      	mov	r7, r0
 800b2e8:	f7ff ffac 	bl	800b244 <__sfp_lock_acquire>
 800b2ec:	4b1e      	ldr	r3, [pc, #120]	; (800b368 <__sfp+0x84>)
 800b2ee:	681e      	ldr	r6, [r3, #0]
 800b2f0:	69b3      	ldr	r3, [r6, #24]
 800b2f2:	b913      	cbnz	r3, 800b2fa <__sfp+0x16>
 800b2f4:	4630      	mov	r0, r6
 800b2f6:	f7ff ffbd 	bl	800b274 <__sinit>
 800b2fa:	3648      	adds	r6, #72	; 0x48
 800b2fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b300:	3b01      	subs	r3, #1
 800b302:	d503      	bpl.n	800b30c <__sfp+0x28>
 800b304:	6833      	ldr	r3, [r6, #0]
 800b306:	b30b      	cbz	r3, 800b34c <__sfp+0x68>
 800b308:	6836      	ldr	r6, [r6, #0]
 800b30a:	e7f7      	b.n	800b2fc <__sfp+0x18>
 800b30c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b310:	b9d5      	cbnz	r5, 800b348 <__sfp+0x64>
 800b312:	4b16      	ldr	r3, [pc, #88]	; (800b36c <__sfp+0x88>)
 800b314:	60e3      	str	r3, [r4, #12]
 800b316:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b31a:	6665      	str	r5, [r4, #100]	; 0x64
 800b31c:	f7ff fc02 	bl	800ab24 <__retarget_lock_init_recursive>
 800b320:	f7ff ff96 	bl	800b250 <__sfp_lock_release>
 800b324:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b328:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b32c:	6025      	str	r5, [r4, #0]
 800b32e:	61a5      	str	r5, [r4, #24]
 800b330:	2208      	movs	r2, #8
 800b332:	4629      	mov	r1, r5
 800b334:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b338:	f7fd faa0 	bl	800887c <memset>
 800b33c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b340:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b344:	4620      	mov	r0, r4
 800b346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b348:	3468      	adds	r4, #104	; 0x68
 800b34a:	e7d9      	b.n	800b300 <__sfp+0x1c>
 800b34c:	2104      	movs	r1, #4
 800b34e:	4638      	mov	r0, r7
 800b350:	f7ff ff62 	bl	800b218 <__sfmoreglue>
 800b354:	4604      	mov	r4, r0
 800b356:	6030      	str	r0, [r6, #0]
 800b358:	2800      	cmp	r0, #0
 800b35a:	d1d5      	bne.n	800b308 <__sfp+0x24>
 800b35c:	f7ff ff78 	bl	800b250 <__sfp_lock_release>
 800b360:	230c      	movs	r3, #12
 800b362:	603b      	str	r3, [r7, #0]
 800b364:	e7ee      	b.n	800b344 <__sfp+0x60>
 800b366:	bf00      	nop
 800b368:	0800b944 	.word	0x0800b944
 800b36c:	ffff0001 	.word	0xffff0001

0800b370 <_fwalk_reent>:
 800b370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b374:	4606      	mov	r6, r0
 800b376:	4688      	mov	r8, r1
 800b378:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b37c:	2700      	movs	r7, #0
 800b37e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b382:	f1b9 0901 	subs.w	r9, r9, #1
 800b386:	d505      	bpl.n	800b394 <_fwalk_reent+0x24>
 800b388:	6824      	ldr	r4, [r4, #0]
 800b38a:	2c00      	cmp	r4, #0
 800b38c:	d1f7      	bne.n	800b37e <_fwalk_reent+0xe>
 800b38e:	4638      	mov	r0, r7
 800b390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b394:	89ab      	ldrh	r3, [r5, #12]
 800b396:	2b01      	cmp	r3, #1
 800b398:	d907      	bls.n	800b3aa <_fwalk_reent+0x3a>
 800b39a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	d003      	beq.n	800b3aa <_fwalk_reent+0x3a>
 800b3a2:	4629      	mov	r1, r5
 800b3a4:	4630      	mov	r0, r6
 800b3a6:	47c0      	blx	r8
 800b3a8:	4307      	orrs	r7, r0
 800b3aa:	3568      	adds	r5, #104	; 0x68
 800b3ac:	e7e9      	b.n	800b382 <_fwalk_reent+0x12>

0800b3ae <__swhatbuf_r>:
 800b3ae:	b570      	push	{r4, r5, r6, lr}
 800b3b0:	460e      	mov	r6, r1
 800b3b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3b6:	2900      	cmp	r1, #0
 800b3b8:	b096      	sub	sp, #88	; 0x58
 800b3ba:	4614      	mov	r4, r2
 800b3bc:	461d      	mov	r5, r3
 800b3be:	da08      	bge.n	800b3d2 <__swhatbuf_r+0x24>
 800b3c0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	602a      	str	r2, [r5, #0]
 800b3c8:	061a      	lsls	r2, r3, #24
 800b3ca:	d410      	bmi.n	800b3ee <__swhatbuf_r+0x40>
 800b3cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3d0:	e00e      	b.n	800b3f0 <__swhatbuf_r+0x42>
 800b3d2:	466a      	mov	r2, sp
 800b3d4:	f000 f902 	bl	800b5dc <_fstat_r>
 800b3d8:	2800      	cmp	r0, #0
 800b3da:	dbf1      	blt.n	800b3c0 <__swhatbuf_r+0x12>
 800b3dc:	9a01      	ldr	r2, [sp, #4]
 800b3de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b3e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b3e6:	425a      	negs	r2, r3
 800b3e8:	415a      	adcs	r2, r3
 800b3ea:	602a      	str	r2, [r5, #0]
 800b3ec:	e7ee      	b.n	800b3cc <__swhatbuf_r+0x1e>
 800b3ee:	2340      	movs	r3, #64	; 0x40
 800b3f0:	2000      	movs	r0, #0
 800b3f2:	6023      	str	r3, [r4, #0]
 800b3f4:	b016      	add	sp, #88	; 0x58
 800b3f6:	bd70      	pop	{r4, r5, r6, pc}

0800b3f8 <__smakebuf_r>:
 800b3f8:	898b      	ldrh	r3, [r1, #12]
 800b3fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3fc:	079d      	lsls	r5, r3, #30
 800b3fe:	4606      	mov	r6, r0
 800b400:	460c      	mov	r4, r1
 800b402:	d507      	bpl.n	800b414 <__smakebuf_r+0x1c>
 800b404:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b408:	6023      	str	r3, [r4, #0]
 800b40a:	6123      	str	r3, [r4, #16]
 800b40c:	2301      	movs	r3, #1
 800b40e:	6163      	str	r3, [r4, #20]
 800b410:	b002      	add	sp, #8
 800b412:	bd70      	pop	{r4, r5, r6, pc}
 800b414:	ab01      	add	r3, sp, #4
 800b416:	466a      	mov	r2, sp
 800b418:	f7ff ffc9 	bl	800b3ae <__swhatbuf_r>
 800b41c:	9900      	ldr	r1, [sp, #0]
 800b41e:	4605      	mov	r5, r0
 800b420:	4630      	mov	r0, r6
 800b422:	f7fd fa9f 	bl	8008964 <_malloc_r>
 800b426:	b948      	cbnz	r0, 800b43c <__smakebuf_r+0x44>
 800b428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b42c:	059a      	lsls	r2, r3, #22
 800b42e:	d4ef      	bmi.n	800b410 <__smakebuf_r+0x18>
 800b430:	f023 0303 	bic.w	r3, r3, #3
 800b434:	f043 0302 	orr.w	r3, r3, #2
 800b438:	81a3      	strh	r3, [r4, #12]
 800b43a:	e7e3      	b.n	800b404 <__smakebuf_r+0xc>
 800b43c:	4b0d      	ldr	r3, [pc, #52]	; (800b474 <__smakebuf_r+0x7c>)
 800b43e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b440:	89a3      	ldrh	r3, [r4, #12]
 800b442:	6020      	str	r0, [r4, #0]
 800b444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b448:	81a3      	strh	r3, [r4, #12]
 800b44a:	9b00      	ldr	r3, [sp, #0]
 800b44c:	6163      	str	r3, [r4, #20]
 800b44e:	9b01      	ldr	r3, [sp, #4]
 800b450:	6120      	str	r0, [r4, #16]
 800b452:	b15b      	cbz	r3, 800b46c <__smakebuf_r+0x74>
 800b454:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b458:	4630      	mov	r0, r6
 800b45a:	f000 f8d1 	bl	800b600 <_isatty_r>
 800b45e:	b128      	cbz	r0, 800b46c <__smakebuf_r+0x74>
 800b460:	89a3      	ldrh	r3, [r4, #12]
 800b462:	f023 0303 	bic.w	r3, r3, #3
 800b466:	f043 0301 	orr.w	r3, r3, #1
 800b46a:	81a3      	strh	r3, [r4, #12]
 800b46c:	89a0      	ldrh	r0, [r4, #12]
 800b46e:	4305      	orrs	r5, r0
 800b470:	81a5      	strh	r5, [r4, #12]
 800b472:	e7cd      	b.n	800b410 <__smakebuf_r+0x18>
 800b474:	0800b20d 	.word	0x0800b20d

0800b478 <_malloc_usable_size_r>:
 800b478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b47c:	1f18      	subs	r0, r3, #4
 800b47e:	2b00      	cmp	r3, #0
 800b480:	bfbc      	itt	lt
 800b482:	580b      	ldrlt	r3, [r1, r0]
 800b484:	18c0      	addlt	r0, r0, r3
 800b486:	4770      	bx	lr

0800b488 <_raise_r>:
 800b488:	291f      	cmp	r1, #31
 800b48a:	b538      	push	{r3, r4, r5, lr}
 800b48c:	4604      	mov	r4, r0
 800b48e:	460d      	mov	r5, r1
 800b490:	d904      	bls.n	800b49c <_raise_r+0x14>
 800b492:	2316      	movs	r3, #22
 800b494:	6003      	str	r3, [r0, #0]
 800b496:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b49a:	bd38      	pop	{r3, r4, r5, pc}
 800b49c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b49e:	b112      	cbz	r2, 800b4a6 <_raise_r+0x1e>
 800b4a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b4a4:	b94b      	cbnz	r3, 800b4ba <_raise_r+0x32>
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	f000 f830 	bl	800b50c <_getpid_r>
 800b4ac:	462a      	mov	r2, r5
 800b4ae:	4601      	mov	r1, r0
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4b6:	f000 b817 	b.w	800b4e8 <_kill_r>
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d00a      	beq.n	800b4d4 <_raise_r+0x4c>
 800b4be:	1c59      	adds	r1, r3, #1
 800b4c0:	d103      	bne.n	800b4ca <_raise_r+0x42>
 800b4c2:	2316      	movs	r3, #22
 800b4c4:	6003      	str	r3, [r0, #0]
 800b4c6:	2001      	movs	r0, #1
 800b4c8:	e7e7      	b.n	800b49a <_raise_r+0x12>
 800b4ca:	2400      	movs	r4, #0
 800b4cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b4d0:	4628      	mov	r0, r5
 800b4d2:	4798      	blx	r3
 800b4d4:	2000      	movs	r0, #0
 800b4d6:	e7e0      	b.n	800b49a <_raise_r+0x12>

0800b4d8 <raise>:
 800b4d8:	4b02      	ldr	r3, [pc, #8]	; (800b4e4 <raise+0xc>)
 800b4da:	4601      	mov	r1, r0
 800b4dc:	6818      	ldr	r0, [r3, #0]
 800b4de:	f7ff bfd3 	b.w	800b488 <_raise_r>
 800b4e2:	bf00      	nop
 800b4e4:	200023e4 	.word	0x200023e4

0800b4e8 <_kill_r>:
 800b4e8:	b538      	push	{r3, r4, r5, lr}
 800b4ea:	4d07      	ldr	r5, [pc, #28]	; (800b508 <_kill_r+0x20>)
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	4604      	mov	r4, r0
 800b4f0:	4608      	mov	r0, r1
 800b4f2:	4611      	mov	r1, r2
 800b4f4:	602b      	str	r3, [r5, #0]
 800b4f6:	f7f9 f985 	bl	8004804 <_kill>
 800b4fa:	1c43      	adds	r3, r0, #1
 800b4fc:	d102      	bne.n	800b504 <_kill_r+0x1c>
 800b4fe:	682b      	ldr	r3, [r5, #0]
 800b500:	b103      	cbz	r3, 800b504 <_kill_r+0x1c>
 800b502:	6023      	str	r3, [r4, #0]
 800b504:	bd38      	pop	{r3, r4, r5, pc}
 800b506:	bf00      	nop
 800b508:	20002a28 	.word	0x20002a28

0800b50c <_getpid_r>:
 800b50c:	f7f9 b972 	b.w	80047f4 <_getpid>

0800b510 <__sread>:
 800b510:	b510      	push	{r4, lr}
 800b512:	460c      	mov	r4, r1
 800b514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b518:	f000 f894 	bl	800b644 <_read_r>
 800b51c:	2800      	cmp	r0, #0
 800b51e:	bfab      	itete	ge
 800b520:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b522:	89a3      	ldrhlt	r3, [r4, #12]
 800b524:	181b      	addge	r3, r3, r0
 800b526:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b52a:	bfac      	ite	ge
 800b52c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b52e:	81a3      	strhlt	r3, [r4, #12]
 800b530:	bd10      	pop	{r4, pc}

0800b532 <__swrite>:
 800b532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b536:	461f      	mov	r7, r3
 800b538:	898b      	ldrh	r3, [r1, #12]
 800b53a:	05db      	lsls	r3, r3, #23
 800b53c:	4605      	mov	r5, r0
 800b53e:	460c      	mov	r4, r1
 800b540:	4616      	mov	r6, r2
 800b542:	d505      	bpl.n	800b550 <__swrite+0x1e>
 800b544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b548:	2302      	movs	r3, #2
 800b54a:	2200      	movs	r2, #0
 800b54c:	f000 f868 	bl	800b620 <_lseek_r>
 800b550:	89a3      	ldrh	r3, [r4, #12]
 800b552:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b556:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b55a:	81a3      	strh	r3, [r4, #12]
 800b55c:	4632      	mov	r2, r6
 800b55e:	463b      	mov	r3, r7
 800b560:	4628      	mov	r0, r5
 800b562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b566:	f000 b817 	b.w	800b598 <_write_r>

0800b56a <__sseek>:
 800b56a:	b510      	push	{r4, lr}
 800b56c:	460c      	mov	r4, r1
 800b56e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b572:	f000 f855 	bl	800b620 <_lseek_r>
 800b576:	1c43      	adds	r3, r0, #1
 800b578:	89a3      	ldrh	r3, [r4, #12]
 800b57a:	bf15      	itete	ne
 800b57c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b57e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b582:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b586:	81a3      	strheq	r3, [r4, #12]
 800b588:	bf18      	it	ne
 800b58a:	81a3      	strhne	r3, [r4, #12]
 800b58c:	bd10      	pop	{r4, pc}

0800b58e <__sclose>:
 800b58e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b592:	f000 b813 	b.w	800b5bc <_close_r>
	...

0800b598 <_write_r>:
 800b598:	b538      	push	{r3, r4, r5, lr}
 800b59a:	4d07      	ldr	r5, [pc, #28]	; (800b5b8 <_write_r+0x20>)
 800b59c:	4604      	mov	r4, r0
 800b59e:	4608      	mov	r0, r1
 800b5a0:	4611      	mov	r1, r2
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	602a      	str	r2, [r5, #0]
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	f7f9 f963 	bl	8004872 <_write>
 800b5ac:	1c43      	adds	r3, r0, #1
 800b5ae:	d102      	bne.n	800b5b6 <_write_r+0x1e>
 800b5b0:	682b      	ldr	r3, [r5, #0]
 800b5b2:	b103      	cbz	r3, 800b5b6 <_write_r+0x1e>
 800b5b4:	6023      	str	r3, [r4, #0]
 800b5b6:	bd38      	pop	{r3, r4, r5, pc}
 800b5b8:	20002a28 	.word	0x20002a28

0800b5bc <_close_r>:
 800b5bc:	b538      	push	{r3, r4, r5, lr}
 800b5be:	4d06      	ldr	r5, [pc, #24]	; (800b5d8 <_close_r+0x1c>)
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	4604      	mov	r4, r0
 800b5c4:	4608      	mov	r0, r1
 800b5c6:	602b      	str	r3, [r5, #0]
 800b5c8:	f7f9 f96f 	bl	80048aa <_close>
 800b5cc:	1c43      	adds	r3, r0, #1
 800b5ce:	d102      	bne.n	800b5d6 <_close_r+0x1a>
 800b5d0:	682b      	ldr	r3, [r5, #0]
 800b5d2:	b103      	cbz	r3, 800b5d6 <_close_r+0x1a>
 800b5d4:	6023      	str	r3, [r4, #0]
 800b5d6:	bd38      	pop	{r3, r4, r5, pc}
 800b5d8:	20002a28 	.word	0x20002a28

0800b5dc <_fstat_r>:
 800b5dc:	b538      	push	{r3, r4, r5, lr}
 800b5de:	4d07      	ldr	r5, [pc, #28]	; (800b5fc <_fstat_r+0x20>)
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	4604      	mov	r4, r0
 800b5e4:	4608      	mov	r0, r1
 800b5e6:	4611      	mov	r1, r2
 800b5e8:	602b      	str	r3, [r5, #0]
 800b5ea:	f7f9 f96a 	bl	80048c2 <_fstat>
 800b5ee:	1c43      	adds	r3, r0, #1
 800b5f0:	d102      	bne.n	800b5f8 <_fstat_r+0x1c>
 800b5f2:	682b      	ldr	r3, [r5, #0]
 800b5f4:	b103      	cbz	r3, 800b5f8 <_fstat_r+0x1c>
 800b5f6:	6023      	str	r3, [r4, #0]
 800b5f8:	bd38      	pop	{r3, r4, r5, pc}
 800b5fa:	bf00      	nop
 800b5fc:	20002a28 	.word	0x20002a28

0800b600 <_isatty_r>:
 800b600:	b538      	push	{r3, r4, r5, lr}
 800b602:	4d06      	ldr	r5, [pc, #24]	; (800b61c <_isatty_r+0x1c>)
 800b604:	2300      	movs	r3, #0
 800b606:	4604      	mov	r4, r0
 800b608:	4608      	mov	r0, r1
 800b60a:	602b      	str	r3, [r5, #0]
 800b60c:	f7f9 f969 	bl	80048e2 <_isatty>
 800b610:	1c43      	adds	r3, r0, #1
 800b612:	d102      	bne.n	800b61a <_isatty_r+0x1a>
 800b614:	682b      	ldr	r3, [r5, #0]
 800b616:	b103      	cbz	r3, 800b61a <_isatty_r+0x1a>
 800b618:	6023      	str	r3, [r4, #0]
 800b61a:	bd38      	pop	{r3, r4, r5, pc}
 800b61c:	20002a28 	.word	0x20002a28

0800b620 <_lseek_r>:
 800b620:	b538      	push	{r3, r4, r5, lr}
 800b622:	4d07      	ldr	r5, [pc, #28]	; (800b640 <_lseek_r+0x20>)
 800b624:	4604      	mov	r4, r0
 800b626:	4608      	mov	r0, r1
 800b628:	4611      	mov	r1, r2
 800b62a:	2200      	movs	r2, #0
 800b62c:	602a      	str	r2, [r5, #0]
 800b62e:	461a      	mov	r2, r3
 800b630:	f7f9 f962 	bl	80048f8 <_lseek>
 800b634:	1c43      	adds	r3, r0, #1
 800b636:	d102      	bne.n	800b63e <_lseek_r+0x1e>
 800b638:	682b      	ldr	r3, [r5, #0]
 800b63a:	b103      	cbz	r3, 800b63e <_lseek_r+0x1e>
 800b63c:	6023      	str	r3, [r4, #0]
 800b63e:	bd38      	pop	{r3, r4, r5, pc}
 800b640:	20002a28 	.word	0x20002a28

0800b644 <_read_r>:
 800b644:	b538      	push	{r3, r4, r5, lr}
 800b646:	4d07      	ldr	r5, [pc, #28]	; (800b664 <_read_r+0x20>)
 800b648:	4604      	mov	r4, r0
 800b64a:	4608      	mov	r0, r1
 800b64c:	4611      	mov	r1, r2
 800b64e:	2200      	movs	r2, #0
 800b650:	602a      	str	r2, [r5, #0]
 800b652:	461a      	mov	r2, r3
 800b654:	f7f9 f8f0 	bl	8004838 <_read>
 800b658:	1c43      	adds	r3, r0, #1
 800b65a:	d102      	bne.n	800b662 <_read_r+0x1e>
 800b65c:	682b      	ldr	r3, [r5, #0]
 800b65e:	b103      	cbz	r3, 800b662 <_read_r+0x1e>
 800b660:	6023      	str	r3, [r4, #0]
 800b662:	bd38      	pop	{r3, r4, r5, pc}
 800b664:	20002a28 	.word	0x20002a28

0800b668 <round>:
 800b668:	ec51 0b10 	vmov	r0, r1, d0
 800b66c:	b570      	push	{r4, r5, r6, lr}
 800b66e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800b672:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800b676:	2c13      	cmp	r4, #19
 800b678:	ee10 2a10 	vmov	r2, s0
 800b67c:	460b      	mov	r3, r1
 800b67e:	dc19      	bgt.n	800b6b4 <round+0x4c>
 800b680:	2c00      	cmp	r4, #0
 800b682:	da09      	bge.n	800b698 <round+0x30>
 800b684:	3401      	adds	r4, #1
 800b686:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800b68a:	d103      	bne.n	800b694 <round+0x2c>
 800b68c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b690:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b694:	2200      	movs	r2, #0
 800b696:	e028      	b.n	800b6ea <round+0x82>
 800b698:	4d15      	ldr	r5, [pc, #84]	; (800b6f0 <round+0x88>)
 800b69a:	4125      	asrs	r5, r4
 800b69c:	ea01 0605 	and.w	r6, r1, r5
 800b6a0:	4332      	orrs	r2, r6
 800b6a2:	d00e      	beq.n	800b6c2 <round+0x5a>
 800b6a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b6a8:	fa42 f404 	asr.w	r4, r2, r4
 800b6ac:	4423      	add	r3, r4
 800b6ae:	ea23 0305 	bic.w	r3, r3, r5
 800b6b2:	e7ef      	b.n	800b694 <round+0x2c>
 800b6b4:	2c33      	cmp	r4, #51	; 0x33
 800b6b6:	dd07      	ble.n	800b6c8 <round+0x60>
 800b6b8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800b6bc:	d101      	bne.n	800b6c2 <round+0x5a>
 800b6be:	f7f4 fe05 	bl	80002cc <__adddf3>
 800b6c2:	ec41 0b10 	vmov	d0, r0, r1
 800b6c6:	bd70      	pop	{r4, r5, r6, pc}
 800b6c8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800b6cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b6d0:	40f5      	lsrs	r5, r6
 800b6d2:	4228      	tst	r0, r5
 800b6d4:	d0f5      	beq.n	800b6c2 <round+0x5a>
 800b6d6:	2101      	movs	r1, #1
 800b6d8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800b6dc:	fa01 f404 	lsl.w	r4, r1, r4
 800b6e0:	1912      	adds	r2, r2, r4
 800b6e2:	bf28      	it	cs
 800b6e4:	185b      	addcs	r3, r3, r1
 800b6e6:	ea22 0205 	bic.w	r2, r2, r5
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	4610      	mov	r0, r2
 800b6ee:	e7e8      	b.n	800b6c2 <round+0x5a>
 800b6f0:	000fffff 	.word	0x000fffff

0800b6f4 <_init>:
 800b6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6f6:	bf00      	nop
 800b6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6fa:	bc08      	pop	{r3}
 800b6fc:	469e      	mov	lr, r3
 800b6fe:	4770      	bx	lr

0800b700 <_fini>:
 800b700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b702:	bf00      	nop
 800b704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b706:	bc08      	pop	{r3}
 800b708:	469e      	mov	lr, r3
 800b70a:	4770      	bx	lr
