
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  08009478  08009478  00019478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a74  08009a74  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08009a74  08009a74  00019a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a7c  08009a7c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a7c  08009a7c  00019a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a80  08009a80  00019a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08009a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000760  200001f0  08009c74  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000950  08009c74  00020950  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011de2  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000276b  00000000  00000000  00032002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00034770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  000356d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002337f  00000000  00000000  00036550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011913  00000000  00000000  000598cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf21b  00000000  00000000  0006b1e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013a3fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051b0  00000000  00000000  0013a450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009460 	.word	0x08009460

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	08009460 	.word	0x08009460

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <FEB_BMS_Shutdown_Startup>:
#include "FEB_BMS_Shutdown.h"
#include "stm32f4xx_hal.h"


void FEB_BMS_Shutdown_Startup(void) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2102      	movs	r1, #2
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <FEB_BMS_Shutdown_Startup+0x14>)
 8000f96:	f003 fbc9 	bl	800472c <HAL_GPIO_WritePin>
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40020800 	.word	0x40020800

08000fa4 <FEB_BMS_Shutdown_Initiate>:

void FEB_BMS_Shutdown_Initiate(void) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2102      	movs	r1, #2
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <FEB_BMS_Shutdown_Initiate+0x14>)
 8000fae:	f003 fbbd 	bl	800472c <HAL_GPIO_WritePin>
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40020800 	.word	0x40020800

08000fbc <FEB_LTC6811_Setup>:
// UART
static char UART_Str[1024];

// ********************************** Functions **********************************

void FEB_LTC6811_Setup(void) {
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af06      	add	r7, sp, #24
	  LTC6811_init_cfg(NUM_IC, accumulator.IC_config);
 8000fc2:	4917      	ldr	r1, [pc, #92]	; (8001020 <FEB_LTC6811_Setup+0x64>)
 8000fc4:	2002      	movs	r0, #2
 8000fc6:	f000 ff2d 	bl	8001e24 <LTC6811_init_cfg>

	  for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 8000fca:	2300      	movs	r3, #0
 8000fcc:	71fb      	strb	r3, [r7, #7]
 8000fce:	e018      	b.n	8001002 <FEB_LTC6811_Setup+0x46>
	    LTC6811_set_cfgr(current_ic, accumulator.IC_config, REFON, ADCOPT, GPIOBITS_A, DCCBITS_A, DCTOBITS, UV, OV);
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <FEB_LTC6811_Setup+0x68>)
 8000fd2:	7819      	ldrb	r1, [r3, #0]
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <FEB_LTC6811_Setup+0x6c>)
 8000fd6:	781c      	ldrb	r4, [r3, #0]
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <FEB_LTC6811_Setup+0x70>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	4a14      	ldr	r2, [pc, #80]	; (8001030 <FEB_LTC6811_Setup+0x74>)
 8000fde:	8812      	ldrh	r2, [r2, #0]
 8000fe0:	79f8      	ldrb	r0, [r7, #7]
 8000fe2:	9204      	str	r2, [sp, #16]
 8000fe4:	9303      	str	r3, [sp, #12]
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <FEB_LTC6811_Setup+0x78>)
 8000fe8:	9302      	str	r3, [sp, #8]
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <FEB_LTC6811_Setup+0x7c>)
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	4b13      	ldr	r3, [pc, #76]	; (800103c <FEB_LTC6811_Setup+0x80>)
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	460a      	mov	r2, r1
 8000ff6:	490a      	ldr	r1, [pc, #40]	; (8001020 <FEB_LTC6811_Setup+0x64>)
 8000ff8:	f000 ff23 	bl	8001e42 <LTC6811_set_cfgr>
	  for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	3301      	adds	r3, #1
 8001000:	71fb      	strb	r3, [r7, #7]
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d9e3      	bls.n	8000fd0 <FEB_LTC6811_Setup+0x14>
	  }

	  LTC6811_reset_crc_count(NUM_IC, accumulator.IC_config);
 8001008:	4905      	ldr	r1, [pc, #20]	; (8001020 <FEB_LTC6811_Setup+0x64>)
 800100a:	2002      	movs	r0, #2
 800100c:	f000 fefb 	bl	8001e06 <LTC6811_reset_crc_count>
	  LTC6811_init_reg_limits(NUM_IC, accumulator.IC_config);
 8001010:	4903      	ldr	r1, [pc, #12]	; (8001020 <FEB_LTC6811_Setup+0x64>)
 8001012:	2002      	movs	r0, #2
 8001014:	f000 fe42 	bl	8001c9c <LTC6811_init_reg_limits>
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	bd90      	pop	{r4, r7, pc}
 8001020:	2000021c 	.word	0x2000021c
 8001024:	20000000 	.word	0x20000000
 8001028:	2000020c 	.word	0x2000020c
 800102c:	2000000a 	.word	0x2000000a
 8001030:	2000000c 	.word	0x2000000c
 8001034:	20000010 	.word	0x20000010
 8001038:	20000210 	.word	0x20000210
 800103c:	20000004 	.word	0x20000004

08001040 <FEB_LTC6811_Poll_Voltage>:

// ******************** Read Voltage ********************

void FEB_LTC6811_Poll_Voltage(void) {
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	FEB_LTC6811_Start_Cell_ADC_Measurement();
 8001044:	f000 f806 	bl	8001054 <FEB_LTC6811_Start_Cell_ADC_Measurement>
	FEB_LTC6811_Read_Cell_Voltage_Registers();
 8001048:	f000 f812 	bl	8001070 <FEB_LTC6811_Read_Cell_Voltage_Registers>
	FEB_LTC6811_Store_Voltage();
 800104c:	f000 f81e 	bl	800108c <FEB_LTC6811_Store_Voltage>
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}

08001054 <FEB_LTC6811_Start_Cell_ADC_Measurement>:

void FEB_LTC6811_Start_Cell_ADC_Measurement(void) {
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 8001058:	2002      	movs	r0, #2
 800105a:	f000 ff30 	bl	8001ebe <wakeup_sleep>
	LTC6811_adcv(ADC_CONVERSION_MODE, ADC_DCP, CELL_CH_TO_CONVERT);
 800105e:	2200      	movs	r2, #0
 8001060:	2101      	movs	r1, #1
 8001062:	2002      	movs	r0, #2
 8001064:	f000 fe76 	bl	8001d54 <LTC6811_adcv>
	LTC6811_pollAdc();
 8001068:	f000 fec6 	bl	8001df8 <LTC6811_pollAdc>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <FEB_LTC6811_Read_Cell_Voltage_Registers>:

void FEB_LTC6811_Read_Cell_Voltage_Registers(void) {
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 8001074:	2002      	movs	r0, #2
 8001076:	f000 ff22 	bl	8001ebe <wakeup_sleep>
	LTC6811_rdcv(SEL_ALL_REG, NUM_IC, accumulator.IC_config);
 800107a:	4a03      	ldr	r2, [pc, #12]	; (8001088 <FEB_LTC6811_Read_Cell_Voltage_Registers+0x18>)
 800107c:	2102      	movs	r1, #2
 800107e:	2000      	movs	r0, #0
 8001080:	f000 fe8d 	bl	8001d9e <LTC6811_rdcv>
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	2000021c 	.word	0x2000021c

0800108c <FEB_LTC6811_Store_Voltage>:

void FEB_LTC6811_Store_Voltage(void) {
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
    for (uint16_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001092:	2300      	movs	r3, #0
 8001094:	80fb      	strh	r3, [r7, #6]
 8001096:	e1b8      	b.n	800140a <FEB_LTC6811_Store_Voltage+0x37e>
    	accumulator.banks[bank_idx].cells[16].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[0]);
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4ad3      	ldr	r2, [pc, #844]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 800109e:	21e8      	movs	r1, #232	; 0xe8
 80010a0:	fb01 f303 	mul.w	r3, r1, r3
 80010a4:	4413      	add	r3, r2
 80010a6:	331e      	adds	r3, #30
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	88fc      	ldrh	r4, [r7, #6]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f9b7 	bl	8001420 <FEB_LTC6811_Convert_Voltage>
 80010b2:	eef0 7a40 	vmov.f32	s15, s0
 80010b6:	4acd      	ldr	r2, [pc, #820]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 80010b8:	4623      	mov	r3, r4
 80010ba:	011b      	lsls	r3, r3, #4
 80010bc:	4423      	add	r3, r4
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	4413      	add	r3, r2
 80010c2:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80010c6:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[15].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[1]);
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	4ac7      	ldr	r2, [pc, #796]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 80010d0:	21e8      	movs	r1, #232	; 0xe8
 80010d2:	fb01 f303 	mul.w	r3, r1, r3
 80010d6:	4413      	add	r3, r2
 80010d8:	3320      	adds	r3, #32
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	88fc      	ldrh	r4, [r7, #6]
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 f99e 	bl	8001420 <FEB_LTC6811_Convert_Voltage>
 80010e4:	eef0 7a40 	vmov.f32	s15, s0
 80010e8:	4ac0      	ldr	r2, [pc, #768]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 80010ea:	4623      	mov	r3, r4
 80010ec:	011b      	lsls	r3, r3, #4
 80010ee:	4423      	add	r3, r4
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	4413      	add	r3, r2
 80010f4:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80010f8:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[14].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[2]);
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4aba      	ldr	r2, [pc, #744]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 8001102:	21e8      	movs	r1, #232	; 0xe8
 8001104:	fb01 f303 	mul.w	r3, r1, r3
 8001108:	4413      	add	r3, r2
 800110a:	3322      	adds	r3, #34	; 0x22
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	88fc      	ldrh	r4, [r7, #6]
 8001110:	4618      	mov	r0, r3
 8001112:	f000 f985 	bl	8001420 <FEB_LTC6811_Convert_Voltage>
 8001116:	eef0 7a40 	vmov.f32	s15, s0
 800111a:	4ab4      	ldr	r2, [pc, #720]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 800111c:	4623      	mov	r3, r4
 800111e:	011b      	lsls	r3, r3, #4
 8001120:	4423      	add	r3, r4
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	4413      	add	r3, r2
 8001126:	f503 7311 	add.w	r3, r3, #580	; 0x244
 800112a:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[13].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[3]);
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4aae      	ldr	r2, [pc, #696]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 8001134:	21e8      	movs	r1, #232	; 0xe8
 8001136:	fb01 f303 	mul.w	r3, r1, r3
 800113a:	4413      	add	r3, r2
 800113c:	3324      	adds	r3, #36	; 0x24
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	88fc      	ldrh	r4, [r7, #6]
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f96c 	bl	8001420 <FEB_LTC6811_Convert_Voltage>
 8001148:	eef0 7a40 	vmov.f32	s15, s0
 800114c:	4aa7      	ldr	r2, [pc, #668]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 800114e:	4623      	mov	r3, r4
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	4423      	add	r3, r4
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	4413      	add	r3, r2
 8001158:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800115c:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[12].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[6]);
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4aa1      	ldr	r2, [pc, #644]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 8001166:	21e8      	movs	r1, #232	; 0xe8
 8001168:	fb01 f303 	mul.w	r3, r1, r3
 800116c:	4413      	add	r3, r2
 800116e:	332a      	adds	r3, #42	; 0x2a
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	88fc      	ldrh	r4, [r7, #6]
 8001174:	4618      	mov	r0, r3
 8001176:	f000 f953 	bl	8001420 <FEB_LTC6811_Convert_Voltage>
 800117a:	eef0 7a40 	vmov.f32	s15, s0
 800117e:	4a9b      	ldr	r2, [pc, #620]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 8001180:	4623      	mov	r3, r4
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	4423      	add	r3, r4
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	4413      	add	r3, r2
 800118a:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800118e:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[11].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[7]);
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4a95      	ldr	r2, [pc, #596]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 8001198:	21e8      	movs	r1, #232	; 0xe8
 800119a:	fb01 f303 	mul.w	r3, r1, r3
 800119e:	4413      	add	r3, r2
 80011a0:	332c      	adds	r3, #44	; 0x2c
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	88fc      	ldrh	r4, [r7, #6]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f93a 	bl	8001420 <FEB_LTC6811_Convert_Voltage>
 80011ac:	eef0 7a40 	vmov.f32	s15, s0
 80011b0:	4a8e      	ldr	r2, [pc, #568]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 80011b2:	4623      	mov	r3, r4
 80011b4:	011b      	lsls	r3, r3, #4
 80011b6:	4423      	add	r3, r4
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	4413      	add	r3, r2
 80011bc:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 80011c0:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[10].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[8]);
 80011c4:	88fb      	ldrh	r3, [r7, #6]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4a88      	ldr	r2, [pc, #544]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 80011ca:	21e8      	movs	r1, #232	; 0xe8
 80011cc:	fb01 f303 	mul.w	r3, r1, r3
 80011d0:	4413      	add	r3, r2
 80011d2:	332e      	adds	r3, #46	; 0x2e
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	88fc      	ldrh	r4, [r7, #6]
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 f921 	bl	8001420 <FEB_LTC6811_Convert_Voltage>
 80011de:	eef0 7a40 	vmov.f32	s15, s0
 80011e2:	4a82      	ldr	r2, [pc, #520]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 80011e4:	4623      	mov	r3, r4
 80011e6:	011b      	lsls	r3, r3, #4
 80011e8:	4423      	add	r3, r4
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	4413      	add	r3, r2
 80011ee:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80011f2:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[9].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[9]);
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4a7c      	ldr	r2, [pc, #496]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 80011fc:	21e8      	movs	r1, #232	; 0xe8
 80011fe:	fb01 f303 	mul.w	r3, r1, r3
 8001202:	4413      	add	r3, r2
 8001204:	3330      	adds	r3, #48	; 0x30
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	88fc      	ldrh	r4, [r7, #6]
 800120a:	4618      	mov	r0, r3
 800120c:	f000 f908 	bl	8001420 <FEB_LTC6811_Convert_Voltage>
 8001210:	eef0 7a40 	vmov.f32	s15, s0
 8001214:	4a75      	ldr	r2, [pc, #468]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 8001216:	4623      	mov	r3, r4
 8001218:	011b      	lsls	r3, r3, #4
 800121a:	4423      	add	r3, r4
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	4413      	add	r3, r2
 8001220:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001224:	edc3 7a00 	vstr	s15, [r3]

    	accumulator.banks[bank_idx].cells[8].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[0]);
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	3301      	adds	r3, #1
 800122e:	4a6f      	ldr	r2, [pc, #444]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 8001230:	21e8      	movs	r1, #232	; 0xe8
 8001232:	fb01 f303 	mul.w	r3, r1, r3
 8001236:	4413      	add	r3, r2
 8001238:	331e      	adds	r3, #30
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	88fc      	ldrh	r4, [r7, #6]
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f8ee 	bl	8001420 <FEB_LTC6811_Convert_Voltage>
 8001244:	eef0 7a40 	vmov.f32	s15, s0
 8001248:	4a68      	ldr	r2, [pc, #416]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 800124a:	4623      	mov	r3, r4
 800124c:	011b      	lsls	r3, r3, #4
 800124e:	4423      	add	r3, r4
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	4413      	add	r3, r2
 8001254:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001258:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[7].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[1]);
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	3301      	adds	r3, #1
 8001262:	4a62      	ldr	r2, [pc, #392]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 8001264:	21e8      	movs	r1, #232	; 0xe8
 8001266:	fb01 f303 	mul.w	r3, r1, r3
 800126a:	4413      	add	r3, r2
 800126c:	3320      	adds	r3, #32
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	88fc      	ldrh	r4, [r7, #6]
 8001272:	4618      	mov	r0, r3
 8001274:	f000 f8d4 	bl	8001420 <FEB_LTC6811_Convert_Voltage>
 8001278:	eef0 7a40 	vmov.f32	s15, s0
 800127c:	4a5b      	ldr	r2, [pc, #364]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 800127e:	4623      	mov	r3, r4
 8001280:	011b      	lsls	r3, r3, #4
 8001282:	4423      	add	r3, r4
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	4413      	add	r3, r2
 8001288:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800128c:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[6].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[2]);
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	3301      	adds	r3, #1
 8001296:	4a55      	ldr	r2, [pc, #340]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 8001298:	21e8      	movs	r1, #232	; 0xe8
 800129a:	fb01 f303 	mul.w	r3, r1, r3
 800129e:	4413      	add	r3, r2
 80012a0:	3322      	adds	r3, #34	; 0x22
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	88fc      	ldrh	r4, [r7, #6]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f8ba 	bl	8001420 <FEB_LTC6811_Convert_Voltage>
 80012ac:	eef0 7a40 	vmov.f32	s15, s0
 80012b0:	4a4e      	ldr	r2, [pc, #312]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 80012b2:	4623      	mov	r3, r4
 80012b4:	011b      	lsls	r3, r3, #4
 80012b6:	4423      	add	r3, r4
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	4413      	add	r3, r2
 80012bc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80012c0:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[5].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[3]);
 80012c4:	88fb      	ldrh	r3, [r7, #6]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	3301      	adds	r3, #1
 80012ca:	4a48      	ldr	r2, [pc, #288]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 80012cc:	21e8      	movs	r1, #232	; 0xe8
 80012ce:	fb01 f303 	mul.w	r3, r1, r3
 80012d2:	4413      	add	r3, r2
 80012d4:	3324      	adds	r3, #36	; 0x24
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	88fc      	ldrh	r4, [r7, #6]
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 f8a0 	bl	8001420 <FEB_LTC6811_Convert_Voltage>
 80012e0:	eef0 7a40 	vmov.f32	s15, s0
 80012e4:	4a41      	ldr	r2, [pc, #260]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 80012e6:	4623      	mov	r3, r4
 80012e8:	011b      	lsls	r3, r3, #4
 80012ea:	4423      	add	r3, r4
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	4413      	add	r3, r2
 80012f0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80012f4:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[4].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[4]);
 80012f8:	88fb      	ldrh	r3, [r7, #6]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	3301      	adds	r3, #1
 80012fe:	4a3b      	ldr	r2, [pc, #236]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 8001300:	21e8      	movs	r1, #232	; 0xe8
 8001302:	fb01 f303 	mul.w	r3, r1, r3
 8001306:	4413      	add	r3, r2
 8001308:	3326      	adds	r3, #38	; 0x26
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	88fc      	ldrh	r4, [r7, #6]
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f886 	bl	8001420 <FEB_LTC6811_Convert_Voltage>
 8001314:	eef0 7a40 	vmov.f32	s15, s0
 8001318:	4a34      	ldr	r2, [pc, #208]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 800131a:	4623      	mov	r3, r4
 800131c:	011b      	lsls	r3, r3, #4
 800131e:	4423      	add	r3, r4
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	4413      	add	r3, r2
 8001324:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001328:	edc3 7a00 	vstr	s15, [r3]
      	accumulator.banks[bank_idx].cells[3].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[6]);
 800132c:	88fb      	ldrh	r3, [r7, #6]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	3301      	adds	r3, #1
 8001332:	4a2e      	ldr	r2, [pc, #184]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 8001334:	21e8      	movs	r1, #232	; 0xe8
 8001336:	fb01 f303 	mul.w	r3, r1, r3
 800133a:	4413      	add	r3, r2
 800133c:	332a      	adds	r3, #42	; 0x2a
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	88fc      	ldrh	r4, [r7, #6]
 8001342:	4618      	mov	r0, r3
 8001344:	f000 f86c 	bl	8001420 <FEB_LTC6811_Convert_Voltage>
 8001348:	eef0 7a40 	vmov.f32	s15, s0
 800134c:	4a27      	ldr	r2, [pc, #156]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 800134e:	4623      	mov	r3, r4
 8001350:	011b      	lsls	r3, r3, #4
 8001352:	4423      	add	r3, r4
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	4413      	add	r3, r2
 8001358:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800135c:	edc3 7a00 	vstr	s15, [r3]
      	accumulator.banks[bank_idx].cells[2].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[7]);
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	3301      	adds	r3, #1
 8001366:	4a21      	ldr	r2, [pc, #132]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 8001368:	21e8      	movs	r1, #232	; 0xe8
 800136a:	fb01 f303 	mul.w	r3, r1, r3
 800136e:	4413      	add	r3, r2
 8001370:	332c      	adds	r3, #44	; 0x2c
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	88fc      	ldrh	r4, [r7, #6]
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f852 	bl	8001420 <FEB_LTC6811_Convert_Voltage>
 800137c:	eef0 7a40 	vmov.f32	s15, s0
 8001380:	4a1a      	ldr	r2, [pc, #104]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 8001382:	4623      	mov	r3, r4
 8001384:	011b      	lsls	r3, r3, #4
 8001386:	4423      	add	r3, r4
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	4413      	add	r3, r2
 800138c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001390:	edc3 7a00 	vstr	s15, [r3]
      	accumulator.banks[bank_idx].cells[1].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[8]);
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	3301      	adds	r3, #1
 800139a:	4a14      	ldr	r2, [pc, #80]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 800139c:	21e8      	movs	r1, #232	; 0xe8
 800139e:	fb01 f303 	mul.w	r3, r1, r3
 80013a2:	4413      	add	r3, r2
 80013a4:	332e      	adds	r3, #46	; 0x2e
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	88fc      	ldrh	r4, [r7, #6]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f838 	bl	8001420 <FEB_LTC6811_Convert_Voltage>
 80013b0:	eef0 7a40 	vmov.f32	s15, s0
 80013b4:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 80013b6:	4623      	mov	r3, r4
 80013b8:	011b      	lsls	r3, r3, #4
 80013ba:	4423      	add	r3, r4
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	4413      	add	r3, r2
 80013c0:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80013c4:	edc3 7a00 	vstr	s15, [r3]
      	accumulator.banks[bank_idx].cells[0].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[9]);
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	3301      	adds	r3, #1
 80013ce:	4a07      	ldr	r2, [pc, #28]	; (80013ec <FEB_LTC6811_Store_Voltage+0x360>)
 80013d0:	21e8      	movs	r1, #232	; 0xe8
 80013d2:	fb01 f303 	mul.w	r3, r1, r3
 80013d6:	4413      	add	r3, r2
 80013d8:	3330      	adds	r3, #48	; 0x30
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	88fc      	ldrh	r4, [r7, #6]
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f81e 	bl	8001420 <FEB_LTC6811_Convert_Voltage>
 80013e4:	eef0 7a40 	vmov.f32	s15, s0
 80013e8:	e002      	b.n	80013f0 <FEB_LTC6811_Store_Voltage+0x364>
 80013ea:	bf00      	nop
 80013ec:	2000021c 	.word	0x2000021c
 80013f0:	4a0a      	ldr	r2, [pc, #40]	; (800141c <FEB_LTC6811_Store_Voltage+0x390>)
 80013f2:	4623      	mov	r3, r4
 80013f4:	011b      	lsls	r3, r3, #4
 80013f6:	4423      	add	r3, r4
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	4413      	add	r3, r2
 80013fc:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8001400:	edc3 7a00 	vstr	s15, [r3]
    for (uint16_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	3301      	adds	r3, #1
 8001408:	80fb      	strh	r3, [r7, #6]
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	2b00      	cmp	r3, #0
 800140e:	f43f ae43 	beq.w	8001098 <FEB_LTC6811_Store_Voltage+0xc>
    }
}
 8001412:	bf00      	nop
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	bd90      	pop	{r4, r7, pc}
 800141c:	2000021c 	.word	0x2000021c

08001420 <FEB_LTC6811_Convert_Voltage>:

/*
 * @param value := Voltage (100uV) from LTC6811
 */
float FEB_LTC6811_Convert_Voltage(uint16_t value) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	80fb      	strh	r3, [r7, #6]
	// Check for error: value = 2^16 - 1
	if (value == 65535) {
 800142a:	88fb      	ldrh	r3, [r7, #6]
 800142c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001430:	4293      	cmp	r3, r2
 8001432:	d101      	bne.n	8001438 <FEB_LTC6811_Convert_Voltage+0x18>
		return -42;
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <FEB_LTC6811_Convert_Voltage+0x50>)
 8001436:	e00f      	b.n	8001458 <FEB_LTC6811_Convert_Voltage+0x38>
	}
	return value * 0.0001;
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff f892 	bl	8000564 <__aeabi_i2d>
 8001440:	a309      	add	r3, pc, #36	; (adr r3, 8001468 <FEB_LTC6811_Convert_Voltage+0x48>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7ff f8f7 	bl	8000638 <__aeabi_dmul>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	f7ff fbc9 	bl	8000be8 <__aeabi_d2f>
 8001456:	4603      	mov	r3, r0
}
 8001458:	ee07 3a90 	vmov	s15, r3
 800145c:	eeb0 0a67 	vmov.f32	s0, s15
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	eb1c432d 	.word	0xeb1c432d
 800146c:	3f1a36e2 	.word	0x3f1a36e2
 8001470:	c2280000 	.word	0xc2280000
 8001474:	00000000 	.word	0x00000000

08001478 <FEB_LTC6811_Validate_Voltage>:

// ******************** Validate Voltage ********************
void FEB_LTC6811_Validate_Voltage(void) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 800147e:	2300      	movs	r3, #0
 8001480:	71fb      	strb	r3, [r7, #7]
 8001482:	e02e      	b.n	80014e2 <FEB_LTC6811_Validate_Voltage+0x6a>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001484:	2300      	movs	r3, #0
 8001486:	71bb      	strb	r3, [r7, #6]
 8001488:	e025      	b.n	80014d6 <FEB_LTC6811_Validate_Voltage+0x5e>
			float voltage = accumulator.banks[bank_idx].cells[cell_idx].voltage;
 800148a:	79fa      	ldrb	r2, [r7, #7]
 800148c:	79b9      	ldrb	r1, [r7, #6]
 800148e:	481c      	ldr	r0, [pc, #112]	; (8001500 <FEB_LTC6811_Validate_Voltage+0x88>)
 8001490:	4613      	mov	r3, r2
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	4413      	add	r3, r2
 8001496:	440b      	add	r3, r1
 8001498:	333a      	adds	r3, #58	; 0x3a
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4403      	add	r3, r0
 800149e:	3304      	adds	r3, #4
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	603b      	str	r3, [r7, #0]
			if (voltage < MIN_VOLTAGE || voltage > MAX_VOLTAGE) {
 80014a4:	edd7 7a00 	vldr	s15, [r7]
 80014a8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80014ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b4:	d40a      	bmi.n	80014cc <FEB_LTC6811_Validate_Voltage+0x54>
 80014b6:	6838      	ldr	r0, [r7, #0]
 80014b8:	f7ff f866 	bl	8000588 <__aeabi_f2d>
 80014bc:	a30e      	add	r3, pc, #56	; (adr r3, 80014f8 <FEB_LTC6811_Validate_Voltage+0x80>)
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	f7ff fb49 	bl	8000b58 <__aeabi_dcmpgt>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <FEB_LTC6811_Validate_Voltage+0x58>
				FEB_BMS_Shutdown_Initiate();
 80014cc:	f7ff fd6a 	bl	8000fa4 <FEB_BMS_Shutdown_Initiate>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 80014d0:	79bb      	ldrb	r3, [r7, #6]
 80014d2:	3301      	adds	r3, #1
 80014d4:	71bb      	strb	r3, [r7, #6]
 80014d6:	79bb      	ldrb	r3, [r7, #6]
 80014d8:	2b10      	cmp	r3, #16
 80014da:	d9d6      	bls.n	800148a <FEB_LTC6811_Validate_Voltage+0x12>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	3301      	adds	r3, #1
 80014e0:	71fb      	strb	r3, [r7, #7]
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0cd      	beq.n	8001484 <FEB_LTC6811_Validate_Voltage+0xc>
			}
		}
	}
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	f3af 8000 	nop.w
 80014f8:	cccccccd 	.word	0xcccccccd
 80014fc:	4010cccc 	.word	0x4010cccc
 8001500:	2000021c 	.word	0x2000021c

08001504 <FEB_LTC6811_UART_String_Voltage>:

// ******************** Transmit Voltage ********************

char* FEB_LTC6811_UART_String_Voltage(uint8_t bank_idx) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b0c4      	sub	sp, #272	; 0x110
 8001508:	af00      	add	r7, sp, #0
 800150a:	4602      	mov	r2, r0
 800150c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001510:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001514:	701a      	strb	r2, [r3, #0]
	char temp_str[256];

	// Add bank_idx, cell_idx to {@code str}
	sprintf(UART_Str, "%d", (bank_idx << UART_BITS_PER_MESSAGE) + UART_VOLTAGE_ID);
 8001516:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800151a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	461a      	mov	r2, r3
 8001524:	4929      	ldr	r1, [pc, #164]	; (80015cc <FEB_LTC6811_UART_String_Voltage+0xc8>)
 8001526:	482a      	ldr	r0, [pc, #168]	; (80015d0 <FEB_LTC6811_UART_String_Voltage+0xcc>)
 8001528:	f005 fe08 	bl	800713c <siprintf>


	// Add values to {@code str}
	for (uint16_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 800152c:	2300      	movs	r3, #0
 800152e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8001532:	e02e      	b.n	8001592 <FEB_LTC6811_UART_String_Voltage+0x8e>
		float voltage = accumulator.banks[bank_idx].cells[cell_idx].voltage;
 8001534:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001538:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800153c:	781a      	ldrb	r2, [r3, #0]
 800153e:	f8b7 110e 	ldrh.w	r1, [r7, #270]	; 0x10e
 8001542:	4824      	ldr	r0, [pc, #144]	; (80015d4 <FEB_LTC6811_UART_String_Voltage+0xd0>)
 8001544:	4613      	mov	r3, r2
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	4413      	add	r3, r2
 800154a:	440b      	add	r3, r1
 800154c:	333a      	adds	r3, #58	; 0x3a
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4403      	add	r3, r0
 8001552:	3304      	adds	r3, #4
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

		sprintf(temp_str, " %f", voltage);
 800155a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800155e:	f7ff f813 	bl	8000588 <__aeabi_f2d>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	f107 0008 	add.w	r0, r7, #8
 800156a:	491b      	ldr	r1, [pc, #108]	; (80015d8 <FEB_LTC6811_UART_String_Voltage+0xd4>)
 800156c:	f005 fde6 	bl	800713c <siprintf>
		strncat(UART_Str, temp_str, strlen(temp_str));
 8001570:	f107 0308 	add.w	r3, r7, #8
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe fe4b 	bl	8000210 <strlen>
 800157a:	4602      	mov	r2, r0
 800157c:	f107 0308 	add.w	r3, r7, #8
 8001580:	4619      	mov	r1, r3
 8001582:	4813      	ldr	r0, [pc, #76]	; (80015d0 <FEB_LTC6811_UART_String_Voltage+0xcc>)
 8001584:	f005 fdfa 	bl	800717c <strncat>
	for (uint16_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001588:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800158c:	3301      	adds	r3, #1
 800158e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8001592:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001596:	2b10      	cmp	r3, #16
 8001598:	d9cc      	bls.n	8001534 <FEB_LTC6811_UART_String_Voltage+0x30>
	}

	// Add '\n' to {@code str}
	sprintf(temp_str, "\n");
 800159a:	f107 0308 	add.w	r3, r7, #8
 800159e:	490f      	ldr	r1, [pc, #60]	; (80015dc <FEB_LTC6811_UART_String_Voltage+0xd8>)
 80015a0:	4618      	mov	r0, r3
 80015a2:	f005 fdcb 	bl	800713c <siprintf>
	strncat(UART_Str, temp_str, strlen(temp_str));
 80015a6:	f107 0308 	add.w	r3, r7, #8
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe fe30 	bl	8000210 <strlen>
 80015b0:	4602      	mov	r2, r0
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	4619      	mov	r1, r3
 80015b8:	4805      	ldr	r0, [pc, #20]	; (80015d0 <FEB_LTC6811_UART_String_Voltage+0xcc>)
 80015ba:	f005 fddf 	bl	800717c <strncat>

	return UART_Str;
 80015be:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <FEB_LTC6811_UART_String_Voltage+0xcc>)
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	08009478 	.word	0x08009478
 80015d0:	20000474 	.word	0x20000474
 80015d4:	2000021c 	.word	0x2000021c
 80015d8:	0800947c 	.word	0x0800947c
 80015dc:	08009480 	.word	0x08009480

080015e0 <FEB_LTC6811_Poll_Temperature>:

// ******************** Read Temperature ********************

void FEB_LTC6811_Poll_Temperature(void) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
	for (uint8_t channel = 0; channel <= 4; channel++) {
 80015e6:	2300      	movs	r3, #0
 80015e8:	71fb      	strb	r3, [r7, #7]
 80015ea:	e00e      	b.n	800160a <FEB_LTC6811_Poll_Temperature+0x2a>
		FEB_LTC6811_Update_GPIO(channel);
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 f814 	bl	800161c <FEB_LTC6811_Update_GPIO>
		FEB_LTC6811_Start_GPIO_ADC_Measurement();
 80015f4:	f000 f87c 	bl	80016f0 <FEB_LTC6811_Start_GPIO_ADC_Measurement>
		FEB_LTC6811_Read_Aux_Voltages();
 80015f8:	f000 f888 	bl	800170c <FEB_LTC6811_Read_Aux_Voltages>
		FEB_LTC6811_Store_Temperature(channel);
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f892 	bl	8001728 <FEB_LTC6811_Store_Temperature>
	for (uint8_t channel = 0; channel <= 4; channel++) {
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	3301      	adds	r3, #1
 8001608:	71fb      	strb	r3, [r7, #7]
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	2b04      	cmp	r3, #4
 800160e:	d9ed      	bls.n	80015ec <FEB_LTC6811_Poll_Temperature+0xc>
	}
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <FEB_LTC6811_Update_GPIO>:

void FEB_LTC6811_Update_GPIO(uint8_t channel) {
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b08b      	sub	sp, #44	; 0x2c
 8001620:	af06      	add	r7, sp, #24
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
	GPIOBITS_A[0] = 0b1;					// ADC
 8001626:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <FEB_LTC6811_Update_GPIO+0xb4>)
 8001628:	2201      	movs	r2, #1
 800162a:	701a      	strb	r2, [r3, #0]
	GPIOBITS_A[1] = 0b1;					// ADC
 800162c:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <FEB_LTC6811_Update_GPIO+0xb4>)
 800162e:	2201      	movs	r2, #1
 8001630:	705a      	strb	r2, [r3, #1]
	GPIOBITS_A[2] = (channel >> 0) & 0b1;	// MUX Select
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b00      	cmp	r3, #0
 800163a:	bf14      	ite	ne
 800163c:	2301      	movne	r3, #1
 800163e:	2300      	moveq	r3, #0
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4b23      	ldr	r3, [pc, #140]	; (80016d0 <FEB_LTC6811_Update_GPIO+0xb4>)
 8001644:	709a      	strb	r2, [r3, #2]
	GPIOBITS_A[3] = (channel >> 1) & 0b1;	// MUX Select
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	085b      	lsrs	r3, r3, #1
 800164a:	b2db      	uxtb	r3, r3
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf14      	ite	ne
 8001654:	2301      	movne	r3, #1
 8001656:	2300      	moveq	r3, #0
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <FEB_LTC6811_Update_GPIO+0xb4>)
 800165c:	70da      	strb	r2, [r3, #3]
	GPIOBITS_A[4] = (channel >> 2) & 0b1;	// MUX Select
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	089b      	lsrs	r3, r3, #2
 8001662:	b2db      	uxtb	r3, r3
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b00      	cmp	r3, #0
 800166a:	bf14      	ite	ne
 800166c:	2301      	movne	r3, #1
 800166e:	2300      	moveq	r3, #0
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <FEB_LTC6811_Update_GPIO+0xb4>)
 8001674:	711a      	strb	r2, [r3, #4]

    wakeup_sleep(NUM_IC);
 8001676:	2002      	movs	r0, #2
 8001678:	f000 fc21 	bl	8001ebe <wakeup_sleep>
    for (uint8_t current_ic = 0; current_ic < NUM_IC;current_ic++) {
 800167c:	2300      	movs	r3, #0
 800167e:	73fb      	strb	r3, [r7, #15]
 8001680:	e018      	b.n	80016b4 <FEB_LTC6811_Update_GPIO+0x98>
      LTC6811_set_cfgr(current_ic, accumulator.IC_config, REFON, ADCOPT, GPIOBITS_A, DCCBITS_A, DCTOBITS, UV, OV);
 8001682:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <FEB_LTC6811_Update_GPIO+0xb8>)
 8001684:	7819      	ldrb	r1, [r3, #0]
 8001686:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <FEB_LTC6811_Update_GPIO+0xbc>)
 8001688:	781c      	ldrb	r4, [r3, #0]
 800168a:	4b14      	ldr	r3, [pc, #80]	; (80016dc <FEB_LTC6811_Update_GPIO+0xc0>)
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <FEB_LTC6811_Update_GPIO+0xc4>)
 8001690:	8812      	ldrh	r2, [r2, #0]
 8001692:	7bf8      	ldrb	r0, [r7, #15]
 8001694:	9204      	str	r2, [sp, #16]
 8001696:	9303      	str	r3, [sp, #12]
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <FEB_LTC6811_Update_GPIO+0xc8>)
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <FEB_LTC6811_Update_GPIO+0xcc>)
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <FEB_LTC6811_Update_GPIO+0xb4>)
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	4623      	mov	r3, r4
 80016a6:	460a      	mov	r2, r1
 80016a8:	4910      	ldr	r1, [pc, #64]	; (80016ec <FEB_LTC6811_Update_GPIO+0xd0>)
 80016aa:	f000 fbca 	bl	8001e42 <LTC6811_set_cfgr>
    for (uint8_t current_ic = 0; current_ic < NUM_IC;current_ic++) {
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	3301      	adds	r3, #1
 80016b2:	73fb      	strb	r3, [r7, #15]
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d9e3      	bls.n	8001682 <FEB_LTC6811_Update_GPIO+0x66>
    }
    wakeup_idle(NUM_IC);
 80016ba:	2002      	movs	r0, #2
 80016bc:	f000 fbe2 	bl	8001e84 <wakeup_idle>
    LTC6811_wrcfg(NUM_IC, accumulator.IC_config);
 80016c0:	490a      	ldr	r1, [pc, #40]	; (80016ec <FEB_LTC6811_Update_GPIO+0xd0>)
 80016c2:	2002      	movs	r0, #2
 80016c4:	f000 fb37 	bl	8001d36 <LTC6811_wrcfg>
}
 80016c8:	bf00      	nop
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd90      	pop	{r4, r7, pc}
 80016d0:	20000004 	.word	0x20000004
 80016d4:	20000000 	.word	0x20000000
 80016d8:	2000020c 	.word	0x2000020c
 80016dc:	2000000a 	.word	0x2000000a
 80016e0:	2000000c 	.word	0x2000000c
 80016e4:	20000010 	.word	0x20000010
 80016e8:	20000210 	.word	0x20000210
 80016ec:	2000021c 	.word	0x2000021c

080016f0 <FEB_LTC6811_Start_GPIO_ADC_Measurement>:

void FEB_LTC6811_Start_GPIO_ADC_Measurement(void) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 80016f4:	2002      	movs	r0, #2
 80016f6:	f000 fbe2 	bl	8001ebe <wakeup_sleep>
	LTC6811_adax(ADC_CONVERSION_MODE, AUX_CH_TO_CONVERT);
 80016fa:	2100      	movs	r1, #0
 80016fc:	2002      	movs	r0, #2
 80016fe:	f000 fb3c 	bl	8001d7a <LTC6811_adax>
	LTC6811_pollAdc();
 8001702:	f000 fb79 	bl	8001df8 <LTC6811_pollAdc>
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <FEB_LTC6811_Read_Aux_Voltages>:

void FEB_LTC6811_Read_Aux_Voltages(void) {
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 8001710:	2002      	movs	r0, #2
 8001712:	f000 fbd4 	bl	8001ebe <wakeup_sleep>
	LTC6811_rdaux(SEL_ALL_REG, NUM_IC, accumulator.IC_config);
 8001716:	4a03      	ldr	r2, [pc, #12]	; (8001724 <FEB_LTC6811_Read_Aux_Voltages+0x18>)
 8001718:	2102      	movs	r1, #2
 800171a:	2000      	movs	r0, #0
 800171c:	f000 fb56 	bl	8001dcc <LTC6811_rdaux>
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	2000021c 	.word	0x2000021c

08001728 <FEB_LTC6811_Store_Temperature>:

void FEB_LTC6811_Store_Temperature(uint8_t channel) {
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
    for (uint16_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001732:	2300      	movs	r3, #0
 8001734:	81fb      	strh	r3, [r7, #14]
 8001736:	e1cd      	b.n	8001ad4 <FEB_LTC6811_Store_Temperature+0x3ac>
    	switch (channel) {
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	2b04      	cmp	r3, #4
 800173c:	f200 81c7 	bhi.w	8001ace <FEB_LTC6811_Store_Temperature+0x3a6>
 8001740:	a201      	add	r2, pc, #4	; (adr r2, 8001748 <FEB_LTC6811_Store_Temperature+0x20>)
 8001742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001746:	bf00      	nop
 8001748:	0800175d 	.word	0x0800175d
 800174c:	0800182b 	.word	0x0800182b
 8001750:	080018f9 	.word	0x080018f9
 8001754:	080019c7 	.word	0x080019c7
 8001758:	08001a99 	.word	0x08001a99
    		case 0:
    			accumulator.banks[bank_idx].cells[12].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 800175c:	89fb      	ldrh	r3, [r7, #14]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	4acc      	ldr	r2, [pc, #816]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 8001762:	21e8      	movs	r1, #232	; 0xe8
 8001764:	fb01 f303 	mul.w	r3, r1, r3
 8001768:	4413      	add	r3, r2
 800176a:	3348      	adds	r3, #72	; 0x48
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	89fc      	ldrh	r4, [r7, #14]
 8001770:	4618      	mov	r0, r3
 8001772:	f000 f9bd 	bl	8001af0 <FEB_LTC6811_Convert_Temperature>
 8001776:	eef0 7a40 	vmov.f32	s15, s0
 800177a:	4ac6      	ldr	r2, [pc, #792]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 800177c:	4623      	mov	r3, r4
 800177e:	011b      	lsls	r3, r3, #4
 8001780:	4423      	add	r3, r4
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	4413      	add	r3, r2
 8001786:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800178a:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[16].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 800178e:	89fb      	ldrh	r3, [r7, #14]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	4ac0      	ldr	r2, [pc, #768]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 8001794:	21e8      	movs	r1, #232	; 0xe8
 8001796:	fb01 f303 	mul.w	r3, r1, r3
 800179a:	4413      	add	r3, r2
 800179c:	334a      	adds	r3, #74	; 0x4a
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	89fc      	ldrh	r4, [r7, #14]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 f9a4 	bl	8001af0 <FEB_LTC6811_Convert_Temperature>
 80017a8:	eef0 7a40 	vmov.f32	s15, s0
 80017ac:	4ab9      	ldr	r2, [pc, #740]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 80017ae:	4623      	mov	r3, r4
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	4423      	add	r3, r4
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	4413      	add	r3, r2
 80017b8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80017bc:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[4].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 80017c0:	89fb      	ldrh	r3, [r7, #14]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	3301      	adds	r3, #1
 80017c6:	4ab3      	ldr	r2, [pc, #716]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 80017c8:	21e8      	movs	r1, #232	; 0xe8
 80017ca:	fb01 f303 	mul.w	r3, r1, r3
 80017ce:	4413      	add	r3, r2
 80017d0:	3348      	adds	r3, #72	; 0x48
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	89fc      	ldrh	r4, [r7, #14]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 f98a 	bl	8001af0 <FEB_LTC6811_Convert_Temperature>
 80017dc:	eef0 7a40 	vmov.f32	s15, s0
 80017e0:	4aac      	ldr	r2, [pc, #688]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 80017e2:	4623      	mov	r3, r4
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	4423      	add	r3, r4
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4413      	add	r3, r2
 80017ec:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 80017f0:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[8].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 80017f4:	89fb      	ldrh	r3, [r7, #14]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	3301      	adds	r3, #1
 80017fa:	4aa6      	ldr	r2, [pc, #664]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 80017fc:	21e8      	movs	r1, #232	; 0xe8
 80017fe:	fb01 f303 	mul.w	r3, r1, r3
 8001802:	4413      	add	r3, r2
 8001804:	334a      	adds	r3, #74	; 0x4a
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	89fc      	ldrh	r4, [r7, #14]
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f970 	bl	8001af0 <FEB_LTC6811_Convert_Temperature>
 8001810:	eef0 7a40 	vmov.f32	s15, s0
 8001814:	4a9f      	ldr	r2, [pc, #636]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 8001816:	4623      	mov	r3, r4
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	4423      	add	r3, r4
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	4413      	add	r3, r2
 8001820:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001824:	edc3 7a00 	vstr	s15, [r3]
    			break;
 8001828:	e151      	b.n	8001ace <FEB_LTC6811_Store_Temperature+0x3a6>
    		case 1:
    			accumulator.banks[bank_idx].cells[11].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 800182a:	89fb      	ldrh	r3, [r7, #14]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	4a99      	ldr	r2, [pc, #612]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 8001830:	21e8      	movs	r1, #232	; 0xe8
 8001832:	fb01 f303 	mul.w	r3, r1, r3
 8001836:	4413      	add	r3, r2
 8001838:	3348      	adds	r3, #72	; 0x48
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	89fc      	ldrh	r4, [r7, #14]
 800183e:	4618      	mov	r0, r3
 8001840:	f000 f956 	bl	8001af0 <FEB_LTC6811_Convert_Temperature>
 8001844:	eef0 7a40 	vmov.f32	s15, s0
 8001848:	4a92      	ldr	r2, [pc, #584]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 800184a:	4623      	mov	r3, r4
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	4423      	add	r3, r4
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	4413      	add	r3, r2
 8001854:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001858:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[15].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 800185c:	89fb      	ldrh	r3, [r7, #14]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4a8c      	ldr	r2, [pc, #560]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 8001862:	21e8      	movs	r1, #232	; 0xe8
 8001864:	fb01 f303 	mul.w	r3, r1, r3
 8001868:	4413      	add	r3, r2
 800186a:	334a      	adds	r3, #74	; 0x4a
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	89fc      	ldrh	r4, [r7, #14]
 8001870:	4618      	mov	r0, r3
 8001872:	f000 f93d 	bl	8001af0 <FEB_LTC6811_Convert_Temperature>
 8001876:	eef0 7a40 	vmov.f32	s15, s0
 800187a:	4a86      	ldr	r2, [pc, #536]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 800187c:	4623      	mov	r3, r4
 800187e:	011b      	lsls	r3, r3, #4
 8001880:	4423      	add	r3, r4
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4413      	add	r3, r2
 8001886:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800188a:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[3].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 800188e:	89fb      	ldrh	r3, [r7, #14]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	3301      	adds	r3, #1
 8001894:	4a7f      	ldr	r2, [pc, #508]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 8001896:	21e8      	movs	r1, #232	; 0xe8
 8001898:	fb01 f303 	mul.w	r3, r1, r3
 800189c:	4413      	add	r3, r2
 800189e:	3348      	adds	r3, #72	; 0x48
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	89fc      	ldrh	r4, [r7, #14]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 f923 	bl	8001af0 <FEB_LTC6811_Convert_Temperature>
 80018aa:	eef0 7a40 	vmov.f32	s15, s0
 80018ae:	4a79      	ldr	r2, [pc, #484]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 80018b0:	4623      	mov	r3, r4
 80018b2:	011b      	lsls	r3, r3, #4
 80018b4:	4423      	add	r3, r4
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4413      	add	r3, r2
 80018ba:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80018be:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[7].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 80018c2:	89fb      	ldrh	r3, [r7, #14]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	3301      	adds	r3, #1
 80018c8:	4a72      	ldr	r2, [pc, #456]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 80018ca:	21e8      	movs	r1, #232	; 0xe8
 80018cc:	fb01 f303 	mul.w	r3, r1, r3
 80018d0:	4413      	add	r3, r2
 80018d2:	334a      	adds	r3, #74	; 0x4a
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	89fc      	ldrh	r4, [r7, #14]
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 f909 	bl	8001af0 <FEB_LTC6811_Convert_Temperature>
 80018de:	eef0 7a40 	vmov.f32	s15, s0
 80018e2:	4a6c      	ldr	r2, [pc, #432]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 80018e4:	4623      	mov	r3, r4
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	4423      	add	r3, r4
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	4413      	add	r3, r2
 80018ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80018f2:	edc3 7a00 	vstr	s15, [r3]
    			break;
 80018f6:	e0ea      	b.n	8001ace <FEB_LTC6811_Store_Temperature+0x3a6>
    		case 2:
    			accumulator.banks[bank_idx].cells[10].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 80018f8:	89fb      	ldrh	r3, [r7, #14]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4a65      	ldr	r2, [pc, #404]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 80018fe:	21e8      	movs	r1, #232	; 0xe8
 8001900:	fb01 f303 	mul.w	r3, r1, r3
 8001904:	4413      	add	r3, r2
 8001906:	3348      	adds	r3, #72	; 0x48
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	89fc      	ldrh	r4, [r7, #14]
 800190c:	4618      	mov	r0, r3
 800190e:	f000 f8ef 	bl	8001af0 <FEB_LTC6811_Convert_Temperature>
 8001912:	eef0 7a40 	vmov.f32	s15, s0
 8001916:	4a5f      	ldr	r2, [pc, #380]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 8001918:	4623      	mov	r3, r4
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	4423      	add	r3, r4
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	4413      	add	r3, r2
 8001922:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8001926:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[14].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 800192a:	89fb      	ldrh	r3, [r7, #14]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	4a59      	ldr	r2, [pc, #356]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 8001930:	21e8      	movs	r1, #232	; 0xe8
 8001932:	fb01 f303 	mul.w	r3, r1, r3
 8001936:	4413      	add	r3, r2
 8001938:	334a      	adds	r3, #74	; 0x4a
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	89fc      	ldrh	r4, [r7, #14]
 800193e:	4618      	mov	r0, r3
 8001940:	f000 f8d6 	bl	8001af0 <FEB_LTC6811_Convert_Temperature>
 8001944:	eef0 7a40 	vmov.f32	s15, s0
 8001948:	4a52      	ldr	r2, [pc, #328]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 800194a:	4623      	mov	r3, r4
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	4423      	add	r3, r4
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	4413      	add	r3, r2
 8001954:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8001958:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[2].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 800195c:	89fb      	ldrh	r3, [r7, #14]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	3301      	adds	r3, #1
 8001962:	4a4c      	ldr	r2, [pc, #304]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 8001964:	21e8      	movs	r1, #232	; 0xe8
 8001966:	fb01 f303 	mul.w	r3, r1, r3
 800196a:	4413      	add	r3, r2
 800196c:	3348      	adds	r3, #72	; 0x48
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	89fc      	ldrh	r4, [r7, #14]
 8001972:	4618      	mov	r0, r3
 8001974:	f000 f8bc 	bl	8001af0 <FEB_LTC6811_Convert_Temperature>
 8001978:	eef0 7a40 	vmov.f32	s15, s0
 800197c:	4a45      	ldr	r2, [pc, #276]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 800197e:	4623      	mov	r3, r4
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	4423      	add	r3, r4
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	4413      	add	r3, r2
 8001988:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800198c:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[6].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 8001990:	89fb      	ldrh	r3, [r7, #14]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	3301      	adds	r3, #1
 8001996:	4a3f      	ldr	r2, [pc, #252]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 8001998:	21e8      	movs	r1, #232	; 0xe8
 800199a:	fb01 f303 	mul.w	r3, r1, r3
 800199e:	4413      	add	r3, r2
 80019a0:	334a      	adds	r3, #74	; 0x4a
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	89fc      	ldrh	r4, [r7, #14]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f8a2 	bl	8001af0 <FEB_LTC6811_Convert_Temperature>
 80019ac:	eef0 7a40 	vmov.f32	s15, s0
 80019b0:	4a38      	ldr	r2, [pc, #224]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 80019b2:	4623      	mov	r3, r4
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	4423      	add	r3, r4
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	4413      	add	r3, r2
 80019bc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80019c0:	edc3 7a00 	vstr	s15, [r3]
    			break;
 80019c4:	e083      	b.n	8001ace <FEB_LTC6811_Store_Temperature+0x3a6>
    		case 3:
    			accumulator.banks[bank_idx].cells[9].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 80019c6:	89fb      	ldrh	r3, [r7, #14]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4a32      	ldr	r2, [pc, #200]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 80019cc:	21e8      	movs	r1, #232	; 0xe8
 80019ce:	fb01 f303 	mul.w	r3, r1, r3
 80019d2:	4413      	add	r3, r2
 80019d4:	3348      	adds	r3, #72	; 0x48
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	89fc      	ldrh	r4, [r7, #14]
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 f888 	bl	8001af0 <FEB_LTC6811_Convert_Temperature>
 80019e0:	eef0 7a40 	vmov.f32	s15, s0
 80019e4:	4a2b      	ldr	r2, [pc, #172]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 80019e6:	4623      	mov	r3, r4
 80019e8:	011b      	lsls	r3, r3, #4
 80019ea:	4423      	add	r3, r4
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	4413      	add	r3, r2
 80019f0:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80019f4:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[13].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 80019f8:	89fb      	ldrh	r3, [r7, #14]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4a25      	ldr	r2, [pc, #148]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 80019fe:	21e8      	movs	r1, #232	; 0xe8
 8001a00:	fb01 f303 	mul.w	r3, r1, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	334a      	adds	r3, #74	; 0x4a
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	89fc      	ldrh	r4, [r7, #14]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f000 f86f 	bl	8001af0 <FEB_LTC6811_Convert_Temperature>
 8001a12:	eef0 7a40 	vmov.f32	s15, s0
 8001a16:	4a1f      	ldr	r2, [pc, #124]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 8001a18:	4623      	mov	r3, r4
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	4423      	add	r3, r4
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	4413      	add	r3, r2
 8001a22:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8001a26:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[1].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 8001a2a:	89fb      	ldrh	r3, [r7, #14]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	3301      	adds	r3, #1
 8001a30:	4a18      	ldr	r2, [pc, #96]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 8001a32:	21e8      	movs	r1, #232	; 0xe8
 8001a34:	fb01 f303 	mul.w	r3, r1, r3
 8001a38:	4413      	add	r3, r2
 8001a3a:	3348      	adds	r3, #72	; 0x48
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	89fc      	ldrh	r4, [r7, #14]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 f855 	bl	8001af0 <FEB_LTC6811_Convert_Temperature>
 8001a46:	eef0 7a40 	vmov.f32	s15, s0
 8001a4a:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 8001a4c:	4623      	mov	r3, r4
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	4423      	add	r3, r4
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	4413      	add	r3, r2
 8001a56:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8001a5a:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[5].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 8001a5e:	89fb      	ldrh	r3, [r7, #14]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	3301      	adds	r3, #1
 8001a64:	4a0b      	ldr	r2, [pc, #44]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 8001a66:	21e8      	movs	r1, #232	; 0xe8
 8001a68:	fb01 f303 	mul.w	r3, r1, r3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	334a      	adds	r3, #74	; 0x4a
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	89fc      	ldrh	r4, [r7, #14]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f000 f83b 	bl	8001af0 <FEB_LTC6811_Convert_Temperature>
 8001a7a:	eef0 7a40 	vmov.f32	s15, s0
 8001a7e:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <FEB_LTC6811_Store_Temperature+0x36c>)
 8001a80:	4623      	mov	r3, r4
 8001a82:	011b      	lsls	r3, r3, #4
 8001a84:	4423      	add	r3, r4
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4413      	add	r3, r2
 8001a8a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a8e:	edc3 7a00 	vstr	s15, [r3]
    			break;
 8001a92:	e01c      	b.n	8001ace <FEB_LTC6811_Store_Temperature+0x3a6>
 8001a94:	2000021c 	.word	0x2000021c
    		case 4:
    			accumulator.banks[bank_idx].cells[0].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 8001a98:	89fb      	ldrh	r3, [r7, #14]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <FEB_LTC6811_Store_Temperature+0x3c0>)
 8001aa0:	21e8      	movs	r1, #232	; 0xe8
 8001aa2:	fb01 f303 	mul.w	r3, r1, r3
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3348      	adds	r3, #72	; 0x48
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	89fc      	ldrh	r4, [r7, #14]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 f81e 	bl	8001af0 <FEB_LTC6811_Convert_Temperature>
 8001ab4:	eef0 7a40 	vmov.f32	s15, s0
 8001ab8:	4a0b      	ldr	r2, [pc, #44]	; (8001ae8 <FEB_LTC6811_Store_Temperature+0x3c0>)
 8001aba:	4623      	mov	r3, r4
 8001abc:	011b      	lsls	r3, r3, #4
 8001abe:	4423      	add	r3, r4
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8001ac8:	edc3 7a00 	vstr	s15, [r3]
    			break;
 8001acc:	bf00      	nop
    for (uint16_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001ace:	89fb      	ldrh	r3, [r7, #14]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	81fb      	strh	r3, [r7, #14]
 8001ad4:	89fb      	ldrh	r3, [r7, #14]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f43f ae2e 	beq.w	8001738 <FEB_LTC6811_Store_Temperature+0x10>
    	}
    }
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd90      	pop	{r4, r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2000021c 	.word	0x2000021c
 8001aec:	00000000 	.word	0x00000000

08001af0 <FEB_LTC6811_Convert_Temperature>:

/*
 * @param value := Voltage (100uV) from LTC6811
 */
float FEB_LTC6811_Convert_Temperature(uint16_t value) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	80fb      	strh	r3, [r7, #6]
	// Check for error: value = 2^16 - 1
	if (value == 65535) {
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d101      	bne.n	8001b08 <FEB_LTC6811_Convert_Temperature+0x18>
		return -42;
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <FEB_LTC6811_Convert_Temperature+0x50>)
 8001b06:	e00f      	b.n	8001b28 <FEB_LTC6811_Convert_Temperature+0x38>
	}
	return value * 0.0001;
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd2a 	bl	8000564 <__aeabi_i2d>
 8001b10:	a309      	add	r3, pc, #36	; (adr r3, 8001b38 <FEB_LTC6811_Convert_Temperature+0x48>)
 8001b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b16:	f7fe fd8f 	bl	8000638 <__aeabi_dmul>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	f7ff f861 	bl	8000be8 <__aeabi_d2f>
 8001b26:	4603      	mov	r3, r0
}
 8001b28:	ee07 3a90 	vmov	s15, r3
 8001b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	eb1c432d 	.word	0xeb1c432d
 8001b3c:	3f1a36e2 	.word	0x3f1a36e2
 8001b40:	c2280000 	.word	0xc2280000

08001b44 <FEB_LTC6811_Validate_Temperature>:

// ******************** Validate Temperature ********************

void FEB_LTC6811_Validate_Temperature(void) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	71fb      	strb	r3, [r7, #7]
 8001b4e:	e02b      	b.n	8001ba8 <FEB_LTC6811_Validate_Temperature+0x64>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001b50:	2300      	movs	r3, #0
 8001b52:	71bb      	strb	r3, [r7, #6]
 8001b54:	e022      	b.n	8001b9c <FEB_LTC6811_Validate_Temperature+0x58>
			float temperature = accumulator.banks[bank_idx].cells[cell_idx].temperature;
 8001b56:	79fa      	ldrb	r2, [r7, #7]
 8001b58:	79b9      	ldrb	r1, [r7, #6]
 8001b5a:	4817      	ldr	r0, [pc, #92]	; (8001bb8 <FEB_LTC6811_Validate_Temperature+0x74>)
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	011b      	lsls	r3, r3, #4
 8001b60:	4413      	add	r3, r2
 8001b62:	440b      	add	r3, r1
 8001b64:	333a      	adds	r3, #58	; 0x3a
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	4403      	add	r3, r0
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	603b      	str	r3, [r7, #0]
			if (temperature < MIN_OPERATION_TEMPERATURE || temperature > MAX_OPERATION_TEMPERATURE) {
 8001b6e:	edd7 7a00 	vldr	s15, [r7]
 8001b72:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8001b76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7e:	d408      	bmi.n	8001b92 <FEB_LTC6811_Validate_Temperature+0x4e>
 8001b80:	edd7 7a00 	vldr	s15, [r7]
 8001b84:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001bbc <FEB_LTC6811_Validate_Temperature+0x78>
 8001b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b90:	dd01      	ble.n	8001b96 <FEB_LTC6811_Validate_Temperature+0x52>
				FEB_BMS_Shutdown_Initiate();
 8001b92:	f7ff fa07 	bl	8000fa4 <FEB_BMS_Shutdown_Initiate>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001b96:	79bb      	ldrb	r3, [r7, #6]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	71bb      	strb	r3, [r7, #6]
 8001b9c:	79bb      	ldrb	r3, [r7, #6]
 8001b9e:	2b10      	cmp	r3, #16
 8001ba0:	d9d9      	bls.n	8001b56 <FEB_LTC6811_Validate_Temperature+0x12>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	71fb      	strb	r3, [r7, #7]
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0d0      	beq.n	8001b50 <FEB_LTC6811_Validate_Temperature+0xc>
			}
		}
	}
}
 8001bae:	bf00      	nop
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	2000021c 	.word	0x2000021c
 8001bbc:	42700000 	.word	0x42700000

08001bc0 <FEB_LTC6811_UART_String_Temperature>:

// ******************** Transmit Temperature ********************

char* FEB_LTC6811_UART_String_Temperature(uint8_t bank_idx) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b0c4      	sub	sp, #272	; 0x110
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001bcc:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001bd0:	701a      	strb	r2, [r3, #0]
	char temp_str[256];

	// Add bank_idx, cell_idx to {@code str}
	sprintf(UART_Str, "%d", (bank_idx << UART_BITS_PER_MESSAGE) + UART_TEMPERATURE_ID);
 8001bd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001bd6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	3301      	adds	r3, #1
 8001be0:	461a      	mov	r2, r3
 8001be2:	4929      	ldr	r1, [pc, #164]	; (8001c88 <FEB_LTC6811_UART_String_Temperature+0xc8>)
 8001be4:	4829      	ldr	r0, [pc, #164]	; (8001c8c <FEB_LTC6811_UART_String_Temperature+0xcc>)
 8001be6:	f005 faa9 	bl	800713c <siprintf>


	// Add values to {@code str}
	for (uint16_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001bea:	2300      	movs	r3, #0
 8001bec:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8001bf0:	e02d      	b.n	8001c4e <FEB_LTC6811_UART_String_Temperature+0x8e>
		float temperature = accumulator.banks[bank_idx].cells[cell_idx].temperature;
 8001bf2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001bf6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001bfa:	781a      	ldrb	r2, [r3, #0]
 8001bfc:	f8b7 110e 	ldrh.w	r1, [r7, #270]	; 0x10e
 8001c00:	4823      	ldr	r0, [pc, #140]	; (8001c90 <FEB_LTC6811_UART_String_Temperature+0xd0>)
 8001c02:	4613      	mov	r3, r2
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	4413      	add	r3, r2
 8001c08:	440b      	add	r3, r1
 8001c0a:	333a      	adds	r3, #58	; 0x3a
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4403      	add	r3, r0
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

		sprintf(temp_str, " %f", temperature);
 8001c16:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001c1a:	f7fe fcb5 	bl	8000588 <__aeabi_f2d>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	f107 0008 	add.w	r0, r7, #8
 8001c26:	491b      	ldr	r1, [pc, #108]	; (8001c94 <FEB_LTC6811_UART_String_Temperature+0xd4>)
 8001c28:	f005 fa88 	bl	800713c <siprintf>
		strncat(UART_Str, temp_str, strlen(temp_str));
 8001c2c:	f107 0308 	add.w	r3, r7, #8
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe faed 	bl	8000210 <strlen>
 8001c36:	4602      	mov	r2, r0
 8001c38:	f107 0308 	add.w	r3, r7, #8
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4813      	ldr	r0, [pc, #76]	; (8001c8c <FEB_LTC6811_UART_String_Temperature+0xcc>)
 8001c40:	f005 fa9c 	bl	800717c <strncat>
	for (uint16_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001c44:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001c48:	3301      	adds	r3, #1
 8001c4a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8001c4e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001c52:	2b10      	cmp	r3, #16
 8001c54:	d9cd      	bls.n	8001bf2 <FEB_LTC6811_UART_String_Temperature+0x32>
	}

	// Add '\n' to {@code str}
	sprintf(temp_str, "\n");
 8001c56:	f107 0308 	add.w	r3, r7, #8
 8001c5a:	490f      	ldr	r1, [pc, #60]	; (8001c98 <FEB_LTC6811_UART_String_Temperature+0xd8>)
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f005 fa6d 	bl	800713c <siprintf>
	strncat(UART_Str, temp_str, strlen(temp_str));
 8001c62:	f107 0308 	add.w	r3, r7, #8
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fad2 	bl	8000210 <strlen>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	f107 0308 	add.w	r3, r7, #8
 8001c72:	4619      	mov	r1, r3
 8001c74:	4805      	ldr	r0, [pc, #20]	; (8001c8c <FEB_LTC6811_UART_String_Temperature+0xcc>)
 8001c76:	f005 fa81 	bl	800717c <strncat>

	return UART_Str;
 8001c7a:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <FEB_LTC6811_UART_String_Temperature+0xcc>)
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	08009478 	.word	0x08009478
 8001c8c:	20000474 	.word	0x20000474
 8001c90:	2000021c 	.word	0x2000021c
 8001c94:	0800947c 	.word	0x0800947c
 8001c98:	08009480 	.word	0x08009480

08001c9c <LTC6811_init_reg_limits>:

/* Initialize the Register limits */
void LTC6811_init_reg_limits(uint8_t total_ic, //The number of ICs in the system
							cell_asic *ic  //A two dimensional array where data will be written
							)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	6039      	str	r1, [r7, #0]
 8001ca6:	71fb      	strb	r3, [r7, #7]
  for (uint8_t cic=0; cic<total_ic; cic++)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	73fb      	strb	r3, [r7, #15]
 8001cac:	e038      	b.n	8001d20 <LTC6811_init_reg_limits+0x84>
  {
    ic[cic].ic_reg.cell_channels=12;
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	22e8      	movs	r2, #232	; 0xe8
 8001cb2:	fb02 f303 	mul.w	r3, r2, r3
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	4413      	add	r3, r2
 8001cba:	220c      	movs	r2, #12
 8001cbc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    ic[cic].ic_reg.stat_channels=4;
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	22e8      	movs	r2, #232	; 0xe8
 8001cc4:	fb02 f303 	mul.w	r3, r2, r3
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	2204      	movs	r2, #4
 8001cce:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    ic[cic].ic_reg.aux_channels=6;
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	22e8      	movs	r2, #232	; 0xe8
 8001cd6:	fb02 f303 	mul.w	r3, r2, r3
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	4413      	add	r3, r2
 8001cde:	2206      	movs	r2, #6
 8001ce0:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
    ic[cic].ic_reg.num_cv_reg=4;
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
 8001ce6:	22e8      	movs	r2, #232	; 0xe8
 8001ce8:	fb02 f303 	mul.w	r3, r2, r3
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	4413      	add	r3, r2
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
    ic[cic].ic_reg.num_gpio_reg=2;
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	22e8      	movs	r2, #232	; 0xe8
 8001cfa:	fb02 f303 	mul.w	r3, r2, r3
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	4413      	add	r3, r2
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    ic[cic].ic_reg.num_stat_reg=3;
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	22e8      	movs	r2, #232	; 0xe8
 8001d0c:	fb02 f303 	mul.w	r3, r2, r3
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	2203      	movs	r2, #3
 8001d16:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
  for (uint8_t cic=0; cic<total_ic; cic++)
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
 8001d20:	7bfa      	ldrb	r2, [r7, #15]
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d3c2      	bcc.n	8001cae <LTC6811_init_reg_limits+0x12>
  }
}
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <LTC6811_wrcfg>:
order so the last device's configuration is written first.
*/
void LTC6811_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic *ic //A two dimensional array of the configuration data that will be written
                  )
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	6039      	str	r1, [r7, #0]
 8001d40:	71fb      	strb	r3, [r7, #7]
  LTC681x_wrcfg(total_ic,ic);
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	6839      	ldr	r1, [r7, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 f9c4 	bl	80020d4 <LTC681x_wrcfg>
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <LTC6811_adcv>:
/* Starts cell voltage conversion */
void LTC6811_adcv(uint8_t MD, //ADC Mode
				  uint8_t DCP, //Discharge Permit
				  uint8_t CH //Cell Channels to be measured
				  )
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	71bb      	strb	r3, [r7, #6]
 8001d62:	4613      	mov	r3, r2
 8001d64:	717b      	strb	r3, [r7, #5]
  LTC681x_adcv(MD,DCP,CH);
 8001d66:	797a      	ldrb	r2, [r7, #5]
 8001d68:	79b9      	ldrb	r1, [r7, #6]
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 fa30 	bl	80021d2 <LTC681x_adcv>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <LTC6811_adax>:

/* Start a GPIO and Vref2 Conversion */
void LTC6811_adax(uint8_t MD, //ADC Mode
				  uint8_t CHG //GPIO Channels to be measured
				  )
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	460a      	mov	r2, r1
 8001d84:	71fb      	strb	r3, [r7, #7]
 8001d86:	4613      	mov	r3, r2
 8001d88:	71bb      	strb	r3, [r7, #6]
  LTC681x_adax(MD,CHG);
 8001d8a:	79ba      	ldrb	r2, [r7, #6]
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f000 fa49 	bl	8002228 <LTC681x_adax>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <LTC6811_rdcv>:
*/
uint8_t LTC6811_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // The number of ICs in the system
                     cell_asic *ic // Array of the parsed cell codes
                    )
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b084      	sub	sp, #16
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	603a      	str	r2, [r7, #0]
 8001da8:	71fb      	strb	r3, [r7, #7]
 8001daa:	460b      	mov	r3, r1
 8001dac:	71bb      	strb	r3, [r7, #6]
  int8_t pec_error = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	73fb      	strb	r3, [r7, #15]
  pec_error = LTC681x_rdcv(reg,total_ic,ic);
 8001db2:	79b9      	ldrb	r1, [r7, #6]
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f000 fa5a 	bl	8002272 <LTC681x_rdcv>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	73fb      	strb	r3, [r7, #15]
  return(pec_error);
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <LTC6811_rdaux>:
*/
int8_t LTC6811_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
                     uint8_t total_ic,//The number of ICs in the system
                     cell_asic *ic//A two dimensional array of the gpio voltage codes.
                     )
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	603a      	str	r2, [r7, #0]
 8001dd6:	71fb      	strb	r3, [r7, #7]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	71bb      	strb	r3, [r7, #6]
  int8_t pec_error = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73fb      	strb	r3, [r7, #15]
  LTC681x_rdaux(reg,total_ic,ic);
 8001de0:	79b9      	ldrb	r1, [r7, #6]
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 faf7 	bl	80023da <LTC681x_rdaux>
  return (pec_error);
 8001dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <LTC6811_pollAdc>:
  return(LTC681x_pladc());
}

//This function will block operation until the ADC has finished it's conversion */
uint32_t LTC6811_pollAdc()
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  return(LTC681x_pollAdc());
 8001dfc:	f000 fcb8 	bl	8002770 <LTC681x_pollAdc>
 8001e00:	4603      	mov	r3, r0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <LTC6811_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC6811_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that will store the data
							 )
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	6039      	str	r1, [r7, #0]
 8001e10:	71fb      	strb	r3, [r7, #7]
  LTC681x_reset_crc_count(total_ic,ic);
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	6839      	ldr	r1, [r7, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 fe92 	bl	8002b40 <LTC681x_reset_crc_count>
}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <LTC6811_init_cfg>:

/* Helper function to initialize CFG variables.*/
void LTC6811_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that will store the data
					  )
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	6039      	str	r1, [r7, #0]
 8001e2e:	71fb      	strb	r3, [r7, #7]
  LTC681x_init_cfg(total_ic,ic);
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	6839      	ldr	r1, [r7, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 fee9 	bl	8002c0c <LTC681x_init_cfg>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <LTC6811_set_cfgr>:
					  bool dcc[12],// The DCC bit
					  bool dcto[4],// The Dcto bit
					  uint16_t uv, // The UV bit
					  uint16_t  ov // The OV bit
					  )
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b088      	sub	sp, #32
 8001e46:	af06      	add	r7, sp, #24
 8001e48:	6039      	str	r1, [r7, #0]
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
 8001e52:	460b      	mov	r3, r1
 8001e54:	71bb      	strb	r3, [r7, #6]
 8001e56:	4613      	mov	r3, r2
 8001e58:	717b      	strb	r3, [r7, #5]
  LTC681x_set_cfgr(nIC ,ic,refon,adcopt,gpio,dcc,dcto, uv, ov);
 8001e5a:	7979      	ldrb	r1, [r7, #5]
 8001e5c:	79ba      	ldrb	r2, [r7, #6]
 8001e5e:	79f8      	ldrb	r0, [r7, #7]
 8001e60:	8c3b      	ldrh	r3, [r7, #32]
 8001e62:	9304      	str	r3, [sp, #16]
 8001e64:	8bbb      	ldrh	r3, [r7, #28]
 8001e66:	9303      	str	r3, [sp, #12]
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	9302      	str	r3, [sp, #8]
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	9301      	str	r3, [sp, #4]
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	460b      	mov	r3, r1
 8001e76:	6839      	ldr	r1, [r7, #0]
 8001e78:	f000 fef2 	bl	8002c60 <LTC681x_set_cfgr>
}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <wakeup_idle>:
                                0x585a, 0x8ba7, 0x4e3e, 0x450c, 0x8095
                               };

/* Wake isoSPI up from IDlE state and enters the READY state */
void wakeup_idle(uint8_t total_ic) //Number of ICs in the system
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<total_ic; i++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	e00b      	b.n	8001eac <wakeup_idle+0x28>
	{
	   cs_low(CS_PIN);
 8001e94:	200a      	movs	r0, #10
 8001e96:	f001 f93d 	bl	8003114 <cs_low>
	   spi_read_byte(0xff);//Guarantees the isoSPI will be in ready mode
 8001e9a:	20ff      	movs	r0, #255	; 0xff
 8001e9c:	f001 f9b0 	bl	8003200 <spi_read_byte>
	   cs_high(CS_PIN);
 8001ea0:	200a      	movs	r0, #10
 8001ea2:	f001 f947 	bl	8003134 <cs_high>
	for (int i =0; i<total_ic; i++)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	dbef      	blt.n	8001e94 <wakeup_idle+0x10>
	}
}
 8001eb4:	bf00      	nop
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <wakeup_sleep>:

/* Generic wakeup command to wake the LTC681x from sleep state */
void wakeup_sleep(uint8_t total_ic) //Number of ICs in the system
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b084      	sub	sp, #16
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<total_ic; i++)
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	e00f      	b.n	8001eee <wakeup_sleep+0x30>
	{
	   cs_low(CS_PIN);
 8001ece:	200a      	movs	r0, #10
 8001ed0:	f001 f920 	bl	8003114 <cs_low>
	   delay_u(300); // Guarantees the LTC681x will be in standby
 8001ed4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ed8:	f001 f93c 	bl	8003154 <delay_u>
	   cs_high(CS_PIN);
 8001edc:	200a      	movs	r0, #10
 8001ede:	f001 f929 	bl	8003134 <cs_high>
	   delay_u(10);
 8001ee2:	200a      	movs	r0, #10
 8001ee4:	f001 f936 	bl	8003154 <delay_u>
	for (int i =0; i<total_ic; i++)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	3301      	adds	r3, #1
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	dbeb      	blt.n	8001ece <wakeup_sleep+0x10>
	}
}
 8001ef6:	bf00      	nop
 8001ef8:	bf00      	nop
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <cmd_68>:

/* Generic function to write 68xx commands. Function calculates PEC for tx_cmd data. */
void cmd_68(uint8_t tx_cmd[2]) //The command to be transmitted
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	cmd[0] = tx_cmd[0];
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	723b      	strb	r3, [r7, #8]
	cmd[1] =  tx_cmd[1];
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	785b      	ldrb	r3, [r3, #1]
 8001f12:	727b      	strb	r3, [r7, #9]
	cmd_pec = pec15_calc(2, cmd);
 8001f14:	f107 0308 	add.w	r3, r7, #8
 8001f18:	4619      	mov	r1, r3
 8001f1a:	2002      	movs	r0, #2
 8001f1c:	f000 f8a6 	bl	800206c <pec15_calc>
 8001f20:	4603      	mov	r3, r0
 8001f22:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001f24:	89fb      	ldrh	r3, [r7, #14]
 8001f26:	0a1b      	lsrs	r3, r3, #8
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8001f2e:	89fb      	ldrh	r3, [r7, #14]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 8001f34:	200a      	movs	r0, #10
 8001f36:	f001 f8ed 	bl	8003114 <cs_low>
	spi_write_array(4,cmd);
 8001f3a:	f107 0308 	add.w	r3, r7, #8
 8001f3e:	4619      	mov	r1, r3
 8001f40:	2004      	movs	r0, #4
 8001f42:	f001 f913 	bl	800316c <spi_write_array>
	cs_high(CS_PIN);
 8001f46:	200a      	movs	r0, #10
 8001f48:	f001 f8f4 	bl	8003134 <cs_high>
}
 8001f4c:	bf00      	nop
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
			  uint8_t tx_cmd[2], //The command to be transmitted
			  uint8_t data[] // Payload Data
			  )
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	73fb      	strb	r3, [r7, #15]
	const uint8_t BYTES_IN_REG = 6;
 8001f62:	2306      	movs	r3, #6
 8001f64:	773b      	strb	r3, [r7, #28]
	const uint8_t CMD_LEN = 4+(8*total_ic);
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	76fb      	strb	r3, [r7, #27]
	uint8_t *cmd;
	uint16_t data_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index;

	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8001f70:	7efb      	ldrb	r3, [r7, #27]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f004 fb70 	bl	8006658 <malloc>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	617b      	str	r3, [r7, #20]
	cmd[0] = tx_cmd[0];
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	781a      	ldrb	r2, [r3, #0]
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	701a      	strb	r2, [r3, #0]
	cmd[1] = tx_cmd[1];
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	3301      	adds	r3, #1
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	7852      	ldrb	r2, [r2, #1]
 8001f8c:	701a      	strb	r2, [r3, #0]
	cmd_pec = pec15_calc(2, cmd);
 8001f8e:	6979      	ldr	r1, [r7, #20]
 8001f90:	2002      	movs	r0, #2
 8001f92:	f000 f86b 	bl	800206c <pec15_calc>
 8001f96:	4603      	mov	r3, r0
 8001f98:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001f9a:	8a7b      	ldrh	r3, [r7, #18]
 8001f9c:	0a1b      	lsrs	r3, r3, #8
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	3302      	adds	r3, #2
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t)(cmd_pec);
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	3303      	adds	r3, #3
 8001fac:	8a7a      	ldrh	r2, [r7, #18]
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 8001fb2:	2304      	movs	r3, #4
 8001fb4:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each LTC681x, this loops starts with the last IC on the stack.
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	77bb      	strb	r3, [r7, #30]
 8001fba:	e042      	b.n	8002042 <write_68+0xee>
    {	                                                                            //The first configuration written is received by the last IC in the daisy chain
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	777b      	strb	r3, [r7, #29]
 8001fc0:	e016      	b.n	8001ff0 <write_68+0x9c>
		{
			cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 8001fc2:	7fbb      	ldrb	r3, [r7, #30]
 8001fc4:	1e5a      	subs	r2, r3, #1
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4413      	add	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	461a      	mov	r2, r3
 8001fd0:	7f7b      	ldrb	r3, [r7, #29]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	441a      	add	r2, r3
 8001fda:	7ffb      	ldrb	r3, [r7, #31]
 8001fdc:	6979      	ldr	r1, [r7, #20]
 8001fde:	440b      	add	r3, r1
 8001fe0:	7812      	ldrb	r2, [r2, #0]
 8001fe2:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 8001fe4:	7ffb      	ldrb	r3, [r7, #31]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8001fea:	7f7b      	ldrb	r3, [r7, #29]
 8001fec:	3301      	adds	r3, #1
 8001fee:	777b      	strb	r3, [r7, #29]
 8001ff0:	7f7a      	ldrb	r2, [r7, #29]
 8001ff2:	7f3b      	ldrb	r3, [r7, #28]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d3e4      	bcc.n	8001fc2 <write_68+0x6e>
		}

		data_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &data[(current_ic-1)*6]);    // Calculating the PEC for each ICs configuration register data
 8001ff8:	7fbb      	ldrb	r3, [r7, #30]
 8001ffa:	1e5a      	subs	r2, r3, #1
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4413      	add	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	461a      	mov	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	441a      	add	r2, r3
 800200a:	7f3b      	ldrb	r3, [r7, #28]
 800200c:	4611      	mov	r1, r2
 800200e:	4618      	mov	r0, r3
 8002010:	f000 f82c 	bl	800206c <pec15_calc>
 8002014:	4603      	mov	r3, r0
 8002016:	823b      	strh	r3, [r7, #16]
		cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 8002018:	8a3b      	ldrh	r3, [r7, #16]
 800201a:	0a1b      	lsrs	r3, r3, #8
 800201c:	b299      	uxth	r1, r3
 800201e:	7ffb      	ldrb	r3, [r7, #31]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	4413      	add	r3, r2
 8002024:	b2ca      	uxtb	r2, r1
 8002026:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t)data_pec;
 8002028:	7ffb      	ldrb	r3, [r7, #31]
 800202a:	3301      	adds	r3, #1
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	4413      	add	r3, r2
 8002030:	8a3a      	ldrh	r2, [r7, #16]
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 8002036:	7ffb      	ldrb	r3, [r7, #31]
 8002038:	3302      	adds	r3, #2
 800203a:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each LTC681x, this loops starts with the last IC on the stack.
 800203c:	7fbb      	ldrb	r3, [r7, #30]
 800203e:	3b01      	subs	r3, #1
 8002040:	77bb      	strb	r3, [r7, #30]
 8002042:	7fbb      	ldrb	r3, [r7, #30]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1b9      	bne.n	8001fbc <write_68+0x68>
	}

	cs_low(CS_PIN);
 8002048:	200a      	movs	r0, #10
 800204a:	f001 f863 	bl	8003114 <cs_low>
	spi_write_array(CMD_LEN, cmd);
 800204e:	7efb      	ldrb	r3, [r7, #27]
 8002050:	6979      	ldr	r1, [r7, #20]
 8002052:	4618      	mov	r0, r3
 8002054:	f001 f88a 	bl	800316c <spi_write_array>
	cs_high(CS_PIN);
 8002058:	200a      	movs	r0, #10
 800205a:	f001 f86b 	bl	8003134 <cs_high>

	free(cmd);
 800205e:	6978      	ldr	r0, [r7, #20]
 8002060:	f004 fb02 	bl	8006668 <free>
}
 8002064:	bf00      	nop
 8002066:	3720      	adds	r7, #32
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <pec15_calc>:

/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	6039      	str	r1, [r7, #0]
 8002076:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder,addr;
	remainder = 16;//initialize the PEC
 8002078:	2310      	movs	r3, #16
 800207a:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 800207c:	2300      	movs	r3, #0
 800207e:	737b      	strb	r3, [r7, #13]
 8002080:	e019      	b.n	80020b6 <pec15_calc+0x4a>
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 8002082:	89fb      	ldrh	r3, [r7, #14]
 8002084:	09db      	lsrs	r3, r3, #7
 8002086:	b29a      	uxth	r2, r3
 8002088:	7b7b      	ldrb	r3, [r7, #13]
 800208a:	6839      	ldr	r1, [r7, #0]
 800208c:	440b      	add	r3, r1
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	b29b      	uxth	r3, r3
 8002092:	4053      	eors	r3, r2
 8002094:	b29b      	uxth	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	817b      	strh	r3, [r7, #10]
		remainder = (remainder<<8)^crc15Table[addr];
 800209a:	89fb      	ldrh	r3, [r7, #14]
 800209c:	021b      	lsls	r3, r3, #8
 800209e:	b21a      	sxth	r2, r3
 80020a0:	897b      	ldrh	r3, [r7, #10]
 80020a2:	490b      	ldr	r1, [pc, #44]	; (80020d0 <pec15_calc+0x64>)
 80020a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80020a8:	b21b      	sxth	r3, r3
 80020aa:	4053      	eors	r3, r2
 80020ac:	b21b      	sxth	r3, r3
 80020ae:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 80020b0:	7b7b      	ldrb	r3, [r7, #13]
 80020b2:	3301      	adds	r3, #1
 80020b4:	737b      	strb	r3, [r7, #13]
 80020b6:	7b7a      	ldrb	r2, [r7, #13]
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d3e1      	bcc.n	8002082 <pec15_calc+0x16>
	}

	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80020be:	89fb      	ldrh	r3, [r7, #14]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	b29b      	uxth	r3, r3
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	08009484 	.word	0x08009484

080020d4 <LTC681x_wrcfg>:

/* Write the LTC681x CFGRA */
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[]  // A two dimensional array of the configuration data that will be written
                  )
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b0c4      	sub	sp, #272	; 0x110
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4602      	mov	r2, r0
 80020dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80020e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020e4:	6019      	str	r1, [r3, #0]
 80020e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80020ea:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80020ee:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = {0x00 , 0x01} ;
 80020f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020f4:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t c_ic = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8002104:	2300      	movs	r3, #0
 8002106:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800210a:	e048      	b.n	800219e <LTC681x_wrcfg+0xca>
	{
		if (ic->isospi_reverse == false)
 800210c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002110:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 800211a:	f083 0301 	eor.w	r3, r3, #1
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d004      	beq.n	800212e <LTC681x_wrcfg+0x5a>
		{
			c_ic = current_ic;
 8002124:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002128:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 800212c:	e00b      	b.n	8002146 <LTC681x_wrcfg+0x72>
		}
		else
		{
			c_ic = total_ic - current_ic - 1;
 800212e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002132:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002136:	781a      	ldrb	r2, [r3, #0]
 8002138:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	b2db      	uxtb	r3, r3
 8002140:	3b01      	subs	r3, #1
 8002142:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
		}

		for (uint8_t data = 0; data<6; data++)
 8002146:	2300      	movs	r3, #0
 8002148:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 800214c:	e01e      	b.n	800218c <LTC681x_wrcfg+0xb8>
		{
			write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 800214e:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8002152:	22e8      	movs	r2, #232	; 0xe8
 8002154:	fb02 f303 	mul.w	r3, r2, r3
 8002158:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800215c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	18d1      	adds	r1, r2, r3
 8002164:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8002168:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800216c:	5c89      	ldrb	r1, [r1, r2]
 800216e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002172:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8002176:	54d1      	strb	r1, [r2, r3]
			write_count++;
 8002178:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800217c:	3301      	adds	r3, #1
 800217e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		for (uint8_t data = 0; data<6; data++)
 8002182:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8002186:	3301      	adds	r3, #1
 8002188:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 800218c:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8002190:	2b05      	cmp	r3, #5
 8002192:	d9dc      	bls.n	800214e <LTC681x_wrcfg+0x7a>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8002194:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002198:	3301      	adds	r3, #1
 800219a:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800219e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80021a2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80021a6:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d3ad      	bcc.n	800210c <LTC681x_wrcfg+0x38>
		}
	}
	write_68(total_ic, cmd, write_buffer);
 80021b0:	f107 0208 	add.w	r2, r7, #8
 80021b4:	f507 7184 	add.w	r1, r7, #264	; 0x108
 80021b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80021bc:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fec6 	bl	8001f54 <write_68>
}
 80021c8:	bf00      	nop
 80021ca:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <LTC681x_adcv>:
/* Starts ADC conversion for cell voltage */
void LTC681x_adcv( uint8_t MD, //ADC Mode
				   uint8_t DCP, //Discharge Permit
				   uint8_t CH //Cell Channels to be measured
                 )
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b084      	sub	sp, #16
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	4603      	mov	r3, r0
 80021da:	71fb      	strb	r3, [r7, #7]
 80021dc:	460b      	mov	r3, r1
 80021de:	71bb      	strb	r3, [r7, #6]
 80021e0:	4613      	mov	r3, r2
 80021e2:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[2];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	105b      	asrs	r3, r3, #1
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	3302      	adds	r3, #2
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	733b      	strb	r3, [r7, #12]
	md_bits = (MD & 0x01) << 7;
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	01db      	lsls	r3, r3, #7
 80021fc:	73fb      	strb	r3, [r7, #15]
	cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 80021fe:	79bb      	ldrb	r3, [r7, #6]
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	b2da      	uxtb	r2, r3
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	4413      	add	r3, r2
 8002208:	b2da      	uxtb	r2, r3
 800220a:	797b      	ldrb	r3, [r7, #5]
 800220c:	4413      	add	r3, r2
 800220e:	b2db      	uxtb	r3, r3
 8002210:	3360      	adds	r3, #96	; 0x60
 8002212:	b2db      	uxtb	r3, r3
 8002214:	737b      	strb	r3, [r7, #13]

	cmd_68(cmd);
 8002216:	f107 030c 	add.w	r3, r7, #12
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fe70 	bl	8001f00 <cmd_68>
}
 8002220:	bf00      	nop
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <LTC681x_adax>:

/* Start ADC Conversion for GPIO and Vref2  */
void LTC681x_adax(uint8_t MD, //ADC Mode
				  uint8_t CHG //GPIO Channels to be measured
				  )
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	460a      	mov	r2, r1
 8002232:	71fb      	strb	r3, [r7, #7]
 8002234:	4613      	mov	r3, r2
 8002236:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	105b      	asrs	r3, r3, #1
 800223c:	b2db      	uxtb	r3, r3
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	3304      	adds	r3, #4
 8002248:	b2db      	uxtb	r3, r3
 800224a:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	01db      	lsls	r3, r3, #7
 8002250:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG ;
 8002252:	7bfa      	ldrb	r2, [r7, #15]
 8002254:	79bb      	ldrb	r3, [r7, #6]
 8002256:	4413      	add	r3, r2
 8002258:	b2db      	uxtb	r3, r3
 800225a:	3360      	adds	r3, #96	; 0x60
 800225c:	b2db      	uxtb	r3, r3
 800225e:	727b      	strb	r3, [r7, #9]

	cmd_68(cmd);
 8002260:	f107 0308 	add.w	r3, r7, #8
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff fe4b 	bl	8001f00 <cmd_68>
}
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <LTC681x_rdcv>:
*/
uint8_t LTC681x_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // The number of ICs in the system
                     cell_asic *ic // Array of the parsed cell codes
                    )
{
 8002272:	b5b0      	push	{r4, r5, r7, lr}
 8002274:	b088      	sub	sp, #32
 8002276:	af02      	add	r7, sp, #8
 8002278:	4603      	mov	r3, r0
 800227a:	603a      	str	r2, [r7, #0]
 800227c:	71fb      	strb	r3, [r7, #7]
 800227e:	460b      	mov	r3, r1
 8002280:	71bb      	strb	r3, [r7, #6]
	int8_t pec_error = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	75fb      	strb	r3, [r7, #23]
	uint8_t *cell_data;
	uint8_t c_ic = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	75bb      	strb	r3, [r7, #22]
	cell_data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 800228a:	79bb      	ldrb	r3, [r7, #6]
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	4618      	mov	r0, r3
 8002290:	f004 f9e2 	bl	8006658 <malloc>
 8002294:	4603      	mov	r3, r0
 8002296:	60bb      	str	r3, [r7, #8]

	if (reg == 0)
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d14b      	bne.n	8002336 <LTC681x_rdcv+0xc4>
	{
		for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 800229e:	2301      	movs	r3, #1
 80022a0:	757b      	strb	r3, [r7, #21]
 80022a2:	e041      	b.n	8002328 <LTC681x_rdcv+0xb6>
		{
			LTC681x_rdcv_reg(cell_reg, total_ic,cell_data );
 80022a4:	79b9      	ldrb	r1, [r7, #6]
 80022a6:	7d7b      	ldrb	r3, [r7, #21]
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 f93d 	bl	800252a <LTC681x_rdcv_reg>
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80022b0:	2300      	movs	r3, #0
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	e031      	b.n	800231a <LTC681x_rdcv+0xa8>
			{
			if (ic->isospi_reverse == false)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 80022bc:	f083 0301 	eor.w	r3, r3, #1
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d002      	beq.n	80022cc <LTC681x_rdcv+0x5a>
			{
			  c_ic = current_ic;
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	75bb      	strb	r3, [r7, #22]
 80022ca:	e006      	b.n	80022da <LTC681x_rdcv+0x68>
			}
			else
			{
			  c_ic = total_ic - current_ic - 1;
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	79ba      	ldrb	r2, [r7, #6]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	3b01      	subs	r3, #1
 80022d8:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	b2d8      	uxtb	r0, r3
												&ic[c_ic].cells.c_codes[0],
 80022de:	7dbb      	ldrb	r3, [r7, #22]
 80022e0:	22e8      	movs	r2, #232	; 0xe8
 80022e2:	fb02 f303 	mul.w	r3, r2, r3
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 80022ea:	f103 041e 	add.w	r4, r3, #30
												&ic[c_ic].cells.pec_match[0]);
 80022ee:	7dbb      	ldrb	r3, [r7, #22]
 80022f0:	22e8      	movs	r2, #232	; 0xe8
 80022f2:	fb02 f303 	mul.w	r3, r2, r3
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 80022fa:	3342      	adds	r3, #66	; 0x42
 80022fc:	7d79      	ldrb	r1, [r7, #21]
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	4623      	mov	r3, r4
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	f000 f9c2 	bl	800268c <parse_cells>
 8002308:	4603      	mov	r3, r0
 800230a:	b2da      	uxtb	r2, r3
 800230c:	7dfb      	ldrb	r3, [r7, #23]
 800230e:	4413      	add	r3, r2
 8002310:	b2db      	uxtb	r3, r3
 8002312:	75fb      	strb	r3, [r7, #23]
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	3301      	adds	r3, #1
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	79bb      	ldrb	r3, [r7, #6]
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	429a      	cmp	r2, r3
 8002320:	dbc9      	blt.n	80022b6 <LTC681x_rdcv+0x44>
		for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8002322:	7d7b      	ldrb	r3, [r7, #21]
 8002324:	3301      	adds	r3, #1
 8002326:	757b      	strb	r3, [r7, #21]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 800232e:	7d7a      	ldrb	r2, [r7, #21]
 8002330:	429a      	cmp	r2, r3
 8002332:	d9b7      	bls.n	80022a4 <LTC681x_rdcv+0x32>
 8002334:	e043      	b.n	80023be <LTC681x_rdcv+0x14c>
		}
	}

	else
	{
		LTC681x_rdcv_reg(reg, total_ic,cell_data);
 8002336:	79b9      	ldrb	r1, [r7, #6]
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	4618      	mov	r0, r3
 800233e:	f000 f8f4 	bl	800252a <LTC681x_rdcv_reg>

		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	e036      	b.n	80023b6 <LTC681x_rdcv+0x144>
		{
			if (ic->isospi_reverse == false)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 800234e:	f083 0301 	eor.w	r3, r3, #1
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <LTC681x_rdcv+0xec>
			{
			c_ic = current_ic;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	75bb      	strb	r3, [r7, #22]
 800235c:	e006      	b.n	800236c <LTC681x_rdcv+0xfa>
			}
			else
			{
			c_ic = total_ic - current_ic - 1;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	79ba      	ldrb	r2, [r7, #6]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	3b01      	subs	r3, #1
 800236a:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	b2d8      	uxtb	r0, r3
 8002370:	7dbb      	ldrb	r3, [r7, #22]
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	461a      	mov	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	189c      	adds	r4, r3, r2
											  &ic[c_ic].cells.c_codes[0],
 800237a:	7dbb      	ldrb	r3, [r7, #22]
 800237c:	22e8      	movs	r2, #232	; 0xe8
 800237e:	fb02 f303 	mul.w	r3, r2, r3
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8002386:	f103 051e 	add.w	r5, r3, #30
											  &ic[c_ic].cells.pec_match[0]);
 800238a:	7dbb      	ldrb	r3, [r7, #22]
 800238c:	22e8      	movs	r2, #232	; 0xe8
 800238e:	fb02 f303 	mul.w	r3, r2, r3
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8002396:	3342      	adds	r3, #66	; 0x42
 8002398:	79f9      	ldrb	r1, [r7, #7]
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	462b      	mov	r3, r5
 800239e:	4622      	mov	r2, r4
 80023a0:	f000 f974 	bl	800268c <parse_cells>
 80023a4:	4603      	mov	r3, r0
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	7dfb      	ldrb	r3, [r7, #23]
 80023aa:	4413      	add	r3, r2
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	75fb      	strb	r3, [r7, #23]
		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	3301      	adds	r3, #1
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	79bb      	ldrb	r3, [r7, #6]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	dbc4      	blt.n	8002348 <LTC681x_rdcv+0xd6>
		}
	}
	LTC681x_check_pec(total_ic,CELL,ic);
 80023be:	79bb      	ldrb	r3, [r7, #6]
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	2101      	movs	r1, #1
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 fa17 	bl	80027f8 <LTC681x_check_pec>
	free(cell_data);
 80023ca:	68b8      	ldr	r0, [r7, #8]
 80023cc:	f004 f94c 	bl	8006668 <free>

	return(pec_error);
 80023d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bdb0      	pop	{r4, r5, r7, pc}

080023da <LTC681x_rdaux>:
*/
int8_t LTC681x_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
                     uint8_t total_ic,//The number of ICs in the system
                     cell_asic *ic//A two dimensional array of the gpio voltage codes.
                    )
{
 80023da:	b590      	push	{r4, r7, lr}
 80023dc:	b089      	sub	sp, #36	; 0x24
 80023de:	af02      	add	r7, sp, #8
 80023e0:	4603      	mov	r3, r0
 80023e2:	603a      	str	r2, [r7, #0]
 80023e4:	71fb      	strb	r3, [r7, #7]
 80023e6:	460b      	mov	r3, r1
 80023e8:	71bb      	strb	r3, [r7, #6]
	uint8_t *data;
	int8_t pec_error = 0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	75fb      	strb	r3, [r7, #23]
	uint8_t c_ic =0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	75bb      	strb	r3, [r7, #22]
	data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 80023f2:	79bb      	ldrb	r3, [r7, #6]
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4618      	mov	r0, r3
 80023f8:	f004 f92e 	bl	8006658 <malloc>
 80023fc:	4603      	mov	r3, r0
 80023fe:	60bb      	str	r3, [r7, #8]

	if (reg == 0)
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d147      	bne.n	8002496 <LTC681x_rdaux+0xbc>
	{
		for (uint8_t gpio_reg = 1; gpio_reg<ic[0].ic_reg.num_gpio_reg+1; gpio_reg++) //Executes once for each of the LTC681x aux voltage registers
 8002406:	2301      	movs	r3, #1
 8002408:	757b      	strb	r3, [r7, #21]
 800240a:	e03d      	b.n	8002488 <LTC681x_rdaux+0xae>
		{
			LTC681x_rdaux_reg(gpio_reg, total_ic,data);                 //Reads the raw auxiliary register data into the data[] array
 800240c:	79b9      	ldrb	r1, [r7, #6]
 800240e:	7d7b      	ldrb	r3, [r7, #21]
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	4618      	mov	r0, r3
 8002414:	f000 f8e7 	bl	80025e6 <LTC681x_rdaux_reg>
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002418:	2300      	movs	r3, #0
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	e02d      	b.n	800247a <LTC681x_rdaux+0xa0>
			{
				if (ic->isospi_reverse == false)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8002424:	f083 0301 	eor.w	r3, r3, #1
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d002      	beq.n	8002434 <LTC681x_rdaux+0x5a>
				{
				  c_ic = current_ic;
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	75bb      	strb	r3, [r7, #22]
 8002432:	e006      	b.n	8002442 <LTC681x_rdaux+0x68>
				}
				else
				{
				  c_ic = total_ic - current_ic - 1;
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	b2db      	uxtb	r3, r3
 8002438:	79ba      	ldrb	r2, [r7, #6]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	3b01      	subs	r3, #1
 8002440:	75bb      	strb	r3, [r7, #22]
				}
				pec_error = parse_cells(current_ic,gpio_reg, data,
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	b2d8      	uxtb	r0, r3
										&ic[c_ic].aux.a_codes[0],
 8002446:	7dbb      	ldrb	r3, [r7, #22]
 8002448:	22e8      	movs	r2, #232	; 0xe8
 800244a:	fb02 f303 	mul.w	r3, r2, r3
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	4413      	add	r3, r2
				pec_error = parse_cells(current_ic,gpio_reg, data,
 8002452:	f103 0448 	add.w	r4, r3, #72	; 0x48
										&ic[c_ic].aux.pec_match[0]);
 8002456:	7dbb      	ldrb	r3, [r7, #22]
 8002458:	22e8      	movs	r2, #232	; 0xe8
 800245a:	fb02 f303 	mul.w	r3, r2, r3
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	4413      	add	r3, r2
				pec_error = parse_cells(current_ic,gpio_reg, data,
 8002462:	335a      	adds	r3, #90	; 0x5a
 8002464:	7d79      	ldrb	r1, [r7, #21]
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	4623      	mov	r3, r4
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	f000 f90e 	bl	800268c <parse_cells>
 8002470:	4603      	mov	r3, r0
 8002472:	75fb      	strb	r3, [r7, #23]
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	3301      	adds	r3, #1
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	79bb      	ldrb	r3, [r7, #6]
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	429a      	cmp	r2, r3
 8002480:	dbcd      	blt.n	800241e <LTC681x_rdaux+0x44>
		for (uint8_t gpio_reg = 1; gpio_reg<ic[0].ic_reg.num_gpio_reg+1; gpio_reg++) //Executes once for each of the LTC681x aux voltage registers
 8002482:	7d7b      	ldrb	r3, [r7, #21]
 8002484:	3301      	adds	r3, #1
 8002486:	757b      	strb	r3, [r7, #21]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800248e:	7d7a      	ldrb	r2, [r7, #21]
 8002490:	429a      	cmp	r2, r3
 8002492:	d9bb      	bls.n	800240c <LTC681x_rdaux+0x32>
 8002494:	e03a      	b.n	800250c <LTC681x_rdaux+0x132>
			}
		}
	}
	else
	{
		LTC681x_rdaux_reg(reg, total_ic, data);
 8002496:	79b9      	ldrb	r1, [r7, #6]
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	4618      	mov	r0, r3
 800249e:	f000 f8a2 	bl	80025e6 <LTC681x_rdaux_reg>

		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	e02d      	b.n	8002504 <LTC681x_rdaux+0x12a>
		{
			if (ic->isospi_reverse == false)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 80024ae:	f083 0301 	eor.w	r3, r3, #1
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <LTC681x_rdaux+0xe4>
			{
			c_ic = current_ic;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	75bb      	strb	r3, [r7, #22]
 80024bc:	e006      	b.n	80024cc <LTC681x_rdaux+0xf2>
			}
			else
			{
			c_ic = total_ic - current_ic - 1;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	79ba      	ldrb	r2, [r7, #6]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = parse_cells(current_ic,reg, data,
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	b2d8      	uxtb	r0, r3
								  &ic[c_ic].aux.a_codes[0],
 80024d0:	7dbb      	ldrb	r3, [r7, #22]
 80024d2:	22e8      	movs	r2, #232	; 0xe8
 80024d4:	fb02 f303 	mul.w	r3, r2, r3
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	4413      	add	r3, r2
			pec_error = parse_cells(current_ic,reg, data,
 80024dc:	f103 0448 	add.w	r4, r3, #72	; 0x48
								  &ic[c_ic].aux.pec_match[0]);
 80024e0:	7dbb      	ldrb	r3, [r7, #22]
 80024e2:	22e8      	movs	r2, #232	; 0xe8
 80024e4:	fb02 f303 	mul.w	r3, r2, r3
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	4413      	add	r3, r2
			pec_error = parse_cells(current_ic,reg, data,
 80024ec:	335a      	adds	r3, #90	; 0x5a
 80024ee:	79f9      	ldrb	r1, [r7, #7]
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	4623      	mov	r3, r4
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	f000 f8c9 	bl	800268c <parse_cells>
 80024fa:	4603      	mov	r3, r0
 80024fc:	75fb      	strb	r3, [r7, #23]
		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	3301      	adds	r3, #1
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	79bb      	ldrb	r3, [r7, #6]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	429a      	cmp	r2, r3
 800250a:	dbcd      	blt.n	80024a8 <LTC681x_rdaux+0xce>
		}
	}
	LTC681x_check_pec(total_ic,AUX,ic);
 800250c:	79bb      	ldrb	r3, [r7, #6]
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	2102      	movs	r1, #2
 8002512:	4618      	mov	r0, r3
 8002514:	f000 f970 	bl	80027f8 <LTC681x_check_pec>
	free(data);
 8002518:	68b8      	ldr	r0, [r7, #8]
 800251a:	f004 f8a5 	bl	8006668 <free>

	return (pec_error);
 800251e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002522:	4618      	mov	r0, r3
 8002524:	371c      	adds	r7, #28
 8002526:	46bd      	mov	sp, r7
 8002528:	bd90      	pop	{r4, r7, pc}

0800252a <LTC681x_rdcv_reg>:
/* Writes the command and reads the raw cell voltage register data */
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
                      uint8_t total_ic, //the number of ICs in the
                      uint8_t *data //An array of the unparsed cell codes
                     )
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	4603      	mov	r3, r0
 8002532:	603a      	str	r2, [r7, #0]
 8002534:	71fb      	strb	r3, [r7, #7]
 8002536:	460b      	mov	r3, r1
 8002538:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; //Number of bytes in each ICs register + 2 bytes for the PEC
 800253a:	2308      	movs	r3, #8
 800253c:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //1: RDCVA
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d104      	bne.n	800254e <LTC681x_rdcv_reg+0x24>
	{
		cmd[1] = 0x04;
 8002544:	2304      	movs	r3, #4
 8002546:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002548:	2300      	movs	r3, #0
 800254a:	723b      	strb	r3, [r7, #8]
 800254c:	e026      	b.n	800259c <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 2) //2: RDCVB
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	2b02      	cmp	r3, #2
 8002552:	d104      	bne.n	800255e <LTC681x_rdcv_reg+0x34>
	{
		cmd[1] = 0x06;
 8002554:	2306      	movs	r3, #6
 8002556:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002558:	2300      	movs	r3, #0
 800255a:	723b      	strb	r3, [r7, #8]
 800255c:	e01e      	b.n	800259c <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 3) //3: RDCVC
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	2b03      	cmp	r3, #3
 8002562:	d104      	bne.n	800256e <LTC681x_rdcv_reg+0x44>
	{
		cmd[1] = 0x08;
 8002564:	2308      	movs	r3, #8
 8002566:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002568:	2300      	movs	r3, #0
 800256a:	723b      	strb	r3, [r7, #8]
 800256c:	e016      	b.n	800259c <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 4) //4: RDCVD
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	2b04      	cmp	r3, #4
 8002572:	d104      	bne.n	800257e <LTC681x_rdcv_reg+0x54>
	{
		cmd[1] = 0x0A;
 8002574:	230a      	movs	r3, #10
 8002576:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002578:	2300      	movs	r3, #0
 800257a:	723b      	strb	r3, [r7, #8]
 800257c:	e00e      	b.n	800259c <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 5) //4: RDCVE
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	2b05      	cmp	r3, #5
 8002582:	d104      	bne.n	800258e <LTC681x_rdcv_reg+0x64>
	{
		cmd[1] = 0x09;
 8002584:	2309      	movs	r3, #9
 8002586:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002588:	2300      	movs	r3, #0
 800258a:	723b      	strb	r3, [r7, #8]
 800258c:	e006      	b.n	800259c <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 6) //4: RDCVF
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	2b06      	cmp	r3, #6
 8002592:	d103      	bne.n	800259c <LTC681x_rdcv_reg+0x72>
	{
		cmd[1] = 0x0B;
 8002594:	230b      	movs	r3, #11
 8002596:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002598:	2300      	movs	r3, #0
 800259a:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 800259c:	f107 0308 	add.w	r3, r7, #8
 80025a0:	4619      	mov	r1, r3
 80025a2:	2002      	movs	r0, #2
 80025a4:	f7ff fd62 	bl	800206c <pec15_calc>
 80025a8:	4603      	mov	r3, r0
 80025aa:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80025ac:	89bb      	ldrh	r3, [r7, #12]
 80025ae:	0a1b      	lsrs	r3, r3, #8
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 80025b6:	89bb      	ldrh	r3, [r7, #12]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 80025bc:	200a      	movs	r0, #10
 80025be:	f000 fda9 	bl	8003114 <cs_low>
	spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 80025c2:	7bfa      	ldrb	r2, [r7, #15]
 80025c4:	79bb      	ldrb	r3, [r7, #6]
 80025c6:	fb12 f303 	smulbb	r3, r2, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	f107 0008 	add.w	r0, r7, #8
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	2104      	movs	r1, #4
 80025d4:	f000 fdde 	bl	8003194 <spi_write_read>
	cs_high(CS_PIN);
 80025d8:	200a      	movs	r0, #10
 80025da:	f000 fdab 	bl	8003134 <cs_high>
}
 80025de:	bf00      	nop
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <LTC681x_rdaux_reg>:
*/
void LTC681x_rdaux_reg(uint8_t reg, //Determines which GPIO voltage register is read back
                       uint8_t total_ic, //The number of ICs in the system
                       uint8_t *data //Array of the unparsed auxiliary codes
                      )
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b084      	sub	sp, #16
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	4603      	mov	r3, r0
 80025ee:	603a      	str	r2, [r7, #0]
 80025f0:	71fb      	strb	r3, [r7, #7]
 80025f2:	460b      	mov	r3, r1
 80025f4:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; // Number of bytes in the register + 2 bytes for the PEC
 80025f6:	2308      	movs	r3, #8
 80025f8:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //Read back auxiliary group A
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d104      	bne.n	800260a <LTC681x_rdaux_reg+0x24>
	{
		cmd[1] = 0x0C;
 8002600:	230c      	movs	r3, #12
 8002602:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002604:	2300      	movs	r3, #0
 8002606:	723b      	strb	r3, [r7, #8]
 8002608:	e01b      	b.n	8002642 <LTC681x_rdaux_reg+0x5c>
	}
	else if (reg == 2)  //Read back auxiliary group B
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d104      	bne.n	800261a <LTC681x_rdaux_reg+0x34>
	{
		cmd[1] = 0x0E;
 8002610:	230e      	movs	r3, #14
 8002612:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002614:	2300      	movs	r3, #0
 8002616:	723b      	strb	r3, [r7, #8]
 8002618:	e013      	b.n	8002642 <LTC681x_rdaux_reg+0x5c>
	}
	else if (reg == 3)  //Read back auxiliary group C
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	2b03      	cmp	r3, #3
 800261e:	d104      	bne.n	800262a <LTC681x_rdaux_reg+0x44>
	{
		cmd[1] = 0x0D;
 8002620:	230d      	movs	r3, #13
 8002622:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002624:	2300      	movs	r3, #0
 8002626:	723b      	strb	r3, [r7, #8]
 8002628:	e00b      	b.n	8002642 <LTC681x_rdaux_reg+0x5c>
	}
	else if (reg == 4)  //Read back auxiliary group D
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	2b04      	cmp	r3, #4
 800262e:	d104      	bne.n	800263a <LTC681x_rdaux_reg+0x54>
	{
		cmd[1] = 0x0F;
 8002630:	230f      	movs	r3, #15
 8002632:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002634:	2300      	movs	r3, #0
 8002636:	723b      	strb	r3, [r7, #8]
 8002638:	e003      	b.n	8002642 <LTC681x_rdaux_reg+0x5c>
	}
	else          //Read back auxiliary group A
	{
		cmd[1] = 0x0C;
 800263a:	230c      	movs	r3, #12
 800263c:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800263e:	2300      	movs	r3, #0
 8002640:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 8002642:	f107 0308 	add.w	r3, r7, #8
 8002646:	4619      	mov	r1, r3
 8002648:	2002      	movs	r0, #2
 800264a:	f7ff fd0f 	bl	800206c <pec15_calc>
 800264e:	4603      	mov	r3, r0
 8002650:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8002652:	89bb      	ldrh	r3, [r7, #12]
 8002654:	0a1b      	lsrs	r3, r3, #8
 8002656:	b29b      	uxth	r3, r3
 8002658:	b2db      	uxtb	r3, r3
 800265a:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 800265c:	89bb      	ldrh	r3, [r7, #12]
 800265e:	b2db      	uxtb	r3, r3
 8002660:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 8002662:	200a      	movs	r0, #10
 8002664:	f000 fd56 	bl	8003114 <cs_low>
	spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 8002668:	7bfa      	ldrb	r2, [r7, #15]
 800266a:	79bb      	ldrb	r3, [r7, #6]
 800266c:	fb12 f303 	smulbb	r3, r2, r3
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f107 0008 	add.w	r0, r7, #8
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	2104      	movs	r1, #4
 800267a:	f000 fd8b 	bl	8003194 <spi_write_read>
	cs_high(CS_PIN);
 800267e:	200a      	movs	r0, #10
 8002680:	f000 fd58 	bl	8003134 <cs_high>
}
 8002684:	bf00      	nop
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <parse_cells>:
					uint8_t cell_reg,  // Type of register
					uint8_t cell_data[], // Unparsed data
					uint16_t *cell_codes, // Parsed data
					uint8_t *ic_pec // PEC error
					)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
 8002692:	60ba      	str	r2, [r7, #8]
 8002694:	607b      	str	r3, [r7, #4]
 8002696:	4603      	mov	r3, r0
 8002698:	73fb      	strb	r3, [r7, #15]
 800269a:	460b      	mov	r3, r1
 800269c:	73bb      	strb	r3, [r7, #14]
	const uint8_t BYT_IN_REG = 6;
 800269e:	2306      	movs	r3, #6
 80026a0:	773b      	strb	r3, [r7, #28]
	const uint8_t CELL_IN_REG = 3;
 80026a2:	2303      	movs	r3, #3
 80026a4:	76fb      	strb	r3, [r7, #27]
	int8_t pec_error = 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	77fb      	strb	r3, [r7, #31]
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = current_ic*NUM_RX_BYT; //data counter
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	77bb      	strb	r3, [r7, #30]


	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 80026b0:	2300      	movs	r3, #0
 80026b2:	777b      	strb	r3, [r7, #29]
 80026b4:	e020      	b.n	80026f8 <parse_cells+0x6c>
	{																		// loops once for each of the 3 codes in the register

		parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each code is received as two bytes and is combined to
 80026b6:	7fbb      	ldrb	r3, [r7, #30]
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	4413      	add	r3, r2
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	b29a      	uxth	r2, r3
 80026c0:	7fbb      	ldrb	r3, [r7, #30]
 80026c2:	3301      	adds	r3, #1
 80026c4:	68b9      	ldr	r1, [r7, #8]
 80026c6:	440b      	add	r3, r1
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	021b      	lsls	r3, r3, #8
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	4413      	add	r3, r2
 80026d2:	82bb      	strh	r3, [r7, #20]
																				   // create the parsed code
		cell_codes[current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 80026d4:	7f7a      	ldrb	r2, [r7, #29]
 80026d6:	7bbb      	ldrb	r3, [r7, #14]
 80026d8:	3b01      	subs	r3, #1
 80026da:	7ef9      	ldrb	r1, [r7, #27]
 80026dc:	fb01 f303 	mul.w	r3, r1, r3
 80026e0:	4413      	add	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	4413      	add	r3, r2
 80026e8:	8aba      	ldrh	r2, [r7, #20]
 80026ea:	801a      	strh	r2, [r3, #0]

		data_counter = data_counter + 2;                       //Because the codes are two bytes, the data counter
 80026ec:	7fbb      	ldrb	r3, [r7, #30]
 80026ee:	3302      	adds	r3, #2
 80026f0:	77bb      	strb	r3, [r7, #30]
	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 80026f2:	7f7b      	ldrb	r3, [r7, #29]
 80026f4:	3301      	adds	r3, #1
 80026f6:	777b      	strb	r3, [r7, #29]
 80026f8:	7f7a      	ldrb	r2, [r7, #29]
 80026fa:	7efb      	ldrb	r3, [r7, #27]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d3da      	bcc.n	80026b6 <parse_cells+0x2a>
															  //must increment by two for each parsed code
	}
	received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8002700:	7fbb      	ldrb	r3, [r7, #30]
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	4413      	add	r3, r2
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	021b      	lsls	r3, r3, #8
 800270a:	b21a      	sxth	r2, r3
 800270c:	7fbb      	ldrb	r3, [r7, #30]
 800270e:	3301      	adds	r3, #1
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	440b      	add	r3, r1
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	b21b      	sxth	r3, r3
 8002718:	4313      	orrs	r3, r2
 800271a:	b21b      	sxth	r3, r3
 800271c:	833b      	strh	r3, [r7, #24]
																			   //after the 6 cell voltage data bytes
	data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	461a      	mov	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	441a      	add	r2, r3
 8002728:	7f3b      	ldrb	r3, [r7, #28]
 800272a:	4611      	mov	r1, r2
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fc9d 	bl	800206c <pec15_calc>
 8002732:	4603      	mov	r3, r0
 8002734:	82fb      	strh	r3, [r7, #22]

	if (received_pec != data_pec)
 8002736:	8b3a      	ldrh	r2, [r7, #24]
 8002738:	8afb      	ldrh	r3, [r7, #22]
 800273a:	429a      	cmp	r2, r3
 800273c:	d008      	beq.n	8002750 <parse_cells+0xc4>
	{
		pec_error = 1;                             //The pec_error variable is simply set negative if any PEC errors
 800273e:	2301      	movs	r3, #1
 8002740:	77fb      	strb	r3, [r7, #31]
		ic_pec[cell_reg-1]=1;
 8002742:	7bbb      	ldrb	r3, [r7, #14]
 8002744:	3b01      	subs	r3, #1
 8002746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002748:	4413      	add	r3, r2
 800274a:	2201      	movs	r2, #1
 800274c:	701a      	strb	r2, [r3, #0]
 800274e:	e005      	b.n	800275c <parse_cells+0xd0>
	}
	else
	{
		ic_pec[cell_reg-1]=0;
 8002750:	7bbb      	ldrb	r3, [r7, #14]
 8002752:	3b01      	subs	r3, #1
 8002754:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002756:	4413      	add	r3, r2
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
	}
	data_counter=data_counter+2;
 800275c:	7fbb      	ldrb	r3, [r7, #30]
 800275e:	3302      	adds	r3, #2
 8002760:	77bb      	strb	r3, [r7, #30]

	return(pec_error);
 8002762:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3720      	adds	r7, #32
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <LTC681x_pollAdc>:
	return(adc_state);
}

/* This function will block operation until the ADC has finished it's conversion */
uint32_t LTC681x_pollAdc()
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8002782:	2307      	movs	r3, #7
 8002784:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 8002786:	2314      	movs	r3, #20
 8002788:	717b      	strb	r3, [r7, #5]
	cmd_pec = pec15_calc(2, cmd);
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	4619      	mov	r1, r3
 800278e:	2002      	movs	r0, #2
 8002790:	f7ff fc6c 	bl	800206c <pec15_calc>
 8002794:	4603      	mov	r3, r0
 8002796:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8002798:	893b      	ldrh	r3, [r7, #8]
 800279a:	0a1b      	lsrs	r3, r3, #8
 800279c:	b29b      	uxth	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t)(cmd_pec);
 80027a2:	893b      	ldrh	r3, [r7, #8]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	71fb      	strb	r3, [r7, #7]

	cs_low(CS_PIN);
 80027a8:	200a      	movs	r0, #10
 80027aa:	f000 fcb3 	bl	8003114 <cs_low>
	spi_write_array(4,cmd);
 80027ae:	1d3b      	adds	r3, r7, #4
 80027b0:	4619      	mov	r1, r3
 80027b2:	2004      	movs	r0, #4
 80027b4:	f000 fcda 	bl	800316c <spi_write_array>
	while ((counter<200000)&&(finished == 0))
 80027b8:	e00d      	b.n	80027d6 <LTC681x_pollAdc+0x66>
	{
		current_time = spi_read_byte(0xff);
 80027ba:	20ff      	movs	r0, #255	; 0xff
 80027bc:	f000 fd20 	bl	8003200 <spi_read_byte>
 80027c0:	4603      	mov	r3, r0
 80027c2:	72bb      	strb	r3, [r7, #10]
		if (current_time>0)
 80027c4:	7abb      	ldrb	r3, [r7, #10]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <LTC681x_pollAdc+0x60>
		{
			finished = 1;
 80027ca:	2301      	movs	r3, #1
 80027cc:	72fb      	strb	r3, [r7, #11]
 80027ce:	e002      	b.n	80027d6 <LTC681x_pollAdc+0x66>
		}
		else
		{
			counter = counter + 10;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	330a      	adds	r3, #10
 80027d4:	60fb      	str	r3, [r7, #12]
	while ((counter<200000)&&(finished == 0))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4a06      	ldr	r2, [pc, #24]	; (80027f4 <LTC681x_pollAdc+0x84>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d802      	bhi.n	80027e4 <LTC681x_pollAdc+0x74>
 80027de:	7afb      	ldrb	r3, [r7, #11]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0ea      	beq.n	80027ba <LTC681x_pollAdc+0x4a>
		}
	}
	cs_high(CS_PIN);
 80027e4:	200a      	movs	r0, #10
 80027e6:	f000 fca5 	bl	8003134 <cs_high>

	return(counter);
 80027ea:	68fb      	ldr	r3, [r7, #12]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	00030d3f 	.word	0x00030d3f

080027f8 <LTC681x_check_pec>:
/* Helper function that increments PEC counters */
void LTC681x_check_pec(uint8_t total_ic, //Number of ICs in the system
					   uint8_t reg, //Type of Register
					   cell_asic *ic //A two dimensional array that stores the data
					   )
{
 80027f8:	b480      	push	{r7}
 80027fa:	b08b      	sub	sp, #44	; 0x2c
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	603a      	str	r2, [r7, #0]
 8002802:	71fb      	strb	r3, [r7, #7]
 8002804:	460b      	mov	r3, r1
 8002806:	71bb      	strb	r3, [r7, #6]
	switch (reg)
 8002808:	79bb      	ldrb	r3, [r7, #6]
 800280a:	2b04      	cmp	r3, #4
 800280c:	f200 8191 	bhi.w	8002b32 <LTC681x_check_pec+0x33a>
 8002810:	a201      	add	r2, pc, #4	; (adr r2, 8002818 <LTC681x_check_pec+0x20>)
 8002812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002816:	bf00      	nop
 8002818:	0800282d 	.word	0x0800282d
 800281c:	08002929 	.word	0x08002929
 8002820:	080029db 	.word	0x080029db
 8002824:	08002a87 	.word	0x08002a87
 8002828:	080028ab 	.word	0x080028ab
	{
		case CFGR:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800282c:	2300      	movs	r3, #0
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
 8002830:	e036      	b.n	80028a0 <LTC681x_check_pec+0xa8>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].config.rx_pec_match;
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	22e8      	movs	r2, #232	; 0xe8
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	4413      	add	r3, r2
 800283e:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	22e8      	movs	r2, #232	; 0xe8
 8002846:	fb02 f303 	mul.w	r3, r2, r3
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	4413      	add	r3, r2
 800284e:	7b9b      	ldrb	r3, [r3, #14]
 8002850:	b29a      	uxth	r2, r3
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	20e8      	movs	r0, #232	; 0xe8
 8002856:	fb00 f303 	mul.w	r3, r0, r3
 800285a:	6838      	ldr	r0, [r7, #0]
 800285c:	4403      	add	r3, r0
 800285e:	440a      	add	r2, r1
 8002860:	b292      	uxth	r2, r2
 8002862:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].config.rx_pec_match;
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	22e8      	movs	r2, #232	; 0xe8
 800286a:	fb02 f303 	mul.w	r3, r2, r3
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	4413      	add	r3, r2
 8002872:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	22e8      	movs	r2, #232	; 0xe8
 800287a:	fb02 f303 	mul.w	r3, r2, r3
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	4413      	add	r3, r2
 8002882:	7b9b      	ldrb	r3, [r3, #14]
 8002884:	b29a      	uxth	r2, r3
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	20e8      	movs	r0, #232	; 0xe8
 800288a:	fb00 f303 	mul.w	r3, r0, r3
 800288e:	6838      	ldr	r0, [r7, #0]
 8002890:	4403      	add	r3, r0
 8002892:	440a      	add	r2, r1
 8002894:	b292      	uxth	r2, r2
 8002896:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	3301      	adds	r3, #1
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a4:	429a      	cmp	r2, r3
 80028a6:	dbc4      	blt.n	8002832 <LTC681x_check_pec+0x3a>
		  }
		break;
 80028a8:	e144      	b.n	8002b34 <LTC681x_check_pec+0x33c>

		case CFGRB:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80028aa:	2300      	movs	r3, #0
 80028ac:	623b      	str	r3, [r7, #32]
 80028ae:	e036      	b.n	800291e <LTC681x_check_pec+0x126>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configb.rx_pec_match;
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	22e8      	movs	r2, #232	; 0xe8
 80028b4:	fb02 f303 	mul.w	r3, r2, r3
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	4413      	add	r3, r2
 80028bc:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	22e8      	movs	r2, #232	; 0xe8
 80028c4:	fb02 f303 	mul.w	r3, r2, r3
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	4413      	add	r3, r2
 80028cc:	7f5b      	ldrb	r3, [r3, #29]
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	20e8      	movs	r0, #232	; 0xe8
 80028d4:	fb00 f303 	mul.w	r3, r0, r3
 80028d8:	6838      	ldr	r0, [r7, #0]
 80028da:	4403      	add	r3, r0
 80028dc:	440a      	add	r2, r1
 80028de:	b292      	uxth	r2, r2
 80028e0:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configb.rx_pec_match;
 80028e4:	6a3b      	ldr	r3, [r7, #32]
 80028e6:	22e8      	movs	r2, #232	; 0xe8
 80028e8:	fb02 f303 	mul.w	r3, r2, r3
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	4413      	add	r3, r2
 80028f0:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	22e8      	movs	r2, #232	; 0xe8
 80028f8:	fb02 f303 	mul.w	r3, r2, r3
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	4413      	add	r3, r2
 8002900:	7f5b      	ldrb	r3, [r3, #29]
 8002902:	b29a      	uxth	r2, r3
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	20e8      	movs	r0, #232	; 0xe8
 8002908:	fb00 f303 	mul.w	r3, r0, r3
 800290c:	6838      	ldr	r0, [r7, #0]
 800290e:	4403      	add	r3, r0
 8002910:	440a      	add	r2, r1
 8002912:	b292      	uxth	r2, r2
 8002914:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	3301      	adds	r3, #1
 800291c:	623b      	str	r3, [r7, #32]
 800291e:	79fb      	ldrb	r3, [r7, #7]
 8002920:	6a3a      	ldr	r2, [r7, #32]
 8002922:	429a      	cmp	r2, r3
 8002924:	dbc4      	blt.n	80028b0 <LTC681x_check_pec+0xb8>
		  }
		break;
 8002926:	e105      	b.n	8002b34 <LTC681x_check_pec+0x33c>
		case CELL:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002928:	2300      	movs	r3, #0
 800292a:	61fb      	str	r3, [r7, #28]
 800292c:	e050      	b.n	80029d0 <LTC681x_check_pec+0x1d8>
		  {
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 800292e:	2300      	movs	r3, #0
 8002930:	61bb      	str	r3, [r7, #24]
 8002932:	e043      	b.n	80029bc <LTC681x_check_pec+0x1c4>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].cells.pec_match[i];
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	22e8      	movs	r2, #232	; 0xe8
 8002938:	fb02 f303 	mul.w	r3, r2, r3
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	4413      	add	r3, r2
 8002940:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	22e8      	movs	r2, #232	; 0xe8
 8002948:	fb02 f303 	mul.w	r3, r2, r3
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	441a      	add	r2, r3
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	4413      	add	r3, r2
 8002954:	3342      	adds	r3, #66	; 0x42
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	b29a      	uxth	r2, r3
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	20e8      	movs	r0, #232	; 0xe8
 800295e:	fb00 f303 	mul.w	r3, r0, r3
 8002962:	6838      	ldr	r0, [r7, #0]
 8002964:	4403      	add	r3, r0
 8002966:	440a      	add	r2, r1
 8002968:	b292      	uxth	r2, r2
 800296a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.cell_pec[i] = ic[current_ic].crc_count.cell_pec[i] + ic[current_ic].cells.pec_match[i];
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	22e8      	movs	r2, #232	; 0xe8
 8002972:	fb02 f303 	mul.w	r3, r2, r3
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	441a      	add	r2, r3
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	3360      	adds	r3, #96	; 0x60
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	4413      	add	r3, r2
 8002982:	8899      	ldrh	r1, [r3, #4]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	22e8      	movs	r2, #232	; 0xe8
 8002988:	fb02 f303 	mul.w	r3, r2, r3
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	441a      	add	r2, r3
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	4413      	add	r3, r2
 8002994:	3342      	adds	r3, #66	; 0x42
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	b29b      	uxth	r3, r3
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	20e8      	movs	r0, #232	; 0xe8
 800299e:	fb00 f202 	mul.w	r2, r0, r2
 80029a2:	6838      	ldr	r0, [r7, #0]
 80029a4:	4402      	add	r2, r0
 80029a6:	440b      	add	r3, r1
 80029a8:	b299      	uxth	r1, r3
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	3360      	adds	r3, #96	; 0x60
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	460a      	mov	r2, r1
 80029b4:	809a      	strh	r2, [r3, #4]
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	3301      	adds	r3, #1
 80029ba:	61bb      	str	r3, [r7, #24]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 80029c2:	461a      	mov	r2, r3
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	4293      	cmp	r3, r2
 80029c8:	dbb4      	blt.n	8002934 <LTC681x_check_pec+0x13c>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3301      	adds	r3, #1
 80029ce:	61fb      	str	r3, [r7, #28]
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	69fa      	ldr	r2, [r7, #28]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	dbaa      	blt.n	800292e <LTC681x_check_pec+0x136>
			}
		  }
		break;
 80029d8:	e0ac      	b.n	8002b34 <LTC681x_check_pec+0x33c>
		case AUX:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	e04d      	b.n	8002a7c <LTC681x_check_pec+0x284>
		  {
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 80029e0:	2300      	movs	r3, #0
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	e040      	b.n	8002a68 <LTC681x_check_pec+0x270>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + (ic[current_ic].aux.pec_match[i]);
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	22e8      	movs	r2, #232	; 0xe8
 80029ea:	fb02 f303 	mul.w	r3, r2, r3
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	4413      	add	r3, r2
 80029f2:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	22e8      	movs	r2, #232	; 0xe8
 80029fa:	fb02 f303 	mul.w	r3, r2, r3
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	441a      	add	r2, r3
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4413      	add	r3, r2
 8002a06:	335a      	adds	r3, #90	; 0x5a
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	20e8      	movs	r0, #232	; 0xe8
 8002a10:	fb00 f303 	mul.w	r3, r0, r3
 8002a14:	6838      	ldr	r0, [r7, #0]
 8002a16:	4403      	add	r3, r0
 8002a18:	440a      	add	r2, r1
 8002a1a:	b292      	uxth	r2, r2
 8002a1c:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.aux_pec[i] = ic[current_ic].crc_count.aux_pec[i] + (ic[current_ic].aux.pec_match[i]);
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	22e8      	movs	r2, #232	; 0xe8
 8002a24:	fb02 f303 	mul.w	r3, r2, r3
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	3268      	adds	r2, #104	; 0x68
 8002a30:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	22e8      	movs	r2, #232	; 0xe8
 8002a38:	fb02 f303 	mul.w	r3, r2, r3
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	441a      	add	r2, r3
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4413      	add	r3, r2
 8002a44:	335a      	adds	r3, #90	; 0x5a
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	20e8      	movs	r0, #232	; 0xe8
 8002a4e:	fb00 f303 	mul.w	r3, r0, r3
 8002a52:	6838      	ldr	r0, [r7, #0]
 8002a54:	4403      	add	r3, r0
 8002a56:	440a      	add	r2, r1
 8002a58:	b291      	uxth	r1, r2
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	3268      	adds	r2, #104	; 0x68
 8002a5e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	3301      	adds	r3, #1
 8002a66:	613b      	str	r3, [r7, #16]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8002a6e:	461a      	mov	r2, r3
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4293      	cmp	r3, r2
 8002a74:	dbb7      	blt.n	80029e6 <LTC681x_check_pec+0x1ee>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	dbad      	blt.n	80029e0 <LTC681x_check_pec+0x1e8>
			}
		  }

		break;
 8002a84:	e056      	b.n	8002b34 <LTC681x_check_pec+0x33c>
		case STAT:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	e04d      	b.n	8002b28 <LTC681x_check_pec+0x330>
		  {

			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	e040      	b.n	8002b14 <LTC681x_check_pec+0x31c>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].stat.pec_match[i];
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	22e8      	movs	r2, #232	; 0xe8
 8002a96:	fb02 f303 	mul.w	r3, r2, r3
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	22e8      	movs	r2, #232	; 0xe8
 8002aa6:	fb02 f303 	mul.w	r3, r2, r3
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	441a      	add	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	336b      	adds	r3, #107	; 0x6b
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	20e8      	movs	r0, #232	; 0xe8
 8002abc:	fb00 f303 	mul.w	r3, r0, r3
 8002ac0:	6838      	ldr	r0, [r7, #0]
 8002ac2:	4403      	add	r3, r0
 8002ac4:	440a      	add	r2, r1
 8002ac6:	b292      	uxth	r2, r2
 8002ac8:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.stat_pec[i] = ic[current_ic].crc_count.stat_pec[i] + ic[current_ic].stat.pec_match[i];
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	22e8      	movs	r2, #232	; 0xe8
 8002ad0:	fb02 f303 	mul.w	r3, r2, r3
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	326c      	adds	r2, #108	; 0x6c
 8002adc:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	22e8      	movs	r2, #232	; 0xe8
 8002ae4:	fb02 f303 	mul.w	r3, r2, r3
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	441a      	add	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	4413      	add	r3, r2
 8002af0:	336b      	adds	r3, #107	; 0x6b
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	20e8      	movs	r0, #232	; 0xe8
 8002afa:	fb00 f303 	mul.w	r3, r0, r3
 8002afe:	6838      	ldr	r0, [r7, #0]
 8002b00:	4403      	add	r3, r0
 8002b02:	440a      	add	r2, r1
 8002b04:	b291      	uxth	r1, r2
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	326c      	adds	r2, #108	; 0x6c
 8002b0a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	3301      	adds	r3, #1
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	dbb7      	blt.n	8002a92 <LTC681x_check_pec+0x29a>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	3301      	adds	r3, #1
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	dbad      	blt.n	8002a8c <LTC681x_check_pec+0x294>
			}
		  }
		break;
 8002b30:	e000      	b.n	8002b34 <LTC681x_check_pec+0x33c>
		default:
		break;
 8002b32:	bf00      	nop
	}
}
 8002b34:	bf00      	nop
 8002b36:	372c      	adds	r7, #44	; 0x2c
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LTC681x_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC681x_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that stores the data
							 )
{
 8002b40:	b480      	push	{r7}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	6039      	str	r1, [r7, #0]
 8002b4a:	71fb      	strb	r3, [r7, #7]
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	e051      	b.n	8002bf6 <LTC681x_reset_crc_count+0xb6>
	{
		ic[current_ic].crc_count.pec_count = 0;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	22e8      	movs	r2, #232	; 0xe8
 8002b56:	fb02 f303 	mul.w	r3, r2, r3
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		ic[current_ic].crc_count.cfgr_pec = 0;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	22e8      	movs	r2, #232	; 0xe8
 8002b68:	fb02 f303 	mul.w	r3, r2, r3
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	4413      	add	r3, r2
 8002b70:	2200      	movs	r2, #0
 8002b72:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		for (int i=0; i<6; i++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	e00e      	b.n	8002b9a <LTC681x_reset_crc_count+0x5a>
		{
			ic[current_ic].crc_count.cell_pec[i]=0;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	22e8      	movs	r2, #232	; 0xe8
 8002b80:	fb02 f303 	mul.w	r3, r2, r3
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	441a      	add	r2, r3
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	3360      	adds	r3, #96	; 0x60
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	4413      	add	r3, r2
 8002b90:	2200      	movs	r2, #0
 8002b92:	809a      	strh	r2, [r3, #4]
		for (int i=0; i<6; i++)
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	3301      	adds	r3, #1
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	2b05      	cmp	r3, #5
 8002b9e:	dded      	ble.n	8002b7c <LTC681x_reset_crc_count+0x3c>

		}
		for (int i=0; i<4; i++)
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	e00d      	b.n	8002bc2 <LTC681x_reset_crc_count+0x82>
		{
			ic[current_ic].crc_count.aux_pec[i]=0;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	22e8      	movs	r2, #232	; 0xe8
 8002baa:	fb02 f303 	mul.w	r3, r2, r3
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	3268      	adds	r2, #104	; 0x68
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int i=0; i<4; i++)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	ddee      	ble.n	8002ba6 <LTC681x_reset_crc_count+0x66>
		}
		for (int i=0; i<2; i++)
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60bb      	str	r3, [r7, #8]
 8002bcc:	e00d      	b.n	8002bea <LTC681x_reset_crc_count+0xaa>
		{
			ic[current_ic].crc_count.stat_pec[i]=0;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	22e8      	movs	r2, #232	; 0xe8
 8002bd2:	fb02 f303 	mul.w	r3, r2, r3
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	4413      	add	r3, r2
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	326c      	adds	r2, #108	; 0x6c
 8002bde:	2100      	movs	r1, #0
 8002be0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int i=0; i<2; i++)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	3301      	adds	r3, #1
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	ddee      	ble.n	8002bce <LTC681x_reset_crc_count+0x8e>
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	dba9      	blt.n	8002b52 <LTC681x_reset_crc_count+0x12>
		}
	}
}
 8002bfe:	bf00      	nop
 8002c00:	bf00      	nop
 8002c02:	371c      	adds	r7, #28
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <LTC681x_init_cfg>:

/* Helper function to initialize CFG variables */
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that stores the data
					  )
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	6039      	str	r1, [r7, #0]
 8002c16:	71fb      	strb	r3, [r7, #7]
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8002c18:	2300      	movs	r3, #0
 8002c1a:	73fb      	strb	r3, [r7, #15]
 8002c1c:	e015      	b.n	8002c4a <LTC681x_init_cfg+0x3e>
	{
		for (int j =0; j<6; j++)
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	e00c      	b.n	8002c3e <LTC681x_init_cfg+0x32>
		{
		  ic[current_ic].config.tx_data[j] = 0;
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	22e8      	movs	r2, #232	; 0xe8
 8002c28:	fb02 f303 	mul.w	r3, r2, r3
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	441a      	add	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4413      	add	r3, r2
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]
		for (int j =0; j<6; j++)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b05      	cmp	r3, #5
 8002c42:	ddef      	ble.n	8002c24 <LTC681x_init_cfg+0x18>
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	3301      	adds	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
 8002c4a:	7bfa      	ldrb	r2, [r7, #15]
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d3e5      	bcc.n	8002c1e <LTC681x_init_cfg+0x12>
		}
	}
}
 8002c52:	bf00      	nop
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <LTC681x_set_cfgr>:
					 bool dcc[12], // The DCC bits
					 bool dcto[4], // The Dcto bits
					 uint16_t uv, // The UV value
					 uint16_t  ov // The OV value
					 )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6039      	str	r1, [r7, #0]
 8002c68:	4611      	mov	r1, r2
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	71fb      	strb	r3, [r7, #7]
 8002c70:	460b      	mov	r3, r1
 8002c72:	71bb      	strb	r3, [r7, #6]
 8002c74:	4613      	mov	r3, r2
 8002c76:	717b      	strb	r3, [r7, #5]
	LTC681x_set_cfgr_refon(nIC,ic,refon);
 8002c78:	79ba      	ldrb	r2, [r7, #6]
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	6839      	ldr	r1, [r7, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 f828 	bl	8002cd4 <LTC681x_set_cfgr_refon>
	LTC681x_set_cfgr_adcopt(nIC,ic,adcopt);
 8002c84:	797a      	ldrb	r2, [r7, #5]
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	6839      	ldr	r1, [r7, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 f856 	bl	8002d3c <LTC681x_set_cfgr_adcopt>
	LTC681x_set_cfgr_gpio(nIC,ic,gpio);
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	6839      	ldr	r1, [r7, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 f884 	bl	8002da4 <LTC681x_set_cfgr_gpio>
	LTC681x_set_cfgr_dis(nIC,ic,dcc);
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	6839      	ldr	r1, [r7, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 f8ce 	bl	8002e44 <LTC681x_set_cfgr_dis>
	LTC681x_set_cfgr_dcto(nIC,ic,dcto);
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	6839      	ldr	r1, [r7, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 f957 	bl	8002f62 <LTC681x_set_cfgr_dcto>
	LTC681x_set_cfgr_uv(nIC, ic, uv);
 8002cb4:	8bba      	ldrh	r2, [r7, #28]
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	6839      	ldr	r1, [r7, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 f9a1 	bl	8003002 <LTC681x_set_cfgr_uv>
	LTC681x_set_cfgr_ov(nIC, ic, ov);
 8002cc0:	8c3a      	ldrh	r2, [r7, #32]
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	6839      	ldr	r1, [r7, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 f9e1 	bl	800308e <LTC681x_set_cfgr_ov>
}
 8002ccc:	bf00      	nop
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <LTC681x_set_cfgr_refon>:

/* Helper function to set the REFON bit */
void LTC681x_set_cfgr_refon(uint8_t nIC, cell_asic *ic, bool refon)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	6039      	str	r1, [r7, #0]
 8002cde:	71fb      	strb	r3, [r7, #7]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	71bb      	strb	r3, [r7, #6]
	if (refon) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x04;
 8002ce4:	79bb      	ldrb	r3, [r7, #6]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d011      	beq.n	8002d0e <LTC681x_set_cfgr_refon+0x3a>
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	22e8      	movs	r2, #232	; 0xe8
 8002cee:	fb02 f303 	mul.w	r3, r2, r3
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	781a      	ldrb	r2, [r3, #0]
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	21e8      	movs	r1, #232	; 0xe8
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	6839      	ldr	r1, [r7, #0]
 8002d02:	440b      	add	r3, r1
 8002d04:	f042 0204 	orr.w	r2, r2, #4
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
}
 8002d0c:	e010      	b.n	8002d30 <LTC681x_set_cfgr_refon+0x5c>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	22e8      	movs	r2, #232	; 0xe8
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	4413      	add	r3, r2
 8002d1a:	781a      	ldrb	r2, [r3, #0]
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	21e8      	movs	r1, #232	; 0xe8
 8002d20:	fb01 f303 	mul.w	r3, r1, r3
 8002d24:	6839      	ldr	r1, [r7, #0]
 8002d26:	440b      	add	r3, r1
 8002d28:	f022 0204 	bic.w	r2, r2, #4
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	701a      	strb	r2, [r3, #0]
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <LTC681x_set_cfgr_adcopt>:

/* Helper function to set the ADCOPT bit */
void LTC681x_set_cfgr_adcopt(uint8_t nIC, cell_asic *ic, bool adcopt)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	6039      	str	r1, [r7, #0]
 8002d46:	71fb      	strb	r3, [r7, #7]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	71bb      	strb	r3, [r7, #6]
	if (adcopt) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x01;
 8002d4c:	79bb      	ldrb	r3, [r7, #6]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d011      	beq.n	8002d76 <LTC681x_set_cfgr_adcopt+0x3a>
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	22e8      	movs	r2, #232	; 0xe8
 8002d56:	fb02 f303 	mul.w	r3, r2, r3
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	781a      	ldrb	r2, [r3, #0]
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	21e8      	movs	r1, #232	; 0xe8
 8002d64:	fb01 f303 	mul.w	r3, r1, r3
 8002d68:	6839      	ldr	r1, [r7, #0]
 8002d6a:	440b      	add	r3, r1
 8002d6c:	f042 0201 	orr.w	r2, r2, #1
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
}
 8002d74:	e010      	b.n	8002d98 <LTC681x_set_cfgr_adcopt+0x5c>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	22e8      	movs	r2, #232	; 0xe8
 8002d7a:	fb02 f303 	mul.w	r3, r2, r3
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	4413      	add	r3, r2
 8002d82:	781a      	ldrb	r2, [r3, #0]
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	21e8      	movs	r1, #232	; 0xe8
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	6839      	ldr	r1, [r7, #0]
 8002d8e:	440b      	add	r3, r1
 8002d90:	f022 0201 	bic.w	r2, r2, #1
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	701a      	strb	r2, [r3, #0]
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <LTC681x_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void LTC681x_set_cfgr_gpio(uint8_t nIC, cell_asic *ic,bool gpio[5])
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	73fb      	strb	r3, [r7, #15]
	for (int i =0; i<5; i++)
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	e03b      	b.n	8002e30 <LTC681x_set_cfgr_gpio+0x8c>
	{
		if (gpio[i])ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|(0x01<<(i+3));
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d018      	beq.n	8002df6 <LTC681x_set_cfgr_gpio+0x52>
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	22e8      	movs	r2, #232	; 0xe8
 8002dc8:	fb02 f303 	mul.w	r3, r2, r3
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	4413      	add	r3, r2
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	b25a      	sxtb	r2, r3
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	3303      	adds	r3, #3
 8002dd8:	2101      	movs	r1, #1
 8002dda:	fa01 f303 	lsl.w	r3, r1, r3
 8002dde:	b25b      	sxtb	r3, r3
 8002de0:	4313      	orrs	r3, r2
 8002de2:	b259      	sxtb	r1, r3
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	22e8      	movs	r2, #232	; 0xe8
 8002de8:	fb02 f303 	mul.w	r3, r2, r3
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	4413      	add	r3, r2
 8002df0:	b2ca      	uxtb	r2, r1
 8002df2:	701a      	strb	r2, [r3, #0]
 8002df4:	e019      	b.n	8002e2a <LTC681x_set_cfgr_gpio+0x86>
		else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&(~(0x01<<(i+3)));
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	22e8      	movs	r2, #232	; 0xe8
 8002dfa:	fb02 f303 	mul.w	r3, r2, r3
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	4413      	add	r3, r2
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	b25a      	sxtb	r2, r3
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	3303      	adds	r3, #3
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e10:	b25b      	sxtb	r3, r3
 8002e12:	43db      	mvns	r3, r3
 8002e14:	b25b      	sxtb	r3, r3
 8002e16:	4013      	ands	r3, r2
 8002e18:	b259      	sxtb	r1, r3
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
 8002e1c:	22e8      	movs	r2, #232	; 0xe8
 8002e1e:	fb02 f303 	mul.w	r3, r2, r3
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	4413      	add	r3, r2
 8002e26:	b2ca      	uxtb	r2, r1
 8002e28:	701a      	strb	r2, [r3, #0]
	for (int i =0; i<5; i++)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	ddc0      	ble.n	8002db8 <LTC681x_set_cfgr_gpio+0x14>
	}
}
 8002e36:	bf00      	nop
 8002e38:	bf00      	nop
 8002e3a:	371c      	adds	r7, #28
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <LTC681x_set_cfgr_dis>:

/* Helper function to control discharge */
void LTC681x_set_cfgr_dis(uint8_t nIC, cell_asic *ic,bool dcc[12])
{
 8002e44:	b480      	push	{r7}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
 8002e50:	73fb      	strb	r3, [r7, #15]
	for (int i =0; i<8; i++)
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	e039      	b.n	8002ecc <LTC681x_set_cfgr_dis+0x88>
	{
		if (dcc[i])ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]|(0x01<<i);
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d017      	beq.n	8002e94 <LTC681x_set_cfgr_dis+0x50>
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	22e8      	movs	r2, #232	; 0xe8
 8002e68:	fb02 f303 	mul.w	r3, r2, r3
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	4413      	add	r3, r2
 8002e70:	791b      	ldrb	r3, [r3, #4]
 8002e72:	b25a      	sxtb	r2, r3
 8002e74:	2101      	movs	r1, #1
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7c:	b25b      	sxtb	r3, r3
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	b259      	sxtb	r1, r3
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
 8002e84:	22e8      	movs	r2, #232	; 0xe8
 8002e86:	fb02 f303 	mul.w	r3, r2, r3
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	b2ca      	uxtb	r2, r1
 8002e90:	711a      	strb	r2, [r3, #4]
 8002e92:	e018      	b.n	8002ec6 <LTC681x_set_cfgr_dis+0x82>
		else ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]& (~(0x01<<i));
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	22e8      	movs	r2, #232	; 0xe8
 8002e98:	fb02 f303 	mul.w	r3, r2, r3
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	791b      	ldrb	r3, [r3, #4]
 8002ea2:	b25a      	sxtb	r2, r3
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eac:	b25b      	sxtb	r3, r3
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	b25b      	sxtb	r3, r3
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	b259      	sxtb	r1, r3
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
 8002eb8:	22e8      	movs	r2, #232	; 0xe8
 8002eba:	fb02 f303 	mul.w	r3, r2, r3
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	b2ca      	uxtb	r2, r1
 8002ec4:	711a      	strb	r2, [r3, #4]
	for (int i =0; i<8; i++)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2b07      	cmp	r3, #7
 8002ed0:	ddc2      	ble.n	8002e58 <LTC681x_set_cfgr_dis+0x14>
	}
	for (int i =0; i<4; i++)
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	e03a      	b.n	8002f4e <LTC681x_set_cfgr_dis+0x10a>
	{
		if (dcc[i+8])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<i);
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	3308      	adds	r3, #8
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	4413      	add	r3, r2
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d017      	beq.n	8002f16 <LTC681x_set_cfgr_dis+0xd2>
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
 8002ee8:	22e8      	movs	r2, #232	; 0xe8
 8002eea:	fb02 f303 	mul.w	r3, r2, r3
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	795b      	ldrb	r3, [r3, #5]
 8002ef4:	b25a      	sxtb	r2, r3
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	fa01 f303 	lsl.w	r3, r1, r3
 8002efe:	b25b      	sxtb	r3, r3
 8002f00:	4313      	orrs	r3, r2
 8002f02:	b259      	sxtb	r1, r3
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	22e8      	movs	r2, #232	; 0xe8
 8002f08:	fb02 f303 	mul.w	r3, r2, r3
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	4413      	add	r3, r2
 8002f10:	b2ca      	uxtb	r2, r1
 8002f12:	715a      	strb	r2, [r3, #5]
 8002f14:	e018      	b.n	8002f48 <LTC681x_set_cfgr_dis+0x104>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<i));
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
 8002f18:	22e8      	movs	r2, #232	; 0xe8
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	4413      	add	r3, r2
 8002f22:	795b      	ldrb	r3, [r3, #5]
 8002f24:	b25a      	sxtb	r2, r3
 8002f26:	2101      	movs	r1, #1
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2e:	b25b      	sxtb	r3, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	b25b      	sxtb	r3, r3
 8002f34:	4013      	ands	r3, r2
 8002f36:	b259      	sxtb	r1, r3
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
 8002f3a:	22e8      	movs	r2, #232	; 0xe8
 8002f3c:	fb02 f303 	mul.w	r3, r2, r3
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	4413      	add	r3, r2
 8002f44:	b2ca      	uxtb	r2, r1
 8002f46:	715a      	strb	r2, [r3, #5]
	for (int i =0; i<4; i++)
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	ddc1      	ble.n	8002ed8 <LTC681x_set_cfgr_dis+0x94>
	}
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop
 8002f58:	371c      	adds	r7, #28
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <LTC681x_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic,bool dcto[4])
{
 8002f62:	b480      	push	{r7}
 8002f64:	b087      	sub	sp, #28
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	4603      	mov	r3, r0
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	607a      	str	r2, [r7, #4]
 8002f6e:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<4;i++)
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	e03b      	b.n	8002fee <LTC681x_set_cfgr_dcto+0x8c>
	{
		if(dcto[i])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<(i+4));
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d018      	beq.n	8002fb4 <LTC681x_set_cfgr_dcto+0x52>
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
 8002f84:	22e8      	movs	r2, #232	; 0xe8
 8002f86:	fb02 f303 	mul.w	r3, r2, r3
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	795b      	ldrb	r3, [r3, #5]
 8002f90:	b25a      	sxtb	r2, r3
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	3304      	adds	r3, #4
 8002f96:	2101      	movs	r1, #1
 8002f98:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9c:	b25b      	sxtb	r3, r3
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	b259      	sxtb	r1, r3
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	22e8      	movs	r2, #232	; 0xe8
 8002fa6:	fb02 f303 	mul.w	r3, r2, r3
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	4413      	add	r3, r2
 8002fae:	b2ca      	uxtb	r2, r1
 8002fb0:	715a      	strb	r2, [r3, #5]
 8002fb2:	e019      	b.n	8002fe8 <LTC681x_set_cfgr_dcto+0x86>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<(i+4)));
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
 8002fb6:	22e8      	movs	r2, #232	; 0xe8
 8002fb8:	fb02 f303 	mul.w	r3, r2, r3
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	795b      	ldrb	r3, [r3, #5]
 8002fc2:	b25a      	sxtb	r2, r3
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	2101      	movs	r1, #1
 8002fca:	fa01 f303 	lsl.w	r3, r1, r3
 8002fce:	b25b      	sxtb	r3, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	b25b      	sxtb	r3, r3
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	b259      	sxtb	r1, r3
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
 8002fda:	22e8      	movs	r2, #232	; 0xe8
 8002fdc:	fb02 f303 	mul.w	r3, r2, r3
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	b2ca      	uxtb	r2, r1
 8002fe6:	715a      	strb	r2, [r3, #5]
	for(int i =0;i<4;i++)
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	3301      	adds	r3, #1
 8002fec:	617b      	str	r3, [r7, #20]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	ddc0      	ble.n	8002f76 <LTC681x_set_cfgr_dcto+0x14>
	}
}
 8002ff4:	bf00      	nop
 8002ff6:	bf00      	nop
 8002ff8:	371c      	adds	r7, #28
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <LTC681x_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic *ic,uint16_t uv)
{
 8003002:	b480      	push	{r7}
 8003004:	b085      	sub	sp, #20
 8003006:	af00      	add	r7, sp, #0
 8003008:	4603      	mov	r3, r0
 800300a:	6039      	str	r1, [r7, #0]
 800300c:	71fb      	strb	r3, [r7, #7]
 800300e:	4613      	mov	r3, r2
 8003010:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (uv/16)-1;
 8003012:	88bb      	ldrh	r3, [r7, #4]
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	b29b      	uxth	r3, r3
 8003018:	3b01      	subs	r3, #1
 800301a:	81fb      	strh	r3, [r7, #14]
	ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	22e8      	movs	r2, #232	; 0xe8
 8003020:	fb02 f303 	mul.w	r3, r2, r3
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	4413      	add	r3, r2
 8003028:	89fa      	ldrh	r2, [r7, #14]
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	705a      	strb	r2, [r3, #1]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0xF0;
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	22e8      	movs	r2, #232	; 0xe8
 8003032:	fb02 f303 	mul.w	r3, r2, r3
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	4413      	add	r3, r2
 800303a:	789a      	ldrb	r2, [r3, #2]
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	21e8      	movs	r1, #232	; 0xe8
 8003040:	fb01 f303 	mul.w	r3, r1, r3
 8003044:	6839      	ldr	r1, [r7, #0]
 8003046:	440b      	add	r3, r1
 8003048:	f022 020f 	bic.w	r2, r2, #15
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x0F00 & tmp)>>8);
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	22e8      	movs	r2, #232	; 0xe8
 8003054:	fb02 f303 	mul.w	r3, r2, r3
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	4413      	add	r3, r2
 800305c:	789b      	ldrb	r3, [r3, #2]
 800305e:	b25a      	sxtb	r2, r3
 8003060:	89fb      	ldrh	r3, [r7, #14]
 8003062:	0a1b      	lsrs	r3, r3, #8
 8003064:	b29b      	uxth	r3, r3
 8003066:	b25b      	sxtb	r3, r3
 8003068:	f003 030f 	and.w	r3, r3, #15
 800306c:	b25b      	sxtb	r3, r3
 800306e:	4313      	orrs	r3, r2
 8003070:	b259      	sxtb	r1, r3
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	22e8      	movs	r2, #232	; 0xe8
 8003076:	fb02 f303 	mul.w	r3, r2, r3
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	4413      	add	r3, r2
 800307e:	b2ca      	uxtb	r2, r1
 8003080:	709a      	strb	r2, [r3, #2]
}
 8003082:	bf00      	nop
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <LTC681x_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void LTC681x_set_cfgr_ov(uint8_t nIC, cell_asic *ic,uint16_t ov)
{
 800308e:	b480      	push	{r7}
 8003090:	b085      	sub	sp, #20
 8003092:	af00      	add	r7, sp, #0
 8003094:	4603      	mov	r3, r0
 8003096:	6039      	str	r1, [r7, #0]
 8003098:	71fb      	strb	r3, [r7, #7]
 800309a:	4613      	mov	r3, r2
 800309c:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (ov/16);
 800309e:	88bb      	ldrh	r3, [r7, #4]
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	81fb      	strh	r3, [r7, #14]
	ic[nIC].config.tx_data[3] = 0x00FF & (tmp>>4);
 80030a4:	89fb      	ldrh	r3, [r7, #14]
 80030a6:	091b      	lsrs	r3, r3, #4
 80030a8:	b299      	uxth	r1, r3
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	22e8      	movs	r2, #232	; 0xe8
 80030ae:	fb02 f303 	mul.w	r3, r2, r3
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	4413      	add	r3, r2
 80030b6:	b2ca      	uxtb	r2, r1
 80030b8:	70da      	strb	r2, [r3, #3]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0x0F;
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	22e8      	movs	r2, #232	; 0xe8
 80030be:	fb02 f303 	mul.w	r3, r2, r3
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	4413      	add	r3, r2
 80030c6:	789a      	ldrb	r2, [r3, #2]
 80030c8:	79fb      	ldrb	r3, [r7, #7]
 80030ca:	21e8      	movs	r1, #232	; 0xe8
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	6839      	ldr	r1, [r7, #0]
 80030d2:	440b      	add	r3, r1
 80030d4:	f002 020f 	and.w	r2, r2, #15
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x000F & tmp)<<4);
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	22e8      	movs	r2, #232	; 0xe8
 80030e0:	fb02 f303 	mul.w	r3, r2, r3
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	4413      	add	r3, r2
 80030e8:	789b      	ldrb	r3, [r3, #2]
 80030ea:	b25a      	sxtb	r2, r3
 80030ec:	89fb      	ldrh	r3, [r7, #14]
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	b25b      	sxtb	r3, r3
 80030f2:	4313      	orrs	r3, r2
 80030f4:	b259      	sxtb	r1, r3
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	22e8      	movs	r2, #232	; 0xe8
 80030fa:	fb02 f303 	mul.w	r3, r2, r3
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	4413      	add	r3, r2
 8003102:	b2ca      	uxtb	r2, r1
 8003104:	709a      	strb	r2, [r3, #2]
}
 8003106:	bf00      	nop
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <cs_low>:
#include "stm32f4xx_hal.h"

extern SPI_HandleTypeDef hspi1;

void cs_low(uint8_t pin)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800311e:	2200      	movs	r2, #0
 8003120:	2140      	movs	r1, #64	; 0x40
 8003122:	4803      	ldr	r0, [pc, #12]	; (8003130 <cs_low+0x1c>)
 8003124:	f001 fb02 	bl	800472c <HAL_GPIO_WritePin>
}
 8003128:	bf00      	nop
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40020400 	.word	0x40020400

08003134 <cs_high>:

void cs_high(uint8_t pin)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800313e:	2201      	movs	r2, #1
 8003140:	2140      	movs	r1, #64	; 0x40
 8003142:	4803      	ldr	r0, [pc, #12]	; (8003150 <cs_high+0x1c>)
 8003144:	f001 faf2 	bl	800472c <HAL_GPIO_WritePin>
}
 8003148:	bf00      	nop
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40020400 	.word	0x40020400

08003154 <delay_u>:

void delay_u(uint16_t micro)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	80fb      	strh	r3, [r7, #6]
  HAL_Delay(1);
 800315e:	2001      	movs	r0, #1
 8003160:	f000 fce6 	bl	8003b30 <HAL_Delay>
}
 8003164:	bf00      	nop
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <spi_write_array>:
Writes an array of bytes out of the SPI port
*/
void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
                     uint8_t data[] //Array of bytes to be written on the SPI port
                    )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	6039      	str	r1, [r7, #0]
 8003176:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi1, data, len, 100);
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	b29a      	uxth	r2, r3
 800317c:	2364      	movs	r3, #100	; 0x64
 800317e:	6839      	ldr	r1, [r7, #0]
 8003180:	4803      	ldr	r0, [pc, #12]	; (8003190 <spi_write_array+0x24>)
 8003182:	f002 f95e 	bl	8005442 <HAL_SPI_Transmit>
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	2000089c 	.word	0x2000089c

08003194 <spi_write_read>:
void spi_write_read(uint8_t tx_Data[],//array of data to be written on SPI port
                    uint8_t tx_len, //length of the tx data arry
                    uint8_t *rx_data,//Input: array that will store the data read by the SPI port
                    uint8_t rx_len //Option: number of bytes to be read from the SPI port
                   )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	607a      	str	r2, [r7, #4]
 800319e:	461a      	mov	r2, r3
 80031a0:	460b      	mov	r3, r1
 80031a2:	72fb      	strb	r3, [r7, #11]
 80031a4:	4613      	mov	r3, r2
 80031a6:	72bb      	strb	r3, [r7, #10]
  for (uint8_t i = 0; i < tx_len; i++)
 80031a8:	2300      	movs	r3, #0
 80031aa:	75fb      	strb	r3, [r7, #23]
 80031ac:	e00a      	b.n	80031c4 <spi_write_read+0x30>
  {
    HAL_SPI_Transmit(&hspi1, &tx_Data[i], 1, 100);
 80031ae:	7dfb      	ldrb	r3, [r7, #23]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	18d1      	adds	r1, r2, r3
 80031b4:	2364      	movs	r3, #100	; 0x64
 80031b6:	2201      	movs	r2, #1
 80031b8:	4810      	ldr	r0, [pc, #64]	; (80031fc <spi_write_read+0x68>)
 80031ba:	f002 f942 	bl	8005442 <HAL_SPI_Transmit>
  for (uint8_t i = 0; i < tx_len; i++)
 80031be:	7dfb      	ldrb	r3, [r7, #23]
 80031c0:	3301      	adds	r3, #1
 80031c2:	75fb      	strb	r3, [r7, #23]
 80031c4:	7dfa      	ldrb	r2, [r7, #23]
 80031c6:	7afb      	ldrb	r3, [r7, #11]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d3f0      	bcc.n	80031ae <spi_write_read+0x1a>
  }

  for (uint8_t i = 0; i < rx_len; i++)
 80031cc:	2300      	movs	r3, #0
 80031ce:	75bb      	strb	r3, [r7, #22]
 80031d0:	e00a      	b.n	80031e8 <spi_write_read+0x54>
  {
	HAL_SPI_Receive(&hspi1, &rx_data[i], 1, 100);
 80031d2:	7dbb      	ldrb	r3, [r7, #22]
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	18d1      	adds	r1, r2, r3
 80031d8:	2364      	movs	r3, #100	; 0x64
 80031da:	2201      	movs	r2, #1
 80031dc:	4807      	ldr	r0, [pc, #28]	; (80031fc <spi_write_read+0x68>)
 80031de:	f002 fa6c 	bl	80056ba <HAL_SPI_Receive>
  for (uint8_t i = 0; i < rx_len; i++)
 80031e2:	7dbb      	ldrb	r3, [r7, #22]
 80031e4:	3301      	adds	r3, #1
 80031e6:	75bb      	strb	r3, [r7, #22]
 80031e8:	7dba      	ldrb	r2, [r7, #22]
 80031ea:	7abb      	ldrb	r3, [r7, #10]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d3f0      	bcc.n	80031d2 <spi_write_read+0x3e>
  }

}
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	2000089c 	.word	0x2000089c

08003200 <spi_read_byte>:


uint8_t spi_read_byte(uint8_t tx_dat)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	71fb      	strb	r3, [r7, #7]
  uint8_t data;
  HAL_SPI_Receive(&hspi1, &data, 1, 100);
 800320a:	f107 010f 	add.w	r1, r7, #15
 800320e:	2364      	movs	r3, #100	; 0x64
 8003210:	2201      	movs	r2, #1
 8003212:	4804      	ldr	r0, [pc, #16]	; (8003224 <spi_read_byte+0x24>)
 8003214:	f002 fa51 	bl	80056ba <HAL_SPI_Receive>
  return(data);
 8003218:	7bfb      	ldrb	r3, [r7, #15]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	2000089c 	.word	0x2000089c

08003228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800322e:	f000 fc0d 	bl	8003a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003232:	f000 f84b 	bl	80032cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003236:	f000 f94d 	bl	80034d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800323a:	f000 f921 	bl	8003480 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 800323e:	f000 f8b3 	bl	80033a8 <MX_CAN1_Init>
  MX_SPI1_Init();
 8003242:	f000 f8e7 	bl	8003414 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  FEB_LTC6811_Setup();
 8003246:	f7fd feb9 	bl	8000fbc <FEB_LTC6811_Setup>
  FEB_BMS_Shutdown_Startup();
 800324a:	f7fd fe9f 	bl	8000f8c <FEB_BMS_Shutdown_Startup>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// *********************** Voltage ***********************
	FEB_LTC6811_Poll_Voltage();
 800324e:	f7fd fef7 	bl	8001040 <FEB_LTC6811_Poll_Voltage>
	FEB_LTC6811_Validate_Voltage();
 8003252:	f7fe f911 	bl	8001478 <FEB_LTC6811_Validate_Voltage>

	// UART transmit voltage
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8003256:	2300      	movs	r3, #0
 8003258:	71fb      	strb	r3, [r7, #7]
 800325a:	e011      	b.n	8003280 <main+0x58>
		UART_Str = FEB_LTC6811_UART_String_Voltage(bank_idx);
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	4618      	mov	r0, r3
 8003260:	f7fe f950 	bl	8001504 <FEB_LTC6811_UART_String_Voltage>
 8003264:	6038      	str	r0, [r7, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) UART_Str, strlen(UART_Str), 100);
 8003266:	6838      	ldr	r0, [r7, #0]
 8003268:	f7fc ffd2 	bl	8000210 <strlen>
 800326c:	4603      	mov	r3, r0
 800326e:	b29a      	uxth	r2, r3
 8003270:	2364      	movs	r3, #100	; 0x64
 8003272:	6839      	ldr	r1, [r7, #0]
 8003274:	4814      	ldr	r0, [pc, #80]	; (80032c8 <main+0xa0>)
 8003276:	f002 fe50 	bl	8005f1a <HAL_UART_Transmit>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	3301      	adds	r3, #1
 800327e:	71fb      	strb	r3, [r7, #7]
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0ea      	beq.n	800325c <main+0x34>
	}


	// *********************** Temperature ***********************
	FEB_LTC6811_Poll_Temperature();
 8003286:	f7fe f9ab 	bl	80015e0 <FEB_LTC6811_Poll_Temperature>
	FEB_LTC6811_Validate_Temperature();
 800328a:	f7fe fc5b 	bl	8001b44 <FEB_LTC6811_Validate_Temperature>

	// UART transmit temperature
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 800328e:	2300      	movs	r3, #0
 8003290:	71bb      	strb	r3, [r7, #6]
 8003292:	e011      	b.n	80032b8 <main+0x90>
		UART_Str = FEB_LTC6811_UART_String_Temperature(bank_idx);
 8003294:	79bb      	ldrb	r3, [r7, #6]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe fc92 	bl	8001bc0 <FEB_LTC6811_UART_String_Temperature>
 800329c:	6038      	str	r0, [r7, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) UART_Str, strlen(UART_Str), 100);
 800329e:	6838      	ldr	r0, [r7, #0]
 80032a0:	f7fc ffb6 	bl	8000210 <strlen>
 80032a4:	4603      	mov	r3, r0
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	2364      	movs	r3, #100	; 0x64
 80032aa:	6839      	ldr	r1, [r7, #0]
 80032ac:	4806      	ldr	r0, [pc, #24]	; (80032c8 <main+0xa0>)
 80032ae:	f002 fe34 	bl	8005f1a <HAL_UART_Transmit>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 80032b2:	79bb      	ldrb	r3, [r7, #6]
 80032b4:	3301      	adds	r3, #1
 80032b6:	71bb      	strb	r3, [r7, #6]
 80032b8:	79bb      	ldrb	r3, [r7, #6]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0ea      	beq.n	8003294 <main+0x6c>
	}

	HAL_Delay(1000);
 80032be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032c2:	f000 fc35 	bl	8003b30 <HAL_Delay>
	FEB_LTC6811_Poll_Voltage();
 80032c6:	e7c2      	b.n	800324e <main+0x26>
 80032c8:	200008f4 	.word	0x200008f4

080032cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b094      	sub	sp, #80	; 0x50
 80032d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032d2:	f107 031c 	add.w	r3, r7, #28
 80032d6:	2234      	movs	r2, #52	; 0x34
 80032d8:	2100      	movs	r1, #0
 80032da:	4618      	mov	r0, r3
 80032dc:	f003 f9cc 	bl	8006678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032e0:	f107 0308 	add.w	r3, r7, #8
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	60da      	str	r2, [r3, #12]
 80032ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032f0:	2300      	movs	r3, #0
 80032f2:	607b      	str	r3, [r7, #4]
 80032f4:	4b2a      	ldr	r3, [pc, #168]	; (80033a0 <SystemClock_Config+0xd4>)
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	4a29      	ldr	r2, [pc, #164]	; (80033a0 <SystemClock_Config+0xd4>)
 80032fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003300:	4b27      	ldr	r3, [pc, #156]	; (80033a0 <SystemClock_Config+0xd4>)
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003308:	607b      	str	r3, [r7, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800330c:	2300      	movs	r3, #0
 800330e:	603b      	str	r3, [r7, #0]
 8003310:	4b24      	ldr	r3, [pc, #144]	; (80033a4 <SystemClock_Config+0xd8>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003318:	4a22      	ldr	r2, [pc, #136]	; (80033a4 <SystemClock_Config+0xd8>)
 800331a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800331e:	6013      	str	r3, [r2, #0]
 8003320:	4b20      	ldr	r3, [pc, #128]	; (80033a4 <SystemClock_Config+0xd8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003328:	603b      	str	r3, [r7, #0]
 800332a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800332c:	2302      	movs	r3, #2
 800332e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003330:	2301      	movs	r3, #1
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003334:	2310      	movs	r3, #16
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003338:	2302      	movs	r3, #2
 800333a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800333c:	2300      	movs	r3, #0
 800333e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003340:	2308      	movs	r3, #8
 8003342:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003348:	2302      	movs	r3, #2
 800334a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800334c:	2302      	movs	r3, #2
 800334e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003350:	2302      	movs	r3, #2
 8003352:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003354:	f107 031c 	add.w	r3, r7, #28
 8003358:	4618      	mov	r0, r3
 800335a:	f001 fd4b 	bl	8004df4 <HAL_RCC_OscConfig>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003364:	f000 f91c 	bl	80035a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003368:	230f      	movs	r3, #15
 800336a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800336c:	2302      	movs	r3, #2
 800336e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003370:	2300      	movs	r3, #0
 8003372:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003374:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003378:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800337a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800337e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003380:	f107 0308 	add.w	r3, r7, #8
 8003384:	2104      	movs	r1, #4
 8003386:	4618      	mov	r0, r3
 8003388:	f001 f9ea 	bl	8004760 <HAL_RCC_ClockConfig>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8003392:	f000 f905 	bl	80035a0 <Error_Handler>
  }
}
 8003396:	bf00      	nop
 8003398:	3750      	adds	r7, #80	; 0x50
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40007000 	.word	0x40007000

080033a8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80033ac:	4b17      	ldr	r3, [pc, #92]	; (800340c <MX_CAN1_Init+0x64>)
 80033ae:	4a18      	ldr	r2, [pc, #96]	; (8003410 <MX_CAN1_Init+0x68>)
 80033b0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80033b2:	4b16      	ldr	r3, [pc, #88]	; (800340c <MX_CAN1_Init+0x64>)
 80033b4:	2210      	movs	r2, #16
 80033b6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80033b8:	4b14      	ldr	r3, [pc, #80]	; (800340c <MX_CAN1_Init+0x64>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80033be:	4b13      	ldr	r3, [pc, #76]	; (800340c <MX_CAN1_Init+0x64>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80033c4:	4b11      	ldr	r3, [pc, #68]	; (800340c <MX_CAN1_Init+0x64>)
 80033c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033ca:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80033cc:	4b0f      	ldr	r3, [pc, #60]	; (800340c <MX_CAN1_Init+0x64>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80033d2:	4b0e      	ldr	r3, [pc, #56]	; (800340c <MX_CAN1_Init+0x64>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80033d8:	4b0c      	ldr	r3, [pc, #48]	; (800340c <MX_CAN1_Init+0x64>)
 80033da:	2200      	movs	r2, #0
 80033dc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80033de:	4b0b      	ldr	r3, [pc, #44]	; (800340c <MX_CAN1_Init+0x64>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80033e4:	4b09      	ldr	r3, [pc, #36]	; (800340c <MX_CAN1_Init+0x64>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80033ea:	4b08      	ldr	r3, [pc, #32]	; (800340c <MX_CAN1_Init+0x64>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80033f0:	4b06      	ldr	r3, [pc, #24]	; (800340c <MX_CAN1_Init+0x64>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80033f6:	4805      	ldr	r0, [pc, #20]	; (800340c <MX_CAN1_Init+0x64>)
 80033f8:	f000 fbbe 	bl	8003b78 <HAL_CAN_Init>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8003402:	f000 f8cd 	bl	80035a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20000874 	.word	0x20000874
 8003410:	40006400 	.word	0x40006400

08003414 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003418:	4b17      	ldr	r3, [pc, #92]	; (8003478 <MX_SPI1_Init+0x64>)
 800341a:	4a18      	ldr	r2, [pc, #96]	; (800347c <MX_SPI1_Init+0x68>)
 800341c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800341e:	4b16      	ldr	r3, [pc, #88]	; (8003478 <MX_SPI1_Init+0x64>)
 8003420:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003424:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003426:	4b14      	ldr	r3, [pc, #80]	; (8003478 <MX_SPI1_Init+0x64>)
 8003428:	2200      	movs	r2, #0
 800342a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800342c:	4b12      	ldr	r3, [pc, #72]	; (8003478 <MX_SPI1_Init+0x64>)
 800342e:	2200      	movs	r2, #0
 8003430:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003432:	4b11      	ldr	r3, [pc, #68]	; (8003478 <MX_SPI1_Init+0x64>)
 8003434:	2200      	movs	r2, #0
 8003436:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003438:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <MX_SPI1_Init+0x64>)
 800343a:	2200      	movs	r2, #0
 800343c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800343e:	4b0e      	ldr	r3, [pc, #56]	; (8003478 <MX_SPI1_Init+0x64>)
 8003440:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003444:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003446:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <MX_SPI1_Init+0x64>)
 8003448:	2228      	movs	r2, #40	; 0x28
 800344a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800344c:	4b0a      	ldr	r3, [pc, #40]	; (8003478 <MX_SPI1_Init+0x64>)
 800344e:	2200      	movs	r2, #0
 8003450:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003452:	4b09      	ldr	r3, [pc, #36]	; (8003478 <MX_SPI1_Init+0x64>)
 8003454:	2200      	movs	r2, #0
 8003456:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003458:	4b07      	ldr	r3, [pc, #28]	; (8003478 <MX_SPI1_Init+0x64>)
 800345a:	2200      	movs	r2, #0
 800345c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800345e:	4b06      	ldr	r3, [pc, #24]	; (8003478 <MX_SPI1_Init+0x64>)
 8003460:	220a      	movs	r2, #10
 8003462:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003464:	4804      	ldr	r0, [pc, #16]	; (8003478 <MX_SPI1_Init+0x64>)
 8003466:	f001 ff63 	bl	8005330 <HAL_SPI_Init>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003470:	f000 f896 	bl	80035a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003474:	bf00      	nop
 8003476:	bd80      	pop	{r7, pc}
 8003478:	2000089c 	.word	0x2000089c
 800347c:	40013000 	.word	0x40013000

08003480 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003484:	4b11      	ldr	r3, [pc, #68]	; (80034cc <MX_USART2_UART_Init+0x4c>)
 8003486:	4a12      	ldr	r2, [pc, #72]	; (80034d0 <MX_USART2_UART_Init+0x50>)
 8003488:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800348a:	4b10      	ldr	r3, [pc, #64]	; (80034cc <MX_USART2_UART_Init+0x4c>)
 800348c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003490:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003492:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <MX_USART2_UART_Init+0x4c>)
 8003494:	2200      	movs	r2, #0
 8003496:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003498:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <MX_USART2_UART_Init+0x4c>)
 800349a:	2200      	movs	r2, #0
 800349c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800349e:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <MX_USART2_UART_Init+0x4c>)
 80034a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034a4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80034a6:	4b09      	ldr	r3, [pc, #36]	; (80034cc <MX_USART2_UART_Init+0x4c>)
 80034a8:	2208      	movs	r2, #8
 80034aa:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034ac:	4b07      	ldr	r3, [pc, #28]	; (80034cc <MX_USART2_UART_Init+0x4c>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80034b2:	4b06      	ldr	r3, [pc, #24]	; (80034cc <MX_USART2_UART_Init+0x4c>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80034b8:	4804      	ldr	r0, [pc, #16]	; (80034cc <MX_USART2_UART_Init+0x4c>)
 80034ba:	f002 fce1 	bl	8005e80 <HAL_UART_Init>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80034c4:	f000 f86c 	bl	80035a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80034c8:	bf00      	nop
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	200008f4 	.word	0x200008f4
 80034d0:	40004400 	.word	0x40004400

080034d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034da:	f107 030c 	add.w	r3, r7, #12
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	605a      	str	r2, [r3, #4]
 80034e4:	609a      	str	r2, [r3, #8]
 80034e6:	60da      	str	r2, [r3, #12]
 80034e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ea:	2300      	movs	r3, #0
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	4b29      	ldr	r3, [pc, #164]	; (8003594 <MX_GPIO_Init+0xc0>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	4a28      	ldr	r2, [pc, #160]	; (8003594 <MX_GPIO_Init+0xc0>)
 80034f4:	f043 0304 	orr.w	r3, r3, #4
 80034f8:	6313      	str	r3, [r2, #48]	; 0x30
 80034fa:	4b26      	ldr	r3, [pc, #152]	; (8003594 <MX_GPIO_Init+0xc0>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	60bb      	str	r3, [r7, #8]
 8003504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003506:	2300      	movs	r3, #0
 8003508:	607b      	str	r3, [r7, #4]
 800350a:	4b22      	ldr	r3, [pc, #136]	; (8003594 <MX_GPIO_Init+0xc0>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	4a21      	ldr	r2, [pc, #132]	; (8003594 <MX_GPIO_Init+0xc0>)
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	6313      	str	r3, [r2, #48]	; 0x30
 8003516:	4b1f      	ldr	r3, [pc, #124]	; (8003594 <MX_GPIO_Init+0xc0>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	607b      	str	r3, [r7, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	603b      	str	r3, [r7, #0]
 8003526:	4b1b      	ldr	r3, [pc, #108]	; (8003594 <MX_GPIO_Init+0xc0>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	4a1a      	ldr	r2, [pc, #104]	; (8003594 <MX_GPIO_Init+0xc0>)
 800352c:	f043 0302 	orr.w	r3, r3, #2
 8003530:	6313      	str	r3, [r2, #48]	; 0x30
 8003532:	4b18      	ldr	r3, [pc, #96]	; (8003594 <MX_GPIO_Init+0xc0>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800353e:	2200      	movs	r2, #0
 8003540:	2102      	movs	r1, #2
 8003542:	4815      	ldr	r0, [pc, #84]	; (8003598 <MX_GPIO_Init+0xc4>)
 8003544:	f001 f8f2 	bl	800472c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8003548:	2200      	movs	r2, #0
 800354a:	2140      	movs	r1, #64	; 0x40
 800354c:	4813      	ldr	r0, [pc, #76]	; (800359c <MX_GPIO_Init+0xc8>)
 800354e:	f001 f8ed 	bl	800472c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003552:	2302      	movs	r3, #2
 8003554:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003556:	2301      	movs	r3, #1
 8003558:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355e:	2300      	movs	r3, #0
 8003560:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003562:	f107 030c 	add.w	r3, r7, #12
 8003566:	4619      	mov	r1, r3
 8003568:	480b      	ldr	r0, [pc, #44]	; (8003598 <MX_GPIO_Init+0xc4>)
 800356a:	f000 ff4b 	bl	8004404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800356e:	2340      	movs	r3, #64	; 0x40
 8003570:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003572:	2301      	movs	r3, #1
 8003574:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003576:	2300      	movs	r3, #0
 8003578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357a:	2300      	movs	r3, #0
 800357c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800357e:	f107 030c 	add.w	r3, r7, #12
 8003582:	4619      	mov	r1, r3
 8003584:	4805      	ldr	r0, [pc, #20]	; (800359c <MX_GPIO_Init+0xc8>)
 8003586:	f000 ff3d 	bl	8004404 <HAL_GPIO_Init>

}
 800358a:	bf00      	nop
 800358c:	3720      	adds	r7, #32
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40023800 	.word	0x40023800
 8003598:	40020800 	.word	0x40020800
 800359c:	40020400 	.word	0x40020400

080035a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035a4:	b672      	cpsid	i
}
 80035a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035a8:	e7fe      	b.n	80035a8 <Error_Handler+0x8>
	...

080035ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	607b      	str	r3, [r7, #4]
 80035b6:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <HAL_MspInit+0x4c>)
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	4a0f      	ldr	r2, [pc, #60]	; (80035f8 <HAL_MspInit+0x4c>)
 80035bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035c0:	6453      	str	r3, [r2, #68]	; 0x44
 80035c2:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <HAL_MspInit+0x4c>)
 80035c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ca:	607b      	str	r3, [r7, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	603b      	str	r3, [r7, #0]
 80035d2:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <HAL_MspInit+0x4c>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	4a08      	ldr	r2, [pc, #32]	; (80035f8 <HAL_MspInit+0x4c>)
 80035d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035dc:	6413      	str	r3, [r2, #64]	; 0x40
 80035de:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <HAL_MspInit+0x4c>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80035ea:	2007      	movs	r0, #7
 80035ec:	f000 fec8 	bl	8004380 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035f0:	bf00      	nop
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40023800 	.word	0x40023800

080035fc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08a      	sub	sp, #40	; 0x28
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003604:	f107 0314 	add.w	r3, r7, #20
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	60da      	str	r2, [r3, #12]
 8003612:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a21      	ldr	r2, [pc, #132]	; (80036a0 <HAL_CAN_MspInit+0xa4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d13c      	bne.n	8003698 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	4b20      	ldr	r3, [pc, #128]	; (80036a4 <HAL_CAN_MspInit+0xa8>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	4a1f      	ldr	r2, [pc, #124]	; (80036a4 <HAL_CAN_MspInit+0xa8>)
 8003628:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800362c:	6413      	str	r3, [r2, #64]	; 0x40
 800362e:	4b1d      	ldr	r3, [pc, #116]	; (80036a4 <HAL_CAN_MspInit+0xa8>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003636:	613b      	str	r3, [r7, #16]
 8003638:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	4b19      	ldr	r3, [pc, #100]	; (80036a4 <HAL_CAN_MspInit+0xa8>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	4a18      	ldr	r2, [pc, #96]	; (80036a4 <HAL_CAN_MspInit+0xa8>)
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	6313      	str	r3, [r2, #48]	; 0x30
 800364a:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <HAL_CAN_MspInit+0xa8>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003656:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800365a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365c:	2302      	movs	r3, #2
 800365e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003660:	2300      	movs	r3, #0
 8003662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003664:	2303      	movs	r3, #3
 8003666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003668:	2309      	movs	r3, #9
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366c:	f107 0314 	add.w	r3, r7, #20
 8003670:	4619      	mov	r1, r3
 8003672:	480d      	ldr	r0, [pc, #52]	; (80036a8 <HAL_CAN_MspInit+0xac>)
 8003674:	f000 fec6 	bl	8004404 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003678:	2200      	movs	r2, #0
 800367a:	2100      	movs	r1, #0
 800367c:	2014      	movs	r0, #20
 800367e:	f000 fe8a 	bl	8004396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003682:	2014      	movs	r0, #20
 8003684:	f000 fea3 	bl	80043ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8003688:	2200      	movs	r2, #0
 800368a:	2100      	movs	r1, #0
 800368c:	2015      	movs	r0, #21
 800368e:	f000 fe82 	bl	8004396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003692:	2015      	movs	r0, #21
 8003694:	f000 fe9b 	bl	80043ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003698:	bf00      	nop
 800369a:	3728      	adds	r7, #40	; 0x28
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40006400 	.word	0x40006400
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40020000 	.word	0x40020000

080036ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08a      	sub	sp, #40	; 0x28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b4:	f107 0314 	add.w	r3, r7, #20
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	605a      	str	r2, [r3, #4]
 80036be:	609a      	str	r2, [r3, #8]
 80036c0:	60da      	str	r2, [r3, #12]
 80036c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a19      	ldr	r2, [pc, #100]	; (8003730 <HAL_SPI_MspInit+0x84>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d12b      	bne.n	8003726 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036ce:	2300      	movs	r3, #0
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	4b18      	ldr	r3, [pc, #96]	; (8003734 <HAL_SPI_MspInit+0x88>)
 80036d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d6:	4a17      	ldr	r2, [pc, #92]	; (8003734 <HAL_SPI_MspInit+0x88>)
 80036d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036dc:	6453      	str	r3, [r2, #68]	; 0x44
 80036de:	4b15      	ldr	r3, [pc, #84]	; (8003734 <HAL_SPI_MspInit+0x88>)
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036e6:	613b      	str	r3, [r7, #16]
 80036e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	4b11      	ldr	r3, [pc, #68]	; (8003734 <HAL_SPI_MspInit+0x88>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	4a10      	ldr	r2, [pc, #64]	; (8003734 <HAL_SPI_MspInit+0x88>)
 80036f4:	f043 0301 	orr.w	r3, r3, #1
 80036f8:	6313      	str	r3, [r2, #48]	; 0x30
 80036fa:	4b0e      	ldr	r3, [pc, #56]	; (8003734 <HAL_SPI_MspInit+0x88>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003706:	23e0      	movs	r3, #224	; 0xe0
 8003708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370a:	2302      	movs	r3, #2
 800370c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003712:	2303      	movs	r3, #3
 8003714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003716:	2305      	movs	r3, #5
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800371a:	f107 0314 	add.w	r3, r7, #20
 800371e:	4619      	mov	r1, r3
 8003720:	4805      	ldr	r0, [pc, #20]	; (8003738 <HAL_SPI_MspInit+0x8c>)
 8003722:	f000 fe6f 	bl	8004404 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003726:	bf00      	nop
 8003728:	3728      	adds	r7, #40	; 0x28
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40013000 	.word	0x40013000
 8003734:	40023800 	.word	0x40023800
 8003738:	40020000 	.word	0x40020000

0800373c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08a      	sub	sp, #40	; 0x28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003744:	f107 0314 	add.w	r3, r7, #20
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	605a      	str	r2, [r3, #4]
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	60da      	str	r2, [r3, #12]
 8003752:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a19      	ldr	r2, [pc, #100]	; (80037c0 <HAL_UART_MspInit+0x84>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d12b      	bne.n	80037b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800375e:	2300      	movs	r3, #0
 8003760:	613b      	str	r3, [r7, #16]
 8003762:	4b18      	ldr	r3, [pc, #96]	; (80037c4 <HAL_UART_MspInit+0x88>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	4a17      	ldr	r2, [pc, #92]	; (80037c4 <HAL_UART_MspInit+0x88>)
 8003768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800376c:	6413      	str	r3, [r2, #64]	; 0x40
 800376e:	4b15      	ldr	r3, [pc, #84]	; (80037c4 <HAL_UART_MspInit+0x88>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <HAL_UART_MspInit+0x88>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	4a10      	ldr	r2, [pc, #64]	; (80037c4 <HAL_UART_MspInit+0x88>)
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	6313      	str	r3, [r2, #48]	; 0x30
 800378a:	4b0e      	ldr	r3, [pc, #56]	; (80037c4 <HAL_UART_MspInit+0x88>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003796:	230c      	movs	r3, #12
 8003798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379a:	2302      	movs	r3, #2
 800379c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a2:	2303      	movs	r3, #3
 80037a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037a6:	2307      	movs	r3, #7
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037aa:	f107 0314 	add.w	r3, r7, #20
 80037ae:	4619      	mov	r1, r3
 80037b0:	4805      	ldr	r0, [pc, #20]	; (80037c8 <HAL_UART_MspInit+0x8c>)
 80037b2:	f000 fe27 	bl	8004404 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80037b6:	bf00      	nop
 80037b8:	3728      	adds	r7, #40	; 0x28
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40004400 	.word	0x40004400
 80037c4:	40023800 	.word	0x40023800
 80037c8:	40020000 	.word	0x40020000

080037cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037d0:	e7fe      	b.n	80037d0 <NMI_Handler+0x4>

080037d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037d2:	b480      	push	{r7}
 80037d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037d6:	e7fe      	b.n	80037d6 <HardFault_Handler+0x4>

080037d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037dc:	e7fe      	b.n	80037dc <MemManage_Handler+0x4>

080037de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037de:	b480      	push	{r7}
 80037e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037e2:	e7fe      	b.n	80037e2 <BusFault_Handler+0x4>

080037e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037e8:	e7fe      	b.n	80037e8 <UsageFault_Handler+0x4>

080037ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037ea:	b480      	push	{r7}
 80037ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037fc:	bf00      	nop
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003806:	b480      	push	{r7}
 8003808:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800380a:	bf00      	nop
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003818:	f000 f96a 	bl	8003af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800381c:	bf00      	nop
 800381e:	bd80      	pop	{r7, pc}

08003820 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003824:	4802      	ldr	r0, [pc, #8]	; (8003830 <CAN1_RX0_IRQHandler+0x10>)
 8003826:	f000 faa2 	bl	8003d6e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800382a:	bf00      	nop
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000874 	.word	0x20000874

08003834 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003838:	4802      	ldr	r0, [pc, #8]	; (8003844 <CAN1_RX1_IRQHandler+0x10>)
 800383a:	f000 fa98 	bl	8003d6e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20000874 	.word	0x20000874

08003848 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
	return 1;
 800384c:	2301      	movs	r3, #1
}
 800384e:	4618      	mov	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <_kill>:

int _kill(int pid, int sig)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003862:	f002 fecf 	bl	8006604 <__errno>
 8003866:	4603      	mov	r3, r0
 8003868:	2216      	movs	r2, #22
 800386a:	601a      	str	r2, [r3, #0]
	return -1;
 800386c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <_exit>:

void _exit (int status)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003880:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7ff ffe7 	bl	8003858 <_kill>
	while (1) {}		/* Make sure we hang here */
 800388a:	e7fe      	b.n	800388a <_exit+0x12>

0800388c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	e00a      	b.n	80038b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800389e:	f3af 8000 	nop.w
 80038a2:	4601      	mov	r1, r0
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	60ba      	str	r2, [r7, #8]
 80038aa:	b2ca      	uxtb	r2, r1
 80038ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	3301      	adds	r3, #1
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	dbf0      	blt.n	800389e <_read+0x12>
	}

return len;
 80038bc:	687b      	ldr	r3, [r7, #4]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3718      	adds	r7, #24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b086      	sub	sp, #24
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	e009      	b.n	80038ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	60ba      	str	r2, [r7, #8]
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	3301      	adds	r3, #1
 80038ea:	617b      	str	r3, [r7, #20]
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	dbf1      	blt.n	80038d8 <_write+0x12>
	}
	return len;
 80038f4:	687b      	ldr	r3, [r7, #4]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <_close>:

int _close(int file)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
	return -1;
 8003906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800390a:	4618      	mov	r0, r3
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003926:	605a      	str	r2, [r3, #4]
	return 0;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <_isatty>:

int _isatty(int file)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
	return 1;
 800393e:	2301      	movs	r3, #1
}
 8003940:	4618      	mov	r0, r3
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
	return 0;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
	...

08003968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003970:	4a14      	ldr	r2, [pc, #80]	; (80039c4 <_sbrk+0x5c>)
 8003972:	4b15      	ldr	r3, [pc, #84]	; (80039c8 <_sbrk+0x60>)
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800397c:	4b13      	ldr	r3, [pc, #76]	; (80039cc <_sbrk+0x64>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d102      	bne.n	800398a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003984:	4b11      	ldr	r3, [pc, #68]	; (80039cc <_sbrk+0x64>)
 8003986:	4a12      	ldr	r2, [pc, #72]	; (80039d0 <_sbrk+0x68>)
 8003988:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800398a:	4b10      	ldr	r3, [pc, #64]	; (80039cc <_sbrk+0x64>)
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4413      	add	r3, r2
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	429a      	cmp	r2, r3
 8003996:	d207      	bcs.n	80039a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003998:	f002 fe34 	bl	8006604 <__errno>
 800399c:	4603      	mov	r3, r0
 800399e:	220c      	movs	r2, #12
 80039a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039a6:	e009      	b.n	80039bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039a8:	4b08      	ldr	r3, [pc, #32]	; (80039cc <_sbrk+0x64>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039ae:	4b07      	ldr	r3, [pc, #28]	; (80039cc <_sbrk+0x64>)
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4413      	add	r3, r2
 80039b6:	4a05      	ldr	r2, [pc, #20]	; (80039cc <_sbrk+0x64>)
 80039b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039ba:	68fb      	ldr	r3, [r7, #12]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	20020000 	.word	0x20020000
 80039c8:	00000400 	.word	0x00000400
 80039cc:	20000938 	.word	0x20000938
 80039d0:	20000950 	.word	0x20000950

080039d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039d8:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <SystemInit+0x20>)
 80039da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039de:	4a05      	ldr	r2, [pc, #20]	; (80039f4 <SystemInit+0x20>)
 80039e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039e8:	bf00      	nop
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80039f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80039fc:	480d      	ldr	r0, [pc, #52]	; (8003a34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80039fe:	490e      	ldr	r1, [pc, #56]	; (8003a38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a00:	4a0e      	ldr	r2, [pc, #56]	; (8003a3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a04:	e002      	b.n	8003a0c <LoopCopyDataInit>

08003a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a0a:	3304      	adds	r3, #4

08003a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a10:	d3f9      	bcc.n	8003a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a12:	4a0b      	ldr	r2, [pc, #44]	; (8003a40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a14:	4c0b      	ldr	r4, [pc, #44]	; (8003a44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a18:	e001      	b.n	8003a1e <LoopFillZerobss>

08003a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a1c:	3204      	adds	r2, #4

08003a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a20:	d3fb      	bcc.n	8003a1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a22:	f7ff ffd7 	bl	80039d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a26:	f002 fdf3 	bl	8006610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a2a:	f7ff fbfd 	bl	8003228 <main>
  bx  lr    
 8003a2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a38:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003a3c:	08009a84 	.word	0x08009a84
  ldr r2, =_sbss
 8003a40:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003a44:	20000950 	.word	0x20000950

08003a48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a48:	e7fe      	b.n	8003a48 <ADC_IRQHandler>
	...

08003a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a50:	4b0e      	ldr	r3, [pc, #56]	; (8003a8c <HAL_Init+0x40>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a0d      	ldr	r2, [pc, #52]	; (8003a8c <HAL_Init+0x40>)
 8003a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a5c:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <HAL_Init+0x40>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a0a      	ldr	r2, [pc, #40]	; (8003a8c <HAL_Init+0x40>)
 8003a62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a68:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <HAL_Init+0x40>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a07      	ldr	r2, [pc, #28]	; (8003a8c <HAL_Init+0x40>)
 8003a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a74:	2003      	movs	r0, #3
 8003a76:	f000 fc83 	bl	8004380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	f000 f808 	bl	8003a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a80:	f7ff fd94 	bl	80035ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40023c00 	.word	0x40023c00

08003a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a98:	4b12      	ldr	r3, [pc, #72]	; (8003ae4 <HAL_InitTick+0x54>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	4b12      	ldr	r3, [pc, #72]	; (8003ae8 <HAL_InitTick+0x58>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 fc9b 	bl	80043ea <HAL_SYSTICK_Config>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e00e      	b.n	8003adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b0f      	cmp	r3, #15
 8003ac2:	d80a      	bhi.n	8003ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003acc:	f000 fc63 	bl	8004396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ad0:	4a06      	ldr	r2, [pc, #24]	; (8003aec <HAL_InitTick+0x5c>)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e000      	b.n	8003adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	20000014 	.word	0x20000014
 8003ae8:	2000001c 	.word	0x2000001c
 8003aec:	20000018 	.word	0x20000018

08003af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003af4:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <HAL_IncTick+0x20>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	461a      	mov	r2, r3
 8003afa:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <HAL_IncTick+0x24>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4413      	add	r3, r2
 8003b00:	4a04      	ldr	r2, [pc, #16]	; (8003b14 <HAL_IncTick+0x24>)
 8003b02:	6013      	str	r3, [r2, #0]
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	2000001c 	.word	0x2000001c
 8003b14:	2000093c 	.word	0x2000093c

08003b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b1c:	4b03      	ldr	r3, [pc, #12]	; (8003b2c <HAL_GetTick+0x14>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	2000093c 	.word	0x2000093c

08003b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b38:	f7ff ffee 	bl	8003b18 <HAL_GetTick>
 8003b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b48:	d005      	beq.n	8003b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b4a:	4b0a      	ldr	r3, [pc, #40]	; (8003b74 <HAL_Delay+0x44>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4413      	add	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b56:	bf00      	nop
 8003b58:	f7ff ffde 	bl	8003b18 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d8f7      	bhi.n	8003b58 <HAL_Delay+0x28>
  {
  }
}
 8003b68:	bf00      	nop
 8003b6a:	bf00      	nop
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	2000001c 	.word	0x2000001c

08003b78 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e0ed      	b.n	8003d66 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d102      	bne.n	8003b9c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7ff fd30 	bl	80035fc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0201 	orr.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bac:	f7ff ffb4 	bl	8003b18 <HAL_GetTick>
 8003bb0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003bb2:	e012      	b.n	8003bda <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003bb4:	f7ff ffb0 	bl	8003b18 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b0a      	cmp	r3, #10
 8003bc0:	d90b      	bls.n	8003bda <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2205      	movs	r2, #5
 8003bd2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e0c5      	b.n	8003d66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0e5      	beq.n	8003bb4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0202 	bic.w	r2, r2, #2
 8003bf6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bf8:	f7ff ff8e 	bl	8003b18 <HAL_GetTick>
 8003bfc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003bfe:	e012      	b.n	8003c26 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c00:	f7ff ff8a 	bl	8003b18 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b0a      	cmp	r3, #10
 8003c0c:	d90b      	bls.n	8003c26 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2205      	movs	r2, #5
 8003c1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e09f      	b.n	8003d66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1e5      	bne.n	8003c00 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	7e1b      	ldrb	r3, [r3, #24]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d108      	bne.n	8003c4e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	e007      	b.n	8003c5e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	7e5b      	ldrb	r3, [r3, #25]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d108      	bne.n	8003c78 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	e007      	b.n	8003c88 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c86:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	7e9b      	ldrb	r3, [r3, #26]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d108      	bne.n	8003ca2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0220 	orr.w	r2, r2, #32
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	e007      	b.n	8003cb2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0220 	bic.w	r2, r2, #32
 8003cb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	7edb      	ldrb	r3, [r3, #27]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d108      	bne.n	8003ccc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0210 	bic.w	r2, r2, #16
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	e007      	b.n	8003cdc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0210 	orr.w	r2, r2, #16
 8003cda:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	7f1b      	ldrb	r3, [r3, #28]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d108      	bne.n	8003cf6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0208 	orr.w	r2, r2, #8
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	e007      	b.n	8003d06 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0208 	bic.w	r2, r2, #8
 8003d04:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	7f5b      	ldrb	r3, [r3, #29]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d108      	bne.n	8003d20 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f042 0204 	orr.w	r2, r2, #4
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	e007      	b.n	8003d30 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0204 	bic.w	r2, r2, #4
 8003d2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	ea42 0103 	orr.w	r1, r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	1e5a      	subs	r2, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b08a      	sub	sp, #40	; 0x28
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003d76:	2300      	movs	r3, #0
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d07c      	beq.n	8003eae <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d023      	beq.n	8003e06 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f983 	bl	80040dc <HAL_CAN_TxMailbox0CompleteCallback>
 8003dd6:	e016      	b.n	8003e06 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d004      	beq.n	8003dec <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dea:	e00c      	b.n	8003e06 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d004      	beq.n	8003e00 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfe:	e002      	b.n	8003e06 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f989 	bl	8004118 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d024      	beq.n	8003e5a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e18:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f963 	bl	80040f0 <HAL_CAN_TxMailbox1CompleteCallback>
 8003e2a:	e016      	b.n	8003e5a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d004      	beq.n	8003e40 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3e:	e00c      	b.n	8003e5a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d004      	beq.n	8003e54 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
 8003e52:	e002      	b.n	8003e5a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 f969 	bl	800412c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d024      	beq.n	8003eae <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e6c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f943 	bl	8004104 <HAL_CAN_TxMailbox2CompleteCallback>
 8003e7e:	e016      	b.n	8003eae <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d004      	beq.n	8003e94 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24
 8003e92:	e00c      	b.n	8003eae <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d004      	beq.n	8003ea8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea6:	e002      	b.n	8003eae <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f949 	bl	8004140 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00c      	beq.n	8003ed2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f003 0310 	and.w	r3, r3, #16
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d007      	beq.n	8003ed2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2210      	movs	r2, #16
 8003ed0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00b      	beq.n	8003ef4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d006      	beq.n	8003ef4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2208      	movs	r2, #8
 8003eec:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f93a 	bl	8004168 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d009      	beq.n	8003f12 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f003 0303 	and.w	r3, r3, #3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f921 	bl	8004154 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00c      	beq.n	8003f36 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	f003 0310 	and.w	r3, r3, #16
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d007      	beq.n	8003f36 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2210      	movs	r2, #16
 8003f34:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00b      	beq.n	8003f58 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d006      	beq.n	8003f58 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2208      	movs	r2, #8
 8003f50:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f91c 	bl	8004190 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	f003 0310 	and.w	r3, r3, #16
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d009      	beq.n	8003f76 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	f003 0303 	and.w	r3, r3, #3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d002      	beq.n	8003f76 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f903 	bl	800417c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00b      	beq.n	8003f98 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f003 0310 	and.w	r3, r3, #16
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d006      	beq.n	8003f98 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2210      	movs	r2, #16
 8003f90:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f906 	bl	80041a4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00b      	beq.n	8003fba <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d006      	beq.n	8003fba <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2208      	movs	r2, #8
 8003fb2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f8ff 	bl	80041b8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d07b      	beq.n	80040bc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d072      	beq.n	80040b4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d008      	beq.n	8003fea <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	f043 0301 	orr.w	r3, r3, #1
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d008      	beq.n	8004006 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	f043 0302 	orr.w	r3, r3, #2
 8004004:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	f043 0304 	orr.w	r3, r3, #4
 8004020:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004028:	2b00      	cmp	r3, #0
 800402a:	d043      	beq.n	80040b4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004032:	2b00      	cmp	r3, #0
 8004034:	d03e      	beq.n	80040b4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800403c:	2b60      	cmp	r3, #96	; 0x60
 800403e:	d02b      	beq.n	8004098 <HAL_CAN_IRQHandler+0x32a>
 8004040:	2b60      	cmp	r3, #96	; 0x60
 8004042:	d82e      	bhi.n	80040a2 <HAL_CAN_IRQHandler+0x334>
 8004044:	2b50      	cmp	r3, #80	; 0x50
 8004046:	d022      	beq.n	800408e <HAL_CAN_IRQHandler+0x320>
 8004048:	2b50      	cmp	r3, #80	; 0x50
 800404a:	d82a      	bhi.n	80040a2 <HAL_CAN_IRQHandler+0x334>
 800404c:	2b40      	cmp	r3, #64	; 0x40
 800404e:	d019      	beq.n	8004084 <HAL_CAN_IRQHandler+0x316>
 8004050:	2b40      	cmp	r3, #64	; 0x40
 8004052:	d826      	bhi.n	80040a2 <HAL_CAN_IRQHandler+0x334>
 8004054:	2b30      	cmp	r3, #48	; 0x30
 8004056:	d010      	beq.n	800407a <HAL_CAN_IRQHandler+0x30c>
 8004058:	2b30      	cmp	r3, #48	; 0x30
 800405a:	d822      	bhi.n	80040a2 <HAL_CAN_IRQHandler+0x334>
 800405c:	2b10      	cmp	r3, #16
 800405e:	d002      	beq.n	8004066 <HAL_CAN_IRQHandler+0x2f8>
 8004060:	2b20      	cmp	r3, #32
 8004062:	d005      	beq.n	8004070 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004064:	e01d      	b.n	80040a2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	f043 0308 	orr.w	r3, r3, #8
 800406c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800406e:	e019      	b.n	80040a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	f043 0310 	orr.w	r3, r3, #16
 8004076:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004078:	e014      	b.n	80040a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	f043 0320 	orr.w	r3, r3, #32
 8004080:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004082:	e00f      	b.n	80040a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800408a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800408c:	e00a      	b.n	80040a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004096:	e005      	b.n	80040a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040a0:	e000      	b.n	80040a4 <HAL_CAN_IRQHandler+0x336>
            break;
 80040a2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699a      	ldr	r2, [r3, #24]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80040b2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2204      	movs	r2, #4
 80040ba:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d008      	beq.n	80040d4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f87c 	bl	80041cc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80040d4:	bf00      	nop
 80040d6:	3728      	adds	r7, #40	; 0x28
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041f0:	4b0c      	ldr	r3, [pc, #48]	; (8004224 <__NVIC_SetPriorityGrouping+0x44>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041fc:	4013      	ands	r3, r2
 80041fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800420c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004212:	4a04      	ldr	r2, [pc, #16]	; (8004224 <__NVIC_SetPriorityGrouping+0x44>)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	60d3      	str	r3, [r2, #12]
}
 8004218:	bf00      	nop
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	e000ed00 	.word	0xe000ed00

08004228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800422c:	4b04      	ldr	r3, [pc, #16]	; (8004240 <__NVIC_GetPriorityGrouping+0x18>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	0a1b      	lsrs	r3, r3, #8
 8004232:	f003 0307 	and.w	r3, r3, #7
}
 8004236:	4618      	mov	r0, r3
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	e000ed00 	.word	0xe000ed00

08004244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	4603      	mov	r3, r0
 800424c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800424e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004252:	2b00      	cmp	r3, #0
 8004254:	db0b      	blt.n	800426e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004256:	79fb      	ldrb	r3, [r7, #7]
 8004258:	f003 021f 	and.w	r2, r3, #31
 800425c:	4907      	ldr	r1, [pc, #28]	; (800427c <__NVIC_EnableIRQ+0x38>)
 800425e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004262:	095b      	lsrs	r3, r3, #5
 8004264:	2001      	movs	r0, #1
 8004266:	fa00 f202 	lsl.w	r2, r0, r2
 800426a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	e000e100 	.word	0xe000e100

08004280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	4603      	mov	r3, r0
 8004288:	6039      	str	r1, [r7, #0]
 800428a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800428c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004290:	2b00      	cmp	r3, #0
 8004292:	db0a      	blt.n	80042aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	b2da      	uxtb	r2, r3
 8004298:	490c      	ldr	r1, [pc, #48]	; (80042cc <__NVIC_SetPriority+0x4c>)
 800429a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429e:	0112      	lsls	r2, r2, #4
 80042a0:	b2d2      	uxtb	r2, r2
 80042a2:	440b      	add	r3, r1
 80042a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042a8:	e00a      	b.n	80042c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	4908      	ldr	r1, [pc, #32]	; (80042d0 <__NVIC_SetPriority+0x50>)
 80042b0:	79fb      	ldrb	r3, [r7, #7]
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	3b04      	subs	r3, #4
 80042b8:	0112      	lsls	r2, r2, #4
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	440b      	add	r3, r1
 80042be:	761a      	strb	r2, [r3, #24]
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	e000e100 	.word	0xe000e100
 80042d0:	e000ed00 	.word	0xe000ed00

080042d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b089      	sub	sp, #36	; 0x24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	f1c3 0307 	rsb	r3, r3, #7
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	bf28      	it	cs
 80042f2:	2304      	movcs	r3, #4
 80042f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	3304      	adds	r3, #4
 80042fa:	2b06      	cmp	r3, #6
 80042fc:	d902      	bls.n	8004304 <NVIC_EncodePriority+0x30>
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	3b03      	subs	r3, #3
 8004302:	e000      	b.n	8004306 <NVIC_EncodePriority+0x32>
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	43da      	mvns	r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	401a      	ands	r2, r3
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800431c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	fa01 f303 	lsl.w	r3, r1, r3
 8004326:	43d9      	mvns	r1, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800432c:	4313      	orrs	r3, r2
         );
}
 800432e:	4618      	mov	r0, r3
 8004330:	3724      	adds	r7, #36	; 0x24
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
	...

0800433c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3b01      	subs	r3, #1
 8004348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800434c:	d301      	bcc.n	8004352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800434e:	2301      	movs	r3, #1
 8004350:	e00f      	b.n	8004372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004352:	4a0a      	ldr	r2, [pc, #40]	; (800437c <SysTick_Config+0x40>)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3b01      	subs	r3, #1
 8004358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800435a:	210f      	movs	r1, #15
 800435c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004360:	f7ff ff8e 	bl	8004280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004364:	4b05      	ldr	r3, [pc, #20]	; (800437c <SysTick_Config+0x40>)
 8004366:	2200      	movs	r2, #0
 8004368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800436a:	4b04      	ldr	r3, [pc, #16]	; (800437c <SysTick_Config+0x40>)
 800436c:	2207      	movs	r2, #7
 800436e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	e000e010 	.word	0xe000e010

08004380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7ff ff29 	bl	80041e0 <__NVIC_SetPriorityGrouping>
}
 800438e:	bf00      	nop
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004396:	b580      	push	{r7, lr}
 8004398:	b086      	sub	sp, #24
 800439a:	af00      	add	r7, sp, #0
 800439c:	4603      	mov	r3, r0
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	607a      	str	r2, [r7, #4]
 80043a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043a8:	f7ff ff3e 	bl	8004228 <__NVIC_GetPriorityGrouping>
 80043ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	68b9      	ldr	r1, [r7, #8]
 80043b2:	6978      	ldr	r0, [r7, #20]
 80043b4:	f7ff ff8e 	bl	80042d4 <NVIC_EncodePriority>
 80043b8:	4602      	mov	r2, r0
 80043ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043be:	4611      	mov	r1, r2
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff ff5d 	bl	8004280 <__NVIC_SetPriority>
}
 80043c6:	bf00      	nop
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b082      	sub	sp, #8
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	4603      	mov	r3, r0
 80043d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043dc:	4618      	mov	r0, r3
 80043de:	f7ff ff31 	bl	8004244 <__NVIC_EnableIRQ>
}
 80043e2:	bf00      	nop
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b082      	sub	sp, #8
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7ff ffa2 	bl	800433c <SysTick_Config>
 80043f8:	4603      	mov	r3, r0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004404:	b480      	push	{r7}
 8004406:	b089      	sub	sp, #36	; 0x24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004412:	2300      	movs	r3, #0
 8004414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004416:	2300      	movs	r3, #0
 8004418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
 800441e:	e165      	b.n	80046ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004420:	2201      	movs	r2, #1
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	4013      	ands	r3, r2
 8004432:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	429a      	cmp	r2, r3
 800443a:	f040 8154 	bne.w	80046e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	2b01      	cmp	r3, #1
 8004448:	d005      	beq.n	8004456 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004452:	2b02      	cmp	r3, #2
 8004454:	d130      	bne.n	80044b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	2203      	movs	r2, #3
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	43db      	mvns	r3, r3
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	4013      	ands	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	fa02 f303 	lsl.w	r3, r2, r3
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	4313      	orrs	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800448c:	2201      	movs	r2, #1
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	43db      	mvns	r3, r3
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	4013      	ands	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	091b      	lsrs	r3, r3, #4
 80044a2:	f003 0201 	and.w	r2, r3, #1
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d017      	beq.n	80044f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	2203      	movs	r2, #3
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	43db      	mvns	r3, r3
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	4013      	ands	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f003 0303 	and.w	r3, r3, #3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d123      	bne.n	8004548 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	08da      	lsrs	r2, r3, #3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3208      	adds	r2, #8
 8004508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800450c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	220f      	movs	r2, #15
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	43db      	mvns	r3, r3
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	4013      	ands	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4313      	orrs	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	08da      	lsrs	r2, r3, #3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3208      	adds	r2, #8
 8004542:	69b9      	ldr	r1, [r7, #24]
 8004544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	2203      	movs	r2, #3
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	43db      	mvns	r3, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4013      	ands	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f003 0203 	and.w	r2, r3, #3
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4313      	orrs	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 80ae 	beq.w	80046e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800458a:	2300      	movs	r3, #0
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	4b5d      	ldr	r3, [pc, #372]	; (8004704 <HAL_GPIO_Init+0x300>)
 8004590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004592:	4a5c      	ldr	r2, [pc, #368]	; (8004704 <HAL_GPIO_Init+0x300>)
 8004594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004598:	6453      	str	r3, [r2, #68]	; 0x44
 800459a:	4b5a      	ldr	r3, [pc, #360]	; (8004704 <HAL_GPIO_Init+0x300>)
 800459c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045a6:	4a58      	ldr	r2, [pc, #352]	; (8004708 <HAL_GPIO_Init+0x304>)
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	089b      	lsrs	r3, r3, #2
 80045ac:	3302      	adds	r3, #2
 80045ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	220f      	movs	r2, #15
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	43db      	mvns	r3, r3
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	4013      	ands	r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a4f      	ldr	r2, [pc, #316]	; (800470c <HAL_GPIO_Init+0x308>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d025      	beq.n	800461e <HAL_GPIO_Init+0x21a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a4e      	ldr	r2, [pc, #312]	; (8004710 <HAL_GPIO_Init+0x30c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d01f      	beq.n	800461a <HAL_GPIO_Init+0x216>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a4d      	ldr	r2, [pc, #308]	; (8004714 <HAL_GPIO_Init+0x310>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d019      	beq.n	8004616 <HAL_GPIO_Init+0x212>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a4c      	ldr	r2, [pc, #304]	; (8004718 <HAL_GPIO_Init+0x314>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d013      	beq.n	8004612 <HAL_GPIO_Init+0x20e>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a4b      	ldr	r2, [pc, #300]	; (800471c <HAL_GPIO_Init+0x318>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d00d      	beq.n	800460e <HAL_GPIO_Init+0x20a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a4a      	ldr	r2, [pc, #296]	; (8004720 <HAL_GPIO_Init+0x31c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d007      	beq.n	800460a <HAL_GPIO_Init+0x206>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a49      	ldr	r2, [pc, #292]	; (8004724 <HAL_GPIO_Init+0x320>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d101      	bne.n	8004606 <HAL_GPIO_Init+0x202>
 8004602:	2306      	movs	r3, #6
 8004604:	e00c      	b.n	8004620 <HAL_GPIO_Init+0x21c>
 8004606:	2307      	movs	r3, #7
 8004608:	e00a      	b.n	8004620 <HAL_GPIO_Init+0x21c>
 800460a:	2305      	movs	r3, #5
 800460c:	e008      	b.n	8004620 <HAL_GPIO_Init+0x21c>
 800460e:	2304      	movs	r3, #4
 8004610:	e006      	b.n	8004620 <HAL_GPIO_Init+0x21c>
 8004612:	2303      	movs	r3, #3
 8004614:	e004      	b.n	8004620 <HAL_GPIO_Init+0x21c>
 8004616:	2302      	movs	r3, #2
 8004618:	e002      	b.n	8004620 <HAL_GPIO_Init+0x21c>
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <HAL_GPIO_Init+0x21c>
 800461e:	2300      	movs	r3, #0
 8004620:	69fa      	ldr	r2, [r7, #28]
 8004622:	f002 0203 	and.w	r2, r2, #3
 8004626:	0092      	lsls	r2, r2, #2
 8004628:	4093      	lsls	r3, r2
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	4313      	orrs	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004630:	4935      	ldr	r1, [pc, #212]	; (8004708 <HAL_GPIO_Init+0x304>)
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	089b      	lsrs	r3, r3, #2
 8004636:	3302      	adds	r3, #2
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800463e:	4b3a      	ldr	r3, [pc, #232]	; (8004728 <HAL_GPIO_Init+0x324>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	43db      	mvns	r3, r3
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	4013      	ands	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004662:	4a31      	ldr	r2, [pc, #196]	; (8004728 <HAL_GPIO_Init+0x324>)
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004668:	4b2f      	ldr	r3, [pc, #188]	; (8004728 <HAL_GPIO_Init+0x324>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	43db      	mvns	r3, r3
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	4013      	ands	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	4313      	orrs	r3, r2
 800468a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800468c:	4a26      	ldr	r2, [pc, #152]	; (8004728 <HAL_GPIO_Init+0x324>)
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004692:	4b25      	ldr	r3, [pc, #148]	; (8004728 <HAL_GPIO_Init+0x324>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	43db      	mvns	r3, r3
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	4013      	ands	r3, r2
 80046a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046b6:	4a1c      	ldr	r2, [pc, #112]	; (8004728 <HAL_GPIO_Init+0x324>)
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046bc:	4b1a      	ldr	r3, [pc, #104]	; (8004728 <HAL_GPIO_Init+0x324>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	43db      	mvns	r3, r3
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	4013      	ands	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046e0:	4a11      	ldr	r2, [pc, #68]	; (8004728 <HAL_GPIO_Init+0x324>)
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	3301      	adds	r3, #1
 80046ea:	61fb      	str	r3, [r7, #28]
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	2b0f      	cmp	r3, #15
 80046f0:	f67f ae96 	bls.w	8004420 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046f4:	bf00      	nop
 80046f6:	bf00      	nop
 80046f8:	3724      	adds	r7, #36	; 0x24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	40023800 	.word	0x40023800
 8004708:	40013800 	.word	0x40013800
 800470c:	40020000 	.word	0x40020000
 8004710:	40020400 	.word	0x40020400
 8004714:	40020800 	.word	0x40020800
 8004718:	40020c00 	.word	0x40020c00
 800471c:	40021000 	.word	0x40021000
 8004720:	40021400 	.word	0x40021400
 8004724:	40021800 	.word	0x40021800
 8004728:	40013c00 	.word	0x40013c00

0800472c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	460b      	mov	r3, r1
 8004736:	807b      	strh	r3, [r7, #2]
 8004738:	4613      	mov	r3, r2
 800473a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800473c:	787b      	ldrb	r3, [r7, #1]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004742:	887a      	ldrh	r2, [r7, #2]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004748:	e003      	b.n	8004752 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800474a:	887b      	ldrh	r3, [r7, #2]
 800474c:	041a      	lsls	r2, r3, #16
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	619a      	str	r2, [r3, #24]
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
	...

08004760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e0cc      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004774:	4b68      	ldr	r3, [pc, #416]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 030f 	and.w	r3, r3, #15
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d90c      	bls.n	800479c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004782:	4b65      	ldr	r3, [pc, #404]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800478a:	4b63      	ldr	r3, [pc, #396]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d001      	beq.n	800479c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e0b8      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d020      	beq.n	80047ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d005      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047b4:	4b59      	ldr	r3, [pc, #356]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	4a58      	ldr	r2, [pc, #352]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0308 	and.w	r3, r3, #8
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047cc:	4b53      	ldr	r3, [pc, #332]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	4a52      	ldr	r2, [pc, #328]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047d8:	4b50      	ldr	r3, [pc, #320]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	494d      	ldr	r1, [pc, #308]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d044      	beq.n	8004880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d107      	bne.n	800480e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047fe:	4b47      	ldr	r3, [pc, #284]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d119      	bne.n	800483e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e07f      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b02      	cmp	r3, #2
 8004814:	d003      	beq.n	800481e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800481a:	2b03      	cmp	r3, #3
 800481c:	d107      	bne.n	800482e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800481e:	4b3f      	ldr	r3, [pc, #252]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d109      	bne.n	800483e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e06f      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800482e:	4b3b      	ldr	r3, [pc, #236]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e067      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800483e:	4b37      	ldr	r3, [pc, #220]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f023 0203 	bic.w	r2, r3, #3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	4934      	ldr	r1, [pc, #208]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	4313      	orrs	r3, r2
 800484e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004850:	f7ff f962 	bl	8003b18 <HAL_GetTick>
 8004854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004856:	e00a      	b.n	800486e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004858:	f7ff f95e 	bl	8003b18 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	f241 3288 	movw	r2, #5000	; 0x1388
 8004866:	4293      	cmp	r3, r2
 8004868:	d901      	bls.n	800486e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e04f      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486e:	4b2b      	ldr	r3, [pc, #172]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 020c 	and.w	r2, r3, #12
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	429a      	cmp	r2, r3
 800487e:	d1eb      	bne.n	8004858 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004880:	4b25      	ldr	r3, [pc, #148]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 030f 	and.w	r3, r3, #15
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	429a      	cmp	r2, r3
 800488c:	d20c      	bcs.n	80048a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488e:	4b22      	ldr	r3, [pc, #136]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004896:	4b20      	ldr	r3, [pc, #128]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d001      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e032      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d008      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048b4:	4b19      	ldr	r3, [pc, #100]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	4916      	ldr	r1, [pc, #88]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d009      	beq.n	80048e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048d2:	4b12      	ldr	r3, [pc, #72]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	490e      	ldr	r1, [pc, #56]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048e6:	f000 f855 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 80048ea:	4602      	mov	r2, r0
 80048ec:	4b0b      	ldr	r3, [pc, #44]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	091b      	lsrs	r3, r3, #4
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	490a      	ldr	r1, [pc, #40]	; (8004920 <HAL_RCC_ClockConfig+0x1c0>)
 80048f8:	5ccb      	ldrb	r3, [r1, r3]
 80048fa:	fa22 f303 	lsr.w	r3, r2, r3
 80048fe:	4a09      	ldr	r2, [pc, #36]	; (8004924 <HAL_RCC_ClockConfig+0x1c4>)
 8004900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004902:	4b09      	ldr	r3, [pc, #36]	; (8004928 <HAL_RCC_ClockConfig+0x1c8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff f8c2 	bl	8003a90 <HAL_InitTick>

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	40023c00 	.word	0x40023c00
 800491c:	40023800 	.word	0x40023800
 8004920:	08009684 	.word	0x08009684
 8004924:	20000014 	.word	0x20000014
 8004928:	20000018 	.word	0x20000018

0800492c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004930:	4b03      	ldr	r3, [pc, #12]	; (8004940 <HAL_RCC_GetHCLKFreq+0x14>)
 8004932:	681b      	ldr	r3, [r3, #0]
}
 8004934:	4618      	mov	r0, r3
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	20000014 	.word	0x20000014

08004944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004948:	f7ff fff0 	bl	800492c <HAL_RCC_GetHCLKFreq>
 800494c:	4602      	mov	r2, r0
 800494e:	4b05      	ldr	r3, [pc, #20]	; (8004964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	0a9b      	lsrs	r3, r3, #10
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	4903      	ldr	r1, [pc, #12]	; (8004968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800495a:	5ccb      	ldrb	r3, [r1, r3]
 800495c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004960:	4618      	mov	r0, r3
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40023800 	.word	0x40023800
 8004968:	08009694 	.word	0x08009694

0800496c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004970:	f7ff ffdc 	bl	800492c <HAL_RCC_GetHCLKFreq>
 8004974:	4602      	mov	r2, r0
 8004976:	4b05      	ldr	r3, [pc, #20]	; (800498c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	0b5b      	lsrs	r3, r3, #13
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	4903      	ldr	r1, [pc, #12]	; (8004990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004982:	5ccb      	ldrb	r3, [r1, r3]
 8004984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004988:	4618      	mov	r0, r3
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40023800 	.word	0x40023800
 8004990:	08009694 	.word	0x08009694

08004994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004998:	b0ae      	sub	sp, #184	; 0xb8
 800499a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049ba:	4bcb      	ldr	r3, [pc, #812]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x354>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 030c 	and.w	r3, r3, #12
 80049c2:	2b0c      	cmp	r3, #12
 80049c4:	f200 8206 	bhi.w	8004dd4 <HAL_RCC_GetSysClockFreq+0x440>
 80049c8:	a201      	add	r2, pc, #4	; (adr r2, 80049d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80049ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ce:	bf00      	nop
 80049d0:	08004a05 	.word	0x08004a05
 80049d4:	08004dd5 	.word	0x08004dd5
 80049d8:	08004dd5 	.word	0x08004dd5
 80049dc:	08004dd5 	.word	0x08004dd5
 80049e0:	08004a0d 	.word	0x08004a0d
 80049e4:	08004dd5 	.word	0x08004dd5
 80049e8:	08004dd5 	.word	0x08004dd5
 80049ec:	08004dd5 	.word	0x08004dd5
 80049f0:	08004a15 	.word	0x08004a15
 80049f4:	08004dd5 	.word	0x08004dd5
 80049f8:	08004dd5 	.word	0x08004dd5
 80049fc:	08004dd5 	.word	0x08004dd5
 8004a00:	08004c05 	.word	0x08004c05
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a04:	4bb9      	ldr	r3, [pc, #740]	; (8004cec <HAL_RCC_GetSysClockFreq+0x358>)
 8004a06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004a0a:	e1e7      	b.n	8004ddc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a0c:	4bb8      	ldr	r3, [pc, #736]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004a12:	e1e3      	b.n	8004ddc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a14:	4bb4      	ldr	r3, [pc, #720]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a20:	4bb1      	ldr	r3, [pc, #708]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d071      	beq.n	8004b10 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a2c:	4bae      	ldr	r3, [pc, #696]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	099b      	lsrs	r3, r3, #6
 8004a32:	2200      	movs	r2, #0
 8004a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a38:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004a3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a52:	4622      	mov	r2, r4
 8004a54:	462b      	mov	r3, r5
 8004a56:	f04f 0000 	mov.w	r0, #0
 8004a5a:	f04f 0100 	mov.w	r1, #0
 8004a5e:	0159      	lsls	r1, r3, #5
 8004a60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a64:	0150      	lsls	r0, r2, #5
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	1a51      	subs	r1, r2, r1
 8004a6e:	6439      	str	r1, [r7, #64]	; 0x40
 8004a70:	4629      	mov	r1, r5
 8004a72:	eb63 0301 	sbc.w	r3, r3, r1
 8004a76:	647b      	str	r3, [r7, #68]	; 0x44
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	f04f 0300 	mov.w	r3, #0
 8004a80:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004a84:	4649      	mov	r1, r9
 8004a86:	018b      	lsls	r3, r1, #6
 8004a88:	4641      	mov	r1, r8
 8004a8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a8e:	4641      	mov	r1, r8
 8004a90:	018a      	lsls	r2, r1, #6
 8004a92:	4641      	mov	r1, r8
 8004a94:	1a51      	subs	r1, r2, r1
 8004a96:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a98:	4649      	mov	r1, r9
 8004a9a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aa0:	f04f 0200 	mov.w	r2, #0
 8004aa4:	f04f 0300 	mov.w	r3, #0
 8004aa8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004aac:	4649      	mov	r1, r9
 8004aae:	00cb      	lsls	r3, r1, #3
 8004ab0:	4641      	mov	r1, r8
 8004ab2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ab6:	4641      	mov	r1, r8
 8004ab8:	00ca      	lsls	r2, r1, #3
 8004aba:	4610      	mov	r0, r2
 8004abc:	4619      	mov	r1, r3
 8004abe:	4603      	mov	r3, r0
 8004ac0:	4622      	mov	r2, r4
 8004ac2:	189b      	adds	r3, r3, r2
 8004ac4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ac6:	462b      	mov	r3, r5
 8004ac8:	460a      	mov	r2, r1
 8004aca:	eb42 0303 	adc.w	r3, r2, r3
 8004ace:	637b      	str	r3, [r7, #52]	; 0x34
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	f04f 0300 	mov.w	r3, #0
 8004ad8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004adc:	4629      	mov	r1, r5
 8004ade:	024b      	lsls	r3, r1, #9
 8004ae0:	4621      	mov	r1, r4
 8004ae2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ae6:	4621      	mov	r1, r4
 8004ae8:	024a      	lsls	r2, r1, #9
 8004aea:	4610      	mov	r0, r2
 8004aec:	4619      	mov	r1, r3
 8004aee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004af2:	2200      	movs	r2, #0
 8004af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004af8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004afc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004b00:	f7fc f8c2 	bl	8000c88 <__aeabi_uldivmod>
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	4613      	mov	r3, r2
 8004b0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b0e:	e067      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b10:	4b75      	ldr	r3, [pc, #468]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	099b      	lsrs	r3, r3, #6
 8004b16:	2200      	movs	r2, #0
 8004b18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b1c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004b20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b28:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b2e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004b32:	4622      	mov	r2, r4
 8004b34:	462b      	mov	r3, r5
 8004b36:	f04f 0000 	mov.w	r0, #0
 8004b3a:	f04f 0100 	mov.w	r1, #0
 8004b3e:	0159      	lsls	r1, r3, #5
 8004b40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b44:	0150      	lsls	r0, r2, #5
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	1a51      	subs	r1, r2, r1
 8004b4e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b50:	4629      	mov	r1, r5
 8004b52:	eb63 0301 	sbc.w	r3, r3, r1
 8004b56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004b64:	4649      	mov	r1, r9
 8004b66:	018b      	lsls	r3, r1, #6
 8004b68:	4641      	mov	r1, r8
 8004b6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b6e:	4641      	mov	r1, r8
 8004b70:	018a      	lsls	r2, r1, #6
 8004b72:	4641      	mov	r1, r8
 8004b74:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b78:	4649      	mov	r1, r9
 8004b7a:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b7e:	f04f 0200 	mov.w	r2, #0
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b8a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b92:	4692      	mov	sl, r2
 8004b94:	469b      	mov	fp, r3
 8004b96:	4623      	mov	r3, r4
 8004b98:	eb1a 0303 	adds.w	r3, sl, r3
 8004b9c:	623b      	str	r3, [r7, #32]
 8004b9e:	462b      	mov	r3, r5
 8004ba0:	eb4b 0303 	adc.w	r3, fp, r3
 8004ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	f04f 0300 	mov.w	r3, #0
 8004bae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004bb2:	4629      	mov	r1, r5
 8004bb4:	028b      	lsls	r3, r1, #10
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	028a      	lsls	r2, r1, #10
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bc8:	2200      	movs	r2, #0
 8004bca:	673b      	str	r3, [r7, #112]	; 0x70
 8004bcc:	677a      	str	r2, [r7, #116]	; 0x74
 8004bce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004bd2:	f7fc f859 	bl	8000c88 <__aeabi_uldivmod>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4613      	mov	r3, r2
 8004bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004be0:	4b41      	ldr	r3, [pc, #260]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	0c1b      	lsrs	r3, r3, #16
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	3301      	adds	r3, #1
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004bf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004c02:	e0eb      	b.n	8004ddc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c04:	4b38      	ldr	r3, [pc, #224]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c10:	4b35      	ldr	r3, [pc, #212]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d06b      	beq.n	8004cf4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c1c:	4b32      	ldr	r3, [pc, #200]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	099b      	lsrs	r3, r3, #6
 8004c22:	2200      	movs	r2, #0
 8004c24:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c2e:	663b      	str	r3, [r7, #96]	; 0x60
 8004c30:	2300      	movs	r3, #0
 8004c32:	667b      	str	r3, [r7, #100]	; 0x64
 8004c34:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004c38:	4622      	mov	r2, r4
 8004c3a:	462b      	mov	r3, r5
 8004c3c:	f04f 0000 	mov.w	r0, #0
 8004c40:	f04f 0100 	mov.w	r1, #0
 8004c44:	0159      	lsls	r1, r3, #5
 8004c46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c4a:	0150      	lsls	r0, r2, #5
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4621      	mov	r1, r4
 8004c52:	1a51      	subs	r1, r2, r1
 8004c54:	61b9      	str	r1, [r7, #24]
 8004c56:	4629      	mov	r1, r5
 8004c58:	eb63 0301 	sbc.w	r3, r3, r1
 8004c5c:	61fb      	str	r3, [r7, #28]
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	f04f 0300 	mov.w	r3, #0
 8004c66:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004c6a:	4659      	mov	r1, fp
 8004c6c:	018b      	lsls	r3, r1, #6
 8004c6e:	4651      	mov	r1, sl
 8004c70:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c74:	4651      	mov	r1, sl
 8004c76:	018a      	lsls	r2, r1, #6
 8004c78:	4651      	mov	r1, sl
 8004c7a:	ebb2 0801 	subs.w	r8, r2, r1
 8004c7e:	4659      	mov	r1, fp
 8004c80:	eb63 0901 	sbc.w	r9, r3, r1
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c98:	4690      	mov	r8, r2
 8004c9a:	4699      	mov	r9, r3
 8004c9c:	4623      	mov	r3, r4
 8004c9e:	eb18 0303 	adds.w	r3, r8, r3
 8004ca2:	613b      	str	r3, [r7, #16]
 8004ca4:	462b      	mov	r3, r5
 8004ca6:	eb49 0303 	adc.w	r3, r9, r3
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004cb8:	4629      	mov	r1, r5
 8004cba:	024b      	lsls	r3, r1, #9
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cc2:	4621      	mov	r1, r4
 8004cc4:	024a      	lsls	r2, r1, #9
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	4619      	mov	r1, r3
 8004cca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cce:	2200      	movs	r2, #0
 8004cd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cd2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004cd4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004cd8:	f7fb ffd6 	bl	8000c88 <__aeabi_uldivmod>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ce6:	e065      	b.n	8004db4 <HAL_RCC_GetSysClockFreq+0x420>
 8004ce8:	40023800 	.word	0x40023800
 8004cec:	00f42400 	.word	0x00f42400
 8004cf0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cf4:	4b3d      	ldr	r3, [pc, #244]	; (8004dec <HAL_RCC_GetSysClockFreq+0x458>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	099b      	lsrs	r3, r3, #6
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	4611      	mov	r1, r2
 8004d00:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d04:	653b      	str	r3, [r7, #80]	; 0x50
 8004d06:	2300      	movs	r3, #0
 8004d08:	657b      	str	r3, [r7, #84]	; 0x54
 8004d0a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004d0e:	4642      	mov	r2, r8
 8004d10:	464b      	mov	r3, r9
 8004d12:	f04f 0000 	mov.w	r0, #0
 8004d16:	f04f 0100 	mov.w	r1, #0
 8004d1a:	0159      	lsls	r1, r3, #5
 8004d1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d20:	0150      	lsls	r0, r2, #5
 8004d22:	4602      	mov	r2, r0
 8004d24:	460b      	mov	r3, r1
 8004d26:	4641      	mov	r1, r8
 8004d28:	1a51      	subs	r1, r2, r1
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	4649      	mov	r1, r9
 8004d2e:	eb63 0301 	sbc.w	r3, r3, r1
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	f04f 0300 	mov.w	r3, #0
 8004d3c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004d40:	4659      	mov	r1, fp
 8004d42:	018b      	lsls	r3, r1, #6
 8004d44:	4651      	mov	r1, sl
 8004d46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d4a:	4651      	mov	r1, sl
 8004d4c:	018a      	lsls	r2, r1, #6
 8004d4e:	4651      	mov	r1, sl
 8004d50:	1a54      	subs	r4, r2, r1
 8004d52:	4659      	mov	r1, fp
 8004d54:	eb63 0501 	sbc.w	r5, r3, r1
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	00eb      	lsls	r3, r5, #3
 8004d62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d66:	00e2      	lsls	r2, r4, #3
 8004d68:	4614      	mov	r4, r2
 8004d6a:	461d      	mov	r5, r3
 8004d6c:	4643      	mov	r3, r8
 8004d6e:	18e3      	adds	r3, r4, r3
 8004d70:	603b      	str	r3, [r7, #0]
 8004d72:	464b      	mov	r3, r9
 8004d74:	eb45 0303 	adc.w	r3, r5, r3
 8004d78:	607b      	str	r3, [r7, #4]
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d86:	4629      	mov	r1, r5
 8004d88:	028b      	lsls	r3, r1, #10
 8004d8a:	4621      	mov	r1, r4
 8004d8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d90:	4621      	mov	r1, r4
 8004d92:	028a      	lsls	r2, r1, #10
 8004d94:	4610      	mov	r0, r2
 8004d96:	4619      	mov	r1, r3
 8004d98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004da0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004da2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004da6:	f7fb ff6f 	bl	8000c88 <__aeabi_uldivmod>
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	4613      	mov	r3, r2
 8004db0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004db4:	4b0d      	ldr	r3, [pc, #52]	; (8004dec <HAL_RCC_GetSysClockFreq+0x458>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	0f1b      	lsrs	r3, r3, #28
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004dc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004dc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004dd2:	e003      	b.n	8004ddc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dd4:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004dd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004dda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ddc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	37b8      	adds	r7, #184	; 0xb8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dea:	bf00      	nop
 8004dec:	40023800 	.word	0x40023800
 8004df0:	00f42400 	.word	0x00f42400

08004df4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e28d      	b.n	8005322 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 8083 	beq.w	8004f1a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e14:	4b94      	ldr	r3, [pc, #592]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f003 030c 	and.w	r3, r3, #12
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	d019      	beq.n	8004e54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e20:	4b91      	ldr	r3, [pc, #580]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e28:	2b08      	cmp	r3, #8
 8004e2a:	d106      	bne.n	8004e3a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e2c:	4b8e      	ldr	r3, [pc, #568]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e38:	d00c      	beq.n	8004e54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e3a:	4b8b      	ldr	r3, [pc, #556]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e42:	2b0c      	cmp	r3, #12
 8004e44:	d112      	bne.n	8004e6c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e46:	4b88      	ldr	r3, [pc, #544]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e52:	d10b      	bne.n	8004e6c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e54:	4b84      	ldr	r3, [pc, #528]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d05b      	beq.n	8004f18 <HAL_RCC_OscConfig+0x124>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d157      	bne.n	8004f18 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e25a      	b.n	8005322 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e74:	d106      	bne.n	8004e84 <HAL_RCC_OscConfig+0x90>
 8004e76:	4b7c      	ldr	r3, [pc, #496]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a7b      	ldr	r2, [pc, #492]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e80:	6013      	str	r3, [r2, #0]
 8004e82:	e01d      	b.n	8004ec0 <HAL_RCC_OscConfig+0xcc>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e8c:	d10c      	bne.n	8004ea8 <HAL_RCC_OscConfig+0xb4>
 8004e8e:	4b76      	ldr	r3, [pc, #472]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a75      	ldr	r2, [pc, #468]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e98:	6013      	str	r3, [r2, #0]
 8004e9a:	4b73      	ldr	r3, [pc, #460]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a72      	ldr	r2, [pc, #456]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	e00b      	b.n	8004ec0 <HAL_RCC_OscConfig+0xcc>
 8004ea8:	4b6f      	ldr	r3, [pc, #444]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a6e      	ldr	r2, [pc, #440]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	4b6c      	ldr	r3, [pc, #432]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a6b      	ldr	r2, [pc, #428]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d013      	beq.n	8004ef0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec8:	f7fe fe26 	bl	8003b18 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ed0:	f7fe fe22 	bl	8003b18 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b64      	cmp	r3, #100	; 0x64
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e21f      	b.n	8005322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ee2:	4b61      	ldr	r3, [pc, #388]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0f0      	beq.n	8004ed0 <HAL_RCC_OscConfig+0xdc>
 8004eee:	e014      	b.n	8004f1a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef0:	f7fe fe12 	bl	8003b18 <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ef8:	f7fe fe0e 	bl	8003b18 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b64      	cmp	r3, #100	; 0x64
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e20b      	b.n	8005322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f0a:	4b57      	ldr	r3, [pc, #348]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1f0      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x104>
 8004f16:	e000      	b.n	8004f1a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d06f      	beq.n	8005006 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f26:	4b50      	ldr	r3, [pc, #320]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 030c 	and.w	r3, r3, #12
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d017      	beq.n	8004f62 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f32:	4b4d      	ldr	r3, [pc, #308]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f3a:	2b08      	cmp	r3, #8
 8004f3c:	d105      	bne.n	8004f4a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f3e:	4b4a      	ldr	r3, [pc, #296]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00b      	beq.n	8004f62 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f4a:	4b47      	ldr	r3, [pc, #284]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f52:	2b0c      	cmp	r3, #12
 8004f54:	d11c      	bne.n	8004f90 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f56:	4b44      	ldr	r3, [pc, #272]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d116      	bne.n	8004f90 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f62:	4b41      	ldr	r3, [pc, #260]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d005      	beq.n	8004f7a <HAL_RCC_OscConfig+0x186>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d001      	beq.n	8004f7a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e1d3      	b.n	8005322 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f7a:	4b3b      	ldr	r3, [pc, #236]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	4937      	ldr	r1, [pc, #220]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f8e:	e03a      	b.n	8005006 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d020      	beq.n	8004fda <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f98:	4b34      	ldr	r3, [pc, #208]	; (800506c <HAL_RCC_OscConfig+0x278>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9e:	f7fe fdbb 	bl	8003b18 <HAL_GetTick>
 8004fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fa6:	f7fe fdb7 	bl	8003b18 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e1b4      	b.n	8005322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fb8:	4b2b      	ldr	r3, [pc, #172]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0f0      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fc4:	4b28      	ldr	r3, [pc, #160]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	4925      	ldr	r1, [pc, #148]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	600b      	str	r3, [r1, #0]
 8004fd8:	e015      	b.n	8005006 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fda:	4b24      	ldr	r3, [pc, #144]	; (800506c <HAL_RCC_OscConfig+0x278>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe0:	f7fe fd9a 	bl	8003b18 <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fe8:	f7fe fd96 	bl	8003b18 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e193      	b.n	8005322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ffa:	4b1b      	ldr	r3, [pc, #108]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1f0      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0308 	and.w	r3, r3, #8
 800500e:	2b00      	cmp	r3, #0
 8005010:	d036      	beq.n	8005080 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d016      	beq.n	8005048 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800501a:	4b15      	ldr	r3, [pc, #84]	; (8005070 <HAL_RCC_OscConfig+0x27c>)
 800501c:	2201      	movs	r2, #1
 800501e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005020:	f7fe fd7a 	bl	8003b18 <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005028:	f7fe fd76 	bl	8003b18 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e173      	b.n	8005322 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800503a:	4b0b      	ldr	r3, [pc, #44]	; (8005068 <HAL_RCC_OscConfig+0x274>)
 800503c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0f0      	beq.n	8005028 <HAL_RCC_OscConfig+0x234>
 8005046:	e01b      	b.n	8005080 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005048:	4b09      	ldr	r3, [pc, #36]	; (8005070 <HAL_RCC_OscConfig+0x27c>)
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800504e:	f7fe fd63 	bl	8003b18 <HAL_GetTick>
 8005052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005054:	e00e      	b.n	8005074 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005056:	f7fe fd5f 	bl	8003b18 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	2b02      	cmp	r3, #2
 8005062:	d907      	bls.n	8005074 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e15c      	b.n	8005322 <HAL_RCC_OscConfig+0x52e>
 8005068:	40023800 	.word	0x40023800
 800506c:	42470000 	.word	0x42470000
 8005070:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005074:	4b8a      	ldr	r3, [pc, #552]	; (80052a0 <HAL_RCC_OscConfig+0x4ac>)
 8005076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1ea      	bne.n	8005056 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 8097 	beq.w	80051bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800508e:	2300      	movs	r3, #0
 8005090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005092:	4b83      	ldr	r3, [pc, #524]	; (80052a0 <HAL_RCC_OscConfig+0x4ac>)
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10f      	bne.n	80050be <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800509e:	2300      	movs	r3, #0
 80050a0:	60bb      	str	r3, [r7, #8]
 80050a2:	4b7f      	ldr	r3, [pc, #508]	; (80052a0 <HAL_RCC_OscConfig+0x4ac>)
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	4a7e      	ldr	r2, [pc, #504]	; (80052a0 <HAL_RCC_OscConfig+0x4ac>)
 80050a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ac:	6413      	str	r3, [r2, #64]	; 0x40
 80050ae:	4b7c      	ldr	r3, [pc, #496]	; (80052a0 <HAL_RCC_OscConfig+0x4ac>)
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b6:	60bb      	str	r3, [r7, #8]
 80050b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050ba:	2301      	movs	r3, #1
 80050bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050be:	4b79      	ldr	r3, [pc, #484]	; (80052a4 <HAL_RCC_OscConfig+0x4b0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d118      	bne.n	80050fc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050ca:	4b76      	ldr	r3, [pc, #472]	; (80052a4 <HAL_RCC_OscConfig+0x4b0>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a75      	ldr	r2, [pc, #468]	; (80052a4 <HAL_RCC_OscConfig+0x4b0>)
 80050d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050d6:	f7fe fd1f 	bl	8003b18 <HAL_GetTick>
 80050da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050dc:	e008      	b.n	80050f0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050de:	f7fe fd1b 	bl	8003b18 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d901      	bls.n	80050f0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e118      	b.n	8005322 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f0:	4b6c      	ldr	r3, [pc, #432]	; (80052a4 <HAL_RCC_OscConfig+0x4b0>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d0f0      	beq.n	80050de <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d106      	bne.n	8005112 <HAL_RCC_OscConfig+0x31e>
 8005104:	4b66      	ldr	r3, [pc, #408]	; (80052a0 <HAL_RCC_OscConfig+0x4ac>)
 8005106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005108:	4a65      	ldr	r2, [pc, #404]	; (80052a0 <HAL_RCC_OscConfig+0x4ac>)
 800510a:	f043 0301 	orr.w	r3, r3, #1
 800510e:	6713      	str	r3, [r2, #112]	; 0x70
 8005110:	e01c      	b.n	800514c <HAL_RCC_OscConfig+0x358>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	2b05      	cmp	r3, #5
 8005118:	d10c      	bne.n	8005134 <HAL_RCC_OscConfig+0x340>
 800511a:	4b61      	ldr	r3, [pc, #388]	; (80052a0 <HAL_RCC_OscConfig+0x4ac>)
 800511c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511e:	4a60      	ldr	r2, [pc, #384]	; (80052a0 <HAL_RCC_OscConfig+0x4ac>)
 8005120:	f043 0304 	orr.w	r3, r3, #4
 8005124:	6713      	str	r3, [r2, #112]	; 0x70
 8005126:	4b5e      	ldr	r3, [pc, #376]	; (80052a0 <HAL_RCC_OscConfig+0x4ac>)
 8005128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512a:	4a5d      	ldr	r2, [pc, #372]	; (80052a0 <HAL_RCC_OscConfig+0x4ac>)
 800512c:	f043 0301 	orr.w	r3, r3, #1
 8005130:	6713      	str	r3, [r2, #112]	; 0x70
 8005132:	e00b      	b.n	800514c <HAL_RCC_OscConfig+0x358>
 8005134:	4b5a      	ldr	r3, [pc, #360]	; (80052a0 <HAL_RCC_OscConfig+0x4ac>)
 8005136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005138:	4a59      	ldr	r2, [pc, #356]	; (80052a0 <HAL_RCC_OscConfig+0x4ac>)
 800513a:	f023 0301 	bic.w	r3, r3, #1
 800513e:	6713      	str	r3, [r2, #112]	; 0x70
 8005140:	4b57      	ldr	r3, [pc, #348]	; (80052a0 <HAL_RCC_OscConfig+0x4ac>)
 8005142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005144:	4a56      	ldr	r2, [pc, #344]	; (80052a0 <HAL_RCC_OscConfig+0x4ac>)
 8005146:	f023 0304 	bic.w	r3, r3, #4
 800514a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d015      	beq.n	8005180 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005154:	f7fe fce0 	bl	8003b18 <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800515a:	e00a      	b.n	8005172 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800515c:	f7fe fcdc 	bl	8003b18 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	f241 3288 	movw	r2, #5000	; 0x1388
 800516a:	4293      	cmp	r3, r2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e0d7      	b.n	8005322 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005172:	4b4b      	ldr	r3, [pc, #300]	; (80052a0 <HAL_RCC_OscConfig+0x4ac>)
 8005174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0ee      	beq.n	800515c <HAL_RCC_OscConfig+0x368>
 800517e:	e014      	b.n	80051aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005180:	f7fe fcca 	bl	8003b18 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005186:	e00a      	b.n	800519e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005188:	f7fe fcc6 	bl	8003b18 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	f241 3288 	movw	r2, #5000	; 0x1388
 8005196:	4293      	cmp	r3, r2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e0c1      	b.n	8005322 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800519e:	4b40      	ldr	r3, [pc, #256]	; (80052a0 <HAL_RCC_OscConfig+0x4ac>)
 80051a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1ee      	bne.n	8005188 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051aa:	7dfb      	ldrb	r3, [r7, #23]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d105      	bne.n	80051bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051b0:	4b3b      	ldr	r3, [pc, #236]	; (80052a0 <HAL_RCC_OscConfig+0x4ac>)
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	4a3a      	ldr	r2, [pc, #232]	; (80052a0 <HAL_RCC_OscConfig+0x4ac>)
 80051b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 80ad 	beq.w	8005320 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051c6:	4b36      	ldr	r3, [pc, #216]	; (80052a0 <HAL_RCC_OscConfig+0x4ac>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 030c 	and.w	r3, r3, #12
 80051ce:	2b08      	cmp	r3, #8
 80051d0:	d060      	beq.n	8005294 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d145      	bne.n	8005266 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051da:	4b33      	ldr	r3, [pc, #204]	; (80052a8 <HAL_RCC_OscConfig+0x4b4>)
 80051dc:	2200      	movs	r2, #0
 80051de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e0:	f7fe fc9a 	bl	8003b18 <HAL_GetTick>
 80051e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051e8:	f7fe fc96 	bl	8003b18 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e093      	b.n	8005322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051fa:	4b29      	ldr	r3, [pc, #164]	; (80052a0 <HAL_RCC_OscConfig+0x4ac>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1f0      	bne.n	80051e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	69da      	ldr	r2, [r3, #28]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	019b      	lsls	r3, r3, #6
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521c:	085b      	lsrs	r3, r3, #1
 800521e:	3b01      	subs	r3, #1
 8005220:	041b      	lsls	r3, r3, #16
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005228:	061b      	lsls	r3, r3, #24
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005230:	071b      	lsls	r3, r3, #28
 8005232:	491b      	ldr	r1, [pc, #108]	; (80052a0 <HAL_RCC_OscConfig+0x4ac>)
 8005234:	4313      	orrs	r3, r2
 8005236:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005238:	4b1b      	ldr	r3, [pc, #108]	; (80052a8 <HAL_RCC_OscConfig+0x4b4>)
 800523a:	2201      	movs	r2, #1
 800523c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523e:	f7fe fc6b 	bl	8003b18 <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005246:	f7fe fc67 	bl	8003b18 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e064      	b.n	8005322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005258:	4b11      	ldr	r3, [pc, #68]	; (80052a0 <HAL_RCC_OscConfig+0x4ac>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0f0      	beq.n	8005246 <HAL_RCC_OscConfig+0x452>
 8005264:	e05c      	b.n	8005320 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005266:	4b10      	ldr	r3, [pc, #64]	; (80052a8 <HAL_RCC_OscConfig+0x4b4>)
 8005268:	2200      	movs	r2, #0
 800526a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526c:	f7fe fc54 	bl	8003b18 <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005274:	f7fe fc50 	bl	8003b18 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e04d      	b.n	8005322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005286:	4b06      	ldr	r3, [pc, #24]	; (80052a0 <HAL_RCC_OscConfig+0x4ac>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1f0      	bne.n	8005274 <HAL_RCC_OscConfig+0x480>
 8005292:	e045      	b.n	8005320 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d107      	bne.n	80052ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e040      	b.n	8005322 <HAL_RCC_OscConfig+0x52e>
 80052a0:	40023800 	.word	0x40023800
 80052a4:	40007000 	.word	0x40007000
 80052a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052ac:	4b1f      	ldr	r3, [pc, #124]	; (800532c <HAL_RCC_OscConfig+0x538>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d030      	beq.n	800531c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d129      	bne.n	800531c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d122      	bne.n	800531c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052dc:	4013      	ands	r3, r2
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d119      	bne.n	800531c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f2:	085b      	lsrs	r3, r3, #1
 80052f4:	3b01      	subs	r3, #1
 80052f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d10f      	bne.n	800531c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005306:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005308:	429a      	cmp	r2, r3
 800530a:	d107      	bne.n	800531c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005316:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005318:	429a      	cmp	r2, r3
 800531a:	d001      	beq.n	8005320 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e000      	b.n	8005322 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	40023800 	.word	0x40023800

08005330 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e07b      	b.n	800543a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	2b00      	cmp	r3, #0
 8005348:	d108      	bne.n	800535c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005352:	d009      	beq.n	8005368 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	61da      	str	r2, [r3, #28]
 800535a:	e005      	b.n	8005368 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d106      	bne.n	8005388 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7fe f992 	bl	80036ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800539e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053b0:	431a      	orrs	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ba:	431a      	orrs	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	431a      	orrs	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	431a      	orrs	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ec:	ea42 0103 	orr.w	r1, r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	0c1b      	lsrs	r3, r3, #16
 8005406:	f003 0104 	and.w	r1, r3, #4
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	f003 0210 	and.w	r2, r3, #16
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	69da      	ldr	r2, [r3, #28]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005428:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b088      	sub	sp, #32
 8005446:	af00      	add	r7, sp, #0
 8005448:	60f8      	str	r0, [r7, #12]
 800544a:	60b9      	str	r1, [r7, #8]
 800544c:	603b      	str	r3, [r7, #0]
 800544e:	4613      	mov	r3, r2
 8005450:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800545c:	2b01      	cmp	r3, #1
 800545e:	d101      	bne.n	8005464 <HAL_SPI_Transmit+0x22>
 8005460:	2302      	movs	r3, #2
 8005462:	e126      	b.n	80056b2 <HAL_SPI_Transmit+0x270>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800546c:	f7fe fb54 	bl	8003b18 <HAL_GetTick>
 8005470:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005472:	88fb      	ldrh	r3, [r7, #6]
 8005474:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b01      	cmp	r3, #1
 8005480:	d002      	beq.n	8005488 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005482:	2302      	movs	r3, #2
 8005484:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005486:	e10b      	b.n	80056a0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d002      	beq.n	8005494 <HAL_SPI_Transmit+0x52>
 800548e:	88fb      	ldrh	r3, [r7, #6]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d102      	bne.n	800549a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005498:	e102      	b.n	80056a0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2203      	movs	r2, #3
 800549e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	88fa      	ldrh	r2, [r7, #6]
 80054b2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	88fa      	ldrh	r2, [r7, #6]
 80054b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054e0:	d10f      	bne.n	8005502 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005500:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550c:	2b40      	cmp	r3, #64	; 0x40
 800550e:	d007      	beq.n	8005520 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800551e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005528:	d14b      	bne.n	80055c2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <HAL_SPI_Transmit+0xf6>
 8005532:	8afb      	ldrh	r3, [r7, #22]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d13e      	bne.n	80055b6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553c:	881a      	ldrh	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005548:	1c9a      	adds	r2, r3, #2
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005552:	b29b      	uxth	r3, r3
 8005554:	3b01      	subs	r3, #1
 8005556:	b29a      	uxth	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800555c:	e02b      	b.n	80055b6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b02      	cmp	r3, #2
 800556a:	d112      	bne.n	8005592 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005570:	881a      	ldrh	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557c:	1c9a      	adds	r2, r3, #2
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005586:	b29b      	uxth	r3, r3
 8005588:	3b01      	subs	r3, #1
 800558a:	b29a      	uxth	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005590:	e011      	b.n	80055b6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005592:	f7fe fac1 	bl	8003b18 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d803      	bhi.n	80055aa <HAL_SPI_Transmit+0x168>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055a8:	d102      	bne.n	80055b0 <HAL_SPI_Transmit+0x16e>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d102      	bne.n	80055b6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80055b4:	e074      	b.n	80056a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1ce      	bne.n	800555e <HAL_SPI_Transmit+0x11c>
 80055c0:	e04c      	b.n	800565c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d002      	beq.n	80055d0 <HAL_SPI_Transmit+0x18e>
 80055ca:	8afb      	ldrh	r3, [r7, #22]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d140      	bne.n	8005652 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	330c      	adds	r3, #12
 80055da:	7812      	ldrb	r2, [r2, #0]
 80055dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e2:	1c5a      	adds	r2, r3, #1
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80055f6:	e02c      	b.n	8005652 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b02      	cmp	r3, #2
 8005604:	d113      	bne.n	800562e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	330c      	adds	r3, #12
 8005610:	7812      	ldrb	r2, [r2, #0]
 8005612:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b01      	subs	r3, #1
 8005626:	b29a      	uxth	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	86da      	strh	r2, [r3, #54]	; 0x36
 800562c:	e011      	b.n	8005652 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800562e:	f7fe fa73 	bl	8003b18 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d803      	bhi.n	8005646 <HAL_SPI_Transmit+0x204>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005644:	d102      	bne.n	800564c <HAL_SPI_Transmit+0x20a>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d102      	bne.n	8005652 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005650:	e026      	b.n	80056a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005656:	b29b      	uxth	r3, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1cd      	bne.n	80055f8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	6839      	ldr	r1, [r7, #0]
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f000 fbcb 	bl	8005dfc <SPI_EndRxTxTransaction>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2220      	movs	r2, #32
 8005670:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10a      	bne.n	8005690 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800567a:	2300      	movs	r3, #0
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	613b      	str	r3, [r7, #16]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	613b      	str	r3, [r7, #16]
 800568e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	77fb      	strb	r3, [r7, #31]
 800569c:	e000      	b.n	80056a0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800569e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3720      	adds	r7, #32
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b088      	sub	sp, #32
 80056be:	af02      	add	r7, sp, #8
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	603b      	str	r3, [r7, #0]
 80056c6:	4613      	mov	r3, r2
 80056c8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056d6:	d112      	bne.n	80056fe <HAL_SPI_Receive+0x44>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10e      	bne.n	80056fe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2204      	movs	r2, #4
 80056e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80056e8:	88fa      	ldrh	r2, [r7, #6]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	4613      	mov	r3, r2
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	68b9      	ldr	r1, [r7, #8]
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 f8f1 	bl	80058dc <HAL_SPI_TransmitReceive>
 80056fa:	4603      	mov	r3, r0
 80056fc:	e0ea      	b.n	80058d4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_SPI_Receive+0x52>
 8005708:	2302      	movs	r3, #2
 800570a:	e0e3      	b.n	80058d4 <HAL_SPI_Receive+0x21a>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005714:	f7fe fa00 	bl	8003b18 <HAL_GetTick>
 8005718:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b01      	cmp	r3, #1
 8005724:	d002      	beq.n	800572c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005726:	2302      	movs	r3, #2
 8005728:	75fb      	strb	r3, [r7, #23]
    goto error;
 800572a:	e0ca      	b.n	80058c2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <HAL_SPI_Receive+0x7e>
 8005732:	88fb      	ldrh	r3, [r7, #6]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d102      	bne.n	800573e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800573c:	e0c1      	b.n	80058c2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2204      	movs	r2, #4
 8005742:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	88fa      	ldrh	r2, [r7, #6]
 8005756:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	88fa      	ldrh	r2, [r7, #6]
 800575c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005784:	d10f      	bne.n	80057a6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005794:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057a4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b0:	2b40      	cmp	r3, #64	; 0x40
 80057b2:	d007      	beq.n	80057c4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057c2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d162      	bne.n	8005892 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80057cc:	e02e      	b.n	800582c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d115      	bne.n	8005808 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f103 020c 	add.w	r2, r3, #12
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e8:	7812      	ldrb	r2, [r2, #0]
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29a      	uxth	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005806:	e011      	b.n	800582c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005808:	f7fe f986 	bl	8003b18 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	429a      	cmp	r2, r3
 8005816:	d803      	bhi.n	8005820 <HAL_SPI_Receive+0x166>
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800581e:	d102      	bne.n	8005826 <HAL_SPI_Receive+0x16c>
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d102      	bne.n	800582c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	75fb      	strb	r3, [r7, #23]
          goto error;
 800582a:	e04a      	b.n	80058c2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005830:	b29b      	uxth	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1cb      	bne.n	80057ce <HAL_SPI_Receive+0x114>
 8005836:	e031      	b.n	800589c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b01      	cmp	r3, #1
 8005844:	d113      	bne.n	800586e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005850:	b292      	uxth	r2, r2
 8005852:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005858:	1c9a      	adds	r2, r3, #2
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005862:	b29b      	uxth	r3, r3
 8005864:	3b01      	subs	r3, #1
 8005866:	b29a      	uxth	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800586c:	e011      	b.n	8005892 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800586e:	f7fe f953 	bl	8003b18 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d803      	bhi.n	8005886 <HAL_SPI_Receive+0x1cc>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005884:	d102      	bne.n	800588c <HAL_SPI_Receive+0x1d2>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d102      	bne.n	8005892 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005890:	e017      	b.n	80058c2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005896:	b29b      	uxth	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1cd      	bne.n	8005838 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f000 fa45 	bl	8005d30 <SPI_EndRxTransaction>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d002      	beq.n	80058b2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2220      	movs	r2, #32
 80058b0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	75fb      	strb	r3, [r7, #23]
 80058be:	e000      	b.n	80058c2 <HAL_SPI_Receive+0x208>
  }

error :
 80058c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3718      	adds	r7, #24
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b08c      	sub	sp, #48	; 0x30
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80058ea:	2301      	movs	r3, #1
 80058ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <HAL_SPI_TransmitReceive+0x26>
 80058fe:	2302      	movs	r3, #2
 8005900:	e18a      	b.n	8005c18 <HAL_SPI_TransmitReceive+0x33c>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800590a:	f7fe f905 	bl	8003b18 <HAL_GetTick>
 800590e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005920:	887b      	ldrh	r3, [r7, #2]
 8005922:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005924:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005928:	2b01      	cmp	r3, #1
 800592a:	d00f      	beq.n	800594c <HAL_SPI_TransmitReceive+0x70>
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005932:	d107      	bne.n	8005944 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d103      	bne.n	8005944 <HAL_SPI_TransmitReceive+0x68>
 800593c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005940:	2b04      	cmp	r3, #4
 8005942:	d003      	beq.n	800594c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005944:	2302      	movs	r3, #2
 8005946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800594a:	e15b      	b.n	8005c04 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d005      	beq.n	800595e <HAL_SPI_TransmitReceive+0x82>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d002      	beq.n	800595e <HAL_SPI_TransmitReceive+0x82>
 8005958:	887b      	ldrh	r3, [r7, #2]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d103      	bne.n	8005966 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005964:	e14e      	b.n	8005c04 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b04      	cmp	r3, #4
 8005970:	d003      	beq.n	800597a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2205      	movs	r2, #5
 8005976:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	887a      	ldrh	r2, [r7, #2]
 800598a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	887a      	ldrh	r2, [r7, #2]
 8005990:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	887a      	ldrh	r2, [r7, #2]
 800599c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	887a      	ldrh	r2, [r7, #2]
 80059a2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ba:	2b40      	cmp	r3, #64	; 0x40
 80059bc:	d007      	beq.n	80059ce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059d6:	d178      	bne.n	8005aca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <HAL_SPI_TransmitReceive+0x10a>
 80059e0:	8b7b      	ldrh	r3, [r7, #26]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d166      	bne.n	8005ab4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ea:	881a      	ldrh	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f6:	1c9a      	adds	r2, r3, #2
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a0a:	e053      	b.n	8005ab4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d11b      	bne.n	8005a52 <HAL_SPI_TransmitReceive+0x176>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d016      	beq.n	8005a52 <HAL_SPI_TransmitReceive+0x176>
 8005a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d113      	bne.n	8005a52 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2e:	881a      	ldrh	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3a:	1c9a      	adds	r2, r3, #2
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d119      	bne.n	8005a94 <HAL_SPI_TransmitReceive+0x1b8>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d014      	beq.n	8005a94 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68da      	ldr	r2, [r3, #12]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a74:	b292      	uxth	r2, r2
 8005a76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7c:	1c9a      	adds	r2, r3, #2
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a90:	2301      	movs	r3, #1
 8005a92:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a94:	f7fe f840 	bl	8003b18 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d807      	bhi.n	8005ab4 <HAL_SPI_TransmitReceive+0x1d8>
 8005aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aaa:	d003      	beq.n	8005ab4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ab2:	e0a7      	b.n	8005c04 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1a6      	bne.n	8005a0c <HAL_SPI_TransmitReceive+0x130>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1a1      	bne.n	8005a0c <HAL_SPI_TransmitReceive+0x130>
 8005ac8:	e07c      	b.n	8005bc4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d002      	beq.n	8005ad8 <HAL_SPI_TransmitReceive+0x1fc>
 8005ad2:	8b7b      	ldrh	r3, [r7, #26]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d16b      	bne.n	8005bb0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	330c      	adds	r3, #12
 8005ae2:	7812      	ldrb	r2, [r2, #0]
 8005ae4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	3b01      	subs	r3, #1
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005afe:	e057      	b.n	8005bb0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f003 0302 	and.w	r3, r3, #2
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d11c      	bne.n	8005b48 <HAL_SPI_TransmitReceive+0x26c>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d017      	beq.n	8005b48 <HAL_SPI_TransmitReceive+0x26c>
 8005b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d114      	bne.n	8005b48 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	330c      	adds	r3, #12
 8005b28:	7812      	ldrb	r2, [r2, #0]
 8005b2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b30:	1c5a      	adds	r2, r3, #1
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d119      	bne.n	8005b8a <HAL_SPI_TransmitReceive+0x2ae>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d014      	beq.n	8005b8a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	b2d2      	uxtb	r2, r2
 8005b6c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b72:	1c5a      	adds	r2, r3, #1
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b86:	2301      	movs	r3, #1
 8005b88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b8a:	f7fd ffc5 	bl	8003b18 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d803      	bhi.n	8005ba2 <HAL_SPI_TransmitReceive+0x2c6>
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ba0:	d102      	bne.n	8005ba8 <HAL_SPI_TransmitReceive+0x2cc>
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d103      	bne.n	8005bb0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005bae:	e029      	b.n	8005c04 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1a2      	bne.n	8005b00 <HAL_SPI_TransmitReceive+0x224>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d19d      	bne.n	8005b00 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f000 f917 	bl	8005dfc <SPI_EndRxTxTransaction>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d006      	beq.n	8005be2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005be0:	e010      	b.n	8005c04 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10b      	bne.n	8005c02 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bea:	2300      	movs	r3, #0
 8005bec:	617b      	str	r3, [r7, #20]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	617b      	str	r3, [r7, #20]
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	e000      	b.n	8005c04 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005c02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3730      	adds	r7, #48	; 0x30
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b088      	sub	sp, #32
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	603b      	str	r3, [r7, #0]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c30:	f7fd ff72 	bl	8003b18 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c38:	1a9b      	subs	r3, r3, r2
 8005c3a:	683a      	ldr	r2, [r7, #0]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c40:	f7fd ff6a 	bl	8003b18 <HAL_GetTick>
 8005c44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c46:	4b39      	ldr	r3, [pc, #228]	; (8005d2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	015b      	lsls	r3, r3, #5
 8005c4c:	0d1b      	lsrs	r3, r3, #20
 8005c4e:	69fa      	ldr	r2, [r7, #28]
 8005c50:	fb02 f303 	mul.w	r3, r2, r3
 8005c54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c56:	e054      	b.n	8005d02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c5e:	d050      	beq.n	8005d02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c60:	f7fd ff5a 	bl	8003b18 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d902      	bls.n	8005c76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d13d      	bne.n	8005cf2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c8e:	d111      	bne.n	8005cb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c98:	d004      	beq.n	8005ca4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca2:	d107      	bne.n	8005cb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cbc:	d10f      	bne.n	8005cde <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e017      	b.n	8005d22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689a      	ldr	r2, [r3, #8]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	bf0c      	ite	eq
 8005d12:	2301      	moveq	r3, #1
 8005d14:	2300      	movne	r3, #0
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	461a      	mov	r2, r3
 8005d1a:	79fb      	ldrb	r3, [r7, #7]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d19b      	bne.n	8005c58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3720      	adds	r7, #32
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20000014 	.word	0x20000014

08005d30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af02      	add	r7, sp, #8
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d44:	d111      	bne.n	8005d6a <SPI_EndRxTransaction+0x3a>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d4e:	d004      	beq.n	8005d5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d58:	d107      	bne.n	8005d6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d68:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d72:	d12a      	bne.n	8005dca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d7c:	d012      	beq.n	8005da4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	2200      	movs	r2, #0
 8005d86:	2180      	movs	r1, #128	; 0x80
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f7ff ff49 	bl	8005c20 <SPI_WaitFlagStateUntilTimeout>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d02d      	beq.n	8005df0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d98:	f043 0220 	orr.w	r2, r3, #32
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e026      	b.n	8005df2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2200      	movs	r2, #0
 8005dac:	2101      	movs	r1, #1
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f7ff ff36 	bl	8005c20 <SPI_WaitFlagStateUntilTimeout>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d01a      	beq.n	8005df0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dbe:	f043 0220 	orr.w	r2, r3, #32
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e013      	b.n	8005df2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	2101      	movs	r1, #1
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f7ff ff23 	bl	8005c20 <SPI_WaitFlagStateUntilTimeout>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d007      	beq.n	8005df0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de4:	f043 0220 	orr.w	r2, r3, #32
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e000      	b.n	8005df2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
	...

08005dfc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b088      	sub	sp, #32
 8005e00:	af02      	add	r7, sp, #8
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e08:	4b1b      	ldr	r3, [pc, #108]	; (8005e78 <SPI_EndRxTxTransaction+0x7c>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a1b      	ldr	r2, [pc, #108]	; (8005e7c <SPI_EndRxTxTransaction+0x80>)
 8005e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e12:	0d5b      	lsrs	r3, r3, #21
 8005e14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e18:	fb02 f303 	mul.w	r3, r2, r3
 8005e1c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e26:	d112      	bne.n	8005e4e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	2180      	movs	r1, #128	; 0x80
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f7ff fef4 	bl	8005c20 <SPI_WaitFlagStateUntilTimeout>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d016      	beq.n	8005e6c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e42:	f043 0220 	orr.w	r2, r3, #32
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e00f      	b.n	8005e6e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00a      	beq.n	8005e6a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	3b01      	subs	r3, #1
 8005e58:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e64:	2b80      	cmp	r3, #128	; 0x80
 8005e66:	d0f2      	beq.n	8005e4e <SPI_EndRxTxTransaction+0x52>
 8005e68:	e000      	b.n	8005e6c <SPI_EndRxTxTransaction+0x70>
        break;
 8005e6a:	bf00      	nop
  }

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3718      	adds	r7, #24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20000014 	.word	0x20000014
 8005e7c:	165e9f81 	.word	0x165e9f81

08005e80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e03f      	b.n	8005f12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d106      	bne.n	8005eac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fd fc48 	bl	800373c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2224      	movs	r2, #36	; 0x24
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68da      	ldr	r2, [r3, #12]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ec2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f929 	bl	800611c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	691a      	ldr	r2, [r3, #16]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ed8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	695a      	ldr	r2, [r3, #20]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ee8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68da      	ldr	r2, [r3, #12]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ef8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2220      	movs	r2, #32
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b08a      	sub	sp, #40	; 0x28
 8005f1e:	af02      	add	r7, sp, #8
 8005f20:	60f8      	str	r0, [r7, #12]
 8005f22:	60b9      	str	r1, [r7, #8]
 8005f24:	603b      	str	r3, [r7, #0]
 8005f26:	4613      	mov	r3, r2
 8005f28:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b20      	cmp	r3, #32
 8005f38:	d17c      	bne.n	8006034 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <HAL_UART_Transmit+0x2c>
 8005f40:	88fb      	ldrh	r3, [r7, #6]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e075      	b.n	8006036 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d101      	bne.n	8005f58 <HAL_UART_Transmit+0x3e>
 8005f54:	2302      	movs	r3, #2
 8005f56:	e06e      	b.n	8006036 <HAL_UART_Transmit+0x11c>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2221      	movs	r2, #33	; 0x21
 8005f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f6e:	f7fd fdd3 	bl	8003b18 <HAL_GetTick>
 8005f72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	88fa      	ldrh	r2, [r7, #6]
 8005f78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	88fa      	ldrh	r2, [r7, #6]
 8005f7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f88:	d108      	bne.n	8005f9c <HAL_UART_Transmit+0x82>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d104      	bne.n	8005f9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	61bb      	str	r3, [r7, #24]
 8005f9a:	e003      	b.n	8005fa4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005fac:	e02a      	b.n	8006004 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	2180      	movs	r1, #128	; 0x80
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 f840 	bl	800603e <UART_WaitOnFlagUntilTimeout>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e036      	b.n	8006036 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10b      	bne.n	8005fe6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	3302      	adds	r3, #2
 8005fe2:	61bb      	str	r3, [r7, #24]
 8005fe4:	e007      	b.n	8005ff6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	781a      	ldrb	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006008:	b29b      	uxth	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1cf      	bne.n	8005fae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2200      	movs	r2, #0
 8006016:	2140      	movs	r1, #64	; 0x40
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 f810 	bl	800603e <UART_WaitOnFlagUntilTimeout>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e006      	b.n	8006036 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2220      	movs	r2, #32
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006030:	2300      	movs	r3, #0
 8006032:	e000      	b.n	8006036 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006034:	2302      	movs	r3, #2
  }
}
 8006036:	4618      	mov	r0, r3
 8006038:	3720      	adds	r7, #32
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b090      	sub	sp, #64	; 0x40
 8006042:	af00      	add	r7, sp, #0
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	603b      	str	r3, [r7, #0]
 800604a:	4613      	mov	r3, r2
 800604c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800604e:	e050      	b.n	80060f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006056:	d04c      	beq.n	80060f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800605a:	2b00      	cmp	r3, #0
 800605c:	d007      	beq.n	800606e <UART_WaitOnFlagUntilTimeout+0x30>
 800605e:	f7fd fd5b 	bl	8003b18 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800606a:	429a      	cmp	r2, r3
 800606c:	d241      	bcs.n	80060f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	330c      	adds	r3, #12
 8006074:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006078:	e853 3f00 	ldrex	r3, [r3]
 800607c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006084:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	330c      	adds	r3, #12
 800608c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800608e:	637a      	str	r2, [r7, #52]	; 0x34
 8006090:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006092:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006094:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006096:	e841 2300 	strex	r3, r2, [r1]
 800609a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800609c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1e5      	bne.n	800606e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	3314      	adds	r3, #20
 80060a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	e853 3f00 	ldrex	r3, [r3]
 80060b0:	613b      	str	r3, [r7, #16]
   return(result);
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f023 0301 	bic.w	r3, r3, #1
 80060b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3314      	adds	r3, #20
 80060c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060c2:	623a      	str	r2, [r7, #32]
 80060c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c6:	69f9      	ldr	r1, [r7, #28]
 80060c8:	6a3a      	ldr	r2, [r7, #32]
 80060ca:	e841 2300 	strex	r3, r2, [r1]
 80060ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1e5      	bne.n	80060a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2220      	movs	r2, #32
 80060da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e00f      	b.n	8006112 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	4013      	ands	r3, r2
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	429a      	cmp	r2, r3
 8006100:	bf0c      	ite	eq
 8006102:	2301      	moveq	r3, #1
 8006104:	2300      	movne	r3, #0
 8006106:	b2db      	uxtb	r3, r3
 8006108:	461a      	mov	r2, r3
 800610a:	79fb      	ldrb	r3, [r7, #7]
 800610c:	429a      	cmp	r2, r3
 800610e:	d09f      	beq.n	8006050 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3740      	adds	r7, #64	; 0x40
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
	...

0800611c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800611c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006120:	b0c0      	sub	sp, #256	; 0x100
 8006122:	af00      	add	r7, sp, #0
 8006124:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006138:	68d9      	ldr	r1, [r3, #12]
 800613a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	ea40 0301 	orr.w	r3, r0, r1
 8006144:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	431a      	orrs	r2, r3
 8006154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	431a      	orrs	r2, r3
 800615c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	4313      	orrs	r3, r2
 8006164:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006174:	f021 010c 	bic.w	r1, r1, #12
 8006178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006182:	430b      	orrs	r3, r1
 8006184:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006196:	6999      	ldr	r1, [r3, #24]
 8006198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	ea40 0301 	orr.w	r3, r0, r1
 80061a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	4b8f      	ldr	r3, [pc, #572]	; (80063e8 <UART_SetConfig+0x2cc>)
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d005      	beq.n	80061bc <UART_SetConfig+0xa0>
 80061b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	4b8d      	ldr	r3, [pc, #564]	; (80063ec <UART_SetConfig+0x2d0>)
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d104      	bne.n	80061c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061bc:	f7fe fbd6 	bl	800496c <HAL_RCC_GetPCLK2Freq>
 80061c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80061c4:	e003      	b.n	80061ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061c6:	f7fe fbbd 	bl	8004944 <HAL_RCC_GetPCLK1Freq>
 80061ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d2:	69db      	ldr	r3, [r3, #28]
 80061d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061d8:	f040 810c 	bne.w	80063f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061e0:	2200      	movs	r2, #0
 80061e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80061ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80061ee:	4622      	mov	r2, r4
 80061f0:	462b      	mov	r3, r5
 80061f2:	1891      	adds	r1, r2, r2
 80061f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80061f6:	415b      	adcs	r3, r3
 80061f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80061fe:	4621      	mov	r1, r4
 8006200:	eb12 0801 	adds.w	r8, r2, r1
 8006204:	4629      	mov	r1, r5
 8006206:	eb43 0901 	adc.w	r9, r3, r1
 800620a:	f04f 0200 	mov.w	r2, #0
 800620e:	f04f 0300 	mov.w	r3, #0
 8006212:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006216:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800621a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800621e:	4690      	mov	r8, r2
 8006220:	4699      	mov	r9, r3
 8006222:	4623      	mov	r3, r4
 8006224:	eb18 0303 	adds.w	r3, r8, r3
 8006228:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800622c:	462b      	mov	r3, r5
 800622e:	eb49 0303 	adc.w	r3, r9, r3
 8006232:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006242:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006246:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800624a:	460b      	mov	r3, r1
 800624c:	18db      	adds	r3, r3, r3
 800624e:	653b      	str	r3, [r7, #80]	; 0x50
 8006250:	4613      	mov	r3, r2
 8006252:	eb42 0303 	adc.w	r3, r2, r3
 8006256:	657b      	str	r3, [r7, #84]	; 0x54
 8006258:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800625c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006260:	f7fa fd12 	bl	8000c88 <__aeabi_uldivmod>
 8006264:	4602      	mov	r2, r0
 8006266:	460b      	mov	r3, r1
 8006268:	4b61      	ldr	r3, [pc, #388]	; (80063f0 <UART_SetConfig+0x2d4>)
 800626a:	fba3 2302 	umull	r2, r3, r3, r2
 800626e:	095b      	lsrs	r3, r3, #5
 8006270:	011c      	lsls	r4, r3, #4
 8006272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006276:	2200      	movs	r2, #0
 8006278:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800627c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006280:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006284:	4642      	mov	r2, r8
 8006286:	464b      	mov	r3, r9
 8006288:	1891      	adds	r1, r2, r2
 800628a:	64b9      	str	r1, [r7, #72]	; 0x48
 800628c:	415b      	adcs	r3, r3
 800628e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006290:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006294:	4641      	mov	r1, r8
 8006296:	eb12 0a01 	adds.w	sl, r2, r1
 800629a:	4649      	mov	r1, r9
 800629c:	eb43 0b01 	adc.w	fp, r3, r1
 80062a0:	f04f 0200 	mov.w	r2, #0
 80062a4:	f04f 0300 	mov.w	r3, #0
 80062a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062b4:	4692      	mov	sl, r2
 80062b6:	469b      	mov	fp, r3
 80062b8:	4643      	mov	r3, r8
 80062ba:	eb1a 0303 	adds.w	r3, sl, r3
 80062be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062c2:	464b      	mov	r3, r9
 80062c4:	eb4b 0303 	adc.w	r3, fp, r3
 80062c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80062dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80062e0:	460b      	mov	r3, r1
 80062e2:	18db      	adds	r3, r3, r3
 80062e4:	643b      	str	r3, [r7, #64]	; 0x40
 80062e6:	4613      	mov	r3, r2
 80062e8:	eb42 0303 	adc.w	r3, r2, r3
 80062ec:	647b      	str	r3, [r7, #68]	; 0x44
 80062ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80062f6:	f7fa fcc7 	bl	8000c88 <__aeabi_uldivmod>
 80062fa:	4602      	mov	r2, r0
 80062fc:	460b      	mov	r3, r1
 80062fe:	4611      	mov	r1, r2
 8006300:	4b3b      	ldr	r3, [pc, #236]	; (80063f0 <UART_SetConfig+0x2d4>)
 8006302:	fba3 2301 	umull	r2, r3, r3, r1
 8006306:	095b      	lsrs	r3, r3, #5
 8006308:	2264      	movs	r2, #100	; 0x64
 800630a:	fb02 f303 	mul.w	r3, r2, r3
 800630e:	1acb      	subs	r3, r1, r3
 8006310:	00db      	lsls	r3, r3, #3
 8006312:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006316:	4b36      	ldr	r3, [pc, #216]	; (80063f0 <UART_SetConfig+0x2d4>)
 8006318:	fba3 2302 	umull	r2, r3, r3, r2
 800631c:	095b      	lsrs	r3, r3, #5
 800631e:	005b      	lsls	r3, r3, #1
 8006320:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006324:	441c      	add	r4, r3
 8006326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800632a:	2200      	movs	r2, #0
 800632c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006330:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006334:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006338:	4642      	mov	r2, r8
 800633a:	464b      	mov	r3, r9
 800633c:	1891      	adds	r1, r2, r2
 800633e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006340:	415b      	adcs	r3, r3
 8006342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006344:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006348:	4641      	mov	r1, r8
 800634a:	1851      	adds	r1, r2, r1
 800634c:	6339      	str	r1, [r7, #48]	; 0x30
 800634e:	4649      	mov	r1, r9
 8006350:	414b      	adcs	r3, r1
 8006352:	637b      	str	r3, [r7, #52]	; 0x34
 8006354:	f04f 0200 	mov.w	r2, #0
 8006358:	f04f 0300 	mov.w	r3, #0
 800635c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006360:	4659      	mov	r1, fp
 8006362:	00cb      	lsls	r3, r1, #3
 8006364:	4651      	mov	r1, sl
 8006366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800636a:	4651      	mov	r1, sl
 800636c:	00ca      	lsls	r2, r1, #3
 800636e:	4610      	mov	r0, r2
 8006370:	4619      	mov	r1, r3
 8006372:	4603      	mov	r3, r0
 8006374:	4642      	mov	r2, r8
 8006376:	189b      	adds	r3, r3, r2
 8006378:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800637c:	464b      	mov	r3, r9
 800637e:	460a      	mov	r2, r1
 8006380:	eb42 0303 	adc.w	r3, r2, r3
 8006384:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006394:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006398:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800639c:	460b      	mov	r3, r1
 800639e:	18db      	adds	r3, r3, r3
 80063a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80063a2:	4613      	mov	r3, r2
 80063a4:	eb42 0303 	adc.w	r3, r2, r3
 80063a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80063b2:	f7fa fc69 	bl	8000c88 <__aeabi_uldivmod>
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	4b0d      	ldr	r3, [pc, #52]	; (80063f0 <UART_SetConfig+0x2d4>)
 80063bc:	fba3 1302 	umull	r1, r3, r3, r2
 80063c0:	095b      	lsrs	r3, r3, #5
 80063c2:	2164      	movs	r1, #100	; 0x64
 80063c4:	fb01 f303 	mul.w	r3, r1, r3
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	3332      	adds	r3, #50	; 0x32
 80063ce:	4a08      	ldr	r2, [pc, #32]	; (80063f0 <UART_SetConfig+0x2d4>)
 80063d0:	fba2 2303 	umull	r2, r3, r2, r3
 80063d4:	095b      	lsrs	r3, r3, #5
 80063d6:	f003 0207 	and.w	r2, r3, #7
 80063da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4422      	add	r2, r4
 80063e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063e4:	e105      	b.n	80065f2 <UART_SetConfig+0x4d6>
 80063e6:	bf00      	nop
 80063e8:	40011000 	.word	0x40011000
 80063ec:	40011400 	.word	0x40011400
 80063f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063f8:	2200      	movs	r2, #0
 80063fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006402:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006406:	4642      	mov	r2, r8
 8006408:	464b      	mov	r3, r9
 800640a:	1891      	adds	r1, r2, r2
 800640c:	6239      	str	r1, [r7, #32]
 800640e:	415b      	adcs	r3, r3
 8006410:	627b      	str	r3, [r7, #36]	; 0x24
 8006412:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006416:	4641      	mov	r1, r8
 8006418:	1854      	adds	r4, r2, r1
 800641a:	4649      	mov	r1, r9
 800641c:	eb43 0501 	adc.w	r5, r3, r1
 8006420:	f04f 0200 	mov.w	r2, #0
 8006424:	f04f 0300 	mov.w	r3, #0
 8006428:	00eb      	lsls	r3, r5, #3
 800642a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800642e:	00e2      	lsls	r2, r4, #3
 8006430:	4614      	mov	r4, r2
 8006432:	461d      	mov	r5, r3
 8006434:	4643      	mov	r3, r8
 8006436:	18e3      	adds	r3, r4, r3
 8006438:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800643c:	464b      	mov	r3, r9
 800643e:	eb45 0303 	adc.w	r3, r5, r3
 8006442:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006452:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006456:	f04f 0200 	mov.w	r2, #0
 800645a:	f04f 0300 	mov.w	r3, #0
 800645e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006462:	4629      	mov	r1, r5
 8006464:	008b      	lsls	r3, r1, #2
 8006466:	4621      	mov	r1, r4
 8006468:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800646c:	4621      	mov	r1, r4
 800646e:	008a      	lsls	r2, r1, #2
 8006470:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006474:	f7fa fc08 	bl	8000c88 <__aeabi_uldivmod>
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
 800647c:	4b60      	ldr	r3, [pc, #384]	; (8006600 <UART_SetConfig+0x4e4>)
 800647e:	fba3 2302 	umull	r2, r3, r3, r2
 8006482:	095b      	lsrs	r3, r3, #5
 8006484:	011c      	lsls	r4, r3, #4
 8006486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800648a:	2200      	movs	r2, #0
 800648c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006490:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006494:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006498:	4642      	mov	r2, r8
 800649a:	464b      	mov	r3, r9
 800649c:	1891      	adds	r1, r2, r2
 800649e:	61b9      	str	r1, [r7, #24]
 80064a0:	415b      	adcs	r3, r3
 80064a2:	61fb      	str	r3, [r7, #28]
 80064a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064a8:	4641      	mov	r1, r8
 80064aa:	1851      	adds	r1, r2, r1
 80064ac:	6139      	str	r1, [r7, #16]
 80064ae:	4649      	mov	r1, r9
 80064b0:	414b      	adcs	r3, r1
 80064b2:	617b      	str	r3, [r7, #20]
 80064b4:	f04f 0200 	mov.w	r2, #0
 80064b8:	f04f 0300 	mov.w	r3, #0
 80064bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064c0:	4659      	mov	r1, fp
 80064c2:	00cb      	lsls	r3, r1, #3
 80064c4:	4651      	mov	r1, sl
 80064c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064ca:	4651      	mov	r1, sl
 80064cc:	00ca      	lsls	r2, r1, #3
 80064ce:	4610      	mov	r0, r2
 80064d0:	4619      	mov	r1, r3
 80064d2:	4603      	mov	r3, r0
 80064d4:	4642      	mov	r2, r8
 80064d6:	189b      	adds	r3, r3, r2
 80064d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064dc:	464b      	mov	r3, r9
 80064de:	460a      	mov	r2, r1
 80064e0:	eb42 0303 	adc.w	r3, r2, r3
 80064e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80064f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80064f4:	f04f 0200 	mov.w	r2, #0
 80064f8:	f04f 0300 	mov.w	r3, #0
 80064fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006500:	4649      	mov	r1, r9
 8006502:	008b      	lsls	r3, r1, #2
 8006504:	4641      	mov	r1, r8
 8006506:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800650a:	4641      	mov	r1, r8
 800650c:	008a      	lsls	r2, r1, #2
 800650e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006512:	f7fa fbb9 	bl	8000c88 <__aeabi_uldivmod>
 8006516:	4602      	mov	r2, r0
 8006518:	460b      	mov	r3, r1
 800651a:	4b39      	ldr	r3, [pc, #228]	; (8006600 <UART_SetConfig+0x4e4>)
 800651c:	fba3 1302 	umull	r1, r3, r3, r2
 8006520:	095b      	lsrs	r3, r3, #5
 8006522:	2164      	movs	r1, #100	; 0x64
 8006524:	fb01 f303 	mul.w	r3, r1, r3
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	011b      	lsls	r3, r3, #4
 800652c:	3332      	adds	r3, #50	; 0x32
 800652e:	4a34      	ldr	r2, [pc, #208]	; (8006600 <UART_SetConfig+0x4e4>)
 8006530:	fba2 2303 	umull	r2, r3, r2, r3
 8006534:	095b      	lsrs	r3, r3, #5
 8006536:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800653a:	441c      	add	r4, r3
 800653c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006540:	2200      	movs	r2, #0
 8006542:	673b      	str	r3, [r7, #112]	; 0x70
 8006544:	677a      	str	r2, [r7, #116]	; 0x74
 8006546:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800654a:	4642      	mov	r2, r8
 800654c:	464b      	mov	r3, r9
 800654e:	1891      	adds	r1, r2, r2
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	415b      	adcs	r3, r3
 8006554:	60fb      	str	r3, [r7, #12]
 8006556:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800655a:	4641      	mov	r1, r8
 800655c:	1851      	adds	r1, r2, r1
 800655e:	6039      	str	r1, [r7, #0]
 8006560:	4649      	mov	r1, r9
 8006562:	414b      	adcs	r3, r1
 8006564:	607b      	str	r3, [r7, #4]
 8006566:	f04f 0200 	mov.w	r2, #0
 800656a:	f04f 0300 	mov.w	r3, #0
 800656e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006572:	4659      	mov	r1, fp
 8006574:	00cb      	lsls	r3, r1, #3
 8006576:	4651      	mov	r1, sl
 8006578:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800657c:	4651      	mov	r1, sl
 800657e:	00ca      	lsls	r2, r1, #3
 8006580:	4610      	mov	r0, r2
 8006582:	4619      	mov	r1, r3
 8006584:	4603      	mov	r3, r0
 8006586:	4642      	mov	r2, r8
 8006588:	189b      	adds	r3, r3, r2
 800658a:	66bb      	str	r3, [r7, #104]	; 0x68
 800658c:	464b      	mov	r3, r9
 800658e:	460a      	mov	r2, r1
 8006590:	eb42 0303 	adc.w	r3, r2, r3
 8006594:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	663b      	str	r3, [r7, #96]	; 0x60
 80065a0:	667a      	str	r2, [r7, #100]	; 0x64
 80065a2:	f04f 0200 	mov.w	r2, #0
 80065a6:	f04f 0300 	mov.w	r3, #0
 80065aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80065ae:	4649      	mov	r1, r9
 80065b0:	008b      	lsls	r3, r1, #2
 80065b2:	4641      	mov	r1, r8
 80065b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065b8:	4641      	mov	r1, r8
 80065ba:	008a      	lsls	r2, r1, #2
 80065bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80065c0:	f7fa fb62 	bl	8000c88 <__aeabi_uldivmod>
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	4b0d      	ldr	r3, [pc, #52]	; (8006600 <UART_SetConfig+0x4e4>)
 80065ca:	fba3 1302 	umull	r1, r3, r3, r2
 80065ce:	095b      	lsrs	r3, r3, #5
 80065d0:	2164      	movs	r1, #100	; 0x64
 80065d2:	fb01 f303 	mul.w	r3, r1, r3
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	011b      	lsls	r3, r3, #4
 80065da:	3332      	adds	r3, #50	; 0x32
 80065dc:	4a08      	ldr	r2, [pc, #32]	; (8006600 <UART_SetConfig+0x4e4>)
 80065de:	fba2 2303 	umull	r2, r3, r2, r3
 80065e2:	095b      	lsrs	r3, r3, #5
 80065e4:	f003 020f 	and.w	r2, r3, #15
 80065e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4422      	add	r2, r4
 80065f0:	609a      	str	r2, [r3, #8]
}
 80065f2:	bf00      	nop
 80065f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80065f8:	46bd      	mov	sp, r7
 80065fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065fe:	bf00      	nop
 8006600:	51eb851f 	.word	0x51eb851f

08006604 <__errno>:
 8006604:	4b01      	ldr	r3, [pc, #4]	; (800660c <__errno+0x8>)
 8006606:	6818      	ldr	r0, [r3, #0]
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	20000020 	.word	0x20000020

08006610 <__libc_init_array>:
 8006610:	b570      	push	{r4, r5, r6, lr}
 8006612:	4d0d      	ldr	r5, [pc, #52]	; (8006648 <__libc_init_array+0x38>)
 8006614:	4c0d      	ldr	r4, [pc, #52]	; (800664c <__libc_init_array+0x3c>)
 8006616:	1b64      	subs	r4, r4, r5
 8006618:	10a4      	asrs	r4, r4, #2
 800661a:	2600      	movs	r6, #0
 800661c:	42a6      	cmp	r6, r4
 800661e:	d109      	bne.n	8006634 <__libc_init_array+0x24>
 8006620:	4d0b      	ldr	r5, [pc, #44]	; (8006650 <__libc_init_array+0x40>)
 8006622:	4c0c      	ldr	r4, [pc, #48]	; (8006654 <__libc_init_array+0x44>)
 8006624:	f002 ff1c 	bl	8009460 <_init>
 8006628:	1b64      	subs	r4, r4, r5
 800662a:	10a4      	asrs	r4, r4, #2
 800662c:	2600      	movs	r6, #0
 800662e:	42a6      	cmp	r6, r4
 8006630:	d105      	bne.n	800663e <__libc_init_array+0x2e>
 8006632:	bd70      	pop	{r4, r5, r6, pc}
 8006634:	f855 3b04 	ldr.w	r3, [r5], #4
 8006638:	4798      	blx	r3
 800663a:	3601      	adds	r6, #1
 800663c:	e7ee      	b.n	800661c <__libc_init_array+0xc>
 800663e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006642:	4798      	blx	r3
 8006644:	3601      	adds	r6, #1
 8006646:	e7f2      	b.n	800662e <__libc_init_array+0x1e>
 8006648:	08009a7c 	.word	0x08009a7c
 800664c:	08009a7c 	.word	0x08009a7c
 8006650:	08009a7c 	.word	0x08009a7c
 8006654:	08009a80 	.word	0x08009a80

08006658 <malloc>:
 8006658:	4b02      	ldr	r3, [pc, #8]	; (8006664 <malloc+0xc>)
 800665a:	4601      	mov	r1, r0
 800665c:	6818      	ldr	r0, [r3, #0]
 800665e:	f000 b87f 	b.w	8006760 <_malloc_r>
 8006662:	bf00      	nop
 8006664:	20000020 	.word	0x20000020

08006668 <free>:
 8006668:	4b02      	ldr	r3, [pc, #8]	; (8006674 <free+0xc>)
 800666a:	4601      	mov	r1, r0
 800666c:	6818      	ldr	r0, [r3, #0]
 800666e:	f000 b80b 	b.w	8006688 <_free_r>
 8006672:	bf00      	nop
 8006674:	20000020 	.word	0x20000020

08006678 <memset>:
 8006678:	4402      	add	r2, r0
 800667a:	4603      	mov	r3, r0
 800667c:	4293      	cmp	r3, r2
 800667e:	d100      	bne.n	8006682 <memset+0xa>
 8006680:	4770      	bx	lr
 8006682:	f803 1b01 	strb.w	r1, [r3], #1
 8006686:	e7f9      	b.n	800667c <memset+0x4>

08006688 <_free_r>:
 8006688:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800668a:	2900      	cmp	r1, #0
 800668c:	d044      	beq.n	8006718 <_free_r+0x90>
 800668e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006692:	9001      	str	r0, [sp, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	f1a1 0404 	sub.w	r4, r1, #4
 800669a:	bfb8      	it	lt
 800669c:	18e4      	addlt	r4, r4, r3
 800669e:	f001 fc0b 	bl	8007eb8 <__malloc_lock>
 80066a2:	4a1e      	ldr	r2, [pc, #120]	; (800671c <_free_r+0x94>)
 80066a4:	9801      	ldr	r0, [sp, #4]
 80066a6:	6813      	ldr	r3, [r2, #0]
 80066a8:	b933      	cbnz	r3, 80066b8 <_free_r+0x30>
 80066aa:	6063      	str	r3, [r4, #4]
 80066ac:	6014      	str	r4, [r2, #0]
 80066ae:	b003      	add	sp, #12
 80066b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066b4:	f001 bc06 	b.w	8007ec4 <__malloc_unlock>
 80066b8:	42a3      	cmp	r3, r4
 80066ba:	d908      	bls.n	80066ce <_free_r+0x46>
 80066bc:	6825      	ldr	r5, [r4, #0]
 80066be:	1961      	adds	r1, r4, r5
 80066c0:	428b      	cmp	r3, r1
 80066c2:	bf01      	itttt	eq
 80066c4:	6819      	ldreq	r1, [r3, #0]
 80066c6:	685b      	ldreq	r3, [r3, #4]
 80066c8:	1949      	addeq	r1, r1, r5
 80066ca:	6021      	streq	r1, [r4, #0]
 80066cc:	e7ed      	b.n	80066aa <_free_r+0x22>
 80066ce:	461a      	mov	r2, r3
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	b10b      	cbz	r3, 80066d8 <_free_r+0x50>
 80066d4:	42a3      	cmp	r3, r4
 80066d6:	d9fa      	bls.n	80066ce <_free_r+0x46>
 80066d8:	6811      	ldr	r1, [r2, #0]
 80066da:	1855      	adds	r5, r2, r1
 80066dc:	42a5      	cmp	r5, r4
 80066de:	d10b      	bne.n	80066f8 <_free_r+0x70>
 80066e0:	6824      	ldr	r4, [r4, #0]
 80066e2:	4421      	add	r1, r4
 80066e4:	1854      	adds	r4, r2, r1
 80066e6:	42a3      	cmp	r3, r4
 80066e8:	6011      	str	r1, [r2, #0]
 80066ea:	d1e0      	bne.n	80066ae <_free_r+0x26>
 80066ec:	681c      	ldr	r4, [r3, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	6053      	str	r3, [r2, #4]
 80066f2:	4421      	add	r1, r4
 80066f4:	6011      	str	r1, [r2, #0]
 80066f6:	e7da      	b.n	80066ae <_free_r+0x26>
 80066f8:	d902      	bls.n	8006700 <_free_r+0x78>
 80066fa:	230c      	movs	r3, #12
 80066fc:	6003      	str	r3, [r0, #0]
 80066fe:	e7d6      	b.n	80066ae <_free_r+0x26>
 8006700:	6825      	ldr	r5, [r4, #0]
 8006702:	1961      	adds	r1, r4, r5
 8006704:	428b      	cmp	r3, r1
 8006706:	bf04      	itt	eq
 8006708:	6819      	ldreq	r1, [r3, #0]
 800670a:	685b      	ldreq	r3, [r3, #4]
 800670c:	6063      	str	r3, [r4, #4]
 800670e:	bf04      	itt	eq
 8006710:	1949      	addeq	r1, r1, r5
 8006712:	6021      	streq	r1, [r4, #0]
 8006714:	6054      	str	r4, [r2, #4]
 8006716:	e7ca      	b.n	80066ae <_free_r+0x26>
 8006718:	b003      	add	sp, #12
 800671a:	bd30      	pop	{r4, r5, pc}
 800671c:	20000940 	.word	0x20000940

08006720 <sbrk_aligned>:
 8006720:	b570      	push	{r4, r5, r6, lr}
 8006722:	4e0e      	ldr	r6, [pc, #56]	; (800675c <sbrk_aligned+0x3c>)
 8006724:	460c      	mov	r4, r1
 8006726:	6831      	ldr	r1, [r6, #0]
 8006728:	4605      	mov	r5, r0
 800672a:	b911      	cbnz	r1, 8006732 <sbrk_aligned+0x12>
 800672c:	f000 fcf6 	bl	800711c <_sbrk_r>
 8006730:	6030      	str	r0, [r6, #0]
 8006732:	4621      	mov	r1, r4
 8006734:	4628      	mov	r0, r5
 8006736:	f000 fcf1 	bl	800711c <_sbrk_r>
 800673a:	1c43      	adds	r3, r0, #1
 800673c:	d00a      	beq.n	8006754 <sbrk_aligned+0x34>
 800673e:	1cc4      	adds	r4, r0, #3
 8006740:	f024 0403 	bic.w	r4, r4, #3
 8006744:	42a0      	cmp	r0, r4
 8006746:	d007      	beq.n	8006758 <sbrk_aligned+0x38>
 8006748:	1a21      	subs	r1, r4, r0
 800674a:	4628      	mov	r0, r5
 800674c:	f000 fce6 	bl	800711c <_sbrk_r>
 8006750:	3001      	adds	r0, #1
 8006752:	d101      	bne.n	8006758 <sbrk_aligned+0x38>
 8006754:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006758:	4620      	mov	r0, r4
 800675a:	bd70      	pop	{r4, r5, r6, pc}
 800675c:	20000944 	.word	0x20000944

08006760 <_malloc_r>:
 8006760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006764:	1ccd      	adds	r5, r1, #3
 8006766:	f025 0503 	bic.w	r5, r5, #3
 800676a:	3508      	adds	r5, #8
 800676c:	2d0c      	cmp	r5, #12
 800676e:	bf38      	it	cc
 8006770:	250c      	movcc	r5, #12
 8006772:	2d00      	cmp	r5, #0
 8006774:	4607      	mov	r7, r0
 8006776:	db01      	blt.n	800677c <_malloc_r+0x1c>
 8006778:	42a9      	cmp	r1, r5
 800677a:	d905      	bls.n	8006788 <_malloc_r+0x28>
 800677c:	230c      	movs	r3, #12
 800677e:	603b      	str	r3, [r7, #0]
 8006780:	2600      	movs	r6, #0
 8006782:	4630      	mov	r0, r6
 8006784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006788:	4e2e      	ldr	r6, [pc, #184]	; (8006844 <_malloc_r+0xe4>)
 800678a:	f001 fb95 	bl	8007eb8 <__malloc_lock>
 800678e:	6833      	ldr	r3, [r6, #0]
 8006790:	461c      	mov	r4, r3
 8006792:	bb34      	cbnz	r4, 80067e2 <_malloc_r+0x82>
 8006794:	4629      	mov	r1, r5
 8006796:	4638      	mov	r0, r7
 8006798:	f7ff ffc2 	bl	8006720 <sbrk_aligned>
 800679c:	1c43      	adds	r3, r0, #1
 800679e:	4604      	mov	r4, r0
 80067a0:	d14d      	bne.n	800683e <_malloc_r+0xde>
 80067a2:	6834      	ldr	r4, [r6, #0]
 80067a4:	4626      	mov	r6, r4
 80067a6:	2e00      	cmp	r6, #0
 80067a8:	d140      	bne.n	800682c <_malloc_r+0xcc>
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	4631      	mov	r1, r6
 80067ae:	4638      	mov	r0, r7
 80067b0:	eb04 0803 	add.w	r8, r4, r3
 80067b4:	f000 fcb2 	bl	800711c <_sbrk_r>
 80067b8:	4580      	cmp	r8, r0
 80067ba:	d13a      	bne.n	8006832 <_malloc_r+0xd2>
 80067bc:	6821      	ldr	r1, [r4, #0]
 80067be:	3503      	adds	r5, #3
 80067c0:	1a6d      	subs	r5, r5, r1
 80067c2:	f025 0503 	bic.w	r5, r5, #3
 80067c6:	3508      	adds	r5, #8
 80067c8:	2d0c      	cmp	r5, #12
 80067ca:	bf38      	it	cc
 80067cc:	250c      	movcc	r5, #12
 80067ce:	4629      	mov	r1, r5
 80067d0:	4638      	mov	r0, r7
 80067d2:	f7ff ffa5 	bl	8006720 <sbrk_aligned>
 80067d6:	3001      	adds	r0, #1
 80067d8:	d02b      	beq.n	8006832 <_malloc_r+0xd2>
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	442b      	add	r3, r5
 80067de:	6023      	str	r3, [r4, #0]
 80067e0:	e00e      	b.n	8006800 <_malloc_r+0xa0>
 80067e2:	6822      	ldr	r2, [r4, #0]
 80067e4:	1b52      	subs	r2, r2, r5
 80067e6:	d41e      	bmi.n	8006826 <_malloc_r+0xc6>
 80067e8:	2a0b      	cmp	r2, #11
 80067ea:	d916      	bls.n	800681a <_malloc_r+0xba>
 80067ec:	1961      	adds	r1, r4, r5
 80067ee:	42a3      	cmp	r3, r4
 80067f0:	6025      	str	r5, [r4, #0]
 80067f2:	bf18      	it	ne
 80067f4:	6059      	strne	r1, [r3, #4]
 80067f6:	6863      	ldr	r3, [r4, #4]
 80067f8:	bf08      	it	eq
 80067fa:	6031      	streq	r1, [r6, #0]
 80067fc:	5162      	str	r2, [r4, r5]
 80067fe:	604b      	str	r3, [r1, #4]
 8006800:	4638      	mov	r0, r7
 8006802:	f104 060b 	add.w	r6, r4, #11
 8006806:	f001 fb5d 	bl	8007ec4 <__malloc_unlock>
 800680a:	f026 0607 	bic.w	r6, r6, #7
 800680e:	1d23      	adds	r3, r4, #4
 8006810:	1af2      	subs	r2, r6, r3
 8006812:	d0b6      	beq.n	8006782 <_malloc_r+0x22>
 8006814:	1b9b      	subs	r3, r3, r6
 8006816:	50a3      	str	r3, [r4, r2]
 8006818:	e7b3      	b.n	8006782 <_malloc_r+0x22>
 800681a:	6862      	ldr	r2, [r4, #4]
 800681c:	42a3      	cmp	r3, r4
 800681e:	bf0c      	ite	eq
 8006820:	6032      	streq	r2, [r6, #0]
 8006822:	605a      	strne	r2, [r3, #4]
 8006824:	e7ec      	b.n	8006800 <_malloc_r+0xa0>
 8006826:	4623      	mov	r3, r4
 8006828:	6864      	ldr	r4, [r4, #4]
 800682a:	e7b2      	b.n	8006792 <_malloc_r+0x32>
 800682c:	4634      	mov	r4, r6
 800682e:	6876      	ldr	r6, [r6, #4]
 8006830:	e7b9      	b.n	80067a6 <_malloc_r+0x46>
 8006832:	230c      	movs	r3, #12
 8006834:	603b      	str	r3, [r7, #0]
 8006836:	4638      	mov	r0, r7
 8006838:	f001 fb44 	bl	8007ec4 <__malloc_unlock>
 800683c:	e7a1      	b.n	8006782 <_malloc_r+0x22>
 800683e:	6025      	str	r5, [r4, #0]
 8006840:	e7de      	b.n	8006800 <_malloc_r+0xa0>
 8006842:	bf00      	nop
 8006844:	20000940 	.word	0x20000940

08006848 <__cvt>:
 8006848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800684c:	ec55 4b10 	vmov	r4, r5, d0
 8006850:	2d00      	cmp	r5, #0
 8006852:	460e      	mov	r6, r1
 8006854:	4619      	mov	r1, r3
 8006856:	462b      	mov	r3, r5
 8006858:	bfbb      	ittet	lt
 800685a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800685e:	461d      	movlt	r5, r3
 8006860:	2300      	movge	r3, #0
 8006862:	232d      	movlt	r3, #45	; 0x2d
 8006864:	700b      	strb	r3, [r1, #0]
 8006866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006868:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800686c:	4691      	mov	r9, r2
 800686e:	f023 0820 	bic.w	r8, r3, #32
 8006872:	bfbc      	itt	lt
 8006874:	4622      	movlt	r2, r4
 8006876:	4614      	movlt	r4, r2
 8006878:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800687c:	d005      	beq.n	800688a <__cvt+0x42>
 800687e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006882:	d100      	bne.n	8006886 <__cvt+0x3e>
 8006884:	3601      	adds	r6, #1
 8006886:	2102      	movs	r1, #2
 8006888:	e000      	b.n	800688c <__cvt+0x44>
 800688a:	2103      	movs	r1, #3
 800688c:	ab03      	add	r3, sp, #12
 800688e:	9301      	str	r3, [sp, #4]
 8006890:	ab02      	add	r3, sp, #8
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	ec45 4b10 	vmov	d0, r4, r5
 8006898:	4653      	mov	r3, sl
 800689a:	4632      	mov	r2, r6
 800689c:	f000 fd0c 	bl	80072b8 <_dtoa_r>
 80068a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80068a4:	4607      	mov	r7, r0
 80068a6:	d102      	bne.n	80068ae <__cvt+0x66>
 80068a8:	f019 0f01 	tst.w	r9, #1
 80068ac:	d022      	beq.n	80068f4 <__cvt+0xac>
 80068ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80068b2:	eb07 0906 	add.w	r9, r7, r6
 80068b6:	d110      	bne.n	80068da <__cvt+0x92>
 80068b8:	783b      	ldrb	r3, [r7, #0]
 80068ba:	2b30      	cmp	r3, #48	; 0x30
 80068bc:	d10a      	bne.n	80068d4 <__cvt+0x8c>
 80068be:	2200      	movs	r2, #0
 80068c0:	2300      	movs	r3, #0
 80068c2:	4620      	mov	r0, r4
 80068c4:	4629      	mov	r1, r5
 80068c6:	f7fa f91f 	bl	8000b08 <__aeabi_dcmpeq>
 80068ca:	b918      	cbnz	r0, 80068d4 <__cvt+0x8c>
 80068cc:	f1c6 0601 	rsb	r6, r6, #1
 80068d0:	f8ca 6000 	str.w	r6, [sl]
 80068d4:	f8da 3000 	ldr.w	r3, [sl]
 80068d8:	4499      	add	r9, r3
 80068da:	2200      	movs	r2, #0
 80068dc:	2300      	movs	r3, #0
 80068de:	4620      	mov	r0, r4
 80068e0:	4629      	mov	r1, r5
 80068e2:	f7fa f911 	bl	8000b08 <__aeabi_dcmpeq>
 80068e6:	b108      	cbz	r0, 80068ec <__cvt+0xa4>
 80068e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80068ec:	2230      	movs	r2, #48	; 0x30
 80068ee:	9b03      	ldr	r3, [sp, #12]
 80068f0:	454b      	cmp	r3, r9
 80068f2:	d307      	bcc.n	8006904 <__cvt+0xbc>
 80068f4:	9b03      	ldr	r3, [sp, #12]
 80068f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068f8:	1bdb      	subs	r3, r3, r7
 80068fa:	4638      	mov	r0, r7
 80068fc:	6013      	str	r3, [r2, #0]
 80068fe:	b004      	add	sp, #16
 8006900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006904:	1c59      	adds	r1, r3, #1
 8006906:	9103      	str	r1, [sp, #12]
 8006908:	701a      	strb	r2, [r3, #0]
 800690a:	e7f0      	b.n	80068ee <__cvt+0xa6>

0800690c <__exponent>:
 800690c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800690e:	4603      	mov	r3, r0
 8006910:	2900      	cmp	r1, #0
 8006912:	bfb8      	it	lt
 8006914:	4249      	neglt	r1, r1
 8006916:	f803 2b02 	strb.w	r2, [r3], #2
 800691a:	bfb4      	ite	lt
 800691c:	222d      	movlt	r2, #45	; 0x2d
 800691e:	222b      	movge	r2, #43	; 0x2b
 8006920:	2909      	cmp	r1, #9
 8006922:	7042      	strb	r2, [r0, #1]
 8006924:	dd2a      	ble.n	800697c <__exponent+0x70>
 8006926:	f10d 0407 	add.w	r4, sp, #7
 800692a:	46a4      	mov	ip, r4
 800692c:	270a      	movs	r7, #10
 800692e:	46a6      	mov	lr, r4
 8006930:	460a      	mov	r2, r1
 8006932:	fb91 f6f7 	sdiv	r6, r1, r7
 8006936:	fb07 1516 	mls	r5, r7, r6, r1
 800693a:	3530      	adds	r5, #48	; 0x30
 800693c:	2a63      	cmp	r2, #99	; 0x63
 800693e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006942:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006946:	4631      	mov	r1, r6
 8006948:	dcf1      	bgt.n	800692e <__exponent+0x22>
 800694a:	3130      	adds	r1, #48	; 0x30
 800694c:	f1ae 0502 	sub.w	r5, lr, #2
 8006950:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006954:	1c44      	adds	r4, r0, #1
 8006956:	4629      	mov	r1, r5
 8006958:	4561      	cmp	r1, ip
 800695a:	d30a      	bcc.n	8006972 <__exponent+0x66>
 800695c:	f10d 0209 	add.w	r2, sp, #9
 8006960:	eba2 020e 	sub.w	r2, r2, lr
 8006964:	4565      	cmp	r5, ip
 8006966:	bf88      	it	hi
 8006968:	2200      	movhi	r2, #0
 800696a:	4413      	add	r3, r2
 800696c:	1a18      	subs	r0, r3, r0
 800696e:	b003      	add	sp, #12
 8006970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006972:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006976:	f804 2f01 	strb.w	r2, [r4, #1]!
 800697a:	e7ed      	b.n	8006958 <__exponent+0x4c>
 800697c:	2330      	movs	r3, #48	; 0x30
 800697e:	3130      	adds	r1, #48	; 0x30
 8006980:	7083      	strb	r3, [r0, #2]
 8006982:	70c1      	strb	r1, [r0, #3]
 8006984:	1d03      	adds	r3, r0, #4
 8006986:	e7f1      	b.n	800696c <__exponent+0x60>

08006988 <_printf_float>:
 8006988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800698c:	ed2d 8b02 	vpush	{d8}
 8006990:	b08d      	sub	sp, #52	; 0x34
 8006992:	460c      	mov	r4, r1
 8006994:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006998:	4616      	mov	r6, r2
 800699a:	461f      	mov	r7, r3
 800699c:	4605      	mov	r5, r0
 800699e:	f001 fa79 	bl	8007e94 <_localeconv_r>
 80069a2:	f8d0 a000 	ldr.w	sl, [r0]
 80069a6:	4650      	mov	r0, sl
 80069a8:	f7f9 fc32 	bl	8000210 <strlen>
 80069ac:	2300      	movs	r3, #0
 80069ae:	930a      	str	r3, [sp, #40]	; 0x28
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	9305      	str	r3, [sp, #20]
 80069b4:	f8d8 3000 	ldr.w	r3, [r8]
 80069b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80069bc:	3307      	adds	r3, #7
 80069be:	f023 0307 	bic.w	r3, r3, #7
 80069c2:	f103 0208 	add.w	r2, r3, #8
 80069c6:	f8c8 2000 	str.w	r2, [r8]
 80069ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80069d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80069d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80069da:	9307      	str	r3, [sp, #28]
 80069dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80069e0:	ee08 0a10 	vmov	s16, r0
 80069e4:	4b9f      	ldr	r3, [pc, #636]	; (8006c64 <_printf_float+0x2dc>)
 80069e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069ee:	f7fa f8bd 	bl	8000b6c <__aeabi_dcmpun>
 80069f2:	bb88      	cbnz	r0, 8006a58 <_printf_float+0xd0>
 80069f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069f8:	4b9a      	ldr	r3, [pc, #616]	; (8006c64 <_printf_float+0x2dc>)
 80069fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069fe:	f7fa f897 	bl	8000b30 <__aeabi_dcmple>
 8006a02:	bb48      	cbnz	r0, 8006a58 <_printf_float+0xd0>
 8006a04:	2200      	movs	r2, #0
 8006a06:	2300      	movs	r3, #0
 8006a08:	4640      	mov	r0, r8
 8006a0a:	4649      	mov	r1, r9
 8006a0c:	f7fa f886 	bl	8000b1c <__aeabi_dcmplt>
 8006a10:	b110      	cbz	r0, 8006a18 <_printf_float+0x90>
 8006a12:	232d      	movs	r3, #45	; 0x2d
 8006a14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a18:	4b93      	ldr	r3, [pc, #588]	; (8006c68 <_printf_float+0x2e0>)
 8006a1a:	4894      	ldr	r0, [pc, #592]	; (8006c6c <_printf_float+0x2e4>)
 8006a1c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006a20:	bf94      	ite	ls
 8006a22:	4698      	movls	r8, r3
 8006a24:	4680      	movhi	r8, r0
 8006a26:	2303      	movs	r3, #3
 8006a28:	6123      	str	r3, [r4, #16]
 8006a2a:	9b05      	ldr	r3, [sp, #20]
 8006a2c:	f023 0204 	bic.w	r2, r3, #4
 8006a30:	6022      	str	r2, [r4, #0]
 8006a32:	f04f 0900 	mov.w	r9, #0
 8006a36:	9700      	str	r7, [sp, #0]
 8006a38:	4633      	mov	r3, r6
 8006a3a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	4628      	mov	r0, r5
 8006a40:	f000 f9d8 	bl	8006df4 <_printf_common>
 8006a44:	3001      	adds	r0, #1
 8006a46:	f040 8090 	bne.w	8006b6a <_printf_float+0x1e2>
 8006a4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a4e:	b00d      	add	sp, #52	; 0x34
 8006a50:	ecbd 8b02 	vpop	{d8}
 8006a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a58:	4642      	mov	r2, r8
 8006a5a:	464b      	mov	r3, r9
 8006a5c:	4640      	mov	r0, r8
 8006a5e:	4649      	mov	r1, r9
 8006a60:	f7fa f884 	bl	8000b6c <__aeabi_dcmpun>
 8006a64:	b140      	cbz	r0, 8006a78 <_printf_float+0xf0>
 8006a66:	464b      	mov	r3, r9
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	bfbc      	itt	lt
 8006a6c:	232d      	movlt	r3, #45	; 0x2d
 8006a6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006a72:	487f      	ldr	r0, [pc, #508]	; (8006c70 <_printf_float+0x2e8>)
 8006a74:	4b7f      	ldr	r3, [pc, #508]	; (8006c74 <_printf_float+0x2ec>)
 8006a76:	e7d1      	b.n	8006a1c <_printf_float+0x94>
 8006a78:	6863      	ldr	r3, [r4, #4]
 8006a7a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006a7e:	9206      	str	r2, [sp, #24]
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	d13f      	bne.n	8006b04 <_printf_float+0x17c>
 8006a84:	2306      	movs	r3, #6
 8006a86:	6063      	str	r3, [r4, #4]
 8006a88:	9b05      	ldr	r3, [sp, #20]
 8006a8a:	6861      	ldr	r1, [r4, #4]
 8006a8c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006a90:	2300      	movs	r3, #0
 8006a92:	9303      	str	r3, [sp, #12]
 8006a94:	ab0a      	add	r3, sp, #40	; 0x28
 8006a96:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006a9a:	ab09      	add	r3, sp, #36	; 0x24
 8006a9c:	ec49 8b10 	vmov	d0, r8, r9
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	6022      	str	r2, [r4, #0]
 8006aa4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	f7ff fecd 	bl	8006848 <__cvt>
 8006aae:	9b06      	ldr	r3, [sp, #24]
 8006ab0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ab2:	2b47      	cmp	r3, #71	; 0x47
 8006ab4:	4680      	mov	r8, r0
 8006ab6:	d108      	bne.n	8006aca <_printf_float+0x142>
 8006ab8:	1cc8      	adds	r0, r1, #3
 8006aba:	db02      	blt.n	8006ac2 <_printf_float+0x13a>
 8006abc:	6863      	ldr	r3, [r4, #4]
 8006abe:	4299      	cmp	r1, r3
 8006ac0:	dd41      	ble.n	8006b46 <_printf_float+0x1be>
 8006ac2:	f1ab 0b02 	sub.w	fp, fp, #2
 8006ac6:	fa5f fb8b 	uxtb.w	fp, fp
 8006aca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ace:	d820      	bhi.n	8006b12 <_printf_float+0x18a>
 8006ad0:	3901      	subs	r1, #1
 8006ad2:	465a      	mov	r2, fp
 8006ad4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006ad8:	9109      	str	r1, [sp, #36]	; 0x24
 8006ada:	f7ff ff17 	bl	800690c <__exponent>
 8006ade:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ae0:	1813      	adds	r3, r2, r0
 8006ae2:	2a01      	cmp	r2, #1
 8006ae4:	4681      	mov	r9, r0
 8006ae6:	6123      	str	r3, [r4, #16]
 8006ae8:	dc02      	bgt.n	8006af0 <_printf_float+0x168>
 8006aea:	6822      	ldr	r2, [r4, #0]
 8006aec:	07d2      	lsls	r2, r2, #31
 8006aee:	d501      	bpl.n	8006af4 <_printf_float+0x16c>
 8006af0:	3301      	adds	r3, #1
 8006af2:	6123      	str	r3, [r4, #16]
 8006af4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d09c      	beq.n	8006a36 <_printf_float+0xae>
 8006afc:	232d      	movs	r3, #45	; 0x2d
 8006afe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b02:	e798      	b.n	8006a36 <_printf_float+0xae>
 8006b04:	9a06      	ldr	r2, [sp, #24]
 8006b06:	2a47      	cmp	r2, #71	; 0x47
 8006b08:	d1be      	bne.n	8006a88 <_printf_float+0x100>
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1bc      	bne.n	8006a88 <_printf_float+0x100>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e7b9      	b.n	8006a86 <_printf_float+0xfe>
 8006b12:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006b16:	d118      	bne.n	8006b4a <_printf_float+0x1c2>
 8006b18:	2900      	cmp	r1, #0
 8006b1a:	6863      	ldr	r3, [r4, #4]
 8006b1c:	dd0b      	ble.n	8006b36 <_printf_float+0x1ae>
 8006b1e:	6121      	str	r1, [r4, #16]
 8006b20:	b913      	cbnz	r3, 8006b28 <_printf_float+0x1a0>
 8006b22:	6822      	ldr	r2, [r4, #0]
 8006b24:	07d0      	lsls	r0, r2, #31
 8006b26:	d502      	bpl.n	8006b2e <_printf_float+0x1a6>
 8006b28:	3301      	adds	r3, #1
 8006b2a:	440b      	add	r3, r1
 8006b2c:	6123      	str	r3, [r4, #16]
 8006b2e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006b30:	f04f 0900 	mov.w	r9, #0
 8006b34:	e7de      	b.n	8006af4 <_printf_float+0x16c>
 8006b36:	b913      	cbnz	r3, 8006b3e <_printf_float+0x1b6>
 8006b38:	6822      	ldr	r2, [r4, #0]
 8006b3a:	07d2      	lsls	r2, r2, #31
 8006b3c:	d501      	bpl.n	8006b42 <_printf_float+0x1ba>
 8006b3e:	3302      	adds	r3, #2
 8006b40:	e7f4      	b.n	8006b2c <_printf_float+0x1a4>
 8006b42:	2301      	movs	r3, #1
 8006b44:	e7f2      	b.n	8006b2c <_printf_float+0x1a4>
 8006b46:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b4c:	4299      	cmp	r1, r3
 8006b4e:	db05      	blt.n	8006b5c <_printf_float+0x1d4>
 8006b50:	6823      	ldr	r3, [r4, #0]
 8006b52:	6121      	str	r1, [r4, #16]
 8006b54:	07d8      	lsls	r0, r3, #31
 8006b56:	d5ea      	bpl.n	8006b2e <_printf_float+0x1a6>
 8006b58:	1c4b      	adds	r3, r1, #1
 8006b5a:	e7e7      	b.n	8006b2c <_printf_float+0x1a4>
 8006b5c:	2900      	cmp	r1, #0
 8006b5e:	bfd4      	ite	le
 8006b60:	f1c1 0202 	rsble	r2, r1, #2
 8006b64:	2201      	movgt	r2, #1
 8006b66:	4413      	add	r3, r2
 8006b68:	e7e0      	b.n	8006b2c <_printf_float+0x1a4>
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	055a      	lsls	r2, r3, #21
 8006b6e:	d407      	bmi.n	8006b80 <_printf_float+0x1f8>
 8006b70:	6923      	ldr	r3, [r4, #16]
 8006b72:	4642      	mov	r2, r8
 8006b74:	4631      	mov	r1, r6
 8006b76:	4628      	mov	r0, r5
 8006b78:	47b8      	blx	r7
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	d12c      	bne.n	8006bd8 <_printf_float+0x250>
 8006b7e:	e764      	b.n	8006a4a <_printf_float+0xc2>
 8006b80:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b84:	f240 80e0 	bls.w	8006d48 <_printf_float+0x3c0>
 8006b88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f7f9 ffba 	bl	8000b08 <__aeabi_dcmpeq>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	d034      	beq.n	8006c02 <_printf_float+0x27a>
 8006b98:	4a37      	ldr	r2, [pc, #220]	; (8006c78 <_printf_float+0x2f0>)
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	4631      	mov	r1, r6
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	47b8      	blx	r7
 8006ba2:	3001      	adds	r0, #1
 8006ba4:	f43f af51 	beq.w	8006a4a <_printf_float+0xc2>
 8006ba8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bac:	429a      	cmp	r2, r3
 8006bae:	db02      	blt.n	8006bb6 <_printf_float+0x22e>
 8006bb0:	6823      	ldr	r3, [r4, #0]
 8006bb2:	07d8      	lsls	r0, r3, #31
 8006bb4:	d510      	bpl.n	8006bd8 <_printf_float+0x250>
 8006bb6:	ee18 3a10 	vmov	r3, s16
 8006bba:	4652      	mov	r2, sl
 8006bbc:	4631      	mov	r1, r6
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	47b8      	blx	r7
 8006bc2:	3001      	adds	r0, #1
 8006bc4:	f43f af41 	beq.w	8006a4a <_printf_float+0xc2>
 8006bc8:	f04f 0800 	mov.w	r8, #0
 8006bcc:	f104 091a 	add.w	r9, r4, #26
 8006bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	4543      	cmp	r3, r8
 8006bd6:	dc09      	bgt.n	8006bec <_printf_float+0x264>
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	079b      	lsls	r3, r3, #30
 8006bdc:	f100 8105 	bmi.w	8006dea <_printf_float+0x462>
 8006be0:	68e0      	ldr	r0, [r4, #12]
 8006be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006be4:	4298      	cmp	r0, r3
 8006be6:	bfb8      	it	lt
 8006be8:	4618      	movlt	r0, r3
 8006bea:	e730      	b.n	8006a4e <_printf_float+0xc6>
 8006bec:	2301      	movs	r3, #1
 8006bee:	464a      	mov	r2, r9
 8006bf0:	4631      	mov	r1, r6
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	47b8      	blx	r7
 8006bf6:	3001      	adds	r0, #1
 8006bf8:	f43f af27 	beq.w	8006a4a <_printf_float+0xc2>
 8006bfc:	f108 0801 	add.w	r8, r8, #1
 8006c00:	e7e6      	b.n	8006bd0 <_printf_float+0x248>
 8006c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	dc39      	bgt.n	8006c7c <_printf_float+0x2f4>
 8006c08:	4a1b      	ldr	r2, [pc, #108]	; (8006c78 <_printf_float+0x2f0>)
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	4631      	mov	r1, r6
 8006c0e:	4628      	mov	r0, r5
 8006c10:	47b8      	blx	r7
 8006c12:	3001      	adds	r0, #1
 8006c14:	f43f af19 	beq.w	8006a4a <_printf_float+0xc2>
 8006c18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	d102      	bne.n	8006c26 <_printf_float+0x29e>
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	07d9      	lsls	r1, r3, #31
 8006c24:	d5d8      	bpl.n	8006bd8 <_printf_float+0x250>
 8006c26:	ee18 3a10 	vmov	r3, s16
 8006c2a:	4652      	mov	r2, sl
 8006c2c:	4631      	mov	r1, r6
 8006c2e:	4628      	mov	r0, r5
 8006c30:	47b8      	blx	r7
 8006c32:	3001      	adds	r0, #1
 8006c34:	f43f af09 	beq.w	8006a4a <_printf_float+0xc2>
 8006c38:	f04f 0900 	mov.w	r9, #0
 8006c3c:	f104 0a1a 	add.w	sl, r4, #26
 8006c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c42:	425b      	negs	r3, r3
 8006c44:	454b      	cmp	r3, r9
 8006c46:	dc01      	bgt.n	8006c4c <_printf_float+0x2c4>
 8006c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c4a:	e792      	b.n	8006b72 <_printf_float+0x1ea>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	4652      	mov	r2, sl
 8006c50:	4631      	mov	r1, r6
 8006c52:	4628      	mov	r0, r5
 8006c54:	47b8      	blx	r7
 8006c56:	3001      	adds	r0, #1
 8006c58:	f43f aef7 	beq.w	8006a4a <_printf_float+0xc2>
 8006c5c:	f109 0901 	add.w	r9, r9, #1
 8006c60:	e7ee      	b.n	8006c40 <_printf_float+0x2b8>
 8006c62:	bf00      	nop
 8006c64:	7fefffff 	.word	0x7fefffff
 8006c68:	080096a0 	.word	0x080096a0
 8006c6c:	080096a4 	.word	0x080096a4
 8006c70:	080096ac 	.word	0x080096ac
 8006c74:	080096a8 	.word	0x080096a8
 8006c78:	080096b0 	.word	0x080096b0
 8006c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c80:	429a      	cmp	r2, r3
 8006c82:	bfa8      	it	ge
 8006c84:	461a      	movge	r2, r3
 8006c86:	2a00      	cmp	r2, #0
 8006c88:	4691      	mov	r9, r2
 8006c8a:	dc37      	bgt.n	8006cfc <_printf_float+0x374>
 8006c8c:	f04f 0b00 	mov.w	fp, #0
 8006c90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c94:	f104 021a 	add.w	r2, r4, #26
 8006c98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c9a:	9305      	str	r3, [sp, #20]
 8006c9c:	eba3 0309 	sub.w	r3, r3, r9
 8006ca0:	455b      	cmp	r3, fp
 8006ca2:	dc33      	bgt.n	8006d0c <_printf_float+0x384>
 8006ca4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	db3b      	blt.n	8006d24 <_printf_float+0x39c>
 8006cac:	6823      	ldr	r3, [r4, #0]
 8006cae:	07da      	lsls	r2, r3, #31
 8006cb0:	d438      	bmi.n	8006d24 <_printf_float+0x39c>
 8006cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cb4:	9a05      	ldr	r2, [sp, #20]
 8006cb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cb8:	1a9a      	subs	r2, r3, r2
 8006cba:	eba3 0901 	sub.w	r9, r3, r1
 8006cbe:	4591      	cmp	r9, r2
 8006cc0:	bfa8      	it	ge
 8006cc2:	4691      	movge	r9, r2
 8006cc4:	f1b9 0f00 	cmp.w	r9, #0
 8006cc8:	dc35      	bgt.n	8006d36 <_printf_float+0x3ae>
 8006cca:	f04f 0800 	mov.w	r8, #0
 8006cce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cd2:	f104 0a1a 	add.w	sl, r4, #26
 8006cd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cda:	1a9b      	subs	r3, r3, r2
 8006cdc:	eba3 0309 	sub.w	r3, r3, r9
 8006ce0:	4543      	cmp	r3, r8
 8006ce2:	f77f af79 	ble.w	8006bd8 <_printf_float+0x250>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	4652      	mov	r2, sl
 8006cea:	4631      	mov	r1, r6
 8006cec:	4628      	mov	r0, r5
 8006cee:	47b8      	blx	r7
 8006cf0:	3001      	adds	r0, #1
 8006cf2:	f43f aeaa 	beq.w	8006a4a <_printf_float+0xc2>
 8006cf6:	f108 0801 	add.w	r8, r8, #1
 8006cfa:	e7ec      	b.n	8006cd6 <_printf_float+0x34e>
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	4631      	mov	r1, r6
 8006d00:	4642      	mov	r2, r8
 8006d02:	4628      	mov	r0, r5
 8006d04:	47b8      	blx	r7
 8006d06:	3001      	adds	r0, #1
 8006d08:	d1c0      	bne.n	8006c8c <_printf_float+0x304>
 8006d0a:	e69e      	b.n	8006a4a <_printf_float+0xc2>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	4631      	mov	r1, r6
 8006d10:	4628      	mov	r0, r5
 8006d12:	9205      	str	r2, [sp, #20]
 8006d14:	47b8      	blx	r7
 8006d16:	3001      	adds	r0, #1
 8006d18:	f43f ae97 	beq.w	8006a4a <_printf_float+0xc2>
 8006d1c:	9a05      	ldr	r2, [sp, #20]
 8006d1e:	f10b 0b01 	add.w	fp, fp, #1
 8006d22:	e7b9      	b.n	8006c98 <_printf_float+0x310>
 8006d24:	ee18 3a10 	vmov	r3, s16
 8006d28:	4652      	mov	r2, sl
 8006d2a:	4631      	mov	r1, r6
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	47b8      	blx	r7
 8006d30:	3001      	adds	r0, #1
 8006d32:	d1be      	bne.n	8006cb2 <_printf_float+0x32a>
 8006d34:	e689      	b.n	8006a4a <_printf_float+0xc2>
 8006d36:	9a05      	ldr	r2, [sp, #20]
 8006d38:	464b      	mov	r3, r9
 8006d3a:	4442      	add	r2, r8
 8006d3c:	4631      	mov	r1, r6
 8006d3e:	4628      	mov	r0, r5
 8006d40:	47b8      	blx	r7
 8006d42:	3001      	adds	r0, #1
 8006d44:	d1c1      	bne.n	8006cca <_printf_float+0x342>
 8006d46:	e680      	b.n	8006a4a <_printf_float+0xc2>
 8006d48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d4a:	2a01      	cmp	r2, #1
 8006d4c:	dc01      	bgt.n	8006d52 <_printf_float+0x3ca>
 8006d4e:	07db      	lsls	r3, r3, #31
 8006d50:	d538      	bpl.n	8006dc4 <_printf_float+0x43c>
 8006d52:	2301      	movs	r3, #1
 8006d54:	4642      	mov	r2, r8
 8006d56:	4631      	mov	r1, r6
 8006d58:	4628      	mov	r0, r5
 8006d5a:	47b8      	blx	r7
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	f43f ae74 	beq.w	8006a4a <_printf_float+0xc2>
 8006d62:	ee18 3a10 	vmov	r3, s16
 8006d66:	4652      	mov	r2, sl
 8006d68:	4631      	mov	r1, r6
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	47b8      	blx	r7
 8006d6e:	3001      	adds	r0, #1
 8006d70:	f43f ae6b 	beq.w	8006a4a <_printf_float+0xc2>
 8006d74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f7f9 fec4 	bl	8000b08 <__aeabi_dcmpeq>
 8006d80:	b9d8      	cbnz	r0, 8006dba <_printf_float+0x432>
 8006d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d84:	f108 0201 	add.w	r2, r8, #1
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	4631      	mov	r1, r6
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	47b8      	blx	r7
 8006d90:	3001      	adds	r0, #1
 8006d92:	d10e      	bne.n	8006db2 <_printf_float+0x42a>
 8006d94:	e659      	b.n	8006a4a <_printf_float+0xc2>
 8006d96:	2301      	movs	r3, #1
 8006d98:	4652      	mov	r2, sl
 8006d9a:	4631      	mov	r1, r6
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	47b8      	blx	r7
 8006da0:	3001      	adds	r0, #1
 8006da2:	f43f ae52 	beq.w	8006a4a <_printf_float+0xc2>
 8006da6:	f108 0801 	add.w	r8, r8, #1
 8006daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dac:	3b01      	subs	r3, #1
 8006dae:	4543      	cmp	r3, r8
 8006db0:	dcf1      	bgt.n	8006d96 <_printf_float+0x40e>
 8006db2:	464b      	mov	r3, r9
 8006db4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006db8:	e6dc      	b.n	8006b74 <_printf_float+0x1ec>
 8006dba:	f04f 0800 	mov.w	r8, #0
 8006dbe:	f104 0a1a 	add.w	sl, r4, #26
 8006dc2:	e7f2      	b.n	8006daa <_printf_float+0x422>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	4642      	mov	r2, r8
 8006dc8:	e7df      	b.n	8006d8a <_printf_float+0x402>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	464a      	mov	r2, r9
 8006dce:	4631      	mov	r1, r6
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	47b8      	blx	r7
 8006dd4:	3001      	adds	r0, #1
 8006dd6:	f43f ae38 	beq.w	8006a4a <_printf_float+0xc2>
 8006dda:	f108 0801 	add.w	r8, r8, #1
 8006dde:	68e3      	ldr	r3, [r4, #12]
 8006de0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006de2:	1a5b      	subs	r3, r3, r1
 8006de4:	4543      	cmp	r3, r8
 8006de6:	dcf0      	bgt.n	8006dca <_printf_float+0x442>
 8006de8:	e6fa      	b.n	8006be0 <_printf_float+0x258>
 8006dea:	f04f 0800 	mov.w	r8, #0
 8006dee:	f104 0919 	add.w	r9, r4, #25
 8006df2:	e7f4      	b.n	8006dde <_printf_float+0x456>

08006df4 <_printf_common>:
 8006df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006df8:	4616      	mov	r6, r2
 8006dfa:	4699      	mov	r9, r3
 8006dfc:	688a      	ldr	r2, [r1, #8]
 8006dfe:	690b      	ldr	r3, [r1, #16]
 8006e00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e04:	4293      	cmp	r3, r2
 8006e06:	bfb8      	it	lt
 8006e08:	4613      	movlt	r3, r2
 8006e0a:	6033      	str	r3, [r6, #0]
 8006e0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e10:	4607      	mov	r7, r0
 8006e12:	460c      	mov	r4, r1
 8006e14:	b10a      	cbz	r2, 8006e1a <_printf_common+0x26>
 8006e16:	3301      	adds	r3, #1
 8006e18:	6033      	str	r3, [r6, #0]
 8006e1a:	6823      	ldr	r3, [r4, #0]
 8006e1c:	0699      	lsls	r1, r3, #26
 8006e1e:	bf42      	ittt	mi
 8006e20:	6833      	ldrmi	r3, [r6, #0]
 8006e22:	3302      	addmi	r3, #2
 8006e24:	6033      	strmi	r3, [r6, #0]
 8006e26:	6825      	ldr	r5, [r4, #0]
 8006e28:	f015 0506 	ands.w	r5, r5, #6
 8006e2c:	d106      	bne.n	8006e3c <_printf_common+0x48>
 8006e2e:	f104 0a19 	add.w	sl, r4, #25
 8006e32:	68e3      	ldr	r3, [r4, #12]
 8006e34:	6832      	ldr	r2, [r6, #0]
 8006e36:	1a9b      	subs	r3, r3, r2
 8006e38:	42ab      	cmp	r3, r5
 8006e3a:	dc26      	bgt.n	8006e8a <_printf_common+0x96>
 8006e3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e40:	1e13      	subs	r3, r2, #0
 8006e42:	6822      	ldr	r2, [r4, #0]
 8006e44:	bf18      	it	ne
 8006e46:	2301      	movne	r3, #1
 8006e48:	0692      	lsls	r2, r2, #26
 8006e4a:	d42b      	bmi.n	8006ea4 <_printf_common+0xb0>
 8006e4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e50:	4649      	mov	r1, r9
 8006e52:	4638      	mov	r0, r7
 8006e54:	47c0      	blx	r8
 8006e56:	3001      	adds	r0, #1
 8006e58:	d01e      	beq.n	8006e98 <_printf_common+0xa4>
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	68e5      	ldr	r5, [r4, #12]
 8006e5e:	6832      	ldr	r2, [r6, #0]
 8006e60:	f003 0306 	and.w	r3, r3, #6
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	bf08      	it	eq
 8006e68:	1aad      	subeq	r5, r5, r2
 8006e6a:	68a3      	ldr	r3, [r4, #8]
 8006e6c:	6922      	ldr	r2, [r4, #16]
 8006e6e:	bf0c      	ite	eq
 8006e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e74:	2500      	movne	r5, #0
 8006e76:	4293      	cmp	r3, r2
 8006e78:	bfc4      	itt	gt
 8006e7a:	1a9b      	subgt	r3, r3, r2
 8006e7c:	18ed      	addgt	r5, r5, r3
 8006e7e:	2600      	movs	r6, #0
 8006e80:	341a      	adds	r4, #26
 8006e82:	42b5      	cmp	r5, r6
 8006e84:	d11a      	bne.n	8006ebc <_printf_common+0xc8>
 8006e86:	2000      	movs	r0, #0
 8006e88:	e008      	b.n	8006e9c <_printf_common+0xa8>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	4652      	mov	r2, sl
 8006e8e:	4649      	mov	r1, r9
 8006e90:	4638      	mov	r0, r7
 8006e92:	47c0      	blx	r8
 8006e94:	3001      	adds	r0, #1
 8006e96:	d103      	bne.n	8006ea0 <_printf_common+0xac>
 8006e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea0:	3501      	adds	r5, #1
 8006ea2:	e7c6      	b.n	8006e32 <_printf_common+0x3e>
 8006ea4:	18e1      	adds	r1, r4, r3
 8006ea6:	1c5a      	adds	r2, r3, #1
 8006ea8:	2030      	movs	r0, #48	; 0x30
 8006eaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006eae:	4422      	add	r2, r4
 8006eb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006eb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006eb8:	3302      	adds	r3, #2
 8006eba:	e7c7      	b.n	8006e4c <_printf_common+0x58>
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	4622      	mov	r2, r4
 8006ec0:	4649      	mov	r1, r9
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	47c0      	blx	r8
 8006ec6:	3001      	adds	r0, #1
 8006ec8:	d0e6      	beq.n	8006e98 <_printf_common+0xa4>
 8006eca:	3601      	adds	r6, #1
 8006ecc:	e7d9      	b.n	8006e82 <_printf_common+0x8e>
	...

08006ed0 <_printf_i>:
 8006ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ed4:	7e0f      	ldrb	r7, [r1, #24]
 8006ed6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ed8:	2f78      	cmp	r7, #120	; 0x78
 8006eda:	4691      	mov	r9, r2
 8006edc:	4680      	mov	r8, r0
 8006ede:	460c      	mov	r4, r1
 8006ee0:	469a      	mov	sl, r3
 8006ee2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ee6:	d807      	bhi.n	8006ef8 <_printf_i+0x28>
 8006ee8:	2f62      	cmp	r7, #98	; 0x62
 8006eea:	d80a      	bhi.n	8006f02 <_printf_i+0x32>
 8006eec:	2f00      	cmp	r7, #0
 8006eee:	f000 80d8 	beq.w	80070a2 <_printf_i+0x1d2>
 8006ef2:	2f58      	cmp	r7, #88	; 0x58
 8006ef4:	f000 80a3 	beq.w	800703e <_printf_i+0x16e>
 8006ef8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006efc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f00:	e03a      	b.n	8006f78 <_printf_i+0xa8>
 8006f02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f06:	2b15      	cmp	r3, #21
 8006f08:	d8f6      	bhi.n	8006ef8 <_printf_i+0x28>
 8006f0a:	a101      	add	r1, pc, #4	; (adr r1, 8006f10 <_printf_i+0x40>)
 8006f0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f10:	08006f69 	.word	0x08006f69
 8006f14:	08006f7d 	.word	0x08006f7d
 8006f18:	08006ef9 	.word	0x08006ef9
 8006f1c:	08006ef9 	.word	0x08006ef9
 8006f20:	08006ef9 	.word	0x08006ef9
 8006f24:	08006ef9 	.word	0x08006ef9
 8006f28:	08006f7d 	.word	0x08006f7d
 8006f2c:	08006ef9 	.word	0x08006ef9
 8006f30:	08006ef9 	.word	0x08006ef9
 8006f34:	08006ef9 	.word	0x08006ef9
 8006f38:	08006ef9 	.word	0x08006ef9
 8006f3c:	08007089 	.word	0x08007089
 8006f40:	08006fad 	.word	0x08006fad
 8006f44:	0800706b 	.word	0x0800706b
 8006f48:	08006ef9 	.word	0x08006ef9
 8006f4c:	08006ef9 	.word	0x08006ef9
 8006f50:	080070ab 	.word	0x080070ab
 8006f54:	08006ef9 	.word	0x08006ef9
 8006f58:	08006fad 	.word	0x08006fad
 8006f5c:	08006ef9 	.word	0x08006ef9
 8006f60:	08006ef9 	.word	0x08006ef9
 8006f64:	08007073 	.word	0x08007073
 8006f68:	682b      	ldr	r3, [r5, #0]
 8006f6a:	1d1a      	adds	r2, r3, #4
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	602a      	str	r2, [r5, #0]
 8006f70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e0a3      	b.n	80070c4 <_printf_i+0x1f4>
 8006f7c:	6820      	ldr	r0, [r4, #0]
 8006f7e:	6829      	ldr	r1, [r5, #0]
 8006f80:	0606      	lsls	r6, r0, #24
 8006f82:	f101 0304 	add.w	r3, r1, #4
 8006f86:	d50a      	bpl.n	8006f9e <_printf_i+0xce>
 8006f88:	680e      	ldr	r6, [r1, #0]
 8006f8a:	602b      	str	r3, [r5, #0]
 8006f8c:	2e00      	cmp	r6, #0
 8006f8e:	da03      	bge.n	8006f98 <_printf_i+0xc8>
 8006f90:	232d      	movs	r3, #45	; 0x2d
 8006f92:	4276      	negs	r6, r6
 8006f94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f98:	485e      	ldr	r0, [pc, #376]	; (8007114 <_printf_i+0x244>)
 8006f9a:	230a      	movs	r3, #10
 8006f9c:	e019      	b.n	8006fd2 <_printf_i+0x102>
 8006f9e:	680e      	ldr	r6, [r1, #0]
 8006fa0:	602b      	str	r3, [r5, #0]
 8006fa2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006fa6:	bf18      	it	ne
 8006fa8:	b236      	sxthne	r6, r6
 8006faa:	e7ef      	b.n	8006f8c <_printf_i+0xbc>
 8006fac:	682b      	ldr	r3, [r5, #0]
 8006fae:	6820      	ldr	r0, [r4, #0]
 8006fb0:	1d19      	adds	r1, r3, #4
 8006fb2:	6029      	str	r1, [r5, #0]
 8006fb4:	0601      	lsls	r1, r0, #24
 8006fb6:	d501      	bpl.n	8006fbc <_printf_i+0xec>
 8006fb8:	681e      	ldr	r6, [r3, #0]
 8006fba:	e002      	b.n	8006fc2 <_printf_i+0xf2>
 8006fbc:	0646      	lsls	r6, r0, #25
 8006fbe:	d5fb      	bpl.n	8006fb8 <_printf_i+0xe8>
 8006fc0:	881e      	ldrh	r6, [r3, #0]
 8006fc2:	4854      	ldr	r0, [pc, #336]	; (8007114 <_printf_i+0x244>)
 8006fc4:	2f6f      	cmp	r7, #111	; 0x6f
 8006fc6:	bf0c      	ite	eq
 8006fc8:	2308      	moveq	r3, #8
 8006fca:	230a      	movne	r3, #10
 8006fcc:	2100      	movs	r1, #0
 8006fce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fd2:	6865      	ldr	r5, [r4, #4]
 8006fd4:	60a5      	str	r5, [r4, #8]
 8006fd6:	2d00      	cmp	r5, #0
 8006fd8:	bfa2      	ittt	ge
 8006fda:	6821      	ldrge	r1, [r4, #0]
 8006fdc:	f021 0104 	bicge.w	r1, r1, #4
 8006fe0:	6021      	strge	r1, [r4, #0]
 8006fe2:	b90e      	cbnz	r6, 8006fe8 <_printf_i+0x118>
 8006fe4:	2d00      	cmp	r5, #0
 8006fe6:	d04d      	beq.n	8007084 <_printf_i+0x1b4>
 8006fe8:	4615      	mov	r5, r2
 8006fea:	fbb6 f1f3 	udiv	r1, r6, r3
 8006fee:	fb03 6711 	mls	r7, r3, r1, r6
 8006ff2:	5dc7      	ldrb	r7, [r0, r7]
 8006ff4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ff8:	4637      	mov	r7, r6
 8006ffa:	42bb      	cmp	r3, r7
 8006ffc:	460e      	mov	r6, r1
 8006ffe:	d9f4      	bls.n	8006fea <_printf_i+0x11a>
 8007000:	2b08      	cmp	r3, #8
 8007002:	d10b      	bne.n	800701c <_printf_i+0x14c>
 8007004:	6823      	ldr	r3, [r4, #0]
 8007006:	07de      	lsls	r6, r3, #31
 8007008:	d508      	bpl.n	800701c <_printf_i+0x14c>
 800700a:	6923      	ldr	r3, [r4, #16]
 800700c:	6861      	ldr	r1, [r4, #4]
 800700e:	4299      	cmp	r1, r3
 8007010:	bfde      	ittt	le
 8007012:	2330      	movle	r3, #48	; 0x30
 8007014:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007018:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800701c:	1b52      	subs	r2, r2, r5
 800701e:	6122      	str	r2, [r4, #16]
 8007020:	f8cd a000 	str.w	sl, [sp]
 8007024:	464b      	mov	r3, r9
 8007026:	aa03      	add	r2, sp, #12
 8007028:	4621      	mov	r1, r4
 800702a:	4640      	mov	r0, r8
 800702c:	f7ff fee2 	bl	8006df4 <_printf_common>
 8007030:	3001      	adds	r0, #1
 8007032:	d14c      	bne.n	80070ce <_printf_i+0x1fe>
 8007034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007038:	b004      	add	sp, #16
 800703a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800703e:	4835      	ldr	r0, [pc, #212]	; (8007114 <_printf_i+0x244>)
 8007040:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007044:	6829      	ldr	r1, [r5, #0]
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	f851 6b04 	ldr.w	r6, [r1], #4
 800704c:	6029      	str	r1, [r5, #0]
 800704e:	061d      	lsls	r5, r3, #24
 8007050:	d514      	bpl.n	800707c <_printf_i+0x1ac>
 8007052:	07df      	lsls	r7, r3, #31
 8007054:	bf44      	itt	mi
 8007056:	f043 0320 	orrmi.w	r3, r3, #32
 800705a:	6023      	strmi	r3, [r4, #0]
 800705c:	b91e      	cbnz	r6, 8007066 <_printf_i+0x196>
 800705e:	6823      	ldr	r3, [r4, #0]
 8007060:	f023 0320 	bic.w	r3, r3, #32
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	2310      	movs	r3, #16
 8007068:	e7b0      	b.n	8006fcc <_printf_i+0xfc>
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	f043 0320 	orr.w	r3, r3, #32
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	2378      	movs	r3, #120	; 0x78
 8007074:	4828      	ldr	r0, [pc, #160]	; (8007118 <_printf_i+0x248>)
 8007076:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800707a:	e7e3      	b.n	8007044 <_printf_i+0x174>
 800707c:	0659      	lsls	r1, r3, #25
 800707e:	bf48      	it	mi
 8007080:	b2b6      	uxthmi	r6, r6
 8007082:	e7e6      	b.n	8007052 <_printf_i+0x182>
 8007084:	4615      	mov	r5, r2
 8007086:	e7bb      	b.n	8007000 <_printf_i+0x130>
 8007088:	682b      	ldr	r3, [r5, #0]
 800708a:	6826      	ldr	r6, [r4, #0]
 800708c:	6961      	ldr	r1, [r4, #20]
 800708e:	1d18      	adds	r0, r3, #4
 8007090:	6028      	str	r0, [r5, #0]
 8007092:	0635      	lsls	r5, r6, #24
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	d501      	bpl.n	800709c <_printf_i+0x1cc>
 8007098:	6019      	str	r1, [r3, #0]
 800709a:	e002      	b.n	80070a2 <_printf_i+0x1d2>
 800709c:	0670      	lsls	r0, r6, #25
 800709e:	d5fb      	bpl.n	8007098 <_printf_i+0x1c8>
 80070a0:	8019      	strh	r1, [r3, #0]
 80070a2:	2300      	movs	r3, #0
 80070a4:	6123      	str	r3, [r4, #16]
 80070a6:	4615      	mov	r5, r2
 80070a8:	e7ba      	b.n	8007020 <_printf_i+0x150>
 80070aa:	682b      	ldr	r3, [r5, #0]
 80070ac:	1d1a      	adds	r2, r3, #4
 80070ae:	602a      	str	r2, [r5, #0]
 80070b0:	681d      	ldr	r5, [r3, #0]
 80070b2:	6862      	ldr	r2, [r4, #4]
 80070b4:	2100      	movs	r1, #0
 80070b6:	4628      	mov	r0, r5
 80070b8:	f7f9 f8b2 	bl	8000220 <memchr>
 80070bc:	b108      	cbz	r0, 80070c2 <_printf_i+0x1f2>
 80070be:	1b40      	subs	r0, r0, r5
 80070c0:	6060      	str	r0, [r4, #4]
 80070c2:	6863      	ldr	r3, [r4, #4]
 80070c4:	6123      	str	r3, [r4, #16]
 80070c6:	2300      	movs	r3, #0
 80070c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070cc:	e7a8      	b.n	8007020 <_printf_i+0x150>
 80070ce:	6923      	ldr	r3, [r4, #16]
 80070d0:	462a      	mov	r2, r5
 80070d2:	4649      	mov	r1, r9
 80070d4:	4640      	mov	r0, r8
 80070d6:	47d0      	blx	sl
 80070d8:	3001      	adds	r0, #1
 80070da:	d0ab      	beq.n	8007034 <_printf_i+0x164>
 80070dc:	6823      	ldr	r3, [r4, #0]
 80070de:	079b      	lsls	r3, r3, #30
 80070e0:	d413      	bmi.n	800710a <_printf_i+0x23a>
 80070e2:	68e0      	ldr	r0, [r4, #12]
 80070e4:	9b03      	ldr	r3, [sp, #12]
 80070e6:	4298      	cmp	r0, r3
 80070e8:	bfb8      	it	lt
 80070ea:	4618      	movlt	r0, r3
 80070ec:	e7a4      	b.n	8007038 <_printf_i+0x168>
 80070ee:	2301      	movs	r3, #1
 80070f0:	4632      	mov	r2, r6
 80070f2:	4649      	mov	r1, r9
 80070f4:	4640      	mov	r0, r8
 80070f6:	47d0      	blx	sl
 80070f8:	3001      	adds	r0, #1
 80070fa:	d09b      	beq.n	8007034 <_printf_i+0x164>
 80070fc:	3501      	adds	r5, #1
 80070fe:	68e3      	ldr	r3, [r4, #12]
 8007100:	9903      	ldr	r1, [sp, #12]
 8007102:	1a5b      	subs	r3, r3, r1
 8007104:	42ab      	cmp	r3, r5
 8007106:	dcf2      	bgt.n	80070ee <_printf_i+0x21e>
 8007108:	e7eb      	b.n	80070e2 <_printf_i+0x212>
 800710a:	2500      	movs	r5, #0
 800710c:	f104 0619 	add.w	r6, r4, #25
 8007110:	e7f5      	b.n	80070fe <_printf_i+0x22e>
 8007112:	bf00      	nop
 8007114:	080096b2 	.word	0x080096b2
 8007118:	080096c3 	.word	0x080096c3

0800711c <_sbrk_r>:
 800711c:	b538      	push	{r3, r4, r5, lr}
 800711e:	4d06      	ldr	r5, [pc, #24]	; (8007138 <_sbrk_r+0x1c>)
 8007120:	2300      	movs	r3, #0
 8007122:	4604      	mov	r4, r0
 8007124:	4608      	mov	r0, r1
 8007126:	602b      	str	r3, [r5, #0]
 8007128:	f7fc fc1e 	bl	8003968 <_sbrk>
 800712c:	1c43      	adds	r3, r0, #1
 800712e:	d102      	bne.n	8007136 <_sbrk_r+0x1a>
 8007130:	682b      	ldr	r3, [r5, #0]
 8007132:	b103      	cbz	r3, 8007136 <_sbrk_r+0x1a>
 8007134:	6023      	str	r3, [r4, #0]
 8007136:	bd38      	pop	{r3, r4, r5, pc}
 8007138:	20000948 	.word	0x20000948

0800713c <siprintf>:
 800713c:	b40e      	push	{r1, r2, r3}
 800713e:	b500      	push	{lr}
 8007140:	b09c      	sub	sp, #112	; 0x70
 8007142:	ab1d      	add	r3, sp, #116	; 0x74
 8007144:	9002      	str	r0, [sp, #8]
 8007146:	9006      	str	r0, [sp, #24]
 8007148:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800714c:	4809      	ldr	r0, [pc, #36]	; (8007174 <siprintf+0x38>)
 800714e:	9107      	str	r1, [sp, #28]
 8007150:	9104      	str	r1, [sp, #16]
 8007152:	4909      	ldr	r1, [pc, #36]	; (8007178 <siprintf+0x3c>)
 8007154:	f853 2b04 	ldr.w	r2, [r3], #4
 8007158:	9105      	str	r1, [sp, #20]
 800715a:	6800      	ldr	r0, [r0, #0]
 800715c:	9301      	str	r3, [sp, #4]
 800715e:	a902      	add	r1, sp, #8
 8007160:	f001 faac 	bl	80086bc <_svfiprintf_r>
 8007164:	9b02      	ldr	r3, [sp, #8]
 8007166:	2200      	movs	r2, #0
 8007168:	701a      	strb	r2, [r3, #0]
 800716a:	b01c      	add	sp, #112	; 0x70
 800716c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007170:	b003      	add	sp, #12
 8007172:	4770      	bx	lr
 8007174:	20000020 	.word	0x20000020
 8007178:	ffff0208 	.word	0xffff0208

0800717c <strncat>:
 800717c:	b530      	push	{r4, r5, lr}
 800717e:	4604      	mov	r4, r0
 8007180:	7825      	ldrb	r5, [r4, #0]
 8007182:	4623      	mov	r3, r4
 8007184:	3401      	adds	r4, #1
 8007186:	2d00      	cmp	r5, #0
 8007188:	d1fa      	bne.n	8007180 <strncat+0x4>
 800718a:	3a01      	subs	r2, #1
 800718c:	d304      	bcc.n	8007198 <strncat+0x1c>
 800718e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007192:	f803 4b01 	strb.w	r4, [r3], #1
 8007196:	b904      	cbnz	r4, 800719a <strncat+0x1e>
 8007198:	bd30      	pop	{r4, r5, pc}
 800719a:	2a00      	cmp	r2, #0
 800719c:	d1f5      	bne.n	800718a <strncat+0xe>
 800719e:	701a      	strb	r2, [r3, #0]
 80071a0:	e7f3      	b.n	800718a <strncat+0xe>

080071a2 <quorem>:
 80071a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a6:	6903      	ldr	r3, [r0, #16]
 80071a8:	690c      	ldr	r4, [r1, #16]
 80071aa:	42a3      	cmp	r3, r4
 80071ac:	4607      	mov	r7, r0
 80071ae:	f2c0 8081 	blt.w	80072b4 <quorem+0x112>
 80071b2:	3c01      	subs	r4, #1
 80071b4:	f101 0814 	add.w	r8, r1, #20
 80071b8:	f100 0514 	add.w	r5, r0, #20
 80071bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071c0:	9301      	str	r3, [sp, #4]
 80071c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071ca:	3301      	adds	r3, #1
 80071cc:	429a      	cmp	r2, r3
 80071ce:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80071d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071d6:	fbb2 f6f3 	udiv	r6, r2, r3
 80071da:	d331      	bcc.n	8007240 <quorem+0x9e>
 80071dc:	f04f 0e00 	mov.w	lr, #0
 80071e0:	4640      	mov	r0, r8
 80071e2:	46ac      	mov	ip, r5
 80071e4:	46f2      	mov	sl, lr
 80071e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80071ea:	b293      	uxth	r3, r2
 80071ec:	fb06 e303 	mla	r3, r6, r3, lr
 80071f0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	ebaa 0303 	sub.w	r3, sl, r3
 80071fa:	f8dc a000 	ldr.w	sl, [ip]
 80071fe:	0c12      	lsrs	r2, r2, #16
 8007200:	fa13 f38a 	uxtah	r3, r3, sl
 8007204:	fb06 e202 	mla	r2, r6, r2, lr
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	9b00      	ldr	r3, [sp, #0]
 800720c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007210:	b292      	uxth	r2, r2
 8007212:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007216:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800721a:	f8bd 3000 	ldrh.w	r3, [sp]
 800721e:	4581      	cmp	r9, r0
 8007220:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007224:	f84c 3b04 	str.w	r3, [ip], #4
 8007228:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800722c:	d2db      	bcs.n	80071e6 <quorem+0x44>
 800722e:	f855 300b 	ldr.w	r3, [r5, fp]
 8007232:	b92b      	cbnz	r3, 8007240 <quorem+0x9e>
 8007234:	9b01      	ldr	r3, [sp, #4]
 8007236:	3b04      	subs	r3, #4
 8007238:	429d      	cmp	r5, r3
 800723a:	461a      	mov	r2, r3
 800723c:	d32e      	bcc.n	800729c <quorem+0xfa>
 800723e:	613c      	str	r4, [r7, #16]
 8007240:	4638      	mov	r0, r7
 8007242:	f001 f8c7 	bl	80083d4 <__mcmp>
 8007246:	2800      	cmp	r0, #0
 8007248:	db24      	blt.n	8007294 <quorem+0xf2>
 800724a:	3601      	adds	r6, #1
 800724c:	4628      	mov	r0, r5
 800724e:	f04f 0c00 	mov.w	ip, #0
 8007252:	f858 2b04 	ldr.w	r2, [r8], #4
 8007256:	f8d0 e000 	ldr.w	lr, [r0]
 800725a:	b293      	uxth	r3, r2
 800725c:	ebac 0303 	sub.w	r3, ip, r3
 8007260:	0c12      	lsrs	r2, r2, #16
 8007262:	fa13 f38e 	uxtah	r3, r3, lr
 8007266:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800726a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800726e:	b29b      	uxth	r3, r3
 8007270:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007274:	45c1      	cmp	r9, r8
 8007276:	f840 3b04 	str.w	r3, [r0], #4
 800727a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800727e:	d2e8      	bcs.n	8007252 <quorem+0xb0>
 8007280:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007284:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007288:	b922      	cbnz	r2, 8007294 <quorem+0xf2>
 800728a:	3b04      	subs	r3, #4
 800728c:	429d      	cmp	r5, r3
 800728e:	461a      	mov	r2, r3
 8007290:	d30a      	bcc.n	80072a8 <quorem+0x106>
 8007292:	613c      	str	r4, [r7, #16]
 8007294:	4630      	mov	r0, r6
 8007296:	b003      	add	sp, #12
 8007298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800729c:	6812      	ldr	r2, [r2, #0]
 800729e:	3b04      	subs	r3, #4
 80072a0:	2a00      	cmp	r2, #0
 80072a2:	d1cc      	bne.n	800723e <quorem+0x9c>
 80072a4:	3c01      	subs	r4, #1
 80072a6:	e7c7      	b.n	8007238 <quorem+0x96>
 80072a8:	6812      	ldr	r2, [r2, #0]
 80072aa:	3b04      	subs	r3, #4
 80072ac:	2a00      	cmp	r2, #0
 80072ae:	d1f0      	bne.n	8007292 <quorem+0xf0>
 80072b0:	3c01      	subs	r4, #1
 80072b2:	e7eb      	b.n	800728c <quorem+0xea>
 80072b4:	2000      	movs	r0, #0
 80072b6:	e7ee      	b.n	8007296 <quorem+0xf4>

080072b8 <_dtoa_r>:
 80072b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072bc:	ed2d 8b04 	vpush	{d8-d9}
 80072c0:	ec57 6b10 	vmov	r6, r7, d0
 80072c4:	b093      	sub	sp, #76	; 0x4c
 80072c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80072c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80072cc:	9106      	str	r1, [sp, #24]
 80072ce:	ee10 aa10 	vmov	sl, s0
 80072d2:	4604      	mov	r4, r0
 80072d4:	9209      	str	r2, [sp, #36]	; 0x24
 80072d6:	930c      	str	r3, [sp, #48]	; 0x30
 80072d8:	46bb      	mov	fp, r7
 80072da:	b975      	cbnz	r5, 80072fa <_dtoa_r+0x42>
 80072dc:	2010      	movs	r0, #16
 80072de:	f7ff f9bb 	bl	8006658 <malloc>
 80072e2:	4602      	mov	r2, r0
 80072e4:	6260      	str	r0, [r4, #36]	; 0x24
 80072e6:	b920      	cbnz	r0, 80072f2 <_dtoa_r+0x3a>
 80072e8:	4ba7      	ldr	r3, [pc, #668]	; (8007588 <_dtoa_r+0x2d0>)
 80072ea:	21ea      	movs	r1, #234	; 0xea
 80072ec:	48a7      	ldr	r0, [pc, #668]	; (800758c <_dtoa_r+0x2d4>)
 80072ee:	f001 fae5 	bl	80088bc <__assert_func>
 80072f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80072f6:	6005      	str	r5, [r0, #0]
 80072f8:	60c5      	str	r5, [r0, #12]
 80072fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072fc:	6819      	ldr	r1, [r3, #0]
 80072fe:	b151      	cbz	r1, 8007316 <_dtoa_r+0x5e>
 8007300:	685a      	ldr	r2, [r3, #4]
 8007302:	604a      	str	r2, [r1, #4]
 8007304:	2301      	movs	r3, #1
 8007306:	4093      	lsls	r3, r2
 8007308:	608b      	str	r3, [r1, #8]
 800730a:	4620      	mov	r0, r4
 800730c:	f000 fe20 	bl	8007f50 <_Bfree>
 8007310:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007312:	2200      	movs	r2, #0
 8007314:	601a      	str	r2, [r3, #0]
 8007316:	1e3b      	subs	r3, r7, #0
 8007318:	bfaa      	itet	ge
 800731a:	2300      	movge	r3, #0
 800731c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007320:	f8c8 3000 	strge.w	r3, [r8]
 8007324:	4b9a      	ldr	r3, [pc, #616]	; (8007590 <_dtoa_r+0x2d8>)
 8007326:	bfbc      	itt	lt
 8007328:	2201      	movlt	r2, #1
 800732a:	f8c8 2000 	strlt.w	r2, [r8]
 800732e:	ea33 030b 	bics.w	r3, r3, fp
 8007332:	d11b      	bne.n	800736c <_dtoa_r+0xb4>
 8007334:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007336:	f242 730f 	movw	r3, #9999	; 0x270f
 800733a:	6013      	str	r3, [r2, #0]
 800733c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007340:	4333      	orrs	r3, r6
 8007342:	f000 8592 	beq.w	8007e6a <_dtoa_r+0xbb2>
 8007346:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007348:	b963      	cbnz	r3, 8007364 <_dtoa_r+0xac>
 800734a:	4b92      	ldr	r3, [pc, #584]	; (8007594 <_dtoa_r+0x2dc>)
 800734c:	e022      	b.n	8007394 <_dtoa_r+0xdc>
 800734e:	4b92      	ldr	r3, [pc, #584]	; (8007598 <_dtoa_r+0x2e0>)
 8007350:	9301      	str	r3, [sp, #4]
 8007352:	3308      	adds	r3, #8
 8007354:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007356:	6013      	str	r3, [r2, #0]
 8007358:	9801      	ldr	r0, [sp, #4]
 800735a:	b013      	add	sp, #76	; 0x4c
 800735c:	ecbd 8b04 	vpop	{d8-d9}
 8007360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007364:	4b8b      	ldr	r3, [pc, #556]	; (8007594 <_dtoa_r+0x2dc>)
 8007366:	9301      	str	r3, [sp, #4]
 8007368:	3303      	adds	r3, #3
 800736a:	e7f3      	b.n	8007354 <_dtoa_r+0x9c>
 800736c:	2200      	movs	r2, #0
 800736e:	2300      	movs	r3, #0
 8007370:	4650      	mov	r0, sl
 8007372:	4659      	mov	r1, fp
 8007374:	f7f9 fbc8 	bl	8000b08 <__aeabi_dcmpeq>
 8007378:	ec4b ab19 	vmov	d9, sl, fp
 800737c:	4680      	mov	r8, r0
 800737e:	b158      	cbz	r0, 8007398 <_dtoa_r+0xe0>
 8007380:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007382:	2301      	movs	r3, #1
 8007384:	6013      	str	r3, [r2, #0]
 8007386:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007388:	2b00      	cmp	r3, #0
 800738a:	f000 856b 	beq.w	8007e64 <_dtoa_r+0xbac>
 800738e:	4883      	ldr	r0, [pc, #524]	; (800759c <_dtoa_r+0x2e4>)
 8007390:	6018      	str	r0, [r3, #0]
 8007392:	1e43      	subs	r3, r0, #1
 8007394:	9301      	str	r3, [sp, #4]
 8007396:	e7df      	b.n	8007358 <_dtoa_r+0xa0>
 8007398:	ec4b ab10 	vmov	d0, sl, fp
 800739c:	aa10      	add	r2, sp, #64	; 0x40
 800739e:	a911      	add	r1, sp, #68	; 0x44
 80073a0:	4620      	mov	r0, r4
 80073a2:	f001 f8bd 	bl	8008520 <__d2b>
 80073a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80073aa:	ee08 0a10 	vmov	s16, r0
 80073ae:	2d00      	cmp	r5, #0
 80073b0:	f000 8084 	beq.w	80074bc <_dtoa_r+0x204>
 80073b4:	ee19 3a90 	vmov	r3, s19
 80073b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80073c0:	4656      	mov	r6, sl
 80073c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80073c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80073ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80073ce:	4b74      	ldr	r3, [pc, #464]	; (80075a0 <_dtoa_r+0x2e8>)
 80073d0:	2200      	movs	r2, #0
 80073d2:	4630      	mov	r0, r6
 80073d4:	4639      	mov	r1, r7
 80073d6:	f7f8 ff77 	bl	80002c8 <__aeabi_dsub>
 80073da:	a365      	add	r3, pc, #404	; (adr r3, 8007570 <_dtoa_r+0x2b8>)
 80073dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e0:	f7f9 f92a 	bl	8000638 <__aeabi_dmul>
 80073e4:	a364      	add	r3, pc, #400	; (adr r3, 8007578 <_dtoa_r+0x2c0>)
 80073e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ea:	f7f8 ff6f 	bl	80002cc <__adddf3>
 80073ee:	4606      	mov	r6, r0
 80073f0:	4628      	mov	r0, r5
 80073f2:	460f      	mov	r7, r1
 80073f4:	f7f9 f8b6 	bl	8000564 <__aeabi_i2d>
 80073f8:	a361      	add	r3, pc, #388	; (adr r3, 8007580 <_dtoa_r+0x2c8>)
 80073fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fe:	f7f9 f91b 	bl	8000638 <__aeabi_dmul>
 8007402:	4602      	mov	r2, r0
 8007404:	460b      	mov	r3, r1
 8007406:	4630      	mov	r0, r6
 8007408:	4639      	mov	r1, r7
 800740a:	f7f8 ff5f 	bl	80002cc <__adddf3>
 800740e:	4606      	mov	r6, r0
 8007410:	460f      	mov	r7, r1
 8007412:	f7f9 fbc1 	bl	8000b98 <__aeabi_d2iz>
 8007416:	2200      	movs	r2, #0
 8007418:	9000      	str	r0, [sp, #0]
 800741a:	2300      	movs	r3, #0
 800741c:	4630      	mov	r0, r6
 800741e:	4639      	mov	r1, r7
 8007420:	f7f9 fb7c 	bl	8000b1c <__aeabi_dcmplt>
 8007424:	b150      	cbz	r0, 800743c <_dtoa_r+0x184>
 8007426:	9800      	ldr	r0, [sp, #0]
 8007428:	f7f9 f89c 	bl	8000564 <__aeabi_i2d>
 800742c:	4632      	mov	r2, r6
 800742e:	463b      	mov	r3, r7
 8007430:	f7f9 fb6a 	bl	8000b08 <__aeabi_dcmpeq>
 8007434:	b910      	cbnz	r0, 800743c <_dtoa_r+0x184>
 8007436:	9b00      	ldr	r3, [sp, #0]
 8007438:	3b01      	subs	r3, #1
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	9b00      	ldr	r3, [sp, #0]
 800743e:	2b16      	cmp	r3, #22
 8007440:	d85a      	bhi.n	80074f8 <_dtoa_r+0x240>
 8007442:	9a00      	ldr	r2, [sp, #0]
 8007444:	4b57      	ldr	r3, [pc, #348]	; (80075a4 <_dtoa_r+0x2ec>)
 8007446:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800744a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744e:	ec51 0b19 	vmov	r0, r1, d9
 8007452:	f7f9 fb63 	bl	8000b1c <__aeabi_dcmplt>
 8007456:	2800      	cmp	r0, #0
 8007458:	d050      	beq.n	80074fc <_dtoa_r+0x244>
 800745a:	9b00      	ldr	r3, [sp, #0]
 800745c:	3b01      	subs	r3, #1
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	2300      	movs	r3, #0
 8007462:	930b      	str	r3, [sp, #44]	; 0x2c
 8007464:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007466:	1b5d      	subs	r5, r3, r5
 8007468:	1e6b      	subs	r3, r5, #1
 800746a:	9305      	str	r3, [sp, #20]
 800746c:	bf45      	ittet	mi
 800746e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007472:	9304      	strmi	r3, [sp, #16]
 8007474:	2300      	movpl	r3, #0
 8007476:	2300      	movmi	r3, #0
 8007478:	bf4c      	ite	mi
 800747a:	9305      	strmi	r3, [sp, #20]
 800747c:	9304      	strpl	r3, [sp, #16]
 800747e:	9b00      	ldr	r3, [sp, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	db3d      	blt.n	8007500 <_dtoa_r+0x248>
 8007484:	9b05      	ldr	r3, [sp, #20]
 8007486:	9a00      	ldr	r2, [sp, #0]
 8007488:	920a      	str	r2, [sp, #40]	; 0x28
 800748a:	4413      	add	r3, r2
 800748c:	9305      	str	r3, [sp, #20]
 800748e:	2300      	movs	r3, #0
 8007490:	9307      	str	r3, [sp, #28]
 8007492:	9b06      	ldr	r3, [sp, #24]
 8007494:	2b09      	cmp	r3, #9
 8007496:	f200 8089 	bhi.w	80075ac <_dtoa_r+0x2f4>
 800749a:	2b05      	cmp	r3, #5
 800749c:	bfc4      	itt	gt
 800749e:	3b04      	subgt	r3, #4
 80074a0:	9306      	strgt	r3, [sp, #24]
 80074a2:	9b06      	ldr	r3, [sp, #24]
 80074a4:	f1a3 0302 	sub.w	r3, r3, #2
 80074a8:	bfcc      	ite	gt
 80074aa:	2500      	movgt	r5, #0
 80074ac:	2501      	movle	r5, #1
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	f200 8087 	bhi.w	80075c2 <_dtoa_r+0x30a>
 80074b4:	e8df f003 	tbb	[pc, r3]
 80074b8:	59383a2d 	.word	0x59383a2d
 80074bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80074c0:	441d      	add	r5, r3
 80074c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80074c6:	2b20      	cmp	r3, #32
 80074c8:	bfc1      	itttt	gt
 80074ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80074ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80074d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80074d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80074da:	bfda      	itte	le
 80074dc:	f1c3 0320 	rsble	r3, r3, #32
 80074e0:	fa06 f003 	lslle.w	r0, r6, r3
 80074e4:	4318      	orrgt	r0, r3
 80074e6:	f7f9 f82d 	bl	8000544 <__aeabi_ui2d>
 80074ea:	2301      	movs	r3, #1
 80074ec:	4606      	mov	r6, r0
 80074ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80074f2:	3d01      	subs	r5, #1
 80074f4:	930e      	str	r3, [sp, #56]	; 0x38
 80074f6:	e76a      	b.n	80073ce <_dtoa_r+0x116>
 80074f8:	2301      	movs	r3, #1
 80074fa:	e7b2      	b.n	8007462 <_dtoa_r+0x1aa>
 80074fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80074fe:	e7b1      	b.n	8007464 <_dtoa_r+0x1ac>
 8007500:	9b04      	ldr	r3, [sp, #16]
 8007502:	9a00      	ldr	r2, [sp, #0]
 8007504:	1a9b      	subs	r3, r3, r2
 8007506:	9304      	str	r3, [sp, #16]
 8007508:	4253      	negs	r3, r2
 800750a:	9307      	str	r3, [sp, #28]
 800750c:	2300      	movs	r3, #0
 800750e:	930a      	str	r3, [sp, #40]	; 0x28
 8007510:	e7bf      	b.n	8007492 <_dtoa_r+0x1da>
 8007512:	2300      	movs	r3, #0
 8007514:	9308      	str	r3, [sp, #32]
 8007516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007518:	2b00      	cmp	r3, #0
 800751a:	dc55      	bgt.n	80075c8 <_dtoa_r+0x310>
 800751c:	2301      	movs	r3, #1
 800751e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007522:	461a      	mov	r2, r3
 8007524:	9209      	str	r2, [sp, #36]	; 0x24
 8007526:	e00c      	b.n	8007542 <_dtoa_r+0x28a>
 8007528:	2301      	movs	r3, #1
 800752a:	e7f3      	b.n	8007514 <_dtoa_r+0x25c>
 800752c:	2300      	movs	r3, #0
 800752e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007530:	9308      	str	r3, [sp, #32]
 8007532:	9b00      	ldr	r3, [sp, #0]
 8007534:	4413      	add	r3, r2
 8007536:	9302      	str	r3, [sp, #8]
 8007538:	3301      	adds	r3, #1
 800753a:	2b01      	cmp	r3, #1
 800753c:	9303      	str	r3, [sp, #12]
 800753e:	bfb8      	it	lt
 8007540:	2301      	movlt	r3, #1
 8007542:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007544:	2200      	movs	r2, #0
 8007546:	6042      	str	r2, [r0, #4]
 8007548:	2204      	movs	r2, #4
 800754a:	f102 0614 	add.w	r6, r2, #20
 800754e:	429e      	cmp	r6, r3
 8007550:	6841      	ldr	r1, [r0, #4]
 8007552:	d93d      	bls.n	80075d0 <_dtoa_r+0x318>
 8007554:	4620      	mov	r0, r4
 8007556:	f000 fcbb 	bl	8007ed0 <_Balloc>
 800755a:	9001      	str	r0, [sp, #4]
 800755c:	2800      	cmp	r0, #0
 800755e:	d13b      	bne.n	80075d8 <_dtoa_r+0x320>
 8007560:	4b11      	ldr	r3, [pc, #68]	; (80075a8 <_dtoa_r+0x2f0>)
 8007562:	4602      	mov	r2, r0
 8007564:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007568:	e6c0      	b.n	80072ec <_dtoa_r+0x34>
 800756a:	2301      	movs	r3, #1
 800756c:	e7df      	b.n	800752e <_dtoa_r+0x276>
 800756e:	bf00      	nop
 8007570:	636f4361 	.word	0x636f4361
 8007574:	3fd287a7 	.word	0x3fd287a7
 8007578:	8b60c8b3 	.word	0x8b60c8b3
 800757c:	3fc68a28 	.word	0x3fc68a28
 8007580:	509f79fb 	.word	0x509f79fb
 8007584:	3fd34413 	.word	0x3fd34413
 8007588:	080096e1 	.word	0x080096e1
 800758c:	080096f8 	.word	0x080096f8
 8007590:	7ff00000 	.word	0x7ff00000
 8007594:	080096dd 	.word	0x080096dd
 8007598:	080096d4 	.word	0x080096d4
 800759c:	080096b1 	.word	0x080096b1
 80075a0:	3ff80000 	.word	0x3ff80000
 80075a4:	080097e8 	.word	0x080097e8
 80075a8:	08009753 	.word	0x08009753
 80075ac:	2501      	movs	r5, #1
 80075ae:	2300      	movs	r3, #0
 80075b0:	9306      	str	r3, [sp, #24]
 80075b2:	9508      	str	r5, [sp, #32]
 80075b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80075bc:	2200      	movs	r2, #0
 80075be:	2312      	movs	r3, #18
 80075c0:	e7b0      	b.n	8007524 <_dtoa_r+0x26c>
 80075c2:	2301      	movs	r3, #1
 80075c4:	9308      	str	r3, [sp, #32]
 80075c6:	e7f5      	b.n	80075b4 <_dtoa_r+0x2fc>
 80075c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80075ce:	e7b8      	b.n	8007542 <_dtoa_r+0x28a>
 80075d0:	3101      	adds	r1, #1
 80075d2:	6041      	str	r1, [r0, #4]
 80075d4:	0052      	lsls	r2, r2, #1
 80075d6:	e7b8      	b.n	800754a <_dtoa_r+0x292>
 80075d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075da:	9a01      	ldr	r2, [sp, #4]
 80075dc:	601a      	str	r2, [r3, #0]
 80075de:	9b03      	ldr	r3, [sp, #12]
 80075e0:	2b0e      	cmp	r3, #14
 80075e2:	f200 809d 	bhi.w	8007720 <_dtoa_r+0x468>
 80075e6:	2d00      	cmp	r5, #0
 80075e8:	f000 809a 	beq.w	8007720 <_dtoa_r+0x468>
 80075ec:	9b00      	ldr	r3, [sp, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	dd32      	ble.n	8007658 <_dtoa_r+0x3a0>
 80075f2:	4ab7      	ldr	r2, [pc, #732]	; (80078d0 <_dtoa_r+0x618>)
 80075f4:	f003 030f 	and.w	r3, r3, #15
 80075f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80075fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007600:	9b00      	ldr	r3, [sp, #0]
 8007602:	05d8      	lsls	r0, r3, #23
 8007604:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007608:	d516      	bpl.n	8007638 <_dtoa_r+0x380>
 800760a:	4bb2      	ldr	r3, [pc, #712]	; (80078d4 <_dtoa_r+0x61c>)
 800760c:	ec51 0b19 	vmov	r0, r1, d9
 8007610:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007614:	f7f9 f93a 	bl	800088c <__aeabi_ddiv>
 8007618:	f007 070f 	and.w	r7, r7, #15
 800761c:	4682      	mov	sl, r0
 800761e:	468b      	mov	fp, r1
 8007620:	2503      	movs	r5, #3
 8007622:	4eac      	ldr	r6, [pc, #688]	; (80078d4 <_dtoa_r+0x61c>)
 8007624:	b957      	cbnz	r7, 800763c <_dtoa_r+0x384>
 8007626:	4642      	mov	r2, r8
 8007628:	464b      	mov	r3, r9
 800762a:	4650      	mov	r0, sl
 800762c:	4659      	mov	r1, fp
 800762e:	f7f9 f92d 	bl	800088c <__aeabi_ddiv>
 8007632:	4682      	mov	sl, r0
 8007634:	468b      	mov	fp, r1
 8007636:	e028      	b.n	800768a <_dtoa_r+0x3d2>
 8007638:	2502      	movs	r5, #2
 800763a:	e7f2      	b.n	8007622 <_dtoa_r+0x36a>
 800763c:	07f9      	lsls	r1, r7, #31
 800763e:	d508      	bpl.n	8007652 <_dtoa_r+0x39a>
 8007640:	4640      	mov	r0, r8
 8007642:	4649      	mov	r1, r9
 8007644:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007648:	f7f8 fff6 	bl	8000638 <__aeabi_dmul>
 800764c:	3501      	adds	r5, #1
 800764e:	4680      	mov	r8, r0
 8007650:	4689      	mov	r9, r1
 8007652:	107f      	asrs	r7, r7, #1
 8007654:	3608      	adds	r6, #8
 8007656:	e7e5      	b.n	8007624 <_dtoa_r+0x36c>
 8007658:	f000 809b 	beq.w	8007792 <_dtoa_r+0x4da>
 800765c:	9b00      	ldr	r3, [sp, #0]
 800765e:	4f9d      	ldr	r7, [pc, #628]	; (80078d4 <_dtoa_r+0x61c>)
 8007660:	425e      	negs	r6, r3
 8007662:	4b9b      	ldr	r3, [pc, #620]	; (80078d0 <_dtoa_r+0x618>)
 8007664:	f006 020f 	and.w	r2, r6, #15
 8007668:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800766c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007670:	ec51 0b19 	vmov	r0, r1, d9
 8007674:	f7f8 ffe0 	bl	8000638 <__aeabi_dmul>
 8007678:	1136      	asrs	r6, r6, #4
 800767a:	4682      	mov	sl, r0
 800767c:	468b      	mov	fp, r1
 800767e:	2300      	movs	r3, #0
 8007680:	2502      	movs	r5, #2
 8007682:	2e00      	cmp	r6, #0
 8007684:	d17a      	bne.n	800777c <_dtoa_r+0x4c4>
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1d3      	bne.n	8007632 <_dtoa_r+0x37a>
 800768a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 8082 	beq.w	8007796 <_dtoa_r+0x4de>
 8007692:	4b91      	ldr	r3, [pc, #580]	; (80078d8 <_dtoa_r+0x620>)
 8007694:	2200      	movs	r2, #0
 8007696:	4650      	mov	r0, sl
 8007698:	4659      	mov	r1, fp
 800769a:	f7f9 fa3f 	bl	8000b1c <__aeabi_dcmplt>
 800769e:	2800      	cmp	r0, #0
 80076a0:	d079      	beq.n	8007796 <_dtoa_r+0x4de>
 80076a2:	9b03      	ldr	r3, [sp, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d076      	beq.n	8007796 <_dtoa_r+0x4de>
 80076a8:	9b02      	ldr	r3, [sp, #8]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	dd36      	ble.n	800771c <_dtoa_r+0x464>
 80076ae:	9b00      	ldr	r3, [sp, #0]
 80076b0:	4650      	mov	r0, sl
 80076b2:	4659      	mov	r1, fp
 80076b4:	1e5f      	subs	r7, r3, #1
 80076b6:	2200      	movs	r2, #0
 80076b8:	4b88      	ldr	r3, [pc, #544]	; (80078dc <_dtoa_r+0x624>)
 80076ba:	f7f8 ffbd 	bl	8000638 <__aeabi_dmul>
 80076be:	9e02      	ldr	r6, [sp, #8]
 80076c0:	4682      	mov	sl, r0
 80076c2:	468b      	mov	fp, r1
 80076c4:	3501      	adds	r5, #1
 80076c6:	4628      	mov	r0, r5
 80076c8:	f7f8 ff4c 	bl	8000564 <__aeabi_i2d>
 80076cc:	4652      	mov	r2, sl
 80076ce:	465b      	mov	r3, fp
 80076d0:	f7f8 ffb2 	bl	8000638 <__aeabi_dmul>
 80076d4:	4b82      	ldr	r3, [pc, #520]	; (80078e0 <_dtoa_r+0x628>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	f7f8 fdf8 	bl	80002cc <__adddf3>
 80076dc:	46d0      	mov	r8, sl
 80076de:	46d9      	mov	r9, fp
 80076e0:	4682      	mov	sl, r0
 80076e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80076e6:	2e00      	cmp	r6, #0
 80076e8:	d158      	bne.n	800779c <_dtoa_r+0x4e4>
 80076ea:	4b7e      	ldr	r3, [pc, #504]	; (80078e4 <_dtoa_r+0x62c>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	4640      	mov	r0, r8
 80076f0:	4649      	mov	r1, r9
 80076f2:	f7f8 fde9 	bl	80002c8 <__aeabi_dsub>
 80076f6:	4652      	mov	r2, sl
 80076f8:	465b      	mov	r3, fp
 80076fa:	4680      	mov	r8, r0
 80076fc:	4689      	mov	r9, r1
 80076fe:	f7f9 fa2b 	bl	8000b58 <__aeabi_dcmpgt>
 8007702:	2800      	cmp	r0, #0
 8007704:	f040 8295 	bne.w	8007c32 <_dtoa_r+0x97a>
 8007708:	4652      	mov	r2, sl
 800770a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800770e:	4640      	mov	r0, r8
 8007710:	4649      	mov	r1, r9
 8007712:	f7f9 fa03 	bl	8000b1c <__aeabi_dcmplt>
 8007716:	2800      	cmp	r0, #0
 8007718:	f040 8289 	bne.w	8007c2e <_dtoa_r+0x976>
 800771c:	ec5b ab19 	vmov	sl, fp, d9
 8007720:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007722:	2b00      	cmp	r3, #0
 8007724:	f2c0 8148 	blt.w	80079b8 <_dtoa_r+0x700>
 8007728:	9a00      	ldr	r2, [sp, #0]
 800772a:	2a0e      	cmp	r2, #14
 800772c:	f300 8144 	bgt.w	80079b8 <_dtoa_r+0x700>
 8007730:	4b67      	ldr	r3, [pc, #412]	; (80078d0 <_dtoa_r+0x618>)
 8007732:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007736:	e9d3 8900 	ldrd	r8, r9, [r3]
 800773a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800773c:	2b00      	cmp	r3, #0
 800773e:	f280 80d5 	bge.w	80078ec <_dtoa_r+0x634>
 8007742:	9b03      	ldr	r3, [sp, #12]
 8007744:	2b00      	cmp	r3, #0
 8007746:	f300 80d1 	bgt.w	80078ec <_dtoa_r+0x634>
 800774a:	f040 826f 	bne.w	8007c2c <_dtoa_r+0x974>
 800774e:	4b65      	ldr	r3, [pc, #404]	; (80078e4 <_dtoa_r+0x62c>)
 8007750:	2200      	movs	r2, #0
 8007752:	4640      	mov	r0, r8
 8007754:	4649      	mov	r1, r9
 8007756:	f7f8 ff6f 	bl	8000638 <__aeabi_dmul>
 800775a:	4652      	mov	r2, sl
 800775c:	465b      	mov	r3, fp
 800775e:	f7f9 f9f1 	bl	8000b44 <__aeabi_dcmpge>
 8007762:	9e03      	ldr	r6, [sp, #12]
 8007764:	4637      	mov	r7, r6
 8007766:	2800      	cmp	r0, #0
 8007768:	f040 8245 	bne.w	8007bf6 <_dtoa_r+0x93e>
 800776c:	9d01      	ldr	r5, [sp, #4]
 800776e:	2331      	movs	r3, #49	; 0x31
 8007770:	f805 3b01 	strb.w	r3, [r5], #1
 8007774:	9b00      	ldr	r3, [sp, #0]
 8007776:	3301      	adds	r3, #1
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	e240      	b.n	8007bfe <_dtoa_r+0x946>
 800777c:	07f2      	lsls	r2, r6, #31
 800777e:	d505      	bpl.n	800778c <_dtoa_r+0x4d4>
 8007780:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007784:	f7f8 ff58 	bl	8000638 <__aeabi_dmul>
 8007788:	3501      	adds	r5, #1
 800778a:	2301      	movs	r3, #1
 800778c:	1076      	asrs	r6, r6, #1
 800778e:	3708      	adds	r7, #8
 8007790:	e777      	b.n	8007682 <_dtoa_r+0x3ca>
 8007792:	2502      	movs	r5, #2
 8007794:	e779      	b.n	800768a <_dtoa_r+0x3d2>
 8007796:	9f00      	ldr	r7, [sp, #0]
 8007798:	9e03      	ldr	r6, [sp, #12]
 800779a:	e794      	b.n	80076c6 <_dtoa_r+0x40e>
 800779c:	9901      	ldr	r1, [sp, #4]
 800779e:	4b4c      	ldr	r3, [pc, #304]	; (80078d0 <_dtoa_r+0x618>)
 80077a0:	4431      	add	r1, r6
 80077a2:	910d      	str	r1, [sp, #52]	; 0x34
 80077a4:	9908      	ldr	r1, [sp, #32]
 80077a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80077aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077ae:	2900      	cmp	r1, #0
 80077b0:	d043      	beq.n	800783a <_dtoa_r+0x582>
 80077b2:	494d      	ldr	r1, [pc, #308]	; (80078e8 <_dtoa_r+0x630>)
 80077b4:	2000      	movs	r0, #0
 80077b6:	f7f9 f869 	bl	800088c <__aeabi_ddiv>
 80077ba:	4652      	mov	r2, sl
 80077bc:	465b      	mov	r3, fp
 80077be:	f7f8 fd83 	bl	80002c8 <__aeabi_dsub>
 80077c2:	9d01      	ldr	r5, [sp, #4]
 80077c4:	4682      	mov	sl, r0
 80077c6:	468b      	mov	fp, r1
 80077c8:	4649      	mov	r1, r9
 80077ca:	4640      	mov	r0, r8
 80077cc:	f7f9 f9e4 	bl	8000b98 <__aeabi_d2iz>
 80077d0:	4606      	mov	r6, r0
 80077d2:	f7f8 fec7 	bl	8000564 <__aeabi_i2d>
 80077d6:	4602      	mov	r2, r0
 80077d8:	460b      	mov	r3, r1
 80077da:	4640      	mov	r0, r8
 80077dc:	4649      	mov	r1, r9
 80077de:	f7f8 fd73 	bl	80002c8 <__aeabi_dsub>
 80077e2:	3630      	adds	r6, #48	; 0x30
 80077e4:	f805 6b01 	strb.w	r6, [r5], #1
 80077e8:	4652      	mov	r2, sl
 80077ea:	465b      	mov	r3, fp
 80077ec:	4680      	mov	r8, r0
 80077ee:	4689      	mov	r9, r1
 80077f0:	f7f9 f994 	bl	8000b1c <__aeabi_dcmplt>
 80077f4:	2800      	cmp	r0, #0
 80077f6:	d163      	bne.n	80078c0 <_dtoa_r+0x608>
 80077f8:	4642      	mov	r2, r8
 80077fa:	464b      	mov	r3, r9
 80077fc:	4936      	ldr	r1, [pc, #216]	; (80078d8 <_dtoa_r+0x620>)
 80077fe:	2000      	movs	r0, #0
 8007800:	f7f8 fd62 	bl	80002c8 <__aeabi_dsub>
 8007804:	4652      	mov	r2, sl
 8007806:	465b      	mov	r3, fp
 8007808:	f7f9 f988 	bl	8000b1c <__aeabi_dcmplt>
 800780c:	2800      	cmp	r0, #0
 800780e:	f040 80b5 	bne.w	800797c <_dtoa_r+0x6c4>
 8007812:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007814:	429d      	cmp	r5, r3
 8007816:	d081      	beq.n	800771c <_dtoa_r+0x464>
 8007818:	4b30      	ldr	r3, [pc, #192]	; (80078dc <_dtoa_r+0x624>)
 800781a:	2200      	movs	r2, #0
 800781c:	4650      	mov	r0, sl
 800781e:	4659      	mov	r1, fp
 8007820:	f7f8 ff0a 	bl	8000638 <__aeabi_dmul>
 8007824:	4b2d      	ldr	r3, [pc, #180]	; (80078dc <_dtoa_r+0x624>)
 8007826:	4682      	mov	sl, r0
 8007828:	468b      	mov	fp, r1
 800782a:	4640      	mov	r0, r8
 800782c:	4649      	mov	r1, r9
 800782e:	2200      	movs	r2, #0
 8007830:	f7f8 ff02 	bl	8000638 <__aeabi_dmul>
 8007834:	4680      	mov	r8, r0
 8007836:	4689      	mov	r9, r1
 8007838:	e7c6      	b.n	80077c8 <_dtoa_r+0x510>
 800783a:	4650      	mov	r0, sl
 800783c:	4659      	mov	r1, fp
 800783e:	f7f8 fefb 	bl	8000638 <__aeabi_dmul>
 8007842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007844:	9d01      	ldr	r5, [sp, #4]
 8007846:	930f      	str	r3, [sp, #60]	; 0x3c
 8007848:	4682      	mov	sl, r0
 800784a:	468b      	mov	fp, r1
 800784c:	4649      	mov	r1, r9
 800784e:	4640      	mov	r0, r8
 8007850:	f7f9 f9a2 	bl	8000b98 <__aeabi_d2iz>
 8007854:	4606      	mov	r6, r0
 8007856:	f7f8 fe85 	bl	8000564 <__aeabi_i2d>
 800785a:	3630      	adds	r6, #48	; 0x30
 800785c:	4602      	mov	r2, r0
 800785e:	460b      	mov	r3, r1
 8007860:	4640      	mov	r0, r8
 8007862:	4649      	mov	r1, r9
 8007864:	f7f8 fd30 	bl	80002c8 <__aeabi_dsub>
 8007868:	f805 6b01 	strb.w	r6, [r5], #1
 800786c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800786e:	429d      	cmp	r5, r3
 8007870:	4680      	mov	r8, r0
 8007872:	4689      	mov	r9, r1
 8007874:	f04f 0200 	mov.w	r2, #0
 8007878:	d124      	bne.n	80078c4 <_dtoa_r+0x60c>
 800787a:	4b1b      	ldr	r3, [pc, #108]	; (80078e8 <_dtoa_r+0x630>)
 800787c:	4650      	mov	r0, sl
 800787e:	4659      	mov	r1, fp
 8007880:	f7f8 fd24 	bl	80002cc <__adddf3>
 8007884:	4602      	mov	r2, r0
 8007886:	460b      	mov	r3, r1
 8007888:	4640      	mov	r0, r8
 800788a:	4649      	mov	r1, r9
 800788c:	f7f9 f964 	bl	8000b58 <__aeabi_dcmpgt>
 8007890:	2800      	cmp	r0, #0
 8007892:	d173      	bne.n	800797c <_dtoa_r+0x6c4>
 8007894:	4652      	mov	r2, sl
 8007896:	465b      	mov	r3, fp
 8007898:	4913      	ldr	r1, [pc, #76]	; (80078e8 <_dtoa_r+0x630>)
 800789a:	2000      	movs	r0, #0
 800789c:	f7f8 fd14 	bl	80002c8 <__aeabi_dsub>
 80078a0:	4602      	mov	r2, r0
 80078a2:	460b      	mov	r3, r1
 80078a4:	4640      	mov	r0, r8
 80078a6:	4649      	mov	r1, r9
 80078a8:	f7f9 f938 	bl	8000b1c <__aeabi_dcmplt>
 80078ac:	2800      	cmp	r0, #0
 80078ae:	f43f af35 	beq.w	800771c <_dtoa_r+0x464>
 80078b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80078b4:	1e6b      	subs	r3, r5, #1
 80078b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80078b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80078bc:	2b30      	cmp	r3, #48	; 0x30
 80078be:	d0f8      	beq.n	80078b2 <_dtoa_r+0x5fa>
 80078c0:	9700      	str	r7, [sp, #0]
 80078c2:	e049      	b.n	8007958 <_dtoa_r+0x6a0>
 80078c4:	4b05      	ldr	r3, [pc, #20]	; (80078dc <_dtoa_r+0x624>)
 80078c6:	f7f8 feb7 	bl	8000638 <__aeabi_dmul>
 80078ca:	4680      	mov	r8, r0
 80078cc:	4689      	mov	r9, r1
 80078ce:	e7bd      	b.n	800784c <_dtoa_r+0x594>
 80078d0:	080097e8 	.word	0x080097e8
 80078d4:	080097c0 	.word	0x080097c0
 80078d8:	3ff00000 	.word	0x3ff00000
 80078dc:	40240000 	.word	0x40240000
 80078e0:	401c0000 	.word	0x401c0000
 80078e4:	40140000 	.word	0x40140000
 80078e8:	3fe00000 	.word	0x3fe00000
 80078ec:	9d01      	ldr	r5, [sp, #4]
 80078ee:	4656      	mov	r6, sl
 80078f0:	465f      	mov	r7, fp
 80078f2:	4642      	mov	r2, r8
 80078f4:	464b      	mov	r3, r9
 80078f6:	4630      	mov	r0, r6
 80078f8:	4639      	mov	r1, r7
 80078fa:	f7f8 ffc7 	bl	800088c <__aeabi_ddiv>
 80078fe:	f7f9 f94b 	bl	8000b98 <__aeabi_d2iz>
 8007902:	4682      	mov	sl, r0
 8007904:	f7f8 fe2e 	bl	8000564 <__aeabi_i2d>
 8007908:	4642      	mov	r2, r8
 800790a:	464b      	mov	r3, r9
 800790c:	f7f8 fe94 	bl	8000638 <__aeabi_dmul>
 8007910:	4602      	mov	r2, r0
 8007912:	460b      	mov	r3, r1
 8007914:	4630      	mov	r0, r6
 8007916:	4639      	mov	r1, r7
 8007918:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800791c:	f7f8 fcd4 	bl	80002c8 <__aeabi_dsub>
 8007920:	f805 6b01 	strb.w	r6, [r5], #1
 8007924:	9e01      	ldr	r6, [sp, #4]
 8007926:	9f03      	ldr	r7, [sp, #12]
 8007928:	1bae      	subs	r6, r5, r6
 800792a:	42b7      	cmp	r7, r6
 800792c:	4602      	mov	r2, r0
 800792e:	460b      	mov	r3, r1
 8007930:	d135      	bne.n	800799e <_dtoa_r+0x6e6>
 8007932:	f7f8 fccb 	bl	80002cc <__adddf3>
 8007936:	4642      	mov	r2, r8
 8007938:	464b      	mov	r3, r9
 800793a:	4606      	mov	r6, r0
 800793c:	460f      	mov	r7, r1
 800793e:	f7f9 f90b 	bl	8000b58 <__aeabi_dcmpgt>
 8007942:	b9d0      	cbnz	r0, 800797a <_dtoa_r+0x6c2>
 8007944:	4642      	mov	r2, r8
 8007946:	464b      	mov	r3, r9
 8007948:	4630      	mov	r0, r6
 800794a:	4639      	mov	r1, r7
 800794c:	f7f9 f8dc 	bl	8000b08 <__aeabi_dcmpeq>
 8007950:	b110      	cbz	r0, 8007958 <_dtoa_r+0x6a0>
 8007952:	f01a 0f01 	tst.w	sl, #1
 8007956:	d110      	bne.n	800797a <_dtoa_r+0x6c2>
 8007958:	4620      	mov	r0, r4
 800795a:	ee18 1a10 	vmov	r1, s16
 800795e:	f000 faf7 	bl	8007f50 <_Bfree>
 8007962:	2300      	movs	r3, #0
 8007964:	9800      	ldr	r0, [sp, #0]
 8007966:	702b      	strb	r3, [r5, #0]
 8007968:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800796a:	3001      	adds	r0, #1
 800796c:	6018      	str	r0, [r3, #0]
 800796e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007970:	2b00      	cmp	r3, #0
 8007972:	f43f acf1 	beq.w	8007358 <_dtoa_r+0xa0>
 8007976:	601d      	str	r5, [r3, #0]
 8007978:	e4ee      	b.n	8007358 <_dtoa_r+0xa0>
 800797a:	9f00      	ldr	r7, [sp, #0]
 800797c:	462b      	mov	r3, r5
 800797e:	461d      	mov	r5, r3
 8007980:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007984:	2a39      	cmp	r2, #57	; 0x39
 8007986:	d106      	bne.n	8007996 <_dtoa_r+0x6de>
 8007988:	9a01      	ldr	r2, [sp, #4]
 800798a:	429a      	cmp	r2, r3
 800798c:	d1f7      	bne.n	800797e <_dtoa_r+0x6c6>
 800798e:	9901      	ldr	r1, [sp, #4]
 8007990:	2230      	movs	r2, #48	; 0x30
 8007992:	3701      	adds	r7, #1
 8007994:	700a      	strb	r2, [r1, #0]
 8007996:	781a      	ldrb	r2, [r3, #0]
 8007998:	3201      	adds	r2, #1
 800799a:	701a      	strb	r2, [r3, #0]
 800799c:	e790      	b.n	80078c0 <_dtoa_r+0x608>
 800799e:	4ba6      	ldr	r3, [pc, #664]	; (8007c38 <_dtoa_r+0x980>)
 80079a0:	2200      	movs	r2, #0
 80079a2:	f7f8 fe49 	bl	8000638 <__aeabi_dmul>
 80079a6:	2200      	movs	r2, #0
 80079a8:	2300      	movs	r3, #0
 80079aa:	4606      	mov	r6, r0
 80079ac:	460f      	mov	r7, r1
 80079ae:	f7f9 f8ab 	bl	8000b08 <__aeabi_dcmpeq>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d09d      	beq.n	80078f2 <_dtoa_r+0x63a>
 80079b6:	e7cf      	b.n	8007958 <_dtoa_r+0x6a0>
 80079b8:	9a08      	ldr	r2, [sp, #32]
 80079ba:	2a00      	cmp	r2, #0
 80079bc:	f000 80d7 	beq.w	8007b6e <_dtoa_r+0x8b6>
 80079c0:	9a06      	ldr	r2, [sp, #24]
 80079c2:	2a01      	cmp	r2, #1
 80079c4:	f300 80ba 	bgt.w	8007b3c <_dtoa_r+0x884>
 80079c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079ca:	2a00      	cmp	r2, #0
 80079cc:	f000 80b2 	beq.w	8007b34 <_dtoa_r+0x87c>
 80079d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80079d4:	9e07      	ldr	r6, [sp, #28]
 80079d6:	9d04      	ldr	r5, [sp, #16]
 80079d8:	9a04      	ldr	r2, [sp, #16]
 80079da:	441a      	add	r2, r3
 80079dc:	9204      	str	r2, [sp, #16]
 80079de:	9a05      	ldr	r2, [sp, #20]
 80079e0:	2101      	movs	r1, #1
 80079e2:	441a      	add	r2, r3
 80079e4:	4620      	mov	r0, r4
 80079e6:	9205      	str	r2, [sp, #20]
 80079e8:	f000 fb6a 	bl	80080c0 <__i2b>
 80079ec:	4607      	mov	r7, r0
 80079ee:	2d00      	cmp	r5, #0
 80079f0:	dd0c      	ble.n	8007a0c <_dtoa_r+0x754>
 80079f2:	9b05      	ldr	r3, [sp, #20]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	dd09      	ble.n	8007a0c <_dtoa_r+0x754>
 80079f8:	42ab      	cmp	r3, r5
 80079fa:	9a04      	ldr	r2, [sp, #16]
 80079fc:	bfa8      	it	ge
 80079fe:	462b      	movge	r3, r5
 8007a00:	1ad2      	subs	r2, r2, r3
 8007a02:	9204      	str	r2, [sp, #16]
 8007a04:	9a05      	ldr	r2, [sp, #20]
 8007a06:	1aed      	subs	r5, r5, r3
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	9305      	str	r3, [sp, #20]
 8007a0c:	9b07      	ldr	r3, [sp, #28]
 8007a0e:	b31b      	cbz	r3, 8007a58 <_dtoa_r+0x7a0>
 8007a10:	9b08      	ldr	r3, [sp, #32]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f000 80af 	beq.w	8007b76 <_dtoa_r+0x8be>
 8007a18:	2e00      	cmp	r6, #0
 8007a1a:	dd13      	ble.n	8007a44 <_dtoa_r+0x78c>
 8007a1c:	4639      	mov	r1, r7
 8007a1e:	4632      	mov	r2, r6
 8007a20:	4620      	mov	r0, r4
 8007a22:	f000 fc0d 	bl	8008240 <__pow5mult>
 8007a26:	ee18 2a10 	vmov	r2, s16
 8007a2a:	4601      	mov	r1, r0
 8007a2c:	4607      	mov	r7, r0
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f000 fb5c 	bl	80080ec <__multiply>
 8007a34:	ee18 1a10 	vmov	r1, s16
 8007a38:	4680      	mov	r8, r0
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f000 fa88 	bl	8007f50 <_Bfree>
 8007a40:	ee08 8a10 	vmov	s16, r8
 8007a44:	9b07      	ldr	r3, [sp, #28]
 8007a46:	1b9a      	subs	r2, r3, r6
 8007a48:	d006      	beq.n	8007a58 <_dtoa_r+0x7a0>
 8007a4a:	ee18 1a10 	vmov	r1, s16
 8007a4e:	4620      	mov	r0, r4
 8007a50:	f000 fbf6 	bl	8008240 <__pow5mult>
 8007a54:	ee08 0a10 	vmov	s16, r0
 8007a58:	2101      	movs	r1, #1
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f000 fb30 	bl	80080c0 <__i2b>
 8007a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	4606      	mov	r6, r0
 8007a66:	f340 8088 	ble.w	8007b7a <_dtoa_r+0x8c2>
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	4601      	mov	r1, r0
 8007a6e:	4620      	mov	r0, r4
 8007a70:	f000 fbe6 	bl	8008240 <__pow5mult>
 8007a74:	9b06      	ldr	r3, [sp, #24]
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	4606      	mov	r6, r0
 8007a7a:	f340 8081 	ble.w	8007b80 <_dtoa_r+0x8c8>
 8007a7e:	f04f 0800 	mov.w	r8, #0
 8007a82:	6933      	ldr	r3, [r6, #16]
 8007a84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007a88:	6918      	ldr	r0, [r3, #16]
 8007a8a:	f000 fac9 	bl	8008020 <__hi0bits>
 8007a8e:	f1c0 0020 	rsb	r0, r0, #32
 8007a92:	9b05      	ldr	r3, [sp, #20]
 8007a94:	4418      	add	r0, r3
 8007a96:	f010 001f 	ands.w	r0, r0, #31
 8007a9a:	f000 8092 	beq.w	8007bc2 <_dtoa_r+0x90a>
 8007a9e:	f1c0 0320 	rsb	r3, r0, #32
 8007aa2:	2b04      	cmp	r3, #4
 8007aa4:	f340 808a 	ble.w	8007bbc <_dtoa_r+0x904>
 8007aa8:	f1c0 001c 	rsb	r0, r0, #28
 8007aac:	9b04      	ldr	r3, [sp, #16]
 8007aae:	4403      	add	r3, r0
 8007ab0:	9304      	str	r3, [sp, #16]
 8007ab2:	9b05      	ldr	r3, [sp, #20]
 8007ab4:	4403      	add	r3, r0
 8007ab6:	4405      	add	r5, r0
 8007ab8:	9305      	str	r3, [sp, #20]
 8007aba:	9b04      	ldr	r3, [sp, #16]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	dd07      	ble.n	8007ad0 <_dtoa_r+0x818>
 8007ac0:	ee18 1a10 	vmov	r1, s16
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f000 fc14 	bl	80082f4 <__lshift>
 8007acc:	ee08 0a10 	vmov	s16, r0
 8007ad0:	9b05      	ldr	r3, [sp, #20]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	dd05      	ble.n	8007ae2 <_dtoa_r+0x82a>
 8007ad6:	4631      	mov	r1, r6
 8007ad8:	461a      	mov	r2, r3
 8007ada:	4620      	mov	r0, r4
 8007adc:	f000 fc0a 	bl	80082f4 <__lshift>
 8007ae0:	4606      	mov	r6, r0
 8007ae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d06e      	beq.n	8007bc6 <_dtoa_r+0x90e>
 8007ae8:	ee18 0a10 	vmov	r0, s16
 8007aec:	4631      	mov	r1, r6
 8007aee:	f000 fc71 	bl	80083d4 <__mcmp>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	da67      	bge.n	8007bc6 <_dtoa_r+0x90e>
 8007af6:	9b00      	ldr	r3, [sp, #0]
 8007af8:	3b01      	subs	r3, #1
 8007afa:	ee18 1a10 	vmov	r1, s16
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	220a      	movs	r2, #10
 8007b02:	2300      	movs	r3, #0
 8007b04:	4620      	mov	r0, r4
 8007b06:	f000 fa45 	bl	8007f94 <__multadd>
 8007b0a:	9b08      	ldr	r3, [sp, #32]
 8007b0c:	ee08 0a10 	vmov	s16, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f000 81b1 	beq.w	8007e78 <_dtoa_r+0xbc0>
 8007b16:	2300      	movs	r3, #0
 8007b18:	4639      	mov	r1, r7
 8007b1a:	220a      	movs	r2, #10
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	f000 fa39 	bl	8007f94 <__multadd>
 8007b22:	9b02      	ldr	r3, [sp, #8]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	4607      	mov	r7, r0
 8007b28:	f300 808e 	bgt.w	8007c48 <_dtoa_r+0x990>
 8007b2c:	9b06      	ldr	r3, [sp, #24]
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	dc51      	bgt.n	8007bd6 <_dtoa_r+0x91e>
 8007b32:	e089      	b.n	8007c48 <_dtoa_r+0x990>
 8007b34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007b3a:	e74b      	b.n	80079d4 <_dtoa_r+0x71c>
 8007b3c:	9b03      	ldr	r3, [sp, #12]
 8007b3e:	1e5e      	subs	r6, r3, #1
 8007b40:	9b07      	ldr	r3, [sp, #28]
 8007b42:	42b3      	cmp	r3, r6
 8007b44:	bfbf      	itttt	lt
 8007b46:	9b07      	ldrlt	r3, [sp, #28]
 8007b48:	9607      	strlt	r6, [sp, #28]
 8007b4a:	1af2      	sublt	r2, r6, r3
 8007b4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007b4e:	bfb6      	itet	lt
 8007b50:	189b      	addlt	r3, r3, r2
 8007b52:	1b9e      	subge	r6, r3, r6
 8007b54:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007b56:	9b03      	ldr	r3, [sp, #12]
 8007b58:	bfb8      	it	lt
 8007b5a:	2600      	movlt	r6, #0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	bfb7      	itett	lt
 8007b60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007b64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007b68:	1a9d      	sublt	r5, r3, r2
 8007b6a:	2300      	movlt	r3, #0
 8007b6c:	e734      	b.n	80079d8 <_dtoa_r+0x720>
 8007b6e:	9e07      	ldr	r6, [sp, #28]
 8007b70:	9d04      	ldr	r5, [sp, #16]
 8007b72:	9f08      	ldr	r7, [sp, #32]
 8007b74:	e73b      	b.n	80079ee <_dtoa_r+0x736>
 8007b76:	9a07      	ldr	r2, [sp, #28]
 8007b78:	e767      	b.n	8007a4a <_dtoa_r+0x792>
 8007b7a:	9b06      	ldr	r3, [sp, #24]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	dc18      	bgt.n	8007bb2 <_dtoa_r+0x8fa>
 8007b80:	f1ba 0f00 	cmp.w	sl, #0
 8007b84:	d115      	bne.n	8007bb2 <_dtoa_r+0x8fa>
 8007b86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b8a:	b993      	cbnz	r3, 8007bb2 <_dtoa_r+0x8fa>
 8007b8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007b90:	0d1b      	lsrs	r3, r3, #20
 8007b92:	051b      	lsls	r3, r3, #20
 8007b94:	b183      	cbz	r3, 8007bb8 <_dtoa_r+0x900>
 8007b96:	9b04      	ldr	r3, [sp, #16]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	9304      	str	r3, [sp, #16]
 8007b9c:	9b05      	ldr	r3, [sp, #20]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	9305      	str	r3, [sp, #20]
 8007ba2:	f04f 0801 	mov.w	r8, #1
 8007ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f47f af6a 	bne.w	8007a82 <_dtoa_r+0x7ca>
 8007bae:	2001      	movs	r0, #1
 8007bb0:	e76f      	b.n	8007a92 <_dtoa_r+0x7da>
 8007bb2:	f04f 0800 	mov.w	r8, #0
 8007bb6:	e7f6      	b.n	8007ba6 <_dtoa_r+0x8ee>
 8007bb8:	4698      	mov	r8, r3
 8007bba:	e7f4      	b.n	8007ba6 <_dtoa_r+0x8ee>
 8007bbc:	f43f af7d 	beq.w	8007aba <_dtoa_r+0x802>
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	301c      	adds	r0, #28
 8007bc4:	e772      	b.n	8007aac <_dtoa_r+0x7f4>
 8007bc6:	9b03      	ldr	r3, [sp, #12]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	dc37      	bgt.n	8007c3c <_dtoa_r+0x984>
 8007bcc:	9b06      	ldr	r3, [sp, #24]
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	dd34      	ble.n	8007c3c <_dtoa_r+0x984>
 8007bd2:	9b03      	ldr	r3, [sp, #12]
 8007bd4:	9302      	str	r3, [sp, #8]
 8007bd6:	9b02      	ldr	r3, [sp, #8]
 8007bd8:	b96b      	cbnz	r3, 8007bf6 <_dtoa_r+0x93e>
 8007bda:	4631      	mov	r1, r6
 8007bdc:	2205      	movs	r2, #5
 8007bde:	4620      	mov	r0, r4
 8007be0:	f000 f9d8 	bl	8007f94 <__multadd>
 8007be4:	4601      	mov	r1, r0
 8007be6:	4606      	mov	r6, r0
 8007be8:	ee18 0a10 	vmov	r0, s16
 8007bec:	f000 fbf2 	bl	80083d4 <__mcmp>
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	f73f adbb 	bgt.w	800776c <_dtoa_r+0x4b4>
 8007bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf8:	9d01      	ldr	r5, [sp, #4]
 8007bfa:	43db      	mvns	r3, r3
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	f04f 0800 	mov.w	r8, #0
 8007c02:	4631      	mov	r1, r6
 8007c04:	4620      	mov	r0, r4
 8007c06:	f000 f9a3 	bl	8007f50 <_Bfree>
 8007c0a:	2f00      	cmp	r7, #0
 8007c0c:	f43f aea4 	beq.w	8007958 <_dtoa_r+0x6a0>
 8007c10:	f1b8 0f00 	cmp.w	r8, #0
 8007c14:	d005      	beq.n	8007c22 <_dtoa_r+0x96a>
 8007c16:	45b8      	cmp	r8, r7
 8007c18:	d003      	beq.n	8007c22 <_dtoa_r+0x96a>
 8007c1a:	4641      	mov	r1, r8
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f000 f997 	bl	8007f50 <_Bfree>
 8007c22:	4639      	mov	r1, r7
 8007c24:	4620      	mov	r0, r4
 8007c26:	f000 f993 	bl	8007f50 <_Bfree>
 8007c2a:	e695      	b.n	8007958 <_dtoa_r+0x6a0>
 8007c2c:	2600      	movs	r6, #0
 8007c2e:	4637      	mov	r7, r6
 8007c30:	e7e1      	b.n	8007bf6 <_dtoa_r+0x93e>
 8007c32:	9700      	str	r7, [sp, #0]
 8007c34:	4637      	mov	r7, r6
 8007c36:	e599      	b.n	800776c <_dtoa_r+0x4b4>
 8007c38:	40240000 	.word	0x40240000
 8007c3c:	9b08      	ldr	r3, [sp, #32]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f000 80ca 	beq.w	8007dd8 <_dtoa_r+0xb20>
 8007c44:	9b03      	ldr	r3, [sp, #12]
 8007c46:	9302      	str	r3, [sp, #8]
 8007c48:	2d00      	cmp	r5, #0
 8007c4a:	dd05      	ble.n	8007c58 <_dtoa_r+0x9a0>
 8007c4c:	4639      	mov	r1, r7
 8007c4e:	462a      	mov	r2, r5
 8007c50:	4620      	mov	r0, r4
 8007c52:	f000 fb4f 	bl	80082f4 <__lshift>
 8007c56:	4607      	mov	r7, r0
 8007c58:	f1b8 0f00 	cmp.w	r8, #0
 8007c5c:	d05b      	beq.n	8007d16 <_dtoa_r+0xa5e>
 8007c5e:	6879      	ldr	r1, [r7, #4]
 8007c60:	4620      	mov	r0, r4
 8007c62:	f000 f935 	bl	8007ed0 <_Balloc>
 8007c66:	4605      	mov	r5, r0
 8007c68:	b928      	cbnz	r0, 8007c76 <_dtoa_r+0x9be>
 8007c6a:	4b87      	ldr	r3, [pc, #540]	; (8007e88 <_dtoa_r+0xbd0>)
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007c72:	f7ff bb3b 	b.w	80072ec <_dtoa_r+0x34>
 8007c76:	693a      	ldr	r2, [r7, #16]
 8007c78:	3202      	adds	r2, #2
 8007c7a:	0092      	lsls	r2, r2, #2
 8007c7c:	f107 010c 	add.w	r1, r7, #12
 8007c80:	300c      	adds	r0, #12
 8007c82:	f000 f90b 	bl	8007e9c <memcpy>
 8007c86:	2201      	movs	r2, #1
 8007c88:	4629      	mov	r1, r5
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f000 fb32 	bl	80082f4 <__lshift>
 8007c90:	9b01      	ldr	r3, [sp, #4]
 8007c92:	f103 0901 	add.w	r9, r3, #1
 8007c96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	9305      	str	r3, [sp, #20]
 8007c9e:	f00a 0301 	and.w	r3, sl, #1
 8007ca2:	46b8      	mov	r8, r7
 8007ca4:	9304      	str	r3, [sp, #16]
 8007ca6:	4607      	mov	r7, r0
 8007ca8:	4631      	mov	r1, r6
 8007caa:	ee18 0a10 	vmov	r0, s16
 8007cae:	f7ff fa78 	bl	80071a2 <quorem>
 8007cb2:	4641      	mov	r1, r8
 8007cb4:	9002      	str	r0, [sp, #8]
 8007cb6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007cba:	ee18 0a10 	vmov	r0, s16
 8007cbe:	f000 fb89 	bl	80083d4 <__mcmp>
 8007cc2:	463a      	mov	r2, r7
 8007cc4:	9003      	str	r0, [sp, #12]
 8007cc6:	4631      	mov	r1, r6
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f000 fb9f 	bl	800840c <__mdiff>
 8007cce:	68c2      	ldr	r2, [r0, #12]
 8007cd0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8007cd4:	4605      	mov	r5, r0
 8007cd6:	bb02      	cbnz	r2, 8007d1a <_dtoa_r+0xa62>
 8007cd8:	4601      	mov	r1, r0
 8007cda:	ee18 0a10 	vmov	r0, s16
 8007cde:	f000 fb79 	bl	80083d4 <__mcmp>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	4629      	mov	r1, r5
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	9207      	str	r2, [sp, #28]
 8007cea:	f000 f931 	bl	8007f50 <_Bfree>
 8007cee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007cf2:	ea43 0102 	orr.w	r1, r3, r2
 8007cf6:	9b04      	ldr	r3, [sp, #16]
 8007cf8:	430b      	orrs	r3, r1
 8007cfa:	464d      	mov	r5, r9
 8007cfc:	d10f      	bne.n	8007d1e <_dtoa_r+0xa66>
 8007cfe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007d02:	d02a      	beq.n	8007d5a <_dtoa_r+0xaa2>
 8007d04:	9b03      	ldr	r3, [sp, #12]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	dd02      	ble.n	8007d10 <_dtoa_r+0xa58>
 8007d0a:	9b02      	ldr	r3, [sp, #8]
 8007d0c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007d10:	f88b a000 	strb.w	sl, [fp]
 8007d14:	e775      	b.n	8007c02 <_dtoa_r+0x94a>
 8007d16:	4638      	mov	r0, r7
 8007d18:	e7ba      	b.n	8007c90 <_dtoa_r+0x9d8>
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	e7e2      	b.n	8007ce4 <_dtoa_r+0xa2c>
 8007d1e:	9b03      	ldr	r3, [sp, #12]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	db04      	blt.n	8007d2e <_dtoa_r+0xa76>
 8007d24:	9906      	ldr	r1, [sp, #24]
 8007d26:	430b      	orrs	r3, r1
 8007d28:	9904      	ldr	r1, [sp, #16]
 8007d2a:	430b      	orrs	r3, r1
 8007d2c:	d122      	bne.n	8007d74 <_dtoa_r+0xabc>
 8007d2e:	2a00      	cmp	r2, #0
 8007d30:	ddee      	ble.n	8007d10 <_dtoa_r+0xa58>
 8007d32:	ee18 1a10 	vmov	r1, s16
 8007d36:	2201      	movs	r2, #1
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f000 fadb 	bl	80082f4 <__lshift>
 8007d3e:	4631      	mov	r1, r6
 8007d40:	ee08 0a10 	vmov	s16, r0
 8007d44:	f000 fb46 	bl	80083d4 <__mcmp>
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	dc03      	bgt.n	8007d54 <_dtoa_r+0xa9c>
 8007d4c:	d1e0      	bne.n	8007d10 <_dtoa_r+0xa58>
 8007d4e:	f01a 0f01 	tst.w	sl, #1
 8007d52:	d0dd      	beq.n	8007d10 <_dtoa_r+0xa58>
 8007d54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007d58:	d1d7      	bne.n	8007d0a <_dtoa_r+0xa52>
 8007d5a:	2339      	movs	r3, #57	; 0x39
 8007d5c:	f88b 3000 	strb.w	r3, [fp]
 8007d60:	462b      	mov	r3, r5
 8007d62:	461d      	mov	r5, r3
 8007d64:	3b01      	subs	r3, #1
 8007d66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007d6a:	2a39      	cmp	r2, #57	; 0x39
 8007d6c:	d071      	beq.n	8007e52 <_dtoa_r+0xb9a>
 8007d6e:	3201      	adds	r2, #1
 8007d70:	701a      	strb	r2, [r3, #0]
 8007d72:	e746      	b.n	8007c02 <_dtoa_r+0x94a>
 8007d74:	2a00      	cmp	r2, #0
 8007d76:	dd07      	ble.n	8007d88 <_dtoa_r+0xad0>
 8007d78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007d7c:	d0ed      	beq.n	8007d5a <_dtoa_r+0xaa2>
 8007d7e:	f10a 0301 	add.w	r3, sl, #1
 8007d82:	f88b 3000 	strb.w	r3, [fp]
 8007d86:	e73c      	b.n	8007c02 <_dtoa_r+0x94a>
 8007d88:	9b05      	ldr	r3, [sp, #20]
 8007d8a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007d8e:	4599      	cmp	r9, r3
 8007d90:	d047      	beq.n	8007e22 <_dtoa_r+0xb6a>
 8007d92:	ee18 1a10 	vmov	r1, s16
 8007d96:	2300      	movs	r3, #0
 8007d98:	220a      	movs	r2, #10
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	f000 f8fa 	bl	8007f94 <__multadd>
 8007da0:	45b8      	cmp	r8, r7
 8007da2:	ee08 0a10 	vmov	s16, r0
 8007da6:	f04f 0300 	mov.w	r3, #0
 8007daa:	f04f 020a 	mov.w	r2, #10
 8007dae:	4641      	mov	r1, r8
 8007db0:	4620      	mov	r0, r4
 8007db2:	d106      	bne.n	8007dc2 <_dtoa_r+0xb0a>
 8007db4:	f000 f8ee 	bl	8007f94 <__multadd>
 8007db8:	4680      	mov	r8, r0
 8007dba:	4607      	mov	r7, r0
 8007dbc:	f109 0901 	add.w	r9, r9, #1
 8007dc0:	e772      	b.n	8007ca8 <_dtoa_r+0x9f0>
 8007dc2:	f000 f8e7 	bl	8007f94 <__multadd>
 8007dc6:	4639      	mov	r1, r7
 8007dc8:	4680      	mov	r8, r0
 8007dca:	2300      	movs	r3, #0
 8007dcc:	220a      	movs	r2, #10
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f000 f8e0 	bl	8007f94 <__multadd>
 8007dd4:	4607      	mov	r7, r0
 8007dd6:	e7f1      	b.n	8007dbc <_dtoa_r+0xb04>
 8007dd8:	9b03      	ldr	r3, [sp, #12]
 8007dda:	9302      	str	r3, [sp, #8]
 8007ddc:	9d01      	ldr	r5, [sp, #4]
 8007dde:	ee18 0a10 	vmov	r0, s16
 8007de2:	4631      	mov	r1, r6
 8007de4:	f7ff f9dd 	bl	80071a2 <quorem>
 8007de8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007dec:	9b01      	ldr	r3, [sp, #4]
 8007dee:	f805 ab01 	strb.w	sl, [r5], #1
 8007df2:	1aea      	subs	r2, r5, r3
 8007df4:	9b02      	ldr	r3, [sp, #8]
 8007df6:	4293      	cmp	r3, r2
 8007df8:	dd09      	ble.n	8007e0e <_dtoa_r+0xb56>
 8007dfa:	ee18 1a10 	vmov	r1, s16
 8007dfe:	2300      	movs	r3, #0
 8007e00:	220a      	movs	r2, #10
 8007e02:	4620      	mov	r0, r4
 8007e04:	f000 f8c6 	bl	8007f94 <__multadd>
 8007e08:	ee08 0a10 	vmov	s16, r0
 8007e0c:	e7e7      	b.n	8007dde <_dtoa_r+0xb26>
 8007e0e:	9b02      	ldr	r3, [sp, #8]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	bfc8      	it	gt
 8007e14:	461d      	movgt	r5, r3
 8007e16:	9b01      	ldr	r3, [sp, #4]
 8007e18:	bfd8      	it	le
 8007e1a:	2501      	movle	r5, #1
 8007e1c:	441d      	add	r5, r3
 8007e1e:	f04f 0800 	mov.w	r8, #0
 8007e22:	ee18 1a10 	vmov	r1, s16
 8007e26:	2201      	movs	r2, #1
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f000 fa63 	bl	80082f4 <__lshift>
 8007e2e:	4631      	mov	r1, r6
 8007e30:	ee08 0a10 	vmov	s16, r0
 8007e34:	f000 face 	bl	80083d4 <__mcmp>
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	dc91      	bgt.n	8007d60 <_dtoa_r+0xaa8>
 8007e3c:	d102      	bne.n	8007e44 <_dtoa_r+0xb8c>
 8007e3e:	f01a 0f01 	tst.w	sl, #1
 8007e42:	d18d      	bne.n	8007d60 <_dtoa_r+0xaa8>
 8007e44:	462b      	mov	r3, r5
 8007e46:	461d      	mov	r5, r3
 8007e48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e4c:	2a30      	cmp	r2, #48	; 0x30
 8007e4e:	d0fa      	beq.n	8007e46 <_dtoa_r+0xb8e>
 8007e50:	e6d7      	b.n	8007c02 <_dtoa_r+0x94a>
 8007e52:	9a01      	ldr	r2, [sp, #4]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d184      	bne.n	8007d62 <_dtoa_r+0xaaa>
 8007e58:	9b00      	ldr	r3, [sp, #0]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	2331      	movs	r3, #49	; 0x31
 8007e60:	7013      	strb	r3, [r2, #0]
 8007e62:	e6ce      	b.n	8007c02 <_dtoa_r+0x94a>
 8007e64:	4b09      	ldr	r3, [pc, #36]	; (8007e8c <_dtoa_r+0xbd4>)
 8007e66:	f7ff ba95 	b.w	8007394 <_dtoa_r+0xdc>
 8007e6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f47f aa6e 	bne.w	800734e <_dtoa_r+0x96>
 8007e72:	4b07      	ldr	r3, [pc, #28]	; (8007e90 <_dtoa_r+0xbd8>)
 8007e74:	f7ff ba8e 	b.w	8007394 <_dtoa_r+0xdc>
 8007e78:	9b02      	ldr	r3, [sp, #8]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	dcae      	bgt.n	8007ddc <_dtoa_r+0xb24>
 8007e7e:	9b06      	ldr	r3, [sp, #24]
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	f73f aea8 	bgt.w	8007bd6 <_dtoa_r+0x91e>
 8007e86:	e7a9      	b.n	8007ddc <_dtoa_r+0xb24>
 8007e88:	08009753 	.word	0x08009753
 8007e8c:	080096b0 	.word	0x080096b0
 8007e90:	080096d4 	.word	0x080096d4

08007e94 <_localeconv_r>:
 8007e94:	4800      	ldr	r0, [pc, #0]	; (8007e98 <_localeconv_r+0x4>)
 8007e96:	4770      	bx	lr
 8007e98:	20000174 	.word	0x20000174

08007e9c <memcpy>:
 8007e9c:	440a      	add	r2, r1
 8007e9e:	4291      	cmp	r1, r2
 8007ea0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007ea4:	d100      	bne.n	8007ea8 <memcpy+0xc>
 8007ea6:	4770      	bx	lr
 8007ea8:	b510      	push	{r4, lr}
 8007eaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007eae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007eb2:	4291      	cmp	r1, r2
 8007eb4:	d1f9      	bne.n	8007eaa <memcpy+0xe>
 8007eb6:	bd10      	pop	{r4, pc}

08007eb8 <__malloc_lock>:
 8007eb8:	4801      	ldr	r0, [pc, #4]	; (8007ec0 <__malloc_lock+0x8>)
 8007eba:	f000 bd30 	b.w	800891e <__retarget_lock_acquire_recursive>
 8007ebe:	bf00      	nop
 8007ec0:	2000094c 	.word	0x2000094c

08007ec4 <__malloc_unlock>:
 8007ec4:	4801      	ldr	r0, [pc, #4]	; (8007ecc <__malloc_unlock+0x8>)
 8007ec6:	f000 bd2b 	b.w	8008920 <__retarget_lock_release_recursive>
 8007eca:	bf00      	nop
 8007ecc:	2000094c 	.word	0x2000094c

08007ed0 <_Balloc>:
 8007ed0:	b570      	push	{r4, r5, r6, lr}
 8007ed2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	460d      	mov	r5, r1
 8007ed8:	b976      	cbnz	r6, 8007ef8 <_Balloc+0x28>
 8007eda:	2010      	movs	r0, #16
 8007edc:	f7fe fbbc 	bl	8006658 <malloc>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	6260      	str	r0, [r4, #36]	; 0x24
 8007ee4:	b920      	cbnz	r0, 8007ef0 <_Balloc+0x20>
 8007ee6:	4b18      	ldr	r3, [pc, #96]	; (8007f48 <_Balloc+0x78>)
 8007ee8:	4818      	ldr	r0, [pc, #96]	; (8007f4c <_Balloc+0x7c>)
 8007eea:	2166      	movs	r1, #102	; 0x66
 8007eec:	f000 fce6 	bl	80088bc <__assert_func>
 8007ef0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ef4:	6006      	str	r6, [r0, #0]
 8007ef6:	60c6      	str	r6, [r0, #12]
 8007ef8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007efa:	68f3      	ldr	r3, [r6, #12]
 8007efc:	b183      	cbz	r3, 8007f20 <_Balloc+0x50>
 8007efe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f06:	b9b8      	cbnz	r0, 8007f38 <_Balloc+0x68>
 8007f08:	2101      	movs	r1, #1
 8007f0a:	fa01 f605 	lsl.w	r6, r1, r5
 8007f0e:	1d72      	adds	r2, r6, #5
 8007f10:	0092      	lsls	r2, r2, #2
 8007f12:	4620      	mov	r0, r4
 8007f14:	f000 fb60 	bl	80085d8 <_calloc_r>
 8007f18:	b160      	cbz	r0, 8007f34 <_Balloc+0x64>
 8007f1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f1e:	e00e      	b.n	8007f3e <_Balloc+0x6e>
 8007f20:	2221      	movs	r2, #33	; 0x21
 8007f22:	2104      	movs	r1, #4
 8007f24:	4620      	mov	r0, r4
 8007f26:	f000 fb57 	bl	80085d8 <_calloc_r>
 8007f2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f2c:	60f0      	str	r0, [r6, #12]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1e4      	bne.n	8007efe <_Balloc+0x2e>
 8007f34:	2000      	movs	r0, #0
 8007f36:	bd70      	pop	{r4, r5, r6, pc}
 8007f38:	6802      	ldr	r2, [r0, #0]
 8007f3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f3e:	2300      	movs	r3, #0
 8007f40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f44:	e7f7      	b.n	8007f36 <_Balloc+0x66>
 8007f46:	bf00      	nop
 8007f48:	080096e1 	.word	0x080096e1
 8007f4c:	08009764 	.word	0x08009764

08007f50 <_Bfree>:
 8007f50:	b570      	push	{r4, r5, r6, lr}
 8007f52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f54:	4605      	mov	r5, r0
 8007f56:	460c      	mov	r4, r1
 8007f58:	b976      	cbnz	r6, 8007f78 <_Bfree+0x28>
 8007f5a:	2010      	movs	r0, #16
 8007f5c:	f7fe fb7c 	bl	8006658 <malloc>
 8007f60:	4602      	mov	r2, r0
 8007f62:	6268      	str	r0, [r5, #36]	; 0x24
 8007f64:	b920      	cbnz	r0, 8007f70 <_Bfree+0x20>
 8007f66:	4b09      	ldr	r3, [pc, #36]	; (8007f8c <_Bfree+0x3c>)
 8007f68:	4809      	ldr	r0, [pc, #36]	; (8007f90 <_Bfree+0x40>)
 8007f6a:	218a      	movs	r1, #138	; 0x8a
 8007f6c:	f000 fca6 	bl	80088bc <__assert_func>
 8007f70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f74:	6006      	str	r6, [r0, #0]
 8007f76:	60c6      	str	r6, [r0, #12]
 8007f78:	b13c      	cbz	r4, 8007f8a <_Bfree+0x3a>
 8007f7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f7c:	6862      	ldr	r2, [r4, #4]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f84:	6021      	str	r1, [r4, #0]
 8007f86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f8a:	bd70      	pop	{r4, r5, r6, pc}
 8007f8c:	080096e1 	.word	0x080096e1
 8007f90:	08009764 	.word	0x08009764

08007f94 <__multadd>:
 8007f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f98:	690d      	ldr	r5, [r1, #16]
 8007f9a:	4607      	mov	r7, r0
 8007f9c:	460c      	mov	r4, r1
 8007f9e:	461e      	mov	r6, r3
 8007fa0:	f101 0c14 	add.w	ip, r1, #20
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	f8dc 3000 	ldr.w	r3, [ip]
 8007faa:	b299      	uxth	r1, r3
 8007fac:	fb02 6101 	mla	r1, r2, r1, r6
 8007fb0:	0c1e      	lsrs	r6, r3, #16
 8007fb2:	0c0b      	lsrs	r3, r1, #16
 8007fb4:	fb02 3306 	mla	r3, r2, r6, r3
 8007fb8:	b289      	uxth	r1, r1
 8007fba:	3001      	adds	r0, #1
 8007fbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007fc0:	4285      	cmp	r5, r0
 8007fc2:	f84c 1b04 	str.w	r1, [ip], #4
 8007fc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007fca:	dcec      	bgt.n	8007fa6 <__multadd+0x12>
 8007fcc:	b30e      	cbz	r6, 8008012 <__multadd+0x7e>
 8007fce:	68a3      	ldr	r3, [r4, #8]
 8007fd0:	42ab      	cmp	r3, r5
 8007fd2:	dc19      	bgt.n	8008008 <__multadd+0x74>
 8007fd4:	6861      	ldr	r1, [r4, #4]
 8007fd6:	4638      	mov	r0, r7
 8007fd8:	3101      	adds	r1, #1
 8007fda:	f7ff ff79 	bl	8007ed0 <_Balloc>
 8007fde:	4680      	mov	r8, r0
 8007fe0:	b928      	cbnz	r0, 8007fee <__multadd+0x5a>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	4b0c      	ldr	r3, [pc, #48]	; (8008018 <__multadd+0x84>)
 8007fe6:	480d      	ldr	r0, [pc, #52]	; (800801c <__multadd+0x88>)
 8007fe8:	21b5      	movs	r1, #181	; 0xb5
 8007fea:	f000 fc67 	bl	80088bc <__assert_func>
 8007fee:	6922      	ldr	r2, [r4, #16]
 8007ff0:	3202      	adds	r2, #2
 8007ff2:	f104 010c 	add.w	r1, r4, #12
 8007ff6:	0092      	lsls	r2, r2, #2
 8007ff8:	300c      	adds	r0, #12
 8007ffa:	f7ff ff4f 	bl	8007e9c <memcpy>
 8007ffe:	4621      	mov	r1, r4
 8008000:	4638      	mov	r0, r7
 8008002:	f7ff ffa5 	bl	8007f50 <_Bfree>
 8008006:	4644      	mov	r4, r8
 8008008:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800800c:	3501      	adds	r5, #1
 800800e:	615e      	str	r6, [r3, #20]
 8008010:	6125      	str	r5, [r4, #16]
 8008012:	4620      	mov	r0, r4
 8008014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008018:	08009753 	.word	0x08009753
 800801c:	08009764 	.word	0x08009764

08008020 <__hi0bits>:
 8008020:	0c03      	lsrs	r3, r0, #16
 8008022:	041b      	lsls	r3, r3, #16
 8008024:	b9d3      	cbnz	r3, 800805c <__hi0bits+0x3c>
 8008026:	0400      	lsls	r0, r0, #16
 8008028:	2310      	movs	r3, #16
 800802a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800802e:	bf04      	itt	eq
 8008030:	0200      	lsleq	r0, r0, #8
 8008032:	3308      	addeq	r3, #8
 8008034:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008038:	bf04      	itt	eq
 800803a:	0100      	lsleq	r0, r0, #4
 800803c:	3304      	addeq	r3, #4
 800803e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008042:	bf04      	itt	eq
 8008044:	0080      	lsleq	r0, r0, #2
 8008046:	3302      	addeq	r3, #2
 8008048:	2800      	cmp	r0, #0
 800804a:	db05      	blt.n	8008058 <__hi0bits+0x38>
 800804c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008050:	f103 0301 	add.w	r3, r3, #1
 8008054:	bf08      	it	eq
 8008056:	2320      	moveq	r3, #32
 8008058:	4618      	mov	r0, r3
 800805a:	4770      	bx	lr
 800805c:	2300      	movs	r3, #0
 800805e:	e7e4      	b.n	800802a <__hi0bits+0xa>

08008060 <__lo0bits>:
 8008060:	6803      	ldr	r3, [r0, #0]
 8008062:	f013 0207 	ands.w	r2, r3, #7
 8008066:	4601      	mov	r1, r0
 8008068:	d00b      	beq.n	8008082 <__lo0bits+0x22>
 800806a:	07da      	lsls	r2, r3, #31
 800806c:	d423      	bmi.n	80080b6 <__lo0bits+0x56>
 800806e:	0798      	lsls	r0, r3, #30
 8008070:	bf49      	itett	mi
 8008072:	085b      	lsrmi	r3, r3, #1
 8008074:	089b      	lsrpl	r3, r3, #2
 8008076:	2001      	movmi	r0, #1
 8008078:	600b      	strmi	r3, [r1, #0]
 800807a:	bf5c      	itt	pl
 800807c:	600b      	strpl	r3, [r1, #0]
 800807e:	2002      	movpl	r0, #2
 8008080:	4770      	bx	lr
 8008082:	b298      	uxth	r0, r3
 8008084:	b9a8      	cbnz	r0, 80080b2 <__lo0bits+0x52>
 8008086:	0c1b      	lsrs	r3, r3, #16
 8008088:	2010      	movs	r0, #16
 800808a:	b2da      	uxtb	r2, r3
 800808c:	b90a      	cbnz	r2, 8008092 <__lo0bits+0x32>
 800808e:	3008      	adds	r0, #8
 8008090:	0a1b      	lsrs	r3, r3, #8
 8008092:	071a      	lsls	r2, r3, #28
 8008094:	bf04      	itt	eq
 8008096:	091b      	lsreq	r3, r3, #4
 8008098:	3004      	addeq	r0, #4
 800809a:	079a      	lsls	r2, r3, #30
 800809c:	bf04      	itt	eq
 800809e:	089b      	lsreq	r3, r3, #2
 80080a0:	3002      	addeq	r0, #2
 80080a2:	07da      	lsls	r2, r3, #31
 80080a4:	d403      	bmi.n	80080ae <__lo0bits+0x4e>
 80080a6:	085b      	lsrs	r3, r3, #1
 80080a8:	f100 0001 	add.w	r0, r0, #1
 80080ac:	d005      	beq.n	80080ba <__lo0bits+0x5a>
 80080ae:	600b      	str	r3, [r1, #0]
 80080b0:	4770      	bx	lr
 80080b2:	4610      	mov	r0, r2
 80080b4:	e7e9      	b.n	800808a <__lo0bits+0x2a>
 80080b6:	2000      	movs	r0, #0
 80080b8:	4770      	bx	lr
 80080ba:	2020      	movs	r0, #32
 80080bc:	4770      	bx	lr
	...

080080c0 <__i2b>:
 80080c0:	b510      	push	{r4, lr}
 80080c2:	460c      	mov	r4, r1
 80080c4:	2101      	movs	r1, #1
 80080c6:	f7ff ff03 	bl	8007ed0 <_Balloc>
 80080ca:	4602      	mov	r2, r0
 80080cc:	b928      	cbnz	r0, 80080da <__i2b+0x1a>
 80080ce:	4b05      	ldr	r3, [pc, #20]	; (80080e4 <__i2b+0x24>)
 80080d0:	4805      	ldr	r0, [pc, #20]	; (80080e8 <__i2b+0x28>)
 80080d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80080d6:	f000 fbf1 	bl	80088bc <__assert_func>
 80080da:	2301      	movs	r3, #1
 80080dc:	6144      	str	r4, [r0, #20]
 80080de:	6103      	str	r3, [r0, #16]
 80080e0:	bd10      	pop	{r4, pc}
 80080e2:	bf00      	nop
 80080e4:	08009753 	.word	0x08009753
 80080e8:	08009764 	.word	0x08009764

080080ec <__multiply>:
 80080ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f0:	4691      	mov	r9, r2
 80080f2:	690a      	ldr	r2, [r1, #16]
 80080f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	bfb8      	it	lt
 80080fc:	460b      	movlt	r3, r1
 80080fe:	460c      	mov	r4, r1
 8008100:	bfbc      	itt	lt
 8008102:	464c      	movlt	r4, r9
 8008104:	4699      	movlt	r9, r3
 8008106:	6927      	ldr	r7, [r4, #16]
 8008108:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800810c:	68a3      	ldr	r3, [r4, #8]
 800810e:	6861      	ldr	r1, [r4, #4]
 8008110:	eb07 060a 	add.w	r6, r7, sl
 8008114:	42b3      	cmp	r3, r6
 8008116:	b085      	sub	sp, #20
 8008118:	bfb8      	it	lt
 800811a:	3101      	addlt	r1, #1
 800811c:	f7ff fed8 	bl	8007ed0 <_Balloc>
 8008120:	b930      	cbnz	r0, 8008130 <__multiply+0x44>
 8008122:	4602      	mov	r2, r0
 8008124:	4b44      	ldr	r3, [pc, #272]	; (8008238 <__multiply+0x14c>)
 8008126:	4845      	ldr	r0, [pc, #276]	; (800823c <__multiply+0x150>)
 8008128:	f240 115d 	movw	r1, #349	; 0x15d
 800812c:	f000 fbc6 	bl	80088bc <__assert_func>
 8008130:	f100 0514 	add.w	r5, r0, #20
 8008134:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008138:	462b      	mov	r3, r5
 800813a:	2200      	movs	r2, #0
 800813c:	4543      	cmp	r3, r8
 800813e:	d321      	bcc.n	8008184 <__multiply+0x98>
 8008140:	f104 0314 	add.w	r3, r4, #20
 8008144:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008148:	f109 0314 	add.w	r3, r9, #20
 800814c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008150:	9202      	str	r2, [sp, #8]
 8008152:	1b3a      	subs	r2, r7, r4
 8008154:	3a15      	subs	r2, #21
 8008156:	f022 0203 	bic.w	r2, r2, #3
 800815a:	3204      	adds	r2, #4
 800815c:	f104 0115 	add.w	r1, r4, #21
 8008160:	428f      	cmp	r7, r1
 8008162:	bf38      	it	cc
 8008164:	2204      	movcc	r2, #4
 8008166:	9201      	str	r2, [sp, #4]
 8008168:	9a02      	ldr	r2, [sp, #8]
 800816a:	9303      	str	r3, [sp, #12]
 800816c:	429a      	cmp	r2, r3
 800816e:	d80c      	bhi.n	800818a <__multiply+0x9e>
 8008170:	2e00      	cmp	r6, #0
 8008172:	dd03      	ble.n	800817c <__multiply+0x90>
 8008174:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008178:	2b00      	cmp	r3, #0
 800817a:	d05a      	beq.n	8008232 <__multiply+0x146>
 800817c:	6106      	str	r6, [r0, #16]
 800817e:	b005      	add	sp, #20
 8008180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008184:	f843 2b04 	str.w	r2, [r3], #4
 8008188:	e7d8      	b.n	800813c <__multiply+0x50>
 800818a:	f8b3 a000 	ldrh.w	sl, [r3]
 800818e:	f1ba 0f00 	cmp.w	sl, #0
 8008192:	d024      	beq.n	80081de <__multiply+0xf2>
 8008194:	f104 0e14 	add.w	lr, r4, #20
 8008198:	46a9      	mov	r9, r5
 800819a:	f04f 0c00 	mov.w	ip, #0
 800819e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80081a2:	f8d9 1000 	ldr.w	r1, [r9]
 80081a6:	fa1f fb82 	uxth.w	fp, r2
 80081aa:	b289      	uxth	r1, r1
 80081ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80081b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80081b4:	f8d9 2000 	ldr.w	r2, [r9]
 80081b8:	4461      	add	r1, ip
 80081ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80081be:	fb0a c20b 	mla	r2, sl, fp, ip
 80081c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80081c6:	b289      	uxth	r1, r1
 80081c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80081cc:	4577      	cmp	r7, lr
 80081ce:	f849 1b04 	str.w	r1, [r9], #4
 80081d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80081d6:	d8e2      	bhi.n	800819e <__multiply+0xb2>
 80081d8:	9a01      	ldr	r2, [sp, #4]
 80081da:	f845 c002 	str.w	ip, [r5, r2]
 80081de:	9a03      	ldr	r2, [sp, #12]
 80081e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80081e4:	3304      	adds	r3, #4
 80081e6:	f1b9 0f00 	cmp.w	r9, #0
 80081ea:	d020      	beq.n	800822e <__multiply+0x142>
 80081ec:	6829      	ldr	r1, [r5, #0]
 80081ee:	f104 0c14 	add.w	ip, r4, #20
 80081f2:	46ae      	mov	lr, r5
 80081f4:	f04f 0a00 	mov.w	sl, #0
 80081f8:	f8bc b000 	ldrh.w	fp, [ip]
 80081fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008200:	fb09 220b 	mla	r2, r9, fp, r2
 8008204:	4492      	add	sl, r2
 8008206:	b289      	uxth	r1, r1
 8008208:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800820c:	f84e 1b04 	str.w	r1, [lr], #4
 8008210:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008214:	f8be 1000 	ldrh.w	r1, [lr]
 8008218:	0c12      	lsrs	r2, r2, #16
 800821a:	fb09 1102 	mla	r1, r9, r2, r1
 800821e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008222:	4567      	cmp	r7, ip
 8008224:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008228:	d8e6      	bhi.n	80081f8 <__multiply+0x10c>
 800822a:	9a01      	ldr	r2, [sp, #4]
 800822c:	50a9      	str	r1, [r5, r2]
 800822e:	3504      	adds	r5, #4
 8008230:	e79a      	b.n	8008168 <__multiply+0x7c>
 8008232:	3e01      	subs	r6, #1
 8008234:	e79c      	b.n	8008170 <__multiply+0x84>
 8008236:	bf00      	nop
 8008238:	08009753 	.word	0x08009753
 800823c:	08009764 	.word	0x08009764

08008240 <__pow5mult>:
 8008240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008244:	4615      	mov	r5, r2
 8008246:	f012 0203 	ands.w	r2, r2, #3
 800824a:	4606      	mov	r6, r0
 800824c:	460f      	mov	r7, r1
 800824e:	d007      	beq.n	8008260 <__pow5mult+0x20>
 8008250:	4c25      	ldr	r4, [pc, #148]	; (80082e8 <__pow5mult+0xa8>)
 8008252:	3a01      	subs	r2, #1
 8008254:	2300      	movs	r3, #0
 8008256:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800825a:	f7ff fe9b 	bl	8007f94 <__multadd>
 800825e:	4607      	mov	r7, r0
 8008260:	10ad      	asrs	r5, r5, #2
 8008262:	d03d      	beq.n	80082e0 <__pow5mult+0xa0>
 8008264:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008266:	b97c      	cbnz	r4, 8008288 <__pow5mult+0x48>
 8008268:	2010      	movs	r0, #16
 800826a:	f7fe f9f5 	bl	8006658 <malloc>
 800826e:	4602      	mov	r2, r0
 8008270:	6270      	str	r0, [r6, #36]	; 0x24
 8008272:	b928      	cbnz	r0, 8008280 <__pow5mult+0x40>
 8008274:	4b1d      	ldr	r3, [pc, #116]	; (80082ec <__pow5mult+0xac>)
 8008276:	481e      	ldr	r0, [pc, #120]	; (80082f0 <__pow5mult+0xb0>)
 8008278:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800827c:	f000 fb1e 	bl	80088bc <__assert_func>
 8008280:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008284:	6004      	str	r4, [r0, #0]
 8008286:	60c4      	str	r4, [r0, #12]
 8008288:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800828c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008290:	b94c      	cbnz	r4, 80082a6 <__pow5mult+0x66>
 8008292:	f240 2171 	movw	r1, #625	; 0x271
 8008296:	4630      	mov	r0, r6
 8008298:	f7ff ff12 	bl	80080c0 <__i2b>
 800829c:	2300      	movs	r3, #0
 800829e:	f8c8 0008 	str.w	r0, [r8, #8]
 80082a2:	4604      	mov	r4, r0
 80082a4:	6003      	str	r3, [r0, #0]
 80082a6:	f04f 0900 	mov.w	r9, #0
 80082aa:	07eb      	lsls	r3, r5, #31
 80082ac:	d50a      	bpl.n	80082c4 <__pow5mult+0x84>
 80082ae:	4639      	mov	r1, r7
 80082b0:	4622      	mov	r2, r4
 80082b2:	4630      	mov	r0, r6
 80082b4:	f7ff ff1a 	bl	80080ec <__multiply>
 80082b8:	4639      	mov	r1, r7
 80082ba:	4680      	mov	r8, r0
 80082bc:	4630      	mov	r0, r6
 80082be:	f7ff fe47 	bl	8007f50 <_Bfree>
 80082c2:	4647      	mov	r7, r8
 80082c4:	106d      	asrs	r5, r5, #1
 80082c6:	d00b      	beq.n	80082e0 <__pow5mult+0xa0>
 80082c8:	6820      	ldr	r0, [r4, #0]
 80082ca:	b938      	cbnz	r0, 80082dc <__pow5mult+0x9c>
 80082cc:	4622      	mov	r2, r4
 80082ce:	4621      	mov	r1, r4
 80082d0:	4630      	mov	r0, r6
 80082d2:	f7ff ff0b 	bl	80080ec <__multiply>
 80082d6:	6020      	str	r0, [r4, #0]
 80082d8:	f8c0 9000 	str.w	r9, [r0]
 80082dc:	4604      	mov	r4, r0
 80082de:	e7e4      	b.n	80082aa <__pow5mult+0x6a>
 80082e0:	4638      	mov	r0, r7
 80082e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082e6:	bf00      	nop
 80082e8:	080098b0 	.word	0x080098b0
 80082ec:	080096e1 	.word	0x080096e1
 80082f0:	08009764 	.word	0x08009764

080082f4 <__lshift>:
 80082f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082f8:	460c      	mov	r4, r1
 80082fa:	6849      	ldr	r1, [r1, #4]
 80082fc:	6923      	ldr	r3, [r4, #16]
 80082fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008302:	68a3      	ldr	r3, [r4, #8]
 8008304:	4607      	mov	r7, r0
 8008306:	4691      	mov	r9, r2
 8008308:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800830c:	f108 0601 	add.w	r6, r8, #1
 8008310:	42b3      	cmp	r3, r6
 8008312:	db0b      	blt.n	800832c <__lshift+0x38>
 8008314:	4638      	mov	r0, r7
 8008316:	f7ff fddb 	bl	8007ed0 <_Balloc>
 800831a:	4605      	mov	r5, r0
 800831c:	b948      	cbnz	r0, 8008332 <__lshift+0x3e>
 800831e:	4602      	mov	r2, r0
 8008320:	4b2a      	ldr	r3, [pc, #168]	; (80083cc <__lshift+0xd8>)
 8008322:	482b      	ldr	r0, [pc, #172]	; (80083d0 <__lshift+0xdc>)
 8008324:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008328:	f000 fac8 	bl	80088bc <__assert_func>
 800832c:	3101      	adds	r1, #1
 800832e:	005b      	lsls	r3, r3, #1
 8008330:	e7ee      	b.n	8008310 <__lshift+0x1c>
 8008332:	2300      	movs	r3, #0
 8008334:	f100 0114 	add.w	r1, r0, #20
 8008338:	f100 0210 	add.w	r2, r0, #16
 800833c:	4618      	mov	r0, r3
 800833e:	4553      	cmp	r3, sl
 8008340:	db37      	blt.n	80083b2 <__lshift+0xbe>
 8008342:	6920      	ldr	r0, [r4, #16]
 8008344:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008348:	f104 0314 	add.w	r3, r4, #20
 800834c:	f019 091f 	ands.w	r9, r9, #31
 8008350:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008354:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008358:	d02f      	beq.n	80083ba <__lshift+0xc6>
 800835a:	f1c9 0e20 	rsb	lr, r9, #32
 800835e:	468a      	mov	sl, r1
 8008360:	f04f 0c00 	mov.w	ip, #0
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	fa02 f209 	lsl.w	r2, r2, r9
 800836a:	ea42 020c 	orr.w	r2, r2, ip
 800836e:	f84a 2b04 	str.w	r2, [sl], #4
 8008372:	f853 2b04 	ldr.w	r2, [r3], #4
 8008376:	4298      	cmp	r0, r3
 8008378:	fa22 fc0e 	lsr.w	ip, r2, lr
 800837c:	d8f2      	bhi.n	8008364 <__lshift+0x70>
 800837e:	1b03      	subs	r3, r0, r4
 8008380:	3b15      	subs	r3, #21
 8008382:	f023 0303 	bic.w	r3, r3, #3
 8008386:	3304      	adds	r3, #4
 8008388:	f104 0215 	add.w	r2, r4, #21
 800838c:	4290      	cmp	r0, r2
 800838e:	bf38      	it	cc
 8008390:	2304      	movcc	r3, #4
 8008392:	f841 c003 	str.w	ip, [r1, r3]
 8008396:	f1bc 0f00 	cmp.w	ip, #0
 800839a:	d001      	beq.n	80083a0 <__lshift+0xac>
 800839c:	f108 0602 	add.w	r6, r8, #2
 80083a0:	3e01      	subs	r6, #1
 80083a2:	4638      	mov	r0, r7
 80083a4:	612e      	str	r6, [r5, #16]
 80083a6:	4621      	mov	r1, r4
 80083a8:	f7ff fdd2 	bl	8007f50 <_Bfree>
 80083ac:	4628      	mov	r0, r5
 80083ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80083b6:	3301      	adds	r3, #1
 80083b8:	e7c1      	b.n	800833e <__lshift+0x4a>
 80083ba:	3904      	subs	r1, #4
 80083bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80083c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80083c4:	4298      	cmp	r0, r3
 80083c6:	d8f9      	bhi.n	80083bc <__lshift+0xc8>
 80083c8:	e7ea      	b.n	80083a0 <__lshift+0xac>
 80083ca:	bf00      	nop
 80083cc:	08009753 	.word	0x08009753
 80083d0:	08009764 	.word	0x08009764

080083d4 <__mcmp>:
 80083d4:	b530      	push	{r4, r5, lr}
 80083d6:	6902      	ldr	r2, [r0, #16]
 80083d8:	690c      	ldr	r4, [r1, #16]
 80083da:	1b12      	subs	r2, r2, r4
 80083dc:	d10e      	bne.n	80083fc <__mcmp+0x28>
 80083de:	f100 0314 	add.w	r3, r0, #20
 80083e2:	3114      	adds	r1, #20
 80083e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80083e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80083ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80083f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80083f4:	42a5      	cmp	r5, r4
 80083f6:	d003      	beq.n	8008400 <__mcmp+0x2c>
 80083f8:	d305      	bcc.n	8008406 <__mcmp+0x32>
 80083fa:	2201      	movs	r2, #1
 80083fc:	4610      	mov	r0, r2
 80083fe:	bd30      	pop	{r4, r5, pc}
 8008400:	4283      	cmp	r3, r0
 8008402:	d3f3      	bcc.n	80083ec <__mcmp+0x18>
 8008404:	e7fa      	b.n	80083fc <__mcmp+0x28>
 8008406:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800840a:	e7f7      	b.n	80083fc <__mcmp+0x28>

0800840c <__mdiff>:
 800840c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008410:	460c      	mov	r4, r1
 8008412:	4606      	mov	r6, r0
 8008414:	4611      	mov	r1, r2
 8008416:	4620      	mov	r0, r4
 8008418:	4690      	mov	r8, r2
 800841a:	f7ff ffdb 	bl	80083d4 <__mcmp>
 800841e:	1e05      	subs	r5, r0, #0
 8008420:	d110      	bne.n	8008444 <__mdiff+0x38>
 8008422:	4629      	mov	r1, r5
 8008424:	4630      	mov	r0, r6
 8008426:	f7ff fd53 	bl	8007ed0 <_Balloc>
 800842a:	b930      	cbnz	r0, 800843a <__mdiff+0x2e>
 800842c:	4b3a      	ldr	r3, [pc, #232]	; (8008518 <__mdiff+0x10c>)
 800842e:	4602      	mov	r2, r0
 8008430:	f240 2132 	movw	r1, #562	; 0x232
 8008434:	4839      	ldr	r0, [pc, #228]	; (800851c <__mdiff+0x110>)
 8008436:	f000 fa41 	bl	80088bc <__assert_func>
 800843a:	2301      	movs	r3, #1
 800843c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008440:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008444:	bfa4      	itt	ge
 8008446:	4643      	movge	r3, r8
 8008448:	46a0      	movge	r8, r4
 800844a:	4630      	mov	r0, r6
 800844c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008450:	bfa6      	itte	ge
 8008452:	461c      	movge	r4, r3
 8008454:	2500      	movge	r5, #0
 8008456:	2501      	movlt	r5, #1
 8008458:	f7ff fd3a 	bl	8007ed0 <_Balloc>
 800845c:	b920      	cbnz	r0, 8008468 <__mdiff+0x5c>
 800845e:	4b2e      	ldr	r3, [pc, #184]	; (8008518 <__mdiff+0x10c>)
 8008460:	4602      	mov	r2, r0
 8008462:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008466:	e7e5      	b.n	8008434 <__mdiff+0x28>
 8008468:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800846c:	6926      	ldr	r6, [r4, #16]
 800846e:	60c5      	str	r5, [r0, #12]
 8008470:	f104 0914 	add.w	r9, r4, #20
 8008474:	f108 0514 	add.w	r5, r8, #20
 8008478:	f100 0e14 	add.w	lr, r0, #20
 800847c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008480:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008484:	f108 0210 	add.w	r2, r8, #16
 8008488:	46f2      	mov	sl, lr
 800848a:	2100      	movs	r1, #0
 800848c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008490:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008494:	fa1f f883 	uxth.w	r8, r3
 8008498:	fa11 f18b 	uxtah	r1, r1, fp
 800849c:	0c1b      	lsrs	r3, r3, #16
 800849e:	eba1 0808 	sub.w	r8, r1, r8
 80084a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80084a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80084aa:	fa1f f888 	uxth.w	r8, r8
 80084ae:	1419      	asrs	r1, r3, #16
 80084b0:	454e      	cmp	r6, r9
 80084b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80084b6:	f84a 3b04 	str.w	r3, [sl], #4
 80084ba:	d8e7      	bhi.n	800848c <__mdiff+0x80>
 80084bc:	1b33      	subs	r3, r6, r4
 80084be:	3b15      	subs	r3, #21
 80084c0:	f023 0303 	bic.w	r3, r3, #3
 80084c4:	3304      	adds	r3, #4
 80084c6:	3415      	adds	r4, #21
 80084c8:	42a6      	cmp	r6, r4
 80084ca:	bf38      	it	cc
 80084cc:	2304      	movcc	r3, #4
 80084ce:	441d      	add	r5, r3
 80084d0:	4473      	add	r3, lr
 80084d2:	469e      	mov	lr, r3
 80084d4:	462e      	mov	r6, r5
 80084d6:	4566      	cmp	r6, ip
 80084d8:	d30e      	bcc.n	80084f8 <__mdiff+0xec>
 80084da:	f10c 0203 	add.w	r2, ip, #3
 80084de:	1b52      	subs	r2, r2, r5
 80084e0:	f022 0203 	bic.w	r2, r2, #3
 80084e4:	3d03      	subs	r5, #3
 80084e6:	45ac      	cmp	ip, r5
 80084e8:	bf38      	it	cc
 80084ea:	2200      	movcc	r2, #0
 80084ec:	441a      	add	r2, r3
 80084ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80084f2:	b17b      	cbz	r3, 8008514 <__mdiff+0x108>
 80084f4:	6107      	str	r7, [r0, #16]
 80084f6:	e7a3      	b.n	8008440 <__mdiff+0x34>
 80084f8:	f856 8b04 	ldr.w	r8, [r6], #4
 80084fc:	fa11 f288 	uxtah	r2, r1, r8
 8008500:	1414      	asrs	r4, r2, #16
 8008502:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008506:	b292      	uxth	r2, r2
 8008508:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800850c:	f84e 2b04 	str.w	r2, [lr], #4
 8008510:	1421      	asrs	r1, r4, #16
 8008512:	e7e0      	b.n	80084d6 <__mdiff+0xca>
 8008514:	3f01      	subs	r7, #1
 8008516:	e7ea      	b.n	80084ee <__mdiff+0xe2>
 8008518:	08009753 	.word	0x08009753
 800851c:	08009764 	.word	0x08009764

08008520 <__d2b>:
 8008520:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008524:	4689      	mov	r9, r1
 8008526:	2101      	movs	r1, #1
 8008528:	ec57 6b10 	vmov	r6, r7, d0
 800852c:	4690      	mov	r8, r2
 800852e:	f7ff fccf 	bl	8007ed0 <_Balloc>
 8008532:	4604      	mov	r4, r0
 8008534:	b930      	cbnz	r0, 8008544 <__d2b+0x24>
 8008536:	4602      	mov	r2, r0
 8008538:	4b25      	ldr	r3, [pc, #148]	; (80085d0 <__d2b+0xb0>)
 800853a:	4826      	ldr	r0, [pc, #152]	; (80085d4 <__d2b+0xb4>)
 800853c:	f240 310a 	movw	r1, #778	; 0x30a
 8008540:	f000 f9bc 	bl	80088bc <__assert_func>
 8008544:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008548:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800854c:	bb35      	cbnz	r5, 800859c <__d2b+0x7c>
 800854e:	2e00      	cmp	r6, #0
 8008550:	9301      	str	r3, [sp, #4]
 8008552:	d028      	beq.n	80085a6 <__d2b+0x86>
 8008554:	4668      	mov	r0, sp
 8008556:	9600      	str	r6, [sp, #0]
 8008558:	f7ff fd82 	bl	8008060 <__lo0bits>
 800855c:	9900      	ldr	r1, [sp, #0]
 800855e:	b300      	cbz	r0, 80085a2 <__d2b+0x82>
 8008560:	9a01      	ldr	r2, [sp, #4]
 8008562:	f1c0 0320 	rsb	r3, r0, #32
 8008566:	fa02 f303 	lsl.w	r3, r2, r3
 800856a:	430b      	orrs	r3, r1
 800856c:	40c2      	lsrs	r2, r0
 800856e:	6163      	str	r3, [r4, #20]
 8008570:	9201      	str	r2, [sp, #4]
 8008572:	9b01      	ldr	r3, [sp, #4]
 8008574:	61a3      	str	r3, [r4, #24]
 8008576:	2b00      	cmp	r3, #0
 8008578:	bf14      	ite	ne
 800857a:	2202      	movne	r2, #2
 800857c:	2201      	moveq	r2, #1
 800857e:	6122      	str	r2, [r4, #16]
 8008580:	b1d5      	cbz	r5, 80085b8 <__d2b+0x98>
 8008582:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008586:	4405      	add	r5, r0
 8008588:	f8c9 5000 	str.w	r5, [r9]
 800858c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008590:	f8c8 0000 	str.w	r0, [r8]
 8008594:	4620      	mov	r0, r4
 8008596:	b003      	add	sp, #12
 8008598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800859c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085a0:	e7d5      	b.n	800854e <__d2b+0x2e>
 80085a2:	6161      	str	r1, [r4, #20]
 80085a4:	e7e5      	b.n	8008572 <__d2b+0x52>
 80085a6:	a801      	add	r0, sp, #4
 80085a8:	f7ff fd5a 	bl	8008060 <__lo0bits>
 80085ac:	9b01      	ldr	r3, [sp, #4]
 80085ae:	6163      	str	r3, [r4, #20]
 80085b0:	2201      	movs	r2, #1
 80085b2:	6122      	str	r2, [r4, #16]
 80085b4:	3020      	adds	r0, #32
 80085b6:	e7e3      	b.n	8008580 <__d2b+0x60>
 80085b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80085bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80085c0:	f8c9 0000 	str.w	r0, [r9]
 80085c4:	6918      	ldr	r0, [r3, #16]
 80085c6:	f7ff fd2b 	bl	8008020 <__hi0bits>
 80085ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80085ce:	e7df      	b.n	8008590 <__d2b+0x70>
 80085d0:	08009753 	.word	0x08009753
 80085d4:	08009764 	.word	0x08009764

080085d8 <_calloc_r>:
 80085d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085da:	fba1 2402 	umull	r2, r4, r1, r2
 80085de:	b94c      	cbnz	r4, 80085f4 <_calloc_r+0x1c>
 80085e0:	4611      	mov	r1, r2
 80085e2:	9201      	str	r2, [sp, #4]
 80085e4:	f7fe f8bc 	bl	8006760 <_malloc_r>
 80085e8:	9a01      	ldr	r2, [sp, #4]
 80085ea:	4605      	mov	r5, r0
 80085ec:	b930      	cbnz	r0, 80085fc <_calloc_r+0x24>
 80085ee:	4628      	mov	r0, r5
 80085f0:	b003      	add	sp, #12
 80085f2:	bd30      	pop	{r4, r5, pc}
 80085f4:	220c      	movs	r2, #12
 80085f6:	6002      	str	r2, [r0, #0]
 80085f8:	2500      	movs	r5, #0
 80085fa:	e7f8      	b.n	80085ee <_calloc_r+0x16>
 80085fc:	4621      	mov	r1, r4
 80085fe:	f7fe f83b 	bl	8006678 <memset>
 8008602:	e7f4      	b.n	80085ee <_calloc_r+0x16>

08008604 <__ssputs_r>:
 8008604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008608:	688e      	ldr	r6, [r1, #8]
 800860a:	429e      	cmp	r6, r3
 800860c:	4682      	mov	sl, r0
 800860e:	460c      	mov	r4, r1
 8008610:	4690      	mov	r8, r2
 8008612:	461f      	mov	r7, r3
 8008614:	d838      	bhi.n	8008688 <__ssputs_r+0x84>
 8008616:	898a      	ldrh	r2, [r1, #12]
 8008618:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800861c:	d032      	beq.n	8008684 <__ssputs_r+0x80>
 800861e:	6825      	ldr	r5, [r4, #0]
 8008620:	6909      	ldr	r1, [r1, #16]
 8008622:	eba5 0901 	sub.w	r9, r5, r1
 8008626:	6965      	ldr	r5, [r4, #20]
 8008628:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800862c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008630:	3301      	adds	r3, #1
 8008632:	444b      	add	r3, r9
 8008634:	106d      	asrs	r5, r5, #1
 8008636:	429d      	cmp	r5, r3
 8008638:	bf38      	it	cc
 800863a:	461d      	movcc	r5, r3
 800863c:	0553      	lsls	r3, r2, #21
 800863e:	d531      	bpl.n	80086a4 <__ssputs_r+0xa0>
 8008640:	4629      	mov	r1, r5
 8008642:	f7fe f88d 	bl	8006760 <_malloc_r>
 8008646:	4606      	mov	r6, r0
 8008648:	b950      	cbnz	r0, 8008660 <__ssputs_r+0x5c>
 800864a:	230c      	movs	r3, #12
 800864c:	f8ca 3000 	str.w	r3, [sl]
 8008650:	89a3      	ldrh	r3, [r4, #12]
 8008652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008656:	81a3      	strh	r3, [r4, #12]
 8008658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800865c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008660:	6921      	ldr	r1, [r4, #16]
 8008662:	464a      	mov	r2, r9
 8008664:	f7ff fc1a 	bl	8007e9c <memcpy>
 8008668:	89a3      	ldrh	r3, [r4, #12]
 800866a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800866e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008672:	81a3      	strh	r3, [r4, #12]
 8008674:	6126      	str	r6, [r4, #16]
 8008676:	6165      	str	r5, [r4, #20]
 8008678:	444e      	add	r6, r9
 800867a:	eba5 0509 	sub.w	r5, r5, r9
 800867e:	6026      	str	r6, [r4, #0]
 8008680:	60a5      	str	r5, [r4, #8]
 8008682:	463e      	mov	r6, r7
 8008684:	42be      	cmp	r6, r7
 8008686:	d900      	bls.n	800868a <__ssputs_r+0x86>
 8008688:	463e      	mov	r6, r7
 800868a:	6820      	ldr	r0, [r4, #0]
 800868c:	4632      	mov	r2, r6
 800868e:	4641      	mov	r1, r8
 8008690:	f000 f959 	bl	8008946 <memmove>
 8008694:	68a3      	ldr	r3, [r4, #8]
 8008696:	1b9b      	subs	r3, r3, r6
 8008698:	60a3      	str	r3, [r4, #8]
 800869a:	6823      	ldr	r3, [r4, #0]
 800869c:	4433      	add	r3, r6
 800869e:	6023      	str	r3, [r4, #0]
 80086a0:	2000      	movs	r0, #0
 80086a2:	e7db      	b.n	800865c <__ssputs_r+0x58>
 80086a4:	462a      	mov	r2, r5
 80086a6:	f000 f968 	bl	800897a <_realloc_r>
 80086aa:	4606      	mov	r6, r0
 80086ac:	2800      	cmp	r0, #0
 80086ae:	d1e1      	bne.n	8008674 <__ssputs_r+0x70>
 80086b0:	6921      	ldr	r1, [r4, #16]
 80086b2:	4650      	mov	r0, sl
 80086b4:	f7fd ffe8 	bl	8006688 <_free_r>
 80086b8:	e7c7      	b.n	800864a <__ssputs_r+0x46>
	...

080086bc <_svfiprintf_r>:
 80086bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c0:	4698      	mov	r8, r3
 80086c2:	898b      	ldrh	r3, [r1, #12]
 80086c4:	061b      	lsls	r3, r3, #24
 80086c6:	b09d      	sub	sp, #116	; 0x74
 80086c8:	4607      	mov	r7, r0
 80086ca:	460d      	mov	r5, r1
 80086cc:	4614      	mov	r4, r2
 80086ce:	d50e      	bpl.n	80086ee <_svfiprintf_r+0x32>
 80086d0:	690b      	ldr	r3, [r1, #16]
 80086d2:	b963      	cbnz	r3, 80086ee <_svfiprintf_r+0x32>
 80086d4:	2140      	movs	r1, #64	; 0x40
 80086d6:	f7fe f843 	bl	8006760 <_malloc_r>
 80086da:	6028      	str	r0, [r5, #0]
 80086dc:	6128      	str	r0, [r5, #16]
 80086de:	b920      	cbnz	r0, 80086ea <_svfiprintf_r+0x2e>
 80086e0:	230c      	movs	r3, #12
 80086e2:	603b      	str	r3, [r7, #0]
 80086e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086e8:	e0d1      	b.n	800888e <_svfiprintf_r+0x1d2>
 80086ea:	2340      	movs	r3, #64	; 0x40
 80086ec:	616b      	str	r3, [r5, #20]
 80086ee:	2300      	movs	r3, #0
 80086f0:	9309      	str	r3, [sp, #36]	; 0x24
 80086f2:	2320      	movs	r3, #32
 80086f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80086fc:	2330      	movs	r3, #48	; 0x30
 80086fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80088a8 <_svfiprintf_r+0x1ec>
 8008702:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008706:	f04f 0901 	mov.w	r9, #1
 800870a:	4623      	mov	r3, r4
 800870c:	469a      	mov	sl, r3
 800870e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008712:	b10a      	cbz	r2, 8008718 <_svfiprintf_r+0x5c>
 8008714:	2a25      	cmp	r2, #37	; 0x25
 8008716:	d1f9      	bne.n	800870c <_svfiprintf_r+0x50>
 8008718:	ebba 0b04 	subs.w	fp, sl, r4
 800871c:	d00b      	beq.n	8008736 <_svfiprintf_r+0x7a>
 800871e:	465b      	mov	r3, fp
 8008720:	4622      	mov	r2, r4
 8008722:	4629      	mov	r1, r5
 8008724:	4638      	mov	r0, r7
 8008726:	f7ff ff6d 	bl	8008604 <__ssputs_r>
 800872a:	3001      	adds	r0, #1
 800872c:	f000 80aa 	beq.w	8008884 <_svfiprintf_r+0x1c8>
 8008730:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008732:	445a      	add	r2, fp
 8008734:	9209      	str	r2, [sp, #36]	; 0x24
 8008736:	f89a 3000 	ldrb.w	r3, [sl]
 800873a:	2b00      	cmp	r3, #0
 800873c:	f000 80a2 	beq.w	8008884 <_svfiprintf_r+0x1c8>
 8008740:	2300      	movs	r3, #0
 8008742:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008746:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800874a:	f10a 0a01 	add.w	sl, sl, #1
 800874e:	9304      	str	r3, [sp, #16]
 8008750:	9307      	str	r3, [sp, #28]
 8008752:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008756:	931a      	str	r3, [sp, #104]	; 0x68
 8008758:	4654      	mov	r4, sl
 800875a:	2205      	movs	r2, #5
 800875c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008760:	4851      	ldr	r0, [pc, #324]	; (80088a8 <_svfiprintf_r+0x1ec>)
 8008762:	f7f7 fd5d 	bl	8000220 <memchr>
 8008766:	9a04      	ldr	r2, [sp, #16]
 8008768:	b9d8      	cbnz	r0, 80087a2 <_svfiprintf_r+0xe6>
 800876a:	06d0      	lsls	r0, r2, #27
 800876c:	bf44      	itt	mi
 800876e:	2320      	movmi	r3, #32
 8008770:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008774:	0711      	lsls	r1, r2, #28
 8008776:	bf44      	itt	mi
 8008778:	232b      	movmi	r3, #43	; 0x2b
 800877a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800877e:	f89a 3000 	ldrb.w	r3, [sl]
 8008782:	2b2a      	cmp	r3, #42	; 0x2a
 8008784:	d015      	beq.n	80087b2 <_svfiprintf_r+0xf6>
 8008786:	9a07      	ldr	r2, [sp, #28]
 8008788:	4654      	mov	r4, sl
 800878a:	2000      	movs	r0, #0
 800878c:	f04f 0c0a 	mov.w	ip, #10
 8008790:	4621      	mov	r1, r4
 8008792:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008796:	3b30      	subs	r3, #48	; 0x30
 8008798:	2b09      	cmp	r3, #9
 800879a:	d94e      	bls.n	800883a <_svfiprintf_r+0x17e>
 800879c:	b1b0      	cbz	r0, 80087cc <_svfiprintf_r+0x110>
 800879e:	9207      	str	r2, [sp, #28]
 80087a0:	e014      	b.n	80087cc <_svfiprintf_r+0x110>
 80087a2:	eba0 0308 	sub.w	r3, r0, r8
 80087a6:	fa09 f303 	lsl.w	r3, r9, r3
 80087aa:	4313      	orrs	r3, r2
 80087ac:	9304      	str	r3, [sp, #16]
 80087ae:	46a2      	mov	sl, r4
 80087b0:	e7d2      	b.n	8008758 <_svfiprintf_r+0x9c>
 80087b2:	9b03      	ldr	r3, [sp, #12]
 80087b4:	1d19      	adds	r1, r3, #4
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	9103      	str	r1, [sp, #12]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	bfbb      	ittet	lt
 80087be:	425b      	neglt	r3, r3
 80087c0:	f042 0202 	orrlt.w	r2, r2, #2
 80087c4:	9307      	strge	r3, [sp, #28]
 80087c6:	9307      	strlt	r3, [sp, #28]
 80087c8:	bfb8      	it	lt
 80087ca:	9204      	strlt	r2, [sp, #16]
 80087cc:	7823      	ldrb	r3, [r4, #0]
 80087ce:	2b2e      	cmp	r3, #46	; 0x2e
 80087d0:	d10c      	bne.n	80087ec <_svfiprintf_r+0x130>
 80087d2:	7863      	ldrb	r3, [r4, #1]
 80087d4:	2b2a      	cmp	r3, #42	; 0x2a
 80087d6:	d135      	bne.n	8008844 <_svfiprintf_r+0x188>
 80087d8:	9b03      	ldr	r3, [sp, #12]
 80087da:	1d1a      	adds	r2, r3, #4
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	9203      	str	r2, [sp, #12]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	bfb8      	it	lt
 80087e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80087e8:	3402      	adds	r4, #2
 80087ea:	9305      	str	r3, [sp, #20]
 80087ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80088b8 <_svfiprintf_r+0x1fc>
 80087f0:	7821      	ldrb	r1, [r4, #0]
 80087f2:	2203      	movs	r2, #3
 80087f4:	4650      	mov	r0, sl
 80087f6:	f7f7 fd13 	bl	8000220 <memchr>
 80087fa:	b140      	cbz	r0, 800880e <_svfiprintf_r+0x152>
 80087fc:	2340      	movs	r3, #64	; 0x40
 80087fe:	eba0 000a 	sub.w	r0, r0, sl
 8008802:	fa03 f000 	lsl.w	r0, r3, r0
 8008806:	9b04      	ldr	r3, [sp, #16]
 8008808:	4303      	orrs	r3, r0
 800880a:	3401      	adds	r4, #1
 800880c:	9304      	str	r3, [sp, #16]
 800880e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008812:	4826      	ldr	r0, [pc, #152]	; (80088ac <_svfiprintf_r+0x1f0>)
 8008814:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008818:	2206      	movs	r2, #6
 800881a:	f7f7 fd01 	bl	8000220 <memchr>
 800881e:	2800      	cmp	r0, #0
 8008820:	d038      	beq.n	8008894 <_svfiprintf_r+0x1d8>
 8008822:	4b23      	ldr	r3, [pc, #140]	; (80088b0 <_svfiprintf_r+0x1f4>)
 8008824:	bb1b      	cbnz	r3, 800886e <_svfiprintf_r+0x1b2>
 8008826:	9b03      	ldr	r3, [sp, #12]
 8008828:	3307      	adds	r3, #7
 800882a:	f023 0307 	bic.w	r3, r3, #7
 800882e:	3308      	adds	r3, #8
 8008830:	9303      	str	r3, [sp, #12]
 8008832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008834:	4433      	add	r3, r6
 8008836:	9309      	str	r3, [sp, #36]	; 0x24
 8008838:	e767      	b.n	800870a <_svfiprintf_r+0x4e>
 800883a:	fb0c 3202 	mla	r2, ip, r2, r3
 800883e:	460c      	mov	r4, r1
 8008840:	2001      	movs	r0, #1
 8008842:	e7a5      	b.n	8008790 <_svfiprintf_r+0xd4>
 8008844:	2300      	movs	r3, #0
 8008846:	3401      	adds	r4, #1
 8008848:	9305      	str	r3, [sp, #20]
 800884a:	4619      	mov	r1, r3
 800884c:	f04f 0c0a 	mov.w	ip, #10
 8008850:	4620      	mov	r0, r4
 8008852:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008856:	3a30      	subs	r2, #48	; 0x30
 8008858:	2a09      	cmp	r2, #9
 800885a:	d903      	bls.n	8008864 <_svfiprintf_r+0x1a8>
 800885c:	2b00      	cmp	r3, #0
 800885e:	d0c5      	beq.n	80087ec <_svfiprintf_r+0x130>
 8008860:	9105      	str	r1, [sp, #20]
 8008862:	e7c3      	b.n	80087ec <_svfiprintf_r+0x130>
 8008864:	fb0c 2101 	mla	r1, ip, r1, r2
 8008868:	4604      	mov	r4, r0
 800886a:	2301      	movs	r3, #1
 800886c:	e7f0      	b.n	8008850 <_svfiprintf_r+0x194>
 800886e:	ab03      	add	r3, sp, #12
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	462a      	mov	r2, r5
 8008874:	4b0f      	ldr	r3, [pc, #60]	; (80088b4 <_svfiprintf_r+0x1f8>)
 8008876:	a904      	add	r1, sp, #16
 8008878:	4638      	mov	r0, r7
 800887a:	f7fe f885 	bl	8006988 <_printf_float>
 800887e:	1c42      	adds	r2, r0, #1
 8008880:	4606      	mov	r6, r0
 8008882:	d1d6      	bne.n	8008832 <_svfiprintf_r+0x176>
 8008884:	89ab      	ldrh	r3, [r5, #12]
 8008886:	065b      	lsls	r3, r3, #25
 8008888:	f53f af2c 	bmi.w	80086e4 <_svfiprintf_r+0x28>
 800888c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800888e:	b01d      	add	sp, #116	; 0x74
 8008890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008894:	ab03      	add	r3, sp, #12
 8008896:	9300      	str	r3, [sp, #0]
 8008898:	462a      	mov	r2, r5
 800889a:	4b06      	ldr	r3, [pc, #24]	; (80088b4 <_svfiprintf_r+0x1f8>)
 800889c:	a904      	add	r1, sp, #16
 800889e:	4638      	mov	r0, r7
 80088a0:	f7fe fb16 	bl	8006ed0 <_printf_i>
 80088a4:	e7eb      	b.n	800887e <_svfiprintf_r+0x1c2>
 80088a6:	bf00      	nop
 80088a8:	080098bc 	.word	0x080098bc
 80088ac:	080098c6 	.word	0x080098c6
 80088b0:	08006989 	.word	0x08006989
 80088b4:	08008605 	.word	0x08008605
 80088b8:	080098c2 	.word	0x080098c2

080088bc <__assert_func>:
 80088bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088be:	4614      	mov	r4, r2
 80088c0:	461a      	mov	r2, r3
 80088c2:	4b09      	ldr	r3, [pc, #36]	; (80088e8 <__assert_func+0x2c>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4605      	mov	r5, r0
 80088c8:	68d8      	ldr	r0, [r3, #12]
 80088ca:	b14c      	cbz	r4, 80088e0 <__assert_func+0x24>
 80088cc:	4b07      	ldr	r3, [pc, #28]	; (80088ec <__assert_func+0x30>)
 80088ce:	9100      	str	r1, [sp, #0]
 80088d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088d4:	4906      	ldr	r1, [pc, #24]	; (80088f0 <__assert_func+0x34>)
 80088d6:	462b      	mov	r3, r5
 80088d8:	f000 f80e 	bl	80088f8 <fiprintf>
 80088dc:	f000 faa4 	bl	8008e28 <abort>
 80088e0:	4b04      	ldr	r3, [pc, #16]	; (80088f4 <__assert_func+0x38>)
 80088e2:	461c      	mov	r4, r3
 80088e4:	e7f3      	b.n	80088ce <__assert_func+0x12>
 80088e6:	bf00      	nop
 80088e8:	20000020 	.word	0x20000020
 80088ec:	080098cd 	.word	0x080098cd
 80088f0:	080098da 	.word	0x080098da
 80088f4:	08009908 	.word	0x08009908

080088f8 <fiprintf>:
 80088f8:	b40e      	push	{r1, r2, r3}
 80088fa:	b503      	push	{r0, r1, lr}
 80088fc:	4601      	mov	r1, r0
 80088fe:	ab03      	add	r3, sp, #12
 8008900:	4805      	ldr	r0, [pc, #20]	; (8008918 <fiprintf+0x20>)
 8008902:	f853 2b04 	ldr.w	r2, [r3], #4
 8008906:	6800      	ldr	r0, [r0, #0]
 8008908:	9301      	str	r3, [sp, #4]
 800890a:	f000 f88f 	bl	8008a2c <_vfiprintf_r>
 800890e:	b002      	add	sp, #8
 8008910:	f85d eb04 	ldr.w	lr, [sp], #4
 8008914:	b003      	add	sp, #12
 8008916:	4770      	bx	lr
 8008918:	20000020 	.word	0x20000020

0800891c <__retarget_lock_init_recursive>:
 800891c:	4770      	bx	lr

0800891e <__retarget_lock_acquire_recursive>:
 800891e:	4770      	bx	lr

08008920 <__retarget_lock_release_recursive>:
 8008920:	4770      	bx	lr

08008922 <__ascii_mbtowc>:
 8008922:	b082      	sub	sp, #8
 8008924:	b901      	cbnz	r1, 8008928 <__ascii_mbtowc+0x6>
 8008926:	a901      	add	r1, sp, #4
 8008928:	b142      	cbz	r2, 800893c <__ascii_mbtowc+0x1a>
 800892a:	b14b      	cbz	r3, 8008940 <__ascii_mbtowc+0x1e>
 800892c:	7813      	ldrb	r3, [r2, #0]
 800892e:	600b      	str	r3, [r1, #0]
 8008930:	7812      	ldrb	r2, [r2, #0]
 8008932:	1e10      	subs	r0, r2, #0
 8008934:	bf18      	it	ne
 8008936:	2001      	movne	r0, #1
 8008938:	b002      	add	sp, #8
 800893a:	4770      	bx	lr
 800893c:	4610      	mov	r0, r2
 800893e:	e7fb      	b.n	8008938 <__ascii_mbtowc+0x16>
 8008940:	f06f 0001 	mvn.w	r0, #1
 8008944:	e7f8      	b.n	8008938 <__ascii_mbtowc+0x16>

08008946 <memmove>:
 8008946:	4288      	cmp	r0, r1
 8008948:	b510      	push	{r4, lr}
 800894a:	eb01 0402 	add.w	r4, r1, r2
 800894e:	d902      	bls.n	8008956 <memmove+0x10>
 8008950:	4284      	cmp	r4, r0
 8008952:	4623      	mov	r3, r4
 8008954:	d807      	bhi.n	8008966 <memmove+0x20>
 8008956:	1e43      	subs	r3, r0, #1
 8008958:	42a1      	cmp	r1, r4
 800895a:	d008      	beq.n	800896e <memmove+0x28>
 800895c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008960:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008964:	e7f8      	b.n	8008958 <memmove+0x12>
 8008966:	4402      	add	r2, r0
 8008968:	4601      	mov	r1, r0
 800896a:	428a      	cmp	r2, r1
 800896c:	d100      	bne.n	8008970 <memmove+0x2a>
 800896e:	bd10      	pop	{r4, pc}
 8008970:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008974:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008978:	e7f7      	b.n	800896a <memmove+0x24>

0800897a <_realloc_r>:
 800897a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800897e:	4680      	mov	r8, r0
 8008980:	4614      	mov	r4, r2
 8008982:	460e      	mov	r6, r1
 8008984:	b921      	cbnz	r1, 8008990 <_realloc_r+0x16>
 8008986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800898a:	4611      	mov	r1, r2
 800898c:	f7fd bee8 	b.w	8006760 <_malloc_r>
 8008990:	b92a      	cbnz	r2, 800899e <_realloc_r+0x24>
 8008992:	f7fd fe79 	bl	8006688 <_free_r>
 8008996:	4625      	mov	r5, r4
 8008998:	4628      	mov	r0, r5
 800899a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800899e:	f000 fc67 	bl	8009270 <_malloc_usable_size_r>
 80089a2:	4284      	cmp	r4, r0
 80089a4:	4607      	mov	r7, r0
 80089a6:	d802      	bhi.n	80089ae <_realloc_r+0x34>
 80089a8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80089ac:	d812      	bhi.n	80089d4 <_realloc_r+0x5a>
 80089ae:	4621      	mov	r1, r4
 80089b0:	4640      	mov	r0, r8
 80089b2:	f7fd fed5 	bl	8006760 <_malloc_r>
 80089b6:	4605      	mov	r5, r0
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d0ed      	beq.n	8008998 <_realloc_r+0x1e>
 80089bc:	42bc      	cmp	r4, r7
 80089be:	4622      	mov	r2, r4
 80089c0:	4631      	mov	r1, r6
 80089c2:	bf28      	it	cs
 80089c4:	463a      	movcs	r2, r7
 80089c6:	f7ff fa69 	bl	8007e9c <memcpy>
 80089ca:	4631      	mov	r1, r6
 80089cc:	4640      	mov	r0, r8
 80089ce:	f7fd fe5b 	bl	8006688 <_free_r>
 80089d2:	e7e1      	b.n	8008998 <_realloc_r+0x1e>
 80089d4:	4635      	mov	r5, r6
 80089d6:	e7df      	b.n	8008998 <_realloc_r+0x1e>

080089d8 <__sfputc_r>:
 80089d8:	6893      	ldr	r3, [r2, #8]
 80089da:	3b01      	subs	r3, #1
 80089dc:	2b00      	cmp	r3, #0
 80089de:	b410      	push	{r4}
 80089e0:	6093      	str	r3, [r2, #8]
 80089e2:	da08      	bge.n	80089f6 <__sfputc_r+0x1e>
 80089e4:	6994      	ldr	r4, [r2, #24]
 80089e6:	42a3      	cmp	r3, r4
 80089e8:	db01      	blt.n	80089ee <__sfputc_r+0x16>
 80089ea:	290a      	cmp	r1, #10
 80089ec:	d103      	bne.n	80089f6 <__sfputc_r+0x1e>
 80089ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089f2:	f000 b94b 	b.w	8008c8c <__swbuf_r>
 80089f6:	6813      	ldr	r3, [r2, #0]
 80089f8:	1c58      	adds	r0, r3, #1
 80089fa:	6010      	str	r0, [r2, #0]
 80089fc:	7019      	strb	r1, [r3, #0]
 80089fe:	4608      	mov	r0, r1
 8008a00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a04:	4770      	bx	lr

08008a06 <__sfputs_r>:
 8008a06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a08:	4606      	mov	r6, r0
 8008a0a:	460f      	mov	r7, r1
 8008a0c:	4614      	mov	r4, r2
 8008a0e:	18d5      	adds	r5, r2, r3
 8008a10:	42ac      	cmp	r4, r5
 8008a12:	d101      	bne.n	8008a18 <__sfputs_r+0x12>
 8008a14:	2000      	movs	r0, #0
 8008a16:	e007      	b.n	8008a28 <__sfputs_r+0x22>
 8008a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a1c:	463a      	mov	r2, r7
 8008a1e:	4630      	mov	r0, r6
 8008a20:	f7ff ffda 	bl	80089d8 <__sfputc_r>
 8008a24:	1c43      	adds	r3, r0, #1
 8008a26:	d1f3      	bne.n	8008a10 <__sfputs_r+0xa>
 8008a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a2c <_vfiprintf_r>:
 8008a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a30:	460d      	mov	r5, r1
 8008a32:	b09d      	sub	sp, #116	; 0x74
 8008a34:	4614      	mov	r4, r2
 8008a36:	4698      	mov	r8, r3
 8008a38:	4606      	mov	r6, r0
 8008a3a:	b118      	cbz	r0, 8008a44 <_vfiprintf_r+0x18>
 8008a3c:	6983      	ldr	r3, [r0, #24]
 8008a3e:	b90b      	cbnz	r3, 8008a44 <_vfiprintf_r+0x18>
 8008a40:	f000 fb14 	bl	800906c <__sinit>
 8008a44:	4b89      	ldr	r3, [pc, #548]	; (8008c6c <_vfiprintf_r+0x240>)
 8008a46:	429d      	cmp	r5, r3
 8008a48:	d11b      	bne.n	8008a82 <_vfiprintf_r+0x56>
 8008a4a:	6875      	ldr	r5, [r6, #4]
 8008a4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a4e:	07d9      	lsls	r1, r3, #31
 8008a50:	d405      	bmi.n	8008a5e <_vfiprintf_r+0x32>
 8008a52:	89ab      	ldrh	r3, [r5, #12]
 8008a54:	059a      	lsls	r2, r3, #22
 8008a56:	d402      	bmi.n	8008a5e <_vfiprintf_r+0x32>
 8008a58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a5a:	f7ff ff60 	bl	800891e <__retarget_lock_acquire_recursive>
 8008a5e:	89ab      	ldrh	r3, [r5, #12]
 8008a60:	071b      	lsls	r3, r3, #28
 8008a62:	d501      	bpl.n	8008a68 <_vfiprintf_r+0x3c>
 8008a64:	692b      	ldr	r3, [r5, #16]
 8008a66:	b9eb      	cbnz	r3, 8008aa4 <_vfiprintf_r+0x78>
 8008a68:	4629      	mov	r1, r5
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	f000 f96e 	bl	8008d4c <__swsetup_r>
 8008a70:	b1c0      	cbz	r0, 8008aa4 <_vfiprintf_r+0x78>
 8008a72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a74:	07dc      	lsls	r4, r3, #31
 8008a76:	d50e      	bpl.n	8008a96 <_vfiprintf_r+0x6a>
 8008a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a7c:	b01d      	add	sp, #116	; 0x74
 8008a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a82:	4b7b      	ldr	r3, [pc, #492]	; (8008c70 <_vfiprintf_r+0x244>)
 8008a84:	429d      	cmp	r5, r3
 8008a86:	d101      	bne.n	8008a8c <_vfiprintf_r+0x60>
 8008a88:	68b5      	ldr	r5, [r6, #8]
 8008a8a:	e7df      	b.n	8008a4c <_vfiprintf_r+0x20>
 8008a8c:	4b79      	ldr	r3, [pc, #484]	; (8008c74 <_vfiprintf_r+0x248>)
 8008a8e:	429d      	cmp	r5, r3
 8008a90:	bf08      	it	eq
 8008a92:	68f5      	ldreq	r5, [r6, #12]
 8008a94:	e7da      	b.n	8008a4c <_vfiprintf_r+0x20>
 8008a96:	89ab      	ldrh	r3, [r5, #12]
 8008a98:	0598      	lsls	r0, r3, #22
 8008a9a:	d4ed      	bmi.n	8008a78 <_vfiprintf_r+0x4c>
 8008a9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a9e:	f7ff ff3f 	bl	8008920 <__retarget_lock_release_recursive>
 8008aa2:	e7e9      	b.n	8008a78 <_vfiprintf_r+0x4c>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8008aa8:	2320      	movs	r3, #32
 8008aaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008aae:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ab2:	2330      	movs	r3, #48	; 0x30
 8008ab4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008c78 <_vfiprintf_r+0x24c>
 8008ab8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008abc:	f04f 0901 	mov.w	r9, #1
 8008ac0:	4623      	mov	r3, r4
 8008ac2:	469a      	mov	sl, r3
 8008ac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ac8:	b10a      	cbz	r2, 8008ace <_vfiprintf_r+0xa2>
 8008aca:	2a25      	cmp	r2, #37	; 0x25
 8008acc:	d1f9      	bne.n	8008ac2 <_vfiprintf_r+0x96>
 8008ace:	ebba 0b04 	subs.w	fp, sl, r4
 8008ad2:	d00b      	beq.n	8008aec <_vfiprintf_r+0xc0>
 8008ad4:	465b      	mov	r3, fp
 8008ad6:	4622      	mov	r2, r4
 8008ad8:	4629      	mov	r1, r5
 8008ada:	4630      	mov	r0, r6
 8008adc:	f7ff ff93 	bl	8008a06 <__sfputs_r>
 8008ae0:	3001      	adds	r0, #1
 8008ae2:	f000 80aa 	beq.w	8008c3a <_vfiprintf_r+0x20e>
 8008ae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ae8:	445a      	add	r2, fp
 8008aea:	9209      	str	r2, [sp, #36]	; 0x24
 8008aec:	f89a 3000 	ldrb.w	r3, [sl]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f000 80a2 	beq.w	8008c3a <_vfiprintf_r+0x20e>
 8008af6:	2300      	movs	r3, #0
 8008af8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008afc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b00:	f10a 0a01 	add.w	sl, sl, #1
 8008b04:	9304      	str	r3, [sp, #16]
 8008b06:	9307      	str	r3, [sp, #28]
 8008b08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b0c:	931a      	str	r3, [sp, #104]	; 0x68
 8008b0e:	4654      	mov	r4, sl
 8008b10:	2205      	movs	r2, #5
 8008b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b16:	4858      	ldr	r0, [pc, #352]	; (8008c78 <_vfiprintf_r+0x24c>)
 8008b18:	f7f7 fb82 	bl	8000220 <memchr>
 8008b1c:	9a04      	ldr	r2, [sp, #16]
 8008b1e:	b9d8      	cbnz	r0, 8008b58 <_vfiprintf_r+0x12c>
 8008b20:	06d1      	lsls	r1, r2, #27
 8008b22:	bf44      	itt	mi
 8008b24:	2320      	movmi	r3, #32
 8008b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b2a:	0713      	lsls	r3, r2, #28
 8008b2c:	bf44      	itt	mi
 8008b2e:	232b      	movmi	r3, #43	; 0x2b
 8008b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b34:	f89a 3000 	ldrb.w	r3, [sl]
 8008b38:	2b2a      	cmp	r3, #42	; 0x2a
 8008b3a:	d015      	beq.n	8008b68 <_vfiprintf_r+0x13c>
 8008b3c:	9a07      	ldr	r2, [sp, #28]
 8008b3e:	4654      	mov	r4, sl
 8008b40:	2000      	movs	r0, #0
 8008b42:	f04f 0c0a 	mov.w	ip, #10
 8008b46:	4621      	mov	r1, r4
 8008b48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b4c:	3b30      	subs	r3, #48	; 0x30
 8008b4e:	2b09      	cmp	r3, #9
 8008b50:	d94e      	bls.n	8008bf0 <_vfiprintf_r+0x1c4>
 8008b52:	b1b0      	cbz	r0, 8008b82 <_vfiprintf_r+0x156>
 8008b54:	9207      	str	r2, [sp, #28]
 8008b56:	e014      	b.n	8008b82 <_vfiprintf_r+0x156>
 8008b58:	eba0 0308 	sub.w	r3, r0, r8
 8008b5c:	fa09 f303 	lsl.w	r3, r9, r3
 8008b60:	4313      	orrs	r3, r2
 8008b62:	9304      	str	r3, [sp, #16]
 8008b64:	46a2      	mov	sl, r4
 8008b66:	e7d2      	b.n	8008b0e <_vfiprintf_r+0xe2>
 8008b68:	9b03      	ldr	r3, [sp, #12]
 8008b6a:	1d19      	adds	r1, r3, #4
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	9103      	str	r1, [sp, #12]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	bfbb      	ittet	lt
 8008b74:	425b      	neglt	r3, r3
 8008b76:	f042 0202 	orrlt.w	r2, r2, #2
 8008b7a:	9307      	strge	r3, [sp, #28]
 8008b7c:	9307      	strlt	r3, [sp, #28]
 8008b7e:	bfb8      	it	lt
 8008b80:	9204      	strlt	r2, [sp, #16]
 8008b82:	7823      	ldrb	r3, [r4, #0]
 8008b84:	2b2e      	cmp	r3, #46	; 0x2e
 8008b86:	d10c      	bne.n	8008ba2 <_vfiprintf_r+0x176>
 8008b88:	7863      	ldrb	r3, [r4, #1]
 8008b8a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b8c:	d135      	bne.n	8008bfa <_vfiprintf_r+0x1ce>
 8008b8e:	9b03      	ldr	r3, [sp, #12]
 8008b90:	1d1a      	adds	r2, r3, #4
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	9203      	str	r2, [sp, #12]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	bfb8      	it	lt
 8008b9a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008b9e:	3402      	adds	r4, #2
 8008ba0:	9305      	str	r3, [sp, #20]
 8008ba2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008c88 <_vfiprintf_r+0x25c>
 8008ba6:	7821      	ldrb	r1, [r4, #0]
 8008ba8:	2203      	movs	r2, #3
 8008baa:	4650      	mov	r0, sl
 8008bac:	f7f7 fb38 	bl	8000220 <memchr>
 8008bb0:	b140      	cbz	r0, 8008bc4 <_vfiprintf_r+0x198>
 8008bb2:	2340      	movs	r3, #64	; 0x40
 8008bb4:	eba0 000a 	sub.w	r0, r0, sl
 8008bb8:	fa03 f000 	lsl.w	r0, r3, r0
 8008bbc:	9b04      	ldr	r3, [sp, #16]
 8008bbe:	4303      	orrs	r3, r0
 8008bc0:	3401      	adds	r4, #1
 8008bc2:	9304      	str	r3, [sp, #16]
 8008bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bc8:	482c      	ldr	r0, [pc, #176]	; (8008c7c <_vfiprintf_r+0x250>)
 8008bca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bce:	2206      	movs	r2, #6
 8008bd0:	f7f7 fb26 	bl	8000220 <memchr>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	d03f      	beq.n	8008c58 <_vfiprintf_r+0x22c>
 8008bd8:	4b29      	ldr	r3, [pc, #164]	; (8008c80 <_vfiprintf_r+0x254>)
 8008bda:	bb1b      	cbnz	r3, 8008c24 <_vfiprintf_r+0x1f8>
 8008bdc:	9b03      	ldr	r3, [sp, #12]
 8008bde:	3307      	adds	r3, #7
 8008be0:	f023 0307 	bic.w	r3, r3, #7
 8008be4:	3308      	adds	r3, #8
 8008be6:	9303      	str	r3, [sp, #12]
 8008be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bea:	443b      	add	r3, r7
 8008bec:	9309      	str	r3, [sp, #36]	; 0x24
 8008bee:	e767      	b.n	8008ac0 <_vfiprintf_r+0x94>
 8008bf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bf4:	460c      	mov	r4, r1
 8008bf6:	2001      	movs	r0, #1
 8008bf8:	e7a5      	b.n	8008b46 <_vfiprintf_r+0x11a>
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	3401      	adds	r4, #1
 8008bfe:	9305      	str	r3, [sp, #20]
 8008c00:	4619      	mov	r1, r3
 8008c02:	f04f 0c0a 	mov.w	ip, #10
 8008c06:	4620      	mov	r0, r4
 8008c08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c0c:	3a30      	subs	r2, #48	; 0x30
 8008c0e:	2a09      	cmp	r2, #9
 8008c10:	d903      	bls.n	8008c1a <_vfiprintf_r+0x1ee>
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d0c5      	beq.n	8008ba2 <_vfiprintf_r+0x176>
 8008c16:	9105      	str	r1, [sp, #20]
 8008c18:	e7c3      	b.n	8008ba2 <_vfiprintf_r+0x176>
 8008c1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c1e:	4604      	mov	r4, r0
 8008c20:	2301      	movs	r3, #1
 8008c22:	e7f0      	b.n	8008c06 <_vfiprintf_r+0x1da>
 8008c24:	ab03      	add	r3, sp, #12
 8008c26:	9300      	str	r3, [sp, #0]
 8008c28:	462a      	mov	r2, r5
 8008c2a:	4b16      	ldr	r3, [pc, #88]	; (8008c84 <_vfiprintf_r+0x258>)
 8008c2c:	a904      	add	r1, sp, #16
 8008c2e:	4630      	mov	r0, r6
 8008c30:	f7fd feaa 	bl	8006988 <_printf_float>
 8008c34:	4607      	mov	r7, r0
 8008c36:	1c78      	adds	r0, r7, #1
 8008c38:	d1d6      	bne.n	8008be8 <_vfiprintf_r+0x1bc>
 8008c3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c3c:	07d9      	lsls	r1, r3, #31
 8008c3e:	d405      	bmi.n	8008c4c <_vfiprintf_r+0x220>
 8008c40:	89ab      	ldrh	r3, [r5, #12]
 8008c42:	059a      	lsls	r2, r3, #22
 8008c44:	d402      	bmi.n	8008c4c <_vfiprintf_r+0x220>
 8008c46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c48:	f7ff fe6a 	bl	8008920 <__retarget_lock_release_recursive>
 8008c4c:	89ab      	ldrh	r3, [r5, #12]
 8008c4e:	065b      	lsls	r3, r3, #25
 8008c50:	f53f af12 	bmi.w	8008a78 <_vfiprintf_r+0x4c>
 8008c54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c56:	e711      	b.n	8008a7c <_vfiprintf_r+0x50>
 8008c58:	ab03      	add	r3, sp, #12
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	462a      	mov	r2, r5
 8008c5e:	4b09      	ldr	r3, [pc, #36]	; (8008c84 <_vfiprintf_r+0x258>)
 8008c60:	a904      	add	r1, sp, #16
 8008c62:	4630      	mov	r0, r6
 8008c64:	f7fe f934 	bl	8006ed0 <_printf_i>
 8008c68:	e7e4      	b.n	8008c34 <_vfiprintf_r+0x208>
 8008c6a:	bf00      	nop
 8008c6c:	08009a34 	.word	0x08009a34
 8008c70:	08009a54 	.word	0x08009a54
 8008c74:	08009a14 	.word	0x08009a14
 8008c78:	080098bc 	.word	0x080098bc
 8008c7c:	080098c6 	.word	0x080098c6
 8008c80:	08006989 	.word	0x08006989
 8008c84:	08008a07 	.word	0x08008a07
 8008c88:	080098c2 	.word	0x080098c2

08008c8c <__swbuf_r>:
 8008c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8e:	460e      	mov	r6, r1
 8008c90:	4614      	mov	r4, r2
 8008c92:	4605      	mov	r5, r0
 8008c94:	b118      	cbz	r0, 8008c9e <__swbuf_r+0x12>
 8008c96:	6983      	ldr	r3, [r0, #24]
 8008c98:	b90b      	cbnz	r3, 8008c9e <__swbuf_r+0x12>
 8008c9a:	f000 f9e7 	bl	800906c <__sinit>
 8008c9e:	4b21      	ldr	r3, [pc, #132]	; (8008d24 <__swbuf_r+0x98>)
 8008ca0:	429c      	cmp	r4, r3
 8008ca2:	d12b      	bne.n	8008cfc <__swbuf_r+0x70>
 8008ca4:	686c      	ldr	r4, [r5, #4]
 8008ca6:	69a3      	ldr	r3, [r4, #24]
 8008ca8:	60a3      	str	r3, [r4, #8]
 8008caa:	89a3      	ldrh	r3, [r4, #12]
 8008cac:	071a      	lsls	r2, r3, #28
 8008cae:	d52f      	bpl.n	8008d10 <__swbuf_r+0x84>
 8008cb0:	6923      	ldr	r3, [r4, #16]
 8008cb2:	b36b      	cbz	r3, 8008d10 <__swbuf_r+0x84>
 8008cb4:	6923      	ldr	r3, [r4, #16]
 8008cb6:	6820      	ldr	r0, [r4, #0]
 8008cb8:	1ac0      	subs	r0, r0, r3
 8008cba:	6963      	ldr	r3, [r4, #20]
 8008cbc:	b2f6      	uxtb	r6, r6
 8008cbe:	4283      	cmp	r3, r0
 8008cc0:	4637      	mov	r7, r6
 8008cc2:	dc04      	bgt.n	8008cce <__swbuf_r+0x42>
 8008cc4:	4621      	mov	r1, r4
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	f000 f93c 	bl	8008f44 <_fflush_r>
 8008ccc:	bb30      	cbnz	r0, 8008d1c <__swbuf_r+0x90>
 8008cce:	68a3      	ldr	r3, [r4, #8]
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	60a3      	str	r3, [r4, #8]
 8008cd4:	6823      	ldr	r3, [r4, #0]
 8008cd6:	1c5a      	adds	r2, r3, #1
 8008cd8:	6022      	str	r2, [r4, #0]
 8008cda:	701e      	strb	r6, [r3, #0]
 8008cdc:	6963      	ldr	r3, [r4, #20]
 8008cde:	3001      	adds	r0, #1
 8008ce0:	4283      	cmp	r3, r0
 8008ce2:	d004      	beq.n	8008cee <__swbuf_r+0x62>
 8008ce4:	89a3      	ldrh	r3, [r4, #12]
 8008ce6:	07db      	lsls	r3, r3, #31
 8008ce8:	d506      	bpl.n	8008cf8 <__swbuf_r+0x6c>
 8008cea:	2e0a      	cmp	r6, #10
 8008cec:	d104      	bne.n	8008cf8 <__swbuf_r+0x6c>
 8008cee:	4621      	mov	r1, r4
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	f000 f927 	bl	8008f44 <_fflush_r>
 8008cf6:	b988      	cbnz	r0, 8008d1c <__swbuf_r+0x90>
 8008cf8:	4638      	mov	r0, r7
 8008cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cfc:	4b0a      	ldr	r3, [pc, #40]	; (8008d28 <__swbuf_r+0x9c>)
 8008cfe:	429c      	cmp	r4, r3
 8008d00:	d101      	bne.n	8008d06 <__swbuf_r+0x7a>
 8008d02:	68ac      	ldr	r4, [r5, #8]
 8008d04:	e7cf      	b.n	8008ca6 <__swbuf_r+0x1a>
 8008d06:	4b09      	ldr	r3, [pc, #36]	; (8008d2c <__swbuf_r+0xa0>)
 8008d08:	429c      	cmp	r4, r3
 8008d0a:	bf08      	it	eq
 8008d0c:	68ec      	ldreq	r4, [r5, #12]
 8008d0e:	e7ca      	b.n	8008ca6 <__swbuf_r+0x1a>
 8008d10:	4621      	mov	r1, r4
 8008d12:	4628      	mov	r0, r5
 8008d14:	f000 f81a 	bl	8008d4c <__swsetup_r>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d0cb      	beq.n	8008cb4 <__swbuf_r+0x28>
 8008d1c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008d20:	e7ea      	b.n	8008cf8 <__swbuf_r+0x6c>
 8008d22:	bf00      	nop
 8008d24:	08009a34 	.word	0x08009a34
 8008d28:	08009a54 	.word	0x08009a54
 8008d2c:	08009a14 	.word	0x08009a14

08008d30 <__ascii_wctomb>:
 8008d30:	b149      	cbz	r1, 8008d46 <__ascii_wctomb+0x16>
 8008d32:	2aff      	cmp	r2, #255	; 0xff
 8008d34:	bf85      	ittet	hi
 8008d36:	238a      	movhi	r3, #138	; 0x8a
 8008d38:	6003      	strhi	r3, [r0, #0]
 8008d3a:	700a      	strbls	r2, [r1, #0]
 8008d3c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008d40:	bf98      	it	ls
 8008d42:	2001      	movls	r0, #1
 8008d44:	4770      	bx	lr
 8008d46:	4608      	mov	r0, r1
 8008d48:	4770      	bx	lr
	...

08008d4c <__swsetup_r>:
 8008d4c:	4b32      	ldr	r3, [pc, #200]	; (8008e18 <__swsetup_r+0xcc>)
 8008d4e:	b570      	push	{r4, r5, r6, lr}
 8008d50:	681d      	ldr	r5, [r3, #0]
 8008d52:	4606      	mov	r6, r0
 8008d54:	460c      	mov	r4, r1
 8008d56:	b125      	cbz	r5, 8008d62 <__swsetup_r+0x16>
 8008d58:	69ab      	ldr	r3, [r5, #24]
 8008d5a:	b913      	cbnz	r3, 8008d62 <__swsetup_r+0x16>
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	f000 f985 	bl	800906c <__sinit>
 8008d62:	4b2e      	ldr	r3, [pc, #184]	; (8008e1c <__swsetup_r+0xd0>)
 8008d64:	429c      	cmp	r4, r3
 8008d66:	d10f      	bne.n	8008d88 <__swsetup_r+0x3c>
 8008d68:	686c      	ldr	r4, [r5, #4]
 8008d6a:	89a3      	ldrh	r3, [r4, #12]
 8008d6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d70:	0719      	lsls	r1, r3, #28
 8008d72:	d42c      	bmi.n	8008dce <__swsetup_r+0x82>
 8008d74:	06dd      	lsls	r5, r3, #27
 8008d76:	d411      	bmi.n	8008d9c <__swsetup_r+0x50>
 8008d78:	2309      	movs	r3, #9
 8008d7a:	6033      	str	r3, [r6, #0]
 8008d7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d80:	81a3      	strh	r3, [r4, #12]
 8008d82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d86:	e03e      	b.n	8008e06 <__swsetup_r+0xba>
 8008d88:	4b25      	ldr	r3, [pc, #148]	; (8008e20 <__swsetup_r+0xd4>)
 8008d8a:	429c      	cmp	r4, r3
 8008d8c:	d101      	bne.n	8008d92 <__swsetup_r+0x46>
 8008d8e:	68ac      	ldr	r4, [r5, #8]
 8008d90:	e7eb      	b.n	8008d6a <__swsetup_r+0x1e>
 8008d92:	4b24      	ldr	r3, [pc, #144]	; (8008e24 <__swsetup_r+0xd8>)
 8008d94:	429c      	cmp	r4, r3
 8008d96:	bf08      	it	eq
 8008d98:	68ec      	ldreq	r4, [r5, #12]
 8008d9a:	e7e6      	b.n	8008d6a <__swsetup_r+0x1e>
 8008d9c:	0758      	lsls	r0, r3, #29
 8008d9e:	d512      	bpl.n	8008dc6 <__swsetup_r+0x7a>
 8008da0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008da2:	b141      	cbz	r1, 8008db6 <__swsetup_r+0x6a>
 8008da4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008da8:	4299      	cmp	r1, r3
 8008daa:	d002      	beq.n	8008db2 <__swsetup_r+0x66>
 8008dac:	4630      	mov	r0, r6
 8008dae:	f7fd fc6b 	bl	8006688 <_free_r>
 8008db2:	2300      	movs	r3, #0
 8008db4:	6363      	str	r3, [r4, #52]	; 0x34
 8008db6:	89a3      	ldrh	r3, [r4, #12]
 8008db8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008dbc:	81a3      	strh	r3, [r4, #12]
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	6063      	str	r3, [r4, #4]
 8008dc2:	6923      	ldr	r3, [r4, #16]
 8008dc4:	6023      	str	r3, [r4, #0]
 8008dc6:	89a3      	ldrh	r3, [r4, #12]
 8008dc8:	f043 0308 	orr.w	r3, r3, #8
 8008dcc:	81a3      	strh	r3, [r4, #12]
 8008dce:	6923      	ldr	r3, [r4, #16]
 8008dd0:	b94b      	cbnz	r3, 8008de6 <__swsetup_r+0x9a>
 8008dd2:	89a3      	ldrh	r3, [r4, #12]
 8008dd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ddc:	d003      	beq.n	8008de6 <__swsetup_r+0x9a>
 8008dde:	4621      	mov	r1, r4
 8008de0:	4630      	mov	r0, r6
 8008de2:	f000 fa05 	bl	80091f0 <__smakebuf_r>
 8008de6:	89a0      	ldrh	r0, [r4, #12]
 8008de8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008dec:	f010 0301 	ands.w	r3, r0, #1
 8008df0:	d00a      	beq.n	8008e08 <__swsetup_r+0xbc>
 8008df2:	2300      	movs	r3, #0
 8008df4:	60a3      	str	r3, [r4, #8]
 8008df6:	6963      	ldr	r3, [r4, #20]
 8008df8:	425b      	negs	r3, r3
 8008dfa:	61a3      	str	r3, [r4, #24]
 8008dfc:	6923      	ldr	r3, [r4, #16]
 8008dfe:	b943      	cbnz	r3, 8008e12 <__swsetup_r+0xc6>
 8008e00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e04:	d1ba      	bne.n	8008d7c <__swsetup_r+0x30>
 8008e06:	bd70      	pop	{r4, r5, r6, pc}
 8008e08:	0781      	lsls	r1, r0, #30
 8008e0a:	bf58      	it	pl
 8008e0c:	6963      	ldrpl	r3, [r4, #20]
 8008e0e:	60a3      	str	r3, [r4, #8]
 8008e10:	e7f4      	b.n	8008dfc <__swsetup_r+0xb0>
 8008e12:	2000      	movs	r0, #0
 8008e14:	e7f7      	b.n	8008e06 <__swsetup_r+0xba>
 8008e16:	bf00      	nop
 8008e18:	20000020 	.word	0x20000020
 8008e1c:	08009a34 	.word	0x08009a34
 8008e20:	08009a54 	.word	0x08009a54
 8008e24:	08009a14 	.word	0x08009a14

08008e28 <abort>:
 8008e28:	b508      	push	{r3, lr}
 8008e2a:	2006      	movs	r0, #6
 8008e2c:	f000 fa50 	bl	80092d0 <raise>
 8008e30:	2001      	movs	r0, #1
 8008e32:	f7fa fd21 	bl	8003878 <_exit>
	...

08008e38 <__sflush_r>:
 8008e38:	898a      	ldrh	r2, [r1, #12]
 8008e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e3e:	4605      	mov	r5, r0
 8008e40:	0710      	lsls	r0, r2, #28
 8008e42:	460c      	mov	r4, r1
 8008e44:	d458      	bmi.n	8008ef8 <__sflush_r+0xc0>
 8008e46:	684b      	ldr	r3, [r1, #4]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	dc05      	bgt.n	8008e58 <__sflush_r+0x20>
 8008e4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	dc02      	bgt.n	8008e58 <__sflush_r+0x20>
 8008e52:	2000      	movs	r0, #0
 8008e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e5a:	2e00      	cmp	r6, #0
 8008e5c:	d0f9      	beq.n	8008e52 <__sflush_r+0x1a>
 8008e5e:	2300      	movs	r3, #0
 8008e60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e64:	682f      	ldr	r7, [r5, #0]
 8008e66:	602b      	str	r3, [r5, #0]
 8008e68:	d032      	beq.n	8008ed0 <__sflush_r+0x98>
 8008e6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e6c:	89a3      	ldrh	r3, [r4, #12]
 8008e6e:	075a      	lsls	r2, r3, #29
 8008e70:	d505      	bpl.n	8008e7e <__sflush_r+0x46>
 8008e72:	6863      	ldr	r3, [r4, #4]
 8008e74:	1ac0      	subs	r0, r0, r3
 8008e76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e78:	b10b      	cbz	r3, 8008e7e <__sflush_r+0x46>
 8008e7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e7c:	1ac0      	subs	r0, r0, r3
 8008e7e:	2300      	movs	r3, #0
 8008e80:	4602      	mov	r2, r0
 8008e82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e84:	6a21      	ldr	r1, [r4, #32]
 8008e86:	4628      	mov	r0, r5
 8008e88:	47b0      	blx	r6
 8008e8a:	1c43      	adds	r3, r0, #1
 8008e8c:	89a3      	ldrh	r3, [r4, #12]
 8008e8e:	d106      	bne.n	8008e9e <__sflush_r+0x66>
 8008e90:	6829      	ldr	r1, [r5, #0]
 8008e92:	291d      	cmp	r1, #29
 8008e94:	d82c      	bhi.n	8008ef0 <__sflush_r+0xb8>
 8008e96:	4a2a      	ldr	r2, [pc, #168]	; (8008f40 <__sflush_r+0x108>)
 8008e98:	40ca      	lsrs	r2, r1
 8008e9a:	07d6      	lsls	r6, r2, #31
 8008e9c:	d528      	bpl.n	8008ef0 <__sflush_r+0xb8>
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	6062      	str	r2, [r4, #4]
 8008ea2:	04d9      	lsls	r1, r3, #19
 8008ea4:	6922      	ldr	r2, [r4, #16]
 8008ea6:	6022      	str	r2, [r4, #0]
 8008ea8:	d504      	bpl.n	8008eb4 <__sflush_r+0x7c>
 8008eaa:	1c42      	adds	r2, r0, #1
 8008eac:	d101      	bne.n	8008eb2 <__sflush_r+0x7a>
 8008eae:	682b      	ldr	r3, [r5, #0]
 8008eb0:	b903      	cbnz	r3, 8008eb4 <__sflush_r+0x7c>
 8008eb2:	6560      	str	r0, [r4, #84]	; 0x54
 8008eb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008eb6:	602f      	str	r7, [r5, #0]
 8008eb8:	2900      	cmp	r1, #0
 8008eba:	d0ca      	beq.n	8008e52 <__sflush_r+0x1a>
 8008ebc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ec0:	4299      	cmp	r1, r3
 8008ec2:	d002      	beq.n	8008eca <__sflush_r+0x92>
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	f7fd fbdf 	bl	8006688 <_free_r>
 8008eca:	2000      	movs	r0, #0
 8008ecc:	6360      	str	r0, [r4, #52]	; 0x34
 8008ece:	e7c1      	b.n	8008e54 <__sflush_r+0x1c>
 8008ed0:	6a21      	ldr	r1, [r4, #32]
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	4628      	mov	r0, r5
 8008ed6:	47b0      	blx	r6
 8008ed8:	1c41      	adds	r1, r0, #1
 8008eda:	d1c7      	bne.n	8008e6c <__sflush_r+0x34>
 8008edc:	682b      	ldr	r3, [r5, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d0c4      	beq.n	8008e6c <__sflush_r+0x34>
 8008ee2:	2b1d      	cmp	r3, #29
 8008ee4:	d001      	beq.n	8008eea <__sflush_r+0xb2>
 8008ee6:	2b16      	cmp	r3, #22
 8008ee8:	d101      	bne.n	8008eee <__sflush_r+0xb6>
 8008eea:	602f      	str	r7, [r5, #0]
 8008eec:	e7b1      	b.n	8008e52 <__sflush_r+0x1a>
 8008eee:	89a3      	ldrh	r3, [r4, #12]
 8008ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ef4:	81a3      	strh	r3, [r4, #12]
 8008ef6:	e7ad      	b.n	8008e54 <__sflush_r+0x1c>
 8008ef8:	690f      	ldr	r7, [r1, #16]
 8008efa:	2f00      	cmp	r7, #0
 8008efc:	d0a9      	beq.n	8008e52 <__sflush_r+0x1a>
 8008efe:	0793      	lsls	r3, r2, #30
 8008f00:	680e      	ldr	r6, [r1, #0]
 8008f02:	bf08      	it	eq
 8008f04:	694b      	ldreq	r3, [r1, #20]
 8008f06:	600f      	str	r7, [r1, #0]
 8008f08:	bf18      	it	ne
 8008f0a:	2300      	movne	r3, #0
 8008f0c:	eba6 0807 	sub.w	r8, r6, r7
 8008f10:	608b      	str	r3, [r1, #8]
 8008f12:	f1b8 0f00 	cmp.w	r8, #0
 8008f16:	dd9c      	ble.n	8008e52 <__sflush_r+0x1a>
 8008f18:	6a21      	ldr	r1, [r4, #32]
 8008f1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f1c:	4643      	mov	r3, r8
 8008f1e:	463a      	mov	r2, r7
 8008f20:	4628      	mov	r0, r5
 8008f22:	47b0      	blx	r6
 8008f24:	2800      	cmp	r0, #0
 8008f26:	dc06      	bgt.n	8008f36 <__sflush_r+0xfe>
 8008f28:	89a3      	ldrh	r3, [r4, #12]
 8008f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f2e:	81a3      	strh	r3, [r4, #12]
 8008f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f34:	e78e      	b.n	8008e54 <__sflush_r+0x1c>
 8008f36:	4407      	add	r7, r0
 8008f38:	eba8 0800 	sub.w	r8, r8, r0
 8008f3c:	e7e9      	b.n	8008f12 <__sflush_r+0xda>
 8008f3e:	bf00      	nop
 8008f40:	20400001 	.word	0x20400001

08008f44 <_fflush_r>:
 8008f44:	b538      	push	{r3, r4, r5, lr}
 8008f46:	690b      	ldr	r3, [r1, #16]
 8008f48:	4605      	mov	r5, r0
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	b913      	cbnz	r3, 8008f54 <_fflush_r+0x10>
 8008f4e:	2500      	movs	r5, #0
 8008f50:	4628      	mov	r0, r5
 8008f52:	bd38      	pop	{r3, r4, r5, pc}
 8008f54:	b118      	cbz	r0, 8008f5e <_fflush_r+0x1a>
 8008f56:	6983      	ldr	r3, [r0, #24]
 8008f58:	b90b      	cbnz	r3, 8008f5e <_fflush_r+0x1a>
 8008f5a:	f000 f887 	bl	800906c <__sinit>
 8008f5e:	4b14      	ldr	r3, [pc, #80]	; (8008fb0 <_fflush_r+0x6c>)
 8008f60:	429c      	cmp	r4, r3
 8008f62:	d11b      	bne.n	8008f9c <_fflush_r+0x58>
 8008f64:	686c      	ldr	r4, [r5, #4]
 8008f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d0ef      	beq.n	8008f4e <_fflush_r+0xa>
 8008f6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f70:	07d0      	lsls	r0, r2, #31
 8008f72:	d404      	bmi.n	8008f7e <_fflush_r+0x3a>
 8008f74:	0599      	lsls	r1, r3, #22
 8008f76:	d402      	bmi.n	8008f7e <_fflush_r+0x3a>
 8008f78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f7a:	f7ff fcd0 	bl	800891e <__retarget_lock_acquire_recursive>
 8008f7e:	4628      	mov	r0, r5
 8008f80:	4621      	mov	r1, r4
 8008f82:	f7ff ff59 	bl	8008e38 <__sflush_r>
 8008f86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f88:	07da      	lsls	r2, r3, #31
 8008f8a:	4605      	mov	r5, r0
 8008f8c:	d4e0      	bmi.n	8008f50 <_fflush_r+0xc>
 8008f8e:	89a3      	ldrh	r3, [r4, #12]
 8008f90:	059b      	lsls	r3, r3, #22
 8008f92:	d4dd      	bmi.n	8008f50 <_fflush_r+0xc>
 8008f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f96:	f7ff fcc3 	bl	8008920 <__retarget_lock_release_recursive>
 8008f9a:	e7d9      	b.n	8008f50 <_fflush_r+0xc>
 8008f9c:	4b05      	ldr	r3, [pc, #20]	; (8008fb4 <_fflush_r+0x70>)
 8008f9e:	429c      	cmp	r4, r3
 8008fa0:	d101      	bne.n	8008fa6 <_fflush_r+0x62>
 8008fa2:	68ac      	ldr	r4, [r5, #8]
 8008fa4:	e7df      	b.n	8008f66 <_fflush_r+0x22>
 8008fa6:	4b04      	ldr	r3, [pc, #16]	; (8008fb8 <_fflush_r+0x74>)
 8008fa8:	429c      	cmp	r4, r3
 8008faa:	bf08      	it	eq
 8008fac:	68ec      	ldreq	r4, [r5, #12]
 8008fae:	e7da      	b.n	8008f66 <_fflush_r+0x22>
 8008fb0:	08009a34 	.word	0x08009a34
 8008fb4:	08009a54 	.word	0x08009a54
 8008fb8:	08009a14 	.word	0x08009a14

08008fbc <std>:
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	b510      	push	{r4, lr}
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	e9c0 3300 	strd	r3, r3, [r0]
 8008fc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fca:	6083      	str	r3, [r0, #8]
 8008fcc:	8181      	strh	r1, [r0, #12]
 8008fce:	6643      	str	r3, [r0, #100]	; 0x64
 8008fd0:	81c2      	strh	r2, [r0, #14]
 8008fd2:	6183      	str	r3, [r0, #24]
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	2208      	movs	r2, #8
 8008fd8:	305c      	adds	r0, #92	; 0x5c
 8008fda:	f7fd fb4d 	bl	8006678 <memset>
 8008fde:	4b05      	ldr	r3, [pc, #20]	; (8008ff4 <std+0x38>)
 8008fe0:	6263      	str	r3, [r4, #36]	; 0x24
 8008fe2:	4b05      	ldr	r3, [pc, #20]	; (8008ff8 <std+0x3c>)
 8008fe4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008fe6:	4b05      	ldr	r3, [pc, #20]	; (8008ffc <std+0x40>)
 8008fe8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008fea:	4b05      	ldr	r3, [pc, #20]	; (8009000 <std+0x44>)
 8008fec:	6224      	str	r4, [r4, #32]
 8008fee:	6323      	str	r3, [r4, #48]	; 0x30
 8008ff0:	bd10      	pop	{r4, pc}
 8008ff2:	bf00      	nop
 8008ff4:	08009309 	.word	0x08009309
 8008ff8:	0800932b 	.word	0x0800932b
 8008ffc:	08009363 	.word	0x08009363
 8009000:	08009387 	.word	0x08009387

08009004 <_cleanup_r>:
 8009004:	4901      	ldr	r1, [pc, #4]	; (800900c <_cleanup_r+0x8>)
 8009006:	f000 b8af 	b.w	8009168 <_fwalk_reent>
 800900a:	bf00      	nop
 800900c:	08008f45 	.word	0x08008f45

08009010 <__sfmoreglue>:
 8009010:	b570      	push	{r4, r5, r6, lr}
 8009012:	2268      	movs	r2, #104	; 0x68
 8009014:	1e4d      	subs	r5, r1, #1
 8009016:	4355      	muls	r5, r2
 8009018:	460e      	mov	r6, r1
 800901a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800901e:	f7fd fb9f 	bl	8006760 <_malloc_r>
 8009022:	4604      	mov	r4, r0
 8009024:	b140      	cbz	r0, 8009038 <__sfmoreglue+0x28>
 8009026:	2100      	movs	r1, #0
 8009028:	e9c0 1600 	strd	r1, r6, [r0]
 800902c:	300c      	adds	r0, #12
 800902e:	60a0      	str	r0, [r4, #8]
 8009030:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009034:	f7fd fb20 	bl	8006678 <memset>
 8009038:	4620      	mov	r0, r4
 800903a:	bd70      	pop	{r4, r5, r6, pc}

0800903c <__sfp_lock_acquire>:
 800903c:	4801      	ldr	r0, [pc, #4]	; (8009044 <__sfp_lock_acquire+0x8>)
 800903e:	f7ff bc6e 	b.w	800891e <__retarget_lock_acquire_recursive>
 8009042:	bf00      	nop
 8009044:	2000094d 	.word	0x2000094d

08009048 <__sfp_lock_release>:
 8009048:	4801      	ldr	r0, [pc, #4]	; (8009050 <__sfp_lock_release+0x8>)
 800904a:	f7ff bc69 	b.w	8008920 <__retarget_lock_release_recursive>
 800904e:	bf00      	nop
 8009050:	2000094d 	.word	0x2000094d

08009054 <__sinit_lock_acquire>:
 8009054:	4801      	ldr	r0, [pc, #4]	; (800905c <__sinit_lock_acquire+0x8>)
 8009056:	f7ff bc62 	b.w	800891e <__retarget_lock_acquire_recursive>
 800905a:	bf00      	nop
 800905c:	2000094e 	.word	0x2000094e

08009060 <__sinit_lock_release>:
 8009060:	4801      	ldr	r0, [pc, #4]	; (8009068 <__sinit_lock_release+0x8>)
 8009062:	f7ff bc5d 	b.w	8008920 <__retarget_lock_release_recursive>
 8009066:	bf00      	nop
 8009068:	2000094e 	.word	0x2000094e

0800906c <__sinit>:
 800906c:	b510      	push	{r4, lr}
 800906e:	4604      	mov	r4, r0
 8009070:	f7ff fff0 	bl	8009054 <__sinit_lock_acquire>
 8009074:	69a3      	ldr	r3, [r4, #24]
 8009076:	b11b      	cbz	r3, 8009080 <__sinit+0x14>
 8009078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800907c:	f7ff bff0 	b.w	8009060 <__sinit_lock_release>
 8009080:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009084:	6523      	str	r3, [r4, #80]	; 0x50
 8009086:	4b13      	ldr	r3, [pc, #76]	; (80090d4 <__sinit+0x68>)
 8009088:	4a13      	ldr	r2, [pc, #76]	; (80090d8 <__sinit+0x6c>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	62a2      	str	r2, [r4, #40]	; 0x28
 800908e:	42a3      	cmp	r3, r4
 8009090:	bf04      	itt	eq
 8009092:	2301      	moveq	r3, #1
 8009094:	61a3      	streq	r3, [r4, #24]
 8009096:	4620      	mov	r0, r4
 8009098:	f000 f820 	bl	80090dc <__sfp>
 800909c:	6060      	str	r0, [r4, #4]
 800909e:	4620      	mov	r0, r4
 80090a0:	f000 f81c 	bl	80090dc <__sfp>
 80090a4:	60a0      	str	r0, [r4, #8]
 80090a6:	4620      	mov	r0, r4
 80090a8:	f000 f818 	bl	80090dc <__sfp>
 80090ac:	2200      	movs	r2, #0
 80090ae:	60e0      	str	r0, [r4, #12]
 80090b0:	2104      	movs	r1, #4
 80090b2:	6860      	ldr	r0, [r4, #4]
 80090b4:	f7ff ff82 	bl	8008fbc <std>
 80090b8:	68a0      	ldr	r0, [r4, #8]
 80090ba:	2201      	movs	r2, #1
 80090bc:	2109      	movs	r1, #9
 80090be:	f7ff ff7d 	bl	8008fbc <std>
 80090c2:	68e0      	ldr	r0, [r4, #12]
 80090c4:	2202      	movs	r2, #2
 80090c6:	2112      	movs	r1, #18
 80090c8:	f7ff ff78 	bl	8008fbc <std>
 80090cc:	2301      	movs	r3, #1
 80090ce:	61a3      	str	r3, [r4, #24]
 80090d0:	e7d2      	b.n	8009078 <__sinit+0xc>
 80090d2:	bf00      	nop
 80090d4:	0800969c 	.word	0x0800969c
 80090d8:	08009005 	.word	0x08009005

080090dc <__sfp>:
 80090dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090de:	4607      	mov	r7, r0
 80090e0:	f7ff ffac 	bl	800903c <__sfp_lock_acquire>
 80090e4:	4b1e      	ldr	r3, [pc, #120]	; (8009160 <__sfp+0x84>)
 80090e6:	681e      	ldr	r6, [r3, #0]
 80090e8:	69b3      	ldr	r3, [r6, #24]
 80090ea:	b913      	cbnz	r3, 80090f2 <__sfp+0x16>
 80090ec:	4630      	mov	r0, r6
 80090ee:	f7ff ffbd 	bl	800906c <__sinit>
 80090f2:	3648      	adds	r6, #72	; 0x48
 80090f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80090f8:	3b01      	subs	r3, #1
 80090fa:	d503      	bpl.n	8009104 <__sfp+0x28>
 80090fc:	6833      	ldr	r3, [r6, #0]
 80090fe:	b30b      	cbz	r3, 8009144 <__sfp+0x68>
 8009100:	6836      	ldr	r6, [r6, #0]
 8009102:	e7f7      	b.n	80090f4 <__sfp+0x18>
 8009104:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009108:	b9d5      	cbnz	r5, 8009140 <__sfp+0x64>
 800910a:	4b16      	ldr	r3, [pc, #88]	; (8009164 <__sfp+0x88>)
 800910c:	60e3      	str	r3, [r4, #12]
 800910e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009112:	6665      	str	r5, [r4, #100]	; 0x64
 8009114:	f7ff fc02 	bl	800891c <__retarget_lock_init_recursive>
 8009118:	f7ff ff96 	bl	8009048 <__sfp_lock_release>
 800911c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009120:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009124:	6025      	str	r5, [r4, #0]
 8009126:	61a5      	str	r5, [r4, #24]
 8009128:	2208      	movs	r2, #8
 800912a:	4629      	mov	r1, r5
 800912c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009130:	f7fd faa2 	bl	8006678 <memset>
 8009134:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009138:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800913c:	4620      	mov	r0, r4
 800913e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009140:	3468      	adds	r4, #104	; 0x68
 8009142:	e7d9      	b.n	80090f8 <__sfp+0x1c>
 8009144:	2104      	movs	r1, #4
 8009146:	4638      	mov	r0, r7
 8009148:	f7ff ff62 	bl	8009010 <__sfmoreglue>
 800914c:	4604      	mov	r4, r0
 800914e:	6030      	str	r0, [r6, #0]
 8009150:	2800      	cmp	r0, #0
 8009152:	d1d5      	bne.n	8009100 <__sfp+0x24>
 8009154:	f7ff ff78 	bl	8009048 <__sfp_lock_release>
 8009158:	230c      	movs	r3, #12
 800915a:	603b      	str	r3, [r7, #0]
 800915c:	e7ee      	b.n	800913c <__sfp+0x60>
 800915e:	bf00      	nop
 8009160:	0800969c 	.word	0x0800969c
 8009164:	ffff0001 	.word	0xffff0001

08009168 <_fwalk_reent>:
 8009168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800916c:	4606      	mov	r6, r0
 800916e:	4688      	mov	r8, r1
 8009170:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009174:	2700      	movs	r7, #0
 8009176:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800917a:	f1b9 0901 	subs.w	r9, r9, #1
 800917e:	d505      	bpl.n	800918c <_fwalk_reent+0x24>
 8009180:	6824      	ldr	r4, [r4, #0]
 8009182:	2c00      	cmp	r4, #0
 8009184:	d1f7      	bne.n	8009176 <_fwalk_reent+0xe>
 8009186:	4638      	mov	r0, r7
 8009188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800918c:	89ab      	ldrh	r3, [r5, #12]
 800918e:	2b01      	cmp	r3, #1
 8009190:	d907      	bls.n	80091a2 <_fwalk_reent+0x3a>
 8009192:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009196:	3301      	adds	r3, #1
 8009198:	d003      	beq.n	80091a2 <_fwalk_reent+0x3a>
 800919a:	4629      	mov	r1, r5
 800919c:	4630      	mov	r0, r6
 800919e:	47c0      	blx	r8
 80091a0:	4307      	orrs	r7, r0
 80091a2:	3568      	adds	r5, #104	; 0x68
 80091a4:	e7e9      	b.n	800917a <_fwalk_reent+0x12>

080091a6 <__swhatbuf_r>:
 80091a6:	b570      	push	{r4, r5, r6, lr}
 80091a8:	460e      	mov	r6, r1
 80091aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091ae:	2900      	cmp	r1, #0
 80091b0:	b096      	sub	sp, #88	; 0x58
 80091b2:	4614      	mov	r4, r2
 80091b4:	461d      	mov	r5, r3
 80091b6:	da08      	bge.n	80091ca <__swhatbuf_r+0x24>
 80091b8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80091bc:	2200      	movs	r2, #0
 80091be:	602a      	str	r2, [r5, #0]
 80091c0:	061a      	lsls	r2, r3, #24
 80091c2:	d410      	bmi.n	80091e6 <__swhatbuf_r+0x40>
 80091c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091c8:	e00e      	b.n	80091e8 <__swhatbuf_r+0x42>
 80091ca:	466a      	mov	r2, sp
 80091cc:	f000 f902 	bl	80093d4 <_fstat_r>
 80091d0:	2800      	cmp	r0, #0
 80091d2:	dbf1      	blt.n	80091b8 <__swhatbuf_r+0x12>
 80091d4:	9a01      	ldr	r2, [sp, #4]
 80091d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80091da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80091de:	425a      	negs	r2, r3
 80091e0:	415a      	adcs	r2, r3
 80091e2:	602a      	str	r2, [r5, #0]
 80091e4:	e7ee      	b.n	80091c4 <__swhatbuf_r+0x1e>
 80091e6:	2340      	movs	r3, #64	; 0x40
 80091e8:	2000      	movs	r0, #0
 80091ea:	6023      	str	r3, [r4, #0]
 80091ec:	b016      	add	sp, #88	; 0x58
 80091ee:	bd70      	pop	{r4, r5, r6, pc}

080091f0 <__smakebuf_r>:
 80091f0:	898b      	ldrh	r3, [r1, #12]
 80091f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091f4:	079d      	lsls	r5, r3, #30
 80091f6:	4606      	mov	r6, r0
 80091f8:	460c      	mov	r4, r1
 80091fa:	d507      	bpl.n	800920c <__smakebuf_r+0x1c>
 80091fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009200:	6023      	str	r3, [r4, #0]
 8009202:	6123      	str	r3, [r4, #16]
 8009204:	2301      	movs	r3, #1
 8009206:	6163      	str	r3, [r4, #20]
 8009208:	b002      	add	sp, #8
 800920a:	bd70      	pop	{r4, r5, r6, pc}
 800920c:	ab01      	add	r3, sp, #4
 800920e:	466a      	mov	r2, sp
 8009210:	f7ff ffc9 	bl	80091a6 <__swhatbuf_r>
 8009214:	9900      	ldr	r1, [sp, #0]
 8009216:	4605      	mov	r5, r0
 8009218:	4630      	mov	r0, r6
 800921a:	f7fd faa1 	bl	8006760 <_malloc_r>
 800921e:	b948      	cbnz	r0, 8009234 <__smakebuf_r+0x44>
 8009220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009224:	059a      	lsls	r2, r3, #22
 8009226:	d4ef      	bmi.n	8009208 <__smakebuf_r+0x18>
 8009228:	f023 0303 	bic.w	r3, r3, #3
 800922c:	f043 0302 	orr.w	r3, r3, #2
 8009230:	81a3      	strh	r3, [r4, #12]
 8009232:	e7e3      	b.n	80091fc <__smakebuf_r+0xc>
 8009234:	4b0d      	ldr	r3, [pc, #52]	; (800926c <__smakebuf_r+0x7c>)
 8009236:	62b3      	str	r3, [r6, #40]	; 0x28
 8009238:	89a3      	ldrh	r3, [r4, #12]
 800923a:	6020      	str	r0, [r4, #0]
 800923c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009240:	81a3      	strh	r3, [r4, #12]
 8009242:	9b00      	ldr	r3, [sp, #0]
 8009244:	6163      	str	r3, [r4, #20]
 8009246:	9b01      	ldr	r3, [sp, #4]
 8009248:	6120      	str	r0, [r4, #16]
 800924a:	b15b      	cbz	r3, 8009264 <__smakebuf_r+0x74>
 800924c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009250:	4630      	mov	r0, r6
 8009252:	f000 f8d1 	bl	80093f8 <_isatty_r>
 8009256:	b128      	cbz	r0, 8009264 <__smakebuf_r+0x74>
 8009258:	89a3      	ldrh	r3, [r4, #12]
 800925a:	f023 0303 	bic.w	r3, r3, #3
 800925e:	f043 0301 	orr.w	r3, r3, #1
 8009262:	81a3      	strh	r3, [r4, #12]
 8009264:	89a0      	ldrh	r0, [r4, #12]
 8009266:	4305      	orrs	r5, r0
 8009268:	81a5      	strh	r5, [r4, #12]
 800926a:	e7cd      	b.n	8009208 <__smakebuf_r+0x18>
 800926c:	08009005 	.word	0x08009005

08009270 <_malloc_usable_size_r>:
 8009270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009274:	1f18      	subs	r0, r3, #4
 8009276:	2b00      	cmp	r3, #0
 8009278:	bfbc      	itt	lt
 800927a:	580b      	ldrlt	r3, [r1, r0]
 800927c:	18c0      	addlt	r0, r0, r3
 800927e:	4770      	bx	lr

08009280 <_raise_r>:
 8009280:	291f      	cmp	r1, #31
 8009282:	b538      	push	{r3, r4, r5, lr}
 8009284:	4604      	mov	r4, r0
 8009286:	460d      	mov	r5, r1
 8009288:	d904      	bls.n	8009294 <_raise_r+0x14>
 800928a:	2316      	movs	r3, #22
 800928c:	6003      	str	r3, [r0, #0]
 800928e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009292:	bd38      	pop	{r3, r4, r5, pc}
 8009294:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009296:	b112      	cbz	r2, 800929e <_raise_r+0x1e>
 8009298:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800929c:	b94b      	cbnz	r3, 80092b2 <_raise_r+0x32>
 800929e:	4620      	mov	r0, r4
 80092a0:	f000 f830 	bl	8009304 <_getpid_r>
 80092a4:	462a      	mov	r2, r5
 80092a6:	4601      	mov	r1, r0
 80092a8:	4620      	mov	r0, r4
 80092aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092ae:	f000 b817 	b.w	80092e0 <_kill_r>
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d00a      	beq.n	80092cc <_raise_r+0x4c>
 80092b6:	1c59      	adds	r1, r3, #1
 80092b8:	d103      	bne.n	80092c2 <_raise_r+0x42>
 80092ba:	2316      	movs	r3, #22
 80092bc:	6003      	str	r3, [r0, #0]
 80092be:	2001      	movs	r0, #1
 80092c0:	e7e7      	b.n	8009292 <_raise_r+0x12>
 80092c2:	2400      	movs	r4, #0
 80092c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80092c8:	4628      	mov	r0, r5
 80092ca:	4798      	blx	r3
 80092cc:	2000      	movs	r0, #0
 80092ce:	e7e0      	b.n	8009292 <_raise_r+0x12>

080092d0 <raise>:
 80092d0:	4b02      	ldr	r3, [pc, #8]	; (80092dc <raise+0xc>)
 80092d2:	4601      	mov	r1, r0
 80092d4:	6818      	ldr	r0, [r3, #0]
 80092d6:	f7ff bfd3 	b.w	8009280 <_raise_r>
 80092da:	bf00      	nop
 80092dc:	20000020 	.word	0x20000020

080092e0 <_kill_r>:
 80092e0:	b538      	push	{r3, r4, r5, lr}
 80092e2:	4d07      	ldr	r5, [pc, #28]	; (8009300 <_kill_r+0x20>)
 80092e4:	2300      	movs	r3, #0
 80092e6:	4604      	mov	r4, r0
 80092e8:	4608      	mov	r0, r1
 80092ea:	4611      	mov	r1, r2
 80092ec:	602b      	str	r3, [r5, #0]
 80092ee:	f7fa fab3 	bl	8003858 <_kill>
 80092f2:	1c43      	adds	r3, r0, #1
 80092f4:	d102      	bne.n	80092fc <_kill_r+0x1c>
 80092f6:	682b      	ldr	r3, [r5, #0]
 80092f8:	b103      	cbz	r3, 80092fc <_kill_r+0x1c>
 80092fa:	6023      	str	r3, [r4, #0]
 80092fc:	bd38      	pop	{r3, r4, r5, pc}
 80092fe:	bf00      	nop
 8009300:	20000948 	.word	0x20000948

08009304 <_getpid_r>:
 8009304:	f7fa baa0 	b.w	8003848 <_getpid>

08009308 <__sread>:
 8009308:	b510      	push	{r4, lr}
 800930a:	460c      	mov	r4, r1
 800930c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009310:	f000 f894 	bl	800943c <_read_r>
 8009314:	2800      	cmp	r0, #0
 8009316:	bfab      	itete	ge
 8009318:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800931a:	89a3      	ldrhlt	r3, [r4, #12]
 800931c:	181b      	addge	r3, r3, r0
 800931e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009322:	bfac      	ite	ge
 8009324:	6563      	strge	r3, [r4, #84]	; 0x54
 8009326:	81a3      	strhlt	r3, [r4, #12]
 8009328:	bd10      	pop	{r4, pc}

0800932a <__swrite>:
 800932a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800932e:	461f      	mov	r7, r3
 8009330:	898b      	ldrh	r3, [r1, #12]
 8009332:	05db      	lsls	r3, r3, #23
 8009334:	4605      	mov	r5, r0
 8009336:	460c      	mov	r4, r1
 8009338:	4616      	mov	r6, r2
 800933a:	d505      	bpl.n	8009348 <__swrite+0x1e>
 800933c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009340:	2302      	movs	r3, #2
 8009342:	2200      	movs	r2, #0
 8009344:	f000 f868 	bl	8009418 <_lseek_r>
 8009348:	89a3      	ldrh	r3, [r4, #12]
 800934a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800934e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009352:	81a3      	strh	r3, [r4, #12]
 8009354:	4632      	mov	r2, r6
 8009356:	463b      	mov	r3, r7
 8009358:	4628      	mov	r0, r5
 800935a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800935e:	f000 b817 	b.w	8009390 <_write_r>

08009362 <__sseek>:
 8009362:	b510      	push	{r4, lr}
 8009364:	460c      	mov	r4, r1
 8009366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800936a:	f000 f855 	bl	8009418 <_lseek_r>
 800936e:	1c43      	adds	r3, r0, #1
 8009370:	89a3      	ldrh	r3, [r4, #12]
 8009372:	bf15      	itete	ne
 8009374:	6560      	strne	r0, [r4, #84]	; 0x54
 8009376:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800937a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800937e:	81a3      	strheq	r3, [r4, #12]
 8009380:	bf18      	it	ne
 8009382:	81a3      	strhne	r3, [r4, #12]
 8009384:	bd10      	pop	{r4, pc}

08009386 <__sclose>:
 8009386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800938a:	f000 b813 	b.w	80093b4 <_close_r>
	...

08009390 <_write_r>:
 8009390:	b538      	push	{r3, r4, r5, lr}
 8009392:	4d07      	ldr	r5, [pc, #28]	; (80093b0 <_write_r+0x20>)
 8009394:	4604      	mov	r4, r0
 8009396:	4608      	mov	r0, r1
 8009398:	4611      	mov	r1, r2
 800939a:	2200      	movs	r2, #0
 800939c:	602a      	str	r2, [r5, #0]
 800939e:	461a      	mov	r2, r3
 80093a0:	f7fa fa91 	bl	80038c6 <_write>
 80093a4:	1c43      	adds	r3, r0, #1
 80093a6:	d102      	bne.n	80093ae <_write_r+0x1e>
 80093a8:	682b      	ldr	r3, [r5, #0]
 80093aa:	b103      	cbz	r3, 80093ae <_write_r+0x1e>
 80093ac:	6023      	str	r3, [r4, #0]
 80093ae:	bd38      	pop	{r3, r4, r5, pc}
 80093b0:	20000948 	.word	0x20000948

080093b4 <_close_r>:
 80093b4:	b538      	push	{r3, r4, r5, lr}
 80093b6:	4d06      	ldr	r5, [pc, #24]	; (80093d0 <_close_r+0x1c>)
 80093b8:	2300      	movs	r3, #0
 80093ba:	4604      	mov	r4, r0
 80093bc:	4608      	mov	r0, r1
 80093be:	602b      	str	r3, [r5, #0]
 80093c0:	f7fa fa9d 	bl	80038fe <_close>
 80093c4:	1c43      	adds	r3, r0, #1
 80093c6:	d102      	bne.n	80093ce <_close_r+0x1a>
 80093c8:	682b      	ldr	r3, [r5, #0]
 80093ca:	b103      	cbz	r3, 80093ce <_close_r+0x1a>
 80093cc:	6023      	str	r3, [r4, #0]
 80093ce:	bd38      	pop	{r3, r4, r5, pc}
 80093d0:	20000948 	.word	0x20000948

080093d4 <_fstat_r>:
 80093d4:	b538      	push	{r3, r4, r5, lr}
 80093d6:	4d07      	ldr	r5, [pc, #28]	; (80093f4 <_fstat_r+0x20>)
 80093d8:	2300      	movs	r3, #0
 80093da:	4604      	mov	r4, r0
 80093dc:	4608      	mov	r0, r1
 80093de:	4611      	mov	r1, r2
 80093e0:	602b      	str	r3, [r5, #0]
 80093e2:	f7fa fa98 	bl	8003916 <_fstat>
 80093e6:	1c43      	adds	r3, r0, #1
 80093e8:	d102      	bne.n	80093f0 <_fstat_r+0x1c>
 80093ea:	682b      	ldr	r3, [r5, #0]
 80093ec:	b103      	cbz	r3, 80093f0 <_fstat_r+0x1c>
 80093ee:	6023      	str	r3, [r4, #0]
 80093f0:	bd38      	pop	{r3, r4, r5, pc}
 80093f2:	bf00      	nop
 80093f4:	20000948 	.word	0x20000948

080093f8 <_isatty_r>:
 80093f8:	b538      	push	{r3, r4, r5, lr}
 80093fa:	4d06      	ldr	r5, [pc, #24]	; (8009414 <_isatty_r+0x1c>)
 80093fc:	2300      	movs	r3, #0
 80093fe:	4604      	mov	r4, r0
 8009400:	4608      	mov	r0, r1
 8009402:	602b      	str	r3, [r5, #0]
 8009404:	f7fa fa97 	bl	8003936 <_isatty>
 8009408:	1c43      	adds	r3, r0, #1
 800940a:	d102      	bne.n	8009412 <_isatty_r+0x1a>
 800940c:	682b      	ldr	r3, [r5, #0]
 800940e:	b103      	cbz	r3, 8009412 <_isatty_r+0x1a>
 8009410:	6023      	str	r3, [r4, #0]
 8009412:	bd38      	pop	{r3, r4, r5, pc}
 8009414:	20000948 	.word	0x20000948

08009418 <_lseek_r>:
 8009418:	b538      	push	{r3, r4, r5, lr}
 800941a:	4d07      	ldr	r5, [pc, #28]	; (8009438 <_lseek_r+0x20>)
 800941c:	4604      	mov	r4, r0
 800941e:	4608      	mov	r0, r1
 8009420:	4611      	mov	r1, r2
 8009422:	2200      	movs	r2, #0
 8009424:	602a      	str	r2, [r5, #0]
 8009426:	461a      	mov	r2, r3
 8009428:	f7fa fa90 	bl	800394c <_lseek>
 800942c:	1c43      	adds	r3, r0, #1
 800942e:	d102      	bne.n	8009436 <_lseek_r+0x1e>
 8009430:	682b      	ldr	r3, [r5, #0]
 8009432:	b103      	cbz	r3, 8009436 <_lseek_r+0x1e>
 8009434:	6023      	str	r3, [r4, #0]
 8009436:	bd38      	pop	{r3, r4, r5, pc}
 8009438:	20000948 	.word	0x20000948

0800943c <_read_r>:
 800943c:	b538      	push	{r3, r4, r5, lr}
 800943e:	4d07      	ldr	r5, [pc, #28]	; (800945c <_read_r+0x20>)
 8009440:	4604      	mov	r4, r0
 8009442:	4608      	mov	r0, r1
 8009444:	4611      	mov	r1, r2
 8009446:	2200      	movs	r2, #0
 8009448:	602a      	str	r2, [r5, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	f7fa fa1e 	bl	800388c <_read>
 8009450:	1c43      	adds	r3, r0, #1
 8009452:	d102      	bne.n	800945a <_read_r+0x1e>
 8009454:	682b      	ldr	r3, [r5, #0]
 8009456:	b103      	cbz	r3, 800945a <_read_r+0x1e>
 8009458:	6023      	str	r3, [r4, #0]
 800945a:	bd38      	pop	{r3, r4, r5, pc}
 800945c:	20000948 	.word	0x20000948

08009460 <_init>:
 8009460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009462:	bf00      	nop
 8009464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009466:	bc08      	pop	{r3}
 8009468:	469e      	mov	lr, r3
 800946a:	4770      	bx	lr

0800946c <_fini>:
 800946c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946e:	bf00      	nop
 8009470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009472:	bc08      	pop	{r3}
 8009474:	469e      	mov	lr, r3
 8009476:	4770      	bx	lr
