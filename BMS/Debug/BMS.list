
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a184  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  0800a358  0800a358  0001a358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a964  0800a964  000225a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a964  0800a964  0001a964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a96c  0800a96c  000225a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a96c  0800a96c  0001a96c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a970  0800a970  0001a970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000025a4  20000000  0800a974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  200025a4  0800cf18  000225a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000298c  0800cf18  0002298c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000225a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b17  00000000  00000000  000225d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ec  00000000  00000000  000370eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  0003a2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  0003b3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002550c  00000000  00000000  0003c398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001640d  00000000  00000000  000618a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d055e  00000000  00000000  00077cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014820f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000572c  00000000  00000000  00148260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200025a4 	.word	0x200025a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a33c 	.word	0x0800a33c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200025a8 	.word	0x200025a8
 800020c:	0800a33c 	.word	0x0800a33c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b974 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <FEB_BMS_Precharge_Open>:
extern CAN_HandleTypeDef hcan1;
extern UART_HandleTypeDef huart2;

// ********************************** Functions **********************************

void FEB_BMS_Precharge_Open(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <FEB_BMS_Precharge_Open+0x14>)
 8000fd6:	f004 fad1 	bl	800557c <HAL_GPIO_WritePin>
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40020800 	.word	0x40020800

08000fe4 <FEB_BMS_Precharge_Close>:

void FEB_BMS_Precharge_Close(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2104      	movs	r1, #4
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <FEB_BMS_Precharge_Close+0x14>)
 8000fee:	f004 fac5 	bl	800557c <HAL_GPIO_WritePin>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40020800 	.word	0x40020800

08000ffc <FEB_BMS_Shutdown_Startup>:
extern CAN_HandleTypeDef hcan1;
extern UART_HandleTypeDef huart2;

// ********************************** Functions **********************************

void FEB_BMS_Shutdown_Startup(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	2102      	movs	r1, #2
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <FEB_BMS_Shutdown_Startup+0x14>)
 8001006:	f004 fab9 	bl	800557c <HAL_GPIO_WritePin>
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40020800 	.word	0x40020800

08001014 <FEB_BMS_Shutdown_Initiate>:

void FEB_BMS_Shutdown_Initiate(void) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b0a0      	sub	sp, #128	; 0x80
 8001018:	af00      	add	r7, sp, #0
	// Shutdown Circuit
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	2102      	movs	r1, #2
 800101e:	480a      	ldr	r0, [pc, #40]	; (8001048 <FEB_BMS_Shutdown_Initiate+0x34>)
 8001020:	f004 faac 	bl	800557c <HAL_GPIO_WritePin>

	// Broadcast Message
	char str[128];
	sprintf(str, "Shutdown!\n");
 8001024:	463b      	mov	r3, r7
 8001026:	4909      	ldr	r1, [pc, #36]	; (800104c <FEB_BMS_Shutdown_Initiate+0x38>)
 8001028:	4618      	mov	r0, r3
 800102a:	f006 ffaf 	bl	8007f8c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 100);
 800102e:	463b      	mov	r3, r7
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff f8ed 	bl	8000210 <strlen>
 8001036:	4603      	mov	r3, r0
 8001038:	b29a      	uxth	r2, r3
 800103a:	4639      	mov	r1, r7
 800103c:	2364      	movs	r3, #100	; 0x64
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <FEB_BMS_Shutdown_Initiate+0x3c>)
 8001040:	f005 fe93 	bl	8006d6a <HAL_UART_Transmit>
	if (FEB_LTC6811_Balance_Cells_State == 1) {
		FEB_LTC6811_Clear_Balance_Cells();
	}

	// Do nothing
	while (1) {}
 8001044:	e7fe      	b.n	8001044 <FEB_BMS_Shutdown_Initiate+0x30>
 8001046:	bf00      	nop
 8001048:	40020800 	.word	0x40020800
 800104c:	0800a358 	.word	0x0800a358
 8001050:	2000292c 	.word	0x2000292c

08001054 <FEB_BMS_State_Validate>:

#include "FEB_BMS_State.h"

// ********************************** Functions **********************************

void FEB_BMS_State_Validate(void) {
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
	if (FEB_CAN_CHARGER_START_CHARGE == 1 && FEB_LTC6811_Balance_Cells_State == 1) {
		FEB_BMS_Shutdown_Initiate();
	}
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <FEB_CAN_Init>:
uint8_t FEB_CAN_RxData[8];
uint32_t FEB_CAN_TxMailbox;

// ******************** CAN ********************

void FEB_CAN_Init() {
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	FEB_CAN_Filter_Config();
 8001068:	f000 f814 	bl	8001094 <FEB_CAN_Filter_Config>
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800106c:	4807      	ldr	r0, [pc, #28]	; (800108c <FEB_CAN_Init+0x28>)
 800106e:	f003 fc33 	bl	80048d8 <HAL_CAN_Start>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <FEB_CAN_Init+0x18>
		FEB_BMS_Shutdown_Initiate();
 8001078:	f7ff ffcc 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
	}
	HAL_CAN_ActivateNotification(&hcan1, FEB_CAN_FIFO_Interrupt);
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <FEB_CAN_Init+0x2c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	4802      	ldr	r0, [pc, #8]	; (800108c <FEB_CAN_Init+0x28>)
 8001084:	f003 fd7e 	bl	8004b84 <HAL_CAN_ActivateNotification>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20002884 	.word	0x20002884
 8001090:	20000000 	.word	0x20000000

08001094 <FEB_CAN_Filter_Config>:

void FEB_CAN_Filter_Config() {
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
	uint8_t bank = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	71fb      	strb	r3, [r7, #7]
	bank = FEB_CAN_IVT_Filter_Config(&hcan1, FEB_CAN_FIFO_Assignment, bank);
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <FEB_CAN_Filter_Config+0x38>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	79fa      	ldrb	r2, [r7, #7]
 80010a4:	4619      	mov	r1, r3
 80010a6:	480a      	ldr	r0, [pc, #40]	; (80010d0 <FEB_CAN_Filter_Config+0x3c>)
 80010a8:	f000 f8e4 	bl	8001274 <FEB_CAN_IVT_Filter_Config>
 80010ac:	4603      	mov	r3, r0
 80010ae:	71fb      	strb	r3, [r7, #7]
	bank = FEB_CAN_Charger_Filter_Config(&hcan1, FEB_CAN_FIFO_Assignment, bank);
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <FEB_CAN_Filter_Config+0x38>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	79fa      	ldrb	r2, [r7, #7]
 80010b6:	4619      	mov	r1, r3
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <FEB_CAN_Filter_Config+0x3c>)
 80010ba:	f000 f82d 	bl	8001118 <FEB_CAN_Charger_Filter_Config>
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200025dc 	.word	0x200025dc
 80010d0:	20002884 	.word	0x20002884

080010d4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, FEB_CAN_FIFO_Assignment, &FEB_CAN_RxHeader, FEB_CAN_RxData) == HAL_OK) {
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80010e4:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f003 fc3a 	bl	8004960 <HAL_CAN_GetRxMessage>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d107      	bne.n	8001102 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
		FEB_CAN_IVT_Store_Msg(&FEB_CAN_RxHeader, FEB_CAN_RxData);
 80010f2:	4907      	ldr	r1, [pc, #28]	; (8001110 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80010f4:	4807      	ldr	r0, [pc, #28]	; (8001114 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80010f6:	f000 f8fd 	bl	80012f4 <FEB_CAN_IVT_Store_Msg>
		FEB_CAN_Charger_Store_Msg(&FEB_CAN_RxHeader, FEB_CAN_RxData);
 80010fa:	4905      	ldr	r1, [pc, #20]	; (8001110 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80010fe:	f000 f83f 	bl	8001180 <FEB_CAN_Charger_Store_Msg>
	}
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200025dc 	.word	0x200025dc
 8001110:	200025e0 	.word	0x200025e0
 8001114:	200025c0 	.word	0x200025c0

08001118 <FEB_CAN_Charger_Filter_Config>:
	FEB_CAN_Charger_State_Bool = 0;
}

// ******************** CAN ********************

uint8_t FEB_CAN_Charger_Filter_Config(CAN_HandleTypeDef* hcan, uint8_t FIFO_Assignment, uint8_t bank) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	; 0x30
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	70fb      	strb	r3, [r7, #3]
 8001124:	4613      	mov	r3, r2
 8001126:	70bb      	strb	r3, [r7, #2]
	CAN_FilterTypeDef my_can_filter_config;

	my_can_filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8001128:	2301      	movs	r3, #1
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
	my_can_filter_config.FilterBank = bank;
 800112c:	78bb      	ldrb	r3, [r7, #2]
 800112e:	61fb      	str	r3, [r7, #28]
	my_can_filter_config.FilterFIFOAssignment = FIFO_Assignment;
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	61bb      	str	r3, [r7, #24]
	my_can_filter_config.FilterIdHigh = FEB_CAN_CHARGER_CHARGER_ID >> 13; 			// First 16 bits
 8001134:	f24c 73fa 	movw	r3, #51194	; 0xc7fa
 8001138:	60bb      	str	r3, [r7, #8]
	my_can_filter_config.FilterIdLow = (FEB_CAN_CHARGER_CHARGER_ID & 0x1FFF) << 3;	// Last 13 bits
 800113a:	f248 7328 	movw	r3, #34600	; 0x8728
 800113e:	60fb      	str	r3, [r7, #12]
	my_can_filter_config.FilterMaskIdHigh = 0xFFFF; 								// Mask first 16 bits
 8001140:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001144:	613b      	str	r3, [r7, #16]
	my_can_filter_config.FilterMaskIdLow = 0xFFF8;									// Mask last 13 bits
 8001146:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800114a:	617b      	str	r3, [r7, #20]
	my_can_filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
	my_can_filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8001150:	2301      	movs	r3, #1
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
	my_can_filter_config.SlaveStartFilterBank = 27;
 8001154:	231b      	movs	r3, #27
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_CAN_ConfigFilter(hcan, &my_can_filter_config)) {
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	4619      	mov	r1, r3
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f003 fada 	bl	8004718 <HAL_CAN_ConfigFilter>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <FEB_CAN_Charger_Filter_Config+0x56>
		Error_Handler();
 800116a:	f002 fe6f 	bl	8003e4c <Error_Handler>
	}

	return ++bank;
 800116e:	78bb      	ldrb	r3, [r7, #2]
 8001170:	3301      	adds	r3, #1
 8001172:	70bb      	strb	r3, [r7, #2]
 8001174:	78bb      	ldrb	r3, [r7, #2]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3730      	adds	r7, #48	; 0x30
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <FEB_CAN_Charger_Store_Msg>:
	if (HAL_CAN_AddTxMessage(hcan, &FEB_CAN_TxHeader, FEB_CAN_TxData, &FEB_CAN_TxMailbox) != HAL_OK) {
	  Error_Handler();
	}
}

void FEB_CAN_Charger_Store_Msg(CAN_RxHeaderTypeDef* pHeader, uint8_t RxData[]) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
	switch(pHeader->ExtId) {
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	4a17      	ldr	r2, [pc, #92]	; (80011ec <FEB_CAN_Charger_Store_Msg+0x6c>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d127      	bne.n	80011e4 <FEB_CAN_Charger_Store_Msg+0x64>
	    	case FEB_CAN_CHARGER_CHARGER_ID:
	    		FEB_CAN_Charger_Charger_Message.operating_voltage = (RxData[0] << 8) + RxData[1];
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b29b      	uxth	r3, r3
 800119a:	021b      	lsls	r3, r3, #8
 800119c:	b29a      	uxth	r2, r3
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	4413      	add	r3, r2
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <FEB_CAN_Charger_Store_Msg+0x70>)
 80011ac:	801a      	strh	r2, [r3, #0]
	    		FEB_CAN_Charger_Charger_Message.operating_current = (RxData[2] << 8) + RxData[3];
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	3302      	adds	r3, #2
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	3303      	adds	r3, #3
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	4413      	add	r3, r2
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <FEB_CAN_Charger_Store_Msg+0x70>)
 80011c8:	805a      	strh	r2, [r3, #2]
	    		FEB_CAN_Charger_Charger_Message.status = RxData[4];
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	3304      	adds	r3, #4
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <FEB_CAN_Charger_Store_Msg+0x70>)
 80011d4:	809a      	strh	r2, [r3, #4]
				FEB_CAN_Charger_Validate_Status(RxData[4]);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	3304      	adds	r3, #4
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 f809 	bl	80011f4 <FEB_CAN_Charger_Validate_Status>
				break;
 80011e2:	bf00      	nop
	}
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	18ff50e5 	.word	0x18ff50e5
 80011f0:	200025e8 	.word	0x200025e8

080011f4 <FEB_CAN_Charger_Validate_Status>:



// ******************** Charger Process Data ********************

void FEB_CAN_Charger_Validate_Status(uint8_t status) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
	// Failure bits, 0 (no error), 1 (error)
	uint8_t hardware_failure 			= (status >> 7) & 0b1;
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	09db      	lsrs	r3, r3, #7
 8001202:	73fb      	strb	r3, [r7, #15]
	uint8_t temperature_failure 		= (status >> 6) & 0b1;
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	099b      	lsrs	r3, r3, #6
 8001208:	b2db      	uxtb	r3, r3
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	73bb      	strb	r3, [r7, #14]
	uint8_t input_voltage_failure 		= (status >> 5) & 0b1;
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	737b      	strb	r3, [r7, #13]
	uint8_t starting_state_failure 		= (status >> 4) & 0b1;
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	091b      	lsrs	r3, r3, #4
 8001220:	b2db      	uxtb	r3, r3
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	733b      	strb	r3, [r7, #12]
	uint8_t communication_state_failure = (status >> 3) & 0b1;
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	08db      	lsrs	r3, r3, #3
 800122c:	b2db      	uxtb	r3, r3
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	72fb      	strb	r3, [r7, #11]

	if (hardware_failure == 1 			||
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d00b      	beq.n	8001252 <FEB_CAN_Charger_Validate_Status+0x5e>
 800123a:	7bbb      	ldrb	r3, [r7, #14]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d008      	beq.n	8001252 <FEB_CAN_Charger_Validate_Status+0x5e>
		temperature_failure == 1 		||
 8001240:	7b7b      	ldrb	r3, [r7, #13]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d005      	beq.n	8001252 <FEB_CAN_Charger_Validate_Status+0x5e>
		input_voltage_failure == 1		||
 8001246:	7b3b      	ldrb	r3, [r7, #12]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d002      	beq.n	8001252 <FEB_CAN_Charger_Validate_Status+0x5e>
		starting_state_failure == 1		||
 800124c:	7afb      	ldrb	r3, [r7, #11]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d101      	bne.n	8001256 <FEB_CAN_Charger_Validate_Status+0x62>
		communication_state_failure == 1) {
		FEB_BMS_Shutdown_Initiate();
 8001252:	f7ff fedf 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
	}
}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <FEB_CAN_Charger_Process>:

void FEB_CAN_Charger_Process(CAN_HandleTypeDef* hcan) {
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
	if (FEB_CAN_CHARGER_START_CHARGE == 0 || FEB_CAN_Charger_State_Bool == 1) {
		return;
 8001266:	bf00      	nop
	if (FEB_LTC6811_Cells_Charged() == 1) {
		FEB_CAN_Charger_Stop_Charge(hcan);
	} else {
		FEB_CAN_Charger_Transmit(hcan);
	}
}
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <FEB_CAN_IVT_Filter_Config>:
// ********************************** Functions **********************************


// ******************** CAN ********************

uint8_t FEB_CAN_IVT_Filter_Config(CAN_HandleTypeDef* hcan, uint8_t FIFO_Assignment, uint8_t bank) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b08e      	sub	sp, #56	; 0x38
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	70fb      	strb	r3, [r7, #3]
 8001280:	4613      	mov	r3, r2
 8001282:	70bb      	strb	r3, [r7, #2]
	for (int i = 0; i < 4; i++, bank++) {
 8001284:	2300      	movs	r3, #0
 8001286:	637b      	str	r3, [r7, #52]	; 0x34
 8001288:	e029      	b.n	80012de <FEB_CAN_IVT_Filter_Config+0x6a>
		CAN_FilterTypeDef filter_config;

		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 800128a:	2301      	movs	r3, #1
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
		filter_config.FilterBank = bank;
 800128e:	78bb      	ldrb	r3, [r7, #2]
 8001290:	623b      	str	r3, [r7, #32]
		filter_config.FilterFIFOAssignment = FIFO_Assignment;
 8001292:	78fb      	ldrb	r3, [r7, #3]
 8001294:	61fb      	str	r3, [r7, #28]
		filter_config.FilterIdHigh = FEB_CAN_IVT_Filter_ID_Arr[i] << 5;
 8001296:	4a16      	ldr	r2, [pc, #88]	; (80012f0 <FEB_CAN_IVT_Filter_Config+0x7c>)
 8001298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800129a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800129e:	015b      	lsls	r3, r3, #5
 80012a0:	60fb      	str	r3, [r7, #12]
		filter_config.FilterIdLow = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
		filter_config.FilterMaskIdHigh = 0x7FF << 5;
 80012a6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80012aa:	617b      	str	r3, [r7, #20]
		filter_config.FilterMaskIdLow = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61bb      	str	r3, [r7, #24]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 80012b0:	2300      	movs	r3, #0
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 80012b4:	2301      	movs	r3, #1
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.SlaveStartFilterBank = 27;
 80012b8:	231b      	movs	r3, #27
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30

		if(HAL_CAN_ConfigFilter(hcan, &filter_config)) {
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	4619      	mov	r1, r3
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f003 fa28 	bl	8004718 <HAL_CAN_ConfigFilter>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <FEB_CAN_IVT_Filter_Config+0x5e>
			Error_Handler();
 80012ce:	f002 fdbd 	bl	8003e4c <Error_Handler>
	for (int i = 0; i < 4; i++, bank++) {
 80012d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012d4:	3301      	adds	r3, #1
 80012d6:	637b      	str	r3, [r7, #52]	; 0x34
 80012d8:	78bb      	ldrb	r3, [r7, #2]
 80012da:	3301      	adds	r3, #1
 80012dc:	70bb      	strb	r3, [r7, #2]
 80012de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	ddd2      	ble.n	800128a <FEB_CAN_IVT_Filter_Config+0x16>
		}
	}
	return bank;
 80012e4:	78bb      	ldrb	r3, [r7, #2]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3738      	adds	r7, #56	; 0x38
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000004 	.word	0x20000004

080012f4 <FEB_CAN_IVT_Store_Msg>:

void FEB_CAN_IVT_Store_Msg(CAN_RxHeaderTypeDef* pHeader, uint8_t RxData[]) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
	uint32_t value;
    switch(pHeader->StdId) {
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f2a3 5321 	subw	r3, r3, #1313	; 0x521
 8001306:	2b03      	cmp	r3, #3
 8001308:	d87e      	bhi.n	8001408 <FEB_CAN_IVT_Store_Msg+0x114>
 800130a:	a201      	add	r2, pc, #4	; (adr r2, 8001310 <FEB_CAN_IVT_Store_Msg+0x1c>)
 800130c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001310:	08001321 	.word	0x08001321
 8001314:	0800135b 	.word	0x0800135b
 8001318:	08001395 	.word	0x08001395
 800131c:	080013cf 	.word	0x080013cf
    	case FEB_CAN_IVT_CURRENT_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	3302      	adds	r3, #2
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	061a      	lsls	r2, r3, #24
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	3303      	adds	r3, #3
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	041b      	lsls	r3, r3, #16
 8001330:	441a      	add	r2, r3
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	3304      	adds	r3, #4
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	4413      	add	r3, r2
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	3205      	adds	r2, #5
 8001340:	7812      	ldrb	r2, [r2, #0]
 8001342:	4413      	add	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
    	    FEB_CAN_IVT_MESSAGE.IVT_Current = unsignedToSignedLong(value);
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f000 f8f0 	bl	800152c <unsignedToSignedLong>
 800134c:	4603      	mov	r3, r0
 800134e:	4a30      	ldr	r2, [pc, #192]	; (8001410 <FEB_CAN_IVT_Store_Msg+0x11c>)
 8001350:	6013      	str	r3, [r2, #0]
    	    FEB_CAN_IVT_FLAG.IVT_Current = 1;
 8001352:	4b30      	ldr	r3, [pc, #192]	; (8001414 <FEB_CAN_IVT_Store_Msg+0x120>)
 8001354:	2201      	movs	r2, #1
 8001356:	701a      	strb	r2, [r3, #0]
    		break;
 8001358:	e056      	b.n	8001408 <FEB_CAN_IVT_Store_Msg+0x114>
    	case FEB_CAN_IVT_VOLTAGE1_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	3302      	adds	r3, #2
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	061a      	lsls	r2, r3, #24
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	3303      	adds	r3, #3
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	041b      	lsls	r3, r3, #16
 800136a:	441a      	add	r2, r3
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	3304      	adds	r3, #4
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	4413      	add	r3, r2
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	3205      	adds	r2, #5
 800137a:	7812      	ldrb	r2, [r2, #0]
 800137c:	4413      	add	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]
    	    FEB_CAN_IVT_MESSAGE.IVT_Voltage1 = unsignedToSignedLong(value);
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	f000 f8d3 	bl	800152c <unsignedToSignedLong>
 8001386:	4603      	mov	r3, r0
 8001388:	4a21      	ldr	r2, [pc, #132]	; (8001410 <FEB_CAN_IVT_Store_Msg+0x11c>)
 800138a:	6053      	str	r3, [r2, #4]
    	    FEB_CAN_IVT_FLAG.IVT_Voltage1 = 1;
 800138c:	4b21      	ldr	r3, [pc, #132]	; (8001414 <FEB_CAN_IVT_Store_Msg+0x120>)
 800138e:	2201      	movs	r2, #1
 8001390:	705a      	strb	r2, [r3, #1]
    		break;
 8001392:	e039      	b.n	8001408 <FEB_CAN_IVT_Store_Msg+0x114>
    	case FEB_CAN_IVT_VOLTAGE2_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	3302      	adds	r3, #2
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	061a      	lsls	r2, r3, #24
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	3303      	adds	r3, #3
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	041b      	lsls	r3, r3, #16
 80013a4:	441a      	add	r2, r3
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	3304      	adds	r3, #4
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	4413      	add	r3, r2
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	3205      	adds	r2, #5
 80013b4:	7812      	ldrb	r2, [r2, #0]
 80013b6:	4413      	add	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
    	    FEB_CAN_IVT_MESSAGE.IVT_Voltage2 = unsignedToSignedLong(value);
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f000 f8b6 	bl	800152c <unsignedToSignedLong>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4a13      	ldr	r2, [pc, #76]	; (8001410 <FEB_CAN_IVT_Store_Msg+0x11c>)
 80013c4:	6093      	str	r3, [r2, #8]
    	    FEB_CAN_IVT_FLAG.IVT_Voltage2 = 1;
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <FEB_CAN_IVT_Store_Msg+0x120>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	709a      	strb	r2, [r3, #2]
    		break;
 80013cc:	e01c      	b.n	8001408 <FEB_CAN_IVT_Store_Msg+0x114>
    	case FEB_CAN_IVT_VOLTAGE3_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	3302      	adds	r3, #2
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	061a      	lsls	r2, r3, #24
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	3303      	adds	r3, #3
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	041b      	lsls	r3, r3, #16
 80013de:	441a      	add	r2, r3
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	3304      	adds	r3, #4
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	021b      	lsls	r3, r3, #8
 80013e8:	4413      	add	r3, r2
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	3205      	adds	r2, #5
 80013ee:	7812      	ldrb	r2, [r2, #0]
 80013f0:	4413      	add	r3, r2
 80013f2:	60fb      	str	r3, [r7, #12]
    		FEB_CAN_IVT_MESSAGE.IVT_Voltage3 = unsignedToSignedLong(value);
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f000 f899 	bl	800152c <unsignedToSignedLong>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4a04      	ldr	r2, [pc, #16]	; (8001410 <FEB_CAN_IVT_Store_Msg+0x11c>)
 80013fe:	60d3      	str	r3, [r2, #12]
    		FEB_CAN_IVT_FLAG.IVT_Voltage3 = 1;
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <FEB_CAN_IVT_Store_Msg+0x120>)
 8001402:	2201      	movs	r2, #1
 8001404:	70da      	strb	r2, [r3, #3]
    		break;
 8001406:	bf00      	nop
    }
}
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200025f4 	.word	0x200025f4
 8001414:	200025f0 	.word	0x200025f0

08001418 <FEB_CAN_IVT_Process>:

// ******************** IVT Process Data  ********************

void FEB_CAN_IVT_Process(void) {
 8001418:	b5b0      	push	{r4, r5, r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
	if (FEB_CAN_CHARGER_START_CHARGE == 1 || FEB_LTC6811_Balance_Cells_State == 1) {
		return;
	}
	if (FEB_CAN_IVT_FLAG.IVT_Current == 1) {
 800141e:	4b40      	ldr	r3, [pc, #256]	; (8001520 <FEB_CAN_IVT_Process+0x108>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d124      	bne.n	8001470 <FEB_CAN_IVT_Process+0x58>
		FEB_CAN_IVT_FLAG.IVT_Current = 0;
 8001426:	4b3e      	ldr	r3, [pc, #248]	; (8001520 <FEB_CAN_IVT_Process+0x108>)
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
		float Ivt_Current_A = (float) FEB_CAN_IVT_MESSAGE.IVT_Voltage3 * 0.001;
 800142c:	4b3d      	ldr	r3, [pc, #244]	; (8001524 <FEB_CAN_IVT_Process+0x10c>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	ee07 3a90 	vmov	s15, r3
 8001434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001438:	ee17 0a90 	vmov	r0, s15
 800143c:	f7ff f8a4 	bl	8000588 <__aeabi_f2d>
 8001440:	a333      	add	r3, pc, #204	; (adr r3, 8001510 <FEB_CAN_IVT_Process+0xf8>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7ff f8f7 	bl	8000638 <__aeabi_dmul>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	f7ff fbe9 	bl	8000c28 <__aeabi_d2f>
 8001456:	4603      	mov	r3, r0
 8001458:	607b      	str	r3, [r7, #4]
		if (Ivt_Current_A > MAX_OPERATING_CURRENT) {
 800145a:	edd7 7a01 	vldr	s15, [r7, #4]
 800145e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001528 <FEB_CAN_IVT_Process+0x110>
 8001462:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146a:	dd01      	ble.n	8001470 <FEB_CAN_IVT_Process+0x58>
			FEB_BMS_Shutdown_Initiate();
 800146c:	f7ff fdd2 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
		}
	}
	if (FEB_CAN_IVT_FLAG.IVT_Voltage1 == 1) {
 8001470:	4b2b      	ldr	r3, [pc, #172]	; (8001520 <FEB_CAN_IVT_Process+0x108>)
 8001472:	785b      	ldrb	r3, [r3, #1]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d102      	bne.n	800147e <FEB_CAN_IVT_Process+0x66>
		FEB_CAN_IVT_FLAG.IVT_Voltage1 = 0;
 8001478:	4b29      	ldr	r3, [pc, #164]	; (8001520 <FEB_CAN_IVT_Process+0x108>)
 800147a:	2200      	movs	r2, #0
 800147c:	705a      	strb	r2, [r3, #1]
		// Do something

	}
	if (FEB_CAN_IVT_FLAG.IVT_Voltage2 == 1) {
 800147e:	4b28      	ldr	r3, [pc, #160]	; (8001520 <FEB_CAN_IVT_Process+0x108>)
 8001480:	789b      	ldrb	r3, [r3, #2]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d102      	bne.n	800148c <FEB_CAN_IVT_Process+0x74>
		FEB_CAN_IVT_FLAG.IVT_Voltage2 = 0;
 8001486:	4b26      	ldr	r3, [pc, #152]	; (8001520 <FEB_CAN_IVT_Process+0x108>)
 8001488:	2200      	movs	r2, #0
 800148a:	709a      	strb	r2, [r3, #2]
		// Do Something
	}
	if (FEB_CAN_IVT_FLAG.IVT_Voltage3 == 1) {
 800148c:	4b24      	ldr	r3, [pc, #144]	; (8001520 <FEB_CAN_IVT_Process+0x108>)
 800148e:	78db      	ldrb	r3, [r3, #3]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d138      	bne.n	8001506 <FEB_CAN_IVT_Process+0xee>
		FEB_CAN_IVT_FLAG.IVT_Voltage3 = 0;
 8001494:	4b22      	ldr	r3, [pc, #136]	; (8001520 <FEB_CAN_IVT_Process+0x108>)
 8001496:	2200      	movs	r2, #0
 8001498:	70da      	strb	r2, [r3, #3]
		float Ivt_Voltage_V = ((float) FEB_CAN_IVT_MESSAGE.IVT_Voltage3) * 0.001;
 800149a:	4b22      	ldr	r3, [pc, #136]	; (8001524 <FEB_CAN_IVT_Process+0x10c>)
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	ee07 3a90 	vmov	s15, r3
 80014a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a6:	ee17 0a90 	vmov	r0, s15
 80014aa:	f7ff f86d 	bl	8000588 <__aeabi_f2d>
 80014ae:	a318      	add	r3, pc, #96	; (adr r3, 8001510 <FEB_CAN_IVT_Process+0xf8>)
 80014b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b4:	f7ff f8c0 	bl	8000638 <__aeabi_dmul>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4610      	mov	r0, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	f7ff fbb2 	bl	8000c28 <__aeabi_d2f>
 80014c4:	4603      	mov	r3, r0
 80014c6:	603b      	str	r3, [r7, #0]
		if (Ivt_Voltage_V > FEB_LTC6811_Total_Bank_Voltage() * 0.9) {
 80014c8:	6838      	ldr	r0, [r7, #0]
 80014ca:	f7ff f85d 	bl	8000588 <__aeabi_f2d>
 80014ce:	4604      	mov	r4, r0
 80014d0:	460d      	mov	r5, r1
 80014d2:	f000 fbb1 	bl	8001c38 <FEB_LTC6811_Total_Bank_Voltage>
 80014d6:	ee10 3a10 	vmov	r3, s0
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff f854 	bl	8000588 <__aeabi_f2d>
 80014e0:	a30d      	add	r3, pc, #52	; (adr r3, 8001518 <FEB_CAN_IVT_Process+0x100>)
 80014e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e6:	f7ff f8a7 	bl	8000638 <__aeabi_dmul>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4620      	mov	r0, r4
 80014f0:	4629      	mov	r1, r5
 80014f2:	f7ff fb31 	bl	8000b58 <__aeabi_dcmpgt>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d002      	beq.n	8001502 <FEB_CAN_IVT_Process+0xea>
			// Broadcast Message
			FEB_BMS_Precharge_Close();
 80014fc:	f7ff fd72 	bl	8000fe4 <FEB_BMS_Precharge_Close>
 8001500:	e001      	b.n	8001506 <FEB_CAN_IVT_Process+0xee>
		} else {
			FEB_BMS_Precharge_Open();
 8001502:	f7ff fd63 	bl	8000fcc <FEB_BMS_Precharge_Open>
		}
	}
}
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bdb0      	pop	{r4, r5, r7, pc}
 800150c:	f3af 8000 	nop.w
 8001510:	d2f1a9fc 	.word	0xd2f1a9fc
 8001514:	3f50624d 	.word	0x3f50624d
 8001518:	cccccccd 	.word	0xcccccccd
 800151c:	3feccccc 	.word	0x3feccccc
 8001520:	200025f0 	.word	0x200025f0
 8001524:	200025f4 	.word	0x200025f4
 8001528:	425c0000 	.word	0x425c0000

0800152c <unsignedToSignedLong>:

long unsignedToSignedLong(uint32_t value) {
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	return (value & 0x7FFFFFFF) - (value & (0b1 << 31));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800153a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <FEB_LTC6811_Setup>:
// Set accumulator
static Accumulator accumulator;

// ********************************** Functions **********************************

void FEB_LTC6811_Setup(void) {
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b089      	sub	sp, #36	; 0x24
 8001550:	af06      	add	r7, sp, #24
	FEB_LTC6811_Config_Cell_Discharge();
 8001552:	f000 f83f 	bl	80015d4 <FEB_LTC6811_Config_Cell_Discharge>

	LTC6811_init_cfg(NUM_IC, accumulator.IC_config);
 8001556:	4917      	ldr	r1, [pc, #92]	; (80015b4 <FEB_LTC6811_Setup+0x68>)
 8001558:	2002      	movs	r0, #2
 800155a:	f001 f89d 	bl	8002698 <LTC6811_init_cfg>
	for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 800155e:	2300      	movs	r3, #0
 8001560:	71fb      	strb	r3, [r7, #7]
 8001562:	e018      	b.n	8001596 <FEB_LTC6811_Setup+0x4a>
		LTC6811_set_cfgr(current_ic, accumulator.IC_config, REFON, ADCOPT, GPIOBITS_A, DCCBITS_A, DCTOBITS, UV, OV);
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <FEB_LTC6811_Setup+0x6c>)
 8001566:	7819      	ldrb	r1, [r3, #0]
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <FEB_LTC6811_Setup+0x70>)
 800156a:	781c      	ldrb	r4, [r3, #0]
 800156c:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <FEB_LTC6811_Setup+0x74>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <FEB_LTC6811_Setup+0x78>)
 8001572:	8812      	ldrh	r2, [r2, #0]
 8001574:	79f8      	ldrb	r0, [r7, #7]
 8001576:	9204      	str	r2, [sp, #16]
 8001578:	9303      	str	r3, [sp, #12]
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <FEB_LTC6811_Setup+0x7c>)
 800157c:	9302      	str	r3, [sp, #8]
 800157e:	4b13      	ldr	r3, [pc, #76]	; (80015cc <FEB_LTC6811_Setup+0x80>)
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <FEB_LTC6811_Setup+0x84>)
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	4623      	mov	r3, r4
 8001588:	460a      	mov	r2, r1
 800158a:	490a      	ldr	r1, [pc, #40]	; (80015b4 <FEB_LTC6811_Setup+0x68>)
 800158c:	f001 f893 	bl	80026b6 <LTC6811_set_cfgr>
	for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	3301      	adds	r3, #1
 8001594:	71fb      	strb	r3, [r7, #7]
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d9e3      	bls.n	8001564 <FEB_LTC6811_Setup+0x18>
	}
	LTC6811_reset_crc_count(NUM_IC, accumulator.IC_config);
 800159c:	4905      	ldr	r1, [pc, #20]	; (80015b4 <FEB_LTC6811_Setup+0x68>)
 800159e:	2002      	movs	r0, #2
 80015a0:	f001 f86b 	bl	800267a <LTC6811_reset_crc_count>
	LTC6811_init_reg_limits(NUM_IC, accumulator.IC_config);
 80015a4:	4903      	ldr	r1, [pc, #12]	; (80015b4 <FEB_LTC6811_Setup+0x68>)
 80015a6:	2002      	movs	r0, #2
 80015a8:	f000 ffb2 	bl	8002510 <LTC6811_init_reg_limits>
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd90      	pop	{r4, r7, pc}
 80015b4:	2000262c 	.word	0x2000262c
 80015b8:	2000000c 	.word	0x2000000c
 80015bc:	2000261c 	.word	0x2000261c
 80015c0:	20000016 	.word	0x20000016
 80015c4:	20000018 	.word	0x20000018
 80015c8:	2000001c 	.word	0x2000001c
 80015cc:	20002620 	.word	0x20002620
 80015d0:	20000010 	.word	0x20000010

080015d4 <FEB_LTC6811_Config_Cell_Discharge>:

void FEB_LTC6811_Config_Cell_Discharge(void) {
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NUM_IC; i++) {
 80015da:	2300      	movs	r3, #0
 80015dc:	71fb      	strb	r3, [r7, #7]
 80015de:	e016      	b.n	800160e <FEB_LTC6811_Config_Cell_Discharge+0x3a>
		for (uint8_t j = 0; j < CELLS_PER_DAUGHTER_BOARD; j++) {
 80015e0:	2300      	movs	r3, #0
 80015e2:	71bb      	strb	r3, [r7, #6]
 80015e4:	e00d      	b.n	8001602 <FEB_LTC6811_Config_Cell_Discharge+0x2e>
			FEB_LTC6811_Cell_Discharge[i][j] = 0;
 80015e6:	79fa      	ldrb	r2, [r7, #7]
 80015e8:	79b9      	ldrb	r1, [r7, #6]
 80015ea:	480e      	ldr	r0, [pc, #56]	; (8001624 <FEB_LTC6811_Config_Cell_Discharge+0x50>)
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4403      	add	r3, r0
 80015f6:	440b      	add	r3, r1
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < CELLS_PER_DAUGHTER_BOARD; j++) {
 80015fc:	79bb      	ldrb	r3, [r7, #6]
 80015fe:	3301      	adds	r3, #1
 8001600:	71bb      	strb	r3, [r7, #6]
 8001602:	79bb      	ldrb	r3, [r7, #6]
 8001604:	2b0b      	cmp	r3, #11
 8001606:	d9ee      	bls.n	80015e6 <FEB_LTC6811_Config_Cell_Discharge+0x12>
	for (uint8_t i = 0; i < NUM_IC; i++) {
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	3301      	adds	r3, #1
 800160c:	71fb      	strb	r3, [r7, #7]
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d9e5      	bls.n	80015e0 <FEB_LTC6811_Config_Cell_Discharge+0xc>
		}
	}
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20002604 	.word	0x20002604

08001628 <FEB_LTC6811_Poll_Voltage>:

// ******************** Read Voltage ********************

void FEB_LTC6811_Poll_Voltage(void) {
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	FEB_LTC6811_Start_Cell_ADC_Measurement();
 800162c:	f000 f806 	bl	800163c <FEB_LTC6811_Start_Cell_ADC_Measurement>
	FEB_LTC6811_Read_Cell_Voltage_Registers();
 8001630:	f000 f812 	bl	8001658 <FEB_LTC6811_Read_Cell_Voltage_Registers>
	FEB_LTC6811_Store_Voltage();
 8001634:	f000 f81e 	bl	8001674 <FEB_LTC6811_Store_Voltage>
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}

0800163c <FEB_LTC6811_Start_Cell_ADC_Measurement>:

void FEB_LTC6811_Start_Cell_ADC_Measurement(void) {
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 8001640:	2002      	movs	r0, #2
 8001642:	f001 f876 	bl	8002732 <wakeup_sleep>
	LTC6811_adcv(ADC_CONVERSION_MODE, ADC_DCP, CELL_CH_TO_CONVERT);
 8001646:	2200      	movs	r2, #0
 8001648:	2101      	movs	r1, #1
 800164a:	2002      	movs	r0, #2
 800164c:	f000 ffbc 	bl	80025c8 <LTC6811_adcv>
	LTC6811_pollAdc();
 8001650:	f001 f80c 	bl	800266c <LTC6811_pollAdc>
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}

08001658 <FEB_LTC6811_Read_Cell_Voltage_Registers>:

void FEB_LTC6811_Read_Cell_Voltage_Registers(void) {
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 800165c:	2002      	movs	r0, #2
 800165e:	f001 f868 	bl	8002732 <wakeup_sleep>
	LTC6811_rdcv(SEL_ALL_REG, NUM_IC, accumulator.IC_config);
 8001662:	4a03      	ldr	r2, [pc, #12]	; (8001670 <FEB_LTC6811_Read_Cell_Voltage_Registers+0x18>)
 8001664:	2102      	movs	r1, #2
 8001666:	2000      	movs	r0, #0
 8001668:	f000 ffd3 	bl	8002612 <LTC6811_rdcv>
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	2000262c 	.word	0x2000262c

08001674 <FEB_LTC6811_Store_Voltage>:

void FEB_LTC6811_Store_Voltage(void) {
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
    for (uint16_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 800167a:	2300      	movs	r3, #0
 800167c:	80fb      	strh	r3, [r7, #6]
 800167e:	e1b8      	b.n	80019f2 <FEB_LTC6811_Store_Voltage+0x37e>
    	accumulator.banks[bank_idx].cells[16].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[0]);
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4ad3      	ldr	r2, [pc, #844]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 8001686:	21e8      	movs	r1, #232	; 0xe8
 8001688:	fb01 f303 	mul.w	r3, r1, r3
 800168c:	4413      	add	r3, r2
 800168e:	331e      	adds	r3, #30
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	88fc      	ldrh	r4, [r7, #6]
 8001694:	4618      	mov	r0, r3
 8001696:	f000 f9b7 	bl	8001a08 <FEB_LTC6811_Convert_Voltage>
 800169a:	eef0 7a40 	vmov.f32	s15, s0
 800169e:	4acd      	ldr	r2, [pc, #820]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 80016a0:	4623      	mov	r3, r4
 80016a2:	011b      	lsls	r3, r3, #4
 80016a4:	4423      	add	r3, r4
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	4413      	add	r3, r2
 80016aa:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80016ae:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[15].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[1]);
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4ac7      	ldr	r2, [pc, #796]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 80016b8:	21e8      	movs	r1, #232	; 0xe8
 80016ba:	fb01 f303 	mul.w	r3, r1, r3
 80016be:	4413      	add	r3, r2
 80016c0:	3320      	adds	r3, #32
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	88fc      	ldrh	r4, [r7, #6]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 f99e 	bl	8001a08 <FEB_LTC6811_Convert_Voltage>
 80016cc:	eef0 7a40 	vmov.f32	s15, s0
 80016d0:	4ac0      	ldr	r2, [pc, #768]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 80016d2:	4623      	mov	r3, r4
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	4423      	add	r3, r4
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	4413      	add	r3, r2
 80016dc:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80016e0:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[14].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[2]);
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4aba      	ldr	r2, [pc, #744]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 80016ea:	21e8      	movs	r1, #232	; 0xe8
 80016ec:	fb01 f303 	mul.w	r3, r1, r3
 80016f0:	4413      	add	r3, r2
 80016f2:	3322      	adds	r3, #34	; 0x22
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	88fc      	ldrh	r4, [r7, #6]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 f985 	bl	8001a08 <FEB_LTC6811_Convert_Voltage>
 80016fe:	eef0 7a40 	vmov.f32	s15, s0
 8001702:	4ab4      	ldr	r2, [pc, #720]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 8001704:	4623      	mov	r3, r4
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	4423      	add	r3, r4
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	4413      	add	r3, r2
 800170e:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8001712:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[13].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[3]);
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4aae      	ldr	r2, [pc, #696]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 800171c:	21e8      	movs	r1, #232	; 0xe8
 800171e:	fb01 f303 	mul.w	r3, r1, r3
 8001722:	4413      	add	r3, r2
 8001724:	3324      	adds	r3, #36	; 0x24
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	88fc      	ldrh	r4, [r7, #6]
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f96c 	bl	8001a08 <FEB_LTC6811_Convert_Voltage>
 8001730:	eef0 7a40 	vmov.f32	s15, s0
 8001734:	4aa7      	ldr	r2, [pc, #668]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 8001736:	4623      	mov	r3, r4
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	4423      	add	r3, r4
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	4413      	add	r3, r2
 8001740:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8001744:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[12].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[6]);
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4aa1      	ldr	r2, [pc, #644]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 800174e:	21e8      	movs	r1, #232	; 0xe8
 8001750:	fb01 f303 	mul.w	r3, r1, r3
 8001754:	4413      	add	r3, r2
 8001756:	332a      	adds	r3, #42	; 0x2a
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	88fc      	ldrh	r4, [r7, #6]
 800175c:	4618      	mov	r0, r3
 800175e:	f000 f953 	bl	8001a08 <FEB_LTC6811_Convert_Voltage>
 8001762:	eef0 7a40 	vmov.f32	s15, s0
 8001766:	4a9b      	ldr	r2, [pc, #620]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 8001768:	4623      	mov	r3, r4
 800176a:	011b      	lsls	r3, r3, #4
 800176c:	4423      	add	r3, r4
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	4413      	add	r3, r2
 8001772:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8001776:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[11].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[7]);
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4a95      	ldr	r2, [pc, #596]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 8001780:	21e8      	movs	r1, #232	; 0xe8
 8001782:	fb01 f303 	mul.w	r3, r1, r3
 8001786:	4413      	add	r3, r2
 8001788:	332c      	adds	r3, #44	; 0x2c
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	88fc      	ldrh	r4, [r7, #6]
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f93a 	bl	8001a08 <FEB_LTC6811_Convert_Voltage>
 8001794:	eef0 7a40 	vmov.f32	s15, s0
 8001798:	4a8e      	ldr	r2, [pc, #568]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 800179a:	4623      	mov	r3, r4
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	4423      	add	r3, r4
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	4413      	add	r3, r2
 80017a4:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 80017a8:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[10].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[8]);
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4a88      	ldr	r2, [pc, #544]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 80017b2:	21e8      	movs	r1, #232	; 0xe8
 80017b4:	fb01 f303 	mul.w	r3, r1, r3
 80017b8:	4413      	add	r3, r2
 80017ba:	332e      	adds	r3, #46	; 0x2e
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	88fc      	ldrh	r4, [r7, #6]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 f921 	bl	8001a08 <FEB_LTC6811_Convert_Voltage>
 80017c6:	eef0 7a40 	vmov.f32	s15, s0
 80017ca:	4a82      	ldr	r2, [pc, #520]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 80017cc:	4623      	mov	r3, r4
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	4423      	add	r3, r4
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	4413      	add	r3, r2
 80017d6:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80017da:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[9].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2].cells.c_codes[9]);
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4a7c      	ldr	r2, [pc, #496]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 80017e4:	21e8      	movs	r1, #232	; 0xe8
 80017e6:	fb01 f303 	mul.w	r3, r1, r3
 80017ea:	4413      	add	r3, r2
 80017ec:	3330      	adds	r3, #48	; 0x30
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	88fc      	ldrh	r4, [r7, #6]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f908 	bl	8001a08 <FEB_LTC6811_Convert_Voltage>
 80017f8:	eef0 7a40 	vmov.f32	s15, s0
 80017fc:	4a75      	ldr	r2, [pc, #468]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 80017fe:	4623      	mov	r3, r4
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	4423      	add	r3, r4
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	4413      	add	r3, r2
 8001808:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800180c:	edc3 7a00 	vstr	s15, [r3]

    	accumulator.banks[bank_idx].cells[8].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[0]);
 8001810:	88fb      	ldrh	r3, [r7, #6]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	3301      	adds	r3, #1
 8001816:	4a6f      	ldr	r2, [pc, #444]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 8001818:	21e8      	movs	r1, #232	; 0xe8
 800181a:	fb01 f303 	mul.w	r3, r1, r3
 800181e:	4413      	add	r3, r2
 8001820:	331e      	adds	r3, #30
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	88fc      	ldrh	r4, [r7, #6]
 8001826:	4618      	mov	r0, r3
 8001828:	f000 f8ee 	bl	8001a08 <FEB_LTC6811_Convert_Voltage>
 800182c:	eef0 7a40 	vmov.f32	s15, s0
 8001830:	4a68      	ldr	r2, [pc, #416]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 8001832:	4623      	mov	r3, r4
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	4423      	add	r3, r4
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	4413      	add	r3, r2
 800183c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001840:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[7].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[1]);
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	3301      	adds	r3, #1
 800184a:	4a62      	ldr	r2, [pc, #392]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 800184c:	21e8      	movs	r1, #232	; 0xe8
 800184e:	fb01 f303 	mul.w	r3, r1, r3
 8001852:	4413      	add	r3, r2
 8001854:	3320      	adds	r3, #32
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	88fc      	ldrh	r4, [r7, #6]
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f8d4 	bl	8001a08 <FEB_LTC6811_Convert_Voltage>
 8001860:	eef0 7a40 	vmov.f32	s15, s0
 8001864:	4a5b      	ldr	r2, [pc, #364]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 8001866:	4623      	mov	r3, r4
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	4423      	add	r3, r4
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	4413      	add	r3, r2
 8001870:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001874:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[6].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[2]);
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	3301      	adds	r3, #1
 800187e:	4a55      	ldr	r2, [pc, #340]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 8001880:	21e8      	movs	r1, #232	; 0xe8
 8001882:	fb01 f303 	mul.w	r3, r1, r3
 8001886:	4413      	add	r3, r2
 8001888:	3322      	adds	r3, #34	; 0x22
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	88fc      	ldrh	r4, [r7, #6]
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f8ba 	bl	8001a08 <FEB_LTC6811_Convert_Voltage>
 8001894:	eef0 7a40 	vmov.f32	s15, s0
 8001898:	4a4e      	ldr	r2, [pc, #312]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 800189a:	4623      	mov	r3, r4
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	4423      	add	r3, r4
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4413      	add	r3, r2
 80018a4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80018a8:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[5].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[3]);
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	3301      	adds	r3, #1
 80018b2:	4a48      	ldr	r2, [pc, #288]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 80018b4:	21e8      	movs	r1, #232	; 0xe8
 80018b6:	fb01 f303 	mul.w	r3, r1, r3
 80018ba:	4413      	add	r3, r2
 80018bc:	3324      	adds	r3, #36	; 0x24
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	88fc      	ldrh	r4, [r7, #6]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 f8a0 	bl	8001a08 <FEB_LTC6811_Convert_Voltage>
 80018c8:	eef0 7a40 	vmov.f32	s15, s0
 80018cc:	4a41      	ldr	r2, [pc, #260]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 80018ce:	4623      	mov	r3, r4
 80018d0:	011b      	lsls	r3, r3, #4
 80018d2:	4423      	add	r3, r4
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	4413      	add	r3, r2
 80018d8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80018dc:	edc3 7a00 	vstr	s15, [r3]
    	accumulator.banks[bank_idx].cells[4].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[4]);
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	3301      	adds	r3, #1
 80018e6:	4a3b      	ldr	r2, [pc, #236]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 80018e8:	21e8      	movs	r1, #232	; 0xe8
 80018ea:	fb01 f303 	mul.w	r3, r1, r3
 80018ee:	4413      	add	r3, r2
 80018f0:	3326      	adds	r3, #38	; 0x26
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	88fc      	ldrh	r4, [r7, #6]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 f886 	bl	8001a08 <FEB_LTC6811_Convert_Voltage>
 80018fc:	eef0 7a40 	vmov.f32	s15, s0
 8001900:	4a34      	ldr	r2, [pc, #208]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 8001902:	4623      	mov	r3, r4
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	4423      	add	r3, r4
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	4413      	add	r3, r2
 800190c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001910:	edc3 7a00 	vstr	s15, [r3]
      	accumulator.banks[bank_idx].cells[3].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[6]);
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	3301      	adds	r3, #1
 800191a:	4a2e      	ldr	r2, [pc, #184]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 800191c:	21e8      	movs	r1, #232	; 0xe8
 800191e:	fb01 f303 	mul.w	r3, r1, r3
 8001922:	4413      	add	r3, r2
 8001924:	332a      	adds	r3, #42	; 0x2a
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	88fc      	ldrh	r4, [r7, #6]
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f86c 	bl	8001a08 <FEB_LTC6811_Convert_Voltage>
 8001930:	eef0 7a40 	vmov.f32	s15, s0
 8001934:	4a27      	ldr	r2, [pc, #156]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 8001936:	4623      	mov	r3, r4
 8001938:	011b      	lsls	r3, r3, #4
 800193a:	4423      	add	r3, r4
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	4413      	add	r3, r2
 8001940:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8001944:	edc3 7a00 	vstr	s15, [r3]
      	accumulator.banks[bank_idx].cells[2].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[7]);
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	3301      	adds	r3, #1
 800194e:	4a21      	ldr	r2, [pc, #132]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 8001950:	21e8      	movs	r1, #232	; 0xe8
 8001952:	fb01 f303 	mul.w	r3, r1, r3
 8001956:	4413      	add	r3, r2
 8001958:	332c      	adds	r3, #44	; 0x2c
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	88fc      	ldrh	r4, [r7, #6]
 800195e:	4618      	mov	r0, r3
 8001960:	f000 f852 	bl	8001a08 <FEB_LTC6811_Convert_Voltage>
 8001964:	eef0 7a40 	vmov.f32	s15, s0
 8001968:	4a1a      	ldr	r2, [pc, #104]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 800196a:	4623      	mov	r3, r4
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	4423      	add	r3, r4
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4413      	add	r3, r2
 8001974:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001978:	edc3 7a00 	vstr	s15, [r3]
      	accumulator.banks[bank_idx].cells[1].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[8]);
 800197c:	88fb      	ldrh	r3, [r7, #6]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	3301      	adds	r3, #1
 8001982:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 8001984:	21e8      	movs	r1, #232	; 0xe8
 8001986:	fb01 f303 	mul.w	r3, r1, r3
 800198a:	4413      	add	r3, r2
 800198c:	332e      	adds	r3, #46	; 0x2e
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	88fc      	ldrh	r4, [r7, #6]
 8001992:	4618      	mov	r0, r3
 8001994:	f000 f838 	bl	8001a08 <FEB_LTC6811_Convert_Voltage>
 8001998:	eef0 7a40 	vmov.f32	s15, s0
 800199c:	4a0d      	ldr	r2, [pc, #52]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 800199e:	4623      	mov	r3, r4
 80019a0:	011b      	lsls	r3, r3, #4
 80019a2:	4423      	add	r3, r4
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	4413      	add	r3, r2
 80019a8:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80019ac:	edc3 7a00 	vstr	s15, [r3]
      	accumulator.banks[bank_idx].cells[0].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[bank_idx * 2 + 1].cells.c_codes[9]);
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	3301      	adds	r3, #1
 80019b6:	4a07      	ldr	r2, [pc, #28]	; (80019d4 <FEB_LTC6811_Store_Voltage+0x360>)
 80019b8:	21e8      	movs	r1, #232	; 0xe8
 80019ba:	fb01 f303 	mul.w	r3, r1, r3
 80019be:	4413      	add	r3, r2
 80019c0:	3330      	adds	r3, #48	; 0x30
 80019c2:	881b      	ldrh	r3, [r3, #0]
 80019c4:	88fc      	ldrh	r4, [r7, #6]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f81e 	bl	8001a08 <FEB_LTC6811_Convert_Voltage>
 80019cc:	eef0 7a40 	vmov.f32	s15, s0
 80019d0:	e002      	b.n	80019d8 <FEB_LTC6811_Store_Voltage+0x364>
 80019d2:	bf00      	nop
 80019d4:	2000262c 	.word	0x2000262c
 80019d8:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <FEB_LTC6811_Store_Voltage+0x390>)
 80019da:	4623      	mov	r3, r4
 80019dc:	011b      	lsls	r3, r3, #4
 80019de:	4423      	add	r3, r4
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	4413      	add	r3, r2
 80019e4:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 80019e8:	edc3 7a00 	vstr	s15, [r3]
    for (uint16_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	3301      	adds	r3, #1
 80019f0:	80fb      	strh	r3, [r7, #6]
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f43f ae43 	beq.w	8001680 <FEB_LTC6811_Store_Voltage+0xc>
    }
}
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd90      	pop	{r4, r7, pc}
 8001a04:	2000262c 	.word	0x2000262c

08001a08 <FEB_LTC6811_Convert_Voltage>:

/*
 * @param value := Voltage (100uV) from LTC6811
 */
float FEB_LTC6811_Convert_Voltage(uint16_t value) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	80fb      	strh	r3, [r7, #6]
	// Check for error: value = 2^16 - 1
	if (value == 65535) {
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d101      	bne.n	8001a20 <FEB_LTC6811_Convert_Voltage+0x18>
		return -42;
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <FEB_LTC6811_Convert_Voltage+0x50>)
 8001a1e:	e00f      	b.n	8001a40 <FEB_LTC6811_Convert_Voltage+0x38>
	}
	return value * 0.0001;
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fd9e 	bl	8000564 <__aeabi_i2d>
 8001a28:	a309      	add	r3, pc, #36	; (adr r3, 8001a50 <FEB_LTC6811_Convert_Voltage+0x48>)
 8001a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2e:	f7fe fe03 	bl	8000638 <__aeabi_dmul>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4610      	mov	r0, r2
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f7ff f8f5 	bl	8000c28 <__aeabi_d2f>
 8001a3e:	4603      	mov	r3, r0
}
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eeb0 0a67 	vmov.f32	s0, s15
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	eb1c432d 	.word	0xeb1c432d
 8001a54:	3f1a36e2 	.word	0x3f1a36e2
 8001a58:	c2280000 	.word	0xc2280000

08001a5c <FEB_LTC6811_Balance_Cells>:
	// Set target voltage
	FEB_LTC6811_Target_Voltage = lowest_voltage;
	FEB_LTC6811_Target_Voltage_Set = 1;
}

void FEB_LTC6811_Balance_Cells(void) {
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
	if (FEB_LTC6811_Balance_Cells_State == 0 || FEB_LTC6811_Cells_Balanced == 1) {
		return;
 8001a60:	bf00      	nop
	if (cells_balanced == 1) {
		FEB_LTC6811_Cells_Balanced = 1;
		FEB_LTC6811_Clear_Balance_Cells();
	}

}
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <FEB_LTC6811_Configure_DCCBITS_A>:

void FEB_LTC6811_Clear_Balance_Cell(uint8_t bank, uint8_t cell) {
	FEB_LTC6811_Cell_Discharge[FEB_LTC6811_Get_IC(bank, cell)][FEB_LTC6811_Cell_Idx(cell)] = 0;
}

void FEB_LTC6811_Configure_DCCBITS_A(uint8_t ic) {
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < CELLS_PER_DAUGHTER_BOARD; i++) {
 8001a76:	2300      	movs	r3, #0
 8001a78:	73fb      	strb	r3, [r7, #15]
 8001a7a:	e014      	b.n	8001aa6 <FEB_LTC6811_Configure_DCCBITS_A+0x3a>
		DCCBITS_A[i] = FEB_LTC6811_Cell_Discharge[ic][i];
 8001a7c:	79fa      	ldrb	r2, [r7, #7]
 8001a7e:	7bf9      	ldrb	r1, [r7, #15]
 8001a80:	480e      	ldr	r0, [pc, #56]	; (8001abc <FEB_LTC6811_Configure_DCCBITS_A+0x50>)
 8001a82:	4613      	mov	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4403      	add	r3, r0
 8001a8c:	440b      	add	r3, r1
 8001a8e:	781a      	ldrb	r2, [r3, #0]
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	2a00      	cmp	r2, #0
 8001a94:	bf14      	ite	ne
 8001a96:	2201      	movne	r2, #1
 8001a98:	2200      	moveq	r2, #0
 8001a9a:	b2d1      	uxtb	r1, r2
 8001a9c:	4a08      	ldr	r2, [pc, #32]	; (8001ac0 <FEB_LTC6811_Configure_DCCBITS_A+0x54>)
 8001a9e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < CELLS_PER_DAUGHTER_BOARD; i++) {
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	73fb      	strb	r3, [r7, #15]
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	2b0b      	cmp	r3, #11
 8001aaa:	d9e7      	bls.n	8001a7c <FEB_LTC6811_Configure_DCCBITS_A+0x10>
	}
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20002604 	.word	0x20002604
 8001ac0:	20002620 	.word	0x20002620

08001ac4 <FEB_LTC6811_Validate_Voltage>:

// ******************** Voltage Interface ********************

void FEB_LTC6811_Validate_Voltage(void) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001aca:	2300      	movs	r3, #0
 8001acc:	71fb      	strb	r3, [r7, #7]
 8001ace:	e02c      	b.n	8001b2a <FEB_LTC6811_Validate_Voltage+0x66>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	71bb      	strb	r3, [r7, #6]
 8001ad4:	e023      	b.n	8001b1e <FEB_LTC6811_Validate_Voltage+0x5a>
			float voltage = accumulator.banks[bank_idx].cells[cell_idx].voltage;
 8001ad6:	79fa      	ldrb	r2, [r7, #7]
 8001ad8:	79b9      	ldrb	r1, [r7, #6]
 8001ada:	4818      	ldr	r0, [pc, #96]	; (8001b3c <FEB_LTC6811_Validate_Voltage+0x78>)
 8001adc:	4613      	mov	r3, r2
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	4413      	add	r3, r2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	333a      	adds	r3, #58	; 0x3a
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4403      	add	r3, r0
 8001aea:	3304      	adds	r3, #4
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	603b      	str	r3, [r7, #0]
			if (voltage < MIN_VOLTAGE || voltage > MAX_VOLTAGE) {
 8001af0:	edd7 7a00 	vldr	s15, [r7]
 8001af4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001af8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b00:	d408      	bmi.n	8001b14 <FEB_LTC6811_Validate_Voltage+0x50>
 8001b02:	edd7 7a00 	vldr	s15, [r7]
 8001b06:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001b0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b12:	dd01      	ble.n	8001b18 <FEB_LTC6811_Validate_Voltage+0x54>
				FEB_BMS_Shutdown_Initiate();
 8001b14:	f7ff fa7e 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001b18:	79bb      	ldrb	r3, [r7, #6]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	71bb      	strb	r3, [r7, #6]
 8001b1e:	79bb      	ldrb	r3, [r7, #6]
 8001b20:	2b10      	cmp	r3, #16
 8001b22:	d9d8      	bls.n	8001ad6 <FEB_LTC6811_Validate_Voltage+0x12>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	3301      	adds	r3, #1
 8001b28:	71fb      	strb	r3, [r7, #7]
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0cf      	beq.n	8001ad0 <FEB_LTC6811_Validate_Voltage+0xc>
			}
		}
	}
}
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	2000262c 	.word	0x2000262c

08001b40 <FEB_LTC6811_UART_Transmit_Voltage>:

void FEB_LTC6811_UART_Transmit_Voltage() {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	f5ad 6da1 	sub.w	sp, sp, #1288	; 0x508
 8001b46:	af00      	add	r7, sp, #0
	char UART_str[1024];
	char temp_str[256];

	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 8001b4e:	e05e      	b.n	8001c0e <FEB_LTC6811_UART_Transmit_Voltage+0xce>
		// Add bank_idx, cell_idx to {@code UART_Str}
		sprintf(UART_str, "%d", (bank_idx << UART_BITS_PER_MESSAGE) + UART_VOLTAGE_ID);
 8001b50:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001b54:	005a      	lsls	r2, r3, #1
 8001b56:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001b5a:	4932      	ldr	r1, [pc, #200]	; (8001c24 <FEB_LTC6811_UART_Transmit_Voltage+0xe4>)
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f006 fa15 	bl	8007f8c <siprintf>


		// Add values to {@code UART_Str}
		for (uint16_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001b62:	2300      	movs	r3, #0
 8001b64:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8001b68:	e02b      	b.n	8001bc2 <FEB_LTC6811_UART_Transmit_Voltage+0x82>
			float voltage = accumulator.banks[bank_idx].cells[cell_idx].voltage;
 8001b6a:	f897 2507 	ldrb.w	r2, [r7, #1287]	; 0x507
 8001b6e:	f8b7 1504 	ldrh.w	r1, [r7, #1284]	; 0x504
 8001b72:	482d      	ldr	r0, [pc, #180]	; (8001c28 <FEB_LTC6811_UART_Transmit_Voltage+0xe8>)
 8001b74:	4613      	mov	r3, r2
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	4413      	add	r3, r2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	333a      	adds	r3, #58	; 0x3a
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4403      	add	r3, r0
 8001b82:	3304      	adds	r3, #4
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 8001b8a:	6013      	str	r3, [r2, #0]

			sprintf(temp_str, " %f", voltage);
 8001b8c:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8001b90:	6818      	ldr	r0, [r3, #0]
 8001b92:	f7fe fcf9 	bl	8000588 <__aeabi_f2d>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4638      	mov	r0, r7
 8001b9c:	4923      	ldr	r1, [pc, #140]	; (8001c2c <FEB_LTC6811_UART_Transmit_Voltage+0xec>)
 8001b9e:	f006 f9f5 	bl	8007f8c <siprintf>
			strncat(UART_str, temp_str, strlen(temp_str));
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fb33 	bl	8000210 <strlen>
 8001baa:	4602      	mov	r2, r0
 8001bac:	4639      	mov	r1, r7
 8001bae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f006 fa0a 	bl	8007fcc <strncat>
		for (uint16_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001bb8:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8001bc2:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001bc6:	2b10      	cmp	r3, #16
 8001bc8:	d9cf      	bls.n	8001b6a <FEB_LTC6811_UART_Transmit_Voltage+0x2a>
		}

		// Add '\n' to {@code UART_Str}
		sprintf(temp_str, "\n");
 8001bca:	463b      	mov	r3, r7
 8001bcc:	4918      	ldr	r1, [pc, #96]	; (8001c30 <FEB_LTC6811_UART_Transmit_Voltage+0xf0>)
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f006 f9dc 	bl	8007f8c <siprintf>
		strncat(UART_str, temp_str, strlen(temp_str));
 8001bd4:	463b      	mov	r3, r7
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fb1a 	bl	8000210 <strlen>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	4639      	mov	r1, r7
 8001be0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001be4:	4618      	mov	r0, r3
 8001be6:	f006 f9f1 	bl	8007fcc <strncat>

		HAL_UART_Transmit(&huart2, (uint8_t*) UART_str, strlen(UART_str), 100);
 8001bea:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fb0e 	bl	8000210 <strlen>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8001bfc:	2364      	movs	r3, #100	; 0x64
 8001bfe:	480d      	ldr	r0, [pc, #52]	; (8001c34 <FEB_LTC6811_UART_Transmit_Voltage+0xf4>)
 8001c00:	f005 f8b3 	bl	8006d6a <HAL_UART_Transmit>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001c04:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001c08:	3301      	adds	r3, #1
 8001c0a:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 8001c0e:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d09c      	beq.n	8001b50 <FEB_LTC6811_UART_Transmit_Voltage+0x10>
	}
}
 8001c16:	bf00      	nop
 8001c18:	bf00      	nop
 8001c1a:	f507 67a1 	add.w	r7, r7, #1288	; 0x508
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	0800a364 	.word	0x0800a364
 8001c28:	2000262c 	.word	0x2000262c
 8001c2c:	0800a368 	.word	0x0800a368
 8001c30:	0800a36c 	.word	0x0800a36c
 8001c34:	2000292c 	.word	0x2000292c

08001c38 <FEB_LTC6811_Total_Bank_Voltage>:

float FEB_LTC6811_Total_Bank_Voltage(void) {
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
	float total_voltage = 0;
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	607b      	str	r3, [r7, #4]

	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001c44:	2300      	movs	r3, #0
 8001c46:	70fb      	strb	r3, [r7, #3]
 8001c48:	e01e      	b.n	8001c88 <FEB_LTC6811_Total_Bank_Voltage+0x50>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	70bb      	strb	r3, [r7, #2]
 8001c4e:	e015      	b.n	8001c7c <FEB_LTC6811_Total_Bank_Voltage+0x44>
			total_voltage += accumulator.banks[bank_idx].cells[cell_idx].voltage;
 8001c50:	78fa      	ldrb	r2, [r7, #3]
 8001c52:	78b9      	ldrb	r1, [r7, #2]
 8001c54:	4813      	ldr	r0, [pc, #76]	; (8001ca4 <FEB_LTC6811_Total_Bank_Voltage+0x6c>)
 8001c56:	4613      	mov	r3, r2
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	4413      	add	r3, r2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	333a      	adds	r3, #58	; 0x3a
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4403      	add	r3, r0
 8001c64:	3304      	adds	r3, #4
 8001c66:	edd3 7a00 	vldr	s15, [r3]
 8001c6a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c72:	edc7 7a01 	vstr	s15, [r7, #4]
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001c76:	78bb      	ldrb	r3, [r7, #2]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	70bb      	strb	r3, [r7, #2]
 8001c7c:	78bb      	ldrb	r3, [r7, #2]
 8001c7e:	2b10      	cmp	r3, #16
 8001c80:	d9e6      	bls.n	8001c50 <FEB_LTC6811_Total_Bank_Voltage+0x18>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	3301      	adds	r3, #1
 8001c86:	70fb      	strb	r3, [r7, #3]
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0dd      	beq.n	8001c4a <FEB_LTC6811_Total_Bank_Voltage+0x12>
		}
	}

	return total_voltage;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	ee07 3a90 	vmov	s15, r3
}
 8001c94:	eeb0 0a67 	vmov.f32	s0, s15
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	2000262c 	.word	0x2000262c

08001ca8 <FEB_LTC6811_Clear_Voltage>:
		}
	}
	return 1;
}

void FEB_LTC6811_Clear_Voltage(void) {
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001cae:	2300      	movs	r3, #0
 8001cb0:	71fb      	strb	r3, [r7, #7]
 8001cb2:	e019      	b.n	8001ce8 <FEB_LTC6811_Clear_Voltage+0x40>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	71bb      	strb	r3, [r7, #6]
 8001cb8:	e010      	b.n	8001cdc <FEB_LTC6811_Clear_Voltage+0x34>
			accumulator.banks[bank_idx].cells[cell_idx].voltage = 0;
 8001cba:	79fa      	ldrb	r2, [r7, #7]
 8001cbc:	79b9      	ldrb	r1, [r7, #6]
 8001cbe:	480f      	ldr	r0, [pc, #60]	; (8001cfc <FEB_LTC6811_Clear_Voltage+0x54>)
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	4413      	add	r3, r2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	333a      	adds	r3, #58	; 0x3a
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4403      	add	r3, r0
 8001cce:	3304      	adds	r3, #4
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8001cd6:	79bb      	ldrb	r3, [r7, #6]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	71bb      	strb	r3, [r7, #6]
 8001cdc:	79bb      	ldrb	r3, [r7, #6]
 8001cde:	2b10      	cmp	r3, #16
 8001ce0:	d9eb      	bls.n	8001cba <FEB_LTC6811_Clear_Voltage+0x12>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	71fb      	strb	r3, [r7, #7]
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0e2      	beq.n	8001cb4 <FEB_LTC6811_Clear_Voltage+0xc>
		}
	}
}
 8001cee:	bf00      	nop
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	2000262c 	.word	0x2000262c

08001d00 <FEB_LTC6811_Poll_Temperature>:

// ******************** Read Temperature ********************

void FEB_LTC6811_Poll_Temperature(void) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
	for (uint8_t channel = 0; channel <= 4; channel++) {
 8001d06:	2300      	movs	r3, #0
 8001d08:	71fb      	strb	r3, [r7, #7]
 8001d0a:	e00e      	b.n	8001d2a <FEB_LTC6811_Poll_Temperature+0x2a>
		FEB_LTC6811_Update_GPIO(channel);
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 f814 	bl	8001d3c <FEB_LTC6811_Update_GPIO>
		FEB_LTC6811_Start_GPIO_ADC_Measurement();
 8001d14:	f000 f880 	bl	8001e18 <FEB_LTC6811_Start_GPIO_ADC_Measurement>
		FEB_LTC6811_Read_Aux_Voltages();
 8001d18:	f000 f88c 	bl	8001e34 <FEB_LTC6811_Read_Aux_Voltages>
		FEB_LTC6811_Store_Temperature(channel);
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 f896 	bl	8001e50 <FEB_LTC6811_Store_Temperature>
	for (uint8_t channel = 0; channel <= 4; channel++) {
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	3301      	adds	r3, #1
 8001d28:	71fb      	strb	r3, [r7, #7]
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d9ed      	bls.n	8001d0c <FEB_LTC6811_Poll_Temperature+0xc>
	}
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <FEB_LTC6811_Update_GPIO>:

void FEB_LTC6811_Update_GPIO(uint8_t channel) {
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b08b      	sub	sp, #44	; 0x2c
 8001d40:	af06      	add	r7, sp, #24
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
	GPIOBITS_A[0] = 0b1;					// ADC
 8001d46:	4b2c      	ldr	r3, [pc, #176]	; (8001df8 <FEB_LTC6811_Update_GPIO+0xbc>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]
	GPIOBITS_A[1] = 0b1;					// ADC
 8001d4c:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <FEB_LTC6811_Update_GPIO+0xbc>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	705a      	strb	r2, [r3, #1]
	GPIOBITS_A[2] = (channel >> 0) & 0b1;	// MUX Select
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	bf14      	ite	ne
 8001d5c:	2301      	movne	r3, #1
 8001d5e:	2300      	moveq	r3, #0
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4b25      	ldr	r3, [pc, #148]	; (8001df8 <FEB_LTC6811_Update_GPIO+0xbc>)
 8001d64:	709a      	strb	r2, [r3, #2]
	GPIOBITS_A[3] = (channel >> 1) & 0b1;	// MUX Select
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	085b      	lsrs	r3, r3, #1
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	bf14      	ite	ne
 8001d74:	2301      	movne	r3, #1
 8001d76:	2300      	moveq	r3, #0
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4b1f      	ldr	r3, [pc, #124]	; (8001df8 <FEB_LTC6811_Update_GPIO+0xbc>)
 8001d7c:	70da      	strb	r2, [r3, #3]
	GPIOBITS_A[4] = (channel >> 2) & 0b1;	// MUX Select
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	089b      	lsrs	r3, r3, #2
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	bf14      	ite	ne
 8001d8c:	2301      	movne	r3, #1
 8001d8e:	2300      	moveq	r3, #0
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <FEB_LTC6811_Update_GPIO+0xbc>)
 8001d94:	711a      	strb	r2, [r3, #4]

    wakeup_sleep(NUM_IC);
 8001d96:	2002      	movs	r0, #2
 8001d98:	f000 fccb 	bl	8002732 <wakeup_sleep>
    for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	73fb      	strb	r3, [r7, #15]
 8001da0:	e01c      	b.n	8001ddc <FEB_LTC6811_Update_GPIO+0xa0>
    	FEB_LTC6811_Configure_DCCBITS_A(current_ic);
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fe61 	bl	8001a6c <FEB_LTC6811_Configure_DCCBITS_A>
		LTC6811_set_cfgr(current_ic, accumulator.IC_config, REFON, ADCOPT, GPIOBITS_A, DCCBITS_A, DCTOBITS, UV, OV);
 8001daa:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <FEB_LTC6811_Update_GPIO+0xc0>)
 8001dac:	7819      	ldrb	r1, [r3, #0]
 8001dae:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <FEB_LTC6811_Update_GPIO+0xc4>)
 8001db0:	781c      	ldrb	r4, [r3, #0]
 8001db2:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <FEB_LTC6811_Update_GPIO+0xc8>)
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	4a14      	ldr	r2, [pc, #80]	; (8001e08 <FEB_LTC6811_Update_GPIO+0xcc>)
 8001db8:	8812      	ldrh	r2, [r2, #0]
 8001dba:	7bf8      	ldrb	r0, [r7, #15]
 8001dbc:	9204      	str	r2, [sp, #16]
 8001dbe:	9303      	str	r3, [sp, #12]
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <FEB_LTC6811_Update_GPIO+0xd0>)
 8001dc2:	9302      	str	r3, [sp, #8]
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <FEB_LTC6811_Update_GPIO+0xd4>)
 8001dc6:	9301      	str	r3, [sp, #4]
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <FEB_LTC6811_Update_GPIO+0xbc>)
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	4623      	mov	r3, r4
 8001dce:	460a      	mov	r2, r1
 8001dd0:	4910      	ldr	r1, [pc, #64]	; (8001e14 <FEB_LTC6811_Update_GPIO+0xd8>)
 8001dd2:	f000 fc70 	bl	80026b6 <LTC6811_set_cfgr>
    for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d9df      	bls.n	8001da2 <FEB_LTC6811_Update_GPIO+0x66>
    }
    wakeup_idle(NUM_IC);
 8001de2:	2002      	movs	r0, #2
 8001de4:	f000 fc88 	bl	80026f8 <wakeup_idle>
    LTC6811_wrcfg(NUM_IC, accumulator.IC_config);
 8001de8:	490a      	ldr	r1, [pc, #40]	; (8001e14 <FEB_LTC6811_Update_GPIO+0xd8>)
 8001dea:	2002      	movs	r0, #2
 8001dec:	f000 fbdd 	bl	80025aa <LTC6811_wrcfg>
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd90      	pop	{r4, r7, pc}
 8001df8:	20000010 	.word	0x20000010
 8001dfc:	2000000c 	.word	0x2000000c
 8001e00:	2000261c 	.word	0x2000261c
 8001e04:	20000016 	.word	0x20000016
 8001e08:	20000018 	.word	0x20000018
 8001e0c:	2000001c 	.word	0x2000001c
 8001e10:	20002620 	.word	0x20002620
 8001e14:	2000262c 	.word	0x2000262c

08001e18 <FEB_LTC6811_Start_GPIO_ADC_Measurement>:

void FEB_LTC6811_Start_GPIO_ADC_Measurement(void) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 8001e1c:	2002      	movs	r0, #2
 8001e1e:	f000 fc88 	bl	8002732 <wakeup_sleep>
	LTC6811_adax(ADC_CONVERSION_MODE, AUX_CH_TO_CONVERT);
 8001e22:	2100      	movs	r1, #0
 8001e24:	2002      	movs	r0, #2
 8001e26:	f000 fbe2 	bl	80025ee <LTC6811_adax>
	LTC6811_pollAdc();
 8001e2a:	f000 fc1f 	bl	800266c <LTC6811_pollAdc>
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <FEB_LTC6811_Read_Aux_Voltages>:

void FEB_LTC6811_Read_Aux_Voltages(void) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 8001e38:	2002      	movs	r0, #2
 8001e3a:	f000 fc7a 	bl	8002732 <wakeup_sleep>
	LTC6811_rdaux(SEL_ALL_REG, NUM_IC, accumulator.IC_config);
 8001e3e:	4a03      	ldr	r2, [pc, #12]	; (8001e4c <FEB_LTC6811_Read_Aux_Voltages+0x18>)
 8001e40:	2102      	movs	r1, #2
 8001e42:	2000      	movs	r0, #0
 8001e44:	f000 fbfc 	bl	8002640 <LTC6811_rdaux>
}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	2000262c 	.word	0x2000262c

08001e50 <FEB_LTC6811_Store_Temperature>:

void FEB_LTC6811_Store_Temperature(uint8_t channel) {
 8001e50:	b590      	push	{r4, r7, lr}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	71fb      	strb	r3, [r7, #7]
    for (uint16_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	81fb      	strh	r3, [r7, #14]
 8001e5e:	e1cd      	b.n	80021fc <FEB_LTC6811_Store_Temperature+0x3ac>
    	switch (channel) {
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	f200 81c7 	bhi.w	80021f6 <FEB_LTC6811_Store_Temperature+0x3a6>
 8001e68:	a201      	add	r2, pc, #4	; (adr r2, 8001e70 <FEB_LTC6811_Store_Temperature+0x20>)
 8001e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6e:	bf00      	nop
 8001e70:	08001e85 	.word	0x08001e85
 8001e74:	08001f53 	.word	0x08001f53
 8001e78:	08002021 	.word	0x08002021
 8001e7c:	080020ef 	.word	0x080020ef
 8001e80:	080021c1 	.word	0x080021c1
    		case 0:
    			accumulator.banks[bank_idx].cells[12].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 8001e84:	89fb      	ldrh	r3, [r7, #14]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4acc      	ldr	r2, [pc, #816]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001e8a:	21e8      	movs	r1, #232	; 0xe8
 8001e8c:	fb01 f303 	mul.w	r3, r1, r3
 8001e90:	4413      	add	r3, r2
 8001e92:	3348      	adds	r3, #72	; 0x48
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	89fc      	ldrh	r4, [r7, #14]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 f9bd 	bl	8002218 <FEB_LTC6811_Convert_Temperature>
 8001e9e:	eef0 7a40 	vmov.f32	s15, s0
 8001ea2:	4ac6      	ldr	r2, [pc, #792]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001ea4:	4623      	mov	r3, r4
 8001ea6:	011b      	lsls	r3, r3, #4
 8001ea8:	4423      	add	r3, r4
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4413      	add	r3, r2
 8001eae:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001eb2:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[16].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 8001eb6:	89fb      	ldrh	r3, [r7, #14]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4ac0      	ldr	r2, [pc, #768]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001ebc:	21e8      	movs	r1, #232	; 0xe8
 8001ebe:	fb01 f303 	mul.w	r3, r1, r3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	334a      	adds	r3, #74	; 0x4a
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	89fc      	ldrh	r4, [r7, #14]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 f9a4 	bl	8002218 <FEB_LTC6811_Convert_Temperature>
 8001ed0:	eef0 7a40 	vmov.f32	s15, s0
 8001ed4:	4ab9      	ldr	r2, [pc, #740]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001ed6:	4623      	mov	r3, r4
 8001ed8:	011b      	lsls	r3, r3, #4
 8001eda:	4423      	add	r3, r4
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	4413      	add	r3, r2
 8001ee0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001ee4:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[4].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 8001ee8:	89fb      	ldrh	r3, [r7, #14]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	3301      	adds	r3, #1
 8001eee:	4ab3      	ldr	r2, [pc, #716]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001ef0:	21e8      	movs	r1, #232	; 0xe8
 8001ef2:	fb01 f303 	mul.w	r3, r1, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3348      	adds	r3, #72	; 0x48
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	89fc      	ldrh	r4, [r7, #14]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 f98a 	bl	8002218 <FEB_LTC6811_Convert_Temperature>
 8001f04:	eef0 7a40 	vmov.f32	s15, s0
 8001f08:	4aac      	ldr	r2, [pc, #688]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001f0a:	4623      	mov	r3, r4
 8001f0c:	011b      	lsls	r3, r3, #4
 8001f0e:	4423      	add	r3, r4
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4413      	add	r3, r2
 8001f14:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8001f18:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[8].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 8001f1c:	89fb      	ldrh	r3, [r7, #14]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	3301      	adds	r3, #1
 8001f22:	4aa6      	ldr	r2, [pc, #664]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001f24:	21e8      	movs	r1, #232	; 0xe8
 8001f26:	fb01 f303 	mul.w	r3, r1, r3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	334a      	adds	r3, #74	; 0x4a
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	89fc      	ldrh	r4, [r7, #14]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 f970 	bl	8002218 <FEB_LTC6811_Convert_Temperature>
 8001f38:	eef0 7a40 	vmov.f32	s15, s0
 8001f3c:	4a9f      	ldr	r2, [pc, #636]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001f3e:	4623      	mov	r3, r4
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	4423      	add	r3, r4
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f4c:	edc3 7a00 	vstr	s15, [r3]
    			break;
 8001f50:	e151      	b.n	80021f6 <FEB_LTC6811_Store_Temperature+0x3a6>
    		case 1:
    			accumulator.banks[bank_idx].cells[11].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 8001f52:	89fb      	ldrh	r3, [r7, #14]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4a99      	ldr	r2, [pc, #612]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001f58:	21e8      	movs	r1, #232	; 0xe8
 8001f5a:	fb01 f303 	mul.w	r3, r1, r3
 8001f5e:	4413      	add	r3, r2
 8001f60:	3348      	adds	r3, #72	; 0x48
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	89fc      	ldrh	r4, [r7, #14]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 f956 	bl	8002218 <FEB_LTC6811_Convert_Temperature>
 8001f6c:	eef0 7a40 	vmov.f32	s15, s0
 8001f70:	4a92      	ldr	r2, [pc, #584]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001f72:	4623      	mov	r3, r4
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	4423      	add	r3, r4
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001f80:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[15].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 8001f84:	89fb      	ldrh	r3, [r7, #14]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4a8c      	ldr	r2, [pc, #560]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001f8a:	21e8      	movs	r1, #232	; 0xe8
 8001f8c:	fb01 f303 	mul.w	r3, r1, r3
 8001f90:	4413      	add	r3, r2
 8001f92:	334a      	adds	r3, #74	; 0x4a
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	89fc      	ldrh	r4, [r7, #14]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 f93d 	bl	8002218 <FEB_LTC6811_Convert_Temperature>
 8001f9e:	eef0 7a40 	vmov.f32	s15, s0
 8001fa2:	4a86      	ldr	r2, [pc, #536]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001fa4:	4623      	mov	r3, r4
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	4423      	add	r3, r4
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001fb2:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[3].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 8001fb6:	89fb      	ldrh	r3, [r7, #14]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	3301      	adds	r3, #1
 8001fbc:	4a7f      	ldr	r2, [pc, #508]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001fbe:	21e8      	movs	r1, #232	; 0xe8
 8001fc0:	fb01 f303 	mul.w	r3, r1, r3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3348      	adds	r3, #72	; 0x48
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	89fc      	ldrh	r4, [r7, #14]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 f923 	bl	8002218 <FEB_LTC6811_Convert_Temperature>
 8001fd2:	eef0 7a40 	vmov.f32	s15, s0
 8001fd6:	4a79      	ldr	r2, [pc, #484]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001fd8:	4623      	mov	r3, r4
 8001fda:	011b      	lsls	r3, r3, #4
 8001fdc:	4423      	add	r3, r4
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8001fe6:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[7].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 8001fea:	89fb      	ldrh	r3, [r7, #14]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	3301      	adds	r3, #1
 8001ff0:	4a72      	ldr	r2, [pc, #456]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 8001ff2:	21e8      	movs	r1, #232	; 0xe8
 8001ff4:	fb01 f303 	mul.w	r3, r1, r3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	334a      	adds	r3, #74	; 0x4a
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	89fc      	ldrh	r4, [r7, #14]
 8002000:	4618      	mov	r0, r3
 8002002:	f000 f909 	bl	8002218 <FEB_LTC6811_Convert_Temperature>
 8002006:	eef0 7a40 	vmov.f32	s15, s0
 800200a:	4a6c      	ldr	r2, [pc, #432]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 800200c:	4623      	mov	r3, r4
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	4423      	add	r3, r4
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800201a:	edc3 7a00 	vstr	s15, [r3]
    			break;
 800201e:	e0ea      	b.n	80021f6 <FEB_LTC6811_Store_Temperature+0x3a6>
    		case 2:
    			accumulator.banks[bank_idx].cells[10].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 8002020:	89fb      	ldrh	r3, [r7, #14]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	4a65      	ldr	r2, [pc, #404]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 8002026:	21e8      	movs	r1, #232	; 0xe8
 8002028:	fb01 f303 	mul.w	r3, r1, r3
 800202c:	4413      	add	r3, r2
 800202e:	3348      	adds	r3, #72	; 0x48
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	89fc      	ldrh	r4, [r7, #14]
 8002034:	4618      	mov	r0, r3
 8002036:	f000 f8ef 	bl	8002218 <FEB_LTC6811_Convert_Temperature>
 800203a:	eef0 7a40 	vmov.f32	s15, s0
 800203e:	4a5f      	ldr	r2, [pc, #380]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 8002040:	4623      	mov	r3, r4
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	4423      	add	r3, r4
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4413      	add	r3, r2
 800204a:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800204e:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[14].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 8002052:	89fb      	ldrh	r3, [r7, #14]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4a59      	ldr	r2, [pc, #356]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 8002058:	21e8      	movs	r1, #232	; 0xe8
 800205a:	fb01 f303 	mul.w	r3, r1, r3
 800205e:	4413      	add	r3, r2
 8002060:	334a      	adds	r3, #74	; 0x4a
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	89fc      	ldrh	r4, [r7, #14]
 8002066:	4618      	mov	r0, r3
 8002068:	f000 f8d6 	bl	8002218 <FEB_LTC6811_Convert_Temperature>
 800206c:	eef0 7a40 	vmov.f32	s15, s0
 8002070:	4a52      	ldr	r2, [pc, #328]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 8002072:	4623      	mov	r3, r4
 8002074:	011b      	lsls	r3, r3, #4
 8002076:	4423      	add	r3, r4
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4413      	add	r3, r2
 800207c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8002080:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[2].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 8002084:	89fb      	ldrh	r3, [r7, #14]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	3301      	adds	r3, #1
 800208a:	4a4c      	ldr	r2, [pc, #304]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 800208c:	21e8      	movs	r1, #232	; 0xe8
 800208e:	fb01 f303 	mul.w	r3, r1, r3
 8002092:	4413      	add	r3, r2
 8002094:	3348      	adds	r3, #72	; 0x48
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	89fc      	ldrh	r4, [r7, #14]
 800209a:	4618      	mov	r0, r3
 800209c:	f000 f8bc 	bl	8002218 <FEB_LTC6811_Convert_Temperature>
 80020a0:	eef0 7a40 	vmov.f32	s15, s0
 80020a4:	4a45      	ldr	r2, [pc, #276]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 80020a6:	4623      	mov	r3, r4
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	4423      	add	r3, r4
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80020b4:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[6].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 80020b8:	89fb      	ldrh	r3, [r7, #14]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	3301      	adds	r3, #1
 80020be:	4a3f      	ldr	r2, [pc, #252]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 80020c0:	21e8      	movs	r1, #232	; 0xe8
 80020c2:	fb01 f303 	mul.w	r3, r1, r3
 80020c6:	4413      	add	r3, r2
 80020c8:	334a      	adds	r3, #74	; 0x4a
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	89fc      	ldrh	r4, [r7, #14]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 f8a2 	bl	8002218 <FEB_LTC6811_Convert_Temperature>
 80020d4:	eef0 7a40 	vmov.f32	s15, s0
 80020d8:	4a38      	ldr	r2, [pc, #224]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 80020da:	4623      	mov	r3, r4
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	4423      	add	r3, r4
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80020e8:	edc3 7a00 	vstr	s15, [r3]
    			break;
 80020ec:	e083      	b.n	80021f6 <FEB_LTC6811_Store_Temperature+0x3a6>
    		case 3:
    			accumulator.banks[bank_idx].cells[9].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 80020ee:	89fb      	ldrh	r3, [r7, #14]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4a32      	ldr	r2, [pc, #200]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 80020f4:	21e8      	movs	r1, #232	; 0xe8
 80020f6:	fb01 f303 	mul.w	r3, r1, r3
 80020fa:	4413      	add	r3, r2
 80020fc:	3348      	adds	r3, #72	; 0x48
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	89fc      	ldrh	r4, [r7, #14]
 8002102:	4618      	mov	r0, r3
 8002104:	f000 f888 	bl	8002218 <FEB_LTC6811_Convert_Temperature>
 8002108:	eef0 7a40 	vmov.f32	s15, s0
 800210c:	4a2b      	ldr	r2, [pc, #172]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 800210e:	4623      	mov	r3, r4
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	4423      	add	r3, r4
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4413      	add	r3, r2
 8002118:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800211c:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[13].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 8002120:	89fb      	ldrh	r3, [r7, #14]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4a25      	ldr	r2, [pc, #148]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 8002126:	21e8      	movs	r1, #232	; 0xe8
 8002128:	fb01 f303 	mul.w	r3, r1, r3
 800212c:	4413      	add	r3, r2
 800212e:	334a      	adds	r3, #74	; 0x4a
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	89fc      	ldrh	r4, [r7, #14]
 8002134:	4618      	mov	r0, r3
 8002136:	f000 f86f 	bl	8002218 <FEB_LTC6811_Convert_Temperature>
 800213a:	eef0 7a40 	vmov.f32	s15, s0
 800213e:	4a1f      	ldr	r2, [pc, #124]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 8002140:	4623      	mov	r3, r4
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	4423      	add	r3, r4
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4413      	add	r3, r2
 800214a:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800214e:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[1].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 8002152:	89fb      	ldrh	r3, [r7, #14]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	3301      	adds	r3, #1
 8002158:	4a18      	ldr	r2, [pc, #96]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 800215a:	21e8      	movs	r1, #232	; 0xe8
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	4413      	add	r3, r2
 8002162:	3348      	adds	r3, #72	; 0x48
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	89fc      	ldrh	r4, [r7, #14]
 8002168:	4618      	mov	r0, r3
 800216a:	f000 f855 	bl	8002218 <FEB_LTC6811_Convert_Temperature>
 800216e:	eef0 7a40 	vmov.f32	s15, s0
 8002172:	4a12      	ldr	r2, [pc, #72]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 8002174:	4623      	mov	r3, r4
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	4423      	add	r3, r4
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4413      	add	r3, r2
 800217e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002182:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[5].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 8002186:	89fb      	ldrh	r3, [r7, #14]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	3301      	adds	r3, #1
 800218c:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 800218e:	21e8      	movs	r1, #232	; 0xe8
 8002190:	fb01 f303 	mul.w	r3, r1, r3
 8002194:	4413      	add	r3, r2
 8002196:	334a      	adds	r3, #74	; 0x4a
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	89fc      	ldrh	r4, [r7, #14]
 800219c:	4618      	mov	r0, r3
 800219e:	f000 f83b 	bl	8002218 <FEB_LTC6811_Convert_Temperature>
 80021a2:	eef0 7a40 	vmov.f32	s15, s0
 80021a6:	4a05      	ldr	r2, [pc, #20]	; (80021bc <FEB_LTC6811_Store_Temperature+0x36c>)
 80021a8:	4623      	mov	r3, r4
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	4423      	add	r3, r4
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021b6:	edc3 7a00 	vstr	s15, [r3]
    			break;
 80021ba:	e01c      	b.n	80021f6 <FEB_LTC6811_Store_Temperature+0x3a6>
 80021bc:	2000262c 	.word	0x2000262c
    		case 4:
    			accumulator.banks[bank_idx].cells[0].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 80021c0:	89fb      	ldrh	r3, [r7, #14]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	3301      	adds	r3, #1
 80021c6:	4a12      	ldr	r2, [pc, #72]	; (8002210 <FEB_LTC6811_Store_Temperature+0x3c0>)
 80021c8:	21e8      	movs	r1, #232	; 0xe8
 80021ca:	fb01 f303 	mul.w	r3, r1, r3
 80021ce:	4413      	add	r3, r2
 80021d0:	3348      	adds	r3, #72	; 0x48
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	89fc      	ldrh	r4, [r7, #14]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f81e 	bl	8002218 <FEB_LTC6811_Convert_Temperature>
 80021dc:	eef0 7a40 	vmov.f32	s15, s0
 80021e0:	4a0b      	ldr	r2, [pc, #44]	; (8002210 <FEB_LTC6811_Store_Temperature+0x3c0>)
 80021e2:	4623      	mov	r3, r4
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	4423      	add	r3, r4
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	4413      	add	r3, r2
 80021ec:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80021f0:	edc3 7a00 	vstr	s15, [r3]
    			break;
 80021f4:	bf00      	nop
    for (uint16_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 80021f6:	89fb      	ldrh	r3, [r7, #14]
 80021f8:	3301      	adds	r3, #1
 80021fa:	81fb      	strh	r3, [r7, #14]
 80021fc:	89fb      	ldrh	r3, [r7, #14]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f43f ae2e 	beq.w	8001e60 <FEB_LTC6811_Store_Temperature+0x10>
    	}
    }
}
 8002204:	bf00      	nop
 8002206:	bf00      	nop
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	bd90      	pop	{r4, r7, pc}
 800220e:	bf00      	nop
 8002210:	2000262c 	.word	0x2000262c
 8002214:	00000000 	.word	0x00000000

08002218 <FEB_LTC6811_Convert_Temperature>:

/*
 * @param value := Voltage (100uV) from LTC6811
 */
float FEB_LTC6811_Convert_Temperature(uint16_t value) {
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	80fb      	strh	r3, [r7, #6]
	// Check for error: value = 2^16 - 1
	if (value == 65535) {
 8002222:	88fb      	ldrh	r3, [r7, #6]
 8002224:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002228:	4293      	cmp	r3, r2
 800222a:	d102      	bne.n	8002232 <FEB_LTC6811_Convert_Temperature+0x1a>
		return -42;
 800222c:	eddf 7a10 	vldr	s15, [pc, #64]	; 8002270 <FEB_LTC6811_Convert_Temperature+0x58>
 8002230:	e015      	b.n	800225e <FEB_LTC6811_Convert_Temperature+0x46>
	}
	//return value * 0.0001;
	return FEB_LTC6811_Temp_LUT_Get_Temperature(value * 0.0001);
 8002232:	88fb      	ldrh	r3, [r7, #6]
 8002234:	4618      	mov	r0, r3
 8002236:	f7fe f995 	bl	8000564 <__aeabi_i2d>
 800223a:	a30b      	add	r3, pc, #44	; (adr r3, 8002268 <FEB_LTC6811_Convert_Temperature+0x50>)
 800223c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002240:	f7fe f9fa 	bl	8000638 <__aeabi_dmul>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4610      	mov	r0, r2
 800224a:	4619      	mov	r1, r3
 800224c:	f7fe fcec 	bl	8000c28 <__aeabi_d2f>
 8002250:	4603      	mov	r3, r0
 8002252:	ee00 3a10 	vmov	s0, r3
 8002256:	f000 f8fb 	bl	8002450 <FEB_LTC6811_Temp_LUT_Get_Temperature>
 800225a:	eef0 7a40 	vmov.f32	s15, s0
}
 800225e:	eeb0 0a67 	vmov.f32	s0, s15
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	eb1c432d 	.word	0xeb1c432d
 800226c:	3f1a36e2 	.word	0x3f1a36e2
 8002270:	c2280000 	.word	0xc2280000

08002274 <FEB_LTC6811_Validate_Temperature>:

// ******************** Temperature Interface ********************

void FEB_LTC6811_Validate_Temperature(void) {
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 800227a:	2300      	movs	r3, #0
 800227c:	73fb      	strb	r3, [r7, #15]
 800227e:	e02f      	b.n	80022e0 <FEB_LTC6811_Validate_Temperature+0x6c>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8002280:	2300      	movs	r3, #0
 8002282:	73bb      	strb	r3, [r7, #14]
 8002284:	e026      	b.n	80022d4 <FEB_LTC6811_Validate_Temperature+0x60>
			float temperature = accumulator.banks[bank_idx].cells[cell_idx].temperature;
 8002286:	7bfa      	ldrb	r2, [r7, #15]
 8002288:	7bb9      	ldrb	r1, [r7, #14]
 800228a:	4819      	ldr	r0, [pc, #100]	; (80022f0 <FEB_LTC6811_Validate_Temperature+0x7c>)
 800228c:	4613      	mov	r3, r2
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	4413      	add	r3, r2
 8002292:	440b      	add	r3, r1
 8002294:	333a      	adds	r3, #58	; 0x3a
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4403      	add	r3, r0
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	60bb      	str	r3, [r7, #8]
			float min_temperature = MIN_OPERATION_TEMPERATURE;
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <FEB_LTC6811_Validate_Temperature+0x80>)
 80022a0:	607b      	str	r3, [r7, #4]
			float max_temperature = MAX_OPERATION_TEMPERATURE;
 80022a2:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <FEB_LTC6811_Validate_Temperature+0x84>)
 80022a4:	603b      	str	r3, [r7, #0]
			if (FEB_CAN_CHARGER_START_CHARGE == 1) {
				min_temperature = MIN_CHARGING_TEMPERATURE;
				max_temperature = MAX_CHARGING_TEMPERATURE;
			}
			if (temperature < min_temperature || temperature > max_temperature) {
 80022a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80022aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80022ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b6:	d408      	bmi.n	80022ca <FEB_LTC6811_Validate_Temperature+0x56>
 80022b8:	ed97 7a02 	vldr	s14, [r7, #8]
 80022bc:	edd7 7a00 	vldr	s15, [r7]
 80022c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c8:	dd01      	ble.n	80022ce <FEB_LTC6811_Validate_Temperature+0x5a>
				FEB_BMS_Shutdown_Initiate();
 80022ca:	f7fe fea3 	bl	8001014 <FEB_BMS_Shutdown_Initiate>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 80022ce:	7bbb      	ldrb	r3, [r7, #14]
 80022d0:	3301      	adds	r3, #1
 80022d2:	73bb      	strb	r3, [r7, #14]
 80022d4:	7bbb      	ldrb	r3, [r7, #14]
 80022d6:	2b10      	cmp	r3, #16
 80022d8:	d9d5      	bls.n	8002286 <FEB_LTC6811_Validate_Temperature+0x12>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	3301      	adds	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0cc      	beq.n	8002280 <FEB_LTC6811_Validate_Temperature+0xc>
			}
		}
	}
}
 80022e6:	bf00      	nop
 80022e8:	bf00      	nop
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	2000262c 	.word	0x2000262c
 80022f4:	c1a00000 	.word	0xc1a00000
 80022f8:	42700000 	.word	0x42700000

080022fc <FEB_LTC6811_UART_Transmit_Temperature>:

void FEB_LTC6811_UART_Transmit_Temperature() {
 80022fc:	b580      	push	{r7, lr}
 80022fe:	f5ad 6da1 	sub.w	sp, sp, #1288	; 0x508
 8002302:	af00      	add	r7, sp, #0
	char UART_Str[1024];
	char temp_str[256];

	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 8002304:	2300      	movs	r3, #0
 8002306:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 800230a:	e05e      	b.n	80023ca <FEB_LTC6811_UART_Transmit_Temperature+0xce>
		// Add bank_idx, cell_idx to {@code UART_Str}
		sprintf(UART_Str, "%d", (bank_idx << UART_BITS_PER_MESSAGE) + UART_TEMPERATURE_ID);
 800230c:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002318:	4931      	ldr	r1, [pc, #196]	; (80023e0 <FEB_LTC6811_UART_Transmit_Temperature+0xe4>)
 800231a:	4618      	mov	r0, r3
 800231c:	f005 fe36 	bl	8007f8c <siprintf>


		// Add values to {@code UART_Str}
		for (uint16_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8002320:	2300      	movs	r3, #0
 8002322:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8002326:	e02a      	b.n	800237e <FEB_LTC6811_UART_Transmit_Temperature+0x82>
			float temperature = accumulator.banks[bank_idx].cells[cell_idx].temperature;
 8002328:	f897 2507 	ldrb.w	r2, [r7, #1287]	; 0x507
 800232c:	f8b7 1504 	ldrh.w	r1, [r7, #1284]	; 0x504
 8002330:	482c      	ldr	r0, [pc, #176]	; (80023e4 <FEB_LTC6811_UART_Transmit_Temperature+0xe8>)
 8002332:	4613      	mov	r3, r2
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	4413      	add	r3, r2
 8002338:	440b      	add	r3, r1
 800233a:	333a      	adds	r3, #58	; 0x3a
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4403      	add	r3, r0
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 8002346:	6013      	str	r3, [r2, #0]

			sprintf(temp_str, " %f", temperature);
 8002348:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	f7fe f91b 	bl	8000588 <__aeabi_f2d>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4638      	mov	r0, r7
 8002358:	4923      	ldr	r1, [pc, #140]	; (80023e8 <FEB_LTC6811_UART_Transmit_Temperature+0xec>)
 800235a:	f005 fe17 	bl	8007f8c <siprintf>
			strncat(UART_Str, temp_str, strlen(temp_str));
 800235e:	463b      	mov	r3, r7
 8002360:	4618      	mov	r0, r3
 8002362:	f7fd ff55 	bl	8000210 <strlen>
 8002366:	4602      	mov	r2, r0
 8002368:	4639      	mov	r1, r7
 800236a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800236e:	4618      	mov	r0, r3
 8002370:	f005 fe2c 	bl	8007fcc <strncat>
		for (uint16_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8002374:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8002378:	3301      	adds	r3, #1
 800237a:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 800237e:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8002382:	2b10      	cmp	r3, #16
 8002384:	d9d0      	bls.n	8002328 <FEB_LTC6811_UART_Transmit_Temperature+0x2c>
		}

		// Add '\n' to {@code UART_Str}
		sprintf(temp_str, "\n");
 8002386:	463b      	mov	r3, r7
 8002388:	4918      	ldr	r1, [pc, #96]	; (80023ec <FEB_LTC6811_UART_Transmit_Temperature+0xf0>)
 800238a:	4618      	mov	r0, r3
 800238c:	f005 fdfe 	bl	8007f8c <siprintf>
		strncat(UART_Str, temp_str, strlen(temp_str));
 8002390:	463b      	mov	r3, r7
 8002392:	4618      	mov	r0, r3
 8002394:	f7fd ff3c 	bl	8000210 <strlen>
 8002398:	4602      	mov	r2, r0
 800239a:	4639      	mov	r1, r7
 800239c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80023a0:	4618      	mov	r0, r3
 80023a2:	f005 fe13 	bl	8007fcc <strncat>
		HAL_UART_Transmit(&huart2, (uint8_t*) UART_Str, strlen(UART_Str), 100);
 80023a6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fd ff30 	bl	8000210 <strlen>
 80023b0:	4603      	mov	r3, r0
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80023b8:	2364      	movs	r3, #100	; 0x64
 80023ba:	480d      	ldr	r0, [pc, #52]	; (80023f0 <FEB_LTC6811_UART_Transmit_Temperature+0xf4>)
 80023bc:	f004 fcd5 	bl	8006d6a <HAL_UART_Transmit>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 80023c0:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 80023c4:	3301      	adds	r3, #1
 80023c6:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 80023ca:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d09c      	beq.n	800230c <FEB_LTC6811_UART_Transmit_Temperature+0x10>
	}
}
 80023d2:	bf00      	nop
 80023d4:	bf00      	nop
 80023d6:	f507 67a1 	add.w	r7, r7, #1288	; 0x508
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	0800a364 	.word	0x0800a364
 80023e4:	2000262c 	.word	0x2000262c
 80023e8:	0800a368 	.word	0x0800a368
 80023ec:	0800a36c 	.word	0x0800a36c
 80023f0:	2000292c 	.word	0x2000292c

080023f4 <FEB_LTC6811_Clear_Temperature>:

void FEB_LTC6811_Clear_Temperature(void) {
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 80023fa:	2300      	movs	r3, #0
 80023fc:	71fb      	strb	r3, [r7, #7]
 80023fe:	e018      	b.n	8002432 <FEB_LTC6811_Clear_Temperature+0x3e>
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8002400:	2300      	movs	r3, #0
 8002402:	71bb      	strb	r3, [r7, #6]
 8002404:	e00f      	b.n	8002426 <FEB_LTC6811_Clear_Temperature+0x32>
			accumulator.banks[bank_idx].cells[cell_idx].temperature = 0;
 8002406:	79fa      	ldrb	r2, [r7, #7]
 8002408:	79b9      	ldrb	r1, [r7, #6]
 800240a:	480f      	ldr	r0, [pc, #60]	; (8002448 <FEB_LTC6811_Clear_Temperature+0x54>)
 800240c:	4613      	mov	r3, r2
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	4413      	add	r3, r2
 8002412:	440b      	add	r3, r1
 8002414:	333a      	adds	r3, #58	; 0x3a
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4403      	add	r3, r0
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
		for (uint8_t cell_idx = 0; cell_idx < CELLS_PER_BANK; cell_idx++) {
 8002420:	79bb      	ldrb	r3, [r7, #6]
 8002422:	3301      	adds	r3, #1
 8002424:	71bb      	strb	r3, [r7, #6]
 8002426:	79bb      	ldrb	r3, [r7, #6]
 8002428:	2b10      	cmp	r3, #16
 800242a:	d9ec      	bls.n	8002406 <FEB_LTC6811_Clear_Temperature+0x12>
	for (uint8_t bank_idx = 0; bank_idx < NUM_BANKS; bank_idx++) {
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	3301      	adds	r3, #1
 8002430:	71fb      	strb	r3, [r7, #7]
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0e3      	beq.n	8002400 <FEB_LTC6811_Clear_Temperature+0xc>
		}
	}
}
 8002438:	bf00      	nop
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	2000262c 	.word	0x2000262c
 800244c:	00000000 	.word	0x00000000

08002450 <FEB_LTC6811_Temp_LUT_Get_Temperature>:

float FEB_LTC6811_TEMP_MAP[][2] = {{1.3, 120.0}, {1.301, 119.5}, {1.302, 119.0}, {1.303, 118.5}, {1.304, 118.0}, {1.305, 117.5}, {1.306, 117.0}, {1.307, 116.5}, {1.308, 116.0}, {1.309, 115.5}, {1.31, 115.0}, {1.311, 114.5}, {1.312, 114.0}, {1.313, 113.5}, {1.314, 113.0}, {1.315, 112.5}, {1.316, 112.0}, {1.317, 111.5}, {1.318, 111.0}, {1.319, 110.5}, {1.32, 110.0}, {1.321, 109.5}, {1.322, 109.0}, {1.323, 108.5}, {1.324, 108.0}, {1.325, 107.5}, {1.326, 107.0}, {1.327, 106.5}, {1.328, 106.0}, {1.329, 105.5}, {1.33, 105.0}, {1.331, 104.5}, {1.332, 104.0}, {1.333, 103.5}, {1.334, 103.0}, {1.335, 102.5}, {1.336, 102.0}, {1.337, 101.5}, {1.338, 101.0}, {1.339, 100.5}, {1.34, 100.0}, {1.341, 99.5}, {1.342, 99.0}, {1.343, 98.5}, {1.344, 98.0}, {1.345, 97.5}, {1.346, 97.0}, {1.347, 96.5}, {1.348, 96.0}, {1.349, 95.5}, {1.35, 95.0}, {1.351, 94.75}, {1.352, 94.5}, {1.353, 94.25}, {1.354, 94.0}, {1.355, 93.75}, {1.356, 93.5}, {1.357, 93.25}, {1.358, 93.0}, {1.359, 92.75}, {1.36, 92.5}, {1.361, 92.25}, {1.362, 92.0}, {1.363, 91.75}, {1.364, 91.5}, {1.365, 91.25}, {1.366, 91.0}, {1.367, 90.75}, {1.368, 90.5}, {1.369, 90.25}, {1.37, 90.0}, {1.371, 89.5}, {1.372, 89.0}, {1.373, 88.5}, {1.374, 88.0}, {1.375, 87.5}, {1.376, 87.0}, {1.377, 86.5}, {1.378, 86.0}, {1.379, 85.5}, {1.38, 85.0}, {1.381, 84.75}, {1.382, 84.5}, {1.383, 84.25}, {1.384, 84.0}, {1.385, 83.75}, {1.386, 83.5}, {1.387, 83.25}, {1.388, 83.0}, {1.389, 82.75}, {1.39, 82.5}, {1.391, 82.25}, {1.392, 82.0}, {1.393, 81.75}, {1.394, 81.5}, {1.395, 81.25}, {1.396, 81.0}, {1.397, 80.75}, {1.398, 80.5}, {1.399, 80.25}, {1.4, 80.0}, {1.401, 79.8333}, {1.402, 79.6667}, {1.403, 79.5}, {1.404, 79.3333}, {1.405, 79.1667}, {1.406, 79.0}, {1.407, 78.8333}, {1.408, 78.6667}, {1.409, 78.5}, {1.41, 78.3333}, {1.411, 78.1667}, {1.412, 78.0}, {1.413, 77.8333}, {1.414, 77.6667}, {1.415, 77.5}, {1.416, 77.3333}, {1.417, 77.1667}, {1.418, 77.0}, {1.419, 76.8333}, {1.42, 76.6667}, {1.421, 76.5}, {1.422, 76.3333}, {1.423, 76.1667}, {1.424, 76.0}, {1.425, 75.8333}, {1.426, 75.6667}, {1.427, 75.5}, {1.428, 75.3333}, {1.429, 75.1667}, {1.43, 75.0}, {1.431, 74.75}, {1.432, 74.5}, {1.433, 74.25}, {1.434, 74.0}, {1.435, 73.75}, {1.436, 73.5}, {1.437, 73.25}, {1.438, 73.0}, {1.439, 72.75}, {1.44, 72.5}, {1.441, 72.25}, {1.442, 72.0}, {1.443, 71.75}, {1.444, 71.5}, {1.445, 71.25}, {1.446, 71.0}, {1.447, 70.75}, {1.448, 70.5}, {1.449, 70.25}, {1.45, 70.0}, {1.451, 69.8333}, {1.452, 69.6667}, {1.453, 69.5}, {1.454, 69.3333}, {1.455, 69.1667}, {1.456, 69.0}, {1.457, 68.8333}, {1.458, 68.6667}, {1.459, 68.5}, {1.46, 68.3333}, {1.461, 68.1667}, {1.462, 68.0}, {1.463, 67.8333}, {1.464, 67.6667}, {1.465, 67.5}, {1.466, 67.3333}, {1.467, 67.1667}, {1.468, 67.0}, {1.469, 66.8333}, {1.47, 66.6667}, {1.471, 66.5}, {1.472, 66.3333}, {1.473, 66.1667}, {1.474, 66.0}, {1.475, 65.8333}, {1.476, 65.6667}, {1.477, 65.5}, {1.478, 65.3333}, {1.479, 65.1667}, {1.48, 65.0}, {1.481, 64.8333}, {1.482, 64.6667}, {1.483, 64.5}, {1.484, 64.3333}, {1.485, 64.1667}, {1.486, 64.0}, {1.487, 63.8333}, {1.488, 63.6667}, {1.489, 63.5}, {1.49, 63.3333}, {1.491, 63.1667}, {1.492, 63.0}, {1.493, 62.8333}, {1.494, 62.6667}, {1.495, 62.5}, {1.496, 62.3333}, {1.497, 62.1667}, {1.498, 62.0}, {1.499, 61.8333}, {1.5, 61.6667}, {1.501, 61.5}, {1.502, 61.3333}, {1.503, 61.1667}, {1.504, 61.0}, {1.505, 60.8333}, {1.506, 60.6667}, {1.507, 60.5}, {1.508, 60.3333}, {1.509, 60.1667}, {1.51, 60.0}, {1.511, 59.875}, {1.512, 59.75}, {1.513, 59.625}, {1.514, 59.5}, {1.515, 59.375}, {1.516, 59.25}, {1.517, 59.125}, {1.518, 59.0}, {1.519, 58.875}, {1.52, 58.75}, {1.521, 58.625}, {1.522, 58.5}, {1.523, 58.375}, {1.524, 58.25}, {1.525, 58.125}, {1.526, 58.0}, {1.527, 57.875}, {1.528, 57.75}, {1.529, 57.625}, {1.53, 57.5}, {1.531, 57.375}, {1.532, 57.25}, {1.533, 57.125}, {1.534, 57.0}, {1.535, 56.875}, {1.536, 56.75}, {1.537, 56.625}, {1.538, 56.5}, {1.539, 56.375}, {1.54, 56.25}, {1.541, 56.125}, {1.542, 56.0}, {1.543, 55.875}, {1.544, 55.75}, {1.545, 55.625}, {1.546, 55.5}, {1.547, 55.375}, {1.548, 55.25}, {1.549, 55.125}, {1.55, 55.0}, {1.551, 54.875}, {1.552, 54.75}, {1.553, 54.625}, {1.554, 54.5}, {1.555, 54.375}, {1.556, 54.25}, {1.557, 54.125}, {1.558, 54.0}, {1.559, 53.875}, {1.56, 53.75}, {1.561, 53.625}, {1.562, 53.5}, {1.563, 53.375}, {1.564, 53.25}, {1.565, 53.125}, {1.566, 53.0}, {1.567, 52.875}, {1.568, 52.75}, {1.569, 52.625}, {1.57, 52.5}, {1.571, 52.375}, {1.572, 52.25}, {1.573, 52.125}, {1.574, 52.0}, {1.575, 51.875}, {1.576, 51.75}, {1.577, 51.625}, {1.578, 51.5}, {1.579, 51.375}, {1.58, 51.25}, {1.581, 51.125}, {1.582, 51.0}, {1.583, 50.875}, {1.584, 50.75}, {1.585, 50.625}, {1.586, 50.5}, {1.587, 50.375}, {1.588, 50.25}, {1.589, 50.125}, {1.59, 50.0}, {1.591, 49.875}, {1.592, 49.75}, {1.593, 49.625}, {1.594, 49.5}, {1.595, 49.375}, {1.596, 49.25}, {1.597, 49.125}, {1.598, 49.0}, {1.599, 48.875}, {1.6, 48.75}, {1.601, 48.625}, {1.602, 48.5}, {1.603, 48.375}, {1.604, 48.25}, {1.605, 48.125}, {1.606, 48.0}, {1.607, 47.875}, {1.608, 47.75}, {1.609, 47.625}, {1.61, 47.5}, {1.611, 47.375}, {1.612, 47.25}, {1.613, 47.125}, {1.614, 47.0}, {1.615, 46.875}, {1.616, 46.75}, {1.617, 46.625}, {1.618, 46.5}, {1.619, 46.375}, {1.62, 46.25}, {1.621, 46.125}, {1.622, 46.0}, {1.623, 45.875}, {1.624, 45.75}, {1.625, 45.625}, {1.626, 45.5}, {1.627, 45.375}, {1.628, 45.25}, {1.629, 45.125}, {1.63, 45.0}, {1.631, 44.9}, {1.632, 44.8}, {1.633, 44.7}, {1.634, 44.6}, {1.635, 44.5}, {1.636, 44.4}, {1.637, 44.3}, {1.638, 44.2}, {1.639, 44.1}, {1.64, 44.0}, {1.641, 43.9}, {1.642, 43.8}, {1.643, 43.7}, {1.644, 43.6}, {1.645, 43.5}, {1.646, 43.4}, {1.647, 43.3}, {1.648, 43.2}, {1.649, 43.1}, {1.65, 43.0}, {1.651, 42.9}, {1.652, 42.8}, {1.653, 42.7}, {1.654, 42.6}, {1.655, 42.5}, {1.656, 42.4}, {1.657, 42.3}, {1.658, 42.2}, {1.659, 42.1}, {1.66, 42.0}, {1.661, 41.9}, {1.662, 41.8}, {1.663, 41.7}, {1.664, 41.6}, {1.665, 41.5}, {1.666, 41.4}, {1.667, 41.3}, {1.668, 41.2}, {1.669, 41.1}, {1.67, 41.0}, {1.671, 40.9}, {1.672, 40.8}, {1.673, 40.7}, {1.674, 40.6}, {1.675, 40.5}, {1.676, 40.4}, {1.677, 40.3}, {1.678, 40.2}, {1.679, 40.1}, {1.68, 40.0}, {1.681, 39.9167}, {1.682, 39.8333}, {1.683, 39.75}, {1.684, 39.6667}, {1.685, 39.5833}, {1.686, 39.5}, {1.687, 39.4167}, {1.688, 39.3333}, {1.689, 39.25}, {1.69, 39.1667}, {1.691, 39.0833}, {1.692, 39.0}, {1.693, 38.9167}, {1.694, 38.8333}, {1.695, 38.75}, {1.696, 38.6667}, {1.697, 38.5833}, {1.698, 38.5}, {1.699, 38.4167}, {1.7, 38.3333}, {1.701, 38.25}, {1.702, 38.1667}, {1.703, 38.0833}, {1.704, 38.0}, {1.705, 37.9167}, {1.706, 37.8333}, {1.707, 37.75}, {1.708, 37.6667}, {1.709, 37.5833}, {1.71, 37.5}, {1.711, 37.4167}, {1.712, 37.3333}, {1.713, 37.25}, {1.714, 37.1667}, {1.715, 37.0833}, {1.716, 37.0}, {1.717, 36.9167}, {1.718, 36.8333}, {1.719, 36.75}, {1.72, 36.6667}, {1.721, 36.5833}, {1.722, 36.5}, {1.723, 36.4167}, {1.724, 36.3333}, {1.725, 36.25}, {1.726, 36.1667}, {1.727, 36.0833}, {1.728, 36.0}, {1.729, 35.9167}, {1.73, 35.8333}, {1.731, 35.75}, {1.732, 35.6667}, {1.733, 35.5833}, {1.734, 35.5}, {1.735, 35.4167}, {1.736, 35.3333}, {1.737, 35.25}, {1.738, 35.1667}, {1.739, 35.0833}, {1.74, 35.0}, {1.741, 34.9167}, {1.742, 34.8333}, {1.743, 34.75}, {1.744, 34.6667}, {1.745, 34.5833}, {1.746, 34.5}, {1.747, 34.4167}, {1.748, 34.3333}, {1.749, 34.25}, {1.75, 34.1667}, {1.751, 34.0833}, {1.752, 34.0}, {1.753, 33.9167}, {1.754, 33.8333}, {1.755, 33.75}, {1.756, 33.6667}, {1.757, 33.5833}, {1.758, 33.5}, {1.759, 33.4167}, {1.76, 33.3333}, {1.761, 33.25}, {1.762, 33.1667}, {1.763, 33.0833}, {1.764, 33.0}, {1.765, 32.9167}, {1.766, 32.8333}, {1.767, 32.75}, {1.768, 32.6667}, {1.769, 32.5833}, {1.77, 32.5}, {1.771, 32.4167}, {1.772, 32.3333}, {1.773, 32.25}, {1.774, 32.1667}, {1.775, 32.0833}, {1.776, 32.0}, {1.777, 31.9167}, {1.778, 31.8333}, {1.779, 31.75}, {1.78, 31.6667}, {1.781, 31.5833}, {1.782, 31.5}, {1.783, 31.4167}, {1.784, 31.3333}, {1.785, 31.25}, {1.786, 31.1667}, {1.787, 31.0833}, {1.788, 31.0}, {1.789, 30.9167}, {1.79, 30.8333}, {1.791, 30.75}, {1.792, 30.6667}, {1.793, 30.5833}, {1.794, 30.5}, {1.795, 30.4167}, {1.796, 30.3333}, {1.797, 30.25}, {1.798, 30.1667}, {1.799, 30.0833}, {1.8, 30.0}, {1.801, 29.9167}, {1.802, 29.8333}, {1.803, 29.75}, {1.804, 29.6667}, {1.805, 29.5833}, {1.806, 29.5}, {1.807, 29.4167}, {1.808, 29.3333}, {1.809, 29.25}, {1.81, 29.1667}, {1.811, 29.0833}, {1.812, 29.0}, {1.813, 28.9167}, {1.814, 28.8333}, {1.815, 28.75}, {1.816, 28.6667}, {1.817, 28.5833}, {1.818, 28.5}, {1.819, 28.4167}, {1.82, 28.3333}, {1.821, 28.25}, {1.822, 28.1667}, {1.823, 28.0833}, {1.824, 28.0}, {1.825, 27.9167}, {1.826, 27.8333}, {1.827, 27.75}, {1.828, 27.6667}, {1.829, 27.5833}, {1.83, 27.5}, {1.831, 27.4167}, {1.832, 27.3333}, {1.833, 27.25}, {1.834, 27.1667}, {1.835, 27.0833}, {1.836, 27.0}, {1.837, 26.9167}, {1.838, 26.8333}, {1.839, 26.75}, {1.84, 26.6667}, {1.841, 26.5833}, {1.842, 26.5}, {1.843, 26.4167}, {1.844, 26.3333}, {1.845, 26.25}, {1.846, 26.1667}, {1.847, 26.0833}, {1.848, 26.0}, {1.849, 25.9167}, {1.85, 25.8333}, {1.851, 25.75}, {1.852, 25.6667}, {1.853, 25.5833}, {1.854, 25.5}, {1.855, 25.4167}, {1.856, 25.3333}, {1.857, 25.25}, {1.858, 25.1667}, {1.859, 25.0833}, {1.86, 25.0}, {1.861, 24.9167}, {1.862, 24.8333}, {1.863, 24.75}, {1.864, 24.6667}, {1.865, 24.5833}, {1.866, 24.5}, {1.867, 24.4167}, {1.868, 24.3333}, {1.869, 24.25}, {1.87, 24.1667}, {1.871, 24.0833}, {1.872, 24.0}, {1.873, 23.9167}, {1.874, 23.8333}, {1.875, 23.75}, {1.876, 23.6667}, {1.877, 23.5833}, {1.878, 23.5}, {1.879, 23.4167}, {1.88, 23.3333}, {1.881, 23.25}, {1.882, 23.1667}, {1.883, 23.0833}, {1.884, 23.0}, {1.885, 22.9167}, {1.886, 22.8333}, {1.887, 22.75}, {1.888, 22.6667}, {1.889, 22.5833}, {1.89, 22.5}, {1.891, 22.4167}, {1.892, 22.3333}, {1.893, 22.25}, {1.894, 22.1667}, {1.895, 22.0833}, {1.896, 22.0}, {1.897, 21.9167}, {1.898, 21.8333}, {1.899, 21.75}, {1.9, 21.6667}, {1.901, 21.5833}, {1.902, 21.5}, {1.903, 21.4167}, {1.904, 21.3333}, {1.905, 21.25}, {1.906, 21.1667}, {1.907, 21.0833}, {1.908, 21.0}, {1.909, 20.9167}, {1.91, 20.8333}, {1.911, 20.75}, {1.912, 20.6667}, {1.913, 20.5833}, {1.914, 20.5}, {1.915, 20.4167}, {1.916, 20.3333}, {1.917, 20.25}, {1.918, 20.1667}, {1.919, 20.0833}, {1.92, 20.0}, {1.921, 19.9286}, {1.922, 19.8571}, {1.923, 19.7857}, {1.924, 19.7143}, {1.925, 19.6429}, {1.926, 19.5714}, {1.927, 19.5}, {1.928, 19.4286}, {1.929, 19.3571}, {1.93, 19.2857}, {1.931, 19.2143}, {1.932, 19.1429}, {1.933, 19.0714}, {1.934, 19.0}, {1.935, 18.9286}, {1.936, 18.8571}, {1.937, 18.7857}, {1.938, 18.7143}, {1.939, 18.6429}, {1.94, 18.5714}, {1.941, 18.5}, {1.942, 18.4286}, {1.943, 18.3571}, {1.944, 18.2857}, {1.945, 18.2143}, {1.946, 18.1429}, {1.947, 18.0714}, {1.948, 18.0}, {1.949, 17.9286}, {1.95, 17.8571}, {1.951, 17.7857}, {1.952, 17.7143}, {1.953, 17.6429}, {1.954, 17.5714}, {1.955, 17.5}, {1.956, 17.4286}, {1.957, 17.3571}, {1.958, 17.2857}, {1.959, 17.2143}, {1.96, 17.1429}, {1.961, 17.0714}, {1.962, 17.0}, {1.963, 16.9286}, {1.964, 16.8571}, {1.965, 16.7857}, {1.966, 16.7143}, {1.967, 16.6429}, {1.968, 16.5714}, {1.969, 16.5}, {1.97, 16.4286}, {1.971, 16.3571}, {1.972, 16.2857}, {1.973, 16.2143}, {1.974, 16.1429}, {1.975, 16.0714}, {1.976, 16.0}, {1.977, 15.9286}, {1.978, 15.8571}, {1.979, 15.7857}, {1.98, 15.7143}, {1.981, 15.6429}, {1.982, 15.5714}, {1.983, 15.5}, {1.984, 15.4286}, {1.985, 15.3571}, {1.986, 15.2857}, {1.987, 15.2143}, {1.988, 15.1429}, {1.989, 15.0714}, {1.99, 15.0}, {1.991, 14.9167}, {1.992, 14.8333}, {1.993, 14.75}, {1.994, 14.6667}, {1.995, 14.5833}, {1.996, 14.5}, {1.997, 14.4167}, {1.998, 14.3333}, {1.999, 14.25}, {2.0, 14.1667}, {2.001, 14.0833}, {2.002, 14.0}, {2.003, 13.9167}, {2.004, 13.8333}, {2.005, 13.75}, {2.006, 13.6667}, {2.007, 13.5833}, {2.008, 13.5}, {2.009, 13.4167}, {2.01, 13.3333}, {2.011, 13.25}, {2.012, 13.1667}, {2.013, 13.0833}, {2.014, 13.0}, {2.015, 12.9167}, {2.016, 12.8333}, {2.017, 12.75}, {2.018, 12.6667}, {2.019, 12.5833}, {2.02, 12.5}, {2.021, 12.4167}, {2.022, 12.3333}, {2.023, 12.25}, {2.024, 12.1667}, {2.025, 12.0833}, {2.026, 12.0}, {2.027, 11.9167}, {2.028, 11.8333}, {2.029, 11.75}, {2.03, 11.6667}, {2.031, 11.5833}, {2.032, 11.5}, {2.033, 11.4167}, {2.034, 11.3333}, {2.035, 11.25}, {2.036, 11.1667}, {2.037, 11.0833}, {2.038, 11.0}, {2.039, 10.9167}, {2.04, 10.8333}, {2.041, 10.75}, {2.042, 10.6667}, {2.043, 10.5833}, {2.044, 10.5}, {2.045, 10.4167}, {2.046, 10.3333}, {2.047, 10.25}, {2.048, 10.1667}, {2.049, 10.0833}, {2.05, 10.0}, {2.051, 9.9167}, {2.052, 9.8333}, {2.053, 9.75}, {2.054, 9.6667}, {2.055, 9.5833}, {2.056, 9.5}, {2.057, 9.4167}, {2.058, 9.3333}, {2.059, 9.25}, {2.06, 9.1667}, {2.061, 9.0833}, {2.062, 9.0}, {2.063, 8.9167}, {2.064, 8.8333}, {2.065, 8.75}, {2.066, 8.6667}, {2.067, 8.5833}, {2.068, 8.5}, {2.069, 8.4167}, {2.07, 8.3333}, {2.071, 8.25}, {2.072, 8.1667}, {2.073, 8.0833}, {2.074, 8.0}, {2.075, 7.9167}, {2.076, 7.8333}, {2.077, 7.75}, {2.078, 7.6667}, {2.079, 7.5833}, {2.08, 7.5}, {2.081, 7.4167}, {2.082, 7.3333}, {2.083, 7.25}, {2.084, 7.1667}, {2.085, 7.0833}, {2.086, 7.0}, {2.087, 6.9167}, {2.088, 6.8333}, {2.089, 6.75}, {2.09, 6.6667}, {2.091, 6.5833}, {2.092, 6.5}, {2.093, 6.4167}, {2.094, 6.3333}, {2.095, 6.25}, {2.096, 6.1667}, {2.097, 6.0833}, {2.098, 6.0}, {2.099, 5.9167}, {2.1, 5.8333}, {2.101, 5.75}, {2.102, 5.6667}, {2.103, 5.5833}, {2.104, 5.5}, {2.105, 5.4167}, {2.106, 5.3333}, {2.107, 5.25}, {2.108, 5.1667}, {2.109, 5.0833}, {2.11, 5.0}, {2.111, 4.9167}, {2.112, 4.8333}, {2.113, 4.75}, {2.114, 4.6667}, {2.115, 4.5833}, {2.116, 4.5}, {2.117, 4.4167}, {2.118, 4.3333}, {2.119, 4.25}, {2.12, 4.1667}, {2.121, 4.0833}, {2.122, 4.0}, {2.123, 3.9167}, {2.124, 3.8333}, {2.125, 3.75}, {2.126, 3.6667}, {2.127, 3.5833}, {2.128, 3.5}, {2.129, 3.4167}, {2.13, 3.3333}, {2.131, 3.25}, {2.132, 3.1667}, {2.133, 3.0833}, {2.134, 3.0}, {2.135, 2.9167}, {2.136, 2.8333}, {2.137, 2.75}, {2.138, 2.6667}, {2.139, 2.5833}, {2.14, 2.5}, {2.141, 2.4167}, {2.142, 2.3333}, {2.143, 2.25}, {2.144, 2.1667}, {2.145, 2.0833}, {2.146, 2.0}, {2.147, 1.9167}, {2.148, 1.8333}, {2.149, 1.75}, {2.15, 1.6667}, {2.151, 1.5833}, {2.152, 1.5}, {2.153, 1.4167}, {2.154, 1.3333}, {2.155, 1.25}, {2.156, 1.1667}, {2.157, 1.0833}, {2.158, 1.0}, {2.159, 0.9167}, {2.16, 0.8333}, {2.161, 0.75}, {2.162, 0.6667}, {2.163, 0.5833}, {2.164, 0.5}, {2.165, 0.4167}, {2.166, 0.3333}, {2.167, 0.25}, {2.168, 0.1667}, {2.169, 0.0833}, {2.17, 0.0}, {2.171, -0.0833}, {2.172, -0.1667}, {2.173, -0.25}, {2.174, -0.3333}, {2.175, -0.4167}, {2.176, -0.5}, {2.177, -0.5833}, {2.178, -0.6667}, {2.179, -0.75}, {2.18, -0.8333}, {2.181, -0.9167}, {2.182, -1.0}, {2.183, -1.0833}, {2.184, -1.1667}, {2.185, -1.25}, {2.186, -1.3333}, {2.187, -1.4167}, {2.188, -1.5}, {2.189, -1.5833}, {2.19, -1.6667}, {2.191, -1.75}, {2.192, -1.8333}, {2.193, -1.9167}, {2.194, -2.0}, {2.195, -2.0833}, {2.196, -2.1667}, {2.197, -2.25}, {2.198, -2.3333}, {2.199, -2.4167}, {2.2, -2.5}, {2.201, -2.5833}, {2.202, -2.6667}, {2.203, -2.75}, {2.204, -2.8333}, {2.205, -2.9167}, {2.206, -3.0}, {2.207, -3.0833}, {2.208, -3.1667}, {2.209, -3.25}, {2.21, -3.3333}, {2.211, -3.4167}, {2.212, -3.5}, {2.213, -3.5833}, {2.214, -3.6667}, {2.215, -3.75}, {2.216, -3.8333}, {2.217, -3.9167}, {2.218, -4.0}, {2.219, -4.0833}, {2.22, -4.1667}, {2.221, -4.25}, {2.222, -4.3333}, {2.223, -4.4167}, {2.224, -4.5}, {2.225, -4.5833}, {2.226, -4.6667}, {2.227, -4.75}, {2.228, -4.8333}, {2.229, -4.9167}, {2.23, -5.0}, {2.231, -5.125}, {2.232, -5.25}, {2.233, -5.375}, {2.234, -5.5}, {2.235, -5.625}, {2.236, -5.75}, {2.237, -5.875}, {2.238, -6.0}, {2.239, -6.125}, {2.24, -6.25}, {2.241, -6.375}, {2.242, -6.5}, {2.243, -6.625}, {2.244, -6.75}, {2.245, -6.875}, {2.246, -7.0}, {2.247, -7.125}, {2.248, -7.25}, {2.249, -7.375}, {2.25, -7.5}, {2.251, -7.625}, {2.252, -7.75}, {2.253, -7.875}, {2.254, -8.0}, {2.255, -8.125}, {2.256, -8.25}, {2.257, -8.375}, {2.258, -8.5}, {2.259, -8.625}, {2.26, -8.75}, {2.261, -8.875}, {2.262, -9.0}, {2.263, -9.125}, {2.264, -9.25}, {2.265, -9.375}, {2.266, -9.5}, {2.267, -9.625}, {2.268, -9.75}, {2.269, -9.875}, {2.27, -10.0}, {2.271, -10.1}, {2.272, -10.2}, {2.273, -10.3}, {2.274, -10.4}, {2.275, -10.5}, {2.276, -10.6}, {2.277, -10.7}, {2.278, -10.8}, {2.279, -10.9}, {2.28, -11.0}, {2.281, -11.1}, {2.282, -11.2}, {2.283, -11.3}, {2.284, -11.4}, {2.285, -11.5}, {2.286, -11.6}, {2.287, -11.7}, {2.288, -11.8}, {2.289, -11.9}, {2.29, -12.0}, {2.291, -12.1}, {2.292, -12.2}, {2.293, -12.3}, {2.294, -12.4}, {2.295, -12.5}, {2.296, -12.6}, {2.297, -12.7}, {2.298, -12.8}, {2.299, -12.9}, {2.3, -13.0}, {2.301, -13.1}, {2.302, -13.2}, {2.303, -13.3}, {2.304, -13.4}, {2.305, -13.5}, {2.306, -13.6}, {2.307, -13.7}, {2.308, -13.8}, {2.309, -13.9}, {2.31, -14.0}, {2.311, -14.1}, {2.312, -14.2}, {2.313, -14.3}, {2.314, -14.4}, {2.315, -14.5}, {2.316, -14.6}, {2.317, -14.7}, {2.318, -14.8}, {2.319, -14.9}, {2.32, -15.0}, {2.321, -15.1667}, {2.322, -15.3333}, {2.323, -15.5}, {2.324, -15.6667}, {2.325, -15.8333}, {2.326, -16.0}, {2.327, -16.1667}, {2.328, -16.3333}, {2.329, -16.5}, {2.33, -16.6667}, {2.331, -16.8333}, {2.332, -17.0}, {2.333, -17.1667}, {2.334, -17.3333}, {2.335, -17.5}, {2.336, -17.6667}, {2.337, -17.8333}, {2.338, -18.0}, {2.339, -18.1667}, {2.34, -18.3333}, {2.341, -18.5}, {2.342, -18.6667}, {2.343, -18.8333}, {2.344, -19.0}, {2.345, -19.1667}, {2.346, -19.3333}, {2.347, -19.5}, {2.348, -19.6667}, {2.349, -19.8333}, {2.35, -20.0}, {2.351, -20.1667}, {2.352, -20.3333}, {2.353, -20.5}, {2.354, -20.6667}, {2.355, -20.8333}, {2.356, -21.0}, {2.357, -21.1667}, {2.358, -21.3333}, {2.359, -21.5}, {2.36, -21.6667}, {2.361, -21.8333}, {2.362, -22.0}, {2.363, -22.1667}, {2.364, -22.3333}, {2.365, -22.5}, {2.366, -22.6667}, {2.367, -22.8333}, {2.368, -23.0}, {2.369, -23.1667}, {2.37, -23.3333}, {2.371, -23.5}, {2.372, -23.6667}, {2.373, -23.8333}, {2.374, -24.0}, {2.375, -24.1667}, {2.376, -24.3333}, {2.377, -24.5}, {2.378, -24.6667}, {2.379, -24.8333}, {2.38, -25.0}, {2.381, -25.25}, {2.382, -25.5}, {2.383, -25.75}, {2.384, -26.0}, {2.385, -26.25}, {2.386, -26.5}, {2.387, -26.75}, {2.388, -27.0}, {2.389, -27.25}, {2.39, -27.5}, {2.391, -27.75}, {2.392, -28.0}, {2.393, -28.25}, {2.394, -28.5}, {2.395, -28.75}, {2.396, -29.0}, {2.397, -29.25}, {2.398, -29.5}, {2.399, -29.75}, {2.4, -30.0}, {2.401, -30.25}, {2.402, -30.5}, {2.403, -30.75}, {2.404, -31.0}, {2.405, -31.25}, {2.406, -31.5}, {2.407, -31.75}, {2.408, -32.0}, {2.409, -32.25}, {2.41, -32.5}, {2.411, -32.75}, {2.412, -33.0}, {2.413, -33.25}, {2.414, -33.5}, {2.415, -33.75}, {2.416, -34.0}, {2.417, -34.25}, {2.418, -34.5}, {2.419, -34.75}, {2.42, -35.0}, {2.421, -35.25}, {2.422, -35.5}, {2.423, -35.75}, {2.424, -36.0}, {2.425, -36.25}, {2.426, -36.5}, {2.427, -36.75}, {2.428, -37.0}, {2.429, -37.25}, {2.43, -37.5}, {2.431, -37.75}, {2.432, -38.0}, {2.433, -38.25}, {2.434, -38.5}, {2.435, -38.75}, {2.436, -39.0}, {2.437, -39.25}, {2.438, -39.5}, {2.439, -39.75}, {2.44, -40.0}};

// ********************************** Functions **********************************

float FEB_LTC6811_Temp_LUT_Get_Temperature(float voltage) {
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	ed87 0a01 	vstr	s0, [r7, #4]
	if (voltage < FEB_LTC6811_TEMP_LUT_MIN_MAP_VOLT || voltage > FEB_LTC6811_TEMP_LUT_MAX_MAP_VOLT) {
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7fe f894 	bl	8000588 <__aeabi_f2d>
 8002460:	a323      	add	r3, pc, #140	; (adr r3, 80024f0 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xa0>)
 8002462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002466:	f7fe fb59 	bl	8000b1c <__aeabi_dcmplt>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10a      	bne.n	8002486 <FEB_LTC6811_Temp_LUT_Get_Temperature+0x36>
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7fe f889 	bl	8000588 <__aeabi_f2d>
 8002476:	a324      	add	r3, pc, #144	; (adr r3, 8002508 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xb8>)
 8002478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247c:	f7fe fb6c 	bl	8000b58 <__aeabi_dcmpgt>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <FEB_LTC6811_Temp_LUT_Get_Temperature+0x3a>
		return -42.0;
 8002486:	4b1e      	ldr	r3, [pc, #120]	; (8002500 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xb0>)
 8002488:	e028      	b.n	80024dc <FEB_LTC6811_Temp_LUT_Get_Temperature+0x8c>
	}

	uint16_t index = (uint16_t) round((voltage - FEB_LTC6811_TEMP_LUT_MIN_MAP_VOLT) / FEB_LTC6811_TEMP_LUT_RESOLUTION);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7fe f87c 	bl	8000588 <__aeabi_f2d>
 8002490:	a317      	add	r3, pc, #92	; (adr r3, 80024f0 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xa0>)
 8002492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002496:	f7fd ff17 	bl	80002c8 <__aeabi_dsub>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4610      	mov	r0, r2
 80024a0:	4619      	mov	r1, r3
 80024a2:	a315      	add	r3, pc, #84	; (adr r3, 80024f8 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xa8>)
 80024a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a8:	f7fe f9f0 	bl	800088c <__aeabi_ddiv>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	ec43 2b17 	vmov	d7, r2, r3
 80024b4:	eeb0 0a47 	vmov.f32	s0, s14
 80024b8:	eef0 0a67 	vmov.f32	s1, s15
 80024bc:	f007 fef8 	bl	800a2b0 <round>
 80024c0:	ec53 2b10 	vmov	r2, r3, d0
 80024c4:	4610      	mov	r0, r2
 80024c6:	4619      	mov	r1, r3
 80024c8:	f7fe fb8e 	bl	8000be8 <__aeabi_d2uiz>
 80024cc:	4603      	mov	r3, r0
 80024ce:	81fb      	strh	r3, [r7, #14]
	return FEB_LTC6811_TEMP_MAP[index][1];
 80024d0:	89fb      	ldrh	r3, [r7, #14]
 80024d2:	4a0c      	ldr	r2, [pc, #48]	; (8002504 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xb4>)
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	3304      	adds	r3, #4
 80024da:	681b      	ldr	r3, [r3, #0]
}
 80024dc:	ee07 3a90 	vmov	s15, r3
 80024e0:	eeb0 0a67 	vmov.f32	s0, s15
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	f3af 8000 	nop.w
 80024f0:	cccccccd 	.word	0xcccccccd
 80024f4:	3ff4cccc 	.word	0x3ff4cccc
 80024f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80024fc:	3f50624d 	.word	0x3f50624d
 8002500:	c2280000 	.word	0xc2280000
 8002504:	20000020 	.word	0x20000020
 8002508:	b851eb85 	.word	0xb851eb85
 800250c:	4003851e 	.word	0x4003851e

08002510 <LTC6811_init_reg_limits>:

/* Initialize the Register limits */
void LTC6811_init_reg_limits(uint8_t total_ic, //The number of ICs in the system
							cell_asic *ic  //A two dimensional array where data will be written
							)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	6039      	str	r1, [r7, #0]
 800251a:	71fb      	strb	r3, [r7, #7]
  for (uint8_t cic=0; cic<total_ic; cic++)
 800251c:	2300      	movs	r3, #0
 800251e:	73fb      	strb	r3, [r7, #15]
 8002520:	e038      	b.n	8002594 <LTC6811_init_reg_limits+0x84>
  {
    ic[cic].ic_reg.cell_channels=12;
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	22e8      	movs	r2, #232	; 0xe8
 8002526:	fb02 f303 	mul.w	r3, r2, r3
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	4413      	add	r3, r2
 800252e:	220c      	movs	r2, #12
 8002530:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    ic[cic].ic_reg.stat_channels=4;
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	22e8      	movs	r2, #232	; 0xe8
 8002538:	fb02 f303 	mul.w	r3, r2, r3
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	4413      	add	r3, r2
 8002540:	2204      	movs	r2, #4
 8002542:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    ic[cic].ic_reg.aux_channels=6;
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	22e8      	movs	r2, #232	; 0xe8
 800254a:	fb02 f303 	mul.w	r3, r2, r3
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	4413      	add	r3, r2
 8002552:	2206      	movs	r2, #6
 8002554:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
    ic[cic].ic_reg.num_cv_reg=4;
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	22e8      	movs	r2, #232	; 0xe8
 800255c:	fb02 f303 	mul.w	r3, r2, r3
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	4413      	add	r3, r2
 8002564:	2204      	movs	r2, #4
 8002566:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
    ic[cic].ic_reg.num_gpio_reg=2;
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	22e8      	movs	r2, #232	; 0xe8
 800256e:	fb02 f303 	mul.w	r3, r2, r3
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	4413      	add	r3, r2
 8002576:	2202      	movs	r2, #2
 8002578:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    ic[cic].ic_reg.num_stat_reg=3;
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	22e8      	movs	r2, #232	; 0xe8
 8002580:	fb02 f303 	mul.w	r3, r2, r3
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	4413      	add	r3, r2
 8002588:	2203      	movs	r2, #3
 800258a:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
  for (uint8_t cic=0; cic<total_ic; cic++)
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	3301      	adds	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
 8002594:	7bfa      	ldrb	r2, [r7, #15]
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	429a      	cmp	r2, r3
 800259a:	d3c2      	bcc.n	8002522 <LTC6811_init_reg_limits+0x12>
  }
}
 800259c:	bf00      	nop
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <LTC6811_wrcfg>:
order so the last device's configuration is written first.
*/
void LTC6811_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic *ic //A two dimensional array of the configuration data that will be written
                  )
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	4603      	mov	r3, r0
 80025b2:	6039      	str	r1, [r7, #0]
 80025b4:	71fb      	strb	r3, [r7, #7]
  LTC681x_wrcfg(total_ic,ic);
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	6839      	ldr	r1, [r7, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 f9c4 	bl	8002948 <LTC681x_wrcfg>
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <LTC6811_adcv>:
/* Starts cell voltage conversion */
void LTC6811_adcv(uint8_t MD, //ADC Mode
				  uint8_t DCP, //Discharge Permit
				  uint8_t CH //Cell Channels to be measured
				  )
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	71fb      	strb	r3, [r7, #7]
 80025d2:	460b      	mov	r3, r1
 80025d4:	71bb      	strb	r3, [r7, #6]
 80025d6:	4613      	mov	r3, r2
 80025d8:	717b      	strb	r3, [r7, #5]
  LTC681x_adcv(MD,DCP,CH);
 80025da:	797a      	ldrb	r2, [r7, #5]
 80025dc:	79b9      	ldrb	r1, [r7, #6]
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 fa30 	bl	8002a46 <LTC681x_adcv>
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <LTC6811_adax>:

/* Start a GPIO and Vref2 Conversion */
void LTC6811_adax(uint8_t MD, //ADC Mode
				  uint8_t CHG //GPIO Channels to be measured
				  )
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	4603      	mov	r3, r0
 80025f6:	460a      	mov	r2, r1
 80025f8:	71fb      	strb	r3, [r7, #7]
 80025fa:	4613      	mov	r3, r2
 80025fc:	71bb      	strb	r3, [r7, #6]
  LTC681x_adax(MD,CHG);
 80025fe:	79ba      	ldrb	r2, [r7, #6]
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	4611      	mov	r1, r2
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fa49 	bl	8002a9c <LTC681x_adax>
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <LTC6811_rdcv>:
*/
uint8_t LTC6811_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // The number of ICs in the system
                     cell_asic *ic // Array of the parsed cell codes
                    )
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b084      	sub	sp, #16
 8002616:	af00      	add	r7, sp, #0
 8002618:	4603      	mov	r3, r0
 800261a:	603a      	str	r2, [r7, #0]
 800261c:	71fb      	strb	r3, [r7, #7]
 800261e:	460b      	mov	r3, r1
 8002620:	71bb      	strb	r3, [r7, #6]
  int8_t pec_error = 0;
 8002622:	2300      	movs	r3, #0
 8002624:	73fb      	strb	r3, [r7, #15]
  pec_error = LTC681x_rdcv(reg,total_ic,ic);
 8002626:	79b9      	ldrb	r1, [r7, #6]
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f000 fa5a 	bl	8002ae6 <LTC681x_rdcv>
 8002632:	4603      	mov	r3, r0
 8002634:	73fb      	strb	r3, [r7, #15]
  return(pec_error);
 8002636:	7bfb      	ldrb	r3, [r7, #15]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <LTC6811_rdaux>:
*/
int8_t LTC6811_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
                     uint8_t total_ic,//The number of ICs in the system
                     cell_asic *ic//A two dimensional array of the gpio voltage codes.
                     )
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	603a      	str	r2, [r7, #0]
 800264a:	71fb      	strb	r3, [r7, #7]
 800264c:	460b      	mov	r3, r1
 800264e:	71bb      	strb	r3, [r7, #6]
  int8_t pec_error = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	73fb      	strb	r3, [r7, #15]
  LTC681x_rdaux(reg,total_ic,ic);
 8002654:	79b9      	ldrb	r1, [r7, #6]
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f000 faf7 	bl	8002c4e <LTC681x_rdaux>
  return (pec_error);
 8002660:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <LTC6811_pollAdc>:
  return(LTC681x_pladc());
}

//This function will block operation until the ADC has finished it's conversion */
uint32_t LTC6811_pollAdc()
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  return(LTC681x_pollAdc());
 8002670:	f000 fcb8 	bl	8002fe4 <LTC681x_pollAdc>
 8002674:	4603      	mov	r3, r0
}
 8002676:	4618      	mov	r0, r3
 8002678:	bd80      	pop	{r7, pc}

0800267a <LTC6811_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC6811_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that will store the data
							 )
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	4603      	mov	r3, r0
 8002682:	6039      	str	r1, [r7, #0]
 8002684:	71fb      	strb	r3, [r7, #7]
  LTC681x_reset_crc_count(total_ic,ic);
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	6839      	ldr	r1, [r7, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f000 fe92 	bl	80033b4 <LTC681x_reset_crc_count>
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <LTC6811_init_cfg>:

/* Helper function to initialize CFG variables.*/
void LTC6811_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that will store the data
					  )
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	6039      	str	r1, [r7, #0]
 80026a2:	71fb      	strb	r3, [r7, #7]
  LTC681x_init_cfg(total_ic,ic);
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	6839      	ldr	r1, [r7, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 fee9 	bl	8003480 <LTC681x_init_cfg>
}
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <LTC6811_set_cfgr>:
					  bool dcc[12],// The DCC bit
					  bool dcto[4],// The Dcto bit
					  uint16_t uv, // The UV bit
					  uint16_t  ov // The OV bit
					  )
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b088      	sub	sp, #32
 80026ba:	af06      	add	r7, sp, #24
 80026bc:	6039      	str	r1, [r7, #0]
 80026be:	4611      	mov	r1, r2
 80026c0:	461a      	mov	r2, r3
 80026c2:	4603      	mov	r3, r0
 80026c4:	71fb      	strb	r3, [r7, #7]
 80026c6:	460b      	mov	r3, r1
 80026c8:	71bb      	strb	r3, [r7, #6]
 80026ca:	4613      	mov	r3, r2
 80026cc:	717b      	strb	r3, [r7, #5]
  LTC681x_set_cfgr(nIC ,ic,refon,adcopt,gpio,dcc,dcto, uv, ov);
 80026ce:	7979      	ldrb	r1, [r7, #5]
 80026d0:	79ba      	ldrb	r2, [r7, #6]
 80026d2:	79f8      	ldrb	r0, [r7, #7]
 80026d4:	8c3b      	ldrh	r3, [r7, #32]
 80026d6:	9304      	str	r3, [sp, #16]
 80026d8:	8bbb      	ldrh	r3, [r7, #28]
 80026da:	9303      	str	r3, [sp, #12]
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	9302      	str	r3, [sp, #8]
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	9301      	str	r3, [sp, #4]
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	460b      	mov	r3, r1
 80026ea:	6839      	ldr	r1, [r7, #0]
 80026ec:	f000 fef2 	bl	80034d4 <LTC681x_set_cfgr>
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <wakeup_idle>:
                                0x585a, 0x8ba7, 0x4e3e, 0x450c, 0x8095
                               };

/* Wake isoSPI up from IDlE state and enters the READY state */
void wakeup_idle(uint8_t total_ic) //Number of ICs in the system
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<total_ic; i++)
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	e00b      	b.n	8002720 <wakeup_idle+0x28>
	{
	   cs_low(CS_PIN);
 8002708:	200a      	movs	r0, #10
 800270a:	f001 f93d 	bl	8003988 <cs_low>
	   spi_read_byte(0xff);//Guarantees the isoSPI will be in ready mode
 800270e:	20ff      	movs	r0, #255	; 0xff
 8002710:	f001 f9b0 	bl	8003a74 <spi_read_byte>
	   cs_high(CS_PIN);
 8002714:	200a      	movs	r0, #10
 8002716:	f001 f947 	bl	80039a8 <cs_high>
	for (int i =0; i<total_ic; i++)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	3301      	adds	r3, #1
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	429a      	cmp	r2, r3
 8002726:	dbef      	blt.n	8002708 <wakeup_idle+0x10>
	}
}
 8002728:	bf00      	nop
 800272a:	bf00      	nop
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <wakeup_sleep>:

/* Generic wakeup command to wake the LTC681x from sleep state */
void wakeup_sleep(uint8_t total_ic) //Number of ICs in the system
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b084      	sub	sp, #16
 8002736:	af00      	add	r7, sp, #0
 8002738:	4603      	mov	r3, r0
 800273a:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<total_ic; i++)
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	e00f      	b.n	8002762 <wakeup_sleep+0x30>
	{
	   cs_low(CS_PIN);
 8002742:	200a      	movs	r0, #10
 8002744:	f001 f920 	bl	8003988 <cs_low>
	   delay_u(300); // Guarantees the LTC681x will be in standby
 8002748:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800274c:	f001 f93c 	bl	80039c8 <delay_u>
	   cs_high(CS_PIN);
 8002750:	200a      	movs	r0, #10
 8002752:	f001 f929 	bl	80039a8 <cs_high>
	   delay_u(10);
 8002756:	200a      	movs	r0, #10
 8002758:	f001 f936 	bl	80039c8 <delay_u>
	for (int i =0; i<total_ic; i++)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	3301      	adds	r3, #1
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	429a      	cmp	r2, r3
 8002768:	dbeb      	blt.n	8002742 <wakeup_sleep+0x10>
	}
}
 800276a:	bf00      	nop
 800276c:	bf00      	nop
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <cmd_68>:

/* Generic function to write 68xx commands. Function calculates PEC for tx_cmd data. */
void cmd_68(uint8_t tx_cmd[2]) //The command to be transmitted
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	cmd[0] = tx_cmd[0];
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	723b      	strb	r3, [r7, #8]
	cmd[1] =  tx_cmd[1];
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	785b      	ldrb	r3, [r3, #1]
 8002786:	727b      	strb	r3, [r7, #9]
	cmd_pec = pec15_calc(2, cmd);
 8002788:	f107 0308 	add.w	r3, r7, #8
 800278c:	4619      	mov	r1, r3
 800278e:	2002      	movs	r0, #2
 8002790:	f000 f8a6 	bl	80028e0 <pec15_calc>
 8002794:	4603      	mov	r3, r0
 8002796:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8002798:	89fb      	ldrh	r3, [r7, #14]
 800279a:	0a1b      	lsrs	r3, r3, #8
 800279c:	b29b      	uxth	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 80027a2:	89fb      	ldrh	r3, [r7, #14]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 80027a8:	200a      	movs	r0, #10
 80027aa:	f001 f8ed 	bl	8003988 <cs_low>
	spi_write_array(4,cmd);
 80027ae:	f107 0308 	add.w	r3, r7, #8
 80027b2:	4619      	mov	r1, r3
 80027b4:	2004      	movs	r0, #4
 80027b6:	f001 f913 	bl	80039e0 <spi_write_array>
	cs_high(CS_PIN);
 80027ba:	200a      	movs	r0, #10
 80027bc:	f001 f8f4 	bl	80039a8 <cs_high>
}
 80027c0:	bf00      	nop
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
			  uint8_t tx_cmd[2], //The command to be transmitted
			  uint8_t data[] // Payload Data
			  )
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	73fb      	strb	r3, [r7, #15]
	const uint8_t BYTES_IN_REG = 6;
 80027d6:	2306      	movs	r3, #6
 80027d8:	773b      	strb	r3, [r7, #28]
	const uint8_t CMD_LEN = 4+(8*total_ic);
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	3304      	adds	r3, #4
 80027e2:	76fb      	strb	r3, [r7, #27]
	uint8_t *cmd;
	uint16_t data_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index;

	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 80027e4:	7efb      	ldrb	r3, [r7, #27]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f004 fe5e 	bl	80074a8 <malloc>
 80027ec:	4603      	mov	r3, r0
 80027ee:	617b      	str	r3, [r7, #20]
	cmd[0] = tx_cmd[0];
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	781a      	ldrb	r2, [r3, #0]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	701a      	strb	r2, [r3, #0]
	cmd[1] = tx_cmd[1];
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	3301      	adds	r3, #1
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	7852      	ldrb	r2, [r2, #1]
 8002800:	701a      	strb	r2, [r3, #0]
	cmd_pec = pec15_calc(2, cmd);
 8002802:	6979      	ldr	r1, [r7, #20]
 8002804:	2002      	movs	r0, #2
 8002806:	f000 f86b 	bl	80028e0 <pec15_calc>
 800280a:	4603      	mov	r3, r0
 800280c:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 800280e:	8a7b      	ldrh	r3, [r7, #18]
 8002810:	0a1b      	lsrs	r3, r3, #8
 8002812:	b29a      	uxth	r2, r3
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	3302      	adds	r3, #2
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t)(cmd_pec);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	3303      	adds	r3, #3
 8002820:	8a7a      	ldrh	r2, [r7, #18]
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 8002826:	2304      	movs	r3, #4
 8002828:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each LTC681x, this loops starts with the last IC on the stack.
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	77bb      	strb	r3, [r7, #30]
 800282e:	e042      	b.n	80028b6 <write_68+0xee>
    {	                                                                            //The first configuration written is received by the last IC in the daisy chain
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8002830:	2300      	movs	r3, #0
 8002832:	777b      	strb	r3, [r7, #29]
 8002834:	e016      	b.n	8002864 <write_68+0x9c>
		{
			cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 8002836:	7fbb      	ldrb	r3, [r7, #30]
 8002838:	1e5a      	subs	r2, r3, #1
 800283a:	4613      	mov	r3, r2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	4413      	add	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	461a      	mov	r2, r3
 8002844:	7f7b      	ldrb	r3, [r7, #29]
 8002846:	4413      	add	r3, r2
 8002848:	461a      	mov	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	441a      	add	r2, r3
 800284e:	7ffb      	ldrb	r3, [r7, #31]
 8002850:	6979      	ldr	r1, [r7, #20]
 8002852:	440b      	add	r3, r1
 8002854:	7812      	ldrb	r2, [r2, #0]
 8002856:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 8002858:	7ffb      	ldrb	r3, [r7, #31]
 800285a:	3301      	adds	r3, #1
 800285c:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 800285e:	7f7b      	ldrb	r3, [r7, #29]
 8002860:	3301      	adds	r3, #1
 8002862:	777b      	strb	r3, [r7, #29]
 8002864:	7f7a      	ldrb	r2, [r7, #29]
 8002866:	7f3b      	ldrb	r3, [r7, #28]
 8002868:	429a      	cmp	r2, r3
 800286a:	d3e4      	bcc.n	8002836 <write_68+0x6e>
		}

		data_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &data[(current_ic-1)*6]);    // Calculating the PEC for each ICs configuration register data
 800286c:	7fbb      	ldrb	r3, [r7, #30]
 800286e:	1e5a      	subs	r2, r3, #1
 8002870:	4613      	mov	r3, r2
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4413      	add	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	461a      	mov	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	441a      	add	r2, r3
 800287e:	7f3b      	ldrb	r3, [r7, #28]
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f000 f82c 	bl	80028e0 <pec15_calc>
 8002888:	4603      	mov	r3, r0
 800288a:	823b      	strh	r3, [r7, #16]
		cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 800288c:	8a3b      	ldrh	r3, [r7, #16]
 800288e:	0a1b      	lsrs	r3, r3, #8
 8002890:	b299      	uxth	r1, r3
 8002892:	7ffb      	ldrb	r3, [r7, #31]
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	4413      	add	r3, r2
 8002898:	b2ca      	uxtb	r2, r1
 800289a:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t)data_pec;
 800289c:	7ffb      	ldrb	r3, [r7, #31]
 800289e:	3301      	adds	r3, #1
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	4413      	add	r3, r2
 80028a4:	8a3a      	ldrh	r2, [r7, #16]
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 80028aa:	7ffb      	ldrb	r3, [r7, #31]
 80028ac:	3302      	adds	r3, #2
 80028ae:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each LTC681x, this loops starts with the last IC on the stack.
 80028b0:	7fbb      	ldrb	r3, [r7, #30]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	77bb      	strb	r3, [r7, #30]
 80028b6:	7fbb      	ldrb	r3, [r7, #30]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1b9      	bne.n	8002830 <write_68+0x68>
	}

	cs_low(CS_PIN);
 80028bc:	200a      	movs	r0, #10
 80028be:	f001 f863 	bl	8003988 <cs_low>
	spi_write_array(CMD_LEN, cmd);
 80028c2:	7efb      	ldrb	r3, [r7, #27]
 80028c4:	6979      	ldr	r1, [r7, #20]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f001 f88a 	bl	80039e0 <spi_write_array>
	cs_high(CS_PIN);
 80028cc:	200a      	movs	r0, #10
 80028ce:	f001 f86b 	bl	80039a8 <cs_high>

	free(cmd);
 80028d2:	6978      	ldr	r0, [r7, #20]
 80028d4:	f004 fdf0 	bl	80074b8 <free>
}
 80028d8:	bf00      	nop
 80028da:	3720      	adds	r7, #32
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <pec15_calc>:

/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	6039      	str	r1, [r7, #0]
 80028ea:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder,addr;
	remainder = 16;//initialize the PEC
 80028ec:	2310      	movs	r3, #16
 80028ee:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 80028f0:	2300      	movs	r3, #0
 80028f2:	737b      	strb	r3, [r7, #13]
 80028f4:	e019      	b.n	800292a <pec15_calc+0x4a>
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 80028f6:	89fb      	ldrh	r3, [r7, #14]
 80028f8:	09db      	lsrs	r3, r3, #7
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	7b7b      	ldrb	r3, [r7, #13]
 80028fe:	6839      	ldr	r1, [r7, #0]
 8002900:	440b      	add	r3, r1
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	b29b      	uxth	r3, r3
 8002906:	4053      	eors	r3, r2
 8002908:	b29b      	uxth	r3, r3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	817b      	strh	r3, [r7, #10]
		remainder = (remainder<<8)^crc15Table[addr];
 800290e:	89fb      	ldrh	r3, [r7, #14]
 8002910:	021b      	lsls	r3, r3, #8
 8002912:	b21a      	sxth	r2, r3
 8002914:	897b      	ldrh	r3, [r7, #10]
 8002916:	490b      	ldr	r1, [pc, #44]	; (8002944 <pec15_calc+0x64>)
 8002918:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800291c:	b21b      	sxth	r3, r3
 800291e:	4053      	eors	r3, r2
 8002920:	b21b      	sxth	r3, r3
 8002922:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8002924:	7b7b      	ldrb	r3, [r7, #13]
 8002926:	3301      	adds	r3, #1
 8002928:	737b      	strb	r3, [r7, #13]
 800292a:	7b7a      	ldrb	r2, [r7, #13]
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	429a      	cmp	r2, r3
 8002930:	d3e1      	bcc.n	80028f6 <pec15_calc+0x16>
	}

	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8002932:	89fb      	ldrh	r3, [r7, #14]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	b29b      	uxth	r3, r3
}
 8002938:	4618      	mov	r0, r3
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	0800a370 	.word	0x0800a370

08002948 <LTC681x_wrcfg>:

/* Write the LTC681x CFGRA */
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[]  // A two dimensional array of the configuration data that will be written
                  )
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b0c4      	sub	sp, #272	; 0x110
 800294c:	af00      	add	r7, sp, #0
 800294e:	4602      	mov	r2, r0
 8002950:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002954:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002958:	6019      	str	r1, [r3, #0]
 800295a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800295e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002962:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = {0x00 , 0x01} ;
 8002964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002968:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t c_ic = 0;
 8002972:	2300      	movs	r3, #0
 8002974:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8002978:	2300      	movs	r3, #0
 800297a:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800297e:	e048      	b.n	8002a12 <LTC681x_wrcfg+0xca>
	{
		if (ic->isospi_reverse == false)
 8002980:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002984:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 800298e:	f083 0301 	eor.w	r3, r3, #1
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	d004      	beq.n	80029a2 <LTC681x_wrcfg+0x5a>
		{
			c_ic = current_ic;
 8002998:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800299c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 80029a0:	e00b      	b.n	80029ba <LTC681x_wrcfg+0x72>
		}
		else
		{
			c_ic = total_ic - current_ic - 1;
 80029a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029a6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80029aa:	781a      	ldrb	r2, [r3, #0]
 80029ac:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
		}

		for (uint8_t data = 0; data<6; data++)
 80029ba:	2300      	movs	r3, #0
 80029bc:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 80029c0:	e01e      	b.n	8002a00 <LTC681x_wrcfg+0xb8>
		{
			write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 80029c2:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80029c6:	22e8      	movs	r2, #232	; 0xe8
 80029c8:	fb02 f303 	mul.w	r3, r2, r3
 80029cc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80029d0:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80029d4:	6812      	ldr	r2, [r2, #0]
 80029d6:	18d1      	adds	r1, r2, r3
 80029d8:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 80029dc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80029e0:	5c89      	ldrb	r1, [r1, r2]
 80029e2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80029e6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80029ea:	54d1      	strb	r1, [r2, r3]
			write_count++;
 80029ec:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80029f0:	3301      	adds	r3, #1
 80029f2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		for (uint8_t data = 0; data<6; data++)
 80029f6:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 80029fa:	3301      	adds	r3, #1
 80029fc:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8002a00:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8002a04:	2b05      	cmp	r3, #5
 8002a06:	d9dc      	bls.n	80029c2 <LTC681x_wrcfg+0x7a>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8002a08:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8002a12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a16:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002a1a:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d3ad      	bcc.n	8002980 <LTC681x_wrcfg+0x38>
		}
	}
	write_68(total_ic, cmd, write_buffer);
 8002a24:	f107 0208 	add.w	r2, r7, #8
 8002a28:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002a2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a30:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fec6 	bl	80027c8 <write_68>
}
 8002a3c:	bf00      	nop
 8002a3e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <LTC681x_adcv>:
/* Starts ADC conversion for cell voltage */
void LTC681x_adcv( uint8_t MD, //ADC Mode
				   uint8_t DCP, //Discharge Permit
				   uint8_t CH //Cell Channels to be measured
                 )
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b084      	sub	sp, #16
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	71fb      	strb	r3, [r7, #7]
 8002a50:	460b      	mov	r3, r1
 8002a52:	71bb      	strb	r3, [r7, #6]
 8002a54:	4613      	mov	r3, r2
 8002a56:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[2];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	105b      	asrs	r3, r3, #1
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	3302      	adds	r3, #2
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	733b      	strb	r3, [r7, #12]
	md_bits = (MD & 0x01) << 7;
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	01db      	lsls	r3, r3, #7
 8002a70:	73fb      	strb	r3, [r7, #15]
	cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8002a72:	79bb      	ldrb	r3, [r7, #6]
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	797b      	ldrb	r3, [r7, #5]
 8002a80:	4413      	add	r3, r2
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	3360      	adds	r3, #96	; 0x60
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	737b      	strb	r3, [r7, #13]

	cmd_68(cmd);
 8002a8a:	f107 030c 	add.w	r3, r7, #12
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff fe70 	bl	8002774 <cmd_68>
}
 8002a94:	bf00      	nop
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <LTC681x_adax>:

/* Start ADC Conversion for GPIO and Vref2  */
void LTC681x_adax(uint8_t MD, //ADC Mode
				  uint8_t CHG //GPIO Channels to be measured
				  )
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	460a      	mov	r2, r1
 8002aa6:	71fb      	strb	r3, [r7, #7]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	105b      	asrs	r3, r3, #1
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	3304      	adds	r3, #4
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	01db      	lsls	r3, r3, #7
 8002ac4:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG ;
 8002ac6:	7bfa      	ldrb	r2, [r7, #15]
 8002ac8:	79bb      	ldrb	r3, [r7, #6]
 8002aca:	4413      	add	r3, r2
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	3360      	adds	r3, #96	; 0x60
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	727b      	strb	r3, [r7, #9]

	cmd_68(cmd);
 8002ad4:	f107 0308 	add.w	r3, r7, #8
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fe4b 	bl	8002774 <cmd_68>
}
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <LTC681x_rdcv>:
*/
uint8_t LTC681x_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // The number of ICs in the system
                     cell_asic *ic // Array of the parsed cell codes
                    )
{
 8002ae6:	b5b0      	push	{r4, r5, r7, lr}
 8002ae8:	b088      	sub	sp, #32
 8002aea:	af02      	add	r7, sp, #8
 8002aec:	4603      	mov	r3, r0
 8002aee:	603a      	str	r2, [r7, #0]
 8002af0:	71fb      	strb	r3, [r7, #7]
 8002af2:	460b      	mov	r3, r1
 8002af4:	71bb      	strb	r3, [r7, #6]
	int8_t pec_error = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	75fb      	strb	r3, [r7, #23]
	uint8_t *cell_data;
	uint8_t c_ic = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	75bb      	strb	r3, [r7, #22]
	cell_data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8002afe:	79bb      	ldrb	r3, [r7, #6]
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	4618      	mov	r0, r3
 8002b04:	f004 fcd0 	bl	80074a8 <malloc>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	60bb      	str	r3, [r7, #8]

	if (reg == 0)
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d14b      	bne.n	8002baa <LTC681x_rdcv+0xc4>
	{
		for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8002b12:	2301      	movs	r3, #1
 8002b14:	757b      	strb	r3, [r7, #21]
 8002b16:	e041      	b.n	8002b9c <LTC681x_rdcv+0xb6>
		{
			LTC681x_rdcv_reg(cell_reg, total_ic,cell_data );
 8002b18:	79b9      	ldrb	r1, [r7, #6]
 8002b1a:	7d7b      	ldrb	r3, [r7, #21]
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 f93d 	bl	8002d9e <LTC681x_rdcv_reg>
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002b24:	2300      	movs	r3, #0
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	e031      	b.n	8002b8e <LTC681x_rdcv+0xa8>
			{
			if (ic->isospi_reverse == false)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8002b30:	f083 0301 	eor.w	r3, r3, #1
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <LTC681x_rdcv+0x5a>
			{
			  c_ic = current_ic;
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	75bb      	strb	r3, [r7, #22]
 8002b3e:	e006      	b.n	8002b4e <LTC681x_rdcv+0x68>
			}
			else
			{
			  c_ic = total_ic - current_ic - 1;
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	79ba      	ldrb	r2, [r7, #6]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	b2d8      	uxtb	r0, r3
												&ic[c_ic].cells.c_codes[0],
 8002b52:	7dbb      	ldrb	r3, [r7, #22]
 8002b54:	22e8      	movs	r2, #232	; 0xe8
 8002b56:	fb02 f303 	mul.w	r3, r2, r3
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8002b5e:	f103 041e 	add.w	r4, r3, #30
												&ic[c_ic].cells.pec_match[0]);
 8002b62:	7dbb      	ldrb	r3, [r7, #22]
 8002b64:	22e8      	movs	r2, #232	; 0xe8
 8002b66:	fb02 f303 	mul.w	r3, r2, r3
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8002b6e:	3342      	adds	r3, #66	; 0x42
 8002b70:	7d79      	ldrb	r1, [r7, #21]
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	4623      	mov	r3, r4
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	f000 f9c2 	bl	8002f00 <parse_cells>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	7dfb      	ldrb	r3, [r7, #23]
 8002b82:	4413      	add	r3, r2
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	75fb      	strb	r3, [r7, #23]
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	79bb      	ldrb	r3, [r7, #6]
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	dbc9      	blt.n	8002b2a <LTC681x_rdcv+0x44>
		for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8002b96:	7d7b      	ldrb	r3, [r7, #21]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	757b      	strb	r3, [r7, #21]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8002ba2:	7d7a      	ldrb	r2, [r7, #21]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d9b7      	bls.n	8002b18 <LTC681x_rdcv+0x32>
 8002ba8:	e043      	b.n	8002c32 <LTC681x_rdcv+0x14c>
		}
	}

	else
	{
		LTC681x_rdcv_reg(reg, total_ic,cell_data);
 8002baa:	79b9      	ldrb	r1, [r7, #6]
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 f8f4 	bl	8002d9e <LTC681x_rdcv_reg>

		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	e036      	b.n	8002c2a <LTC681x_rdcv+0x144>
		{
			if (ic->isospi_reverse == false)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8002bc2:	f083 0301 	eor.w	r3, r3, #1
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <LTC681x_rdcv+0xec>
			{
			c_ic = current_ic;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	75bb      	strb	r3, [r7, #22]
 8002bd0:	e006      	b.n	8002be0 <LTC681x_rdcv+0xfa>
			}
			else
			{
			c_ic = total_ic - current_ic - 1;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	79ba      	ldrb	r2, [r7, #6]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	b2d8      	uxtb	r0, r3
 8002be4:	7dbb      	ldrb	r3, [r7, #22]
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	461a      	mov	r2, r3
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	189c      	adds	r4, r3, r2
											  &ic[c_ic].cells.c_codes[0],
 8002bee:	7dbb      	ldrb	r3, [r7, #22]
 8002bf0:	22e8      	movs	r2, #232	; 0xe8
 8002bf2:	fb02 f303 	mul.w	r3, r2, r3
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8002bfa:	f103 051e 	add.w	r5, r3, #30
											  &ic[c_ic].cells.pec_match[0]);
 8002bfe:	7dbb      	ldrb	r3, [r7, #22]
 8002c00:	22e8      	movs	r2, #232	; 0xe8
 8002c02:	fb02 f303 	mul.w	r3, r2, r3
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8002c0a:	3342      	adds	r3, #66	; 0x42
 8002c0c:	79f9      	ldrb	r1, [r7, #7]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	462b      	mov	r3, r5
 8002c12:	4622      	mov	r2, r4
 8002c14:	f000 f974 	bl	8002f00 <parse_cells>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	7dfb      	ldrb	r3, [r7, #23]
 8002c1e:	4413      	add	r3, r2
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	75fb      	strb	r3, [r7, #23]
		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	3301      	adds	r3, #1
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	79bb      	ldrb	r3, [r7, #6]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	dbc4      	blt.n	8002bbc <LTC681x_rdcv+0xd6>
		}
	}
	LTC681x_check_pec(total_ic,CELL,ic);
 8002c32:	79bb      	ldrb	r3, [r7, #6]
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	2101      	movs	r1, #1
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 fa17 	bl	800306c <LTC681x_check_pec>
	free(cell_data);
 8002c3e:	68b8      	ldr	r0, [r7, #8]
 8002c40:	f004 fc3a 	bl	80074b8 <free>

	return(pec_error);
 8002c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bdb0      	pop	{r4, r5, r7, pc}

08002c4e <LTC681x_rdaux>:
*/
int8_t LTC681x_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
                     uint8_t total_ic,//The number of ICs in the system
                     cell_asic *ic//A two dimensional array of the gpio voltage codes.
                    )
{
 8002c4e:	b590      	push	{r4, r7, lr}
 8002c50:	b089      	sub	sp, #36	; 0x24
 8002c52:	af02      	add	r7, sp, #8
 8002c54:	4603      	mov	r3, r0
 8002c56:	603a      	str	r2, [r7, #0]
 8002c58:	71fb      	strb	r3, [r7, #7]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	71bb      	strb	r3, [r7, #6]
	uint8_t *data;
	int8_t pec_error = 0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	75fb      	strb	r3, [r7, #23]
	uint8_t c_ic =0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	75bb      	strb	r3, [r7, #22]
	data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8002c66:	79bb      	ldrb	r3, [r7, #6]
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f004 fc1c 	bl	80074a8 <malloc>
 8002c70:	4603      	mov	r3, r0
 8002c72:	60bb      	str	r3, [r7, #8]

	if (reg == 0)
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d147      	bne.n	8002d0a <LTC681x_rdaux+0xbc>
	{
		for (uint8_t gpio_reg = 1; gpio_reg<ic[0].ic_reg.num_gpio_reg+1; gpio_reg++) //Executes once for each of the LTC681x aux voltage registers
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	757b      	strb	r3, [r7, #21]
 8002c7e:	e03d      	b.n	8002cfc <LTC681x_rdaux+0xae>
		{
			LTC681x_rdaux_reg(gpio_reg, total_ic,data);                 //Reads the raw auxiliary register data into the data[] array
 8002c80:	79b9      	ldrb	r1, [r7, #6]
 8002c82:	7d7b      	ldrb	r3, [r7, #21]
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 f8e7 	bl	8002e5a <LTC681x_rdaux_reg>
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	e02d      	b.n	8002cee <LTC681x_rdaux+0xa0>
			{
				if (ic->isospi_reverse == false)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8002c98:	f083 0301 	eor.w	r3, r3, #1
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <LTC681x_rdaux+0x5a>
				{
				  c_ic = current_ic;
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	75bb      	strb	r3, [r7, #22]
 8002ca6:	e006      	b.n	8002cb6 <LTC681x_rdaux+0x68>
				}
				else
				{
				  c_ic = total_ic - current_ic - 1;
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	79ba      	ldrb	r2, [r7, #6]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	75bb      	strb	r3, [r7, #22]
				}
				pec_error = parse_cells(current_ic,gpio_reg, data,
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	b2d8      	uxtb	r0, r3
										&ic[c_ic].aux.a_codes[0],
 8002cba:	7dbb      	ldrb	r3, [r7, #22]
 8002cbc:	22e8      	movs	r2, #232	; 0xe8
 8002cbe:	fb02 f303 	mul.w	r3, r2, r3
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	4413      	add	r3, r2
				pec_error = parse_cells(current_ic,gpio_reg, data,
 8002cc6:	f103 0448 	add.w	r4, r3, #72	; 0x48
										&ic[c_ic].aux.pec_match[0]);
 8002cca:	7dbb      	ldrb	r3, [r7, #22]
 8002ccc:	22e8      	movs	r2, #232	; 0xe8
 8002cce:	fb02 f303 	mul.w	r3, r2, r3
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	4413      	add	r3, r2
				pec_error = parse_cells(current_ic,gpio_reg, data,
 8002cd6:	335a      	adds	r3, #90	; 0x5a
 8002cd8:	7d79      	ldrb	r1, [r7, #21]
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	4623      	mov	r3, r4
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	f000 f90e 	bl	8002f00 <parse_cells>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	75fb      	strb	r3, [r7, #23]
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	3301      	adds	r3, #1
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	79bb      	ldrb	r3, [r7, #6]
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	dbcd      	blt.n	8002c92 <LTC681x_rdaux+0x44>
		for (uint8_t gpio_reg = 1; gpio_reg<ic[0].ic_reg.num_gpio_reg+1; gpio_reg++) //Executes once for each of the LTC681x aux voltage registers
 8002cf6:	7d7b      	ldrb	r3, [r7, #21]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	757b      	strb	r3, [r7, #21]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8002d02:	7d7a      	ldrb	r2, [r7, #21]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d9bb      	bls.n	8002c80 <LTC681x_rdaux+0x32>
 8002d08:	e03a      	b.n	8002d80 <LTC681x_rdaux+0x132>
			}
		}
	}
	else
	{
		LTC681x_rdaux_reg(reg, total_ic, data);
 8002d0a:	79b9      	ldrb	r1, [r7, #6]
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 f8a2 	bl	8002e5a <LTC681x_rdaux_reg>

		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	e02d      	b.n	8002d78 <LTC681x_rdaux+0x12a>
		{
			if (ic->isospi_reverse == false)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8002d22:	f083 0301 	eor.w	r3, r3, #1
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d002      	beq.n	8002d32 <LTC681x_rdaux+0xe4>
			{
			c_ic = current_ic;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	75bb      	strb	r3, [r7, #22]
 8002d30:	e006      	b.n	8002d40 <LTC681x_rdaux+0xf2>
			}
			else
			{
			c_ic = total_ic - current_ic - 1;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	79ba      	ldrb	r2, [r7, #6]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = parse_cells(current_ic,reg, data,
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	b2d8      	uxtb	r0, r3
								  &ic[c_ic].aux.a_codes[0],
 8002d44:	7dbb      	ldrb	r3, [r7, #22]
 8002d46:	22e8      	movs	r2, #232	; 0xe8
 8002d48:	fb02 f303 	mul.w	r3, r2, r3
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	4413      	add	r3, r2
			pec_error = parse_cells(current_ic,reg, data,
 8002d50:	f103 0448 	add.w	r4, r3, #72	; 0x48
								  &ic[c_ic].aux.pec_match[0]);
 8002d54:	7dbb      	ldrb	r3, [r7, #22]
 8002d56:	22e8      	movs	r2, #232	; 0xe8
 8002d58:	fb02 f303 	mul.w	r3, r2, r3
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	4413      	add	r3, r2
			pec_error = parse_cells(current_ic,reg, data,
 8002d60:	335a      	adds	r3, #90	; 0x5a
 8002d62:	79f9      	ldrb	r1, [r7, #7]
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	4623      	mov	r3, r4
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	f000 f8c9 	bl	8002f00 <parse_cells>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	75fb      	strb	r3, [r7, #23]
		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	3301      	adds	r3, #1
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	79bb      	ldrb	r3, [r7, #6]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	dbcd      	blt.n	8002d1c <LTC681x_rdaux+0xce>
		}
	}
	LTC681x_check_pec(total_ic,AUX,ic);
 8002d80:	79bb      	ldrb	r3, [r7, #6]
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	2102      	movs	r1, #2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 f970 	bl	800306c <LTC681x_check_pec>
	free(data);
 8002d8c:	68b8      	ldr	r0, [r7, #8]
 8002d8e:	f004 fb93 	bl	80074b8 <free>

	return (pec_error);
 8002d92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd90      	pop	{r4, r7, pc}

08002d9e <LTC681x_rdcv_reg>:
/* Writes the command and reads the raw cell voltage register data */
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
                      uint8_t total_ic, //the number of ICs in the
                      uint8_t *data //An array of the unparsed cell codes
                     )
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b084      	sub	sp, #16
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	4603      	mov	r3, r0
 8002da6:	603a      	str	r2, [r7, #0]
 8002da8:	71fb      	strb	r3, [r7, #7]
 8002daa:	460b      	mov	r3, r1
 8002dac:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; //Number of bytes in each ICs register + 2 bytes for the PEC
 8002dae:	2308      	movs	r3, #8
 8002db0:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //1: RDCVA
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d104      	bne.n	8002dc2 <LTC681x_rdcv_reg+0x24>
	{
		cmd[1] = 0x04;
 8002db8:	2304      	movs	r3, #4
 8002dba:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	723b      	strb	r3, [r7, #8]
 8002dc0:	e026      	b.n	8002e10 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 2) //2: RDCVB
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d104      	bne.n	8002dd2 <LTC681x_rdcv_reg+0x34>
	{
		cmd[1] = 0x06;
 8002dc8:	2306      	movs	r3, #6
 8002dca:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	723b      	strb	r3, [r7, #8]
 8002dd0:	e01e      	b.n	8002e10 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 3) //3: RDCVC
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d104      	bne.n	8002de2 <LTC681x_rdcv_reg+0x44>
	{
		cmd[1] = 0x08;
 8002dd8:	2308      	movs	r3, #8
 8002dda:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	723b      	strb	r3, [r7, #8]
 8002de0:	e016      	b.n	8002e10 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 4) //4: RDCVD
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d104      	bne.n	8002df2 <LTC681x_rdcv_reg+0x54>
	{
		cmd[1] = 0x0A;
 8002de8:	230a      	movs	r3, #10
 8002dea:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002dec:	2300      	movs	r3, #0
 8002dee:	723b      	strb	r3, [r7, #8]
 8002df0:	e00e      	b.n	8002e10 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 5) //4: RDCVE
 8002df2:	79fb      	ldrb	r3, [r7, #7]
 8002df4:	2b05      	cmp	r3, #5
 8002df6:	d104      	bne.n	8002e02 <LTC681x_rdcv_reg+0x64>
	{
		cmd[1] = 0x09;
 8002df8:	2309      	movs	r3, #9
 8002dfa:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	723b      	strb	r3, [r7, #8]
 8002e00:	e006      	b.n	8002e10 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 6) //4: RDCVF
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	2b06      	cmp	r3, #6
 8002e06:	d103      	bne.n	8002e10 <LTC681x_rdcv_reg+0x72>
	{
		cmd[1] = 0x0B;
 8002e08:	230b      	movs	r3, #11
 8002e0a:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 8002e10:	f107 0308 	add.w	r3, r7, #8
 8002e14:	4619      	mov	r1, r3
 8002e16:	2002      	movs	r0, #2
 8002e18:	f7ff fd62 	bl	80028e0 <pec15_calc>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8002e20:	89bb      	ldrh	r3, [r7, #12]
 8002e22:	0a1b      	lsrs	r3, r3, #8
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8002e2a:	89bb      	ldrh	r3, [r7, #12]
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 8002e30:	200a      	movs	r0, #10
 8002e32:	f000 fda9 	bl	8003988 <cs_low>
	spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 8002e36:	7bfa      	ldrb	r2, [r7, #15]
 8002e38:	79bb      	ldrb	r3, [r7, #6]
 8002e3a:	fb12 f303 	smulbb	r3, r2, r3
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	f107 0008 	add.w	r0, r7, #8
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	2104      	movs	r1, #4
 8002e48:	f000 fdde 	bl	8003a08 <spi_write_read>
	cs_high(CS_PIN);
 8002e4c:	200a      	movs	r0, #10
 8002e4e:	f000 fdab 	bl	80039a8 <cs_high>
}
 8002e52:	bf00      	nop
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <LTC681x_rdaux_reg>:
*/
void LTC681x_rdaux_reg(uint8_t reg, //Determines which GPIO voltage register is read back
                       uint8_t total_ic, //The number of ICs in the system
                       uint8_t *data //Array of the unparsed auxiliary codes
                      )
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	4603      	mov	r3, r0
 8002e62:	603a      	str	r2, [r7, #0]
 8002e64:	71fb      	strb	r3, [r7, #7]
 8002e66:	460b      	mov	r3, r1
 8002e68:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; // Number of bytes in the register + 2 bytes for the PEC
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //Read back auxiliary group A
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d104      	bne.n	8002e7e <LTC681x_rdaux_reg+0x24>
	{
		cmd[1] = 0x0C;
 8002e74:	230c      	movs	r3, #12
 8002e76:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	723b      	strb	r3, [r7, #8]
 8002e7c:	e01b      	b.n	8002eb6 <LTC681x_rdaux_reg+0x5c>
	}
	else if (reg == 2)  //Read back auxiliary group B
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d104      	bne.n	8002e8e <LTC681x_rdaux_reg+0x34>
	{
		cmd[1] = 0x0E;
 8002e84:	230e      	movs	r3, #14
 8002e86:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	723b      	strb	r3, [r7, #8]
 8002e8c:	e013      	b.n	8002eb6 <LTC681x_rdaux_reg+0x5c>
	}
	else if (reg == 3)  //Read back auxiliary group C
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d104      	bne.n	8002e9e <LTC681x_rdaux_reg+0x44>
	{
		cmd[1] = 0x0D;
 8002e94:	230d      	movs	r3, #13
 8002e96:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	723b      	strb	r3, [r7, #8]
 8002e9c:	e00b      	b.n	8002eb6 <LTC681x_rdaux_reg+0x5c>
	}
	else if (reg == 4)  //Read back auxiliary group D
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d104      	bne.n	8002eae <LTC681x_rdaux_reg+0x54>
	{
		cmd[1] = 0x0F;
 8002ea4:	230f      	movs	r3, #15
 8002ea6:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	723b      	strb	r3, [r7, #8]
 8002eac:	e003      	b.n	8002eb6 <LTC681x_rdaux_reg+0x5c>
	}
	else          //Read back auxiliary group A
	{
		cmd[1] = 0x0C;
 8002eae:	230c      	movs	r3, #12
 8002eb0:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 8002eb6:	f107 0308 	add.w	r3, r7, #8
 8002eba:	4619      	mov	r1, r3
 8002ebc:	2002      	movs	r0, #2
 8002ebe:	f7ff fd0f 	bl	80028e0 <pec15_calc>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8002ec6:	89bb      	ldrh	r3, [r7, #12]
 8002ec8:	0a1b      	lsrs	r3, r3, #8
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8002ed0:	89bb      	ldrh	r3, [r7, #12]
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 8002ed6:	200a      	movs	r0, #10
 8002ed8:	f000 fd56 	bl	8003988 <cs_low>
	spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 8002edc:	7bfa      	ldrb	r2, [r7, #15]
 8002ede:	79bb      	ldrb	r3, [r7, #6]
 8002ee0:	fb12 f303 	smulbb	r3, r2, r3
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f107 0008 	add.w	r0, r7, #8
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	2104      	movs	r1, #4
 8002eee:	f000 fd8b 	bl	8003a08 <spi_write_read>
	cs_high(CS_PIN);
 8002ef2:	200a      	movs	r0, #10
 8002ef4:	f000 fd58 	bl	80039a8 <cs_high>
}
 8002ef8:	bf00      	nop
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <parse_cells>:
					uint8_t cell_reg,  // Type of register
					uint8_t cell_data[], // Unparsed data
					uint16_t *cell_codes, // Parsed data
					uint8_t *ic_pec // PEC error
					)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60ba      	str	r2, [r7, #8]
 8002f08:	607b      	str	r3, [r7, #4]
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	73fb      	strb	r3, [r7, #15]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	73bb      	strb	r3, [r7, #14]
	const uint8_t BYT_IN_REG = 6;
 8002f12:	2306      	movs	r3, #6
 8002f14:	773b      	strb	r3, [r7, #28]
	const uint8_t CELL_IN_REG = 3;
 8002f16:	2303      	movs	r3, #3
 8002f18:	76fb      	strb	r3, [r7, #27]
	int8_t pec_error = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	77fb      	strb	r3, [r7, #31]
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = current_ic*NUM_RX_BYT; //data counter
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	77bb      	strb	r3, [r7, #30]


	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8002f24:	2300      	movs	r3, #0
 8002f26:	777b      	strb	r3, [r7, #29]
 8002f28:	e020      	b.n	8002f6c <parse_cells+0x6c>
	{																		// loops once for each of the 3 codes in the register

		parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each code is received as two bytes and is combined to
 8002f2a:	7fbb      	ldrb	r3, [r7, #30]
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	4413      	add	r3, r2
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	7fbb      	ldrb	r3, [r7, #30]
 8002f36:	3301      	adds	r3, #1
 8002f38:	68b9      	ldr	r1, [r7, #8]
 8002f3a:	440b      	add	r3, r1
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	021b      	lsls	r3, r3, #8
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	4413      	add	r3, r2
 8002f46:	82bb      	strh	r3, [r7, #20]
																				   // create the parsed code
		cell_codes[current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8002f48:	7f7a      	ldrb	r2, [r7, #29]
 8002f4a:	7bbb      	ldrb	r3, [r7, #14]
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	7ef9      	ldrb	r1, [r7, #27]
 8002f50:	fb01 f303 	mul.w	r3, r1, r3
 8002f54:	4413      	add	r3, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	8aba      	ldrh	r2, [r7, #20]
 8002f5e:	801a      	strh	r2, [r3, #0]

		data_counter = data_counter + 2;                       //Because the codes are two bytes, the data counter
 8002f60:	7fbb      	ldrb	r3, [r7, #30]
 8002f62:	3302      	adds	r3, #2
 8002f64:	77bb      	strb	r3, [r7, #30]
	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8002f66:	7f7b      	ldrb	r3, [r7, #29]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	777b      	strb	r3, [r7, #29]
 8002f6c:	7f7a      	ldrb	r2, [r7, #29]
 8002f6e:	7efb      	ldrb	r3, [r7, #27]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d3da      	bcc.n	8002f2a <parse_cells+0x2a>
															  //must increment by two for each parsed code
	}
	received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8002f74:	7fbb      	ldrb	r3, [r7, #30]
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	4413      	add	r3, r2
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	021b      	lsls	r3, r3, #8
 8002f7e:	b21a      	sxth	r2, r3
 8002f80:	7fbb      	ldrb	r3, [r7, #30]
 8002f82:	3301      	adds	r3, #1
 8002f84:	68b9      	ldr	r1, [r7, #8]
 8002f86:	440b      	add	r3, r1
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	b21b      	sxth	r3, r3
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	b21b      	sxth	r3, r3
 8002f90:	833b      	strh	r3, [r7, #24]
																			   //after the 6 cell voltage data bytes
	data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	461a      	mov	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	441a      	add	r2, r3
 8002f9c:	7f3b      	ldrb	r3, [r7, #28]
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff fc9d 	bl	80028e0 <pec15_calc>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	82fb      	strh	r3, [r7, #22]

	if (received_pec != data_pec)
 8002faa:	8b3a      	ldrh	r2, [r7, #24]
 8002fac:	8afb      	ldrh	r3, [r7, #22]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d008      	beq.n	8002fc4 <parse_cells+0xc4>
	{
		pec_error = 1;                             //The pec_error variable is simply set negative if any PEC errors
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	77fb      	strb	r3, [r7, #31]
		ic_pec[cell_reg-1]=1;
 8002fb6:	7bbb      	ldrb	r3, [r7, #14]
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fbc:	4413      	add	r3, r2
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	701a      	strb	r2, [r3, #0]
 8002fc2:	e005      	b.n	8002fd0 <parse_cells+0xd0>
	}
	else
	{
		ic_pec[cell_reg-1]=0;
 8002fc4:	7bbb      	ldrb	r3, [r7, #14]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fca:	4413      	add	r3, r2
 8002fcc:	2200      	movs	r2, #0
 8002fce:	701a      	strb	r2, [r3, #0]
	}
	data_counter=data_counter+2;
 8002fd0:	7fbb      	ldrb	r3, [r7, #30]
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	77bb      	strb	r3, [r7, #30]

	return(pec_error);
 8002fd6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3720      	adds	r7, #32
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <LTC681x_pollAdc>:
	return(adc_state);
}

/* This function will block operation until the ADC has finished it's conversion */
uint32_t LTC681x_pollAdc()
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8002ff6:	2307      	movs	r3, #7
 8002ff8:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 8002ffa:	2314      	movs	r3, #20
 8002ffc:	717b      	strb	r3, [r7, #5]
	cmd_pec = pec15_calc(2, cmd);
 8002ffe:	1d3b      	adds	r3, r7, #4
 8003000:	4619      	mov	r1, r3
 8003002:	2002      	movs	r0, #2
 8003004:	f7ff fc6c 	bl	80028e0 <pec15_calc>
 8003008:	4603      	mov	r3, r0
 800300a:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 800300c:	893b      	ldrh	r3, [r7, #8]
 800300e:	0a1b      	lsrs	r3, r3, #8
 8003010:	b29b      	uxth	r3, r3
 8003012:	b2db      	uxtb	r3, r3
 8003014:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t)(cmd_pec);
 8003016:	893b      	ldrh	r3, [r7, #8]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	71fb      	strb	r3, [r7, #7]

	cs_low(CS_PIN);
 800301c:	200a      	movs	r0, #10
 800301e:	f000 fcb3 	bl	8003988 <cs_low>
	spi_write_array(4,cmd);
 8003022:	1d3b      	adds	r3, r7, #4
 8003024:	4619      	mov	r1, r3
 8003026:	2004      	movs	r0, #4
 8003028:	f000 fcda 	bl	80039e0 <spi_write_array>
	while ((counter<200000)&&(finished == 0))
 800302c:	e00d      	b.n	800304a <LTC681x_pollAdc+0x66>
	{
		current_time = spi_read_byte(0xff);
 800302e:	20ff      	movs	r0, #255	; 0xff
 8003030:	f000 fd20 	bl	8003a74 <spi_read_byte>
 8003034:	4603      	mov	r3, r0
 8003036:	72bb      	strb	r3, [r7, #10]
		if (current_time>0)
 8003038:	7abb      	ldrb	r3, [r7, #10]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <LTC681x_pollAdc+0x60>
		{
			finished = 1;
 800303e:	2301      	movs	r3, #1
 8003040:	72fb      	strb	r3, [r7, #11]
 8003042:	e002      	b.n	800304a <LTC681x_pollAdc+0x66>
		}
		else
		{
			counter = counter + 10;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	330a      	adds	r3, #10
 8003048:	60fb      	str	r3, [r7, #12]
	while ((counter<200000)&&(finished == 0))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4a06      	ldr	r2, [pc, #24]	; (8003068 <LTC681x_pollAdc+0x84>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d802      	bhi.n	8003058 <LTC681x_pollAdc+0x74>
 8003052:	7afb      	ldrb	r3, [r7, #11]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0ea      	beq.n	800302e <LTC681x_pollAdc+0x4a>
		}
	}
	cs_high(CS_PIN);
 8003058:	200a      	movs	r0, #10
 800305a:	f000 fca5 	bl	80039a8 <cs_high>

	return(counter);
 800305e:	68fb      	ldr	r3, [r7, #12]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	00030d3f 	.word	0x00030d3f

0800306c <LTC681x_check_pec>:
/* Helper function that increments PEC counters */
void LTC681x_check_pec(uint8_t total_ic, //Number of ICs in the system
					   uint8_t reg, //Type of Register
					   cell_asic *ic //A two dimensional array that stores the data
					   )
{
 800306c:	b480      	push	{r7}
 800306e:	b08b      	sub	sp, #44	; 0x2c
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	603a      	str	r2, [r7, #0]
 8003076:	71fb      	strb	r3, [r7, #7]
 8003078:	460b      	mov	r3, r1
 800307a:	71bb      	strb	r3, [r7, #6]
	switch (reg)
 800307c:	79bb      	ldrb	r3, [r7, #6]
 800307e:	2b04      	cmp	r3, #4
 8003080:	f200 8191 	bhi.w	80033a6 <LTC681x_check_pec+0x33a>
 8003084:	a201      	add	r2, pc, #4	; (adr r2, 800308c <LTC681x_check_pec+0x20>)
 8003086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308a:	bf00      	nop
 800308c:	080030a1 	.word	0x080030a1
 8003090:	0800319d 	.word	0x0800319d
 8003094:	0800324f 	.word	0x0800324f
 8003098:	080032fb 	.word	0x080032fb
 800309c:	0800311f 	.word	0x0800311f
	{
		case LTC681x_CFGR:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80030a0:	2300      	movs	r3, #0
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
 80030a4:	e036      	b.n	8003114 <LTC681x_check_pec+0xa8>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].config.rx_pec_match;
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	22e8      	movs	r2, #232	; 0xe8
 80030aa:	fb02 f303 	mul.w	r3, r2, r3
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	4413      	add	r3, r2
 80030b2:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	22e8      	movs	r2, #232	; 0xe8
 80030ba:	fb02 f303 	mul.w	r3, r2, r3
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	4413      	add	r3, r2
 80030c2:	7b9b      	ldrb	r3, [r3, #14]
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	20e8      	movs	r0, #232	; 0xe8
 80030ca:	fb00 f303 	mul.w	r3, r0, r3
 80030ce:	6838      	ldr	r0, [r7, #0]
 80030d0:	4403      	add	r3, r0
 80030d2:	440a      	add	r2, r1
 80030d4:	b292      	uxth	r2, r2
 80030d6:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].config.rx_pec_match;
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	22e8      	movs	r2, #232	; 0xe8
 80030de:	fb02 f303 	mul.w	r3, r2, r3
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	4413      	add	r3, r2
 80030e6:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	22e8      	movs	r2, #232	; 0xe8
 80030ee:	fb02 f303 	mul.w	r3, r2, r3
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	4413      	add	r3, r2
 80030f6:	7b9b      	ldrb	r3, [r3, #14]
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	20e8      	movs	r0, #232	; 0xe8
 80030fe:	fb00 f303 	mul.w	r3, r0, r3
 8003102:	6838      	ldr	r0, [r7, #0]
 8003104:	4403      	add	r3, r0
 8003106:	440a      	add	r2, r1
 8003108:	b292      	uxth	r2, r2
 800310a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	3301      	adds	r3, #1
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003118:	429a      	cmp	r2, r3
 800311a:	dbc4      	blt.n	80030a6 <LTC681x_check_pec+0x3a>
		  }
		break;
 800311c:	e144      	b.n	80033a8 <LTC681x_check_pec+0x33c>

		case CFGRB:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800311e:	2300      	movs	r3, #0
 8003120:	623b      	str	r3, [r7, #32]
 8003122:	e036      	b.n	8003192 <LTC681x_check_pec+0x126>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configb.rx_pec_match;
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	22e8      	movs	r2, #232	; 0xe8
 8003128:	fb02 f303 	mul.w	r3, r2, r3
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	4413      	add	r3, r2
 8003130:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	22e8      	movs	r2, #232	; 0xe8
 8003138:	fb02 f303 	mul.w	r3, r2, r3
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	4413      	add	r3, r2
 8003140:	7f5b      	ldrb	r3, [r3, #29]
 8003142:	b29a      	uxth	r2, r3
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	20e8      	movs	r0, #232	; 0xe8
 8003148:	fb00 f303 	mul.w	r3, r0, r3
 800314c:	6838      	ldr	r0, [r7, #0]
 800314e:	4403      	add	r3, r0
 8003150:	440a      	add	r2, r1
 8003152:	b292      	uxth	r2, r2
 8003154:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configb.rx_pec_match;
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	22e8      	movs	r2, #232	; 0xe8
 800315c:	fb02 f303 	mul.w	r3, r2, r3
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	4413      	add	r3, r2
 8003164:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	22e8      	movs	r2, #232	; 0xe8
 800316c:	fb02 f303 	mul.w	r3, r2, r3
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	4413      	add	r3, r2
 8003174:	7f5b      	ldrb	r3, [r3, #29]
 8003176:	b29a      	uxth	r2, r3
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	20e8      	movs	r0, #232	; 0xe8
 800317c:	fb00 f303 	mul.w	r3, r0, r3
 8003180:	6838      	ldr	r0, [r7, #0]
 8003182:	4403      	add	r3, r0
 8003184:	440a      	add	r2, r1
 8003186:	b292      	uxth	r2, r2
 8003188:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	3301      	adds	r3, #1
 8003190:	623b      	str	r3, [r7, #32]
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	6a3a      	ldr	r2, [r7, #32]
 8003196:	429a      	cmp	r2, r3
 8003198:	dbc4      	blt.n	8003124 <LTC681x_check_pec+0xb8>
		  }
		break;
 800319a:	e105      	b.n	80033a8 <LTC681x_check_pec+0x33c>
		case CELL:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800319c:	2300      	movs	r3, #0
 800319e:	61fb      	str	r3, [r7, #28]
 80031a0:	e050      	b.n	8003244 <LTC681x_check_pec+0x1d8>
		  {
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 80031a2:	2300      	movs	r3, #0
 80031a4:	61bb      	str	r3, [r7, #24]
 80031a6:	e043      	b.n	8003230 <LTC681x_check_pec+0x1c4>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].cells.pec_match[i];
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	22e8      	movs	r2, #232	; 0xe8
 80031ac:	fb02 f303 	mul.w	r3, r2, r3
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	4413      	add	r3, r2
 80031b4:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	22e8      	movs	r2, #232	; 0xe8
 80031bc:	fb02 f303 	mul.w	r3, r2, r3
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	441a      	add	r2, r3
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	4413      	add	r3, r2
 80031c8:	3342      	adds	r3, #66	; 0x42
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	20e8      	movs	r0, #232	; 0xe8
 80031d2:	fb00 f303 	mul.w	r3, r0, r3
 80031d6:	6838      	ldr	r0, [r7, #0]
 80031d8:	4403      	add	r3, r0
 80031da:	440a      	add	r2, r1
 80031dc:	b292      	uxth	r2, r2
 80031de:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.cell_pec[i] = ic[current_ic].crc_count.cell_pec[i] + ic[current_ic].cells.pec_match[i];
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	22e8      	movs	r2, #232	; 0xe8
 80031e6:	fb02 f303 	mul.w	r3, r2, r3
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	441a      	add	r2, r3
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	3360      	adds	r3, #96	; 0x60
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	4413      	add	r3, r2
 80031f6:	8899      	ldrh	r1, [r3, #4]
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	22e8      	movs	r2, #232	; 0xe8
 80031fc:	fb02 f303 	mul.w	r3, r2, r3
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	441a      	add	r2, r3
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	4413      	add	r3, r2
 8003208:	3342      	adds	r3, #66	; 0x42
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	b29b      	uxth	r3, r3
 800320e:	69fa      	ldr	r2, [r7, #28]
 8003210:	20e8      	movs	r0, #232	; 0xe8
 8003212:	fb00 f202 	mul.w	r2, r0, r2
 8003216:	6838      	ldr	r0, [r7, #0]
 8003218:	4402      	add	r2, r0
 800321a:	440b      	add	r3, r1
 800321c:	b299      	uxth	r1, r3
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	3360      	adds	r3, #96	; 0x60
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	4413      	add	r3, r2
 8003226:	460a      	mov	r2, r1
 8003228:	809a      	strh	r2, [r3, #4]
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	3301      	adds	r3, #1
 800322e:	61bb      	str	r3, [r7, #24]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8003236:	461a      	mov	r2, r3
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	4293      	cmp	r3, r2
 800323c:	dbb4      	blt.n	80031a8 <LTC681x_check_pec+0x13c>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	3301      	adds	r3, #1
 8003242:	61fb      	str	r3, [r7, #28]
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	429a      	cmp	r2, r3
 800324a:	dbaa      	blt.n	80031a2 <LTC681x_check_pec+0x136>
			}
		  }
		break;
 800324c:	e0ac      	b.n	80033a8 <LTC681x_check_pec+0x33c>
		case AUX:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800324e:	2300      	movs	r3, #0
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	e04d      	b.n	80032f0 <LTC681x_check_pec+0x284>
		  {
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8003254:	2300      	movs	r3, #0
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	e040      	b.n	80032dc <LTC681x_check_pec+0x270>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + (ic[current_ic].aux.pec_match[i]);
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	22e8      	movs	r2, #232	; 0xe8
 800325e:	fb02 f303 	mul.w	r3, r2, r3
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	4413      	add	r3, r2
 8003266:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	22e8      	movs	r2, #232	; 0xe8
 800326e:	fb02 f303 	mul.w	r3, r2, r3
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	441a      	add	r2, r3
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4413      	add	r3, r2
 800327a:	335a      	adds	r3, #90	; 0x5a
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	b29a      	uxth	r2, r3
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	20e8      	movs	r0, #232	; 0xe8
 8003284:	fb00 f303 	mul.w	r3, r0, r3
 8003288:	6838      	ldr	r0, [r7, #0]
 800328a:	4403      	add	r3, r0
 800328c:	440a      	add	r2, r1
 800328e:	b292      	uxth	r2, r2
 8003290:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.aux_pec[i] = ic[current_ic].crc_count.aux_pec[i] + (ic[current_ic].aux.pec_match[i]);
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	22e8      	movs	r2, #232	; 0xe8
 8003298:	fb02 f303 	mul.w	r3, r2, r3
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	4413      	add	r3, r2
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	3268      	adds	r2, #104	; 0x68
 80032a4:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	22e8      	movs	r2, #232	; 0xe8
 80032ac:	fb02 f303 	mul.w	r3, r2, r3
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	441a      	add	r2, r3
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4413      	add	r3, r2
 80032b8:	335a      	adds	r3, #90	; 0x5a
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	b29a      	uxth	r2, r3
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	20e8      	movs	r0, #232	; 0xe8
 80032c2:	fb00 f303 	mul.w	r3, r0, r3
 80032c6:	6838      	ldr	r0, [r7, #0]
 80032c8:	4403      	add	r3, r0
 80032ca:	440a      	add	r2, r1
 80032cc:	b291      	uxth	r1, r2
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	3268      	adds	r2, #104	; 0x68
 80032d2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	3301      	adds	r3, #1
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80032e2:	461a      	mov	r2, r3
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4293      	cmp	r3, r2
 80032e8:	dbb7      	blt.n	800325a <LTC681x_check_pec+0x1ee>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	3301      	adds	r3, #1
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	dbad      	blt.n	8003254 <LTC681x_check_pec+0x1e8>
			}
		  }

		break;
 80032f8:	e056      	b.n	80033a8 <LTC681x_check_pec+0x33c>
		case STAT:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	e04d      	b.n	800339c <LTC681x_check_pec+0x330>
		  {

			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8003300:	2300      	movs	r3, #0
 8003302:	60bb      	str	r3, [r7, #8]
 8003304:	e040      	b.n	8003388 <LTC681x_check_pec+0x31c>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].stat.pec_match[i];
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	22e8      	movs	r2, #232	; 0xe8
 800330a:	fb02 f303 	mul.w	r3, r2, r3
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	4413      	add	r3, r2
 8003312:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	22e8      	movs	r2, #232	; 0xe8
 800331a:	fb02 f303 	mul.w	r3, r2, r3
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	441a      	add	r2, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	4413      	add	r3, r2
 8003326:	336b      	adds	r3, #107	; 0x6b
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	20e8      	movs	r0, #232	; 0xe8
 8003330:	fb00 f303 	mul.w	r3, r0, r3
 8003334:	6838      	ldr	r0, [r7, #0]
 8003336:	4403      	add	r3, r0
 8003338:	440a      	add	r2, r1
 800333a:	b292      	uxth	r2, r2
 800333c:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.stat_pec[i] = ic[current_ic].crc_count.stat_pec[i] + ic[current_ic].stat.pec_match[i];
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	22e8      	movs	r2, #232	; 0xe8
 8003344:	fb02 f303 	mul.w	r3, r2, r3
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	4413      	add	r3, r2
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	326c      	adds	r2, #108	; 0x6c
 8003350:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	22e8      	movs	r2, #232	; 0xe8
 8003358:	fb02 f303 	mul.w	r3, r2, r3
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	441a      	add	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	4413      	add	r3, r2
 8003364:	336b      	adds	r3, #107	; 0x6b
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	20e8      	movs	r0, #232	; 0xe8
 800336e:	fb00 f303 	mul.w	r3, r0, r3
 8003372:	6838      	ldr	r0, [r7, #0]
 8003374:	4403      	add	r3, r0
 8003376:	440a      	add	r2, r1
 8003378:	b291      	uxth	r1, r2
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	326c      	adds	r2, #108	; 0x6c
 800337e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	3301      	adds	r3, #1
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800338e:	3b01      	subs	r3, #1
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	429a      	cmp	r2, r3
 8003394:	dbb7      	blt.n	8003306 <LTC681x_check_pec+0x29a>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	3301      	adds	r3, #1
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	79fb      	ldrb	r3, [r7, #7]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	dbad      	blt.n	8003300 <LTC681x_check_pec+0x294>
			}
		  }
		break;
 80033a4:	e000      	b.n	80033a8 <LTC681x_check_pec+0x33c>
		default:
		break;
 80033a6:	bf00      	nop
	}
}
 80033a8:	bf00      	nop
 80033aa:	372c      	adds	r7, #44	; 0x2c
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <LTC681x_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC681x_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that stores the data
							 )
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	6039      	str	r1, [r7, #0]
 80033be:	71fb      	strb	r3, [r7, #7]
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	e051      	b.n	800346a <LTC681x_reset_crc_count+0xb6>
	{
		ic[current_ic].crc_count.pec_count = 0;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	22e8      	movs	r2, #232	; 0xe8
 80033ca:	fb02 f303 	mul.w	r3, r2, r3
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	4413      	add	r3, r2
 80033d2:	2200      	movs	r2, #0
 80033d4:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		ic[current_ic].crc_count.cfgr_pec = 0;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	22e8      	movs	r2, #232	; 0xe8
 80033dc:	fb02 f303 	mul.w	r3, r2, r3
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	4413      	add	r3, r2
 80033e4:	2200      	movs	r2, #0
 80033e6:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		for (int i=0; i<6; i++)
 80033ea:	2300      	movs	r3, #0
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	e00e      	b.n	800340e <LTC681x_reset_crc_count+0x5a>
		{
			ic[current_ic].crc_count.cell_pec[i]=0;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	22e8      	movs	r2, #232	; 0xe8
 80033f4:	fb02 f303 	mul.w	r3, r2, r3
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	441a      	add	r2, r3
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	3360      	adds	r3, #96	; 0x60
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	4413      	add	r3, r2
 8003404:	2200      	movs	r2, #0
 8003406:	809a      	strh	r2, [r3, #4]
		for (int i=0; i<6; i++)
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	3301      	adds	r3, #1
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	2b05      	cmp	r3, #5
 8003412:	dded      	ble.n	80033f0 <LTC681x_reset_crc_count+0x3c>

		}
		for (int i=0; i<4; i++)
 8003414:	2300      	movs	r3, #0
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	e00d      	b.n	8003436 <LTC681x_reset_crc_count+0x82>
		{
			ic[current_ic].crc_count.aux_pec[i]=0;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	22e8      	movs	r2, #232	; 0xe8
 800341e:	fb02 f303 	mul.w	r3, r2, r3
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	4413      	add	r3, r2
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	3268      	adds	r2, #104	; 0x68
 800342a:	2100      	movs	r1, #0
 800342c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int i=0; i<4; i++)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	3301      	adds	r3, #1
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b03      	cmp	r3, #3
 800343a:	ddee      	ble.n	800341a <LTC681x_reset_crc_count+0x66>
		}
		for (int i=0; i<2; i++)
 800343c:	2300      	movs	r3, #0
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	e00d      	b.n	800345e <LTC681x_reset_crc_count+0xaa>
		{
			ic[current_ic].crc_count.stat_pec[i]=0;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	22e8      	movs	r2, #232	; 0xe8
 8003446:	fb02 f303 	mul.w	r3, r2, r3
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	4413      	add	r3, r2
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	326c      	adds	r2, #108	; 0x6c
 8003452:	2100      	movs	r1, #0
 8003454:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int i=0; i<2; i++)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	3301      	adds	r3, #1
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b01      	cmp	r3, #1
 8003462:	ddee      	ble.n	8003442 <LTC681x_reset_crc_count+0x8e>
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	3301      	adds	r3, #1
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	429a      	cmp	r2, r3
 8003470:	dba9      	blt.n	80033c6 <LTC681x_reset_crc_count+0x12>
		}
	}
}
 8003472:	bf00      	nop
 8003474:	bf00      	nop
 8003476:	371c      	adds	r7, #28
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <LTC681x_init_cfg>:

/* Helper function to initialize CFG variables */
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that stores the data
					  )
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	6039      	str	r1, [r7, #0]
 800348a:	71fb      	strb	r3, [r7, #7]
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 800348c:	2300      	movs	r3, #0
 800348e:	73fb      	strb	r3, [r7, #15]
 8003490:	e015      	b.n	80034be <LTC681x_init_cfg+0x3e>
	{
		for (int j =0; j<6; j++)
 8003492:	2300      	movs	r3, #0
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	e00c      	b.n	80034b2 <LTC681x_init_cfg+0x32>
		{
		  ic[current_ic].config.tx_data[j] = 0;
 8003498:	7bfb      	ldrb	r3, [r7, #15]
 800349a:	22e8      	movs	r2, #232	; 0xe8
 800349c:	fb02 f303 	mul.w	r3, r2, r3
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	441a      	add	r2, r3
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	4413      	add	r3, r2
 80034a8:	2200      	movs	r2, #0
 80034aa:	701a      	strb	r2, [r3, #0]
		for (int j =0; j<6; j++)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	3301      	adds	r3, #1
 80034b0:	60bb      	str	r3, [r7, #8]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b05      	cmp	r3, #5
 80034b6:	ddef      	ble.n	8003498 <LTC681x_init_cfg+0x18>
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	3301      	adds	r3, #1
 80034bc:	73fb      	strb	r3, [r7, #15]
 80034be:	7bfa      	ldrb	r2, [r7, #15]
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d3e5      	bcc.n	8003492 <LTC681x_init_cfg+0x12>
		}
	}
}
 80034c6:	bf00      	nop
 80034c8:	bf00      	nop
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <LTC681x_set_cfgr>:
					 bool dcc[12], // The DCC bits
					 bool dcto[4], // The Dcto bits
					 uint16_t uv, // The UV value
					 uint16_t  ov // The OV value
					 )
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6039      	str	r1, [r7, #0]
 80034dc:	4611      	mov	r1, r2
 80034de:	461a      	mov	r2, r3
 80034e0:	4603      	mov	r3, r0
 80034e2:	71fb      	strb	r3, [r7, #7]
 80034e4:	460b      	mov	r3, r1
 80034e6:	71bb      	strb	r3, [r7, #6]
 80034e8:	4613      	mov	r3, r2
 80034ea:	717b      	strb	r3, [r7, #5]
	LTC681x_set_cfgr_refon(nIC,ic,refon);
 80034ec:	79ba      	ldrb	r2, [r7, #6]
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	6839      	ldr	r1, [r7, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 f828 	bl	8003548 <LTC681x_set_cfgr_refon>
	LTC681x_set_cfgr_adcopt(nIC,ic,adcopt);
 80034f8:	797a      	ldrb	r2, [r7, #5]
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	6839      	ldr	r1, [r7, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 f856 	bl	80035b0 <LTC681x_set_cfgr_adcopt>
	LTC681x_set_cfgr_gpio(nIC,ic,gpio);
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	6839      	ldr	r1, [r7, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f000 f884 	bl	8003618 <LTC681x_set_cfgr_gpio>
	LTC681x_set_cfgr_dis(nIC,ic,dcc);
 8003510:	79fb      	ldrb	r3, [r7, #7]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	6839      	ldr	r1, [r7, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f000 f8ce 	bl	80036b8 <LTC681x_set_cfgr_dis>
	LTC681x_set_cfgr_dcto(nIC,ic,dcto);
 800351c:	79fb      	ldrb	r3, [r7, #7]
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	6839      	ldr	r1, [r7, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f000 f957 	bl	80037d6 <LTC681x_set_cfgr_dcto>
	LTC681x_set_cfgr_uv(nIC, ic, uv);
 8003528:	8bba      	ldrh	r2, [r7, #28]
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	6839      	ldr	r1, [r7, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f9a1 	bl	8003876 <LTC681x_set_cfgr_uv>
	LTC681x_set_cfgr_ov(nIC, ic, ov);
 8003534:	8c3a      	ldrh	r2, [r7, #32]
 8003536:	79fb      	ldrb	r3, [r7, #7]
 8003538:	6839      	ldr	r1, [r7, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f000 f9e1 	bl	8003902 <LTC681x_set_cfgr_ov>
}
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <LTC681x_set_cfgr_refon>:

/* Helper function to set the REFON bit */
void LTC681x_set_cfgr_refon(uint8_t nIC, cell_asic *ic, bool refon)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	6039      	str	r1, [r7, #0]
 8003552:	71fb      	strb	r3, [r7, #7]
 8003554:	4613      	mov	r3, r2
 8003556:	71bb      	strb	r3, [r7, #6]
	if (refon) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x04;
 8003558:	79bb      	ldrb	r3, [r7, #6]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d011      	beq.n	8003582 <LTC681x_set_cfgr_refon+0x3a>
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	22e8      	movs	r2, #232	; 0xe8
 8003562:	fb02 f303 	mul.w	r3, r2, r3
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	4413      	add	r3, r2
 800356a:	781a      	ldrb	r2, [r3, #0]
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	21e8      	movs	r1, #232	; 0xe8
 8003570:	fb01 f303 	mul.w	r3, r1, r3
 8003574:	6839      	ldr	r1, [r7, #0]
 8003576:	440b      	add	r3, r1
 8003578:	f042 0204 	orr.w	r2, r2, #4
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
}
 8003580:	e010      	b.n	80035a4 <LTC681x_set_cfgr_refon+0x5c>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	22e8      	movs	r2, #232	; 0xe8
 8003586:	fb02 f303 	mul.w	r3, r2, r3
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	4413      	add	r3, r2
 800358e:	781a      	ldrb	r2, [r3, #0]
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	21e8      	movs	r1, #232	; 0xe8
 8003594:	fb01 f303 	mul.w	r3, r1, r3
 8003598:	6839      	ldr	r1, [r7, #0]
 800359a:	440b      	add	r3, r1
 800359c:	f022 0204 	bic.w	r2, r2, #4
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	701a      	strb	r2, [r3, #0]
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <LTC681x_set_cfgr_adcopt>:

/* Helper function to set the ADCOPT bit */
void LTC681x_set_cfgr_adcopt(uint8_t nIC, cell_asic *ic, bool adcopt)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	6039      	str	r1, [r7, #0]
 80035ba:	71fb      	strb	r3, [r7, #7]
 80035bc:	4613      	mov	r3, r2
 80035be:	71bb      	strb	r3, [r7, #6]
	if (adcopt) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x01;
 80035c0:	79bb      	ldrb	r3, [r7, #6]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d011      	beq.n	80035ea <LTC681x_set_cfgr_adcopt+0x3a>
 80035c6:	79fb      	ldrb	r3, [r7, #7]
 80035c8:	22e8      	movs	r2, #232	; 0xe8
 80035ca:	fb02 f303 	mul.w	r3, r2, r3
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	4413      	add	r3, r2
 80035d2:	781a      	ldrb	r2, [r3, #0]
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	21e8      	movs	r1, #232	; 0xe8
 80035d8:	fb01 f303 	mul.w	r3, r1, r3
 80035dc:	6839      	ldr	r1, [r7, #0]
 80035de:	440b      	add	r3, r1
 80035e0:	f042 0201 	orr.w	r2, r2, #1
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
}
 80035e8:	e010      	b.n	800360c <LTC681x_set_cfgr_adcopt+0x5c>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	22e8      	movs	r2, #232	; 0xe8
 80035ee:	fb02 f303 	mul.w	r3, r2, r3
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	4413      	add	r3, r2
 80035f6:	781a      	ldrb	r2, [r3, #0]
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	21e8      	movs	r1, #232	; 0xe8
 80035fc:	fb01 f303 	mul.w	r3, r1, r3
 8003600:	6839      	ldr	r1, [r7, #0]
 8003602:	440b      	add	r3, r1
 8003604:	f022 0201 	bic.w	r2, r2, #1
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	701a      	strb	r2, [r3, #0]
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <LTC681x_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void LTC681x_set_cfgr_gpio(uint8_t nIC, cell_asic *ic,bool gpio[5])
{
 8003618:	b480      	push	{r7}
 800361a:	b087      	sub	sp, #28
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	73fb      	strb	r3, [r7, #15]
	for (int i =0; i<5; i++)
 8003626:	2300      	movs	r3, #0
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	e03b      	b.n	80036a4 <LTC681x_set_cfgr_gpio+0x8c>
	{
		if (gpio[i])ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|(0x01<<(i+3));
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	4413      	add	r3, r2
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d018      	beq.n	800366a <LTC681x_set_cfgr_gpio+0x52>
 8003638:	7bfb      	ldrb	r3, [r7, #15]
 800363a:	22e8      	movs	r2, #232	; 0xe8
 800363c:	fb02 f303 	mul.w	r3, r2, r3
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	4413      	add	r3, r2
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	b25a      	sxtb	r2, r3
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	3303      	adds	r3, #3
 800364c:	2101      	movs	r1, #1
 800364e:	fa01 f303 	lsl.w	r3, r1, r3
 8003652:	b25b      	sxtb	r3, r3
 8003654:	4313      	orrs	r3, r2
 8003656:	b259      	sxtb	r1, r3
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	22e8      	movs	r2, #232	; 0xe8
 800365c:	fb02 f303 	mul.w	r3, r2, r3
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	4413      	add	r3, r2
 8003664:	b2ca      	uxtb	r2, r1
 8003666:	701a      	strb	r2, [r3, #0]
 8003668:	e019      	b.n	800369e <LTC681x_set_cfgr_gpio+0x86>
		else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&(~(0x01<<(i+3)));
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	22e8      	movs	r2, #232	; 0xe8
 800366e:	fb02 f303 	mul.w	r3, r2, r3
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	4413      	add	r3, r2
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	b25a      	sxtb	r2, r3
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	3303      	adds	r3, #3
 800367e:	2101      	movs	r1, #1
 8003680:	fa01 f303 	lsl.w	r3, r1, r3
 8003684:	b25b      	sxtb	r3, r3
 8003686:	43db      	mvns	r3, r3
 8003688:	b25b      	sxtb	r3, r3
 800368a:	4013      	ands	r3, r2
 800368c:	b259      	sxtb	r1, r3
 800368e:	7bfb      	ldrb	r3, [r7, #15]
 8003690:	22e8      	movs	r2, #232	; 0xe8
 8003692:	fb02 f303 	mul.w	r3, r2, r3
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	4413      	add	r3, r2
 800369a:	b2ca      	uxtb	r2, r1
 800369c:	701a      	strb	r2, [r3, #0]
	for (int i =0; i<5; i++)
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	3301      	adds	r3, #1
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	ddc0      	ble.n	800362c <LTC681x_set_cfgr_gpio+0x14>
	}
}
 80036aa:	bf00      	nop
 80036ac:	bf00      	nop
 80036ae:	371c      	adds	r7, #28
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <LTC681x_set_cfgr_dis>:

/* Helper function to control discharge */
void LTC681x_set_cfgr_dis(uint8_t nIC, cell_asic *ic,bool dcc[12])
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	73fb      	strb	r3, [r7, #15]
	for (int i =0; i<8; i++)
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
 80036ca:	e039      	b.n	8003740 <LTC681x_set_cfgr_dis+0x88>
	{
		if (dcc[i])ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]|(0x01<<i);
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	4413      	add	r3, r2
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d017      	beq.n	8003708 <LTC681x_set_cfgr_dis+0x50>
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
 80036da:	22e8      	movs	r2, #232	; 0xe8
 80036dc:	fb02 f303 	mul.w	r3, r2, r3
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	4413      	add	r3, r2
 80036e4:	791b      	ldrb	r3, [r3, #4]
 80036e6:	b25a      	sxtb	r2, r3
 80036e8:	2101      	movs	r1, #1
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	fa01 f303 	lsl.w	r3, r1, r3
 80036f0:	b25b      	sxtb	r3, r3
 80036f2:	4313      	orrs	r3, r2
 80036f4:	b259      	sxtb	r1, r3
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
 80036f8:	22e8      	movs	r2, #232	; 0xe8
 80036fa:	fb02 f303 	mul.w	r3, r2, r3
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	4413      	add	r3, r2
 8003702:	b2ca      	uxtb	r2, r1
 8003704:	711a      	strb	r2, [r3, #4]
 8003706:	e018      	b.n	800373a <LTC681x_set_cfgr_dis+0x82>
		else ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]& (~(0x01<<i));
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	22e8      	movs	r2, #232	; 0xe8
 800370c:	fb02 f303 	mul.w	r3, r2, r3
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	4413      	add	r3, r2
 8003714:	791b      	ldrb	r3, [r3, #4]
 8003716:	b25a      	sxtb	r2, r3
 8003718:	2101      	movs	r1, #1
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	fa01 f303 	lsl.w	r3, r1, r3
 8003720:	b25b      	sxtb	r3, r3
 8003722:	43db      	mvns	r3, r3
 8003724:	b25b      	sxtb	r3, r3
 8003726:	4013      	ands	r3, r2
 8003728:	b259      	sxtb	r1, r3
 800372a:	7bfb      	ldrb	r3, [r7, #15]
 800372c:	22e8      	movs	r2, #232	; 0xe8
 800372e:	fb02 f303 	mul.w	r3, r2, r3
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	4413      	add	r3, r2
 8003736:	b2ca      	uxtb	r2, r1
 8003738:	711a      	strb	r2, [r3, #4]
	for (int i =0; i<8; i++)
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	3301      	adds	r3, #1
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	2b07      	cmp	r3, #7
 8003744:	ddc2      	ble.n	80036cc <LTC681x_set_cfgr_dis+0x14>
	}
	for (int i =0; i<4; i++)
 8003746:	2300      	movs	r3, #0
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	e03a      	b.n	80037c2 <LTC681x_set_cfgr_dis+0x10a>
	{
		if (dcc[i+8])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<i);
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	3308      	adds	r3, #8
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	4413      	add	r3, r2
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d017      	beq.n	800378a <LTC681x_set_cfgr_dis+0xd2>
 800375a:	7bfb      	ldrb	r3, [r7, #15]
 800375c:	22e8      	movs	r2, #232	; 0xe8
 800375e:	fb02 f303 	mul.w	r3, r2, r3
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	4413      	add	r3, r2
 8003766:	795b      	ldrb	r3, [r3, #5]
 8003768:	b25a      	sxtb	r2, r3
 800376a:	2101      	movs	r1, #1
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	fa01 f303 	lsl.w	r3, r1, r3
 8003772:	b25b      	sxtb	r3, r3
 8003774:	4313      	orrs	r3, r2
 8003776:	b259      	sxtb	r1, r3
 8003778:	7bfb      	ldrb	r3, [r7, #15]
 800377a:	22e8      	movs	r2, #232	; 0xe8
 800377c:	fb02 f303 	mul.w	r3, r2, r3
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	4413      	add	r3, r2
 8003784:	b2ca      	uxtb	r2, r1
 8003786:	715a      	strb	r2, [r3, #5]
 8003788:	e018      	b.n	80037bc <LTC681x_set_cfgr_dis+0x104>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<i));
 800378a:	7bfb      	ldrb	r3, [r7, #15]
 800378c:	22e8      	movs	r2, #232	; 0xe8
 800378e:	fb02 f303 	mul.w	r3, r2, r3
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	4413      	add	r3, r2
 8003796:	795b      	ldrb	r3, [r3, #5]
 8003798:	b25a      	sxtb	r2, r3
 800379a:	2101      	movs	r1, #1
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	fa01 f303 	lsl.w	r3, r1, r3
 80037a2:	b25b      	sxtb	r3, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	b25b      	sxtb	r3, r3
 80037a8:	4013      	ands	r3, r2
 80037aa:	b259      	sxtb	r1, r3
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	22e8      	movs	r2, #232	; 0xe8
 80037b0:	fb02 f303 	mul.w	r3, r2, r3
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	4413      	add	r3, r2
 80037b8:	b2ca      	uxtb	r2, r1
 80037ba:	715a      	strb	r2, [r3, #5]
	for (int i =0; i<4; i++)
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	3301      	adds	r3, #1
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	2b03      	cmp	r3, #3
 80037c6:	ddc1      	ble.n	800374c <LTC681x_set_cfgr_dis+0x94>
	}
}
 80037c8:	bf00      	nop
 80037ca:	bf00      	nop
 80037cc:	371c      	adds	r7, #28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <LTC681x_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic,bool dcto[4])
{
 80037d6:	b480      	push	{r7}
 80037d8:	b087      	sub	sp, #28
 80037da:	af00      	add	r7, sp, #0
 80037dc:	4603      	mov	r3, r0
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
 80037e2:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<4;i++)
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	e03b      	b.n	8003862 <LTC681x_set_cfgr_dcto+0x8c>
	{
		if(dcto[i])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<(i+4));
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	4413      	add	r3, r2
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d018      	beq.n	8003828 <LTC681x_set_cfgr_dcto+0x52>
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
 80037f8:	22e8      	movs	r2, #232	; 0xe8
 80037fa:	fb02 f303 	mul.w	r3, r2, r3
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	4413      	add	r3, r2
 8003802:	795b      	ldrb	r3, [r3, #5]
 8003804:	b25a      	sxtb	r2, r3
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	3304      	adds	r3, #4
 800380a:	2101      	movs	r1, #1
 800380c:	fa01 f303 	lsl.w	r3, r1, r3
 8003810:	b25b      	sxtb	r3, r3
 8003812:	4313      	orrs	r3, r2
 8003814:	b259      	sxtb	r1, r3
 8003816:	7bfb      	ldrb	r3, [r7, #15]
 8003818:	22e8      	movs	r2, #232	; 0xe8
 800381a:	fb02 f303 	mul.w	r3, r2, r3
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	4413      	add	r3, r2
 8003822:	b2ca      	uxtb	r2, r1
 8003824:	715a      	strb	r2, [r3, #5]
 8003826:	e019      	b.n	800385c <LTC681x_set_cfgr_dcto+0x86>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<(i+4)));
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	22e8      	movs	r2, #232	; 0xe8
 800382c:	fb02 f303 	mul.w	r3, r2, r3
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	4413      	add	r3, r2
 8003834:	795b      	ldrb	r3, [r3, #5]
 8003836:	b25a      	sxtb	r2, r3
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	3304      	adds	r3, #4
 800383c:	2101      	movs	r1, #1
 800383e:	fa01 f303 	lsl.w	r3, r1, r3
 8003842:	b25b      	sxtb	r3, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	b25b      	sxtb	r3, r3
 8003848:	4013      	ands	r3, r2
 800384a:	b259      	sxtb	r1, r3
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	22e8      	movs	r2, #232	; 0xe8
 8003850:	fb02 f303 	mul.w	r3, r2, r3
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	4413      	add	r3, r2
 8003858:	b2ca      	uxtb	r2, r1
 800385a:	715a      	strb	r2, [r3, #5]
	for(int i =0;i<4;i++)
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	3301      	adds	r3, #1
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2b03      	cmp	r3, #3
 8003866:	ddc0      	ble.n	80037ea <LTC681x_set_cfgr_dcto+0x14>
	}
}
 8003868:	bf00      	nop
 800386a:	bf00      	nop
 800386c:	371c      	adds	r7, #28
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <LTC681x_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic *ic,uint16_t uv)
{
 8003876:	b480      	push	{r7}
 8003878:	b085      	sub	sp, #20
 800387a:	af00      	add	r7, sp, #0
 800387c:	4603      	mov	r3, r0
 800387e:	6039      	str	r1, [r7, #0]
 8003880:	71fb      	strb	r3, [r7, #7]
 8003882:	4613      	mov	r3, r2
 8003884:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (uv/16)-1;
 8003886:	88bb      	ldrh	r3, [r7, #4]
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	b29b      	uxth	r3, r3
 800388c:	3b01      	subs	r3, #1
 800388e:	81fb      	strh	r3, [r7, #14]
	ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	22e8      	movs	r2, #232	; 0xe8
 8003894:	fb02 f303 	mul.w	r3, r2, r3
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	4413      	add	r3, r2
 800389c:	89fa      	ldrh	r2, [r7, #14]
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	705a      	strb	r2, [r3, #1]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0xF0;
 80038a2:	79fb      	ldrb	r3, [r7, #7]
 80038a4:	22e8      	movs	r2, #232	; 0xe8
 80038a6:	fb02 f303 	mul.w	r3, r2, r3
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	4413      	add	r3, r2
 80038ae:	789a      	ldrb	r2, [r3, #2]
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	21e8      	movs	r1, #232	; 0xe8
 80038b4:	fb01 f303 	mul.w	r3, r1, r3
 80038b8:	6839      	ldr	r1, [r7, #0]
 80038ba:	440b      	add	r3, r1
 80038bc:	f022 020f 	bic.w	r2, r2, #15
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x0F00 & tmp)>>8);
 80038c4:	79fb      	ldrb	r3, [r7, #7]
 80038c6:	22e8      	movs	r2, #232	; 0xe8
 80038c8:	fb02 f303 	mul.w	r3, r2, r3
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	4413      	add	r3, r2
 80038d0:	789b      	ldrb	r3, [r3, #2]
 80038d2:	b25a      	sxtb	r2, r3
 80038d4:	89fb      	ldrh	r3, [r7, #14]
 80038d6:	0a1b      	lsrs	r3, r3, #8
 80038d8:	b29b      	uxth	r3, r3
 80038da:	b25b      	sxtb	r3, r3
 80038dc:	f003 030f 	and.w	r3, r3, #15
 80038e0:	b25b      	sxtb	r3, r3
 80038e2:	4313      	orrs	r3, r2
 80038e4:	b259      	sxtb	r1, r3
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	22e8      	movs	r2, #232	; 0xe8
 80038ea:	fb02 f303 	mul.w	r3, r2, r3
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	4413      	add	r3, r2
 80038f2:	b2ca      	uxtb	r2, r1
 80038f4:	709a      	strb	r2, [r3, #2]
}
 80038f6:	bf00      	nop
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <LTC681x_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void LTC681x_set_cfgr_ov(uint8_t nIC, cell_asic *ic,uint16_t ov)
{
 8003902:	b480      	push	{r7}
 8003904:	b085      	sub	sp, #20
 8003906:	af00      	add	r7, sp, #0
 8003908:	4603      	mov	r3, r0
 800390a:	6039      	str	r1, [r7, #0]
 800390c:	71fb      	strb	r3, [r7, #7]
 800390e:	4613      	mov	r3, r2
 8003910:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (ov/16);
 8003912:	88bb      	ldrh	r3, [r7, #4]
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	81fb      	strh	r3, [r7, #14]
	ic[nIC].config.tx_data[3] = 0x00FF & (tmp>>4);
 8003918:	89fb      	ldrh	r3, [r7, #14]
 800391a:	091b      	lsrs	r3, r3, #4
 800391c:	b299      	uxth	r1, r3
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	22e8      	movs	r2, #232	; 0xe8
 8003922:	fb02 f303 	mul.w	r3, r2, r3
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	4413      	add	r3, r2
 800392a:	b2ca      	uxtb	r2, r1
 800392c:	70da      	strb	r2, [r3, #3]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0x0F;
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	22e8      	movs	r2, #232	; 0xe8
 8003932:	fb02 f303 	mul.w	r3, r2, r3
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	4413      	add	r3, r2
 800393a:	789a      	ldrb	r2, [r3, #2]
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	21e8      	movs	r1, #232	; 0xe8
 8003940:	fb01 f303 	mul.w	r3, r1, r3
 8003944:	6839      	ldr	r1, [r7, #0]
 8003946:	440b      	add	r3, r1
 8003948:	f002 020f 	and.w	r2, r2, #15
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x000F & tmp)<<4);
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	22e8      	movs	r2, #232	; 0xe8
 8003954:	fb02 f303 	mul.w	r3, r2, r3
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	4413      	add	r3, r2
 800395c:	789b      	ldrb	r3, [r3, #2]
 800395e:	b25a      	sxtb	r2, r3
 8003960:	89fb      	ldrh	r3, [r7, #14]
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	b25b      	sxtb	r3, r3
 8003966:	4313      	orrs	r3, r2
 8003968:	b259      	sxtb	r1, r3
 800396a:	79fb      	ldrb	r3, [r7, #7]
 800396c:	22e8      	movs	r2, #232	; 0xe8
 800396e:	fb02 f303 	mul.w	r3, r2, r3
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	4413      	add	r3, r2
 8003976:	b2ca      	uxtb	r2, r1
 8003978:	709a      	strb	r2, [r3, #2]
}
 800397a:	bf00      	nop
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
	...

08003988 <cs_low>:
#include "stm32f4xx_hal.h"

extern SPI_HandleTypeDef hspi1;

void cs_low(uint8_t pin)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8003992:	2200      	movs	r2, #0
 8003994:	2140      	movs	r1, #64	; 0x40
 8003996:	4803      	ldr	r0, [pc, #12]	; (80039a4 <cs_low+0x1c>)
 8003998:	f001 fdf0 	bl	800557c <HAL_GPIO_WritePin>
}
 800399c:	bf00      	nop
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40020400 	.word	0x40020400

080039a8 <cs_high>:

void cs_high(uint8_t pin)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80039b2:	2201      	movs	r2, #1
 80039b4:	2140      	movs	r1, #64	; 0x40
 80039b6:	4803      	ldr	r0, [pc, #12]	; (80039c4 <cs_high+0x1c>)
 80039b8:	f001 fde0 	bl	800557c <HAL_GPIO_WritePin>
}
 80039bc:	bf00      	nop
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40020400 	.word	0x40020400

080039c8 <delay_u>:

void delay_u(uint16_t micro)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	80fb      	strh	r3, [r7, #6]
  HAL_Delay(1);
 80039d2:	2001      	movs	r0, #1
 80039d4:	f000 fd80 	bl	80044d8 <HAL_Delay>
}
 80039d8:	bf00      	nop
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <spi_write_array>:
Writes an array of bytes out of the SPI port
*/
void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
                     uint8_t data[] //Array of bytes to be written on the SPI port
                    )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	4603      	mov	r3, r0
 80039e8:	6039      	str	r1, [r7, #0]
 80039ea:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi1, data, len, 100);
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	2364      	movs	r3, #100	; 0x64
 80039f2:	6839      	ldr	r1, [r7, #0]
 80039f4:	4803      	ldr	r0, [pc, #12]	; (8003a04 <spi_write_array+0x24>)
 80039f6:	f002 fc4c 	bl	8006292 <HAL_SPI_Transmit>
}
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	200028d4 	.word	0x200028d4

08003a08 <spi_write_read>:
void spi_write_read(uint8_t tx_Data[],//array of data to be written on SPI port
                    uint8_t tx_len, //length of the tx data arry
                    uint8_t *rx_data,//Input: array that will store the data read by the SPI port
                    uint8_t rx_len //Option: number of bytes to be read from the SPI port
                   )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	607a      	str	r2, [r7, #4]
 8003a12:	461a      	mov	r2, r3
 8003a14:	460b      	mov	r3, r1
 8003a16:	72fb      	strb	r3, [r7, #11]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	72bb      	strb	r3, [r7, #10]
  for (uint8_t i = 0; i < tx_len; i++)
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	75fb      	strb	r3, [r7, #23]
 8003a20:	e00a      	b.n	8003a38 <spi_write_read+0x30>
  {
    HAL_SPI_Transmit(&hspi1, &tx_Data[i], 1, 100);
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	18d1      	adds	r1, r2, r3
 8003a28:	2364      	movs	r3, #100	; 0x64
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	4810      	ldr	r0, [pc, #64]	; (8003a70 <spi_write_read+0x68>)
 8003a2e:	f002 fc30 	bl	8006292 <HAL_SPI_Transmit>
  for (uint8_t i = 0; i < tx_len; i++)
 8003a32:	7dfb      	ldrb	r3, [r7, #23]
 8003a34:	3301      	adds	r3, #1
 8003a36:	75fb      	strb	r3, [r7, #23]
 8003a38:	7dfa      	ldrb	r2, [r7, #23]
 8003a3a:	7afb      	ldrb	r3, [r7, #11]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d3f0      	bcc.n	8003a22 <spi_write_read+0x1a>
  }

  for (uint8_t i = 0; i < rx_len; i++)
 8003a40:	2300      	movs	r3, #0
 8003a42:	75bb      	strb	r3, [r7, #22]
 8003a44:	e00a      	b.n	8003a5c <spi_write_read+0x54>
  {
	HAL_SPI_Receive(&hspi1, &rx_data[i], 1, 100);
 8003a46:	7dbb      	ldrb	r3, [r7, #22]
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	18d1      	adds	r1, r2, r3
 8003a4c:	2364      	movs	r3, #100	; 0x64
 8003a4e:	2201      	movs	r2, #1
 8003a50:	4807      	ldr	r0, [pc, #28]	; (8003a70 <spi_write_read+0x68>)
 8003a52:	f002 fd5a 	bl	800650a <HAL_SPI_Receive>
  for (uint8_t i = 0; i < rx_len; i++)
 8003a56:	7dbb      	ldrb	r3, [r7, #22]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	75bb      	strb	r3, [r7, #22]
 8003a5c:	7dba      	ldrb	r2, [r7, #22]
 8003a5e:	7abb      	ldrb	r3, [r7, #10]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d3f0      	bcc.n	8003a46 <spi_write_read+0x3e>
  }

}
 8003a64:	bf00      	nop
 8003a66:	bf00      	nop
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	200028d4 	.word	0x200028d4

08003a74 <spi_read_byte>:


uint8_t spi_read_byte(uint8_t tx_dat)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	71fb      	strb	r3, [r7, #7]
  uint8_t data;
  HAL_SPI_Receive(&hspi1, &data, 1, 100);
 8003a7e:	f107 010f 	add.w	r1, r7, #15
 8003a82:	2364      	movs	r3, #100	; 0x64
 8003a84:	2201      	movs	r2, #1
 8003a86:	4804      	ldr	r0, [pc, #16]	; (8003a98 <spi_read_byte+0x24>)
 8003a88:	f002 fd3f 	bl	800650a <HAL_SPI_Receive>
  return(data);
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	200028d4 	.word	0x200028d4

08003a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003aa0:	f000 fca8 	bl	80043f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003aa4:	f000 f832 	bl	8003b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003aa8:	f000 f96a 	bl	8003d80 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003aac:	f000 f93e 	bl	8003d2c <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8003ab0:	f000 f89a 	bl	8003be8 <MX_CAN1_Init>
  MX_SPI1_Init();
 8003ab4:	f000 f904 	bl	8003cc0 <MX_SPI1_Init>
  MX_CAN2_Init();
 8003ab8:	f000 f8cc 	bl	8003c54 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */

  FEB_BMS_State_Validate();
 8003abc:	f7fd faca 	bl	8001054 <FEB_BMS_State_Validate>
  FEB_LTC6811_Setup();
 8003ac0:	f7fd fd44 	bl	800154c <FEB_LTC6811_Setup>
  FEB_BMS_Shutdown_Startup();
 8003ac4:	f7fd fa9a 	bl	8000ffc <FEB_BMS_Shutdown_Startup>
  FEB_BMS_Precharge_Open();
 8003ac8:	f7fd fa80 	bl	8000fcc <FEB_BMS_Precharge_Open>
  FEB_CAN_Init();
 8003acc:	f7fd faca 	bl	8001064 <FEB_CAN_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// *********************** Reset State ***********************
	FEB_LTC6811_Clear_Voltage();
 8003ad0:	f7fe f8ea 	bl	8001ca8 <FEB_LTC6811_Clear_Voltage>
	FEB_LTC6811_Clear_Temperature();
 8003ad4:	f7fe fc8e 	bl	80023f4 <FEB_LTC6811_Clear_Temperature>

	// *********************** Cell Voltage ***********************
	FEB_LTC6811_Poll_Voltage();
 8003ad8:	f7fd fda6 	bl	8001628 <FEB_LTC6811_Poll_Voltage>
  	FEB_LTC6811_Validate_Voltage();
 8003adc:	f7fd fff2 	bl	8001ac4 <FEB_LTC6811_Validate_Voltage>
	FEB_LTC6811_UART_Transmit_Voltage();
 8003ae0:	f7fe f82e 	bl	8001b40 <FEB_LTC6811_UART_Transmit_Voltage>

	// *********************** Cell Temperature ***********************
	FEB_LTC6811_Poll_Temperature();
 8003ae4:	f7fe f90c 	bl	8001d00 <FEB_LTC6811_Poll_Temperature>
  	FEB_LTC6811_Validate_Temperature();
 8003ae8:	f7fe fbc4 	bl	8002274 <FEB_LTC6811_Validate_Temperature>
	FEB_LTC6811_UART_Transmit_Temperature();
 8003aec:	f7fe fc06 	bl	80022fc <FEB_LTC6811_UART_Transmit_Temperature>

	// *********************** IVT ***********************
	FEB_CAN_IVT_Process();
 8003af0:	f7fd fc92 	bl	8001418 <FEB_CAN_IVT_Process>

	// *********************** Cell Balance ***********************
	FEB_LTC6811_Balance_Cells();
 8003af4:	f7fd ffb2 	bl	8001a5c <FEB_LTC6811_Balance_Cells>

	// *********************** Charger ***********************
	FEB_CAN_Charger_Process(&hcan1);
 8003af8:	4803      	ldr	r0, [pc, #12]	; (8003b08 <main+0x6c>)
 8003afa:	f7fd fbb0 	bl	800125e <FEB_CAN_Charger_Process>


	if (FEB_CAN_CHARGER_START_CHARGE == 1) {
		HAL_Delay(1000);	// 1Hz
	} else {
		HAL_Delay(200);		// 5Hz
 8003afe:	20c8      	movs	r0, #200	; 0xc8
 8003b00:	f000 fcea 	bl	80044d8 <HAL_Delay>
	FEB_LTC6811_Clear_Voltage();
 8003b04:	e7e4      	b.n	8003ad0 <main+0x34>
 8003b06:	bf00      	nop
 8003b08:	20002884 	.word	0x20002884

08003b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b094      	sub	sp, #80	; 0x50
 8003b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b12:	f107 031c 	add.w	r3, r7, #28
 8003b16:	2234      	movs	r2, #52	; 0x34
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f003 fcd4 	bl	80074c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b20:	f107 0308 	add.w	r3, r7, #8
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	60da      	str	r2, [r3, #12]
 8003b2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b30:	2300      	movs	r3, #0
 8003b32:	607b      	str	r3, [r7, #4]
 8003b34:	4b2a      	ldr	r3, [pc, #168]	; (8003be0 <SystemClock_Config+0xd4>)
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	4a29      	ldr	r2, [pc, #164]	; (8003be0 <SystemClock_Config+0xd4>)
 8003b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b3e:	6413      	str	r3, [r2, #64]	; 0x40
 8003b40:	4b27      	ldr	r3, [pc, #156]	; (8003be0 <SystemClock_Config+0xd4>)
 8003b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b48:	607b      	str	r3, [r7, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	603b      	str	r3, [r7, #0]
 8003b50:	4b24      	ldr	r3, [pc, #144]	; (8003be4 <SystemClock_Config+0xd8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003b58:	4a22      	ldr	r2, [pc, #136]	; (8003be4 <SystemClock_Config+0xd8>)
 8003b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	4b20      	ldr	r3, [pc, #128]	; (8003be4 <SystemClock_Config+0xd8>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b68:	603b      	str	r3, [r7, #0]
 8003b6a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b70:	2301      	movs	r3, #1
 8003b72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b74:	2310      	movs	r3, #16
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003b80:	2308      	movs	r3, #8
 8003b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 8003b84:	2380      	movs	r3, #128	; 0x80
 8003b86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003b90:	2302      	movs	r3, #2
 8003b92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b94:	f107 031c 	add.w	r3, r7, #28
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f002 f853 	bl	8005c44 <HAL_RCC_OscConfig>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003ba4:	f000 f952 	bl	8003e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ba8:	230f      	movs	r3, #15
 8003baa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bac:	2302      	movs	r3, #2
 8003bae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003bb4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003bb8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bbe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003bc0:	f107 0308 	add.w	r3, r7, #8
 8003bc4:	2104      	movs	r1, #4
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f001 fcf2 	bl	80055b0 <HAL_RCC_ClockConfig>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8003bd2:	f000 f93b 	bl	8003e4c <Error_Handler>
  }
}
 8003bd6:	bf00      	nop
 8003bd8:	3750      	adds	r7, #80	; 0x50
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40023800 	.word	0x40023800
 8003be4:	40007000 	.word	0x40007000

08003be8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003bec:	4b17      	ldr	r3, [pc, #92]	; (8003c4c <MX_CAN1_Init+0x64>)
 8003bee:	4a18      	ldr	r2, [pc, #96]	; (8003c50 <MX_CAN1_Init+0x68>)
 8003bf0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8003bf2:	4b16      	ldr	r3, [pc, #88]	; (8003c4c <MX_CAN1_Init+0x64>)
 8003bf4:	2210      	movs	r2, #16
 8003bf6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003bf8:	4b14      	ldr	r3, [pc, #80]	; (8003c4c <MX_CAN1_Init+0x64>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003bfe:	4b13      	ldr	r3, [pc, #76]	; (8003c4c <MX_CAN1_Init+0x64>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8003c04:	4b11      	ldr	r3, [pc, #68]	; (8003c4c <MX_CAN1_Init+0x64>)
 8003c06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c0a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003c0c:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <MX_CAN1_Init+0x64>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003c12:	4b0e      	ldr	r3, [pc, #56]	; (8003c4c <MX_CAN1_Init+0x64>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003c18:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <MX_CAN1_Init+0x64>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003c1e:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <MX_CAN1_Init+0x64>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003c24:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <MX_CAN1_Init+0x64>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003c2a:	4b08      	ldr	r3, [pc, #32]	; (8003c4c <MX_CAN1_Init+0x64>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003c30:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <MX_CAN1_Init+0x64>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003c36:	4805      	ldr	r0, [pc, #20]	; (8003c4c <MX_CAN1_Init+0x64>)
 8003c38:	f000 fc72 	bl	8004520 <HAL_CAN_Init>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8003c42:	f000 f903 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003c46:	bf00      	nop
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20002884 	.word	0x20002884
 8003c50:	40006400 	.word	0x40006400

08003c54 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8003c58:	4b17      	ldr	r3, [pc, #92]	; (8003cb8 <MX_CAN2_Init+0x64>)
 8003c5a:	4a18      	ldr	r2, [pc, #96]	; (8003cbc <MX_CAN2_Init+0x68>)
 8003c5c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8003c5e:	4b16      	ldr	r3, [pc, #88]	; (8003cb8 <MX_CAN2_Init+0x64>)
 8003c60:	2210      	movs	r2, #16
 8003c62:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8003c64:	4b14      	ldr	r3, [pc, #80]	; (8003cb8 <MX_CAN2_Init+0x64>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003c6a:	4b13      	ldr	r3, [pc, #76]	; (8003cb8 <MX_CAN2_Init+0x64>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8003c70:	4b11      	ldr	r3, [pc, #68]	; (8003cb8 <MX_CAN2_Init+0x64>)
 8003c72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c76:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003c78:	4b0f      	ldr	r3, [pc, #60]	; (8003cb8 <MX_CAN2_Init+0x64>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8003c7e:	4b0e      	ldr	r3, [pc, #56]	; (8003cb8 <MX_CAN2_Init+0x64>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8003c84:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <MX_CAN2_Init+0x64>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8003c8a:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <MX_CAN2_Init+0x64>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8003c90:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <MX_CAN2_Init+0x64>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8003c96:	4b08      	ldr	r3, [pc, #32]	; (8003cb8 <MX_CAN2_Init+0x64>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8003c9c:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <MX_CAN2_Init+0x64>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8003ca2:	4805      	ldr	r0, [pc, #20]	; (8003cb8 <MX_CAN2_Init+0x64>)
 8003ca4:	f000 fc3c 	bl	8004520 <HAL_CAN_Init>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8003cae:	f000 f8cd 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8003cb2:	bf00      	nop
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	200028ac 	.word	0x200028ac
 8003cbc:	40006800 	.word	0x40006800

08003cc0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003cc4:	4b17      	ldr	r3, [pc, #92]	; (8003d24 <MX_SPI1_Init+0x64>)
 8003cc6:	4a18      	ldr	r2, [pc, #96]	; (8003d28 <MX_SPI1_Init+0x68>)
 8003cc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003cca:	4b16      	ldr	r3, [pc, #88]	; (8003d24 <MX_SPI1_Init+0x64>)
 8003ccc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003cd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003cd2:	4b14      	ldr	r3, [pc, #80]	; (8003d24 <MX_SPI1_Init+0x64>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cd8:	4b12      	ldr	r3, [pc, #72]	; (8003d24 <MX_SPI1_Init+0x64>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cde:	4b11      	ldr	r3, [pc, #68]	; (8003d24 <MX_SPI1_Init+0x64>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ce4:	4b0f      	ldr	r3, [pc, #60]	; (8003d24 <MX_SPI1_Init+0x64>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003cea:	4b0e      	ldr	r3, [pc, #56]	; (8003d24 <MX_SPI1_Init+0x64>)
 8003cec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cf0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003cf2:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <MX_SPI1_Init+0x64>)
 8003cf4:	2228      	movs	r2, #40	; 0x28
 8003cf6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003cf8:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <MX_SPI1_Init+0x64>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003cfe:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <MX_SPI1_Init+0x64>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d04:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <MX_SPI1_Init+0x64>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003d0a:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <MX_SPI1_Init+0x64>)
 8003d0c:	220a      	movs	r2, #10
 8003d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d10:	4804      	ldr	r0, [pc, #16]	; (8003d24 <MX_SPI1_Init+0x64>)
 8003d12:	f002 fa35 	bl	8006180 <HAL_SPI_Init>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003d1c:	f000 f896 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003d20:	bf00      	nop
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	200028d4 	.word	0x200028d4
 8003d28:	40013000 	.word	0x40013000

08003d2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003d30:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <MX_USART2_UART_Init+0x4c>)
 8003d32:	4a12      	ldr	r2, [pc, #72]	; (8003d7c <MX_USART2_UART_Init+0x50>)
 8003d34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003d36:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <MX_USART2_UART_Init+0x4c>)
 8003d38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d3e:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <MX_USART2_UART_Init+0x4c>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d44:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <MX_USART2_UART_Init+0x4c>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003d4a:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <MX_USART2_UART_Init+0x4c>)
 8003d4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d50:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8003d52:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <MX_USART2_UART_Init+0x4c>)
 8003d54:	2208      	movs	r2, #8
 8003d56:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d58:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <MX_USART2_UART_Init+0x4c>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d5e:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <MX_USART2_UART_Init+0x4c>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d64:	4804      	ldr	r0, [pc, #16]	; (8003d78 <MX_USART2_UART_Init+0x4c>)
 8003d66:	f002 ffb3 	bl	8006cd0 <HAL_UART_Init>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8003d70:	f000 f86c 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d74:	bf00      	nop
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	2000292c 	.word	0x2000292c
 8003d7c:	40004400 	.word	0x40004400

08003d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d86:	f107 030c 	add.w	r3, r7, #12
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	605a      	str	r2, [r3, #4]
 8003d90:	609a      	str	r2, [r3, #8]
 8003d92:	60da      	str	r2, [r3, #12]
 8003d94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	4b29      	ldr	r3, [pc, #164]	; (8003e40 <MX_GPIO_Init+0xc0>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	4a28      	ldr	r2, [pc, #160]	; (8003e40 <MX_GPIO_Init+0xc0>)
 8003da0:	f043 0304 	orr.w	r3, r3, #4
 8003da4:	6313      	str	r3, [r2, #48]	; 0x30
 8003da6:	4b26      	ldr	r3, [pc, #152]	; (8003e40 <MX_GPIO_Init+0xc0>)
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	607b      	str	r3, [r7, #4]
 8003db6:	4b22      	ldr	r3, [pc, #136]	; (8003e40 <MX_GPIO_Init+0xc0>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	4a21      	ldr	r2, [pc, #132]	; (8003e40 <MX_GPIO_Init+0xc0>)
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003dc2:	4b1f      	ldr	r3, [pc, #124]	; (8003e40 <MX_GPIO_Init+0xc0>)
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	607b      	str	r3, [r7, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dce:	2300      	movs	r3, #0
 8003dd0:	603b      	str	r3, [r7, #0]
 8003dd2:	4b1b      	ldr	r3, [pc, #108]	; (8003e40 <MX_GPIO_Init+0xc0>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	4a1a      	ldr	r2, [pc, #104]	; (8003e40 <MX_GPIO_Init+0xc0>)
 8003dd8:	f043 0302 	orr.w	r3, r3, #2
 8003ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dde:	4b18      	ldr	r3, [pc, #96]	; (8003e40 <MX_GPIO_Init+0xc0>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	603b      	str	r3, [r7, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8003dea:	2200      	movs	r2, #0
 8003dec:	2106      	movs	r1, #6
 8003dee:	4815      	ldr	r0, [pc, #84]	; (8003e44 <MX_GPIO_Init+0xc4>)
 8003df0:	f001 fbc4 	bl	800557c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8003df4:	2200      	movs	r2, #0
 8003df6:	2140      	movs	r1, #64	; 0x40
 8003df8:	4813      	ldr	r0, [pc, #76]	; (8003e48 <MX_GPIO_Init+0xc8>)
 8003dfa:	f001 fbbf 	bl	800557c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8003dfe:	2306      	movs	r3, #6
 8003e00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e02:	2301      	movs	r3, #1
 8003e04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e0e:	f107 030c 	add.w	r3, r7, #12
 8003e12:	4619      	mov	r1, r3
 8003e14:	480b      	ldr	r0, [pc, #44]	; (8003e44 <MX_GPIO_Init+0xc4>)
 8003e16:	f001 fa1d 	bl	8005254 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003e1a:	2340      	movs	r3, #64	; 0x40
 8003e1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e2a:	f107 030c 	add.w	r3, r7, #12
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4805      	ldr	r0, [pc, #20]	; (8003e48 <MX_GPIO_Init+0xc8>)
 8003e32:	f001 fa0f 	bl	8005254 <HAL_GPIO_Init>

}
 8003e36:	bf00      	nop
 8003e38:	3720      	adds	r7, #32
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40023800 	.word	0x40023800
 8003e44:	40020800 	.word	0x40020800
 8003e48:	40020400 	.word	0x40020400

08003e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e50:	b672      	cpsid	i
}
 8003e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e54:	e7fe      	b.n	8003e54 <Error_Handler+0x8>
	...

08003e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	607b      	str	r3, [r7, #4]
 8003e62:	4b10      	ldr	r3, [pc, #64]	; (8003ea4 <HAL_MspInit+0x4c>)
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	4a0f      	ldr	r2, [pc, #60]	; (8003ea4 <HAL_MspInit+0x4c>)
 8003e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ea4 <HAL_MspInit+0x4c>)
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e76:	607b      	str	r3, [r7, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	603b      	str	r3, [r7, #0]
 8003e7e:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <HAL_MspInit+0x4c>)
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	4a08      	ldr	r2, [pc, #32]	; (8003ea4 <HAL_MspInit+0x4c>)
 8003e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e88:	6413      	str	r3, [r2, #64]	; 0x40
 8003e8a:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <HAL_MspInit+0x4c>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003e96:	2007      	movs	r0, #7
 8003e98:	f001 f99a 	bl	80051d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e9c:	bf00      	nop
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40023800 	.word	0x40023800

08003ea8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08c      	sub	sp, #48	; 0x30
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb0:	f107 031c 	add.w	r3, r7, #28
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	605a      	str	r2, [r3, #4]
 8003eba:	609a      	str	r2, [r3, #8]
 8003ebc:	60da      	str	r2, [r3, #12]
 8003ebe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a53      	ldr	r2, [pc, #332]	; (8004014 <HAL_CAN_MspInit+0x16c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d146      	bne.n	8003f58 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003eca:	4b53      	ldr	r3, [pc, #332]	; (8004018 <HAL_CAN_MspInit+0x170>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	4a51      	ldr	r2, [pc, #324]	; (8004018 <HAL_CAN_MspInit+0x170>)
 8003ed2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003ed4:	4b50      	ldr	r3, [pc, #320]	; (8004018 <HAL_CAN_MspInit+0x170>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d10d      	bne.n	8003ef8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003edc:	2300      	movs	r3, #0
 8003ede:	61bb      	str	r3, [r7, #24]
 8003ee0:	4b4e      	ldr	r3, [pc, #312]	; (800401c <HAL_CAN_MspInit+0x174>)
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	4a4d      	ldr	r2, [pc, #308]	; (800401c <HAL_CAN_MspInit+0x174>)
 8003ee6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003eea:	6413      	str	r3, [r2, #64]	; 0x40
 8003eec:	4b4b      	ldr	r3, [pc, #300]	; (800401c <HAL_CAN_MspInit+0x174>)
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef4:	61bb      	str	r3, [r7, #24]
 8003ef6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ef8:	2300      	movs	r3, #0
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	4b47      	ldr	r3, [pc, #284]	; (800401c <HAL_CAN_MspInit+0x174>)
 8003efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f00:	4a46      	ldr	r2, [pc, #280]	; (800401c <HAL_CAN_MspInit+0x174>)
 8003f02:	f043 0301 	orr.w	r3, r3, #1
 8003f06:	6313      	str	r3, [r2, #48]	; 0x30
 8003f08:	4b44      	ldr	r3, [pc, #272]	; (800401c <HAL_CAN_MspInit+0x174>)
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003f14:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f22:	2303      	movs	r3, #3
 8003f24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003f26:	2309      	movs	r3, #9
 8003f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f2a:	f107 031c 	add.w	r3, r7, #28
 8003f2e:	4619      	mov	r1, r3
 8003f30:	483b      	ldr	r0, [pc, #236]	; (8004020 <HAL_CAN_MspInit+0x178>)
 8003f32:	f001 f98f 	bl	8005254 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003f36:	2200      	movs	r2, #0
 8003f38:	2100      	movs	r1, #0
 8003f3a:	2014      	movs	r0, #20
 8003f3c:	f001 f953 	bl	80051e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003f40:	2014      	movs	r0, #20
 8003f42:	f001 f96c 	bl	800521e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8003f46:	2200      	movs	r2, #0
 8003f48:	2100      	movs	r1, #0
 8003f4a:	2015      	movs	r0, #21
 8003f4c:	f001 f94b 	bl	80051e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003f50:	2015      	movs	r0, #21
 8003f52:	f001 f964 	bl	800521e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003f56:	e058      	b.n	800400a <HAL_CAN_MspInit+0x162>
  else if(hcan->Instance==CAN2)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a31      	ldr	r2, [pc, #196]	; (8004024 <HAL_CAN_MspInit+0x17c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d153      	bne.n	800400a <HAL_CAN_MspInit+0x162>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003f62:	2300      	movs	r3, #0
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	4b2d      	ldr	r3, [pc, #180]	; (800401c <HAL_CAN_MspInit+0x174>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	4a2c      	ldr	r2, [pc, #176]	; (800401c <HAL_CAN_MspInit+0x174>)
 8003f6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f70:	6413      	str	r3, [r2, #64]	; 0x40
 8003f72:	4b2a      	ldr	r3, [pc, #168]	; (800401c <HAL_CAN_MspInit+0x174>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f7a:	613b      	str	r3, [r7, #16]
 8003f7c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003f7e:	4b26      	ldr	r3, [pc, #152]	; (8004018 <HAL_CAN_MspInit+0x170>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3301      	adds	r3, #1
 8003f84:	4a24      	ldr	r2, [pc, #144]	; (8004018 <HAL_CAN_MspInit+0x170>)
 8003f86:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003f88:	4b23      	ldr	r3, [pc, #140]	; (8004018 <HAL_CAN_MspInit+0x170>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d10d      	bne.n	8003fac <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003f90:	2300      	movs	r3, #0
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	4b21      	ldr	r3, [pc, #132]	; (800401c <HAL_CAN_MspInit+0x174>)
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	4a20      	ldr	r2, [pc, #128]	; (800401c <HAL_CAN_MspInit+0x174>)
 8003f9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8003fa0:	4b1e      	ldr	r3, [pc, #120]	; (800401c <HAL_CAN_MspInit+0x174>)
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fac:	2300      	movs	r3, #0
 8003fae:	60bb      	str	r3, [r7, #8]
 8003fb0:	4b1a      	ldr	r3, [pc, #104]	; (800401c <HAL_CAN_MspInit+0x174>)
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	4a19      	ldr	r2, [pc, #100]	; (800401c <HAL_CAN_MspInit+0x174>)
 8003fb6:	f043 0302 	orr.w	r3, r3, #2
 8003fba:	6313      	str	r3, [r2, #48]	; 0x30
 8003fbc:	4b17      	ldr	r3, [pc, #92]	; (800401c <HAL_CAN_MspInit+0x174>)
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	60bb      	str	r3, [r7, #8]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003fc8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003fda:	2309      	movs	r3, #9
 8003fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fde:	f107 031c 	add.w	r3, r7, #28
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4810      	ldr	r0, [pc, #64]	; (8004028 <HAL_CAN_MspInit+0x180>)
 8003fe6:	f001 f935 	bl	8005254 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8003fea:	2200      	movs	r2, #0
 8003fec:	2100      	movs	r1, #0
 8003fee:	2040      	movs	r0, #64	; 0x40
 8003ff0:	f001 f8f9 	bl	80051e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003ff4:	2040      	movs	r0, #64	; 0x40
 8003ff6:	f001 f912 	bl	800521e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	2041      	movs	r0, #65	; 0x41
 8004000:	f001 f8f1 	bl	80051e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8004004:	2041      	movs	r0, #65	; 0x41
 8004006:	f001 f90a 	bl	800521e <HAL_NVIC_EnableIRQ>
}
 800400a:	bf00      	nop
 800400c:	3730      	adds	r7, #48	; 0x30
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40006400 	.word	0x40006400
 8004018:	20002970 	.word	0x20002970
 800401c:	40023800 	.word	0x40023800
 8004020:	40020000 	.word	0x40020000
 8004024:	40006800 	.word	0x40006800
 8004028:	40020400 	.word	0x40020400

0800402c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08a      	sub	sp, #40	; 0x28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004034:	f107 0314 	add.w	r3, r7, #20
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	605a      	str	r2, [r3, #4]
 800403e:	609a      	str	r2, [r3, #8]
 8004040:	60da      	str	r2, [r3, #12]
 8004042:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a19      	ldr	r2, [pc, #100]	; (80040b0 <HAL_SPI_MspInit+0x84>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d12b      	bne.n	80040a6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800404e:	2300      	movs	r3, #0
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	4b18      	ldr	r3, [pc, #96]	; (80040b4 <HAL_SPI_MspInit+0x88>)
 8004054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004056:	4a17      	ldr	r2, [pc, #92]	; (80040b4 <HAL_SPI_MspInit+0x88>)
 8004058:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800405c:	6453      	str	r3, [r2, #68]	; 0x44
 800405e:	4b15      	ldr	r3, [pc, #84]	; (80040b4 <HAL_SPI_MspInit+0x88>)
 8004060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004066:	613b      	str	r3, [r7, #16]
 8004068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <HAL_SPI_MspInit+0x88>)
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	4a10      	ldr	r2, [pc, #64]	; (80040b4 <HAL_SPI_MspInit+0x88>)
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	6313      	str	r3, [r2, #48]	; 0x30
 800407a:	4b0e      	ldr	r3, [pc, #56]	; (80040b4 <HAL_SPI_MspInit+0x88>)
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004086:	23e0      	movs	r3, #224	; 0xe0
 8004088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800408a:	2302      	movs	r3, #2
 800408c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408e:	2300      	movs	r3, #0
 8004090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004092:	2303      	movs	r3, #3
 8004094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004096:	2305      	movs	r3, #5
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800409a:	f107 0314 	add.w	r3, r7, #20
 800409e:	4619      	mov	r1, r3
 80040a0:	4805      	ldr	r0, [pc, #20]	; (80040b8 <HAL_SPI_MspInit+0x8c>)
 80040a2:	f001 f8d7 	bl	8005254 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80040a6:	bf00      	nop
 80040a8:	3728      	adds	r7, #40	; 0x28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40013000 	.word	0x40013000
 80040b4:	40023800 	.word	0x40023800
 80040b8:	40020000 	.word	0x40020000

080040bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08a      	sub	sp, #40	; 0x28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040c4:	f107 0314 	add.w	r3, r7, #20
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	605a      	str	r2, [r3, #4]
 80040ce:	609a      	str	r2, [r3, #8]
 80040d0:	60da      	str	r2, [r3, #12]
 80040d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a19      	ldr	r2, [pc, #100]	; (8004140 <HAL_UART_MspInit+0x84>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d12b      	bne.n	8004136 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80040de:	2300      	movs	r3, #0
 80040e0:	613b      	str	r3, [r7, #16]
 80040e2:	4b18      	ldr	r3, [pc, #96]	; (8004144 <HAL_UART_MspInit+0x88>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	4a17      	ldr	r2, [pc, #92]	; (8004144 <HAL_UART_MspInit+0x88>)
 80040e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ec:	6413      	str	r3, [r2, #64]	; 0x40
 80040ee:	4b15      	ldr	r3, [pc, #84]	; (8004144 <HAL_UART_MspInit+0x88>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f6:	613b      	str	r3, [r7, #16]
 80040f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	4b11      	ldr	r3, [pc, #68]	; (8004144 <HAL_UART_MspInit+0x88>)
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	4a10      	ldr	r2, [pc, #64]	; (8004144 <HAL_UART_MspInit+0x88>)
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	6313      	str	r3, [r2, #48]	; 0x30
 800410a:	4b0e      	ldr	r3, [pc, #56]	; (8004144 <HAL_UART_MspInit+0x88>)
 800410c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004116:	230c      	movs	r3, #12
 8004118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800411a:	2302      	movs	r3, #2
 800411c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411e:	2300      	movs	r3, #0
 8004120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004122:	2303      	movs	r3, #3
 8004124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004126:	2307      	movs	r3, #7
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800412a:	f107 0314 	add.w	r3, r7, #20
 800412e:	4619      	mov	r1, r3
 8004130:	4805      	ldr	r0, [pc, #20]	; (8004148 <HAL_UART_MspInit+0x8c>)
 8004132:	f001 f88f 	bl	8005254 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004136:	bf00      	nop
 8004138:	3728      	adds	r7, #40	; 0x28
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40004400 	.word	0x40004400
 8004144:	40023800 	.word	0x40023800
 8004148:	40020000 	.word	0x40020000

0800414c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004150:	e7fe      	b.n	8004150 <NMI_Handler+0x4>

08004152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004152:	b480      	push	{r7}
 8004154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004156:	e7fe      	b.n	8004156 <HardFault_Handler+0x4>

08004158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800415c:	e7fe      	b.n	800415c <MemManage_Handler+0x4>

0800415e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800415e:	b480      	push	{r7}
 8004160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004162:	e7fe      	b.n	8004162 <BusFault_Handler+0x4>

08004164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004168:	e7fe      	b.n	8004168 <UsageFault_Handler+0x4>

0800416a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800416a:	b480      	push	{r7}
 800416c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800416e:	bf00      	nop
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800417c:	bf00      	nop
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004186:	b480      	push	{r7}
 8004188:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800418a:	bf00      	nop
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004198:	f000 f97e 	bl	8004498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800419c:	bf00      	nop
 800419e:	bd80      	pop	{r7, pc}

080041a0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80041a4:	4802      	ldr	r0, [pc, #8]	; (80041b0 <CAN1_RX0_IRQHandler+0x10>)
 80041a6:	f000 fd13 	bl	8004bd0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80041aa:	bf00      	nop
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20002884 	.word	0x20002884

080041b4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80041b8:	4802      	ldr	r0, [pc, #8]	; (80041c4 <CAN1_RX1_IRQHandler+0x10>)
 80041ba:	f000 fd09 	bl	8004bd0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80041be:	bf00      	nop
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20002884 	.word	0x20002884

080041c8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80041cc:	4802      	ldr	r0, [pc, #8]	; (80041d8 <CAN2_RX0_IRQHandler+0x10>)
 80041ce:	f000 fcff 	bl	8004bd0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80041d2:	bf00      	nop
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	200028ac 	.word	0x200028ac

080041dc <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80041e0:	4802      	ldr	r0, [pc, #8]	; (80041ec <CAN2_RX1_IRQHandler+0x10>)
 80041e2:	f000 fcf5 	bl	8004bd0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80041e6:	bf00      	nop
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	200028ac 	.word	0x200028ac

080041f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
	return 1;
 80041f4:	2301      	movs	r3, #1
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <_kill>:

int _kill(int pid, int sig)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800420a:	f003 f923 	bl	8007454 <__errno>
 800420e:	4603      	mov	r3, r0
 8004210:	2216      	movs	r2, #22
 8004212:	601a      	str	r2, [r3, #0]
	return -1;
 8004214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004218:	4618      	mov	r0, r3
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <_exit>:

void _exit (int status)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004228:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff ffe7 	bl	8004200 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004232:	e7fe      	b.n	8004232 <_exit+0x12>

08004234 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	e00a      	b.n	800425c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004246:	f3af 8000 	nop.w
 800424a:	4601      	mov	r1, r0
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	1c5a      	adds	r2, r3, #1
 8004250:	60ba      	str	r2, [r7, #8]
 8004252:	b2ca      	uxtb	r2, r1
 8004254:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	3301      	adds	r3, #1
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	429a      	cmp	r2, r3
 8004262:	dbf0      	blt.n	8004246 <_read+0x12>
	}

return len;
 8004264:	687b      	ldr	r3, [r7, #4]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3718      	adds	r7, #24
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b086      	sub	sp, #24
 8004272:	af00      	add	r7, sp, #0
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800427a:	2300      	movs	r3, #0
 800427c:	617b      	str	r3, [r7, #20]
 800427e:	e009      	b.n	8004294 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	60ba      	str	r2, [r7, #8]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	4618      	mov	r0, r3
 800428a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	3301      	adds	r3, #1
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	429a      	cmp	r2, r3
 800429a:	dbf1      	blt.n	8004280 <_write+0x12>
	}
	return len;
 800429c:	687b      	ldr	r3, [r7, #4]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3718      	adds	r7, #24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <_close>:

int _close(int file)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
	return -1;
 80042ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
 80042c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042ce:	605a      	str	r2, [r3, #4]
	return 0;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <_isatty>:

int _isatty(int file)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
	return 1;
 80042e6:	2301      	movs	r3, #1
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
	return 0;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
	...

08004310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004318:	4a14      	ldr	r2, [pc, #80]	; (800436c <_sbrk+0x5c>)
 800431a:	4b15      	ldr	r3, [pc, #84]	; (8004370 <_sbrk+0x60>)
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004324:	4b13      	ldr	r3, [pc, #76]	; (8004374 <_sbrk+0x64>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d102      	bne.n	8004332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800432c:	4b11      	ldr	r3, [pc, #68]	; (8004374 <_sbrk+0x64>)
 800432e:	4a12      	ldr	r2, [pc, #72]	; (8004378 <_sbrk+0x68>)
 8004330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004332:	4b10      	ldr	r3, [pc, #64]	; (8004374 <_sbrk+0x64>)
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4413      	add	r3, r2
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	429a      	cmp	r2, r3
 800433e:	d207      	bcs.n	8004350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004340:	f003 f888 	bl	8007454 <__errno>
 8004344:	4603      	mov	r3, r0
 8004346:	220c      	movs	r2, #12
 8004348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800434a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800434e:	e009      	b.n	8004364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004350:	4b08      	ldr	r3, [pc, #32]	; (8004374 <_sbrk+0x64>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004356:	4b07      	ldr	r3, [pc, #28]	; (8004374 <_sbrk+0x64>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4413      	add	r3, r2
 800435e:	4a05      	ldr	r2, [pc, #20]	; (8004374 <_sbrk+0x64>)
 8004360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004362:	68fb      	ldr	r3, [r7, #12]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	20020000 	.word	0x20020000
 8004370:	00000400 	.word	0x00000400
 8004374:	20002974 	.word	0x20002974
 8004378:	20002990 	.word	0x20002990

0800437c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004380:	4b06      	ldr	r3, [pc, #24]	; (800439c <SystemInit+0x20>)
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004386:	4a05      	ldr	r2, [pc, #20]	; (800439c <SystemInit+0x20>)
 8004388:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800438c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004390:	bf00      	nop
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	e000ed00 	.word	0xe000ed00

080043a0 <Reset_Handler>:
 80043a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043d8 <LoopFillZerobss+0x12>
 80043a4:	480d      	ldr	r0, [pc, #52]	; (80043dc <LoopFillZerobss+0x16>)
 80043a6:	490e      	ldr	r1, [pc, #56]	; (80043e0 <LoopFillZerobss+0x1a>)
 80043a8:	4a0e      	ldr	r2, [pc, #56]	; (80043e4 <LoopFillZerobss+0x1e>)
 80043aa:	2300      	movs	r3, #0
 80043ac:	e002      	b.n	80043b4 <LoopCopyDataInit>

080043ae <CopyDataInit>:
 80043ae:	58d4      	ldr	r4, [r2, r3]
 80043b0:	50c4      	str	r4, [r0, r3]
 80043b2:	3304      	adds	r3, #4

080043b4 <LoopCopyDataInit>:
 80043b4:	18c4      	adds	r4, r0, r3
 80043b6:	428c      	cmp	r4, r1
 80043b8:	d3f9      	bcc.n	80043ae <CopyDataInit>
 80043ba:	4a0b      	ldr	r2, [pc, #44]	; (80043e8 <LoopFillZerobss+0x22>)
 80043bc:	4c0b      	ldr	r4, [pc, #44]	; (80043ec <LoopFillZerobss+0x26>)
 80043be:	2300      	movs	r3, #0
 80043c0:	e001      	b.n	80043c6 <LoopFillZerobss>

080043c2 <FillZerobss>:
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	3204      	adds	r2, #4

080043c6 <LoopFillZerobss>:
 80043c6:	42a2      	cmp	r2, r4
 80043c8:	d3fb      	bcc.n	80043c2 <FillZerobss>
 80043ca:	f7ff ffd7 	bl	800437c <SystemInit>
 80043ce:	f003 f847 	bl	8007460 <__libc_init_array>
 80043d2:	f7ff fb63 	bl	8003a9c <main>
 80043d6:	4770      	bx	lr
 80043d8:	20020000 	.word	0x20020000
 80043dc:	20000000 	.word	0x20000000
 80043e0:	200025a4 	.word	0x200025a4
 80043e4:	0800a974 	.word	0x0800a974
 80043e8:	200025a4 	.word	0x200025a4
 80043ec:	2000298c 	.word	0x2000298c

080043f0 <ADC_IRQHandler>:
 80043f0:	e7fe      	b.n	80043f0 <ADC_IRQHandler>
	...

080043f4 <HAL_Init>:
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	4b0e      	ldr	r3, [pc, #56]	; (8004434 <HAL_Init+0x40>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a0d      	ldr	r2, [pc, #52]	; (8004434 <HAL_Init+0x40>)
 80043fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <HAL_Init+0x40>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a0a      	ldr	r2, [pc, #40]	; (8004434 <HAL_Init+0x40>)
 800440a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800440e:	6013      	str	r3, [r2, #0]
 8004410:	4b08      	ldr	r3, [pc, #32]	; (8004434 <HAL_Init+0x40>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a07      	ldr	r2, [pc, #28]	; (8004434 <HAL_Init+0x40>)
 8004416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800441a:	6013      	str	r3, [r2, #0]
 800441c:	2003      	movs	r0, #3
 800441e:	f000 fed7 	bl	80051d0 <HAL_NVIC_SetPriorityGrouping>
 8004422:	2000      	movs	r0, #0
 8004424:	f000 f808 	bl	8004438 <HAL_InitTick>
 8004428:	f7ff fd16 	bl	8003e58 <HAL_MspInit>
 800442c:	2300      	movs	r3, #0
 800442e:	4618      	mov	r0, r3
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40023c00 	.word	0x40023c00

08004438 <HAL_InitTick>:
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	4b12      	ldr	r3, [pc, #72]	; (800448c <HAL_InitTick+0x54>)
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	4b12      	ldr	r3, [pc, #72]	; (8004490 <HAL_InitTick+0x58>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	4619      	mov	r1, r3
 800444a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800444e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004452:	fbb2 f3f3 	udiv	r3, r2, r3
 8004456:	4618      	mov	r0, r3
 8004458:	f000 feef 	bl	800523a <HAL_SYSTICK_Config>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <HAL_InitTick+0x2e>
 8004462:	2301      	movs	r3, #1
 8004464:	e00e      	b.n	8004484 <HAL_InitTick+0x4c>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b0f      	cmp	r3, #15
 800446a:	d80a      	bhi.n	8004482 <HAL_InitTick+0x4a>
 800446c:	2200      	movs	r2, #0
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004474:	f000 feb7 	bl	80051e6 <HAL_NVIC_SetPriority>
 8004478:	4a06      	ldr	r2, [pc, #24]	; (8004494 <HAL_InitTick+0x5c>)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	2300      	movs	r3, #0
 8004480:	e000      	b.n	8004484 <HAL_InitTick+0x4c>
 8004482:	2301      	movs	r3, #1
 8004484:	4618      	mov	r0, r3
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	200023c8 	.word	0x200023c8
 8004490:	200023d0 	.word	0x200023d0
 8004494:	200023cc 	.word	0x200023cc

08004498 <HAL_IncTick>:
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
 800449c:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <HAL_IncTick+0x20>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	461a      	mov	r2, r3
 80044a2:	4b06      	ldr	r3, [pc, #24]	; (80044bc <HAL_IncTick+0x24>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4413      	add	r3, r2
 80044a8:	4a04      	ldr	r2, [pc, #16]	; (80044bc <HAL_IncTick+0x24>)
 80044aa:	6013      	str	r3, [r2, #0]
 80044ac:	bf00      	nop
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	200023d0 	.word	0x200023d0
 80044bc:	20002978 	.word	0x20002978

080044c0 <HAL_GetTick>:
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	4b03      	ldr	r3, [pc, #12]	; (80044d4 <HAL_GetTick+0x14>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4618      	mov	r0, r3
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	20002978 	.word	0x20002978

080044d8 <HAL_Delay>:
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	f7ff ffee 	bl	80044c0 <HAL_GetTick>
 80044e4:	60b8      	str	r0, [r7, #8]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044f0:	d005      	beq.n	80044fe <HAL_Delay+0x26>
 80044f2:	4b0a      	ldr	r3, [pc, #40]	; (800451c <HAL_Delay+0x44>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	461a      	mov	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4413      	add	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	bf00      	nop
 8004500:	f7ff ffde 	bl	80044c0 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	429a      	cmp	r2, r3
 800450e:	d8f7      	bhi.n	8004500 <HAL_Delay+0x28>
 8004510:	bf00      	nop
 8004512:	bf00      	nop
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	200023d0 	.word	0x200023d0

08004520 <HAL_CAN_Init>:
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_CAN_Init+0x12>
 800452e:	2301      	movs	r3, #1
 8004530:	e0ed      	b.n	800470e <HAL_CAN_Init+0x1ee>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d102      	bne.n	8004544 <HAL_CAN_Init+0x24>
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff fcb2 	bl	8003ea8 <HAL_CAN_MspInit>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	f7ff ffb4 	bl	80044c0 <HAL_GetTick>
 8004558:	60f8      	str	r0, [r7, #12]
 800455a:	e012      	b.n	8004582 <HAL_CAN_Init+0x62>
 800455c:	f7ff ffb0 	bl	80044c0 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b0a      	cmp	r3, #10
 8004568:	d90b      	bls.n	8004582 <HAL_CAN_Init+0x62>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	625a      	str	r2, [r3, #36]	; 0x24
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2205      	movs	r2, #5
 800457a:	f883 2020 	strb.w	r2, [r3, #32]
 800457e:	2301      	movs	r3, #1
 8004580:	e0c5      	b.n	800470e <HAL_CAN_Init+0x1ee>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0e5      	beq.n	800455c <HAL_CAN_Init+0x3c>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0202 	bic.w	r2, r2, #2
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	f7ff ff8e 	bl	80044c0 <HAL_GetTick>
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	e012      	b.n	80045ce <HAL_CAN_Init+0xae>
 80045a8:	f7ff ff8a 	bl	80044c0 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b0a      	cmp	r3, #10
 80045b4:	d90b      	bls.n	80045ce <HAL_CAN_Init+0xae>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	625a      	str	r2, [r3, #36]	; 0x24
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2205      	movs	r2, #5
 80045c6:	f883 2020 	strb.w	r2, [r3, #32]
 80045ca:	2301      	movs	r3, #1
 80045cc:	e09f      	b.n	800470e <HAL_CAN_Init+0x1ee>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1e5      	bne.n	80045a8 <HAL_CAN_Init+0x88>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	7e1b      	ldrb	r3, [r3, #24]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d108      	bne.n	80045f6 <HAL_CAN_Init+0xd6>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	e007      	b.n	8004606 <HAL_CAN_Init+0xe6>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	7e5b      	ldrb	r3, [r3, #25]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d108      	bne.n	8004620 <HAL_CAN_Init+0x100>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	e007      	b.n	8004630 <HAL_CAN_Init+0x110>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	7e9b      	ldrb	r3, [r3, #26]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d108      	bne.n	800464a <HAL_CAN_Init+0x12a>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0220 	orr.w	r2, r2, #32
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	e007      	b.n	800465a <HAL_CAN_Init+0x13a>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0220 	bic.w	r2, r2, #32
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	7edb      	ldrb	r3, [r3, #27]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d108      	bne.n	8004674 <HAL_CAN_Init+0x154>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0210 	bic.w	r2, r2, #16
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	e007      	b.n	8004684 <HAL_CAN_Init+0x164>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0210 	orr.w	r2, r2, #16
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	7f1b      	ldrb	r3, [r3, #28]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d108      	bne.n	800469e <HAL_CAN_Init+0x17e>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 0208 	orr.w	r2, r2, #8
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	e007      	b.n	80046ae <HAL_CAN_Init+0x18e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0208 	bic.w	r2, r2, #8
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	7f5b      	ldrb	r3, [r3, #29]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d108      	bne.n	80046c8 <HAL_CAN_Init+0x1a8>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f042 0204 	orr.w	r2, r2, #4
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	e007      	b.n	80046d8 <HAL_CAN_Init+0x1b8>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0204 	bic.w	r2, r2, #4
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	431a      	orrs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	ea42 0103 	orr.w	r1, r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	1e5a      	subs	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	61da      	str	r2, [r3, #28]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	625a      	str	r2, [r3, #36]	; 0x24
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2020 	strb.w	r2, [r3, #32]
 800470c:	2300      	movs	r3, #0
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <HAL_CAN_ConfigFilter>:
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800472e:	74fb      	strb	r3, [r7, #19]
 8004730:	7cfb      	ldrb	r3, [r7, #19]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d003      	beq.n	800473e <HAL_CAN_ConfigFilter+0x26>
 8004736:	7cfb      	ldrb	r3, [r7, #19]
 8004738:	2b02      	cmp	r3, #2
 800473a:	f040 80be 	bne.w	80048ba <HAL_CAN_ConfigFilter+0x1a2>
 800473e:	4b65      	ldr	r3, [pc, #404]	; (80048d4 <HAL_CAN_ConfigFilter+0x1bc>)
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004748:	f043 0201 	orr.w	r2, r3, #1
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004758:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	021b      	lsls	r3, r3, #8
 800476e:	431a      	orrs	r2, r3
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	f003 031f 	and.w	r3, r3, #31
 800477e:	2201      	movs	r2, #1
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	43db      	mvns	r3, r3
 8004790:	401a      	ands	r2, r3
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d123      	bne.n	80047e8 <HAL_CAN_ConfigFilter+0xd0>
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	43db      	mvns	r3, r3
 80047aa:	401a      	ands	r2, r3
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	0419      	lsls	r1, r3, #16
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	6952      	ldr	r2, [r2, #20]
 80047c2:	4319      	orrs	r1, r3
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	3248      	adds	r2, #72	; 0x48
 80047c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	0419      	lsls	r1, r3, #16
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	430a      	orrs	r2, r1
 80047de:	6979      	ldr	r1, [r7, #20]
 80047e0:	3348      	adds	r3, #72	; 0x48
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	440b      	add	r3, r1
 80047e6:	605a      	str	r2, [r3, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d122      	bne.n	8004836 <HAL_CAN_ConfigFilter+0x11e>
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	431a      	orrs	r2, r3
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	0419      	lsls	r1, r3, #16
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	b29b      	uxth	r3, r3
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	6952      	ldr	r2, [r2, #20]
 8004810:	4319      	orrs	r1, r3
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	3248      	adds	r2, #72	; 0x48
 8004816:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	0419      	lsls	r1, r3, #16
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	b29a      	uxth	r2, r3
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	430a      	orrs	r2, r1
 800482c:	6979      	ldr	r1, [r7, #20]
 800482e:	3348      	adds	r3, #72	; 0x48
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	440b      	add	r3, r1
 8004834:	605a      	str	r2, [r3, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d109      	bne.n	8004852 <HAL_CAN_ConfigFilter+0x13a>
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	43db      	mvns	r3, r3
 8004848:	401a      	ands	r2, r3
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004850:	e007      	b.n	8004862 <HAL_CAN_ConfigFilter+0x14a>
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	431a      	orrs	r2, r3
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d109      	bne.n	800487e <HAL_CAN_ConfigFilter+0x166>
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	43db      	mvns	r3, r3
 8004874:	401a      	ands	r2, r3
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800487c:	e007      	b.n	800488e <HAL_CAN_ConfigFilter+0x176>
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	431a      	orrs	r2, r3
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d107      	bne.n	80048a6 <HAL_CAN_ConfigFilter+0x18e>
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	431a      	orrs	r2, r3
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80048ac:	f023 0201 	bic.w	r2, r3, #1
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80048b6:	2300      	movs	r3, #0
 80048b8:	e006      	b.n	80048c8 <HAL_CAN_ConfigFilter+0x1b0>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	625a      	str	r2, [r3, #36]	; 0x24
 80048c6:	2301      	movs	r3, #1
 80048c8:	4618      	mov	r0, r3
 80048ca:	371c      	adds	r7, #28
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	40006400 	.word	0x40006400

080048d8 <HAL_CAN_Start>:
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d12e      	bne.n	800494a <HAL_CAN_Start+0x72>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 2020 	strb.w	r2, [r3, #32]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0201 	bic.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	f7ff fddc 	bl	80044c0 <HAL_GetTick>
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	e012      	b.n	8004932 <HAL_CAN_Start+0x5a>
 800490c:	f7ff fdd8 	bl	80044c0 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b0a      	cmp	r3, #10
 8004918:	d90b      	bls.n	8004932 <HAL_CAN_Start+0x5a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	625a      	str	r2, [r3, #36]	; 0x24
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2205      	movs	r2, #5
 800492a:	f883 2020 	strb.w	r2, [r3, #32]
 800492e:	2301      	movs	r3, #1
 8004930:	e012      	b.n	8004958 <HAL_CAN_Start+0x80>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1e5      	bne.n	800490c <HAL_CAN_Start+0x34>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	625a      	str	r2, [r3, #36]	; 0x24
 8004946:	2300      	movs	r3, #0
 8004948:	e006      	b.n	8004958 <HAL_CAN_Start+0x80>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	625a      	str	r2, [r3, #36]	; 0x24
 8004956:	2301      	movs	r3, #1
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_CAN_GetRxMessage>:
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	603b      	str	r3, [r7, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004974:	75fb      	strb	r3, [r7, #23]
 8004976:	7dfb      	ldrb	r3, [r7, #23]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d003      	beq.n	8004984 <HAL_CAN_GetRxMessage+0x24>
 800497c:	7dfb      	ldrb	r3, [r7, #23]
 800497e:	2b02      	cmp	r3, #2
 8004980:	f040 80f3 	bne.w	8004b6a <HAL_CAN_GetRxMessage+0x20a>
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10e      	bne.n	80049a8 <HAL_CAN_GetRxMessage+0x48>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f003 0303 	and.w	r3, r3, #3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d116      	bne.n	80049c6 <HAL_CAN_GetRxMessage+0x66>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	625a      	str	r2, [r3, #36]	; 0x24
 80049a4:	2301      	movs	r3, #1
 80049a6:	e0e7      	b.n	8004b78 <HAL_CAN_GetRxMessage+0x218>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d107      	bne.n	80049c6 <HAL_CAN_GetRxMessage+0x66>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	625a      	str	r2, [r3, #36]	; 0x24
 80049c2:	2301      	movs	r3, #1
 80049c4:	e0d8      	b.n	8004b78 <HAL_CAN_GetRxMessage+0x218>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	331b      	adds	r3, #27
 80049ce:	011b      	lsls	r3, r3, #4
 80049d0:	4413      	add	r3, r2
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0204 	and.w	r2, r3, #4
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	609a      	str	r2, [r3, #8]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10c      	bne.n	80049fe <HAL_CAN_GetRxMessage+0x9e>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	331b      	adds	r3, #27
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	4413      	add	r3, r2
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	0d5b      	lsrs	r3, r3, #21
 80049f4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	e00b      	b.n	8004a16 <HAL_CAN_GetRxMessage+0xb6>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	331b      	adds	r3, #27
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	4413      	add	r3, r2
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	08db      	lsrs	r3, r3, #3
 8004a0e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	605a      	str	r2, [r3, #4]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	331b      	adds	r3, #27
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	4413      	add	r3, r2
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0202 	and.w	r2, r3, #2
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	60da      	str	r2, [r3, #12]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	331b      	adds	r3, #27
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	4413      	add	r3, r2
 8004a38:	3304      	adds	r3, #4
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 020f 	and.w	r2, r3, #15
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	611a      	str	r2, [r3, #16]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	331b      	adds	r3, #27
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	4413      	add	r3, r2
 8004a50:	3304      	adds	r3, #4
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	0a1b      	lsrs	r3, r3, #8
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	619a      	str	r2, [r3, #24]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	331b      	adds	r3, #27
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	4413      	add	r3, r2
 8004a68:	3304      	adds	r3, #4
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	0c1b      	lsrs	r3, r3, #16
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	615a      	str	r2, [r3, #20]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	701a      	strb	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	0a1a      	lsrs	r2, r3, #8
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	701a      	strb	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	011b      	lsls	r3, r3, #4
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	0c1a      	lsrs	r2, r3, #16
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	3302      	adds	r3, #2
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	701a      	strb	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	0e1a      	lsrs	r2, r3, #24
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	3303      	adds	r3, #3
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	701a      	strb	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	011b      	lsls	r3, r3, #4
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	3304      	adds	r3, #4
 8004aec:	b2d2      	uxtb	r2, r2
 8004aee:	701a      	strb	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	0a1a      	lsrs	r2, r3, #8
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	3305      	adds	r3, #5
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	701a      	strb	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	011b      	lsls	r3, r3, #4
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	0c1a      	lsrs	r2, r3, #16
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	3306      	adds	r3, #6
 8004b20:	b2d2      	uxtb	r2, r2
 8004b22:	701a      	strb	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	011b      	lsls	r3, r3, #4
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	0e1a      	lsrs	r2, r3, #24
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	3307      	adds	r3, #7
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	701a      	strb	r2, [r3, #0]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d108      	bne.n	8004b56 <HAL_CAN_GetRxMessage+0x1f6>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0220 	orr.w	r2, r2, #32
 8004b52:	60da      	str	r2, [r3, #12]
 8004b54:	e007      	b.n	8004b66 <HAL_CAN_GetRxMessage+0x206>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f042 0220 	orr.w	r2, r2, #32
 8004b64:	611a      	str	r2, [r3, #16]
 8004b66:	2300      	movs	r3, #0
 8004b68:	e006      	b.n	8004b78 <HAL_CAN_GetRxMessage+0x218>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	625a      	str	r2, [r3, #36]	; 0x24
 8004b76:	2301      	movs	r3, #1
 8004b78:	4618      	mov	r0, r3
 8004b7a:	371c      	adds	r7, #28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_CAN_ActivateNotification>:
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b94:	73fb      	strb	r3, [r7, #15]
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d002      	beq.n	8004ba2 <HAL_CAN_ActivateNotification+0x1e>
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d109      	bne.n	8004bb6 <HAL_CAN_ActivateNotification+0x32>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6959      	ldr	r1, [r3, #20]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	615a      	str	r2, [r3, #20]
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	e006      	b.n	8004bc4 <HAL_CAN_ActivateNotification+0x40>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	625a      	str	r2, [r3, #36]	; 0x24
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_CAN_IRQHandler>:
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08a      	sub	sp, #40	; 0x28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	2300      	movs	r3, #0
 8004bda:	627b      	str	r3, [r7, #36]	; 0x24
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	623b      	str	r3, [r7, #32]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	61fb      	str	r3, [r7, #28]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	61bb      	str	r3, [r7, #24]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	617b      	str	r3, [r7, #20]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	613b      	str	r3, [r7, #16]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d07c      	beq.n	8004d10 <HAL_CAN_IRQHandler+0x140>
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d023      	beq.n	8004c68 <HAL_CAN_IRQHandler+0x98>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2201      	movs	r2, #1
 8004c26:	609a      	str	r2, [r3, #8]
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_CAN_IRQHandler+0x6a>
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f983 	bl	8004f3e <HAL_CAN_TxMailbox0CompleteCallback>
 8004c38:	e016      	b.n	8004c68 <HAL_CAN_IRQHandler+0x98>
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d004      	beq.n	8004c4e <HAL_CAN_IRQHandler+0x7e>
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c4c:	e00c      	b.n	8004c68 <HAL_CAN_IRQHandler+0x98>
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	f003 0308 	and.w	r3, r3, #8
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d004      	beq.n	8004c62 <HAL_CAN_IRQHandler+0x92>
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c60:	e002      	b.n	8004c68 <HAL_CAN_IRQHandler+0x98>
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f989 	bl	8004f7a <HAL_CAN_TxMailbox0AbortCallback>
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d024      	beq.n	8004cbc <HAL_CAN_IRQHandler+0xec>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c7a:	609a      	str	r2, [r3, #8]
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_CAN_IRQHandler+0xbe>
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f963 	bl	8004f52 <HAL_CAN_TxMailbox1CompleteCallback>
 8004c8c:	e016      	b.n	8004cbc <HAL_CAN_IRQHandler+0xec>
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d004      	beq.n	8004ca2 <HAL_CAN_IRQHandler+0xd2>
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca0:	e00c      	b.n	8004cbc <HAL_CAN_IRQHandler+0xec>
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d004      	beq.n	8004cb6 <HAL_CAN_IRQHandler+0xe6>
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb4:	e002      	b.n	8004cbc <HAL_CAN_IRQHandler+0xec>
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f969 	bl	8004f8e <HAL_CAN_TxMailbox1AbortCallback>
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d024      	beq.n	8004d10 <HAL_CAN_IRQHandler+0x140>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004cce:	609a      	str	r2, [r3, #8]
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_CAN_IRQHandler+0x112>
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f943 	bl	8004f66 <HAL_CAN_TxMailbox2CompleteCallback>
 8004ce0:	e016      	b.n	8004d10 <HAL_CAN_IRQHandler+0x140>
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d004      	beq.n	8004cf6 <HAL_CAN_IRQHandler+0x126>
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf4:	e00c      	b.n	8004d10 <HAL_CAN_IRQHandler+0x140>
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d004      	beq.n	8004d0a <HAL_CAN_IRQHandler+0x13a>
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d06:	627b      	str	r3, [r7, #36]	; 0x24
 8004d08:	e002      	b.n	8004d10 <HAL_CAN_IRQHandler+0x140>
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f949 	bl	8004fa2 <HAL_CAN_TxMailbox2AbortCallback>
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00c      	beq.n	8004d34 <HAL_CAN_IRQHandler+0x164>
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f003 0310 	and.w	r3, r3, #16
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d007      	beq.n	8004d34 <HAL_CAN_IRQHandler+0x164>
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2210      	movs	r2, #16
 8004d32:	60da      	str	r2, [r3, #12]
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00b      	beq.n	8004d56 <HAL_CAN_IRQHandler+0x186>
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f003 0308 	and.w	r3, r3, #8
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d006      	beq.n	8004d56 <HAL_CAN_IRQHandler+0x186>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2208      	movs	r2, #8
 8004d4e:	60da      	str	r2, [r3, #12]
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f930 	bl	8004fb6 <HAL_CAN_RxFifo0FullCallback>
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d009      	beq.n	8004d74 <HAL_CAN_IRQHandler+0x1a4>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <HAL_CAN_IRQHandler+0x1a4>
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7fc f9b0 	bl	80010d4 <HAL_CAN_RxFifo0MsgPendingCallback>
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00c      	beq.n	8004d98 <HAL_CAN_IRQHandler+0x1c8>
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d007      	beq.n	8004d98 <HAL_CAN_IRQHandler+0x1c8>
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2210      	movs	r2, #16
 8004d96:	611a      	str	r2, [r3, #16]
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	f003 0320 	and.w	r3, r3, #32
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00b      	beq.n	8004dba <HAL_CAN_IRQHandler+0x1ea>
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f003 0308 	and.w	r3, r3, #8
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d006      	beq.n	8004dba <HAL_CAN_IRQHandler+0x1ea>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2208      	movs	r2, #8
 8004db2:	611a      	str	r2, [r3, #16]
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f912 	bl	8004fde <HAL_CAN_RxFifo1FullCallback>
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	f003 0310 	and.w	r3, r3, #16
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d009      	beq.n	8004dd8 <HAL_CAN_IRQHandler+0x208>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <HAL_CAN_IRQHandler+0x208>
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f8f9 	bl	8004fca <HAL_CAN_RxFifo1MsgPendingCallback>
 8004dd8:	6a3b      	ldr	r3, [r7, #32]
 8004dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00b      	beq.n	8004dfa <HAL_CAN_IRQHandler+0x22a>
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	f003 0310 	and.w	r3, r3, #16
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d006      	beq.n	8004dfa <HAL_CAN_IRQHandler+0x22a>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2210      	movs	r2, #16
 8004df2:	605a      	str	r2, [r3, #4]
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f8fc 	bl	8004ff2 <HAL_CAN_SleepCallback>
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00b      	beq.n	8004e1c <HAL_CAN_IRQHandler+0x24c>
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	f003 0308 	and.w	r3, r3, #8
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d006      	beq.n	8004e1c <HAL_CAN_IRQHandler+0x24c>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2208      	movs	r2, #8
 8004e14:	605a      	str	r2, [r3, #4]
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f8f5 	bl	8005006 <HAL_CAN_WakeUpFromRxMsgCallback>
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d07b      	beq.n	8004f1e <HAL_CAN_IRQHandler+0x34e>
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d072      	beq.n	8004f16 <HAL_CAN_IRQHandler+0x346>
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d008      	beq.n	8004e4c <HAL_CAN_IRQHandler+0x27c>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <HAL_CAN_IRQHandler+0x27c>
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d008      	beq.n	8004e68 <HAL_CAN_IRQHandler+0x298>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_CAN_IRQHandler+0x298>
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	f043 0302 	orr.w	r3, r3, #2
 8004e66:	627b      	str	r3, [r7, #36]	; 0x24
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d008      	beq.n	8004e84 <HAL_CAN_IRQHandler+0x2b4>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <HAL_CAN_IRQHandler+0x2b4>
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	f043 0304 	orr.w	r3, r3, #4
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d043      	beq.n	8004f16 <HAL_CAN_IRQHandler+0x346>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d03e      	beq.n	8004f16 <HAL_CAN_IRQHandler+0x346>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e9e:	2b60      	cmp	r3, #96	; 0x60
 8004ea0:	d02b      	beq.n	8004efa <HAL_CAN_IRQHandler+0x32a>
 8004ea2:	2b60      	cmp	r3, #96	; 0x60
 8004ea4:	d82e      	bhi.n	8004f04 <HAL_CAN_IRQHandler+0x334>
 8004ea6:	2b50      	cmp	r3, #80	; 0x50
 8004ea8:	d022      	beq.n	8004ef0 <HAL_CAN_IRQHandler+0x320>
 8004eaa:	2b50      	cmp	r3, #80	; 0x50
 8004eac:	d82a      	bhi.n	8004f04 <HAL_CAN_IRQHandler+0x334>
 8004eae:	2b40      	cmp	r3, #64	; 0x40
 8004eb0:	d019      	beq.n	8004ee6 <HAL_CAN_IRQHandler+0x316>
 8004eb2:	2b40      	cmp	r3, #64	; 0x40
 8004eb4:	d826      	bhi.n	8004f04 <HAL_CAN_IRQHandler+0x334>
 8004eb6:	2b30      	cmp	r3, #48	; 0x30
 8004eb8:	d010      	beq.n	8004edc <HAL_CAN_IRQHandler+0x30c>
 8004eba:	2b30      	cmp	r3, #48	; 0x30
 8004ebc:	d822      	bhi.n	8004f04 <HAL_CAN_IRQHandler+0x334>
 8004ebe:	2b10      	cmp	r3, #16
 8004ec0:	d002      	beq.n	8004ec8 <HAL_CAN_IRQHandler+0x2f8>
 8004ec2:	2b20      	cmp	r3, #32
 8004ec4:	d005      	beq.n	8004ed2 <HAL_CAN_IRQHandler+0x302>
 8004ec6:	e01d      	b.n	8004f04 <HAL_CAN_IRQHandler+0x334>
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	f043 0308 	orr.w	r3, r3, #8
 8004ece:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed0:	e019      	b.n	8004f06 <HAL_CAN_IRQHandler+0x336>
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	f043 0310 	orr.w	r3, r3, #16
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eda:	e014      	b.n	8004f06 <HAL_CAN_IRQHandler+0x336>
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	f043 0320 	orr.w	r3, r3, #32
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee4:	e00f      	b.n	8004f06 <HAL_CAN_IRQHandler+0x336>
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eec:	627b      	str	r3, [r7, #36]	; 0x24
 8004eee:	e00a      	b.n	8004f06 <HAL_CAN_IRQHandler+0x336>
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ef8:	e005      	b.n	8004f06 <HAL_CAN_IRQHandler+0x336>
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f00:	627b      	str	r3, [r7, #36]	; 0x24
 8004f02:	e000      	b.n	8004f06 <HAL_CAN_IRQHandler+0x336>
 8004f04:	bf00      	nop
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	699a      	ldr	r2, [r3, #24]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004f14:	619a      	str	r2, [r3, #24]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2204      	movs	r2, #4
 8004f1c:	605a      	str	r2, [r3, #4]
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d008      	beq.n	8004f36 <HAL_CAN_IRQHandler+0x366>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	625a      	str	r2, [r3, #36]	; 0x24
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f872 	bl	800501a <HAL_CAN_ErrorCallback>
 8004f36:	bf00      	nop
 8004f38:	3728      	adds	r7, #40	; 0x28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <HAL_CAN_TxMailbox0CompleteCallback>:
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <HAL_CAN_TxMailbox1CompleteCallback>:
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <HAL_CAN_TxMailbox2CompleteCallback>:
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <HAL_CAN_TxMailbox0AbortCallback>:
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <HAL_CAN_TxMailbox1AbortCallback>:
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <HAL_CAN_TxMailbox2AbortCallback>:
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_CAN_RxFifo0FullCallback>:
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <HAL_CAN_RxFifo1MsgPendingCallback>:
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <HAL_CAN_RxFifo1FullCallback>:
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <HAL_CAN_SleepCallback>:
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <HAL_CAN_ErrorCallback>:
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
	...

08005030 <__NVIC_SetPriorityGrouping>:
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	4b0c      	ldr	r3, [pc, #48]	; (8005074 <__NVIC_SetPriorityGrouping+0x44>)
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	60bb      	str	r3, [r7, #8]
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800504c:	4013      	ands	r3, r2
 800504e:	60bb      	str	r3, [r7, #8]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	021a      	lsls	r2, r3, #8
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	4313      	orrs	r3, r2
 8005058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800505c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005060:	60bb      	str	r3, [r7, #8]
 8005062:	4a04      	ldr	r2, [pc, #16]	; (8005074 <__NVIC_SetPriorityGrouping+0x44>)
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	60d3      	str	r3, [r2, #12]
 8005068:	bf00      	nop
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr
 8005074:	e000ed00 	.word	0xe000ed00

08005078 <__NVIC_GetPriorityGrouping>:
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
 800507c:	4b04      	ldr	r3, [pc, #16]	; (8005090 <__NVIC_GetPriorityGrouping+0x18>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	0a1b      	lsrs	r3, r3, #8
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	4618      	mov	r0, r3
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	e000ed00 	.word	0xe000ed00

08005094 <__NVIC_EnableIRQ>:
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	4603      	mov	r3, r0
 800509c:	71fb      	strb	r3, [r7, #7]
 800509e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	db0b      	blt.n	80050be <__NVIC_EnableIRQ+0x2a>
 80050a6:	79fb      	ldrb	r3, [r7, #7]
 80050a8:	f003 021f 	and.w	r2, r3, #31
 80050ac:	4907      	ldr	r1, [pc, #28]	; (80050cc <__NVIC_EnableIRQ+0x38>)
 80050ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b2:	095b      	lsrs	r3, r3, #5
 80050b4:	2001      	movs	r0, #1
 80050b6:	fa00 f202 	lsl.w	r2, r0, r2
 80050ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	e000e100 	.word	0xe000e100

080050d0 <__NVIC_SetPriority>:
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	6039      	str	r1, [r7, #0]
 80050da:	71fb      	strb	r3, [r7, #7]
 80050dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	db0a      	blt.n	80050fa <__NVIC_SetPriority+0x2a>
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	490c      	ldr	r1, [pc, #48]	; (800511c <__NVIC_SetPriority+0x4c>)
 80050ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ee:	0112      	lsls	r2, r2, #4
 80050f0:	b2d2      	uxtb	r2, r2
 80050f2:	440b      	add	r3, r1
 80050f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80050f8:	e00a      	b.n	8005110 <__NVIC_SetPriority+0x40>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	4908      	ldr	r1, [pc, #32]	; (8005120 <__NVIC_SetPriority+0x50>)
 8005100:	79fb      	ldrb	r3, [r7, #7]
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	3b04      	subs	r3, #4
 8005108:	0112      	lsls	r2, r2, #4
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	440b      	add	r3, r1
 800510e:	761a      	strb	r2, [r3, #24]
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	e000e100 	.word	0xe000e100
 8005120:	e000ed00 	.word	0xe000ed00

08005124 <NVIC_EncodePriority>:
 8005124:	b480      	push	{r7}
 8005126:	b089      	sub	sp, #36	; 0x24
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	61fb      	str	r3, [r7, #28]
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	f1c3 0307 	rsb	r3, r3, #7
 800513e:	2b04      	cmp	r3, #4
 8005140:	bf28      	it	cs
 8005142:	2304      	movcs	r3, #4
 8005144:	61bb      	str	r3, [r7, #24]
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	3304      	adds	r3, #4
 800514a:	2b06      	cmp	r3, #6
 800514c:	d902      	bls.n	8005154 <NVIC_EncodePriority+0x30>
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	3b03      	subs	r3, #3
 8005152:	e000      	b.n	8005156 <NVIC_EncodePriority+0x32>
 8005154:	2300      	movs	r3, #0
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	fa02 f303 	lsl.w	r3, r2, r3
 8005162:	43da      	mvns	r2, r3
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	401a      	ands	r2, r3
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	409a      	lsls	r2, r3
 800516c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	fa01 f303 	lsl.w	r3, r1, r3
 8005176:	43d9      	mvns	r1, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	400b      	ands	r3, r1
 800517c:	4313      	orrs	r3, r2
 800517e:	4618      	mov	r0, r3
 8005180:	3724      	adds	r7, #36	; 0x24
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
	...

0800518c <SysTick_Config>:
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3b01      	subs	r3, #1
 8005198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800519c:	d301      	bcc.n	80051a2 <SysTick_Config+0x16>
 800519e:	2301      	movs	r3, #1
 80051a0:	e00f      	b.n	80051c2 <SysTick_Config+0x36>
 80051a2:	4a0a      	ldr	r2, [pc, #40]	; (80051cc <SysTick_Config+0x40>)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	6053      	str	r3, [r2, #4]
 80051aa:	210f      	movs	r1, #15
 80051ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051b0:	f7ff ff8e 	bl	80050d0 <__NVIC_SetPriority>
 80051b4:	4b05      	ldr	r3, [pc, #20]	; (80051cc <SysTick_Config+0x40>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	609a      	str	r2, [r3, #8]
 80051ba:	4b04      	ldr	r3, [pc, #16]	; (80051cc <SysTick_Config+0x40>)
 80051bc:	2207      	movs	r2, #7
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	2300      	movs	r3, #0
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	e000e010 	.word	0xe000e010

080051d0 <HAL_NVIC_SetPriorityGrouping>:
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7ff ff29 	bl	8005030 <__NVIC_SetPriorityGrouping>
 80051de:	bf00      	nop
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <HAL_NVIC_SetPriority>:
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b086      	sub	sp, #24
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	4603      	mov	r3, r0
 80051ee:	60b9      	str	r1, [r7, #8]
 80051f0:	607a      	str	r2, [r7, #4]
 80051f2:	73fb      	strb	r3, [r7, #15]
 80051f4:	2300      	movs	r3, #0
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	f7ff ff3e 	bl	8005078 <__NVIC_GetPriorityGrouping>
 80051fc:	6178      	str	r0, [r7, #20]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	68b9      	ldr	r1, [r7, #8]
 8005202:	6978      	ldr	r0, [r7, #20]
 8005204:	f7ff ff8e 	bl	8005124 <NVIC_EncodePriority>
 8005208:	4602      	mov	r2, r0
 800520a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800520e:	4611      	mov	r1, r2
 8005210:	4618      	mov	r0, r3
 8005212:	f7ff ff5d 	bl	80050d0 <__NVIC_SetPriority>
 8005216:	bf00      	nop
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <HAL_NVIC_EnableIRQ>:
 800521e:	b580      	push	{r7, lr}
 8005220:	b082      	sub	sp, #8
 8005222:	af00      	add	r7, sp, #0
 8005224:	4603      	mov	r3, r0
 8005226:	71fb      	strb	r3, [r7, #7]
 8005228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800522c:	4618      	mov	r0, r3
 800522e:	f7ff ff31 	bl	8005094 <__NVIC_EnableIRQ>
 8005232:	bf00      	nop
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <HAL_SYSTICK_Config>:
 800523a:	b580      	push	{r7, lr}
 800523c:	b082      	sub	sp, #8
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7ff ffa2 	bl	800518c <SysTick_Config>
 8005248:	4603      	mov	r3, r0
 800524a:	4618      	mov	r0, r3
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
	...

08005254 <HAL_GPIO_Init>:
 8005254:	b480      	push	{r7}
 8005256:	b089      	sub	sp, #36	; 0x24
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
 800525e:	2300      	movs	r3, #0
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	2300      	movs	r3, #0
 8005264:	613b      	str	r3, [r7, #16]
 8005266:	2300      	movs	r3, #0
 8005268:	61bb      	str	r3, [r7, #24]
 800526a:	2300      	movs	r3, #0
 800526c:	61fb      	str	r3, [r7, #28]
 800526e:	e165      	b.n	800553c <HAL_GPIO_Init+0x2e8>
 8005270:	2201      	movs	r2, #1
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	fa02 f303 	lsl.w	r3, r2, r3
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	4013      	ands	r3, r2
 8005282:	613b      	str	r3, [r7, #16]
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	429a      	cmp	r2, r3
 800528a:	f040 8154 	bne.w	8005536 <HAL_GPIO_Init+0x2e2>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f003 0303 	and.w	r3, r3, #3
 8005296:	2b01      	cmp	r3, #1
 8005298:	d005      	beq.n	80052a6 <HAL_GPIO_Init+0x52>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d130      	bne.n	8005308 <HAL_GPIO_Init+0xb4>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	61bb      	str	r3, [r7, #24]
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	2203      	movs	r2, #3
 80052b2:	fa02 f303 	lsl.w	r3, r2, r3
 80052b6:	43db      	mvns	r3, r3
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	4013      	ands	r3, r2
 80052bc:	61bb      	str	r3, [r7, #24]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	61bb      	str	r3, [r7, #24]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	69ba      	ldr	r2, [r7, #24]
 80052d4:	609a      	str	r2, [r3, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	61bb      	str	r3, [r7, #24]
 80052dc:	2201      	movs	r2, #1
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	fa02 f303 	lsl.w	r3, r2, r3
 80052e4:	43db      	mvns	r3, r3
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	4013      	ands	r3, r2
 80052ea:	61bb      	str	r3, [r7, #24]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	091b      	lsrs	r3, r3, #4
 80052f2:	f003 0201 	and.w	r2, r3, #1
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	fa02 f303 	lsl.w	r3, r2, r3
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	4313      	orrs	r3, r2
 8005300:	61bb      	str	r3, [r7, #24]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	605a      	str	r2, [r3, #4]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f003 0303 	and.w	r3, r3, #3
 8005310:	2b03      	cmp	r3, #3
 8005312:	d017      	beq.n	8005344 <HAL_GPIO_Init+0xf0>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	61bb      	str	r3, [r7, #24]
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	2203      	movs	r2, #3
 8005320:	fa02 f303 	lsl.w	r3, r2, r3
 8005324:	43db      	mvns	r3, r3
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	4013      	ands	r3, r2
 800532a:	61bb      	str	r3, [r7, #24]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	4313      	orrs	r3, r2
 800533c:	61bb      	str	r3, [r7, #24]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	60da      	str	r2, [r3, #12]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f003 0303 	and.w	r3, r3, #3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d123      	bne.n	8005398 <HAL_GPIO_Init+0x144>
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	08da      	lsrs	r2, r3, #3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3208      	adds	r2, #8
 8005358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800535c:	61bb      	str	r3, [r7, #24]
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	f003 0307 	and.w	r3, r3, #7
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	220f      	movs	r2, #15
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	43db      	mvns	r3, r3
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	4013      	ands	r3, r2
 8005372:	61bb      	str	r3, [r7, #24]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	691a      	ldr	r2, [r3, #16]
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	fa02 f303 	lsl.w	r3, r2, r3
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	4313      	orrs	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	08da      	lsrs	r2, r3, #3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	3208      	adds	r2, #8
 8005392:	69b9      	ldr	r1, [r7, #24]
 8005394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	61bb      	str	r3, [r7, #24]
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	2203      	movs	r2, #3
 80053a4:	fa02 f303 	lsl.w	r3, r2, r3
 80053a8:	43db      	mvns	r3, r3
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	4013      	ands	r3, r2
 80053ae:	61bb      	str	r3, [r7, #24]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f003 0203 	and.w	r2, r3, #3
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	fa02 f303 	lsl.w	r3, r2, r3
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	61bb      	str	r3, [r7, #24]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 80ae 	beq.w	8005536 <HAL_GPIO_Init+0x2e2>
 80053da:	2300      	movs	r3, #0
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	4b5d      	ldr	r3, [pc, #372]	; (8005554 <HAL_GPIO_Init+0x300>)
 80053e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e2:	4a5c      	ldr	r2, [pc, #368]	; (8005554 <HAL_GPIO_Init+0x300>)
 80053e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053e8:	6453      	str	r3, [r2, #68]	; 0x44
 80053ea:	4b5a      	ldr	r3, [pc, #360]	; (8005554 <HAL_GPIO_Init+0x300>)
 80053ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4a58      	ldr	r2, [pc, #352]	; (8005558 <HAL_GPIO_Init+0x304>)
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	089b      	lsrs	r3, r3, #2
 80053fc:	3302      	adds	r3, #2
 80053fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005402:	61bb      	str	r3, [r7, #24]
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	f003 0303 	and.w	r3, r3, #3
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	220f      	movs	r2, #15
 800540e:	fa02 f303 	lsl.w	r3, r2, r3
 8005412:	43db      	mvns	r3, r3
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	4013      	ands	r3, r2
 8005418:	61bb      	str	r3, [r7, #24]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a4f      	ldr	r2, [pc, #316]	; (800555c <HAL_GPIO_Init+0x308>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d025      	beq.n	800546e <HAL_GPIO_Init+0x21a>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a4e      	ldr	r2, [pc, #312]	; (8005560 <HAL_GPIO_Init+0x30c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d01f      	beq.n	800546a <HAL_GPIO_Init+0x216>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a4d      	ldr	r2, [pc, #308]	; (8005564 <HAL_GPIO_Init+0x310>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d019      	beq.n	8005466 <HAL_GPIO_Init+0x212>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a4c      	ldr	r2, [pc, #304]	; (8005568 <HAL_GPIO_Init+0x314>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d013      	beq.n	8005462 <HAL_GPIO_Init+0x20e>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a4b      	ldr	r2, [pc, #300]	; (800556c <HAL_GPIO_Init+0x318>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00d      	beq.n	800545e <HAL_GPIO_Init+0x20a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a4a      	ldr	r2, [pc, #296]	; (8005570 <HAL_GPIO_Init+0x31c>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d007      	beq.n	800545a <HAL_GPIO_Init+0x206>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a49      	ldr	r2, [pc, #292]	; (8005574 <HAL_GPIO_Init+0x320>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d101      	bne.n	8005456 <HAL_GPIO_Init+0x202>
 8005452:	2306      	movs	r3, #6
 8005454:	e00c      	b.n	8005470 <HAL_GPIO_Init+0x21c>
 8005456:	2307      	movs	r3, #7
 8005458:	e00a      	b.n	8005470 <HAL_GPIO_Init+0x21c>
 800545a:	2305      	movs	r3, #5
 800545c:	e008      	b.n	8005470 <HAL_GPIO_Init+0x21c>
 800545e:	2304      	movs	r3, #4
 8005460:	e006      	b.n	8005470 <HAL_GPIO_Init+0x21c>
 8005462:	2303      	movs	r3, #3
 8005464:	e004      	b.n	8005470 <HAL_GPIO_Init+0x21c>
 8005466:	2302      	movs	r3, #2
 8005468:	e002      	b.n	8005470 <HAL_GPIO_Init+0x21c>
 800546a:	2301      	movs	r3, #1
 800546c:	e000      	b.n	8005470 <HAL_GPIO_Init+0x21c>
 800546e:	2300      	movs	r3, #0
 8005470:	69fa      	ldr	r2, [r7, #28]
 8005472:	f002 0203 	and.w	r2, r2, #3
 8005476:	0092      	lsls	r2, r2, #2
 8005478:	4093      	lsls	r3, r2
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	4313      	orrs	r3, r2
 800547e:	61bb      	str	r3, [r7, #24]
 8005480:	4935      	ldr	r1, [pc, #212]	; (8005558 <HAL_GPIO_Init+0x304>)
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	089b      	lsrs	r3, r3, #2
 8005486:	3302      	adds	r3, #2
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800548e:	4b3a      	ldr	r3, [pc, #232]	; (8005578 <HAL_GPIO_Init+0x324>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	61bb      	str	r3, [r7, #24]
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	43db      	mvns	r3, r3
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	4013      	ands	r3, r2
 800549c:	61bb      	str	r3, [r7, #24]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_GPIO_Init+0x25e>
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	61bb      	str	r3, [r7, #24]
 80054b2:	4a31      	ldr	r2, [pc, #196]	; (8005578 <HAL_GPIO_Init+0x324>)
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	6093      	str	r3, [r2, #8]
 80054b8:	4b2f      	ldr	r3, [pc, #188]	; (8005578 <HAL_GPIO_Init+0x324>)
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	61bb      	str	r3, [r7, #24]
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	43db      	mvns	r3, r3
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	4013      	ands	r3, r2
 80054c6:	61bb      	str	r3, [r7, #24]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d003      	beq.n	80054dc <HAL_GPIO_Init+0x288>
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	4313      	orrs	r3, r2
 80054da:	61bb      	str	r3, [r7, #24]
 80054dc:	4a26      	ldr	r2, [pc, #152]	; (8005578 <HAL_GPIO_Init+0x324>)
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	60d3      	str	r3, [r2, #12]
 80054e2:	4b25      	ldr	r3, [pc, #148]	; (8005578 <HAL_GPIO_Init+0x324>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	61bb      	str	r3, [r7, #24]
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	43db      	mvns	r3, r3
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	4013      	ands	r3, r2
 80054f0:	61bb      	str	r3, [r7, #24]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <HAL_GPIO_Init+0x2b2>
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	4313      	orrs	r3, r2
 8005504:	61bb      	str	r3, [r7, #24]
 8005506:	4a1c      	ldr	r2, [pc, #112]	; (8005578 <HAL_GPIO_Init+0x324>)
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	6053      	str	r3, [r2, #4]
 800550c:	4b1a      	ldr	r3, [pc, #104]	; (8005578 <HAL_GPIO_Init+0x324>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	61bb      	str	r3, [r7, #24]
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	43db      	mvns	r3, r3
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	4013      	ands	r3, r2
 800551a:	61bb      	str	r3, [r7, #24]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d003      	beq.n	8005530 <HAL_GPIO_Init+0x2dc>
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	61bb      	str	r3, [r7, #24]
 8005530:	4a11      	ldr	r2, [pc, #68]	; (8005578 <HAL_GPIO_Init+0x324>)
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	3301      	adds	r3, #1
 800553a:	61fb      	str	r3, [r7, #28]
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	2b0f      	cmp	r3, #15
 8005540:	f67f ae96 	bls.w	8005270 <HAL_GPIO_Init+0x1c>
 8005544:	bf00      	nop
 8005546:	bf00      	nop
 8005548:	3724      	adds	r7, #36	; 0x24
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	40023800 	.word	0x40023800
 8005558:	40013800 	.word	0x40013800
 800555c:	40020000 	.word	0x40020000
 8005560:	40020400 	.word	0x40020400
 8005564:	40020800 	.word	0x40020800
 8005568:	40020c00 	.word	0x40020c00
 800556c:	40021000 	.word	0x40021000
 8005570:	40021400 	.word	0x40021400
 8005574:	40021800 	.word	0x40021800
 8005578:	40013c00 	.word	0x40013c00

0800557c <HAL_GPIO_WritePin>:
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	460b      	mov	r3, r1
 8005586:	807b      	strh	r3, [r7, #2]
 8005588:	4613      	mov	r3, r2
 800558a:	707b      	strb	r3, [r7, #1]
 800558c:	787b      	ldrb	r3, [r7, #1]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_GPIO_WritePin+0x1e>
 8005592:	887a      	ldrh	r2, [r7, #2]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	619a      	str	r2, [r3, #24]
 8005598:	e003      	b.n	80055a2 <HAL_GPIO_WritePin+0x26>
 800559a:	887b      	ldrh	r3, [r7, #2]
 800559c:	041a      	lsls	r2, r3, #16
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	619a      	str	r2, [r3, #24]
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
	...

080055b0 <HAL_RCC_ClockConfig>:
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <HAL_RCC_ClockConfig+0x14>
 80055c0:	2301      	movs	r3, #1
 80055c2:	e0cc      	b.n	800575e <HAL_RCC_ClockConfig+0x1ae>
 80055c4:	4b68      	ldr	r3, [pc, #416]	; (8005768 <HAL_RCC_ClockConfig+0x1b8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 030f 	and.w	r3, r3, #15
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d90c      	bls.n	80055ec <HAL_RCC_ClockConfig+0x3c>
 80055d2:	4b65      	ldr	r3, [pc, #404]	; (8005768 <HAL_RCC_ClockConfig+0x1b8>)
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	b2d2      	uxtb	r2, r2
 80055d8:	701a      	strb	r2, [r3, #0]
 80055da:	4b63      	ldr	r3, [pc, #396]	; (8005768 <HAL_RCC_ClockConfig+0x1b8>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 030f 	and.w	r3, r3, #15
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d001      	beq.n	80055ec <HAL_RCC_ClockConfig+0x3c>
 80055e8:	2301      	movs	r3, #1
 80055ea:	e0b8      	b.n	800575e <HAL_RCC_ClockConfig+0x1ae>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d020      	beq.n	800563a <HAL_RCC_ClockConfig+0x8a>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b00      	cmp	r3, #0
 8005602:	d005      	beq.n	8005610 <HAL_RCC_ClockConfig+0x60>
 8005604:	4b59      	ldr	r3, [pc, #356]	; (800576c <HAL_RCC_ClockConfig+0x1bc>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	4a58      	ldr	r2, [pc, #352]	; (800576c <HAL_RCC_ClockConfig+0x1bc>)
 800560a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800560e:	6093      	str	r3, [r2, #8]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0308 	and.w	r3, r3, #8
 8005618:	2b00      	cmp	r3, #0
 800561a:	d005      	beq.n	8005628 <HAL_RCC_ClockConfig+0x78>
 800561c:	4b53      	ldr	r3, [pc, #332]	; (800576c <HAL_RCC_ClockConfig+0x1bc>)
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	4a52      	ldr	r2, [pc, #328]	; (800576c <HAL_RCC_ClockConfig+0x1bc>)
 8005622:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005626:	6093      	str	r3, [r2, #8]
 8005628:	4b50      	ldr	r3, [pc, #320]	; (800576c <HAL_RCC_ClockConfig+0x1bc>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	494d      	ldr	r1, [pc, #308]	; (800576c <HAL_RCC_ClockConfig+0x1bc>)
 8005636:	4313      	orrs	r3, r2
 8005638:	608b      	str	r3, [r1, #8]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d044      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x120>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d107      	bne.n	800565e <HAL_RCC_ClockConfig+0xae>
 800564e:	4b47      	ldr	r3, [pc, #284]	; (800576c <HAL_RCC_ClockConfig+0x1bc>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d119      	bne.n	800568e <HAL_RCC_ClockConfig+0xde>
 800565a:	2301      	movs	r3, #1
 800565c:	e07f      	b.n	800575e <HAL_RCC_ClockConfig+0x1ae>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d003      	beq.n	800566e <HAL_RCC_ClockConfig+0xbe>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2b03      	cmp	r3, #3
 800566c:	d107      	bne.n	800567e <HAL_RCC_ClockConfig+0xce>
 800566e:	4b3f      	ldr	r3, [pc, #252]	; (800576c <HAL_RCC_ClockConfig+0x1bc>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d109      	bne.n	800568e <HAL_RCC_ClockConfig+0xde>
 800567a:	2301      	movs	r3, #1
 800567c:	e06f      	b.n	800575e <HAL_RCC_ClockConfig+0x1ae>
 800567e:	4b3b      	ldr	r3, [pc, #236]	; (800576c <HAL_RCC_ClockConfig+0x1bc>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_RCC_ClockConfig+0xde>
 800568a:	2301      	movs	r3, #1
 800568c:	e067      	b.n	800575e <HAL_RCC_ClockConfig+0x1ae>
 800568e:	4b37      	ldr	r3, [pc, #220]	; (800576c <HAL_RCC_ClockConfig+0x1bc>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f023 0203 	bic.w	r2, r3, #3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	4934      	ldr	r1, [pc, #208]	; (800576c <HAL_RCC_ClockConfig+0x1bc>)
 800569c:	4313      	orrs	r3, r2
 800569e:	608b      	str	r3, [r1, #8]
 80056a0:	f7fe ff0e 	bl	80044c0 <HAL_GetTick>
 80056a4:	60f8      	str	r0, [r7, #12]
 80056a6:	e00a      	b.n	80056be <HAL_RCC_ClockConfig+0x10e>
 80056a8:	f7fe ff0a 	bl	80044c0 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_ClockConfig+0x10e>
 80056ba:	2303      	movs	r3, #3
 80056bc:	e04f      	b.n	800575e <HAL_RCC_ClockConfig+0x1ae>
 80056be:	4b2b      	ldr	r3, [pc, #172]	; (800576c <HAL_RCC_ClockConfig+0x1bc>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 020c 	and.w	r2, r3, #12
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d1eb      	bne.n	80056a8 <HAL_RCC_ClockConfig+0xf8>
 80056d0:	4b25      	ldr	r3, [pc, #148]	; (8005768 <HAL_RCC_ClockConfig+0x1b8>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 030f 	and.w	r3, r3, #15
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d20c      	bcs.n	80056f8 <HAL_RCC_ClockConfig+0x148>
 80056de:	4b22      	ldr	r3, [pc, #136]	; (8005768 <HAL_RCC_ClockConfig+0x1b8>)
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	b2d2      	uxtb	r2, r2
 80056e4:	701a      	strb	r2, [r3, #0]
 80056e6:	4b20      	ldr	r3, [pc, #128]	; (8005768 <HAL_RCC_ClockConfig+0x1b8>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 030f 	and.w	r3, r3, #15
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d001      	beq.n	80056f8 <HAL_RCC_ClockConfig+0x148>
 80056f4:	2301      	movs	r3, #1
 80056f6:	e032      	b.n	800575e <HAL_RCC_ClockConfig+0x1ae>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b00      	cmp	r3, #0
 8005702:	d008      	beq.n	8005716 <HAL_RCC_ClockConfig+0x166>
 8005704:	4b19      	ldr	r3, [pc, #100]	; (800576c <HAL_RCC_ClockConfig+0x1bc>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	4916      	ldr	r1, [pc, #88]	; (800576c <HAL_RCC_ClockConfig+0x1bc>)
 8005712:	4313      	orrs	r3, r2
 8005714:	608b      	str	r3, [r1, #8]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0308 	and.w	r3, r3, #8
 800571e:	2b00      	cmp	r3, #0
 8005720:	d009      	beq.n	8005736 <HAL_RCC_ClockConfig+0x186>
 8005722:	4b12      	ldr	r3, [pc, #72]	; (800576c <HAL_RCC_ClockConfig+0x1bc>)
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	490e      	ldr	r1, [pc, #56]	; (800576c <HAL_RCC_ClockConfig+0x1bc>)
 8005732:	4313      	orrs	r3, r2
 8005734:	608b      	str	r3, [r1, #8]
 8005736:	f000 f855 	bl	80057e4 <HAL_RCC_GetSysClockFreq>
 800573a:	4602      	mov	r2, r0
 800573c:	4b0b      	ldr	r3, [pc, #44]	; (800576c <HAL_RCC_ClockConfig+0x1bc>)
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	091b      	lsrs	r3, r3, #4
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	490a      	ldr	r1, [pc, #40]	; (8005770 <HAL_RCC_ClockConfig+0x1c0>)
 8005748:	5ccb      	ldrb	r3, [r1, r3]
 800574a:	fa22 f303 	lsr.w	r3, r2, r3
 800574e:	4a09      	ldr	r2, [pc, #36]	; (8005774 <HAL_RCC_ClockConfig+0x1c4>)
 8005750:	6013      	str	r3, [r2, #0]
 8005752:	4b09      	ldr	r3, [pc, #36]	; (8005778 <HAL_RCC_ClockConfig+0x1c8>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4618      	mov	r0, r3
 8005758:	f7fe fe6e 	bl	8004438 <HAL_InitTick>
 800575c:	2300      	movs	r3, #0
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	40023c00 	.word	0x40023c00
 800576c:	40023800 	.word	0x40023800
 8005770:	0800a570 	.word	0x0800a570
 8005774:	200023c8 	.word	0x200023c8
 8005778:	200023cc 	.word	0x200023cc

0800577c <HAL_RCC_GetHCLKFreq>:
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
 8005780:	4b03      	ldr	r3, [pc, #12]	; (8005790 <HAL_RCC_GetHCLKFreq+0x14>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4618      	mov	r0, r3
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	200023c8 	.word	0x200023c8

08005794 <HAL_RCC_GetPCLK1Freq>:
 8005794:	b580      	push	{r7, lr}
 8005796:	af00      	add	r7, sp, #0
 8005798:	f7ff fff0 	bl	800577c <HAL_RCC_GetHCLKFreq>
 800579c:	4602      	mov	r2, r0
 800579e:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	0a9b      	lsrs	r3, r3, #10
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	4903      	ldr	r1, [pc, #12]	; (80057b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057aa:	5ccb      	ldrb	r3, [r1, r3]
 80057ac:	fa22 f303 	lsr.w	r3, r2, r3
 80057b0:	4618      	mov	r0, r3
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	40023800 	.word	0x40023800
 80057b8:	0800a580 	.word	0x0800a580

080057bc <HAL_RCC_GetPCLK2Freq>:
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
 80057c0:	f7ff ffdc 	bl	800577c <HAL_RCC_GetHCLKFreq>
 80057c4:	4602      	mov	r2, r0
 80057c6:	4b05      	ldr	r3, [pc, #20]	; (80057dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	0b5b      	lsrs	r3, r3, #13
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	4903      	ldr	r1, [pc, #12]	; (80057e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057d2:	5ccb      	ldrb	r3, [r1, r3]
 80057d4:	fa22 f303 	lsr.w	r3, r2, r3
 80057d8:	4618      	mov	r0, r3
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	40023800 	.word	0x40023800
 80057e0:	0800a580 	.word	0x0800a580

080057e4 <HAL_RCC_GetSysClockFreq>:
 80057e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057e8:	b0ae      	sub	sp, #184	; 0xb8
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	2300      	movs	r3, #0
 80057ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057f2:	2300      	movs	r3, #0
 80057f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057f8:	2300      	movs	r3, #0
 80057fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80057fe:	2300      	movs	r3, #0
 8005800:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005804:	2300      	movs	r3, #0
 8005806:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800580a:	4bcb      	ldr	r3, [pc, #812]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x354>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 030c 	and.w	r3, r3, #12
 8005812:	2b0c      	cmp	r3, #12
 8005814:	f200 8206 	bhi.w	8005c24 <HAL_RCC_GetSysClockFreq+0x440>
 8005818:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <HAL_RCC_GetSysClockFreq+0x3c>)
 800581a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581e:	bf00      	nop
 8005820:	08005855 	.word	0x08005855
 8005824:	08005c25 	.word	0x08005c25
 8005828:	08005c25 	.word	0x08005c25
 800582c:	08005c25 	.word	0x08005c25
 8005830:	0800585d 	.word	0x0800585d
 8005834:	08005c25 	.word	0x08005c25
 8005838:	08005c25 	.word	0x08005c25
 800583c:	08005c25 	.word	0x08005c25
 8005840:	08005865 	.word	0x08005865
 8005844:	08005c25 	.word	0x08005c25
 8005848:	08005c25 	.word	0x08005c25
 800584c:	08005c25 	.word	0x08005c25
 8005850:	08005a55 	.word	0x08005a55
 8005854:	4bb9      	ldr	r3, [pc, #740]	; (8005b3c <HAL_RCC_GetSysClockFreq+0x358>)
 8005856:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800585a:	e1e7      	b.n	8005c2c <HAL_RCC_GetSysClockFreq+0x448>
 800585c:	4bb8      	ldr	r3, [pc, #736]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x35c>)
 800585e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005862:	e1e3      	b.n	8005c2c <HAL_RCC_GetSysClockFreq+0x448>
 8005864:	4bb4      	ldr	r3, [pc, #720]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x354>)
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800586c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005870:	4bb1      	ldr	r3, [pc, #708]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x354>)
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d071      	beq.n	8005960 <HAL_RCC_GetSysClockFreq+0x17c>
 800587c:	4bae      	ldr	r3, [pc, #696]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x354>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	099b      	lsrs	r3, r3, #6
 8005882:	2200      	movs	r2, #0
 8005884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005888:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800588c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005894:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005898:	2300      	movs	r3, #0
 800589a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800589e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80058a2:	4622      	mov	r2, r4
 80058a4:	462b      	mov	r3, r5
 80058a6:	f04f 0000 	mov.w	r0, #0
 80058aa:	f04f 0100 	mov.w	r1, #0
 80058ae:	0159      	lsls	r1, r3, #5
 80058b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058b4:	0150      	lsls	r0, r2, #5
 80058b6:	4602      	mov	r2, r0
 80058b8:	460b      	mov	r3, r1
 80058ba:	4621      	mov	r1, r4
 80058bc:	1a51      	subs	r1, r2, r1
 80058be:	6439      	str	r1, [r7, #64]	; 0x40
 80058c0:	4629      	mov	r1, r5
 80058c2:	eb63 0301 	sbc.w	r3, r3, r1
 80058c6:	647b      	str	r3, [r7, #68]	; 0x44
 80058c8:	f04f 0200 	mov.w	r2, #0
 80058cc:	f04f 0300 	mov.w	r3, #0
 80058d0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80058d4:	4649      	mov	r1, r9
 80058d6:	018b      	lsls	r3, r1, #6
 80058d8:	4641      	mov	r1, r8
 80058da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058de:	4641      	mov	r1, r8
 80058e0:	018a      	lsls	r2, r1, #6
 80058e2:	4641      	mov	r1, r8
 80058e4:	1a51      	subs	r1, r2, r1
 80058e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80058e8:	4649      	mov	r1, r9
 80058ea:	eb63 0301 	sbc.w	r3, r3, r1
 80058ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058f0:	f04f 0200 	mov.w	r2, #0
 80058f4:	f04f 0300 	mov.w	r3, #0
 80058f8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80058fc:	4649      	mov	r1, r9
 80058fe:	00cb      	lsls	r3, r1, #3
 8005900:	4641      	mov	r1, r8
 8005902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005906:	4641      	mov	r1, r8
 8005908:	00ca      	lsls	r2, r1, #3
 800590a:	4610      	mov	r0, r2
 800590c:	4619      	mov	r1, r3
 800590e:	4603      	mov	r3, r0
 8005910:	4622      	mov	r2, r4
 8005912:	189b      	adds	r3, r3, r2
 8005914:	633b      	str	r3, [r7, #48]	; 0x30
 8005916:	462b      	mov	r3, r5
 8005918:	460a      	mov	r2, r1
 800591a:	eb42 0303 	adc.w	r3, r2, r3
 800591e:	637b      	str	r3, [r7, #52]	; 0x34
 8005920:	f04f 0200 	mov.w	r2, #0
 8005924:	f04f 0300 	mov.w	r3, #0
 8005928:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800592c:	4629      	mov	r1, r5
 800592e:	024b      	lsls	r3, r1, #9
 8005930:	4621      	mov	r1, r4
 8005932:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005936:	4621      	mov	r1, r4
 8005938:	024a      	lsls	r2, r1, #9
 800593a:	4610      	mov	r0, r2
 800593c:	4619      	mov	r1, r3
 800593e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005942:	2200      	movs	r2, #0
 8005944:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005948:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800594c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005950:	f7fb f9ba 	bl	8000cc8 <__aeabi_uldivmod>
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	4613      	mov	r3, r2
 800595a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800595e:	e067      	b.n	8005a30 <HAL_RCC_GetSysClockFreq+0x24c>
 8005960:	4b75      	ldr	r3, [pc, #468]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x354>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	099b      	lsrs	r3, r3, #6
 8005966:	2200      	movs	r2, #0
 8005968:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800596c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005970:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005978:	67bb      	str	r3, [r7, #120]	; 0x78
 800597a:	2300      	movs	r3, #0
 800597c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800597e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005982:	4622      	mov	r2, r4
 8005984:	462b      	mov	r3, r5
 8005986:	f04f 0000 	mov.w	r0, #0
 800598a:	f04f 0100 	mov.w	r1, #0
 800598e:	0159      	lsls	r1, r3, #5
 8005990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005994:	0150      	lsls	r0, r2, #5
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	4621      	mov	r1, r4
 800599c:	1a51      	subs	r1, r2, r1
 800599e:	62b9      	str	r1, [r7, #40]	; 0x28
 80059a0:	4629      	mov	r1, r5
 80059a2:	eb63 0301 	sbc.w	r3, r3, r1
 80059a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059a8:	f04f 0200 	mov.w	r2, #0
 80059ac:	f04f 0300 	mov.w	r3, #0
 80059b0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80059b4:	4649      	mov	r1, r9
 80059b6:	018b      	lsls	r3, r1, #6
 80059b8:	4641      	mov	r1, r8
 80059ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059be:	4641      	mov	r1, r8
 80059c0:	018a      	lsls	r2, r1, #6
 80059c2:	4641      	mov	r1, r8
 80059c4:	ebb2 0a01 	subs.w	sl, r2, r1
 80059c8:	4649      	mov	r1, r9
 80059ca:	eb63 0b01 	sbc.w	fp, r3, r1
 80059ce:	f04f 0200 	mov.w	r2, #0
 80059d2:	f04f 0300 	mov.w	r3, #0
 80059d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059e2:	4692      	mov	sl, r2
 80059e4:	469b      	mov	fp, r3
 80059e6:	4623      	mov	r3, r4
 80059e8:	eb1a 0303 	adds.w	r3, sl, r3
 80059ec:	623b      	str	r3, [r7, #32]
 80059ee:	462b      	mov	r3, r5
 80059f0:	eb4b 0303 	adc.w	r3, fp, r3
 80059f4:	627b      	str	r3, [r7, #36]	; 0x24
 80059f6:	f04f 0200 	mov.w	r2, #0
 80059fa:	f04f 0300 	mov.w	r3, #0
 80059fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005a02:	4629      	mov	r1, r5
 8005a04:	028b      	lsls	r3, r1, #10
 8005a06:	4621      	mov	r1, r4
 8005a08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a0c:	4621      	mov	r1, r4
 8005a0e:	028a      	lsls	r2, r1, #10
 8005a10:	4610      	mov	r0, r2
 8005a12:	4619      	mov	r1, r3
 8005a14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a18:	2200      	movs	r2, #0
 8005a1a:	673b      	str	r3, [r7, #112]	; 0x70
 8005a1c:	677a      	str	r2, [r7, #116]	; 0x74
 8005a1e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005a22:	f7fb f951 	bl	8000cc8 <__aeabi_uldivmod>
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a30:	4b41      	ldr	r3, [pc, #260]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	0c1b      	lsrs	r3, r3, #16
 8005a36:	f003 0303 	and.w	r3, r3, #3
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a52:	e0eb      	b.n	8005c2c <HAL_RCC_GetSysClockFreq+0x448>
 8005a54:	4b38      	ldr	r3, [pc, #224]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a60:	4b35      	ldr	r3, [pc, #212]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d06b      	beq.n	8005b44 <HAL_RCC_GetSysClockFreq+0x360>
 8005a6c:	4b32      	ldr	r3, [pc, #200]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	099b      	lsrs	r3, r3, #6
 8005a72:	2200      	movs	r2, #0
 8005a74:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a7e:	663b      	str	r3, [r7, #96]	; 0x60
 8005a80:	2300      	movs	r3, #0
 8005a82:	667b      	str	r3, [r7, #100]	; 0x64
 8005a84:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005a88:	4622      	mov	r2, r4
 8005a8a:	462b      	mov	r3, r5
 8005a8c:	f04f 0000 	mov.w	r0, #0
 8005a90:	f04f 0100 	mov.w	r1, #0
 8005a94:	0159      	lsls	r1, r3, #5
 8005a96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a9a:	0150      	lsls	r0, r2, #5
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4621      	mov	r1, r4
 8005aa2:	1a51      	subs	r1, r2, r1
 8005aa4:	61b9      	str	r1, [r7, #24]
 8005aa6:	4629      	mov	r1, r5
 8005aa8:	eb63 0301 	sbc.w	r3, r3, r1
 8005aac:	61fb      	str	r3, [r7, #28]
 8005aae:	f04f 0200 	mov.w	r2, #0
 8005ab2:	f04f 0300 	mov.w	r3, #0
 8005ab6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005aba:	4659      	mov	r1, fp
 8005abc:	018b      	lsls	r3, r1, #6
 8005abe:	4651      	mov	r1, sl
 8005ac0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ac4:	4651      	mov	r1, sl
 8005ac6:	018a      	lsls	r2, r1, #6
 8005ac8:	4651      	mov	r1, sl
 8005aca:	ebb2 0801 	subs.w	r8, r2, r1
 8005ace:	4659      	mov	r1, fp
 8005ad0:	eb63 0901 	sbc.w	r9, r3, r1
 8005ad4:	f04f 0200 	mov.w	r2, #0
 8005ad8:	f04f 0300 	mov.w	r3, #0
 8005adc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ae0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ae4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ae8:	4690      	mov	r8, r2
 8005aea:	4699      	mov	r9, r3
 8005aec:	4623      	mov	r3, r4
 8005aee:	eb18 0303 	adds.w	r3, r8, r3
 8005af2:	613b      	str	r3, [r7, #16]
 8005af4:	462b      	mov	r3, r5
 8005af6:	eb49 0303 	adc.w	r3, r9, r3
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	f04f 0300 	mov.w	r3, #0
 8005b04:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005b08:	4629      	mov	r1, r5
 8005b0a:	024b      	lsls	r3, r1, #9
 8005b0c:	4621      	mov	r1, r4
 8005b0e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b12:	4621      	mov	r1, r4
 8005b14:	024a      	lsls	r2, r1, #9
 8005b16:	4610      	mov	r0, r2
 8005b18:	4619      	mov	r1, r3
 8005b1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b1e:	2200      	movs	r2, #0
 8005b20:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b22:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005b24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b28:	f7fb f8ce 	bl	8000cc8 <__aeabi_uldivmod>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	4613      	mov	r3, r2
 8005b32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b36:	e065      	b.n	8005c04 <HAL_RCC_GetSysClockFreq+0x420>
 8005b38:	40023800 	.word	0x40023800
 8005b3c:	00f42400 	.word	0x00f42400
 8005b40:	007a1200 	.word	0x007a1200
 8005b44:	4b3d      	ldr	r3, [pc, #244]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x458>)
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	099b      	lsrs	r3, r3, #6
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	4611      	mov	r1, r2
 8005b50:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b54:	653b      	str	r3, [r7, #80]	; 0x50
 8005b56:	2300      	movs	r3, #0
 8005b58:	657b      	str	r3, [r7, #84]	; 0x54
 8005b5a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005b5e:	4642      	mov	r2, r8
 8005b60:	464b      	mov	r3, r9
 8005b62:	f04f 0000 	mov.w	r0, #0
 8005b66:	f04f 0100 	mov.w	r1, #0
 8005b6a:	0159      	lsls	r1, r3, #5
 8005b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b70:	0150      	lsls	r0, r2, #5
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	4641      	mov	r1, r8
 8005b78:	1a51      	subs	r1, r2, r1
 8005b7a:	60b9      	str	r1, [r7, #8]
 8005b7c:	4649      	mov	r1, r9
 8005b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	f04f 0200 	mov.w	r2, #0
 8005b88:	f04f 0300 	mov.w	r3, #0
 8005b8c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005b90:	4659      	mov	r1, fp
 8005b92:	018b      	lsls	r3, r1, #6
 8005b94:	4651      	mov	r1, sl
 8005b96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b9a:	4651      	mov	r1, sl
 8005b9c:	018a      	lsls	r2, r1, #6
 8005b9e:	4651      	mov	r1, sl
 8005ba0:	1a54      	subs	r4, r2, r1
 8005ba2:	4659      	mov	r1, fp
 8005ba4:	eb63 0501 	sbc.w	r5, r3, r1
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	f04f 0300 	mov.w	r3, #0
 8005bb0:	00eb      	lsls	r3, r5, #3
 8005bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bb6:	00e2      	lsls	r2, r4, #3
 8005bb8:	4614      	mov	r4, r2
 8005bba:	461d      	mov	r5, r3
 8005bbc:	4643      	mov	r3, r8
 8005bbe:	18e3      	adds	r3, r4, r3
 8005bc0:	603b      	str	r3, [r7, #0]
 8005bc2:	464b      	mov	r3, r9
 8005bc4:	eb45 0303 	adc.w	r3, r5, r3
 8005bc8:	607b      	str	r3, [r7, #4]
 8005bca:	f04f 0200 	mov.w	r2, #0
 8005bce:	f04f 0300 	mov.w	r3, #0
 8005bd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	028b      	lsls	r3, r1, #10
 8005bda:	4621      	mov	r1, r4
 8005bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005be0:	4621      	mov	r1, r4
 8005be2:	028a      	lsls	r2, r1, #10
 8005be4:	4610      	mov	r0, r2
 8005be6:	4619      	mov	r1, r3
 8005be8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bec:	2200      	movs	r2, #0
 8005bee:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bf0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005bf2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005bf6:	f7fb f867 	bl	8000cc8 <__aeabi_uldivmod>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	4613      	mov	r3, r2
 8005c00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c04:	4b0d      	ldr	r3, [pc, #52]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x458>)
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	0f1b      	lsrs	r3, r3, #28
 8005c0a:	f003 0307 	and.w	r3, r3, #7
 8005c0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c22:	e003      	b.n	8005c2c <HAL_RCC_GetSysClockFreq+0x448>
 8005c24:	4b06      	ldr	r3, [pc, #24]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005c26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c2a:	bf00      	nop
 8005c2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005c30:	4618      	mov	r0, r3
 8005c32:	37b8      	adds	r7, #184	; 0xb8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c3a:	bf00      	nop
 8005c3c:	40023800 	.word	0x40023800
 8005c40:	00f42400 	.word	0x00f42400

08005c44 <HAL_RCC_OscConfig>:
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <HAL_RCC_OscConfig+0x12>
 8005c52:	2301      	movs	r3, #1
 8005c54:	e28d      	b.n	8006172 <HAL_RCC_OscConfig+0x52e>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 8083 	beq.w	8005d6a <HAL_RCC_OscConfig+0x126>
 8005c64:	4b94      	ldr	r3, [pc, #592]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f003 030c 	and.w	r3, r3, #12
 8005c6c:	2b04      	cmp	r3, #4
 8005c6e:	d019      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x60>
 8005c70:	4b91      	ldr	r3, [pc, #580]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f003 030c 	and.w	r3, r3, #12
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d106      	bne.n	8005c8a <HAL_RCC_OscConfig+0x46>
 8005c7c:	4b8e      	ldr	r3, [pc, #568]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c88:	d00c      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x60>
 8005c8a:	4b8b      	ldr	r3, [pc, #556]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f003 030c 	and.w	r3, r3, #12
 8005c92:	2b0c      	cmp	r3, #12
 8005c94:	d112      	bne.n	8005cbc <HAL_RCC_OscConfig+0x78>
 8005c96:	4b88      	ldr	r3, [pc, #544]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ca2:	d10b      	bne.n	8005cbc <HAL_RCC_OscConfig+0x78>
 8005ca4:	4b84      	ldr	r3, [pc, #528]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d05b      	beq.n	8005d68 <HAL_RCC_OscConfig+0x124>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d157      	bne.n	8005d68 <HAL_RCC_OscConfig+0x124>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e25a      	b.n	8006172 <HAL_RCC_OscConfig+0x52e>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc4:	d106      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x90>
 8005cc6:	4b7c      	ldr	r3, [pc, #496]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a7b      	ldr	r2, [pc, #492]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cd0:	6013      	str	r3, [r2, #0]
 8005cd2:	e01d      	b.n	8005d10 <HAL_RCC_OscConfig+0xcc>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cdc:	d10c      	bne.n	8005cf8 <HAL_RCC_OscConfig+0xb4>
 8005cde:	4b76      	ldr	r3, [pc, #472]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a75      	ldr	r2, [pc, #468]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ce8:	6013      	str	r3, [r2, #0]
 8005cea:	4b73      	ldr	r3, [pc, #460]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a72      	ldr	r2, [pc, #456]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	e00b      	b.n	8005d10 <HAL_RCC_OscConfig+0xcc>
 8005cf8:	4b6f      	ldr	r3, [pc, #444]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a6e      	ldr	r2, [pc, #440]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d02:	6013      	str	r3, [r2, #0]
 8005d04:	4b6c      	ldr	r3, [pc, #432]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a6b      	ldr	r2, [pc, #428]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d013      	beq.n	8005d40 <HAL_RCC_OscConfig+0xfc>
 8005d18:	f7fe fbd2 	bl	80044c0 <HAL_GetTick>
 8005d1c:	6138      	str	r0, [r7, #16]
 8005d1e:	e008      	b.n	8005d32 <HAL_RCC_OscConfig+0xee>
 8005d20:	f7fe fbce 	bl	80044c0 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	2b64      	cmp	r3, #100	; 0x64
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCC_OscConfig+0xee>
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e21f      	b.n	8006172 <HAL_RCC_OscConfig+0x52e>
 8005d32:	4b61      	ldr	r3, [pc, #388]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d0f0      	beq.n	8005d20 <HAL_RCC_OscConfig+0xdc>
 8005d3e:	e014      	b.n	8005d6a <HAL_RCC_OscConfig+0x126>
 8005d40:	f7fe fbbe 	bl	80044c0 <HAL_GetTick>
 8005d44:	6138      	str	r0, [r7, #16]
 8005d46:	e008      	b.n	8005d5a <HAL_RCC_OscConfig+0x116>
 8005d48:	f7fe fbba 	bl	80044c0 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b64      	cmp	r3, #100	; 0x64
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0x116>
 8005d56:	2303      	movs	r3, #3
 8005d58:	e20b      	b.n	8006172 <HAL_RCC_OscConfig+0x52e>
 8005d5a:	4b57      	ldr	r3, [pc, #348]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1f0      	bne.n	8005d48 <HAL_RCC_OscConfig+0x104>
 8005d66:	e000      	b.n	8005d6a <HAL_RCC_OscConfig+0x126>
 8005d68:	bf00      	nop
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d06f      	beq.n	8005e56 <HAL_RCC_OscConfig+0x212>
 8005d76:	4b50      	ldr	r3, [pc, #320]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 030c 	and.w	r3, r3, #12
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d017      	beq.n	8005db2 <HAL_RCC_OscConfig+0x16e>
 8005d82:	4b4d      	ldr	r3, [pc, #308]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f003 030c 	and.w	r3, r3, #12
 8005d8a:	2b08      	cmp	r3, #8
 8005d8c:	d105      	bne.n	8005d9a <HAL_RCC_OscConfig+0x156>
 8005d8e:	4b4a      	ldr	r3, [pc, #296]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00b      	beq.n	8005db2 <HAL_RCC_OscConfig+0x16e>
 8005d9a:	4b47      	ldr	r3, [pc, #284]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f003 030c 	and.w	r3, r3, #12
 8005da2:	2b0c      	cmp	r3, #12
 8005da4:	d11c      	bne.n	8005de0 <HAL_RCC_OscConfig+0x19c>
 8005da6:	4b44      	ldr	r3, [pc, #272]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d116      	bne.n	8005de0 <HAL_RCC_OscConfig+0x19c>
 8005db2:	4b41      	ldr	r3, [pc, #260]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d005      	beq.n	8005dca <HAL_RCC_OscConfig+0x186>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d001      	beq.n	8005dca <HAL_RCC_OscConfig+0x186>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e1d3      	b.n	8006172 <HAL_RCC_OscConfig+0x52e>
 8005dca:	4b3b      	ldr	r3, [pc, #236]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	4937      	ldr	r1, [pc, #220]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	600b      	str	r3, [r1, #0]
 8005dde:	e03a      	b.n	8005e56 <HAL_RCC_OscConfig+0x212>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d020      	beq.n	8005e2a <HAL_RCC_OscConfig+0x1e6>
 8005de8:	4b34      	ldr	r3, [pc, #208]	; (8005ebc <HAL_RCC_OscConfig+0x278>)
 8005dea:	2201      	movs	r2, #1
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	f7fe fb67 	bl	80044c0 <HAL_GetTick>
 8005df2:	6138      	str	r0, [r7, #16]
 8005df4:	e008      	b.n	8005e08 <HAL_RCC_OscConfig+0x1c4>
 8005df6:	f7fe fb63 	bl	80044c0 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d901      	bls.n	8005e08 <HAL_RCC_OscConfig+0x1c4>
 8005e04:	2303      	movs	r3, #3
 8005e06:	e1b4      	b.n	8006172 <HAL_RCC_OscConfig+0x52e>
 8005e08:	4b2b      	ldr	r3, [pc, #172]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0f0      	beq.n	8005df6 <HAL_RCC_OscConfig+0x1b2>
 8005e14:	4b28      	ldr	r3, [pc, #160]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	00db      	lsls	r3, r3, #3
 8005e22:	4925      	ldr	r1, [pc, #148]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	600b      	str	r3, [r1, #0]
 8005e28:	e015      	b.n	8005e56 <HAL_RCC_OscConfig+0x212>
 8005e2a:	4b24      	ldr	r3, [pc, #144]	; (8005ebc <HAL_RCC_OscConfig+0x278>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	f7fe fb46 	bl	80044c0 <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0x206>
 8005e38:	f7fe fb42 	bl	80044c0 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x206>
 8005e46:	2303      	movs	r3, #3
 8005e48:	e193      	b.n	8006172 <HAL_RCC_OscConfig+0x52e>
 8005e4a:	4b1b      	ldr	r3, [pc, #108]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1f0      	bne.n	8005e38 <HAL_RCC_OscConfig+0x1f4>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d036      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x28c>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d016      	beq.n	8005e98 <HAL_RCC_OscConfig+0x254>
 8005e6a:	4b15      	ldr	r3, [pc, #84]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	f7fe fb26 	bl	80044c0 <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0x246>
 8005e78:	f7fe fb22 	bl	80044c0 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0x246>
 8005e86:	2303      	movs	r3, #3
 8005e88:	e173      	b.n	8006172 <HAL_RCC_OscConfig+0x52e>
 8005e8a:	4b0b      	ldr	r3, [pc, #44]	; (8005eb8 <HAL_RCC_OscConfig+0x274>)
 8005e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d0f0      	beq.n	8005e78 <HAL_RCC_OscConfig+0x234>
 8005e96:	e01b      	b.n	8005ed0 <HAL_RCC_OscConfig+0x28c>
 8005e98:	4b09      	ldr	r3, [pc, #36]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	601a      	str	r2, [r3, #0]
 8005e9e:	f7fe fb0f 	bl	80044c0 <HAL_GetTick>
 8005ea2:	6138      	str	r0, [r7, #16]
 8005ea4:	e00e      	b.n	8005ec4 <HAL_RCC_OscConfig+0x280>
 8005ea6:	f7fe fb0b 	bl	80044c0 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d907      	bls.n	8005ec4 <HAL_RCC_OscConfig+0x280>
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e15c      	b.n	8006172 <HAL_RCC_OscConfig+0x52e>
 8005eb8:	40023800 	.word	0x40023800
 8005ebc:	42470000 	.word	0x42470000
 8005ec0:	42470e80 	.word	0x42470e80
 8005ec4:	4b8a      	ldr	r3, [pc, #552]	; (80060f0 <HAL_RCC_OscConfig+0x4ac>)
 8005ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1ea      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x262>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0304 	and.w	r3, r3, #4
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 8097 	beq.w	800600c <HAL_RCC_OscConfig+0x3c8>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	75fb      	strb	r3, [r7, #23]
 8005ee2:	4b83      	ldr	r3, [pc, #524]	; (80060f0 <HAL_RCC_OscConfig+0x4ac>)
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10f      	bne.n	8005f0e <HAL_RCC_OscConfig+0x2ca>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60bb      	str	r3, [r7, #8]
 8005ef2:	4b7f      	ldr	r3, [pc, #508]	; (80060f0 <HAL_RCC_OscConfig+0x4ac>)
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	4a7e      	ldr	r2, [pc, #504]	; (80060f0 <HAL_RCC_OscConfig+0x4ac>)
 8005ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005efc:	6413      	str	r3, [r2, #64]	; 0x40
 8005efe:	4b7c      	ldr	r3, [pc, #496]	; (80060f0 <HAL_RCC_OscConfig+0x4ac>)
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f06:	60bb      	str	r3, [r7, #8]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	75fb      	strb	r3, [r7, #23]
 8005f0e:	4b79      	ldr	r3, [pc, #484]	; (80060f4 <HAL_RCC_OscConfig+0x4b0>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d118      	bne.n	8005f4c <HAL_RCC_OscConfig+0x308>
 8005f1a:	4b76      	ldr	r3, [pc, #472]	; (80060f4 <HAL_RCC_OscConfig+0x4b0>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a75      	ldr	r2, [pc, #468]	; (80060f4 <HAL_RCC_OscConfig+0x4b0>)
 8005f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	f7fe facb 	bl	80044c0 <HAL_GetTick>
 8005f2a:	6138      	str	r0, [r7, #16]
 8005f2c:	e008      	b.n	8005f40 <HAL_RCC_OscConfig+0x2fc>
 8005f2e:	f7fe fac7 	bl	80044c0 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d901      	bls.n	8005f40 <HAL_RCC_OscConfig+0x2fc>
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e118      	b.n	8006172 <HAL_RCC_OscConfig+0x52e>
 8005f40:	4b6c      	ldr	r3, [pc, #432]	; (80060f4 <HAL_RCC_OscConfig+0x4b0>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d0f0      	beq.n	8005f2e <HAL_RCC_OscConfig+0x2ea>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d106      	bne.n	8005f62 <HAL_RCC_OscConfig+0x31e>
 8005f54:	4b66      	ldr	r3, [pc, #408]	; (80060f0 <HAL_RCC_OscConfig+0x4ac>)
 8005f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f58:	4a65      	ldr	r2, [pc, #404]	; (80060f0 <HAL_RCC_OscConfig+0x4ac>)
 8005f5a:	f043 0301 	orr.w	r3, r3, #1
 8005f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f60:	e01c      	b.n	8005f9c <HAL_RCC_OscConfig+0x358>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	2b05      	cmp	r3, #5
 8005f68:	d10c      	bne.n	8005f84 <HAL_RCC_OscConfig+0x340>
 8005f6a:	4b61      	ldr	r3, [pc, #388]	; (80060f0 <HAL_RCC_OscConfig+0x4ac>)
 8005f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6e:	4a60      	ldr	r2, [pc, #384]	; (80060f0 <HAL_RCC_OscConfig+0x4ac>)
 8005f70:	f043 0304 	orr.w	r3, r3, #4
 8005f74:	6713      	str	r3, [r2, #112]	; 0x70
 8005f76:	4b5e      	ldr	r3, [pc, #376]	; (80060f0 <HAL_RCC_OscConfig+0x4ac>)
 8005f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7a:	4a5d      	ldr	r2, [pc, #372]	; (80060f0 <HAL_RCC_OscConfig+0x4ac>)
 8005f7c:	f043 0301 	orr.w	r3, r3, #1
 8005f80:	6713      	str	r3, [r2, #112]	; 0x70
 8005f82:	e00b      	b.n	8005f9c <HAL_RCC_OscConfig+0x358>
 8005f84:	4b5a      	ldr	r3, [pc, #360]	; (80060f0 <HAL_RCC_OscConfig+0x4ac>)
 8005f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f88:	4a59      	ldr	r2, [pc, #356]	; (80060f0 <HAL_RCC_OscConfig+0x4ac>)
 8005f8a:	f023 0301 	bic.w	r3, r3, #1
 8005f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f90:	4b57      	ldr	r3, [pc, #348]	; (80060f0 <HAL_RCC_OscConfig+0x4ac>)
 8005f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f94:	4a56      	ldr	r2, [pc, #344]	; (80060f0 <HAL_RCC_OscConfig+0x4ac>)
 8005f96:	f023 0304 	bic.w	r3, r3, #4
 8005f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d015      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x38c>
 8005fa4:	f7fe fa8c 	bl	80044c0 <HAL_GetTick>
 8005fa8:	6138      	str	r0, [r7, #16]
 8005faa:	e00a      	b.n	8005fc2 <HAL_RCC_OscConfig+0x37e>
 8005fac:	f7fe fa88 	bl	80044c0 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x37e>
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e0d7      	b.n	8006172 <HAL_RCC_OscConfig+0x52e>
 8005fc2:	4b4b      	ldr	r3, [pc, #300]	; (80060f0 <HAL_RCC_OscConfig+0x4ac>)
 8005fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0ee      	beq.n	8005fac <HAL_RCC_OscConfig+0x368>
 8005fce:	e014      	b.n	8005ffa <HAL_RCC_OscConfig+0x3b6>
 8005fd0:	f7fe fa76 	bl	80044c0 <HAL_GetTick>
 8005fd4:	6138      	str	r0, [r7, #16]
 8005fd6:	e00a      	b.n	8005fee <HAL_RCC_OscConfig+0x3aa>
 8005fd8:	f7fe fa72 	bl	80044c0 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d901      	bls.n	8005fee <HAL_RCC_OscConfig+0x3aa>
 8005fea:	2303      	movs	r3, #3
 8005fec:	e0c1      	b.n	8006172 <HAL_RCC_OscConfig+0x52e>
 8005fee:	4b40      	ldr	r3, [pc, #256]	; (80060f0 <HAL_RCC_OscConfig+0x4ac>)
 8005ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1ee      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x394>
 8005ffa:	7dfb      	ldrb	r3, [r7, #23]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d105      	bne.n	800600c <HAL_RCC_OscConfig+0x3c8>
 8006000:	4b3b      	ldr	r3, [pc, #236]	; (80060f0 <HAL_RCC_OscConfig+0x4ac>)
 8006002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006004:	4a3a      	ldr	r2, [pc, #232]	; (80060f0 <HAL_RCC_OscConfig+0x4ac>)
 8006006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800600a:	6413      	str	r3, [r2, #64]	; 0x40
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 80ad 	beq.w	8006170 <HAL_RCC_OscConfig+0x52c>
 8006016:	4b36      	ldr	r3, [pc, #216]	; (80060f0 <HAL_RCC_OscConfig+0x4ac>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 030c 	and.w	r3, r3, #12
 800601e:	2b08      	cmp	r3, #8
 8006020:	d060      	beq.n	80060e4 <HAL_RCC_OscConfig+0x4a0>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	2b02      	cmp	r3, #2
 8006028:	d145      	bne.n	80060b6 <HAL_RCC_OscConfig+0x472>
 800602a:	4b33      	ldr	r3, [pc, #204]	; (80060f8 <HAL_RCC_OscConfig+0x4b4>)
 800602c:	2200      	movs	r2, #0
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	f7fe fa46 	bl	80044c0 <HAL_GetTick>
 8006034:	6138      	str	r0, [r7, #16]
 8006036:	e008      	b.n	800604a <HAL_RCC_OscConfig+0x406>
 8006038:	f7fe fa42 	bl	80044c0 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b02      	cmp	r3, #2
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0x406>
 8006046:	2303      	movs	r3, #3
 8006048:	e093      	b.n	8006172 <HAL_RCC_OscConfig+0x52e>
 800604a:	4b29      	ldr	r3, [pc, #164]	; (80060f0 <HAL_RCC_OscConfig+0x4ac>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1f0      	bne.n	8006038 <HAL_RCC_OscConfig+0x3f4>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	69da      	ldr	r2, [r3, #28]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	019b      	lsls	r3, r3, #6
 8006066:	431a      	orrs	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606c:	085b      	lsrs	r3, r3, #1
 800606e:	3b01      	subs	r3, #1
 8006070:	041b      	lsls	r3, r3, #16
 8006072:	431a      	orrs	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006078:	061b      	lsls	r3, r3, #24
 800607a:	431a      	orrs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006080:	071b      	lsls	r3, r3, #28
 8006082:	491b      	ldr	r1, [pc, #108]	; (80060f0 <HAL_RCC_OscConfig+0x4ac>)
 8006084:	4313      	orrs	r3, r2
 8006086:	604b      	str	r3, [r1, #4]
 8006088:	4b1b      	ldr	r3, [pc, #108]	; (80060f8 <HAL_RCC_OscConfig+0x4b4>)
 800608a:	2201      	movs	r2, #1
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	f7fe fa17 	bl	80044c0 <HAL_GetTick>
 8006092:	6138      	str	r0, [r7, #16]
 8006094:	e008      	b.n	80060a8 <HAL_RCC_OscConfig+0x464>
 8006096:	f7fe fa13 	bl	80044c0 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d901      	bls.n	80060a8 <HAL_RCC_OscConfig+0x464>
 80060a4:	2303      	movs	r3, #3
 80060a6:	e064      	b.n	8006172 <HAL_RCC_OscConfig+0x52e>
 80060a8:	4b11      	ldr	r3, [pc, #68]	; (80060f0 <HAL_RCC_OscConfig+0x4ac>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0f0      	beq.n	8006096 <HAL_RCC_OscConfig+0x452>
 80060b4:	e05c      	b.n	8006170 <HAL_RCC_OscConfig+0x52c>
 80060b6:	4b10      	ldr	r3, [pc, #64]	; (80060f8 <HAL_RCC_OscConfig+0x4b4>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	f7fe fa00 	bl	80044c0 <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]
 80060c2:	e008      	b.n	80060d6 <HAL_RCC_OscConfig+0x492>
 80060c4:	f7fe f9fc 	bl	80044c0 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x492>
 80060d2:	2303      	movs	r3, #3
 80060d4:	e04d      	b.n	8006172 <HAL_RCC_OscConfig+0x52e>
 80060d6:	4b06      	ldr	r3, [pc, #24]	; (80060f0 <HAL_RCC_OscConfig+0x4ac>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1f0      	bne.n	80060c4 <HAL_RCC_OscConfig+0x480>
 80060e2:	e045      	b.n	8006170 <HAL_RCC_OscConfig+0x52c>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d107      	bne.n	80060fc <HAL_RCC_OscConfig+0x4b8>
 80060ec:	2301      	movs	r3, #1
 80060ee:	e040      	b.n	8006172 <HAL_RCC_OscConfig+0x52e>
 80060f0:	40023800 	.word	0x40023800
 80060f4:	40007000 	.word	0x40007000
 80060f8:	42470060 	.word	0x42470060
 80060fc:	4b1f      	ldr	r3, [pc, #124]	; (800617c <HAL_RCC_OscConfig+0x538>)
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	60fb      	str	r3, [r7, #12]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d030      	beq.n	800616c <HAL_RCC_OscConfig+0x528>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	429a      	cmp	r2, r3
 8006116:	d129      	bne.n	800616c <HAL_RCC_OscConfig+0x528>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	429a      	cmp	r2, r3
 8006124:	d122      	bne.n	800616c <HAL_RCC_OscConfig+0x528>
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800612c:	4013      	ands	r3, r2
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006132:	0192      	lsls	r2, r2, #6
 8006134:	4293      	cmp	r3, r2
 8006136:	d119      	bne.n	800616c <HAL_RCC_OscConfig+0x528>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006142:	085b      	lsrs	r3, r3, #1
 8006144:	3b01      	subs	r3, #1
 8006146:	041b      	lsls	r3, r3, #16
 8006148:	429a      	cmp	r2, r3
 800614a:	d10f      	bne.n	800616c <HAL_RCC_OscConfig+0x528>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006156:	061b      	lsls	r3, r3, #24
 8006158:	429a      	cmp	r2, r3
 800615a:	d107      	bne.n	800616c <HAL_RCC_OscConfig+0x528>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006166:	071b      	lsls	r3, r3, #28
 8006168:	429a      	cmp	r2, r3
 800616a:	d001      	beq.n	8006170 <HAL_RCC_OscConfig+0x52c>
 800616c:	2301      	movs	r3, #1
 800616e:	e000      	b.n	8006172 <HAL_RCC_OscConfig+0x52e>
 8006170:	2300      	movs	r3, #0
 8006172:	4618      	mov	r0, r3
 8006174:	3718      	adds	r7, #24
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	40023800 	.word	0x40023800

08006180 <HAL_SPI_Init>:
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_SPI_Init+0x12>
 800618e:	2301      	movs	r3, #1
 8006190:	e07b      	b.n	800628a <HAL_SPI_Init+0x10a>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	2b00      	cmp	r3, #0
 8006198:	d108      	bne.n	80061ac <HAL_SPI_Init+0x2c>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061a2:	d009      	beq.n	80061b8 <HAL_SPI_Init+0x38>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	61da      	str	r2, [r3, #28]
 80061aa:	e005      	b.n	80061b8 <HAL_SPI_Init+0x38>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	611a      	str	r2, [r3, #16]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	615a      	str	r2, [r3, #20]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	629a      	str	r2, [r3, #40]	; 0x28
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d106      	bne.n	80061d8 <HAL_SPI_Init+0x58>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7fd ff2a 	bl	800402c <HAL_SPI_MspInit>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006200:	431a      	orrs	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800620a:	431a      	orrs	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	431a      	orrs	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	431a      	orrs	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006228:	431a      	orrs	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006232:	431a      	orrs	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800623c:	ea42 0103 	orr.w	r1, r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006244:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	0c1b      	lsrs	r3, r3, #16
 8006256:	f003 0104 	and.w	r1, r3, #4
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	f003 0210 	and.w	r2, r3, #16
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	430a      	orrs	r2, r1
 8006268:	605a      	str	r2, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69da      	ldr	r2, [r3, #28]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006278:	61da      	str	r2, [r3, #28]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	655a      	str	r2, [r3, #84]	; 0x54
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006288:	2300      	movs	r3, #0
 800628a:	4618      	mov	r0, r3
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <HAL_SPI_Transmit>:
 8006292:	b580      	push	{r7, lr}
 8006294:	b088      	sub	sp, #32
 8006296:	af00      	add	r7, sp, #0
 8006298:	60f8      	str	r0, [r7, #12]
 800629a:	60b9      	str	r1, [r7, #8]
 800629c:	603b      	str	r3, [r7, #0]
 800629e:	4613      	mov	r3, r2
 80062a0:	80fb      	strh	r3, [r7, #6]
 80062a2:	2300      	movs	r3, #0
 80062a4:	77fb      	strb	r3, [r7, #31]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_SPI_Transmit+0x22>
 80062b0:	2302      	movs	r3, #2
 80062b2:	e126      	b.n	8006502 <HAL_SPI_Transmit+0x270>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80062bc:	f7fe f900 	bl	80044c0 <HAL_GetTick>
 80062c0:	61b8      	str	r0, [r7, #24]
 80062c2:	88fb      	ldrh	r3, [r7, #6]
 80062c4:	82fb      	strh	r3, [r7, #22]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d002      	beq.n	80062d8 <HAL_SPI_Transmit+0x46>
 80062d2:	2302      	movs	r3, #2
 80062d4:	77fb      	strb	r3, [r7, #31]
 80062d6:	e10b      	b.n	80064f0 <HAL_SPI_Transmit+0x25e>
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d002      	beq.n	80062e4 <HAL_SPI_Transmit+0x52>
 80062de:	88fb      	ldrh	r3, [r7, #6]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d102      	bne.n	80062ea <HAL_SPI_Transmit+0x58>
 80062e4:	2301      	movs	r3, #1
 80062e6:	77fb      	strb	r3, [r7, #31]
 80062e8:	e102      	b.n	80064f0 <HAL_SPI_Transmit+0x25e>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2203      	movs	r2, #3
 80062ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	655a      	str	r2, [r3, #84]	; 0x54
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	631a      	str	r2, [r3, #48]	; 0x30
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	88fa      	ldrh	r2, [r7, #6]
 8006302:	869a      	strh	r2, [r3, #52]	; 0x34
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	88fa      	ldrh	r2, [r7, #6]
 8006308:	86da      	strh	r2, [r3, #54]	; 0x36
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	639a      	str	r2, [r3, #56]	; 0x38
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	879a      	strh	r2, [r3, #60]	; 0x3c
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	645a      	str	r2, [r3, #68]	; 0x44
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	641a      	str	r2, [r3, #64]	; 0x40
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006330:	d10f      	bne.n	8006352 <HAL_SPI_Transmit+0xc0>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635c:	2b40      	cmp	r3, #64	; 0x40
 800635e:	d007      	beq.n	8006370 <HAL_SPI_Transmit+0xde>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006378:	d14b      	bne.n	8006412 <HAL_SPI_Transmit+0x180>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d002      	beq.n	8006388 <HAL_SPI_Transmit+0xf6>
 8006382:	8afb      	ldrh	r3, [r7, #22]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d13e      	bne.n	8006406 <HAL_SPI_Transmit+0x174>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638c:	881a      	ldrh	r2, [r3, #0]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	60da      	str	r2, [r3, #12]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006398:	1c9a      	adds	r2, r3, #2
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	631a      	str	r2, [r3, #48]	; 0x30
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80063ac:	e02b      	b.n	8006406 <HAL_SPI_Transmit+0x174>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d112      	bne.n	80063e2 <HAL_SPI_Transmit+0x150>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c0:	881a      	ldrh	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	60da      	str	r2, [r3, #12]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063cc:	1c9a      	adds	r2, r3, #2
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	631a      	str	r2, [r3, #48]	; 0x30
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	3b01      	subs	r3, #1
 80063da:	b29a      	uxth	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	86da      	strh	r2, [r3, #54]	; 0x36
 80063e0:	e011      	b.n	8006406 <HAL_SPI_Transmit+0x174>
 80063e2:	f7fe f86d 	bl	80044c0 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d803      	bhi.n	80063fa <HAL_SPI_Transmit+0x168>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063f8:	d102      	bne.n	8006400 <HAL_SPI_Transmit+0x16e>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d102      	bne.n	8006406 <HAL_SPI_Transmit+0x174>
 8006400:	2303      	movs	r3, #3
 8006402:	77fb      	strb	r3, [r7, #31]
 8006404:	e074      	b.n	80064f0 <HAL_SPI_Transmit+0x25e>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800640a:	b29b      	uxth	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1ce      	bne.n	80063ae <HAL_SPI_Transmit+0x11c>
 8006410:	e04c      	b.n	80064ac <HAL_SPI_Transmit+0x21a>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d002      	beq.n	8006420 <HAL_SPI_Transmit+0x18e>
 800641a:	8afb      	ldrh	r3, [r7, #22]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d140      	bne.n	80064a2 <HAL_SPI_Transmit+0x210>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	330c      	adds	r3, #12
 800642a:	7812      	ldrb	r2, [r2, #0]
 800642c:	701a      	strb	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	631a      	str	r2, [r3, #48]	; 0x30
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800643c:	b29b      	uxth	r3, r3
 800643e:	3b01      	subs	r3, #1
 8006440:	b29a      	uxth	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	86da      	strh	r2, [r3, #54]	; 0x36
 8006446:	e02c      	b.n	80064a2 <HAL_SPI_Transmit+0x210>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b02      	cmp	r3, #2
 8006454:	d113      	bne.n	800647e <HAL_SPI_Transmit+0x1ec>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	330c      	adds	r3, #12
 8006460:	7812      	ldrb	r2, [r2, #0]
 8006462:	701a      	strb	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	631a      	str	r2, [r3, #48]	; 0x30
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006472:	b29b      	uxth	r3, r3
 8006474:	3b01      	subs	r3, #1
 8006476:	b29a      	uxth	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	86da      	strh	r2, [r3, #54]	; 0x36
 800647c:	e011      	b.n	80064a2 <HAL_SPI_Transmit+0x210>
 800647e:	f7fe f81f 	bl	80044c0 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	429a      	cmp	r2, r3
 800648c:	d803      	bhi.n	8006496 <HAL_SPI_Transmit+0x204>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006494:	d102      	bne.n	800649c <HAL_SPI_Transmit+0x20a>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d102      	bne.n	80064a2 <HAL_SPI_Transmit+0x210>
 800649c:	2303      	movs	r3, #3
 800649e:	77fb      	strb	r3, [r7, #31]
 80064a0:	e026      	b.n	80064f0 <HAL_SPI_Transmit+0x25e>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1cd      	bne.n	8006448 <HAL_SPI_Transmit+0x1b6>
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	6839      	ldr	r1, [r7, #0]
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f000 fbcb 	bl	8006c4c <SPI_EndRxTxTransaction>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <HAL_SPI_Transmit+0x230>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2220      	movs	r2, #32
 80064c0:	655a      	str	r2, [r3, #84]	; 0x54
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10a      	bne.n	80064e0 <HAL_SPI_Transmit+0x24e>
 80064ca:	2300      	movs	r3, #0
 80064cc:	613b      	str	r3, [r7, #16]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	613b      	str	r3, [r7, #16]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	613b      	str	r3, [r7, #16]
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <HAL_SPI_Transmit+0x25c>
 80064e8:	2301      	movs	r3, #1
 80064ea:	77fb      	strb	r3, [r7, #31]
 80064ec:	e000      	b.n	80064f0 <HAL_SPI_Transmit+0x25e>
 80064ee:	bf00      	nop
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006500:	7ffb      	ldrb	r3, [r7, #31]
 8006502:	4618      	mov	r0, r3
 8006504:	3720      	adds	r7, #32
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <HAL_SPI_Receive>:
 800650a:	b580      	push	{r7, lr}
 800650c:	b088      	sub	sp, #32
 800650e:	af02      	add	r7, sp, #8
 8006510:	60f8      	str	r0, [r7, #12]
 8006512:	60b9      	str	r1, [r7, #8]
 8006514:	603b      	str	r3, [r7, #0]
 8006516:	4613      	mov	r3, r2
 8006518:	80fb      	strh	r3, [r7, #6]
 800651a:	2300      	movs	r3, #0
 800651c:	75fb      	strb	r3, [r7, #23]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006526:	d112      	bne.n	800654e <HAL_SPI_Receive+0x44>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10e      	bne.n	800654e <HAL_SPI_Receive+0x44>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2204      	movs	r2, #4
 8006534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006538:	88fa      	ldrh	r2, [r7, #6]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	4613      	mov	r3, r2
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	68b9      	ldr	r1, [r7, #8]
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 f8f1 	bl	800672c <HAL_SPI_TransmitReceive>
 800654a:	4603      	mov	r3, r0
 800654c:	e0ea      	b.n	8006724 <HAL_SPI_Receive+0x21a>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006554:	2b01      	cmp	r3, #1
 8006556:	d101      	bne.n	800655c <HAL_SPI_Receive+0x52>
 8006558:	2302      	movs	r3, #2
 800655a:	e0e3      	b.n	8006724 <HAL_SPI_Receive+0x21a>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006564:	f7fd ffac 	bl	80044c0 <HAL_GetTick>
 8006568:	6138      	str	r0, [r7, #16]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b01      	cmp	r3, #1
 8006574:	d002      	beq.n	800657c <HAL_SPI_Receive+0x72>
 8006576:	2302      	movs	r3, #2
 8006578:	75fb      	strb	r3, [r7, #23]
 800657a:	e0ca      	b.n	8006712 <HAL_SPI_Receive+0x208>
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <HAL_SPI_Receive+0x7e>
 8006582:	88fb      	ldrh	r3, [r7, #6]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d102      	bne.n	800658e <HAL_SPI_Receive+0x84>
 8006588:	2301      	movs	r3, #1
 800658a:	75fb      	strb	r3, [r7, #23]
 800658c:	e0c1      	b.n	8006712 <HAL_SPI_Receive+0x208>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2204      	movs	r2, #4
 8006592:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	655a      	str	r2, [r3, #84]	; 0x54
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	639a      	str	r2, [r3, #56]	; 0x38
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	88fa      	ldrh	r2, [r7, #6]
 80065a6:	879a      	strh	r2, [r3, #60]	; 0x3c
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	88fa      	ldrh	r2, [r7, #6]
 80065ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	631a      	str	r2, [r3, #48]	; 0x30
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	869a      	strh	r2, [r3, #52]	; 0x34
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	86da      	strh	r2, [r3, #54]	; 0x36
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	641a      	str	r2, [r3, #64]	; 0x40
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	645a      	str	r2, [r3, #68]	; 0x44
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065d4:	d10f      	bne.n	80065f6 <HAL_SPI_Receive+0xec>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006600:	2b40      	cmp	r3, #64	; 0x40
 8006602:	d007      	beq.n	8006614 <HAL_SPI_Receive+0x10a>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d162      	bne.n	80066e2 <HAL_SPI_Receive+0x1d8>
 800661c:	e02e      	b.n	800667c <HAL_SPI_Receive+0x172>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b01      	cmp	r3, #1
 800662a:	d115      	bne.n	8006658 <HAL_SPI_Receive+0x14e>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f103 020c 	add.w	r2, r3, #12
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006638:	7812      	ldrb	r2, [r2, #0]
 800663a:	b2d2      	uxtb	r2, r2
 800663c:	701a      	strb	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	639a      	str	r2, [r3, #56]	; 0x38
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800664c:	b29b      	uxth	r3, r3
 800664e:	3b01      	subs	r3, #1
 8006650:	b29a      	uxth	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006656:	e011      	b.n	800667c <HAL_SPI_Receive+0x172>
 8006658:	f7fd ff32 	bl	80044c0 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	429a      	cmp	r2, r3
 8006666:	d803      	bhi.n	8006670 <HAL_SPI_Receive+0x166>
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800666e:	d102      	bne.n	8006676 <HAL_SPI_Receive+0x16c>
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d102      	bne.n	800667c <HAL_SPI_Receive+0x172>
 8006676:	2303      	movs	r3, #3
 8006678:	75fb      	strb	r3, [r7, #23]
 800667a:	e04a      	b.n	8006712 <HAL_SPI_Receive+0x208>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1cb      	bne.n	800661e <HAL_SPI_Receive+0x114>
 8006686:	e031      	b.n	80066ec <HAL_SPI_Receive+0x1e2>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b01      	cmp	r3, #1
 8006694:	d113      	bne.n	80066be <HAL_SPI_Receive+0x1b4>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68da      	ldr	r2, [r3, #12]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a0:	b292      	uxth	r2, r2
 80066a2:	801a      	strh	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a8:	1c9a      	adds	r2, r3, #2
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	639a      	str	r2, [r3, #56]	; 0x38
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	3b01      	subs	r3, #1
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066bc:	e011      	b.n	80066e2 <HAL_SPI_Receive+0x1d8>
 80066be:	f7fd feff 	bl	80044c0 <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	683a      	ldr	r2, [r7, #0]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d803      	bhi.n	80066d6 <HAL_SPI_Receive+0x1cc>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066d4:	d102      	bne.n	80066dc <HAL_SPI_Receive+0x1d2>
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d102      	bne.n	80066e2 <HAL_SPI_Receive+0x1d8>
 80066dc:	2303      	movs	r3, #3
 80066de:	75fb      	strb	r3, [r7, #23]
 80066e0:	e017      	b.n	8006712 <HAL_SPI_Receive+0x208>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1cd      	bne.n	8006688 <HAL_SPI_Receive+0x17e>
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	6839      	ldr	r1, [r7, #0]
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 fa45 	bl	8006b80 <SPI_EndRxTransaction>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d002      	beq.n	8006702 <HAL_SPI_Receive+0x1f8>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2220      	movs	r2, #32
 8006700:	655a      	str	r2, [r3, #84]	; 0x54
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006706:	2b00      	cmp	r3, #0
 8006708:	d002      	beq.n	8006710 <HAL_SPI_Receive+0x206>
 800670a:	2301      	movs	r3, #1
 800670c:	75fb      	strb	r3, [r7, #23]
 800670e:	e000      	b.n	8006712 <HAL_SPI_Receive+0x208>
 8006710:	bf00      	nop
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006722:	7dfb      	ldrb	r3, [r7, #23]
 8006724:	4618      	mov	r0, r3
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <HAL_SPI_TransmitReceive>:
 800672c:	b580      	push	{r7, lr}
 800672e:	b08c      	sub	sp, #48	; 0x30
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
 8006738:	807b      	strh	r3, [r7, #2]
 800673a:	2301      	movs	r3, #1
 800673c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800673e:	2300      	movs	r3, #0
 8006740:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800674a:	2b01      	cmp	r3, #1
 800674c:	d101      	bne.n	8006752 <HAL_SPI_TransmitReceive+0x26>
 800674e:	2302      	movs	r3, #2
 8006750:	e18a      	b.n	8006a68 <HAL_SPI_TransmitReceive+0x33c>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800675a:	f7fd feb1 	bl	80044c0 <HAL_GetTick>
 800675e:	6278      	str	r0, [r7, #36]	; 0x24
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	61fb      	str	r3, [r7, #28]
 8006770:	887b      	ldrh	r3, [r7, #2]
 8006772:	837b      	strh	r3, [r7, #26]
 8006774:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006778:	2b01      	cmp	r3, #1
 800677a:	d00f      	beq.n	800679c <HAL_SPI_TransmitReceive+0x70>
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006782:	d107      	bne.n	8006794 <HAL_SPI_TransmitReceive+0x68>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d103      	bne.n	8006794 <HAL_SPI_TransmitReceive+0x68>
 800678c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006790:	2b04      	cmp	r3, #4
 8006792:	d003      	beq.n	800679c <HAL_SPI_TransmitReceive+0x70>
 8006794:	2302      	movs	r3, #2
 8006796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800679a:	e15b      	b.n	8006a54 <HAL_SPI_TransmitReceive+0x328>
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d005      	beq.n	80067ae <HAL_SPI_TransmitReceive+0x82>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d002      	beq.n	80067ae <HAL_SPI_TransmitReceive+0x82>
 80067a8:	887b      	ldrh	r3, [r7, #2]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d103      	bne.n	80067b6 <HAL_SPI_TransmitReceive+0x8a>
 80067ae:	2301      	movs	r3, #1
 80067b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067b4:	e14e      	b.n	8006a54 <HAL_SPI_TransmitReceive+0x328>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b04      	cmp	r3, #4
 80067c0:	d003      	beq.n	80067ca <HAL_SPI_TransmitReceive+0x9e>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2205      	movs	r2, #5
 80067c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	655a      	str	r2, [r3, #84]	; 0x54
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	639a      	str	r2, [r3, #56]	; 0x38
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	887a      	ldrh	r2, [r7, #2]
 80067da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	887a      	ldrh	r2, [r7, #2]
 80067e0:	879a      	strh	r2, [r3, #60]	; 0x3c
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	631a      	str	r2, [r3, #48]	; 0x30
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	887a      	ldrh	r2, [r7, #2]
 80067ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	887a      	ldrh	r2, [r7, #2]
 80067f2:	869a      	strh	r2, [r3, #52]	; 0x34
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	641a      	str	r2, [r3, #64]	; 0x40
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	645a      	str	r2, [r3, #68]	; 0x44
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680a:	2b40      	cmp	r3, #64	; 0x40
 800680c:	d007      	beq.n	800681e <HAL_SPI_TransmitReceive+0xf2>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006826:	d178      	bne.n	800691a <HAL_SPI_TransmitReceive+0x1ee>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d002      	beq.n	8006836 <HAL_SPI_TransmitReceive+0x10a>
 8006830:	8b7b      	ldrh	r3, [r7, #26]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d166      	bne.n	8006904 <HAL_SPI_TransmitReceive+0x1d8>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683a:	881a      	ldrh	r2, [r3, #0]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	60da      	str	r2, [r3, #12]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006846:	1c9a      	adds	r2, r3, #2
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	631a      	str	r2, [r3, #48]	; 0x30
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006850:	b29b      	uxth	r3, r3
 8006852:	3b01      	subs	r3, #1
 8006854:	b29a      	uxth	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	86da      	strh	r2, [r3, #54]	; 0x36
 800685a:	e053      	b.n	8006904 <HAL_SPI_TransmitReceive+0x1d8>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b02      	cmp	r3, #2
 8006868:	d11b      	bne.n	80068a2 <HAL_SPI_TransmitReceive+0x176>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800686e:	b29b      	uxth	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	d016      	beq.n	80068a2 <HAL_SPI_TransmitReceive+0x176>
 8006874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006876:	2b01      	cmp	r3, #1
 8006878:	d113      	bne.n	80068a2 <HAL_SPI_TransmitReceive+0x176>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687e:	881a      	ldrh	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	60da      	str	r2, [r3, #12]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688a:	1c9a      	adds	r2, r3, #2
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	631a      	str	r2, [r3, #48]	; 0x30
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006894:	b29b      	uxth	r3, r3
 8006896:	3b01      	subs	r3, #1
 8006898:	b29a      	uxth	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	86da      	strh	r2, [r3, #54]	; 0x36
 800689e:	2300      	movs	r3, #0
 80068a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d119      	bne.n	80068e4 <HAL_SPI_TransmitReceive+0x1b8>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d014      	beq.n	80068e4 <HAL_SPI_TransmitReceive+0x1b8>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68da      	ldr	r2, [r3, #12]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c4:	b292      	uxth	r2, r2
 80068c6:	801a      	strh	r2, [r3, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068cc:	1c9a      	adds	r2, r3, #2
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	639a      	str	r2, [r3, #56]	; 0x38
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	3b01      	subs	r3, #1
 80068da:	b29a      	uxth	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80068e0:	2301      	movs	r3, #1
 80068e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068e4:	f7fd fdec 	bl	80044c0 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d807      	bhi.n	8006904 <HAL_SPI_TransmitReceive+0x1d8>
 80068f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068fa:	d003      	beq.n	8006904 <HAL_SPI_TransmitReceive+0x1d8>
 80068fc:	2303      	movs	r3, #3
 80068fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006902:	e0a7      	b.n	8006a54 <HAL_SPI_TransmitReceive+0x328>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006908:	b29b      	uxth	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1a6      	bne.n	800685c <HAL_SPI_TransmitReceive+0x130>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006912:	b29b      	uxth	r3, r3
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1a1      	bne.n	800685c <HAL_SPI_TransmitReceive+0x130>
 8006918:	e07c      	b.n	8006a14 <HAL_SPI_TransmitReceive+0x2e8>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d002      	beq.n	8006928 <HAL_SPI_TransmitReceive+0x1fc>
 8006922:	8b7b      	ldrh	r3, [r7, #26]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d16b      	bne.n	8006a00 <HAL_SPI_TransmitReceive+0x2d4>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	330c      	adds	r3, #12
 8006932:	7812      	ldrb	r2, [r2, #0]
 8006934:	701a      	strb	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	631a      	str	r2, [r3, #48]	; 0x30
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006944:	b29b      	uxth	r3, r3
 8006946:	3b01      	subs	r3, #1
 8006948:	b29a      	uxth	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	86da      	strh	r2, [r3, #54]	; 0x36
 800694e:	e057      	b.n	8006a00 <HAL_SPI_TransmitReceive+0x2d4>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b02      	cmp	r3, #2
 800695c:	d11c      	bne.n	8006998 <HAL_SPI_TransmitReceive+0x26c>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006962:	b29b      	uxth	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	d017      	beq.n	8006998 <HAL_SPI_TransmitReceive+0x26c>
 8006968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696a:	2b01      	cmp	r3, #1
 800696c:	d114      	bne.n	8006998 <HAL_SPI_TransmitReceive+0x26c>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	330c      	adds	r3, #12
 8006978:	7812      	ldrb	r2, [r2, #0]
 800697a:	701a      	strb	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	631a      	str	r2, [r3, #48]	; 0x30
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800698a:	b29b      	uxth	r3, r3
 800698c:	3b01      	subs	r3, #1
 800698e:	b29a      	uxth	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	86da      	strh	r2, [r3, #54]	; 0x36
 8006994:	2300      	movs	r3, #0
 8006996:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d119      	bne.n	80069da <HAL_SPI_TransmitReceive+0x2ae>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d014      	beq.n	80069da <HAL_SPI_TransmitReceive+0x2ae>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68da      	ldr	r2, [r3, #12]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ba:	b2d2      	uxtb	r2, r2
 80069bc:	701a      	strb	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c2:	1c5a      	adds	r2, r3, #1
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	639a      	str	r2, [r3, #56]	; 0x38
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	3b01      	subs	r3, #1
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069d6:	2301      	movs	r3, #1
 80069d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069da:	f7fd fd71 	bl	80044c0 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d803      	bhi.n	80069f2 <HAL_SPI_TransmitReceive+0x2c6>
 80069ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069f0:	d102      	bne.n	80069f8 <HAL_SPI_TransmitReceive+0x2cc>
 80069f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d103      	bne.n	8006a00 <HAL_SPI_TransmitReceive+0x2d4>
 80069f8:	2303      	movs	r3, #3
 80069fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069fe:	e029      	b.n	8006a54 <HAL_SPI_TransmitReceive+0x328>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1a2      	bne.n	8006950 <HAL_SPI_TransmitReceive+0x224>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d19d      	bne.n	8006950 <HAL_SPI_TransmitReceive+0x224>
 8006a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f000 f917 	bl	8006c4c <SPI_EndRxTxTransaction>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d006      	beq.n	8006a32 <HAL_SPI_TransmitReceive+0x306>
 8006a24:	2301      	movs	r3, #1
 8006a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	655a      	str	r2, [r3, #84]	; 0x54
 8006a30:	e010      	b.n	8006a54 <HAL_SPI_TransmitReceive+0x328>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10b      	bne.n	8006a52 <HAL_SPI_TransmitReceive+0x326>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	617b      	str	r3, [r7, #20]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	617b      	str	r3, [r7, #20]
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	e000      	b.n	8006a54 <HAL_SPI_TransmitReceive+0x328>
 8006a52:	bf00      	nop
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006a64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3730      	adds	r7, #48	; 0x30
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <SPI_WaitFlagStateUntilTimeout>:
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b088      	sub	sp, #32
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	603b      	str	r3, [r7, #0]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	71fb      	strb	r3, [r7, #7]
 8006a80:	f7fd fd1e 	bl	80044c0 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a88:	1a9b      	subs	r3, r3, r2
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	61fb      	str	r3, [r7, #28]
 8006a90:	f7fd fd16 	bl	80044c0 <HAL_GetTick>
 8006a94:	61b8      	str	r0, [r7, #24]
 8006a96:	4b39      	ldr	r3, [pc, #228]	; (8006b7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	015b      	lsls	r3, r3, #5
 8006a9c:	0d1b      	lsrs	r3, r3, #20
 8006a9e:	69fa      	ldr	r2, [r7, #28]
 8006aa0:	fb02 f303 	mul.w	r3, r2, r3
 8006aa4:	617b      	str	r3, [r7, #20]
 8006aa6:	e054      	b.n	8006b52 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006aae:	d050      	beq.n	8006b52 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8006ab0:	f7fd fd06 	bl	80044c0 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	69fa      	ldr	r2, [r7, #28]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d902      	bls.n	8006ac6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d13d      	bne.n	8006b42 <SPI_WaitFlagStateUntilTimeout+0xd2>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ad4:	605a      	str	r2, [r3, #4]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ade:	d111      	bne.n	8006b04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ae8:	d004      	beq.n	8006af4 <SPI_WaitFlagStateUntilTimeout+0x84>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006af2:	d107      	bne.n	8006b04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b02:	601a      	str	r2, [r3, #0]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b0c:	d10f      	bne.n	8006b2e <SPI_WaitFlagStateUntilTimeout+0xbe>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b2c:	601a      	str	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e017      	b.n	8006b72 <SPI_WaitFlagStateUntilTimeout+0x102>
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <SPI_WaitFlagStateUntilTimeout+0xdc>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	61fb      	str	r3, [r7, #28]
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	617b      	str	r3, [r7, #20]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	bf0c      	ite	eq
 8006b62:	2301      	moveq	r3, #1
 8006b64:	2300      	movne	r3, #0
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	461a      	mov	r2, r3
 8006b6a:	79fb      	ldrb	r3, [r7, #7]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d19b      	bne.n	8006aa8 <SPI_WaitFlagStateUntilTimeout+0x38>
 8006b70:	2300      	movs	r3, #0
 8006b72:	4618      	mov	r0, r3
 8006b74:	3720      	adds	r7, #32
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	200023c8 	.word	0x200023c8

08006b80 <SPI_EndRxTransaction>:
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af02      	add	r7, sp, #8
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b94:	d111      	bne.n	8006bba <SPI_EndRxTransaction+0x3a>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b9e:	d004      	beq.n	8006baa <SPI_EndRxTransaction+0x2a>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ba8:	d107      	bne.n	8006bba <SPI_EndRxTransaction+0x3a>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb8:	601a      	str	r2, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bc2:	d12a      	bne.n	8006c1a <SPI_EndRxTransaction+0x9a>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bcc:	d012      	beq.n	8006bf4 <SPI_EndRxTransaction+0x74>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	2180      	movs	r1, #128	; 0x80
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f7ff ff49 	bl	8006a70 <SPI_WaitFlagStateUntilTimeout>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d02d      	beq.n	8006c40 <SPI_EndRxTransaction+0xc0>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be8:	f043 0220 	orr.w	r2, r3, #32
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	655a      	str	r2, [r3, #84]	; 0x54
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e026      	b.n	8006c42 <SPI_EndRxTransaction+0xc2>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f7ff ff36 	bl	8006a70 <SPI_WaitFlagStateUntilTimeout>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d01a      	beq.n	8006c40 <SPI_EndRxTransaction+0xc0>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c0e:	f043 0220 	orr.w	r2, r3, #32
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	655a      	str	r2, [r3, #84]	; 0x54
 8006c16:	2303      	movs	r3, #3
 8006c18:	e013      	b.n	8006c42 <SPI_EndRxTransaction+0xc2>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2200      	movs	r2, #0
 8006c22:	2101      	movs	r1, #1
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f7ff ff23 	bl	8006a70 <SPI_WaitFlagStateUntilTimeout>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d007      	beq.n	8006c40 <SPI_EndRxTransaction+0xc0>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c34:	f043 0220 	orr.w	r2, r3, #32
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	655a      	str	r2, [r3, #84]	; 0x54
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e000      	b.n	8006c42 <SPI_EndRxTransaction+0xc2>
 8006c40:	2300      	movs	r3, #0
 8006c42:	4618      	mov	r0, r3
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
	...

08006c4c <SPI_EndRxTxTransaction>:
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b088      	sub	sp, #32
 8006c50:	af02      	add	r7, sp, #8
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
 8006c58:	4b1b      	ldr	r3, [pc, #108]	; (8006cc8 <SPI_EndRxTxTransaction+0x7c>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a1b      	ldr	r2, [pc, #108]	; (8006ccc <SPI_EndRxTxTransaction+0x80>)
 8006c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c62:	0d5b      	lsrs	r3, r3, #21
 8006c64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c68:	fb02 f303 	mul.w	r3, r2, r3
 8006c6c:	617b      	str	r3, [r7, #20]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c76:	d112      	bne.n	8006c9e <SPI_EndRxTxTransaction+0x52>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	2180      	movs	r1, #128	; 0x80
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f7ff fef4 	bl	8006a70 <SPI_WaitFlagStateUntilTimeout>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d016      	beq.n	8006cbc <SPI_EndRxTxTransaction+0x70>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c92:	f043 0220 	orr.w	r2, r3, #32
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	655a      	str	r2, [r3, #84]	; 0x54
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e00f      	b.n	8006cbe <SPI_EndRxTxTransaction+0x72>
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00a      	beq.n	8006cba <SPI_EndRxTxTransaction+0x6e>
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	617b      	str	r3, [r7, #20]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb4:	2b80      	cmp	r3, #128	; 0x80
 8006cb6:	d0f2      	beq.n	8006c9e <SPI_EndRxTxTransaction+0x52>
 8006cb8:	e000      	b.n	8006cbc <SPI_EndRxTxTransaction+0x70>
 8006cba:	bf00      	nop
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	200023c8 	.word	0x200023c8
 8006ccc:	165e9f81 	.word	0x165e9f81

08006cd0 <HAL_UART_Init>:
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <HAL_UART_Init+0x12>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e03f      	b.n	8006d62 <HAL_UART_Init+0x92>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d106      	bne.n	8006cfc <HAL_UART_Init+0x2c>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7fd f9e0 	bl	80040bc <HAL_UART_MspInit>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2224      	movs	r2, #36	; 0x24
 8006d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68da      	ldr	r2, [r3, #12]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d12:	60da      	str	r2, [r3, #12]
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f929 	bl	8006f6c <UART_SetConfig>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	691a      	ldr	r2, [r3, #16]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d28:	611a      	str	r2, [r3, #16]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	695a      	ldr	r2, [r3, #20]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d38:	615a      	str	r2, [r3, #20]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68da      	ldr	r2, [r3, #12]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d48:	60da      	str	r2, [r3, #12]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	641a      	str	r2, [r3, #64]	; 0x40
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2220      	movs	r2, #32
 8006d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d60:	2300      	movs	r3, #0
 8006d62:	4618      	mov	r0, r3
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <HAL_UART_Transmit>:
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b08a      	sub	sp, #40	; 0x28
 8006d6e:	af02      	add	r7, sp, #8
 8006d70:	60f8      	str	r0, [r7, #12]
 8006d72:	60b9      	str	r1, [r7, #8]
 8006d74:	603b      	str	r3, [r7, #0]
 8006d76:	4613      	mov	r3, r2
 8006d78:	80fb      	strh	r3, [r7, #6]
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	617b      	str	r3, [r7, #20]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b20      	cmp	r3, #32
 8006d88:	d17c      	bne.n	8006e84 <HAL_UART_Transmit+0x11a>
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d002      	beq.n	8006d96 <HAL_UART_Transmit+0x2c>
 8006d90:	88fb      	ldrh	r3, [r7, #6]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d101      	bne.n	8006d9a <HAL_UART_Transmit+0x30>
 8006d96:	2301      	movs	r3, #1
 8006d98:	e075      	b.n	8006e86 <HAL_UART_Transmit+0x11c>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d101      	bne.n	8006da8 <HAL_UART_Transmit+0x3e>
 8006da4:	2302      	movs	r3, #2
 8006da6:	e06e      	b.n	8006e86 <HAL_UART_Transmit+0x11c>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	641a      	str	r2, [r3, #64]	; 0x40
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2221      	movs	r2, #33	; 0x21
 8006dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006dbe:	f7fd fb7f 	bl	80044c0 <HAL_GetTick>
 8006dc2:	6178      	str	r0, [r7, #20]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	88fa      	ldrh	r2, [r7, #6]
 8006dc8:	849a      	strh	r2, [r3, #36]	; 0x24
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	88fa      	ldrh	r2, [r7, #6]
 8006dce:	84da      	strh	r2, [r3, #38]	; 0x26
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dd8:	d108      	bne.n	8006dec <HAL_UART_Transmit+0x82>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d104      	bne.n	8006dec <HAL_UART_Transmit+0x82>
 8006de2:	2300      	movs	r3, #0
 8006de4:	61fb      	str	r3, [r7, #28]
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	61bb      	str	r3, [r7, #24]
 8006dea:	e003      	b.n	8006df4 <HAL_UART_Transmit+0x8a>
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	61fb      	str	r3, [r7, #28]
 8006df0:	2300      	movs	r3, #0
 8006df2:	61bb      	str	r3, [r7, #24]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006dfc:	e02a      	b.n	8006e54 <HAL_UART_Transmit+0xea>
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2200      	movs	r2, #0
 8006e06:	2180      	movs	r1, #128	; 0x80
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f000 f840 	bl	8006e8e <UART_WaitOnFlagUntilTimeout>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <HAL_UART_Transmit+0xae>
 8006e14:	2303      	movs	r3, #3
 8006e16:	e036      	b.n	8006e86 <HAL_UART_Transmit+0x11c>
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10b      	bne.n	8006e36 <HAL_UART_Transmit+0xcc>
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	881b      	ldrh	r3, [r3, #0]
 8006e22:	461a      	mov	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e2c:	605a      	str	r2, [r3, #4]
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	3302      	adds	r3, #2
 8006e32:	61bb      	str	r3, [r7, #24]
 8006e34:	e007      	b.n	8006e46 <HAL_UART_Transmit+0xdc>
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	781a      	ldrb	r2, [r3, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	605a      	str	r2, [r3, #4]
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	3301      	adds	r3, #1
 8006e44:	61fb      	str	r3, [r7, #28]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	84da      	strh	r2, [r3, #38]	; 0x26
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1cf      	bne.n	8006dfe <HAL_UART_Transmit+0x94>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	2200      	movs	r2, #0
 8006e66:	2140      	movs	r1, #64	; 0x40
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f000 f810 	bl	8006e8e <UART_WaitOnFlagUntilTimeout>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d001      	beq.n	8006e78 <HAL_UART_Transmit+0x10e>
 8006e74:	2303      	movs	r3, #3
 8006e76:	e006      	b.n	8006e86 <HAL_UART_Transmit+0x11c>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006e80:	2300      	movs	r3, #0
 8006e82:	e000      	b.n	8006e86 <HAL_UART_Transmit+0x11c>
 8006e84:	2302      	movs	r3, #2
 8006e86:	4618      	mov	r0, r3
 8006e88:	3720      	adds	r7, #32
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <UART_WaitOnFlagUntilTimeout>:
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b090      	sub	sp, #64	; 0x40
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	60f8      	str	r0, [r7, #12]
 8006e96:	60b9      	str	r1, [r7, #8]
 8006e98:	603b      	str	r3, [r7, #0]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	71fb      	strb	r3, [r7, #7]
 8006e9e:	e050      	b.n	8006f42 <UART_WaitOnFlagUntilTimeout+0xb4>
 8006ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ea6:	d04c      	beq.n	8006f42 <UART_WaitOnFlagUntilTimeout+0xb4>
 8006ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d007      	beq.n	8006ebe <UART_WaitOnFlagUntilTimeout+0x30>
 8006eae:	f7fd fb07 	bl	80044c0 <HAL_GetTick>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d241      	bcs.n	8006f42 <UART_WaitOnFlagUntilTimeout+0xb4>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	330c      	adds	r3, #12
 8006ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec8:	e853 3f00 	ldrex	r3, [r3]
 8006ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	330c      	adds	r3, #12
 8006edc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ede:	637a      	str	r2, [r7, #52]	; 0x34
 8006ee0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ee2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ee4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ee6:	e841 2300 	strex	r3, r2, [r1]
 8006eea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1e5      	bne.n	8006ebe <UART_WaitOnFlagUntilTimeout+0x30>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3314      	adds	r3, #20
 8006ef8:	617b      	str	r3, [r7, #20]
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	e853 3f00 	ldrex	r3, [r3]
 8006f00:	613b      	str	r3, [r7, #16]
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	f023 0301 	bic.w	r3, r3, #1
 8006f08:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3314      	adds	r3, #20
 8006f10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f12:	623a      	str	r2, [r7, #32]
 8006f14:	61fb      	str	r3, [r7, #28]
 8006f16:	69f9      	ldr	r1, [r7, #28]
 8006f18:	6a3a      	ldr	r2, [r7, #32]
 8006f1a:	e841 2300 	strex	r3, r2, [r1]
 8006f1e:	61bb      	str	r3, [r7, #24]
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1e5      	bne.n	8006ef2 <UART_WaitOnFlagUntilTimeout+0x64>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2220      	movs	r2, #32
 8006f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e00f      	b.n	8006f62 <UART_WaitOnFlagUntilTimeout+0xd4>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	bf0c      	ite	eq
 8006f52:	2301      	moveq	r3, #1
 8006f54:	2300      	movne	r3, #0
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	461a      	mov	r2, r3
 8006f5a:	79fb      	ldrb	r3, [r7, #7]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d09f      	beq.n	8006ea0 <UART_WaitOnFlagUntilTimeout+0x12>
 8006f60:	2300      	movs	r3, #0
 8006f62:	4618      	mov	r0, r3
 8006f64:	3740      	adds	r7, #64	; 0x40
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
	...

08006f6c <UART_SetConfig>:
 8006f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f70:	b0c0      	sub	sp, #256	; 0x100
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8006f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f88:	68d9      	ldr	r1, [r3, #12]
 8006f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	ea40 0301 	orr.w	r3, r0, r1
 8006f94:	6113      	str	r3, [r2, #16]
 8006f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f9a:	689a      	ldr	r2, [r3, #8]
 8006f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	431a      	orrs	r2, r3
 8006fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb0:	69db      	ldr	r3, [r3, #28]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006fc4:	f021 010c 	bic.w	r1, r1, #12
 8006fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006fd2:	430b      	orrs	r3, r1
 8006fd4:	60d3      	str	r3, [r2, #12]
 8006fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe6:	6999      	ldr	r1, [r3, #24]
 8006fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	ea40 0301 	orr.w	r3, r0, r1
 8006ff2:	6153      	str	r3, [r2, #20]
 8006ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	4b8f      	ldr	r3, [pc, #572]	; (8007238 <UART_SetConfig+0x2cc>)
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d005      	beq.n	800700c <UART_SetConfig+0xa0>
 8007000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	4b8d      	ldr	r3, [pc, #564]	; (800723c <UART_SetConfig+0x2d0>)
 8007008:	429a      	cmp	r2, r3
 800700a:	d104      	bne.n	8007016 <UART_SetConfig+0xaa>
 800700c:	f7fe fbd6 	bl	80057bc <HAL_RCC_GetPCLK2Freq>
 8007010:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007014:	e003      	b.n	800701e <UART_SetConfig+0xb2>
 8007016:	f7fe fbbd 	bl	8005794 <HAL_RCC_GetPCLK1Freq>
 800701a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800701e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007028:	f040 810c 	bne.w	8007244 <UART_SetConfig+0x2d8>
 800702c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007030:	2200      	movs	r2, #0
 8007032:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007036:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800703a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800703e:	4622      	mov	r2, r4
 8007040:	462b      	mov	r3, r5
 8007042:	1891      	adds	r1, r2, r2
 8007044:	65b9      	str	r1, [r7, #88]	; 0x58
 8007046:	415b      	adcs	r3, r3
 8007048:	65fb      	str	r3, [r7, #92]	; 0x5c
 800704a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800704e:	4621      	mov	r1, r4
 8007050:	eb12 0801 	adds.w	r8, r2, r1
 8007054:	4629      	mov	r1, r5
 8007056:	eb43 0901 	adc.w	r9, r3, r1
 800705a:	f04f 0200 	mov.w	r2, #0
 800705e:	f04f 0300 	mov.w	r3, #0
 8007062:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007066:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800706a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800706e:	4690      	mov	r8, r2
 8007070:	4699      	mov	r9, r3
 8007072:	4623      	mov	r3, r4
 8007074:	eb18 0303 	adds.w	r3, r8, r3
 8007078:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800707c:	462b      	mov	r3, r5
 800707e:	eb49 0303 	adc.w	r3, r9, r3
 8007082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007092:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007096:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800709a:	460b      	mov	r3, r1
 800709c:	18db      	adds	r3, r3, r3
 800709e:	653b      	str	r3, [r7, #80]	; 0x50
 80070a0:	4613      	mov	r3, r2
 80070a2:	eb42 0303 	adc.w	r3, r2, r3
 80070a6:	657b      	str	r3, [r7, #84]	; 0x54
 80070a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80070ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80070b0:	f7f9 fe0a 	bl	8000cc8 <__aeabi_uldivmod>
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	4b61      	ldr	r3, [pc, #388]	; (8007240 <UART_SetConfig+0x2d4>)
 80070ba:	fba3 2302 	umull	r2, r3, r3, r2
 80070be:	095b      	lsrs	r3, r3, #5
 80070c0:	011c      	lsls	r4, r3, #4
 80070c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070c6:	2200      	movs	r2, #0
 80070c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80070d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80070d4:	4642      	mov	r2, r8
 80070d6:	464b      	mov	r3, r9
 80070d8:	1891      	adds	r1, r2, r2
 80070da:	64b9      	str	r1, [r7, #72]	; 0x48
 80070dc:	415b      	adcs	r3, r3
 80070de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80070e4:	4641      	mov	r1, r8
 80070e6:	eb12 0a01 	adds.w	sl, r2, r1
 80070ea:	4649      	mov	r1, r9
 80070ec:	eb43 0b01 	adc.w	fp, r3, r1
 80070f0:	f04f 0200 	mov.w	r2, #0
 80070f4:	f04f 0300 	mov.w	r3, #0
 80070f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80070fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007100:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007104:	4692      	mov	sl, r2
 8007106:	469b      	mov	fp, r3
 8007108:	4643      	mov	r3, r8
 800710a:	eb1a 0303 	adds.w	r3, sl, r3
 800710e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007112:	464b      	mov	r3, r9
 8007114:	eb4b 0303 	adc.w	r3, fp, r3
 8007118:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800711c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007128:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800712c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007130:	460b      	mov	r3, r1
 8007132:	18db      	adds	r3, r3, r3
 8007134:	643b      	str	r3, [r7, #64]	; 0x40
 8007136:	4613      	mov	r3, r2
 8007138:	eb42 0303 	adc.w	r3, r2, r3
 800713c:	647b      	str	r3, [r7, #68]	; 0x44
 800713e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007142:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007146:	f7f9 fdbf 	bl	8000cc8 <__aeabi_uldivmod>
 800714a:	4602      	mov	r2, r0
 800714c:	460b      	mov	r3, r1
 800714e:	4611      	mov	r1, r2
 8007150:	4b3b      	ldr	r3, [pc, #236]	; (8007240 <UART_SetConfig+0x2d4>)
 8007152:	fba3 2301 	umull	r2, r3, r3, r1
 8007156:	095b      	lsrs	r3, r3, #5
 8007158:	2264      	movs	r2, #100	; 0x64
 800715a:	fb02 f303 	mul.w	r3, r2, r3
 800715e:	1acb      	subs	r3, r1, r3
 8007160:	00db      	lsls	r3, r3, #3
 8007162:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007166:	4b36      	ldr	r3, [pc, #216]	; (8007240 <UART_SetConfig+0x2d4>)
 8007168:	fba3 2302 	umull	r2, r3, r3, r2
 800716c:	095b      	lsrs	r3, r3, #5
 800716e:	005b      	lsls	r3, r3, #1
 8007170:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007174:	441c      	add	r4, r3
 8007176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800717a:	2200      	movs	r2, #0
 800717c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007180:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007184:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007188:	4642      	mov	r2, r8
 800718a:	464b      	mov	r3, r9
 800718c:	1891      	adds	r1, r2, r2
 800718e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007190:	415b      	adcs	r3, r3
 8007192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007194:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007198:	4641      	mov	r1, r8
 800719a:	1851      	adds	r1, r2, r1
 800719c:	6339      	str	r1, [r7, #48]	; 0x30
 800719e:	4649      	mov	r1, r9
 80071a0:	414b      	adcs	r3, r1
 80071a2:	637b      	str	r3, [r7, #52]	; 0x34
 80071a4:	f04f 0200 	mov.w	r2, #0
 80071a8:	f04f 0300 	mov.w	r3, #0
 80071ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80071b0:	4659      	mov	r1, fp
 80071b2:	00cb      	lsls	r3, r1, #3
 80071b4:	4651      	mov	r1, sl
 80071b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071ba:	4651      	mov	r1, sl
 80071bc:	00ca      	lsls	r2, r1, #3
 80071be:	4610      	mov	r0, r2
 80071c0:	4619      	mov	r1, r3
 80071c2:	4603      	mov	r3, r0
 80071c4:	4642      	mov	r2, r8
 80071c6:	189b      	adds	r3, r3, r2
 80071c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071cc:	464b      	mov	r3, r9
 80071ce:	460a      	mov	r2, r1
 80071d0:	eb42 0303 	adc.w	r3, r2, r3
 80071d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80071e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80071e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80071ec:	460b      	mov	r3, r1
 80071ee:	18db      	adds	r3, r3, r3
 80071f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80071f2:	4613      	mov	r3, r2
 80071f4:	eb42 0303 	adc.w	r3, r2, r3
 80071f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80071fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007202:	f7f9 fd61 	bl	8000cc8 <__aeabi_uldivmod>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	4b0d      	ldr	r3, [pc, #52]	; (8007240 <UART_SetConfig+0x2d4>)
 800720c:	fba3 1302 	umull	r1, r3, r3, r2
 8007210:	095b      	lsrs	r3, r3, #5
 8007212:	2164      	movs	r1, #100	; 0x64
 8007214:	fb01 f303 	mul.w	r3, r1, r3
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	3332      	adds	r3, #50	; 0x32
 800721e:	4a08      	ldr	r2, [pc, #32]	; (8007240 <UART_SetConfig+0x2d4>)
 8007220:	fba2 2303 	umull	r2, r3, r2, r3
 8007224:	095b      	lsrs	r3, r3, #5
 8007226:	f003 0207 	and.w	r2, r3, #7
 800722a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4422      	add	r2, r4
 8007232:	609a      	str	r2, [r3, #8]
 8007234:	e105      	b.n	8007442 <UART_SetConfig+0x4d6>
 8007236:	bf00      	nop
 8007238:	40011000 	.word	0x40011000
 800723c:	40011400 	.word	0x40011400
 8007240:	51eb851f 	.word	0x51eb851f
 8007244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007248:	2200      	movs	r2, #0
 800724a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800724e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007252:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007256:	4642      	mov	r2, r8
 8007258:	464b      	mov	r3, r9
 800725a:	1891      	adds	r1, r2, r2
 800725c:	6239      	str	r1, [r7, #32]
 800725e:	415b      	adcs	r3, r3
 8007260:	627b      	str	r3, [r7, #36]	; 0x24
 8007262:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007266:	4641      	mov	r1, r8
 8007268:	1854      	adds	r4, r2, r1
 800726a:	4649      	mov	r1, r9
 800726c:	eb43 0501 	adc.w	r5, r3, r1
 8007270:	f04f 0200 	mov.w	r2, #0
 8007274:	f04f 0300 	mov.w	r3, #0
 8007278:	00eb      	lsls	r3, r5, #3
 800727a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800727e:	00e2      	lsls	r2, r4, #3
 8007280:	4614      	mov	r4, r2
 8007282:	461d      	mov	r5, r3
 8007284:	4643      	mov	r3, r8
 8007286:	18e3      	adds	r3, r4, r3
 8007288:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800728c:	464b      	mov	r3, r9
 800728e:	eb45 0303 	adc.w	r3, r5, r3
 8007292:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80072a6:	f04f 0200 	mov.w	r2, #0
 80072aa:	f04f 0300 	mov.w	r3, #0
 80072ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80072b2:	4629      	mov	r1, r5
 80072b4:	008b      	lsls	r3, r1, #2
 80072b6:	4621      	mov	r1, r4
 80072b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072bc:	4621      	mov	r1, r4
 80072be:	008a      	lsls	r2, r1, #2
 80072c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80072c4:	f7f9 fd00 	bl	8000cc8 <__aeabi_uldivmod>
 80072c8:	4602      	mov	r2, r0
 80072ca:	460b      	mov	r3, r1
 80072cc:	4b60      	ldr	r3, [pc, #384]	; (8007450 <UART_SetConfig+0x4e4>)
 80072ce:	fba3 2302 	umull	r2, r3, r3, r2
 80072d2:	095b      	lsrs	r3, r3, #5
 80072d4:	011c      	lsls	r4, r3, #4
 80072d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072da:	2200      	movs	r2, #0
 80072dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80072e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80072e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80072e8:	4642      	mov	r2, r8
 80072ea:	464b      	mov	r3, r9
 80072ec:	1891      	adds	r1, r2, r2
 80072ee:	61b9      	str	r1, [r7, #24]
 80072f0:	415b      	adcs	r3, r3
 80072f2:	61fb      	str	r3, [r7, #28]
 80072f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072f8:	4641      	mov	r1, r8
 80072fa:	1851      	adds	r1, r2, r1
 80072fc:	6139      	str	r1, [r7, #16]
 80072fe:	4649      	mov	r1, r9
 8007300:	414b      	adcs	r3, r1
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	f04f 0200 	mov.w	r2, #0
 8007308:	f04f 0300 	mov.w	r3, #0
 800730c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007310:	4659      	mov	r1, fp
 8007312:	00cb      	lsls	r3, r1, #3
 8007314:	4651      	mov	r1, sl
 8007316:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800731a:	4651      	mov	r1, sl
 800731c:	00ca      	lsls	r2, r1, #3
 800731e:	4610      	mov	r0, r2
 8007320:	4619      	mov	r1, r3
 8007322:	4603      	mov	r3, r0
 8007324:	4642      	mov	r2, r8
 8007326:	189b      	adds	r3, r3, r2
 8007328:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800732c:	464b      	mov	r3, r9
 800732e:	460a      	mov	r2, r1
 8007330:	eb42 0303 	adc.w	r3, r2, r3
 8007334:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	67bb      	str	r3, [r7, #120]	; 0x78
 8007342:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007344:	f04f 0200 	mov.w	r2, #0
 8007348:	f04f 0300 	mov.w	r3, #0
 800734c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007350:	4649      	mov	r1, r9
 8007352:	008b      	lsls	r3, r1, #2
 8007354:	4641      	mov	r1, r8
 8007356:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800735a:	4641      	mov	r1, r8
 800735c:	008a      	lsls	r2, r1, #2
 800735e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007362:	f7f9 fcb1 	bl	8000cc8 <__aeabi_uldivmod>
 8007366:	4602      	mov	r2, r0
 8007368:	460b      	mov	r3, r1
 800736a:	4b39      	ldr	r3, [pc, #228]	; (8007450 <UART_SetConfig+0x4e4>)
 800736c:	fba3 1302 	umull	r1, r3, r3, r2
 8007370:	095b      	lsrs	r3, r3, #5
 8007372:	2164      	movs	r1, #100	; 0x64
 8007374:	fb01 f303 	mul.w	r3, r1, r3
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	011b      	lsls	r3, r3, #4
 800737c:	3332      	adds	r3, #50	; 0x32
 800737e:	4a34      	ldr	r2, [pc, #208]	; (8007450 <UART_SetConfig+0x4e4>)
 8007380:	fba2 2303 	umull	r2, r3, r2, r3
 8007384:	095b      	lsrs	r3, r3, #5
 8007386:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800738a:	441c      	add	r4, r3
 800738c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007390:	2200      	movs	r2, #0
 8007392:	673b      	str	r3, [r7, #112]	; 0x70
 8007394:	677a      	str	r2, [r7, #116]	; 0x74
 8007396:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800739a:	4642      	mov	r2, r8
 800739c:	464b      	mov	r3, r9
 800739e:	1891      	adds	r1, r2, r2
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	415b      	adcs	r3, r3
 80073a4:	60fb      	str	r3, [r7, #12]
 80073a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073aa:	4641      	mov	r1, r8
 80073ac:	1851      	adds	r1, r2, r1
 80073ae:	6039      	str	r1, [r7, #0]
 80073b0:	4649      	mov	r1, r9
 80073b2:	414b      	adcs	r3, r1
 80073b4:	607b      	str	r3, [r7, #4]
 80073b6:	f04f 0200 	mov.w	r2, #0
 80073ba:	f04f 0300 	mov.w	r3, #0
 80073be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80073c2:	4659      	mov	r1, fp
 80073c4:	00cb      	lsls	r3, r1, #3
 80073c6:	4651      	mov	r1, sl
 80073c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073cc:	4651      	mov	r1, sl
 80073ce:	00ca      	lsls	r2, r1, #3
 80073d0:	4610      	mov	r0, r2
 80073d2:	4619      	mov	r1, r3
 80073d4:	4603      	mov	r3, r0
 80073d6:	4642      	mov	r2, r8
 80073d8:	189b      	adds	r3, r3, r2
 80073da:	66bb      	str	r3, [r7, #104]	; 0x68
 80073dc:	464b      	mov	r3, r9
 80073de:	460a      	mov	r2, r1
 80073e0:	eb42 0303 	adc.w	r3, r2, r3
 80073e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	663b      	str	r3, [r7, #96]	; 0x60
 80073f0:	667a      	str	r2, [r7, #100]	; 0x64
 80073f2:	f04f 0200 	mov.w	r2, #0
 80073f6:	f04f 0300 	mov.w	r3, #0
 80073fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80073fe:	4649      	mov	r1, r9
 8007400:	008b      	lsls	r3, r1, #2
 8007402:	4641      	mov	r1, r8
 8007404:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007408:	4641      	mov	r1, r8
 800740a:	008a      	lsls	r2, r1, #2
 800740c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007410:	f7f9 fc5a 	bl	8000cc8 <__aeabi_uldivmod>
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	4b0d      	ldr	r3, [pc, #52]	; (8007450 <UART_SetConfig+0x4e4>)
 800741a:	fba3 1302 	umull	r1, r3, r3, r2
 800741e:	095b      	lsrs	r3, r3, #5
 8007420:	2164      	movs	r1, #100	; 0x64
 8007422:	fb01 f303 	mul.w	r3, r1, r3
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	011b      	lsls	r3, r3, #4
 800742a:	3332      	adds	r3, #50	; 0x32
 800742c:	4a08      	ldr	r2, [pc, #32]	; (8007450 <UART_SetConfig+0x4e4>)
 800742e:	fba2 2303 	umull	r2, r3, r2, r3
 8007432:	095b      	lsrs	r3, r3, #5
 8007434:	f003 020f 	and.w	r2, r3, #15
 8007438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4422      	add	r2, r4
 8007440:	609a      	str	r2, [r3, #8]
 8007442:	bf00      	nop
 8007444:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007448:	46bd      	mov	sp, r7
 800744a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800744e:	bf00      	nop
 8007450:	51eb851f 	.word	0x51eb851f

08007454 <__errno>:
 8007454:	4b01      	ldr	r3, [pc, #4]	; (800745c <__errno+0x8>)
 8007456:	6818      	ldr	r0, [r3, #0]
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	200023d4 	.word	0x200023d4

08007460 <__libc_init_array>:
 8007460:	b570      	push	{r4, r5, r6, lr}
 8007462:	4d0d      	ldr	r5, [pc, #52]	; (8007498 <__libc_init_array+0x38>)
 8007464:	4c0d      	ldr	r4, [pc, #52]	; (800749c <__libc_init_array+0x3c>)
 8007466:	1b64      	subs	r4, r4, r5
 8007468:	10a4      	asrs	r4, r4, #2
 800746a:	2600      	movs	r6, #0
 800746c:	42a6      	cmp	r6, r4
 800746e:	d109      	bne.n	8007484 <__libc_init_array+0x24>
 8007470:	4d0b      	ldr	r5, [pc, #44]	; (80074a0 <__libc_init_array+0x40>)
 8007472:	4c0c      	ldr	r4, [pc, #48]	; (80074a4 <__libc_init_array+0x44>)
 8007474:	f002 ff62 	bl	800a33c <_init>
 8007478:	1b64      	subs	r4, r4, r5
 800747a:	10a4      	asrs	r4, r4, #2
 800747c:	2600      	movs	r6, #0
 800747e:	42a6      	cmp	r6, r4
 8007480:	d105      	bne.n	800748e <__libc_init_array+0x2e>
 8007482:	bd70      	pop	{r4, r5, r6, pc}
 8007484:	f855 3b04 	ldr.w	r3, [r5], #4
 8007488:	4798      	blx	r3
 800748a:	3601      	adds	r6, #1
 800748c:	e7ee      	b.n	800746c <__libc_init_array+0xc>
 800748e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007492:	4798      	blx	r3
 8007494:	3601      	adds	r6, #1
 8007496:	e7f2      	b.n	800747e <__libc_init_array+0x1e>
 8007498:	0800a96c 	.word	0x0800a96c
 800749c:	0800a96c 	.word	0x0800a96c
 80074a0:	0800a96c 	.word	0x0800a96c
 80074a4:	0800a970 	.word	0x0800a970

080074a8 <malloc>:
 80074a8:	4b02      	ldr	r3, [pc, #8]	; (80074b4 <malloc+0xc>)
 80074aa:	4601      	mov	r1, r0
 80074ac:	6818      	ldr	r0, [r3, #0]
 80074ae:	f000 b87f 	b.w	80075b0 <_malloc_r>
 80074b2:	bf00      	nop
 80074b4:	200023d4 	.word	0x200023d4

080074b8 <free>:
 80074b8:	4b02      	ldr	r3, [pc, #8]	; (80074c4 <free+0xc>)
 80074ba:	4601      	mov	r1, r0
 80074bc:	6818      	ldr	r0, [r3, #0]
 80074be:	f000 b80b 	b.w	80074d8 <_free_r>
 80074c2:	bf00      	nop
 80074c4:	200023d4 	.word	0x200023d4

080074c8 <memset>:
 80074c8:	4402      	add	r2, r0
 80074ca:	4603      	mov	r3, r0
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d100      	bne.n	80074d2 <memset+0xa>
 80074d0:	4770      	bx	lr
 80074d2:	f803 1b01 	strb.w	r1, [r3], #1
 80074d6:	e7f9      	b.n	80074cc <memset+0x4>

080074d8 <_free_r>:
 80074d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074da:	2900      	cmp	r1, #0
 80074dc:	d044      	beq.n	8007568 <_free_r+0x90>
 80074de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074e2:	9001      	str	r0, [sp, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f1a1 0404 	sub.w	r4, r1, #4
 80074ea:	bfb8      	it	lt
 80074ec:	18e4      	addlt	r4, r4, r3
 80074ee:	f001 fc0b 	bl	8008d08 <__malloc_lock>
 80074f2:	4a1e      	ldr	r2, [pc, #120]	; (800756c <_free_r+0x94>)
 80074f4:	9801      	ldr	r0, [sp, #4]
 80074f6:	6813      	ldr	r3, [r2, #0]
 80074f8:	b933      	cbnz	r3, 8007508 <_free_r+0x30>
 80074fa:	6063      	str	r3, [r4, #4]
 80074fc:	6014      	str	r4, [r2, #0]
 80074fe:	b003      	add	sp, #12
 8007500:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007504:	f001 bc06 	b.w	8008d14 <__malloc_unlock>
 8007508:	42a3      	cmp	r3, r4
 800750a:	d908      	bls.n	800751e <_free_r+0x46>
 800750c:	6825      	ldr	r5, [r4, #0]
 800750e:	1961      	adds	r1, r4, r5
 8007510:	428b      	cmp	r3, r1
 8007512:	bf01      	itttt	eq
 8007514:	6819      	ldreq	r1, [r3, #0]
 8007516:	685b      	ldreq	r3, [r3, #4]
 8007518:	1949      	addeq	r1, r1, r5
 800751a:	6021      	streq	r1, [r4, #0]
 800751c:	e7ed      	b.n	80074fa <_free_r+0x22>
 800751e:	461a      	mov	r2, r3
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	b10b      	cbz	r3, 8007528 <_free_r+0x50>
 8007524:	42a3      	cmp	r3, r4
 8007526:	d9fa      	bls.n	800751e <_free_r+0x46>
 8007528:	6811      	ldr	r1, [r2, #0]
 800752a:	1855      	adds	r5, r2, r1
 800752c:	42a5      	cmp	r5, r4
 800752e:	d10b      	bne.n	8007548 <_free_r+0x70>
 8007530:	6824      	ldr	r4, [r4, #0]
 8007532:	4421      	add	r1, r4
 8007534:	1854      	adds	r4, r2, r1
 8007536:	42a3      	cmp	r3, r4
 8007538:	6011      	str	r1, [r2, #0]
 800753a:	d1e0      	bne.n	80074fe <_free_r+0x26>
 800753c:	681c      	ldr	r4, [r3, #0]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	6053      	str	r3, [r2, #4]
 8007542:	4421      	add	r1, r4
 8007544:	6011      	str	r1, [r2, #0]
 8007546:	e7da      	b.n	80074fe <_free_r+0x26>
 8007548:	d902      	bls.n	8007550 <_free_r+0x78>
 800754a:	230c      	movs	r3, #12
 800754c:	6003      	str	r3, [r0, #0]
 800754e:	e7d6      	b.n	80074fe <_free_r+0x26>
 8007550:	6825      	ldr	r5, [r4, #0]
 8007552:	1961      	adds	r1, r4, r5
 8007554:	428b      	cmp	r3, r1
 8007556:	bf04      	itt	eq
 8007558:	6819      	ldreq	r1, [r3, #0]
 800755a:	685b      	ldreq	r3, [r3, #4]
 800755c:	6063      	str	r3, [r4, #4]
 800755e:	bf04      	itt	eq
 8007560:	1949      	addeq	r1, r1, r5
 8007562:	6021      	streq	r1, [r4, #0]
 8007564:	6054      	str	r4, [r2, #4]
 8007566:	e7ca      	b.n	80074fe <_free_r+0x26>
 8007568:	b003      	add	sp, #12
 800756a:	bd30      	pop	{r4, r5, pc}
 800756c:	2000297c 	.word	0x2000297c

08007570 <sbrk_aligned>:
 8007570:	b570      	push	{r4, r5, r6, lr}
 8007572:	4e0e      	ldr	r6, [pc, #56]	; (80075ac <sbrk_aligned+0x3c>)
 8007574:	460c      	mov	r4, r1
 8007576:	6831      	ldr	r1, [r6, #0]
 8007578:	4605      	mov	r5, r0
 800757a:	b911      	cbnz	r1, 8007582 <sbrk_aligned+0x12>
 800757c:	f000 fcf6 	bl	8007f6c <_sbrk_r>
 8007580:	6030      	str	r0, [r6, #0]
 8007582:	4621      	mov	r1, r4
 8007584:	4628      	mov	r0, r5
 8007586:	f000 fcf1 	bl	8007f6c <_sbrk_r>
 800758a:	1c43      	adds	r3, r0, #1
 800758c:	d00a      	beq.n	80075a4 <sbrk_aligned+0x34>
 800758e:	1cc4      	adds	r4, r0, #3
 8007590:	f024 0403 	bic.w	r4, r4, #3
 8007594:	42a0      	cmp	r0, r4
 8007596:	d007      	beq.n	80075a8 <sbrk_aligned+0x38>
 8007598:	1a21      	subs	r1, r4, r0
 800759a:	4628      	mov	r0, r5
 800759c:	f000 fce6 	bl	8007f6c <_sbrk_r>
 80075a0:	3001      	adds	r0, #1
 80075a2:	d101      	bne.n	80075a8 <sbrk_aligned+0x38>
 80075a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80075a8:	4620      	mov	r0, r4
 80075aa:	bd70      	pop	{r4, r5, r6, pc}
 80075ac:	20002980 	.word	0x20002980

080075b0 <_malloc_r>:
 80075b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b4:	1ccd      	adds	r5, r1, #3
 80075b6:	f025 0503 	bic.w	r5, r5, #3
 80075ba:	3508      	adds	r5, #8
 80075bc:	2d0c      	cmp	r5, #12
 80075be:	bf38      	it	cc
 80075c0:	250c      	movcc	r5, #12
 80075c2:	2d00      	cmp	r5, #0
 80075c4:	4607      	mov	r7, r0
 80075c6:	db01      	blt.n	80075cc <_malloc_r+0x1c>
 80075c8:	42a9      	cmp	r1, r5
 80075ca:	d905      	bls.n	80075d8 <_malloc_r+0x28>
 80075cc:	230c      	movs	r3, #12
 80075ce:	603b      	str	r3, [r7, #0]
 80075d0:	2600      	movs	r6, #0
 80075d2:	4630      	mov	r0, r6
 80075d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075d8:	4e2e      	ldr	r6, [pc, #184]	; (8007694 <_malloc_r+0xe4>)
 80075da:	f001 fb95 	bl	8008d08 <__malloc_lock>
 80075de:	6833      	ldr	r3, [r6, #0]
 80075e0:	461c      	mov	r4, r3
 80075e2:	bb34      	cbnz	r4, 8007632 <_malloc_r+0x82>
 80075e4:	4629      	mov	r1, r5
 80075e6:	4638      	mov	r0, r7
 80075e8:	f7ff ffc2 	bl	8007570 <sbrk_aligned>
 80075ec:	1c43      	adds	r3, r0, #1
 80075ee:	4604      	mov	r4, r0
 80075f0:	d14d      	bne.n	800768e <_malloc_r+0xde>
 80075f2:	6834      	ldr	r4, [r6, #0]
 80075f4:	4626      	mov	r6, r4
 80075f6:	2e00      	cmp	r6, #0
 80075f8:	d140      	bne.n	800767c <_malloc_r+0xcc>
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	4631      	mov	r1, r6
 80075fe:	4638      	mov	r0, r7
 8007600:	eb04 0803 	add.w	r8, r4, r3
 8007604:	f000 fcb2 	bl	8007f6c <_sbrk_r>
 8007608:	4580      	cmp	r8, r0
 800760a:	d13a      	bne.n	8007682 <_malloc_r+0xd2>
 800760c:	6821      	ldr	r1, [r4, #0]
 800760e:	3503      	adds	r5, #3
 8007610:	1a6d      	subs	r5, r5, r1
 8007612:	f025 0503 	bic.w	r5, r5, #3
 8007616:	3508      	adds	r5, #8
 8007618:	2d0c      	cmp	r5, #12
 800761a:	bf38      	it	cc
 800761c:	250c      	movcc	r5, #12
 800761e:	4629      	mov	r1, r5
 8007620:	4638      	mov	r0, r7
 8007622:	f7ff ffa5 	bl	8007570 <sbrk_aligned>
 8007626:	3001      	adds	r0, #1
 8007628:	d02b      	beq.n	8007682 <_malloc_r+0xd2>
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	442b      	add	r3, r5
 800762e:	6023      	str	r3, [r4, #0]
 8007630:	e00e      	b.n	8007650 <_malloc_r+0xa0>
 8007632:	6822      	ldr	r2, [r4, #0]
 8007634:	1b52      	subs	r2, r2, r5
 8007636:	d41e      	bmi.n	8007676 <_malloc_r+0xc6>
 8007638:	2a0b      	cmp	r2, #11
 800763a:	d916      	bls.n	800766a <_malloc_r+0xba>
 800763c:	1961      	adds	r1, r4, r5
 800763e:	42a3      	cmp	r3, r4
 8007640:	6025      	str	r5, [r4, #0]
 8007642:	bf18      	it	ne
 8007644:	6059      	strne	r1, [r3, #4]
 8007646:	6863      	ldr	r3, [r4, #4]
 8007648:	bf08      	it	eq
 800764a:	6031      	streq	r1, [r6, #0]
 800764c:	5162      	str	r2, [r4, r5]
 800764e:	604b      	str	r3, [r1, #4]
 8007650:	4638      	mov	r0, r7
 8007652:	f104 060b 	add.w	r6, r4, #11
 8007656:	f001 fb5d 	bl	8008d14 <__malloc_unlock>
 800765a:	f026 0607 	bic.w	r6, r6, #7
 800765e:	1d23      	adds	r3, r4, #4
 8007660:	1af2      	subs	r2, r6, r3
 8007662:	d0b6      	beq.n	80075d2 <_malloc_r+0x22>
 8007664:	1b9b      	subs	r3, r3, r6
 8007666:	50a3      	str	r3, [r4, r2]
 8007668:	e7b3      	b.n	80075d2 <_malloc_r+0x22>
 800766a:	6862      	ldr	r2, [r4, #4]
 800766c:	42a3      	cmp	r3, r4
 800766e:	bf0c      	ite	eq
 8007670:	6032      	streq	r2, [r6, #0]
 8007672:	605a      	strne	r2, [r3, #4]
 8007674:	e7ec      	b.n	8007650 <_malloc_r+0xa0>
 8007676:	4623      	mov	r3, r4
 8007678:	6864      	ldr	r4, [r4, #4]
 800767a:	e7b2      	b.n	80075e2 <_malloc_r+0x32>
 800767c:	4634      	mov	r4, r6
 800767e:	6876      	ldr	r6, [r6, #4]
 8007680:	e7b9      	b.n	80075f6 <_malloc_r+0x46>
 8007682:	230c      	movs	r3, #12
 8007684:	603b      	str	r3, [r7, #0]
 8007686:	4638      	mov	r0, r7
 8007688:	f001 fb44 	bl	8008d14 <__malloc_unlock>
 800768c:	e7a1      	b.n	80075d2 <_malloc_r+0x22>
 800768e:	6025      	str	r5, [r4, #0]
 8007690:	e7de      	b.n	8007650 <_malloc_r+0xa0>
 8007692:	bf00      	nop
 8007694:	2000297c 	.word	0x2000297c

08007698 <__cvt>:
 8007698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800769c:	ec55 4b10 	vmov	r4, r5, d0
 80076a0:	2d00      	cmp	r5, #0
 80076a2:	460e      	mov	r6, r1
 80076a4:	4619      	mov	r1, r3
 80076a6:	462b      	mov	r3, r5
 80076a8:	bfbb      	ittet	lt
 80076aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80076ae:	461d      	movlt	r5, r3
 80076b0:	2300      	movge	r3, #0
 80076b2:	232d      	movlt	r3, #45	; 0x2d
 80076b4:	700b      	strb	r3, [r1, #0]
 80076b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80076bc:	4691      	mov	r9, r2
 80076be:	f023 0820 	bic.w	r8, r3, #32
 80076c2:	bfbc      	itt	lt
 80076c4:	4622      	movlt	r2, r4
 80076c6:	4614      	movlt	r4, r2
 80076c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076cc:	d005      	beq.n	80076da <__cvt+0x42>
 80076ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80076d2:	d100      	bne.n	80076d6 <__cvt+0x3e>
 80076d4:	3601      	adds	r6, #1
 80076d6:	2102      	movs	r1, #2
 80076d8:	e000      	b.n	80076dc <__cvt+0x44>
 80076da:	2103      	movs	r1, #3
 80076dc:	ab03      	add	r3, sp, #12
 80076de:	9301      	str	r3, [sp, #4]
 80076e0:	ab02      	add	r3, sp, #8
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	ec45 4b10 	vmov	d0, r4, r5
 80076e8:	4653      	mov	r3, sl
 80076ea:	4632      	mov	r2, r6
 80076ec:	f000 fd0c 	bl	8008108 <_dtoa_r>
 80076f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80076f4:	4607      	mov	r7, r0
 80076f6:	d102      	bne.n	80076fe <__cvt+0x66>
 80076f8:	f019 0f01 	tst.w	r9, #1
 80076fc:	d022      	beq.n	8007744 <__cvt+0xac>
 80076fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007702:	eb07 0906 	add.w	r9, r7, r6
 8007706:	d110      	bne.n	800772a <__cvt+0x92>
 8007708:	783b      	ldrb	r3, [r7, #0]
 800770a:	2b30      	cmp	r3, #48	; 0x30
 800770c:	d10a      	bne.n	8007724 <__cvt+0x8c>
 800770e:	2200      	movs	r2, #0
 8007710:	2300      	movs	r3, #0
 8007712:	4620      	mov	r0, r4
 8007714:	4629      	mov	r1, r5
 8007716:	f7f9 f9f7 	bl	8000b08 <__aeabi_dcmpeq>
 800771a:	b918      	cbnz	r0, 8007724 <__cvt+0x8c>
 800771c:	f1c6 0601 	rsb	r6, r6, #1
 8007720:	f8ca 6000 	str.w	r6, [sl]
 8007724:	f8da 3000 	ldr.w	r3, [sl]
 8007728:	4499      	add	r9, r3
 800772a:	2200      	movs	r2, #0
 800772c:	2300      	movs	r3, #0
 800772e:	4620      	mov	r0, r4
 8007730:	4629      	mov	r1, r5
 8007732:	f7f9 f9e9 	bl	8000b08 <__aeabi_dcmpeq>
 8007736:	b108      	cbz	r0, 800773c <__cvt+0xa4>
 8007738:	f8cd 900c 	str.w	r9, [sp, #12]
 800773c:	2230      	movs	r2, #48	; 0x30
 800773e:	9b03      	ldr	r3, [sp, #12]
 8007740:	454b      	cmp	r3, r9
 8007742:	d307      	bcc.n	8007754 <__cvt+0xbc>
 8007744:	9b03      	ldr	r3, [sp, #12]
 8007746:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007748:	1bdb      	subs	r3, r3, r7
 800774a:	4638      	mov	r0, r7
 800774c:	6013      	str	r3, [r2, #0]
 800774e:	b004      	add	sp, #16
 8007750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007754:	1c59      	adds	r1, r3, #1
 8007756:	9103      	str	r1, [sp, #12]
 8007758:	701a      	strb	r2, [r3, #0]
 800775a:	e7f0      	b.n	800773e <__cvt+0xa6>

0800775c <__exponent>:
 800775c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800775e:	4603      	mov	r3, r0
 8007760:	2900      	cmp	r1, #0
 8007762:	bfb8      	it	lt
 8007764:	4249      	neglt	r1, r1
 8007766:	f803 2b02 	strb.w	r2, [r3], #2
 800776a:	bfb4      	ite	lt
 800776c:	222d      	movlt	r2, #45	; 0x2d
 800776e:	222b      	movge	r2, #43	; 0x2b
 8007770:	2909      	cmp	r1, #9
 8007772:	7042      	strb	r2, [r0, #1]
 8007774:	dd2a      	ble.n	80077cc <__exponent+0x70>
 8007776:	f10d 0407 	add.w	r4, sp, #7
 800777a:	46a4      	mov	ip, r4
 800777c:	270a      	movs	r7, #10
 800777e:	46a6      	mov	lr, r4
 8007780:	460a      	mov	r2, r1
 8007782:	fb91 f6f7 	sdiv	r6, r1, r7
 8007786:	fb07 1516 	mls	r5, r7, r6, r1
 800778a:	3530      	adds	r5, #48	; 0x30
 800778c:	2a63      	cmp	r2, #99	; 0x63
 800778e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007792:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007796:	4631      	mov	r1, r6
 8007798:	dcf1      	bgt.n	800777e <__exponent+0x22>
 800779a:	3130      	adds	r1, #48	; 0x30
 800779c:	f1ae 0502 	sub.w	r5, lr, #2
 80077a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80077a4:	1c44      	adds	r4, r0, #1
 80077a6:	4629      	mov	r1, r5
 80077a8:	4561      	cmp	r1, ip
 80077aa:	d30a      	bcc.n	80077c2 <__exponent+0x66>
 80077ac:	f10d 0209 	add.w	r2, sp, #9
 80077b0:	eba2 020e 	sub.w	r2, r2, lr
 80077b4:	4565      	cmp	r5, ip
 80077b6:	bf88      	it	hi
 80077b8:	2200      	movhi	r2, #0
 80077ba:	4413      	add	r3, r2
 80077bc:	1a18      	subs	r0, r3, r0
 80077be:	b003      	add	sp, #12
 80077c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80077ca:	e7ed      	b.n	80077a8 <__exponent+0x4c>
 80077cc:	2330      	movs	r3, #48	; 0x30
 80077ce:	3130      	adds	r1, #48	; 0x30
 80077d0:	7083      	strb	r3, [r0, #2]
 80077d2:	70c1      	strb	r1, [r0, #3]
 80077d4:	1d03      	adds	r3, r0, #4
 80077d6:	e7f1      	b.n	80077bc <__exponent+0x60>

080077d8 <_printf_float>:
 80077d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077dc:	ed2d 8b02 	vpush	{d8}
 80077e0:	b08d      	sub	sp, #52	; 0x34
 80077e2:	460c      	mov	r4, r1
 80077e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80077e8:	4616      	mov	r6, r2
 80077ea:	461f      	mov	r7, r3
 80077ec:	4605      	mov	r5, r0
 80077ee:	f001 fa79 	bl	8008ce4 <_localeconv_r>
 80077f2:	f8d0 a000 	ldr.w	sl, [r0]
 80077f6:	4650      	mov	r0, sl
 80077f8:	f7f8 fd0a 	bl	8000210 <strlen>
 80077fc:	2300      	movs	r3, #0
 80077fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007800:	6823      	ldr	r3, [r4, #0]
 8007802:	9305      	str	r3, [sp, #20]
 8007804:	f8d8 3000 	ldr.w	r3, [r8]
 8007808:	f894 b018 	ldrb.w	fp, [r4, #24]
 800780c:	3307      	adds	r3, #7
 800780e:	f023 0307 	bic.w	r3, r3, #7
 8007812:	f103 0208 	add.w	r2, r3, #8
 8007816:	f8c8 2000 	str.w	r2, [r8]
 800781a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007822:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007826:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800782a:	9307      	str	r3, [sp, #28]
 800782c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007830:	ee08 0a10 	vmov	s16, r0
 8007834:	4b9f      	ldr	r3, [pc, #636]	; (8007ab4 <_printf_float+0x2dc>)
 8007836:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800783a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800783e:	f7f9 f995 	bl	8000b6c <__aeabi_dcmpun>
 8007842:	bb88      	cbnz	r0, 80078a8 <_printf_float+0xd0>
 8007844:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007848:	4b9a      	ldr	r3, [pc, #616]	; (8007ab4 <_printf_float+0x2dc>)
 800784a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800784e:	f7f9 f96f 	bl	8000b30 <__aeabi_dcmple>
 8007852:	bb48      	cbnz	r0, 80078a8 <_printf_float+0xd0>
 8007854:	2200      	movs	r2, #0
 8007856:	2300      	movs	r3, #0
 8007858:	4640      	mov	r0, r8
 800785a:	4649      	mov	r1, r9
 800785c:	f7f9 f95e 	bl	8000b1c <__aeabi_dcmplt>
 8007860:	b110      	cbz	r0, 8007868 <_printf_float+0x90>
 8007862:	232d      	movs	r3, #45	; 0x2d
 8007864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007868:	4b93      	ldr	r3, [pc, #588]	; (8007ab8 <_printf_float+0x2e0>)
 800786a:	4894      	ldr	r0, [pc, #592]	; (8007abc <_printf_float+0x2e4>)
 800786c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007870:	bf94      	ite	ls
 8007872:	4698      	movls	r8, r3
 8007874:	4680      	movhi	r8, r0
 8007876:	2303      	movs	r3, #3
 8007878:	6123      	str	r3, [r4, #16]
 800787a:	9b05      	ldr	r3, [sp, #20]
 800787c:	f023 0204 	bic.w	r2, r3, #4
 8007880:	6022      	str	r2, [r4, #0]
 8007882:	f04f 0900 	mov.w	r9, #0
 8007886:	9700      	str	r7, [sp, #0]
 8007888:	4633      	mov	r3, r6
 800788a:	aa0b      	add	r2, sp, #44	; 0x2c
 800788c:	4621      	mov	r1, r4
 800788e:	4628      	mov	r0, r5
 8007890:	f000 f9d8 	bl	8007c44 <_printf_common>
 8007894:	3001      	adds	r0, #1
 8007896:	f040 8090 	bne.w	80079ba <_printf_float+0x1e2>
 800789a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800789e:	b00d      	add	sp, #52	; 0x34
 80078a0:	ecbd 8b02 	vpop	{d8}
 80078a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a8:	4642      	mov	r2, r8
 80078aa:	464b      	mov	r3, r9
 80078ac:	4640      	mov	r0, r8
 80078ae:	4649      	mov	r1, r9
 80078b0:	f7f9 f95c 	bl	8000b6c <__aeabi_dcmpun>
 80078b4:	b140      	cbz	r0, 80078c8 <_printf_float+0xf0>
 80078b6:	464b      	mov	r3, r9
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	bfbc      	itt	lt
 80078bc:	232d      	movlt	r3, #45	; 0x2d
 80078be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80078c2:	487f      	ldr	r0, [pc, #508]	; (8007ac0 <_printf_float+0x2e8>)
 80078c4:	4b7f      	ldr	r3, [pc, #508]	; (8007ac4 <_printf_float+0x2ec>)
 80078c6:	e7d1      	b.n	800786c <_printf_float+0x94>
 80078c8:	6863      	ldr	r3, [r4, #4]
 80078ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80078ce:	9206      	str	r2, [sp, #24]
 80078d0:	1c5a      	adds	r2, r3, #1
 80078d2:	d13f      	bne.n	8007954 <_printf_float+0x17c>
 80078d4:	2306      	movs	r3, #6
 80078d6:	6063      	str	r3, [r4, #4]
 80078d8:	9b05      	ldr	r3, [sp, #20]
 80078da:	6861      	ldr	r1, [r4, #4]
 80078dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80078e0:	2300      	movs	r3, #0
 80078e2:	9303      	str	r3, [sp, #12]
 80078e4:	ab0a      	add	r3, sp, #40	; 0x28
 80078e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80078ea:	ab09      	add	r3, sp, #36	; 0x24
 80078ec:	ec49 8b10 	vmov	d0, r8, r9
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	6022      	str	r2, [r4, #0]
 80078f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80078f8:	4628      	mov	r0, r5
 80078fa:	f7ff fecd 	bl	8007698 <__cvt>
 80078fe:	9b06      	ldr	r3, [sp, #24]
 8007900:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007902:	2b47      	cmp	r3, #71	; 0x47
 8007904:	4680      	mov	r8, r0
 8007906:	d108      	bne.n	800791a <_printf_float+0x142>
 8007908:	1cc8      	adds	r0, r1, #3
 800790a:	db02      	blt.n	8007912 <_printf_float+0x13a>
 800790c:	6863      	ldr	r3, [r4, #4]
 800790e:	4299      	cmp	r1, r3
 8007910:	dd41      	ble.n	8007996 <_printf_float+0x1be>
 8007912:	f1ab 0b02 	sub.w	fp, fp, #2
 8007916:	fa5f fb8b 	uxtb.w	fp, fp
 800791a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800791e:	d820      	bhi.n	8007962 <_printf_float+0x18a>
 8007920:	3901      	subs	r1, #1
 8007922:	465a      	mov	r2, fp
 8007924:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007928:	9109      	str	r1, [sp, #36]	; 0x24
 800792a:	f7ff ff17 	bl	800775c <__exponent>
 800792e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007930:	1813      	adds	r3, r2, r0
 8007932:	2a01      	cmp	r2, #1
 8007934:	4681      	mov	r9, r0
 8007936:	6123      	str	r3, [r4, #16]
 8007938:	dc02      	bgt.n	8007940 <_printf_float+0x168>
 800793a:	6822      	ldr	r2, [r4, #0]
 800793c:	07d2      	lsls	r2, r2, #31
 800793e:	d501      	bpl.n	8007944 <_printf_float+0x16c>
 8007940:	3301      	adds	r3, #1
 8007942:	6123      	str	r3, [r4, #16]
 8007944:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007948:	2b00      	cmp	r3, #0
 800794a:	d09c      	beq.n	8007886 <_printf_float+0xae>
 800794c:	232d      	movs	r3, #45	; 0x2d
 800794e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007952:	e798      	b.n	8007886 <_printf_float+0xae>
 8007954:	9a06      	ldr	r2, [sp, #24]
 8007956:	2a47      	cmp	r2, #71	; 0x47
 8007958:	d1be      	bne.n	80078d8 <_printf_float+0x100>
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1bc      	bne.n	80078d8 <_printf_float+0x100>
 800795e:	2301      	movs	r3, #1
 8007960:	e7b9      	b.n	80078d6 <_printf_float+0xfe>
 8007962:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007966:	d118      	bne.n	800799a <_printf_float+0x1c2>
 8007968:	2900      	cmp	r1, #0
 800796a:	6863      	ldr	r3, [r4, #4]
 800796c:	dd0b      	ble.n	8007986 <_printf_float+0x1ae>
 800796e:	6121      	str	r1, [r4, #16]
 8007970:	b913      	cbnz	r3, 8007978 <_printf_float+0x1a0>
 8007972:	6822      	ldr	r2, [r4, #0]
 8007974:	07d0      	lsls	r0, r2, #31
 8007976:	d502      	bpl.n	800797e <_printf_float+0x1a6>
 8007978:	3301      	adds	r3, #1
 800797a:	440b      	add	r3, r1
 800797c:	6123      	str	r3, [r4, #16]
 800797e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007980:	f04f 0900 	mov.w	r9, #0
 8007984:	e7de      	b.n	8007944 <_printf_float+0x16c>
 8007986:	b913      	cbnz	r3, 800798e <_printf_float+0x1b6>
 8007988:	6822      	ldr	r2, [r4, #0]
 800798a:	07d2      	lsls	r2, r2, #31
 800798c:	d501      	bpl.n	8007992 <_printf_float+0x1ba>
 800798e:	3302      	adds	r3, #2
 8007990:	e7f4      	b.n	800797c <_printf_float+0x1a4>
 8007992:	2301      	movs	r3, #1
 8007994:	e7f2      	b.n	800797c <_printf_float+0x1a4>
 8007996:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800799a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800799c:	4299      	cmp	r1, r3
 800799e:	db05      	blt.n	80079ac <_printf_float+0x1d4>
 80079a0:	6823      	ldr	r3, [r4, #0]
 80079a2:	6121      	str	r1, [r4, #16]
 80079a4:	07d8      	lsls	r0, r3, #31
 80079a6:	d5ea      	bpl.n	800797e <_printf_float+0x1a6>
 80079a8:	1c4b      	adds	r3, r1, #1
 80079aa:	e7e7      	b.n	800797c <_printf_float+0x1a4>
 80079ac:	2900      	cmp	r1, #0
 80079ae:	bfd4      	ite	le
 80079b0:	f1c1 0202 	rsble	r2, r1, #2
 80079b4:	2201      	movgt	r2, #1
 80079b6:	4413      	add	r3, r2
 80079b8:	e7e0      	b.n	800797c <_printf_float+0x1a4>
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	055a      	lsls	r2, r3, #21
 80079be:	d407      	bmi.n	80079d0 <_printf_float+0x1f8>
 80079c0:	6923      	ldr	r3, [r4, #16]
 80079c2:	4642      	mov	r2, r8
 80079c4:	4631      	mov	r1, r6
 80079c6:	4628      	mov	r0, r5
 80079c8:	47b8      	blx	r7
 80079ca:	3001      	adds	r0, #1
 80079cc:	d12c      	bne.n	8007a28 <_printf_float+0x250>
 80079ce:	e764      	b.n	800789a <_printf_float+0xc2>
 80079d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079d4:	f240 80e0 	bls.w	8007b98 <_printf_float+0x3c0>
 80079d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079dc:	2200      	movs	r2, #0
 80079de:	2300      	movs	r3, #0
 80079e0:	f7f9 f892 	bl	8000b08 <__aeabi_dcmpeq>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	d034      	beq.n	8007a52 <_printf_float+0x27a>
 80079e8:	4a37      	ldr	r2, [pc, #220]	; (8007ac8 <_printf_float+0x2f0>)
 80079ea:	2301      	movs	r3, #1
 80079ec:	4631      	mov	r1, r6
 80079ee:	4628      	mov	r0, r5
 80079f0:	47b8      	blx	r7
 80079f2:	3001      	adds	r0, #1
 80079f4:	f43f af51 	beq.w	800789a <_printf_float+0xc2>
 80079f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079fc:	429a      	cmp	r2, r3
 80079fe:	db02      	blt.n	8007a06 <_printf_float+0x22e>
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	07d8      	lsls	r0, r3, #31
 8007a04:	d510      	bpl.n	8007a28 <_printf_float+0x250>
 8007a06:	ee18 3a10 	vmov	r3, s16
 8007a0a:	4652      	mov	r2, sl
 8007a0c:	4631      	mov	r1, r6
 8007a0e:	4628      	mov	r0, r5
 8007a10:	47b8      	blx	r7
 8007a12:	3001      	adds	r0, #1
 8007a14:	f43f af41 	beq.w	800789a <_printf_float+0xc2>
 8007a18:	f04f 0800 	mov.w	r8, #0
 8007a1c:	f104 091a 	add.w	r9, r4, #26
 8007a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a22:	3b01      	subs	r3, #1
 8007a24:	4543      	cmp	r3, r8
 8007a26:	dc09      	bgt.n	8007a3c <_printf_float+0x264>
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	079b      	lsls	r3, r3, #30
 8007a2c:	f100 8105 	bmi.w	8007c3a <_printf_float+0x462>
 8007a30:	68e0      	ldr	r0, [r4, #12]
 8007a32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a34:	4298      	cmp	r0, r3
 8007a36:	bfb8      	it	lt
 8007a38:	4618      	movlt	r0, r3
 8007a3a:	e730      	b.n	800789e <_printf_float+0xc6>
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	464a      	mov	r2, r9
 8007a40:	4631      	mov	r1, r6
 8007a42:	4628      	mov	r0, r5
 8007a44:	47b8      	blx	r7
 8007a46:	3001      	adds	r0, #1
 8007a48:	f43f af27 	beq.w	800789a <_printf_float+0xc2>
 8007a4c:	f108 0801 	add.w	r8, r8, #1
 8007a50:	e7e6      	b.n	8007a20 <_printf_float+0x248>
 8007a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	dc39      	bgt.n	8007acc <_printf_float+0x2f4>
 8007a58:	4a1b      	ldr	r2, [pc, #108]	; (8007ac8 <_printf_float+0x2f0>)
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	4631      	mov	r1, r6
 8007a5e:	4628      	mov	r0, r5
 8007a60:	47b8      	blx	r7
 8007a62:	3001      	adds	r0, #1
 8007a64:	f43f af19 	beq.w	800789a <_printf_float+0xc2>
 8007a68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	d102      	bne.n	8007a76 <_printf_float+0x29e>
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	07d9      	lsls	r1, r3, #31
 8007a74:	d5d8      	bpl.n	8007a28 <_printf_float+0x250>
 8007a76:	ee18 3a10 	vmov	r3, s16
 8007a7a:	4652      	mov	r2, sl
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	4628      	mov	r0, r5
 8007a80:	47b8      	blx	r7
 8007a82:	3001      	adds	r0, #1
 8007a84:	f43f af09 	beq.w	800789a <_printf_float+0xc2>
 8007a88:	f04f 0900 	mov.w	r9, #0
 8007a8c:	f104 0a1a 	add.w	sl, r4, #26
 8007a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a92:	425b      	negs	r3, r3
 8007a94:	454b      	cmp	r3, r9
 8007a96:	dc01      	bgt.n	8007a9c <_printf_float+0x2c4>
 8007a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a9a:	e792      	b.n	80079c2 <_printf_float+0x1ea>
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	4652      	mov	r2, sl
 8007aa0:	4631      	mov	r1, r6
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	47b8      	blx	r7
 8007aa6:	3001      	adds	r0, #1
 8007aa8:	f43f aef7 	beq.w	800789a <_printf_float+0xc2>
 8007aac:	f109 0901 	add.w	r9, r9, #1
 8007ab0:	e7ee      	b.n	8007a90 <_printf_float+0x2b8>
 8007ab2:	bf00      	nop
 8007ab4:	7fefffff 	.word	0x7fefffff
 8007ab8:	0800a58c 	.word	0x0800a58c
 8007abc:	0800a590 	.word	0x0800a590
 8007ac0:	0800a598 	.word	0x0800a598
 8007ac4:	0800a594 	.word	0x0800a594
 8007ac8:	0800a59c 	.word	0x0800a59c
 8007acc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ace:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	bfa8      	it	ge
 8007ad4:	461a      	movge	r2, r3
 8007ad6:	2a00      	cmp	r2, #0
 8007ad8:	4691      	mov	r9, r2
 8007ada:	dc37      	bgt.n	8007b4c <_printf_float+0x374>
 8007adc:	f04f 0b00 	mov.w	fp, #0
 8007ae0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ae4:	f104 021a 	add.w	r2, r4, #26
 8007ae8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007aea:	9305      	str	r3, [sp, #20]
 8007aec:	eba3 0309 	sub.w	r3, r3, r9
 8007af0:	455b      	cmp	r3, fp
 8007af2:	dc33      	bgt.n	8007b5c <_printf_float+0x384>
 8007af4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007af8:	429a      	cmp	r2, r3
 8007afa:	db3b      	blt.n	8007b74 <_printf_float+0x39c>
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	07da      	lsls	r2, r3, #31
 8007b00:	d438      	bmi.n	8007b74 <_printf_float+0x39c>
 8007b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b04:	9a05      	ldr	r2, [sp, #20]
 8007b06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b08:	1a9a      	subs	r2, r3, r2
 8007b0a:	eba3 0901 	sub.w	r9, r3, r1
 8007b0e:	4591      	cmp	r9, r2
 8007b10:	bfa8      	it	ge
 8007b12:	4691      	movge	r9, r2
 8007b14:	f1b9 0f00 	cmp.w	r9, #0
 8007b18:	dc35      	bgt.n	8007b86 <_printf_float+0x3ae>
 8007b1a:	f04f 0800 	mov.w	r8, #0
 8007b1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b22:	f104 0a1a 	add.w	sl, r4, #26
 8007b26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b2a:	1a9b      	subs	r3, r3, r2
 8007b2c:	eba3 0309 	sub.w	r3, r3, r9
 8007b30:	4543      	cmp	r3, r8
 8007b32:	f77f af79 	ble.w	8007a28 <_printf_float+0x250>
 8007b36:	2301      	movs	r3, #1
 8007b38:	4652      	mov	r2, sl
 8007b3a:	4631      	mov	r1, r6
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	47b8      	blx	r7
 8007b40:	3001      	adds	r0, #1
 8007b42:	f43f aeaa 	beq.w	800789a <_printf_float+0xc2>
 8007b46:	f108 0801 	add.w	r8, r8, #1
 8007b4a:	e7ec      	b.n	8007b26 <_printf_float+0x34e>
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	4631      	mov	r1, r6
 8007b50:	4642      	mov	r2, r8
 8007b52:	4628      	mov	r0, r5
 8007b54:	47b8      	blx	r7
 8007b56:	3001      	adds	r0, #1
 8007b58:	d1c0      	bne.n	8007adc <_printf_float+0x304>
 8007b5a:	e69e      	b.n	800789a <_printf_float+0xc2>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	4631      	mov	r1, r6
 8007b60:	4628      	mov	r0, r5
 8007b62:	9205      	str	r2, [sp, #20]
 8007b64:	47b8      	blx	r7
 8007b66:	3001      	adds	r0, #1
 8007b68:	f43f ae97 	beq.w	800789a <_printf_float+0xc2>
 8007b6c:	9a05      	ldr	r2, [sp, #20]
 8007b6e:	f10b 0b01 	add.w	fp, fp, #1
 8007b72:	e7b9      	b.n	8007ae8 <_printf_float+0x310>
 8007b74:	ee18 3a10 	vmov	r3, s16
 8007b78:	4652      	mov	r2, sl
 8007b7a:	4631      	mov	r1, r6
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	47b8      	blx	r7
 8007b80:	3001      	adds	r0, #1
 8007b82:	d1be      	bne.n	8007b02 <_printf_float+0x32a>
 8007b84:	e689      	b.n	800789a <_printf_float+0xc2>
 8007b86:	9a05      	ldr	r2, [sp, #20]
 8007b88:	464b      	mov	r3, r9
 8007b8a:	4442      	add	r2, r8
 8007b8c:	4631      	mov	r1, r6
 8007b8e:	4628      	mov	r0, r5
 8007b90:	47b8      	blx	r7
 8007b92:	3001      	adds	r0, #1
 8007b94:	d1c1      	bne.n	8007b1a <_printf_float+0x342>
 8007b96:	e680      	b.n	800789a <_printf_float+0xc2>
 8007b98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b9a:	2a01      	cmp	r2, #1
 8007b9c:	dc01      	bgt.n	8007ba2 <_printf_float+0x3ca>
 8007b9e:	07db      	lsls	r3, r3, #31
 8007ba0:	d538      	bpl.n	8007c14 <_printf_float+0x43c>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	4642      	mov	r2, r8
 8007ba6:	4631      	mov	r1, r6
 8007ba8:	4628      	mov	r0, r5
 8007baa:	47b8      	blx	r7
 8007bac:	3001      	adds	r0, #1
 8007bae:	f43f ae74 	beq.w	800789a <_printf_float+0xc2>
 8007bb2:	ee18 3a10 	vmov	r3, s16
 8007bb6:	4652      	mov	r2, sl
 8007bb8:	4631      	mov	r1, r6
 8007bba:	4628      	mov	r0, r5
 8007bbc:	47b8      	blx	r7
 8007bbe:	3001      	adds	r0, #1
 8007bc0:	f43f ae6b 	beq.w	800789a <_printf_float+0xc2>
 8007bc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bc8:	2200      	movs	r2, #0
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f7f8 ff9c 	bl	8000b08 <__aeabi_dcmpeq>
 8007bd0:	b9d8      	cbnz	r0, 8007c0a <_printf_float+0x432>
 8007bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd4:	f108 0201 	add.w	r2, r8, #1
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	4631      	mov	r1, r6
 8007bdc:	4628      	mov	r0, r5
 8007bde:	47b8      	blx	r7
 8007be0:	3001      	adds	r0, #1
 8007be2:	d10e      	bne.n	8007c02 <_printf_float+0x42a>
 8007be4:	e659      	b.n	800789a <_printf_float+0xc2>
 8007be6:	2301      	movs	r3, #1
 8007be8:	4652      	mov	r2, sl
 8007bea:	4631      	mov	r1, r6
 8007bec:	4628      	mov	r0, r5
 8007bee:	47b8      	blx	r7
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	f43f ae52 	beq.w	800789a <_printf_float+0xc2>
 8007bf6:	f108 0801 	add.w	r8, r8, #1
 8007bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	4543      	cmp	r3, r8
 8007c00:	dcf1      	bgt.n	8007be6 <_printf_float+0x40e>
 8007c02:	464b      	mov	r3, r9
 8007c04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c08:	e6dc      	b.n	80079c4 <_printf_float+0x1ec>
 8007c0a:	f04f 0800 	mov.w	r8, #0
 8007c0e:	f104 0a1a 	add.w	sl, r4, #26
 8007c12:	e7f2      	b.n	8007bfa <_printf_float+0x422>
 8007c14:	2301      	movs	r3, #1
 8007c16:	4642      	mov	r2, r8
 8007c18:	e7df      	b.n	8007bda <_printf_float+0x402>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	464a      	mov	r2, r9
 8007c1e:	4631      	mov	r1, r6
 8007c20:	4628      	mov	r0, r5
 8007c22:	47b8      	blx	r7
 8007c24:	3001      	adds	r0, #1
 8007c26:	f43f ae38 	beq.w	800789a <_printf_float+0xc2>
 8007c2a:	f108 0801 	add.w	r8, r8, #1
 8007c2e:	68e3      	ldr	r3, [r4, #12]
 8007c30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c32:	1a5b      	subs	r3, r3, r1
 8007c34:	4543      	cmp	r3, r8
 8007c36:	dcf0      	bgt.n	8007c1a <_printf_float+0x442>
 8007c38:	e6fa      	b.n	8007a30 <_printf_float+0x258>
 8007c3a:	f04f 0800 	mov.w	r8, #0
 8007c3e:	f104 0919 	add.w	r9, r4, #25
 8007c42:	e7f4      	b.n	8007c2e <_printf_float+0x456>

08007c44 <_printf_common>:
 8007c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c48:	4616      	mov	r6, r2
 8007c4a:	4699      	mov	r9, r3
 8007c4c:	688a      	ldr	r2, [r1, #8]
 8007c4e:	690b      	ldr	r3, [r1, #16]
 8007c50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c54:	4293      	cmp	r3, r2
 8007c56:	bfb8      	it	lt
 8007c58:	4613      	movlt	r3, r2
 8007c5a:	6033      	str	r3, [r6, #0]
 8007c5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c60:	4607      	mov	r7, r0
 8007c62:	460c      	mov	r4, r1
 8007c64:	b10a      	cbz	r2, 8007c6a <_printf_common+0x26>
 8007c66:	3301      	adds	r3, #1
 8007c68:	6033      	str	r3, [r6, #0]
 8007c6a:	6823      	ldr	r3, [r4, #0]
 8007c6c:	0699      	lsls	r1, r3, #26
 8007c6e:	bf42      	ittt	mi
 8007c70:	6833      	ldrmi	r3, [r6, #0]
 8007c72:	3302      	addmi	r3, #2
 8007c74:	6033      	strmi	r3, [r6, #0]
 8007c76:	6825      	ldr	r5, [r4, #0]
 8007c78:	f015 0506 	ands.w	r5, r5, #6
 8007c7c:	d106      	bne.n	8007c8c <_printf_common+0x48>
 8007c7e:	f104 0a19 	add.w	sl, r4, #25
 8007c82:	68e3      	ldr	r3, [r4, #12]
 8007c84:	6832      	ldr	r2, [r6, #0]
 8007c86:	1a9b      	subs	r3, r3, r2
 8007c88:	42ab      	cmp	r3, r5
 8007c8a:	dc26      	bgt.n	8007cda <_printf_common+0x96>
 8007c8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c90:	1e13      	subs	r3, r2, #0
 8007c92:	6822      	ldr	r2, [r4, #0]
 8007c94:	bf18      	it	ne
 8007c96:	2301      	movne	r3, #1
 8007c98:	0692      	lsls	r2, r2, #26
 8007c9a:	d42b      	bmi.n	8007cf4 <_printf_common+0xb0>
 8007c9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ca0:	4649      	mov	r1, r9
 8007ca2:	4638      	mov	r0, r7
 8007ca4:	47c0      	blx	r8
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	d01e      	beq.n	8007ce8 <_printf_common+0xa4>
 8007caa:	6823      	ldr	r3, [r4, #0]
 8007cac:	68e5      	ldr	r5, [r4, #12]
 8007cae:	6832      	ldr	r2, [r6, #0]
 8007cb0:	f003 0306 	and.w	r3, r3, #6
 8007cb4:	2b04      	cmp	r3, #4
 8007cb6:	bf08      	it	eq
 8007cb8:	1aad      	subeq	r5, r5, r2
 8007cba:	68a3      	ldr	r3, [r4, #8]
 8007cbc:	6922      	ldr	r2, [r4, #16]
 8007cbe:	bf0c      	ite	eq
 8007cc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cc4:	2500      	movne	r5, #0
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	bfc4      	itt	gt
 8007cca:	1a9b      	subgt	r3, r3, r2
 8007ccc:	18ed      	addgt	r5, r5, r3
 8007cce:	2600      	movs	r6, #0
 8007cd0:	341a      	adds	r4, #26
 8007cd2:	42b5      	cmp	r5, r6
 8007cd4:	d11a      	bne.n	8007d0c <_printf_common+0xc8>
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	e008      	b.n	8007cec <_printf_common+0xa8>
 8007cda:	2301      	movs	r3, #1
 8007cdc:	4652      	mov	r2, sl
 8007cde:	4649      	mov	r1, r9
 8007ce0:	4638      	mov	r0, r7
 8007ce2:	47c0      	blx	r8
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	d103      	bne.n	8007cf0 <_printf_common+0xac>
 8007ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cf0:	3501      	adds	r5, #1
 8007cf2:	e7c6      	b.n	8007c82 <_printf_common+0x3e>
 8007cf4:	18e1      	adds	r1, r4, r3
 8007cf6:	1c5a      	adds	r2, r3, #1
 8007cf8:	2030      	movs	r0, #48	; 0x30
 8007cfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cfe:	4422      	add	r2, r4
 8007d00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d08:	3302      	adds	r3, #2
 8007d0a:	e7c7      	b.n	8007c9c <_printf_common+0x58>
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	4622      	mov	r2, r4
 8007d10:	4649      	mov	r1, r9
 8007d12:	4638      	mov	r0, r7
 8007d14:	47c0      	blx	r8
 8007d16:	3001      	adds	r0, #1
 8007d18:	d0e6      	beq.n	8007ce8 <_printf_common+0xa4>
 8007d1a:	3601      	adds	r6, #1
 8007d1c:	e7d9      	b.n	8007cd2 <_printf_common+0x8e>
	...

08007d20 <_printf_i>:
 8007d20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d24:	7e0f      	ldrb	r7, [r1, #24]
 8007d26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d28:	2f78      	cmp	r7, #120	; 0x78
 8007d2a:	4691      	mov	r9, r2
 8007d2c:	4680      	mov	r8, r0
 8007d2e:	460c      	mov	r4, r1
 8007d30:	469a      	mov	sl, r3
 8007d32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d36:	d807      	bhi.n	8007d48 <_printf_i+0x28>
 8007d38:	2f62      	cmp	r7, #98	; 0x62
 8007d3a:	d80a      	bhi.n	8007d52 <_printf_i+0x32>
 8007d3c:	2f00      	cmp	r7, #0
 8007d3e:	f000 80d8 	beq.w	8007ef2 <_printf_i+0x1d2>
 8007d42:	2f58      	cmp	r7, #88	; 0x58
 8007d44:	f000 80a3 	beq.w	8007e8e <_printf_i+0x16e>
 8007d48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d50:	e03a      	b.n	8007dc8 <_printf_i+0xa8>
 8007d52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d56:	2b15      	cmp	r3, #21
 8007d58:	d8f6      	bhi.n	8007d48 <_printf_i+0x28>
 8007d5a:	a101      	add	r1, pc, #4	; (adr r1, 8007d60 <_printf_i+0x40>)
 8007d5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d60:	08007db9 	.word	0x08007db9
 8007d64:	08007dcd 	.word	0x08007dcd
 8007d68:	08007d49 	.word	0x08007d49
 8007d6c:	08007d49 	.word	0x08007d49
 8007d70:	08007d49 	.word	0x08007d49
 8007d74:	08007d49 	.word	0x08007d49
 8007d78:	08007dcd 	.word	0x08007dcd
 8007d7c:	08007d49 	.word	0x08007d49
 8007d80:	08007d49 	.word	0x08007d49
 8007d84:	08007d49 	.word	0x08007d49
 8007d88:	08007d49 	.word	0x08007d49
 8007d8c:	08007ed9 	.word	0x08007ed9
 8007d90:	08007dfd 	.word	0x08007dfd
 8007d94:	08007ebb 	.word	0x08007ebb
 8007d98:	08007d49 	.word	0x08007d49
 8007d9c:	08007d49 	.word	0x08007d49
 8007da0:	08007efb 	.word	0x08007efb
 8007da4:	08007d49 	.word	0x08007d49
 8007da8:	08007dfd 	.word	0x08007dfd
 8007dac:	08007d49 	.word	0x08007d49
 8007db0:	08007d49 	.word	0x08007d49
 8007db4:	08007ec3 	.word	0x08007ec3
 8007db8:	682b      	ldr	r3, [r5, #0]
 8007dba:	1d1a      	adds	r2, r3, #4
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	602a      	str	r2, [r5, #0]
 8007dc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e0a3      	b.n	8007f14 <_printf_i+0x1f4>
 8007dcc:	6820      	ldr	r0, [r4, #0]
 8007dce:	6829      	ldr	r1, [r5, #0]
 8007dd0:	0606      	lsls	r6, r0, #24
 8007dd2:	f101 0304 	add.w	r3, r1, #4
 8007dd6:	d50a      	bpl.n	8007dee <_printf_i+0xce>
 8007dd8:	680e      	ldr	r6, [r1, #0]
 8007dda:	602b      	str	r3, [r5, #0]
 8007ddc:	2e00      	cmp	r6, #0
 8007dde:	da03      	bge.n	8007de8 <_printf_i+0xc8>
 8007de0:	232d      	movs	r3, #45	; 0x2d
 8007de2:	4276      	negs	r6, r6
 8007de4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007de8:	485e      	ldr	r0, [pc, #376]	; (8007f64 <_printf_i+0x244>)
 8007dea:	230a      	movs	r3, #10
 8007dec:	e019      	b.n	8007e22 <_printf_i+0x102>
 8007dee:	680e      	ldr	r6, [r1, #0]
 8007df0:	602b      	str	r3, [r5, #0]
 8007df2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007df6:	bf18      	it	ne
 8007df8:	b236      	sxthne	r6, r6
 8007dfa:	e7ef      	b.n	8007ddc <_printf_i+0xbc>
 8007dfc:	682b      	ldr	r3, [r5, #0]
 8007dfe:	6820      	ldr	r0, [r4, #0]
 8007e00:	1d19      	adds	r1, r3, #4
 8007e02:	6029      	str	r1, [r5, #0]
 8007e04:	0601      	lsls	r1, r0, #24
 8007e06:	d501      	bpl.n	8007e0c <_printf_i+0xec>
 8007e08:	681e      	ldr	r6, [r3, #0]
 8007e0a:	e002      	b.n	8007e12 <_printf_i+0xf2>
 8007e0c:	0646      	lsls	r6, r0, #25
 8007e0e:	d5fb      	bpl.n	8007e08 <_printf_i+0xe8>
 8007e10:	881e      	ldrh	r6, [r3, #0]
 8007e12:	4854      	ldr	r0, [pc, #336]	; (8007f64 <_printf_i+0x244>)
 8007e14:	2f6f      	cmp	r7, #111	; 0x6f
 8007e16:	bf0c      	ite	eq
 8007e18:	2308      	moveq	r3, #8
 8007e1a:	230a      	movne	r3, #10
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e22:	6865      	ldr	r5, [r4, #4]
 8007e24:	60a5      	str	r5, [r4, #8]
 8007e26:	2d00      	cmp	r5, #0
 8007e28:	bfa2      	ittt	ge
 8007e2a:	6821      	ldrge	r1, [r4, #0]
 8007e2c:	f021 0104 	bicge.w	r1, r1, #4
 8007e30:	6021      	strge	r1, [r4, #0]
 8007e32:	b90e      	cbnz	r6, 8007e38 <_printf_i+0x118>
 8007e34:	2d00      	cmp	r5, #0
 8007e36:	d04d      	beq.n	8007ed4 <_printf_i+0x1b4>
 8007e38:	4615      	mov	r5, r2
 8007e3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e3e:	fb03 6711 	mls	r7, r3, r1, r6
 8007e42:	5dc7      	ldrb	r7, [r0, r7]
 8007e44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e48:	4637      	mov	r7, r6
 8007e4a:	42bb      	cmp	r3, r7
 8007e4c:	460e      	mov	r6, r1
 8007e4e:	d9f4      	bls.n	8007e3a <_printf_i+0x11a>
 8007e50:	2b08      	cmp	r3, #8
 8007e52:	d10b      	bne.n	8007e6c <_printf_i+0x14c>
 8007e54:	6823      	ldr	r3, [r4, #0]
 8007e56:	07de      	lsls	r6, r3, #31
 8007e58:	d508      	bpl.n	8007e6c <_printf_i+0x14c>
 8007e5a:	6923      	ldr	r3, [r4, #16]
 8007e5c:	6861      	ldr	r1, [r4, #4]
 8007e5e:	4299      	cmp	r1, r3
 8007e60:	bfde      	ittt	le
 8007e62:	2330      	movle	r3, #48	; 0x30
 8007e64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e68:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007e6c:	1b52      	subs	r2, r2, r5
 8007e6e:	6122      	str	r2, [r4, #16]
 8007e70:	f8cd a000 	str.w	sl, [sp]
 8007e74:	464b      	mov	r3, r9
 8007e76:	aa03      	add	r2, sp, #12
 8007e78:	4621      	mov	r1, r4
 8007e7a:	4640      	mov	r0, r8
 8007e7c:	f7ff fee2 	bl	8007c44 <_printf_common>
 8007e80:	3001      	adds	r0, #1
 8007e82:	d14c      	bne.n	8007f1e <_printf_i+0x1fe>
 8007e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e88:	b004      	add	sp, #16
 8007e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e8e:	4835      	ldr	r0, [pc, #212]	; (8007f64 <_printf_i+0x244>)
 8007e90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e94:	6829      	ldr	r1, [r5, #0]
 8007e96:	6823      	ldr	r3, [r4, #0]
 8007e98:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e9c:	6029      	str	r1, [r5, #0]
 8007e9e:	061d      	lsls	r5, r3, #24
 8007ea0:	d514      	bpl.n	8007ecc <_printf_i+0x1ac>
 8007ea2:	07df      	lsls	r7, r3, #31
 8007ea4:	bf44      	itt	mi
 8007ea6:	f043 0320 	orrmi.w	r3, r3, #32
 8007eaa:	6023      	strmi	r3, [r4, #0]
 8007eac:	b91e      	cbnz	r6, 8007eb6 <_printf_i+0x196>
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	f023 0320 	bic.w	r3, r3, #32
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	2310      	movs	r3, #16
 8007eb8:	e7b0      	b.n	8007e1c <_printf_i+0xfc>
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	f043 0320 	orr.w	r3, r3, #32
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	2378      	movs	r3, #120	; 0x78
 8007ec4:	4828      	ldr	r0, [pc, #160]	; (8007f68 <_printf_i+0x248>)
 8007ec6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007eca:	e7e3      	b.n	8007e94 <_printf_i+0x174>
 8007ecc:	0659      	lsls	r1, r3, #25
 8007ece:	bf48      	it	mi
 8007ed0:	b2b6      	uxthmi	r6, r6
 8007ed2:	e7e6      	b.n	8007ea2 <_printf_i+0x182>
 8007ed4:	4615      	mov	r5, r2
 8007ed6:	e7bb      	b.n	8007e50 <_printf_i+0x130>
 8007ed8:	682b      	ldr	r3, [r5, #0]
 8007eda:	6826      	ldr	r6, [r4, #0]
 8007edc:	6961      	ldr	r1, [r4, #20]
 8007ede:	1d18      	adds	r0, r3, #4
 8007ee0:	6028      	str	r0, [r5, #0]
 8007ee2:	0635      	lsls	r5, r6, #24
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	d501      	bpl.n	8007eec <_printf_i+0x1cc>
 8007ee8:	6019      	str	r1, [r3, #0]
 8007eea:	e002      	b.n	8007ef2 <_printf_i+0x1d2>
 8007eec:	0670      	lsls	r0, r6, #25
 8007eee:	d5fb      	bpl.n	8007ee8 <_printf_i+0x1c8>
 8007ef0:	8019      	strh	r1, [r3, #0]
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	6123      	str	r3, [r4, #16]
 8007ef6:	4615      	mov	r5, r2
 8007ef8:	e7ba      	b.n	8007e70 <_printf_i+0x150>
 8007efa:	682b      	ldr	r3, [r5, #0]
 8007efc:	1d1a      	adds	r2, r3, #4
 8007efe:	602a      	str	r2, [r5, #0]
 8007f00:	681d      	ldr	r5, [r3, #0]
 8007f02:	6862      	ldr	r2, [r4, #4]
 8007f04:	2100      	movs	r1, #0
 8007f06:	4628      	mov	r0, r5
 8007f08:	f7f8 f98a 	bl	8000220 <memchr>
 8007f0c:	b108      	cbz	r0, 8007f12 <_printf_i+0x1f2>
 8007f0e:	1b40      	subs	r0, r0, r5
 8007f10:	6060      	str	r0, [r4, #4]
 8007f12:	6863      	ldr	r3, [r4, #4]
 8007f14:	6123      	str	r3, [r4, #16]
 8007f16:	2300      	movs	r3, #0
 8007f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f1c:	e7a8      	b.n	8007e70 <_printf_i+0x150>
 8007f1e:	6923      	ldr	r3, [r4, #16]
 8007f20:	462a      	mov	r2, r5
 8007f22:	4649      	mov	r1, r9
 8007f24:	4640      	mov	r0, r8
 8007f26:	47d0      	blx	sl
 8007f28:	3001      	adds	r0, #1
 8007f2a:	d0ab      	beq.n	8007e84 <_printf_i+0x164>
 8007f2c:	6823      	ldr	r3, [r4, #0]
 8007f2e:	079b      	lsls	r3, r3, #30
 8007f30:	d413      	bmi.n	8007f5a <_printf_i+0x23a>
 8007f32:	68e0      	ldr	r0, [r4, #12]
 8007f34:	9b03      	ldr	r3, [sp, #12]
 8007f36:	4298      	cmp	r0, r3
 8007f38:	bfb8      	it	lt
 8007f3a:	4618      	movlt	r0, r3
 8007f3c:	e7a4      	b.n	8007e88 <_printf_i+0x168>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	4632      	mov	r2, r6
 8007f42:	4649      	mov	r1, r9
 8007f44:	4640      	mov	r0, r8
 8007f46:	47d0      	blx	sl
 8007f48:	3001      	adds	r0, #1
 8007f4a:	d09b      	beq.n	8007e84 <_printf_i+0x164>
 8007f4c:	3501      	adds	r5, #1
 8007f4e:	68e3      	ldr	r3, [r4, #12]
 8007f50:	9903      	ldr	r1, [sp, #12]
 8007f52:	1a5b      	subs	r3, r3, r1
 8007f54:	42ab      	cmp	r3, r5
 8007f56:	dcf2      	bgt.n	8007f3e <_printf_i+0x21e>
 8007f58:	e7eb      	b.n	8007f32 <_printf_i+0x212>
 8007f5a:	2500      	movs	r5, #0
 8007f5c:	f104 0619 	add.w	r6, r4, #25
 8007f60:	e7f5      	b.n	8007f4e <_printf_i+0x22e>
 8007f62:	bf00      	nop
 8007f64:	0800a59e 	.word	0x0800a59e
 8007f68:	0800a5af 	.word	0x0800a5af

08007f6c <_sbrk_r>:
 8007f6c:	b538      	push	{r3, r4, r5, lr}
 8007f6e:	4d06      	ldr	r5, [pc, #24]	; (8007f88 <_sbrk_r+0x1c>)
 8007f70:	2300      	movs	r3, #0
 8007f72:	4604      	mov	r4, r0
 8007f74:	4608      	mov	r0, r1
 8007f76:	602b      	str	r3, [r5, #0]
 8007f78:	f7fc f9ca 	bl	8004310 <_sbrk>
 8007f7c:	1c43      	adds	r3, r0, #1
 8007f7e:	d102      	bne.n	8007f86 <_sbrk_r+0x1a>
 8007f80:	682b      	ldr	r3, [r5, #0]
 8007f82:	b103      	cbz	r3, 8007f86 <_sbrk_r+0x1a>
 8007f84:	6023      	str	r3, [r4, #0]
 8007f86:	bd38      	pop	{r3, r4, r5, pc}
 8007f88:	20002984 	.word	0x20002984

08007f8c <siprintf>:
 8007f8c:	b40e      	push	{r1, r2, r3}
 8007f8e:	b500      	push	{lr}
 8007f90:	b09c      	sub	sp, #112	; 0x70
 8007f92:	ab1d      	add	r3, sp, #116	; 0x74
 8007f94:	9002      	str	r0, [sp, #8]
 8007f96:	9006      	str	r0, [sp, #24]
 8007f98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f9c:	4809      	ldr	r0, [pc, #36]	; (8007fc4 <siprintf+0x38>)
 8007f9e:	9107      	str	r1, [sp, #28]
 8007fa0:	9104      	str	r1, [sp, #16]
 8007fa2:	4909      	ldr	r1, [pc, #36]	; (8007fc8 <siprintf+0x3c>)
 8007fa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fa8:	9105      	str	r1, [sp, #20]
 8007faa:	6800      	ldr	r0, [r0, #0]
 8007fac:	9301      	str	r3, [sp, #4]
 8007fae:	a902      	add	r1, sp, #8
 8007fb0:	f001 faac 	bl	800950c <_svfiprintf_r>
 8007fb4:	9b02      	ldr	r3, [sp, #8]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	701a      	strb	r2, [r3, #0]
 8007fba:	b01c      	add	sp, #112	; 0x70
 8007fbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fc0:	b003      	add	sp, #12
 8007fc2:	4770      	bx	lr
 8007fc4:	200023d4 	.word	0x200023d4
 8007fc8:	ffff0208 	.word	0xffff0208

08007fcc <strncat>:
 8007fcc:	b530      	push	{r4, r5, lr}
 8007fce:	4604      	mov	r4, r0
 8007fd0:	7825      	ldrb	r5, [r4, #0]
 8007fd2:	4623      	mov	r3, r4
 8007fd4:	3401      	adds	r4, #1
 8007fd6:	2d00      	cmp	r5, #0
 8007fd8:	d1fa      	bne.n	8007fd0 <strncat+0x4>
 8007fda:	3a01      	subs	r2, #1
 8007fdc:	d304      	bcc.n	8007fe8 <strncat+0x1c>
 8007fde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fe2:	f803 4b01 	strb.w	r4, [r3], #1
 8007fe6:	b904      	cbnz	r4, 8007fea <strncat+0x1e>
 8007fe8:	bd30      	pop	{r4, r5, pc}
 8007fea:	2a00      	cmp	r2, #0
 8007fec:	d1f5      	bne.n	8007fda <strncat+0xe>
 8007fee:	701a      	strb	r2, [r3, #0]
 8007ff0:	e7f3      	b.n	8007fda <strncat+0xe>

08007ff2 <quorem>:
 8007ff2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff6:	6903      	ldr	r3, [r0, #16]
 8007ff8:	690c      	ldr	r4, [r1, #16]
 8007ffa:	42a3      	cmp	r3, r4
 8007ffc:	4607      	mov	r7, r0
 8007ffe:	f2c0 8081 	blt.w	8008104 <quorem+0x112>
 8008002:	3c01      	subs	r4, #1
 8008004:	f101 0814 	add.w	r8, r1, #20
 8008008:	f100 0514 	add.w	r5, r0, #20
 800800c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008010:	9301      	str	r3, [sp, #4]
 8008012:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008016:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800801a:	3301      	adds	r3, #1
 800801c:	429a      	cmp	r2, r3
 800801e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008022:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008026:	fbb2 f6f3 	udiv	r6, r2, r3
 800802a:	d331      	bcc.n	8008090 <quorem+0x9e>
 800802c:	f04f 0e00 	mov.w	lr, #0
 8008030:	4640      	mov	r0, r8
 8008032:	46ac      	mov	ip, r5
 8008034:	46f2      	mov	sl, lr
 8008036:	f850 2b04 	ldr.w	r2, [r0], #4
 800803a:	b293      	uxth	r3, r2
 800803c:	fb06 e303 	mla	r3, r6, r3, lr
 8008040:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008044:	b29b      	uxth	r3, r3
 8008046:	ebaa 0303 	sub.w	r3, sl, r3
 800804a:	f8dc a000 	ldr.w	sl, [ip]
 800804e:	0c12      	lsrs	r2, r2, #16
 8008050:	fa13 f38a 	uxtah	r3, r3, sl
 8008054:	fb06 e202 	mla	r2, r6, r2, lr
 8008058:	9300      	str	r3, [sp, #0]
 800805a:	9b00      	ldr	r3, [sp, #0]
 800805c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008060:	b292      	uxth	r2, r2
 8008062:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008066:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800806a:	f8bd 3000 	ldrh.w	r3, [sp]
 800806e:	4581      	cmp	r9, r0
 8008070:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008074:	f84c 3b04 	str.w	r3, [ip], #4
 8008078:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800807c:	d2db      	bcs.n	8008036 <quorem+0x44>
 800807e:	f855 300b 	ldr.w	r3, [r5, fp]
 8008082:	b92b      	cbnz	r3, 8008090 <quorem+0x9e>
 8008084:	9b01      	ldr	r3, [sp, #4]
 8008086:	3b04      	subs	r3, #4
 8008088:	429d      	cmp	r5, r3
 800808a:	461a      	mov	r2, r3
 800808c:	d32e      	bcc.n	80080ec <quorem+0xfa>
 800808e:	613c      	str	r4, [r7, #16]
 8008090:	4638      	mov	r0, r7
 8008092:	f001 f8c7 	bl	8009224 <__mcmp>
 8008096:	2800      	cmp	r0, #0
 8008098:	db24      	blt.n	80080e4 <quorem+0xf2>
 800809a:	3601      	adds	r6, #1
 800809c:	4628      	mov	r0, r5
 800809e:	f04f 0c00 	mov.w	ip, #0
 80080a2:	f858 2b04 	ldr.w	r2, [r8], #4
 80080a6:	f8d0 e000 	ldr.w	lr, [r0]
 80080aa:	b293      	uxth	r3, r2
 80080ac:	ebac 0303 	sub.w	r3, ip, r3
 80080b0:	0c12      	lsrs	r2, r2, #16
 80080b2:	fa13 f38e 	uxtah	r3, r3, lr
 80080b6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80080ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080be:	b29b      	uxth	r3, r3
 80080c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080c4:	45c1      	cmp	r9, r8
 80080c6:	f840 3b04 	str.w	r3, [r0], #4
 80080ca:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80080ce:	d2e8      	bcs.n	80080a2 <quorem+0xb0>
 80080d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080d8:	b922      	cbnz	r2, 80080e4 <quorem+0xf2>
 80080da:	3b04      	subs	r3, #4
 80080dc:	429d      	cmp	r5, r3
 80080de:	461a      	mov	r2, r3
 80080e0:	d30a      	bcc.n	80080f8 <quorem+0x106>
 80080e2:	613c      	str	r4, [r7, #16]
 80080e4:	4630      	mov	r0, r6
 80080e6:	b003      	add	sp, #12
 80080e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ec:	6812      	ldr	r2, [r2, #0]
 80080ee:	3b04      	subs	r3, #4
 80080f0:	2a00      	cmp	r2, #0
 80080f2:	d1cc      	bne.n	800808e <quorem+0x9c>
 80080f4:	3c01      	subs	r4, #1
 80080f6:	e7c7      	b.n	8008088 <quorem+0x96>
 80080f8:	6812      	ldr	r2, [r2, #0]
 80080fa:	3b04      	subs	r3, #4
 80080fc:	2a00      	cmp	r2, #0
 80080fe:	d1f0      	bne.n	80080e2 <quorem+0xf0>
 8008100:	3c01      	subs	r4, #1
 8008102:	e7eb      	b.n	80080dc <quorem+0xea>
 8008104:	2000      	movs	r0, #0
 8008106:	e7ee      	b.n	80080e6 <quorem+0xf4>

08008108 <_dtoa_r>:
 8008108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800810c:	ed2d 8b04 	vpush	{d8-d9}
 8008110:	ec57 6b10 	vmov	r6, r7, d0
 8008114:	b093      	sub	sp, #76	; 0x4c
 8008116:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008118:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800811c:	9106      	str	r1, [sp, #24]
 800811e:	ee10 aa10 	vmov	sl, s0
 8008122:	4604      	mov	r4, r0
 8008124:	9209      	str	r2, [sp, #36]	; 0x24
 8008126:	930c      	str	r3, [sp, #48]	; 0x30
 8008128:	46bb      	mov	fp, r7
 800812a:	b975      	cbnz	r5, 800814a <_dtoa_r+0x42>
 800812c:	2010      	movs	r0, #16
 800812e:	f7ff f9bb 	bl	80074a8 <malloc>
 8008132:	4602      	mov	r2, r0
 8008134:	6260      	str	r0, [r4, #36]	; 0x24
 8008136:	b920      	cbnz	r0, 8008142 <_dtoa_r+0x3a>
 8008138:	4ba7      	ldr	r3, [pc, #668]	; (80083d8 <_dtoa_r+0x2d0>)
 800813a:	21ea      	movs	r1, #234	; 0xea
 800813c:	48a7      	ldr	r0, [pc, #668]	; (80083dc <_dtoa_r+0x2d4>)
 800813e:	f001 fae5 	bl	800970c <__assert_func>
 8008142:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008146:	6005      	str	r5, [r0, #0]
 8008148:	60c5      	str	r5, [r0, #12]
 800814a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800814c:	6819      	ldr	r1, [r3, #0]
 800814e:	b151      	cbz	r1, 8008166 <_dtoa_r+0x5e>
 8008150:	685a      	ldr	r2, [r3, #4]
 8008152:	604a      	str	r2, [r1, #4]
 8008154:	2301      	movs	r3, #1
 8008156:	4093      	lsls	r3, r2
 8008158:	608b      	str	r3, [r1, #8]
 800815a:	4620      	mov	r0, r4
 800815c:	f000 fe20 	bl	8008da0 <_Bfree>
 8008160:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008162:	2200      	movs	r2, #0
 8008164:	601a      	str	r2, [r3, #0]
 8008166:	1e3b      	subs	r3, r7, #0
 8008168:	bfaa      	itet	ge
 800816a:	2300      	movge	r3, #0
 800816c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008170:	f8c8 3000 	strge.w	r3, [r8]
 8008174:	4b9a      	ldr	r3, [pc, #616]	; (80083e0 <_dtoa_r+0x2d8>)
 8008176:	bfbc      	itt	lt
 8008178:	2201      	movlt	r2, #1
 800817a:	f8c8 2000 	strlt.w	r2, [r8]
 800817e:	ea33 030b 	bics.w	r3, r3, fp
 8008182:	d11b      	bne.n	80081bc <_dtoa_r+0xb4>
 8008184:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008186:	f242 730f 	movw	r3, #9999	; 0x270f
 800818a:	6013      	str	r3, [r2, #0]
 800818c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008190:	4333      	orrs	r3, r6
 8008192:	f000 8592 	beq.w	8008cba <_dtoa_r+0xbb2>
 8008196:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008198:	b963      	cbnz	r3, 80081b4 <_dtoa_r+0xac>
 800819a:	4b92      	ldr	r3, [pc, #584]	; (80083e4 <_dtoa_r+0x2dc>)
 800819c:	e022      	b.n	80081e4 <_dtoa_r+0xdc>
 800819e:	4b92      	ldr	r3, [pc, #584]	; (80083e8 <_dtoa_r+0x2e0>)
 80081a0:	9301      	str	r3, [sp, #4]
 80081a2:	3308      	adds	r3, #8
 80081a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80081a6:	6013      	str	r3, [r2, #0]
 80081a8:	9801      	ldr	r0, [sp, #4]
 80081aa:	b013      	add	sp, #76	; 0x4c
 80081ac:	ecbd 8b04 	vpop	{d8-d9}
 80081b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b4:	4b8b      	ldr	r3, [pc, #556]	; (80083e4 <_dtoa_r+0x2dc>)
 80081b6:	9301      	str	r3, [sp, #4]
 80081b8:	3303      	adds	r3, #3
 80081ba:	e7f3      	b.n	80081a4 <_dtoa_r+0x9c>
 80081bc:	2200      	movs	r2, #0
 80081be:	2300      	movs	r3, #0
 80081c0:	4650      	mov	r0, sl
 80081c2:	4659      	mov	r1, fp
 80081c4:	f7f8 fca0 	bl	8000b08 <__aeabi_dcmpeq>
 80081c8:	ec4b ab19 	vmov	d9, sl, fp
 80081cc:	4680      	mov	r8, r0
 80081ce:	b158      	cbz	r0, 80081e8 <_dtoa_r+0xe0>
 80081d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081d2:	2301      	movs	r3, #1
 80081d4:	6013      	str	r3, [r2, #0]
 80081d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f000 856b 	beq.w	8008cb4 <_dtoa_r+0xbac>
 80081de:	4883      	ldr	r0, [pc, #524]	; (80083ec <_dtoa_r+0x2e4>)
 80081e0:	6018      	str	r0, [r3, #0]
 80081e2:	1e43      	subs	r3, r0, #1
 80081e4:	9301      	str	r3, [sp, #4]
 80081e6:	e7df      	b.n	80081a8 <_dtoa_r+0xa0>
 80081e8:	ec4b ab10 	vmov	d0, sl, fp
 80081ec:	aa10      	add	r2, sp, #64	; 0x40
 80081ee:	a911      	add	r1, sp, #68	; 0x44
 80081f0:	4620      	mov	r0, r4
 80081f2:	f001 f8bd 	bl	8009370 <__d2b>
 80081f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80081fa:	ee08 0a10 	vmov	s16, r0
 80081fe:	2d00      	cmp	r5, #0
 8008200:	f000 8084 	beq.w	800830c <_dtoa_r+0x204>
 8008204:	ee19 3a90 	vmov	r3, s19
 8008208:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800820c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008210:	4656      	mov	r6, sl
 8008212:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008216:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800821a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800821e:	4b74      	ldr	r3, [pc, #464]	; (80083f0 <_dtoa_r+0x2e8>)
 8008220:	2200      	movs	r2, #0
 8008222:	4630      	mov	r0, r6
 8008224:	4639      	mov	r1, r7
 8008226:	f7f8 f84f 	bl	80002c8 <__aeabi_dsub>
 800822a:	a365      	add	r3, pc, #404	; (adr r3, 80083c0 <_dtoa_r+0x2b8>)
 800822c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008230:	f7f8 fa02 	bl	8000638 <__aeabi_dmul>
 8008234:	a364      	add	r3, pc, #400	; (adr r3, 80083c8 <_dtoa_r+0x2c0>)
 8008236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823a:	f7f8 f847 	bl	80002cc <__adddf3>
 800823e:	4606      	mov	r6, r0
 8008240:	4628      	mov	r0, r5
 8008242:	460f      	mov	r7, r1
 8008244:	f7f8 f98e 	bl	8000564 <__aeabi_i2d>
 8008248:	a361      	add	r3, pc, #388	; (adr r3, 80083d0 <_dtoa_r+0x2c8>)
 800824a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824e:	f7f8 f9f3 	bl	8000638 <__aeabi_dmul>
 8008252:	4602      	mov	r2, r0
 8008254:	460b      	mov	r3, r1
 8008256:	4630      	mov	r0, r6
 8008258:	4639      	mov	r1, r7
 800825a:	f7f8 f837 	bl	80002cc <__adddf3>
 800825e:	4606      	mov	r6, r0
 8008260:	460f      	mov	r7, r1
 8008262:	f7f8 fc99 	bl	8000b98 <__aeabi_d2iz>
 8008266:	2200      	movs	r2, #0
 8008268:	9000      	str	r0, [sp, #0]
 800826a:	2300      	movs	r3, #0
 800826c:	4630      	mov	r0, r6
 800826e:	4639      	mov	r1, r7
 8008270:	f7f8 fc54 	bl	8000b1c <__aeabi_dcmplt>
 8008274:	b150      	cbz	r0, 800828c <_dtoa_r+0x184>
 8008276:	9800      	ldr	r0, [sp, #0]
 8008278:	f7f8 f974 	bl	8000564 <__aeabi_i2d>
 800827c:	4632      	mov	r2, r6
 800827e:	463b      	mov	r3, r7
 8008280:	f7f8 fc42 	bl	8000b08 <__aeabi_dcmpeq>
 8008284:	b910      	cbnz	r0, 800828c <_dtoa_r+0x184>
 8008286:	9b00      	ldr	r3, [sp, #0]
 8008288:	3b01      	subs	r3, #1
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	9b00      	ldr	r3, [sp, #0]
 800828e:	2b16      	cmp	r3, #22
 8008290:	d85a      	bhi.n	8008348 <_dtoa_r+0x240>
 8008292:	9a00      	ldr	r2, [sp, #0]
 8008294:	4b57      	ldr	r3, [pc, #348]	; (80083f4 <_dtoa_r+0x2ec>)
 8008296:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800829a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829e:	ec51 0b19 	vmov	r0, r1, d9
 80082a2:	f7f8 fc3b 	bl	8000b1c <__aeabi_dcmplt>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	d050      	beq.n	800834c <_dtoa_r+0x244>
 80082aa:	9b00      	ldr	r3, [sp, #0]
 80082ac:	3b01      	subs	r3, #1
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	2300      	movs	r3, #0
 80082b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80082b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082b6:	1b5d      	subs	r5, r3, r5
 80082b8:	1e6b      	subs	r3, r5, #1
 80082ba:	9305      	str	r3, [sp, #20]
 80082bc:	bf45      	ittet	mi
 80082be:	f1c5 0301 	rsbmi	r3, r5, #1
 80082c2:	9304      	strmi	r3, [sp, #16]
 80082c4:	2300      	movpl	r3, #0
 80082c6:	2300      	movmi	r3, #0
 80082c8:	bf4c      	ite	mi
 80082ca:	9305      	strmi	r3, [sp, #20]
 80082cc:	9304      	strpl	r3, [sp, #16]
 80082ce:	9b00      	ldr	r3, [sp, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	db3d      	blt.n	8008350 <_dtoa_r+0x248>
 80082d4:	9b05      	ldr	r3, [sp, #20]
 80082d6:	9a00      	ldr	r2, [sp, #0]
 80082d8:	920a      	str	r2, [sp, #40]	; 0x28
 80082da:	4413      	add	r3, r2
 80082dc:	9305      	str	r3, [sp, #20]
 80082de:	2300      	movs	r3, #0
 80082e0:	9307      	str	r3, [sp, #28]
 80082e2:	9b06      	ldr	r3, [sp, #24]
 80082e4:	2b09      	cmp	r3, #9
 80082e6:	f200 8089 	bhi.w	80083fc <_dtoa_r+0x2f4>
 80082ea:	2b05      	cmp	r3, #5
 80082ec:	bfc4      	itt	gt
 80082ee:	3b04      	subgt	r3, #4
 80082f0:	9306      	strgt	r3, [sp, #24]
 80082f2:	9b06      	ldr	r3, [sp, #24]
 80082f4:	f1a3 0302 	sub.w	r3, r3, #2
 80082f8:	bfcc      	ite	gt
 80082fa:	2500      	movgt	r5, #0
 80082fc:	2501      	movle	r5, #1
 80082fe:	2b03      	cmp	r3, #3
 8008300:	f200 8087 	bhi.w	8008412 <_dtoa_r+0x30a>
 8008304:	e8df f003 	tbb	[pc, r3]
 8008308:	59383a2d 	.word	0x59383a2d
 800830c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008310:	441d      	add	r5, r3
 8008312:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008316:	2b20      	cmp	r3, #32
 8008318:	bfc1      	itttt	gt
 800831a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800831e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008322:	fa0b f303 	lslgt.w	r3, fp, r3
 8008326:	fa26 f000 	lsrgt.w	r0, r6, r0
 800832a:	bfda      	itte	le
 800832c:	f1c3 0320 	rsble	r3, r3, #32
 8008330:	fa06 f003 	lslle.w	r0, r6, r3
 8008334:	4318      	orrgt	r0, r3
 8008336:	f7f8 f905 	bl	8000544 <__aeabi_ui2d>
 800833a:	2301      	movs	r3, #1
 800833c:	4606      	mov	r6, r0
 800833e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008342:	3d01      	subs	r5, #1
 8008344:	930e      	str	r3, [sp, #56]	; 0x38
 8008346:	e76a      	b.n	800821e <_dtoa_r+0x116>
 8008348:	2301      	movs	r3, #1
 800834a:	e7b2      	b.n	80082b2 <_dtoa_r+0x1aa>
 800834c:	900b      	str	r0, [sp, #44]	; 0x2c
 800834e:	e7b1      	b.n	80082b4 <_dtoa_r+0x1ac>
 8008350:	9b04      	ldr	r3, [sp, #16]
 8008352:	9a00      	ldr	r2, [sp, #0]
 8008354:	1a9b      	subs	r3, r3, r2
 8008356:	9304      	str	r3, [sp, #16]
 8008358:	4253      	negs	r3, r2
 800835a:	9307      	str	r3, [sp, #28]
 800835c:	2300      	movs	r3, #0
 800835e:	930a      	str	r3, [sp, #40]	; 0x28
 8008360:	e7bf      	b.n	80082e2 <_dtoa_r+0x1da>
 8008362:	2300      	movs	r3, #0
 8008364:	9308      	str	r3, [sp, #32]
 8008366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008368:	2b00      	cmp	r3, #0
 800836a:	dc55      	bgt.n	8008418 <_dtoa_r+0x310>
 800836c:	2301      	movs	r3, #1
 800836e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008372:	461a      	mov	r2, r3
 8008374:	9209      	str	r2, [sp, #36]	; 0x24
 8008376:	e00c      	b.n	8008392 <_dtoa_r+0x28a>
 8008378:	2301      	movs	r3, #1
 800837a:	e7f3      	b.n	8008364 <_dtoa_r+0x25c>
 800837c:	2300      	movs	r3, #0
 800837e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008380:	9308      	str	r3, [sp, #32]
 8008382:	9b00      	ldr	r3, [sp, #0]
 8008384:	4413      	add	r3, r2
 8008386:	9302      	str	r3, [sp, #8]
 8008388:	3301      	adds	r3, #1
 800838a:	2b01      	cmp	r3, #1
 800838c:	9303      	str	r3, [sp, #12]
 800838e:	bfb8      	it	lt
 8008390:	2301      	movlt	r3, #1
 8008392:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008394:	2200      	movs	r2, #0
 8008396:	6042      	str	r2, [r0, #4]
 8008398:	2204      	movs	r2, #4
 800839a:	f102 0614 	add.w	r6, r2, #20
 800839e:	429e      	cmp	r6, r3
 80083a0:	6841      	ldr	r1, [r0, #4]
 80083a2:	d93d      	bls.n	8008420 <_dtoa_r+0x318>
 80083a4:	4620      	mov	r0, r4
 80083a6:	f000 fcbb 	bl	8008d20 <_Balloc>
 80083aa:	9001      	str	r0, [sp, #4]
 80083ac:	2800      	cmp	r0, #0
 80083ae:	d13b      	bne.n	8008428 <_dtoa_r+0x320>
 80083b0:	4b11      	ldr	r3, [pc, #68]	; (80083f8 <_dtoa_r+0x2f0>)
 80083b2:	4602      	mov	r2, r0
 80083b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80083b8:	e6c0      	b.n	800813c <_dtoa_r+0x34>
 80083ba:	2301      	movs	r3, #1
 80083bc:	e7df      	b.n	800837e <_dtoa_r+0x276>
 80083be:	bf00      	nop
 80083c0:	636f4361 	.word	0x636f4361
 80083c4:	3fd287a7 	.word	0x3fd287a7
 80083c8:	8b60c8b3 	.word	0x8b60c8b3
 80083cc:	3fc68a28 	.word	0x3fc68a28
 80083d0:	509f79fb 	.word	0x509f79fb
 80083d4:	3fd34413 	.word	0x3fd34413
 80083d8:	0800a5cd 	.word	0x0800a5cd
 80083dc:	0800a5e4 	.word	0x0800a5e4
 80083e0:	7ff00000 	.word	0x7ff00000
 80083e4:	0800a5c9 	.word	0x0800a5c9
 80083e8:	0800a5c0 	.word	0x0800a5c0
 80083ec:	0800a59d 	.word	0x0800a59d
 80083f0:	3ff80000 	.word	0x3ff80000
 80083f4:	0800a6d8 	.word	0x0800a6d8
 80083f8:	0800a63f 	.word	0x0800a63f
 80083fc:	2501      	movs	r5, #1
 80083fe:	2300      	movs	r3, #0
 8008400:	9306      	str	r3, [sp, #24]
 8008402:	9508      	str	r5, [sp, #32]
 8008404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008408:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800840c:	2200      	movs	r2, #0
 800840e:	2312      	movs	r3, #18
 8008410:	e7b0      	b.n	8008374 <_dtoa_r+0x26c>
 8008412:	2301      	movs	r3, #1
 8008414:	9308      	str	r3, [sp, #32]
 8008416:	e7f5      	b.n	8008404 <_dtoa_r+0x2fc>
 8008418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800841a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800841e:	e7b8      	b.n	8008392 <_dtoa_r+0x28a>
 8008420:	3101      	adds	r1, #1
 8008422:	6041      	str	r1, [r0, #4]
 8008424:	0052      	lsls	r2, r2, #1
 8008426:	e7b8      	b.n	800839a <_dtoa_r+0x292>
 8008428:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800842a:	9a01      	ldr	r2, [sp, #4]
 800842c:	601a      	str	r2, [r3, #0]
 800842e:	9b03      	ldr	r3, [sp, #12]
 8008430:	2b0e      	cmp	r3, #14
 8008432:	f200 809d 	bhi.w	8008570 <_dtoa_r+0x468>
 8008436:	2d00      	cmp	r5, #0
 8008438:	f000 809a 	beq.w	8008570 <_dtoa_r+0x468>
 800843c:	9b00      	ldr	r3, [sp, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	dd32      	ble.n	80084a8 <_dtoa_r+0x3a0>
 8008442:	4ab7      	ldr	r2, [pc, #732]	; (8008720 <_dtoa_r+0x618>)
 8008444:	f003 030f 	and.w	r3, r3, #15
 8008448:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800844c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008450:	9b00      	ldr	r3, [sp, #0]
 8008452:	05d8      	lsls	r0, r3, #23
 8008454:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008458:	d516      	bpl.n	8008488 <_dtoa_r+0x380>
 800845a:	4bb2      	ldr	r3, [pc, #712]	; (8008724 <_dtoa_r+0x61c>)
 800845c:	ec51 0b19 	vmov	r0, r1, d9
 8008460:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008464:	f7f8 fa12 	bl	800088c <__aeabi_ddiv>
 8008468:	f007 070f 	and.w	r7, r7, #15
 800846c:	4682      	mov	sl, r0
 800846e:	468b      	mov	fp, r1
 8008470:	2503      	movs	r5, #3
 8008472:	4eac      	ldr	r6, [pc, #688]	; (8008724 <_dtoa_r+0x61c>)
 8008474:	b957      	cbnz	r7, 800848c <_dtoa_r+0x384>
 8008476:	4642      	mov	r2, r8
 8008478:	464b      	mov	r3, r9
 800847a:	4650      	mov	r0, sl
 800847c:	4659      	mov	r1, fp
 800847e:	f7f8 fa05 	bl	800088c <__aeabi_ddiv>
 8008482:	4682      	mov	sl, r0
 8008484:	468b      	mov	fp, r1
 8008486:	e028      	b.n	80084da <_dtoa_r+0x3d2>
 8008488:	2502      	movs	r5, #2
 800848a:	e7f2      	b.n	8008472 <_dtoa_r+0x36a>
 800848c:	07f9      	lsls	r1, r7, #31
 800848e:	d508      	bpl.n	80084a2 <_dtoa_r+0x39a>
 8008490:	4640      	mov	r0, r8
 8008492:	4649      	mov	r1, r9
 8008494:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008498:	f7f8 f8ce 	bl	8000638 <__aeabi_dmul>
 800849c:	3501      	adds	r5, #1
 800849e:	4680      	mov	r8, r0
 80084a0:	4689      	mov	r9, r1
 80084a2:	107f      	asrs	r7, r7, #1
 80084a4:	3608      	adds	r6, #8
 80084a6:	e7e5      	b.n	8008474 <_dtoa_r+0x36c>
 80084a8:	f000 809b 	beq.w	80085e2 <_dtoa_r+0x4da>
 80084ac:	9b00      	ldr	r3, [sp, #0]
 80084ae:	4f9d      	ldr	r7, [pc, #628]	; (8008724 <_dtoa_r+0x61c>)
 80084b0:	425e      	negs	r6, r3
 80084b2:	4b9b      	ldr	r3, [pc, #620]	; (8008720 <_dtoa_r+0x618>)
 80084b4:	f006 020f 	and.w	r2, r6, #15
 80084b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c0:	ec51 0b19 	vmov	r0, r1, d9
 80084c4:	f7f8 f8b8 	bl	8000638 <__aeabi_dmul>
 80084c8:	1136      	asrs	r6, r6, #4
 80084ca:	4682      	mov	sl, r0
 80084cc:	468b      	mov	fp, r1
 80084ce:	2300      	movs	r3, #0
 80084d0:	2502      	movs	r5, #2
 80084d2:	2e00      	cmp	r6, #0
 80084d4:	d17a      	bne.n	80085cc <_dtoa_r+0x4c4>
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1d3      	bne.n	8008482 <_dtoa_r+0x37a>
 80084da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f000 8082 	beq.w	80085e6 <_dtoa_r+0x4de>
 80084e2:	4b91      	ldr	r3, [pc, #580]	; (8008728 <_dtoa_r+0x620>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	4650      	mov	r0, sl
 80084e8:	4659      	mov	r1, fp
 80084ea:	f7f8 fb17 	bl	8000b1c <__aeabi_dcmplt>
 80084ee:	2800      	cmp	r0, #0
 80084f0:	d079      	beq.n	80085e6 <_dtoa_r+0x4de>
 80084f2:	9b03      	ldr	r3, [sp, #12]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d076      	beq.n	80085e6 <_dtoa_r+0x4de>
 80084f8:	9b02      	ldr	r3, [sp, #8]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	dd36      	ble.n	800856c <_dtoa_r+0x464>
 80084fe:	9b00      	ldr	r3, [sp, #0]
 8008500:	4650      	mov	r0, sl
 8008502:	4659      	mov	r1, fp
 8008504:	1e5f      	subs	r7, r3, #1
 8008506:	2200      	movs	r2, #0
 8008508:	4b88      	ldr	r3, [pc, #544]	; (800872c <_dtoa_r+0x624>)
 800850a:	f7f8 f895 	bl	8000638 <__aeabi_dmul>
 800850e:	9e02      	ldr	r6, [sp, #8]
 8008510:	4682      	mov	sl, r0
 8008512:	468b      	mov	fp, r1
 8008514:	3501      	adds	r5, #1
 8008516:	4628      	mov	r0, r5
 8008518:	f7f8 f824 	bl	8000564 <__aeabi_i2d>
 800851c:	4652      	mov	r2, sl
 800851e:	465b      	mov	r3, fp
 8008520:	f7f8 f88a 	bl	8000638 <__aeabi_dmul>
 8008524:	4b82      	ldr	r3, [pc, #520]	; (8008730 <_dtoa_r+0x628>)
 8008526:	2200      	movs	r2, #0
 8008528:	f7f7 fed0 	bl	80002cc <__adddf3>
 800852c:	46d0      	mov	r8, sl
 800852e:	46d9      	mov	r9, fp
 8008530:	4682      	mov	sl, r0
 8008532:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008536:	2e00      	cmp	r6, #0
 8008538:	d158      	bne.n	80085ec <_dtoa_r+0x4e4>
 800853a:	4b7e      	ldr	r3, [pc, #504]	; (8008734 <_dtoa_r+0x62c>)
 800853c:	2200      	movs	r2, #0
 800853e:	4640      	mov	r0, r8
 8008540:	4649      	mov	r1, r9
 8008542:	f7f7 fec1 	bl	80002c8 <__aeabi_dsub>
 8008546:	4652      	mov	r2, sl
 8008548:	465b      	mov	r3, fp
 800854a:	4680      	mov	r8, r0
 800854c:	4689      	mov	r9, r1
 800854e:	f7f8 fb03 	bl	8000b58 <__aeabi_dcmpgt>
 8008552:	2800      	cmp	r0, #0
 8008554:	f040 8295 	bne.w	8008a82 <_dtoa_r+0x97a>
 8008558:	4652      	mov	r2, sl
 800855a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800855e:	4640      	mov	r0, r8
 8008560:	4649      	mov	r1, r9
 8008562:	f7f8 fadb 	bl	8000b1c <__aeabi_dcmplt>
 8008566:	2800      	cmp	r0, #0
 8008568:	f040 8289 	bne.w	8008a7e <_dtoa_r+0x976>
 800856c:	ec5b ab19 	vmov	sl, fp, d9
 8008570:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008572:	2b00      	cmp	r3, #0
 8008574:	f2c0 8148 	blt.w	8008808 <_dtoa_r+0x700>
 8008578:	9a00      	ldr	r2, [sp, #0]
 800857a:	2a0e      	cmp	r2, #14
 800857c:	f300 8144 	bgt.w	8008808 <_dtoa_r+0x700>
 8008580:	4b67      	ldr	r3, [pc, #412]	; (8008720 <_dtoa_r+0x618>)
 8008582:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008586:	e9d3 8900 	ldrd	r8, r9, [r3]
 800858a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800858c:	2b00      	cmp	r3, #0
 800858e:	f280 80d5 	bge.w	800873c <_dtoa_r+0x634>
 8008592:	9b03      	ldr	r3, [sp, #12]
 8008594:	2b00      	cmp	r3, #0
 8008596:	f300 80d1 	bgt.w	800873c <_dtoa_r+0x634>
 800859a:	f040 826f 	bne.w	8008a7c <_dtoa_r+0x974>
 800859e:	4b65      	ldr	r3, [pc, #404]	; (8008734 <_dtoa_r+0x62c>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	4640      	mov	r0, r8
 80085a4:	4649      	mov	r1, r9
 80085a6:	f7f8 f847 	bl	8000638 <__aeabi_dmul>
 80085aa:	4652      	mov	r2, sl
 80085ac:	465b      	mov	r3, fp
 80085ae:	f7f8 fac9 	bl	8000b44 <__aeabi_dcmpge>
 80085b2:	9e03      	ldr	r6, [sp, #12]
 80085b4:	4637      	mov	r7, r6
 80085b6:	2800      	cmp	r0, #0
 80085b8:	f040 8245 	bne.w	8008a46 <_dtoa_r+0x93e>
 80085bc:	9d01      	ldr	r5, [sp, #4]
 80085be:	2331      	movs	r3, #49	; 0x31
 80085c0:	f805 3b01 	strb.w	r3, [r5], #1
 80085c4:	9b00      	ldr	r3, [sp, #0]
 80085c6:	3301      	adds	r3, #1
 80085c8:	9300      	str	r3, [sp, #0]
 80085ca:	e240      	b.n	8008a4e <_dtoa_r+0x946>
 80085cc:	07f2      	lsls	r2, r6, #31
 80085ce:	d505      	bpl.n	80085dc <_dtoa_r+0x4d4>
 80085d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085d4:	f7f8 f830 	bl	8000638 <__aeabi_dmul>
 80085d8:	3501      	adds	r5, #1
 80085da:	2301      	movs	r3, #1
 80085dc:	1076      	asrs	r6, r6, #1
 80085de:	3708      	adds	r7, #8
 80085e0:	e777      	b.n	80084d2 <_dtoa_r+0x3ca>
 80085e2:	2502      	movs	r5, #2
 80085e4:	e779      	b.n	80084da <_dtoa_r+0x3d2>
 80085e6:	9f00      	ldr	r7, [sp, #0]
 80085e8:	9e03      	ldr	r6, [sp, #12]
 80085ea:	e794      	b.n	8008516 <_dtoa_r+0x40e>
 80085ec:	9901      	ldr	r1, [sp, #4]
 80085ee:	4b4c      	ldr	r3, [pc, #304]	; (8008720 <_dtoa_r+0x618>)
 80085f0:	4431      	add	r1, r6
 80085f2:	910d      	str	r1, [sp, #52]	; 0x34
 80085f4:	9908      	ldr	r1, [sp, #32]
 80085f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80085fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085fe:	2900      	cmp	r1, #0
 8008600:	d043      	beq.n	800868a <_dtoa_r+0x582>
 8008602:	494d      	ldr	r1, [pc, #308]	; (8008738 <_dtoa_r+0x630>)
 8008604:	2000      	movs	r0, #0
 8008606:	f7f8 f941 	bl	800088c <__aeabi_ddiv>
 800860a:	4652      	mov	r2, sl
 800860c:	465b      	mov	r3, fp
 800860e:	f7f7 fe5b 	bl	80002c8 <__aeabi_dsub>
 8008612:	9d01      	ldr	r5, [sp, #4]
 8008614:	4682      	mov	sl, r0
 8008616:	468b      	mov	fp, r1
 8008618:	4649      	mov	r1, r9
 800861a:	4640      	mov	r0, r8
 800861c:	f7f8 fabc 	bl	8000b98 <__aeabi_d2iz>
 8008620:	4606      	mov	r6, r0
 8008622:	f7f7 ff9f 	bl	8000564 <__aeabi_i2d>
 8008626:	4602      	mov	r2, r0
 8008628:	460b      	mov	r3, r1
 800862a:	4640      	mov	r0, r8
 800862c:	4649      	mov	r1, r9
 800862e:	f7f7 fe4b 	bl	80002c8 <__aeabi_dsub>
 8008632:	3630      	adds	r6, #48	; 0x30
 8008634:	f805 6b01 	strb.w	r6, [r5], #1
 8008638:	4652      	mov	r2, sl
 800863a:	465b      	mov	r3, fp
 800863c:	4680      	mov	r8, r0
 800863e:	4689      	mov	r9, r1
 8008640:	f7f8 fa6c 	bl	8000b1c <__aeabi_dcmplt>
 8008644:	2800      	cmp	r0, #0
 8008646:	d163      	bne.n	8008710 <_dtoa_r+0x608>
 8008648:	4642      	mov	r2, r8
 800864a:	464b      	mov	r3, r9
 800864c:	4936      	ldr	r1, [pc, #216]	; (8008728 <_dtoa_r+0x620>)
 800864e:	2000      	movs	r0, #0
 8008650:	f7f7 fe3a 	bl	80002c8 <__aeabi_dsub>
 8008654:	4652      	mov	r2, sl
 8008656:	465b      	mov	r3, fp
 8008658:	f7f8 fa60 	bl	8000b1c <__aeabi_dcmplt>
 800865c:	2800      	cmp	r0, #0
 800865e:	f040 80b5 	bne.w	80087cc <_dtoa_r+0x6c4>
 8008662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008664:	429d      	cmp	r5, r3
 8008666:	d081      	beq.n	800856c <_dtoa_r+0x464>
 8008668:	4b30      	ldr	r3, [pc, #192]	; (800872c <_dtoa_r+0x624>)
 800866a:	2200      	movs	r2, #0
 800866c:	4650      	mov	r0, sl
 800866e:	4659      	mov	r1, fp
 8008670:	f7f7 ffe2 	bl	8000638 <__aeabi_dmul>
 8008674:	4b2d      	ldr	r3, [pc, #180]	; (800872c <_dtoa_r+0x624>)
 8008676:	4682      	mov	sl, r0
 8008678:	468b      	mov	fp, r1
 800867a:	4640      	mov	r0, r8
 800867c:	4649      	mov	r1, r9
 800867e:	2200      	movs	r2, #0
 8008680:	f7f7 ffda 	bl	8000638 <__aeabi_dmul>
 8008684:	4680      	mov	r8, r0
 8008686:	4689      	mov	r9, r1
 8008688:	e7c6      	b.n	8008618 <_dtoa_r+0x510>
 800868a:	4650      	mov	r0, sl
 800868c:	4659      	mov	r1, fp
 800868e:	f7f7 ffd3 	bl	8000638 <__aeabi_dmul>
 8008692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008694:	9d01      	ldr	r5, [sp, #4]
 8008696:	930f      	str	r3, [sp, #60]	; 0x3c
 8008698:	4682      	mov	sl, r0
 800869a:	468b      	mov	fp, r1
 800869c:	4649      	mov	r1, r9
 800869e:	4640      	mov	r0, r8
 80086a0:	f7f8 fa7a 	bl	8000b98 <__aeabi_d2iz>
 80086a4:	4606      	mov	r6, r0
 80086a6:	f7f7 ff5d 	bl	8000564 <__aeabi_i2d>
 80086aa:	3630      	adds	r6, #48	; 0x30
 80086ac:	4602      	mov	r2, r0
 80086ae:	460b      	mov	r3, r1
 80086b0:	4640      	mov	r0, r8
 80086b2:	4649      	mov	r1, r9
 80086b4:	f7f7 fe08 	bl	80002c8 <__aeabi_dsub>
 80086b8:	f805 6b01 	strb.w	r6, [r5], #1
 80086bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086be:	429d      	cmp	r5, r3
 80086c0:	4680      	mov	r8, r0
 80086c2:	4689      	mov	r9, r1
 80086c4:	f04f 0200 	mov.w	r2, #0
 80086c8:	d124      	bne.n	8008714 <_dtoa_r+0x60c>
 80086ca:	4b1b      	ldr	r3, [pc, #108]	; (8008738 <_dtoa_r+0x630>)
 80086cc:	4650      	mov	r0, sl
 80086ce:	4659      	mov	r1, fp
 80086d0:	f7f7 fdfc 	bl	80002cc <__adddf3>
 80086d4:	4602      	mov	r2, r0
 80086d6:	460b      	mov	r3, r1
 80086d8:	4640      	mov	r0, r8
 80086da:	4649      	mov	r1, r9
 80086dc:	f7f8 fa3c 	bl	8000b58 <__aeabi_dcmpgt>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	d173      	bne.n	80087cc <_dtoa_r+0x6c4>
 80086e4:	4652      	mov	r2, sl
 80086e6:	465b      	mov	r3, fp
 80086e8:	4913      	ldr	r1, [pc, #76]	; (8008738 <_dtoa_r+0x630>)
 80086ea:	2000      	movs	r0, #0
 80086ec:	f7f7 fdec 	bl	80002c8 <__aeabi_dsub>
 80086f0:	4602      	mov	r2, r0
 80086f2:	460b      	mov	r3, r1
 80086f4:	4640      	mov	r0, r8
 80086f6:	4649      	mov	r1, r9
 80086f8:	f7f8 fa10 	bl	8000b1c <__aeabi_dcmplt>
 80086fc:	2800      	cmp	r0, #0
 80086fe:	f43f af35 	beq.w	800856c <_dtoa_r+0x464>
 8008702:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008704:	1e6b      	subs	r3, r5, #1
 8008706:	930f      	str	r3, [sp, #60]	; 0x3c
 8008708:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800870c:	2b30      	cmp	r3, #48	; 0x30
 800870e:	d0f8      	beq.n	8008702 <_dtoa_r+0x5fa>
 8008710:	9700      	str	r7, [sp, #0]
 8008712:	e049      	b.n	80087a8 <_dtoa_r+0x6a0>
 8008714:	4b05      	ldr	r3, [pc, #20]	; (800872c <_dtoa_r+0x624>)
 8008716:	f7f7 ff8f 	bl	8000638 <__aeabi_dmul>
 800871a:	4680      	mov	r8, r0
 800871c:	4689      	mov	r9, r1
 800871e:	e7bd      	b.n	800869c <_dtoa_r+0x594>
 8008720:	0800a6d8 	.word	0x0800a6d8
 8008724:	0800a6b0 	.word	0x0800a6b0
 8008728:	3ff00000 	.word	0x3ff00000
 800872c:	40240000 	.word	0x40240000
 8008730:	401c0000 	.word	0x401c0000
 8008734:	40140000 	.word	0x40140000
 8008738:	3fe00000 	.word	0x3fe00000
 800873c:	9d01      	ldr	r5, [sp, #4]
 800873e:	4656      	mov	r6, sl
 8008740:	465f      	mov	r7, fp
 8008742:	4642      	mov	r2, r8
 8008744:	464b      	mov	r3, r9
 8008746:	4630      	mov	r0, r6
 8008748:	4639      	mov	r1, r7
 800874a:	f7f8 f89f 	bl	800088c <__aeabi_ddiv>
 800874e:	f7f8 fa23 	bl	8000b98 <__aeabi_d2iz>
 8008752:	4682      	mov	sl, r0
 8008754:	f7f7 ff06 	bl	8000564 <__aeabi_i2d>
 8008758:	4642      	mov	r2, r8
 800875a:	464b      	mov	r3, r9
 800875c:	f7f7 ff6c 	bl	8000638 <__aeabi_dmul>
 8008760:	4602      	mov	r2, r0
 8008762:	460b      	mov	r3, r1
 8008764:	4630      	mov	r0, r6
 8008766:	4639      	mov	r1, r7
 8008768:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800876c:	f7f7 fdac 	bl	80002c8 <__aeabi_dsub>
 8008770:	f805 6b01 	strb.w	r6, [r5], #1
 8008774:	9e01      	ldr	r6, [sp, #4]
 8008776:	9f03      	ldr	r7, [sp, #12]
 8008778:	1bae      	subs	r6, r5, r6
 800877a:	42b7      	cmp	r7, r6
 800877c:	4602      	mov	r2, r0
 800877e:	460b      	mov	r3, r1
 8008780:	d135      	bne.n	80087ee <_dtoa_r+0x6e6>
 8008782:	f7f7 fda3 	bl	80002cc <__adddf3>
 8008786:	4642      	mov	r2, r8
 8008788:	464b      	mov	r3, r9
 800878a:	4606      	mov	r6, r0
 800878c:	460f      	mov	r7, r1
 800878e:	f7f8 f9e3 	bl	8000b58 <__aeabi_dcmpgt>
 8008792:	b9d0      	cbnz	r0, 80087ca <_dtoa_r+0x6c2>
 8008794:	4642      	mov	r2, r8
 8008796:	464b      	mov	r3, r9
 8008798:	4630      	mov	r0, r6
 800879a:	4639      	mov	r1, r7
 800879c:	f7f8 f9b4 	bl	8000b08 <__aeabi_dcmpeq>
 80087a0:	b110      	cbz	r0, 80087a8 <_dtoa_r+0x6a0>
 80087a2:	f01a 0f01 	tst.w	sl, #1
 80087a6:	d110      	bne.n	80087ca <_dtoa_r+0x6c2>
 80087a8:	4620      	mov	r0, r4
 80087aa:	ee18 1a10 	vmov	r1, s16
 80087ae:	f000 faf7 	bl	8008da0 <_Bfree>
 80087b2:	2300      	movs	r3, #0
 80087b4:	9800      	ldr	r0, [sp, #0]
 80087b6:	702b      	strb	r3, [r5, #0]
 80087b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087ba:	3001      	adds	r0, #1
 80087bc:	6018      	str	r0, [r3, #0]
 80087be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f43f acf1 	beq.w	80081a8 <_dtoa_r+0xa0>
 80087c6:	601d      	str	r5, [r3, #0]
 80087c8:	e4ee      	b.n	80081a8 <_dtoa_r+0xa0>
 80087ca:	9f00      	ldr	r7, [sp, #0]
 80087cc:	462b      	mov	r3, r5
 80087ce:	461d      	mov	r5, r3
 80087d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087d4:	2a39      	cmp	r2, #57	; 0x39
 80087d6:	d106      	bne.n	80087e6 <_dtoa_r+0x6de>
 80087d8:	9a01      	ldr	r2, [sp, #4]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d1f7      	bne.n	80087ce <_dtoa_r+0x6c6>
 80087de:	9901      	ldr	r1, [sp, #4]
 80087e0:	2230      	movs	r2, #48	; 0x30
 80087e2:	3701      	adds	r7, #1
 80087e4:	700a      	strb	r2, [r1, #0]
 80087e6:	781a      	ldrb	r2, [r3, #0]
 80087e8:	3201      	adds	r2, #1
 80087ea:	701a      	strb	r2, [r3, #0]
 80087ec:	e790      	b.n	8008710 <_dtoa_r+0x608>
 80087ee:	4ba6      	ldr	r3, [pc, #664]	; (8008a88 <_dtoa_r+0x980>)
 80087f0:	2200      	movs	r2, #0
 80087f2:	f7f7 ff21 	bl	8000638 <__aeabi_dmul>
 80087f6:	2200      	movs	r2, #0
 80087f8:	2300      	movs	r3, #0
 80087fa:	4606      	mov	r6, r0
 80087fc:	460f      	mov	r7, r1
 80087fe:	f7f8 f983 	bl	8000b08 <__aeabi_dcmpeq>
 8008802:	2800      	cmp	r0, #0
 8008804:	d09d      	beq.n	8008742 <_dtoa_r+0x63a>
 8008806:	e7cf      	b.n	80087a8 <_dtoa_r+0x6a0>
 8008808:	9a08      	ldr	r2, [sp, #32]
 800880a:	2a00      	cmp	r2, #0
 800880c:	f000 80d7 	beq.w	80089be <_dtoa_r+0x8b6>
 8008810:	9a06      	ldr	r2, [sp, #24]
 8008812:	2a01      	cmp	r2, #1
 8008814:	f300 80ba 	bgt.w	800898c <_dtoa_r+0x884>
 8008818:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800881a:	2a00      	cmp	r2, #0
 800881c:	f000 80b2 	beq.w	8008984 <_dtoa_r+0x87c>
 8008820:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008824:	9e07      	ldr	r6, [sp, #28]
 8008826:	9d04      	ldr	r5, [sp, #16]
 8008828:	9a04      	ldr	r2, [sp, #16]
 800882a:	441a      	add	r2, r3
 800882c:	9204      	str	r2, [sp, #16]
 800882e:	9a05      	ldr	r2, [sp, #20]
 8008830:	2101      	movs	r1, #1
 8008832:	441a      	add	r2, r3
 8008834:	4620      	mov	r0, r4
 8008836:	9205      	str	r2, [sp, #20]
 8008838:	f000 fb6a 	bl	8008f10 <__i2b>
 800883c:	4607      	mov	r7, r0
 800883e:	2d00      	cmp	r5, #0
 8008840:	dd0c      	ble.n	800885c <_dtoa_r+0x754>
 8008842:	9b05      	ldr	r3, [sp, #20]
 8008844:	2b00      	cmp	r3, #0
 8008846:	dd09      	ble.n	800885c <_dtoa_r+0x754>
 8008848:	42ab      	cmp	r3, r5
 800884a:	9a04      	ldr	r2, [sp, #16]
 800884c:	bfa8      	it	ge
 800884e:	462b      	movge	r3, r5
 8008850:	1ad2      	subs	r2, r2, r3
 8008852:	9204      	str	r2, [sp, #16]
 8008854:	9a05      	ldr	r2, [sp, #20]
 8008856:	1aed      	subs	r5, r5, r3
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	9305      	str	r3, [sp, #20]
 800885c:	9b07      	ldr	r3, [sp, #28]
 800885e:	b31b      	cbz	r3, 80088a8 <_dtoa_r+0x7a0>
 8008860:	9b08      	ldr	r3, [sp, #32]
 8008862:	2b00      	cmp	r3, #0
 8008864:	f000 80af 	beq.w	80089c6 <_dtoa_r+0x8be>
 8008868:	2e00      	cmp	r6, #0
 800886a:	dd13      	ble.n	8008894 <_dtoa_r+0x78c>
 800886c:	4639      	mov	r1, r7
 800886e:	4632      	mov	r2, r6
 8008870:	4620      	mov	r0, r4
 8008872:	f000 fc0d 	bl	8009090 <__pow5mult>
 8008876:	ee18 2a10 	vmov	r2, s16
 800887a:	4601      	mov	r1, r0
 800887c:	4607      	mov	r7, r0
 800887e:	4620      	mov	r0, r4
 8008880:	f000 fb5c 	bl	8008f3c <__multiply>
 8008884:	ee18 1a10 	vmov	r1, s16
 8008888:	4680      	mov	r8, r0
 800888a:	4620      	mov	r0, r4
 800888c:	f000 fa88 	bl	8008da0 <_Bfree>
 8008890:	ee08 8a10 	vmov	s16, r8
 8008894:	9b07      	ldr	r3, [sp, #28]
 8008896:	1b9a      	subs	r2, r3, r6
 8008898:	d006      	beq.n	80088a8 <_dtoa_r+0x7a0>
 800889a:	ee18 1a10 	vmov	r1, s16
 800889e:	4620      	mov	r0, r4
 80088a0:	f000 fbf6 	bl	8009090 <__pow5mult>
 80088a4:	ee08 0a10 	vmov	s16, r0
 80088a8:	2101      	movs	r1, #1
 80088aa:	4620      	mov	r0, r4
 80088ac:	f000 fb30 	bl	8008f10 <__i2b>
 80088b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	4606      	mov	r6, r0
 80088b6:	f340 8088 	ble.w	80089ca <_dtoa_r+0x8c2>
 80088ba:	461a      	mov	r2, r3
 80088bc:	4601      	mov	r1, r0
 80088be:	4620      	mov	r0, r4
 80088c0:	f000 fbe6 	bl	8009090 <__pow5mult>
 80088c4:	9b06      	ldr	r3, [sp, #24]
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	4606      	mov	r6, r0
 80088ca:	f340 8081 	ble.w	80089d0 <_dtoa_r+0x8c8>
 80088ce:	f04f 0800 	mov.w	r8, #0
 80088d2:	6933      	ldr	r3, [r6, #16]
 80088d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80088d8:	6918      	ldr	r0, [r3, #16]
 80088da:	f000 fac9 	bl	8008e70 <__hi0bits>
 80088de:	f1c0 0020 	rsb	r0, r0, #32
 80088e2:	9b05      	ldr	r3, [sp, #20]
 80088e4:	4418      	add	r0, r3
 80088e6:	f010 001f 	ands.w	r0, r0, #31
 80088ea:	f000 8092 	beq.w	8008a12 <_dtoa_r+0x90a>
 80088ee:	f1c0 0320 	rsb	r3, r0, #32
 80088f2:	2b04      	cmp	r3, #4
 80088f4:	f340 808a 	ble.w	8008a0c <_dtoa_r+0x904>
 80088f8:	f1c0 001c 	rsb	r0, r0, #28
 80088fc:	9b04      	ldr	r3, [sp, #16]
 80088fe:	4403      	add	r3, r0
 8008900:	9304      	str	r3, [sp, #16]
 8008902:	9b05      	ldr	r3, [sp, #20]
 8008904:	4403      	add	r3, r0
 8008906:	4405      	add	r5, r0
 8008908:	9305      	str	r3, [sp, #20]
 800890a:	9b04      	ldr	r3, [sp, #16]
 800890c:	2b00      	cmp	r3, #0
 800890e:	dd07      	ble.n	8008920 <_dtoa_r+0x818>
 8008910:	ee18 1a10 	vmov	r1, s16
 8008914:	461a      	mov	r2, r3
 8008916:	4620      	mov	r0, r4
 8008918:	f000 fc14 	bl	8009144 <__lshift>
 800891c:	ee08 0a10 	vmov	s16, r0
 8008920:	9b05      	ldr	r3, [sp, #20]
 8008922:	2b00      	cmp	r3, #0
 8008924:	dd05      	ble.n	8008932 <_dtoa_r+0x82a>
 8008926:	4631      	mov	r1, r6
 8008928:	461a      	mov	r2, r3
 800892a:	4620      	mov	r0, r4
 800892c:	f000 fc0a 	bl	8009144 <__lshift>
 8008930:	4606      	mov	r6, r0
 8008932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008934:	2b00      	cmp	r3, #0
 8008936:	d06e      	beq.n	8008a16 <_dtoa_r+0x90e>
 8008938:	ee18 0a10 	vmov	r0, s16
 800893c:	4631      	mov	r1, r6
 800893e:	f000 fc71 	bl	8009224 <__mcmp>
 8008942:	2800      	cmp	r0, #0
 8008944:	da67      	bge.n	8008a16 <_dtoa_r+0x90e>
 8008946:	9b00      	ldr	r3, [sp, #0]
 8008948:	3b01      	subs	r3, #1
 800894a:	ee18 1a10 	vmov	r1, s16
 800894e:	9300      	str	r3, [sp, #0]
 8008950:	220a      	movs	r2, #10
 8008952:	2300      	movs	r3, #0
 8008954:	4620      	mov	r0, r4
 8008956:	f000 fa45 	bl	8008de4 <__multadd>
 800895a:	9b08      	ldr	r3, [sp, #32]
 800895c:	ee08 0a10 	vmov	s16, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	f000 81b1 	beq.w	8008cc8 <_dtoa_r+0xbc0>
 8008966:	2300      	movs	r3, #0
 8008968:	4639      	mov	r1, r7
 800896a:	220a      	movs	r2, #10
 800896c:	4620      	mov	r0, r4
 800896e:	f000 fa39 	bl	8008de4 <__multadd>
 8008972:	9b02      	ldr	r3, [sp, #8]
 8008974:	2b00      	cmp	r3, #0
 8008976:	4607      	mov	r7, r0
 8008978:	f300 808e 	bgt.w	8008a98 <_dtoa_r+0x990>
 800897c:	9b06      	ldr	r3, [sp, #24]
 800897e:	2b02      	cmp	r3, #2
 8008980:	dc51      	bgt.n	8008a26 <_dtoa_r+0x91e>
 8008982:	e089      	b.n	8008a98 <_dtoa_r+0x990>
 8008984:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008986:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800898a:	e74b      	b.n	8008824 <_dtoa_r+0x71c>
 800898c:	9b03      	ldr	r3, [sp, #12]
 800898e:	1e5e      	subs	r6, r3, #1
 8008990:	9b07      	ldr	r3, [sp, #28]
 8008992:	42b3      	cmp	r3, r6
 8008994:	bfbf      	itttt	lt
 8008996:	9b07      	ldrlt	r3, [sp, #28]
 8008998:	9607      	strlt	r6, [sp, #28]
 800899a:	1af2      	sublt	r2, r6, r3
 800899c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800899e:	bfb6      	itet	lt
 80089a0:	189b      	addlt	r3, r3, r2
 80089a2:	1b9e      	subge	r6, r3, r6
 80089a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80089a6:	9b03      	ldr	r3, [sp, #12]
 80089a8:	bfb8      	it	lt
 80089aa:	2600      	movlt	r6, #0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	bfb7      	itett	lt
 80089b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80089b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80089b8:	1a9d      	sublt	r5, r3, r2
 80089ba:	2300      	movlt	r3, #0
 80089bc:	e734      	b.n	8008828 <_dtoa_r+0x720>
 80089be:	9e07      	ldr	r6, [sp, #28]
 80089c0:	9d04      	ldr	r5, [sp, #16]
 80089c2:	9f08      	ldr	r7, [sp, #32]
 80089c4:	e73b      	b.n	800883e <_dtoa_r+0x736>
 80089c6:	9a07      	ldr	r2, [sp, #28]
 80089c8:	e767      	b.n	800889a <_dtoa_r+0x792>
 80089ca:	9b06      	ldr	r3, [sp, #24]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	dc18      	bgt.n	8008a02 <_dtoa_r+0x8fa>
 80089d0:	f1ba 0f00 	cmp.w	sl, #0
 80089d4:	d115      	bne.n	8008a02 <_dtoa_r+0x8fa>
 80089d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089da:	b993      	cbnz	r3, 8008a02 <_dtoa_r+0x8fa>
 80089dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80089e0:	0d1b      	lsrs	r3, r3, #20
 80089e2:	051b      	lsls	r3, r3, #20
 80089e4:	b183      	cbz	r3, 8008a08 <_dtoa_r+0x900>
 80089e6:	9b04      	ldr	r3, [sp, #16]
 80089e8:	3301      	adds	r3, #1
 80089ea:	9304      	str	r3, [sp, #16]
 80089ec:	9b05      	ldr	r3, [sp, #20]
 80089ee:	3301      	adds	r3, #1
 80089f0:	9305      	str	r3, [sp, #20]
 80089f2:	f04f 0801 	mov.w	r8, #1
 80089f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f47f af6a 	bne.w	80088d2 <_dtoa_r+0x7ca>
 80089fe:	2001      	movs	r0, #1
 8008a00:	e76f      	b.n	80088e2 <_dtoa_r+0x7da>
 8008a02:	f04f 0800 	mov.w	r8, #0
 8008a06:	e7f6      	b.n	80089f6 <_dtoa_r+0x8ee>
 8008a08:	4698      	mov	r8, r3
 8008a0a:	e7f4      	b.n	80089f6 <_dtoa_r+0x8ee>
 8008a0c:	f43f af7d 	beq.w	800890a <_dtoa_r+0x802>
 8008a10:	4618      	mov	r0, r3
 8008a12:	301c      	adds	r0, #28
 8008a14:	e772      	b.n	80088fc <_dtoa_r+0x7f4>
 8008a16:	9b03      	ldr	r3, [sp, #12]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	dc37      	bgt.n	8008a8c <_dtoa_r+0x984>
 8008a1c:	9b06      	ldr	r3, [sp, #24]
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	dd34      	ble.n	8008a8c <_dtoa_r+0x984>
 8008a22:	9b03      	ldr	r3, [sp, #12]
 8008a24:	9302      	str	r3, [sp, #8]
 8008a26:	9b02      	ldr	r3, [sp, #8]
 8008a28:	b96b      	cbnz	r3, 8008a46 <_dtoa_r+0x93e>
 8008a2a:	4631      	mov	r1, r6
 8008a2c:	2205      	movs	r2, #5
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f000 f9d8 	bl	8008de4 <__multadd>
 8008a34:	4601      	mov	r1, r0
 8008a36:	4606      	mov	r6, r0
 8008a38:	ee18 0a10 	vmov	r0, s16
 8008a3c:	f000 fbf2 	bl	8009224 <__mcmp>
 8008a40:	2800      	cmp	r0, #0
 8008a42:	f73f adbb 	bgt.w	80085bc <_dtoa_r+0x4b4>
 8008a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a48:	9d01      	ldr	r5, [sp, #4]
 8008a4a:	43db      	mvns	r3, r3
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	f04f 0800 	mov.w	r8, #0
 8008a52:	4631      	mov	r1, r6
 8008a54:	4620      	mov	r0, r4
 8008a56:	f000 f9a3 	bl	8008da0 <_Bfree>
 8008a5a:	2f00      	cmp	r7, #0
 8008a5c:	f43f aea4 	beq.w	80087a8 <_dtoa_r+0x6a0>
 8008a60:	f1b8 0f00 	cmp.w	r8, #0
 8008a64:	d005      	beq.n	8008a72 <_dtoa_r+0x96a>
 8008a66:	45b8      	cmp	r8, r7
 8008a68:	d003      	beq.n	8008a72 <_dtoa_r+0x96a>
 8008a6a:	4641      	mov	r1, r8
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f000 f997 	bl	8008da0 <_Bfree>
 8008a72:	4639      	mov	r1, r7
 8008a74:	4620      	mov	r0, r4
 8008a76:	f000 f993 	bl	8008da0 <_Bfree>
 8008a7a:	e695      	b.n	80087a8 <_dtoa_r+0x6a0>
 8008a7c:	2600      	movs	r6, #0
 8008a7e:	4637      	mov	r7, r6
 8008a80:	e7e1      	b.n	8008a46 <_dtoa_r+0x93e>
 8008a82:	9700      	str	r7, [sp, #0]
 8008a84:	4637      	mov	r7, r6
 8008a86:	e599      	b.n	80085bc <_dtoa_r+0x4b4>
 8008a88:	40240000 	.word	0x40240000
 8008a8c:	9b08      	ldr	r3, [sp, #32]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	f000 80ca 	beq.w	8008c28 <_dtoa_r+0xb20>
 8008a94:	9b03      	ldr	r3, [sp, #12]
 8008a96:	9302      	str	r3, [sp, #8]
 8008a98:	2d00      	cmp	r5, #0
 8008a9a:	dd05      	ble.n	8008aa8 <_dtoa_r+0x9a0>
 8008a9c:	4639      	mov	r1, r7
 8008a9e:	462a      	mov	r2, r5
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f000 fb4f 	bl	8009144 <__lshift>
 8008aa6:	4607      	mov	r7, r0
 8008aa8:	f1b8 0f00 	cmp.w	r8, #0
 8008aac:	d05b      	beq.n	8008b66 <_dtoa_r+0xa5e>
 8008aae:	6879      	ldr	r1, [r7, #4]
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f000 f935 	bl	8008d20 <_Balloc>
 8008ab6:	4605      	mov	r5, r0
 8008ab8:	b928      	cbnz	r0, 8008ac6 <_dtoa_r+0x9be>
 8008aba:	4b87      	ldr	r3, [pc, #540]	; (8008cd8 <_dtoa_r+0xbd0>)
 8008abc:	4602      	mov	r2, r0
 8008abe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008ac2:	f7ff bb3b 	b.w	800813c <_dtoa_r+0x34>
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	3202      	adds	r2, #2
 8008aca:	0092      	lsls	r2, r2, #2
 8008acc:	f107 010c 	add.w	r1, r7, #12
 8008ad0:	300c      	adds	r0, #12
 8008ad2:	f000 f90b 	bl	8008cec <memcpy>
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	4629      	mov	r1, r5
 8008ada:	4620      	mov	r0, r4
 8008adc:	f000 fb32 	bl	8009144 <__lshift>
 8008ae0:	9b01      	ldr	r3, [sp, #4]
 8008ae2:	f103 0901 	add.w	r9, r3, #1
 8008ae6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008aea:	4413      	add	r3, r2
 8008aec:	9305      	str	r3, [sp, #20]
 8008aee:	f00a 0301 	and.w	r3, sl, #1
 8008af2:	46b8      	mov	r8, r7
 8008af4:	9304      	str	r3, [sp, #16]
 8008af6:	4607      	mov	r7, r0
 8008af8:	4631      	mov	r1, r6
 8008afa:	ee18 0a10 	vmov	r0, s16
 8008afe:	f7ff fa78 	bl	8007ff2 <quorem>
 8008b02:	4641      	mov	r1, r8
 8008b04:	9002      	str	r0, [sp, #8]
 8008b06:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008b0a:	ee18 0a10 	vmov	r0, s16
 8008b0e:	f000 fb89 	bl	8009224 <__mcmp>
 8008b12:	463a      	mov	r2, r7
 8008b14:	9003      	str	r0, [sp, #12]
 8008b16:	4631      	mov	r1, r6
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 fb9f 	bl	800925c <__mdiff>
 8008b1e:	68c2      	ldr	r2, [r0, #12]
 8008b20:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8008b24:	4605      	mov	r5, r0
 8008b26:	bb02      	cbnz	r2, 8008b6a <_dtoa_r+0xa62>
 8008b28:	4601      	mov	r1, r0
 8008b2a:	ee18 0a10 	vmov	r0, s16
 8008b2e:	f000 fb79 	bl	8009224 <__mcmp>
 8008b32:	4602      	mov	r2, r0
 8008b34:	4629      	mov	r1, r5
 8008b36:	4620      	mov	r0, r4
 8008b38:	9207      	str	r2, [sp, #28]
 8008b3a:	f000 f931 	bl	8008da0 <_Bfree>
 8008b3e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008b42:	ea43 0102 	orr.w	r1, r3, r2
 8008b46:	9b04      	ldr	r3, [sp, #16]
 8008b48:	430b      	orrs	r3, r1
 8008b4a:	464d      	mov	r5, r9
 8008b4c:	d10f      	bne.n	8008b6e <_dtoa_r+0xa66>
 8008b4e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b52:	d02a      	beq.n	8008baa <_dtoa_r+0xaa2>
 8008b54:	9b03      	ldr	r3, [sp, #12]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	dd02      	ble.n	8008b60 <_dtoa_r+0xa58>
 8008b5a:	9b02      	ldr	r3, [sp, #8]
 8008b5c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008b60:	f88b a000 	strb.w	sl, [fp]
 8008b64:	e775      	b.n	8008a52 <_dtoa_r+0x94a>
 8008b66:	4638      	mov	r0, r7
 8008b68:	e7ba      	b.n	8008ae0 <_dtoa_r+0x9d8>
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	e7e2      	b.n	8008b34 <_dtoa_r+0xa2c>
 8008b6e:	9b03      	ldr	r3, [sp, #12]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	db04      	blt.n	8008b7e <_dtoa_r+0xa76>
 8008b74:	9906      	ldr	r1, [sp, #24]
 8008b76:	430b      	orrs	r3, r1
 8008b78:	9904      	ldr	r1, [sp, #16]
 8008b7a:	430b      	orrs	r3, r1
 8008b7c:	d122      	bne.n	8008bc4 <_dtoa_r+0xabc>
 8008b7e:	2a00      	cmp	r2, #0
 8008b80:	ddee      	ble.n	8008b60 <_dtoa_r+0xa58>
 8008b82:	ee18 1a10 	vmov	r1, s16
 8008b86:	2201      	movs	r2, #1
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f000 fadb 	bl	8009144 <__lshift>
 8008b8e:	4631      	mov	r1, r6
 8008b90:	ee08 0a10 	vmov	s16, r0
 8008b94:	f000 fb46 	bl	8009224 <__mcmp>
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	dc03      	bgt.n	8008ba4 <_dtoa_r+0xa9c>
 8008b9c:	d1e0      	bne.n	8008b60 <_dtoa_r+0xa58>
 8008b9e:	f01a 0f01 	tst.w	sl, #1
 8008ba2:	d0dd      	beq.n	8008b60 <_dtoa_r+0xa58>
 8008ba4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ba8:	d1d7      	bne.n	8008b5a <_dtoa_r+0xa52>
 8008baa:	2339      	movs	r3, #57	; 0x39
 8008bac:	f88b 3000 	strb.w	r3, [fp]
 8008bb0:	462b      	mov	r3, r5
 8008bb2:	461d      	mov	r5, r3
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008bba:	2a39      	cmp	r2, #57	; 0x39
 8008bbc:	d071      	beq.n	8008ca2 <_dtoa_r+0xb9a>
 8008bbe:	3201      	adds	r2, #1
 8008bc0:	701a      	strb	r2, [r3, #0]
 8008bc2:	e746      	b.n	8008a52 <_dtoa_r+0x94a>
 8008bc4:	2a00      	cmp	r2, #0
 8008bc6:	dd07      	ble.n	8008bd8 <_dtoa_r+0xad0>
 8008bc8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008bcc:	d0ed      	beq.n	8008baa <_dtoa_r+0xaa2>
 8008bce:	f10a 0301 	add.w	r3, sl, #1
 8008bd2:	f88b 3000 	strb.w	r3, [fp]
 8008bd6:	e73c      	b.n	8008a52 <_dtoa_r+0x94a>
 8008bd8:	9b05      	ldr	r3, [sp, #20]
 8008bda:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008bde:	4599      	cmp	r9, r3
 8008be0:	d047      	beq.n	8008c72 <_dtoa_r+0xb6a>
 8008be2:	ee18 1a10 	vmov	r1, s16
 8008be6:	2300      	movs	r3, #0
 8008be8:	220a      	movs	r2, #10
 8008bea:	4620      	mov	r0, r4
 8008bec:	f000 f8fa 	bl	8008de4 <__multadd>
 8008bf0:	45b8      	cmp	r8, r7
 8008bf2:	ee08 0a10 	vmov	s16, r0
 8008bf6:	f04f 0300 	mov.w	r3, #0
 8008bfa:	f04f 020a 	mov.w	r2, #10
 8008bfe:	4641      	mov	r1, r8
 8008c00:	4620      	mov	r0, r4
 8008c02:	d106      	bne.n	8008c12 <_dtoa_r+0xb0a>
 8008c04:	f000 f8ee 	bl	8008de4 <__multadd>
 8008c08:	4680      	mov	r8, r0
 8008c0a:	4607      	mov	r7, r0
 8008c0c:	f109 0901 	add.w	r9, r9, #1
 8008c10:	e772      	b.n	8008af8 <_dtoa_r+0x9f0>
 8008c12:	f000 f8e7 	bl	8008de4 <__multadd>
 8008c16:	4639      	mov	r1, r7
 8008c18:	4680      	mov	r8, r0
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	220a      	movs	r2, #10
 8008c1e:	4620      	mov	r0, r4
 8008c20:	f000 f8e0 	bl	8008de4 <__multadd>
 8008c24:	4607      	mov	r7, r0
 8008c26:	e7f1      	b.n	8008c0c <_dtoa_r+0xb04>
 8008c28:	9b03      	ldr	r3, [sp, #12]
 8008c2a:	9302      	str	r3, [sp, #8]
 8008c2c:	9d01      	ldr	r5, [sp, #4]
 8008c2e:	ee18 0a10 	vmov	r0, s16
 8008c32:	4631      	mov	r1, r6
 8008c34:	f7ff f9dd 	bl	8007ff2 <quorem>
 8008c38:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008c3c:	9b01      	ldr	r3, [sp, #4]
 8008c3e:	f805 ab01 	strb.w	sl, [r5], #1
 8008c42:	1aea      	subs	r2, r5, r3
 8008c44:	9b02      	ldr	r3, [sp, #8]
 8008c46:	4293      	cmp	r3, r2
 8008c48:	dd09      	ble.n	8008c5e <_dtoa_r+0xb56>
 8008c4a:	ee18 1a10 	vmov	r1, s16
 8008c4e:	2300      	movs	r3, #0
 8008c50:	220a      	movs	r2, #10
 8008c52:	4620      	mov	r0, r4
 8008c54:	f000 f8c6 	bl	8008de4 <__multadd>
 8008c58:	ee08 0a10 	vmov	s16, r0
 8008c5c:	e7e7      	b.n	8008c2e <_dtoa_r+0xb26>
 8008c5e:	9b02      	ldr	r3, [sp, #8]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	bfc8      	it	gt
 8008c64:	461d      	movgt	r5, r3
 8008c66:	9b01      	ldr	r3, [sp, #4]
 8008c68:	bfd8      	it	le
 8008c6a:	2501      	movle	r5, #1
 8008c6c:	441d      	add	r5, r3
 8008c6e:	f04f 0800 	mov.w	r8, #0
 8008c72:	ee18 1a10 	vmov	r1, s16
 8008c76:	2201      	movs	r2, #1
 8008c78:	4620      	mov	r0, r4
 8008c7a:	f000 fa63 	bl	8009144 <__lshift>
 8008c7e:	4631      	mov	r1, r6
 8008c80:	ee08 0a10 	vmov	s16, r0
 8008c84:	f000 face 	bl	8009224 <__mcmp>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	dc91      	bgt.n	8008bb0 <_dtoa_r+0xaa8>
 8008c8c:	d102      	bne.n	8008c94 <_dtoa_r+0xb8c>
 8008c8e:	f01a 0f01 	tst.w	sl, #1
 8008c92:	d18d      	bne.n	8008bb0 <_dtoa_r+0xaa8>
 8008c94:	462b      	mov	r3, r5
 8008c96:	461d      	mov	r5, r3
 8008c98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c9c:	2a30      	cmp	r2, #48	; 0x30
 8008c9e:	d0fa      	beq.n	8008c96 <_dtoa_r+0xb8e>
 8008ca0:	e6d7      	b.n	8008a52 <_dtoa_r+0x94a>
 8008ca2:	9a01      	ldr	r2, [sp, #4]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d184      	bne.n	8008bb2 <_dtoa_r+0xaaa>
 8008ca8:	9b00      	ldr	r3, [sp, #0]
 8008caa:	3301      	adds	r3, #1
 8008cac:	9300      	str	r3, [sp, #0]
 8008cae:	2331      	movs	r3, #49	; 0x31
 8008cb0:	7013      	strb	r3, [r2, #0]
 8008cb2:	e6ce      	b.n	8008a52 <_dtoa_r+0x94a>
 8008cb4:	4b09      	ldr	r3, [pc, #36]	; (8008cdc <_dtoa_r+0xbd4>)
 8008cb6:	f7ff ba95 	b.w	80081e4 <_dtoa_r+0xdc>
 8008cba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f47f aa6e 	bne.w	800819e <_dtoa_r+0x96>
 8008cc2:	4b07      	ldr	r3, [pc, #28]	; (8008ce0 <_dtoa_r+0xbd8>)
 8008cc4:	f7ff ba8e 	b.w	80081e4 <_dtoa_r+0xdc>
 8008cc8:	9b02      	ldr	r3, [sp, #8]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	dcae      	bgt.n	8008c2c <_dtoa_r+0xb24>
 8008cce:	9b06      	ldr	r3, [sp, #24]
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	f73f aea8 	bgt.w	8008a26 <_dtoa_r+0x91e>
 8008cd6:	e7a9      	b.n	8008c2c <_dtoa_r+0xb24>
 8008cd8:	0800a63f 	.word	0x0800a63f
 8008cdc:	0800a59c 	.word	0x0800a59c
 8008ce0:	0800a5c0 	.word	0x0800a5c0

08008ce4 <_localeconv_r>:
 8008ce4:	4800      	ldr	r0, [pc, #0]	; (8008ce8 <_localeconv_r+0x4>)
 8008ce6:	4770      	bx	lr
 8008ce8:	20002528 	.word	0x20002528

08008cec <memcpy>:
 8008cec:	440a      	add	r2, r1
 8008cee:	4291      	cmp	r1, r2
 8008cf0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008cf4:	d100      	bne.n	8008cf8 <memcpy+0xc>
 8008cf6:	4770      	bx	lr
 8008cf8:	b510      	push	{r4, lr}
 8008cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d02:	4291      	cmp	r1, r2
 8008d04:	d1f9      	bne.n	8008cfa <memcpy+0xe>
 8008d06:	bd10      	pop	{r4, pc}

08008d08 <__malloc_lock>:
 8008d08:	4801      	ldr	r0, [pc, #4]	; (8008d10 <__malloc_lock+0x8>)
 8008d0a:	f000 bd30 	b.w	800976e <__retarget_lock_acquire_recursive>
 8008d0e:	bf00      	nop
 8008d10:	20002988 	.word	0x20002988

08008d14 <__malloc_unlock>:
 8008d14:	4801      	ldr	r0, [pc, #4]	; (8008d1c <__malloc_unlock+0x8>)
 8008d16:	f000 bd2b 	b.w	8009770 <__retarget_lock_release_recursive>
 8008d1a:	bf00      	nop
 8008d1c:	20002988 	.word	0x20002988

08008d20 <_Balloc>:
 8008d20:	b570      	push	{r4, r5, r6, lr}
 8008d22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d24:	4604      	mov	r4, r0
 8008d26:	460d      	mov	r5, r1
 8008d28:	b976      	cbnz	r6, 8008d48 <_Balloc+0x28>
 8008d2a:	2010      	movs	r0, #16
 8008d2c:	f7fe fbbc 	bl	80074a8 <malloc>
 8008d30:	4602      	mov	r2, r0
 8008d32:	6260      	str	r0, [r4, #36]	; 0x24
 8008d34:	b920      	cbnz	r0, 8008d40 <_Balloc+0x20>
 8008d36:	4b18      	ldr	r3, [pc, #96]	; (8008d98 <_Balloc+0x78>)
 8008d38:	4818      	ldr	r0, [pc, #96]	; (8008d9c <_Balloc+0x7c>)
 8008d3a:	2166      	movs	r1, #102	; 0x66
 8008d3c:	f000 fce6 	bl	800970c <__assert_func>
 8008d40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d44:	6006      	str	r6, [r0, #0]
 8008d46:	60c6      	str	r6, [r0, #12]
 8008d48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d4a:	68f3      	ldr	r3, [r6, #12]
 8008d4c:	b183      	cbz	r3, 8008d70 <_Balloc+0x50>
 8008d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d56:	b9b8      	cbnz	r0, 8008d88 <_Balloc+0x68>
 8008d58:	2101      	movs	r1, #1
 8008d5a:	fa01 f605 	lsl.w	r6, r1, r5
 8008d5e:	1d72      	adds	r2, r6, #5
 8008d60:	0092      	lsls	r2, r2, #2
 8008d62:	4620      	mov	r0, r4
 8008d64:	f000 fb60 	bl	8009428 <_calloc_r>
 8008d68:	b160      	cbz	r0, 8008d84 <_Balloc+0x64>
 8008d6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d6e:	e00e      	b.n	8008d8e <_Balloc+0x6e>
 8008d70:	2221      	movs	r2, #33	; 0x21
 8008d72:	2104      	movs	r1, #4
 8008d74:	4620      	mov	r0, r4
 8008d76:	f000 fb57 	bl	8009428 <_calloc_r>
 8008d7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d7c:	60f0      	str	r0, [r6, #12]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d1e4      	bne.n	8008d4e <_Balloc+0x2e>
 8008d84:	2000      	movs	r0, #0
 8008d86:	bd70      	pop	{r4, r5, r6, pc}
 8008d88:	6802      	ldr	r2, [r0, #0]
 8008d8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d8e:	2300      	movs	r3, #0
 8008d90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d94:	e7f7      	b.n	8008d86 <_Balloc+0x66>
 8008d96:	bf00      	nop
 8008d98:	0800a5cd 	.word	0x0800a5cd
 8008d9c:	0800a650 	.word	0x0800a650

08008da0 <_Bfree>:
 8008da0:	b570      	push	{r4, r5, r6, lr}
 8008da2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008da4:	4605      	mov	r5, r0
 8008da6:	460c      	mov	r4, r1
 8008da8:	b976      	cbnz	r6, 8008dc8 <_Bfree+0x28>
 8008daa:	2010      	movs	r0, #16
 8008dac:	f7fe fb7c 	bl	80074a8 <malloc>
 8008db0:	4602      	mov	r2, r0
 8008db2:	6268      	str	r0, [r5, #36]	; 0x24
 8008db4:	b920      	cbnz	r0, 8008dc0 <_Bfree+0x20>
 8008db6:	4b09      	ldr	r3, [pc, #36]	; (8008ddc <_Bfree+0x3c>)
 8008db8:	4809      	ldr	r0, [pc, #36]	; (8008de0 <_Bfree+0x40>)
 8008dba:	218a      	movs	r1, #138	; 0x8a
 8008dbc:	f000 fca6 	bl	800970c <__assert_func>
 8008dc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dc4:	6006      	str	r6, [r0, #0]
 8008dc6:	60c6      	str	r6, [r0, #12]
 8008dc8:	b13c      	cbz	r4, 8008dda <_Bfree+0x3a>
 8008dca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008dcc:	6862      	ldr	r2, [r4, #4]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008dd4:	6021      	str	r1, [r4, #0]
 8008dd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008dda:	bd70      	pop	{r4, r5, r6, pc}
 8008ddc:	0800a5cd 	.word	0x0800a5cd
 8008de0:	0800a650 	.word	0x0800a650

08008de4 <__multadd>:
 8008de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008de8:	690d      	ldr	r5, [r1, #16]
 8008dea:	4607      	mov	r7, r0
 8008dec:	460c      	mov	r4, r1
 8008dee:	461e      	mov	r6, r3
 8008df0:	f101 0c14 	add.w	ip, r1, #20
 8008df4:	2000      	movs	r0, #0
 8008df6:	f8dc 3000 	ldr.w	r3, [ip]
 8008dfa:	b299      	uxth	r1, r3
 8008dfc:	fb02 6101 	mla	r1, r2, r1, r6
 8008e00:	0c1e      	lsrs	r6, r3, #16
 8008e02:	0c0b      	lsrs	r3, r1, #16
 8008e04:	fb02 3306 	mla	r3, r2, r6, r3
 8008e08:	b289      	uxth	r1, r1
 8008e0a:	3001      	adds	r0, #1
 8008e0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e10:	4285      	cmp	r5, r0
 8008e12:	f84c 1b04 	str.w	r1, [ip], #4
 8008e16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e1a:	dcec      	bgt.n	8008df6 <__multadd+0x12>
 8008e1c:	b30e      	cbz	r6, 8008e62 <__multadd+0x7e>
 8008e1e:	68a3      	ldr	r3, [r4, #8]
 8008e20:	42ab      	cmp	r3, r5
 8008e22:	dc19      	bgt.n	8008e58 <__multadd+0x74>
 8008e24:	6861      	ldr	r1, [r4, #4]
 8008e26:	4638      	mov	r0, r7
 8008e28:	3101      	adds	r1, #1
 8008e2a:	f7ff ff79 	bl	8008d20 <_Balloc>
 8008e2e:	4680      	mov	r8, r0
 8008e30:	b928      	cbnz	r0, 8008e3e <__multadd+0x5a>
 8008e32:	4602      	mov	r2, r0
 8008e34:	4b0c      	ldr	r3, [pc, #48]	; (8008e68 <__multadd+0x84>)
 8008e36:	480d      	ldr	r0, [pc, #52]	; (8008e6c <__multadd+0x88>)
 8008e38:	21b5      	movs	r1, #181	; 0xb5
 8008e3a:	f000 fc67 	bl	800970c <__assert_func>
 8008e3e:	6922      	ldr	r2, [r4, #16]
 8008e40:	3202      	adds	r2, #2
 8008e42:	f104 010c 	add.w	r1, r4, #12
 8008e46:	0092      	lsls	r2, r2, #2
 8008e48:	300c      	adds	r0, #12
 8008e4a:	f7ff ff4f 	bl	8008cec <memcpy>
 8008e4e:	4621      	mov	r1, r4
 8008e50:	4638      	mov	r0, r7
 8008e52:	f7ff ffa5 	bl	8008da0 <_Bfree>
 8008e56:	4644      	mov	r4, r8
 8008e58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e5c:	3501      	adds	r5, #1
 8008e5e:	615e      	str	r6, [r3, #20]
 8008e60:	6125      	str	r5, [r4, #16]
 8008e62:	4620      	mov	r0, r4
 8008e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e68:	0800a63f 	.word	0x0800a63f
 8008e6c:	0800a650 	.word	0x0800a650

08008e70 <__hi0bits>:
 8008e70:	0c03      	lsrs	r3, r0, #16
 8008e72:	041b      	lsls	r3, r3, #16
 8008e74:	b9d3      	cbnz	r3, 8008eac <__hi0bits+0x3c>
 8008e76:	0400      	lsls	r0, r0, #16
 8008e78:	2310      	movs	r3, #16
 8008e7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e7e:	bf04      	itt	eq
 8008e80:	0200      	lsleq	r0, r0, #8
 8008e82:	3308      	addeq	r3, #8
 8008e84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008e88:	bf04      	itt	eq
 8008e8a:	0100      	lsleq	r0, r0, #4
 8008e8c:	3304      	addeq	r3, #4
 8008e8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008e92:	bf04      	itt	eq
 8008e94:	0080      	lsleq	r0, r0, #2
 8008e96:	3302      	addeq	r3, #2
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	db05      	blt.n	8008ea8 <__hi0bits+0x38>
 8008e9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008ea0:	f103 0301 	add.w	r3, r3, #1
 8008ea4:	bf08      	it	eq
 8008ea6:	2320      	moveq	r3, #32
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	4770      	bx	lr
 8008eac:	2300      	movs	r3, #0
 8008eae:	e7e4      	b.n	8008e7a <__hi0bits+0xa>

08008eb0 <__lo0bits>:
 8008eb0:	6803      	ldr	r3, [r0, #0]
 8008eb2:	f013 0207 	ands.w	r2, r3, #7
 8008eb6:	4601      	mov	r1, r0
 8008eb8:	d00b      	beq.n	8008ed2 <__lo0bits+0x22>
 8008eba:	07da      	lsls	r2, r3, #31
 8008ebc:	d423      	bmi.n	8008f06 <__lo0bits+0x56>
 8008ebe:	0798      	lsls	r0, r3, #30
 8008ec0:	bf49      	itett	mi
 8008ec2:	085b      	lsrmi	r3, r3, #1
 8008ec4:	089b      	lsrpl	r3, r3, #2
 8008ec6:	2001      	movmi	r0, #1
 8008ec8:	600b      	strmi	r3, [r1, #0]
 8008eca:	bf5c      	itt	pl
 8008ecc:	600b      	strpl	r3, [r1, #0]
 8008ece:	2002      	movpl	r0, #2
 8008ed0:	4770      	bx	lr
 8008ed2:	b298      	uxth	r0, r3
 8008ed4:	b9a8      	cbnz	r0, 8008f02 <__lo0bits+0x52>
 8008ed6:	0c1b      	lsrs	r3, r3, #16
 8008ed8:	2010      	movs	r0, #16
 8008eda:	b2da      	uxtb	r2, r3
 8008edc:	b90a      	cbnz	r2, 8008ee2 <__lo0bits+0x32>
 8008ede:	3008      	adds	r0, #8
 8008ee0:	0a1b      	lsrs	r3, r3, #8
 8008ee2:	071a      	lsls	r2, r3, #28
 8008ee4:	bf04      	itt	eq
 8008ee6:	091b      	lsreq	r3, r3, #4
 8008ee8:	3004      	addeq	r0, #4
 8008eea:	079a      	lsls	r2, r3, #30
 8008eec:	bf04      	itt	eq
 8008eee:	089b      	lsreq	r3, r3, #2
 8008ef0:	3002      	addeq	r0, #2
 8008ef2:	07da      	lsls	r2, r3, #31
 8008ef4:	d403      	bmi.n	8008efe <__lo0bits+0x4e>
 8008ef6:	085b      	lsrs	r3, r3, #1
 8008ef8:	f100 0001 	add.w	r0, r0, #1
 8008efc:	d005      	beq.n	8008f0a <__lo0bits+0x5a>
 8008efe:	600b      	str	r3, [r1, #0]
 8008f00:	4770      	bx	lr
 8008f02:	4610      	mov	r0, r2
 8008f04:	e7e9      	b.n	8008eda <__lo0bits+0x2a>
 8008f06:	2000      	movs	r0, #0
 8008f08:	4770      	bx	lr
 8008f0a:	2020      	movs	r0, #32
 8008f0c:	4770      	bx	lr
	...

08008f10 <__i2b>:
 8008f10:	b510      	push	{r4, lr}
 8008f12:	460c      	mov	r4, r1
 8008f14:	2101      	movs	r1, #1
 8008f16:	f7ff ff03 	bl	8008d20 <_Balloc>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	b928      	cbnz	r0, 8008f2a <__i2b+0x1a>
 8008f1e:	4b05      	ldr	r3, [pc, #20]	; (8008f34 <__i2b+0x24>)
 8008f20:	4805      	ldr	r0, [pc, #20]	; (8008f38 <__i2b+0x28>)
 8008f22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008f26:	f000 fbf1 	bl	800970c <__assert_func>
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	6144      	str	r4, [r0, #20]
 8008f2e:	6103      	str	r3, [r0, #16]
 8008f30:	bd10      	pop	{r4, pc}
 8008f32:	bf00      	nop
 8008f34:	0800a63f 	.word	0x0800a63f
 8008f38:	0800a650 	.word	0x0800a650

08008f3c <__multiply>:
 8008f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f40:	4691      	mov	r9, r2
 8008f42:	690a      	ldr	r2, [r1, #16]
 8008f44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	bfb8      	it	lt
 8008f4c:	460b      	movlt	r3, r1
 8008f4e:	460c      	mov	r4, r1
 8008f50:	bfbc      	itt	lt
 8008f52:	464c      	movlt	r4, r9
 8008f54:	4699      	movlt	r9, r3
 8008f56:	6927      	ldr	r7, [r4, #16]
 8008f58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008f5c:	68a3      	ldr	r3, [r4, #8]
 8008f5e:	6861      	ldr	r1, [r4, #4]
 8008f60:	eb07 060a 	add.w	r6, r7, sl
 8008f64:	42b3      	cmp	r3, r6
 8008f66:	b085      	sub	sp, #20
 8008f68:	bfb8      	it	lt
 8008f6a:	3101      	addlt	r1, #1
 8008f6c:	f7ff fed8 	bl	8008d20 <_Balloc>
 8008f70:	b930      	cbnz	r0, 8008f80 <__multiply+0x44>
 8008f72:	4602      	mov	r2, r0
 8008f74:	4b44      	ldr	r3, [pc, #272]	; (8009088 <__multiply+0x14c>)
 8008f76:	4845      	ldr	r0, [pc, #276]	; (800908c <__multiply+0x150>)
 8008f78:	f240 115d 	movw	r1, #349	; 0x15d
 8008f7c:	f000 fbc6 	bl	800970c <__assert_func>
 8008f80:	f100 0514 	add.w	r5, r0, #20
 8008f84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f88:	462b      	mov	r3, r5
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	4543      	cmp	r3, r8
 8008f8e:	d321      	bcc.n	8008fd4 <__multiply+0x98>
 8008f90:	f104 0314 	add.w	r3, r4, #20
 8008f94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008f98:	f109 0314 	add.w	r3, r9, #20
 8008f9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008fa0:	9202      	str	r2, [sp, #8]
 8008fa2:	1b3a      	subs	r2, r7, r4
 8008fa4:	3a15      	subs	r2, #21
 8008fa6:	f022 0203 	bic.w	r2, r2, #3
 8008faa:	3204      	adds	r2, #4
 8008fac:	f104 0115 	add.w	r1, r4, #21
 8008fb0:	428f      	cmp	r7, r1
 8008fb2:	bf38      	it	cc
 8008fb4:	2204      	movcc	r2, #4
 8008fb6:	9201      	str	r2, [sp, #4]
 8008fb8:	9a02      	ldr	r2, [sp, #8]
 8008fba:	9303      	str	r3, [sp, #12]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d80c      	bhi.n	8008fda <__multiply+0x9e>
 8008fc0:	2e00      	cmp	r6, #0
 8008fc2:	dd03      	ble.n	8008fcc <__multiply+0x90>
 8008fc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d05a      	beq.n	8009082 <__multiply+0x146>
 8008fcc:	6106      	str	r6, [r0, #16]
 8008fce:	b005      	add	sp, #20
 8008fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd4:	f843 2b04 	str.w	r2, [r3], #4
 8008fd8:	e7d8      	b.n	8008f8c <__multiply+0x50>
 8008fda:	f8b3 a000 	ldrh.w	sl, [r3]
 8008fde:	f1ba 0f00 	cmp.w	sl, #0
 8008fe2:	d024      	beq.n	800902e <__multiply+0xf2>
 8008fe4:	f104 0e14 	add.w	lr, r4, #20
 8008fe8:	46a9      	mov	r9, r5
 8008fea:	f04f 0c00 	mov.w	ip, #0
 8008fee:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008ff2:	f8d9 1000 	ldr.w	r1, [r9]
 8008ff6:	fa1f fb82 	uxth.w	fp, r2
 8008ffa:	b289      	uxth	r1, r1
 8008ffc:	fb0a 110b 	mla	r1, sl, fp, r1
 8009000:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009004:	f8d9 2000 	ldr.w	r2, [r9]
 8009008:	4461      	add	r1, ip
 800900a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800900e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009012:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009016:	b289      	uxth	r1, r1
 8009018:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800901c:	4577      	cmp	r7, lr
 800901e:	f849 1b04 	str.w	r1, [r9], #4
 8009022:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009026:	d8e2      	bhi.n	8008fee <__multiply+0xb2>
 8009028:	9a01      	ldr	r2, [sp, #4]
 800902a:	f845 c002 	str.w	ip, [r5, r2]
 800902e:	9a03      	ldr	r2, [sp, #12]
 8009030:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009034:	3304      	adds	r3, #4
 8009036:	f1b9 0f00 	cmp.w	r9, #0
 800903a:	d020      	beq.n	800907e <__multiply+0x142>
 800903c:	6829      	ldr	r1, [r5, #0]
 800903e:	f104 0c14 	add.w	ip, r4, #20
 8009042:	46ae      	mov	lr, r5
 8009044:	f04f 0a00 	mov.w	sl, #0
 8009048:	f8bc b000 	ldrh.w	fp, [ip]
 800904c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009050:	fb09 220b 	mla	r2, r9, fp, r2
 8009054:	4492      	add	sl, r2
 8009056:	b289      	uxth	r1, r1
 8009058:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800905c:	f84e 1b04 	str.w	r1, [lr], #4
 8009060:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009064:	f8be 1000 	ldrh.w	r1, [lr]
 8009068:	0c12      	lsrs	r2, r2, #16
 800906a:	fb09 1102 	mla	r1, r9, r2, r1
 800906e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009072:	4567      	cmp	r7, ip
 8009074:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009078:	d8e6      	bhi.n	8009048 <__multiply+0x10c>
 800907a:	9a01      	ldr	r2, [sp, #4]
 800907c:	50a9      	str	r1, [r5, r2]
 800907e:	3504      	adds	r5, #4
 8009080:	e79a      	b.n	8008fb8 <__multiply+0x7c>
 8009082:	3e01      	subs	r6, #1
 8009084:	e79c      	b.n	8008fc0 <__multiply+0x84>
 8009086:	bf00      	nop
 8009088:	0800a63f 	.word	0x0800a63f
 800908c:	0800a650 	.word	0x0800a650

08009090 <__pow5mult>:
 8009090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009094:	4615      	mov	r5, r2
 8009096:	f012 0203 	ands.w	r2, r2, #3
 800909a:	4606      	mov	r6, r0
 800909c:	460f      	mov	r7, r1
 800909e:	d007      	beq.n	80090b0 <__pow5mult+0x20>
 80090a0:	4c25      	ldr	r4, [pc, #148]	; (8009138 <__pow5mult+0xa8>)
 80090a2:	3a01      	subs	r2, #1
 80090a4:	2300      	movs	r3, #0
 80090a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090aa:	f7ff fe9b 	bl	8008de4 <__multadd>
 80090ae:	4607      	mov	r7, r0
 80090b0:	10ad      	asrs	r5, r5, #2
 80090b2:	d03d      	beq.n	8009130 <__pow5mult+0xa0>
 80090b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80090b6:	b97c      	cbnz	r4, 80090d8 <__pow5mult+0x48>
 80090b8:	2010      	movs	r0, #16
 80090ba:	f7fe f9f5 	bl	80074a8 <malloc>
 80090be:	4602      	mov	r2, r0
 80090c0:	6270      	str	r0, [r6, #36]	; 0x24
 80090c2:	b928      	cbnz	r0, 80090d0 <__pow5mult+0x40>
 80090c4:	4b1d      	ldr	r3, [pc, #116]	; (800913c <__pow5mult+0xac>)
 80090c6:	481e      	ldr	r0, [pc, #120]	; (8009140 <__pow5mult+0xb0>)
 80090c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80090cc:	f000 fb1e 	bl	800970c <__assert_func>
 80090d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090d4:	6004      	str	r4, [r0, #0]
 80090d6:	60c4      	str	r4, [r0, #12]
 80090d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80090dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090e0:	b94c      	cbnz	r4, 80090f6 <__pow5mult+0x66>
 80090e2:	f240 2171 	movw	r1, #625	; 0x271
 80090e6:	4630      	mov	r0, r6
 80090e8:	f7ff ff12 	bl	8008f10 <__i2b>
 80090ec:	2300      	movs	r3, #0
 80090ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80090f2:	4604      	mov	r4, r0
 80090f4:	6003      	str	r3, [r0, #0]
 80090f6:	f04f 0900 	mov.w	r9, #0
 80090fa:	07eb      	lsls	r3, r5, #31
 80090fc:	d50a      	bpl.n	8009114 <__pow5mult+0x84>
 80090fe:	4639      	mov	r1, r7
 8009100:	4622      	mov	r2, r4
 8009102:	4630      	mov	r0, r6
 8009104:	f7ff ff1a 	bl	8008f3c <__multiply>
 8009108:	4639      	mov	r1, r7
 800910a:	4680      	mov	r8, r0
 800910c:	4630      	mov	r0, r6
 800910e:	f7ff fe47 	bl	8008da0 <_Bfree>
 8009112:	4647      	mov	r7, r8
 8009114:	106d      	asrs	r5, r5, #1
 8009116:	d00b      	beq.n	8009130 <__pow5mult+0xa0>
 8009118:	6820      	ldr	r0, [r4, #0]
 800911a:	b938      	cbnz	r0, 800912c <__pow5mult+0x9c>
 800911c:	4622      	mov	r2, r4
 800911e:	4621      	mov	r1, r4
 8009120:	4630      	mov	r0, r6
 8009122:	f7ff ff0b 	bl	8008f3c <__multiply>
 8009126:	6020      	str	r0, [r4, #0]
 8009128:	f8c0 9000 	str.w	r9, [r0]
 800912c:	4604      	mov	r4, r0
 800912e:	e7e4      	b.n	80090fa <__pow5mult+0x6a>
 8009130:	4638      	mov	r0, r7
 8009132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009136:	bf00      	nop
 8009138:	0800a7a0 	.word	0x0800a7a0
 800913c:	0800a5cd 	.word	0x0800a5cd
 8009140:	0800a650 	.word	0x0800a650

08009144 <__lshift>:
 8009144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009148:	460c      	mov	r4, r1
 800914a:	6849      	ldr	r1, [r1, #4]
 800914c:	6923      	ldr	r3, [r4, #16]
 800914e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009152:	68a3      	ldr	r3, [r4, #8]
 8009154:	4607      	mov	r7, r0
 8009156:	4691      	mov	r9, r2
 8009158:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800915c:	f108 0601 	add.w	r6, r8, #1
 8009160:	42b3      	cmp	r3, r6
 8009162:	db0b      	blt.n	800917c <__lshift+0x38>
 8009164:	4638      	mov	r0, r7
 8009166:	f7ff fddb 	bl	8008d20 <_Balloc>
 800916a:	4605      	mov	r5, r0
 800916c:	b948      	cbnz	r0, 8009182 <__lshift+0x3e>
 800916e:	4602      	mov	r2, r0
 8009170:	4b2a      	ldr	r3, [pc, #168]	; (800921c <__lshift+0xd8>)
 8009172:	482b      	ldr	r0, [pc, #172]	; (8009220 <__lshift+0xdc>)
 8009174:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009178:	f000 fac8 	bl	800970c <__assert_func>
 800917c:	3101      	adds	r1, #1
 800917e:	005b      	lsls	r3, r3, #1
 8009180:	e7ee      	b.n	8009160 <__lshift+0x1c>
 8009182:	2300      	movs	r3, #0
 8009184:	f100 0114 	add.w	r1, r0, #20
 8009188:	f100 0210 	add.w	r2, r0, #16
 800918c:	4618      	mov	r0, r3
 800918e:	4553      	cmp	r3, sl
 8009190:	db37      	blt.n	8009202 <__lshift+0xbe>
 8009192:	6920      	ldr	r0, [r4, #16]
 8009194:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009198:	f104 0314 	add.w	r3, r4, #20
 800919c:	f019 091f 	ands.w	r9, r9, #31
 80091a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80091a8:	d02f      	beq.n	800920a <__lshift+0xc6>
 80091aa:	f1c9 0e20 	rsb	lr, r9, #32
 80091ae:	468a      	mov	sl, r1
 80091b0:	f04f 0c00 	mov.w	ip, #0
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	fa02 f209 	lsl.w	r2, r2, r9
 80091ba:	ea42 020c 	orr.w	r2, r2, ip
 80091be:	f84a 2b04 	str.w	r2, [sl], #4
 80091c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80091c6:	4298      	cmp	r0, r3
 80091c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80091cc:	d8f2      	bhi.n	80091b4 <__lshift+0x70>
 80091ce:	1b03      	subs	r3, r0, r4
 80091d0:	3b15      	subs	r3, #21
 80091d2:	f023 0303 	bic.w	r3, r3, #3
 80091d6:	3304      	adds	r3, #4
 80091d8:	f104 0215 	add.w	r2, r4, #21
 80091dc:	4290      	cmp	r0, r2
 80091de:	bf38      	it	cc
 80091e0:	2304      	movcc	r3, #4
 80091e2:	f841 c003 	str.w	ip, [r1, r3]
 80091e6:	f1bc 0f00 	cmp.w	ip, #0
 80091ea:	d001      	beq.n	80091f0 <__lshift+0xac>
 80091ec:	f108 0602 	add.w	r6, r8, #2
 80091f0:	3e01      	subs	r6, #1
 80091f2:	4638      	mov	r0, r7
 80091f4:	612e      	str	r6, [r5, #16]
 80091f6:	4621      	mov	r1, r4
 80091f8:	f7ff fdd2 	bl	8008da0 <_Bfree>
 80091fc:	4628      	mov	r0, r5
 80091fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009202:	f842 0f04 	str.w	r0, [r2, #4]!
 8009206:	3301      	adds	r3, #1
 8009208:	e7c1      	b.n	800918e <__lshift+0x4a>
 800920a:	3904      	subs	r1, #4
 800920c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009210:	f841 2f04 	str.w	r2, [r1, #4]!
 8009214:	4298      	cmp	r0, r3
 8009216:	d8f9      	bhi.n	800920c <__lshift+0xc8>
 8009218:	e7ea      	b.n	80091f0 <__lshift+0xac>
 800921a:	bf00      	nop
 800921c:	0800a63f 	.word	0x0800a63f
 8009220:	0800a650 	.word	0x0800a650

08009224 <__mcmp>:
 8009224:	b530      	push	{r4, r5, lr}
 8009226:	6902      	ldr	r2, [r0, #16]
 8009228:	690c      	ldr	r4, [r1, #16]
 800922a:	1b12      	subs	r2, r2, r4
 800922c:	d10e      	bne.n	800924c <__mcmp+0x28>
 800922e:	f100 0314 	add.w	r3, r0, #20
 8009232:	3114      	adds	r1, #20
 8009234:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009238:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800923c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009240:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009244:	42a5      	cmp	r5, r4
 8009246:	d003      	beq.n	8009250 <__mcmp+0x2c>
 8009248:	d305      	bcc.n	8009256 <__mcmp+0x32>
 800924a:	2201      	movs	r2, #1
 800924c:	4610      	mov	r0, r2
 800924e:	bd30      	pop	{r4, r5, pc}
 8009250:	4283      	cmp	r3, r0
 8009252:	d3f3      	bcc.n	800923c <__mcmp+0x18>
 8009254:	e7fa      	b.n	800924c <__mcmp+0x28>
 8009256:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800925a:	e7f7      	b.n	800924c <__mcmp+0x28>

0800925c <__mdiff>:
 800925c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009260:	460c      	mov	r4, r1
 8009262:	4606      	mov	r6, r0
 8009264:	4611      	mov	r1, r2
 8009266:	4620      	mov	r0, r4
 8009268:	4690      	mov	r8, r2
 800926a:	f7ff ffdb 	bl	8009224 <__mcmp>
 800926e:	1e05      	subs	r5, r0, #0
 8009270:	d110      	bne.n	8009294 <__mdiff+0x38>
 8009272:	4629      	mov	r1, r5
 8009274:	4630      	mov	r0, r6
 8009276:	f7ff fd53 	bl	8008d20 <_Balloc>
 800927a:	b930      	cbnz	r0, 800928a <__mdiff+0x2e>
 800927c:	4b3a      	ldr	r3, [pc, #232]	; (8009368 <__mdiff+0x10c>)
 800927e:	4602      	mov	r2, r0
 8009280:	f240 2132 	movw	r1, #562	; 0x232
 8009284:	4839      	ldr	r0, [pc, #228]	; (800936c <__mdiff+0x110>)
 8009286:	f000 fa41 	bl	800970c <__assert_func>
 800928a:	2301      	movs	r3, #1
 800928c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009290:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009294:	bfa4      	itt	ge
 8009296:	4643      	movge	r3, r8
 8009298:	46a0      	movge	r8, r4
 800929a:	4630      	mov	r0, r6
 800929c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80092a0:	bfa6      	itte	ge
 80092a2:	461c      	movge	r4, r3
 80092a4:	2500      	movge	r5, #0
 80092a6:	2501      	movlt	r5, #1
 80092a8:	f7ff fd3a 	bl	8008d20 <_Balloc>
 80092ac:	b920      	cbnz	r0, 80092b8 <__mdiff+0x5c>
 80092ae:	4b2e      	ldr	r3, [pc, #184]	; (8009368 <__mdiff+0x10c>)
 80092b0:	4602      	mov	r2, r0
 80092b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80092b6:	e7e5      	b.n	8009284 <__mdiff+0x28>
 80092b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80092bc:	6926      	ldr	r6, [r4, #16]
 80092be:	60c5      	str	r5, [r0, #12]
 80092c0:	f104 0914 	add.w	r9, r4, #20
 80092c4:	f108 0514 	add.w	r5, r8, #20
 80092c8:	f100 0e14 	add.w	lr, r0, #20
 80092cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80092d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80092d4:	f108 0210 	add.w	r2, r8, #16
 80092d8:	46f2      	mov	sl, lr
 80092da:	2100      	movs	r1, #0
 80092dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80092e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80092e4:	fa1f f883 	uxth.w	r8, r3
 80092e8:	fa11 f18b 	uxtah	r1, r1, fp
 80092ec:	0c1b      	lsrs	r3, r3, #16
 80092ee:	eba1 0808 	sub.w	r8, r1, r8
 80092f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80092f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80092fa:	fa1f f888 	uxth.w	r8, r8
 80092fe:	1419      	asrs	r1, r3, #16
 8009300:	454e      	cmp	r6, r9
 8009302:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009306:	f84a 3b04 	str.w	r3, [sl], #4
 800930a:	d8e7      	bhi.n	80092dc <__mdiff+0x80>
 800930c:	1b33      	subs	r3, r6, r4
 800930e:	3b15      	subs	r3, #21
 8009310:	f023 0303 	bic.w	r3, r3, #3
 8009314:	3304      	adds	r3, #4
 8009316:	3415      	adds	r4, #21
 8009318:	42a6      	cmp	r6, r4
 800931a:	bf38      	it	cc
 800931c:	2304      	movcc	r3, #4
 800931e:	441d      	add	r5, r3
 8009320:	4473      	add	r3, lr
 8009322:	469e      	mov	lr, r3
 8009324:	462e      	mov	r6, r5
 8009326:	4566      	cmp	r6, ip
 8009328:	d30e      	bcc.n	8009348 <__mdiff+0xec>
 800932a:	f10c 0203 	add.w	r2, ip, #3
 800932e:	1b52      	subs	r2, r2, r5
 8009330:	f022 0203 	bic.w	r2, r2, #3
 8009334:	3d03      	subs	r5, #3
 8009336:	45ac      	cmp	ip, r5
 8009338:	bf38      	it	cc
 800933a:	2200      	movcc	r2, #0
 800933c:	441a      	add	r2, r3
 800933e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009342:	b17b      	cbz	r3, 8009364 <__mdiff+0x108>
 8009344:	6107      	str	r7, [r0, #16]
 8009346:	e7a3      	b.n	8009290 <__mdiff+0x34>
 8009348:	f856 8b04 	ldr.w	r8, [r6], #4
 800934c:	fa11 f288 	uxtah	r2, r1, r8
 8009350:	1414      	asrs	r4, r2, #16
 8009352:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009356:	b292      	uxth	r2, r2
 8009358:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800935c:	f84e 2b04 	str.w	r2, [lr], #4
 8009360:	1421      	asrs	r1, r4, #16
 8009362:	e7e0      	b.n	8009326 <__mdiff+0xca>
 8009364:	3f01      	subs	r7, #1
 8009366:	e7ea      	b.n	800933e <__mdiff+0xe2>
 8009368:	0800a63f 	.word	0x0800a63f
 800936c:	0800a650 	.word	0x0800a650

08009370 <__d2b>:
 8009370:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009374:	4689      	mov	r9, r1
 8009376:	2101      	movs	r1, #1
 8009378:	ec57 6b10 	vmov	r6, r7, d0
 800937c:	4690      	mov	r8, r2
 800937e:	f7ff fccf 	bl	8008d20 <_Balloc>
 8009382:	4604      	mov	r4, r0
 8009384:	b930      	cbnz	r0, 8009394 <__d2b+0x24>
 8009386:	4602      	mov	r2, r0
 8009388:	4b25      	ldr	r3, [pc, #148]	; (8009420 <__d2b+0xb0>)
 800938a:	4826      	ldr	r0, [pc, #152]	; (8009424 <__d2b+0xb4>)
 800938c:	f240 310a 	movw	r1, #778	; 0x30a
 8009390:	f000 f9bc 	bl	800970c <__assert_func>
 8009394:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009398:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800939c:	bb35      	cbnz	r5, 80093ec <__d2b+0x7c>
 800939e:	2e00      	cmp	r6, #0
 80093a0:	9301      	str	r3, [sp, #4]
 80093a2:	d028      	beq.n	80093f6 <__d2b+0x86>
 80093a4:	4668      	mov	r0, sp
 80093a6:	9600      	str	r6, [sp, #0]
 80093a8:	f7ff fd82 	bl	8008eb0 <__lo0bits>
 80093ac:	9900      	ldr	r1, [sp, #0]
 80093ae:	b300      	cbz	r0, 80093f2 <__d2b+0x82>
 80093b0:	9a01      	ldr	r2, [sp, #4]
 80093b2:	f1c0 0320 	rsb	r3, r0, #32
 80093b6:	fa02 f303 	lsl.w	r3, r2, r3
 80093ba:	430b      	orrs	r3, r1
 80093bc:	40c2      	lsrs	r2, r0
 80093be:	6163      	str	r3, [r4, #20]
 80093c0:	9201      	str	r2, [sp, #4]
 80093c2:	9b01      	ldr	r3, [sp, #4]
 80093c4:	61a3      	str	r3, [r4, #24]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	bf14      	ite	ne
 80093ca:	2202      	movne	r2, #2
 80093cc:	2201      	moveq	r2, #1
 80093ce:	6122      	str	r2, [r4, #16]
 80093d0:	b1d5      	cbz	r5, 8009408 <__d2b+0x98>
 80093d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80093d6:	4405      	add	r5, r0
 80093d8:	f8c9 5000 	str.w	r5, [r9]
 80093dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80093e0:	f8c8 0000 	str.w	r0, [r8]
 80093e4:	4620      	mov	r0, r4
 80093e6:	b003      	add	sp, #12
 80093e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093f0:	e7d5      	b.n	800939e <__d2b+0x2e>
 80093f2:	6161      	str	r1, [r4, #20]
 80093f4:	e7e5      	b.n	80093c2 <__d2b+0x52>
 80093f6:	a801      	add	r0, sp, #4
 80093f8:	f7ff fd5a 	bl	8008eb0 <__lo0bits>
 80093fc:	9b01      	ldr	r3, [sp, #4]
 80093fe:	6163      	str	r3, [r4, #20]
 8009400:	2201      	movs	r2, #1
 8009402:	6122      	str	r2, [r4, #16]
 8009404:	3020      	adds	r0, #32
 8009406:	e7e3      	b.n	80093d0 <__d2b+0x60>
 8009408:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800940c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009410:	f8c9 0000 	str.w	r0, [r9]
 8009414:	6918      	ldr	r0, [r3, #16]
 8009416:	f7ff fd2b 	bl	8008e70 <__hi0bits>
 800941a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800941e:	e7df      	b.n	80093e0 <__d2b+0x70>
 8009420:	0800a63f 	.word	0x0800a63f
 8009424:	0800a650 	.word	0x0800a650

08009428 <_calloc_r>:
 8009428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800942a:	fba1 2402 	umull	r2, r4, r1, r2
 800942e:	b94c      	cbnz	r4, 8009444 <_calloc_r+0x1c>
 8009430:	4611      	mov	r1, r2
 8009432:	9201      	str	r2, [sp, #4]
 8009434:	f7fe f8bc 	bl	80075b0 <_malloc_r>
 8009438:	9a01      	ldr	r2, [sp, #4]
 800943a:	4605      	mov	r5, r0
 800943c:	b930      	cbnz	r0, 800944c <_calloc_r+0x24>
 800943e:	4628      	mov	r0, r5
 8009440:	b003      	add	sp, #12
 8009442:	bd30      	pop	{r4, r5, pc}
 8009444:	220c      	movs	r2, #12
 8009446:	6002      	str	r2, [r0, #0]
 8009448:	2500      	movs	r5, #0
 800944a:	e7f8      	b.n	800943e <_calloc_r+0x16>
 800944c:	4621      	mov	r1, r4
 800944e:	f7fe f83b 	bl	80074c8 <memset>
 8009452:	e7f4      	b.n	800943e <_calloc_r+0x16>

08009454 <__ssputs_r>:
 8009454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009458:	688e      	ldr	r6, [r1, #8]
 800945a:	429e      	cmp	r6, r3
 800945c:	4682      	mov	sl, r0
 800945e:	460c      	mov	r4, r1
 8009460:	4690      	mov	r8, r2
 8009462:	461f      	mov	r7, r3
 8009464:	d838      	bhi.n	80094d8 <__ssputs_r+0x84>
 8009466:	898a      	ldrh	r2, [r1, #12]
 8009468:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800946c:	d032      	beq.n	80094d4 <__ssputs_r+0x80>
 800946e:	6825      	ldr	r5, [r4, #0]
 8009470:	6909      	ldr	r1, [r1, #16]
 8009472:	eba5 0901 	sub.w	r9, r5, r1
 8009476:	6965      	ldr	r5, [r4, #20]
 8009478:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800947c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009480:	3301      	adds	r3, #1
 8009482:	444b      	add	r3, r9
 8009484:	106d      	asrs	r5, r5, #1
 8009486:	429d      	cmp	r5, r3
 8009488:	bf38      	it	cc
 800948a:	461d      	movcc	r5, r3
 800948c:	0553      	lsls	r3, r2, #21
 800948e:	d531      	bpl.n	80094f4 <__ssputs_r+0xa0>
 8009490:	4629      	mov	r1, r5
 8009492:	f7fe f88d 	bl	80075b0 <_malloc_r>
 8009496:	4606      	mov	r6, r0
 8009498:	b950      	cbnz	r0, 80094b0 <__ssputs_r+0x5c>
 800949a:	230c      	movs	r3, #12
 800949c:	f8ca 3000 	str.w	r3, [sl]
 80094a0:	89a3      	ldrh	r3, [r4, #12]
 80094a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094a6:	81a3      	strh	r3, [r4, #12]
 80094a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094b0:	6921      	ldr	r1, [r4, #16]
 80094b2:	464a      	mov	r2, r9
 80094b4:	f7ff fc1a 	bl	8008cec <memcpy>
 80094b8:	89a3      	ldrh	r3, [r4, #12]
 80094ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094c2:	81a3      	strh	r3, [r4, #12]
 80094c4:	6126      	str	r6, [r4, #16]
 80094c6:	6165      	str	r5, [r4, #20]
 80094c8:	444e      	add	r6, r9
 80094ca:	eba5 0509 	sub.w	r5, r5, r9
 80094ce:	6026      	str	r6, [r4, #0]
 80094d0:	60a5      	str	r5, [r4, #8]
 80094d2:	463e      	mov	r6, r7
 80094d4:	42be      	cmp	r6, r7
 80094d6:	d900      	bls.n	80094da <__ssputs_r+0x86>
 80094d8:	463e      	mov	r6, r7
 80094da:	6820      	ldr	r0, [r4, #0]
 80094dc:	4632      	mov	r2, r6
 80094de:	4641      	mov	r1, r8
 80094e0:	f000 f959 	bl	8009796 <memmove>
 80094e4:	68a3      	ldr	r3, [r4, #8]
 80094e6:	1b9b      	subs	r3, r3, r6
 80094e8:	60a3      	str	r3, [r4, #8]
 80094ea:	6823      	ldr	r3, [r4, #0]
 80094ec:	4433      	add	r3, r6
 80094ee:	6023      	str	r3, [r4, #0]
 80094f0:	2000      	movs	r0, #0
 80094f2:	e7db      	b.n	80094ac <__ssputs_r+0x58>
 80094f4:	462a      	mov	r2, r5
 80094f6:	f000 f968 	bl	80097ca <_realloc_r>
 80094fa:	4606      	mov	r6, r0
 80094fc:	2800      	cmp	r0, #0
 80094fe:	d1e1      	bne.n	80094c4 <__ssputs_r+0x70>
 8009500:	6921      	ldr	r1, [r4, #16]
 8009502:	4650      	mov	r0, sl
 8009504:	f7fd ffe8 	bl	80074d8 <_free_r>
 8009508:	e7c7      	b.n	800949a <__ssputs_r+0x46>
	...

0800950c <_svfiprintf_r>:
 800950c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009510:	4698      	mov	r8, r3
 8009512:	898b      	ldrh	r3, [r1, #12]
 8009514:	061b      	lsls	r3, r3, #24
 8009516:	b09d      	sub	sp, #116	; 0x74
 8009518:	4607      	mov	r7, r0
 800951a:	460d      	mov	r5, r1
 800951c:	4614      	mov	r4, r2
 800951e:	d50e      	bpl.n	800953e <_svfiprintf_r+0x32>
 8009520:	690b      	ldr	r3, [r1, #16]
 8009522:	b963      	cbnz	r3, 800953e <_svfiprintf_r+0x32>
 8009524:	2140      	movs	r1, #64	; 0x40
 8009526:	f7fe f843 	bl	80075b0 <_malloc_r>
 800952a:	6028      	str	r0, [r5, #0]
 800952c:	6128      	str	r0, [r5, #16]
 800952e:	b920      	cbnz	r0, 800953a <_svfiprintf_r+0x2e>
 8009530:	230c      	movs	r3, #12
 8009532:	603b      	str	r3, [r7, #0]
 8009534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009538:	e0d1      	b.n	80096de <_svfiprintf_r+0x1d2>
 800953a:	2340      	movs	r3, #64	; 0x40
 800953c:	616b      	str	r3, [r5, #20]
 800953e:	2300      	movs	r3, #0
 8009540:	9309      	str	r3, [sp, #36]	; 0x24
 8009542:	2320      	movs	r3, #32
 8009544:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009548:	f8cd 800c 	str.w	r8, [sp, #12]
 800954c:	2330      	movs	r3, #48	; 0x30
 800954e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80096f8 <_svfiprintf_r+0x1ec>
 8009552:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009556:	f04f 0901 	mov.w	r9, #1
 800955a:	4623      	mov	r3, r4
 800955c:	469a      	mov	sl, r3
 800955e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009562:	b10a      	cbz	r2, 8009568 <_svfiprintf_r+0x5c>
 8009564:	2a25      	cmp	r2, #37	; 0x25
 8009566:	d1f9      	bne.n	800955c <_svfiprintf_r+0x50>
 8009568:	ebba 0b04 	subs.w	fp, sl, r4
 800956c:	d00b      	beq.n	8009586 <_svfiprintf_r+0x7a>
 800956e:	465b      	mov	r3, fp
 8009570:	4622      	mov	r2, r4
 8009572:	4629      	mov	r1, r5
 8009574:	4638      	mov	r0, r7
 8009576:	f7ff ff6d 	bl	8009454 <__ssputs_r>
 800957a:	3001      	adds	r0, #1
 800957c:	f000 80aa 	beq.w	80096d4 <_svfiprintf_r+0x1c8>
 8009580:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009582:	445a      	add	r2, fp
 8009584:	9209      	str	r2, [sp, #36]	; 0x24
 8009586:	f89a 3000 	ldrb.w	r3, [sl]
 800958a:	2b00      	cmp	r3, #0
 800958c:	f000 80a2 	beq.w	80096d4 <_svfiprintf_r+0x1c8>
 8009590:	2300      	movs	r3, #0
 8009592:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009596:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800959a:	f10a 0a01 	add.w	sl, sl, #1
 800959e:	9304      	str	r3, [sp, #16]
 80095a0:	9307      	str	r3, [sp, #28]
 80095a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095a6:	931a      	str	r3, [sp, #104]	; 0x68
 80095a8:	4654      	mov	r4, sl
 80095aa:	2205      	movs	r2, #5
 80095ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095b0:	4851      	ldr	r0, [pc, #324]	; (80096f8 <_svfiprintf_r+0x1ec>)
 80095b2:	f7f6 fe35 	bl	8000220 <memchr>
 80095b6:	9a04      	ldr	r2, [sp, #16]
 80095b8:	b9d8      	cbnz	r0, 80095f2 <_svfiprintf_r+0xe6>
 80095ba:	06d0      	lsls	r0, r2, #27
 80095bc:	bf44      	itt	mi
 80095be:	2320      	movmi	r3, #32
 80095c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095c4:	0711      	lsls	r1, r2, #28
 80095c6:	bf44      	itt	mi
 80095c8:	232b      	movmi	r3, #43	; 0x2b
 80095ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095ce:	f89a 3000 	ldrb.w	r3, [sl]
 80095d2:	2b2a      	cmp	r3, #42	; 0x2a
 80095d4:	d015      	beq.n	8009602 <_svfiprintf_r+0xf6>
 80095d6:	9a07      	ldr	r2, [sp, #28]
 80095d8:	4654      	mov	r4, sl
 80095da:	2000      	movs	r0, #0
 80095dc:	f04f 0c0a 	mov.w	ip, #10
 80095e0:	4621      	mov	r1, r4
 80095e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095e6:	3b30      	subs	r3, #48	; 0x30
 80095e8:	2b09      	cmp	r3, #9
 80095ea:	d94e      	bls.n	800968a <_svfiprintf_r+0x17e>
 80095ec:	b1b0      	cbz	r0, 800961c <_svfiprintf_r+0x110>
 80095ee:	9207      	str	r2, [sp, #28]
 80095f0:	e014      	b.n	800961c <_svfiprintf_r+0x110>
 80095f2:	eba0 0308 	sub.w	r3, r0, r8
 80095f6:	fa09 f303 	lsl.w	r3, r9, r3
 80095fa:	4313      	orrs	r3, r2
 80095fc:	9304      	str	r3, [sp, #16]
 80095fe:	46a2      	mov	sl, r4
 8009600:	e7d2      	b.n	80095a8 <_svfiprintf_r+0x9c>
 8009602:	9b03      	ldr	r3, [sp, #12]
 8009604:	1d19      	adds	r1, r3, #4
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	9103      	str	r1, [sp, #12]
 800960a:	2b00      	cmp	r3, #0
 800960c:	bfbb      	ittet	lt
 800960e:	425b      	neglt	r3, r3
 8009610:	f042 0202 	orrlt.w	r2, r2, #2
 8009614:	9307      	strge	r3, [sp, #28]
 8009616:	9307      	strlt	r3, [sp, #28]
 8009618:	bfb8      	it	lt
 800961a:	9204      	strlt	r2, [sp, #16]
 800961c:	7823      	ldrb	r3, [r4, #0]
 800961e:	2b2e      	cmp	r3, #46	; 0x2e
 8009620:	d10c      	bne.n	800963c <_svfiprintf_r+0x130>
 8009622:	7863      	ldrb	r3, [r4, #1]
 8009624:	2b2a      	cmp	r3, #42	; 0x2a
 8009626:	d135      	bne.n	8009694 <_svfiprintf_r+0x188>
 8009628:	9b03      	ldr	r3, [sp, #12]
 800962a:	1d1a      	adds	r2, r3, #4
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	9203      	str	r2, [sp, #12]
 8009630:	2b00      	cmp	r3, #0
 8009632:	bfb8      	it	lt
 8009634:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009638:	3402      	adds	r4, #2
 800963a:	9305      	str	r3, [sp, #20]
 800963c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009708 <_svfiprintf_r+0x1fc>
 8009640:	7821      	ldrb	r1, [r4, #0]
 8009642:	2203      	movs	r2, #3
 8009644:	4650      	mov	r0, sl
 8009646:	f7f6 fdeb 	bl	8000220 <memchr>
 800964a:	b140      	cbz	r0, 800965e <_svfiprintf_r+0x152>
 800964c:	2340      	movs	r3, #64	; 0x40
 800964e:	eba0 000a 	sub.w	r0, r0, sl
 8009652:	fa03 f000 	lsl.w	r0, r3, r0
 8009656:	9b04      	ldr	r3, [sp, #16]
 8009658:	4303      	orrs	r3, r0
 800965a:	3401      	adds	r4, #1
 800965c:	9304      	str	r3, [sp, #16]
 800965e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009662:	4826      	ldr	r0, [pc, #152]	; (80096fc <_svfiprintf_r+0x1f0>)
 8009664:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009668:	2206      	movs	r2, #6
 800966a:	f7f6 fdd9 	bl	8000220 <memchr>
 800966e:	2800      	cmp	r0, #0
 8009670:	d038      	beq.n	80096e4 <_svfiprintf_r+0x1d8>
 8009672:	4b23      	ldr	r3, [pc, #140]	; (8009700 <_svfiprintf_r+0x1f4>)
 8009674:	bb1b      	cbnz	r3, 80096be <_svfiprintf_r+0x1b2>
 8009676:	9b03      	ldr	r3, [sp, #12]
 8009678:	3307      	adds	r3, #7
 800967a:	f023 0307 	bic.w	r3, r3, #7
 800967e:	3308      	adds	r3, #8
 8009680:	9303      	str	r3, [sp, #12]
 8009682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009684:	4433      	add	r3, r6
 8009686:	9309      	str	r3, [sp, #36]	; 0x24
 8009688:	e767      	b.n	800955a <_svfiprintf_r+0x4e>
 800968a:	fb0c 3202 	mla	r2, ip, r2, r3
 800968e:	460c      	mov	r4, r1
 8009690:	2001      	movs	r0, #1
 8009692:	e7a5      	b.n	80095e0 <_svfiprintf_r+0xd4>
 8009694:	2300      	movs	r3, #0
 8009696:	3401      	adds	r4, #1
 8009698:	9305      	str	r3, [sp, #20]
 800969a:	4619      	mov	r1, r3
 800969c:	f04f 0c0a 	mov.w	ip, #10
 80096a0:	4620      	mov	r0, r4
 80096a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096a6:	3a30      	subs	r2, #48	; 0x30
 80096a8:	2a09      	cmp	r2, #9
 80096aa:	d903      	bls.n	80096b4 <_svfiprintf_r+0x1a8>
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d0c5      	beq.n	800963c <_svfiprintf_r+0x130>
 80096b0:	9105      	str	r1, [sp, #20]
 80096b2:	e7c3      	b.n	800963c <_svfiprintf_r+0x130>
 80096b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80096b8:	4604      	mov	r4, r0
 80096ba:	2301      	movs	r3, #1
 80096bc:	e7f0      	b.n	80096a0 <_svfiprintf_r+0x194>
 80096be:	ab03      	add	r3, sp, #12
 80096c0:	9300      	str	r3, [sp, #0]
 80096c2:	462a      	mov	r2, r5
 80096c4:	4b0f      	ldr	r3, [pc, #60]	; (8009704 <_svfiprintf_r+0x1f8>)
 80096c6:	a904      	add	r1, sp, #16
 80096c8:	4638      	mov	r0, r7
 80096ca:	f7fe f885 	bl	80077d8 <_printf_float>
 80096ce:	1c42      	adds	r2, r0, #1
 80096d0:	4606      	mov	r6, r0
 80096d2:	d1d6      	bne.n	8009682 <_svfiprintf_r+0x176>
 80096d4:	89ab      	ldrh	r3, [r5, #12]
 80096d6:	065b      	lsls	r3, r3, #25
 80096d8:	f53f af2c 	bmi.w	8009534 <_svfiprintf_r+0x28>
 80096dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096de:	b01d      	add	sp, #116	; 0x74
 80096e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096e4:	ab03      	add	r3, sp, #12
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	462a      	mov	r2, r5
 80096ea:	4b06      	ldr	r3, [pc, #24]	; (8009704 <_svfiprintf_r+0x1f8>)
 80096ec:	a904      	add	r1, sp, #16
 80096ee:	4638      	mov	r0, r7
 80096f0:	f7fe fb16 	bl	8007d20 <_printf_i>
 80096f4:	e7eb      	b.n	80096ce <_svfiprintf_r+0x1c2>
 80096f6:	bf00      	nop
 80096f8:	0800a7ac 	.word	0x0800a7ac
 80096fc:	0800a7b6 	.word	0x0800a7b6
 8009700:	080077d9 	.word	0x080077d9
 8009704:	08009455 	.word	0x08009455
 8009708:	0800a7b2 	.word	0x0800a7b2

0800970c <__assert_func>:
 800970c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800970e:	4614      	mov	r4, r2
 8009710:	461a      	mov	r2, r3
 8009712:	4b09      	ldr	r3, [pc, #36]	; (8009738 <__assert_func+0x2c>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4605      	mov	r5, r0
 8009718:	68d8      	ldr	r0, [r3, #12]
 800971a:	b14c      	cbz	r4, 8009730 <__assert_func+0x24>
 800971c:	4b07      	ldr	r3, [pc, #28]	; (800973c <__assert_func+0x30>)
 800971e:	9100      	str	r1, [sp, #0]
 8009720:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009724:	4906      	ldr	r1, [pc, #24]	; (8009740 <__assert_func+0x34>)
 8009726:	462b      	mov	r3, r5
 8009728:	f000 f80e 	bl	8009748 <fiprintf>
 800972c:	f000 faa4 	bl	8009c78 <abort>
 8009730:	4b04      	ldr	r3, [pc, #16]	; (8009744 <__assert_func+0x38>)
 8009732:	461c      	mov	r4, r3
 8009734:	e7f3      	b.n	800971e <__assert_func+0x12>
 8009736:	bf00      	nop
 8009738:	200023d4 	.word	0x200023d4
 800973c:	0800a7bd 	.word	0x0800a7bd
 8009740:	0800a7ca 	.word	0x0800a7ca
 8009744:	0800a7f8 	.word	0x0800a7f8

08009748 <fiprintf>:
 8009748:	b40e      	push	{r1, r2, r3}
 800974a:	b503      	push	{r0, r1, lr}
 800974c:	4601      	mov	r1, r0
 800974e:	ab03      	add	r3, sp, #12
 8009750:	4805      	ldr	r0, [pc, #20]	; (8009768 <fiprintf+0x20>)
 8009752:	f853 2b04 	ldr.w	r2, [r3], #4
 8009756:	6800      	ldr	r0, [r0, #0]
 8009758:	9301      	str	r3, [sp, #4]
 800975a:	f000 f88f 	bl	800987c <_vfiprintf_r>
 800975e:	b002      	add	sp, #8
 8009760:	f85d eb04 	ldr.w	lr, [sp], #4
 8009764:	b003      	add	sp, #12
 8009766:	4770      	bx	lr
 8009768:	200023d4 	.word	0x200023d4

0800976c <__retarget_lock_init_recursive>:
 800976c:	4770      	bx	lr

0800976e <__retarget_lock_acquire_recursive>:
 800976e:	4770      	bx	lr

08009770 <__retarget_lock_release_recursive>:
 8009770:	4770      	bx	lr

08009772 <__ascii_mbtowc>:
 8009772:	b082      	sub	sp, #8
 8009774:	b901      	cbnz	r1, 8009778 <__ascii_mbtowc+0x6>
 8009776:	a901      	add	r1, sp, #4
 8009778:	b142      	cbz	r2, 800978c <__ascii_mbtowc+0x1a>
 800977a:	b14b      	cbz	r3, 8009790 <__ascii_mbtowc+0x1e>
 800977c:	7813      	ldrb	r3, [r2, #0]
 800977e:	600b      	str	r3, [r1, #0]
 8009780:	7812      	ldrb	r2, [r2, #0]
 8009782:	1e10      	subs	r0, r2, #0
 8009784:	bf18      	it	ne
 8009786:	2001      	movne	r0, #1
 8009788:	b002      	add	sp, #8
 800978a:	4770      	bx	lr
 800978c:	4610      	mov	r0, r2
 800978e:	e7fb      	b.n	8009788 <__ascii_mbtowc+0x16>
 8009790:	f06f 0001 	mvn.w	r0, #1
 8009794:	e7f8      	b.n	8009788 <__ascii_mbtowc+0x16>

08009796 <memmove>:
 8009796:	4288      	cmp	r0, r1
 8009798:	b510      	push	{r4, lr}
 800979a:	eb01 0402 	add.w	r4, r1, r2
 800979e:	d902      	bls.n	80097a6 <memmove+0x10>
 80097a0:	4284      	cmp	r4, r0
 80097a2:	4623      	mov	r3, r4
 80097a4:	d807      	bhi.n	80097b6 <memmove+0x20>
 80097a6:	1e43      	subs	r3, r0, #1
 80097a8:	42a1      	cmp	r1, r4
 80097aa:	d008      	beq.n	80097be <memmove+0x28>
 80097ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097b4:	e7f8      	b.n	80097a8 <memmove+0x12>
 80097b6:	4402      	add	r2, r0
 80097b8:	4601      	mov	r1, r0
 80097ba:	428a      	cmp	r2, r1
 80097bc:	d100      	bne.n	80097c0 <memmove+0x2a>
 80097be:	bd10      	pop	{r4, pc}
 80097c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097c4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097c8:	e7f7      	b.n	80097ba <memmove+0x24>

080097ca <_realloc_r>:
 80097ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ce:	4680      	mov	r8, r0
 80097d0:	4614      	mov	r4, r2
 80097d2:	460e      	mov	r6, r1
 80097d4:	b921      	cbnz	r1, 80097e0 <_realloc_r+0x16>
 80097d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097da:	4611      	mov	r1, r2
 80097dc:	f7fd bee8 	b.w	80075b0 <_malloc_r>
 80097e0:	b92a      	cbnz	r2, 80097ee <_realloc_r+0x24>
 80097e2:	f7fd fe79 	bl	80074d8 <_free_r>
 80097e6:	4625      	mov	r5, r4
 80097e8:	4628      	mov	r0, r5
 80097ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097ee:	f000 fc67 	bl	800a0c0 <_malloc_usable_size_r>
 80097f2:	4284      	cmp	r4, r0
 80097f4:	4607      	mov	r7, r0
 80097f6:	d802      	bhi.n	80097fe <_realloc_r+0x34>
 80097f8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80097fc:	d812      	bhi.n	8009824 <_realloc_r+0x5a>
 80097fe:	4621      	mov	r1, r4
 8009800:	4640      	mov	r0, r8
 8009802:	f7fd fed5 	bl	80075b0 <_malloc_r>
 8009806:	4605      	mov	r5, r0
 8009808:	2800      	cmp	r0, #0
 800980a:	d0ed      	beq.n	80097e8 <_realloc_r+0x1e>
 800980c:	42bc      	cmp	r4, r7
 800980e:	4622      	mov	r2, r4
 8009810:	4631      	mov	r1, r6
 8009812:	bf28      	it	cs
 8009814:	463a      	movcs	r2, r7
 8009816:	f7ff fa69 	bl	8008cec <memcpy>
 800981a:	4631      	mov	r1, r6
 800981c:	4640      	mov	r0, r8
 800981e:	f7fd fe5b 	bl	80074d8 <_free_r>
 8009822:	e7e1      	b.n	80097e8 <_realloc_r+0x1e>
 8009824:	4635      	mov	r5, r6
 8009826:	e7df      	b.n	80097e8 <_realloc_r+0x1e>

08009828 <__sfputc_r>:
 8009828:	6893      	ldr	r3, [r2, #8]
 800982a:	3b01      	subs	r3, #1
 800982c:	2b00      	cmp	r3, #0
 800982e:	b410      	push	{r4}
 8009830:	6093      	str	r3, [r2, #8]
 8009832:	da08      	bge.n	8009846 <__sfputc_r+0x1e>
 8009834:	6994      	ldr	r4, [r2, #24]
 8009836:	42a3      	cmp	r3, r4
 8009838:	db01      	blt.n	800983e <__sfputc_r+0x16>
 800983a:	290a      	cmp	r1, #10
 800983c:	d103      	bne.n	8009846 <__sfputc_r+0x1e>
 800983e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009842:	f000 b94b 	b.w	8009adc <__swbuf_r>
 8009846:	6813      	ldr	r3, [r2, #0]
 8009848:	1c58      	adds	r0, r3, #1
 800984a:	6010      	str	r0, [r2, #0]
 800984c:	7019      	strb	r1, [r3, #0]
 800984e:	4608      	mov	r0, r1
 8009850:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009854:	4770      	bx	lr

08009856 <__sfputs_r>:
 8009856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009858:	4606      	mov	r6, r0
 800985a:	460f      	mov	r7, r1
 800985c:	4614      	mov	r4, r2
 800985e:	18d5      	adds	r5, r2, r3
 8009860:	42ac      	cmp	r4, r5
 8009862:	d101      	bne.n	8009868 <__sfputs_r+0x12>
 8009864:	2000      	movs	r0, #0
 8009866:	e007      	b.n	8009878 <__sfputs_r+0x22>
 8009868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800986c:	463a      	mov	r2, r7
 800986e:	4630      	mov	r0, r6
 8009870:	f7ff ffda 	bl	8009828 <__sfputc_r>
 8009874:	1c43      	adds	r3, r0, #1
 8009876:	d1f3      	bne.n	8009860 <__sfputs_r+0xa>
 8009878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800987c <_vfiprintf_r>:
 800987c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009880:	460d      	mov	r5, r1
 8009882:	b09d      	sub	sp, #116	; 0x74
 8009884:	4614      	mov	r4, r2
 8009886:	4698      	mov	r8, r3
 8009888:	4606      	mov	r6, r0
 800988a:	b118      	cbz	r0, 8009894 <_vfiprintf_r+0x18>
 800988c:	6983      	ldr	r3, [r0, #24]
 800988e:	b90b      	cbnz	r3, 8009894 <_vfiprintf_r+0x18>
 8009890:	f000 fb14 	bl	8009ebc <__sinit>
 8009894:	4b89      	ldr	r3, [pc, #548]	; (8009abc <_vfiprintf_r+0x240>)
 8009896:	429d      	cmp	r5, r3
 8009898:	d11b      	bne.n	80098d2 <_vfiprintf_r+0x56>
 800989a:	6875      	ldr	r5, [r6, #4]
 800989c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800989e:	07d9      	lsls	r1, r3, #31
 80098a0:	d405      	bmi.n	80098ae <_vfiprintf_r+0x32>
 80098a2:	89ab      	ldrh	r3, [r5, #12]
 80098a4:	059a      	lsls	r2, r3, #22
 80098a6:	d402      	bmi.n	80098ae <_vfiprintf_r+0x32>
 80098a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098aa:	f7ff ff60 	bl	800976e <__retarget_lock_acquire_recursive>
 80098ae:	89ab      	ldrh	r3, [r5, #12]
 80098b0:	071b      	lsls	r3, r3, #28
 80098b2:	d501      	bpl.n	80098b8 <_vfiprintf_r+0x3c>
 80098b4:	692b      	ldr	r3, [r5, #16]
 80098b6:	b9eb      	cbnz	r3, 80098f4 <_vfiprintf_r+0x78>
 80098b8:	4629      	mov	r1, r5
 80098ba:	4630      	mov	r0, r6
 80098bc:	f000 f96e 	bl	8009b9c <__swsetup_r>
 80098c0:	b1c0      	cbz	r0, 80098f4 <_vfiprintf_r+0x78>
 80098c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098c4:	07dc      	lsls	r4, r3, #31
 80098c6:	d50e      	bpl.n	80098e6 <_vfiprintf_r+0x6a>
 80098c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098cc:	b01d      	add	sp, #116	; 0x74
 80098ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d2:	4b7b      	ldr	r3, [pc, #492]	; (8009ac0 <_vfiprintf_r+0x244>)
 80098d4:	429d      	cmp	r5, r3
 80098d6:	d101      	bne.n	80098dc <_vfiprintf_r+0x60>
 80098d8:	68b5      	ldr	r5, [r6, #8]
 80098da:	e7df      	b.n	800989c <_vfiprintf_r+0x20>
 80098dc:	4b79      	ldr	r3, [pc, #484]	; (8009ac4 <_vfiprintf_r+0x248>)
 80098de:	429d      	cmp	r5, r3
 80098e0:	bf08      	it	eq
 80098e2:	68f5      	ldreq	r5, [r6, #12]
 80098e4:	e7da      	b.n	800989c <_vfiprintf_r+0x20>
 80098e6:	89ab      	ldrh	r3, [r5, #12]
 80098e8:	0598      	lsls	r0, r3, #22
 80098ea:	d4ed      	bmi.n	80098c8 <_vfiprintf_r+0x4c>
 80098ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098ee:	f7ff ff3f 	bl	8009770 <__retarget_lock_release_recursive>
 80098f2:	e7e9      	b.n	80098c8 <_vfiprintf_r+0x4c>
 80098f4:	2300      	movs	r3, #0
 80098f6:	9309      	str	r3, [sp, #36]	; 0x24
 80098f8:	2320      	movs	r3, #32
 80098fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009902:	2330      	movs	r3, #48	; 0x30
 8009904:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ac8 <_vfiprintf_r+0x24c>
 8009908:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800990c:	f04f 0901 	mov.w	r9, #1
 8009910:	4623      	mov	r3, r4
 8009912:	469a      	mov	sl, r3
 8009914:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009918:	b10a      	cbz	r2, 800991e <_vfiprintf_r+0xa2>
 800991a:	2a25      	cmp	r2, #37	; 0x25
 800991c:	d1f9      	bne.n	8009912 <_vfiprintf_r+0x96>
 800991e:	ebba 0b04 	subs.w	fp, sl, r4
 8009922:	d00b      	beq.n	800993c <_vfiprintf_r+0xc0>
 8009924:	465b      	mov	r3, fp
 8009926:	4622      	mov	r2, r4
 8009928:	4629      	mov	r1, r5
 800992a:	4630      	mov	r0, r6
 800992c:	f7ff ff93 	bl	8009856 <__sfputs_r>
 8009930:	3001      	adds	r0, #1
 8009932:	f000 80aa 	beq.w	8009a8a <_vfiprintf_r+0x20e>
 8009936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009938:	445a      	add	r2, fp
 800993a:	9209      	str	r2, [sp, #36]	; 0x24
 800993c:	f89a 3000 	ldrb.w	r3, [sl]
 8009940:	2b00      	cmp	r3, #0
 8009942:	f000 80a2 	beq.w	8009a8a <_vfiprintf_r+0x20e>
 8009946:	2300      	movs	r3, #0
 8009948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800994c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009950:	f10a 0a01 	add.w	sl, sl, #1
 8009954:	9304      	str	r3, [sp, #16]
 8009956:	9307      	str	r3, [sp, #28]
 8009958:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800995c:	931a      	str	r3, [sp, #104]	; 0x68
 800995e:	4654      	mov	r4, sl
 8009960:	2205      	movs	r2, #5
 8009962:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009966:	4858      	ldr	r0, [pc, #352]	; (8009ac8 <_vfiprintf_r+0x24c>)
 8009968:	f7f6 fc5a 	bl	8000220 <memchr>
 800996c:	9a04      	ldr	r2, [sp, #16]
 800996e:	b9d8      	cbnz	r0, 80099a8 <_vfiprintf_r+0x12c>
 8009970:	06d1      	lsls	r1, r2, #27
 8009972:	bf44      	itt	mi
 8009974:	2320      	movmi	r3, #32
 8009976:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800997a:	0713      	lsls	r3, r2, #28
 800997c:	bf44      	itt	mi
 800997e:	232b      	movmi	r3, #43	; 0x2b
 8009980:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009984:	f89a 3000 	ldrb.w	r3, [sl]
 8009988:	2b2a      	cmp	r3, #42	; 0x2a
 800998a:	d015      	beq.n	80099b8 <_vfiprintf_r+0x13c>
 800998c:	9a07      	ldr	r2, [sp, #28]
 800998e:	4654      	mov	r4, sl
 8009990:	2000      	movs	r0, #0
 8009992:	f04f 0c0a 	mov.w	ip, #10
 8009996:	4621      	mov	r1, r4
 8009998:	f811 3b01 	ldrb.w	r3, [r1], #1
 800999c:	3b30      	subs	r3, #48	; 0x30
 800999e:	2b09      	cmp	r3, #9
 80099a0:	d94e      	bls.n	8009a40 <_vfiprintf_r+0x1c4>
 80099a2:	b1b0      	cbz	r0, 80099d2 <_vfiprintf_r+0x156>
 80099a4:	9207      	str	r2, [sp, #28]
 80099a6:	e014      	b.n	80099d2 <_vfiprintf_r+0x156>
 80099a8:	eba0 0308 	sub.w	r3, r0, r8
 80099ac:	fa09 f303 	lsl.w	r3, r9, r3
 80099b0:	4313      	orrs	r3, r2
 80099b2:	9304      	str	r3, [sp, #16]
 80099b4:	46a2      	mov	sl, r4
 80099b6:	e7d2      	b.n	800995e <_vfiprintf_r+0xe2>
 80099b8:	9b03      	ldr	r3, [sp, #12]
 80099ba:	1d19      	adds	r1, r3, #4
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	9103      	str	r1, [sp, #12]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	bfbb      	ittet	lt
 80099c4:	425b      	neglt	r3, r3
 80099c6:	f042 0202 	orrlt.w	r2, r2, #2
 80099ca:	9307      	strge	r3, [sp, #28]
 80099cc:	9307      	strlt	r3, [sp, #28]
 80099ce:	bfb8      	it	lt
 80099d0:	9204      	strlt	r2, [sp, #16]
 80099d2:	7823      	ldrb	r3, [r4, #0]
 80099d4:	2b2e      	cmp	r3, #46	; 0x2e
 80099d6:	d10c      	bne.n	80099f2 <_vfiprintf_r+0x176>
 80099d8:	7863      	ldrb	r3, [r4, #1]
 80099da:	2b2a      	cmp	r3, #42	; 0x2a
 80099dc:	d135      	bne.n	8009a4a <_vfiprintf_r+0x1ce>
 80099de:	9b03      	ldr	r3, [sp, #12]
 80099e0:	1d1a      	adds	r2, r3, #4
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	9203      	str	r2, [sp, #12]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	bfb8      	it	lt
 80099ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80099ee:	3402      	adds	r4, #2
 80099f0:	9305      	str	r3, [sp, #20]
 80099f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009ad8 <_vfiprintf_r+0x25c>
 80099f6:	7821      	ldrb	r1, [r4, #0]
 80099f8:	2203      	movs	r2, #3
 80099fa:	4650      	mov	r0, sl
 80099fc:	f7f6 fc10 	bl	8000220 <memchr>
 8009a00:	b140      	cbz	r0, 8009a14 <_vfiprintf_r+0x198>
 8009a02:	2340      	movs	r3, #64	; 0x40
 8009a04:	eba0 000a 	sub.w	r0, r0, sl
 8009a08:	fa03 f000 	lsl.w	r0, r3, r0
 8009a0c:	9b04      	ldr	r3, [sp, #16]
 8009a0e:	4303      	orrs	r3, r0
 8009a10:	3401      	adds	r4, #1
 8009a12:	9304      	str	r3, [sp, #16]
 8009a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a18:	482c      	ldr	r0, [pc, #176]	; (8009acc <_vfiprintf_r+0x250>)
 8009a1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a1e:	2206      	movs	r2, #6
 8009a20:	f7f6 fbfe 	bl	8000220 <memchr>
 8009a24:	2800      	cmp	r0, #0
 8009a26:	d03f      	beq.n	8009aa8 <_vfiprintf_r+0x22c>
 8009a28:	4b29      	ldr	r3, [pc, #164]	; (8009ad0 <_vfiprintf_r+0x254>)
 8009a2a:	bb1b      	cbnz	r3, 8009a74 <_vfiprintf_r+0x1f8>
 8009a2c:	9b03      	ldr	r3, [sp, #12]
 8009a2e:	3307      	adds	r3, #7
 8009a30:	f023 0307 	bic.w	r3, r3, #7
 8009a34:	3308      	adds	r3, #8
 8009a36:	9303      	str	r3, [sp, #12]
 8009a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a3a:	443b      	add	r3, r7
 8009a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a3e:	e767      	b.n	8009910 <_vfiprintf_r+0x94>
 8009a40:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a44:	460c      	mov	r4, r1
 8009a46:	2001      	movs	r0, #1
 8009a48:	e7a5      	b.n	8009996 <_vfiprintf_r+0x11a>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	3401      	adds	r4, #1
 8009a4e:	9305      	str	r3, [sp, #20]
 8009a50:	4619      	mov	r1, r3
 8009a52:	f04f 0c0a 	mov.w	ip, #10
 8009a56:	4620      	mov	r0, r4
 8009a58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a5c:	3a30      	subs	r2, #48	; 0x30
 8009a5e:	2a09      	cmp	r2, #9
 8009a60:	d903      	bls.n	8009a6a <_vfiprintf_r+0x1ee>
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d0c5      	beq.n	80099f2 <_vfiprintf_r+0x176>
 8009a66:	9105      	str	r1, [sp, #20]
 8009a68:	e7c3      	b.n	80099f2 <_vfiprintf_r+0x176>
 8009a6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a6e:	4604      	mov	r4, r0
 8009a70:	2301      	movs	r3, #1
 8009a72:	e7f0      	b.n	8009a56 <_vfiprintf_r+0x1da>
 8009a74:	ab03      	add	r3, sp, #12
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	462a      	mov	r2, r5
 8009a7a:	4b16      	ldr	r3, [pc, #88]	; (8009ad4 <_vfiprintf_r+0x258>)
 8009a7c:	a904      	add	r1, sp, #16
 8009a7e:	4630      	mov	r0, r6
 8009a80:	f7fd feaa 	bl	80077d8 <_printf_float>
 8009a84:	4607      	mov	r7, r0
 8009a86:	1c78      	adds	r0, r7, #1
 8009a88:	d1d6      	bne.n	8009a38 <_vfiprintf_r+0x1bc>
 8009a8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a8c:	07d9      	lsls	r1, r3, #31
 8009a8e:	d405      	bmi.n	8009a9c <_vfiprintf_r+0x220>
 8009a90:	89ab      	ldrh	r3, [r5, #12]
 8009a92:	059a      	lsls	r2, r3, #22
 8009a94:	d402      	bmi.n	8009a9c <_vfiprintf_r+0x220>
 8009a96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a98:	f7ff fe6a 	bl	8009770 <__retarget_lock_release_recursive>
 8009a9c:	89ab      	ldrh	r3, [r5, #12]
 8009a9e:	065b      	lsls	r3, r3, #25
 8009aa0:	f53f af12 	bmi.w	80098c8 <_vfiprintf_r+0x4c>
 8009aa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009aa6:	e711      	b.n	80098cc <_vfiprintf_r+0x50>
 8009aa8:	ab03      	add	r3, sp, #12
 8009aaa:	9300      	str	r3, [sp, #0]
 8009aac:	462a      	mov	r2, r5
 8009aae:	4b09      	ldr	r3, [pc, #36]	; (8009ad4 <_vfiprintf_r+0x258>)
 8009ab0:	a904      	add	r1, sp, #16
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	f7fe f934 	bl	8007d20 <_printf_i>
 8009ab8:	e7e4      	b.n	8009a84 <_vfiprintf_r+0x208>
 8009aba:	bf00      	nop
 8009abc:	0800a924 	.word	0x0800a924
 8009ac0:	0800a944 	.word	0x0800a944
 8009ac4:	0800a904 	.word	0x0800a904
 8009ac8:	0800a7ac 	.word	0x0800a7ac
 8009acc:	0800a7b6 	.word	0x0800a7b6
 8009ad0:	080077d9 	.word	0x080077d9
 8009ad4:	08009857 	.word	0x08009857
 8009ad8:	0800a7b2 	.word	0x0800a7b2

08009adc <__swbuf_r>:
 8009adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ade:	460e      	mov	r6, r1
 8009ae0:	4614      	mov	r4, r2
 8009ae2:	4605      	mov	r5, r0
 8009ae4:	b118      	cbz	r0, 8009aee <__swbuf_r+0x12>
 8009ae6:	6983      	ldr	r3, [r0, #24]
 8009ae8:	b90b      	cbnz	r3, 8009aee <__swbuf_r+0x12>
 8009aea:	f000 f9e7 	bl	8009ebc <__sinit>
 8009aee:	4b21      	ldr	r3, [pc, #132]	; (8009b74 <__swbuf_r+0x98>)
 8009af0:	429c      	cmp	r4, r3
 8009af2:	d12b      	bne.n	8009b4c <__swbuf_r+0x70>
 8009af4:	686c      	ldr	r4, [r5, #4]
 8009af6:	69a3      	ldr	r3, [r4, #24]
 8009af8:	60a3      	str	r3, [r4, #8]
 8009afa:	89a3      	ldrh	r3, [r4, #12]
 8009afc:	071a      	lsls	r2, r3, #28
 8009afe:	d52f      	bpl.n	8009b60 <__swbuf_r+0x84>
 8009b00:	6923      	ldr	r3, [r4, #16]
 8009b02:	b36b      	cbz	r3, 8009b60 <__swbuf_r+0x84>
 8009b04:	6923      	ldr	r3, [r4, #16]
 8009b06:	6820      	ldr	r0, [r4, #0]
 8009b08:	1ac0      	subs	r0, r0, r3
 8009b0a:	6963      	ldr	r3, [r4, #20]
 8009b0c:	b2f6      	uxtb	r6, r6
 8009b0e:	4283      	cmp	r3, r0
 8009b10:	4637      	mov	r7, r6
 8009b12:	dc04      	bgt.n	8009b1e <__swbuf_r+0x42>
 8009b14:	4621      	mov	r1, r4
 8009b16:	4628      	mov	r0, r5
 8009b18:	f000 f93c 	bl	8009d94 <_fflush_r>
 8009b1c:	bb30      	cbnz	r0, 8009b6c <__swbuf_r+0x90>
 8009b1e:	68a3      	ldr	r3, [r4, #8]
 8009b20:	3b01      	subs	r3, #1
 8009b22:	60a3      	str	r3, [r4, #8]
 8009b24:	6823      	ldr	r3, [r4, #0]
 8009b26:	1c5a      	adds	r2, r3, #1
 8009b28:	6022      	str	r2, [r4, #0]
 8009b2a:	701e      	strb	r6, [r3, #0]
 8009b2c:	6963      	ldr	r3, [r4, #20]
 8009b2e:	3001      	adds	r0, #1
 8009b30:	4283      	cmp	r3, r0
 8009b32:	d004      	beq.n	8009b3e <__swbuf_r+0x62>
 8009b34:	89a3      	ldrh	r3, [r4, #12]
 8009b36:	07db      	lsls	r3, r3, #31
 8009b38:	d506      	bpl.n	8009b48 <__swbuf_r+0x6c>
 8009b3a:	2e0a      	cmp	r6, #10
 8009b3c:	d104      	bne.n	8009b48 <__swbuf_r+0x6c>
 8009b3e:	4621      	mov	r1, r4
 8009b40:	4628      	mov	r0, r5
 8009b42:	f000 f927 	bl	8009d94 <_fflush_r>
 8009b46:	b988      	cbnz	r0, 8009b6c <__swbuf_r+0x90>
 8009b48:	4638      	mov	r0, r7
 8009b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b4c:	4b0a      	ldr	r3, [pc, #40]	; (8009b78 <__swbuf_r+0x9c>)
 8009b4e:	429c      	cmp	r4, r3
 8009b50:	d101      	bne.n	8009b56 <__swbuf_r+0x7a>
 8009b52:	68ac      	ldr	r4, [r5, #8]
 8009b54:	e7cf      	b.n	8009af6 <__swbuf_r+0x1a>
 8009b56:	4b09      	ldr	r3, [pc, #36]	; (8009b7c <__swbuf_r+0xa0>)
 8009b58:	429c      	cmp	r4, r3
 8009b5a:	bf08      	it	eq
 8009b5c:	68ec      	ldreq	r4, [r5, #12]
 8009b5e:	e7ca      	b.n	8009af6 <__swbuf_r+0x1a>
 8009b60:	4621      	mov	r1, r4
 8009b62:	4628      	mov	r0, r5
 8009b64:	f000 f81a 	bl	8009b9c <__swsetup_r>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	d0cb      	beq.n	8009b04 <__swbuf_r+0x28>
 8009b6c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009b70:	e7ea      	b.n	8009b48 <__swbuf_r+0x6c>
 8009b72:	bf00      	nop
 8009b74:	0800a924 	.word	0x0800a924
 8009b78:	0800a944 	.word	0x0800a944
 8009b7c:	0800a904 	.word	0x0800a904

08009b80 <__ascii_wctomb>:
 8009b80:	b149      	cbz	r1, 8009b96 <__ascii_wctomb+0x16>
 8009b82:	2aff      	cmp	r2, #255	; 0xff
 8009b84:	bf85      	ittet	hi
 8009b86:	238a      	movhi	r3, #138	; 0x8a
 8009b88:	6003      	strhi	r3, [r0, #0]
 8009b8a:	700a      	strbls	r2, [r1, #0]
 8009b8c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009b90:	bf98      	it	ls
 8009b92:	2001      	movls	r0, #1
 8009b94:	4770      	bx	lr
 8009b96:	4608      	mov	r0, r1
 8009b98:	4770      	bx	lr
	...

08009b9c <__swsetup_r>:
 8009b9c:	4b32      	ldr	r3, [pc, #200]	; (8009c68 <__swsetup_r+0xcc>)
 8009b9e:	b570      	push	{r4, r5, r6, lr}
 8009ba0:	681d      	ldr	r5, [r3, #0]
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	460c      	mov	r4, r1
 8009ba6:	b125      	cbz	r5, 8009bb2 <__swsetup_r+0x16>
 8009ba8:	69ab      	ldr	r3, [r5, #24]
 8009baa:	b913      	cbnz	r3, 8009bb2 <__swsetup_r+0x16>
 8009bac:	4628      	mov	r0, r5
 8009bae:	f000 f985 	bl	8009ebc <__sinit>
 8009bb2:	4b2e      	ldr	r3, [pc, #184]	; (8009c6c <__swsetup_r+0xd0>)
 8009bb4:	429c      	cmp	r4, r3
 8009bb6:	d10f      	bne.n	8009bd8 <__swsetup_r+0x3c>
 8009bb8:	686c      	ldr	r4, [r5, #4]
 8009bba:	89a3      	ldrh	r3, [r4, #12]
 8009bbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bc0:	0719      	lsls	r1, r3, #28
 8009bc2:	d42c      	bmi.n	8009c1e <__swsetup_r+0x82>
 8009bc4:	06dd      	lsls	r5, r3, #27
 8009bc6:	d411      	bmi.n	8009bec <__swsetup_r+0x50>
 8009bc8:	2309      	movs	r3, #9
 8009bca:	6033      	str	r3, [r6, #0]
 8009bcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009bd0:	81a3      	strh	r3, [r4, #12]
 8009bd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bd6:	e03e      	b.n	8009c56 <__swsetup_r+0xba>
 8009bd8:	4b25      	ldr	r3, [pc, #148]	; (8009c70 <__swsetup_r+0xd4>)
 8009bda:	429c      	cmp	r4, r3
 8009bdc:	d101      	bne.n	8009be2 <__swsetup_r+0x46>
 8009bde:	68ac      	ldr	r4, [r5, #8]
 8009be0:	e7eb      	b.n	8009bba <__swsetup_r+0x1e>
 8009be2:	4b24      	ldr	r3, [pc, #144]	; (8009c74 <__swsetup_r+0xd8>)
 8009be4:	429c      	cmp	r4, r3
 8009be6:	bf08      	it	eq
 8009be8:	68ec      	ldreq	r4, [r5, #12]
 8009bea:	e7e6      	b.n	8009bba <__swsetup_r+0x1e>
 8009bec:	0758      	lsls	r0, r3, #29
 8009bee:	d512      	bpl.n	8009c16 <__swsetup_r+0x7a>
 8009bf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bf2:	b141      	cbz	r1, 8009c06 <__swsetup_r+0x6a>
 8009bf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bf8:	4299      	cmp	r1, r3
 8009bfa:	d002      	beq.n	8009c02 <__swsetup_r+0x66>
 8009bfc:	4630      	mov	r0, r6
 8009bfe:	f7fd fc6b 	bl	80074d8 <_free_r>
 8009c02:	2300      	movs	r3, #0
 8009c04:	6363      	str	r3, [r4, #52]	; 0x34
 8009c06:	89a3      	ldrh	r3, [r4, #12]
 8009c08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c0c:	81a3      	strh	r3, [r4, #12]
 8009c0e:	2300      	movs	r3, #0
 8009c10:	6063      	str	r3, [r4, #4]
 8009c12:	6923      	ldr	r3, [r4, #16]
 8009c14:	6023      	str	r3, [r4, #0]
 8009c16:	89a3      	ldrh	r3, [r4, #12]
 8009c18:	f043 0308 	orr.w	r3, r3, #8
 8009c1c:	81a3      	strh	r3, [r4, #12]
 8009c1e:	6923      	ldr	r3, [r4, #16]
 8009c20:	b94b      	cbnz	r3, 8009c36 <__swsetup_r+0x9a>
 8009c22:	89a3      	ldrh	r3, [r4, #12]
 8009c24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c2c:	d003      	beq.n	8009c36 <__swsetup_r+0x9a>
 8009c2e:	4621      	mov	r1, r4
 8009c30:	4630      	mov	r0, r6
 8009c32:	f000 fa05 	bl	800a040 <__smakebuf_r>
 8009c36:	89a0      	ldrh	r0, [r4, #12]
 8009c38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c3c:	f010 0301 	ands.w	r3, r0, #1
 8009c40:	d00a      	beq.n	8009c58 <__swsetup_r+0xbc>
 8009c42:	2300      	movs	r3, #0
 8009c44:	60a3      	str	r3, [r4, #8]
 8009c46:	6963      	ldr	r3, [r4, #20]
 8009c48:	425b      	negs	r3, r3
 8009c4a:	61a3      	str	r3, [r4, #24]
 8009c4c:	6923      	ldr	r3, [r4, #16]
 8009c4e:	b943      	cbnz	r3, 8009c62 <__swsetup_r+0xc6>
 8009c50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c54:	d1ba      	bne.n	8009bcc <__swsetup_r+0x30>
 8009c56:	bd70      	pop	{r4, r5, r6, pc}
 8009c58:	0781      	lsls	r1, r0, #30
 8009c5a:	bf58      	it	pl
 8009c5c:	6963      	ldrpl	r3, [r4, #20]
 8009c5e:	60a3      	str	r3, [r4, #8]
 8009c60:	e7f4      	b.n	8009c4c <__swsetup_r+0xb0>
 8009c62:	2000      	movs	r0, #0
 8009c64:	e7f7      	b.n	8009c56 <__swsetup_r+0xba>
 8009c66:	bf00      	nop
 8009c68:	200023d4 	.word	0x200023d4
 8009c6c:	0800a924 	.word	0x0800a924
 8009c70:	0800a944 	.word	0x0800a944
 8009c74:	0800a904 	.word	0x0800a904

08009c78 <abort>:
 8009c78:	b508      	push	{r3, lr}
 8009c7a:	2006      	movs	r0, #6
 8009c7c:	f000 fa50 	bl	800a120 <raise>
 8009c80:	2001      	movs	r0, #1
 8009c82:	f7fa facd 	bl	8004220 <_exit>
	...

08009c88 <__sflush_r>:
 8009c88:	898a      	ldrh	r2, [r1, #12]
 8009c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c8e:	4605      	mov	r5, r0
 8009c90:	0710      	lsls	r0, r2, #28
 8009c92:	460c      	mov	r4, r1
 8009c94:	d458      	bmi.n	8009d48 <__sflush_r+0xc0>
 8009c96:	684b      	ldr	r3, [r1, #4]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	dc05      	bgt.n	8009ca8 <__sflush_r+0x20>
 8009c9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	dc02      	bgt.n	8009ca8 <__sflush_r+0x20>
 8009ca2:	2000      	movs	r0, #0
 8009ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ca8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009caa:	2e00      	cmp	r6, #0
 8009cac:	d0f9      	beq.n	8009ca2 <__sflush_r+0x1a>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009cb4:	682f      	ldr	r7, [r5, #0]
 8009cb6:	602b      	str	r3, [r5, #0]
 8009cb8:	d032      	beq.n	8009d20 <__sflush_r+0x98>
 8009cba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009cbc:	89a3      	ldrh	r3, [r4, #12]
 8009cbe:	075a      	lsls	r2, r3, #29
 8009cc0:	d505      	bpl.n	8009cce <__sflush_r+0x46>
 8009cc2:	6863      	ldr	r3, [r4, #4]
 8009cc4:	1ac0      	subs	r0, r0, r3
 8009cc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cc8:	b10b      	cbz	r3, 8009cce <__sflush_r+0x46>
 8009cca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ccc:	1ac0      	subs	r0, r0, r3
 8009cce:	2300      	movs	r3, #0
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cd4:	6a21      	ldr	r1, [r4, #32]
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	47b0      	blx	r6
 8009cda:	1c43      	adds	r3, r0, #1
 8009cdc:	89a3      	ldrh	r3, [r4, #12]
 8009cde:	d106      	bne.n	8009cee <__sflush_r+0x66>
 8009ce0:	6829      	ldr	r1, [r5, #0]
 8009ce2:	291d      	cmp	r1, #29
 8009ce4:	d82c      	bhi.n	8009d40 <__sflush_r+0xb8>
 8009ce6:	4a2a      	ldr	r2, [pc, #168]	; (8009d90 <__sflush_r+0x108>)
 8009ce8:	40ca      	lsrs	r2, r1
 8009cea:	07d6      	lsls	r6, r2, #31
 8009cec:	d528      	bpl.n	8009d40 <__sflush_r+0xb8>
 8009cee:	2200      	movs	r2, #0
 8009cf0:	6062      	str	r2, [r4, #4]
 8009cf2:	04d9      	lsls	r1, r3, #19
 8009cf4:	6922      	ldr	r2, [r4, #16]
 8009cf6:	6022      	str	r2, [r4, #0]
 8009cf8:	d504      	bpl.n	8009d04 <__sflush_r+0x7c>
 8009cfa:	1c42      	adds	r2, r0, #1
 8009cfc:	d101      	bne.n	8009d02 <__sflush_r+0x7a>
 8009cfe:	682b      	ldr	r3, [r5, #0]
 8009d00:	b903      	cbnz	r3, 8009d04 <__sflush_r+0x7c>
 8009d02:	6560      	str	r0, [r4, #84]	; 0x54
 8009d04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d06:	602f      	str	r7, [r5, #0]
 8009d08:	2900      	cmp	r1, #0
 8009d0a:	d0ca      	beq.n	8009ca2 <__sflush_r+0x1a>
 8009d0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d10:	4299      	cmp	r1, r3
 8009d12:	d002      	beq.n	8009d1a <__sflush_r+0x92>
 8009d14:	4628      	mov	r0, r5
 8009d16:	f7fd fbdf 	bl	80074d8 <_free_r>
 8009d1a:	2000      	movs	r0, #0
 8009d1c:	6360      	str	r0, [r4, #52]	; 0x34
 8009d1e:	e7c1      	b.n	8009ca4 <__sflush_r+0x1c>
 8009d20:	6a21      	ldr	r1, [r4, #32]
 8009d22:	2301      	movs	r3, #1
 8009d24:	4628      	mov	r0, r5
 8009d26:	47b0      	blx	r6
 8009d28:	1c41      	adds	r1, r0, #1
 8009d2a:	d1c7      	bne.n	8009cbc <__sflush_r+0x34>
 8009d2c:	682b      	ldr	r3, [r5, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d0c4      	beq.n	8009cbc <__sflush_r+0x34>
 8009d32:	2b1d      	cmp	r3, #29
 8009d34:	d001      	beq.n	8009d3a <__sflush_r+0xb2>
 8009d36:	2b16      	cmp	r3, #22
 8009d38:	d101      	bne.n	8009d3e <__sflush_r+0xb6>
 8009d3a:	602f      	str	r7, [r5, #0]
 8009d3c:	e7b1      	b.n	8009ca2 <__sflush_r+0x1a>
 8009d3e:	89a3      	ldrh	r3, [r4, #12]
 8009d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d44:	81a3      	strh	r3, [r4, #12]
 8009d46:	e7ad      	b.n	8009ca4 <__sflush_r+0x1c>
 8009d48:	690f      	ldr	r7, [r1, #16]
 8009d4a:	2f00      	cmp	r7, #0
 8009d4c:	d0a9      	beq.n	8009ca2 <__sflush_r+0x1a>
 8009d4e:	0793      	lsls	r3, r2, #30
 8009d50:	680e      	ldr	r6, [r1, #0]
 8009d52:	bf08      	it	eq
 8009d54:	694b      	ldreq	r3, [r1, #20]
 8009d56:	600f      	str	r7, [r1, #0]
 8009d58:	bf18      	it	ne
 8009d5a:	2300      	movne	r3, #0
 8009d5c:	eba6 0807 	sub.w	r8, r6, r7
 8009d60:	608b      	str	r3, [r1, #8]
 8009d62:	f1b8 0f00 	cmp.w	r8, #0
 8009d66:	dd9c      	ble.n	8009ca2 <__sflush_r+0x1a>
 8009d68:	6a21      	ldr	r1, [r4, #32]
 8009d6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d6c:	4643      	mov	r3, r8
 8009d6e:	463a      	mov	r2, r7
 8009d70:	4628      	mov	r0, r5
 8009d72:	47b0      	blx	r6
 8009d74:	2800      	cmp	r0, #0
 8009d76:	dc06      	bgt.n	8009d86 <__sflush_r+0xfe>
 8009d78:	89a3      	ldrh	r3, [r4, #12]
 8009d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d7e:	81a3      	strh	r3, [r4, #12]
 8009d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d84:	e78e      	b.n	8009ca4 <__sflush_r+0x1c>
 8009d86:	4407      	add	r7, r0
 8009d88:	eba8 0800 	sub.w	r8, r8, r0
 8009d8c:	e7e9      	b.n	8009d62 <__sflush_r+0xda>
 8009d8e:	bf00      	nop
 8009d90:	20400001 	.word	0x20400001

08009d94 <_fflush_r>:
 8009d94:	b538      	push	{r3, r4, r5, lr}
 8009d96:	690b      	ldr	r3, [r1, #16]
 8009d98:	4605      	mov	r5, r0
 8009d9a:	460c      	mov	r4, r1
 8009d9c:	b913      	cbnz	r3, 8009da4 <_fflush_r+0x10>
 8009d9e:	2500      	movs	r5, #0
 8009da0:	4628      	mov	r0, r5
 8009da2:	bd38      	pop	{r3, r4, r5, pc}
 8009da4:	b118      	cbz	r0, 8009dae <_fflush_r+0x1a>
 8009da6:	6983      	ldr	r3, [r0, #24]
 8009da8:	b90b      	cbnz	r3, 8009dae <_fflush_r+0x1a>
 8009daa:	f000 f887 	bl	8009ebc <__sinit>
 8009dae:	4b14      	ldr	r3, [pc, #80]	; (8009e00 <_fflush_r+0x6c>)
 8009db0:	429c      	cmp	r4, r3
 8009db2:	d11b      	bne.n	8009dec <_fflush_r+0x58>
 8009db4:	686c      	ldr	r4, [r5, #4]
 8009db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d0ef      	beq.n	8009d9e <_fflush_r+0xa>
 8009dbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009dc0:	07d0      	lsls	r0, r2, #31
 8009dc2:	d404      	bmi.n	8009dce <_fflush_r+0x3a>
 8009dc4:	0599      	lsls	r1, r3, #22
 8009dc6:	d402      	bmi.n	8009dce <_fflush_r+0x3a>
 8009dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dca:	f7ff fcd0 	bl	800976e <__retarget_lock_acquire_recursive>
 8009dce:	4628      	mov	r0, r5
 8009dd0:	4621      	mov	r1, r4
 8009dd2:	f7ff ff59 	bl	8009c88 <__sflush_r>
 8009dd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dd8:	07da      	lsls	r2, r3, #31
 8009dda:	4605      	mov	r5, r0
 8009ddc:	d4e0      	bmi.n	8009da0 <_fflush_r+0xc>
 8009dde:	89a3      	ldrh	r3, [r4, #12]
 8009de0:	059b      	lsls	r3, r3, #22
 8009de2:	d4dd      	bmi.n	8009da0 <_fflush_r+0xc>
 8009de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009de6:	f7ff fcc3 	bl	8009770 <__retarget_lock_release_recursive>
 8009dea:	e7d9      	b.n	8009da0 <_fflush_r+0xc>
 8009dec:	4b05      	ldr	r3, [pc, #20]	; (8009e04 <_fflush_r+0x70>)
 8009dee:	429c      	cmp	r4, r3
 8009df0:	d101      	bne.n	8009df6 <_fflush_r+0x62>
 8009df2:	68ac      	ldr	r4, [r5, #8]
 8009df4:	e7df      	b.n	8009db6 <_fflush_r+0x22>
 8009df6:	4b04      	ldr	r3, [pc, #16]	; (8009e08 <_fflush_r+0x74>)
 8009df8:	429c      	cmp	r4, r3
 8009dfa:	bf08      	it	eq
 8009dfc:	68ec      	ldreq	r4, [r5, #12]
 8009dfe:	e7da      	b.n	8009db6 <_fflush_r+0x22>
 8009e00:	0800a924 	.word	0x0800a924
 8009e04:	0800a944 	.word	0x0800a944
 8009e08:	0800a904 	.word	0x0800a904

08009e0c <std>:
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	b510      	push	{r4, lr}
 8009e10:	4604      	mov	r4, r0
 8009e12:	e9c0 3300 	strd	r3, r3, [r0]
 8009e16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e1a:	6083      	str	r3, [r0, #8]
 8009e1c:	8181      	strh	r1, [r0, #12]
 8009e1e:	6643      	str	r3, [r0, #100]	; 0x64
 8009e20:	81c2      	strh	r2, [r0, #14]
 8009e22:	6183      	str	r3, [r0, #24]
 8009e24:	4619      	mov	r1, r3
 8009e26:	2208      	movs	r2, #8
 8009e28:	305c      	adds	r0, #92	; 0x5c
 8009e2a:	f7fd fb4d 	bl	80074c8 <memset>
 8009e2e:	4b05      	ldr	r3, [pc, #20]	; (8009e44 <std+0x38>)
 8009e30:	6263      	str	r3, [r4, #36]	; 0x24
 8009e32:	4b05      	ldr	r3, [pc, #20]	; (8009e48 <std+0x3c>)
 8009e34:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e36:	4b05      	ldr	r3, [pc, #20]	; (8009e4c <std+0x40>)
 8009e38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e3a:	4b05      	ldr	r3, [pc, #20]	; (8009e50 <std+0x44>)
 8009e3c:	6224      	str	r4, [r4, #32]
 8009e3e:	6323      	str	r3, [r4, #48]	; 0x30
 8009e40:	bd10      	pop	{r4, pc}
 8009e42:	bf00      	nop
 8009e44:	0800a159 	.word	0x0800a159
 8009e48:	0800a17b 	.word	0x0800a17b
 8009e4c:	0800a1b3 	.word	0x0800a1b3
 8009e50:	0800a1d7 	.word	0x0800a1d7

08009e54 <_cleanup_r>:
 8009e54:	4901      	ldr	r1, [pc, #4]	; (8009e5c <_cleanup_r+0x8>)
 8009e56:	f000 b8af 	b.w	8009fb8 <_fwalk_reent>
 8009e5a:	bf00      	nop
 8009e5c:	08009d95 	.word	0x08009d95

08009e60 <__sfmoreglue>:
 8009e60:	b570      	push	{r4, r5, r6, lr}
 8009e62:	2268      	movs	r2, #104	; 0x68
 8009e64:	1e4d      	subs	r5, r1, #1
 8009e66:	4355      	muls	r5, r2
 8009e68:	460e      	mov	r6, r1
 8009e6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009e6e:	f7fd fb9f 	bl	80075b0 <_malloc_r>
 8009e72:	4604      	mov	r4, r0
 8009e74:	b140      	cbz	r0, 8009e88 <__sfmoreglue+0x28>
 8009e76:	2100      	movs	r1, #0
 8009e78:	e9c0 1600 	strd	r1, r6, [r0]
 8009e7c:	300c      	adds	r0, #12
 8009e7e:	60a0      	str	r0, [r4, #8]
 8009e80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009e84:	f7fd fb20 	bl	80074c8 <memset>
 8009e88:	4620      	mov	r0, r4
 8009e8a:	bd70      	pop	{r4, r5, r6, pc}

08009e8c <__sfp_lock_acquire>:
 8009e8c:	4801      	ldr	r0, [pc, #4]	; (8009e94 <__sfp_lock_acquire+0x8>)
 8009e8e:	f7ff bc6e 	b.w	800976e <__retarget_lock_acquire_recursive>
 8009e92:	bf00      	nop
 8009e94:	20002989 	.word	0x20002989

08009e98 <__sfp_lock_release>:
 8009e98:	4801      	ldr	r0, [pc, #4]	; (8009ea0 <__sfp_lock_release+0x8>)
 8009e9a:	f7ff bc69 	b.w	8009770 <__retarget_lock_release_recursive>
 8009e9e:	bf00      	nop
 8009ea0:	20002989 	.word	0x20002989

08009ea4 <__sinit_lock_acquire>:
 8009ea4:	4801      	ldr	r0, [pc, #4]	; (8009eac <__sinit_lock_acquire+0x8>)
 8009ea6:	f7ff bc62 	b.w	800976e <__retarget_lock_acquire_recursive>
 8009eaa:	bf00      	nop
 8009eac:	2000298a 	.word	0x2000298a

08009eb0 <__sinit_lock_release>:
 8009eb0:	4801      	ldr	r0, [pc, #4]	; (8009eb8 <__sinit_lock_release+0x8>)
 8009eb2:	f7ff bc5d 	b.w	8009770 <__retarget_lock_release_recursive>
 8009eb6:	bf00      	nop
 8009eb8:	2000298a 	.word	0x2000298a

08009ebc <__sinit>:
 8009ebc:	b510      	push	{r4, lr}
 8009ebe:	4604      	mov	r4, r0
 8009ec0:	f7ff fff0 	bl	8009ea4 <__sinit_lock_acquire>
 8009ec4:	69a3      	ldr	r3, [r4, #24]
 8009ec6:	b11b      	cbz	r3, 8009ed0 <__sinit+0x14>
 8009ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ecc:	f7ff bff0 	b.w	8009eb0 <__sinit_lock_release>
 8009ed0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ed4:	6523      	str	r3, [r4, #80]	; 0x50
 8009ed6:	4b13      	ldr	r3, [pc, #76]	; (8009f24 <__sinit+0x68>)
 8009ed8:	4a13      	ldr	r2, [pc, #76]	; (8009f28 <__sinit+0x6c>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	62a2      	str	r2, [r4, #40]	; 0x28
 8009ede:	42a3      	cmp	r3, r4
 8009ee0:	bf04      	itt	eq
 8009ee2:	2301      	moveq	r3, #1
 8009ee4:	61a3      	streq	r3, [r4, #24]
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	f000 f820 	bl	8009f2c <__sfp>
 8009eec:	6060      	str	r0, [r4, #4]
 8009eee:	4620      	mov	r0, r4
 8009ef0:	f000 f81c 	bl	8009f2c <__sfp>
 8009ef4:	60a0      	str	r0, [r4, #8]
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	f000 f818 	bl	8009f2c <__sfp>
 8009efc:	2200      	movs	r2, #0
 8009efe:	60e0      	str	r0, [r4, #12]
 8009f00:	2104      	movs	r1, #4
 8009f02:	6860      	ldr	r0, [r4, #4]
 8009f04:	f7ff ff82 	bl	8009e0c <std>
 8009f08:	68a0      	ldr	r0, [r4, #8]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	2109      	movs	r1, #9
 8009f0e:	f7ff ff7d 	bl	8009e0c <std>
 8009f12:	68e0      	ldr	r0, [r4, #12]
 8009f14:	2202      	movs	r2, #2
 8009f16:	2112      	movs	r1, #18
 8009f18:	f7ff ff78 	bl	8009e0c <std>
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	61a3      	str	r3, [r4, #24]
 8009f20:	e7d2      	b.n	8009ec8 <__sinit+0xc>
 8009f22:	bf00      	nop
 8009f24:	0800a588 	.word	0x0800a588
 8009f28:	08009e55 	.word	0x08009e55

08009f2c <__sfp>:
 8009f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2e:	4607      	mov	r7, r0
 8009f30:	f7ff ffac 	bl	8009e8c <__sfp_lock_acquire>
 8009f34:	4b1e      	ldr	r3, [pc, #120]	; (8009fb0 <__sfp+0x84>)
 8009f36:	681e      	ldr	r6, [r3, #0]
 8009f38:	69b3      	ldr	r3, [r6, #24]
 8009f3a:	b913      	cbnz	r3, 8009f42 <__sfp+0x16>
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	f7ff ffbd 	bl	8009ebc <__sinit>
 8009f42:	3648      	adds	r6, #72	; 0x48
 8009f44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	d503      	bpl.n	8009f54 <__sfp+0x28>
 8009f4c:	6833      	ldr	r3, [r6, #0]
 8009f4e:	b30b      	cbz	r3, 8009f94 <__sfp+0x68>
 8009f50:	6836      	ldr	r6, [r6, #0]
 8009f52:	e7f7      	b.n	8009f44 <__sfp+0x18>
 8009f54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f58:	b9d5      	cbnz	r5, 8009f90 <__sfp+0x64>
 8009f5a:	4b16      	ldr	r3, [pc, #88]	; (8009fb4 <__sfp+0x88>)
 8009f5c:	60e3      	str	r3, [r4, #12]
 8009f5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f62:	6665      	str	r5, [r4, #100]	; 0x64
 8009f64:	f7ff fc02 	bl	800976c <__retarget_lock_init_recursive>
 8009f68:	f7ff ff96 	bl	8009e98 <__sfp_lock_release>
 8009f6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009f70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009f74:	6025      	str	r5, [r4, #0]
 8009f76:	61a5      	str	r5, [r4, #24]
 8009f78:	2208      	movs	r2, #8
 8009f7a:	4629      	mov	r1, r5
 8009f7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009f80:	f7fd faa2 	bl	80074c8 <memset>
 8009f84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009f88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f90:	3468      	adds	r4, #104	; 0x68
 8009f92:	e7d9      	b.n	8009f48 <__sfp+0x1c>
 8009f94:	2104      	movs	r1, #4
 8009f96:	4638      	mov	r0, r7
 8009f98:	f7ff ff62 	bl	8009e60 <__sfmoreglue>
 8009f9c:	4604      	mov	r4, r0
 8009f9e:	6030      	str	r0, [r6, #0]
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	d1d5      	bne.n	8009f50 <__sfp+0x24>
 8009fa4:	f7ff ff78 	bl	8009e98 <__sfp_lock_release>
 8009fa8:	230c      	movs	r3, #12
 8009faa:	603b      	str	r3, [r7, #0]
 8009fac:	e7ee      	b.n	8009f8c <__sfp+0x60>
 8009fae:	bf00      	nop
 8009fb0:	0800a588 	.word	0x0800a588
 8009fb4:	ffff0001 	.word	0xffff0001

08009fb8 <_fwalk_reent>:
 8009fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fbc:	4606      	mov	r6, r0
 8009fbe:	4688      	mov	r8, r1
 8009fc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009fc4:	2700      	movs	r7, #0
 8009fc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009fca:	f1b9 0901 	subs.w	r9, r9, #1
 8009fce:	d505      	bpl.n	8009fdc <_fwalk_reent+0x24>
 8009fd0:	6824      	ldr	r4, [r4, #0]
 8009fd2:	2c00      	cmp	r4, #0
 8009fd4:	d1f7      	bne.n	8009fc6 <_fwalk_reent+0xe>
 8009fd6:	4638      	mov	r0, r7
 8009fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fdc:	89ab      	ldrh	r3, [r5, #12]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d907      	bls.n	8009ff2 <_fwalk_reent+0x3a>
 8009fe2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	d003      	beq.n	8009ff2 <_fwalk_reent+0x3a>
 8009fea:	4629      	mov	r1, r5
 8009fec:	4630      	mov	r0, r6
 8009fee:	47c0      	blx	r8
 8009ff0:	4307      	orrs	r7, r0
 8009ff2:	3568      	adds	r5, #104	; 0x68
 8009ff4:	e7e9      	b.n	8009fca <_fwalk_reent+0x12>

08009ff6 <__swhatbuf_r>:
 8009ff6:	b570      	push	{r4, r5, r6, lr}
 8009ff8:	460e      	mov	r6, r1
 8009ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ffe:	2900      	cmp	r1, #0
 800a000:	b096      	sub	sp, #88	; 0x58
 800a002:	4614      	mov	r4, r2
 800a004:	461d      	mov	r5, r3
 800a006:	da08      	bge.n	800a01a <__swhatbuf_r+0x24>
 800a008:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a00c:	2200      	movs	r2, #0
 800a00e:	602a      	str	r2, [r5, #0]
 800a010:	061a      	lsls	r2, r3, #24
 800a012:	d410      	bmi.n	800a036 <__swhatbuf_r+0x40>
 800a014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a018:	e00e      	b.n	800a038 <__swhatbuf_r+0x42>
 800a01a:	466a      	mov	r2, sp
 800a01c:	f000 f902 	bl	800a224 <_fstat_r>
 800a020:	2800      	cmp	r0, #0
 800a022:	dbf1      	blt.n	800a008 <__swhatbuf_r+0x12>
 800a024:	9a01      	ldr	r2, [sp, #4]
 800a026:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a02a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a02e:	425a      	negs	r2, r3
 800a030:	415a      	adcs	r2, r3
 800a032:	602a      	str	r2, [r5, #0]
 800a034:	e7ee      	b.n	800a014 <__swhatbuf_r+0x1e>
 800a036:	2340      	movs	r3, #64	; 0x40
 800a038:	2000      	movs	r0, #0
 800a03a:	6023      	str	r3, [r4, #0]
 800a03c:	b016      	add	sp, #88	; 0x58
 800a03e:	bd70      	pop	{r4, r5, r6, pc}

0800a040 <__smakebuf_r>:
 800a040:	898b      	ldrh	r3, [r1, #12]
 800a042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a044:	079d      	lsls	r5, r3, #30
 800a046:	4606      	mov	r6, r0
 800a048:	460c      	mov	r4, r1
 800a04a:	d507      	bpl.n	800a05c <__smakebuf_r+0x1c>
 800a04c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	6123      	str	r3, [r4, #16]
 800a054:	2301      	movs	r3, #1
 800a056:	6163      	str	r3, [r4, #20]
 800a058:	b002      	add	sp, #8
 800a05a:	bd70      	pop	{r4, r5, r6, pc}
 800a05c:	ab01      	add	r3, sp, #4
 800a05e:	466a      	mov	r2, sp
 800a060:	f7ff ffc9 	bl	8009ff6 <__swhatbuf_r>
 800a064:	9900      	ldr	r1, [sp, #0]
 800a066:	4605      	mov	r5, r0
 800a068:	4630      	mov	r0, r6
 800a06a:	f7fd faa1 	bl	80075b0 <_malloc_r>
 800a06e:	b948      	cbnz	r0, 800a084 <__smakebuf_r+0x44>
 800a070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a074:	059a      	lsls	r2, r3, #22
 800a076:	d4ef      	bmi.n	800a058 <__smakebuf_r+0x18>
 800a078:	f023 0303 	bic.w	r3, r3, #3
 800a07c:	f043 0302 	orr.w	r3, r3, #2
 800a080:	81a3      	strh	r3, [r4, #12]
 800a082:	e7e3      	b.n	800a04c <__smakebuf_r+0xc>
 800a084:	4b0d      	ldr	r3, [pc, #52]	; (800a0bc <__smakebuf_r+0x7c>)
 800a086:	62b3      	str	r3, [r6, #40]	; 0x28
 800a088:	89a3      	ldrh	r3, [r4, #12]
 800a08a:	6020      	str	r0, [r4, #0]
 800a08c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a090:	81a3      	strh	r3, [r4, #12]
 800a092:	9b00      	ldr	r3, [sp, #0]
 800a094:	6163      	str	r3, [r4, #20]
 800a096:	9b01      	ldr	r3, [sp, #4]
 800a098:	6120      	str	r0, [r4, #16]
 800a09a:	b15b      	cbz	r3, 800a0b4 <__smakebuf_r+0x74>
 800a09c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	f000 f8d1 	bl	800a248 <_isatty_r>
 800a0a6:	b128      	cbz	r0, 800a0b4 <__smakebuf_r+0x74>
 800a0a8:	89a3      	ldrh	r3, [r4, #12]
 800a0aa:	f023 0303 	bic.w	r3, r3, #3
 800a0ae:	f043 0301 	orr.w	r3, r3, #1
 800a0b2:	81a3      	strh	r3, [r4, #12]
 800a0b4:	89a0      	ldrh	r0, [r4, #12]
 800a0b6:	4305      	orrs	r5, r0
 800a0b8:	81a5      	strh	r5, [r4, #12]
 800a0ba:	e7cd      	b.n	800a058 <__smakebuf_r+0x18>
 800a0bc:	08009e55 	.word	0x08009e55

0800a0c0 <_malloc_usable_size_r>:
 800a0c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0c4:	1f18      	subs	r0, r3, #4
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	bfbc      	itt	lt
 800a0ca:	580b      	ldrlt	r3, [r1, r0]
 800a0cc:	18c0      	addlt	r0, r0, r3
 800a0ce:	4770      	bx	lr

0800a0d0 <_raise_r>:
 800a0d0:	291f      	cmp	r1, #31
 800a0d2:	b538      	push	{r3, r4, r5, lr}
 800a0d4:	4604      	mov	r4, r0
 800a0d6:	460d      	mov	r5, r1
 800a0d8:	d904      	bls.n	800a0e4 <_raise_r+0x14>
 800a0da:	2316      	movs	r3, #22
 800a0dc:	6003      	str	r3, [r0, #0]
 800a0de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0e2:	bd38      	pop	{r3, r4, r5, pc}
 800a0e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a0e6:	b112      	cbz	r2, 800a0ee <_raise_r+0x1e>
 800a0e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0ec:	b94b      	cbnz	r3, 800a102 <_raise_r+0x32>
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	f000 f830 	bl	800a154 <_getpid_r>
 800a0f4:	462a      	mov	r2, r5
 800a0f6:	4601      	mov	r1, r0
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0fe:	f000 b817 	b.w	800a130 <_kill_r>
 800a102:	2b01      	cmp	r3, #1
 800a104:	d00a      	beq.n	800a11c <_raise_r+0x4c>
 800a106:	1c59      	adds	r1, r3, #1
 800a108:	d103      	bne.n	800a112 <_raise_r+0x42>
 800a10a:	2316      	movs	r3, #22
 800a10c:	6003      	str	r3, [r0, #0]
 800a10e:	2001      	movs	r0, #1
 800a110:	e7e7      	b.n	800a0e2 <_raise_r+0x12>
 800a112:	2400      	movs	r4, #0
 800a114:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a118:	4628      	mov	r0, r5
 800a11a:	4798      	blx	r3
 800a11c:	2000      	movs	r0, #0
 800a11e:	e7e0      	b.n	800a0e2 <_raise_r+0x12>

0800a120 <raise>:
 800a120:	4b02      	ldr	r3, [pc, #8]	; (800a12c <raise+0xc>)
 800a122:	4601      	mov	r1, r0
 800a124:	6818      	ldr	r0, [r3, #0]
 800a126:	f7ff bfd3 	b.w	800a0d0 <_raise_r>
 800a12a:	bf00      	nop
 800a12c:	200023d4 	.word	0x200023d4

0800a130 <_kill_r>:
 800a130:	b538      	push	{r3, r4, r5, lr}
 800a132:	4d07      	ldr	r5, [pc, #28]	; (800a150 <_kill_r+0x20>)
 800a134:	2300      	movs	r3, #0
 800a136:	4604      	mov	r4, r0
 800a138:	4608      	mov	r0, r1
 800a13a:	4611      	mov	r1, r2
 800a13c:	602b      	str	r3, [r5, #0]
 800a13e:	f7fa f85f 	bl	8004200 <_kill>
 800a142:	1c43      	adds	r3, r0, #1
 800a144:	d102      	bne.n	800a14c <_kill_r+0x1c>
 800a146:	682b      	ldr	r3, [r5, #0]
 800a148:	b103      	cbz	r3, 800a14c <_kill_r+0x1c>
 800a14a:	6023      	str	r3, [r4, #0]
 800a14c:	bd38      	pop	{r3, r4, r5, pc}
 800a14e:	bf00      	nop
 800a150:	20002984 	.word	0x20002984

0800a154 <_getpid_r>:
 800a154:	f7fa b84c 	b.w	80041f0 <_getpid>

0800a158 <__sread>:
 800a158:	b510      	push	{r4, lr}
 800a15a:	460c      	mov	r4, r1
 800a15c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a160:	f000 f894 	bl	800a28c <_read_r>
 800a164:	2800      	cmp	r0, #0
 800a166:	bfab      	itete	ge
 800a168:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a16a:	89a3      	ldrhlt	r3, [r4, #12]
 800a16c:	181b      	addge	r3, r3, r0
 800a16e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a172:	bfac      	ite	ge
 800a174:	6563      	strge	r3, [r4, #84]	; 0x54
 800a176:	81a3      	strhlt	r3, [r4, #12]
 800a178:	bd10      	pop	{r4, pc}

0800a17a <__swrite>:
 800a17a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a17e:	461f      	mov	r7, r3
 800a180:	898b      	ldrh	r3, [r1, #12]
 800a182:	05db      	lsls	r3, r3, #23
 800a184:	4605      	mov	r5, r0
 800a186:	460c      	mov	r4, r1
 800a188:	4616      	mov	r6, r2
 800a18a:	d505      	bpl.n	800a198 <__swrite+0x1e>
 800a18c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a190:	2302      	movs	r3, #2
 800a192:	2200      	movs	r2, #0
 800a194:	f000 f868 	bl	800a268 <_lseek_r>
 800a198:	89a3      	ldrh	r3, [r4, #12]
 800a19a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a19e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1a2:	81a3      	strh	r3, [r4, #12]
 800a1a4:	4632      	mov	r2, r6
 800a1a6:	463b      	mov	r3, r7
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ae:	f000 b817 	b.w	800a1e0 <_write_r>

0800a1b2 <__sseek>:
 800a1b2:	b510      	push	{r4, lr}
 800a1b4:	460c      	mov	r4, r1
 800a1b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1ba:	f000 f855 	bl	800a268 <_lseek_r>
 800a1be:	1c43      	adds	r3, r0, #1
 800a1c0:	89a3      	ldrh	r3, [r4, #12]
 800a1c2:	bf15      	itete	ne
 800a1c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1ce:	81a3      	strheq	r3, [r4, #12]
 800a1d0:	bf18      	it	ne
 800a1d2:	81a3      	strhne	r3, [r4, #12]
 800a1d4:	bd10      	pop	{r4, pc}

0800a1d6 <__sclose>:
 800a1d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1da:	f000 b813 	b.w	800a204 <_close_r>
	...

0800a1e0 <_write_r>:
 800a1e0:	b538      	push	{r3, r4, r5, lr}
 800a1e2:	4d07      	ldr	r5, [pc, #28]	; (800a200 <_write_r+0x20>)
 800a1e4:	4604      	mov	r4, r0
 800a1e6:	4608      	mov	r0, r1
 800a1e8:	4611      	mov	r1, r2
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	602a      	str	r2, [r5, #0]
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	f7fa f83d 	bl	800426e <_write>
 800a1f4:	1c43      	adds	r3, r0, #1
 800a1f6:	d102      	bne.n	800a1fe <_write_r+0x1e>
 800a1f8:	682b      	ldr	r3, [r5, #0]
 800a1fa:	b103      	cbz	r3, 800a1fe <_write_r+0x1e>
 800a1fc:	6023      	str	r3, [r4, #0]
 800a1fe:	bd38      	pop	{r3, r4, r5, pc}
 800a200:	20002984 	.word	0x20002984

0800a204 <_close_r>:
 800a204:	b538      	push	{r3, r4, r5, lr}
 800a206:	4d06      	ldr	r5, [pc, #24]	; (800a220 <_close_r+0x1c>)
 800a208:	2300      	movs	r3, #0
 800a20a:	4604      	mov	r4, r0
 800a20c:	4608      	mov	r0, r1
 800a20e:	602b      	str	r3, [r5, #0]
 800a210:	f7fa f849 	bl	80042a6 <_close>
 800a214:	1c43      	adds	r3, r0, #1
 800a216:	d102      	bne.n	800a21e <_close_r+0x1a>
 800a218:	682b      	ldr	r3, [r5, #0]
 800a21a:	b103      	cbz	r3, 800a21e <_close_r+0x1a>
 800a21c:	6023      	str	r3, [r4, #0]
 800a21e:	bd38      	pop	{r3, r4, r5, pc}
 800a220:	20002984 	.word	0x20002984

0800a224 <_fstat_r>:
 800a224:	b538      	push	{r3, r4, r5, lr}
 800a226:	4d07      	ldr	r5, [pc, #28]	; (800a244 <_fstat_r+0x20>)
 800a228:	2300      	movs	r3, #0
 800a22a:	4604      	mov	r4, r0
 800a22c:	4608      	mov	r0, r1
 800a22e:	4611      	mov	r1, r2
 800a230:	602b      	str	r3, [r5, #0]
 800a232:	f7fa f844 	bl	80042be <_fstat>
 800a236:	1c43      	adds	r3, r0, #1
 800a238:	d102      	bne.n	800a240 <_fstat_r+0x1c>
 800a23a:	682b      	ldr	r3, [r5, #0]
 800a23c:	b103      	cbz	r3, 800a240 <_fstat_r+0x1c>
 800a23e:	6023      	str	r3, [r4, #0]
 800a240:	bd38      	pop	{r3, r4, r5, pc}
 800a242:	bf00      	nop
 800a244:	20002984 	.word	0x20002984

0800a248 <_isatty_r>:
 800a248:	b538      	push	{r3, r4, r5, lr}
 800a24a:	4d06      	ldr	r5, [pc, #24]	; (800a264 <_isatty_r+0x1c>)
 800a24c:	2300      	movs	r3, #0
 800a24e:	4604      	mov	r4, r0
 800a250:	4608      	mov	r0, r1
 800a252:	602b      	str	r3, [r5, #0]
 800a254:	f7fa f843 	bl	80042de <_isatty>
 800a258:	1c43      	adds	r3, r0, #1
 800a25a:	d102      	bne.n	800a262 <_isatty_r+0x1a>
 800a25c:	682b      	ldr	r3, [r5, #0]
 800a25e:	b103      	cbz	r3, 800a262 <_isatty_r+0x1a>
 800a260:	6023      	str	r3, [r4, #0]
 800a262:	bd38      	pop	{r3, r4, r5, pc}
 800a264:	20002984 	.word	0x20002984

0800a268 <_lseek_r>:
 800a268:	b538      	push	{r3, r4, r5, lr}
 800a26a:	4d07      	ldr	r5, [pc, #28]	; (800a288 <_lseek_r+0x20>)
 800a26c:	4604      	mov	r4, r0
 800a26e:	4608      	mov	r0, r1
 800a270:	4611      	mov	r1, r2
 800a272:	2200      	movs	r2, #0
 800a274:	602a      	str	r2, [r5, #0]
 800a276:	461a      	mov	r2, r3
 800a278:	f7fa f83c 	bl	80042f4 <_lseek>
 800a27c:	1c43      	adds	r3, r0, #1
 800a27e:	d102      	bne.n	800a286 <_lseek_r+0x1e>
 800a280:	682b      	ldr	r3, [r5, #0]
 800a282:	b103      	cbz	r3, 800a286 <_lseek_r+0x1e>
 800a284:	6023      	str	r3, [r4, #0]
 800a286:	bd38      	pop	{r3, r4, r5, pc}
 800a288:	20002984 	.word	0x20002984

0800a28c <_read_r>:
 800a28c:	b538      	push	{r3, r4, r5, lr}
 800a28e:	4d07      	ldr	r5, [pc, #28]	; (800a2ac <_read_r+0x20>)
 800a290:	4604      	mov	r4, r0
 800a292:	4608      	mov	r0, r1
 800a294:	4611      	mov	r1, r2
 800a296:	2200      	movs	r2, #0
 800a298:	602a      	str	r2, [r5, #0]
 800a29a:	461a      	mov	r2, r3
 800a29c:	f7f9 ffca 	bl	8004234 <_read>
 800a2a0:	1c43      	adds	r3, r0, #1
 800a2a2:	d102      	bne.n	800a2aa <_read_r+0x1e>
 800a2a4:	682b      	ldr	r3, [r5, #0]
 800a2a6:	b103      	cbz	r3, 800a2aa <_read_r+0x1e>
 800a2a8:	6023      	str	r3, [r4, #0]
 800a2aa:	bd38      	pop	{r3, r4, r5, pc}
 800a2ac:	20002984 	.word	0x20002984

0800a2b0 <round>:
 800a2b0:	ec51 0b10 	vmov	r0, r1, d0
 800a2b4:	b570      	push	{r4, r5, r6, lr}
 800a2b6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800a2ba:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800a2be:	2c13      	cmp	r4, #19
 800a2c0:	ee10 2a10 	vmov	r2, s0
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	dc19      	bgt.n	800a2fc <round+0x4c>
 800a2c8:	2c00      	cmp	r4, #0
 800a2ca:	da09      	bge.n	800a2e0 <round+0x30>
 800a2cc:	3401      	adds	r4, #1
 800a2ce:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800a2d2:	d103      	bne.n	800a2dc <round+0x2c>
 800a2d4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a2d8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a2dc:	2200      	movs	r2, #0
 800a2de:	e028      	b.n	800a332 <round+0x82>
 800a2e0:	4d15      	ldr	r5, [pc, #84]	; (800a338 <round+0x88>)
 800a2e2:	4125      	asrs	r5, r4
 800a2e4:	ea01 0605 	and.w	r6, r1, r5
 800a2e8:	4332      	orrs	r2, r6
 800a2ea:	d00e      	beq.n	800a30a <round+0x5a>
 800a2ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a2f0:	fa42 f404 	asr.w	r4, r2, r4
 800a2f4:	4423      	add	r3, r4
 800a2f6:	ea23 0305 	bic.w	r3, r3, r5
 800a2fa:	e7ef      	b.n	800a2dc <round+0x2c>
 800a2fc:	2c33      	cmp	r4, #51	; 0x33
 800a2fe:	dd07      	ble.n	800a310 <round+0x60>
 800a300:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800a304:	d101      	bne.n	800a30a <round+0x5a>
 800a306:	f7f5 ffe1 	bl	80002cc <__adddf3>
 800a30a:	ec41 0b10 	vmov	d0, r0, r1
 800a30e:	bd70      	pop	{r4, r5, r6, pc}
 800a310:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800a314:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a318:	40f5      	lsrs	r5, r6
 800a31a:	4228      	tst	r0, r5
 800a31c:	d0f5      	beq.n	800a30a <round+0x5a>
 800a31e:	2101      	movs	r1, #1
 800a320:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800a324:	fa01 f404 	lsl.w	r4, r1, r4
 800a328:	1912      	adds	r2, r2, r4
 800a32a:	bf28      	it	cs
 800a32c:	185b      	addcs	r3, r3, r1
 800a32e:	ea22 0205 	bic.w	r2, r2, r5
 800a332:	4619      	mov	r1, r3
 800a334:	4610      	mov	r0, r2
 800a336:	e7e8      	b.n	800a30a <round+0x5a>
 800a338:	000fffff 	.word	0x000fffff

0800a33c <_init>:
 800a33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a33e:	bf00      	nop
 800a340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a342:	bc08      	pop	{r3}
 800a344:	469e      	mov	lr, r3
 800a346:	4770      	bx	lr

0800a348 <_fini>:
 800a348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a34a:	bf00      	nop
 800a34c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a34e:	bc08      	pop	{r3}
 800a350:	469e      	mov	lr, r3
 800a352:	4770      	bx	lr
