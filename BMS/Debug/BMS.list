
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf94  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  0800c168  0800c168  0001c168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9ac  0800c9ac  000225b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9ac  0800c9ac  0001c9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9b4  0800c9b4  000225b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9b4  0800c9b4  0001c9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9b8  0800c9b8  0001c9b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000025b0  20000000  0800c9bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000df0  200025b0  0800ef6c  000225b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200033a0  0800ef6c  000233a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000225b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000225e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bcd5  00000000  00000000  00022623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000416f  00000000  00000000  0003e2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018d0  00000000  00000000  00042468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001328  00000000  00000000  00043d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028209  00000000  00000000  00045060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f13e  00000000  00000000  0006d269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e620d  00000000  00000000  0008c3a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000078c0  00000000  00000000  001725b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00179e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200025b0 	.word	0x200025b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c14c 	.word	0x0800c14c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200025b4 	.word	0x200025b4
 800020c:	0800c14c 	.word	0x0800c14c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b970 	b.w	8000fc0 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	460d      	mov	r5, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	460f      	mov	r7, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4694      	mov	ip, r2
 8000d0c:	d965      	bls.n	8000dda <__udivmoddi4+0xe2>
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	b143      	cbz	r3, 8000d26 <__udivmoddi4+0x2e>
 8000d14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d18:	f1c3 0220 	rsb	r2, r3, #32
 8000d1c:	409f      	lsls	r7, r3
 8000d1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d22:	4317      	orrs	r7, r2
 8000d24:	409c      	lsls	r4, r3
 8000d26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d2a:	fa1f f58c 	uxth.w	r5, ip
 8000d2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d32:	0c22      	lsrs	r2, r4, #16
 8000d34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d3c:	fb01 f005 	mul.w	r0, r1, r5
 8000d40:	4290      	cmp	r0, r2
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d44:	eb1c 0202 	adds.w	r2, ip, r2
 8000d48:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d4c:	f080 811c 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d50:	4290      	cmp	r0, r2
 8000d52:	f240 8119 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d56:	3902      	subs	r1, #2
 8000d58:	4462      	add	r2, ip
 8000d5a:	1a12      	subs	r2, r2, r0
 8000d5c:	b2a4      	uxth	r4, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6a:	fb00 f505 	mul.w	r5, r0, r5
 8000d6e:	42a5      	cmp	r5, r4
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x90>
 8000d72:	eb1c 0404 	adds.w	r4, ip, r4
 8000d76:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d7a:	f080 8107 	bcs.w	8000f8c <__udivmoddi4+0x294>
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	f240 8104 	bls.w	8000f8c <__udivmoddi4+0x294>
 8000d84:	4464      	add	r4, ip
 8000d86:	3802      	subs	r0, #2
 8000d88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8c:	1b64      	subs	r4, r4, r5
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11e      	cbz	r6, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40dc      	lsrs	r4, r3
 8000d94:	2300      	movs	r3, #0
 8000d96:	e9c6 4300 	strd	r4, r3, [r6]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0xbc>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80ed 	beq.w	8000f82 <__udivmoddi4+0x28a>
 8000da8:	2100      	movs	r1, #0
 8000daa:	e9c6 0500 	strd	r0, r5, [r6]
 8000dae:	4608      	mov	r0, r1
 8000db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db4:	fab3 f183 	clz	r1, r3
 8000db8:	2900      	cmp	r1, #0
 8000dba:	d149      	bne.n	8000e50 <__udivmoddi4+0x158>
 8000dbc:	42ab      	cmp	r3, r5
 8000dbe:	d302      	bcc.n	8000dc6 <__udivmoddi4+0xce>
 8000dc0:	4282      	cmp	r2, r0
 8000dc2:	f200 80f8 	bhi.w	8000fb6 <__udivmoddi4+0x2be>
 8000dc6:	1a84      	subs	r4, r0, r2
 8000dc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dcc:	2001      	movs	r0, #1
 8000dce:	4617      	mov	r7, r2
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	d0e2      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000dd8:	e7df      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xe6>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f382 	clz	r3, r2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 8090 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000de8:	1a8a      	subs	r2, r1, r2
 8000dea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dee:	fa1f fe8c 	uxth.w	lr, ip
 8000df2:	2101      	movs	r1, #1
 8000df4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000df8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dfc:	0c22      	lsrs	r2, r4, #16
 8000dfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e02:	fb0e f005 	mul.w	r0, lr, r5
 8000e06:	4290      	cmp	r0, r2
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4290      	cmp	r0, r2
 8000e16:	f200 80cb 	bhi.w	8000fb0 <__udivmoddi4+0x2b8>
 8000e1a:	4645      	mov	r5, r8
 8000e1c:	1a12      	subs	r2, r2, r0
 8000e1e:	b2a4      	uxth	r4, r4
 8000e20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e24:	fb07 2210 	mls	r2, r7, r0, r2
 8000e28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e30:	45a6      	cmp	lr, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x14e>
 8000e34:	eb1c 0404 	adds.w	r4, ip, r4
 8000e38:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e3c:	d202      	bcs.n	8000e44 <__udivmoddi4+0x14c>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f200 80bb 	bhi.w	8000fba <__udivmoddi4+0x2c2>
 8000e44:	4610      	mov	r0, r2
 8000e46:	eba4 040e 	sub.w	r4, r4, lr
 8000e4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e4e:	e79f      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e50:	f1c1 0720 	rsb	r7, r1, #32
 8000e54:	408b      	lsls	r3, r1
 8000e56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e62:	fa20 f307 	lsr.w	r3, r0, r7
 8000e66:	40fd      	lsrs	r5, r7
 8000e68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e6c:	4323      	orrs	r3, r4
 8000e6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	fb09 5518 	mls	r5, r9, r8, r5
 8000e7a:	0c1c      	lsrs	r4, r3, #16
 8000e7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e80:	fb08 f50e 	mul.w	r5, r8, lr
 8000e84:	42a5      	cmp	r5, r4
 8000e86:	fa02 f201 	lsl.w	r2, r2, r1
 8000e8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e98:	f080 8088 	bcs.w	8000fac <__udivmoddi4+0x2b4>
 8000e9c:	42a5      	cmp	r5, r4
 8000e9e:	f240 8085 	bls.w	8000fac <__udivmoddi4+0x2b4>
 8000ea2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea6:	4464      	add	r4, ip
 8000ea8:	1b64      	subs	r4, r4, r5
 8000eaa:	b29d      	uxth	r5, r3
 8000eac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb0:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000eb8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ebc:	45a6      	cmp	lr, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ec8:	d26c      	bcs.n	8000fa4 <__udivmoddi4+0x2ac>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	d96a      	bls.n	8000fa4 <__udivmoddi4+0x2ac>
 8000ece:	3b02      	subs	r3, #2
 8000ed0:	4464      	add	r4, ip
 8000ed2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ed6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	42ac      	cmp	r4, r5
 8000ee0:	46c8      	mov	r8, r9
 8000ee2:	46ae      	mov	lr, r5
 8000ee4:	d356      	bcc.n	8000f94 <__udivmoddi4+0x29c>
 8000ee6:	d053      	beq.n	8000f90 <__udivmoddi4+0x298>
 8000ee8:	b156      	cbz	r6, 8000f00 <__udivmoddi4+0x208>
 8000eea:	ebb0 0208 	subs.w	r2, r0, r8
 8000eee:	eb64 040e 	sbc.w	r4, r4, lr
 8000ef2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef6:	40ca      	lsrs	r2, r1
 8000ef8:	40cc      	lsrs	r4, r1
 8000efa:	4317      	orrs	r7, r2
 8000efc:	e9c6 7400 	strd	r7, r4, [r6]
 8000f00:	4618      	mov	r0, r3
 8000f02:	2100      	movs	r1, #0
 8000f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f08:	f1c3 0120 	rsb	r1, r3, #32
 8000f0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f10:	fa20 f201 	lsr.w	r2, r0, r1
 8000f14:	fa25 f101 	lsr.w	r1, r5, r1
 8000f18:	409d      	lsls	r5, r3
 8000f1a:	432a      	orrs	r2, r5
 8000f1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f20:	fa1f fe8c 	uxth.w	lr, ip
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1510 	mls	r5, r7, r0, r1
 8000f2c:	0c11      	lsrs	r1, r2, #16
 8000f2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f32:	fb00 f50e 	mul.w	r5, r0, lr
 8000f36:	428d      	cmp	r5, r1
 8000f38:	fa04 f403 	lsl.w	r4, r4, r3
 8000f3c:	d908      	bls.n	8000f50 <__udivmoddi4+0x258>
 8000f3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f42:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f46:	d22f      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f48:	428d      	cmp	r5, r1
 8000f4a:	d92d      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	4461      	add	r1, ip
 8000f50:	1b49      	subs	r1, r1, r5
 8000f52:	b292      	uxth	r2, r2
 8000f54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f58:	fb07 1115 	mls	r1, r7, r5, r1
 8000f5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f60:	fb05 f10e 	mul.w	r1, r5, lr
 8000f64:	4291      	cmp	r1, r2
 8000f66:	d908      	bls.n	8000f7a <__udivmoddi4+0x282>
 8000f68:	eb1c 0202 	adds.w	r2, ip, r2
 8000f6c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f70:	d216      	bcs.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f72:	4291      	cmp	r1, r2
 8000f74:	d914      	bls.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f76:	3d02      	subs	r5, #2
 8000f78:	4462      	add	r2, ip
 8000f7a:	1a52      	subs	r2, r2, r1
 8000f7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f80:	e738      	b.n	8000df4 <__udivmoddi4+0xfc>
 8000f82:	4631      	mov	r1, r6
 8000f84:	4630      	mov	r0, r6
 8000f86:	e708      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000f88:	4639      	mov	r1, r7
 8000f8a:	e6e6      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	e6fb      	b.n	8000d88 <__udivmoddi4+0x90>
 8000f90:	4548      	cmp	r0, r9
 8000f92:	d2a9      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f94:	ebb9 0802 	subs.w	r8, r9, r2
 8000f98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	e7a3      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000fa0:	4645      	mov	r5, r8
 8000fa2:	e7ea      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fa4:	462b      	mov	r3, r5
 8000fa6:	e794      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa8:	4640      	mov	r0, r8
 8000faa:	e7d1      	b.n	8000f50 <__udivmoddi4+0x258>
 8000fac:	46d0      	mov	r8, sl
 8000fae:	e77b      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fb0:	3d02      	subs	r5, #2
 8000fb2:	4462      	add	r2, ip
 8000fb4:	e732      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e70a      	b.n	8000dd0 <__udivmoddi4+0xd8>
 8000fba:	4464      	add	r4, ip
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	e742      	b.n	8000e46 <__udivmoddi4+0x14e>

08000fc0 <__aeabi_idiv0>:
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <FEB_BMS_AIR_Open>:
extern CAN_HandleTypeDef hcan1;
extern UART_HandleTypeDef huart2;

// ********************************** Functions **********************************

void FEB_BMS_AIR_Open(void) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2104      	movs	r1, #4
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <FEB_BMS_AIR_Open+0x14>)
 8000fce:	f005 fb39 	bl	8006644 <HAL_GPIO_WritePin>
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40020800 	.word	0x40020800

08000fdc <FEB_BMS_AIR_Close>:

void FEB_BMS_AIR_Close(void) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2104      	movs	r1, #4
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <FEB_BMS_AIR_Close+0x14>)
 8000fe6:	f005 fb2d 	bl	8006644 <HAL_GPIO_WritePin>
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40020800 	.word	0x40020800

08000ff4 <FEB_BMS_Shutdown_Startup>:

uint8_t FEB_BMS_Shutdown_State = 0;		// 0 - not shutdown, 1 - shutdown

// ********************************** Functions **********************************

void FEB_BMS_Shutdown_Startup(void) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2102      	movs	r1, #2
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <FEB_BMS_Shutdown_Startup+0x14>)
 8000ffe:	f005 fb21 	bl	8006644 <HAL_GPIO_WritePin>
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40020800 	.word	0x40020800

0800100c <FEB_BMS_Shutdown_Initiate>:

void FEB_BMS_Shutdown_Initiate(char shutdown_message[]) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b0a2      	sub	sp, #136	; 0x88
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	FEB_BMS_Shutdown_State = 1;
 8001014:	4b1d      	ldr	r3, [pc, #116]	; (800108c <FEB_BMS_Shutdown_Initiate+0x80>)
 8001016:	2201      	movs	r2, #1
 8001018:	701a      	strb	r2, [r3, #0]

	// Shutdown Circuit
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	2102      	movs	r1, #2
 800101e:	481c      	ldr	r0, [pc, #112]	; (8001090 <FEB_BMS_Shutdown_Initiate+0x84>)
 8001020:	f005 fb10 	bl	8006644 <HAL_GPIO_WritePin>

	// Open AIR Circuit
	FEB_BMS_AIR_Open();
 8001024:	f7ff ffce 	bl	8000fc4 <FEB_BMS_AIR_Open>

	// Broadcast Message
	char str[128];
	sprintf(str, "Shutdown: %s.", shutdown_message);
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	4919      	ldr	r1, [pc, #100]	; (8001094 <FEB_BMS_Shutdown_Initiate+0x88>)
 8001030:	4618      	mov	r0, r3
 8001032:	f008 fed7 	bl	8009de4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 100);
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff f938 	bl	80002b0 <strlen>
 8001040:	4603      	mov	r3, r0
 8001042:	b29a      	uxth	r2, r3
 8001044:	f107 0108 	add.w	r1, r7, #8
 8001048:	2364      	movs	r3, #100	; 0x64
 800104a:	4813      	ldr	r0, [pc, #76]	; (8001098 <FEB_BMS_Shutdown_Initiate+0x8c>)
 800104c:	f007 fe33 	bl	8008cb6 <HAL_UART_Transmit>
	if (FEB_CAN_CHARGER_STATE == 1) {
		FEB_CAN_Charger_Stop_Charge(&hcan1);
	}

	// Turn off fans
	FEB_Fan_All_Speed_Set(0);
 8001050:	2000      	movs	r0, #0
 8001052:	f000 fbeb 	bl	800182c <FEB_Fan_All_Speed_Set>
	
	// Do nothing
	sprintf(str, "shutting down: %s.\n", shutdown_message);
 8001056:	f107 0308 	add.w	r3, r7, #8
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	490f      	ldr	r1, [pc, #60]	; (800109c <FEB_BMS_Shutdown_Initiate+0x90>)
 800105e:	4618      	mov	r0, r3
 8001060:	f008 fec0 	bl	8009de4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 100);
 8001064:	f107 0308 	add.w	r3, r7, #8
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff f921 	bl	80002b0 <strlen>
 800106e:	4603      	mov	r3, r0
 8001070:	b29a      	uxth	r2, r3
 8001072:	f107 0108 	add.w	r1, r7, #8
 8001076:	2364      	movs	r3, #100	; 0x64
 8001078:	4807      	ldr	r0, [pc, #28]	; (8001098 <FEB_BMS_Shutdown_Initiate+0x8c>)
 800107a:	f007 fe1c 	bl	8008cb6 <HAL_UART_Transmit>
	HAL_Delay(100);
 800107e:	2064      	movs	r0, #100	; 0x64
 8001080:	f003 ff4a 	bl	8004f18 <HAL_Delay>
}
 8001084:	bf00      	nop
 8001086:	3788      	adds	r7, #136	; 0x88
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200025cc 	.word	0x200025cc
 8001090:	40020800 	.word	0x40020800
 8001094:	0800c168 	.word	0x0800c168
 8001098:	20003204 	.word	0x20003204
 800109c:	0800c178 	.word	0x0800c178

080010a0 <FEB_BMS_State_Validate>:

#include "FEB_BMS_State.h"

// ********************************** Functions **********************************

void FEB_BMS_State_Validate(void) {
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
	if (FEB_CAN_CHARGER_STATE == 1 && FEB_LTC6811_BALANCE_STATE == 1) {
		FEB_BMS_Shutdown_Initiate("Charge state and balance state enabled");
	}
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
	...

080010b0 <FEB_CAN_Init>:
uint8_t FEB_CAN_RxData[8];
uint32_t FEB_CAN_TxMailbox;

// ******************** CAN ********************

void FEB_CAN_Init() {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	FEB_CAN_Filter_Config();
 80010b4:	f000 f818 	bl	80010e8 <FEB_CAN_Filter_Config>
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80010b8:	4808      	ldr	r0, [pc, #32]	; (80010dc <FEB_CAN_Init+0x2c>)
 80010ba:	f004 fc71 	bl	80059a0 <HAL_CAN_Start>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d002      	beq.n	80010ca <FEB_CAN_Init+0x1a>
		FEB_BMS_Shutdown_Initiate("CAN peripheral startup error");
 80010c4:	4806      	ldr	r0, [pc, #24]	; (80010e0 <FEB_CAN_Init+0x30>)
 80010c6:	f7ff ffa1 	bl	800100c <FEB_BMS_Shutdown_Initiate>
	}
	HAL_CAN_ActivateNotification(&hcan1, FEB_CAN_FIFO_Interrupt);
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <FEB_CAN_Init+0x34>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4619      	mov	r1, r3
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <FEB_CAN_Init+0x2c>)
 80010d2:	f004 fdbb 	bl	8005c4c <HAL_CAN_ActivateNotification>
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20003084 	.word	0x20003084
 80010e0:	0800c18c 	.word	0x0800c18c
 80010e4:	20000000 	.word	0x20000000

080010e8 <FEB_CAN_Filter_Config>:

void FEB_CAN_Filter_Config() {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
	uint8_t bank = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	71fb      	strb	r3, [r7, #7]
	bank = FEB_CAN_IVT_Filter_Config(&hcan1, FEB_CAN_FIFO_Assignment, bank);
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <FEB_CAN_Filter_Config+0x48>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	79fa      	ldrb	r2, [r7, #7]
 80010f8:	4619      	mov	r1, r3
 80010fa:	480e      	ldr	r0, [pc, #56]	; (8001134 <FEB_CAN_Filter_Config+0x4c>)
 80010fc:	f000 f8ca 	bl	8001294 <FEB_CAN_IVT_Filter_Config>
 8001100:	4603      	mov	r3, r0
 8001102:	71fb      	strb	r3, [r7, #7]
	bank = FEB_CAN_Charger_Filter_Config(&hcan1, FEB_CAN_FIFO_Assignment, bank);
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <FEB_CAN_Filter_Config+0x48>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	79fa      	ldrb	r2, [r7, #7]
 800110a:	4619      	mov	r1, r3
 800110c:	4809      	ldr	r0, [pc, #36]	; (8001134 <FEB_CAN_Filter_Config+0x4c>)
 800110e:	f000 f841 	bl	8001194 <FEB_CAN_Charger_Filter_Config>
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
	bank = FEB_CAN_Inverter_Filter_Config(&hcan1, FEB_CAN_FIFO_Assignment, bank);
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <FEB_CAN_Filter_Config+0x48>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	79fa      	ldrb	r2, [r7, #7]
 800111c:	4619      	mov	r1, r3
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <FEB_CAN_Filter_Config+0x4c>)
 8001120:	f000 fa88 	bl	8001634 <FEB_CAN_Inverter_Filter_Config>
 8001124:	4603      	mov	r3, r0
 8001126:	71fb      	strb	r3, [r7, #7]
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200025ec 	.word	0x200025ec
 8001134:	20003084 	.word	0x20003084

08001138 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, FEB_CAN_FIFO_Assignment, &FEB_CAN_RxHeader, FEB_CAN_RxData) == HAL_OK) {
 8001140:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4619      	mov	r1, r3
 8001146:	4b0d      	ldr	r3, [pc, #52]	; (800117c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001148:	4a0d      	ldr	r2, [pc, #52]	; (8001180 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f004 fc6c 	bl	8005a28 <HAL_CAN_GetRxMessage>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10b      	bne.n	800116e <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
		FEB_CAN_IVT_Store_Msg(&FEB_CAN_RxHeader, FEB_CAN_RxData);
 8001156:	4909      	ldr	r1, [pc, #36]	; (800117c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001158:	4809      	ldr	r0, [pc, #36]	; (8001180 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800115a:	f000 f8e3 	bl	8001324 <FEB_CAN_IVT_Store_Msg>
		FEB_CAN_Charger_Store_Msg(&FEB_CAN_RxHeader, FEB_CAN_RxData);
 800115e:	4907      	ldr	r1, [pc, #28]	; (800117c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001162:	f000 f84d 	bl	8001200 <FEB_CAN_Charger_Store_Msg>
		FEB_CAN_Inverter_Store_Msg(&FEB_CAN_RxHeader, FEB_CAN_RxData);
 8001166:	4905      	ldr	r1, [pc, #20]	; (800117c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001168:	4805      	ldr	r0, [pc, #20]	; (8001180 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800116a:	f000 faab 	bl	80016c4 <FEB_CAN_Inverter_Store_Msg>
	}
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200025ec 	.word	0x200025ec
 800117c:	200025f0 	.word	0x200025f0
 8001180:	200025d0 	.word	0x200025d0

08001184 <FEB_CAN_Charger_Init>:

// ********************************** Functions **********************************

// ******************** Startup ********************

void FEB_CAN_Charger_Init() {
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
	if (FEB_CAN_CHARGER_STATE == 0) {
		return;
 8001188:	bf00      	nop
	}
	FEB_CAN_Charger_BMS_Message.max_voltage_dV = (uint16_t) (FEB_LTC6811_CELL_MAX_VOLTAGE * FEB_LTC6811_NUM_CELLS_PER_BANK * FEB_LTC6811_NUM_BANKS * 10);
	FEB_CAN_Charger_BMS_Message.max_current_dA = (uint16_t) (FEB_CAN_CHARGER_MAX_CHARGING_CURRENT * 10);
	FEB_CAN_Charger_BMS_Message.control = 0;
}
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <FEB_CAN_Charger_Filter_Config>:

// ******************** CAN ********************

uint8_t FEB_CAN_Charger_Filter_Config(CAN_HandleTypeDef* hcan, uint8_t FIFO_Assignment, uint8_t bank) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b08c      	sub	sp, #48	; 0x30
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	70fb      	strb	r3, [r7, #3]
 80011a0:	4613      	mov	r3, r2
 80011a2:	70bb      	strb	r3, [r7, #2]
	CAN_FilterTypeDef my_can_filter_config;

	my_can_filter_config.FilterActivation = CAN_FILTER_ENABLE;
 80011a4:	2301      	movs	r3, #1
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
	my_can_filter_config.FilterBank = bank;
 80011a8:	78bb      	ldrb	r3, [r7, #2]
 80011aa:	61fb      	str	r3, [r7, #28]
	my_can_filter_config.FilterFIFOAssignment = FIFO_Assignment;
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	61bb      	str	r3, [r7, #24]
	my_can_filter_config.FilterIdHigh = FEB_CAN_CHARGER_CHARGER_ID >> 13; 			// First 16 bits
 80011b0:	f24c 73fa 	movw	r3, #51194	; 0xc7fa
 80011b4:	60bb      	str	r3, [r7, #8]
	my_can_filter_config.FilterIdLow = (FEB_CAN_CHARGER_CHARGER_ID & 0x1FFF) << 3;	// Last 13 bits
 80011b6:	f248 7328 	movw	r3, #34600	; 0x8728
 80011ba:	60fb      	str	r3, [r7, #12]
	my_can_filter_config.FilterMaskIdHigh = 0xFFFF; 								// Mask first 16 bits
 80011bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011c0:	613b      	str	r3, [r7, #16]
	my_can_filter_config.FilterMaskIdLow = 0xFFF8;									// Mask last 13 bits
 80011c2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80011c6:	617b      	str	r3, [r7, #20]
	my_can_filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
	my_can_filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 80011cc:	2301      	movs	r3, #1
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
	my_can_filter_config.SlaveStartFilterBank = 27;
 80011d0:	231b      	movs	r3, #27
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_CAN_ConfigFilter(hcan, &my_can_filter_config)) {
 80011d4:	f107 0308 	add.w	r3, r7, #8
 80011d8:	4619      	mov	r1, r3
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f004 fb00 	bl	80057e0 <HAL_CAN_ConfigFilter>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d002      	beq.n	80011ec <FEB_CAN_Charger_Filter_Config+0x58>
		FEB_BMS_Shutdown_Initiate("Invalid charger CAN filter configuration");
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <FEB_CAN_Charger_Filter_Config+0x68>)
 80011e8:	f7ff ff10 	bl	800100c <FEB_BMS_Shutdown_Initiate>
	}

	return ++bank;
 80011ec:	78bb      	ldrb	r3, [r7, #2]
 80011ee:	3301      	adds	r3, #1
 80011f0:	70bb      	strb	r3, [r7, #2]
 80011f2:	78bb      	ldrb	r3, [r7, #2]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3730      	adds	r7, #48	; 0x30
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	0800c1ac 	.word	0x0800c1ac

08001200 <FEB_CAN_Charger_Store_Msg>:
	if (HAL_CAN_AddTxMessage(hcan, &FEB_CAN_TxHeader, FEB_CAN_TxData, &FEB_CAN_TxMailbox) != HAL_OK) {
		FEB_BMS_Shutdown_Initiate("CAN charger transmission error");
	}
}

void FEB_CAN_Charger_Store_Msg(CAN_RxHeaderTypeDef* pHeader, uint8_t RxData[]) {
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
	switch(pHeader->ExtId) {
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	4a15      	ldr	r2, [pc, #84]	; (8001264 <FEB_CAN_Charger_Store_Msg+0x64>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d121      	bne.n	8001258 <FEB_CAN_Charger_Store_Msg+0x58>
	    case FEB_CAN_CHARGER_CHARGER_ID:
	    	FEB_CAN_Charger_Charger_Message.operating_voltage_dV = (RxData[0] << 8) + RxData[1];
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b29b      	uxth	r3, r3
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	b29a      	uxth	r2, r3
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b29b      	uxth	r3, r3
 8001226:	4413      	add	r3, r2
 8001228:	b29a      	uxth	r2, r3
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <FEB_CAN_Charger_Store_Msg+0x68>)
 800122c:	801a      	strh	r2, [r3, #0]
	    	FEB_CAN_Charger_Charger_Message.operating_current_dA = (RxData[2] << 8) + RxData[3];
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	3302      	adds	r3, #2
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b29b      	uxth	r3, r3
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b29a      	uxth	r2, r3
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	3303      	adds	r3, #3
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b29b      	uxth	r3, r3
 8001242:	4413      	add	r3, r2
 8001244:	b29a      	uxth	r2, r3
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <FEB_CAN_Charger_Store_Msg+0x68>)
 8001248:	805a      	strh	r2, [r3, #2]
	    	FEB_CAN_Charger_Charger_Message.status = RxData[4];
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	3304      	adds	r3, #4
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b29a      	uxth	r2, r3
 8001252:	4b05      	ldr	r3, [pc, #20]	; (8001268 <FEB_CAN_Charger_Store_Msg+0x68>)
 8001254:	809a      	strh	r2, [r3, #4]
//			FEB_CAN_Charger_Validate_Status(RxData[4]);
			break;
 8001256:	bf00      	nop
	}
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	18ff50e5 	.word	0x18ff50e5
 8001268:	200025f8 	.word	0x200025f8

0800126c <FEB_CAN_Charger_Process>:
	if (communication_state_failure == 1) {
			FEB_BMS_Shutdown_Initiate("CAN charger communication_state_failure status error");
		}
}

void FEB_CAN_Charger_Process(CAN_HandleTypeDef* hcan) {
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	if (FEB_CAN_CHARGER_STATE == 0 || FEB_CAN_Charger_Stop_Charge_Bool == 1) {
		return;
 8001274:	bf00      	nop
	if (FEB_LTC6811_Cells_Charged() == 1) {
		FEB_CAN_Charger_Stop_Charge(hcan);
	} else {
		FEB_CAN_Charger_Transmit(hcan);
	}
}
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <FEB_CAN_Charger_UART_Transmit>:
	FEB_CAN_Charger_BMS_Message.max_current_dA = 0;
	FEB_CAN_Charger_BMS_Message.control = 1;
	FEB_CAN_Charger_Transmit(hcan);
}

void FEB_CAN_Charger_UART_Transmit(void) {
 8001280:	b480      	push	{r7}
 8001282:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
 8001286:	af00      	add	r7, sp, #0
	uint8_t uart_can_charger_id = 0b0110;
	sprintf(UART_Str, "%d %d %d %d %d %d %d\n", uart_can_charger_id, FEB_CAN_Charger_BMS_Message.control, FEB_CAN_Charger_BMS_Message.max_current_dA,
			FEB_CAN_Charger_BMS_Message.max_voltage_dV, FEB_CAN_Charger_Charger_Message.operating_current_dA,
			FEB_CAN_Charger_Charger_Message.operating_voltage_dV, FEB_CAN_Charger_Charger_Message.status);
	HAL_UART_Transmit(&huart2, (uint8_t*) UART_Str, strlen(UART_Str), 100);
}
 8001288:	f207 4704 	addw	r7, r7, #1028	; 0x404
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <FEB_CAN_IVT_Filter_Config>:

// ********************************** Functions **********************************

// ******************** CAN ********************

uint8_t FEB_CAN_IVT_Filter_Config(CAN_HandleTypeDef* hcan, uint8_t FIFO_Assignment, uint8_t bank) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b08e      	sub	sp, #56	; 0x38
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	70fb      	strb	r3, [r7, #3]
 80012a0:	4613      	mov	r3, r2
 80012a2:	70bb      	strb	r3, [r7, #2]
	const uint8_t num_filters = (uint8_t) FEB_MATH_ARRAY_LENGTH(FEB_CAN_IVT_Filter_ID_Arr);
 80012a4:	2304      	movs	r3, #4
 80012a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	for (int i = 0; i < num_filters; i++, bank++) {
 80012aa:	2300      	movs	r3, #0
 80012ac:	637b      	str	r3, [r7, #52]	; 0x34
 80012ae:	e02a      	b.n	8001306 <FEB_CAN_IVT_Filter_Config+0x72>
		CAN_FilterTypeDef filter_config;

		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 80012b0:	2301      	movs	r3, #1
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.FilterBank = bank;
 80012b4:	78bb      	ldrb	r3, [r7, #2]
 80012b6:	61fb      	str	r3, [r7, #28]
		filter_config.FilterFIFOAssignment = FIFO_Assignment;
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	61bb      	str	r3, [r7, #24]
		filter_config.FilterIdHigh = FEB_CAN_IVT_Filter_ID_Arr[i] << 5;
 80012bc:	4a17      	ldr	r2, [pc, #92]	; (800131c <FEB_CAN_IVT_Filter_Config+0x88>)
 80012be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012c4:	015b      	lsls	r3, r3, #5
 80012c6:	60bb      	str	r3, [r7, #8]
		filter_config.FilterIdLow = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
		filter_config.FilterMaskIdHigh = 0x7FF << 5;
 80012cc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80012d0:	613b      	str	r3, [r7, #16]
		filter_config.FilterMaskIdLow = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	623b      	str	r3, [r7, #32]
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 80012da:	2301      	movs	r3, #1
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.SlaveStartFilterBank = 27;
 80012de:	231b      	movs	r3, #27
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if(HAL_CAN_ConfigFilter(hcan, &filter_config)) {
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	4619      	mov	r1, r3
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f004 fa79 	bl	80057e0 <HAL_CAN_ConfigFilter>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d002      	beq.n	80012fa <FEB_CAN_IVT_Filter_Config+0x66>
			FEB_BMS_Shutdown_Initiate("Invalid IVT CAN filter configuration");
 80012f4:	480a      	ldr	r0, [pc, #40]	; (8001320 <FEB_CAN_IVT_Filter_Config+0x8c>)
 80012f6:	f7ff fe89 	bl	800100c <FEB_BMS_Shutdown_Initiate>
	for (int i = 0; i < num_filters; i++, bank++) {
 80012fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012fc:	3301      	adds	r3, #1
 80012fe:	637b      	str	r3, [r7, #52]	; 0x34
 8001300:	78bb      	ldrb	r3, [r7, #2]
 8001302:	3301      	adds	r3, #1
 8001304:	70bb      	strb	r3, [r7, #2]
 8001306:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800130a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800130c:	429a      	cmp	r2, r3
 800130e:	dbcf      	blt.n	80012b0 <FEB_CAN_IVT_Filter_Config+0x1c>
		}
	}
	return bank;
 8001310:	78bb      	ldrb	r3, [r7, #2]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3738      	adds	r7, #56	; 0x38
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000004 	.word	0x20000004
 8001320:	0800c2ec 	.word	0x0800c2ec

08001324 <FEB_CAN_IVT_Store_Msg>:

void FEB_CAN_IVT_Store_Msg(CAN_RxHeaderTypeDef* pHeader, uint8_t RxData[]) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
	uint32_t value;
    switch(pHeader->StdId) {
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f2a3 5321 	subw	r3, r3, #1313	; 0x521
 8001336:	2b03      	cmp	r3, #3
 8001338:	d87e      	bhi.n	8001438 <FEB_CAN_IVT_Store_Msg+0x114>
 800133a:	a201      	add	r2, pc, #4	; (adr r2, 8001340 <FEB_CAN_IVT_Store_Msg+0x1c>)
 800133c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001340:	08001351 	.word	0x08001351
 8001344:	0800138b 	.word	0x0800138b
 8001348:	080013c5 	.word	0x080013c5
 800134c:	080013ff 	.word	0x080013ff
    	case FEB_CAN_IVT_CURRENT_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	3302      	adds	r3, #2
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	061a      	lsls	r2, r3, #24
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	3303      	adds	r3, #3
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	041b      	lsls	r3, r3, #16
 8001360:	441a      	add	r2, r3
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	3304      	adds	r3, #4
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	4413      	add	r3, r2
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	3205      	adds	r2, #5
 8001370:	7812      	ldrb	r2, [r2, #0]
 8001372:	4413      	add	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
    	    FEB_CAN_IVT_MESSAGE.current_mA = FEB_Math_Uint32_To_Signed_Long(value);
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f001 fa46 	bl	8002808 <FEB_Math_Uint32_To_Signed_Long>
 800137c:	4603      	mov	r3, r0
 800137e:	4a30      	ldr	r2, [pc, #192]	; (8001440 <FEB_CAN_IVT_Store_Msg+0x11c>)
 8001380:	6013      	str	r3, [r2, #0]
    	    FEB_CAN_IVT_FLAG.current = 1;
 8001382:	4b30      	ldr	r3, [pc, #192]	; (8001444 <FEB_CAN_IVT_Store_Msg+0x120>)
 8001384:	2201      	movs	r2, #1
 8001386:	701a      	strb	r2, [r3, #0]
    		break;
 8001388:	e056      	b.n	8001438 <FEB_CAN_IVT_Store_Msg+0x114>
    	case FEB_CAN_IVT_VOLTAGE_1_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	3302      	adds	r3, #2
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	061a      	lsls	r2, r3, #24
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	3303      	adds	r3, #3
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	041b      	lsls	r3, r3, #16
 800139a:	441a      	add	r2, r3
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	3304      	adds	r3, #4
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	4413      	add	r3, r2
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	3205      	adds	r2, #5
 80013aa:	7812      	ldrb	r2, [r2, #0]
 80013ac:	4413      	add	r3, r2
 80013ae:	60fb      	str	r3, [r7, #12]
    	    FEB_CAN_IVT_MESSAGE.voltage_1_mV = FEB_Math_Uint32_To_Signed_Long(value);
 80013b0:	68f8      	ldr	r0, [r7, #12]
 80013b2:	f001 fa29 	bl	8002808 <FEB_Math_Uint32_To_Signed_Long>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4a21      	ldr	r2, [pc, #132]	; (8001440 <FEB_CAN_IVT_Store_Msg+0x11c>)
 80013ba:	6053      	str	r3, [r2, #4]
    	    FEB_CAN_IVT_FLAG.voltage_1 = 1;
 80013bc:	4b21      	ldr	r3, [pc, #132]	; (8001444 <FEB_CAN_IVT_Store_Msg+0x120>)
 80013be:	2201      	movs	r2, #1
 80013c0:	705a      	strb	r2, [r3, #1]
    		break;
 80013c2:	e039      	b.n	8001438 <FEB_CAN_IVT_Store_Msg+0x114>
    	case FEB_CAN_IVT_VOLTAGE_2_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	3302      	adds	r3, #2
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	061a      	lsls	r2, r3, #24
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	3303      	adds	r3, #3
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	041b      	lsls	r3, r3, #16
 80013d4:	441a      	add	r2, r3
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	3304      	adds	r3, #4
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	4413      	add	r3, r2
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	3205      	adds	r2, #5
 80013e4:	7812      	ldrb	r2, [r2, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
    	    FEB_CAN_IVT_MESSAGE.voltage_2_mV = FEB_Math_Uint32_To_Signed_Long(value);
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f001 fa0c 	bl	8002808 <FEB_Math_Uint32_To_Signed_Long>
 80013f0:	4603      	mov	r3, r0
 80013f2:	4a13      	ldr	r2, [pc, #76]	; (8001440 <FEB_CAN_IVT_Store_Msg+0x11c>)
 80013f4:	6093      	str	r3, [r2, #8]
    	    FEB_CAN_IVT_FLAG.voltage_2 = 1;
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <FEB_CAN_IVT_Store_Msg+0x120>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	709a      	strb	r2, [r3, #2]
    		break;
 80013fc:	e01c      	b.n	8001438 <FEB_CAN_IVT_Store_Msg+0x114>
    	case FEB_CAN_IVT_VOLTAGE_3_ID:
    		value = (RxData[2] << 24) + (RxData[3] << 16) + (RxData[4] << 8) + RxData[5];
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	3302      	adds	r3, #2
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	061a      	lsls	r2, r3, #24
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	3303      	adds	r3, #3
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	041b      	lsls	r3, r3, #16
 800140e:	441a      	add	r2, r3
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	3304      	adds	r3, #4
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	4413      	add	r3, r2
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	3205      	adds	r2, #5
 800141e:	7812      	ldrb	r2, [r2, #0]
 8001420:	4413      	add	r3, r2
 8001422:	60fb      	str	r3, [r7, #12]
    		FEB_CAN_IVT_MESSAGE.voltage_3_mV = FEB_Math_Uint32_To_Signed_Long(value);
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f001 f9ef 	bl	8002808 <FEB_Math_Uint32_To_Signed_Long>
 800142a:	4603      	mov	r3, r0
 800142c:	4a04      	ldr	r2, [pc, #16]	; (8001440 <FEB_CAN_IVT_Store_Msg+0x11c>)
 800142e:	60d3      	str	r3, [r2, #12]
    		FEB_CAN_IVT_FLAG.voltage_3 = 1;
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <FEB_CAN_IVT_Store_Msg+0x120>)
 8001432:	2201      	movs	r2, #1
 8001434:	70da      	strb	r2, [r3, #3]
    		break;
 8001436:	bf00      	nop
    }
}
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20002604 	.word	0x20002604
 8001444:	20002600 	.word	0x20002600

08001448 <FEB_CAN_IVT_Process>:

// ******************** Process Data  ********************

void FEB_CAN_IVT_Process(void) {
 8001448:	b5b0      	push	{r4, r5, r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
	if (FEB_CAN_CHARGER_STATE == 1 || FEB_LTC6811_BALANCE_STATE == 1) {
		return;
	}


	if (FEB_CAN_IVT_FLAG.current == 1) {
 800144e:	4b38      	ldr	r3, [pc, #224]	; (8001530 <FEB_CAN_IVT_Process+0xe8>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d119      	bne.n	800148a <FEB_CAN_IVT_Process+0x42>
		FEB_CAN_IVT_FLAG.current = 0;
 8001456:	4b36      	ldr	r3, [pc, #216]	; (8001530 <FEB_CAN_IVT_Process+0xe8>)
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
		const float current = (float) FEB_CAN_IVT_MESSAGE.current_mA * 0.001;
 800145c:	4b35      	ldr	r3, [pc, #212]	; (8001534 <FEB_CAN_IVT_Process+0xec>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	ee07 3a90 	vmov	s15, r3
 8001464:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001468:	ee17 0a90 	vmov	r0, s15
 800146c:	f7ff f88c 	bl	8000588 <__aeabi_f2d>
 8001470:	a32b      	add	r3, pc, #172	; (adr r3, 8001520 <FEB_CAN_IVT_Process+0xd8>)
 8001472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001476:	f7ff f8df 	bl	8000638 <__aeabi_dmul>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	f7ff fbd1 	bl	8000c28 <__aeabi_d2f>
 8001486:	4603      	mov	r3, r0
 8001488:	607b      	str	r3, [r7, #4]
		if (current > FEB_LTC6811_CELL_MAX_OPERATING_CURRENT) {
//			FEB_BMS_Shutdown_Initiate("IVT over current\n");
		}
	}
	if (FEB_CAN_IVT_FLAG.voltage_1 == 1) {
 800148a:	4b29      	ldr	r3, [pc, #164]	; (8001530 <FEB_CAN_IVT_Process+0xe8>)
 800148c:	785b      	ldrb	r3, [r3, #1]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d135      	bne.n	80014fe <FEB_CAN_IVT_Process+0xb6>
		FEB_CAN_IVT_FLAG.voltage_1 = 0;
 8001492:	4b27      	ldr	r3, [pc, #156]	; (8001530 <FEB_CAN_IVT_Process+0xe8>)
 8001494:	2200      	movs	r2, #0
 8001496:	705a      	strb	r2, [r3, #1]
		float voltage = (float) FEB_CAN_IVT_MESSAGE.voltage_1_mV * 0.001;
 8001498:	4b26      	ldr	r3, [pc, #152]	; (8001534 <FEB_CAN_IVT_Process+0xec>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	ee07 3a90 	vmov	s15, r3
 80014a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a4:	ee17 0a90 	vmov	r0, s15
 80014a8:	f7ff f86e 	bl	8000588 <__aeabi_f2d>
 80014ac:	a31c      	add	r3, pc, #112	; (adr r3, 8001520 <FEB_CAN_IVT_Process+0xd8>)
 80014ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b2:	f7ff f8c1 	bl	8000638 <__aeabi_dmul>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	f7ff fbb3 	bl	8000c28 <__aeabi_d2f>
 80014c2:	4603      	mov	r3, r0
 80014c4:	603b      	str	r3, [r7, #0]
		if (voltage > FEB_LTC6811_Total_Bank_Voltage() * 0.9 && !FEB_CAN_CHARGER_STATE) {
 80014c6:	6838      	ldr	r0, [r7, #0]
 80014c8:	f7ff f85e 	bl	8000588 <__aeabi_f2d>
 80014cc:	4604      	mov	r4, r0
 80014ce:	460d      	mov	r5, r1
 80014d0:	f000 fcf8 	bl	8001ec4 <FEB_LTC6811_Total_Bank_Voltage>
 80014d4:	ee10 3a10 	vmov	r3, s0
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f855 	bl	8000588 <__aeabi_f2d>
 80014de:	a312      	add	r3, pc, #72	; (adr r3, 8001528 <FEB_CAN_IVT_Process+0xe0>)
 80014e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e4:	f7ff f8a8 	bl	8000638 <__aeabi_dmul>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4620      	mov	r0, r4
 80014ee:	4629      	mov	r1, r5
 80014f0:	f7ff fb32 	bl	8000b58 <__aeabi_dcmpgt>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <FEB_CAN_IVT_Process+0xb6>
			FEB_BMS_AIR_Close();
 80014fa:	f7ff fd6f 	bl	8000fdc <FEB_BMS_AIR_Close>
		}
	}
	if (FEB_CAN_IVT_FLAG.voltage_2 == 1) {
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <FEB_CAN_IVT_Process+0xe8>)
 8001500:	789b      	ldrb	r3, [r3, #2]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d102      	bne.n	800150c <FEB_CAN_IVT_Process+0xc4>
		FEB_CAN_IVT_FLAG.voltage_2 = 0;
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <FEB_CAN_IVT_Process+0xe8>)
 8001508:	2200      	movs	r2, #0
 800150a:	709a      	strb	r2, [r3, #2]
		// Do Something
	}
	if (FEB_CAN_IVT_FLAG.voltage_3 == 1) {
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <FEB_CAN_IVT_Process+0xe8>)
 800150e:	78db      	ldrb	r3, [r3, #3]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d102      	bne.n	800151a <FEB_CAN_IVT_Process+0xd2>
		FEB_CAN_IVT_FLAG.voltage_3 = 0;
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <FEB_CAN_IVT_Process+0xe8>)
 8001516:	2200      	movs	r2, #0
 8001518:	70da      	strb	r2, [r3, #3]
		// Do something
	}
}
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bdb0      	pop	{r4, r5, r7, pc}
 8001520:	d2f1a9fc 	.word	0xd2f1a9fc
 8001524:	3f50624d 	.word	0x3f50624d
 8001528:	cccccccd 	.word	0xcccccccd
 800152c:	3feccccc 	.word	0x3feccccc
 8001530:	20002600 	.word	0x20002600
 8001534:	20002604 	.word	0x20002604

08001538 <FEB_CAN_IVT_UART_Transmit>:

void FEB_CAN_IVT_UART_Transmit(void) {
 8001538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800153c:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
 8001540:	af08      	add	r7, sp, #32
	char UART_Str[1024];
	uint8_t uart_ivt_current_id = 0b1000;
 8001542:	2308      	movs	r3, #8
 8001544:	f887 3407 	strb.w	r3, [r7, #1031]	; 0x407
	sprintf(UART_Str, "%d %f %f %f %f", uart_ivt_current_id, (float) FEB_CAN_IVT_MESSAGE.voltage_1_mV * 0.001,
 8001548:	f897 6407 	ldrb.w	r6, [r7, #1031]	; 0x407
 800154c:	4b36      	ldr	r3, [pc, #216]	; (8001628 <FEB_CAN_IVT_UART_Transmit+0xf0>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	ee07 3a90 	vmov	s15, r3
 8001554:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001558:	ee17 0a90 	vmov	r0, s15
 800155c:	f7ff f814 	bl	8000588 <__aeabi_f2d>
 8001560:	a32f      	add	r3, pc, #188	; (adr r3, 8001620 <FEB_CAN_IVT_UART_Transmit+0xe8>)
 8001562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001566:	f7ff f867 	bl	8000638 <__aeabi_dmul>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4614      	mov	r4, r2
 8001570:	461d      	mov	r5, r3
			(float) FEB_CAN_IVT_MESSAGE.voltage_2_mV * 0.001, (float) FEB_CAN_IVT_MESSAGE.voltage_3_mV * 0.001,
 8001572:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <FEB_CAN_IVT_UART_Transmit+0xf0>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	ee07 3a90 	vmov	s15, r3
 800157a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800157e:	ee17 0a90 	vmov	r0, s15
 8001582:	f7ff f801 	bl	8000588 <__aeabi_f2d>
	sprintf(UART_Str, "%d %f %f %f %f", uart_ivt_current_id, (float) FEB_CAN_IVT_MESSAGE.voltage_1_mV * 0.001,
 8001586:	a326      	add	r3, pc, #152	; (adr r3, 8001620 <FEB_CAN_IVT_UART_Transmit+0xe8>)
 8001588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158c:	f7ff f854 	bl	8000638 <__aeabi_dmul>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4690      	mov	r8, r2
 8001596:	4699      	mov	r9, r3
			(float) FEB_CAN_IVT_MESSAGE.voltage_2_mV * 0.001, (float) FEB_CAN_IVT_MESSAGE.voltage_3_mV * 0.001,
 8001598:	4b23      	ldr	r3, [pc, #140]	; (8001628 <FEB_CAN_IVT_UART_Transmit+0xf0>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	ee07 3a90 	vmov	s15, r3
 80015a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a4:	ee17 0a90 	vmov	r0, s15
 80015a8:	f7fe ffee 	bl	8000588 <__aeabi_f2d>
	sprintf(UART_Str, "%d %f %f %f %f", uart_ivt_current_id, (float) FEB_CAN_IVT_MESSAGE.voltage_1_mV * 0.001,
 80015ac:	a31c      	add	r3, pc, #112	; (adr r3, 8001620 <FEB_CAN_IVT_UART_Transmit+0xe8>)
 80015ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b2:	f7ff f841 	bl	8000638 <__aeabi_dmul>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4692      	mov	sl, r2
 80015bc:	469b      	mov	fp, r3
			(float) FEB_CAN_IVT_MESSAGE.current_mA * 0.001);
 80015be:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <FEB_CAN_IVT_UART_Transmit+0xf0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	ee07 3a90 	vmov	s15, r3
 80015c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ca:	ee17 0a90 	vmov	r0, s15
 80015ce:	f7fe ffdb 	bl	8000588 <__aeabi_f2d>
	sprintf(UART_Str, "%d %f %f %f %f", uart_ivt_current_id, (float) FEB_CAN_IVT_MESSAGE.voltage_1_mV * 0.001,
 80015d2:	a313      	add	r3, pc, #76	; (adr r3, 8001620 <FEB_CAN_IVT_UART_Transmit+0xe8>)
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	f7ff f82e 	bl	8000638 <__aeabi_dmul>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	1d38      	adds	r0, r7, #4
 80015e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80015e6:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80015ea:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80015ee:	e9cd 4500 	strd	r4, r5, [sp]
 80015f2:	4632      	mov	r2, r6
 80015f4:	490d      	ldr	r1, [pc, #52]	; (800162c <FEB_CAN_IVT_UART_Transmit+0xf4>)
 80015f6:	f008 fbf5 	bl	8009de4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) UART_Str, strlen(UART_Str), 100);
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe fe57 	bl	80002b0 <strlen>
 8001602:	4603      	mov	r3, r0
 8001604:	b29a      	uxth	r2, r3
 8001606:	1d39      	adds	r1, r7, #4
 8001608:	2364      	movs	r3, #100	; 0x64
 800160a:	4809      	ldr	r0, [pc, #36]	; (8001630 <FEB_CAN_IVT_UART_Transmit+0xf8>)
 800160c:	f007 fb53 	bl	8008cb6 <HAL_UART_Transmit>
}
 8001610:	bf00      	nop
 8001612:	f207 470c 	addw	r7, r7, #1036	; 0x40c
 8001616:	46bd      	mov	sp, r7
 8001618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800161c:	f3af 8000 	nop.w
 8001620:	d2f1a9fc 	.word	0xd2f1a9fc
 8001624:	3f50624d 	.word	0x3f50624d
 8001628:	20002604 	.word	0x20002604
 800162c:	0800c314 	.word	0x0800c314
 8001630:	20003204 	.word	0x20003204

08001634 <FEB_CAN_Inverter_Filter_Config>:

// ********************************** Functions **********************************

// ******************** CAN ********************

uint8_t FEB_CAN_Inverter_Filter_Config(CAN_HandleTypeDef* hcan, uint8_t FIFO_Assignment, uint8_t bank) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b08e      	sub	sp, #56	; 0x38
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	70fb      	strb	r3, [r7, #3]
 8001640:	4613      	mov	r3, r2
 8001642:	70bb      	strb	r3, [r7, #2]
	uint8_t num_filters = FEB_MATH_ARRAY_LENGTH(FEB_CAN_Inverter_Filter_ID_Arr);
 8001644:	2302      	movs	r3, #2
 8001646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	for (int i = 0; i < num_filters; i++, bank++) {
 800164a:	2300      	movs	r3, #0
 800164c:	637b      	str	r3, [r7, #52]	; 0x34
 800164e:	e02a      	b.n	80016a6 <FEB_CAN_Inverter_Filter_Config+0x72>
		CAN_FilterTypeDef filter_config;

		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8001650:	2301      	movs	r3, #1
 8001652:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.FilterBank = bank;
 8001654:	78bb      	ldrb	r3, [r7, #2]
 8001656:	61fb      	str	r3, [r7, #28]
		filter_config.FilterFIFOAssignment = FIFO_Assignment;
 8001658:	78fb      	ldrb	r3, [r7, #3]
 800165a:	61bb      	str	r3, [r7, #24]
		filter_config.FilterIdHigh = FEB_CAN_Inverter_Filter_ID_Arr[i] << 5;
 800165c:	4a17      	ldr	r2, [pc, #92]	; (80016bc <FEB_CAN_Inverter_Filter_Config+0x88>)
 800165e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001660:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001664:	015b      	lsls	r3, r3, #5
 8001666:	60bb      	str	r3, [r7, #8]
		filter_config.FilterIdLow = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
		filter_config.FilterMaskIdHigh = 0x7FF << 5;
 800166c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001670:	613b      	str	r3, [r7, #16]
		filter_config.FilterMaskIdLow = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 800167a:	2301      	movs	r3, #1
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.SlaveStartFilterBank = 27;
 800167e:	231b      	movs	r3, #27
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (HAL_CAN_ConfigFilter(hcan, &filter_config)) {
 8001682:	f107 0308 	add.w	r3, r7, #8
 8001686:	4619      	mov	r1, r3
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f004 f8a9 	bl	80057e0 <HAL_CAN_ConfigFilter>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d002      	beq.n	800169a <FEB_CAN_Inverter_Filter_Config+0x66>
			FEB_BMS_Shutdown_Initiate("Invalid inverter CAN filter configuration");
 8001694:	480a      	ldr	r0, [pc, #40]	; (80016c0 <FEB_CAN_Inverter_Filter_Config+0x8c>)
 8001696:	f7ff fcb9 	bl	800100c <FEB_BMS_Shutdown_Initiate>
	for (int i = 0; i < num_filters; i++, bank++) {
 800169a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800169c:	3301      	adds	r3, #1
 800169e:	637b      	str	r3, [r7, #52]	; 0x34
 80016a0:	78bb      	ldrb	r3, [r7, #2]
 80016a2:	3301      	adds	r3, #1
 80016a4:	70bb      	strb	r3, [r7, #2]
 80016a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016ac:	429a      	cmp	r2, r3
 80016ae:	dbcf      	blt.n	8001650 <FEB_CAN_Inverter_Filter_Config+0x1c>
		}
	}
	return bank;
 80016b0:	78bb      	ldrb	r3, [r7, #2]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3738      	adds	r7, #56	; 0x38
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2000000c 	.word	0x2000000c
 80016c0:	0800c324 	.word	0x0800c324

080016c4 <FEB_CAN_Inverter_Store_Msg>:

void FEB_CAN_Inverter_Store_Msg(CAN_RxHeaderTypeDef* pHeader, uint8_t RxData[]) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
	switch (pHeader->StdId) {
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2ba0      	cmp	r3, #160	; 0xa0
 80016d4:	d002      	beq.n	80016dc <FEB_CAN_Inverter_Store_Msg+0x18>
 80016d6:	2ba2      	cmp	r3, #162	; 0xa2
 80016d8:	d04c      	beq.n	8001774 <FEB_CAN_Inverter_Store_Msg+0xb0>
			break;
		case FEB_CAN_INVERTER_TEMPERATURE_3_ID:
			FEB_CAN_Inverter_Temperature_3_Message.motor_dC = FEB_Math_Uint16_To_Int16((RxData[4] << 8) + RxData[5]);
			break;
	}
}
 80016da:	e05f      	b.n	800179c <FEB_CAN_Inverter_Store_Msg+0xd8>
			FEB_CAN_Inverter_Temperature_1_Message.phase_a_dC = FEB_Math_Uint16_To_Int16((RxData[0] << 8) + RxData[1]);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	3301      	adds	r3, #1
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	4413      	add	r3, r2
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	f001 f897 	bl	8002826 <FEB_Math_Uint16_To_Int16>
 80016f8:	4603      	mov	r3, r0
 80016fa:	461a      	mov	r2, r3
 80016fc:	4b29      	ldr	r3, [pc, #164]	; (80017a4 <FEB_CAN_Inverter_Store_Msg+0xe0>)
 80016fe:	801a      	strh	r2, [r3, #0]
			FEB_CAN_Inverter_Temperature_1_Message.phase_b_dC = FEB_Math_Uint16_To_Int16((RxData[2] << 8) + RxData[3]);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	3302      	adds	r3, #2
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	b29b      	uxth	r3, r3
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	b29a      	uxth	r2, r3
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	3303      	adds	r3, #3
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	b29b      	uxth	r3, r3
 8001714:	4413      	add	r3, r2
 8001716:	b29b      	uxth	r3, r3
 8001718:	4618      	mov	r0, r3
 800171a:	f001 f884 	bl	8002826 <FEB_Math_Uint16_To_Int16>
 800171e:	4603      	mov	r3, r0
 8001720:	461a      	mov	r2, r3
 8001722:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <FEB_CAN_Inverter_Store_Msg+0xe0>)
 8001724:	805a      	strh	r2, [r3, #2]
			FEB_CAN_Inverter_Temperature_1_Message.phase_c_dC = FEB_Math_Uint16_To_Int16((RxData[4] << 8) + RxData[5]);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	3304      	adds	r3, #4
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	b29b      	uxth	r3, r3
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	b29a      	uxth	r2, r3
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	3305      	adds	r3, #5
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	b29b      	uxth	r3, r3
 800173a:	4413      	add	r3, r2
 800173c:	b29b      	uxth	r3, r3
 800173e:	4618      	mov	r0, r3
 8001740:	f001 f871 	bl	8002826 <FEB_Math_Uint16_To_Int16>
 8001744:	4603      	mov	r3, r0
 8001746:	461a      	mov	r2, r3
 8001748:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <FEB_CAN_Inverter_Store_Msg+0xe0>)
 800174a:	809a      	strh	r2, [r3, #4]
			FEB_CAN_Inverter_Temperature_1_Message.gate_driver_board_dC = FEB_Math_Uint16_To_Int16((RxData[6] << 8) + RxData[7]);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	3306      	adds	r3, #6
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	b29b      	uxth	r3, r3
 8001754:	021b      	lsls	r3, r3, #8
 8001756:	b29a      	uxth	r2, r3
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	3307      	adds	r3, #7
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	b29b      	uxth	r3, r3
 8001760:	4413      	add	r3, r2
 8001762:	b29b      	uxth	r3, r3
 8001764:	4618      	mov	r0, r3
 8001766:	f001 f85e 	bl	8002826 <FEB_Math_Uint16_To_Int16>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <FEB_CAN_Inverter_Store_Msg+0xe0>)
 8001770:	80da      	strh	r2, [r3, #6]
			break;
 8001772:	e013      	b.n	800179c <FEB_CAN_Inverter_Store_Msg+0xd8>
			FEB_CAN_Inverter_Temperature_3_Message.motor_dC = FEB_Math_Uint16_To_Int16((RxData[4] << 8) + RxData[5]);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	3304      	adds	r3, #4
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b29b      	uxth	r3, r3
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	b29a      	uxth	r2, r3
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	3305      	adds	r3, #5
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b29b      	uxth	r3, r3
 8001788:	4413      	add	r3, r2
 800178a:	b29b      	uxth	r3, r3
 800178c:	4618      	mov	r0, r3
 800178e:	f001 f84a 	bl	8002826 <FEB_Math_Uint16_To_Int16>
 8001792:	4603      	mov	r3, r0
 8001794:	461a      	mov	r2, r3
 8001796:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <FEB_CAN_Inverter_Store_Msg+0xe4>)
 8001798:	801a      	strh	r2, [r3, #0]
			break;
 800179a:	bf00      	nop
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20002614 	.word	0x20002614
 80017a8:	2000261c 	.word	0x2000261c

080017ac <FEB_Fan_Init>:
static uint8_t FEB_Fan_3_Speed = 0;		// [0, 255]
static uint8_t FEB_Fan_4_Speed = 0;		// [0, 255]

// ********************************** Initialize **********************************

void FEB_Fan_Init(void) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
	FEB_Fan_PWM_Start();
 80017b0:	f000 f810 	bl	80017d4 <FEB_Fan_PWM_Start>
	FEB_Fan_Init_Speed_Set();
 80017b4:	f000 f826 	bl	8001804 <FEB_Fan_Init_Speed_Set>
	FEB_Fan_Reset_Shift_Register();
 80017b8:	f000 f8b2 	bl	8001920 <FEB_Fan_Reset_Shift_Register>
	HAL_ADC_Start(&hadc1);
 80017bc:	4803      	ldr	r0, [pc, #12]	; (80017cc <FEB_Fan_Init+0x20>)
 80017be:	f003 fc13 	bl	8004fe8 <HAL_ADC_Start>
	HAL_ADC_Start(&hadc2);
 80017c2:	4803      	ldr	r0, [pc, #12]	; (80017d0 <FEB_Fan_Init+0x24>)
 80017c4:	f003 fc10 	bl	8004fe8 <HAL_ADC_Start>
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20002ff4 	.word	0x20002ff4
 80017d0:	2000303c 	.word	0x2000303c

080017d4 <FEB_Fan_PWM_Start>:

// ********************************** PWM **********************************

void FEB_Fan_PWM_Start(void) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017d8:	2100      	movs	r1, #0
 80017da:	4808      	ldr	r0, [pc, #32]	; (80017fc <FEB_Fan_PWM_Start+0x28>)
 80017dc:	f006 fbee 	bl	8007fbc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80017e0:	2104      	movs	r1, #4
 80017e2:	4806      	ldr	r0, [pc, #24]	; (80017fc <FEB_Fan_PWM_Start+0x28>)
 80017e4:	f006 fbea 	bl	8007fbc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80017e8:	2100      	movs	r1, #0
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <FEB_Fan_PWM_Start+0x2c>)
 80017ec:	f006 fbe6 	bl	8007fbc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80017f0:	2104      	movs	r1, #4
 80017f2:	4803      	ldr	r0, [pc, #12]	; (8001800 <FEB_Fan_PWM_Start+0x2c>)
 80017f4:	f006 fbe2 	bl	8007fbc <HAL_TIM_PWM_Start>
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	2000312c 	.word	0x2000312c
 8001800:	20003174 	.word	0x20003174

08001804 <FEB_Fan_Init_Speed_Set>:

void FEB_Fan_Init_Speed_Set(void) {\
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
	if (FEB_BMS_Shutdown_State == 1) {
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <FEB_Fan_Init_Speed_Set+0x24>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d006      	beq.n	8001820 <FEB_Fan_Init_Speed_Set+0x1c>
		return;
	}
	uint8_t speed;
	if (FEB_CAN_CHARGER_STATE == 0) {
		speed = 255;
 8001812:	23ff      	movs	r3, #255	; 0xff
 8001814:	71fb      	strb	r3, [r7, #7]
	} else if (FEB_CAN_CHARGER_STATE == 1) {
		speed = 127;
	}
	FEB_Fan_All_Speed_Set(speed);
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	4618      	mov	r0, r3
 800181a:	f000 f807 	bl	800182c <FEB_Fan_All_Speed_Set>
 800181e:	e000      	b.n	8001822 <FEB_Fan_Init_Speed_Set+0x1e>
		return;
 8001820:	bf00      	nop
}
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	200025cc 	.word	0x200025cc

0800182c <FEB_Fan_All_Speed_Set>:

void FEB_Fan_All_Speed_Set(uint8_t speed) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
	FEB_Fan_1_Speed_Set(speed);
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	4618      	mov	r0, r3
 800183a:	f000 f811 	bl	8001860 <FEB_Fan_1_Speed_Set>
	FEB_Fan_2_Speed_Set(speed);
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	4618      	mov	r0, r3
 8001842:	f000 f825 	bl	8001890 <FEB_Fan_2_Speed_Set>
	FEB_Fan_3_Speed_Set(speed);
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	4618      	mov	r0, r3
 800184a:	f000 f839 	bl	80018c0 <FEB_Fan_3_Speed_Set>
	FEB_Fan_4_Speed_Set(speed);
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	4618      	mov	r0, r3
 8001852:	f000 f84d 	bl	80018f0 <FEB_Fan_4_Speed_Set>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <FEB_Fan_1_Speed_Set>:

void FEB_Fan_1_Speed_Set(uint8_t speed) {
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
	FEB_Fan_1_Speed = speed;
 800186a:	4a07      	ldr	r2, [pc, #28]	; (8001888 <FEB_Fan_1_Speed_Set+0x28>)
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, FEB_Fan_1_Speed);
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <FEB_Fan_1_Speed_Set+0x28>)
 8001872:	781a      	ldrb	r2, [r3, #0]
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <FEB_Fan_1_Speed_Set+0x2c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	635a      	str	r2, [r3, #52]	; 0x34
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	2000261e 	.word	0x2000261e
 800188c:	2000312c 	.word	0x2000312c

08001890 <FEB_Fan_2_Speed_Set>:

void FEB_Fan_2_Speed_Set(uint8_t speed) {
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
	FEB_Fan_2_Speed = speed;
 800189a:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <FEB_Fan_2_Speed_Set+0x28>)
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, FEB_Fan_2_Speed);
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <FEB_Fan_2_Speed_Set+0x28>)
 80018a2:	781a      	ldrb	r2, [r3, #0]
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <FEB_Fan_2_Speed_Set+0x2c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	2000261f 	.word	0x2000261f
 80018bc:	2000312c 	.word	0x2000312c

080018c0 <FEB_Fan_3_Speed_Set>:

void FEB_Fan_3_Speed_Set(uint8_t speed) {
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
	FEB_Fan_3_Speed = speed;
 80018ca:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <FEB_Fan_3_Speed_Set+0x28>)
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, FEB_Fan_3_Speed);
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <FEB_Fan_3_Speed_Set+0x28>)
 80018d2:	781a      	ldrb	r2, [r3, #0]
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <FEB_Fan_3_Speed_Set+0x2c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20002620 	.word	0x20002620
 80018ec:	20003174 	.word	0x20003174

080018f0 <FEB_Fan_4_Speed_Set>:

void FEB_Fan_4_Speed_Set(uint8_t speed) {
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
	FEB_Fan_4_Speed = speed;
 80018fa:	4a07      	ldr	r2, [pc, #28]	; (8001918 <FEB_Fan_4_Speed_Set+0x28>)
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, FEB_Fan_4_Speed);
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <FEB_Fan_4_Speed_Set+0x28>)
 8001902:	781a      	ldrb	r2, [r3, #0]
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <FEB_Fan_4_Speed_Set+0x2c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	635a      	str	r2, [r3, #52]	; 0x34
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20002621 	.word	0x20002621
 800191c:	20003174 	.word	0x20003174

08001920 <FEB_Fan_Reset_Shift_Register>:

// ********************************** Shift Register Control **********************************

void FEB_Fan_Reset_Shift_Register(void) {
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	f44f 7100 	mov.w	r1, #512	; 0x200
 800192a:	4807      	ldr	r0, [pc, #28]	; (8001948 <FEB_Fan_Reset_Shift_Register+0x28>)
 800192c:	f004 fe8a 	bl	8006644 <HAL_GPIO_WritePin>
	FEB_Timer_Delay_Micro(10);
 8001930:	200a      	movs	r0, #10
 8001932:	f000 ff99 	bl	8002868 <FEB_Timer_Delay_Micro>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001936:	2201      	movs	r2, #1
 8001938:	f44f 7100 	mov.w	r1, #512	; 0x200
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <FEB_Fan_Reset_Shift_Register+0x28>)
 800193e:	f004 fe81 	bl	8006644 <HAL_GPIO_WritePin>
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40020800 	.word	0x40020800

0800194c <FEB_LTC6811_Init>:
// Set accumulator
static Accumulator accumulator;

// ********************************** Functions **********************************

void FEB_LTC6811_Init(void) {
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b089      	sub	sp, #36	; 0x24
 8001950:	af06      	add	r7, sp, #24
	FEB_LTC6811_Config_Cell_Discharge();
 8001952:	f000 f83f 	bl	80019d4 <FEB_LTC6811_Config_Cell_Discharge>

	LTC6811_init_cfg(NUM_IC, accumulator.IC_config);
 8001956:	4917      	ldr	r1, [pc, #92]	; (80019b4 <FEB_LTC6811_Init+0x68>)
 8001958:	2008      	movs	r0, #8
 800195a:	f001 f863 	bl	8002a24 <LTC6811_init_cfg>
	for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 800195e:	2300      	movs	r3, #0
 8001960:	71fb      	strb	r3, [r7, #7]
 8001962:	e018      	b.n	8001996 <FEB_LTC6811_Init+0x4a>
		LTC6811_set_cfgr(current_ic, accumulator.IC_config, REFON, ADCOPT, GPIOBITS_A, DCCBITS_A, DCTOBITS, UV, OV);
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <FEB_LTC6811_Init+0x6c>)
 8001966:	7819      	ldrb	r1, [r3, #0]
 8001968:	4b14      	ldr	r3, [pc, #80]	; (80019bc <FEB_LTC6811_Init+0x70>)
 800196a:	781c      	ldrb	r4, [r3, #0]
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <FEB_LTC6811_Init+0x74>)
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <FEB_LTC6811_Init+0x78>)
 8001972:	8812      	ldrh	r2, [r2, #0]
 8001974:	79f8      	ldrb	r0, [r7, #7]
 8001976:	9204      	str	r2, [sp, #16]
 8001978:	9303      	str	r3, [sp, #12]
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <FEB_LTC6811_Init+0x7c>)
 800197c:	9302      	str	r3, [sp, #8]
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <FEB_LTC6811_Init+0x80>)
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <FEB_LTC6811_Init+0x84>)
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	4623      	mov	r3, r4
 8001988:	460a      	mov	r2, r1
 800198a:	490a      	ldr	r1, [pc, #40]	; (80019b4 <FEB_LTC6811_Init+0x68>)
 800198c:	f001 f859 	bl	8002a42 <LTC6811_set_cfgr>
	for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	3301      	adds	r3, #1
 8001994:	71fb      	strb	r3, [r7, #7]
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	2b07      	cmp	r3, #7
 800199a:	d9e3      	bls.n	8001964 <FEB_LTC6811_Init+0x18>
	}
	LTC6811_reset_crc_count(NUM_IC, accumulator.IC_config);
 800199c:	4905      	ldr	r1, [pc, #20]	; (80019b4 <FEB_LTC6811_Init+0x68>)
 800199e:	2008      	movs	r0, #8
 80019a0:	f001 f831 	bl	8002a06 <LTC6811_reset_crc_count>
	LTC6811_init_reg_limits(NUM_IC, accumulator.IC_config);
 80019a4:	4903      	ldr	r1, [pc, #12]	; (80019b4 <FEB_LTC6811_Init+0x68>)
 80019a6:	2008      	movs	r0, #8
 80019a8:	f000 ff78 	bl	800289c <LTC6811_init_reg_limits>
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd90      	pop	{r4, r7, pc}
 80019b4:	20002694 	.word	0x20002694
 80019b8:	20000021 	.word	0x20000021
 80019bc:	20002684 	.word	0x20002684
 80019c0:	2000002a 	.word	0x2000002a
 80019c4:	2000002c 	.word	0x2000002c
 80019c8:	20000030 	.word	0x20000030
 80019cc:	20002688 	.word	0x20002688
 80019d0:	20000024 	.word	0x20000024

080019d4 <FEB_LTC6811_Config_Cell_Discharge>:

void FEB_LTC6811_Config_Cell_Discharge(void) {
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NUM_IC; i++) {
 80019da:	2300      	movs	r3, #0
 80019dc:	71fb      	strb	r3, [r7, #7]
 80019de:	e016      	b.n	8001a0e <FEB_LTC6811_Config_Cell_Discharge+0x3a>
		for (uint8_t j = 0; j < FEB_LTC6811_NUM_CELLS_PER_DAUGHTER_BOARD; j++) {
 80019e0:	2300      	movs	r3, #0
 80019e2:	71bb      	strb	r3, [r7, #6]
 80019e4:	e00d      	b.n	8001a02 <FEB_LTC6811_Config_Cell_Discharge+0x2e>
			FEB_LTC6811_Cell_Discharge[i][j] = 0;
 80019e6:	79fa      	ldrb	r2, [r7, #7]
 80019e8:	79b9      	ldrb	r1, [r7, #6]
 80019ea:	480e      	ldr	r0, [pc, #56]	; (8001a24 <FEB_LTC6811_Config_Cell_Discharge+0x50>)
 80019ec:	4613      	mov	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	4413      	add	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4403      	add	r3, r0
 80019f6:	440b      	add	r3, r1
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < FEB_LTC6811_NUM_CELLS_PER_DAUGHTER_BOARD; j++) {
 80019fc:	79bb      	ldrb	r3, [r7, #6]
 80019fe:	3301      	adds	r3, #1
 8001a00:	71bb      	strb	r3, [r7, #6]
 8001a02:	79bb      	ldrb	r3, [r7, #6]
 8001a04:	2b0b      	cmp	r3, #11
 8001a06:	d9ee      	bls.n	80019e6 <FEB_LTC6811_Config_Cell_Discharge+0x12>
	for (uint8_t i = 0; i < NUM_IC; i++) {
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	71fb      	strb	r3, [r7, #7]
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	2b07      	cmp	r3, #7
 8001a12:	d9e5      	bls.n	80019e0 <FEB_LTC6811_Config_Cell_Discharge+0xc>
		}
	}
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20002624 	.word	0x20002624

08001a28 <FEB_LTC6811_Poll_Voltage>:

// ******************** Read Voltage ********************

void FEB_LTC6811_Poll_Voltage(void) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
	FEB_LTC6811_Start_Cell_ADC_Measurement();
 8001a2c:	f000 f806 	bl	8001a3c <FEB_LTC6811_Start_Cell_ADC_Measurement>
	FEB_LTC6811_Read_Cell_Voltage_Registers();
 8001a30:	f000 f812 	bl	8001a58 <FEB_LTC6811_Read_Cell_Voltage_Registers>
	FEB_LTC6811_Store_Voltage();
 8001a34:	f000 f81e 	bl	8001a74 <FEB_LTC6811_Store_Voltage>
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <FEB_LTC6811_Start_Cell_ADC_Measurement>:

void FEB_LTC6811_Start_Cell_ADC_Measurement(void) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 8001a40:	2008      	movs	r0, #8
 8001a42:	f001 f83c 	bl	8002abe <wakeup_sleep>
	LTC6811_adcv(ADC_CONVERSION_MODE, ADC_DCP, CELL_CH_TO_CONVERT);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2101      	movs	r1, #1
 8001a4a:	2002      	movs	r0, #2
 8001a4c:	f000 ff82 	bl	8002954 <LTC6811_adcv>
	LTC6811_pollAdc();
 8001a50:	f000 ffd2 	bl	80029f8 <LTC6811_pollAdc>
}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <FEB_LTC6811_Read_Cell_Voltage_Registers>:

void FEB_LTC6811_Read_Cell_Voltage_Registers(void) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 8001a5c:	2008      	movs	r0, #8
 8001a5e:	f001 f82e 	bl	8002abe <wakeup_sleep>
	LTC6811_rdcv(SEL_ALL_REG, NUM_IC, accumulator.IC_config);
 8001a62:	4a03      	ldr	r2, [pc, #12]	; (8001a70 <FEB_LTC6811_Read_Cell_Voltage_Registers+0x18>)
 8001a64:	2108      	movs	r1, #8
 8001a66:	2000      	movs	r0, #0
 8001a68:	f000 ff99 	bl	800299e <LTC6811_rdcv>
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20002694 	.word	0x20002694

08001a74 <FEB_LTC6811_Store_Voltage>:

void FEB_LTC6811_Store_Voltage(void) {
 8001a74:	b5b0      	push	{r4, r5, r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
    for (uint16_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	80fb      	strh	r3, [r7, #6]
 8001a7e:	e037      	b.n	8001af0 <FEB_LTC6811_Store_Voltage+0x7c>
    	for (uint8_t cell = 0; cell < FEB_LTC6811_NUM_CELLS_PER_BANK; cell++) {
 8001a80:	2300      	movs	r3, #0
 8001a82:	717b      	strb	r3, [r7, #5]
 8001a84:	e02e      	b.n	8001ae4 <FEB_LTC6811_Store_Voltage+0x70>
    		uint8_t ic = FEB_LTC6811_Get_IC(bank_idx, cell);
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	797a      	ldrb	r2, [r7, #5]
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 f864 	bl	8001b5c <FEB_LTC6811_Get_IC>
 8001a94:	4603      	mov	r3, r0
 8001a96:	713b      	strb	r3, [r7, #4]
    		uint8_t cell_idx = FEB_LTC6811_Cell_Idx(cell);
 8001a98:	797b      	ldrb	r3, [r7, #5]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f878 	bl	8001b90 <FEB_LTC6811_Cell_Idx>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	70fb      	strb	r3, [r7, #3]
    		accumulator.banks[bank_idx].cells[cell].voltage = FEB_LTC6811_Convert_Voltage(accumulator.IC_config[ic].cells.c_codes[cell_idx]);
 8001aa4:	793a      	ldrb	r2, [r7, #4]
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	4915      	ldr	r1, [pc, #84]	; (8001b00 <FEB_LTC6811_Store_Voltage+0x8c>)
 8001aaa:	2074      	movs	r0, #116	; 0x74
 8001aac:	fb00 f202 	mul.w	r2, r0, r2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	330c      	adds	r3, #12
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	440b      	add	r3, r1
 8001ab8:	88db      	ldrh	r3, [r3, #6]
 8001aba:	88fc      	ldrh	r4, [r7, #6]
 8001abc:	797d      	ldrb	r5, [r7, #5]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 f822 	bl	8001b08 <FEB_LTC6811_Convert_Voltage>
 8001ac4:	eef0 7a40 	vmov.f32	s15, s0
 8001ac8:	4a0d      	ldr	r2, [pc, #52]	; (8001b00 <FEB_LTC6811_Store_Voltage+0x8c>)
 8001aca:	4623      	mov	r3, r4
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	4423      	add	r3, r4
 8001ad0:	442b      	add	r3, r5
 8001ad2:	33e8      	adds	r3, #232	; 0xe8
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3304      	adds	r3, #4
 8001ada:	edc3 7a00 	vstr	s15, [r3]
    	for (uint8_t cell = 0; cell < FEB_LTC6811_NUM_CELLS_PER_BANK; cell++) {
 8001ade:	797b      	ldrb	r3, [r7, #5]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	717b      	strb	r3, [r7, #5]
 8001ae4:	797b      	ldrb	r3, [r7, #5]
 8001ae6:	2b10      	cmp	r3, #16
 8001ae8:	d9cd      	bls.n	8001a86 <FEB_LTC6811_Store_Voltage+0x12>
    for (uint16_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	3301      	adds	r3, #1
 8001aee:	80fb      	strh	r3, [r7, #6]
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d9c4      	bls.n	8001a80 <FEB_LTC6811_Store_Voltage+0xc>
    	}
    }
}
 8001af6:	bf00      	nop
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bdb0      	pop	{r4, r5, r7, pc}
 8001b00:	20002694 	.word	0x20002694
 8001b04:	00000000 	.word	0x00000000

08001b08 <FEB_LTC6811_Convert_Voltage>:

/*
 * @param value := Voltage (100uV) from LTC6811
 */
float FEB_LTC6811_Convert_Voltage(uint16_t value) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
	// Check for error: value = 2^16 - 1
	if (value == 65535) {
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d101      	bne.n	8001b20 <FEB_LTC6811_Convert_Voltage+0x18>
		return -42;
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <FEB_LTC6811_Convert_Voltage+0x50>)
 8001b1e:	e00f      	b.n	8001b40 <FEB_LTC6811_Convert_Voltage+0x38>
	}
	return value * 0.0001;
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fd1e 	bl	8000564 <__aeabi_i2d>
 8001b28:	a309      	add	r3, pc, #36	; (adr r3, 8001b50 <FEB_LTC6811_Convert_Voltage+0x48>)
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	f7fe fd83 	bl	8000638 <__aeabi_dmul>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f7ff f875 	bl	8000c28 <__aeabi_d2f>
 8001b3e:	4603      	mov	r3, r0
}
 8001b40:	ee07 3a90 	vmov	s15, r3
 8001b44:	eeb0 0a67 	vmov.f32	s0, s15
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	eb1c432d 	.word	0xeb1c432d
 8001b54:	3f1a36e2 	.word	0x3f1a36e2
 8001b58:	c2280000 	.word	0xc2280000

08001b5c <FEB_LTC6811_Get_IC>:

// ******************** Voltage Cell Balance ********************

uint8_t FEB_LTC6811_Get_IC(uint8_t bank, uint8_t cell) {
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	460a      	mov	r2, r1
 8001b66:	71fb      	strb	r3, [r7, #7]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	71bb      	strb	r3, [r7, #6]
	if (cell < 9) {
 8001b6c:	79bb      	ldrb	r3, [r7, #6]
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d805      	bhi.n	8001b7e <FEB_LTC6811_Get_IC+0x22>
		return bank * 2 + 1;
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	3301      	adds	r3, #1
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	e002      	b.n	8001b84 <FEB_LTC6811_Get_IC+0x28>
	} else {
		return bank * 2;
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	b2db      	uxtb	r3, r3
	}
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <FEB_LTC6811_Cell_Idx>:

uint8_t FEB_LTC6811_Cell_Idx(uint8_t cell) {
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
	return FEB_LTC6811_Cell_Idx_Map[cell];
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	4a03      	ldr	r2, [pc, #12]	; (8001bac <FEB_LTC6811_Cell_Idx+0x1c>)
 8001b9e:	5cd3      	ldrb	r3, [r2, r3]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	20000010 	.word	0x20000010

08001bb0 <FEB_LTC6811_Balance_Cells>:
	FEB_LTC6811_UART_Transmit_Discharge_Lowest_V();
	FEB_LTC6811_UART_Transmit_Discharge_Lowest_Ind(low_bank, low_cell);

}

void FEB_LTC6811_Balance_Cells(void) {
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
	if (FEB_LTC6811_BALANCE_STATE == 0 || FEB_LTC6811_Cells_Balanced == 1 || FEB_BMS_Shutdown_State == 1) {
		return;
 8001bb4:	bf00      	nop
	if (cells_balanced == 1) {
		FEB_LTC6811_Cells_Balanced = 1;
		FEB_LTC6811_Clear_Balance_Cells();
	}

}
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <FEB_LTC6811_Configure_DCCBITS_A>:

void FEB_LTC6811_Clear_Balance_Cell(uint8_t bank, uint8_t cell) {
	FEB_LTC6811_Cell_Discharge[FEB_LTC6811_Get_IC(bank, cell)][FEB_LTC6811_Cell_Idx(cell)] = 0;
}

void FEB_LTC6811_Configure_DCCBITS_A(uint8_t ic) {
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < FEB_LTC6811_NUM_CELLS_PER_DAUGHTER_BOARD; i++) {
 8001bca:	2300      	movs	r3, #0
 8001bcc:	73fb      	strb	r3, [r7, #15]
 8001bce:	e014      	b.n	8001bfa <FEB_LTC6811_Configure_DCCBITS_A+0x3a>
		DCCBITS_A[i] = FEB_LTC6811_Cell_Discharge[ic][i];
 8001bd0:	79fa      	ldrb	r2, [r7, #7]
 8001bd2:	7bf9      	ldrb	r1, [r7, #15]
 8001bd4:	480e      	ldr	r0, [pc, #56]	; (8001c10 <FEB_LTC6811_Configure_DCCBITS_A+0x50>)
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	4413      	add	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4403      	add	r3, r0
 8001be0:	440b      	add	r3, r1
 8001be2:	781a      	ldrb	r2, [r3, #0]
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	2a00      	cmp	r2, #0
 8001be8:	bf14      	ite	ne
 8001bea:	2201      	movne	r2, #1
 8001bec:	2200      	moveq	r2, #0
 8001bee:	b2d1      	uxtb	r1, r2
 8001bf0:	4a08      	ldr	r2, [pc, #32]	; (8001c14 <FEB_LTC6811_Configure_DCCBITS_A+0x54>)
 8001bf2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < FEB_LTC6811_NUM_CELLS_PER_DAUGHTER_BOARD; i++) {
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	73fb      	strb	r3, [r7, #15]
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	2b0b      	cmp	r3, #11
 8001bfe:	d9e7      	bls.n	8001bd0 <FEB_LTC6811_Configure_DCCBITS_A+0x10>
	}
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20002624 	.word	0x20002624
 8001c14:	20002688 	.word	0x20002688

08001c18 <FEB_LTC6811_UART_Transmit_Discharge>:

void FEB_LTC6811_UART_Transmit_Discharge(void) {
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	f2ad 5d0c 	subw	sp, sp, #1292	; 0x50c
 8001c1e:	af00      	add	r7, sp, #0
	char UART_str[1024];
	char temp_str[256];

	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8001c20:	2300      	movs	r3, #0
 8001c22:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 8001c26:	e067      	b.n	8001cf8 <FEB_LTC6811_UART_Transmit_Discharge+0xe0>
		// Add bank_idx, cell_idx to {@code UART_Str}
		sprintf(UART_str, "%d", (bank_idx << FEB_LTC6811_UART_BITS_PER_MESSAGE) + FEB_LTC6811_UART_DISCHARGE_ID);
 8001c28:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	1c9a      	adds	r2, r3, #2
 8001c30:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001c34:	4935      	ldr	r1, [pc, #212]	; (8001d0c <FEB_LTC6811_UART_Transmit_Discharge+0xf4>)
 8001c36:	4618      	mov	r0, r3
 8001c38:	f008 f8d4 	bl	8009de4 <siprintf>


		// Add values to {@code UART_Str}
		for (uint16_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8001c42:	e033      	b.n	8001cac <FEB_LTC6811_UART_Transmit_Discharge+0x94>
			uint8_t state = FEB_LTC6811_Cell_Discharge[FEB_LTC6811_Get_IC(bank_idx, cell_idx)][FEB_LTC6811_Cell_Idx(cell_idx)];
 8001c44:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001c4e:	4611      	mov	r1, r2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff83 	bl	8001b5c <FEB_LTC6811_Get_IC>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461c      	mov	r4, r3
 8001c5a:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff95 	bl	8001b90 <FEB_LTC6811_Cell_Idx>
 8001c66:	4603      	mov	r3, r0
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4a29      	ldr	r2, [pc, #164]	; (8001d10 <FEB_LTC6811_UART_Transmit_Discharge+0xf8>)
 8001c6c:	4623      	mov	r3, r4
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4423      	add	r3, r4
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	440b      	add	r3, r1
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	f887 3503 	strb.w	r3, [r7, #1283]	; 0x503
			sprintf(temp_str, " %d", state);
 8001c7e:	f897 2503 	ldrb.w	r2, [r7, #1283]	; 0x503
 8001c82:	463b      	mov	r3, r7
 8001c84:	4923      	ldr	r1, [pc, #140]	; (8001d14 <FEB_LTC6811_UART_Transmit_Discharge+0xfc>)
 8001c86:	4618      	mov	r0, r3
 8001c88:	f008 f8ac 	bl	8009de4 <siprintf>
			strncat(UART_str, temp_str, strlen(temp_str));
 8001c8c:	463b      	mov	r3, r7
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fb0e 	bl	80002b0 <strlen>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4639      	mov	r1, r7
 8001c98:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f008 f971 	bl	8009f84 <strncat>
		for (uint16_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8001ca2:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
 8001cac:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8001cb0:	2b10      	cmp	r3, #16
 8001cb2:	d9c7      	bls.n	8001c44 <FEB_LTC6811_UART_Transmit_Discharge+0x2c>
		}

		// Add '\n' to {@code UART_Str}
		sprintf(temp_str, "\n");
 8001cb4:	463b      	mov	r3, r7
 8001cb6:	4918      	ldr	r1, [pc, #96]	; (8001d18 <FEB_LTC6811_UART_Transmit_Discharge+0x100>)
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f008 f893 	bl	8009de4 <siprintf>
		strncat(UART_str, temp_str, strlen(temp_str));
 8001cbe:	463b      	mov	r3, r7
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe faf5 	bl	80002b0 <strlen>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	4639      	mov	r1, r7
 8001cca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f008 f958 	bl	8009f84 <strncat>

		HAL_UART_Transmit(&huart2, (uint8_t*) UART_str, strlen(UART_str), 100);
 8001cd4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fae9 	bl	80002b0 <strlen>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8001ce6:	2364      	movs	r3, #100	; 0x64
 8001ce8:	480c      	ldr	r0, [pc, #48]	; (8001d1c <FEB_LTC6811_UART_Transmit_Discharge+0x104>)
 8001cea:	f006 ffe4 	bl	8008cb6 <HAL_UART_Transmit>
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8001cee:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
 8001cf8:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	d993      	bls.n	8001c28 <FEB_LTC6811_UART_Transmit_Discharge+0x10>
	}
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	f207 570c 	addw	r7, r7, #1292	; 0x50c
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd90      	pop	{r4, r7, pc}
 8001d0c:	0800c36c 	.word	0x0800c36c
 8001d10:	20002624 	.word	0x20002624
 8001d14:	0800c370 	.word	0x0800c370
 8001d18:	0800c374 	.word	0x0800c374
 8001d1c:	20003204 	.word	0x20003204

08001d20 <FEB_LTC6811_Validate_Voltage>:
	HAL_UART_Transmit(&huart2, (uint8_t*) UART_str, strlen(UART_str), 100);

}
// ******************** Voltage Interface ********************

void FEB_LTC6811_Validate_Voltage(void) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
	if (FEB_BMS_Shutdown_State == 1) {
 8001d26:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <FEB_LTC6811_Validate_Voltage+0x98>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d03a      	beq.n	8001da4 <FEB_LTC6811_Validate_Voltage+0x84>
		return;
	}
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8001d2e:	2300      	movs	r3, #0
 8001d30:	71fb      	strb	r3, [r7, #7]
 8001d32:	e033      	b.n	8001d9c <FEB_LTC6811_Validate_Voltage+0x7c>
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8001d34:	2300      	movs	r3, #0
 8001d36:	71bb      	strb	r3, [r7, #6]
 8001d38:	e02a      	b.n	8001d90 <FEB_LTC6811_Validate_Voltage+0x70>
			float voltage = accumulator.banks[bank_idx].cells[cell_idx].voltage;
 8001d3a:	79fa      	ldrb	r2, [r7, #7]
 8001d3c:	79b9      	ldrb	r1, [r7, #6]
 8001d3e:	481f      	ldr	r0, [pc, #124]	; (8001dbc <FEB_LTC6811_Validate_Voltage+0x9c>)
 8001d40:	4613      	mov	r3, r2
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	4413      	add	r3, r2
 8001d46:	440b      	add	r3, r1
 8001d48:	33e8      	adds	r3, #232	; 0xe8
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4403      	add	r3, r0
 8001d4e:	3304      	adds	r3, #4
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	603b      	str	r3, [r7, #0]
			if (voltage < FEB_LTC6811_CELL_MIN_VOLTAGE) {
 8001d54:	edd7 7a00 	vldr	s15, [r7]
 8001d58:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001d5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d64:	d503      	bpl.n	8001d6e <FEB_LTC6811_Validate_Voltage+0x4e>
				FEB_BMS_Shutdown_Initiate("Module under voltage");
 8001d66:	4816      	ldr	r0, [pc, #88]	; (8001dc0 <FEB_LTC6811_Validate_Voltage+0xa0>)
 8001d68:	f7ff f950 	bl	800100c <FEB_BMS_Shutdown_Initiate>
 8001d6c:	e00d      	b.n	8001d8a <FEB_LTC6811_Validate_Voltage+0x6a>
			} else if (voltage > FEB_LTC6811_CELL_MAX_VOLTAGE) {
 8001d6e:	6838      	ldr	r0, [r7, #0]
 8001d70:	f7fe fc0a 	bl	8000588 <__aeabi_f2d>
 8001d74:	a30e      	add	r3, pc, #56	; (adr r3, 8001db0 <FEB_LTC6811_Validate_Voltage+0x90>)
 8001d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7a:	f7fe feed 	bl	8000b58 <__aeabi_dcmpgt>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <FEB_LTC6811_Validate_Voltage+0x6a>
				FEB_BMS_Shutdown_Initiate("Module over voltage");
 8001d84:	480f      	ldr	r0, [pc, #60]	; (8001dc4 <FEB_LTC6811_Validate_Voltage+0xa4>)
 8001d86:	f7ff f941 	bl	800100c <FEB_BMS_Shutdown_Initiate>
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8001d8a:	79bb      	ldrb	r3, [r7, #6]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	71bb      	strb	r3, [r7, #6]
 8001d90:	79bb      	ldrb	r3, [r7, #6]
 8001d92:	2b10      	cmp	r3, #16
 8001d94:	d9d1      	bls.n	8001d3a <FEB_LTC6811_Validate_Voltage+0x1a>
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	71fb      	strb	r3, [r7, #7]
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d9c8      	bls.n	8001d34 <FEB_LTC6811_Validate_Voltage+0x14>
 8001da2:	e000      	b.n	8001da6 <FEB_LTC6811_Validate_Voltage+0x86>
		return;
 8001da4:	bf00      	nop
			}
		}
	}
}
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	f3af 8000 	nop.w
 8001db0:	5c28f5c3 	.word	0x5c28f5c3
 8001db4:	4010c28f 	.word	0x4010c28f
 8001db8:	200025cc 	.word	0x200025cc
 8001dbc:	20002694 	.word	0x20002694
 8001dc0:	0800c3b4 	.word	0x0800c3b4
 8001dc4:	0800c3cc 	.word	0x0800c3cc

08001dc8 <FEB_LTC6811_UART_Transmit_Voltage>:

void FEB_LTC6811_UART_Transmit_Voltage() {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	f5ad 6da2 	sub.w	sp, sp, #1296	; 0x510
 8001dce:	af00      	add	r7, sp, #0
	char UART_str[1024];
	char temp_str[256];

	uint8_t uart_volt_id = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	f887 350b 	strb.w	r3, [r7, #1291]	; 0x50b

	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f887 350f 	strb.w	r3, [r7, #1295]	; 0x50f
 8001ddc:	e05e      	b.n	8001e9c <FEB_LTC6811_UART_Transmit_Voltage+0xd4>
		// Add bank_idx, cell_idx to {@code UART_Str}
		sprintf(UART_str, "%d %d", uart_volt_id, bank_idx);
 8001dde:	f897 250b 	ldrb.w	r2, [r7, #1291]	; 0x50b
 8001de2:	f897 350f 	ldrb.w	r3, [r7, #1295]	; 0x50f
 8001de6:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8001dea:	4931      	ldr	r1, [pc, #196]	; (8001eb0 <FEB_LTC6811_UART_Transmit_Voltage+0xe8>)
 8001dec:	f007 fffa 	bl	8009de4 <siprintf>

		// Add values to {@code UART_Str}
		for (uint16_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8001df0:	2300      	movs	r3, #0
 8001df2:	f8a7 350c 	strh.w	r3, [r7, #1292]	; 0x50c
 8001df6:	e02b      	b.n	8001e50 <FEB_LTC6811_UART_Transmit_Voltage+0x88>
			float voltage = accumulator.banks[bank_idx].cells[cell_idx].voltage;
 8001df8:	f897 250f 	ldrb.w	r2, [r7, #1295]	; 0x50f
 8001dfc:	f8b7 150c 	ldrh.w	r1, [r7, #1292]	; 0x50c
 8001e00:	482c      	ldr	r0, [pc, #176]	; (8001eb4 <FEB_LTC6811_UART_Transmit_Voltage+0xec>)
 8001e02:	4613      	mov	r3, r2
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	4413      	add	r3, r2
 8001e08:	440b      	add	r3, r1
 8001e0a:	33e8      	adds	r3, #232	; 0xe8
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4403      	add	r3, r0
 8001e10:	3304      	adds	r3, #4
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f207 5204 	addw	r2, r7, #1284	; 0x504
 8001e18:	6013      	str	r3, [r2, #0]

			sprintf(temp_str, " %f", voltage);
 8001e1a:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	f7fe fbb2 	bl	8000588 <__aeabi_f2d>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	1d38      	adds	r0, r7, #4
 8001e2a:	4923      	ldr	r1, [pc, #140]	; (8001eb8 <FEB_LTC6811_UART_Transmit_Voltage+0xf0>)
 8001e2c:	f007 ffda 	bl	8009de4 <siprintf>
			strncat(UART_str, temp_str, strlen(temp_str));
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fa3c 	bl	80002b0 <strlen>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	1d39      	adds	r1, r7, #4
 8001e3c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001e40:	4618      	mov	r0, r3
 8001e42:	f008 f89f 	bl	8009f84 <strncat>
		for (uint16_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8001e46:	f8b7 350c 	ldrh.w	r3, [r7, #1292]	; 0x50c
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	f8a7 350c 	strh.w	r3, [r7, #1292]	; 0x50c
 8001e50:	f8b7 350c 	ldrh.w	r3, [r7, #1292]	; 0x50c
 8001e54:	2b10      	cmp	r3, #16
 8001e56:	d9cf      	bls.n	8001df8 <FEB_LTC6811_UART_Transmit_Voltage+0x30>
		}

		// Add '\n' to {@code UART_Str}
		sprintf(temp_str, "\n");
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	4918      	ldr	r1, [pc, #96]	; (8001ebc <FEB_LTC6811_UART_Transmit_Voltage+0xf4>)
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f007 ffc1 	bl	8009de4 <siprintf>
		strncat(UART_str, temp_str, strlen(temp_str));
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fa23 	bl	80002b0 <strlen>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	1d39      	adds	r1, r7, #4
 8001e6e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001e72:	4618      	mov	r0, r3
 8001e74:	f008 f886 	bl	8009f84 <strncat>

		HAL_UART_Transmit(&huart2, (uint8_t*) UART_str, strlen(UART_str), 100);
 8001e78:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fa17 	bl	80002b0 <strlen>
 8001e82:	4603      	mov	r3, r0
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8001e8a:	2364      	movs	r3, #100	; 0x64
 8001e8c:	480c      	ldr	r0, [pc, #48]	; (8001ec0 <FEB_LTC6811_UART_Transmit_Voltage+0xf8>)
 8001e8e:	f006 ff12 	bl	8008cb6 <HAL_UART_Transmit>
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8001e92:	f897 350f 	ldrb.w	r3, [r7, #1295]	; 0x50f
 8001e96:	3301      	adds	r3, #1
 8001e98:	f887 350f 	strb.w	r3, [r7, #1295]	; 0x50f
 8001e9c:	f897 350f 	ldrb.w	r3, [r7, #1295]	; 0x50f
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	d99c      	bls.n	8001dde <FEB_LTC6811_UART_Transmit_Voltage+0x16>
	}
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	f507 67a2 	add.w	r7, r7, #1296	; 0x510
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	0800c3e0 	.word	0x0800c3e0
 8001eb4:	20002694 	.word	0x20002694
 8001eb8:	0800c3e8 	.word	0x0800c3e8
 8001ebc:	0800c374 	.word	0x0800c374
 8001ec0:	20003204 	.word	0x20003204

08001ec4 <FEB_LTC6811_Total_Bank_Voltage>:

float FEB_LTC6811_Total_Bank_Voltage(void) {
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
	float total_voltage = 0;
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	607b      	str	r3, [r7, #4]

	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	70fb      	strb	r3, [r7, #3]
 8001ed4:	e01e      	b.n	8001f14 <FEB_LTC6811_Total_Bank_Voltage+0x50>
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	70bb      	strb	r3, [r7, #2]
 8001eda:	e015      	b.n	8001f08 <FEB_LTC6811_Total_Bank_Voltage+0x44>
			total_voltage += accumulator.banks[bank_idx].cells[cell_idx].voltage;
 8001edc:	78fa      	ldrb	r2, [r7, #3]
 8001ede:	78b9      	ldrb	r1, [r7, #2]
 8001ee0:	4813      	ldr	r0, [pc, #76]	; (8001f30 <FEB_LTC6811_Total_Bank_Voltage+0x6c>)
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	4413      	add	r3, r2
 8001ee8:	440b      	add	r3, r1
 8001eea:	33e8      	adds	r3, #232	; 0xe8
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4403      	add	r3, r0
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	edd3 7a00 	vldr	s15, [r3]
 8001ef6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001efe:	edc7 7a01 	vstr	s15, [r7, #4]
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8001f02:	78bb      	ldrb	r3, [r7, #2]
 8001f04:	3301      	adds	r3, #1
 8001f06:	70bb      	strb	r3, [r7, #2]
 8001f08:	78bb      	ldrb	r3, [r7, #2]
 8001f0a:	2b10      	cmp	r3, #16
 8001f0c:	d9e6      	bls.n	8001edc <FEB_LTC6811_Total_Bank_Voltage+0x18>
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	3301      	adds	r3, #1
 8001f12:	70fb      	strb	r3, [r7, #3]
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d9dd      	bls.n	8001ed6 <FEB_LTC6811_Total_Bank_Voltage+0x12>
		}
	}

	return total_voltage;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	ee07 3a90 	vmov	s15, r3
}
 8001f20:	eeb0 0a67 	vmov.f32	s0, s15
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	20002694 	.word	0x20002694

08001f34 <FEB_LTC6811_Clear_Voltage>:
		}
	}
	return 0;
}

void FEB_LTC6811_Clear_Voltage(void) {
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	71fb      	strb	r3, [r7, #7]
 8001f3e:	e019      	b.n	8001f74 <FEB_LTC6811_Clear_Voltage+0x40>
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8001f40:	2300      	movs	r3, #0
 8001f42:	71bb      	strb	r3, [r7, #6]
 8001f44:	e010      	b.n	8001f68 <FEB_LTC6811_Clear_Voltage+0x34>
			accumulator.banks[bank_idx].cells[cell_idx].voltage = 0;
 8001f46:	79fa      	ldrb	r2, [r7, #7]
 8001f48:	79b9      	ldrb	r1, [r7, #6]
 8001f4a:	480f      	ldr	r0, [pc, #60]	; (8001f88 <FEB_LTC6811_Clear_Voltage+0x54>)
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	4413      	add	r3, r2
 8001f52:	440b      	add	r3, r1
 8001f54:	33e8      	adds	r3, #232	; 0xe8
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4403      	add	r3, r0
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8001f62:	79bb      	ldrb	r3, [r7, #6]
 8001f64:	3301      	adds	r3, #1
 8001f66:	71bb      	strb	r3, [r7, #6]
 8001f68:	79bb      	ldrb	r3, [r7, #6]
 8001f6a:	2b10      	cmp	r3, #16
 8001f6c:	d9eb      	bls.n	8001f46 <FEB_LTC6811_Clear_Voltage+0x12>
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	3301      	adds	r3, #1
 8001f72:	71fb      	strb	r3, [r7, #7]
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	d9e2      	bls.n	8001f40 <FEB_LTC6811_Clear_Voltage+0xc>
		}
	}
}
 8001f7a:	bf00      	nop
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	20002694 	.word	0x20002694

08001f8c <FEB_LTC6811_Poll_Temperature>:

// ******************** Read Temperature ********************

void FEB_LTC6811_Poll_Temperature(void) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
	for (uint8_t channel = 0; channel <= 4; channel++) {
 8001f92:	2300      	movs	r3, #0
 8001f94:	71fb      	strb	r3, [r7, #7]
 8001f96:	e00e      	b.n	8001fb6 <FEB_LTC6811_Poll_Temperature+0x2a>
		FEB_LTC6811_Update_GPIO(channel);
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 f814 	bl	8001fc8 <FEB_LTC6811_Update_GPIO>
		FEB_LTC6811_Start_GPIO_ADC_Measurement();
 8001fa0:	f000 f880 	bl	80020a4 <FEB_LTC6811_Start_GPIO_ADC_Measurement>
		FEB_LTC6811_Read_Aux_Voltages();
 8001fa4:	f000 f88c 	bl	80020c0 <FEB_LTC6811_Read_Aux_Voltages>
		FEB_LTC6811_Store_Temperature(channel);
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f896 	bl	80020dc <FEB_LTC6811_Store_Temperature>
	for (uint8_t channel = 0; channel <= 4; channel++) {
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	71fb      	strb	r3, [r7, #7]
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d9ed      	bls.n	8001f98 <FEB_LTC6811_Poll_Temperature+0xc>
	}
}
 8001fbc:	bf00      	nop
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <FEB_LTC6811_Update_GPIO>:

void FEB_LTC6811_Update_GPIO(uint8_t channel) {
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b08b      	sub	sp, #44	; 0x2c
 8001fcc:	af06      	add	r7, sp, #24
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
	GPIOBITS_A[0] = 0b1;					// ADC
 8001fd2:	4b2c      	ldr	r3, [pc, #176]	; (8002084 <FEB_LTC6811_Update_GPIO+0xbc>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	701a      	strb	r2, [r3, #0]
	GPIOBITS_A[1] = 0b1;					// ADC
 8001fd8:	4b2a      	ldr	r3, [pc, #168]	; (8002084 <FEB_LTC6811_Update_GPIO+0xbc>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	705a      	strb	r2, [r3, #1]
	GPIOBITS_A[2] = (channel >> 0) & 0b1;	// MUX Select
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	bf14      	ite	ne
 8001fe8:	2301      	movne	r3, #1
 8001fea:	2300      	moveq	r3, #0
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4b25      	ldr	r3, [pc, #148]	; (8002084 <FEB_LTC6811_Update_GPIO+0xbc>)
 8001ff0:	709a      	strb	r2, [r3, #2]
	GPIOBITS_A[3] = (channel >> 1) & 0b1;	// MUX Select
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	085b      	lsrs	r3, r3, #1
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf14      	ite	ne
 8002000:	2301      	movne	r3, #1
 8002002:	2300      	moveq	r3, #0
 8002004:	b2da      	uxtb	r2, r3
 8002006:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <FEB_LTC6811_Update_GPIO+0xbc>)
 8002008:	70da      	strb	r2, [r3, #3]
	GPIOBITS_A[4] = (channel >> 2) & 0b1;	// MUX Select
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	089b      	lsrs	r3, r3, #2
 800200e:	b2db      	uxtb	r3, r3
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	bf14      	ite	ne
 8002018:	2301      	movne	r3, #1
 800201a:	2300      	moveq	r3, #0
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4b19      	ldr	r3, [pc, #100]	; (8002084 <FEB_LTC6811_Update_GPIO+0xbc>)
 8002020:	711a      	strb	r2, [r3, #4]

    wakeup_sleep(NUM_IC);
 8002022:	2008      	movs	r0, #8
 8002024:	f000 fd4b 	bl	8002abe <wakeup_sleep>
    for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 8002028:	2300      	movs	r3, #0
 800202a:	73fb      	strb	r3, [r7, #15]
 800202c:	e01c      	b.n	8002068 <FEB_LTC6811_Update_GPIO+0xa0>
    	FEB_LTC6811_Configure_DCCBITS_A(current_ic);
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fdc5 	bl	8001bc0 <FEB_LTC6811_Configure_DCCBITS_A>
		LTC6811_set_cfgr(current_ic, accumulator.IC_config, REFON, ADCOPT, GPIOBITS_A, DCCBITS_A, DCTOBITS, UV, OV);
 8002036:	4b14      	ldr	r3, [pc, #80]	; (8002088 <FEB_LTC6811_Update_GPIO+0xc0>)
 8002038:	7819      	ldrb	r1, [r3, #0]
 800203a:	4b14      	ldr	r3, [pc, #80]	; (800208c <FEB_LTC6811_Update_GPIO+0xc4>)
 800203c:	781c      	ldrb	r4, [r3, #0]
 800203e:	4b14      	ldr	r3, [pc, #80]	; (8002090 <FEB_LTC6811_Update_GPIO+0xc8>)
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	4a14      	ldr	r2, [pc, #80]	; (8002094 <FEB_LTC6811_Update_GPIO+0xcc>)
 8002044:	8812      	ldrh	r2, [r2, #0]
 8002046:	7bf8      	ldrb	r0, [r7, #15]
 8002048:	9204      	str	r2, [sp, #16]
 800204a:	9303      	str	r3, [sp, #12]
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <FEB_LTC6811_Update_GPIO+0xd0>)
 800204e:	9302      	str	r3, [sp, #8]
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <FEB_LTC6811_Update_GPIO+0xd4>)
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <FEB_LTC6811_Update_GPIO+0xbc>)
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	4623      	mov	r3, r4
 800205a:	460a      	mov	r2, r1
 800205c:	4910      	ldr	r1, [pc, #64]	; (80020a0 <FEB_LTC6811_Update_GPIO+0xd8>)
 800205e:	f000 fcf0 	bl	8002a42 <LTC6811_set_cfgr>
    for (uint8_t current_ic = 0; current_ic < NUM_IC; current_ic++) {
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	3301      	adds	r3, #1
 8002066:	73fb      	strb	r3, [r7, #15]
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	2b07      	cmp	r3, #7
 800206c:	d9df      	bls.n	800202e <FEB_LTC6811_Update_GPIO+0x66>
    }
    wakeup_idle(NUM_IC);
 800206e:	2008      	movs	r0, #8
 8002070:	f000 fd08 	bl	8002a84 <wakeup_idle>
    LTC6811_wrcfg(NUM_IC, accumulator.IC_config);
 8002074:	490a      	ldr	r1, [pc, #40]	; (80020a0 <FEB_LTC6811_Update_GPIO+0xd8>)
 8002076:	2008      	movs	r0, #8
 8002078:	f000 fc5d 	bl	8002936 <LTC6811_wrcfg>
}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	bd90      	pop	{r4, r7, pc}
 8002084:	20000024 	.word	0x20000024
 8002088:	20000021 	.word	0x20000021
 800208c:	20002684 	.word	0x20002684
 8002090:	2000002a 	.word	0x2000002a
 8002094:	2000002c 	.word	0x2000002c
 8002098:	20000030 	.word	0x20000030
 800209c:	20002688 	.word	0x20002688
 80020a0:	20002694 	.word	0x20002694

080020a4 <FEB_LTC6811_Start_GPIO_ADC_Measurement>:

void FEB_LTC6811_Start_GPIO_ADC_Measurement(void) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 80020a8:	2008      	movs	r0, #8
 80020aa:	f000 fd08 	bl	8002abe <wakeup_sleep>
	LTC6811_adax(ADC_CONVERSION_MODE, AUX_CH_TO_CONVERT);
 80020ae:	2100      	movs	r1, #0
 80020b0:	2002      	movs	r0, #2
 80020b2:	f000 fc62 	bl	800297a <LTC6811_adax>
	LTC6811_pollAdc();
 80020b6:	f000 fc9f 	bl	80029f8 <LTC6811_pollAdc>
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <FEB_LTC6811_Read_Aux_Voltages>:

void FEB_LTC6811_Read_Aux_Voltages(void) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
	wakeup_sleep(NUM_IC);
 80020c4:	2008      	movs	r0, #8
 80020c6:	f000 fcfa 	bl	8002abe <wakeup_sleep>
	LTC6811_rdaux(SEL_ALL_REG, NUM_IC, accumulator.IC_config);
 80020ca:	4a03      	ldr	r2, [pc, #12]	; (80020d8 <FEB_LTC6811_Read_Aux_Voltages+0x18>)
 80020cc:	2108      	movs	r1, #8
 80020ce:	2000      	movs	r0, #0
 80020d0:	f000 fc7c 	bl	80029cc <LTC6811_rdaux>
}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20002694 	.word	0x20002694

080020dc <FEB_LTC6811_Store_Temperature>:

void FEB_LTC6811_Store_Temperature(uint8_t channel) {
 80020dc:	b590      	push	{r4, r7, lr}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
    for (uint16_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 80020e6:	2300      	movs	r3, #0
 80020e8:	81fb      	strh	r3, [r7, #14]
 80020ea:	e1cd      	b.n	8002488 <FEB_LTC6811_Store_Temperature+0x3ac>
    	switch (channel) {
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	f200 81c7 	bhi.w	8002482 <FEB_LTC6811_Store_Temperature+0x3a6>
 80020f4:	a201      	add	r2, pc, #4	; (adr r2, 80020fc <FEB_LTC6811_Store_Temperature+0x20>)
 80020f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fa:	bf00      	nop
 80020fc:	08002111 	.word	0x08002111
 8002100:	080021df 	.word	0x080021df
 8002104:	080022ad 	.word	0x080022ad
 8002108:	0800237b 	.word	0x0800237b
 800210c:	0800244d 	.word	0x0800244d
    		case 0:
    			accumulator.banks[bank_idx].cells[12].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 8002110:	89fb      	ldrh	r3, [r7, #14]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4acc      	ldr	r2, [pc, #816]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002116:	21e8      	movs	r1, #232	; 0xe8
 8002118:	fb01 f303 	mul.w	r3, r1, r3
 800211c:	4413      	add	r3, r2
 800211e:	3348      	adds	r3, #72	; 0x48
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	89fc      	ldrh	r4, [r7, #14]
 8002124:	4618      	mov	r0, r3
 8002126:	f000 f9bb 	bl	80024a0 <FEB_LTC6811_Convert_Temperature>
 800212a:	eef0 7a40 	vmov.f32	s15, s0
 800212e:	4ac6      	ldr	r2, [pc, #792]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002130:	4623      	mov	r3, r4
 8002132:	011b      	lsls	r3, r3, #4
 8002134:	4423      	add	r3, r4
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4413      	add	r3, r2
 800213a:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 800213e:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[16].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 8002142:	89fb      	ldrh	r3, [r7, #14]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4ac0      	ldr	r2, [pc, #768]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002148:	21e8      	movs	r1, #232	; 0xe8
 800214a:	fb01 f303 	mul.w	r3, r1, r3
 800214e:	4413      	add	r3, r2
 8002150:	334a      	adds	r3, #74	; 0x4a
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	89fc      	ldrh	r4, [r7, #14]
 8002156:	4618      	mov	r0, r3
 8002158:	f000 f9a2 	bl	80024a0 <FEB_LTC6811_Convert_Temperature>
 800215c:	eef0 7a40 	vmov.f32	s15, s0
 8002160:	4ab9      	ldr	r2, [pc, #740]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002162:	4623      	mov	r3, r4
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	4423      	add	r3, r4
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4413      	add	r3, r2
 800216c:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8002170:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[4].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 8002174:	89fb      	ldrh	r3, [r7, #14]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	3301      	adds	r3, #1
 800217a:	4ab3      	ldr	r2, [pc, #716]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 800217c:	21e8      	movs	r1, #232	; 0xe8
 800217e:	fb01 f303 	mul.w	r3, r1, r3
 8002182:	4413      	add	r3, r2
 8002184:	3348      	adds	r3, #72	; 0x48
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	89fc      	ldrh	r4, [r7, #14]
 800218a:	4618      	mov	r0, r3
 800218c:	f000 f988 	bl	80024a0 <FEB_LTC6811_Convert_Temperature>
 8002190:	eef0 7a40 	vmov.f32	s15, s0
 8002194:	4aac      	ldr	r2, [pc, #688]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002196:	4623      	mov	r3, r4
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	4423      	add	r3, r4
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4413      	add	r3, r2
 80021a0:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80021a4:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[8].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 80021a8:	89fb      	ldrh	r3, [r7, #14]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	3301      	adds	r3, #1
 80021ae:	4aa6      	ldr	r2, [pc, #664]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 80021b0:	21e8      	movs	r1, #232	; 0xe8
 80021b2:	fb01 f303 	mul.w	r3, r1, r3
 80021b6:	4413      	add	r3, r2
 80021b8:	334a      	adds	r3, #74	; 0x4a
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	89fc      	ldrh	r4, [r7, #14]
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 f96e 	bl	80024a0 <FEB_LTC6811_Convert_Temperature>
 80021c4:	eef0 7a40 	vmov.f32	s15, s0
 80021c8:	4a9f      	ldr	r2, [pc, #636]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 80021ca:	4623      	mov	r3, r4
 80021cc:	011b      	lsls	r3, r3, #4
 80021ce:	4423      	add	r3, r4
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 80021d8:	edc3 7a00 	vstr	s15, [r3]
    			break;
 80021dc:	e151      	b.n	8002482 <FEB_LTC6811_Store_Temperature+0x3a6>
    		case 1:
    			accumulator.banks[bank_idx].cells[11].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 80021de:	89fb      	ldrh	r3, [r7, #14]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4a99      	ldr	r2, [pc, #612]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 80021e4:	21e8      	movs	r1, #232	; 0xe8
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	3348      	adds	r3, #72	; 0x48
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	89fc      	ldrh	r4, [r7, #14]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 f954 	bl	80024a0 <FEB_LTC6811_Convert_Temperature>
 80021f8:	eef0 7a40 	vmov.f32	s15, s0
 80021fc:	4a92      	ldr	r2, [pc, #584]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 80021fe:	4623      	mov	r3, r4
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	4423      	add	r3, r4
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	4413      	add	r3, r2
 8002208:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 800220c:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[15].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 8002210:	89fb      	ldrh	r3, [r7, #14]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	4a8c      	ldr	r2, [pc, #560]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002216:	21e8      	movs	r1, #232	; 0xe8
 8002218:	fb01 f303 	mul.w	r3, r1, r3
 800221c:	4413      	add	r3, r2
 800221e:	334a      	adds	r3, #74	; 0x4a
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	89fc      	ldrh	r4, [r7, #14]
 8002224:	4618      	mov	r0, r3
 8002226:	f000 f93b 	bl	80024a0 <FEB_LTC6811_Convert_Temperature>
 800222a:	eef0 7a40 	vmov.f32	s15, s0
 800222e:	4a86      	ldr	r2, [pc, #536]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002230:	4623      	mov	r3, r4
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	4423      	add	r3, r4
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4413      	add	r3, r2
 800223a:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800223e:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[3].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 8002242:	89fb      	ldrh	r3, [r7, #14]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	3301      	adds	r3, #1
 8002248:	4a7f      	ldr	r2, [pc, #508]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 800224a:	21e8      	movs	r1, #232	; 0xe8
 800224c:	fb01 f303 	mul.w	r3, r1, r3
 8002250:	4413      	add	r3, r2
 8002252:	3348      	adds	r3, #72	; 0x48
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	89fc      	ldrh	r4, [r7, #14]
 8002258:	4618      	mov	r0, r3
 800225a:	f000 f921 	bl	80024a0 <FEB_LTC6811_Convert_Temperature>
 800225e:	eef0 7a40 	vmov.f32	s15, s0
 8002262:	4a79      	ldr	r2, [pc, #484]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002264:	4623      	mov	r3, r4
 8002266:	011b      	lsls	r3, r3, #4
 8002268:	4423      	add	r3, r4
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4413      	add	r3, r2
 800226e:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8002272:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[7].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 8002276:	89fb      	ldrh	r3, [r7, #14]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	3301      	adds	r3, #1
 800227c:	4a72      	ldr	r2, [pc, #456]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 800227e:	21e8      	movs	r1, #232	; 0xe8
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	4413      	add	r3, r2
 8002286:	334a      	adds	r3, #74	; 0x4a
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	89fc      	ldrh	r4, [r7, #14]
 800228c:	4618      	mov	r0, r3
 800228e:	f000 f907 	bl	80024a0 <FEB_LTC6811_Convert_Temperature>
 8002292:	eef0 7a40 	vmov.f32	s15, s0
 8002296:	4a6c      	ldr	r2, [pc, #432]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002298:	4623      	mov	r3, r4
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	4423      	add	r3, r4
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 80022a6:	edc3 7a00 	vstr	s15, [r3]
    			break;
 80022aa:	e0ea      	b.n	8002482 <FEB_LTC6811_Store_Temperature+0x3a6>
    		case 2:
    			accumulator.banks[bank_idx].cells[10].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 80022ac:	89fb      	ldrh	r3, [r7, #14]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4a65      	ldr	r2, [pc, #404]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 80022b2:	21e8      	movs	r1, #232	; 0xe8
 80022b4:	fb01 f303 	mul.w	r3, r1, r3
 80022b8:	4413      	add	r3, r2
 80022ba:	3348      	adds	r3, #72	; 0x48
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	89fc      	ldrh	r4, [r7, #14]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 f8ed 	bl	80024a0 <FEB_LTC6811_Convert_Temperature>
 80022c6:	eef0 7a40 	vmov.f32	s15, s0
 80022ca:	4a5f      	ldr	r2, [pc, #380]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 80022cc:	4623      	mov	r3, r4
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	4423      	add	r3, r4
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 80022da:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[14].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 80022de:	89fb      	ldrh	r3, [r7, #14]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4a59      	ldr	r2, [pc, #356]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 80022e4:	21e8      	movs	r1, #232	; 0xe8
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	334a      	adds	r3, #74	; 0x4a
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	89fc      	ldrh	r4, [r7, #14]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 f8d4 	bl	80024a0 <FEB_LTC6811_Convert_Temperature>
 80022f8:	eef0 7a40 	vmov.f32	s15, s0
 80022fc:	4a52      	ldr	r2, [pc, #328]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 80022fe:	4623      	mov	r3, r4
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	4423      	add	r3, r4
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	4413      	add	r3, r2
 8002308:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 800230c:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[2].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 8002310:	89fb      	ldrh	r3, [r7, #14]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	3301      	adds	r3, #1
 8002316:	4a4c      	ldr	r2, [pc, #304]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002318:	21e8      	movs	r1, #232	; 0xe8
 800231a:	fb01 f303 	mul.w	r3, r1, r3
 800231e:	4413      	add	r3, r2
 8002320:	3348      	adds	r3, #72	; 0x48
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	89fc      	ldrh	r4, [r7, #14]
 8002326:	4618      	mov	r0, r3
 8002328:	f000 f8ba 	bl	80024a0 <FEB_LTC6811_Convert_Temperature>
 800232c:	eef0 7a40 	vmov.f32	s15, s0
 8002330:	4a45      	ldr	r2, [pc, #276]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002332:	4623      	mov	r3, r4
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	4423      	add	r3, r4
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4413      	add	r3, r2
 800233c:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 8002340:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[6].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 8002344:	89fb      	ldrh	r3, [r7, #14]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	3301      	adds	r3, #1
 800234a:	4a3f      	ldr	r2, [pc, #252]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 800234c:	21e8      	movs	r1, #232	; 0xe8
 800234e:	fb01 f303 	mul.w	r3, r1, r3
 8002352:	4413      	add	r3, r2
 8002354:	334a      	adds	r3, #74	; 0x4a
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	89fc      	ldrh	r4, [r7, #14]
 800235a:	4618      	mov	r0, r3
 800235c:	f000 f8a0 	bl	80024a0 <FEB_LTC6811_Convert_Temperature>
 8002360:	eef0 7a40 	vmov.f32	s15, s0
 8002364:	4a38      	ldr	r2, [pc, #224]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002366:	4623      	mov	r3, r4
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	4423      	add	r3, r4
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 8002374:	edc3 7a00 	vstr	s15, [r3]
    			break;
 8002378:	e083      	b.n	8002482 <FEB_LTC6811_Store_Temperature+0x3a6>
    		case 3:
    			accumulator.banks[bank_idx].cells[9].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[0]);
 800237a:	89fb      	ldrh	r3, [r7, #14]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4a32      	ldr	r2, [pc, #200]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002380:	21e8      	movs	r1, #232	; 0xe8
 8002382:	fb01 f303 	mul.w	r3, r1, r3
 8002386:	4413      	add	r3, r2
 8002388:	3348      	adds	r3, #72	; 0x48
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	89fc      	ldrh	r4, [r7, #14]
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f886 	bl	80024a0 <FEB_LTC6811_Convert_Temperature>
 8002394:	eef0 7a40 	vmov.f32	s15, s0
 8002398:	4a2b      	ldr	r2, [pc, #172]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 800239a:	4623      	mov	r3, r4
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	4423      	add	r3, r4
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 80023a8:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[13].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2].aux.a_codes[1]);
 80023ac:	89fb      	ldrh	r3, [r7, #14]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4a25      	ldr	r2, [pc, #148]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 80023b2:	21e8      	movs	r1, #232	; 0xe8
 80023b4:	fb01 f303 	mul.w	r3, r1, r3
 80023b8:	4413      	add	r3, r2
 80023ba:	334a      	adds	r3, #74	; 0x4a
 80023bc:	881b      	ldrh	r3, [r3, #0]
 80023be:	89fc      	ldrh	r4, [r7, #14]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 f86d 	bl	80024a0 <FEB_LTC6811_Convert_Temperature>
 80023c6:	eef0 7a40 	vmov.f32	s15, s0
 80023ca:	4a1f      	ldr	r2, [pc, #124]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 80023cc:	4623      	mov	r3, r4
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	4423      	add	r3, r4
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 80023da:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[1].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 80023de:	89fb      	ldrh	r3, [r7, #14]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	3301      	adds	r3, #1
 80023e4:	4a18      	ldr	r2, [pc, #96]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 80023e6:	21e8      	movs	r1, #232	; 0xe8
 80023e8:	fb01 f303 	mul.w	r3, r1, r3
 80023ec:	4413      	add	r3, r2
 80023ee:	3348      	adds	r3, #72	; 0x48
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	89fc      	ldrh	r4, [r7, #14]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 f853 	bl	80024a0 <FEB_LTC6811_Convert_Temperature>
 80023fa:	eef0 7a40 	vmov.f32	s15, s0
 80023fe:	4a12      	ldr	r2, [pc, #72]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002400:	4623      	mov	r3, r4
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	4423      	add	r3, r4
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4413      	add	r3, r2
 800240a:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 800240e:	edc3 7a00 	vstr	s15, [r3]
    			accumulator.banks[bank_idx].cells[5].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[1]);
 8002412:	89fb      	ldrh	r3, [r7, #14]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	3301      	adds	r3, #1
 8002418:	4a0b      	ldr	r2, [pc, #44]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 800241a:	21e8      	movs	r1, #232	; 0xe8
 800241c:	fb01 f303 	mul.w	r3, r1, r3
 8002420:	4413      	add	r3, r2
 8002422:	334a      	adds	r3, #74	; 0x4a
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	89fc      	ldrh	r4, [r7, #14]
 8002428:	4618      	mov	r0, r3
 800242a:	f000 f839 	bl	80024a0 <FEB_LTC6811_Convert_Temperature>
 800242e:	eef0 7a40 	vmov.f32	s15, s0
 8002432:	4a05      	ldr	r2, [pc, #20]	; (8002448 <FEB_LTC6811_Store_Temperature+0x36c>)
 8002434:	4623      	mov	r3, r4
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	4423      	add	r3, r4
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	4413      	add	r3, r2
 800243e:	f503 63ed 	add.w	r3, r3, #1896	; 0x768
 8002442:	edc3 7a00 	vstr	s15, [r3]
    			break;
 8002446:	e01c      	b.n	8002482 <FEB_LTC6811_Store_Temperature+0x3a6>
 8002448:	20002694 	.word	0x20002694
    		case 4:
    			accumulator.banks[bank_idx].cells[0].temperature = FEB_LTC6811_Convert_Temperature(accumulator.IC_config[bank_idx * 2 + 1].aux.a_codes[0]);
 800244c:	89fb      	ldrh	r3, [r7, #14]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	3301      	adds	r3, #1
 8002452:	4a12      	ldr	r2, [pc, #72]	; (800249c <FEB_LTC6811_Store_Temperature+0x3c0>)
 8002454:	21e8      	movs	r1, #232	; 0xe8
 8002456:	fb01 f303 	mul.w	r3, r1, r3
 800245a:	4413      	add	r3, r2
 800245c:	3348      	adds	r3, #72	; 0x48
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	89fc      	ldrh	r4, [r7, #14]
 8002462:	4618      	mov	r0, r3
 8002464:	f000 f81c 	bl	80024a0 <FEB_LTC6811_Convert_Temperature>
 8002468:	eef0 7a40 	vmov.f32	s15, s0
 800246c:	4a0b      	ldr	r2, [pc, #44]	; (800249c <FEB_LTC6811_Store_Temperature+0x3c0>)
 800246e:	4623      	mov	r3, r4
 8002470:	011b      	lsls	r3, r3, #4
 8002472:	4423      	add	r3, r4
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4413      	add	r3, r2
 8002478:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 800247c:	edc3 7a00 	vstr	s15, [r3]
    			break;
 8002480:	bf00      	nop
    for (uint16_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8002482:	89fb      	ldrh	r3, [r7, #14]
 8002484:	3301      	adds	r3, #1
 8002486:	81fb      	strh	r3, [r7, #14]
 8002488:	89fb      	ldrh	r3, [r7, #14]
 800248a:	2b03      	cmp	r3, #3
 800248c:	f67f ae2e 	bls.w	80020ec <FEB_LTC6811_Store_Temperature+0x10>
    	}
    }
}
 8002490:	bf00      	nop
 8002492:	bf00      	nop
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	bd90      	pop	{r4, r7, pc}
 800249a:	bf00      	nop
 800249c:	20002694 	.word	0x20002694

080024a0 <FEB_LTC6811_Convert_Temperature>:

/*
 * @param value := Voltage (100uV) from LTC6811
 */
float FEB_LTC6811_Convert_Temperature(uint16_t value) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	80fb      	strh	r3, [r7, #6]
	// Check for error: value = 2^16 - 1
	if (value == 65535) {
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d102      	bne.n	80024ba <FEB_LTC6811_Convert_Temperature+0x1a>
		return -42;
 80024b4:	eddf 7a10 	vldr	s15, [pc, #64]	; 80024f8 <FEB_LTC6811_Convert_Temperature+0x58>
 80024b8:	e015      	b.n	80024e6 <FEB_LTC6811_Convert_Temperature+0x46>
	}
	//return value * 0.0001;
	return FEB_LTC6811_Temp_LUT_Get_Temperature(value * 0.0001);
 80024ba:	88fb      	ldrh	r3, [r7, #6]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe f851 	bl	8000564 <__aeabi_i2d>
 80024c2:	a30b      	add	r3, pc, #44	; (adr r3, 80024f0 <FEB_LTC6811_Convert_Temperature+0x50>)
 80024c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c8:	f7fe f8b6 	bl	8000638 <__aeabi_dmul>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4610      	mov	r0, r2
 80024d2:	4619      	mov	r1, r3
 80024d4:	f7fe fba8 	bl	8000c28 <__aeabi_d2f>
 80024d8:	4603      	mov	r3, r0
 80024da:	ee00 3a10 	vmov	s0, r3
 80024de:	f000 f933 	bl	8002748 <FEB_LTC6811_Temp_LUT_Get_Temperature>
 80024e2:	eef0 7a40 	vmov.f32	s15, s0
}
 80024e6:	eeb0 0a67 	vmov.f32	s0, s15
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	eb1c432d 	.word	0xeb1c432d
 80024f4:	3f1a36e2 	.word	0x3f1a36e2
 80024f8:	c2280000 	.word	0xc2280000

080024fc <FEB_LTC6811_Validate_Temperature>:

// ******************** Temperature Interface ********************

void FEB_LTC6811_Validate_Temperature(void) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
	if (FEB_BMS_Shutdown_State == 1) {
 8002502:	4b32      	ldr	r3, [pc, #200]	; (80025cc <FEB_LTC6811_Validate_Temperature+0xd0>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d05b      	beq.n	80025c2 <FEB_LTC6811_Validate_Temperature+0xc6>
		return;
	}
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 800250a:	2300      	movs	r3, #0
 800250c:	73fb      	strb	r3, [r7, #15]
 800250e:	e054      	b.n	80025ba <FEB_LTC6811_Validate_Temperature+0xbe>
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8002510:	2300      	movs	r3, #0
 8002512:	73bb      	strb	r3, [r7, #14]
 8002514:	e04b      	b.n	80025ae <FEB_LTC6811_Validate_Temperature+0xb2>
			float temperature = accumulator.banks[bank_idx].cells[cell_idx].temperature;
 8002516:	7bfa      	ldrb	r2, [r7, #15]
 8002518:	7bb9      	ldrb	r1, [r7, #14]
 800251a:	482d      	ldr	r0, [pc, #180]	; (80025d0 <FEB_LTC6811_Validate_Temperature+0xd4>)
 800251c:	4613      	mov	r3, r2
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	4413      	add	r3, r2
 8002522:	440b      	add	r3, r1
 8002524:	33e8      	adds	r3, #232	; 0xe8
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4403      	add	r3, r0
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	60bb      	str	r3, [r7, #8]
			if (fabs(temperature - -42.0f) < 0.1f || fabs(temperature  - -41.0f) < 0.1f) {
 800252e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002532:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80025d4 <FEB_LTC6811_Validate_Temperature+0xd8>
 8002536:	ee77 7a87 	vadd.f32	s15, s15, s14
 800253a:	eef0 7ae7 	vabs.f32	s15, s15
 800253e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80025d8 <FEB_LTC6811_Validate_Temperature+0xdc>
 8002542:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254a:	d42c      	bmi.n	80025a6 <FEB_LTC6811_Validate_Temperature+0xaa>
 800254c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002550:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80025dc <FEB_LTC6811_Validate_Temperature+0xe0>
 8002554:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002558:	eef0 7ae7 	vabs.f32	s15, s15
 800255c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80025d8 <FEB_LTC6811_Validate_Temperature+0xdc>
 8002560:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002568:	d41d      	bmi.n	80025a6 <FEB_LTC6811_Validate_Temperature+0xaa>
			  // TK: override error code, might want to disable this after fixing the segments
			  continue;
			}
			float min_temperature = FEB_LTC6811_CELL_MIN_OPERATION_TEMPERATURE;
 800256a:	4b1d      	ldr	r3, [pc, #116]	; (80025e0 <FEB_LTC6811_Validate_Temperature+0xe4>)
 800256c:	607b      	str	r3, [r7, #4]
			float max_temperature = FEB_LTC6811_CELL_MAX_OPERATION_TEMPERATURE;
 800256e:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <FEB_LTC6811_Validate_Temperature+0xe8>)
 8002570:	603b      	str	r3, [r7, #0]
			if (FEB_CAN_CHARGER_STATE == 1) {
				min_temperature = FEB_LTC6811_CELL_MIN_CHARGING_TEMPERATURE;
				max_temperature = FEB_LTC6811_CELL_MAX_CHARGING_TEMPERATURE;
			}
			if (temperature < min_temperature) {
 8002572:	ed97 7a02 	vldr	s14, [r7, #8]
 8002576:	edd7 7a01 	vldr	s15, [r7, #4]
 800257a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800257e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002582:	d503      	bpl.n	800258c <FEB_LTC6811_Validate_Temperature+0x90>
				FEB_BMS_Shutdown_Initiate("Module under temperature");
 8002584:	4818      	ldr	r0, [pc, #96]	; (80025e8 <FEB_LTC6811_Validate_Temperature+0xec>)
 8002586:	f7fe fd41 	bl	800100c <FEB_BMS_Shutdown_Initiate>
 800258a:	e00d      	b.n	80025a8 <FEB_LTC6811_Validate_Temperature+0xac>
			} else if (temperature > max_temperature) {
 800258c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002590:	edd7 7a00 	vldr	s15, [r7]
 8002594:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259c:	dd04      	ble.n	80025a8 <FEB_LTC6811_Validate_Temperature+0xac>
				FEB_BMS_Shutdown_Initiate("Module over temperature");
 800259e:	4813      	ldr	r0, [pc, #76]	; (80025ec <FEB_LTC6811_Validate_Temperature+0xf0>)
 80025a0:	f7fe fd34 	bl	800100c <FEB_BMS_Shutdown_Initiate>
 80025a4:	e000      	b.n	80025a8 <FEB_LTC6811_Validate_Temperature+0xac>
			  continue;
 80025a6:	bf00      	nop
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 80025a8:	7bbb      	ldrb	r3, [r7, #14]
 80025aa:	3301      	adds	r3, #1
 80025ac:	73bb      	strb	r3, [r7, #14]
 80025ae:	7bbb      	ldrb	r3, [r7, #14]
 80025b0:	2b10      	cmp	r3, #16
 80025b2:	d9b0      	bls.n	8002516 <FEB_LTC6811_Validate_Temperature+0x1a>
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	3301      	adds	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d9a7      	bls.n	8002510 <FEB_LTC6811_Validate_Temperature+0x14>
 80025c0:	e000      	b.n	80025c4 <FEB_LTC6811_Validate_Temperature+0xc8>
		return;
 80025c2:	bf00      	nop
			}
		}
	}
}
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	200025cc 	.word	0x200025cc
 80025d0:	20002694 	.word	0x20002694
 80025d4:	42280000 	.word	0x42280000
 80025d8:	3dcccccd 	.word	0x3dcccccd
 80025dc:	42240000 	.word	0x42240000
 80025e0:	c1a00000 	.word	0xc1a00000
 80025e4:	42700000 	.word	0x42700000
 80025e8:	0800c3ec 	.word	0x0800c3ec
 80025ec:	0800c408 	.word	0x0800c408

080025f0 <FEB_LTC6811_UART_Transmit_Temperature>:

void FEB_LTC6811_UART_Transmit_Temperature() {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	f5ad 6da2 	sub.w	sp, sp, #1296	; 0x510
 80025f6:	af00      	add	r7, sp, #0
	char UART_Str[1024];
	char temp_str[256];

	uint8_t uart_temp_id = 1;
 80025f8:	2301      	movs	r3, #1
 80025fa:	f887 350b 	strb.w	r3, [r7, #1291]	; 0x50b

	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 80025fe:	2300      	movs	r3, #0
 8002600:	f887 350f 	strb.w	r3, [r7, #1295]	; 0x50f
 8002604:	e05d      	b.n	80026c2 <FEB_LTC6811_UART_Transmit_Temperature+0xd2>
		// Add bank_idx, cell_idx to {@code UART_Str}
		sprintf(UART_Str, "%d %d", uart_temp_id, bank_idx);
 8002606:	f897 250b 	ldrb.w	r2, [r7, #1291]	; 0x50b
 800260a:	f897 350f 	ldrb.w	r3, [r7, #1295]	; 0x50f
 800260e:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8002612:	4931      	ldr	r1, [pc, #196]	; (80026d8 <FEB_LTC6811_UART_Transmit_Temperature+0xe8>)
 8002614:	f007 fbe6 	bl	8009de4 <siprintf>


		// Add values to {@code UART_Str}
		for (uint16_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8002618:	2300      	movs	r3, #0
 800261a:	f8a7 350c 	strh.w	r3, [r7, #1292]	; 0x50c
 800261e:	e02a      	b.n	8002676 <FEB_LTC6811_UART_Transmit_Temperature+0x86>
			float temperature = accumulator.banks[bank_idx].cells[cell_idx].temperature;
 8002620:	f897 250f 	ldrb.w	r2, [r7, #1295]	; 0x50f
 8002624:	f8b7 150c 	ldrh.w	r1, [r7, #1292]	; 0x50c
 8002628:	482c      	ldr	r0, [pc, #176]	; (80026dc <FEB_LTC6811_UART_Transmit_Temperature+0xec>)
 800262a:	4613      	mov	r3, r2
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	4413      	add	r3, r2
 8002630:	440b      	add	r3, r1
 8002632:	33e8      	adds	r3, #232	; 0xe8
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4403      	add	r3, r0
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f207 5204 	addw	r2, r7, #1284	; 0x504
 800263e:	6013      	str	r3, [r2, #0]

			sprintf(temp_str, " %f", temperature);
 8002640:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	f7fd ff9f 	bl	8000588 <__aeabi_f2d>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	1d38      	adds	r0, r7, #4
 8002650:	4923      	ldr	r1, [pc, #140]	; (80026e0 <FEB_LTC6811_UART_Transmit_Temperature+0xf0>)
 8002652:	f007 fbc7 	bl	8009de4 <siprintf>
			strncat(UART_Str, temp_str, strlen(temp_str));
 8002656:	1d3b      	adds	r3, r7, #4
 8002658:	4618      	mov	r0, r3
 800265a:	f7fd fe29 	bl	80002b0 <strlen>
 800265e:	4602      	mov	r2, r0
 8002660:	1d39      	adds	r1, r7, #4
 8002662:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002666:	4618      	mov	r0, r3
 8002668:	f007 fc8c 	bl	8009f84 <strncat>
		for (uint16_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 800266c:	f8b7 350c 	ldrh.w	r3, [r7, #1292]	; 0x50c
 8002670:	3301      	adds	r3, #1
 8002672:	f8a7 350c 	strh.w	r3, [r7, #1292]	; 0x50c
 8002676:	f8b7 350c 	ldrh.w	r3, [r7, #1292]	; 0x50c
 800267a:	2b10      	cmp	r3, #16
 800267c:	d9d0      	bls.n	8002620 <FEB_LTC6811_UART_Transmit_Temperature+0x30>
		}

		// Add '\n' to {@code UART_Str}
		sprintf(temp_str, "\n");
 800267e:	1d3b      	adds	r3, r7, #4
 8002680:	4918      	ldr	r1, [pc, #96]	; (80026e4 <FEB_LTC6811_UART_Transmit_Temperature+0xf4>)
 8002682:	4618      	mov	r0, r3
 8002684:	f007 fbae 	bl	8009de4 <siprintf>
		strncat(UART_Str, temp_str, strlen(temp_str));
 8002688:	1d3b      	adds	r3, r7, #4
 800268a:	4618      	mov	r0, r3
 800268c:	f7fd fe10 	bl	80002b0 <strlen>
 8002690:	4602      	mov	r2, r0
 8002692:	1d39      	adds	r1, r7, #4
 8002694:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002698:	4618      	mov	r0, r3
 800269a:	f007 fc73 	bl	8009f84 <strncat>
		HAL_UART_Transmit(&huart2, (uint8_t*) UART_Str, strlen(UART_Str), 100);
 800269e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fd fe04 	bl	80002b0 <strlen>
 80026a8:	4603      	mov	r3, r0
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	f507 7182 	add.w	r1, r7, #260	; 0x104
 80026b0:	2364      	movs	r3, #100	; 0x64
 80026b2:	480d      	ldr	r0, [pc, #52]	; (80026e8 <FEB_LTC6811_UART_Transmit_Temperature+0xf8>)
 80026b4:	f006 faff 	bl	8008cb6 <HAL_UART_Transmit>
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 80026b8:	f897 350f 	ldrb.w	r3, [r7, #1295]	; 0x50f
 80026bc:	3301      	adds	r3, #1
 80026be:	f887 350f 	strb.w	r3, [r7, #1295]	; 0x50f
 80026c2:	f897 350f 	ldrb.w	r3, [r7, #1295]	; 0x50f
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d99d      	bls.n	8002606 <FEB_LTC6811_UART_Transmit_Temperature+0x16>
	}
}
 80026ca:	bf00      	nop
 80026cc:	bf00      	nop
 80026ce:	f507 67a2 	add.w	r7, r7, #1296	; 0x510
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	0800c3e0 	.word	0x0800c3e0
 80026dc:	20002694 	.word	0x20002694
 80026e0:	0800c3e8 	.word	0x0800c3e8
 80026e4:	0800c374 	.word	0x0800c374
 80026e8:	20003204 	.word	0x20003204

080026ec <FEB_LTC6811_Clear_Temperature>:

void FEB_LTC6811_Clear_Temperature(void) {
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 80026f2:	2300      	movs	r3, #0
 80026f4:	71fb      	strb	r3, [r7, #7]
 80026f6:	e018      	b.n	800272a <FEB_LTC6811_Clear_Temperature+0x3e>
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 80026f8:	2300      	movs	r3, #0
 80026fa:	71bb      	strb	r3, [r7, #6]
 80026fc:	e00f      	b.n	800271e <FEB_LTC6811_Clear_Temperature+0x32>
			accumulator.banks[bank_idx].cells[cell_idx].temperature = 0;
 80026fe:	79fa      	ldrb	r2, [r7, #7]
 8002700:	79b9      	ldrb	r1, [r7, #6]
 8002702:	480f      	ldr	r0, [pc, #60]	; (8002740 <FEB_LTC6811_Clear_Temperature+0x54>)
 8002704:	4613      	mov	r3, r2
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	4413      	add	r3, r2
 800270a:	440b      	add	r3, r1
 800270c:	33e8      	adds	r3, #232	; 0xe8
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4403      	add	r3, r0
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
		for (uint8_t cell_idx = 0; cell_idx < FEB_LTC6811_NUM_CELLS_PER_BANK; cell_idx++) {
 8002718:	79bb      	ldrb	r3, [r7, #6]
 800271a:	3301      	adds	r3, #1
 800271c:	71bb      	strb	r3, [r7, #6]
 800271e:	79bb      	ldrb	r3, [r7, #6]
 8002720:	2b10      	cmp	r3, #16
 8002722:	d9ec      	bls.n	80026fe <FEB_LTC6811_Clear_Temperature+0x12>
	for (uint8_t bank_idx = 0; bank_idx < FEB_LTC6811_NUM_BANKS; bank_idx++) {
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	3301      	adds	r3, #1
 8002728:	71fb      	strb	r3, [r7, #7]
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	2b03      	cmp	r3, #3
 800272e:	d9e3      	bls.n	80026f8 <FEB_LTC6811_Clear_Temperature+0xc>
		}
	}
}
 8002730:	bf00      	nop
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20002694 	.word	0x20002694
 8002744:	00000000 	.word	0x00000000

08002748 <FEB_LTC6811_Temp_LUT_Get_Temperature>:

static float FEB_LTC6811_Temp_Map[][2] = {{1.3, 120.0}, {1.301, 119.5}, {1.302, 119.0}, {1.303, 118.5}, {1.304, 118.0}, {1.305, 117.5}, {1.306, 117.0}, {1.307, 116.5}, {1.308, 116.0}, {1.309, 115.5}, {1.31, 115.0}, {1.311, 114.5}, {1.312, 114.0}, {1.313, 113.5}, {1.314, 113.0}, {1.315, 112.5}, {1.316, 112.0}, {1.317, 111.5}, {1.318, 111.0}, {1.319, 110.5}, {1.32, 110.0}, {1.321, 109.5}, {1.322, 109.0}, {1.323, 108.5}, {1.324, 108.0}, {1.325, 107.5}, {1.326, 107.0}, {1.327, 106.5}, {1.328, 106.0}, {1.329, 105.5}, {1.33, 105.0}, {1.331, 104.5}, {1.332, 104.0}, {1.333, 103.5}, {1.334, 103.0}, {1.335, 102.5}, {1.336, 102.0}, {1.337, 101.5}, {1.338, 101.0}, {1.339, 100.5}, {1.34, 100.0}, {1.341, 99.5}, {1.342, 99.0}, {1.343, 98.5}, {1.344, 98.0}, {1.345, 97.5}, {1.346, 97.0}, {1.347, 96.5}, {1.348, 96.0}, {1.349, 95.5}, {1.35, 95.0}, {1.351, 94.75}, {1.352, 94.5}, {1.353, 94.25}, {1.354, 94.0}, {1.355, 93.75}, {1.356, 93.5}, {1.357, 93.25}, {1.358, 93.0}, {1.359, 92.75}, {1.36, 92.5}, {1.361, 92.25}, {1.362, 92.0}, {1.363, 91.75}, {1.364, 91.5}, {1.365, 91.25}, {1.366, 91.0}, {1.367, 90.75}, {1.368, 90.5}, {1.369, 90.25}, {1.37, 90.0}, {1.371, 89.5}, {1.372, 89.0}, {1.373, 88.5}, {1.374, 88.0}, {1.375, 87.5}, {1.376, 87.0}, {1.377, 86.5}, {1.378, 86.0}, {1.379, 85.5}, {1.38, 85.0}, {1.381, 84.75}, {1.382, 84.5}, {1.383, 84.25}, {1.384, 84.0}, {1.385, 83.75}, {1.386, 83.5}, {1.387, 83.25}, {1.388, 83.0}, {1.389, 82.75}, {1.39, 82.5}, {1.391, 82.25}, {1.392, 82.0}, {1.393, 81.75}, {1.394, 81.5}, {1.395, 81.25}, {1.396, 81.0}, {1.397, 80.75}, {1.398, 80.5}, {1.399, 80.25}, {1.4, 80.0}, {1.401, 79.8333}, {1.402, 79.6667}, {1.403, 79.5}, {1.404, 79.3333}, {1.405, 79.1667}, {1.406, 79.0}, {1.407, 78.8333}, {1.408, 78.6667}, {1.409, 78.5}, {1.41, 78.3333}, {1.411, 78.1667}, {1.412, 78.0}, {1.413, 77.8333}, {1.414, 77.6667}, {1.415, 77.5}, {1.416, 77.3333}, {1.417, 77.1667}, {1.418, 77.0}, {1.419, 76.8333}, {1.42, 76.6667}, {1.421, 76.5}, {1.422, 76.3333}, {1.423, 76.1667}, {1.424, 76.0}, {1.425, 75.8333}, {1.426, 75.6667}, {1.427, 75.5}, {1.428, 75.3333}, {1.429, 75.1667}, {1.43, 75.0}, {1.431, 74.75}, {1.432, 74.5}, {1.433, 74.25}, {1.434, 74.0}, {1.435, 73.75}, {1.436, 73.5}, {1.437, 73.25}, {1.438, 73.0}, {1.439, 72.75}, {1.44, 72.5}, {1.441, 72.25}, {1.442, 72.0}, {1.443, 71.75}, {1.444, 71.5}, {1.445, 71.25}, {1.446, 71.0}, {1.447, 70.75}, {1.448, 70.5}, {1.449, 70.25}, {1.45, 70.0}, {1.451, 69.8333}, {1.452, 69.6667}, {1.453, 69.5}, {1.454, 69.3333}, {1.455, 69.1667}, {1.456, 69.0}, {1.457, 68.8333}, {1.458, 68.6667}, {1.459, 68.5}, {1.46, 68.3333}, {1.461, 68.1667}, {1.462, 68.0}, {1.463, 67.8333}, {1.464, 67.6667}, {1.465, 67.5}, {1.466, 67.3333}, {1.467, 67.1667}, {1.468, 67.0}, {1.469, 66.8333}, {1.47, 66.6667}, {1.471, 66.5}, {1.472, 66.3333}, {1.473, 66.1667}, {1.474, 66.0}, {1.475, 65.8333}, {1.476, 65.6667}, {1.477, 65.5}, {1.478, 65.3333}, {1.479, 65.1667}, {1.48, 65.0}, {1.481, 64.8333}, {1.482, 64.6667}, {1.483, 64.5}, {1.484, 64.3333}, {1.485, 64.1667}, {1.486, 64.0}, {1.487, 63.8333}, {1.488, 63.6667}, {1.489, 63.5}, {1.49, 63.3333}, {1.491, 63.1667}, {1.492, 63.0}, {1.493, 62.8333}, {1.494, 62.6667}, {1.495, 62.5}, {1.496, 62.3333}, {1.497, 62.1667}, {1.498, 62.0}, {1.499, 61.8333}, {1.5, 61.6667}, {1.501, 61.5}, {1.502, 61.3333}, {1.503, 61.1667}, {1.504, 61.0}, {1.505, 60.8333}, {1.506, 60.6667}, {1.507, 60.5}, {1.508, 60.3333}, {1.509, 60.1667}, {1.51, 60.0}, {1.511, 59.875}, {1.512, 59.75}, {1.513, 59.625}, {1.514, 59.5}, {1.515, 59.375}, {1.516, 59.25}, {1.517, 59.125}, {1.518, 59.0}, {1.519, 58.875}, {1.52, 58.75}, {1.521, 58.625}, {1.522, 58.5}, {1.523, 58.375}, {1.524, 58.25}, {1.525, 58.125}, {1.526, 58.0}, {1.527, 57.875}, {1.528, 57.75}, {1.529, 57.625}, {1.53, 57.5}, {1.531, 57.375}, {1.532, 57.25}, {1.533, 57.125}, {1.534, 57.0}, {1.535, 56.875}, {1.536, 56.75}, {1.537, 56.625}, {1.538, 56.5}, {1.539, 56.375}, {1.54, 56.25}, {1.541, 56.125}, {1.542, 56.0}, {1.543, 55.875}, {1.544, 55.75}, {1.545, 55.625}, {1.546, 55.5}, {1.547, 55.375}, {1.548, 55.25}, {1.549, 55.125}, {1.55, 55.0}, {1.551, 54.875}, {1.552, 54.75}, {1.553, 54.625}, {1.554, 54.5}, {1.555, 54.375}, {1.556, 54.25}, {1.557, 54.125}, {1.558, 54.0}, {1.559, 53.875}, {1.56, 53.75}, {1.561, 53.625}, {1.562, 53.5}, {1.563, 53.375}, {1.564, 53.25}, {1.565, 53.125}, {1.566, 53.0}, {1.567, 52.875}, {1.568, 52.75}, {1.569, 52.625}, {1.57, 52.5}, {1.571, 52.375}, {1.572, 52.25}, {1.573, 52.125}, {1.574, 52.0}, {1.575, 51.875}, {1.576, 51.75}, {1.577, 51.625}, {1.578, 51.5}, {1.579, 51.375}, {1.58, 51.25}, {1.581, 51.125}, {1.582, 51.0}, {1.583, 50.875}, {1.584, 50.75}, {1.585, 50.625}, {1.586, 50.5}, {1.587, 50.375}, {1.588, 50.25}, {1.589, 50.125}, {1.59, 50.0}, {1.591, 49.875}, {1.592, 49.75}, {1.593, 49.625}, {1.594, 49.5}, {1.595, 49.375}, {1.596, 49.25}, {1.597, 49.125}, {1.598, 49.0}, {1.599, 48.875}, {1.6, 48.75}, {1.601, 48.625}, {1.602, 48.5}, {1.603, 48.375}, {1.604, 48.25}, {1.605, 48.125}, {1.606, 48.0}, {1.607, 47.875}, {1.608, 47.75}, {1.609, 47.625}, {1.61, 47.5}, {1.611, 47.375}, {1.612, 47.25}, {1.613, 47.125}, {1.614, 47.0}, {1.615, 46.875}, {1.616, 46.75}, {1.617, 46.625}, {1.618, 46.5}, {1.619, 46.375}, {1.62, 46.25}, {1.621, 46.125}, {1.622, 46.0}, {1.623, 45.875}, {1.624, 45.75}, {1.625, 45.625}, {1.626, 45.5}, {1.627, 45.375}, {1.628, 45.25}, {1.629, 45.125}, {1.63, 45.0}, {1.631, 44.9}, {1.632, 44.8}, {1.633, 44.7}, {1.634, 44.6}, {1.635, 44.5}, {1.636, 44.4}, {1.637, 44.3}, {1.638, 44.2}, {1.639, 44.1}, {1.64, 44.0}, {1.641, 43.9}, {1.642, 43.8}, {1.643, 43.7}, {1.644, 43.6}, {1.645, 43.5}, {1.646, 43.4}, {1.647, 43.3}, {1.648, 43.2}, {1.649, 43.1}, {1.65, 43.0}, {1.651, 42.9}, {1.652, 42.8}, {1.653, 42.7}, {1.654, 42.6}, {1.655, 42.5}, {1.656, 42.4}, {1.657, 42.3}, {1.658, 42.2}, {1.659, 42.1}, {1.66, 42.0}, {1.661, 41.9}, {1.662, 41.8}, {1.663, 41.7}, {1.664, 41.6}, {1.665, 41.5}, {1.666, 41.4}, {1.667, 41.3}, {1.668, 41.2}, {1.669, 41.1}, {1.67, 41.0}, {1.671, 40.9}, {1.672, 40.8}, {1.673, 40.7}, {1.674, 40.6}, {1.675, 40.5}, {1.676, 40.4}, {1.677, 40.3}, {1.678, 40.2}, {1.679, 40.1}, {1.68, 40.0}, {1.681, 39.9167}, {1.682, 39.8333}, {1.683, 39.75}, {1.684, 39.6667}, {1.685, 39.5833}, {1.686, 39.5}, {1.687, 39.4167}, {1.688, 39.3333}, {1.689, 39.25}, {1.69, 39.1667}, {1.691, 39.0833}, {1.692, 39.0}, {1.693, 38.9167}, {1.694, 38.8333}, {1.695, 38.75}, {1.696, 38.6667}, {1.697, 38.5833}, {1.698, 38.5}, {1.699, 38.4167}, {1.7, 38.3333}, {1.701, 38.25}, {1.702, 38.1667}, {1.703, 38.0833}, {1.704, 38.0}, {1.705, 37.9167}, {1.706, 37.8333}, {1.707, 37.75}, {1.708, 37.6667}, {1.709, 37.5833}, {1.71, 37.5}, {1.711, 37.4167}, {1.712, 37.3333}, {1.713, 37.25}, {1.714, 37.1667}, {1.715, 37.0833}, {1.716, 37.0}, {1.717, 36.9167}, {1.718, 36.8333}, {1.719, 36.75}, {1.72, 36.6667}, {1.721, 36.5833}, {1.722, 36.5}, {1.723, 36.4167}, {1.724, 36.3333}, {1.725, 36.25}, {1.726, 36.1667}, {1.727, 36.0833}, {1.728, 36.0}, {1.729, 35.9167}, {1.73, 35.8333}, {1.731, 35.75}, {1.732, 35.6667}, {1.733, 35.5833}, {1.734, 35.5}, {1.735, 35.4167}, {1.736, 35.3333}, {1.737, 35.25}, {1.738, 35.1667}, {1.739, 35.0833}, {1.74, 35.0}, {1.741, 34.9167}, {1.742, 34.8333}, {1.743, 34.75}, {1.744, 34.6667}, {1.745, 34.5833}, {1.746, 34.5}, {1.747, 34.4167}, {1.748, 34.3333}, {1.749, 34.25}, {1.75, 34.1667}, {1.751, 34.0833}, {1.752, 34.0}, {1.753, 33.9167}, {1.754, 33.8333}, {1.755, 33.75}, {1.756, 33.6667}, {1.757, 33.5833}, {1.758, 33.5}, {1.759, 33.4167}, {1.76, 33.3333}, {1.761, 33.25}, {1.762, 33.1667}, {1.763, 33.0833}, {1.764, 33.0}, {1.765, 32.9167}, {1.766, 32.8333}, {1.767, 32.75}, {1.768, 32.6667}, {1.769, 32.5833}, {1.77, 32.5}, {1.771, 32.4167}, {1.772, 32.3333}, {1.773, 32.25}, {1.774, 32.1667}, {1.775, 32.0833}, {1.776, 32.0}, {1.777, 31.9167}, {1.778, 31.8333}, {1.779, 31.75}, {1.78, 31.6667}, {1.781, 31.5833}, {1.782, 31.5}, {1.783, 31.4167}, {1.784, 31.3333}, {1.785, 31.25}, {1.786, 31.1667}, {1.787, 31.0833}, {1.788, 31.0}, {1.789, 30.9167}, {1.79, 30.8333}, {1.791, 30.75}, {1.792, 30.6667}, {1.793, 30.5833}, {1.794, 30.5}, {1.795, 30.4167}, {1.796, 30.3333}, {1.797, 30.25}, {1.798, 30.1667}, {1.799, 30.0833}, {1.8, 30.0}, {1.801, 29.9167}, {1.802, 29.8333}, {1.803, 29.75}, {1.804, 29.6667}, {1.805, 29.5833}, {1.806, 29.5}, {1.807, 29.4167}, {1.808, 29.3333}, {1.809, 29.25}, {1.81, 29.1667}, {1.811, 29.0833}, {1.812, 29.0}, {1.813, 28.9167}, {1.814, 28.8333}, {1.815, 28.75}, {1.816, 28.6667}, {1.817, 28.5833}, {1.818, 28.5}, {1.819, 28.4167}, {1.82, 28.3333}, {1.821, 28.25}, {1.822, 28.1667}, {1.823, 28.0833}, {1.824, 28.0}, {1.825, 27.9167}, {1.826, 27.8333}, {1.827, 27.75}, {1.828, 27.6667}, {1.829, 27.5833}, {1.83, 27.5}, {1.831, 27.4167}, {1.832, 27.3333}, {1.833, 27.25}, {1.834, 27.1667}, {1.835, 27.0833}, {1.836, 27.0}, {1.837, 26.9167}, {1.838, 26.8333}, {1.839, 26.75}, {1.84, 26.6667}, {1.841, 26.5833}, {1.842, 26.5}, {1.843, 26.4167}, {1.844, 26.3333}, {1.845, 26.25}, {1.846, 26.1667}, {1.847, 26.0833}, {1.848, 26.0}, {1.849, 25.9167}, {1.85, 25.8333}, {1.851, 25.75}, {1.852, 25.6667}, {1.853, 25.5833}, {1.854, 25.5}, {1.855, 25.4167}, {1.856, 25.3333}, {1.857, 25.25}, {1.858, 25.1667}, {1.859, 25.0833}, {1.86, 25.0}, {1.861, 24.9167}, {1.862, 24.8333}, {1.863, 24.75}, {1.864, 24.6667}, {1.865, 24.5833}, {1.866, 24.5}, {1.867, 24.4167}, {1.868, 24.3333}, {1.869, 24.25}, {1.87, 24.1667}, {1.871, 24.0833}, {1.872, 24.0}, {1.873, 23.9167}, {1.874, 23.8333}, {1.875, 23.75}, {1.876, 23.6667}, {1.877, 23.5833}, {1.878, 23.5}, {1.879, 23.4167}, {1.88, 23.3333}, {1.881, 23.25}, {1.882, 23.1667}, {1.883, 23.0833}, {1.884, 23.0}, {1.885, 22.9167}, {1.886, 22.8333}, {1.887, 22.75}, {1.888, 22.6667}, {1.889, 22.5833}, {1.89, 22.5}, {1.891, 22.4167}, {1.892, 22.3333}, {1.893, 22.25}, {1.894, 22.1667}, {1.895, 22.0833}, {1.896, 22.0}, {1.897, 21.9167}, {1.898, 21.8333}, {1.899, 21.75}, {1.9, 21.6667}, {1.901, 21.5833}, {1.902, 21.5}, {1.903, 21.4167}, {1.904, 21.3333}, {1.905, 21.25}, {1.906, 21.1667}, {1.907, 21.0833}, {1.908, 21.0}, {1.909, 20.9167}, {1.91, 20.8333}, {1.911, 20.75}, {1.912, 20.6667}, {1.913, 20.5833}, {1.914, 20.5}, {1.915, 20.4167}, {1.916, 20.3333}, {1.917, 20.25}, {1.918, 20.1667}, {1.919, 20.0833}, {1.92, 20.0}, {1.921, 19.9286}, {1.922, 19.8571}, {1.923, 19.7857}, {1.924, 19.7143}, {1.925, 19.6429}, {1.926, 19.5714}, {1.927, 19.5}, {1.928, 19.4286}, {1.929, 19.3571}, {1.93, 19.2857}, {1.931, 19.2143}, {1.932, 19.1429}, {1.933, 19.0714}, {1.934, 19.0}, {1.935, 18.9286}, {1.936, 18.8571}, {1.937, 18.7857}, {1.938, 18.7143}, {1.939, 18.6429}, {1.94, 18.5714}, {1.941, 18.5}, {1.942, 18.4286}, {1.943, 18.3571}, {1.944, 18.2857}, {1.945, 18.2143}, {1.946, 18.1429}, {1.947, 18.0714}, {1.948, 18.0}, {1.949, 17.9286}, {1.95, 17.8571}, {1.951, 17.7857}, {1.952, 17.7143}, {1.953, 17.6429}, {1.954, 17.5714}, {1.955, 17.5}, {1.956, 17.4286}, {1.957, 17.3571}, {1.958, 17.2857}, {1.959, 17.2143}, {1.96, 17.1429}, {1.961, 17.0714}, {1.962, 17.0}, {1.963, 16.9286}, {1.964, 16.8571}, {1.965, 16.7857}, {1.966, 16.7143}, {1.967, 16.6429}, {1.968, 16.5714}, {1.969, 16.5}, {1.97, 16.4286}, {1.971, 16.3571}, {1.972, 16.2857}, {1.973, 16.2143}, {1.974, 16.1429}, {1.975, 16.0714}, {1.976, 16.0}, {1.977, 15.9286}, {1.978, 15.8571}, {1.979, 15.7857}, {1.98, 15.7143}, {1.981, 15.6429}, {1.982, 15.5714}, {1.983, 15.5}, {1.984, 15.4286}, {1.985, 15.3571}, {1.986, 15.2857}, {1.987, 15.2143}, {1.988, 15.1429}, {1.989, 15.0714}, {1.99, 15.0}, {1.991, 14.9167}, {1.992, 14.8333}, {1.993, 14.75}, {1.994, 14.6667}, {1.995, 14.5833}, {1.996, 14.5}, {1.997, 14.4167}, {1.998, 14.3333}, {1.999, 14.25}, {2.0, 14.1667}, {2.001, 14.0833}, {2.002, 14.0}, {2.003, 13.9167}, {2.004, 13.8333}, {2.005, 13.75}, {2.006, 13.6667}, {2.007, 13.5833}, {2.008, 13.5}, {2.009, 13.4167}, {2.01, 13.3333}, {2.011, 13.25}, {2.012, 13.1667}, {2.013, 13.0833}, {2.014, 13.0}, {2.015, 12.9167}, {2.016, 12.8333}, {2.017, 12.75}, {2.018, 12.6667}, {2.019, 12.5833}, {2.02, 12.5}, {2.021, 12.4167}, {2.022, 12.3333}, {2.023, 12.25}, {2.024, 12.1667}, {2.025, 12.0833}, {2.026, 12.0}, {2.027, 11.9167}, {2.028, 11.8333}, {2.029, 11.75}, {2.03, 11.6667}, {2.031, 11.5833}, {2.032, 11.5}, {2.033, 11.4167}, {2.034, 11.3333}, {2.035, 11.25}, {2.036, 11.1667}, {2.037, 11.0833}, {2.038, 11.0}, {2.039, 10.9167}, {2.04, 10.8333}, {2.041, 10.75}, {2.042, 10.6667}, {2.043, 10.5833}, {2.044, 10.5}, {2.045, 10.4167}, {2.046, 10.3333}, {2.047, 10.25}, {2.048, 10.1667}, {2.049, 10.0833}, {2.05, 10.0}, {2.051, 9.9167}, {2.052, 9.8333}, {2.053, 9.75}, {2.054, 9.6667}, {2.055, 9.5833}, {2.056, 9.5}, {2.057, 9.4167}, {2.058, 9.3333}, {2.059, 9.25}, {2.06, 9.1667}, {2.061, 9.0833}, {2.062, 9.0}, {2.063, 8.9167}, {2.064, 8.8333}, {2.065, 8.75}, {2.066, 8.6667}, {2.067, 8.5833}, {2.068, 8.5}, {2.069, 8.4167}, {2.07, 8.3333}, {2.071, 8.25}, {2.072, 8.1667}, {2.073, 8.0833}, {2.074, 8.0}, {2.075, 7.9167}, {2.076, 7.8333}, {2.077, 7.75}, {2.078, 7.6667}, {2.079, 7.5833}, {2.08, 7.5}, {2.081, 7.4167}, {2.082, 7.3333}, {2.083, 7.25}, {2.084, 7.1667}, {2.085, 7.0833}, {2.086, 7.0}, {2.087, 6.9167}, {2.088, 6.8333}, {2.089, 6.75}, {2.09, 6.6667}, {2.091, 6.5833}, {2.092, 6.5}, {2.093, 6.4167}, {2.094, 6.3333}, {2.095, 6.25}, {2.096, 6.1667}, {2.097, 6.0833}, {2.098, 6.0}, {2.099, 5.9167}, {2.1, 5.8333}, {2.101, 5.75}, {2.102, 5.6667}, {2.103, 5.5833}, {2.104, 5.5}, {2.105, 5.4167}, {2.106, 5.3333}, {2.107, 5.25}, {2.108, 5.1667}, {2.109, 5.0833}, {2.11, 5.0}, {2.111, 4.9167}, {2.112, 4.8333}, {2.113, 4.75}, {2.114, 4.6667}, {2.115, 4.5833}, {2.116, 4.5}, {2.117, 4.4167}, {2.118, 4.3333}, {2.119, 4.25}, {2.12, 4.1667}, {2.121, 4.0833}, {2.122, 4.0}, {2.123, 3.9167}, {2.124, 3.8333}, {2.125, 3.75}, {2.126, 3.6667}, {2.127, 3.5833}, {2.128, 3.5}, {2.129, 3.4167}, {2.13, 3.3333}, {2.131, 3.25}, {2.132, 3.1667}, {2.133, 3.0833}, {2.134, 3.0}, {2.135, 2.9167}, {2.136, 2.8333}, {2.137, 2.75}, {2.138, 2.6667}, {2.139, 2.5833}, {2.14, 2.5}, {2.141, 2.4167}, {2.142, 2.3333}, {2.143, 2.25}, {2.144, 2.1667}, {2.145, 2.0833}, {2.146, 2.0}, {2.147, 1.9167}, {2.148, 1.8333}, {2.149, 1.75}, {2.15, 1.6667}, {2.151, 1.5833}, {2.152, 1.5}, {2.153, 1.4167}, {2.154, 1.3333}, {2.155, 1.25}, {2.156, 1.1667}, {2.157, 1.0833}, {2.158, 1.0}, {2.159, 0.9167}, {2.16, 0.8333}, {2.161, 0.75}, {2.162, 0.6667}, {2.163, 0.5833}, {2.164, 0.5}, {2.165, 0.4167}, {2.166, 0.3333}, {2.167, 0.25}, {2.168, 0.1667}, {2.169, 0.0833}, {2.17, 0.0}, {2.171, -0.0833}, {2.172, -0.1667}, {2.173, -0.25}, {2.174, -0.3333}, {2.175, -0.4167}, {2.176, -0.5}, {2.177, -0.5833}, {2.178, -0.6667}, {2.179, -0.75}, {2.18, -0.8333}, {2.181, -0.9167}, {2.182, -1.0}, {2.183, -1.0833}, {2.184, -1.1667}, {2.185, -1.25}, {2.186, -1.3333}, {2.187, -1.4167}, {2.188, -1.5}, {2.189, -1.5833}, {2.19, -1.6667}, {2.191, -1.75}, {2.192, -1.8333}, {2.193, -1.9167}, {2.194, -2.0}, {2.195, -2.0833}, {2.196, -2.1667}, {2.197, -2.25}, {2.198, -2.3333}, {2.199, -2.4167}, {2.2, -2.5}, {2.201, -2.5833}, {2.202, -2.6667}, {2.203, -2.75}, {2.204, -2.8333}, {2.205, -2.9167}, {2.206, -3.0}, {2.207, -3.0833}, {2.208, -3.1667}, {2.209, -3.25}, {2.21, -3.3333}, {2.211, -3.4167}, {2.212, -3.5}, {2.213, -3.5833}, {2.214, -3.6667}, {2.215, -3.75}, {2.216, -3.8333}, {2.217, -3.9167}, {2.218, -4.0}, {2.219, -4.0833}, {2.22, -4.1667}, {2.221, -4.25}, {2.222, -4.3333}, {2.223, -4.4167}, {2.224, -4.5}, {2.225, -4.5833}, {2.226, -4.6667}, {2.227, -4.75}, {2.228, -4.8333}, {2.229, -4.9167}, {2.23, -5.0}, {2.231, -5.125}, {2.232, -5.25}, {2.233, -5.375}, {2.234, -5.5}, {2.235, -5.625}, {2.236, -5.75}, {2.237, -5.875}, {2.238, -6.0}, {2.239, -6.125}, {2.24, -6.25}, {2.241, -6.375}, {2.242, -6.5}, {2.243, -6.625}, {2.244, -6.75}, {2.245, -6.875}, {2.246, -7.0}, {2.247, -7.125}, {2.248, -7.25}, {2.249, -7.375}, {2.25, -7.5}, {2.251, -7.625}, {2.252, -7.75}, {2.253, -7.875}, {2.254, -8.0}, {2.255, -8.125}, {2.256, -8.25}, {2.257, -8.375}, {2.258, -8.5}, {2.259, -8.625}, {2.26, -8.75}, {2.261, -8.875}, {2.262, -9.0}, {2.263, -9.125}, {2.264, -9.25}, {2.265, -9.375}, {2.266, -9.5}, {2.267, -9.625}, {2.268, -9.75}, {2.269, -9.875}, {2.27, -10.0}, {2.271, -10.1}, {2.272, -10.2}, {2.273, -10.3}, {2.274, -10.4}, {2.275, -10.5}, {2.276, -10.6}, {2.277, -10.7}, {2.278, -10.8}, {2.279, -10.9}, {2.28, -11.0}, {2.281, -11.1}, {2.282, -11.2}, {2.283, -11.3}, {2.284, -11.4}, {2.285, -11.5}, {2.286, -11.6}, {2.287, -11.7}, {2.288, -11.8}, {2.289, -11.9}, {2.29, -12.0}, {2.291, -12.1}, {2.292, -12.2}, {2.293, -12.3}, {2.294, -12.4}, {2.295, -12.5}, {2.296, -12.6}, {2.297, -12.7}, {2.298, -12.8}, {2.299, -12.9}, {2.3, -13.0}, {2.301, -13.1}, {2.302, -13.2}, {2.303, -13.3}, {2.304, -13.4}, {2.305, -13.5}, {2.306, -13.6}, {2.307, -13.7}, {2.308, -13.8}, {2.309, -13.9}, {2.31, -14.0}, {2.311, -14.1}, {2.312, -14.2}, {2.313, -14.3}, {2.314, -14.4}, {2.315, -14.5}, {2.316, -14.6}, {2.317, -14.7}, {2.318, -14.8}, {2.319, -14.9}, {2.32, -15.0}, {2.321, -15.1667}, {2.322, -15.3333}, {2.323, -15.5}, {2.324, -15.6667}, {2.325, -15.8333}, {2.326, -16.0}, {2.327, -16.1667}, {2.328, -16.3333}, {2.329, -16.5}, {2.33, -16.6667}, {2.331, -16.8333}, {2.332, -17.0}, {2.333, -17.1667}, {2.334, -17.3333}, {2.335, -17.5}, {2.336, -17.6667}, {2.337, -17.8333}, {2.338, -18.0}, {2.339, -18.1667}, {2.34, -18.3333}, {2.341, -18.5}, {2.342, -18.6667}, {2.343, -18.8333}, {2.344, -19.0}, {2.345, -19.1667}, {2.346, -19.3333}, {2.347, -19.5}, {2.348, -19.6667}, {2.349, -19.8333}, {2.35, -20.0}, {2.351, -20.1667}, {2.352, -20.3333}, {2.353, -20.5}, {2.354, -20.6667}, {2.355, -20.8333}, {2.356, -21.0}, {2.357, -21.1667}, {2.358, -21.3333}, {2.359, -21.5}, {2.36, -21.6667}, {2.361, -21.8333}, {2.362, -22.0}, {2.363, -22.1667}, {2.364, -22.3333}, {2.365, -22.5}, {2.366, -22.6667}, {2.367, -22.8333}, {2.368, -23.0}, {2.369, -23.1667}, {2.37, -23.3333}, {2.371, -23.5}, {2.372, -23.6667}, {2.373, -23.8333}, {2.374, -24.0}, {2.375, -24.1667}, {2.376, -24.3333}, {2.377, -24.5}, {2.378, -24.6667}, {2.379, -24.8333}, {2.38, -25.0}, {2.381, -25.25}, {2.382, -25.5}, {2.383, -25.75}, {2.384, -26.0}, {2.385, -26.25}, {2.386, -26.5}, {2.387, -26.75}, {2.388, -27.0}, {2.389, -27.25}, {2.39, -27.5}, {2.391, -27.75}, {2.392, -28.0}, {2.393, -28.25}, {2.394, -28.5}, {2.395, -28.75}, {2.396, -29.0}, {2.397, -29.25}, {2.398, -29.5}, {2.399, -29.75}, {2.4, -30.0}, {2.401, -30.25}, {2.402, -30.5}, {2.403, -30.75}, {2.404, -31.0}, {2.405, -31.25}, {2.406, -31.5}, {2.407, -31.75}, {2.408, -32.0}, {2.409, -32.25}, {2.41, -32.5}, {2.411, -32.75}, {2.412, -33.0}, {2.413, -33.25}, {2.414, -33.5}, {2.415, -33.75}, {2.416, -34.0}, {2.417, -34.25}, {2.418, -34.5}, {2.419, -34.75}, {2.42, -35.0}, {2.421, -35.25}, {2.422, -35.5}, {2.423, -35.75}, {2.424, -36.0}, {2.425, -36.25}, {2.426, -36.5}, {2.427, -36.75}, {2.428, -37.0}, {2.429, -37.25}, {2.43, -37.5}, {2.431, -37.75}, {2.432, -38.0}, {2.433, -38.25}, {2.434, -38.5}, {2.435, -38.75}, {2.436, -39.0}, {2.437, -39.25}, {2.438, -39.5}, {2.439, -39.75}, {2.44, -40.0}};

// ********************************** Functions **********************************

float FEB_LTC6811_Temp_LUT_Get_Temperature(float voltage) {
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (voltage < FEB_LTC6811_TEMP_LUT_MIN_MAP_VOLT || voltage > FEB_LTC6811_TEMP_LUT_MAX_MAP_VOLT) {
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7fd ff18 	bl	8000588 <__aeabi_f2d>
 8002758:	a323      	add	r3, pc, #140	; (adr r3, 80027e8 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xa0>)
 800275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275e:	f7fe f9dd 	bl	8000b1c <__aeabi_dcmplt>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10a      	bne.n	800277e <FEB_LTC6811_Temp_LUT_Get_Temperature+0x36>
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7fd ff0d 	bl	8000588 <__aeabi_f2d>
 800276e:	a324      	add	r3, pc, #144	; (adr r3, 8002800 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xb8>)
 8002770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002774:	f7fe f9f0 	bl	8000b58 <__aeabi_dcmpgt>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <FEB_LTC6811_Temp_LUT_Get_Temperature+0x3a>
		return -41.0;
 800277e:	4b1e      	ldr	r3, [pc, #120]	; (80027f8 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xb0>)
 8002780:	e028      	b.n	80027d4 <FEB_LTC6811_Temp_LUT_Get_Temperature+0x8c>
	}
	uint16_t index = (uint16_t) round((voltage - FEB_LTC6811_TEMP_LUT_MIN_MAP_VOLT) / FEB_LTC6811_TEMP_LUT_RESOLUTION);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7fd ff00 	bl	8000588 <__aeabi_f2d>
 8002788:	a317      	add	r3, pc, #92	; (adr r3, 80027e8 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xa0>)
 800278a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278e:	f7fd fd9b 	bl	80002c8 <__aeabi_dsub>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4610      	mov	r0, r2
 8002798:	4619      	mov	r1, r3
 800279a:	a315      	add	r3, pc, #84	; (adr r3, 80027f0 <FEB_LTC6811_Temp_LUT_Get_Temperature+0xa8>)
 800279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a0:	f7fe f874 	bl	800088c <__aeabi_ddiv>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	ec43 2b17 	vmov	d7, r2, r3
 80027ac:	eeb0 0a47 	vmov.f32	s0, s14
 80027b0:	eef0 0a67 	vmov.f32	s1, s15
 80027b4:	f009 fc82 	bl	800c0bc <round>
 80027b8:	ec53 2b10 	vmov	r2, r3, d0
 80027bc:	4610      	mov	r0, r2
 80027be:	4619      	mov	r1, r3
 80027c0:	f7fe fa12 	bl	8000be8 <__aeabi_d2uiz>
 80027c4:	4603      	mov	r3, r0
 80027c6:	81fb      	strh	r3, [r7, #14]
	return FEB_LTC6811_Temp_Map[index][1];
 80027c8:	89fb      	ldrh	r3, [r7, #14]
 80027ca:	4a0c      	ldr	r2, [pc, #48]	; (80027fc <FEB_LTC6811_Temp_LUT_Get_Temperature+0xb4>)
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4413      	add	r3, r2
 80027d0:	3304      	adds	r3, #4
 80027d2:	681b      	ldr	r3, [r3, #0]
}
 80027d4:	ee07 3a90 	vmov	s15, r3
 80027d8:	eeb0 0a67 	vmov.f32	s0, s15
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	f3af 8000 	nop.w
 80027e8:	cccccccd 	.word	0xcccccccd
 80027ec:	3ff4cccc 	.word	0x3ff4cccc
 80027f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80027f4:	3f50624d 	.word	0x3f50624d
 80027f8:	c2240000 	.word	0xc2240000
 80027fc:	20000034 	.word	0x20000034
 8002800:	b851eb85 	.word	0xb851eb85
 8002804:	4003851e 	.word	0x4003851e

08002808 <FEB_Math_Uint32_To_Signed_Long>:

#include "FEB_Math.h"

// ********************************** Functions **********************************

long FEB_Math_Uint32_To_Signed_Long(uint32_t value) {
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	return (value & 0x7FFFFFFF) - (value & (0b1 << 31));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002816:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <FEB_Math_Uint16_To_Int16>:

int16_t FEB_Math_Uint16_To_Int16(uint16_t value) {
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	4603      	mov	r3, r0
 800282e:	80fb      	strh	r3, [r7, #6]
	return (value & 0x7FFF) - (value & (0b1 << 15));
 8002830:	88fb      	ldrh	r3, [r7, #6]
 8002832:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 8002836:	f483 037f 	eor.w	r3, r3, #16711680	; 0xff0000
 800283a:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 800283e:	b29b      	uxth	r3, r3
 8002840:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002844:	b29b      	uxth	r3, r3
 8002846:	b21b      	sxth	r3, r3
}
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <FEB_Timer_Init>:

extern TIM_HandleTypeDef htim4;

// ********************************** Initialize **********************************

void FEB_Timer_Init(void) {
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim4);
 8002858:	4802      	ldr	r0, [pc, #8]	; (8002864 <FEB_Timer_Init+0x10>)
 800285a:	f005 faed 	bl	8007e38 <HAL_TIM_Base_Start>
}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	200031bc 	.word	0x200031bc

08002868 <FEB_Timer_Delay_Micro>:

// ********************************** Functions **********************************

void FEB_Timer_Delay_Micro(uint16_t delay) {
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <FEB_Timer_Delay_Micro+0x30>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2200      	movs	r2, #0
 8002878:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 800287a:	bf00      	nop
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <FEB_Timer_Delay_Micro+0x30>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002882:	88fb      	ldrh	r3, [r7, #6]
 8002884:	429a      	cmp	r2, r3
 8002886:	d3f9      	bcc.n	800287c <FEB_Timer_Delay_Micro+0x14>
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	200031bc 	.word	0x200031bc

0800289c <LTC6811_init_reg_limits>:

/* Initialize the Register limits */
void LTC6811_init_reg_limits(uint8_t total_ic, //The number of ICs in the system
							cell_asic *ic  //A two dimensional array where data will be written
							)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	6039      	str	r1, [r7, #0]
 80028a6:	71fb      	strb	r3, [r7, #7]
  for (uint8_t cic=0; cic<total_ic; cic++)
 80028a8:	2300      	movs	r3, #0
 80028aa:	73fb      	strb	r3, [r7, #15]
 80028ac:	e038      	b.n	8002920 <LTC6811_init_reg_limits+0x84>
  {
    ic[cic].ic_reg.cell_channels=12;
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	22e8      	movs	r2, #232	; 0xe8
 80028b2:	fb02 f303 	mul.w	r3, r2, r3
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	4413      	add	r3, r2
 80028ba:	220c      	movs	r2, #12
 80028bc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    ic[cic].ic_reg.stat_channels=4;
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	22e8      	movs	r2, #232	; 0xe8
 80028c4:	fb02 f303 	mul.w	r3, r2, r3
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	4413      	add	r3, r2
 80028cc:	2204      	movs	r2, #4
 80028ce:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    ic[cic].ic_reg.aux_channels=6;
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
 80028d4:	22e8      	movs	r2, #232	; 0xe8
 80028d6:	fb02 f303 	mul.w	r3, r2, r3
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	4413      	add	r3, r2
 80028de:	2206      	movs	r2, #6
 80028e0:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
    ic[cic].ic_reg.num_cv_reg=4;
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	22e8      	movs	r2, #232	; 0xe8
 80028e8:	fb02 f303 	mul.w	r3, r2, r3
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	4413      	add	r3, r2
 80028f0:	2204      	movs	r2, #4
 80028f2:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
    ic[cic].ic_reg.num_gpio_reg=2;
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	22e8      	movs	r2, #232	; 0xe8
 80028fa:	fb02 f303 	mul.w	r3, r2, r3
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	4413      	add	r3, r2
 8002902:	2202      	movs	r2, #2
 8002904:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    ic[cic].ic_reg.num_stat_reg=3;
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	22e8      	movs	r2, #232	; 0xe8
 800290c:	fb02 f303 	mul.w	r3, r2, r3
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	4413      	add	r3, r2
 8002914:	2203      	movs	r2, #3
 8002916:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
  for (uint8_t cic=0; cic<total_ic; cic++)
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	3301      	adds	r3, #1
 800291e:	73fb      	strb	r3, [r7, #15]
 8002920:	7bfa      	ldrb	r2, [r7, #15]
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	429a      	cmp	r2, r3
 8002926:	d3c2      	bcc.n	80028ae <LTC6811_init_reg_limits+0x12>
  }
}
 8002928:	bf00      	nop
 800292a:	bf00      	nop
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <LTC6811_wrcfg>:
order so the last device's configuration is written first.
*/
void LTC6811_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic *ic //A two dimensional array of the configuration data that will be written
                  )
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	4603      	mov	r3, r0
 800293e:	6039      	str	r1, [r7, #0]
 8002940:	71fb      	strb	r3, [r7, #7]
  LTC681x_wrcfg(total_ic,ic);
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	6839      	ldr	r1, [r7, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f000 f9c4 	bl	8002cd4 <LTC681x_wrcfg>
}
 800294c:	bf00      	nop
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <LTC6811_adcv>:
/* Starts cell voltage conversion */
void LTC6811_adcv(uint8_t MD, //ADC Mode
				  uint8_t DCP, //Discharge Permit
				  uint8_t CH //Cell Channels to be measured
				  )
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	71fb      	strb	r3, [r7, #7]
 800295e:	460b      	mov	r3, r1
 8002960:	71bb      	strb	r3, [r7, #6]
 8002962:	4613      	mov	r3, r2
 8002964:	717b      	strb	r3, [r7, #5]
  LTC681x_adcv(MD,DCP,CH);
 8002966:	797a      	ldrb	r2, [r7, #5]
 8002968:	79b9      	ldrb	r1, [r7, #6]
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	4618      	mov	r0, r3
 800296e:	f000 fa30 	bl	8002dd2 <LTC681x_adcv>
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <LTC6811_adax>:

/* Start a GPIO and Vref2 Conversion */
void LTC6811_adax(uint8_t MD, //ADC Mode
				  uint8_t CHG //GPIO Channels to be measured
				  )
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	4603      	mov	r3, r0
 8002982:	460a      	mov	r2, r1
 8002984:	71fb      	strb	r3, [r7, #7]
 8002986:	4613      	mov	r3, r2
 8002988:	71bb      	strb	r3, [r7, #6]
  LTC681x_adax(MD,CHG);
 800298a:	79ba      	ldrb	r2, [r7, #6]
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	4611      	mov	r1, r2
 8002990:	4618      	mov	r0, r3
 8002992:	f000 fa49 	bl	8002e28 <LTC681x_adax>
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <LTC6811_rdcv>:
*/
uint8_t LTC6811_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // The number of ICs in the system
                     cell_asic *ic // Array of the parsed cell codes
                    )
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b084      	sub	sp, #16
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	4603      	mov	r3, r0
 80029a6:	603a      	str	r2, [r7, #0]
 80029a8:	71fb      	strb	r3, [r7, #7]
 80029aa:	460b      	mov	r3, r1
 80029ac:	71bb      	strb	r3, [r7, #6]
  int8_t pec_error = 0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	73fb      	strb	r3, [r7, #15]
  pec_error = LTC681x_rdcv(reg,total_ic,ic);
 80029b2:	79b9      	ldrb	r1, [r7, #6]
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 fa5a 	bl	8002e72 <LTC681x_rdcv>
 80029be:	4603      	mov	r3, r0
 80029c0:	73fb      	strb	r3, [r7, #15]
  return(pec_error);
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <LTC6811_rdaux>:
*/
int8_t LTC6811_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
                     uint8_t total_ic,//The number of ICs in the system
                     cell_asic *ic//A two dimensional array of the gpio voltage codes.
                     )
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	603a      	str	r2, [r7, #0]
 80029d6:	71fb      	strb	r3, [r7, #7]
 80029d8:	460b      	mov	r3, r1
 80029da:	71bb      	strb	r3, [r7, #6]
  int8_t pec_error = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	73fb      	strb	r3, [r7, #15]
  LTC681x_rdaux(reg,total_ic,ic);
 80029e0:	79b9      	ldrb	r1, [r7, #6]
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 faf7 	bl	8002fda <LTC681x_rdaux>
  return (pec_error);
 80029ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <LTC6811_pollAdc>:
  return(LTC681x_pladc());
}

//This function will block operation until the ADC has finished it's conversion */
uint32_t LTC6811_pollAdc()
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  return(LTC681x_pollAdc());
 80029fc:	f000 fcb8 	bl	8003370 <LTC681x_pollAdc>
 8002a00:	4603      	mov	r3, r0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <LTC6811_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC6811_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that will store the data
							 )
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	6039      	str	r1, [r7, #0]
 8002a10:	71fb      	strb	r3, [r7, #7]
  LTC681x_reset_crc_count(total_ic,ic);
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	6839      	ldr	r1, [r7, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fe92 	bl	8003740 <LTC681x_reset_crc_count>
}
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <LTC6811_init_cfg>:

/* Helper function to initialize CFG variables.*/
void LTC6811_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that will store the data
					  )
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	6039      	str	r1, [r7, #0]
 8002a2e:	71fb      	strb	r3, [r7, #7]
  LTC681x_init_cfg(total_ic,ic);
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	6839      	ldr	r1, [r7, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fee9 	bl	800380c <LTC681x_init_cfg>
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <LTC6811_set_cfgr>:
					  bool dcc[12],// The DCC bit
					  bool dcto[4],// The Dcto bit
					  uint16_t uv, // The UV bit
					  uint16_t  ov // The OV bit
					  )
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b088      	sub	sp, #32
 8002a46:	af06      	add	r7, sp, #24
 8002a48:	6039      	str	r1, [r7, #0]
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4603      	mov	r3, r0
 8002a50:	71fb      	strb	r3, [r7, #7]
 8002a52:	460b      	mov	r3, r1
 8002a54:	71bb      	strb	r3, [r7, #6]
 8002a56:	4613      	mov	r3, r2
 8002a58:	717b      	strb	r3, [r7, #5]
  LTC681x_set_cfgr(nIC ,ic,refon,adcopt,gpio,dcc,dcto, uv, ov);
 8002a5a:	7979      	ldrb	r1, [r7, #5]
 8002a5c:	79ba      	ldrb	r2, [r7, #6]
 8002a5e:	79f8      	ldrb	r0, [r7, #7]
 8002a60:	8c3b      	ldrh	r3, [r7, #32]
 8002a62:	9304      	str	r3, [sp, #16]
 8002a64:	8bbb      	ldrh	r3, [r7, #28]
 8002a66:	9303      	str	r3, [sp, #12]
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	9302      	str	r3, [sp, #8]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	9301      	str	r3, [sp, #4]
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	460b      	mov	r3, r1
 8002a76:	6839      	ldr	r1, [r7, #0]
 8002a78:	f000 fef2 	bl	8003860 <LTC681x_set_cfgr>
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <wakeup_idle>:
                                0x585a, 0x8ba7, 0x4e3e, 0x450c, 0x8095
                               };

/* Wake isoSPI up from IDlE state and enters the READY state */
void wakeup_idle(uint8_t total_ic) //Number of ICs in the system
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<total_ic; i++)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	e00b      	b.n	8002aac <wakeup_idle+0x28>
	{
	   cs_low(CS_PIN);
 8002a94:	200a      	movs	r0, #10
 8002a96:	f001 f949 	bl	8003d2c <cs_low>
	   spi_read_byte(0xff);//Guarantees the isoSPI will be in ready mode
 8002a9a:	20ff      	movs	r0, #255	; 0xff
 8002a9c:	f001 f9b0 	bl	8003e00 <spi_read_byte>
	   cs_high(CS_PIN);
 8002aa0:	200a      	movs	r0, #10
 8002aa2:	f001 f953 	bl	8003d4c <cs_high>
	for (int i =0; i<total_ic; i++)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	dbef      	blt.n	8002a94 <wakeup_idle+0x10>
	}
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <wakeup_sleep>:

/* Generic wakeup command to wake the LTC681x from sleep state */
void wakeup_sleep(uint8_t total_ic) //Number of ICs in the system
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b084      	sub	sp, #16
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<total_ic; i++)
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	e00f      	b.n	8002aee <wakeup_sleep+0x30>
	{
	   cs_low(CS_PIN);
 8002ace:	200a      	movs	r0, #10
 8002ad0:	f001 f92c 	bl	8003d2c <cs_low>
	   delay_u(300); // Guarantees the LTC681x will be in standby
 8002ad4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002ad8:	f001 f91b 	bl	8003d12 <delay_u>
	   cs_high(CS_PIN);
 8002adc:	200a      	movs	r0, #10
 8002ade:	f001 f935 	bl	8003d4c <cs_high>
	   delay_u(10);
 8002ae2:	200a      	movs	r0, #10
 8002ae4:	f001 f915 	bl	8003d12 <delay_u>
	for (int i =0; i<total_ic; i++)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	3301      	adds	r3, #1
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	dbeb      	blt.n	8002ace <wakeup_sleep+0x10>
	}
}
 8002af6:	bf00      	nop
 8002af8:	bf00      	nop
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <cmd_68>:

/* Generic function to write 68xx commands. Function calculates PEC for tx_cmd data. */
void cmd_68(uint8_t tx_cmd[2]) //The command to be transmitted
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	cmd[0] = tx_cmd[0];
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	723b      	strb	r3, [r7, #8]
	cmd[1] =  tx_cmd[1];
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	785b      	ldrb	r3, [r3, #1]
 8002b12:	727b      	strb	r3, [r7, #9]
	cmd_pec = pec15_calc(2, cmd);
 8002b14:	f107 0308 	add.w	r3, r7, #8
 8002b18:	4619      	mov	r1, r3
 8002b1a:	2002      	movs	r0, #2
 8002b1c:	f000 f8a6 	bl	8002c6c <pec15_calc>
 8002b20:	4603      	mov	r3, r0
 8002b22:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8002b24:	89fb      	ldrh	r3, [r7, #14]
 8002b26:	0a1b      	lsrs	r3, r3, #8
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8002b2e:	89fb      	ldrh	r3, [r7, #14]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 8002b34:	200a      	movs	r0, #10
 8002b36:	f001 f8f9 	bl	8003d2c <cs_low>
	spi_write_array(4,cmd);
 8002b3a:	f107 0308 	add.w	r3, r7, #8
 8002b3e:	4619      	mov	r1, r3
 8002b40:	2004      	movs	r0, #4
 8002b42:	f001 f913 	bl	8003d6c <spi_write_array>
	cs_high(CS_PIN);
 8002b46:	200a      	movs	r0, #10
 8002b48:	f001 f900 	bl	8003d4c <cs_high>
}
 8002b4c:	bf00      	nop
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
			  uint8_t tx_cmd[2], //The command to be transmitted
			  uint8_t data[] // Payload Data
			  )
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
 8002b60:	73fb      	strb	r3, [r7, #15]
	const uint8_t BYTES_IN_REG = 6;
 8002b62:	2306      	movs	r3, #6
 8002b64:	773b      	strb	r3, [r7, #28]
	const uint8_t CMD_LEN = 4+(8*total_ic);
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	76fb      	strb	r3, [r7, #27]
	uint8_t *cmd;
	uint16_t data_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index;

	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8002b70:	7efb      	ldrb	r3, [r7, #27]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f006 feea 	bl	800994c <malloc>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	617b      	str	r3, [r7, #20]
	cmd[0] = tx_cmd[0];
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	781a      	ldrb	r2, [r3, #0]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	701a      	strb	r2, [r3, #0]
	cmd[1] = tx_cmd[1];
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	3301      	adds	r3, #1
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	7852      	ldrb	r2, [r2, #1]
 8002b8c:	701a      	strb	r2, [r3, #0]
	cmd_pec = pec15_calc(2, cmd);
 8002b8e:	6979      	ldr	r1, [r7, #20]
 8002b90:	2002      	movs	r0, #2
 8002b92:	f000 f86b 	bl	8002c6c <pec15_calc>
 8002b96:	4603      	mov	r3, r0
 8002b98:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8002b9a:	8a7b      	ldrh	r3, [r7, #18]
 8002b9c:	0a1b      	lsrs	r3, r3, #8
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	3302      	adds	r3, #2
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t)(cmd_pec);
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	3303      	adds	r3, #3
 8002bac:	8a7a      	ldrh	r2, [r7, #18]
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 8002bb2:	2304      	movs	r3, #4
 8002bb4:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each LTC681x, this loops starts with the last IC on the stack.
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	77bb      	strb	r3, [r7, #30]
 8002bba:	e042      	b.n	8002c42 <write_68+0xee>
    {	                                                                            //The first configuration written is received by the last IC in the daisy chain
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	777b      	strb	r3, [r7, #29]
 8002bc0:	e016      	b.n	8002bf0 <write_68+0x9c>
		{
			cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 8002bc2:	7fbb      	ldrb	r3, [r7, #30]
 8002bc4:	1e5a      	subs	r2, r3, #1
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	4413      	add	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	461a      	mov	r2, r3
 8002bd0:	7f7b      	ldrb	r3, [r7, #29]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	441a      	add	r2, r3
 8002bda:	7ffb      	ldrb	r3, [r7, #31]
 8002bdc:	6979      	ldr	r1, [r7, #20]
 8002bde:	440b      	add	r3, r1
 8002be0:	7812      	ldrb	r2, [r2, #0]
 8002be2:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 8002be4:	7ffb      	ldrb	r3, [r7, #31]
 8002be6:	3301      	adds	r3, #1
 8002be8:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8002bea:	7f7b      	ldrb	r3, [r7, #29]
 8002bec:	3301      	adds	r3, #1
 8002bee:	777b      	strb	r3, [r7, #29]
 8002bf0:	7f7a      	ldrb	r2, [r7, #29]
 8002bf2:	7f3b      	ldrb	r3, [r7, #28]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d3e4      	bcc.n	8002bc2 <write_68+0x6e>
		}

		data_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &data[(current_ic-1)*6]);    // Calculating the PEC for each ICs configuration register data
 8002bf8:	7fbb      	ldrb	r3, [r7, #30]
 8002bfa:	1e5a      	subs	r2, r3, #1
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	461a      	mov	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	441a      	add	r2, r3
 8002c0a:	7f3b      	ldrb	r3, [r7, #28]
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 f82c 	bl	8002c6c <pec15_calc>
 8002c14:	4603      	mov	r3, r0
 8002c16:	823b      	strh	r3, [r7, #16]
		cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 8002c18:	8a3b      	ldrh	r3, [r7, #16]
 8002c1a:	0a1b      	lsrs	r3, r3, #8
 8002c1c:	b299      	uxth	r1, r3
 8002c1e:	7ffb      	ldrb	r3, [r7, #31]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	4413      	add	r3, r2
 8002c24:	b2ca      	uxtb	r2, r1
 8002c26:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t)data_pec;
 8002c28:	7ffb      	ldrb	r3, [r7, #31]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	4413      	add	r3, r2
 8002c30:	8a3a      	ldrh	r2, [r7, #16]
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 8002c36:	7ffb      	ldrb	r3, [r7, #31]
 8002c38:	3302      	adds	r3, #2
 8002c3a:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each LTC681x, this loops starts with the last IC on the stack.
 8002c3c:	7fbb      	ldrb	r3, [r7, #30]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	77bb      	strb	r3, [r7, #30]
 8002c42:	7fbb      	ldrb	r3, [r7, #30]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1b9      	bne.n	8002bbc <write_68+0x68>
	}

	cs_low(CS_PIN);
 8002c48:	200a      	movs	r0, #10
 8002c4a:	f001 f86f 	bl	8003d2c <cs_low>
	spi_write_array(CMD_LEN, cmd);
 8002c4e:	7efb      	ldrb	r3, [r7, #27]
 8002c50:	6979      	ldr	r1, [r7, #20]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 f88a 	bl	8003d6c <spi_write_array>
	cs_high(CS_PIN);
 8002c58:	200a      	movs	r0, #10
 8002c5a:	f001 f877 	bl	8003d4c <cs_high>

	free(cmd);
 8002c5e:	6978      	ldr	r0, [r7, #20]
 8002c60:	f006 fe7c 	bl	800995c <free>
}
 8002c64:	bf00      	nop
 8002c66:	3720      	adds	r7, #32
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <pec15_calc>:

/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	6039      	str	r1, [r7, #0]
 8002c76:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder,addr;
	remainder = 16;//initialize the PEC
 8002c78:	2310      	movs	r3, #16
 8002c7a:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	737b      	strb	r3, [r7, #13]
 8002c80:	e019      	b.n	8002cb6 <pec15_calc+0x4a>
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 8002c82:	89fb      	ldrh	r3, [r7, #14]
 8002c84:	09db      	lsrs	r3, r3, #7
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	7b7b      	ldrb	r3, [r7, #13]
 8002c8a:	6839      	ldr	r1, [r7, #0]
 8002c8c:	440b      	add	r3, r1
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	4053      	eors	r3, r2
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	817b      	strh	r3, [r7, #10]
		remainder = (remainder<<8)^crc15Table[addr];
 8002c9a:	89fb      	ldrh	r3, [r7, #14]
 8002c9c:	021b      	lsls	r3, r3, #8
 8002c9e:	b21a      	sxth	r2, r3
 8002ca0:	897b      	ldrh	r3, [r7, #10]
 8002ca2:	490b      	ldr	r1, [pc, #44]	; (8002cd0 <pec15_calc+0x64>)
 8002ca4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002ca8:	b21b      	sxth	r3, r3
 8002caa:	4053      	eors	r3, r2
 8002cac:	b21b      	sxth	r3, r3
 8002cae:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8002cb0:	7b7b      	ldrb	r3, [r7, #13]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	737b      	strb	r3, [r7, #13]
 8002cb6:	7b7a      	ldrb	r2, [r7, #13]
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d3e1      	bcc.n	8002c82 <pec15_calc+0x16>
	}

	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8002cbe:	89fb      	ldrh	r3, [r7, #14]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	b29b      	uxth	r3, r3
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	0800c420 	.word	0x0800c420

08002cd4 <LTC681x_wrcfg>:

/* Write the LTC681x CFGRA */
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[]  // A two dimensional array of the configuration data that will be written
                  )
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b0c4      	sub	sp, #272	; 0x110
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4602      	mov	r2, r0
 8002cdc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002ce0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ce4:	6019      	str	r1, [r3, #0]
 8002ce6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002cea:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002cee:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = {0x00 , 0x01} ;
 8002cf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cf4:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t c_ic = 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8002d04:	2300      	movs	r3, #0
 8002d06:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8002d0a:	e048      	b.n	8002d9e <LTC681x_wrcfg+0xca>
	{
		if (ic->isospi_reverse == false)
 8002d0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d10:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8002d1a:	f083 0301 	eor.w	r3, r3, #1
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d004      	beq.n	8002d2e <LTC681x_wrcfg+0x5a>
		{
			c_ic = current_ic;
 8002d24:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002d28:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8002d2c:	e00b      	b.n	8002d46 <LTC681x_wrcfg+0x72>
		}
		else
		{
			c_ic = total_ic - current_ic - 1;
 8002d2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d32:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002d36:	781a      	ldrb	r2, [r3, #0]
 8002d38:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
		}

		for (uint8_t data = 0; data<6; data++)
 8002d46:	2300      	movs	r3, #0
 8002d48:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8002d4c:	e01e      	b.n	8002d8c <LTC681x_wrcfg+0xb8>
		{
			write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 8002d4e:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8002d52:	22e8      	movs	r2, #232	; 0xe8
 8002d54:	fb02 f303 	mul.w	r3, r2, r3
 8002d58:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002d5c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002d60:	6812      	ldr	r2, [r2, #0]
 8002d62:	18d1      	adds	r1, r2, r3
 8002d64:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8002d68:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002d6c:	5c89      	ldrb	r1, [r1, r2]
 8002d6e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002d72:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8002d76:	54d1      	strb	r1, [r2, r3]
			write_count++;
 8002d78:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		for (uint8_t data = 0; data<6; data++)
 8002d82:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8002d86:	3301      	adds	r3, #1
 8002d88:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8002d8c:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8002d90:	2b05      	cmp	r3, #5
 8002d92:	d9dc      	bls.n	8002d4e <LTC681x_wrcfg+0x7a>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8002d94:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002d98:	3301      	adds	r3, #1
 8002d9a:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8002d9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002da2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002da6:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d3ad      	bcc.n	8002d0c <LTC681x_wrcfg+0x38>
		}
	}
	write_68(total_ic, cmd, write_buffer);
 8002db0:	f107 0208 	add.w	r2, r7, #8
 8002db4:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002db8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002dbc:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff fec6 	bl	8002b54 <write_68>
}
 8002dc8:	bf00      	nop
 8002dca:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <LTC681x_adcv>:
/* Starts ADC conversion for cell voltage */
void LTC681x_adcv( uint8_t MD, //ADC Mode
				   uint8_t DCP, //Discharge Permit
				   uint8_t CH //Cell Channels to be measured
                 )
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	4603      	mov	r3, r0
 8002dda:	71fb      	strb	r3, [r7, #7]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	71bb      	strb	r3, [r7, #6]
 8002de0:	4613      	mov	r3, r2
 8002de2:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[2];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	105b      	asrs	r3, r3, #1
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	3302      	adds	r3, #2
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	733b      	strb	r3, [r7, #12]
	md_bits = (MD & 0x01) << 7;
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	01db      	lsls	r3, r3, #7
 8002dfc:	73fb      	strb	r3, [r7, #15]
	cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8002dfe:	79bb      	ldrb	r3, [r7, #6]
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	4413      	add	r3, r2
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	797b      	ldrb	r3, [r7, #5]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	3360      	adds	r3, #96	; 0x60
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	737b      	strb	r3, [r7, #13]

	cmd_68(cmd);
 8002e16:	f107 030c 	add.w	r3, r7, #12
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff fe70 	bl	8002b00 <cmd_68>
}
 8002e20:	bf00      	nop
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <LTC681x_adax>:

/* Start ADC Conversion for GPIO and Vref2  */
void LTC681x_adax(uint8_t MD, //ADC Mode
				  uint8_t CHG //GPIO Channels to be measured
				  )
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	460a      	mov	r2, r1
 8002e32:	71fb      	strb	r3, [r7, #7]
 8002e34:	4613      	mov	r3, r2
 8002e36:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	105b      	asrs	r3, r3, #1
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	3304      	adds	r3, #4
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8002e4c:	79fb      	ldrb	r3, [r7, #7]
 8002e4e:	01db      	lsls	r3, r3, #7
 8002e50:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG ;
 8002e52:	7bfa      	ldrb	r2, [r7, #15]
 8002e54:	79bb      	ldrb	r3, [r7, #6]
 8002e56:	4413      	add	r3, r2
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	3360      	adds	r3, #96	; 0x60
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	727b      	strb	r3, [r7, #9]

	cmd_68(cmd);
 8002e60:	f107 0308 	add.w	r3, r7, #8
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff fe4b 	bl	8002b00 <cmd_68>
}
 8002e6a:	bf00      	nop
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <LTC681x_rdcv>:
*/
uint8_t LTC681x_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // The number of ICs in the system
                     cell_asic *ic // Array of the parsed cell codes
                    )
{
 8002e72:	b5b0      	push	{r4, r5, r7, lr}
 8002e74:	b088      	sub	sp, #32
 8002e76:	af02      	add	r7, sp, #8
 8002e78:	4603      	mov	r3, r0
 8002e7a:	603a      	str	r2, [r7, #0]
 8002e7c:	71fb      	strb	r3, [r7, #7]
 8002e7e:	460b      	mov	r3, r1
 8002e80:	71bb      	strb	r3, [r7, #6]
	int8_t pec_error = 0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	75fb      	strb	r3, [r7, #23]
	uint8_t *cell_data;
	uint8_t c_ic = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	75bb      	strb	r3, [r7, #22]
	cell_data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8002e8a:	79bb      	ldrb	r3, [r7, #6]
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f006 fd5c 	bl	800994c <malloc>
 8002e94:	4603      	mov	r3, r0
 8002e96:	60bb      	str	r3, [r7, #8]

	if (reg == 0)
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d14b      	bne.n	8002f36 <LTC681x_rdcv+0xc4>
	{
		for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	757b      	strb	r3, [r7, #21]
 8002ea2:	e041      	b.n	8002f28 <LTC681x_rdcv+0xb6>
		{
			LTC681x_rdcv_reg(cell_reg, total_ic,cell_data );
 8002ea4:	79b9      	ldrb	r1, [r7, #6]
 8002ea6:	7d7b      	ldrb	r3, [r7, #21]
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 f93d 	bl	800312a <LTC681x_rdcv_reg>
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	e031      	b.n	8002f1a <LTC681x_rdcv+0xa8>
			{
			if (ic->isospi_reverse == false)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8002ebc:	f083 0301 	eor.w	r3, r3, #1
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <LTC681x_rdcv+0x5a>
			{
			  c_ic = current_ic;
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	75bb      	strb	r3, [r7, #22]
 8002eca:	e006      	b.n	8002eda <LTC681x_rdcv+0x68>
			}
			else
			{
			  c_ic = total_ic - current_ic - 1;
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	79ba      	ldrb	r2, [r7, #6]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	b2d8      	uxtb	r0, r3
												&ic[c_ic].cells.c_codes[0],
 8002ede:	7dbb      	ldrb	r3, [r7, #22]
 8002ee0:	22e8      	movs	r2, #232	; 0xe8
 8002ee2:	fb02 f303 	mul.w	r3, r2, r3
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8002eea:	f103 041e 	add.w	r4, r3, #30
												&ic[c_ic].cells.pec_match[0]);
 8002eee:	7dbb      	ldrb	r3, [r7, #22]
 8002ef0:	22e8      	movs	r2, #232	; 0xe8
 8002ef2:	fb02 f303 	mul.w	r3, r2, r3
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8002efa:	3342      	adds	r3, #66	; 0x42
 8002efc:	7d79      	ldrb	r1, [r7, #21]
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	4623      	mov	r3, r4
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	f000 f9c2 	bl	800328c <parse_cells>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
 8002f0e:	4413      	add	r3, r2
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	75fb      	strb	r3, [r7, #23]
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	3301      	adds	r3, #1
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	79bb      	ldrb	r3, [r7, #6]
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	dbc9      	blt.n	8002eb6 <LTC681x_rdcv+0x44>
		for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8002f22:	7d7b      	ldrb	r3, [r7, #21]
 8002f24:	3301      	adds	r3, #1
 8002f26:	757b      	strb	r3, [r7, #21]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8002f2e:	7d7a      	ldrb	r2, [r7, #21]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d9b7      	bls.n	8002ea4 <LTC681x_rdcv+0x32>
 8002f34:	e043      	b.n	8002fbe <LTC681x_rdcv+0x14c>
		}
	}

	else
	{
		LTC681x_rdcv_reg(reg, total_ic,cell_data);
 8002f36:	79b9      	ldrb	r1, [r7, #6]
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 f8f4 	bl	800312a <LTC681x_rdcv_reg>

		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	e036      	b.n	8002fb6 <LTC681x_rdcv+0x144>
		{
			if (ic->isospi_reverse == false)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8002f4e:	f083 0301 	eor.w	r3, r3, #1
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <LTC681x_rdcv+0xec>
			{
			c_ic = current_ic;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	75bb      	strb	r3, [r7, #22]
 8002f5c:	e006      	b.n	8002f6c <LTC681x_rdcv+0xfa>
			}
			else
			{
			c_ic = total_ic - current_ic - 1;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	79ba      	ldrb	r2, [r7, #6]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	b2d8      	uxtb	r0, r3
 8002f70:	7dbb      	ldrb	r3, [r7, #22]
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	461a      	mov	r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	189c      	adds	r4, r3, r2
											  &ic[c_ic].cells.c_codes[0],
 8002f7a:	7dbb      	ldrb	r3, [r7, #22]
 8002f7c:	22e8      	movs	r2, #232	; 0xe8
 8002f7e:	fb02 f303 	mul.w	r3, r2, r3
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8002f86:	f103 051e 	add.w	r5, r3, #30
											  &ic[c_ic].cells.pec_match[0]);
 8002f8a:	7dbb      	ldrb	r3, [r7, #22]
 8002f8c:	22e8      	movs	r2, #232	; 0xe8
 8002f8e:	fb02 f303 	mul.w	r3, r2, r3
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8002f96:	3342      	adds	r3, #66	; 0x42
 8002f98:	79f9      	ldrb	r1, [r7, #7]
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	462b      	mov	r3, r5
 8002f9e:	4622      	mov	r2, r4
 8002fa0:	f000 f974 	bl	800328c <parse_cells>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	7dfb      	ldrb	r3, [r7, #23]
 8002faa:	4413      	add	r3, r2
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	75fb      	strb	r3, [r7, #23]
		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	79bb      	ldrb	r3, [r7, #6]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	dbc4      	blt.n	8002f48 <LTC681x_rdcv+0xd6>
		}
	}
	LTC681x_check_pec(total_ic,CELL,ic);
 8002fbe:	79bb      	ldrb	r3, [r7, #6]
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 fa17 	bl	80033f8 <LTC681x_check_pec>
	free(cell_data);
 8002fca:	68b8      	ldr	r0, [r7, #8]
 8002fcc:	f006 fcc6 	bl	800995c <free>

	return(pec_error);
 8002fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bdb0      	pop	{r4, r5, r7, pc}

08002fda <LTC681x_rdaux>:
*/
int8_t LTC681x_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
                     uint8_t total_ic,//The number of ICs in the system
                     cell_asic *ic//A two dimensional array of the gpio voltage codes.
                    )
{
 8002fda:	b590      	push	{r4, r7, lr}
 8002fdc:	b089      	sub	sp, #36	; 0x24
 8002fde:	af02      	add	r7, sp, #8
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	603a      	str	r2, [r7, #0]
 8002fe4:	71fb      	strb	r3, [r7, #7]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	71bb      	strb	r3, [r7, #6]
	uint8_t *data;
	int8_t pec_error = 0;
 8002fea:	2300      	movs	r3, #0
 8002fec:	75fb      	strb	r3, [r7, #23]
	uint8_t c_ic =0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	75bb      	strb	r3, [r7, #22]
	data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8002ff2:	79bb      	ldrb	r3, [r7, #6]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f006 fca8 	bl	800994c <malloc>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	60bb      	str	r3, [r7, #8]

	if (reg == 0)
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d147      	bne.n	8003096 <LTC681x_rdaux+0xbc>
	{
		for (uint8_t gpio_reg = 1; gpio_reg<ic[0].ic_reg.num_gpio_reg+1; gpio_reg++) //Executes once for each of the LTC681x aux voltage registers
 8003006:	2301      	movs	r3, #1
 8003008:	757b      	strb	r3, [r7, #21]
 800300a:	e03d      	b.n	8003088 <LTC681x_rdaux+0xae>
		{
			LTC681x_rdaux_reg(gpio_reg, total_ic,data);                 //Reads the raw auxiliary register data into the data[] array
 800300c:	79b9      	ldrb	r1, [r7, #6]
 800300e:	7d7b      	ldrb	r3, [r7, #21]
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	4618      	mov	r0, r3
 8003014:	f000 f8e7 	bl	80031e6 <LTC681x_rdaux_reg>
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8003018:	2300      	movs	r3, #0
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	e02d      	b.n	800307a <LTC681x_rdaux+0xa0>
			{
				if (ic->isospi_reverse == false)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8003024:	f083 0301 	eor.w	r3, r3, #1
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <LTC681x_rdaux+0x5a>
				{
				  c_ic = current_ic;
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	75bb      	strb	r3, [r7, #22]
 8003032:	e006      	b.n	8003042 <LTC681x_rdaux+0x68>
				}
				else
				{
				  c_ic = total_ic - current_ic - 1;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	79ba      	ldrb	r2, [r7, #6]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	b2db      	uxtb	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	75bb      	strb	r3, [r7, #22]
				}
				pec_error = parse_cells(current_ic,gpio_reg, data,
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	b2d8      	uxtb	r0, r3
										&ic[c_ic].aux.a_codes[0],
 8003046:	7dbb      	ldrb	r3, [r7, #22]
 8003048:	22e8      	movs	r2, #232	; 0xe8
 800304a:	fb02 f303 	mul.w	r3, r2, r3
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	4413      	add	r3, r2
				pec_error = parse_cells(current_ic,gpio_reg, data,
 8003052:	f103 0448 	add.w	r4, r3, #72	; 0x48
										&ic[c_ic].aux.pec_match[0]);
 8003056:	7dbb      	ldrb	r3, [r7, #22]
 8003058:	22e8      	movs	r2, #232	; 0xe8
 800305a:	fb02 f303 	mul.w	r3, r2, r3
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	4413      	add	r3, r2
				pec_error = parse_cells(current_ic,gpio_reg, data,
 8003062:	335a      	adds	r3, #90	; 0x5a
 8003064:	7d79      	ldrb	r1, [r7, #21]
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	4623      	mov	r3, r4
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	f000 f90e 	bl	800328c <parse_cells>
 8003070:	4603      	mov	r3, r0
 8003072:	75fb      	strb	r3, [r7, #23]
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	3301      	adds	r3, #1
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	79bb      	ldrb	r3, [r7, #6]
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	429a      	cmp	r2, r3
 8003080:	dbcd      	blt.n	800301e <LTC681x_rdaux+0x44>
		for (uint8_t gpio_reg = 1; gpio_reg<ic[0].ic_reg.num_gpio_reg+1; gpio_reg++) //Executes once for each of the LTC681x aux voltage registers
 8003082:	7d7b      	ldrb	r3, [r7, #21]
 8003084:	3301      	adds	r3, #1
 8003086:	757b      	strb	r3, [r7, #21]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800308e:	7d7a      	ldrb	r2, [r7, #21]
 8003090:	429a      	cmp	r2, r3
 8003092:	d9bb      	bls.n	800300c <LTC681x_rdaux+0x32>
 8003094:	e03a      	b.n	800310c <LTC681x_rdaux+0x132>
			}
		}
	}
	else
	{
		LTC681x_rdaux_reg(reg, total_ic, data);
 8003096:	79b9      	ldrb	r1, [r7, #6]
 8003098:	79fb      	ldrb	r3, [r7, #7]
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	4618      	mov	r0, r3
 800309e:	f000 f8a2 	bl	80031e6 <LTC681x_rdaux_reg>

		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	e02d      	b.n	8003104 <LTC681x_rdaux+0x12a>
		{
			if (ic->isospi_reverse == false)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 80030ae:	f083 0301 	eor.w	r3, r3, #1
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <LTC681x_rdaux+0xe4>
			{
			c_ic = current_ic;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	75bb      	strb	r3, [r7, #22]
 80030bc:	e006      	b.n	80030cc <LTC681x_rdaux+0xf2>
			}
			else
			{
			c_ic = total_ic - current_ic - 1;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	79ba      	ldrb	r2, [r7, #6]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = parse_cells(current_ic,reg, data,
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	b2d8      	uxtb	r0, r3
								  &ic[c_ic].aux.a_codes[0],
 80030d0:	7dbb      	ldrb	r3, [r7, #22]
 80030d2:	22e8      	movs	r2, #232	; 0xe8
 80030d4:	fb02 f303 	mul.w	r3, r2, r3
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	4413      	add	r3, r2
			pec_error = parse_cells(current_ic,reg, data,
 80030dc:	f103 0448 	add.w	r4, r3, #72	; 0x48
								  &ic[c_ic].aux.pec_match[0]);
 80030e0:	7dbb      	ldrb	r3, [r7, #22]
 80030e2:	22e8      	movs	r2, #232	; 0xe8
 80030e4:	fb02 f303 	mul.w	r3, r2, r3
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	4413      	add	r3, r2
			pec_error = parse_cells(current_ic,reg, data,
 80030ec:	335a      	adds	r3, #90	; 0x5a
 80030ee:	79f9      	ldrb	r1, [r7, #7]
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	4623      	mov	r3, r4
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	f000 f8c9 	bl	800328c <parse_cells>
 80030fa:	4603      	mov	r3, r0
 80030fc:	75fb      	strb	r3, [r7, #23]
		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	3301      	adds	r3, #1
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	79bb      	ldrb	r3, [r7, #6]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	429a      	cmp	r2, r3
 800310a:	dbcd      	blt.n	80030a8 <LTC681x_rdaux+0xce>
		}
	}
	LTC681x_check_pec(total_ic,AUX,ic);
 800310c:	79bb      	ldrb	r3, [r7, #6]
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	2102      	movs	r1, #2
 8003112:	4618      	mov	r0, r3
 8003114:	f000 f970 	bl	80033f8 <LTC681x_check_pec>
	free(data);
 8003118:	68b8      	ldr	r0, [r7, #8]
 800311a:	f006 fc1f 	bl	800995c <free>

	return (pec_error);
 800311e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003122:	4618      	mov	r0, r3
 8003124:	371c      	adds	r7, #28
 8003126:	46bd      	mov	sp, r7
 8003128:	bd90      	pop	{r4, r7, pc}

0800312a <LTC681x_rdcv_reg>:
/* Writes the command and reads the raw cell voltage register data */
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
                      uint8_t total_ic, //the number of ICs in the
                      uint8_t *data //An array of the unparsed cell codes
                     )
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b084      	sub	sp, #16
 800312e:	af00      	add	r7, sp, #0
 8003130:	4603      	mov	r3, r0
 8003132:	603a      	str	r2, [r7, #0]
 8003134:	71fb      	strb	r3, [r7, #7]
 8003136:	460b      	mov	r3, r1
 8003138:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; //Number of bytes in each ICs register + 2 bytes for the PEC
 800313a:	2308      	movs	r3, #8
 800313c:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //1: RDCVA
 800313e:	79fb      	ldrb	r3, [r7, #7]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d104      	bne.n	800314e <LTC681x_rdcv_reg+0x24>
	{
		cmd[1] = 0x04;
 8003144:	2304      	movs	r3, #4
 8003146:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003148:	2300      	movs	r3, #0
 800314a:	723b      	strb	r3, [r7, #8]
 800314c:	e026      	b.n	800319c <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 2) //2: RDCVB
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d104      	bne.n	800315e <LTC681x_rdcv_reg+0x34>
	{
		cmd[1] = 0x06;
 8003154:	2306      	movs	r3, #6
 8003156:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003158:	2300      	movs	r3, #0
 800315a:	723b      	strb	r3, [r7, #8]
 800315c:	e01e      	b.n	800319c <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 3) //3: RDCVC
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d104      	bne.n	800316e <LTC681x_rdcv_reg+0x44>
	{
		cmd[1] = 0x08;
 8003164:	2308      	movs	r3, #8
 8003166:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003168:	2300      	movs	r3, #0
 800316a:	723b      	strb	r3, [r7, #8]
 800316c:	e016      	b.n	800319c <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 4) //4: RDCVD
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	2b04      	cmp	r3, #4
 8003172:	d104      	bne.n	800317e <LTC681x_rdcv_reg+0x54>
	{
		cmd[1] = 0x0A;
 8003174:	230a      	movs	r3, #10
 8003176:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003178:	2300      	movs	r3, #0
 800317a:	723b      	strb	r3, [r7, #8]
 800317c:	e00e      	b.n	800319c <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 5) //4: RDCVE
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	2b05      	cmp	r3, #5
 8003182:	d104      	bne.n	800318e <LTC681x_rdcv_reg+0x64>
	{
		cmd[1] = 0x09;
 8003184:	2309      	movs	r3, #9
 8003186:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003188:	2300      	movs	r3, #0
 800318a:	723b      	strb	r3, [r7, #8]
 800318c:	e006      	b.n	800319c <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 6) //4: RDCVF
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	2b06      	cmp	r3, #6
 8003192:	d103      	bne.n	800319c <LTC681x_rdcv_reg+0x72>
	{
		cmd[1] = 0x0B;
 8003194:	230b      	movs	r3, #11
 8003196:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003198:	2300      	movs	r3, #0
 800319a:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 800319c:	f107 0308 	add.w	r3, r7, #8
 80031a0:	4619      	mov	r1, r3
 80031a2:	2002      	movs	r0, #2
 80031a4:	f7ff fd62 	bl	8002c6c <pec15_calc>
 80031a8:	4603      	mov	r3, r0
 80031aa:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80031ac:	89bb      	ldrh	r3, [r7, #12]
 80031ae:	0a1b      	lsrs	r3, r3, #8
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 80031b6:	89bb      	ldrh	r3, [r7, #12]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 80031bc:	200a      	movs	r0, #10
 80031be:	f000 fdb5 	bl	8003d2c <cs_low>
	spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 80031c2:	7bfa      	ldrb	r2, [r7, #15]
 80031c4:	79bb      	ldrb	r3, [r7, #6]
 80031c6:	fb12 f303 	smulbb	r3, r2, r3
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	f107 0008 	add.w	r0, r7, #8
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	2104      	movs	r1, #4
 80031d4:	f000 fdde 	bl	8003d94 <spi_write_read>
	cs_high(CS_PIN);
 80031d8:	200a      	movs	r0, #10
 80031da:	f000 fdb7 	bl	8003d4c <cs_high>
}
 80031de:	bf00      	nop
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <LTC681x_rdaux_reg>:
*/
void LTC681x_rdaux_reg(uint8_t reg, //Determines which GPIO voltage register is read back
                       uint8_t total_ic, //The number of ICs in the system
                       uint8_t *data //Array of the unparsed auxiliary codes
                      )
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b084      	sub	sp, #16
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	4603      	mov	r3, r0
 80031ee:	603a      	str	r2, [r7, #0]
 80031f0:	71fb      	strb	r3, [r7, #7]
 80031f2:	460b      	mov	r3, r1
 80031f4:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; // Number of bytes in the register + 2 bytes for the PEC
 80031f6:	2308      	movs	r3, #8
 80031f8:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //Read back auxiliary group A
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d104      	bne.n	800320a <LTC681x_rdaux_reg+0x24>
	{
		cmd[1] = 0x0C;
 8003200:	230c      	movs	r3, #12
 8003202:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003204:	2300      	movs	r3, #0
 8003206:	723b      	strb	r3, [r7, #8]
 8003208:	e01b      	b.n	8003242 <LTC681x_rdaux_reg+0x5c>
	}
	else if (reg == 2)  //Read back auxiliary group B
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	2b02      	cmp	r3, #2
 800320e:	d104      	bne.n	800321a <LTC681x_rdaux_reg+0x34>
	{
		cmd[1] = 0x0E;
 8003210:	230e      	movs	r3, #14
 8003212:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003214:	2300      	movs	r3, #0
 8003216:	723b      	strb	r3, [r7, #8]
 8003218:	e013      	b.n	8003242 <LTC681x_rdaux_reg+0x5c>
	}
	else if (reg == 3)  //Read back auxiliary group C
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	2b03      	cmp	r3, #3
 800321e:	d104      	bne.n	800322a <LTC681x_rdaux_reg+0x44>
	{
		cmd[1] = 0x0D;
 8003220:	230d      	movs	r3, #13
 8003222:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003224:	2300      	movs	r3, #0
 8003226:	723b      	strb	r3, [r7, #8]
 8003228:	e00b      	b.n	8003242 <LTC681x_rdaux_reg+0x5c>
	}
	else if (reg == 4)  //Read back auxiliary group D
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	2b04      	cmp	r3, #4
 800322e:	d104      	bne.n	800323a <LTC681x_rdaux_reg+0x54>
	{
		cmd[1] = 0x0F;
 8003230:	230f      	movs	r3, #15
 8003232:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8003234:	2300      	movs	r3, #0
 8003236:	723b      	strb	r3, [r7, #8]
 8003238:	e003      	b.n	8003242 <LTC681x_rdaux_reg+0x5c>
	}
	else          //Read back auxiliary group A
	{
		cmd[1] = 0x0C;
 800323a:	230c      	movs	r3, #12
 800323c:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800323e:	2300      	movs	r3, #0
 8003240:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 8003242:	f107 0308 	add.w	r3, r7, #8
 8003246:	4619      	mov	r1, r3
 8003248:	2002      	movs	r0, #2
 800324a:	f7ff fd0f 	bl	8002c6c <pec15_calc>
 800324e:	4603      	mov	r3, r0
 8003250:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8003252:	89bb      	ldrh	r3, [r7, #12]
 8003254:	0a1b      	lsrs	r3, r3, #8
 8003256:	b29b      	uxth	r3, r3
 8003258:	b2db      	uxtb	r3, r3
 800325a:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 800325c:	89bb      	ldrh	r3, [r7, #12]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 8003262:	200a      	movs	r0, #10
 8003264:	f000 fd62 	bl	8003d2c <cs_low>
	spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 8003268:	7bfa      	ldrb	r2, [r7, #15]
 800326a:	79bb      	ldrb	r3, [r7, #6]
 800326c:	fb12 f303 	smulbb	r3, r2, r3
 8003270:	b2db      	uxtb	r3, r3
 8003272:	f107 0008 	add.w	r0, r7, #8
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	2104      	movs	r1, #4
 800327a:	f000 fd8b 	bl	8003d94 <spi_write_read>
	cs_high(CS_PIN);
 800327e:	200a      	movs	r0, #10
 8003280:	f000 fd64 	bl	8003d4c <cs_high>
}
 8003284:	bf00      	nop
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <parse_cells>:
					uint8_t cell_reg,  // Type of register
					uint8_t cell_data[], // Unparsed data
					uint16_t *cell_codes, // Parsed data
					uint8_t *ic_pec // PEC error
					)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af00      	add	r7, sp, #0
 8003292:	60ba      	str	r2, [r7, #8]
 8003294:	607b      	str	r3, [r7, #4]
 8003296:	4603      	mov	r3, r0
 8003298:	73fb      	strb	r3, [r7, #15]
 800329a:	460b      	mov	r3, r1
 800329c:	73bb      	strb	r3, [r7, #14]
	const uint8_t BYT_IN_REG = 6;
 800329e:	2306      	movs	r3, #6
 80032a0:	773b      	strb	r3, [r7, #28]
	const uint8_t CELL_IN_REG = 3;
 80032a2:	2303      	movs	r3, #3
 80032a4:	76fb      	strb	r3, [r7, #27]
	int8_t pec_error = 0;
 80032a6:	2300      	movs	r3, #0
 80032a8:	77fb      	strb	r3, [r7, #31]
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = current_ic*NUM_RX_BYT; //data counter
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	77bb      	strb	r3, [r7, #30]


	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 80032b0:	2300      	movs	r3, #0
 80032b2:	777b      	strb	r3, [r7, #29]
 80032b4:	e020      	b.n	80032f8 <parse_cells+0x6c>
	{																		// loops once for each of the 3 codes in the register

		parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each code is received as two bytes and is combined to
 80032b6:	7fbb      	ldrb	r3, [r7, #30]
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	4413      	add	r3, r2
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	b29a      	uxth	r2, r3
 80032c0:	7fbb      	ldrb	r3, [r7, #30]
 80032c2:	3301      	adds	r3, #1
 80032c4:	68b9      	ldr	r1, [r7, #8]
 80032c6:	440b      	add	r3, r1
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	021b      	lsls	r3, r3, #8
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	4413      	add	r3, r2
 80032d2:	82bb      	strh	r3, [r7, #20]
																				   // create the parsed code
		cell_codes[current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 80032d4:	7f7a      	ldrb	r2, [r7, #29]
 80032d6:	7bbb      	ldrb	r3, [r7, #14]
 80032d8:	3b01      	subs	r3, #1
 80032da:	7ef9      	ldrb	r1, [r7, #27]
 80032dc:	fb01 f303 	mul.w	r3, r1, r3
 80032e0:	4413      	add	r3, r2
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	4413      	add	r3, r2
 80032e8:	8aba      	ldrh	r2, [r7, #20]
 80032ea:	801a      	strh	r2, [r3, #0]

		data_counter = data_counter + 2;                       //Because the codes are two bytes, the data counter
 80032ec:	7fbb      	ldrb	r3, [r7, #30]
 80032ee:	3302      	adds	r3, #2
 80032f0:	77bb      	strb	r3, [r7, #30]
	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 80032f2:	7f7b      	ldrb	r3, [r7, #29]
 80032f4:	3301      	adds	r3, #1
 80032f6:	777b      	strb	r3, [r7, #29]
 80032f8:	7f7a      	ldrb	r2, [r7, #29]
 80032fa:	7efb      	ldrb	r3, [r7, #27]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d3da      	bcc.n	80032b6 <parse_cells+0x2a>
															  //must increment by two for each parsed code
	}
	received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8003300:	7fbb      	ldrb	r3, [r7, #30]
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	4413      	add	r3, r2
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	021b      	lsls	r3, r3, #8
 800330a:	b21a      	sxth	r2, r3
 800330c:	7fbb      	ldrb	r3, [r7, #30]
 800330e:	3301      	adds	r3, #1
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	440b      	add	r3, r1
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	b21b      	sxth	r3, r3
 8003318:	4313      	orrs	r3, r2
 800331a:	b21b      	sxth	r3, r3
 800331c:	833b      	strh	r3, [r7, #24]
																			   //after the 6 cell voltage data bytes
	data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 800331e:	7bfb      	ldrb	r3, [r7, #15]
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	461a      	mov	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	441a      	add	r2, r3
 8003328:	7f3b      	ldrb	r3, [r7, #28]
 800332a:	4611      	mov	r1, r2
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff fc9d 	bl	8002c6c <pec15_calc>
 8003332:	4603      	mov	r3, r0
 8003334:	82fb      	strh	r3, [r7, #22]

	if (received_pec != data_pec)
 8003336:	8b3a      	ldrh	r2, [r7, #24]
 8003338:	8afb      	ldrh	r3, [r7, #22]
 800333a:	429a      	cmp	r2, r3
 800333c:	d008      	beq.n	8003350 <parse_cells+0xc4>
	{
		pec_error = 1;                             //The pec_error variable is simply set negative if any PEC errors
 800333e:	2301      	movs	r3, #1
 8003340:	77fb      	strb	r3, [r7, #31]
		ic_pec[cell_reg-1]=1;
 8003342:	7bbb      	ldrb	r3, [r7, #14]
 8003344:	3b01      	subs	r3, #1
 8003346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003348:	4413      	add	r3, r2
 800334a:	2201      	movs	r2, #1
 800334c:	701a      	strb	r2, [r3, #0]
 800334e:	e005      	b.n	800335c <parse_cells+0xd0>
	}
	else
	{
		ic_pec[cell_reg-1]=0;
 8003350:	7bbb      	ldrb	r3, [r7, #14]
 8003352:	3b01      	subs	r3, #1
 8003354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003356:	4413      	add	r3, r2
 8003358:	2200      	movs	r2, #0
 800335a:	701a      	strb	r2, [r3, #0]
	}
	data_counter=data_counter+2;
 800335c:	7fbb      	ldrb	r3, [r7, #30]
 800335e:	3302      	adds	r3, #2
 8003360:	77bb      	strb	r3, [r7, #30]

	return(pec_error);
 8003362:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3720      	adds	r7, #32
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <LTC681x_pollAdc>:
	return(adc_state);
}

/* This function will block operation until the ADC has finished it's conversion */
uint32_t LTC681x_pollAdc()
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 8003376:	2300      	movs	r3, #0
 8003378:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 800337a:	2300      	movs	r3, #0
 800337c:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 800337e:	2300      	movs	r3, #0
 8003380:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8003382:	2307      	movs	r3, #7
 8003384:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 8003386:	2314      	movs	r3, #20
 8003388:	717b      	strb	r3, [r7, #5]
	cmd_pec = pec15_calc(2, cmd);
 800338a:	1d3b      	adds	r3, r7, #4
 800338c:	4619      	mov	r1, r3
 800338e:	2002      	movs	r0, #2
 8003390:	f7ff fc6c 	bl	8002c6c <pec15_calc>
 8003394:	4603      	mov	r3, r0
 8003396:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8003398:	893b      	ldrh	r3, [r7, #8]
 800339a:	0a1b      	lsrs	r3, r3, #8
 800339c:	b29b      	uxth	r3, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t)(cmd_pec);
 80033a2:	893b      	ldrh	r3, [r7, #8]
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	71fb      	strb	r3, [r7, #7]

	cs_low(CS_PIN);
 80033a8:	200a      	movs	r0, #10
 80033aa:	f000 fcbf 	bl	8003d2c <cs_low>
	spi_write_array(4,cmd);
 80033ae:	1d3b      	adds	r3, r7, #4
 80033b0:	4619      	mov	r1, r3
 80033b2:	2004      	movs	r0, #4
 80033b4:	f000 fcda 	bl	8003d6c <spi_write_array>
	while ((counter<200000)&&(finished == 0))
 80033b8:	e00d      	b.n	80033d6 <LTC681x_pollAdc+0x66>
	{
		current_time = spi_read_byte(0xff);
 80033ba:	20ff      	movs	r0, #255	; 0xff
 80033bc:	f000 fd20 	bl	8003e00 <spi_read_byte>
 80033c0:	4603      	mov	r3, r0
 80033c2:	72bb      	strb	r3, [r7, #10]
		if (current_time>0)
 80033c4:	7abb      	ldrb	r3, [r7, #10]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <LTC681x_pollAdc+0x60>
		{
			finished = 1;
 80033ca:	2301      	movs	r3, #1
 80033cc:	72fb      	strb	r3, [r7, #11]
 80033ce:	e002      	b.n	80033d6 <LTC681x_pollAdc+0x66>
		}
		else
		{
			counter = counter + 10;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	330a      	adds	r3, #10
 80033d4:	60fb      	str	r3, [r7, #12]
	while ((counter<200000)&&(finished == 0))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4a06      	ldr	r2, [pc, #24]	; (80033f4 <LTC681x_pollAdc+0x84>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d802      	bhi.n	80033e4 <LTC681x_pollAdc+0x74>
 80033de:	7afb      	ldrb	r3, [r7, #11]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0ea      	beq.n	80033ba <LTC681x_pollAdc+0x4a>
		}
	}
	cs_high(CS_PIN);
 80033e4:	200a      	movs	r0, #10
 80033e6:	f000 fcb1 	bl	8003d4c <cs_high>

	return(counter);
 80033ea:	68fb      	ldr	r3, [r7, #12]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	00030d3f 	.word	0x00030d3f

080033f8 <LTC681x_check_pec>:
/* Helper function that increments PEC counters */
void LTC681x_check_pec(uint8_t total_ic, //Number of ICs in the system
					   uint8_t reg, //Type of Register
					   cell_asic *ic //A two dimensional array that stores the data
					   )
{
 80033f8:	b480      	push	{r7}
 80033fa:	b08b      	sub	sp, #44	; 0x2c
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	603a      	str	r2, [r7, #0]
 8003402:	71fb      	strb	r3, [r7, #7]
 8003404:	460b      	mov	r3, r1
 8003406:	71bb      	strb	r3, [r7, #6]
	switch (reg)
 8003408:	79bb      	ldrb	r3, [r7, #6]
 800340a:	2b04      	cmp	r3, #4
 800340c:	f200 8191 	bhi.w	8003732 <LTC681x_check_pec+0x33a>
 8003410:	a201      	add	r2, pc, #4	; (adr r2, 8003418 <LTC681x_check_pec+0x20>)
 8003412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003416:	bf00      	nop
 8003418:	0800342d 	.word	0x0800342d
 800341c:	08003529 	.word	0x08003529
 8003420:	080035db 	.word	0x080035db
 8003424:	08003687 	.word	0x08003687
 8003428:	080034ab 	.word	0x080034ab
	{
		case LTC681x_CFGR:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800342c:	2300      	movs	r3, #0
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
 8003430:	e036      	b.n	80034a0 <LTC681x_check_pec+0xa8>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].config.rx_pec_match;
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	22e8      	movs	r2, #232	; 0xe8
 8003436:	fb02 f303 	mul.w	r3, r2, r3
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	4413      	add	r3, r2
 800343e:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	22e8      	movs	r2, #232	; 0xe8
 8003446:	fb02 f303 	mul.w	r3, r2, r3
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	4413      	add	r3, r2
 800344e:	7b9b      	ldrb	r3, [r3, #14]
 8003450:	b29a      	uxth	r2, r3
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	20e8      	movs	r0, #232	; 0xe8
 8003456:	fb00 f303 	mul.w	r3, r0, r3
 800345a:	6838      	ldr	r0, [r7, #0]
 800345c:	4403      	add	r3, r0
 800345e:	440a      	add	r2, r1
 8003460:	b292      	uxth	r2, r2
 8003462:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].config.rx_pec_match;
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	22e8      	movs	r2, #232	; 0xe8
 800346a:	fb02 f303 	mul.w	r3, r2, r3
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	4413      	add	r3, r2
 8003472:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	22e8      	movs	r2, #232	; 0xe8
 800347a:	fb02 f303 	mul.w	r3, r2, r3
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	4413      	add	r3, r2
 8003482:	7b9b      	ldrb	r3, [r3, #14]
 8003484:	b29a      	uxth	r2, r3
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	20e8      	movs	r0, #232	; 0xe8
 800348a:	fb00 f303 	mul.w	r3, r0, r3
 800348e:	6838      	ldr	r0, [r7, #0]
 8003490:	4403      	add	r3, r0
 8003492:	440a      	add	r2, r1
 8003494:	b292      	uxth	r2, r2
 8003496:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	3301      	adds	r3, #1
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a4:	429a      	cmp	r2, r3
 80034a6:	dbc4      	blt.n	8003432 <LTC681x_check_pec+0x3a>
		  }
		break;
 80034a8:	e144      	b.n	8003734 <LTC681x_check_pec+0x33c>

		case CFGRB:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80034aa:	2300      	movs	r3, #0
 80034ac:	623b      	str	r3, [r7, #32]
 80034ae:	e036      	b.n	800351e <LTC681x_check_pec+0x126>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configb.rx_pec_match;
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	22e8      	movs	r2, #232	; 0xe8
 80034b4:	fb02 f303 	mul.w	r3, r2, r3
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	4413      	add	r3, r2
 80034bc:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	22e8      	movs	r2, #232	; 0xe8
 80034c4:	fb02 f303 	mul.w	r3, r2, r3
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	4413      	add	r3, r2
 80034cc:	7f5b      	ldrb	r3, [r3, #29]
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	20e8      	movs	r0, #232	; 0xe8
 80034d4:	fb00 f303 	mul.w	r3, r0, r3
 80034d8:	6838      	ldr	r0, [r7, #0]
 80034da:	4403      	add	r3, r0
 80034dc:	440a      	add	r2, r1
 80034de:	b292      	uxth	r2, r2
 80034e0:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configb.rx_pec_match;
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	22e8      	movs	r2, #232	; 0xe8
 80034e8:	fb02 f303 	mul.w	r3, r2, r3
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	4413      	add	r3, r2
 80034f0:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	22e8      	movs	r2, #232	; 0xe8
 80034f8:	fb02 f303 	mul.w	r3, r2, r3
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	4413      	add	r3, r2
 8003500:	7f5b      	ldrb	r3, [r3, #29]
 8003502:	b29a      	uxth	r2, r3
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	20e8      	movs	r0, #232	; 0xe8
 8003508:	fb00 f303 	mul.w	r3, r0, r3
 800350c:	6838      	ldr	r0, [r7, #0]
 800350e:	4403      	add	r3, r0
 8003510:	440a      	add	r2, r1
 8003512:	b292      	uxth	r2, r2
 8003514:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	3301      	adds	r3, #1
 800351c:	623b      	str	r3, [r7, #32]
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	6a3a      	ldr	r2, [r7, #32]
 8003522:	429a      	cmp	r2, r3
 8003524:	dbc4      	blt.n	80034b0 <LTC681x_check_pec+0xb8>
		  }
		break;
 8003526:	e105      	b.n	8003734 <LTC681x_check_pec+0x33c>
		case CELL:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003528:	2300      	movs	r3, #0
 800352a:	61fb      	str	r3, [r7, #28]
 800352c:	e050      	b.n	80035d0 <LTC681x_check_pec+0x1d8>
		  {
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 800352e:	2300      	movs	r3, #0
 8003530:	61bb      	str	r3, [r7, #24]
 8003532:	e043      	b.n	80035bc <LTC681x_check_pec+0x1c4>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].cells.pec_match[i];
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	22e8      	movs	r2, #232	; 0xe8
 8003538:	fb02 f303 	mul.w	r3, r2, r3
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	4413      	add	r3, r2
 8003540:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	22e8      	movs	r2, #232	; 0xe8
 8003548:	fb02 f303 	mul.w	r3, r2, r3
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	441a      	add	r2, r3
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	4413      	add	r3, r2
 8003554:	3342      	adds	r3, #66	; 0x42
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	b29a      	uxth	r2, r3
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	20e8      	movs	r0, #232	; 0xe8
 800355e:	fb00 f303 	mul.w	r3, r0, r3
 8003562:	6838      	ldr	r0, [r7, #0]
 8003564:	4403      	add	r3, r0
 8003566:	440a      	add	r2, r1
 8003568:	b292      	uxth	r2, r2
 800356a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.cell_pec[i] = ic[current_ic].crc_count.cell_pec[i] + ic[current_ic].cells.pec_match[i];
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	22e8      	movs	r2, #232	; 0xe8
 8003572:	fb02 f303 	mul.w	r3, r2, r3
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	441a      	add	r2, r3
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	3360      	adds	r3, #96	; 0x60
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	4413      	add	r3, r2
 8003582:	8899      	ldrh	r1, [r3, #4]
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	22e8      	movs	r2, #232	; 0xe8
 8003588:	fb02 f303 	mul.w	r3, r2, r3
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	441a      	add	r2, r3
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	4413      	add	r3, r2
 8003594:	3342      	adds	r3, #66	; 0x42
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	b29b      	uxth	r3, r3
 800359a:	69fa      	ldr	r2, [r7, #28]
 800359c:	20e8      	movs	r0, #232	; 0xe8
 800359e:	fb00 f202 	mul.w	r2, r0, r2
 80035a2:	6838      	ldr	r0, [r7, #0]
 80035a4:	4402      	add	r2, r0
 80035a6:	440b      	add	r3, r1
 80035a8:	b299      	uxth	r1, r3
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	3360      	adds	r3, #96	; 0x60
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	4413      	add	r3, r2
 80035b2:	460a      	mov	r2, r1
 80035b4:	809a      	strh	r2, [r3, #4]
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	3301      	adds	r3, #1
 80035ba:	61bb      	str	r3, [r7, #24]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 80035c2:	461a      	mov	r2, r3
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	4293      	cmp	r3, r2
 80035c8:	dbb4      	blt.n	8003534 <LTC681x_check_pec+0x13c>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	3301      	adds	r3, #1
 80035ce:	61fb      	str	r3, [r7, #28]
 80035d0:	79fb      	ldrb	r3, [r7, #7]
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	dbaa      	blt.n	800352e <LTC681x_check_pec+0x136>
			}
		  }
		break;
 80035d8:	e0ac      	b.n	8003734 <LTC681x_check_pec+0x33c>
		case AUX:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80035da:	2300      	movs	r3, #0
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	e04d      	b.n	800367c <LTC681x_check_pec+0x284>
		  {
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 80035e0:	2300      	movs	r3, #0
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	e040      	b.n	8003668 <LTC681x_check_pec+0x270>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + (ic[current_ic].aux.pec_match[i]);
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	22e8      	movs	r2, #232	; 0xe8
 80035ea:	fb02 f303 	mul.w	r3, r2, r3
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	4413      	add	r3, r2
 80035f2:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	22e8      	movs	r2, #232	; 0xe8
 80035fa:	fb02 f303 	mul.w	r3, r2, r3
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	441a      	add	r2, r3
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4413      	add	r3, r2
 8003606:	335a      	adds	r3, #90	; 0x5a
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	b29a      	uxth	r2, r3
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	20e8      	movs	r0, #232	; 0xe8
 8003610:	fb00 f303 	mul.w	r3, r0, r3
 8003614:	6838      	ldr	r0, [r7, #0]
 8003616:	4403      	add	r3, r0
 8003618:	440a      	add	r2, r1
 800361a:	b292      	uxth	r2, r2
 800361c:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.aux_pec[i] = ic[current_ic].crc_count.aux_pec[i] + (ic[current_ic].aux.pec_match[i]);
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	22e8      	movs	r2, #232	; 0xe8
 8003624:	fb02 f303 	mul.w	r3, r2, r3
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	4413      	add	r3, r2
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	3268      	adds	r2, #104	; 0x68
 8003630:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	22e8      	movs	r2, #232	; 0xe8
 8003638:	fb02 f303 	mul.w	r3, r2, r3
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	441a      	add	r2, r3
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4413      	add	r3, r2
 8003644:	335a      	adds	r3, #90	; 0x5a
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	b29a      	uxth	r2, r3
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	20e8      	movs	r0, #232	; 0xe8
 800364e:	fb00 f303 	mul.w	r3, r0, r3
 8003652:	6838      	ldr	r0, [r7, #0]
 8003654:	4403      	add	r3, r0
 8003656:	440a      	add	r2, r1
 8003658:	b291      	uxth	r1, r2
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	3268      	adds	r2, #104	; 0x68
 800365e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	3301      	adds	r3, #1
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800366e:	461a      	mov	r2, r3
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	4293      	cmp	r3, r2
 8003674:	dbb7      	blt.n	80035e6 <LTC681x_check_pec+0x1ee>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	3301      	adds	r3, #1
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	429a      	cmp	r2, r3
 8003682:	dbad      	blt.n	80035e0 <LTC681x_check_pec+0x1e8>
			}
		  }

		break;
 8003684:	e056      	b.n	8003734 <LTC681x_check_pec+0x33c>
		case STAT:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	e04d      	b.n	8003728 <LTC681x_check_pec+0x330>
		  {

			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 800368c:	2300      	movs	r3, #0
 800368e:	60bb      	str	r3, [r7, #8]
 8003690:	e040      	b.n	8003714 <LTC681x_check_pec+0x31c>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].stat.pec_match[i];
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	22e8      	movs	r2, #232	; 0xe8
 8003696:	fb02 f303 	mul.w	r3, r2, r3
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	4413      	add	r3, r2
 800369e:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	22e8      	movs	r2, #232	; 0xe8
 80036a6:	fb02 f303 	mul.w	r3, r2, r3
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	441a      	add	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4413      	add	r3, r2
 80036b2:	336b      	adds	r3, #107	; 0x6b
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	20e8      	movs	r0, #232	; 0xe8
 80036bc:	fb00 f303 	mul.w	r3, r0, r3
 80036c0:	6838      	ldr	r0, [r7, #0]
 80036c2:	4403      	add	r3, r0
 80036c4:	440a      	add	r2, r1
 80036c6:	b292      	uxth	r2, r2
 80036c8:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.stat_pec[i] = ic[current_ic].crc_count.stat_pec[i] + ic[current_ic].stat.pec_match[i];
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	22e8      	movs	r2, #232	; 0xe8
 80036d0:	fb02 f303 	mul.w	r3, r2, r3
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	4413      	add	r3, r2
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	326c      	adds	r2, #108	; 0x6c
 80036dc:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	22e8      	movs	r2, #232	; 0xe8
 80036e4:	fb02 f303 	mul.w	r3, r2, r3
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	441a      	add	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4413      	add	r3, r2
 80036f0:	336b      	adds	r3, #107	; 0x6b
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	20e8      	movs	r0, #232	; 0xe8
 80036fa:	fb00 f303 	mul.w	r3, r0, r3
 80036fe:	6838      	ldr	r0, [r7, #0]
 8003700:	4403      	add	r3, r0
 8003702:	440a      	add	r2, r1
 8003704:	b291      	uxth	r1, r2
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	326c      	adds	r2, #108	; 0x6c
 800370a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	3301      	adds	r3, #1
 8003712:	60bb      	str	r3, [r7, #8]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800371a:	3b01      	subs	r3, #1
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	429a      	cmp	r2, r3
 8003720:	dbb7      	blt.n	8003692 <LTC681x_check_pec+0x29a>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3301      	adds	r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	429a      	cmp	r2, r3
 800372e:	dbad      	blt.n	800368c <LTC681x_check_pec+0x294>
			}
		  }
		break;
 8003730:	e000      	b.n	8003734 <LTC681x_check_pec+0x33c>
		default:
		break;
 8003732:	bf00      	nop
	}
}
 8003734:	bf00      	nop
 8003736:	372c      	adds	r7, #44	; 0x2c
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <LTC681x_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC681x_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that stores the data
							 )
{
 8003740:	b480      	push	{r7}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	6039      	str	r1, [r7, #0]
 800374a:	71fb      	strb	r3, [r7, #7]
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800374c:	2300      	movs	r3, #0
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	e051      	b.n	80037f6 <LTC681x_reset_crc_count+0xb6>
	{
		ic[current_ic].crc_count.pec_count = 0;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	22e8      	movs	r2, #232	; 0xe8
 8003756:	fb02 f303 	mul.w	r3, r2, r3
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	4413      	add	r3, r2
 800375e:	2200      	movs	r2, #0
 8003760:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		ic[current_ic].crc_count.cfgr_pec = 0;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	22e8      	movs	r2, #232	; 0xe8
 8003768:	fb02 f303 	mul.w	r3, r2, r3
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	4413      	add	r3, r2
 8003770:	2200      	movs	r2, #0
 8003772:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		for (int i=0; i<6; i++)
 8003776:	2300      	movs	r3, #0
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	e00e      	b.n	800379a <LTC681x_reset_crc_count+0x5a>
		{
			ic[current_ic].crc_count.cell_pec[i]=0;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	22e8      	movs	r2, #232	; 0xe8
 8003780:	fb02 f303 	mul.w	r3, r2, r3
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	441a      	add	r2, r3
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	3360      	adds	r3, #96	; 0x60
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	4413      	add	r3, r2
 8003790:	2200      	movs	r2, #0
 8003792:	809a      	strh	r2, [r3, #4]
		for (int i=0; i<6; i++)
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	3301      	adds	r3, #1
 8003798:	613b      	str	r3, [r7, #16]
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	2b05      	cmp	r3, #5
 800379e:	dded      	ble.n	800377c <LTC681x_reset_crc_count+0x3c>

		}
		for (int i=0; i<4; i++)
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	e00d      	b.n	80037c2 <LTC681x_reset_crc_count+0x82>
		{
			ic[current_ic].crc_count.aux_pec[i]=0;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	22e8      	movs	r2, #232	; 0xe8
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	4413      	add	r3, r2
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	3268      	adds	r2, #104	; 0x68
 80037b6:	2100      	movs	r1, #0
 80037b8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int i=0; i<4; i++)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	3301      	adds	r3, #1
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b03      	cmp	r3, #3
 80037c6:	ddee      	ble.n	80037a6 <LTC681x_reset_crc_count+0x66>
		}
		for (int i=0; i<2; i++)
 80037c8:	2300      	movs	r3, #0
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	e00d      	b.n	80037ea <LTC681x_reset_crc_count+0xaa>
		{
			ic[current_ic].crc_count.stat_pec[i]=0;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	22e8      	movs	r2, #232	; 0xe8
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	4413      	add	r3, r2
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	326c      	adds	r2, #108	; 0x6c
 80037de:	2100      	movs	r1, #0
 80037e0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int i=0; i<2; i++)
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	3301      	adds	r3, #1
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	ddee      	ble.n	80037ce <LTC681x_reset_crc_count+0x8e>
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	3301      	adds	r3, #1
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	dba9      	blt.n	8003752 <LTC681x_reset_crc_count+0x12>
		}
	}
}
 80037fe:	bf00      	nop
 8003800:	bf00      	nop
 8003802:	371c      	adds	r7, #28
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <LTC681x_init_cfg>:

/* Helper function to initialize CFG variables */
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that stores the data
					  )
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	6039      	str	r1, [r7, #0]
 8003816:	71fb      	strb	r3, [r7, #7]
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8003818:	2300      	movs	r3, #0
 800381a:	73fb      	strb	r3, [r7, #15]
 800381c:	e015      	b.n	800384a <LTC681x_init_cfg+0x3e>
	{
		for (int j =0; j<6; j++)
 800381e:	2300      	movs	r3, #0
 8003820:	60bb      	str	r3, [r7, #8]
 8003822:	e00c      	b.n	800383e <LTC681x_init_cfg+0x32>
		{
		  ic[current_ic].config.tx_data[j] = 0;
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	22e8      	movs	r2, #232	; 0xe8
 8003828:	fb02 f303 	mul.w	r3, r2, r3
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	441a      	add	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4413      	add	r3, r2
 8003834:	2200      	movs	r2, #0
 8003836:	701a      	strb	r2, [r3, #0]
		for (int j =0; j<6; j++)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	3301      	adds	r3, #1
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b05      	cmp	r3, #5
 8003842:	ddef      	ble.n	8003824 <LTC681x_init_cfg+0x18>
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	3301      	adds	r3, #1
 8003848:	73fb      	strb	r3, [r7, #15]
 800384a:	7bfa      	ldrb	r2, [r7, #15]
 800384c:	79fb      	ldrb	r3, [r7, #7]
 800384e:	429a      	cmp	r2, r3
 8003850:	d3e5      	bcc.n	800381e <LTC681x_init_cfg+0x12>
		}
	}
}
 8003852:	bf00      	nop
 8003854:	bf00      	nop
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <LTC681x_set_cfgr>:
					 bool dcc[12], // The DCC bits
					 bool dcto[4], // The Dcto bits
					 uint16_t uv, // The UV value
					 uint16_t  ov // The OV value
					 )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6039      	str	r1, [r7, #0]
 8003868:	4611      	mov	r1, r2
 800386a:	461a      	mov	r2, r3
 800386c:	4603      	mov	r3, r0
 800386e:	71fb      	strb	r3, [r7, #7]
 8003870:	460b      	mov	r3, r1
 8003872:	71bb      	strb	r3, [r7, #6]
 8003874:	4613      	mov	r3, r2
 8003876:	717b      	strb	r3, [r7, #5]
	LTC681x_set_cfgr_refon(nIC,ic,refon);
 8003878:	79ba      	ldrb	r2, [r7, #6]
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	6839      	ldr	r1, [r7, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f000 f828 	bl	80038d4 <LTC681x_set_cfgr_refon>
	LTC681x_set_cfgr_adcopt(nIC,ic,adcopt);
 8003884:	797a      	ldrb	r2, [r7, #5]
 8003886:	79fb      	ldrb	r3, [r7, #7]
 8003888:	6839      	ldr	r1, [r7, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f000 f856 	bl	800393c <LTC681x_set_cfgr_adcopt>
	LTC681x_set_cfgr_gpio(nIC,ic,gpio);
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	6839      	ldr	r1, [r7, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f000 f884 	bl	80039a4 <LTC681x_set_cfgr_gpio>
	LTC681x_set_cfgr_dis(nIC,ic,dcc);
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	6839      	ldr	r1, [r7, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 f8ce 	bl	8003a44 <LTC681x_set_cfgr_dis>
	LTC681x_set_cfgr_dcto(nIC,ic,dcto);
 80038a8:	79fb      	ldrb	r3, [r7, #7]
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	6839      	ldr	r1, [r7, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 f957 	bl	8003b62 <LTC681x_set_cfgr_dcto>
	LTC681x_set_cfgr_uv(nIC, ic, uv);
 80038b4:	8bba      	ldrh	r2, [r7, #28]
 80038b6:	79fb      	ldrb	r3, [r7, #7]
 80038b8:	6839      	ldr	r1, [r7, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 f9a1 	bl	8003c02 <LTC681x_set_cfgr_uv>
	LTC681x_set_cfgr_ov(nIC, ic, ov);
 80038c0:	8c3a      	ldrh	r2, [r7, #32]
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	6839      	ldr	r1, [r7, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 f9e1 	bl	8003c8e <LTC681x_set_cfgr_ov>
}
 80038cc:	bf00      	nop
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <LTC681x_set_cfgr_refon>:

/* Helper function to set the REFON bit */
void LTC681x_set_cfgr_refon(uint8_t nIC, cell_asic *ic, bool refon)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	6039      	str	r1, [r7, #0]
 80038de:	71fb      	strb	r3, [r7, #7]
 80038e0:	4613      	mov	r3, r2
 80038e2:	71bb      	strb	r3, [r7, #6]
	if (refon) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x04;
 80038e4:	79bb      	ldrb	r3, [r7, #6]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d011      	beq.n	800390e <LTC681x_set_cfgr_refon+0x3a>
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	22e8      	movs	r2, #232	; 0xe8
 80038ee:	fb02 f303 	mul.w	r3, r2, r3
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	4413      	add	r3, r2
 80038f6:	781a      	ldrb	r2, [r3, #0]
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	21e8      	movs	r1, #232	; 0xe8
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	6839      	ldr	r1, [r7, #0]
 8003902:	440b      	add	r3, r1
 8003904:	f042 0204 	orr.w	r2, r2, #4
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
}
 800390c:	e010      	b.n	8003930 <LTC681x_set_cfgr_refon+0x5c>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	22e8      	movs	r2, #232	; 0xe8
 8003912:	fb02 f303 	mul.w	r3, r2, r3
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	4413      	add	r3, r2
 800391a:	781a      	ldrb	r2, [r3, #0]
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	21e8      	movs	r1, #232	; 0xe8
 8003920:	fb01 f303 	mul.w	r3, r1, r3
 8003924:	6839      	ldr	r1, [r7, #0]
 8003926:	440b      	add	r3, r1
 8003928:	f022 0204 	bic.w	r2, r2, #4
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	701a      	strb	r2, [r3, #0]
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <LTC681x_set_cfgr_adcopt>:

/* Helper function to set the ADCOPT bit */
void LTC681x_set_cfgr_adcopt(uint8_t nIC, cell_asic *ic, bool adcopt)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	4603      	mov	r3, r0
 8003944:	6039      	str	r1, [r7, #0]
 8003946:	71fb      	strb	r3, [r7, #7]
 8003948:	4613      	mov	r3, r2
 800394a:	71bb      	strb	r3, [r7, #6]
	if (adcopt) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x01;
 800394c:	79bb      	ldrb	r3, [r7, #6]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d011      	beq.n	8003976 <LTC681x_set_cfgr_adcopt+0x3a>
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	22e8      	movs	r2, #232	; 0xe8
 8003956:	fb02 f303 	mul.w	r3, r2, r3
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	4413      	add	r3, r2
 800395e:	781a      	ldrb	r2, [r3, #0]
 8003960:	79fb      	ldrb	r3, [r7, #7]
 8003962:	21e8      	movs	r1, #232	; 0xe8
 8003964:	fb01 f303 	mul.w	r3, r1, r3
 8003968:	6839      	ldr	r1, [r7, #0]
 800396a:	440b      	add	r3, r1
 800396c:	f042 0201 	orr.w	r2, r2, #1
 8003970:	b2d2      	uxtb	r2, r2
 8003972:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
}
 8003974:	e010      	b.n	8003998 <LTC681x_set_cfgr_adcopt+0x5c>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	22e8      	movs	r2, #232	; 0xe8
 800397a:	fb02 f303 	mul.w	r3, r2, r3
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	4413      	add	r3, r2
 8003982:	781a      	ldrb	r2, [r3, #0]
 8003984:	79fb      	ldrb	r3, [r7, #7]
 8003986:	21e8      	movs	r1, #232	; 0xe8
 8003988:	fb01 f303 	mul.w	r3, r1, r3
 800398c:	6839      	ldr	r1, [r7, #0]
 800398e:	440b      	add	r3, r1
 8003990:	f022 0201 	bic.w	r2, r2, #1
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	701a      	strb	r2, [r3, #0]
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <LTC681x_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void LTC681x_set_cfgr_gpio(uint8_t nIC, cell_asic *ic,bool gpio[5])
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	73fb      	strb	r3, [r7, #15]
	for (int i =0; i<5; i++)
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]
 80039b6:	e03b      	b.n	8003a30 <LTC681x_set_cfgr_gpio+0x8c>
	{
		if (gpio[i])ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|(0x01<<(i+3));
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	4413      	add	r3, r2
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d018      	beq.n	80039f6 <LTC681x_set_cfgr_gpio+0x52>
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
 80039c6:	22e8      	movs	r2, #232	; 0xe8
 80039c8:	fb02 f303 	mul.w	r3, r2, r3
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	4413      	add	r3, r2
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	b25a      	sxtb	r2, r3
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	3303      	adds	r3, #3
 80039d8:	2101      	movs	r1, #1
 80039da:	fa01 f303 	lsl.w	r3, r1, r3
 80039de:	b25b      	sxtb	r3, r3
 80039e0:	4313      	orrs	r3, r2
 80039e2:	b259      	sxtb	r1, r3
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	22e8      	movs	r2, #232	; 0xe8
 80039e8:	fb02 f303 	mul.w	r3, r2, r3
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	4413      	add	r3, r2
 80039f0:	b2ca      	uxtb	r2, r1
 80039f2:	701a      	strb	r2, [r3, #0]
 80039f4:	e019      	b.n	8003a2a <LTC681x_set_cfgr_gpio+0x86>
		else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&(~(0x01<<(i+3)));
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	22e8      	movs	r2, #232	; 0xe8
 80039fa:	fb02 f303 	mul.w	r3, r2, r3
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	4413      	add	r3, r2
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	b25a      	sxtb	r2, r3
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	3303      	adds	r3, #3
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a10:	b25b      	sxtb	r3, r3
 8003a12:	43db      	mvns	r3, r3
 8003a14:	b25b      	sxtb	r3, r3
 8003a16:	4013      	ands	r3, r2
 8003a18:	b259      	sxtb	r1, r3
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	22e8      	movs	r2, #232	; 0xe8
 8003a1e:	fb02 f303 	mul.w	r3, r2, r3
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	4413      	add	r3, r2
 8003a26:	b2ca      	uxtb	r2, r1
 8003a28:	701a      	strb	r2, [r3, #0]
	for (int i =0; i<5; i++)
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	ddc0      	ble.n	80039b8 <LTC681x_set_cfgr_gpio+0x14>
	}
}
 8003a36:	bf00      	nop
 8003a38:	bf00      	nop
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <LTC681x_set_cfgr_dis>:

/* Helper function to control discharge */
void LTC681x_set_cfgr_dis(uint8_t nIC, cell_asic *ic,bool dcc[12])
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	73fb      	strb	r3, [r7, #15]
	for (int i =0; i<8; i++)
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	e039      	b.n	8003acc <LTC681x_set_cfgr_dis+0x88>
	{
		if (dcc[i])ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]|(0x01<<i);
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d017      	beq.n	8003a94 <LTC681x_set_cfgr_dis+0x50>
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	22e8      	movs	r2, #232	; 0xe8
 8003a68:	fb02 f303 	mul.w	r3, r2, r3
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	4413      	add	r3, r2
 8003a70:	791b      	ldrb	r3, [r3, #4]
 8003a72:	b25a      	sxtb	r2, r3
 8003a74:	2101      	movs	r1, #1
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7c:	b25b      	sxtb	r3, r3
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	b259      	sxtb	r1, r3
 8003a82:	7bfb      	ldrb	r3, [r7, #15]
 8003a84:	22e8      	movs	r2, #232	; 0xe8
 8003a86:	fb02 f303 	mul.w	r3, r2, r3
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	b2ca      	uxtb	r2, r1
 8003a90:	711a      	strb	r2, [r3, #4]
 8003a92:	e018      	b.n	8003ac6 <LTC681x_set_cfgr_dis+0x82>
		else ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]& (~(0x01<<i));
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	22e8      	movs	r2, #232	; 0xe8
 8003a98:	fb02 f303 	mul.w	r3, r2, r3
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	791b      	ldrb	r3, [r3, #4]
 8003aa2:	b25a      	sxtb	r2, r3
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8003aac:	b25b      	sxtb	r3, r3
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	b25b      	sxtb	r3, r3
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	b259      	sxtb	r1, r3
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
 8003ab8:	22e8      	movs	r2, #232	; 0xe8
 8003aba:	fb02 f303 	mul.w	r3, r2, r3
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	b2ca      	uxtb	r2, r1
 8003ac4:	711a      	strb	r2, [r3, #4]
	for (int i =0; i<8; i++)
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2b07      	cmp	r3, #7
 8003ad0:	ddc2      	ble.n	8003a58 <LTC681x_set_cfgr_dis+0x14>
	}
	for (int i =0; i<4; i++)
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	e03a      	b.n	8003b4e <LTC681x_set_cfgr_dis+0x10a>
	{
		if (dcc[i+8])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<i);
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	3308      	adds	r3, #8
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	4413      	add	r3, r2
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d017      	beq.n	8003b16 <LTC681x_set_cfgr_dis+0xd2>
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
 8003ae8:	22e8      	movs	r2, #232	; 0xe8
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	4413      	add	r3, r2
 8003af2:	795b      	ldrb	r3, [r3, #5]
 8003af4:	b25a      	sxtb	r2, r3
 8003af6:	2101      	movs	r1, #1
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	fa01 f303 	lsl.w	r3, r1, r3
 8003afe:	b25b      	sxtb	r3, r3
 8003b00:	4313      	orrs	r3, r2
 8003b02:	b259      	sxtb	r1, r3
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	22e8      	movs	r2, #232	; 0xe8
 8003b08:	fb02 f303 	mul.w	r3, r2, r3
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	4413      	add	r3, r2
 8003b10:	b2ca      	uxtb	r2, r1
 8003b12:	715a      	strb	r2, [r3, #5]
 8003b14:	e018      	b.n	8003b48 <LTC681x_set_cfgr_dis+0x104>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<i));
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
 8003b18:	22e8      	movs	r2, #232	; 0xe8
 8003b1a:	fb02 f303 	mul.w	r3, r2, r3
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	4413      	add	r3, r2
 8003b22:	795b      	ldrb	r3, [r3, #5]
 8003b24:	b25a      	sxtb	r2, r3
 8003b26:	2101      	movs	r1, #1
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2e:	b25b      	sxtb	r3, r3
 8003b30:	43db      	mvns	r3, r3
 8003b32:	b25b      	sxtb	r3, r3
 8003b34:	4013      	ands	r3, r2
 8003b36:	b259      	sxtb	r1, r3
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	22e8      	movs	r2, #232	; 0xe8
 8003b3c:	fb02 f303 	mul.w	r3, r2, r3
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	4413      	add	r3, r2
 8003b44:	b2ca      	uxtb	r2, r1
 8003b46:	715a      	strb	r2, [r3, #5]
	for (int i =0; i<4; i++)
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	2b03      	cmp	r3, #3
 8003b52:	ddc1      	ble.n	8003ad8 <LTC681x_set_cfgr_dis+0x94>
	}
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	371c      	adds	r7, #28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <LTC681x_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic,bool dcto[4])
{
 8003b62:	b480      	push	{r7}
 8003b64:	b087      	sub	sp, #28
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	4603      	mov	r3, r0
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	607a      	str	r2, [r7, #4]
 8003b6e:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<4;i++)
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	e03b      	b.n	8003bee <LTC681x_set_cfgr_dcto+0x8c>
	{
		if(dcto[i])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<(i+4));
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d018      	beq.n	8003bb4 <LTC681x_set_cfgr_dcto+0x52>
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	22e8      	movs	r2, #232	; 0xe8
 8003b86:	fb02 f303 	mul.w	r3, r2, r3
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	795b      	ldrb	r3, [r3, #5]
 8003b90:	b25a      	sxtb	r2, r3
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	3304      	adds	r3, #4
 8003b96:	2101      	movs	r1, #1
 8003b98:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9c:	b25b      	sxtb	r3, r3
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	b259      	sxtb	r1, r3
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
 8003ba4:	22e8      	movs	r2, #232	; 0xe8
 8003ba6:	fb02 f303 	mul.w	r3, r2, r3
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	4413      	add	r3, r2
 8003bae:	b2ca      	uxtb	r2, r1
 8003bb0:	715a      	strb	r2, [r3, #5]
 8003bb2:	e019      	b.n	8003be8 <LTC681x_set_cfgr_dcto+0x86>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<(i+4)));
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
 8003bb6:	22e8      	movs	r2, #232	; 0xe8
 8003bb8:	fb02 f303 	mul.w	r3, r2, r3
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	795b      	ldrb	r3, [r3, #5]
 8003bc2:	b25a      	sxtb	r2, r3
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	2101      	movs	r1, #1
 8003bca:	fa01 f303 	lsl.w	r3, r1, r3
 8003bce:	b25b      	sxtb	r3, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	b25b      	sxtb	r3, r3
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	b259      	sxtb	r1, r3
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	22e8      	movs	r2, #232	; 0xe8
 8003bdc:	fb02 f303 	mul.w	r3, r2, r3
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	4413      	add	r3, r2
 8003be4:	b2ca      	uxtb	r2, r1
 8003be6:	715a      	strb	r2, [r3, #5]
	for(int i =0;i<4;i++)
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	3301      	adds	r3, #1
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	ddc0      	ble.n	8003b76 <LTC681x_set_cfgr_dcto+0x14>
	}
}
 8003bf4:	bf00      	nop
 8003bf6:	bf00      	nop
 8003bf8:	371c      	adds	r7, #28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <LTC681x_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic *ic,uint16_t uv)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b085      	sub	sp, #20
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	4603      	mov	r3, r0
 8003c0a:	6039      	str	r1, [r7, #0]
 8003c0c:	71fb      	strb	r3, [r7, #7]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (uv/16)-1;
 8003c12:	88bb      	ldrh	r3, [r7, #4]
 8003c14:	091b      	lsrs	r3, r3, #4
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	81fb      	strh	r3, [r7, #14]
	ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 8003c1c:	79fb      	ldrb	r3, [r7, #7]
 8003c1e:	22e8      	movs	r2, #232	; 0xe8
 8003c20:	fb02 f303 	mul.w	r3, r2, r3
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	4413      	add	r3, r2
 8003c28:	89fa      	ldrh	r2, [r7, #14]
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	705a      	strb	r2, [r3, #1]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0xF0;
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	22e8      	movs	r2, #232	; 0xe8
 8003c32:	fb02 f303 	mul.w	r3, r2, r3
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	4413      	add	r3, r2
 8003c3a:	789a      	ldrb	r2, [r3, #2]
 8003c3c:	79fb      	ldrb	r3, [r7, #7]
 8003c3e:	21e8      	movs	r1, #232	; 0xe8
 8003c40:	fb01 f303 	mul.w	r3, r1, r3
 8003c44:	6839      	ldr	r1, [r7, #0]
 8003c46:	440b      	add	r3, r1
 8003c48:	f022 020f 	bic.w	r2, r2, #15
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x0F00 & tmp)>>8);
 8003c50:	79fb      	ldrb	r3, [r7, #7]
 8003c52:	22e8      	movs	r2, #232	; 0xe8
 8003c54:	fb02 f303 	mul.w	r3, r2, r3
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	789b      	ldrb	r3, [r3, #2]
 8003c5e:	b25a      	sxtb	r2, r3
 8003c60:	89fb      	ldrh	r3, [r7, #14]
 8003c62:	0a1b      	lsrs	r3, r3, #8
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	b25b      	sxtb	r3, r3
 8003c68:	f003 030f 	and.w	r3, r3, #15
 8003c6c:	b25b      	sxtb	r3, r3
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	b259      	sxtb	r1, r3
 8003c72:	79fb      	ldrb	r3, [r7, #7]
 8003c74:	22e8      	movs	r2, #232	; 0xe8
 8003c76:	fb02 f303 	mul.w	r3, r2, r3
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	b2ca      	uxtb	r2, r1
 8003c80:	709a      	strb	r2, [r3, #2]
}
 8003c82:	bf00      	nop
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <LTC681x_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void LTC681x_set_cfgr_ov(uint8_t nIC, cell_asic *ic,uint16_t ov)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b085      	sub	sp, #20
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	4603      	mov	r3, r0
 8003c96:	6039      	str	r1, [r7, #0]
 8003c98:	71fb      	strb	r3, [r7, #7]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (ov/16);
 8003c9e:	88bb      	ldrh	r3, [r7, #4]
 8003ca0:	091b      	lsrs	r3, r3, #4
 8003ca2:	81fb      	strh	r3, [r7, #14]
	ic[nIC].config.tx_data[3] = 0x00FF & (tmp>>4);
 8003ca4:	89fb      	ldrh	r3, [r7, #14]
 8003ca6:	091b      	lsrs	r3, r3, #4
 8003ca8:	b299      	uxth	r1, r3
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	22e8      	movs	r2, #232	; 0xe8
 8003cae:	fb02 f303 	mul.w	r3, r2, r3
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	b2ca      	uxtb	r2, r1
 8003cb8:	70da      	strb	r2, [r3, #3]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0x0F;
 8003cba:	79fb      	ldrb	r3, [r7, #7]
 8003cbc:	22e8      	movs	r2, #232	; 0xe8
 8003cbe:	fb02 f303 	mul.w	r3, r2, r3
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	789a      	ldrb	r2, [r3, #2]
 8003cc8:	79fb      	ldrb	r3, [r7, #7]
 8003cca:	21e8      	movs	r1, #232	; 0xe8
 8003ccc:	fb01 f303 	mul.w	r3, r1, r3
 8003cd0:	6839      	ldr	r1, [r7, #0]
 8003cd2:	440b      	add	r3, r1
 8003cd4:	f002 020f 	and.w	r2, r2, #15
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x000F & tmp)<<4);
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	22e8      	movs	r2, #232	; 0xe8
 8003ce0:	fb02 f303 	mul.w	r3, r2, r3
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	789b      	ldrb	r3, [r3, #2]
 8003cea:	b25a      	sxtb	r2, r3
 8003cec:	89fb      	ldrh	r3, [r7, #14]
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	b25b      	sxtb	r3, r3
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	b259      	sxtb	r1, r3
 8003cf6:	79fb      	ldrb	r3, [r7, #7]
 8003cf8:	22e8      	movs	r2, #232	; 0xe8
 8003cfa:	fb02 f303 	mul.w	r3, r2, r3
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	4413      	add	r3, r2
 8003d02:	b2ca      	uxtb	r2, r1
 8003d04:	709a      	strb	r2, [r3, #2]
}
 8003d06:	bf00      	nop
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <delay_u>:

// ********************************** Functions **********************************

// ******************** Delay ********************

void delay_u(uint16_t micro) {
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	4603      	mov	r3, r0
 8003d1a:	80fb      	strh	r3, [r7, #6]
	FEB_Timer_Delay_Micro(micro);
 8003d1c:	88fb      	ldrh	r3, [r7, #6]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fe fda2 	bl	8002868 <FEB_Timer_Delay_Micro>
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <cs_low>:
	HAL_Delay(milli);
}

// ******************** SPI ********************

void cs_low(uint8_t pin) {
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8003d36:	2200      	movs	r2, #0
 8003d38:	2108      	movs	r1, #8
 8003d3a:	4803      	ldr	r0, [pc, #12]	; (8003d48 <cs_low+0x1c>)
 8003d3c:	f002 fc82 	bl	8006644 <HAL_GPIO_WritePin>
}
 8003d40:	bf00      	nop
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40020800 	.word	0x40020800

08003d4c <cs_high>:

void cs_high(uint8_t pin) {
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	4603      	mov	r3, r0
 8003d54:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8003d56:	2201      	movs	r2, #1
 8003d58:	2108      	movs	r1, #8
 8003d5a:	4803      	ldr	r0, [pc, #12]	; (8003d68 <cs_high+0x1c>)
 8003d5c:	f002 fc72 	bl	8006644 <HAL_GPIO_WritePin>
}
 8003d60:	bf00      	nop
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40020800 	.word	0x40020800

08003d6c <spi_write_array>:

void spi_write_array(uint8_t len, uint8_t data[]) {
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	6039      	str	r1, [r7, #0]
 8003d76:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, data, len, 100);
 8003d78:	79fb      	ldrb	r3, [r7, #7]
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	2364      	movs	r3, #100	; 0x64
 8003d7e:	6839      	ldr	r1, [r7, #0]
 8003d80:	4803      	ldr	r0, [pc, #12]	; (8003d90 <spi_write_array+0x24>)
 8003d82:	f003 faea 	bl	800735a <HAL_SPI_Transmit>
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	200030d4 	.word	0x200030d4

08003d94 <spi_write_read>:

void spi_write_read(uint8_t tx_Data[], uint8_t tx_len, uint8_t *rx_data, uint8_t rx_len) {
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	607a      	str	r2, [r7, #4]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	460b      	mov	r3, r1
 8003da2:	72fb      	strb	r3, [r7, #11]
 8003da4:	4613      	mov	r3, r2
 8003da6:	72bb      	strb	r3, [r7, #10]
	for (uint8_t i = 0; i < tx_len; i++) {
 8003da8:	2300      	movs	r3, #0
 8003daa:	75fb      	strb	r3, [r7, #23]
 8003dac:	e00a      	b.n	8003dc4 <spi_write_read+0x30>
		HAL_SPI_Transmit(&hspi1, &tx_Data[i], 1, 100);
 8003dae:	7dfb      	ldrb	r3, [r7, #23]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	18d1      	adds	r1, r2, r3
 8003db4:	2364      	movs	r3, #100	; 0x64
 8003db6:	2201      	movs	r2, #1
 8003db8:	4810      	ldr	r0, [pc, #64]	; (8003dfc <spi_write_read+0x68>)
 8003dba:	f003 face 	bl	800735a <HAL_SPI_Transmit>
	for (uint8_t i = 0; i < tx_len; i++) {
 8003dbe:	7dfb      	ldrb	r3, [r7, #23]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	75fb      	strb	r3, [r7, #23]
 8003dc4:	7dfa      	ldrb	r2, [r7, #23]
 8003dc6:	7afb      	ldrb	r3, [r7, #11]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d3f0      	bcc.n	8003dae <spi_write_read+0x1a>
	}

	for (uint8_t i = 0; i < rx_len; i++) {
 8003dcc:	2300      	movs	r3, #0
 8003dce:	75bb      	strb	r3, [r7, #22]
 8003dd0:	e00a      	b.n	8003de8 <spi_write_read+0x54>
		HAL_SPI_Receive(&hspi1, &rx_data[i], 1, 100);
 8003dd2:	7dbb      	ldrb	r3, [r7, #22]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	18d1      	adds	r1, r2, r3
 8003dd8:	2364      	movs	r3, #100	; 0x64
 8003dda:	2201      	movs	r2, #1
 8003ddc:	4807      	ldr	r0, [pc, #28]	; (8003dfc <spi_write_read+0x68>)
 8003dde:	f003 fbf8 	bl	80075d2 <HAL_SPI_Receive>
	for (uint8_t i = 0; i < rx_len; i++) {
 8003de2:	7dbb      	ldrb	r3, [r7, #22]
 8003de4:	3301      	adds	r3, #1
 8003de6:	75bb      	strb	r3, [r7, #22]
 8003de8:	7dba      	ldrb	r2, [r7, #22]
 8003dea:	7abb      	ldrb	r3, [r7, #10]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d3f0      	bcc.n	8003dd2 <spi_write_read+0x3e>
	}
}
 8003df0:	bf00      	nop
 8003df2:	bf00      	nop
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	200030d4 	.word	0x200030d4

08003e00 <spi_read_byte>:

uint8_t spi_read_byte(uint8_t tx_dat) {
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4603      	mov	r3, r0
 8003e08:	71fb      	strb	r3, [r7, #7]
  uint8_t data;
  HAL_SPI_Receive(&hspi1, &data, 1, 100);
 8003e0a:	f107 010f 	add.w	r1, r7, #15
 8003e0e:	2364      	movs	r3, #100	; 0x64
 8003e10:	2201      	movs	r2, #1
 8003e12:	4804      	ldr	r0, [pc, #16]	; (8003e24 <spi_read_byte+0x24>)
 8003e14:	f003 fbdd 	bl	80075d2 <HAL_SPI_Receive>
  return data;
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	200030d4 	.word	0x200030d4

08003e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e2c:	f001 f802 	bl	8004e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e30:	f000 f84c 	bl	8003ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e34:	f000 fba2 	bl	800457c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003e38:	f000 fb76 	bl	8004528 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8003e3c:	f000 f958 	bl	80040f0 <MX_CAN1_Init>
  MX_SPI1_Init();
 8003e40:	f000 f9c2 	bl	80041c8 <MX_SPI1_Init>
  MX_CAN2_Init();
 8003e44:	f000 f98a 	bl	800415c <MX_CAN2_Init>
  MX_TIM1_Init();
 8003e48:	f000 f9f4 	bl	8004234 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003e4c:	f000 fa9e 	bl	800438c <MX_TIM2_Init>
  MX_TIM4_Init();
 8003e50:	f000 fb1c 	bl	800448c <MX_TIM4_Init>
  MX_ADC1_Init();
 8003e54:	f000 f8a8 	bl	8003fa8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8003e58:	f000 f8f8 	bl	800404c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  FEB_BMS_AIR_Open();
 8003e5c:	f7fd f8b2 	bl	8000fc4 <FEB_BMS_AIR_Open>
  FEB_BMS_Shutdown_Startup();
 8003e60:	f7fd f8c8 	bl	8000ff4 <FEB_BMS_Shutdown_Startup>
  FEB_BMS_State_Validate();
 8003e64:	f7fd f91c 	bl	80010a0 <FEB_BMS_State_Validate>

  FEB_LTC6811_Init();
 8003e68:	f7fd fd70 	bl	800194c <FEB_LTC6811_Init>
  FEB_CAN_Init();
 8003e6c:	f7fd f920 	bl	80010b0 <FEB_CAN_Init>
  FEB_CAN_Charger_Init();
 8003e70:	f7fd f988 	bl	8001184 <FEB_CAN_Charger_Init>
  FEB_Timer_Init();
 8003e74:	f7fe fcee 	bl	8002854 <FEB_Timer_Init>
  FEB_Fan_Init();
 8003e78:	f7fd fc98 	bl	80017ac <FEB_Fan_Init>

  HAL_Delay(1000);
 8003e7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e80:	f001 f84a 	bl	8004f18 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // *********************** Reset State ***********************
    FEB_LTC6811_Clear_Voltage();
 8003e84:	f7fe f856 	bl	8001f34 <FEB_LTC6811_Clear_Voltage>
    FEB_LTC6811_Clear_Temperature();
 8003e88:	f7fe fc30 	bl	80026ec <FEB_LTC6811_Clear_Temperature>

    // *********************** Cell Voltage ***********************
    FEB_LTC6811_Poll_Voltage();
 8003e8c:	f7fd fdcc 	bl	8001a28 <FEB_LTC6811_Poll_Voltage>
    FEB_LTC6811_Validate_Voltage();
 8003e90:	f7fd ff46 	bl	8001d20 <FEB_LTC6811_Validate_Voltage>
    FEB_LTC6811_UART_Transmit_Voltage();
 8003e94:	f7fd ff98 	bl	8001dc8 <FEB_LTC6811_UART_Transmit_Voltage>

    // *********************** Cell Temperature ***********************
    FEB_LTC6811_Poll_Temperature();
 8003e98:	f7fe f878 	bl	8001f8c <FEB_LTC6811_Poll_Temperature>
    FEB_LTC6811_Validate_Temperature();
 8003e9c:	f7fe fb2e 	bl	80024fc <FEB_LTC6811_Validate_Temperature>
    FEB_LTC6811_UART_Transmit_Temperature();
 8003ea0:	f7fe fba6 	bl	80025f0 <FEB_LTC6811_UART_Transmit_Temperature>
//    FEB_LTC6811_CAN_Transmit_Temperature();

    // *********************** IVT ***********************
    FEB_CAN_IVT_Process();
 8003ea4:	f7fd fad0 	bl	8001448 <FEB_CAN_IVT_Process>
    FEB_CAN_IVT_UART_Transmit();
 8003ea8:	f7fd fb46 	bl	8001538 <FEB_CAN_IVT_UART_Transmit>

    // *********************** Cell Balance ***********************
    FEB_LTC6811_Balance_Cells();
 8003eac:	f7fd fe80 	bl	8001bb0 <FEB_LTC6811_Balance_Cells>
    FEB_LTC6811_UART_Transmit_Discharge();
 8003eb0:	f7fd feb2 	bl	8001c18 <FEB_LTC6811_UART_Transmit_Discharge>

    // *********************** Charger ***********************
    FEB_CAN_Charger_Process(&hcan1);
 8003eb4:	4804      	ldr	r0, [pc, #16]	; (8003ec8 <main+0xa0>)
 8003eb6:	f7fd f9d9 	bl	800126c <FEB_CAN_Charger_Process>
    FEB_CAN_Charger_UART_Transmit();
 8003eba:	f7fd f9e1 	bl	8001280 <FEB_CAN_Charger_UART_Transmit>
//    FEB_CAN_Inverter_Process();

    if (FEB_CAN_CHARGER_STATE == 1) {
      HAL_Delay(1000);	// 1Hz
    } else {
      HAL_Delay(200);		// 5Hz
 8003ebe:	20c8      	movs	r0, #200	; 0xc8
 8003ec0:	f001 f82a 	bl	8004f18 <HAL_Delay>
    FEB_LTC6811_Clear_Voltage();
 8003ec4:	e7de      	b.n	8003e84 <main+0x5c>
 8003ec6:	bf00      	nop
 8003ec8:	20003084 	.word	0x20003084

08003ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b094      	sub	sp, #80	; 0x50
 8003ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ed2:	f107 031c 	add.w	r3, r7, #28
 8003ed6:	2234      	movs	r2, #52	; 0x34
 8003ed8:	2100      	movs	r1, #0
 8003eda:	4618      	mov	r0, r3
 8003edc:	f006 f865 	bl	8009faa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ee0:	f107 0308 	add.w	r3, r7, #8
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	605a      	str	r2, [r3, #4]
 8003eea:	609a      	str	r2, [r3, #8]
 8003eec:	60da      	str	r2, [r3, #12]
 8003eee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	607b      	str	r3, [r7, #4]
 8003ef4:	4b2a      	ldr	r3, [pc, #168]	; (8003fa0 <SystemClock_Config+0xd4>)
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	4a29      	ldr	r2, [pc, #164]	; (8003fa0 <SystemClock_Config+0xd4>)
 8003efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efe:	6413      	str	r3, [r2, #64]	; 0x40
 8003f00:	4b27      	ldr	r3, [pc, #156]	; (8003fa0 <SystemClock_Config+0xd4>)
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f08:	607b      	str	r3, [r7, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	603b      	str	r3, [r7, #0]
 8003f10:	4b24      	ldr	r3, [pc, #144]	; (8003fa4 <SystemClock_Config+0xd8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003f18:	4a22      	ldr	r2, [pc, #136]	; (8003fa4 <SystemClock_Config+0xd8>)
 8003f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	4b20      	ldr	r3, [pc, #128]	; (8003fa4 <SystemClock_Config+0xd8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f28:	603b      	str	r3, [r7, #0]
 8003f2a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f30:	2301      	movs	r3, #1
 8003f32:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f34:	2310      	movs	r3, #16
 8003f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003f40:	2308      	movs	r3, #8
 8003f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 8003f44:	2380      	movs	r3, #128	; 0x80
 8003f46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f48:	2302      	movs	r3, #2
 8003f4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003f50:	2302      	movs	r3, #2
 8003f52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f54:	f107 031c 	add.w	r3, r7, #28
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f002 fed7 	bl	8006d0c <HAL_RCC_OscConfig>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003f64:	f000 fb74 	bl	8004650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f68:	230f      	movs	r3, #15
 8003f6a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f70:	2300      	movs	r3, #0
 8003f72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003f74:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003f78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f7e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003f80:	f107 0308 	add.w	r3, r7, #8
 8003f84:	2104      	movs	r1, #4
 8003f86:	4618      	mov	r0, r3
 8003f88:	f002 fb76 	bl	8006678 <HAL_RCC_ClockConfig>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8003f92:	f000 fb5d 	bl	8004650 <Error_Handler>
  }
}
 8003f96:	bf00      	nop
 8003f98:	3750      	adds	r7, #80	; 0x50
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	40007000 	.word	0x40007000

08003fa8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003fae:	463b      	mov	r3, r7
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	605a      	str	r2, [r3, #4]
 8003fb6:	609a      	str	r2, [r3, #8]
 8003fb8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003fba:	4b21      	ldr	r3, [pc, #132]	; (8004040 <MX_ADC1_Init+0x98>)
 8003fbc:	4a21      	ldr	r2, [pc, #132]	; (8004044 <MX_ADC1_Init+0x9c>)
 8003fbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003fc0:	4b1f      	ldr	r3, [pc, #124]	; (8004040 <MX_ADC1_Init+0x98>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003fc6:	4b1e      	ldr	r3, [pc, #120]	; (8004040 <MX_ADC1_Init+0x98>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003fcc:	4b1c      	ldr	r3, [pc, #112]	; (8004040 <MX_ADC1_Init+0x98>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003fd2:	4b1b      	ldr	r3, [pc, #108]	; (8004040 <MX_ADC1_Init+0x98>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003fd8:	4b19      	ldr	r3, [pc, #100]	; (8004040 <MX_ADC1_Init+0x98>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003fe0:	4b17      	ldr	r3, [pc, #92]	; (8004040 <MX_ADC1_Init+0x98>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003fe6:	4b16      	ldr	r3, [pc, #88]	; (8004040 <MX_ADC1_Init+0x98>)
 8003fe8:	4a17      	ldr	r2, [pc, #92]	; (8004048 <MX_ADC1_Init+0xa0>)
 8003fea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003fec:	4b14      	ldr	r3, [pc, #80]	; (8004040 <MX_ADC1_Init+0x98>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003ff2:	4b13      	ldr	r3, [pc, #76]	; (8004040 <MX_ADC1_Init+0x98>)
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003ff8:	4b11      	ldr	r3, [pc, #68]	; (8004040 <MX_ADC1_Init+0x98>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004000:	4b0f      	ldr	r3, [pc, #60]	; (8004040 <MX_ADC1_Init+0x98>)
 8004002:	2201      	movs	r2, #1
 8004004:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004006:	480e      	ldr	r0, [pc, #56]	; (8004040 <MX_ADC1_Init+0x98>)
 8004008:	f000 ffaa 	bl	8004f60 <HAL_ADC_Init>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8004012:	f000 fb1d 	bl	8004650 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004016:	2308      	movs	r3, #8
 8004018:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800401a:	2301      	movs	r3, #1
 800401c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800401e:	2300      	movs	r3, #0
 8004020:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004022:	463b      	mov	r3, r7
 8004024:	4619      	mov	r1, r3
 8004026:	4806      	ldr	r0, [pc, #24]	; (8004040 <MX_ADC1_Init+0x98>)
 8004028:	f001 f8b0 	bl	800518c <HAL_ADC_ConfigChannel>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8004032:	f000 fb0d 	bl	8004650 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004036:	bf00      	nop
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	20002ff4 	.word	0x20002ff4
 8004044:	40012000 	.word	0x40012000
 8004048:	0f000001 	.word	0x0f000001

0800404c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004052:	463b      	mov	r3, r7
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	605a      	str	r2, [r3, #4]
 800405a:	609a      	str	r2, [r3, #8]
 800405c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800405e:	4b21      	ldr	r3, [pc, #132]	; (80040e4 <MX_ADC2_Init+0x98>)
 8004060:	4a21      	ldr	r2, [pc, #132]	; (80040e8 <MX_ADC2_Init+0x9c>)
 8004062:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004064:	4b1f      	ldr	r3, [pc, #124]	; (80040e4 <MX_ADC2_Init+0x98>)
 8004066:	2200      	movs	r2, #0
 8004068:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800406a:	4b1e      	ldr	r3, [pc, #120]	; (80040e4 <MX_ADC2_Init+0x98>)
 800406c:	2200      	movs	r2, #0
 800406e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8004070:	4b1c      	ldr	r3, [pc, #112]	; (80040e4 <MX_ADC2_Init+0x98>)
 8004072:	2200      	movs	r2, #0
 8004074:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8004076:	4b1b      	ldr	r3, [pc, #108]	; (80040e4 <MX_ADC2_Init+0x98>)
 8004078:	2200      	movs	r2, #0
 800407a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800407c:	4b19      	ldr	r3, [pc, #100]	; (80040e4 <MX_ADC2_Init+0x98>)
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004084:	4b17      	ldr	r3, [pc, #92]	; (80040e4 <MX_ADC2_Init+0x98>)
 8004086:	2200      	movs	r2, #0
 8004088:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800408a:	4b16      	ldr	r3, [pc, #88]	; (80040e4 <MX_ADC2_Init+0x98>)
 800408c:	4a17      	ldr	r2, [pc, #92]	; (80040ec <MX_ADC2_Init+0xa0>)
 800408e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004090:	4b14      	ldr	r3, [pc, #80]	; (80040e4 <MX_ADC2_Init+0x98>)
 8004092:	2200      	movs	r2, #0
 8004094:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8004096:	4b13      	ldr	r3, [pc, #76]	; (80040e4 <MX_ADC2_Init+0x98>)
 8004098:	2201      	movs	r2, #1
 800409a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800409c:	4b11      	ldr	r3, [pc, #68]	; (80040e4 <MX_ADC2_Init+0x98>)
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80040a4:	4b0f      	ldr	r3, [pc, #60]	; (80040e4 <MX_ADC2_Init+0x98>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80040aa:	480e      	ldr	r0, [pc, #56]	; (80040e4 <MX_ADC2_Init+0x98>)
 80040ac:	f000 ff58 	bl	8004f60 <HAL_ADC_Init>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80040b6:	f000 facb 	bl	8004650 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80040ba:	2309      	movs	r3, #9
 80040bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80040be:	2301      	movs	r3, #1
 80040c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80040c2:	2300      	movs	r3, #0
 80040c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80040c6:	463b      	mov	r3, r7
 80040c8:	4619      	mov	r1, r3
 80040ca:	4806      	ldr	r0, [pc, #24]	; (80040e4 <MX_ADC2_Init+0x98>)
 80040cc:	f001 f85e 	bl	800518c <HAL_ADC_ConfigChannel>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80040d6:	f000 fabb 	bl	8004650 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80040da:	bf00      	nop
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	2000303c 	.word	0x2000303c
 80040e8:	40012100 	.word	0x40012100
 80040ec:	0f000001 	.word	0x0f000001

080040f0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80040f4:	4b17      	ldr	r3, [pc, #92]	; (8004154 <MX_CAN1_Init+0x64>)
 80040f6:	4a18      	ldr	r2, [pc, #96]	; (8004158 <MX_CAN1_Init+0x68>)
 80040f8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80040fa:	4b16      	ldr	r3, [pc, #88]	; (8004154 <MX_CAN1_Init+0x64>)
 80040fc:	2210      	movs	r2, #16
 80040fe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8004100:	4b14      	ldr	r3, [pc, #80]	; (8004154 <MX_CAN1_Init+0x64>)
 8004102:	2200      	movs	r2, #0
 8004104:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004106:	4b13      	ldr	r3, [pc, #76]	; (8004154 <MX_CAN1_Init+0x64>)
 8004108:	2200      	movs	r2, #0
 800410a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800410c:	4b11      	ldr	r3, [pc, #68]	; (8004154 <MX_CAN1_Init+0x64>)
 800410e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004112:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8004114:	4b0f      	ldr	r3, [pc, #60]	; (8004154 <MX_CAN1_Init+0x64>)
 8004116:	2200      	movs	r2, #0
 8004118:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800411a:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <MX_CAN1_Init+0x64>)
 800411c:	2200      	movs	r2, #0
 800411e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8004120:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <MX_CAN1_Init+0x64>)
 8004122:	2200      	movs	r2, #0
 8004124:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8004126:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <MX_CAN1_Init+0x64>)
 8004128:	2200      	movs	r2, #0
 800412a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800412c:	4b09      	ldr	r3, [pc, #36]	; (8004154 <MX_CAN1_Init+0x64>)
 800412e:	2200      	movs	r2, #0
 8004130:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8004132:	4b08      	ldr	r3, [pc, #32]	; (8004154 <MX_CAN1_Init+0x64>)
 8004134:	2200      	movs	r2, #0
 8004136:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8004138:	4b06      	ldr	r3, [pc, #24]	; (8004154 <MX_CAN1_Init+0x64>)
 800413a:	2200      	movs	r2, #0
 800413c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800413e:	4805      	ldr	r0, [pc, #20]	; (8004154 <MX_CAN1_Init+0x64>)
 8004140:	f001 fa52 	bl	80055e8 <HAL_CAN_Init>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800414a:	f000 fa81 	bl	8004650 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800414e:	bf00      	nop
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	20003084 	.word	0x20003084
 8004158:	40006400 	.word	0x40006400

0800415c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8004160:	4b17      	ldr	r3, [pc, #92]	; (80041c0 <MX_CAN2_Init+0x64>)
 8004162:	4a18      	ldr	r2, [pc, #96]	; (80041c4 <MX_CAN2_Init+0x68>)
 8004164:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8004166:	4b16      	ldr	r3, [pc, #88]	; (80041c0 <MX_CAN2_Init+0x64>)
 8004168:	2210      	movs	r2, #16
 800416a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800416c:	4b14      	ldr	r3, [pc, #80]	; (80041c0 <MX_CAN2_Init+0x64>)
 800416e:	2200      	movs	r2, #0
 8004170:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004172:	4b13      	ldr	r3, [pc, #76]	; (80041c0 <MX_CAN2_Init+0x64>)
 8004174:	2200      	movs	r2, #0
 8004176:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8004178:	4b11      	ldr	r3, [pc, #68]	; (80041c0 <MX_CAN2_Init+0x64>)
 800417a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800417e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8004180:	4b0f      	ldr	r3, [pc, #60]	; (80041c0 <MX_CAN2_Init+0x64>)
 8004182:	2200      	movs	r2, #0
 8004184:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8004186:	4b0e      	ldr	r3, [pc, #56]	; (80041c0 <MX_CAN2_Init+0x64>)
 8004188:	2200      	movs	r2, #0
 800418a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800418c:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <MX_CAN2_Init+0x64>)
 800418e:	2200      	movs	r2, #0
 8004190:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8004192:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <MX_CAN2_Init+0x64>)
 8004194:	2200      	movs	r2, #0
 8004196:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8004198:	4b09      	ldr	r3, [pc, #36]	; (80041c0 <MX_CAN2_Init+0x64>)
 800419a:	2200      	movs	r2, #0
 800419c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800419e:	4b08      	ldr	r3, [pc, #32]	; (80041c0 <MX_CAN2_Init+0x64>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80041a4:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <MX_CAN2_Init+0x64>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80041aa:	4805      	ldr	r0, [pc, #20]	; (80041c0 <MX_CAN2_Init+0x64>)
 80041ac:	f001 fa1c 	bl	80055e8 <HAL_CAN_Init>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 80041b6:	f000 fa4b 	bl	8004650 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80041ba:	bf00      	nop
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	200030ac 	.word	0x200030ac
 80041c4:	40006800 	.word	0x40006800

080041c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80041cc:	4b17      	ldr	r3, [pc, #92]	; (800422c <MX_SPI1_Init+0x64>)
 80041ce:	4a18      	ldr	r2, [pc, #96]	; (8004230 <MX_SPI1_Init+0x68>)
 80041d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80041d2:	4b16      	ldr	r3, [pc, #88]	; (800422c <MX_SPI1_Init+0x64>)
 80041d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80041d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80041da:	4b14      	ldr	r3, [pc, #80]	; (800422c <MX_SPI1_Init+0x64>)
 80041dc:	2200      	movs	r2, #0
 80041de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80041e0:	4b12      	ldr	r3, [pc, #72]	; (800422c <MX_SPI1_Init+0x64>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041e6:	4b11      	ldr	r3, [pc, #68]	; (800422c <MX_SPI1_Init+0x64>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80041ec:	4b0f      	ldr	r3, [pc, #60]	; (800422c <MX_SPI1_Init+0x64>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80041f2:	4b0e      	ldr	r3, [pc, #56]	; (800422c <MX_SPI1_Init+0x64>)
 80041f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80041fa:	4b0c      	ldr	r3, [pc, #48]	; (800422c <MX_SPI1_Init+0x64>)
 80041fc:	2228      	movs	r2, #40	; 0x28
 80041fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004200:	4b0a      	ldr	r3, [pc, #40]	; (800422c <MX_SPI1_Init+0x64>)
 8004202:	2200      	movs	r2, #0
 8004204:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004206:	4b09      	ldr	r3, [pc, #36]	; (800422c <MX_SPI1_Init+0x64>)
 8004208:	2200      	movs	r2, #0
 800420a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800420c:	4b07      	ldr	r3, [pc, #28]	; (800422c <MX_SPI1_Init+0x64>)
 800420e:	2200      	movs	r2, #0
 8004210:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004212:	4b06      	ldr	r3, [pc, #24]	; (800422c <MX_SPI1_Init+0x64>)
 8004214:	220a      	movs	r2, #10
 8004216:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004218:	4804      	ldr	r0, [pc, #16]	; (800422c <MX_SPI1_Init+0x64>)
 800421a:	f003 f815 	bl	8007248 <HAL_SPI_Init>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004224:	f000 fa14 	bl	8004650 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004228:	bf00      	nop
 800422a:	bd80      	pop	{r7, pc}
 800422c:	200030d4 	.word	0x200030d4
 8004230:	40013000 	.word	0x40013000

08004234 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b096      	sub	sp, #88	; 0x58
 8004238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800423a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	605a      	str	r2, [r3, #4]
 8004244:	609a      	str	r2, [r3, #8]
 8004246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004248:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	605a      	str	r2, [r3, #4]
 800425c:	609a      	str	r2, [r3, #8]
 800425e:	60da      	str	r2, [r3, #12]
 8004260:	611a      	str	r2, [r3, #16]
 8004262:	615a      	str	r2, [r3, #20]
 8004264:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004266:	1d3b      	adds	r3, r7, #4
 8004268:	2220      	movs	r2, #32
 800426a:	2100      	movs	r1, #0
 800426c:	4618      	mov	r0, r3
 800426e:	f005 fe9c 	bl	8009faa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004272:	4b44      	ldr	r3, [pc, #272]	; (8004384 <MX_TIM1_Init+0x150>)
 8004274:	4a44      	ldr	r2, [pc, #272]	; (8004388 <MX_TIM1_Init+0x154>)
 8004276:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004278:	4b42      	ldr	r3, [pc, #264]	; (8004384 <MX_TIM1_Init+0x150>)
 800427a:	2200      	movs	r2, #0
 800427c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800427e:	4b41      	ldr	r3, [pc, #260]	; (8004384 <MX_TIM1_Init+0x150>)
 8004280:	2200      	movs	r2, #0
 8004282:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8004284:	4b3f      	ldr	r3, [pc, #252]	; (8004384 <MX_TIM1_Init+0x150>)
 8004286:	22ff      	movs	r2, #255	; 0xff
 8004288:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800428a:	4b3e      	ldr	r3, [pc, #248]	; (8004384 <MX_TIM1_Init+0x150>)
 800428c:	2200      	movs	r2, #0
 800428e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004290:	4b3c      	ldr	r3, [pc, #240]	; (8004384 <MX_TIM1_Init+0x150>)
 8004292:	2200      	movs	r2, #0
 8004294:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004296:	4b3b      	ldr	r3, [pc, #236]	; (8004384 <MX_TIM1_Init+0x150>)
 8004298:	2200      	movs	r2, #0
 800429a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800429c:	4839      	ldr	r0, [pc, #228]	; (8004384 <MX_TIM1_Init+0x150>)
 800429e:	f003 fd7b 	bl	8007d98 <HAL_TIM_Base_Init>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80042a8:	f000 f9d2 	bl	8004650 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80042b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80042b6:	4619      	mov	r1, r3
 80042b8:	4832      	ldr	r0, [pc, #200]	; (8004384 <MX_TIM1_Init+0x150>)
 80042ba:	f004 f809 	bl	80082d0 <HAL_TIM_ConfigClockSource>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80042c4:	f000 f9c4 	bl	8004650 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80042c8:	482e      	ldr	r0, [pc, #184]	; (8004384 <MX_TIM1_Init+0x150>)
 80042ca:	f003 fe1d 	bl	8007f08 <HAL_TIM_PWM_Init>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80042d4:	f000 f9bc 	bl	8004650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042d8:	2300      	movs	r3, #0
 80042da:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042dc:	2300      	movs	r3, #0
 80042de:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80042e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80042e4:	4619      	mov	r1, r3
 80042e6:	4827      	ldr	r0, [pc, #156]	; (8004384 <MX_TIM1_Init+0x150>)
 80042e8:	f004 fbca 	bl	8008a80 <HAL_TIMEx_MasterConfigSynchronization>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80042f2:	f000 f9ad 	bl	8004650 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042f6:	2360      	movs	r3, #96	; 0x60
 80042f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042fe:	2300      	movs	r3, #0
 8004300:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004302:	2300      	movs	r3, #0
 8004304:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004306:	2300      	movs	r3, #0
 8004308:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800430a:	2300      	movs	r3, #0
 800430c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800430e:	2300      	movs	r3, #0
 8004310:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004316:	2200      	movs	r2, #0
 8004318:	4619      	mov	r1, r3
 800431a:	481a      	ldr	r0, [pc, #104]	; (8004384 <MX_TIM1_Init+0x150>)
 800431c:	f003 ff16 	bl	800814c <HAL_TIM_PWM_ConfigChannel>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8004326:	f000 f993 	bl	8004650 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800432a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800432e:	2204      	movs	r2, #4
 8004330:	4619      	mov	r1, r3
 8004332:	4814      	ldr	r0, [pc, #80]	; (8004384 <MX_TIM1_Init+0x150>)
 8004334:	f003 ff0a 	bl	800814c <HAL_TIM_PWM_ConfigChannel>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800433e:	f000 f987 	bl	8004650 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004342:	2300      	movs	r3, #0
 8004344:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004346:	2300      	movs	r3, #0
 8004348:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800434a:	2300      	movs	r3, #0
 800434c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800434e:	2300      	movs	r3, #0
 8004350:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004352:	2300      	movs	r3, #0
 8004354:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004356:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800435a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800435c:	2300      	movs	r3, #0
 800435e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004360:	1d3b      	adds	r3, r7, #4
 8004362:	4619      	mov	r1, r3
 8004364:	4807      	ldr	r0, [pc, #28]	; (8004384 <MX_TIM1_Init+0x150>)
 8004366:	f004 fc07 	bl	8008b78 <HAL_TIMEx_ConfigBreakDeadTime>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8004370:	f000 f96e 	bl	8004650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004374:	4803      	ldr	r0, [pc, #12]	; (8004384 <MX_TIM1_Init+0x150>)
 8004376:	f000 fb63 	bl	8004a40 <HAL_TIM_MspPostInit>

}
 800437a:	bf00      	nop
 800437c:	3758      	adds	r7, #88	; 0x58
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	2000312c 	.word	0x2000312c
 8004388:	40010000 	.word	0x40010000

0800438c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08e      	sub	sp, #56	; 0x38
 8004390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004392:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	605a      	str	r2, [r3, #4]
 800439c:	609a      	str	r2, [r3, #8]
 800439e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043a0:	f107 0320 	add.w	r3, r7, #32
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043aa:	1d3b      	adds	r3, r7, #4
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	605a      	str	r2, [r3, #4]
 80043b2:	609a      	str	r2, [r3, #8]
 80043b4:	60da      	str	r2, [r3, #12]
 80043b6:	611a      	str	r2, [r3, #16]
 80043b8:	615a      	str	r2, [r3, #20]
 80043ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80043bc:	4b32      	ldr	r3, [pc, #200]	; (8004488 <MX_TIM2_Init+0xfc>)
 80043be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80043c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80043c4:	4b30      	ldr	r3, [pc, #192]	; (8004488 <MX_TIM2_Init+0xfc>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043ca:	4b2f      	ldr	r3, [pc, #188]	; (8004488 <MX_TIM2_Init+0xfc>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80043d0:	4b2d      	ldr	r3, [pc, #180]	; (8004488 <MX_TIM2_Init+0xfc>)
 80043d2:	22ff      	movs	r2, #255	; 0xff
 80043d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043d6:	4b2c      	ldr	r3, [pc, #176]	; (8004488 <MX_TIM2_Init+0xfc>)
 80043d8:	2200      	movs	r2, #0
 80043da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043dc:	4b2a      	ldr	r3, [pc, #168]	; (8004488 <MX_TIM2_Init+0xfc>)
 80043de:	2200      	movs	r2, #0
 80043e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80043e2:	4829      	ldr	r0, [pc, #164]	; (8004488 <MX_TIM2_Init+0xfc>)
 80043e4:	f003 fcd8 	bl	8007d98 <HAL_TIM_Base_Init>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80043ee:	f000 f92f 	bl	8004650 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80043f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043fc:	4619      	mov	r1, r3
 80043fe:	4822      	ldr	r0, [pc, #136]	; (8004488 <MX_TIM2_Init+0xfc>)
 8004400:	f003 ff66 	bl	80082d0 <HAL_TIM_ConfigClockSource>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800440a:	f000 f921 	bl	8004650 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800440e:	481e      	ldr	r0, [pc, #120]	; (8004488 <MX_TIM2_Init+0xfc>)
 8004410:	f003 fd7a 	bl	8007f08 <HAL_TIM_PWM_Init>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800441a:	f000 f919 	bl	8004650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800441e:	2300      	movs	r3, #0
 8004420:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004422:	2300      	movs	r3, #0
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004426:	f107 0320 	add.w	r3, r7, #32
 800442a:	4619      	mov	r1, r3
 800442c:	4816      	ldr	r0, [pc, #88]	; (8004488 <MX_TIM2_Init+0xfc>)
 800442e:	f004 fb27 	bl	8008a80 <HAL_TIMEx_MasterConfigSynchronization>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8004438:	f000 f90a 	bl	8004650 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800443c:	2360      	movs	r3, #96	; 0x60
 800443e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004444:	2300      	movs	r3, #0
 8004446:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800444c:	1d3b      	adds	r3, r7, #4
 800444e:	2200      	movs	r2, #0
 8004450:	4619      	mov	r1, r3
 8004452:	480d      	ldr	r0, [pc, #52]	; (8004488 <MX_TIM2_Init+0xfc>)
 8004454:	f003 fe7a 	bl	800814c <HAL_TIM_PWM_ConfigChannel>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800445e:	f000 f8f7 	bl	8004650 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004462:	1d3b      	adds	r3, r7, #4
 8004464:	2204      	movs	r2, #4
 8004466:	4619      	mov	r1, r3
 8004468:	4807      	ldr	r0, [pc, #28]	; (8004488 <MX_TIM2_Init+0xfc>)
 800446a:	f003 fe6f 	bl	800814c <HAL_TIM_PWM_ConfigChannel>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8004474:	f000 f8ec 	bl	8004650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004478:	4803      	ldr	r0, [pc, #12]	; (8004488 <MX_TIM2_Init+0xfc>)
 800447a:	f000 fae1 	bl	8004a40 <HAL_TIM_MspPostInit>

}
 800447e:	bf00      	nop
 8004480:	3738      	adds	r7, #56	; 0x38
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20003174 	.word	0x20003174

0800448c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004492:	f107 0308 	add.w	r3, r7, #8
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	605a      	str	r2, [r3, #4]
 800449c:	609a      	str	r2, [r3, #8]
 800449e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044a0:	463b      	mov	r3, r7
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80044a8:	4b1d      	ldr	r3, [pc, #116]	; (8004520 <MX_TIM4_Init+0x94>)
 80044aa:	4a1e      	ldr	r2, [pc, #120]	; (8004524 <MX_TIM4_Init+0x98>)
 80044ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 80044ae:	4b1c      	ldr	r3, [pc, #112]	; (8004520 <MX_TIM4_Init+0x94>)
 80044b0:	223f      	movs	r2, #63	; 0x3f
 80044b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044b4:	4b1a      	ldr	r3, [pc, #104]	; (8004520 <MX_TIM4_Init+0x94>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80044ba:	4b19      	ldr	r3, [pc, #100]	; (8004520 <MX_TIM4_Init+0x94>)
 80044bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044c2:	4b17      	ldr	r3, [pc, #92]	; (8004520 <MX_TIM4_Init+0x94>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044c8:	4b15      	ldr	r3, [pc, #84]	; (8004520 <MX_TIM4_Init+0x94>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80044ce:	4814      	ldr	r0, [pc, #80]	; (8004520 <MX_TIM4_Init+0x94>)
 80044d0:	f003 fc62 	bl	8007d98 <HAL_TIM_Base_Init>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80044da:	f000 f8b9 	bl	8004650 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80044e4:	f107 0308 	add.w	r3, r7, #8
 80044e8:	4619      	mov	r1, r3
 80044ea:	480d      	ldr	r0, [pc, #52]	; (8004520 <MX_TIM4_Init+0x94>)
 80044ec:	f003 fef0 	bl	80082d0 <HAL_TIM_ConfigClockSource>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80044f6:	f000 f8ab 	bl	8004650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044fa:	2300      	movs	r3, #0
 80044fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044fe:	2300      	movs	r3, #0
 8004500:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004502:	463b      	mov	r3, r7
 8004504:	4619      	mov	r1, r3
 8004506:	4806      	ldr	r0, [pc, #24]	; (8004520 <MX_TIM4_Init+0x94>)
 8004508:	f004 faba 	bl	8008a80 <HAL_TIMEx_MasterConfigSynchronization>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8004512:	f000 f89d 	bl	8004650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004516:	bf00      	nop
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	200031bc 	.word	0x200031bc
 8004524:	40000800 	.word	0x40000800

08004528 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800452c:	4b11      	ldr	r3, [pc, #68]	; (8004574 <MX_USART2_UART_Init+0x4c>)
 800452e:	4a12      	ldr	r2, [pc, #72]	; (8004578 <MX_USART2_UART_Init+0x50>)
 8004530:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004532:	4b10      	ldr	r3, [pc, #64]	; (8004574 <MX_USART2_UART_Init+0x4c>)
 8004534:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004538:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800453a:	4b0e      	ldr	r3, [pc, #56]	; (8004574 <MX_USART2_UART_Init+0x4c>)
 800453c:	2200      	movs	r2, #0
 800453e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004540:	4b0c      	ldr	r3, [pc, #48]	; (8004574 <MX_USART2_UART_Init+0x4c>)
 8004542:	2200      	movs	r2, #0
 8004544:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8004546:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <MX_USART2_UART_Init+0x4c>)
 8004548:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800454c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 800454e:	4b09      	ldr	r3, [pc, #36]	; (8004574 <MX_USART2_UART_Init+0x4c>)
 8004550:	2208      	movs	r2, #8
 8004552:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004554:	4b07      	ldr	r3, [pc, #28]	; (8004574 <MX_USART2_UART_Init+0x4c>)
 8004556:	2200      	movs	r2, #0
 8004558:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800455a:	4b06      	ldr	r3, [pc, #24]	; (8004574 <MX_USART2_UART_Init+0x4c>)
 800455c:	2200      	movs	r2, #0
 800455e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004560:	4804      	ldr	r0, [pc, #16]	; (8004574 <MX_USART2_UART_Init+0x4c>)
 8004562:	f004 fb5b 	bl	8008c1c <HAL_UART_Init>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 800456c:	f000 f870 	bl	8004650 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004570:	bf00      	nop
 8004572:	bd80      	pop	{r7, pc}
 8004574:	20003204 	.word	0x20003204
 8004578:	40004400 	.word	0x40004400

0800457c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b088      	sub	sp, #32
 8004580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004582:	f107 030c 	add.w	r3, r7, #12
 8004586:	2200      	movs	r2, #0
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	605a      	str	r2, [r3, #4]
 800458c:	609a      	str	r2, [r3, #8]
 800458e:	60da      	str	r2, [r3, #12]
 8004590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004592:	2300      	movs	r3, #0
 8004594:	60bb      	str	r3, [r7, #8]
 8004596:	4b2b      	ldr	r3, [pc, #172]	; (8004644 <MX_GPIO_Init+0xc8>)
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	4a2a      	ldr	r2, [pc, #168]	; (8004644 <MX_GPIO_Init+0xc8>)
 800459c:	f043 0304 	orr.w	r3, r3, #4
 80045a0:	6313      	str	r3, [r2, #48]	; 0x30
 80045a2:	4b28      	ldr	r3, [pc, #160]	; (8004644 <MX_GPIO_Init+0xc8>)
 80045a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a6:	f003 0304 	and.w	r3, r3, #4
 80045aa:	60bb      	str	r3, [r7, #8]
 80045ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045ae:	2300      	movs	r3, #0
 80045b0:	607b      	str	r3, [r7, #4]
 80045b2:	4b24      	ldr	r3, [pc, #144]	; (8004644 <MX_GPIO_Init+0xc8>)
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	4a23      	ldr	r2, [pc, #140]	; (8004644 <MX_GPIO_Init+0xc8>)
 80045b8:	f043 0301 	orr.w	r3, r3, #1
 80045bc:	6313      	str	r3, [r2, #48]	; 0x30
 80045be:	4b21      	ldr	r3, [pc, #132]	; (8004644 <MX_GPIO_Init+0xc8>)
 80045c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	607b      	str	r3, [r7, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045ca:	2300      	movs	r3, #0
 80045cc:	603b      	str	r3, [r7, #0]
 80045ce:	4b1d      	ldr	r3, [pc, #116]	; (8004644 <MX_GPIO_Init+0xc8>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	4a1c      	ldr	r2, [pc, #112]	; (8004644 <MX_GPIO_Init+0xc8>)
 80045d4:	f043 0302 	orr.w	r3, r3, #2
 80045d8:	6313      	str	r3, [r2, #48]	; 0x30
 80045da:	4b1a      	ldr	r3, [pc, #104]	; (8004644 <MX_GPIO_Init+0xc8>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9, GPIO_PIN_RESET);
 80045e6:	2200      	movs	r2, #0
 80045e8:	f240 210e 	movw	r1, #526	; 0x20e
 80045ec:	4816      	ldr	r0, [pc, #88]	; (8004648 <MX_GPIO_Init+0xcc>)
 80045ee:	f002 f829 	bl	8006644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 80045f2:	2200      	movs	r2, #0
 80045f4:	f240 4104 	movw	r1, #1028	; 0x404
 80045f8:	4814      	ldr	r0, [pc, #80]	; (800464c <MX_GPIO_Init+0xd0>)
 80045fa:	f002 f823 	bl	8006644 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 PC3 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9;
 80045fe:	f240 230e 	movw	r3, #526	; 0x20e
 8004602:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004604:	2301      	movs	r3, #1
 8004606:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004608:	2300      	movs	r3, #0
 800460a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800460c:	2300      	movs	r3, #0
 800460e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004610:	f107 030c 	add.w	r3, r7, #12
 8004614:	4619      	mov	r1, r3
 8004616:	480c      	ldr	r0, [pc, #48]	; (8004648 <MX_GPIO_Init+0xcc>)
 8004618:	f001 fe80 	bl	800631c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 800461c:	f240 4304 	movw	r3, #1028	; 0x404
 8004620:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004622:	2301      	movs	r3, #1
 8004624:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004626:	2300      	movs	r3, #0
 8004628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800462a:	2300      	movs	r3, #0
 800462c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800462e:	f107 030c 	add.w	r3, r7, #12
 8004632:	4619      	mov	r1, r3
 8004634:	4805      	ldr	r0, [pc, #20]	; (800464c <MX_GPIO_Init+0xd0>)
 8004636:	f001 fe71 	bl	800631c <HAL_GPIO_Init>

}
 800463a:	bf00      	nop
 800463c:	3720      	adds	r7, #32
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40023800 	.word	0x40023800
 8004648:	40020800 	.word	0x40020800
 800464c:	40020400 	.word	0x40020400

08004650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004654:	b672      	cpsid	i
}
 8004656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004658:	e7fe      	b.n	8004658 <Error_Handler+0x8>
	...

0800465c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004662:	2300      	movs	r3, #0
 8004664:	607b      	str	r3, [r7, #4]
 8004666:	4b10      	ldr	r3, [pc, #64]	; (80046a8 <HAL_MspInit+0x4c>)
 8004668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466a:	4a0f      	ldr	r2, [pc, #60]	; (80046a8 <HAL_MspInit+0x4c>)
 800466c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004670:	6453      	str	r3, [r2, #68]	; 0x44
 8004672:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <HAL_MspInit+0x4c>)
 8004674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800467a:	607b      	str	r3, [r7, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800467e:	2300      	movs	r3, #0
 8004680:	603b      	str	r3, [r7, #0]
 8004682:	4b09      	ldr	r3, [pc, #36]	; (80046a8 <HAL_MspInit+0x4c>)
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	4a08      	ldr	r2, [pc, #32]	; (80046a8 <HAL_MspInit+0x4c>)
 8004688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800468c:	6413      	str	r3, [r2, #64]	; 0x40
 800468e:	4b06      	ldr	r3, [pc, #24]	; (80046a8 <HAL_MspInit+0x4c>)
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800469a:	2007      	movs	r0, #7
 800469c:	f001 fdfc 	bl	8006298 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046a0:	bf00      	nop
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40023800 	.word	0x40023800

080046ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08c      	sub	sp, #48	; 0x30
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b4:	f107 031c 	add.w	r3, r7, #28
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	605a      	str	r2, [r3, #4]
 80046be:	609a      	str	r2, [r3, #8]
 80046c0:	60da      	str	r2, [r3, #12]
 80046c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a2e      	ldr	r2, [pc, #184]	; (8004784 <HAL_ADC_MspInit+0xd8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d128      	bne.n	8004720 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80046ce:	2300      	movs	r3, #0
 80046d0:	61bb      	str	r3, [r7, #24]
 80046d2:	4b2d      	ldr	r3, [pc, #180]	; (8004788 <HAL_ADC_MspInit+0xdc>)
 80046d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d6:	4a2c      	ldr	r2, [pc, #176]	; (8004788 <HAL_ADC_MspInit+0xdc>)
 80046d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046dc:	6453      	str	r3, [r2, #68]	; 0x44
 80046de:	4b2a      	ldr	r3, [pc, #168]	; (8004788 <HAL_ADC_MspInit+0xdc>)
 80046e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e6:	61bb      	str	r3, [r7, #24]
 80046e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046ea:	2300      	movs	r3, #0
 80046ec:	617b      	str	r3, [r7, #20]
 80046ee:	4b26      	ldr	r3, [pc, #152]	; (8004788 <HAL_ADC_MspInit+0xdc>)
 80046f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f2:	4a25      	ldr	r2, [pc, #148]	; (8004788 <HAL_ADC_MspInit+0xdc>)
 80046f4:	f043 0302 	orr.w	r3, r3, #2
 80046f8:	6313      	str	r3, [r2, #48]	; 0x30
 80046fa:	4b23      	ldr	r3, [pc, #140]	; (8004788 <HAL_ADC_MspInit+0xdc>)
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004706:	2301      	movs	r3, #1
 8004708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800470a:	2303      	movs	r3, #3
 800470c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800470e:	2300      	movs	r3, #0
 8004710:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004712:	f107 031c 	add.w	r3, r7, #28
 8004716:	4619      	mov	r1, r3
 8004718:	481c      	ldr	r0, [pc, #112]	; (800478c <HAL_ADC_MspInit+0xe0>)
 800471a:	f001 fdff 	bl	800631c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800471e:	e02c      	b.n	800477a <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a1a      	ldr	r2, [pc, #104]	; (8004790 <HAL_ADC_MspInit+0xe4>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d127      	bne.n	800477a <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800472a:	2300      	movs	r3, #0
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	4b16      	ldr	r3, [pc, #88]	; (8004788 <HAL_ADC_MspInit+0xdc>)
 8004730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004732:	4a15      	ldr	r2, [pc, #84]	; (8004788 <HAL_ADC_MspInit+0xdc>)
 8004734:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004738:	6453      	str	r3, [r2, #68]	; 0x44
 800473a:	4b13      	ldr	r3, [pc, #76]	; (8004788 <HAL_ADC_MspInit+0xdc>)
 800473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004742:	613b      	str	r3, [r7, #16]
 8004744:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <HAL_ADC_MspInit+0xdc>)
 800474c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474e:	4a0e      	ldr	r2, [pc, #56]	; (8004788 <HAL_ADC_MspInit+0xdc>)
 8004750:	f043 0302 	orr.w	r3, r3, #2
 8004754:	6313      	str	r3, [r2, #48]	; 0x30
 8004756:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <HAL_ADC_MspInit+0xdc>)
 8004758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004762:	2302      	movs	r3, #2
 8004764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004766:	2303      	movs	r3, #3
 8004768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476a:	2300      	movs	r3, #0
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800476e:	f107 031c 	add.w	r3, r7, #28
 8004772:	4619      	mov	r1, r3
 8004774:	4805      	ldr	r0, [pc, #20]	; (800478c <HAL_ADC_MspInit+0xe0>)
 8004776:	f001 fdd1 	bl	800631c <HAL_GPIO_Init>
}
 800477a:	bf00      	nop
 800477c:	3730      	adds	r7, #48	; 0x30
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	40012000 	.word	0x40012000
 8004788:	40023800 	.word	0x40023800
 800478c:	40020400 	.word	0x40020400
 8004790:	40012100 	.word	0x40012100

08004794 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b08c      	sub	sp, #48	; 0x30
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800479c:	f107 031c 	add.w	r3, r7, #28
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	605a      	str	r2, [r3, #4]
 80047a6:	609a      	str	r2, [r3, #8]
 80047a8:	60da      	str	r2, [r3, #12]
 80047aa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a53      	ldr	r2, [pc, #332]	; (8004900 <HAL_CAN_MspInit+0x16c>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d146      	bne.n	8004844 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80047b6:	4b53      	ldr	r3, [pc, #332]	; (8004904 <HAL_CAN_MspInit+0x170>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3301      	adds	r3, #1
 80047bc:	4a51      	ldr	r2, [pc, #324]	; (8004904 <HAL_CAN_MspInit+0x170>)
 80047be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80047c0:	4b50      	ldr	r3, [pc, #320]	; (8004904 <HAL_CAN_MspInit+0x170>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d10d      	bne.n	80047e4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80047c8:	2300      	movs	r3, #0
 80047ca:	61bb      	str	r3, [r7, #24]
 80047cc:	4b4e      	ldr	r3, [pc, #312]	; (8004908 <HAL_CAN_MspInit+0x174>)
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	4a4d      	ldr	r2, [pc, #308]	; (8004908 <HAL_CAN_MspInit+0x174>)
 80047d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047d6:	6413      	str	r3, [r2, #64]	; 0x40
 80047d8:	4b4b      	ldr	r3, [pc, #300]	; (8004908 <HAL_CAN_MspInit+0x174>)
 80047da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e0:	61bb      	str	r3, [r7, #24]
 80047e2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	4b47      	ldr	r3, [pc, #284]	; (8004908 <HAL_CAN_MspInit+0x174>)
 80047ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ec:	4a46      	ldr	r2, [pc, #280]	; (8004908 <HAL_CAN_MspInit+0x174>)
 80047ee:	f043 0301 	orr.w	r3, r3, #1
 80047f2:	6313      	str	r3, [r2, #48]	; 0x30
 80047f4:	4b44      	ldr	r3, [pc, #272]	; (8004908 <HAL_CAN_MspInit+0x174>)
 80047f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	617b      	str	r3, [r7, #20]
 80047fe:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004800:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004806:	2302      	movs	r3, #2
 8004808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480a:	2300      	movs	r3, #0
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800480e:	2303      	movs	r3, #3
 8004810:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004812:	2309      	movs	r3, #9
 8004814:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004816:	f107 031c 	add.w	r3, r7, #28
 800481a:	4619      	mov	r1, r3
 800481c:	483b      	ldr	r0, [pc, #236]	; (800490c <HAL_CAN_MspInit+0x178>)
 800481e:	f001 fd7d 	bl	800631c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8004822:	2200      	movs	r2, #0
 8004824:	2100      	movs	r1, #0
 8004826:	2014      	movs	r0, #20
 8004828:	f001 fd41 	bl	80062ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800482c:	2014      	movs	r0, #20
 800482e:	f001 fd5a 	bl	80062e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8004832:	2200      	movs	r2, #0
 8004834:	2100      	movs	r1, #0
 8004836:	2015      	movs	r0, #21
 8004838:	f001 fd39 	bl	80062ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800483c:	2015      	movs	r0, #21
 800483e:	f001 fd52 	bl	80062e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8004842:	e058      	b.n	80048f6 <HAL_CAN_MspInit+0x162>
  else if(hcan->Instance==CAN2)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a31      	ldr	r2, [pc, #196]	; (8004910 <HAL_CAN_MspInit+0x17c>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d153      	bne.n	80048f6 <HAL_CAN_MspInit+0x162>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800484e:	2300      	movs	r3, #0
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	4b2d      	ldr	r3, [pc, #180]	; (8004908 <HAL_CAN_MspInit+0x174>)
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	4a2c      	ldr	r2, [pc, #176]	; (8004908 <HAL_CAN_MspInit+0x174>)
 8004858:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800485c:	6413      	str	r3, [r2, #64]	; 0x40
 800485e:	4b2a      	ldr	r3, [pc, #168]	; (8004908 <HAL_CAN_MspInit+0x174>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004866:	613b      	str	r3, [r7, #16]
 8004868:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800486a:	4b26      	ldr	r3, [pc, #152]	; (8004904 <HAL_CAN_MspInit+0x170>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3301      	adds	r3, #1
 8004870:	4a24      	ldr	r2, [pc, #144]	; (8004904 <HAL_CAN_MspInit+0x170>)
 8004872:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004874:	4b23      	ldr	r3, [pc, #140]	; (8004904 <HAL_CAN_MspInit+0x170>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d10d      	bne.n	8004898 <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	4b21      	ldr	r3, [pc, #132]	; (8004908 <HAL_CAN_MspInit+0x174>)
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	4a20      	ldr	r2, [pc, #128]	; (8004908 <HAL_CAN_MspInit+0x174>)
 8004886:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800488a:	6413      	str	r3, [r2, #64]	; 0x40
 800488c:	4b1e      	ldr	r3, [pc, #120]	; (8004908 <HAL_CAN_MspInit+0x174>)
 800488e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004898:	2300      	movs	r3, #0
 800489a:	60bb      	str	r3, [r7, #8]
 800489c:	4b1a      	ldr	r3, [pc, #104]	; (8004908 <HAL_CAN_MspInit+0x174>)
 800489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a0:	4a19      	ldr	r2, [pc, #100]	; (8004908 <HAL_CAN_MspInit+0x174>)
 80048a2:	f043 0302 	orr.w	r3, r3, #2
 80048a6:	6313      	str	r3, [r2, #48]	; 0x30
 80048a8:	4b17      	ldr	r3, [pc, #92]	; (8004908 <HAL_CAN_MspInit+0x174>)
 80048aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	60bb      	str	r3, [r7, #8]
 80048b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80048b4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80048b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ba:	2302      	movs	r3, #2
 80048bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048be:	2300      	movs	r3, #0
 80048c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048c2:	2303      	movs	r3, #3
 80048c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80048c6:	2309      	movs	r3, #9
 80048c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048ca:	f107 031c 	add.w	r3, r7, #28
 80048ce:	4619      	mov	r1, r3
 80048d0:	4810      	ldr	r0, [pc, #64]	; (8004914 <HAL_CAN_MspInit+0x180>)
 80048d2:	f001 fd23 	bl	800631c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80048d6:	2200      	movs	r2, #0
 80048d8:	2100      	movs	r1, #0
 80048da:	2040      	movs	r0, #64	; 0x40
 80048dc:	f001 fce7 	bl	80062ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80048e0:	2040      	movs	r0, #64	; 0x40
 80048e2:	f001 fd00 	bl	80062e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 80048e6:	2200      	movs	r2, #0
 80048e8:	2100      	movs	r1, #0
 80048ea:	2041      	movs	r0, #65	; 0x41
 80048ec:	f001 fcdf 	bl	80062ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80048f0:	2041      	movs	r0, #65	; 0x41
 80048f2:	f001 fcf8 	bl	80062e6 <HAL_NVIC_EnableIRQ>
}
 80048f6:	bf00      	nop
 80048f8:	3730      	adds	r7, #48	; 0x30
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	40006400 	.word	0x40006400
 8004904:	20003248 	.word	0x20003248
 8004908:	40023800 	.word	0x40023800
 800490c:	40020000 	.word	0x40020000
 8004910:	40006800 	.word	0x40006800
 8004914:	40020400 	.word	0x40020400

08004918 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b08a      	sub	sp, #40	; 0x28
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004920:	f107 0314 	add.w	r3, r7, #20
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	605a      	str	r2, [r3, #4]
 800492a:	609a      	str	r2, [r3, #8]
 800492c:	60da      	str	r2, [r3, #12]
 800492e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a19      	ldr	r2, [pc, #100]	; (800499c <HAL_SPI_MspInit+0x84>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d12b      	bne.n	8004992 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800493a:	2300      	movs	r3, #0
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	4b18      	ldr	r3, [pc, #96]	; (80049a0 <HAL_SPI_MspInit+0x88>)
 8004940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004942:	4a17      	ldr	r2, [pc, #92]	; (80049a0 <HAL_SPI_MspInit+0x88>)
 8004944:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004948:	6453      	str	r3, [r2, #68]	; 0x44
 800494a:	4b15      	ldr	r3, [pc, #84]	; (80049a0 <HAL_SPI_MspInit+0x88>)
 800494c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004952:	613b      	str	r3, [r7, #16]
 8004954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004956:	2300      	movs	r3, #0
 8004958:	60fb      	str	r3, [r7, #12]
 800495a:	4b11      	ldr	r3, [pc, #68]	; (80049a0 <HAL_SPI_MspInit+0x88>)
 800495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495e:	4a10      	ldr	r2, [pc, #64]	; (80049a0 <HAL_SPI_MspInit+0x88>)
 8004960:	f043 0301 	orr.w	r3, r3, #1
 8004964:	6313      	str	r3, [r2, #48]	; 0x30
 8004966:	4b0e      	ldr	r3, [pc, #56]	; (80049a0 <HAL_SPI_MspInit+0x88>)
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004972:	23e0      	movs	r3, #224	; 0xe0
 8004974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004976:	2302      	movs	r3, #2
 8004978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800497a:	2300      	movs	r3, #0
 800497c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800497e:	2303      	movs	r3, #3
 8004980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004982:	2305      	movs	r3, #5
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004986:	f107 0314 	add.w	r3, r7, #20
 800498a:	4619      	mov	r1, r3
 800498c:	4805      	ldr	r0, [pc, #20]	; (80049a4 <HAL_SPI_MspInit+0x8c>)
 800498e:	f001 fcc5 	bl	800631c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004992:	bf00      	nop
 8004994:	3728      	adds	r7, #40	; 0x28
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	40013000 	.word	0x40013000
 80049a0:	40023800 	.word	0x40023800
 80049a4:	40020000 	.word	0x40020000

080049a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a1f      	ldr	r2, [pc, #124]	; (8004a34 <HAL_TIM_Base_MspInit+0x8c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d10e      	bne.n	80049d8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80049ba:	2300      	movs	r3, #0
 80049bc:	617b      	str	r3, [r7, #20]
 80049be:	4b1e      	ldr	r3, [pc, #120]	; (8004a38 <HAL_TIM_Base_MspInit+0x90>)
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	4a1d      	ldr	r2, [pc, #116]	; (8004a38 <HAL_TIM_Base_MspInit+0x90>)
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	6453      	str	r3, [r2, #68]	; 0x44
 80049ca:	4b1b      	ldr	r3, [pc, #108]	; (8004a38 <HAL_TIM_Base_MspInit+0x90>)
 80049cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	617b      	str	r3, [r7, #20]
 80049d4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80049d6:	e026      	b.n	8004a26 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e0:	d10e      	bne.n	8004a00 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80049e2:	2300      	movs	r3, #0
 80049e4:	613b      	str	r3, [r7, #16]
 80049e6:	4b14      	ldr	r3, [pc, #80]	; (8004a38 <HAL_TIM_Base_MspInit+0x90>)
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	4a13      	ldr	r2, [pc, #76]	; (8004a38 <HAL_TIM_Base_MspInit+0x90>)
 80049ec:	f043 0301 	orr.w	r3, r3, #1
 80049f0:	6413      	str	r3, [r2, #64]	; 0x40
 80049f2:	4b11      	ldr	r3, [pc, #68]	; (8004a38 <HAL_TIM_Base_MspInit+0x90>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	693b      	ldr	r3, [r7, #16]
}
 80049fe:	e012      	b.n	8004a26 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a0d      	ldr	r2, [pc, #52]	; (8004a3c <HAL_TIM_Base_MspInit+0x94>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d10d      	bne.n	8004a26 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	4b0a      	ldr	r3, [pc, #40]	; (8004a38 <HAL_TIM_Base_MspInit+0x90>)
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	4a09      	ldr	r2, [pc, #36]	; (8004a38 <HAL_TIM_Base_MspInit+0x90>)
 8004a14:	f043 0304 	orr.w	r3, r3, #4
 8004a18:	6413      	str	r3, [r2, #64]	; 0x40
 8004a1a:	4b07      	ldr	r3, [pc, #28]	; (8004a38 <HAL_TIM_Base_MspInit+0x90>)
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	f003 0304 	and.w	r3, r3, #4
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	68fb      	ldr	r3, [r7, #12]
}
 8004a26:	bf00      	nop
 8004a28:	371c      	adds	r7, #28
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	40010000 	.word	0x40010000
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	40000800 	.word	0x40000800

08004a40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08a      	sub	sp, #40	; 0x28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a48:	f107 0314 	add.w	r3, r7, #20
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	605a      	str	r2, [r3, #4]
 8004a52:	609a      	str	r2, [r3, #8]
 8004a54:	60da      	str	r2, [r3, #12]
 8004a56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a24      	ldr	r2, [pc, #144]	; (8004af0 <HAL_TIM_MspPostInit+0xb0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d11f      	bne.n	8004aa2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a62:	2300      	movs	r3, #0
 8004a64:	613b      	str	r3, [r7, #16]
 8004a66:	4b23      	ldr	r3, [pc, #140]	; (8004af4 <HAL_TIM_MspPostInit+0xb4>)
 8004a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6a:	4a22      	ldr	r2, [pc, #136]	; (8004af4 <HAL_TIM_MspPostInit+0xb4>)
 8004a6c:	f043 0301 	orr.w	r3, r3, #1
 8004a70:	6313      	str	r3, [r2, #48]	; 0x30
 8004a72:	4b20      	ldr	r3, [pc, #128]	; (8004af4 <HAL_TIM_MspPostInit+0xb4>)
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	613b      	str	r3, [r7, #16]
 8004a7c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004a7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a84:	2302      	movs	r3, #2
 8004a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004a90:	2301      	movs	r3, #1
 8004a92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a94:	f107 0314 	add.w	r3, r7, #20
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4817      	ldr	r0, [pc, #92]	; (8004af8 <HAL_TIM_MspPostInit+0xb8>)
 8004a9c:	f001 fc3e 	bl	800631c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004aa0:	e022      	b.n	8004ae8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aaa:	d11d      	bne.n	8004ae8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aac:	2300      	movs	r3, #0
 8004aae:	60fb      	str	r3, [r7, #12]
 8004ab0:	4b10      	ldr	r3, [pc, #64]	; (8004af4 <HAL_TIM_MspPostInit+0xb4>)
 8004ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab4:	4a0f      	ldr	r2, [pc, #60]	; (8004af4 <HAL_TIM_MspPostInit+0xb4>)
 8004ab6:	f043 0301 	orr.w	r3, r3, #1
 8004aba:	6313      	str	r3, [r2, #48]	; 0x30
 8004abc:	4b0d      	ldr	r3, [pc, #52]	; (8004af4 <HAL_TIM_MspPostInit+0xb4>)
 8004abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	60fb      	str	r3, [r7, #12]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004acc:	2302      	movs	r3, #2
 8004ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004adc:	f107 0314 	add.w	r3, r7, #20
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4805      	ldr	r0, [pc, #20]	; (8004af8 <HAL_TIM_MspPostInit+0xb8>)
 8004ae4:	f001 fc1a 	bl	800631c <HAL_GPIO_Init>
}
 8004ae8:	bf00      	nop
 8004aea:	3728      	adds	r7, #40	; 0x28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40010000 	.word	0x40010000
 8004af4:	40023800 	.word	0x40023800
 8004af8:	40020000 	.word	0x40020000

08004afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b08a      	sub	sp, #40	; 0x28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b04:	f107 0314 	add.w	r3, r7, #20
 8004b08:	2200      	movs	r2, #0
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	605a      	str	r2, [r3, #4]
 8004b0e:	609a      	str	r2, [r3, #8]
 8004b10:	60da      	str	r2, [r3, #12]
 8004b12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a19      	ldr	r2, [pc, #100]	; (8004b80 <HAL_UART_MspInit+0x84>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d12b      	bne.n	8004b76 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b1e:	2300      	movs	r3, #0
 8004b20:	613b      	str	r3, [r7, #16]
 8004b22:	4b18      	ldr	r3, [pc, #96]	; (8004b84 <HAL_UART_MspInit+0x88>)
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	4a17      	ldr	r2, [pc, #92]	; (8004b84 <HAL_UART_MspInit+0x88>)
 8004b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b2e:	4b15      	ldr	r3, [pc, #84]	; (8004b84 <HAL_UART_MspInit+0x88>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b36:	613b      	str	r3, [r7, #16]
 8004b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	4b11      	ldr	r3, [pc, #68]	; (8004b84 <HAL_UART_MspInit+0x88>)
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	4a10      	ldr	r2, [pc, #64]	; (8004b84 <HAL_UART_MspInit+0x88>)
 8004b44:	f043 0301 	orr.w	r3, r3, #1
 8004b48:	6313      	str	r3, [r2, #48]	; 0x30
 8004b4a:	4b0e      	ldr	r3, [pc, #56]	; (8004b84 <HAL_UART_MspInit+0x88>)
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004b56:	230c      	movs	r3, #12
 8004b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b62:	2303      	movs	r3, #3
 8004b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004b66:	2307      	movs	r3, #7
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b6a:	f107 0314 	add.w	r3, r7, #20
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4805      	ldr	r0, [pc, #20]	; (8004b88 <HAL_UART_MspInit+0x8c>)
 8004b72:	f001 fbd3 	bl	800631c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004b76:	bf00      	nop
 8004b78:	3728      	adds	r7, #40	; 0x28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40004400 	.word	0x40004400
 8004b84:	40023800 	.word	0x40023800
 8004b88:	40020000 	.word	0x40020000

08004b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b90:	e7fe      	b.n	8004b90 <NMI_Handler+0x4>

08004b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b92:	b480      	push	{r7}
 8004b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b96:	e7fe      	b.n	8004b96 <HardFault_Handler+0x4>

08004b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b9c:	e7fe      	b.n	8004b9c <MemManage_Handler+0x4>

08004b9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ba2:	e7fe      	b.n	8004ba2 <BusFault_Handler+0x4>

08004ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ba8:	e7fe      	b.n	8004ba8 <UsageFault_Handler+0x4>

08004baa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004baa:	b480      	push	{r7}
 8004bac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004bae:	bf00      	nop
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004bbc:	bf00      	nop
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004bca:	bf00      	nop
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004bd8:	f000 f97e 	bl	8004ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004bdc:	bf00      	nop
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004be4:	4802      	ldr	r0, [pc, #8]	; (8004bf0 <CAN1_RX0_IRQHandler+0x10>)
 8004be6:	f001 f857 	bl	8005c98 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004bea:	bf00      	nop
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	20003084 	.word	0x20003084

08004bf4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004bf8:	4802      	ldr	r0, [pc, #8]	; (8004c04 <CAN1_RX1_IRQHandler+0x10>)
 8004bfa:	f001 f84d 	bl	8005c98 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8004bfe:	bf00      	nop
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	20003084 	.word	0x20003084

08004c08 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004c0c:	4802      	ldr	r0, [pc, #8]	; (8004c18 <CAN2_RX0_IRQHandler+0x10>)
 8004c0e:	f001 f843 	bl	8005c98 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8004c12:	bf00      	nop
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	200030ac 	.word	0x200030ac

08004c1c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004c20:	4802      	ldr	r0, [pc, #8]	; (8004c2c <CAN2_RX1_IRQHandler+0x10>)
 8004c22:	f001 f839 	bl	8005c98 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8004c26:	bf00      	nop
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	200030ac 	.word	0x200030ac

08004c30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
	return 1;
 8004c34:	2301      	movs	r3, #1
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <_kill>:

int _kill(int pid, int sig)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004c4a:	f005 f9cb 	bl	8009fe4 <__errno>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2216      	movs	r2, #22
 8004c52:	601a      	str	r2, [r3, #0]
	return -1;
 8004c54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <_exit>:

void _exit (int status)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004c68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7ff ffe7 	bl	8004c40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004c72:	e7fe      	b.n	8004c72 <_exit+0x12>

08004c74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c80:	2300      	movs	r3, #0
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	e00a      	b.n	8004c9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004c86:	f3af 8000 	nop.w
 8004c8a:	4601      	mov	r1, r0
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	60ba      	str	r2, [r7, #8]
 8004c92:	b2ca      	uxtb	r2, r1
 8004c94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	dbf0      	blt.n	8004c86 <_read+0x12>
	}

return len;
 8004ca4:	687b      	ldr	r3, [r7, #4]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b086      	sub	sp, #24
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	60f8      	str	r0, [r7, #12]
 8004cb6:	60b9      	str	r1, [r7, #8]
 8004cb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]
 8004cbe:	e009      	b.n	8004cd4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	1c5a      	adds	r2, r3, #1
 8004cc4:	60ba      	str	r2, [r7, #8]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	dbf1      	blt.n	8004cc0 <_write+0x12>
	}
	return len;
 8004cdc:	687b      	ldr	r3, [r7, #4]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <_close>:

int _close(int file)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
	return -1;
 8004cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d0e:	605a      	str	r2, [r3, #4]
	return 0;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <_isatty>:

int _isatty(int file)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
	return 1;
 8004d26:	2301      	movs	r3, #1
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
	return 0;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
	...

08004d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d58:	4a14      	ldr	r2, [pc, #80]	; (8004dac <_sbrk+0x5c>)
 8004d5a:	4b15      	ldr	r3, [pc, #84]	; (8004db0 <_sbrk+0x60>)
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d64:	4b13      	ldr	r3, [pc, #76]	; (8004db4 <_sbrk+0x64>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d102      	bne.n	8004d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d6c:	4b11      	ldr	r3, [pc, #68]	; (8004db4 <_sbrk+0x64>)
 8004d6e:	4a12      	ldr	r2, [pc, #72]	; (8004db8 <_sbrk+0x68>)
 8004d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d72:	4b10      	ldr	r3, [pc, #64]	; (8004db4 <_sbrk+0x64>)
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4413      	add	r3, r2
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d207      	bcs.n	8004d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d80:	f005 f930 	bl	8009fe4 <__errno>
 8004d84:	4603      	mov	r3, r0
 8004d86:	220c      	movs	r2, #12
 8004d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d8e:	e009      	b.n	8004da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d90:	4b08      	ldr	r3, [pc, #32]	; (8004db4 <_sbrk+0x64>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d96:	4b07      	ldr	r3, [pc, #28]	; (8004db4 <_sbrk+0x64>)
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	4a05      	ldr	r2, [pc, #20]	; (8004db4 <_sbrk+0x64>)
 8004da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004da2:	68fb      	ldr	r3, [r7, #12]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	20020000 	.word	0x20020000
 8004db0:	00000400 	.word	0x00000400
 8004db4:	2000324c 	.word	0x2000324c
 8004db8:	200033a0 	.word	0x200033a0

08004dbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004dc0:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <SystemInit+0x20>)
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc6:	4a05      	ldr	r2, [pc, #20]	; (8004ddc <SystemInit+0x20>)
 8004dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004dd0:	bf00      	nop
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	e000ed00 	.word	0xe000ed00

08004de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004de4:	480d      	ldr	r0, [pc, #52]	; (8004e1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004de6:	490e      	ldr	r1, [pc, #56]	; (8004e20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004de8:	4a0e      	ldr	r2, [pc, #56]	; (8004e24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004dec:	e002      	b.n	8004df4 <LoopCopyDataInit>

08004dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004df2:	3304      	adds	r3, #4

08004df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004df8:	d3f9      	bcc.n	8004dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004dfa:	4a0b      	ldr	r2, [pc, #44]	; (8004e28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004dfc:	4c0b      	ldr	r4, [pc, #44]	; (8004e2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8004dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e00:	e001      	b.n	8004e06 <LoopFillZerobss>

08004e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e04:	3204      	adds	r2, #4

08004e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e08:	d3fb      	bcc.n	8004e02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004e0a:	f7ff ffd7 	bl	8004dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e0e:	f005 f8ef 	bl	8009ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e12:	f7ff f809 	bl	8003e28 <main>
  bx  lr    
 8004e16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004e18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e20:	200025b0 	.word	0x200025b0
  ldr r2, =_sidata
 8004e24:	0800c9bc 	.word	0x0800c9bc
  ldr r2, =_sbss
 8004e28:	200025b0 	.word	0x200025b0
  ldr r4, =_ebss
 8004e2c:	200033a0 	.word	0x200033a0

08004e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e30:	e7fe      	b.n	8004e30 <ADC_IRQHandler>
	...

08004e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e38:	4b0e      	ldr	r3, [pc, #56]	; (8004e74 <HAL_Init+0x40>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a0d      	ldr	r2, [pc, #52]	; (8004e74 <HAL_Init+0x40>)
 8004e3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e44:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <HAL_Init+0x40>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a0a      	ldr	r2, [pc, #40]	; (8004e74 <HAL_Init+0x40>)
 8004e4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e50:	4b08      	ldr	r3, [pc, #32]	; (8004e74 <HAL_Init+0x40>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a07      	ldr	r2, [pc, #28]	; (8004e74 <HAL_Init+0x40>)
 8004e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e5c:	2003      	movs	r0, #3
 8004e5e:	f001 fa1b 	bl	8006298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e62:	2000      	movs	r0, #0
 8004e64:	f000 f808 	bl	8004e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e68:	f7ff fbf8 	bl	800465c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40023c00 	.word	0x40023c00

08004e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e80:	4b12      	ldr	r3, [pc, #72]	; (8004ecc <HAL_InitTick+0x54>)
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	4b12      	ldr	r3, [pc, #72]	; (8004ed0 <HAL_InitTick+0x58>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	4619      	mov	r1, r3
 8004e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e96:	4618      	mov	r0, r3
 8004e98:	f001 fa33 	bl	8006302 <HAL_SYSTICK_Config>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e00e      	b.n	8004ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b0f      	cmp	r3, #15
 8004eaa:	d80a      	bhi.n	8004ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004eac:	2200      	movs	r2, #0
 8004eae:	6879      	ldr	r1, [r7, #4]
 8004eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004eb4:	f001 f9fb 	bl	80062ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004eb8:	4a06      	ldr	r2, [pc, #24]	; (8004ed4 <HAL_InitTick+0x5c>)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	e000      	b.n	8004ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	200023dc 	.word	0x200023dc
 8004ed0:	200023e4 	.word	0x200023e4
 8004ed4:	200023e0 	.word	0x200023e0

08004ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004edc:	4b06      	ldr	r3, [pc, #24]	; (8004ef8 <HAL_IncTick+0x20>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	4b06      	ldr	r3, [pc, #24]	; (8004efc <HAL_IncTick+0x24>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	4a04      	ldr	r2, [pc, #16]	; (8004efc <HAL_IncTick+0x24>)
 8004eea:	6013      	str	r3, [r2, #0]
}
 8004eec:	bf00      	nop
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	200023e4 	.word	0x200023e4
 8004efc:	20003250 	.word	0x20003250

08004f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  return uwTick;
 8004f04:	4b03      	ldr	r3, [pc, #12]	; (8004f14 <HAL_GetTick+0x14>)
 8004f06:	681b      	ldr	r3, [r3, #0]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	20003250 	.word	0x20003250

08004f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f20:	f7ff ffee 	bl	8004f00 <HAL_GetTick>
 8004f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f30:	d005      	beq.n	8004f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f32:	4b0a      	ldr	r3, [pc, #40]	; (8004f5c <HAL_Delay+0x44>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	461a      	mov	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004f3e:	bf00      	nop
 8004f40:	f7ff ffde 	bl	8004f00 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d8f7      	bhi.n	8004f40 <HAL_Delay+0x28>
  {
  }
}
 8004f50:	bf00      	nop
 8004f52:	bf00      	nop
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	200023e4 	.word	0x200023e4

08004f60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e033      	b.n	8004fde <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d109      	bne.n	8004f92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff fb94 	bl	80046ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	f003 0310 	and.w	r3, r3, #16
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d118      	bne.n	8004fd0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004fa6:	f023 0302 	bic.w	r3, r3, #2
 8004faa:	f043 0202 	orr.w	r2, r3, #2
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fa1c 	bl	80053f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	f023 0303 	bic.w	r3, r3, #3
 8004fc6:	f043 0201 	orr.w	r2, r3, #1
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	641a      	str	r2, [r3, #64]	; 0x40
 8004fce:	e001      	b.n	8004fd4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
	...

08004fe8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d101      	bne.n	8005002 <HAL_ADC_Start+0x1a>
 8004ffe:	2302      	movs	r3, #2
 8005000:	e0b2      	b.n	8005168 <HAL_ADC_Start+0x180>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	2b01      	cmp	r3, #1
 8005016:	d018      	beq.n	800504a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0201 	orr.w	r2, r2, #1
 8005026:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005028:	4b52      	ldr	r3, [pc, #328]	; (8005174 <HAL_ADC_Start+0x18c>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a52      	ldr	r2, [pc, #328]	; (8005178 <HAL_ADC_Start+0x190>)
 800502e:	fba2 2303 	umull	r2, r3, r2, r3
 8005032:	0c9a      	lsrs	r2, r3, #18
 8005034:	4613      	mov	r3, r2
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	4413      	add	r3, r2
 800503a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800503c:	e002      	b.n	8005044 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	3b01      	subs	r3, #1
 8005042:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1f9      	bne.n	800503e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b01      	cmp	r3, #1
 8005056:	d17a      	bne.n	800514e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005060:	f023 0301 	bic.w	r3, r3, #1
 8005064:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005076:	2b00      	cmp	r3, #0
 8005078:	d007      	beq.n	800508a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005082:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005096:	d106      	bne.n	80050a6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509c:	f023 0206 	bic.w	r2, r3, #6
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	645a      	str	r2, [r3, #68]	; 0x44
 80050a4:	e002      	b.n	80050ac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80050b4:	4b31      	ldr	r3, [pc, #196]	; (800517c <HAL_ADC_Start+0x194>)
 80050b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80050c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f003 031f 	and.w	r3, r3, #31
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d12a      	bne.n	8005124 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a2b      	ldr	r2, [pc, #172]	; (8005180 <HAL_ADC_Start+0x198>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d015      	beq.n	8005104 <HAL_ADC_Start+0x11c>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a29      	ldr	r2, [pc, #164]	; (8005184 <HAL_ADC_Start+0x19c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d105      	bne.n	80050ee <HAL_ADC_Start+0x106>
 80050e2:	4b26      	ldr	r3, [pc, #152]	; (800517c <HAL_ADC_Start+0x194>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f003 031f 	and.w	r3, r3, #31
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a25      	ldr	r2, [pc, #148]	; (8005188 <HAL_ADC_Start+0x1a0>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d136      	bne.n	8005166 <HAL_ADC_Start+0x17e>
 80050f8:	4b20      	ldr	r3, [pc, #128]	; (800517c <HAL_ADC_Start+0x194>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f003 0310 	and.w	r3, r3, #16
 8005100:	2b00      	cmp	r3, #0
 8005102:	d130      	bne.n	8005166 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d129      	bne.n	8005166 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005120:	609a      	str	r2, [r3, #8]
 8005122:	e020      	b.n	8005166 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a15      	ldr	r2, [pc, #84]	; (8005180 <HAL_ADC_Start+0x198>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d11b      	bne.n	8005166 <HAL_ADC_Start+0x17e>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d114      	bne.n	8005166 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800514a:	609a      	str	r2, [r3, #8]
 800514c:	e00b      	b.n	8005166 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005152:	f043 0210 	orr.w	r2, r3, #16
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515e:	f043 0201 	orr.w	r2, r3, #1
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	200023dc 	.word	0x200023dc
 8005178:	431bde83 	.word	0x431bde83
 800517c:	40012300 	.word	0x40012300
 8005180:	40012000 	.word	0x40012000
 8005184:	40012100 	.word	0x40012100
 8005188:	40012200 	.word	0x40012200

0800518c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d101      	bne.n	80051a8 <HAL_ADC_ConfigChannel+0x1c>
 80051a4:	2302      	movs	r3, #2
 80051a6:	e113      	b.n	80053d0 <HAL_ADC_ConfigChannel+0x244>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b09      	cmp	r3, #9
 80051b6:	d925      	bls.n	8005204 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68d9      	ldr	r1, [r3, #12]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	4613      	mov	r3, r2
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	4413      	add	r3, r2
 80051cc:	3b1e      	subs	r3, #30
 80051ce:	2207      	movs	r2, #7
 80051d0:	fa02 f303 	lsl.w	r3, r2, r3
 80051d4:	43da      	mvns	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	400a      	ands	r2, r1
 80051dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68d9      	ldr	r1, [r3, #12]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	4618      	mov	r0, r3
 80051f0:	4603      	mov	r3, r0
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	4403      	add	r3, r0
 80051f6:	3b1e      	subs	r3, #30
 80051f8:	409a      	lsls	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	60da      	str	r2, [r3, #12]
 8005202:	e022      	b.n	800524a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6919      	ldr	r1, [r3, #16]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	b29b      	uxth	r3, r3
 8005210:	461a      	mov	r2, r3
 8005212:	4613      	mov	r3, r2
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	4413      	add	r3, r2
 8005218:	2207      	movs	r2, #7
 800521a:	fa02 f303 	lsl.w	r3, r2, r3
 800521e:	43da      	mvns	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	400a      	ands	r2, r1
 8005226:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6919      	ldr	r1, [r3, #16]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	b29b      	uxth	r3, r3
 8005238:	4618      	mov	r0, r3
 800523a:	4603      	mov	r3, r0
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	4403      	add	r3, r0
 8005240:	409a      	lsls	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b06      	cmp	r3, #6
 8005250:	d824      	bhi.n	800529c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	4613      	mov	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4413      	add	r3, r2
 8005262:	3b05      	subs	r3, #5
 8005264:	221f      	movs	r2, #31
 8005266:	fa02 f303 	lsl.w	r3, r2, r3
 800526a:	43da      	mvns	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	400a      	ands	r2, r1
 8005272:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	b29b      	uxth	r3, r3
 8005280:	4618      	mov	r0, r3
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	4613      	mov	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	3b05      	subs	r3, #5
 800528e:	fa00 f203 	lsl.w	r2, r0, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	635a      	str	r2, [r3, #52]	; 0x34
 800529a:	e04c      	b.n	8005336 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2b0c      	cmp	r3, #12
 80052a2:	d824      	bhi.n	80052ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	4613      	mov	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	3b23      	subs	r3, #35	; 0x23
 80052b6:	221f      	movs	r2, #31
 80052b8:	fa02 f303 	lsl.w	r3, r2, r3
 80052bc:	43da      	mvns	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	400a      	ands	r2, r1
 80052c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	4618      	mov	r0, r3
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	4613      	mov	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	3b23      	subs	r3, #35	; 0x23
 80052e0:	fa00 f203 	lsl.w	r2, r0, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	631a      	str	r2, [r3, #48]	; 0x30
 80052ec:	e023      	b.n	8005336 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	4613      	mov	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	3b41      	subs	r3, #65	; 0x41
 8005300:	221f      	movs	r2, #31
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	43da      	mvns	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	400a      	ands	r2, r1
 800530e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	b29b      	uxth	r3, r3
 800531c:	4618      	mov	r0, r3
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	3b41      	subs	r3, #65	; 0x41
 800532a:	fa00 f203 	lsl.w	r2, r0, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005336:	4b29      	ldr	r3, [pc, #164]	; (80053dc <HAL_ADC_ConfigChannel+0x250>)
 8005338:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a28      	ldr	r2, [pc, #160]	; (80053e0 <HAL_ADC_ConfigChannel+0x254>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d10f      	bne.n	8005364 <HAL_ADC_ConfigChannel+0x1d8>
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b12      	cmp	r3, #18
 800534a:	d10b      	bne.n	8005364 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a1d      	ldr	r2, [pc, #116]	; (80053e0 <HAL_ADC_ConfigChannel+0x254>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d12b      	bne.n	80053c6 <HAL_ADC_ConfigChannel+0x23a>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a1c      	ldr	r2, [pc, #112]	; (80053e4 <HAL_ADC_ConfigChannel+0x258>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d003      	beq.n	8005380 <HAL_ADC_ConfigChannel+0x1f4>
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b11      	cmp	r3, #17
 800537e:	d122      	bne.n	80053c6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a11      	ldr	r2, [pc, #68]	; (80053e4 <HAL_ADC_ConfigChannel+0x258>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d111      	bne.n	80053c6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80053a2:	4b11      	ldr	r3, [pc, #68]	; (80053e8 <HAL_ADC_ConfigChannel+0x25c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a11      	ldr	r2, [pc, #68]	; (80053ec <HAL_ADC_ConfigChannel+0x260>)
 80053a8:	fba2 2303 	umull	r2, r3, r2, r3
 80053ac:	0c9a      	lsrs	r2, r3, #18
 80053ae:	4613      	mov	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80053b8:	e002      	b.n	80053c0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	3b01      	subs	r3, #1
 80053be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1f9      	bne.n	80053ba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	40012300 	.word	0x40012300
 80053e0:	40012000 	.word	0x40012000
 80053e4:	10000012 	.word	0x10000012
 80053e8:	200023dc 	.word	0x200023dc
 80053ec:	431bde83 	.word	0x431bde83

080053f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80053f8:	4b79      	ldr	r3, [pc, #484]	; (80055e0 <ADC_Init+0x1f0>)
 80053fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	431a      	orrs	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005424:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6859      	ldr	r1, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	021a      	lsls	r2, r3, #8
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005448:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6859      	ldr	r1, [r3, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800546a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6899      	ldr	r1, [r3, #8]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005482:	4a58      	ldr	r2, [pc, #352]	; (80055e4 <ADC_Init+0x1f4>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d022      	beq.n	80054ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005496:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6899      	ldr	r1, [r3, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80054b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6899      	ldr	r1, [r3, #8]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	609a      	str	r2, [r3, #8]
 80054cc:	e00f      	b.n	80054ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80054dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80054ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0202 	bic.w	r2, r2, #2
 80054fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6899      	ldr	r1, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	7e1b      	ldrb	r3, [r3, #24]
 8005508:	005a      	lsls	r2, r3, #1
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01b      	beq.n	8005554 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800552a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800553a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6859      	ldr	r1, [r3, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	3b01      	subs	r3, #1
 8005548:	035a      	lsls	r2, r3, #13
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	605a      	str	r2, [r3, #4]
 8005552:	e007      	b.n	8005564 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005562:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005572:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	3b01      	subs	r3, #1
 8005580:	051a      	lsls	r2, r3, #20
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005598:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6899      	ldr	r1, [r3, #8]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80055a6:	025a      	lsls	r2, r3, #9
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689a      	ldr	r2, [r3, #8]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6899      	ldr	r1, [r3, #8]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	029a      	lsls	r2, r3, #10
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	609a      	str	r2, [r3, #8]
}
 80055d4:	bf00      	nop
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	40012300 	.word	0x40012300
 80055e4:	0f000001 	.word	0x0f000001

080055e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e0ed      	b.n	80057d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d102      	bne.n	800560c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7ff f8c4 	bl	8004794 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0201 	orr.w	r2, r2, #1
 800561a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800561c:	f7ff fc70 	bl	8004f00 <HAL_GetTick>
 8005620:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005622:	e012      	b.n	800564a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005624:	f7ff fc6c 	bl	8004f00 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b0a      	cmp	r3, #10
 8005630:	d90b      	bls.n	800564a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2205      	movs	r2, #5
 8005642:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e0c5      	b.n	80057d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0e5      	beq.n	8005624 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 0202 	bic.w	r2, r2, #2
 8005666:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005668:	f7ff fc4a 	bl	8004f00 <HAL_GetTick>
 800566c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800566e:	e012      	b.n	8005696 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005670:	f7ff fc46 	bl	8004f00 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b0a      	cmp	r3, #10
 800567c:	d90b      	bls.n	8005696 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2205      	movs	r2, #5
 800568e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e09f      	b.n	80057d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1e5      	bne.n	8005670 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	7e1b      	ldrb	r3, [r3, #24]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d108      	bne.n	80056be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	e007      	b.n	80056ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	7e5b      	ldrb	r3, [r3, #25]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d108      	bne.n	80056e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	e007      	b.n	80056f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	7e9b      	ldrb	r3, [r3, #26]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d108      	bne.n	8005712 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0220 	orr.w	r2, r2, #32
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	e007      	b.n	8005722 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0220 	bic.w	r2, r2, #32
 8005720:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	7edb      	ldrb	r3, [r3, #27]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d108      	bne.n	800573c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0210 	bic.w	r2, r2, #16
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	e007      	b.n	800574c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0210 	orr.w	r2, r2, #16
 800574a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	7f1b      	ldrb	r3, [r3, #28]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d108      	bne.n	8005766 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0208 	orr.w	r2, r2, #8
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	e007      	b.n	8005776 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 0208 	bic.w	r2, r2, #8
 8005774:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	7f5b      	ldrb	r3, [r3, #29]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d108      	bne.n	8005790 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f042 0204 	orr.w	r2, r2, #4
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	e007      	b.n	80057a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 0204 	bic.w	r2, r2, #4
 800579e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	431a      	orrs	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	431a      	orrs	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	ea42 0103 	orr.w	r1, r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	1e5a      	subs	r2, r3, #1
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
	...

080057e0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057f6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80057f8:	7cfb      	ldrb	r3, [r7, #19]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d003      	beq.n	8005806 <HAL_CAN_ConfigFilter+0x26>
 80057fe:	7cfb      	ldrb	r3, [r7, #19]
 8005800:	2b02      	cmp	r3, #2
 8005802:	f040 80be 	bne.w	8005982 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005806:	4b65      	ldr	r3, [pc, #404]	; (800599c <HAL_CAN_ConfigFilter+0x1bc>)
 8005808:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005810:	f043 0201 	orr.w	r2, r3, #1
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005820:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	021b      	lsls	r3, r3, #8
 8005836:	431a      	orrs	r2, r3
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	f003 031f 	and.w	r3, r3, #31
 8005846:	2201      	movs	r2, #1
 8005848:	fa02 f303 	lsl.w	r3, r2, r3
 800584c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	43db      	mvns	r3, r3
 8005858:	401a      	ands	r2, r3
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d123      	bne.n	80058b0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	43db      	mvns	r3, r3
 8005872:	401a      	ands	r2, r3
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800588a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	3248      	adds	r2, #72	; 0x48
 8005890:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80058a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80058a6:	6979      	ldr	r1, [r7, #20]
 80058a8:	3348      	adds	r3, #72	; 0x48
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	440b      	add	r3, r1
 80058ae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d122      	bne.n	80058fe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	431a      	orrs	r2, r3
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80058d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	3248      	adds	r2, #72	; 0x48
 80058de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80058f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80058f4:	6979      	ldr	r1, [r7, #20]
 80058f6:	3348      	adds	r3, #72	; 0x48
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	440b      	add	r3, r1
 80058fc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d109      	bne.n	800591a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	43db      	mvns	r3, r3
 8005910:	401a      	ands	r2, r3
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005918:	e007      	b.n	800592a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	431a      	orrs	r2, r3
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d109      	bne.n	8005946 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	43db      	mvns	r3, r3
 800593c:	401a      	ands	r2, r3
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005944:	e007      	b.n	8005956 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	431a      	orrs	r2, r3
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d107      	bne.n	800596e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	431a      	orrs	r2, r3
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005974:	f023 0201 	bic.w	r2, r3, #1
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800597e:	2300      	movs	r3, #0
 8005980:	e006      	b.n	8005990 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
  }
}
 8005990:	4618      	mov	r0, r3
 8005992:	371c      	adds	r7, #28
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	40006400 	.word	0x40006400

080059a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d12e      	bne.n	8005a12 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 0201 	bic.w	r2, r2, #1
 80059ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059cc:	f7ff fa98 	bl	8004f00 <HAL_GetTick>
 80059d0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80059d2:	e012      	b.n	80059fa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80059d4:	f7ff fa94 	bl	8004f00 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b0a      	cmp	r3, #10
 80059e0:	d90b      	bls.n	80059fa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2205      	movs	r2, #5
 80059f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e012      	b.n	8005a20 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1e5      	bne.n	80059d4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	e006      	b.n	8005a20 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
  }
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a3c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005a3e:	7dfb      	ldrb	r3, [r7, #23]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d003      	beq.n	8005a4c <HAL_CAN_GetRxMessage+0x24>
 8005a44:	7dfb      	ldrb	r3, [r7, #23]
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	f040 80f3 	bne.w	8005c32 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10e      	bne.n	8005a70 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f003 0303 	and.w	r3, r3, #3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d116      	bne.n	8005a8e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e0e7      	b.n	8005c40 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d107      	bne.n	8005a8e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e0d8      	b.n	8005c40 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	331b      	adds	r3, #27
 8005a96:	011b      	lsls	r3, r3, #4
 8005a98:	4413      	add	r3, r2
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0204 	and.w	r2, r3, #4
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10c      	bne.n	8005ac6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	331b      	adds	r3, #27
 8005ab4:	011b      	lsls	r3, r3, #4
 8005ab6:	4413      	add	r3, r2
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	0d5b      	lsrs	r3, r3, #21
 8005abc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	e00b      	b.n	8005ade <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	331b      	adds	r3, #27
 8005ace:	011b      	lsls	r3, r3, #4
 8005ad0:	4413      	add	r3, r2
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	08db      	lsrs	r3, r3, #3
 8005ad6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	331b      	adds	r3, #27
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	4413      	add	r3, r2
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0202 	and.w	r2, r3, #2
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	331b      	adds	r3, #27
 8005afc:	011b      	lsls	r3, r3, #4
 8005afe:	4413      	add	r3, r2
 8005b00:	3304      	adds	r3, #4
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 020f 	and.w	r2, r3, #15
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	331b      	adds	r3, #27
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	4413      	add	r3, r2
 8005b18:	3304      	adds	r3, #4
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	0a1b      	lsrs	r3, r3, #8
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	331b      	adds	r3, #27
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	4413      	add	r3, r2
 8005b30:	3304      	adds	r3, #4
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	0c1b      	lsrs	r3, r3, #16
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	011b      	lsls	r3, r3, #4
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	0a1a      	lsrs	r2, r3, #8
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	3301      	adds	r3, #1
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	011b      	lsls	r3, r3, #4
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	0c1a      	lsrs	r2, r3, #16
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	3302      	adds	r3, #2
 8005b82:	b2d2      	uxtb	r2, r2
 8005b84:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	011b      	lsls	r3, r3, #4
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	0e1a      	lsrs	r2, r3, #24
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	3303      	adds	r3, #3
 8005b9c:	b2d2      	uxtb	r2, r2
 8005b9e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	011b      	lsls	r3, r3, #4
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	0a1a      	lsrs	r2, r3, #8
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	3305      	adds	r3, #5
 8005bce:	b2d2      	uxtb	r2, r2
 8005bd0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	011b      	lsls	r3, r3, #4
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	0c1a      	lsrs	r2, r3, #16
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	3306      	adds	r3, #6
 8005be8:	b2d2      	uxtb	r2, r2
 8005bea:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	0e1a      	lsrs	r2, r3, #24
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	3307      	adds	r3, #7
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d108      	bne.n	8005c1e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0220 	orr.w	r2, r2, #32
 8005c1a:	60da      	str	r2, [r3, #12]
 8005c1c:	e007      	b.n	8005c2e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	691a      	ldr	r2, [r3, #16]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f042 0220 	orr.w	r2, r2, #32
 8005c2c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	e006      	b.n	8005c40 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
  }
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	371c      	adds	r7, #28
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c5c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005c5e:	7bfb      	ldrb	r3, [r7, #15]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d002      	beq.n	8005c6a <HAL_CAN_ActivateNotification+0x1e>
 8005c64:	7bfb      	ldrb	r3, [r7, #15]
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d109      	bne.n	8005c7e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6959      	ldr	r1, [r3, #20]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	e006      	b.n	8005c8c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
  }
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08a      	sub	sp, #40	; 0x28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005cd4:	6a3b      	ldr	r3, [r7, #32]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d07c      	beq.n	8005dd8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d023      	beq.n	8005d30 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2201      	movs	r2, #1
 8005cee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f983 	bl	8006006 <HAL_CAN_TxMailbox0CompleteCallback>
 8005d00:	e016      	b.n	8005d30 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d004      	beq.n	8005d16 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005d12:	627b      	str	r3, [r7, #36]	; 0x24
 8005d14:	e00c      	b.n	8005d30 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	f003 0308 	and.w	r3, r3, #8
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d004      	beq.n	8005d2a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d26:	627b      	str	r3, [r7, #36]	; 0x24
 8005d28:	e002      	b.n	8005d30 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f989 	bl	8006042 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d024      	beq.n	8005d84 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d42:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d003      	beq.n	8005d56 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f963 	bl	800601a <HAL_CAN_TxMailbox1CompleteCallback>
 8005d54:	e016      	b.n	8005d84 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d004      	beq.n	8005d6a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d66:	627b      	str	r3, [r7, #36]	; 0x24
 8005d68:	e00c      	b.n	8005d84 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d004      	beq.n	8005d7e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d7c:	e002      	b.n	8005d84 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f969 	bl	8006056 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d024      	beq.n	8005dd8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005d96:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f943 	bl	800602e <HAL_CAN_TxMailbox2CompleteCallback>
 8005da8:	e016      	b.n	8005dd8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d004      	beq.n	8005dbe <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dba:	627b      	str	r3, [r7, #36]	; 0x24
 8005dbc:	e00c      	b.n	8005dd8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d004      	beq.n	8005dd2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dce:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd0:	e002      	b.n	8005dd8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f949 	bl	800606a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	f003 0308 	and.w	r3, r3, #8
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00c      	beq.n	8005dfc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f003 0310 	and.w	r3, r3, #16
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d007      	beq.n	8005dfc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2210      	movs	r2, #16
 8005dfa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	f003 0304 	and.w	r3, r3, #4
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00b      	beq.n	8005e1e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f003 0308 	and.w	r3, r3, #8
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d006      	beq.n	8005e1e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2208      	movs	r2, #8
 8005e16:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f930 	bl	800607e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005e1e:	6a3b      	ldr	r3, [r7, #32]
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d009      	beq.n	8005e3c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f003 0303 	and.w	r3, r3, #3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7fb f97e 	bl	8001138 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00c      	beq.n	8005e60 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f003 0310 	and.w	r3, r3, #16
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d007      	beq.n	8005e60 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e56:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2210      	movs	r2, #16
 8005e5e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	f003 0320 	and.w	r3, r3, #32
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00b      	beq.n	8005e82 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	f003 0308 	and.w	r3, r3, #8
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d006      	beq.n	8005e82 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2208      	movs	r2, #8
 8005e7a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f912 	bl	80060a6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005e82:	6a3b      	ldr	r3, [r7, #32]
 8005e84:	f003 0310 	and.w	r3, r3, #16
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d009      	beq.n	8005ea0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	f003 0303 	and.w	r3, r3, #3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d002      	beq.n	8005ea0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f8f9 	bl	8006092 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00b      	beq.n	8005ec2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	f003 0310 	and.w	r3, r3, #16
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d006      	beq.n	8005ec2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2210      	movs	r2, #16
 8005eba:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f8fc 	bl	80060ba <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00b      	beq.n	8005ee4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	f003 0308 	and.w	r3, r3, #8
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d006      	beq.n	8005ee4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2208      	movs	r2, #8
 8005edc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f8f5 	bl	80060ce <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d07b      	beq.n	8005fe6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	f003 0304 	and.w	r3, r3, #4
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d072      	beq.n	8005fde <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d008      	beq.n	8005f14 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d003      	beq.n	8005f14 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	f043 0301 	orr.w	r3, r3, #1
 8005f12:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d008      	beq.n	8005f30 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d003      	beq.n	8005f30 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	f043 0302 	orr.w	r3, r3, #2
 8005f2e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005f30:	6a3b      	ldr	r3, [r7, #32]
 8005f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d008      	beq.n	8005f4c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d003      	beq.n	8005f4c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	f043 0304 	orr.w	r3, r3, #4
 8005f4a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
 8005f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d043      	beq.n	8005fde <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d03e      	beq.n	8005fde <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f66:	2b60      	cmp	r3, #96	; 0x60
 8005f68:	d02b      	beq.n	8005fc2 <HAL_CAN_IRQHandler+0x32a>
 8005f6a:	2b60      	cmp	r3, #96	; 0x60
 8005f6c:	d82e      	bhi.n	8005fcc <HAL_CAN_IRQHandler+0x334>
 8005f6e:	2b50      	cmp	r3, #80	; 0x50
 8005f70:	d022      	beq.n	8005fb8 <HAL_CAN_IRQHandler+0x320>
 8005f72:	2b50      	cmp	r3, #80	; 0x50
 8005f74:	d82a      	bhi.n	8005fcc <HAL_CAN_IRQHandler+0x334>
 8005f76:	2b40      	cmp	r3, #64	; 0x40
 8005f78:	d019      	beq.n	8005fae <HAL_CAN_IRQHandler+0x316>
 8005f7a:	2b40      	cmp	r3, #64	; 0x40
 8005f7c:	d826      	bhi.n	8005fcc <HAL_CAN_IRQHandler+0x334>
 8005f7e:	2b30      	cmp	r3, #48	; 0x30
 8005f80:	d010      	beq.n	8005fa4 <HAL_CAN_IRQHandler+0x30c>
 8005f82:	2b30      	cmp	r3, #48	; 0x30
 8005f84:	d822      	bhi.n	8005fcc <HAL_CAN_IRQHandler+0x334>
 8005f86:	2b10      	cmp	r3, #16
 8005f88:	d002      	beq.n	8005f90 <HAL_CAN_IRQHandler+0x2f8>
 8005f8a:	2b20      	cmp	r3, #32
 8005f8c:	d005      	beq.n	8005f9a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005f8e:	e01d      	b.n	8005fcc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	f043 0308 	orr.w	r3, r3, #8
 8005f96:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f98:	e019      	b.n	8005fce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	f043 0310 	orr.w	r3, r3, #16
 8005fa0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005fa2:	e014      	b.n	8005fce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	f043 0320 	orr.w	r3, r3, #32
 8005faa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005fac:	e00f      	b.n	8005fce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005fb6:	e00a      	b.n	8005fce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fbe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005fc0:	e005      	b.n	8005fce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fc8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005fca:	e000      	b.n	8005fce <HAL_CAN_IRQHandler+0x336>
            break;
 8005fcc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	699a      	ldr	r2, [r3, #24]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005fdc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2204      	movs	r2, #4
 8005fe4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d008      	beq.n	8005ffe <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f872 	bl	80060e2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005ffe:	bf00      	nop
 8006000:	3728      	adds	r7, #40	; 0x28
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800601a:	b480      	push	{r7}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006022:	bf00      	nop
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800604a:	bf00      	nop
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800605e:	bf00      	nop
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800606a:	b480      	push	{r7}
 800606c:	b083      	sub	sp, #12
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006072:	bf00      	nop
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800607e:	b480      	push	{r7}
 8006080:	b083      	sub	sp, #12
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b083      	sub	sp, #12
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80060ae:	bf00      	nop
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b083      	sub	sp, #12
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80060d6:	bf00      	nop
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b083      	sub	sp, #12
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
	...

080060f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f003 0307 	and.w	r3, r3, #7
 8006106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006108:	4b0c      	ldr	r3, [pc, #48]	; (800613c <__NVIC_SetPriorityGrouping+0x44>)
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006114:	4013      	ands	r3, r2
 8006116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800612a:	4a04      	ldr	r2, [pc, #16]	; (800613c <__NVIC_SetPriorityGrouping+0x44>)
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	60d3      	str	r3, [r2, #12]
}
 8006130:	bf00      	nop
 8006132:	3714      	adds	r7, #20
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr
 800613c:	e000ed00 	.word	0xe000ed00

08006140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006140:	b480      	push	{r7}
 8006142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006144:	4b04      	ldr	r3, [pc, #16]	; (8006158 <__NVIC_GetPriorityGrouping+0x18>)
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	0a1b      	lsrs	r3, r3, #8
 800614a:	f003 0307 	and.w	r3, r3, #7
}
 800614e:	4618      	mov	r0, r3
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	e000ed00 	.word	0xe000ed00

0800615c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	4603      	mov	r3, r0
 8006164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800616a:	2b00      	cmp	r3, #0
 800616c:	db0b      	blt.n	8006186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800616e:	79fb      	ldrb	r3, [r7, #7]
 8006170:	f003 021f 	and.w	r2, r3, #31
 8006174:	4907      	ldr	r1, [pc, #28]	; (8006194 <__NVIC_EnableIRQ+0x38>)
 8006176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800617a:	095b      	lsrs	r3, r3, #5
 800617c:	2001      	movs	r0, #1
 800617e:	fa00 f202 	lsl.w	r2, r0, r2
 8006182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006186:	bf00      	nop
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	e000e100 	.word	0xe000e100

08006198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	4603      	mov	r3, r0
 80061a0:	6039      	str	r1, [r7, #0]
 80061a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	db0a      	blt.n	80061c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	490c      	ldr	r1, [pc, #48]	; (80061e4 <__NVIC_SetPriority+0x4c>)
 80061b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061b6:	0112      	lsls	r2, r2, #4
 80061b8:	b2d2      	uxtb	r2, r2
 80061ba:	440b      	add	r3, r1
 80061bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80061c0:	e00a      	b.n	80061d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	b2da      	uxtb	r2, r3
 80061c6:	4908      	ldr	r1, [pc, #32]	; (80061e8 <__NVIC_SetPriority+0x50>)
 80061c8:	79fb      	ldrb	r3, [r7, #7]
 80061ca:	f003 030f 	and.w	r3, r3, #15
 80061ce:	3b04      	subs	r3, #4
 80061d0:	0112      	lsls	r2, r2, #4
 80061d2:	b2d2      	uxtb	r2, r2
 80061d4:	440b      	add	r3, r1
 80061d6:	761a      	strb	r2, [r3, #24]
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr
 80061e4:	e000e100 	.word	0xe000e100
 80061e8:	e000ed00 	.word	0xe000ed00

080061ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b089      	sub	sp, #36	; 0x24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f003 0307 	and.w	r3, r3, #7
 80061fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	f1c3 0307 	rsb	r3, r3, #7
 8006206:	2b04      	cmp	r3, #4
 8006208:	bf28      	it	cs
 800620a:	2304      	movcs	r3, #4
 800620c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	3304      	adds	r3, #4
 8006212:	2b06      	cmp	r3, #6
 8006214:	d902      	bls.n	800621c <NVIC_EncodePriority+0x30>
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	3b03      	subs	r3, #3
 800621a:	e000      	b.n	800621e <NVIC_EncodePriority+0x32>
 800621c:	2300      	movs	r3, #0
 800621e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	fa02 f303 	lsl.w	r3, r2, r3
 800622a:	43da      	mvns	r2, r3
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	401a      	ands	r2, r3
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006234:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	fa01 f303 	lsl.w	r3, r1, r3
 800623e:	43d9      	mvns	r1, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006244:	4313      	orrs	r3, r2
         );
}
 8006246:	4618      	mov	r0, r3
 8006248:	3724      	adds	r7, #36	; 0x24
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
	...

08006254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3b01      	subs	r3, #1
 8006260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006264:	d301      	bcc.n	800626a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006266:	2301      	movs	r3, #1
 8006268:	e00f      	b.n	800628a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800626a:	4a0a      	ldr	r2, [pc, #40]	; (8006294 <SysTick_Config+0x40>)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3b01      	subs	r3, #1
 8006270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006272:	210f      	movs	r1, #15
 8006274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006278:	f7ff ff8e 	bl	8006198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800627c:	4b05      	ldr	r3, [pc, #20]	; (8006294 <SysTick_Config+0x40>)
 800627e:	2200      	movs	r2, #0
 8006280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006282:	4b04      	ldr	r3, [pc, #16]	; (8006294 <SysTick_Config+0x40>)
 8006284:	2207      	movs	r2, #7
 8006286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	e000e010 	.word	0xe000e010

08006298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7ff ff29 	bl	80060f8 <__NVIC_SetPriorityGrouping>
}
 80062a6:	bf00      	nop
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b086      	sub	sp, #24
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	4603      	mov	r3, r0
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	607a      	str	r2, [r7, #4]
 80062ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80062bc:	2300      	movs	r3, #0
 80062be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80062c0:	f7ff ff3e 	bl	8006140 <__NVIC_GetPriorityGrouping>
 80062c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	68b9      	ldr	r1, [r7, #8]
 80062ca:	6978      	ldr	r0, [r7, #20]
 80062cc:	f7ff ff8e 	bl	80061ec <NVIC_EncodePriority>
 80062d0:	4602      	mov	r2, r0
 80062d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062d6:	4611      	mov	r1, r2
 80062d8:	4618      	mov	r0, r3
 80062da:	f7ff ff5d 	bl	8006198 <__NVIC_SetPriority>
}
 80062de:	bf00      	nop
 80062e0:	3718      	adds	r7, #24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b082      	sub	sp, #8
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	4603      	mov	r3, r0
 80062ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80062f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7ff ff31 	bl	800615c <__NVIC_EnableIRQ>
}
 80062fa:	bf00      	nop
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b082      	sub	sp, #8
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7ff ffa2 	bl	8006254 <SysTick_Config>
 8006310:	4603      	mov	r3, r0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800631c:	b480      	push	{r7}
 800631e:	b089      	sub	sp, #36	; 0x24
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006326:	2300      	movs	r3, #0
 8006328:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800632a:	2300      	movs	r3, #0
 800632c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800632e:	2300      	movs	r3, #0
 8006330:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006332:	2300      	movs	r3, #0
 8006334:	61fb      	str	r3, [r7, #28]
 8006336:	e165      	b.n	8006604 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006338:	2201      	movs	r2, #1
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	fa02 f303 	lsl.w	r3, r2, r3
 8006340:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	4013      	ands	r3, r2
 800634a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	429a      	cmp	r2, r3
 8006352:	f040 8154 	bne.w	80065fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f003 0303 	and.w	r3, r3, #3
 800635e:	2b01      	cmp	r3, #1
 8006360:	d005      	beq.n	800636e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800636a:	2b02      	cmp	r3, #2
 800636c:	d130      	bne.n	80063d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	2203      	movs	r2, #3
 800637a:	fa02 f303 	lsl.w	r3, r2, r3
 800637e:	43db      	mvns	r3, r3
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	4013      	ands	r3, r2
 8006384:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	fa02 f303 	lsl.w	r3, r2, r3
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	4313      	orrs	r3, r2
 8006396:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063a4:	2201      	movs	r2, #1
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ac:	43db      	mvns	r3, r3
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	4013      	ands	r3, r2
 80063b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	091b      	lsrs	r3, r3, #4
 80063ba:	f003 0201 	and.w	r2, r3, #1
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f003 0303 	and.w	r3, r3, #3
 80063d8:	2b03      	cmp	r3, #3
 80063da:	d017      	beq.n	800640c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	005b      	lsls	r3, r3, #1
 80063e6:	2203      	movs	r2, #3
 80063e8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ec:	43db      	mvns	r3, r3
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	4013      	ands	r3, r2
 80063f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	4313      	orrs	r3, r2
 8006404:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f003 0303 	and.w	r3, r3, #3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d123      	bne.n	8006460 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	08da      	lsrs	r2, r3, #3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	3208      	adds	r2, #8
 8006420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006424:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	f003 0307 	and.w	r3, r3, #7
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	220f      	movs	r2, #15
 8006430:	fa02 f303 	lsl.w	r3, r2, r3
 8006434:	43db      	mvns	r3, r3
 8006436:	69ba      	ldr	r2, [r7, #24]
 8006438:	4013      	ands	r3, r2
 800643a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	691a      	ldr	r2, [r3, #16]
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	fa02 f303 	lsl.w	r3, r2, r3
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	4313      	orrs	r3, r2
 8006450:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	08da      	lsrs	r2, r3, #3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	3208      	adds	r2, #8
 800645a:	69b9      	ldr	r1, [r7, #24]
 800645c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	005b      	lsls	r3, r3, #1
 800646a:	2203      	movs	r2, #3
 800646c:	fa02 f303 	lsl.w	r3, r2, r3
 8006470:	43db      	mvns	r3, r3
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	4013      	ands	r3, r2
 8006476:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f003 0203 	and.w	r2, r3, #3
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	005b      	lsls	r3, r3, #1
 8006484:	fa02 f303 	lsl.w	r3, r2, r3
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	4313      	orrs	r3, r2
 800648c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 80ae 	beq.w	80065fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064a2:	2300      	movs	r3, #0
 80064a4:	60fb      	str	r3, [r7, #12]
 80064a6:	4b5d      	ldr	r3, [pc, #372]	; (800661c <HAL_GPIO_Init+0x300>)
 80064a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064aa:	4a5c      	ldr	r2, [pc, #368]	; (800661c <HAL_GPIO_Init+0x300>)
 80064ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064b0:	6453      	str	r3, [r2, #68]	; 0x44
 80064b2:	4b5a      	ldr	r3, [pc, #360]	; (800661c <HAL_GPIO_Init+0x300>)
 80064b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064be:	4a58      	ldr	r2, [pc, #352]	; (8006620 <HAL_GPIO_Init+0x304>)
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	089b      	lsrs	r3, r3, #2
 80064c4:	3302      	adds	r3, #2
 80064c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	f003 0303 	and.w	r3, r3, #3
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	220f      	movs	r2, #15
 80064d6:	fa02 f303 	lsl.w	r3, r2, r3
 80064da:	43db      	mvns	r3, r3
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	4013      	ands	r3, r2
 80064e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a4f      	ldr	r2, [pc, #316]	; (8006624 <HAL_GPIO_Init+0x308>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d025      	beq.n	8006536 <HAL_GPIO_Init+0x21a>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a4e      	ldr	r2, [pc, #312]	; (8006628 <HAL_GPIO_Init+0x30c>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d01f      	beq.n	8006532 <HAL_GPIO_Init+0x216>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a4d      	ldr	r2, [pc, #308]	; (800662c <HAL_GPIO_Init+0x310>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d019      	beq.n	800652e <HAL_GPIO_Init+0x212>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a4c      	ldr	r2, [pc, #304]	; (8006630 <HAL_GPIO_Init+0x314>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d013      	beq.n	800652a <HAL_GPIO_Init+0x20e>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a4b      	ldr	r2, [pc, #300]	; (8006634 <HAL_GPIO_Init+0x318>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d00d      	beq.n	8006526 <HAL_GPIO_Init+0x20a>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a4a      	ldr	r2, [pc, #296]	; (8006638 <HAL_GPIO_Init+0x31c>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d007      	beq.n	8006522 <HAL_GPIO_Init+0x206>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a49      	ldr	r2, [pc, #292]	; (800663c <HAL_GPIO_Init+0x320>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d101      	bne.n	800651e <HAL_GPIO_Init+0x202>
 800651a:	2306      	movs	r3, #6
 800651c:	e00c      	b.n	8006538 <HAL_GPIO_Init+0x21c>
 800651e:	2307      	movs	r3, #7
 8006520:	e00a      	b.n	8006538 <HAL_GPIO_Init+0x21c>
 8006522:	2305      	movs	r3, #5
 8006524:	e008      	b.n	8006538 <HAL_GPIO_Init+0x21c>
 8006526:	2304      	movs	r3, #4
 8006528:	e006      	b.n	8006538 <HAL_GPIO_Init+0x21c>
 800652a:	2303      	movs	r3, #3
 800652c:	e004      	b.n	8006538 <HAL_GPIO_Init+0x21c>
 800652e:	2302      	movs	r3, #2
 8006530:	e002      	b.n	8006538 <HAL_GPIO_Init+0x21c>
 8006532:	2301      	movs	r3, #1
 8006534:	e000      	b.n	8006538 <HAL_GPIO_Init+0x21c>
 8006536:	2300      	movs	r3, #0
 8006538:	69fa      	ldr	r2, [r7, #28]
 800653a:	f002 0203 	and.w	r2, r2, #3
 800653e:	0092      	lsls	r2, r2, #2
 8006540:	4093      	lsls	r3, r2
 8006542:	69ba      	ldr	r2, [r7, #24]
 8006544:	4313      	orrs	r3, r2
 8006546:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006548:	4935      	ldr	r1, [pc, #212]	; (8006620 <HAL_GPIO_Init+0x304>)
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	089b      	lsrs	r3, r3, #2
 800654e:	3302      	adds	r3, #2
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006556:	4b3a      	ldr	r3, [pc, #232]	; (8006640 <HAL_GPIO_Init+0x324>)
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	43db      	mvns	r3, r3
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	4013      	ands	r3, r2
 8006564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	4313      	orrs	r3, r2
 8006578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800657a:	4a31      	ldr	r2, [pc, #196]	; (8006640 <HAL_GPIO_Init+0x324>)
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006580:	4b2f      	ldr	r3, [pc, #188]	; (8006640 <HAL_GPIO_Init+0x324>)
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	43db      	mvns	r3, r3
 800658a:	69ba      	ldr	r2, [r7, #24]
 800658c:	4013      	ands	r3, r2
 800658e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80065a4:	4a26      	ldr	r2, [pc, #152]	; (8006640 <HAL_GPIO_Init+0x324>)
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80065aa:	4b25      	ldr	r3, [pc, #148]	; (8006640 <HAL_GPIO_Init+0x324>)
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	43db      	mvns	r3, r3
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	4013      	ands	r3, r2
 80065b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80065ce:	4a1c      	ldr	r2, [pc, #112]	; (8006640 <HAL_GPIO_Init+0x324>)
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80065d4:	4b1a      	ldr	r3, [pc, #104]	; (8006640 <HAL_GPIO_Init+0x324>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	43db      	mvns	r3, r3
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	4013      	ands	r3, r2
 80065e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d003      	beq.n	80065f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80065f8:	4a11      	ldr	r2, [pc, #68]	; (8006640 <HAL_GPIO_Init+0x324>)
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	3301      	adds	r3, #1
 8006602:	61fb      	str	r3, [r7, #28]
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	2b0f      	cmp	r3, #15
 8006608:	f67f ae96 	bls.w	8006338 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800660c:	bf00      	nop
 800660e:	bf00      	nop
 8006610:	3724      	adds	r7, #36	; 0x24
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	40023800 	.word	0x40023800
 8006620:	40013800 	.word	0x40013800
 8006624:	40020000 	.word	0x40020000
 8006628:	40020400 	.word	0x40020400
 800662c:	40020800 	.word	0x40020800
 8006630:	40020c00 	.word	0x40020c00
 8006634:	40021000 	.word	0x40021000
 8006638:	40021400 	.word	0x40021400
 800663c:	40021800 	.word	0x40021800
 8006640:	40013c00 	.word	0x40013c00

08006644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	460b      	mov	r3, r1
 800664e:	807b      	strh	r3, [r7, #2]
 8006650:	4613      	mov	r3, r2
 8006652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006654:	787b      	ldrb	r3, [r7, #1]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800665a:	887a      	ldrh	r2, [r7, #2]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006660:	e003      	b.n	800666a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006662:	887b      	ldrh	r3, [r7, #2]
 8006664:	041a      	lsls	r2, r3, #16
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	619a      	str	r2, [r3, #24]
}
 800666a:	bf00      	nop
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
	...

08006678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e0cc      	b.n	8006826 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800668c:	4b68      	ldr	r3, [pc, #416]	; (8006830 <HAL_RCC_ClockConfig+0x1b8>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 030f 	and.w	r3, r3, #15
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	429a      	cmp	r2, r3
 8006698:	d90c      	bls.n	80066b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800669a:	4b65      	ldr	r3, [pc, #404]	; (8006830 <HAL_RCC_ClockConfig+0x1b8>)
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	b2d2      	uxtb	r2, r2
 80066a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066a2:	4b63      	ldr	r3, [pc, #396]	; (8006830 <HAL_RCC_ClockConfig+0x1b8>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 030f 	and.w	r3, r3, #15
 80066aa:	683a      	ldr	r2, [r7, #0]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d001      	beq.n	80066b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e0b8      	b.n	8006826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0302 	and.w	r3, r3, #2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d020      	beq.n	8006702 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0304 	and.w	r3, r3, #4
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d005      	beq.n	80066d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066cc:	4b59      	ldr	r3, [pc, #356]	; (8006834 <HAL_RCC_ClockConfig+0x1bc>)
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	4a58      	ldr	r2, [pc, #352]	; (8006834 <HAL_RCC_ClockConfig+0x1bc>)
 80066d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0308 	and.w	r3, r3, #8
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d005      	beq.n	80066f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066e4:	4b53      	ldr	r3, [pc, #332]	; (8006834 <HAL_RCC_ClockConfig+0x1bc>)
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	4a52      	ldr	r2, [pc, #328]	; (8006834 <HAL_RCC_ClockConfig+0x1bc>)
 80066ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80066ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066f0:	4b50      	ldr	r3, [pc, #320]	; (8006834 <HAL_RCC_ClockConfig+0x1bc>)
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	494d      	ldr	r1, [pc, #308]	; (8006834 <HAL_RCC_ClockConfig+0x1bc>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	d044      	beq.n	8006798 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d107      	bne.n	8006726 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006716:	4b47      	ldr	r3, [pc, #284]	; (8006834 <HAL_RCC_ClockConfig+0x1bc>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d119      	bne.n	8006756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e07f      	b.n	8006826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	2b02      	cmp	r3, #2
 800672c:	d003      	beq.n	8006736 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006732:	2b03      	cmp	r3, #3
 8006734:	d107      	bne.n	8006746 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006736:	4b3f      	ldr	r3, [pc, #252]	; (8006834 <HAL_RCC_ClockConfig+0x1bc>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d109      	bne.n	8006756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e06f      	b.n	8006826 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006746:	4b3b      	ldr	r3, [pc, #236]	; (8006834 <HAL_RCC_ClockConfig+0x1bc>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0302 	and.w	r3, r3, #2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e067      	b.n	8006826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006756:	4b37      	ldr	r3, [pc, #220]	; (8006834 <HAL_RCC_ClockConfig+0x1bc>)
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f023 0203 	bic.w	r2, r3, #3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	4934      	ldr	r1, [pc, #208]	; (8006834 <HAL_RCC_ClockConfig+0x1bc>)
 8006764:	4313      	orrs	r3, r2
 8006766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006768:	f7fe fbca 	bl	8004f00 <HAL_GetTick>
 800676c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800676e:	e00a      	b.n	8006786 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006770:	f7fe fbc6 	bl	8004f00 <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	f241 3288 	movw	r2, #5000	; 0x1388
 800677e:	4293      	cmp	r3, r2
 8006780:	d901      	bls.n	8006786 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e04f      	b.n	8006826 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006786:	4b2b      	ldr	r3, [pc, #172]	; (8006834 <HAL_RCC_ClockConfig+0x1bc>)
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f003 020c 	and.w	r2, r3, #12
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	429a      	cmp	r2, r3
 8006796:	d1eb      	bne.n	8006770 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006798:	4b25      	ldr	r3, [pc, #148]	; (8006830 <HAL_RCC_ClockConfig+0x1b8>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 030f 	and.w	r3, r3, #15
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d20c      	bcs.n	80067c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067a6:	4b22      	ldr	r3, [pc, #136]	; (8006830 <HAL_RCC_ClockConfig+0x1b8>)
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	b2d2      	uxtb	r2, r2
 80067ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ae:	4b20      	ldr	r3, [pc, #128]	; (8006830 <HAL_RCC_ClockConfig+0x1b8>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 030f 	and.w	r3, r3, #15
 80067b6:	683a      	ldr	r2, [r7, #0]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d001      	beq.n	80067c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e032      	b.n	8006826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d008      	beq.n	80067de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067cc:	4b19      	ldr	r3, [pc, #100]	; (8006834 <HAL_RCC_ClockConfig+0x1bc>)
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	4916      	ldr	r1, [pc, #88]	; (8006834 <HAL_RCC_ClockConfig+0x1bc>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0308 	and.w	r3, r3, #8
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d009      	beq.n	80067fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067ea:	4b12      	ldr	r3, [pc, #72]	; (8006834 <HAL_RCC_ClockConfig+0x1bc>)
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	00db      	lsls	r3, r3, #3
 80067f8:	490e      	ldr	r1, [pc, #56]	; (8006834 <HAL_RCC_ClockConfig+0x1bc>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80067fe:	f000 f855 	bl	80068ac <HAL_RCC_GetSysClockFreq>
 8006802:	4602      	mov	r2, r0
 8006804:	4b0b      	ldr	r3, [pc, #44]	; (8006834 <HAL_RCC_ClockConfig+0x1bc>)
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	091b      	lsrs	r3, r3, #4
 800680a:	f003 030f 	and.w	r3, r3, #15
 800680e:	490a      	ldr	r1, [pc, #40]	; (8006838 <HAL_RCC_ClockConfig+0x1c0>)
 8006810:	5ccb      	ldrb	r3, [r1, r3]
 8006812:	fa22 f303 	lsr.w	r3, r2, r3
 8006816:	4a09      	ldr	r2, [pc, #36]	; (800683c <HAL_RCC_ClockConfig+0x1c4>)
 8006818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800681a:	4b09      	ldr	r3, [pc, #36]	; (8006840 <HAL_RCC_ClockConfig+0x1c8>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4618      	mov	r0, r3
 8006820:	f7fe fb2a 	bl	8004e78 <HAL_InitTick>

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	40023c00 	.word	0x40023c00
 8006834:	40023800 	.word	0x40023800
 8006838:	0800c620 	.word	0x0800c620
 800683c:	200023dc 	.word	0x200023dc
 8006840:	200023e0 	.word	0x200023e0

08006844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006844:	b480      	push	{r7}
 8006846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006848:	4b03      	ldr	r3, [pc, #12]	; (8006858 <HAL_RCC_GetHCLKFreq+0x14>)
 800684a:	681b      	ldr	r3, [r3, #0]
}
 800684c:	4618      	mov	r0, r3
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	200023dc 	.word	0x200023dc

0800685c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006860:	f7ff fff0 	bl	8006844 <HAL_RCC_GetHCLKFreq>
 8006864:	4602      	mov	r2, r0
 8006866:	4b05      	ldr	r3, [pc, #20]	; (800687c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	0a9b      	lsrs	r3, r3, #10
 800686c:	f003 0307 	and.w	r3, r3, #7
 8006870:	4903      	ldr	r1, [pc, #12]	; (8006880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006872:	5ccb      	ldrb	r3, [r1, r3]
 8006874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006878:	4618      	mov	r0, r3
 800687a:	bd80      	pop	{r7, pc}
 800687c:	40023800 	.word	0x40023800
 8006880:	0800c630 	.word	0x0800c630

08006884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006888:	f7ff ffdc 	bl	8006844 <HAL_RCC_GetHCLKFreq>
 800688c:	4602      	mov	r2, r0
 800688e:	4b05      	ldr	r3, [pc, #20]	; (80068a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	0b5b      	lsrs	r3, r3, #13
 8006894:	f003 0307 	and.w	r3, r3, #7
 8006898:	4903      	ldr	r1, [pc, #12]	; (80068a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800689a:	5ccb      	ldrb	r3, [r1, r3]
 800689c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	40023800 	.word	0x40023800
 80068a8:	0800c630 	.word	0x0800c630

080068ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068b0:	b0ae      	sub	sp, #184	; 0xb8
 80068b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80068ba:	2300      	movs	r3, #0
 80068bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80068cc:	2300      	movs	r3, #0
 80068ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068d2:	4bcb      	ldr	r3, [pc, #812]	; (8006c00 <HAL_RCC_GetSysClockFreq+0x354>)
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f003 030c 	and.w	r3, r3, #12
 80068da:	2b0c      	cmp	r3, #12
 80068dc:	f200 8206 	bhi.w	8006cec <HAL_RCC_GetSysClockFreq+0x440>
 80068e0:	a201      	add	r2, pc, #4	; (adr r2, 80068e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80068e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e6:	bf00      	nop
 80068e8:	0800691d 	.word	0x0800691d
 80068ec:	08006ced 	.word	0x08006ced
 80068f0:	08006ced 	.word	0x08006ced
 80068f4:	08006ced 	.word	0x08006ced
 80068f8:	08006925 	.word	0x08006925
 80068fc:	08006ced 	.word	0x08006ced
 8006900:	08006ced 	.word	0x08006ced
 8006904:	08006ced 	.word	0x08006ced
 8006908:	0800692d 	.word	0x0800692d
 800690c:	08006ced 	.word	0x08006ced
 8006910:	08006ced 	.word	0x08006ced
 8006914:	08006ced 	.word	0x08006ced
 8006918:	08006b1d 	.word	0x08006b1d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800691c:	4bb9      	ldr	r3, [pc, #740]	; (8006c04 <HAL_RCC_GetSysClockFreq+0x358>)
 800691e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8006922:	e1e7      	b.n	8006cf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006924:	4bb8      	ldr	r3, [pc, #736]	; (8006c08 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006926:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800692a:	e1e3      	b.n	8006cf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800692c:	4bb4      	ldr	r3, [pc, #720]	; (8006c00 <HAL_RCC_GetSysClockFreq+0x354>)
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006934:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006938:	4bb1      	ldr	r3, [pc, #708]	; (8006c00 <HAL_RCC_GetSysClockFreq+0x354>)
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d071      	beq.n	8006a28 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006944:	4bae      	ldr	r3, [pc, #696]	; (8006c00 <HAL_RCC_GetSysClockFreq+0x354>)
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	099b      	lsrs	r3, r3, #6
 800694a:	2200      	movs	r2, #0
 800694c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006950:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006954:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800695c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006960:	2300      	movs	r3, #0
 8006962:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006966:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800696a:	4622      	mov	r2, r4
 800696c:	462b      	mov	r3, r5
 800696e:	f04f 0000 	mov.w	r0, #0
 8006972:	f04f 0100 	mov.w	r1, #0
 8006976:	0159      	lsls	r1, r3, #5
 8006978:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800697c:	0150      	lsls	r0, r2, #5
 800697e:	4602      	mov	r2, r0
 8006980:	460b      	mov	r3, r1
 8006982:	4621      	mov	r1, r4
 8006984:	1a51      	subs	r1, r2, r1
 8006986:	6439      	str	r1, [r7, #64]	; 0x40
 8006988:	4629      	mov	r1, r5
 800698a:	eb63 0301 	sbc.w	r3, r3, r1
 800698e:	647b      	str	r3, [r7, #68]	; 0x44
 8006990:	f04f 0200 	mov.w	r2, #0
 8006994:	f04f 0300 	mov.w	r3, #0
 8006998:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800699c:	4649      	mov	r1, r9
 800699e:	018b      	lsls	r3, r1, #6
 80069a0:	4641      	mov	r1, r8
 80069a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80069a6:	4641      	mov	r1, r8
 80069a8:	018a      	lsls	r2, r1, #6
 80069aa:	4641      	mov	r1, r8
 80069ac:	1a51      	subs	r1, r2, r1
 80069ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80069b0:	4649      	mov	r1, r9
 80069b2:	eb63 0301 	sbc.w	r3, r3, r1
 80069b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069b8:	f04f 0200 	mov.w	r2, #0
 80069bc:	f04f 0300 	mov.w	r3, #0
 80069c0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80069c4:	4649      	mov	r1, r9
 80069c6:	00cb      	lsls	r3, r1, #3
 80069c8:	4641      	mov	r1, r8
 80069ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069ce:	4641      	mov	r1, r8
 80069d0:	00ca      	lsls	r2, r1, #3
 80069d2:	4610      	mov	r0, r2
 80069d4:	4619      	mov	r1, r3
 80069d6:	4603      	mov	r3, r0
 80069d8:	4622      	mov	r2, r4
 80069da:	189b      	adds	r3, r3, r2
 80069dc:	633b      	str	r3, [r7, #48]	; 0x30
 80069de:	462b      	mov	r3, r5
 80069e0:	460a      	mov	r2, r1
 80069e2:	eb42 0303 	adc.w	r3, r2, r3
 80069e6:	637b      	str	r3, [r7, #52]	; 0x34
 80069e8:	f04f 0200 	mov.w	r2, #0
 80069ec:	f04f 0300 	mov.w	r3, #0
 80069f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80069f4:	4629      	mov	r1, r5
 80069f6:	024b      	lsls	r3, r1, #9
 80069f8:	4621      	mov	r1, r4
 80069fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80069fe:	4621      	mov	r1, r4
 8006a00:	024a      	lsls	r2, r1, #9
 8006a02:	4610      	mov	r0, r2
 8006a04:	4619      	mov	r1, r3
 8006a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a14:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006a18:	f7fa f956 	bl	8000cc8 <__aeabi_uldivmod>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	4613      	mov	r3, r2
 8006a22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a26:	e067      	b.n	8006af8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a28:	4b75      	ldr	r3, [pc, #468]	; (8006c00 <HAL_RCC_GetSysClockFreq+0x354>)
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	099b      	lsrs	r3, r3, #6
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a34:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006a38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a40:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a42:	2300      	movs	r3, #0
 8006a44:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a46:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006a4a:	4622      	mov	r2, r4
 8006a4c:	462b      	mov	r3, r5
 8006a4e:	f04f 0000 	mov.w	r0, #0
 8006a52:	f04f 0100 	mov.w	r1, #0
 8006a56:	0159      	lsls	r1, r3, #5
 8006a58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a5c:	0150      	lsls	r0, r2, #5
 8006a5e:	4602      	mov	r2, r0
 8006a60:	460b      	mov	r3, r1
 8006a62:	4621      	mov	r1, r4
 8006a64:	1a51      	subs	r1, r2, r1
 8006a66:	62b9      	str	r1, [r7, #40]	; 0x28
 8006a68:	4629      	mov	r1, r5
 8006a6a:	eb63 0301 	sbc.w	r3, r3, r1
 8006a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a70:	f04f 0200 	mov.w	r2, #0
 8006a74:	f04f 0300 	mov.w	r3, #0
 8006a78:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006a7c:	4649      	mov	r1, r9
 8006a7e:	018b      	lsls	r3, r1, #6
 8006a80:	4641      	mov	r1, r8
 8006a82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a86:	4641      	mov	r1, r8
 8006a88:	018a      	lsls	r2, r1, #6
 8006a8a:	4641      	mov	r1, r8
 8006a8c:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a90:	4649      	mov	r1, r9
 8006a92:	eb63 0b01 	sbc.w	fp, r3, r1
 8006a96:	f04f 0200 	mov.w	r2, #0
 8006a9a:	f04f 0300 	mov.w	r3, #0
 8006a9e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006aa2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006aa6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006aaa:	4692      	mov	sl, r2
 8006aac:	469b      	mov	fp, r3
 8006aae:	4623      	mov	r3, r4
 8006ab0:	eb1a 0303 	adds.w	r3, sl, r3
 8006ab4:	623b      	str	r3, [r7, #32]
 8006ab6:	462b      	mov	r3, r5
 8006ab8:	eb4b 0303 	adc.w	r3, fp, r3
 8006abc:	627b      	str	r3, [r7, #36]	; 0x24
 8006abe:	f04f 0200 	mov.w	r2, #0
 8006ac2:	f04f 0300 	mov.w	r3, #0
 8006ac6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006aca:	4629      	mov	r1, r5
 8006acc:	028b      	lsls	r3, r1, #10
 8006ace:	4621      	mov	r1, r4
 8006ad0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ad4:	4621      	mov	r1, r4
 8006ad6:	028a      	lsls	r2, r1, #10
 8006ad8:	4610      	mov	r0, r2
 8006ada:	4619      	mov	r1, r3
 8006adc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	673b      	str	r3, [r7, #112]	; 0x70
 8006ae4:	677a      	str	r2, [r7, #116]	; 0x74
 8006ae6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006aea:	f7fa f8ed 	bl	8000cc8 <__aeabi_uldivmod>
 8006aee:	4602      	mov	r2, r0
 8006af0:	460b      	mov	r3, r1
 8006af2:	4613      	mov	r3, r2
 8006af4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006af8:	4b41      	ldr	r3, [pc, #260]	; (8006c00 <HAL_RCC_GetSysClockFreq+0x354>)
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	0c1b      	lsrs	r3, r3, #16
 8006afe:	f003 0303 	and.w	r3, r3, #3
 8006b02:	3301      	adds	r3, #1
 8006b04:	005b      	lsls	r3, r3, #1
 8006b06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006b0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006b1a:	e0eb      	b.n	8006cf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b1c:	4b38      	ldr	r3, [pc, #224]	; (8006c00 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b28:	4b35      	ldr	r3, [pc, #212]	; (8006c00 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d06b      	beq.n	8006c0c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b34:	4b32      	ldr	r3, [pc, #200]	; (8006c00 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	099b      	lsrs	r3, r3, #6
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b46:	663b      	str	r3, [r7, #96]	; 0x60
 8006b48:	2300      	movs	r3, #0
 8006b4a:	667b      	str	r3, [r7, #100]	; 0x64
 8006b4c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006b50:	4622      	mov	r2, r4
 8006b52:	462b      	mov	r3, r5
 8006b54:	f04f 0000 	mov.w	r0, #0
 8006b58:	f04f 0100 	mov.w	r1, #0
 8006b5c:	0159      	lsls	r1, r3, #5
 8006b5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b62:	0150      	lsls	r0, r2, #5
 8006b64:	4602      	mov	r2, r0
 8006b66:	460b      	mov	r3, r1
 8006b68:	4621      	mov	r1, r4
 8006b6a:	1a51      	subs	r1, r2, r1
 8006b6c:	61b9      	str	r1, [r7, #24]
 8006b6e:	4629      	mov	r1, r5
 8006b70:	eb63 0301 	sbc.w	r3, r3, r1
 8006b74:	61fb      	str	r3, [r7, #28]
 8006b76:	f04f 0200 	mov.w	r2, #0
 8006b7a:	f04f 0300 	mov.w	r3, #0
 8006b7e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006b82:	4659      	mov	r1, fp
 8006b84:	018b      	lsls	r3, r1, #6
 8006b86:	4651      	mov	r1, sl
 8006b88:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b8c:	4651      	mov	r1, sl
 8006b8e:	018a      	lsls	r2, r1, #6
 8006b90:	4651      	mov	r1, sl
 8006b92:	ebb2 0801 	subs.w	r8, r2, r1
 8006b96:	4659      	mov	r1, fp
 8006b98:	eb63 0901 	sbc.w	r9, r3, r1
 8006b9c:	f04f 0200 	mov.w	r2, #0
 8006ba0:	f04f 0300 	mov.w	r3, #0
 8006ba4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ba8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bb0:	4690      	mov	r8, r2
 8006bb2:	4699      	mov	r9, r3
 8006bb4:	4623      	mov	r3, r4
 8006bb6:	eb18 0303 	adds.w	r3, r8, r3
 8006bba:	613b      	str	r3, [r7, #16]
 8006bbc:	462b      	mov	r3, r5
 8006bbe:	eb49 0303 	adc.w	r3, r9, r3
 8006bc2:	617b      	str	r3, [r7, #20]
 8006bc4:	f04f 0200 	mov.w	r2, #0
 8006bc8:	f04f 0300 	mov.w	r3, #0
 8006bcc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006bd0:	4629      	mov	r1, r5
 8006bd2:	024b      	lsls	r3, r1, #9
 8006bd4:	4621      	mov	r1, r4
 8006bd6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006bda:	4621      	mov	r1, r4
 8006bdc:	024a      	lsls	r2, r1, #9
 8006bde:	4610      	mov	r0, r2
 8006be0:	4619      	mov	r1, r3
 8006be2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006be6:	2200      	movs	r2, #0
 8006be8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006bea:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006bec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006bf0:	f7fa f86a 	bl	8000cc8 <__aeabi_uldivmod>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bfe:	e065      	b.n	8006ccc <HAL_RCC_GetSysClockFreq+0x420>
 8006c00:	40023800 	.word	0x40023800
 8006c04:	00f42400 	.word	0x00f42400
 8006c08:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c0c:	4b3d      	ldr	r3, [pc, #244]	; (8006d04 <HAL_RCC_GetSysClockFreq+0x458>)
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	099b      	lsrs	r3, r3, #6
 8006c12:	2200      	movs	r2, #0
 8006c14:	4618      	mov	r0, r3
 8006c16:	4611      	mov	r1, r2
 8006c18:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006c1c:	653b      	str	r3, [r7, #80]	; 0x50
 8006c1e:	2300      	movs	r3, #0
 8006c20:	657b      	str	r3, [r7, #84]	; 0x54
 8006c22:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006c26:	4642      	mov	r2, r8
 8006c28:	464b      	mov	r3, r9
 8006c2a:	f04f 0000 	mov.w	r0, #0
 8006c2e:	f04f 0100 	mov.w	r1, #0
 8006c32:	0159      	lsls	r1, r3, #5
 8006c34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c38:	0150      	lsls	r0, r2, #5
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	4641      	mov	r1, r8
 8006c40:	1a51      	subs	r1, r2, r1
 8006c42:	60b9      	str	r1, [r7, #8]
 8006c44:	4649      	mov	r1, r9
 8006c46:	eb63 0301 	sbc.w	r3, r3, r1
 8006c4a:	60fb      	str	r3, [r7, #12]
 8006c4c:	f04f 0200 	mov.w	r2, #0
 8006c50:	f04f 0300 	mov.w	r3, #0
 8006c54:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006c58:	4659      	mov	r1, fp
 8006c5a:	018b      	lsls	r3, r1, #6
 8006c5c:	4651      	mov	r1, sl
 8006c5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c62:	4651      	mov	r1, sl
 8006c64:	018a      	lsls	r2, r1, #6
 8006c66:	4651      	mov	r1, sl
 8006c68:	1a54      	subs	r4, r2, r1
 8006c6a:	4659      	mov	r1, fp
 8006c6c:	eb63 0501 	sbc.w	r5, r3, r1
 8006c70:	f04f 0200 	mov.w	r2, #0
 8006c74:	f04f 0300 	mov.w	r3, #0
 8006c78:	00eb      	lsls	r3, r5, #3
 8006c7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c7e:	00e2      	lsls	r2, r4, #3
 8006c80:	4614      	mov	r4, r2
 8006c82:	461d      	mov	r5, r3
 8006c84:	4643      	mov	r3, r8
 8006c86:	18e3      	adds	r3, r4, r3
 8006c88:	603b      	str	r3, [r7, #0]
 8006c8a:	464b      	mov	r3, r9
 8006c8c:	eb45 0303 	adc.w	r3, r5, r3
 8006c90:	607b      	str	r3, [r7, #4]
 8006c92:	f04f 0200 	mov.w	r2, #0
 8006c96:	f04f 0300 	mov.w	r3, #0
 8006c9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006c9e:	4629      	mov	r1, r5
 8006ca0:	028b      	lsls	r3, r1, #10
 8006ca2:	4621      	mov	r1, r4
 8006ca4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ca8:	4621      	mov	r1, r4
 8006caa:	028a      	lsls	r2, r1, #10
 8006cac:	4610      	mov	r0, r2
 8006cae:	4619      	mov	r1, r3
 8006cb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cb8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006cba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006cbe:	f7fa f803 	bl	8000cc8 <__aeabi_uldivmod>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006ccc:	4b0d      	ldr	r3, [pc, #52]	; (8006d04 <HAL_RCC_GetSysClockFreq+0x458>)
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	0f1b      	lsrs	r3, r3, #28
 8006cd2:	f003 0307 	and.w	r3, r3, #7
 8006cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006cda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006cde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006cea:	e003      	b.n	8006cf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006cec:	4b06      	ldr	r3, [pc, #24]	; (8006d08 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006cee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006cf2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006cf4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	37b8      	adds	r7, #184	; 0xb8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d02:	bf00      	nop
 8006d04:	40023800 	.word	0x40023800
 8006d08:	00f42400 	.word	0x00f42400

08006d0c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e28d      	b.n	800723a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f000 8083 	beq.w	8006e32 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006d2c:	4b94      	ldr	r3, [pc, #592]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f003 030c 	and.w	r3, r3, #12
 8006d34:	2b04      	cmp	r3, #4
 8006d36:	d019      	beq.n	8006d6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006d38:	4b91      	ldr	r3, [pc, #580]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	d106      	bne.n	8006d52 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006d44:	4b8e      	ldr	r3, [pc, #568]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d50:	d00c      	beq.n	8006d6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d52:	4b8b      	ldr	r3, [pc, #556]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006d5a:	2b0c      	cmp	r3, #12
 8006d5c:	d112      	bne.n	8006d84 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d5e:	4b88      	ldr	r3, [pc, #544]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d6a:	d10b      	bne.n	8006d84 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d6c:	4b84      	ldr	r3, [pc, #528]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d05b      	beq.n	8006e30 <HAL_RCC_OscConfig+0x124>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d157      	bne.n	8006e30 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e25a      	b.n	800723a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d8c:	d106      	bne.n	8006d9c <HAL_RCC_OscConfig+0x90>
 8006d8e:	4b7c      	ldr	r3, [pc, #496]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a7b      	ldr	r2, [pc, #492]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d98:	6013      	str	r3, [r2, #0]
 8006d9a:	e01d      	b.n	8006dd8 <HAL_RCC_OscConfig+0xcc>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006da4:	d10c      	bne.n	8006dc0 <HAL_RCC_OscConfig+0xb4>
 8006da6:	4b76      	ldr	r3, [pc, #472]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a75      	ldr	r2, [pc, #468]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006db0:	6013      	str	r3, [r2, #0]
 8006db2:	4b73      	ldr	r3, [pc, #460]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a72      	ldr	r2, [pc, #456]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dbc:	6013      	str	r3, [r2, #0]
 8006dbe:	e00b      	b.n	8006dd8 <HAL_RCC_OscConfig+0xcc>
 8006dc0:	4b6f      	ldr	r3, [pc, #444]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a6e      	ldr	r2, [pc, #440]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dca:	6013      	str	r3, [r2, #0]
 8006dcc:	4b6c      	ldr	r3, [pc, #432]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a6b      	ldr	r2, [pc, #428]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d013      	beq.n	8006e08 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de0:	f7fe f88e 	bl	8004f00 <HAL_GetTick>
 8006de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006de6:	e008      	b.n	8006dfa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006de8:	f7fe f88a 	bl	8004f00 <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	2b64      	cmp	r3, #100	; 0x64
 8006df4:	d901      	bls.n	8006dfa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e21f      	b.n	800723a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dfa:	4b61      	ldr	r3, [pc, #388]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d0f0      	beq.n	8006de8 <HAL_RCC_OscConfig+0xdc>
 8006e06:	e014      	b.n	8006e32 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e08:	f7fe f87a 	bl	8004f00 <HAL_GetTick>
 8006e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e0e:	e008      	b.n	8006e22 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e10:	f7fe f876 	bl	8004f00 <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	2b64      	cmp	r3, #100	; 0x64
 8006e1c:	d901      	bls.n	8006e22 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e20b      	b.n	800723a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e22:	4b57      	ldr	r3, [pc, #348]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1f0      	bne.n	8006e10 <HAL_RCC_OscConfig+0x104>
 8006e2e:	e000      	b.n	8006e32 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d06f      	beq.n	8006f1e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006e3e:	4b50      	ldr	r3, [pc, #320]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f003 030c 	and.w	r3, r3, #12
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d017      	beq.n	8006e7a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006e4a:	4b4d      	ldr	r3, [pc, #308]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006e52:	2b08      	cmp	r3, #8
 8006e54:	d105      	bne.n	8006e62 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006e56:	4b4a      	ldr	r3, [pc, #296]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00b      	beq.n	8006e7a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e62:	4b47      	ldr	r3, [pc, #284]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006e6a:	2b0c      	cmp	r3, #12
 8006e6c:	d11c      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e6e:	4b44      	ldr	r3, [pc, #272]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d116      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e7a:	4b41      	ldr	r3, [pc, #260]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0302 	and.w	r3, r3, #2
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d005      	beq.n	8006e92 <HAL_RCC_OscConfig+0x186>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d001      	beq.n	8006e92 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e1d3      	b.n	800723a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e92:	4b3b      	ldr	r3, [pc, #236]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	00db      	lsls	r3, r3, #3
 8006ea0:	4937      	ldr	r1, [pc, #220]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ea6:	e03a      	b.n	8006f1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d020      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006eb0:	4b34      	ldr	r3, [pc, #208]	; (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb6:	f7fe f823 	bl	8004f00 <HAL_GetTick>
 8006eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ebc:	e008      	b.n	8006ed0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ebe:	f7fe f81f 	bl	8004f00 <HAL_GetTick>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d901      	bls.n	8006ed0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e1b4      	b.n	800723a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ed0:	4b2b      	ldr	r3, [pc, #172]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0302 	and.w	r3, r3, #2
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d0f0      	beq.n	8006ebe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006edc:	4b28      	ldr	r3, [pc, #160]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	00db      	lsls	r3, r3, #3
 8006eea:	4925      	ldr	r1, [pc, #148]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	600b      	str	r3, [r1, #0]
 8006ef0:	e015      	b.n	8006f1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ef2:	4b24      	ldr	r3, [pc, #144]	; (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ef8:	f7fe f802 	bl	8004f00 <HAL_GetTick>
 8006efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006efe:	e008      	b.n	8006f12 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f00:	f7fd fffe 	bl	8004f00 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d901      	bls.n	8006f12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e193      	b.n	800723a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f12:	4b1b      	ldr	r3, [pc, #108]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0302 	and.w	r3, r3, #2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1f0      	bne.n	8006f00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0308 	and.w	r3, r3, #8
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d036      	beq.n	8006f98 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d016      	beq.n	8006f60 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f32:	4b15      	ldr	r3, [pc, #84]	; (8006f88 <HAL_RCC_OscConfig+0x27c>)
 8006f34:	2201      	movs	r2, #1
 8006f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f38:	f7fd ffe2 	bl	8004f00 <HAL_GetTick>
 8006f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f3e:	e008      	b.n	8006f52 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f40:	f7fd ffde 	bl	8004f00 <HAL_GetTick>
 8006f44:	4602      	mov	r2, r0
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d901      	bls.n	8006f52 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e173      	b.n	800723a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f52:	4b0b      	ldr	r3, [pc, #44]	; (8006f80 <HAL_RCC_OscConfig+0x274>)
 8006f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f56:	f003 0302 	and.w	r3, r3, #2
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d0f0      	beq.n	8006f40 <HAL_RCC_OscConfig+0x234>
 8006f5e:	e01b      	b.n	8006f98 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f60:	4b09      	ldr	r3, [pc, #36]	; (8006f88 <HAL_RCC_OscConfig+0x27c>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f66:	f7fd ffcb 	bl	8004f00 <HAL_GetTick>
 8006f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f6c:	e00e      	b.n	8006f8c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f6e:	f7fd ffc7 	bl	8004f00 <HAL_GetTick>
 8006f72:	4602      	mov	r2, r0
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d907      	bls.n	8006f8c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e15c      	b.n	800723a <HAL_RCC_OscConfig+0x52e>
 8006f80:	40023800 	.word	0x40023800
 8006f84:	42470000 	.word	0x42470000
 8006f88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f8c:	4b8a      	ldr	r3, [pc, #552]	; (80071b8 <HAL_RCC_OscConfig+0x4ac>)
 8006f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f90:	f003 0302 	and.w	r3, r3, #2
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1ea      	bne.n	8006f6e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0304 	and.w	r3, r3, #4
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 8097 	beq.w	80070d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006faa:	4b83      	ldr	r3, [pc, #524]	; (80071b8 <HAL_RCC_OscConfig+0x4ac>)
 8006fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10f      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60bb      	str	r3, [r7, #8]
 8006fba:	4b7f      	ldr	r3, [pc, #508]	; (80071b8 <HAL_RCC_OscConfig+0x4ac>)
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbe:	4a7e      	ldr	r2, [pc, #504]	; (80071b8 <HAL_RCC_OscConfig+0x4ac>)
 8006fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8006fc6:	4b7c      	ldr	r3, [pc, #496]	; (80071b8 <HAL_RCC_OscConfig+0x4ac>)
 8006fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fce:	60bb      	str	r3, [r7, #8]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fd6:	4b79      	ldr	r3, [pc, #484]	; (80071bc <HAL_RCC_OscConfig+0x4b0>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d118      	bne.n	8007014 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fe2:	4b76      	ldr	r3, [pc, #472]	; (80071bc <HAL_RCC_OscConfig+0x4b0>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a75      	ldr	r2, [pc, #468]	; (80071bc <HAL_RCC_OscConfig+0x4b0>)
 8006fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fee:	f7fd ff87 	bl	8004f00 <HAL_GetTick>
 8006ff2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ff4:	e008      	b.n	8007008 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ff6:	f7fd ff83 	bl	8004f00 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	2b02      	cmp	r3, #2
 8007002:	d901      	bls.n	8007008 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e118      	b.n	800723a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007008:	4b6c      	ldr	r3, [pc, #432]	; (80071bc <HAL_RCC_OscConfig+0x4b0>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007010:	2b00      	cmp	r3, #0
 8007012:	d0f0      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d106      	bne.n	800702a <HAL_RCC_OscConfig+0x31e>
 800701c:	4b66      	ldr	r3, [pc, #408]	; (80071b8 <HAL_RCC_OscConfig+0x4ac>)
 800701e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007020:	4a65      	ldr	r2, [pc, #404]	; (80071b8 <HAL_RCC_OscConfig+0x4ac>)
 8007022:	f043 0301 	orr.w	r3, r3, #1
 8007026:	6713      	str	r3, [r2, #112]	; 0x70
 8007028:	e01c      	b.n	8007064 <HAL_RCC_OscConfig+0x358>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	2b05      	cmp	r3, #5
 8007030:	d10c      	bne.n	800704c <HAL_RCC_OscConfig+0x340>
 8007032:	4b61      	ldr	r3, [pc, #388]	; (80071b8 <HAL_RCC_OscConfig+0x4ac>)
 8007034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007036:	4a60      	ldr	r2, [pc, #384]	; (80071b8 <HAL_RCC_OscConfig+0x4ac>)
 8007038:	f043 0304 	orr.w	r3, r3, #4
 800703c:	6713      	str	r3, [r2, #112]	; 0x70
 800703e:	4b5e      	ldr	r3, [pc, #376]	; (80071b8 <HAL_RCC_OscConfig+0x4ac>)
 8007040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007042:	4a5d      	ldr	r2, [pc, #372]	; (80071b8 <HAL_RCC_OscConfig+0x4ac>)
 8007044:	f043 0301 	orr.w	r3, r3, #1
 8007048:	6713      	str	r3, [r2, #112]	; 0x70
 800704a:	e00b      	b.n	8007064 <HAL_RCC_OscConfig+0x358>
 800704c:	4b5a      	ldr	r3, [pc, #360]	; (80071b8 <HAL_RCC_OscConfig+0x4ac>)
 800704e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007050:	4a59      	ldr	r2, [pc, #356]	; (80071b8 <HAL_RCC_OscConfig+0x4ac>)
 8007052:	f023 0301 	bic.w	r3, r3, #1
 8007056:	6713      	str	r3, [r2, #112]	; 0x70
 8007058:	4b57      	ldr	r3, [pc, #348]	; (80071b8 <HAL_RCC_OscConfig+0x4ac>)
 800705a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705c:	4a56      	ldr	r2, [pc, #344]	; (80071b8 <HAL_RCC_OscConfig+0x4ac>)
 800705e:	f023 0304 	bic.w	r3, r3, #4
 8007062:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d015      	beq.n	8007098 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800706c:	f7fd ff48 	bl	8004f00 <HAL_GetTick>
 8007070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007072:	e00a      	b.n	800708a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007074:	f7fd ff44 	bl	8004f00 <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007082:	4293      	cmp	r3, r2
 8007084:	d901      	bls.n	800708a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e0d7      	b.n	800723a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800708a:	4b4b      	ldr	r3, [pc, #300]	; (80071b8 <HAL_RCC_OscConfig+0x4ac>)
 800708c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708e:	f003 0302 	and.w	r3, r3, #2
 8007092:	2b00      	cmp	r3, #0
 8007094:	d0ee      	beq.n	8007074 <HAL_RCC_OscConfig+0x368>
 8007096:	e014      	b.n	80070c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007098:	f7fd ff32 	bl	8004f00 <HAL_GetTick>
 800709c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800709e:	e00a      	b.n	80070b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070a0:	f7fd ff2e 	bl	8004f00 <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d901      	bls.n	80070b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e0c1      	b.n	800723a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070b6:	4b40      	ldr	r3, [pc, #256]	; (80071b8 <HAL_RCC_OscConfig+0x4ac>)
 80070b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ba:	f003 0302 	and.w	r3, r3, #2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1ee      	bne.n	80070a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070c2:	7dfb      	ldrb	r3, [r7, #23]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d105      	bne.n	80070d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070c8:	4b3b      	ldr	r3, [pc, #236]	; (80071b8 <HAL_RCC_OscConfig+0x4ac>)
 80070ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070cc:	4a3a      	ldr	r2, [pc, #232]	; (80071b8 <HAL_RCC_OscConfig+0x4ac>)
 80070ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 80ad 	beq.w	8007238 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80070de:	4b36      	ldr	r3, [pc, #216]	; (80071b8 <HAL_RCC_OscConfig+0x4ac>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f003 030c 	and.w	r3, r3, #12
 80070e6:	2b08      	cmp	r3, #8
 80070e8:	d060      	beq.n	80071ac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d145      	bne.n	800717e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070f2:	4b33      	ldr	r3, [pc, #204]	; (80071c0 <HAL_RCC_OscConfig+0x4b4>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f8:	f7fd ff02 	bl	8004f00 <HAL_GetTick>
 80070fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070fe:	e008      	b.n	8007112 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007100:	f7fd fefe 	bl	8004f00 <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	2b02      	cmp	r3, #2
 800710c:	d901      	bls.n	8007112 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e093      	b.n	800723a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007112:	4b29      	ldr	r3, [pc, #164]	; (80071b8 <HAL_RCC_OscConfig+0x4ac>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1f0      	bne.n	8007100 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	69da      	ldr	r2, [r3, #28]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	431a      	orrs	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712c:	019b      	lsls	r3, r3, #6
 800712e:	431a      	orrs	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007134:	085b      	lsrs	r3, r3, #1
 8007136:	3b01      	subs	r3, #1
 8007138:	041b      	lsls	r3, r3, #16
 800713a:	431a      	orrs	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007140:	061b      	lsls	r3, r3, #24
 8007142:	431a      	orrs	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007148:	071b      	lsls	r3, r3, #28
 800714a:	491b      	ldr	r1, [pc, #108]	; (80071b8 <HAL_RCC_OscConfig+0x4ac>)
 800714c:	4313      	orrs	r3, r2
 800714e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007150:	4b1b      	ldr	r3, [pc, #108]	; (80071c0 <HAL_RCC_OscConfig+0x4b4>)
 8007152:	2201      	movs	r2, #1
 8007154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007156:	f7fd fed3 	bl	8004f00 <HAL_GetTick>
 800715a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800715c:	e008      	b.n	8007170 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800715e:	f7fd fecf 	bl	8004f00 <HAL_GetTick>
 8007162:	4602      	mov	r2, r0
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	2b02      	cmp	r3, #2
 800716a:	d901      	bls.n	8007170 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e064      	b.n	800723a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007170:	4b11      	ldr	r3, [pc, #68]	; (80071b8 <HAL_RCC_OscConfig+0x4ac>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d0f0      	beq.n	800715e <HAL_RCC_OscConfig+0x452>
 800717c:	e05c      	b.n	8007238 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800717e:	4b10      	ldr	r3, [pc, #64]	; (80071c0 <HAL_RCC_OscConfig+0x4b4>)
 8007180:	2200      	movs	r2, #0
 8007182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007184:	f7fd febc 	bl	8004f00 <HAL_GetTick>
 8007188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800718a:	e008      	b.n	800719e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800718c:	f7fd feb8 	bl	8004f00 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	2b02      	cmp	r3, #2
 8007198:	d901      	bls.n	800719e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e04d      	b.n	800723a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800719e:	4b06      	ldr	r3, [pc, #24]	; (80071b8 <HAL_RCC_OscConfig+0x4ac>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1f0      	bne.n	800718c <HAL_RCC_OscConfig+0x480>
 80071aa:	e045      	b.n	8007238 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d107      	bne.n	80071c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e040      	b.n	800723a <HAL_RCC_OscConfig+0x52e>
 80071b8:	40023800 	.word	0x40023800
 80071bc:	40007000 	.word	0x40007000
 80071c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80071c4:	4b1f      	ldr	r3, [pc, #124]	; (8007244 <HAL_RCC_OscConfig+0x538>)
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d030      	beq.n	8007234 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071dc:	429a      	cmp	r2, r3
 80071de:	d129      	bne.n	8007234 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d122      	bne.n	8007234 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80071f4:	4013      	ands	r3, r2
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d119      	bne.n	8007234 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720a:	085b      	lsrs	r3, r3, #1
 800720c:	3b01      	subs	r3, #1
 800720e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007210:	429a      	cmp	r2, r3
 8007212:	d10f      	bne.n	8007234 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007220:	429a      	cmp	r2, r3
 8007222:	d107      	bne.n	8007234 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007230:	429a      	cmp	r2, r3
 8007232:	d001      	beq.n	8007238 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e000      	b.n	800723a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	40023800 	.word	0x40023800

08007248 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d101      	bne.n	800725a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e07b      	b.n	8007352 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725e:	2b00      	cmp	r3, #0
 8007260:	d108      	bne.n	8007274 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800726a:	d009      	beq.n	8007280 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	61da      	str	r2, [r3, #28]
 8007272:	e005      	b.n	8007280 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d106      	bne.n	80072a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7fd fb3c 	bl	8004918 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2202      	movs	r2, #2
 80072a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80072c8:	431a      	orrs	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072d2:	431a      	orrs	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	f003 0302 	and.w	r3, r3, #2
 80072dc:	431a      	orrs	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	431a      	orrs	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072f0:	431a      	orrs	r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	69db      	ldr	r3, [r3, #28]
 80072f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072fa:	431a      	orrs	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a1b      	ldr	r3, [r3, #32]
 8007300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007304:	ea42 0103 	orr.w	r1, r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	0c1b      	lsrs	r3, r3, #16
 800731e:	f003 0104 	and.w	r1, r3, #4
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007326:	f003 0210 	and.w	r2, r3, #16
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	69da      	ldr	r2, [r3, #28]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007340:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3708      	adds	r7, #8
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b088      	sub	sp, #32
 800735e:	af00      	add	r7, sp, #0
 8007360:	60f8      	str	r0, [r7, #12]
 8007362:	60b9      	str	r1, [r7, #8]
 8007364:	603b      	str	r3, [r7, #0]
 8007366:	4613      	mov	r3, r2
 8007368:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800736a:	2300      	movs	r3, #0
 800736c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007374:	2b01      	cmp	r3, #1
 8007376:	d101      	bne.n	800737c <HAL_SPI_Transmit+0x22>
 8007378:	2302      	movs	r3, #2
 800737a:	e126      	b.n	80075ca <HAL_SPI_Transmit+0x270>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007384:	f7fd fdbc 	bl	8004f00 <HAL_GetTick>
 8007388:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800738a:	88fb      	ldrh	r3, [r7, #6]
 800738c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b01      	cmp	r3, #1
 8007398:	d002      	beq.n	80073a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800739a:	2302      	movs	r3, #2
 800739c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800739e:	e10b      	b.n	80075b8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d002      	beq.n	80073ac <HAL_SPI_Transmit+0x52>
 80073a6:	88fb      	ldrh	r3, [r7, #6]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d102      	bne.n	80073b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80073b0:	e102      	b.n	80075b8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2203      	movs	r2, #3
 80073b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	88fa      	ldrh	r2, [r7, #6]
 80073ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	88fa      	ldrh	r2, [r7, #6]
 80073d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073f8:	d10f      	bne.n	800741a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007408:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007418:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007424:	2b40      	cmp	r3, #64	; 0x40
 8007426:	d007      	beq.n	8007438 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007436:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007440:	d14b      	bne.n	80074da <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d002      	beq.n	8007450 <HAL_SPI_Transmit+0xf6>
 800744a:	8afb      	ldrh	r3, [r7, #22]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d13e      	bne.n	80074ce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007454:	881a      	ldrh	r2, [r3, #0]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007460:	1c9a      	adds	r2, r3, #2
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800746a:	b29b      	uxth	r3, r3
 800746c:	3b01      	subs	r3, #1
 800746e:	b29a      	uxth	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007474:	e02b      	b.n	80074ce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f003 0302 	and.w	r3, r3, #2
 8007480:	2b02      	cmp	r3, #2
 8007482:	d112      	bne.n	80074aa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007488:	881a      	ldrh	r2, [r3, #0]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007494:	1c9a      	adds	r2, r3, #2
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800749e:	b29b      	uxth	r3, r3
 80074a0:	3b01      	subs	r3, #1
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80074a8:	e011      	b.n	80074ce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074aa:	f7fd fd29 	bl	8004f00 <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	683a      	ldr	r2, [r7, #0]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d803      	bhi.n	80074c2 <HAL_SPI_Transmit+0x168>
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074c0:	d102      	bne.n	80074c8 <HAL_SPI_Transmit+0x16e>
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d102      	bne.n	80074ce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80074cc:	e074      	b.n	80075b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1ce      	bne.n	8007476 <HAL_SPI_Transmit+0x11c>
 80074d8:	e04c      	b.n	8007574 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d002      	beq.n	80074e8 <HAL_SPI_Transmit+0x18e>
 80074e2:	8afb      	ldrh	r3, [r7, #22]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d140      	bne.n	800756a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	330c      	adds	r3, #12
 80074f2:	7812      	ldrb	r2, [r2, #0]
 80074f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007504:	b29b      	uxth	r3, r3
 8007506:	3b01      	subs	r3, #1
 8007508:	b29a      	uxth	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800750e:	e02c      	b.n	800756a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f003 0302 	and.w	r3, r3, #2
 800751a:	2b02      	cmp	r3, #2
 800751c:	d113      	bne.n	8007546 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	330c      	adds	r3, #12
 8007528:	7812      	ldrb	r2, [r2, #0]
 800752a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007530:	1c5a      	adds	r2, r3, #1
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800753a:	b29b      	uxth	r3, r3
 800753c:	3b01      	subs	r3, #1
 800753e:	b29a      	uxth	r2, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	86da      	strh	r2, [r3, #54]	; 0x36
 8007544:	e011      	b.n	800756a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007546:	f7fd fcdb 	bl	8004f00 <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	429a      	cmp	r2, r3
 8007554:	d803      	bhi.n	800755e <HAL_SPI_Transmit+0x204>
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800755c:	d102      	bne.n	8007564 <HAL_SPI_Transmit+0x20a>
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d102      	bne.n	800756a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007564:	2303      	movs	r3, #3
 8007566:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007568:	e026      	b.n	80075b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800756e:	b29b      	uxth	r3, r3
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1cd      	bne.n	8007510 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007574:	69ba      	ldr	r2, [r7, #24]
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f000 fbcb 	bl	8007d14 <SPI_EndRxTxTransaction>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d002      	beq.n	800758a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2220      	movs	r2, #32
 8007588:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10a      	bne.n	80075a8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007592:	2300      	movs	r3, #0
 8007594:	613b      	str	r3, [r7, #16]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	613b      	str	r3, [r7, #16]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	613b      	str	r3, [r7, #16]
 80075a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d002      	beq.n	80075b6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	77fb      	strb	r3, [r7, #31]
 80075b4:	e000      	b.n	80075b8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80075b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80075c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3720      	adds	r7, #32
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b088      	sub	sp, #32
 80075d6:	af02      	add	r7, sp, #8
 80075d8:	60f8      	str	r0, [r7, #12]
 80075da:	60b9      	str	r1, [r7, #8]
 80075dc:	603b      	str	r3, [r7, #0]
 80075de:	4613      	mov	r3, r2
 80075e0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075ee:	d112      	bne.n	8007616 <HAL_SPI_Receive+0x44>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10e      	bne.n	8007616 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2204      	movs	r2, #4
 80075fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007600:	88fa      	ldrh	r2, [r7, #6]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	4613      	mov	r3, r2
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	68b9      	ldr	r1, [r7, #8]
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f000 f8f1 	bl	80077f4 <HAL_SPI_TransmitReceive>
 8007612:	4603      	mov	r3, r0
 8007614:	e0ea      	b.n	80077ec <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800761c:	2b01      	cmp	r3, #1
 800761e:	d101      	bne.n	8007624 <HAL_SPI_Receive+0x52>
 8007620:	2302      	movs	r3, #2
 8007622:	e0e3      	b.n	80077ec <HAL_SPI_Receive+0x21a>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800762c:	f7fd fc68 	bl	8004f00 <HAL_GetTick>
 8007630:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007638:	b2db      	uxtb	r3, r3
 800763a:	2b01      	cmp	r3, #1
 800763c:	d002      	beq.n	8007644 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800763e:	2302      	movs	r3, #2
 8007640:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007642:	e0ca      	b.n	80077da <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d002      	beq.n	8007650 <HAL_SPI_Receive+0x7e>
 800764a:	88fb      	ldrh	r3, [r7, #6]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d102      	bne.n	8007656 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007654:	e0c1      	b.n	80077da <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2204      	movs	r2, #4
 800765a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	88fa      	ldrh	r2, [r7, #6]
 800766e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	88fa      	ldrh	r2, [r7, #6]
 8007674:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800769c:	d10f      	bne.n	80076be <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80076bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c8:	2b40      	cmp	r3, #64	; 0x40
 80076ca:	d007      	beq.n	80076dc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d162      	bne.n	80077aa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80076e4:	e02e      	b.n	8007744 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f003 0301 	and.w	r3, r3, #1
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d115      	bne.n	8007720 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f103 020c 	add.w	r2, r3, #12
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007700:	7812      	ldrb	r2, [r2, #0]
 8007702:	b2d2      	uxtb	r2, r2
 8007704:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770a:	1c5a      	adds	r2, r3, #1
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007714:	b29b      	uxth	r3, r3
 8007716:	3b01      	subs	r3, #1
 8007718:	b29a      	uxth	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800771e:	e011      	b.n	8007744 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007720:	f7fd fbee 	bl	8004f00 <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	429a      	cmp	r2, r3
 800772e:	d803      	bhi.n	8007738 <HAL_SPI_Receive+0x166>
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007736:	d102      	bne.n	800773e <HAL_SPI_Receive+0x16c>
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d102      	bne.n	8007744 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007742:	e04a      	b.n	80077da <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007748:	b29b      	uxth	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1cb      	bne.n	80076e6 <HAL_SPI_Receive+0x114>
 800774e:	e031      	b.n	80077b4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b01      	cmp	r3, #1
 800775c:	d113      	bne.n	8007786 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68da      	ldr	r2, [r3, #12]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007768:	b292      	uxth	r2, r2
 800776a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007770:	1c9a      	adds	r2, r3, #2
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800777a:	b29b      	uxth	r3, r3
 800777c:	3b01      	subs	r3, #1
 800777e:	b29a      	uxth	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007784:	e011      	b.n	80077aa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007786:	f7fd fbbb 	bl	8004f00 <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	683a      	ldr	r2, [r7, #0]
 8007792:	429a      	cmp	r2, r3
 8007794:	d803      	bhi.n	800779e <HAL_SPI_Receive+0x1cc>
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800779c:	d102      	bne.n	80077a4 <HAL_SPI_Receive+0x1d2>
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d102      	bne.n	80077aa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80077a8:	e017      	b.n	80077da <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1cd      	bne.n	8007750 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077b4:	693a      	ldr	r2, [r7, #16]
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f000 fa45 	bl	8007c48 <SPI_EndRxTransaction>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d002      	beq.n	80077ca <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2220      	movs	r2, #32
 80077c8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d002      	beq.n	80077d8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	75fb      	strb	r3, [r7, #23]
 80077d6:	e000      	b.n	80077da <HAL_SPI_Receive+0x208>
  }

error :
 80077d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b08c      	sub	sp, #48	; 0x30
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
 8007800:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007802:	2301      	movs	r3, #1
 8007804:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007812:	2b01      	cmp	r3, #1
 8007814:	d101      	bne.n	800781a <HAL_SPI_TransmitReceive+0x26>
 8007816:	2302      	movs	r3, #2
 8007818:	e18a      	b.n	8007b30 <HAL_SPI_TransmitReceive+0x33c>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2201      	movs	r2, #1
 800781e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007822:	f7fd fb6d 	bl	8004f00 <HAL_GetTick>
 8007826:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800782e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007838:	887b      	ldrh	r3, [r7, #2]
 800783a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800783c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007840:	2b01      	cmp	r3, #1
 8007842:	d00f      	beq.n	8007864 <HAL_SPI_TransmitReceive+0x70>
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800784a:	d107      	bne.n	800785c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d103      	bne.n	800785c <HAL_SPI_TransmitReceive+0x68>
 8007854:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007858:	2b04      	cmp	r3, #4
 800785a:	d003      	beq.n	8007864 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800785c:	2302      	movs	r3, #2
 800785e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007862:	e15b      	b.n	8007b1c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d005      	beq.n	8007876 <HAL_SPI_TransmitReceive+0x82>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d002      	beq.n	8007876 <HAL_SPI_TransmitReceive+0x82>
 8007870:	887b      	ldrh	r3, [r7, #2]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d103      	bne.n	800787e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800787c:	e14e      	b.n	8007b1c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b04      	cmp	r3, #4
 8007888:	d003      	beq.n	8007892 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2205      	movs	r2, #5
 800788e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	887a      	ldrh	r2, [r7, #2]
 80078a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	887a      	ldrh	r2, [r7, #2]
 80078a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	887a      	ldrh	r2, [r7, #2]
 80078b4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	887a      	ldrh	r2, [r7, #2]
 80078ba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d2:	2b40      	cmp	r3, #64	; 0x40
 80078d4:	d007      	beq.n	80078e6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078ee:	d178      	bne.n	80079e2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d002      	beq.n	80078fe <HAL_SPI_TransmitReceive+0x10a>
 80078f8:	8b7b      	ldrh	r3, [r7, #26]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d166      	bne.n	80079cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007902:	881a      	ldrh	r2, [r3, #0]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790e:	1c9a      	adds	r2, r3, #2
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007918:	b29b      	uxth	r3, r3
 800791a:	3b01      	subs	r3, #1
 800791c:	b29a      	uxth	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007922:	e053      	b.n	80079cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f003 0302 	and.w	r3, r3, #2
 800792e:	2b02      	cmp	r3, #2
 8007930:	d11b      	bne.n	800796a <HAL_SPI_TransmitReceive+0x176>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007936:	b29b      	uxth	r3, r3
 8007938:	2b00      	cmp	r3, #0
 800793a:	d016      	beq.n	800796a <HAL_SPI_TransmitReceive+0x176>
 800793c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793e:	2b01      	cmp	r3, #1
 8007940:	d113      	bne.n	800796a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007946:	881a      	ldrh	r2, [r3, #0]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007952:	1c9a      	adds	r2, r3, #2
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800795c:	b29b      	uxth	r3, r3
 800795e:	3b01      	subs	r3, #1
 8007960:	b29a      	uxth	r2, r3
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007966:	2300      	movs	r3, #0
 8007968:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f003 0301 	and.w	r3, r3, #1
 8007974:	2b01      	cmp	r3, #1
 8007976:	d119      	bne.n	80079ac <HAL_SPI_TransmitReceive+0x1b8>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800797c:	b29b      	uxth	r3, r3
 800797e:	2b00      	cmp	r3, #0
 8007980:	d014      	beq.n	80079ac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68da      	ldr	r2, [r3, #12]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798c:	b292      	uxth	r2, r2
 800798e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007994:	1c9a      	adds	r2, r3, #2
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800799e:	b29b      	uxth	r3, r3
 80079a0:	3b01      	subs	r3, #1
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079a8:	2301      	movs	r3, #1
 80079aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80079ac:	f7fd faa8 	bl	8004f00 <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d807      	bhi.n	80079cc <HAL_SPI_TransmitReceive+0x1d8>
 80079bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079c2:	d003      	beq.n	80079cc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80079ca:	e0a7      	b.n	8007b1c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1a6      	bne.n	8007924 <HAL_SPI_TransmitReceive+0x130>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079da:	b29b      	uxth	r3, r3
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1a1      	bne.n	8007924 <HAL_SPI_TransmitReceive+0x130>
 80079e0:	e07c      	b.n	8007adc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d002      	beq.n	80079f0 <HAL_SPI_TransmitReceive+0x1fc>
 80079ea:	8b7b      	ldrh	r3, [r7, #26]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d16b      	bne.n	8007ac8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	330c      	adds	r3, #12
 80079fa:	7812      	ldrb	r2, [r2, #0]
 80079fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a02:	1c5a      	adds	r2, r3, #1
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a16:	e057      	b.n	8007ac8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	f003 0302 	and.w	r3, r3, #2
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d11c      	bne.n	8007a60 <HAL_SPI_TransmitReceive+0x26c>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d017      	beq.n	8007a60 <HAL_SPI_TransmitReceive+0x26c>
 8007a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d114      	bne.n	8007a60 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	330c      	adds	r3, #12
 8007a40:	7812      	ldrb	r2, [r2, #0]
 8007a42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a48:	1c5a      	adds	r2, r3, #1
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	3b01      	subs	r3, #1
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f003 0301 	and.w	r3, r3, #1
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d119      	bne.n	8007aa2 <HAL_SPI_TransmitReceive+0x2ae>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d014      	beq.n	8007aa2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68da      	ldr	r2, [r3, #12]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a82:	b2d2      	uxtb	r2, r2
 8007a84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8a:	1c5a      	adds	r2, r3, #1
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	3b01      	subs	r3, #1
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007aa2:	f7fd fa2d 	bl	8004f00 <HAL_GetTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d803      	bhi.n	8007aba <HAL_SPI_TransmitReceive+0x2c6>
 8007ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ab8:	d102      	bne.n	8007ac0 <HAL_SPI_TransmitReceive+0x2cc>
 8007aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d103      	bne.n	8007ac8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007ac6:	e029      	b.n	8007b1c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1a2      	bne.n	8007a18 <HAL_SPI_TransmitReceive+0x224>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d19d      	bne.n	8007a18 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ade:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 f917 	bl	8007d14 <SPI_EndRxTxTransaction>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d006      	beq.n	8007afa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2220      	movs	r2, #32
 8007af6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007af8:	e010      	b.n	8007b1c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10b      	bne.n	8007b1a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b02:	2300      	movs	r3, #0
 8007b04:	617b      	str	r3, [r7, #20]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	617b      	str	r3, [r7, #20]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	617b      	str	r3, [r7, #20]
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	e000      	b.n	8007b1c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007b1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3730      	adds	r7, #48	; 0x30
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b088      	sub	sp, #32
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	603b      	str	r3, [r7, #0]
 8007b44:	4613      	mov	r3, r2
 8007b46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b48:	f7fd f9da 	bl	8004f00 <HAL_GetTick>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b50:	1a9b      	subs	r3, r3, r2
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	4413      	add	r3, r2
 8007b56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b58:	f7fd f9d2 	bl	8004f00 <HAL_GetTick>
 8007b5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b5e:	4b39      	ldr	r3, [pc, #228]	; (8007c44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	015b      	lsls	r3, r3, #5
 8007b64:	0d1b      	lsrs	r3, r3, #20
 8007b66:	69fa      	ldr	r2, [r7, #28]
 8007b68:	fb02 f303 	mul.w	r3, r2, r3
 8007b6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b6e:	e054      	b.n	8007c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b76:	d050      	beq.n	8007c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b78:	f7fd f9c2 	bl	8004f00 <HAL_GetTick>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	69fa      	ldr	r2, [r7, #28]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d902      	bls.n	8007b8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d13d      	bne.n	8007c0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	685a      	ldr	r2, [r3, #4]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ba6:	d111      	bne.n	8007bcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bb0:	d004      	beq.n	8007bbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bba:	d107      	bne.n	8007bcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bd4:	d10f      	bne.n	8007bf6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bf4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e017      	b.n	8007c3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d101      	bne.n	8007c14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007c10:	2300      	movs	r3, #0
 8007c12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	3b01      	subs	r3, #1
 8007c18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	689a      	ldr	r2, [r3, #8]
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	4013      	ands	r3, r2
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	bf0c      	ite	eq
 8007c2a:	2301      	moveq	r3, #1
 8007c2c:	2300      	movne	r3, #0
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	461a      	mov	r2, r3
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d19b      	bne.n	8007b70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3720      	adds	r7, #32
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	200023dc 	.word	0x200023dc

08007c48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af02      	add	r7, sp, #8
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c5c:	d111      	bne.n	8007c82 <SPI_EndRxTransaction+0x3a>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c66:	d004      	beq.n	8007c72 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c70:	d107      	bne.n	8007c82 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c80:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c8a:	d12a      	bne.n	8007ce2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c94:	d012      	beq.n	8007cbc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	2180      	movs	r1, #128	; 0x80
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f7ff ff49 	bl	8007b38 <SPI_WaitFlagStateUntilTimeout>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d02d      	beq.n	8007d08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cb0:	f043 0220 	orr.w	r2, r3, #32
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e026      	b.n	8007d0a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	2101      	movs	r1, #1
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f7ff ff36 	bl	8007b38 <SPI_WaitFlagStateUntilTimeout>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d01a      	beq.n	8007d08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd6:	f043 0220 	orr.w	r2, r3, #32
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e013      	b.n	8007d0a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	2101      	movs	r1, #1
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f7ff ff23 	bl	8007b38 <SPI_WaitFlagStateUntilTimeout>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d007      	beq.n	8007d08 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cfc:	f043 0220 	orr.w	r2, r3, #32
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e000      	b.n	8007d0a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
	...

08007d14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b088      	sub	sp, #32
 8007d18:	af02      	add	r7, sp, #8
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007d20:	4b1b      	ldr	r3, [pc, #108]	; (8007d90 <SPI_EndRxTxTransaction+0x7c>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a1b      	ldr	r2, [pc, #108]	; (8007d94 <SPI_EndRxTxTransaction+0x80>)
 8007d26:	fba2 2303 	umull	r2, r3, r2, r3
 8007d2a:	0d5b      	lsrs	r3, r3, #21
 8007d2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d30:	fb02 f303 	mul.w	r3, r2, r3
 8007d34:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d3e:	d112      	bne.n	8007d66 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	9300      	str	r3, [sp, #0]
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	2200      	movs	r2, #0
 8007d48:	2180      	movs	r1, #128	; 0x80
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f7ff fef4 	bl	8007b38 <SPI_WaitFlagStateUntilTimeout>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d016      	beq.n	8007d84 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d5a:	f043 0220 	orr.w	r2, r3, #32
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e00f      	b.n	8007d86 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00a      	beq.n	8007d82 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d7c:	2b80      	cmp	r3, #128	; 0x80
 8007d7e:	d0f2      	beq.n	8007d66 <SPI_EndRxTxTransaction+0x52>
 8007d80:	e000      	b.n	8007d84 <SPI_EndRxTxTransaction+0x70>
        break;
 8007d82:	bf00      	nop
  }

  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3718      	adds	r7, #24
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	200023dc 	.word	0x200023dc
 8007d94:	165e9f81 	.word	0x165e9f81

08007d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d101      	bne.n	8007daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e041      	b.n	8007e2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d106      	bne.n	8007dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7fc fdf2 	bl	80049a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	3304      	adds	r3, #4
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	f000 fb42 	bl	8008460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
	...

08007e38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d001      	beq.n	8007e50 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e046      	b.n	8007ede <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2202      	movs	r2, #2
 8007e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a23      	ldr	r2, [pc, #140]	; (8007eec <HAL_TIM_Base_Start+0xb4>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d022      	beq.n	8007ea8 <HAL_TIM_Base_Start+0x70>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e6a:	d01d      	beq.n	8007ea8 <HAL_TIM_Base_Start+0x70>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a1f      	ldr	r2, [pc, #124]	; (8007ef0 <HAL_TIM_Base_Start+0xb8>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d018      	beq.n	8007ea8 <HAL_TIM_Base_Start+0x70>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a1e      	ldr	r2, [pc, #120]	; (8007ef4 <HAL_TIM_Base_Start+0xbc>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d013      	beq.n	8007ea8 <HAL_TIM_Base_Start+0x70>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a1c      	ldr	r2, [pc, #112]	; (8007ef8 <HAL_TIM_Base_Start+0xc0>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d00e      	beq.n	8007ea8 <HAL_TIM_Base_Start+0x70>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a1b      	ldr	r2, [pc, #108]	; (8007efc <HAL_TIM_Base_Start+0xc4>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d009      	beq.n	8007ea8 <HAL_TIM_Base_Start+0x70>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a19      	ldr	r2, [pc, #100]	; (8007f00 <HAL_TIM_Base_Start+0xc8>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d004      	beq.n	8007ea8 <HAL_TIM_Base_Start+0x70>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a18      	ldr	r2, [pc, #96]	; (8007f04 <HAL_TIM_Base_Start+0xcc>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d111      	bne.n	8007ecc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	f003 0307 	and.w	r3, r3, #7
 8007eb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2b06      	cmp	r3, #6
 8007eb8:	d010      	beq.n	8007edc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f042 0201 	orr.w	r2, r2, #1
 8007ec8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eca:	e007      	b.n	8007edc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f042 0201 	orr.w	r2, r2, #1
 8007eda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	40010000 	.word	0x40010000
 8007ef0:	40000400 	.word	0x40000400
 8007ef4:	40000800 	.word	0x40000800
 8007ef8:	40000c00 	.word	0x40000c00
 8007efc:	40010400 	.word	0x40010400
 8007f00:	40014000 	.word	0x40014000
 8007f04:	40001800 	.word	0x40001800

08007f08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e041      	b.n	8007f9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d106      	bne.n	8007f34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f839 	bl	8007fa6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2202      	movs	r2, #2
 8007f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	3304      	adds	r3, #4
 8007f44:	4619      	mov	r1, r3
 8007f46:	4610      	mov	r0, r2
 8007f48:	f000 fa8a 	bl	8008460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b083      	sub	sp, #12
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007fae:	bf00      	nop
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
	...

08007fbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d109      	bne.n	8007fe0 <HAL_TIM_PWM_Start+0x24>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	bf14      	ite	ne
 8007fd8:	2301      	movne	r3, #1
 8007fda:	2300      	moveq	r3, #0
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	e022      	b.n	8008026 <HAL_TIM_PWM_Start+0x6a>
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	2b04      	cmp	r3, #4
 8007fe4:	d109      	bne.n	8007ffa <HAL_TIM_PWM_Start+0x3e>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	bf14      	ite	ne
 8007ff2:	2301      	movne	r3, #1
 8007ff4:	2300      	moveq	r3, #0
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	e015      	b.n	8008026 <HAL_TIM_PWM_Start+0x6a>
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	2b08      	cmp	r3, #8
 8007ffe:	d109      	bne.n	8008014 <HAL_TIM_PWM_Start+0x58>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008006:	b2db      	uxtb	r3, r3
 8008008:	2b01      	cmp	r3, #1
 800800a:	bf14      	ite	ne
 800800c:	2301      	movne	r3, #1
 800800e:	2300      	moveq	r3, #0
 8008010:	b2db      	uxtb	r3, r3
 8008012:	e008      	b.n	8008026 <HAL_TIM_PWM_Start+0x6a>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b01      	cmp	r3, #1
 800801e:	bf14      	ite	ne
 8008020:	2301      	movne	r3, #1
 8008022:	2300      	moveq	r3, #0
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e07c      	b.n	8008128 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d104      	bne.n	800803e <HAL_TIM_PWM_Start+0x82>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2202      	movs	r2, #2
 8008038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800803c:	e013      	b.n	8008066 <HAL_TIM_PWM_Start+0xaa>
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2b04      	cmp	r3, #4
 8008042:	d104      	bne.n	800804e <HAL_TIM_PWM_Start+0x92>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2202      	movs	r2, #2
 8008048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800804c:	e00b      	b.n	8008066 <HAL_TIM_PWM_Start+0xaa>
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	2b08      	cmp	r3, #8
 8008052:	d104      	bne.n	800805e <HAL_TIM_PWM_Start+0xa2>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2202      	movs	r2, #2
 8008058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800805c:	e003      	b.n	8008066 <HAL_TIM_PWM_Start+0xaa>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2202      	movs	r2, #2
 8008062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2201      	movs	r2, #1
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	4618      	mov	r0, r3
 8008070:	f000 fce0 	bl	8008a34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a2d      	ldr	r2, [pc, #180]	; (8008130 <HAL_TIM_PWM_Start+0x174>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d004      	beq.n	8008088 <HAL_TIM_PWM_Start+0xcc>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a2c      	ldr	r2, [pc, #176]	; (8008134 <HAL_TIM_PWM_Start+0x178>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d101      	bne.n	800808c <HAL_TIM_PWM_Start+0xd0>
 8008088:	2301      	movs	r3, #1
 800808a:	e000      	b.n	800808e <HAL_TIM_PWM_Start+0xd2>
 800808c:	2300      	movs	r3, #0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d007      	beq.n	80080a2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a22      	ldr	r2, [pc, #136]	; (8008130 <HAL_TIM_PWM_Start+0x174>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d022      	beq.n	80080f2 <HAL_TIM_PWM_Start+0x136>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080b4:	d01d      	beq.n	80080f2 <HAL_TIM_PWM_Start+0x136>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a1f      	ldr	r2, [pc, #124]	; (8008138 <HAL_TIM_PWM_Start+0x17c>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d018      	beq.n	80080f2 <HAL_TIM_PWM_Start+0x136>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a1d      	ldr	r2, [pc, #116]	; (800813c <HAL_TIM_PWM_Start+0x180>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d013      	beq.n	80080f2 <HAL_TIM_PWM_Start+0x136>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a1c      	ldr	r2, [pc, #112]	; (8008140 <HAL_TIM_PWM_Start+0x184>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d00e      	beq.n	80080f2 <HAL_TIM_PWM_Start+0x136>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a16      	ldr	r2, [pc, #88]	; (8008134 <HAL_TIM_PWM_Start+0x178>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d009      	beq.n	80080f2 <HAL_TIM_PWM_Start+0x136>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a18      	ldr	r2, [pc, #96]	; (8008144 <HAL_TIM_PWM_Start+0x188>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d004      	beq.n	80080f2 <HAL_TIM_PWM_Start+0x136>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a16      	ldr	r2, [pc, #88]	; (8008148 <HAL_TIM_PWM_Start+0x18c>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d111      	bne.n	8008116 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	f003 0307 	and.w	r3, r3, #7
 80080fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2b06      	cmp	r3, #6
 8008102:	d010      	beq.n	8008126 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f042 0201 	orr.w	r2, r2, #1
 8008112:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008114:	e007      	b.n	8008126 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f042 0201 	orr.w	r2, r2, #1
 8008124:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	40010000 	.word	0x40010000
 8008134:	40010400 	.word	0x40010400
 8008138:	40000400 	.word	0x40000400
 800813c:	40000800 	.word	0x40000800
 8008140:	40000c00 	.word	0x40000c00
 8008144:	40014000 	.word	0x40014000
 8008148:	40001800 	.word	0x40001800

0800814c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008158:	2300      	movs	r3, #0
 800815a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008162:	2b01      	cmp	r3, #1
 8008164:	d101      	bne.n	800816a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008166:	2302      	movs	r3, #2
 8008168:	e0ae      	b.n	80082c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2201      	movs	r2, #1
 800816e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2b0c      	cmp	r3, #12
 8008176:	f200 809f 	bhi.w	80082b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800817a:	a201      	add	r2, pc, #4	; (adr r2, 8008180 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800817c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008180:	080081b5 	.word	0x080081b5
 8008184:	080082b9 	.word	0x080082b9
 8008188:	080082b9 	.word	0x080082b9
 800818c:	080082b9 	.word	0x080082b9
 8008190:	080081f5 	.word	0x080081f5
 8008194:	080082b9 	.word	0x080082b9
 8008198:	080082b9 	.word	0x080082b9
 800819c:	080082b9 	.word	0x080082b9
 80081a0:	08008237 	.word	0x08008237
 80081a4:	080082b9 	.word	0x080082b9
 80081a8:	080082b9 	.word	0x080082b9
 80081ac:	080082b9 	.word	0x080082b9
 80081b0:	08008277 	.word	0x08008277
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68b9      	ldr	r1, [r7, #8]
 80081ba:	4618      	mov	r0, r3
 80081bc:	f000 f9f0 	bl	80085a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	699a      	ldr	r2, [r3, #24]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f042 0208 	orr.w	r2, r2, #8
 80081ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	699a      	ldr	r2, [r3, #24]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f022 0204 	bic.w	r2, r2, #4
 80081de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	6999      	ldr	r1, [r3, #24]
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	691a      	ldr	r2, [r3, #16]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	430a      	orrs	r2, r1
 80081f0:	619a      	str	r2, [r3, #24]
      break;
 80081f2:	e064      	b.n	80082be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68b9      	ldr	r1, [r7, #8]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 fa40 	bl	8008680 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	699a      	ldr	r2, [r3, #24]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800820e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	699a      	ldr	r2, [r3, #24]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800821e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6999      	ldr	r1, [r3, #24]
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	021a      	lsls	r2, r3, #8
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	430a      	orrs	r2, r1
 8008232:	619a      	str	r2, [r3, #24]
      break;
 8008234:	e043      	b.n	80082be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68b9      	ldr	r1, [r7, #8]
 800823c:	4618      	mov	r0, r3
 800823e:	f000 fa95 	bl	800876c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	69da      	ldr	r2, [r3, #28]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f042 0208 	orr.w	r2, r2, #8
 8008250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	69da      	ldr	r2, [r3, #28]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f022 0204 	bic.w	r2, r2, #4
 8008260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	69d9      	ldr	r1, [r3, #28]
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	691a      	ldr	r2, [r3, #16]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	430a      	orrs	r2, r1
 8008272:	61da      	str	r2, [r3, #28]
      break;
 8008274:	e023      	b.n	80082be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68b9      	ldr	r1, [r7, #8]
 800827c:	4618      	mov	r0, r3
 800827e:	f000 fae9 	bl	8008854 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	69da      	ldr	r2, [r3, #28]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	69da      	ldr	r2, [r3, #28]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	69d9      	ldr	r1, [r3, #28]
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	021a      	lsls	r2, r3, #8
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	430a      	orrs	r2, r1
 80082b4:	61da      	str	r2, [r3, #28]
      break;
 80082b6:	e002      	b.n	80082be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	75fb      	strb	r3, [r7, #23]
      break;
 80082bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3718      	adds	r7, #24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d101      	bne.n	80082ec <HAL_TIM_ConfigClockSource+0x1c>
 80082e8:	2302      	movs	r3, #2
 80082ea:	e0b4      	b.n	8008456 <HAL_TIM_ConfigClockSource+0x186>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2202      	movs	r2, #2
 80082f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800830a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008312:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008324:	d03e      	beq.n	80083a4 <HAL_TIM_ConfigClockSource+0xd4>
 8008326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800832a:	f200 8087 	bhi.w	800843c <HAL_TIM_ConfigClockSource+0x16c>
 800832e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008332:	f000 8086 	beq.w	8008442 <HAL_TIM_ConfigClockSource+0x172>
 8008336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800833a:	d87f      	bhi.n	800843c <HAL_TIM_ConfigClockSource+0x16c>
 800833c:	2b70      	cmp	r3, #112	; 0x70
 800833e:	d01a      	beq.n	8008376 <HAL_TIM_ConfigClockSource+0xa6>
 8008340:	2b70      	cmp	r3, #112	; 0x70
 8008342:	d87b      	bhi.n	800843c <HAL_TIM_ConfigClockSource+0x16c>
 8008344:	2b60      	cmp	r3, #96	; 0x60
 8008346:	d050      	beq.n	80083ea <HAL_TIM_ConfigClockSource+0x11a>
 8008348:	2b60      	cmp	r3, #96	; 0x60
 800834a:	d877      	bhi.n	800843c <HAL_TIM_ConfigClockSource+0x16c>
 800834c:	2b50      	cmp	r3, #80	; 0x50
 800834e:	d03c      	beq.n	80083ca <HAL_TIM_ConfigClockSource+0xfa>
 8008350:	2b50      	cmp	r3, #80	; 0x50
 8008352:	d873      	bhi.n	800843c <HAL_TIM_ConfigClockSource+0x16c>
 8008354:	2b40      	cmp	r3, #64	; 0x40
 8008356:	d058      	beq.n	800840a <HAL_TIM_ConfigClockSource+0x13a>
 8008358:	2b40      	cmp	r3, #64	; 0x40
 800835a:	d86f      	bhi.n	800843c <HAL_TIM_ConfigClockSource+0x16c>
 800835c:	2b30      	cmp	r3, #48	; 0x30
 800835e:	d064      	beq.n	800842a <HAL_TIM_ConfigClockSource+0x15a>
 8008360:	2b30      	cmp	r3, #48	; 0x30
 8008362:	d86b      	bhi.n	800843c <HAL_TIM_ConfigClockSource+0x16c>
 8008364:	2b20      	cmp	r3, #32
 8008366:	d060      	beq.n	800842a <HAL_TIM_ConfigClockSource+0x15a>
 8008368:	2b20      	cmp	r3, #32
 800836a:	d867      	bhi.n	800843c <HAL_TIM_ConfigClockSource+0x16c>
 800836c:	2b00      	cmp	r3, #0
 800836e:	d05c      	beq.n	800842a <HAL_TIM_ConfigClockSource+0x15a>
 8008370:	2b10      	cmp	r3, #16
 8008372:	d05a      	beq.n	800842a <HAL_TIM_ConfigClockSource+0x15a>
 8008374:	e062      	b.n	800843c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6818      	ldr	r0, [r3, #0]
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	6899      	ldr	r1, [r3, #8]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	685a      	ldr	r2, [r3, #4]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	f000 fb35 	bl	80089f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008398:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	609a      	str	r2, [r3, #8]
      break;
 80083a2:	e04f      	b.n	8008444 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6818      	ldr	r0, [r3, #0]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	6899      	ldr	r1, [r3, #8]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	685a      	ldr	r2, [r3, #4]
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	f000 fb1e 	bl	80089f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	689a      	ldr	r2, [r3, #8]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083c6:	609a      	str	r2, [r3, #8]
      break;
 80083c8:	e03c      	b.n	8008444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6818      	ldr	r0, [r3, #0]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	6859      	ldr	r1, [r3, #4]
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	461a      	mov	r2, r3
 80083d8:	f000 fa92 	bl	8008900 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2150      	movs	r1, #80	; 0x50
 80083e2:	4618      	mov	r0, r3
 80083e4:	f000 faeb 	bl	80089be <TIM_ITRx_SetConfig>
      break;
 80083e8:	e02c      	b.n	8008444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6818      	ldr	r0, [r3, #0]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	6859      	ldr	r1, [r3, #4]
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	461a      	mov	r2, r3
 80083f8:	f000 fab1 	bl	800895e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2160      	movs	r1, #96	; 0x60
 8008402:	4618      	mov	r0, r3
 8008404:	f000 fadb 	bl	80089be <TIM_ITRx_SetConfig>
      break;
 8008408:	e01c      	b.n	8008444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6818      	ldr	r0, [r3, #0]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	6859      	ldr	r1, [r3, #4]
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	461a      	mov	r2, r3
 8008418:	f000 fa72 	bl	8008900 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2140      	movs	r1, #64	; 0x40
 8008422:	4618      	mov	r0, r3
 8008424:	f000 facb 	bl	80089be <TIM_ITRx_SetConfig>
      break;
 8008428:	e00c      	b.n	8008444 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4619      	mov	r1, r3
 8008434:	4610      	mov	r0, r2
 8008436:	f000 fac2 	bl	80089be <TIM_ITRx_SetConfig>
      break;
 800843a:	e003      	b.n	8008444 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	73fb      	strb	r3, [r7, #15]
      break;
 8008440:	e000      	b.n	8008444 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008442:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008454:	7bfb      	ldrb	r3, [r7, #15]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
	...

08008460 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a40      	ldr	r2, [pc, #256]	; (8008574 <TIM_Base_SetConfig+0x114>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d013      	beq.n	80084a0 <TIM_Base_SetConfig+0x40>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800847e:	d00f      	beq.n	80084a0 <TIM_Base_SetConfig+0x40>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a3d      	ldr	r2, [pc, #244]	; (8008578 <TIM_Base_SetConfig+0x118>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d00b      	beq.n	80084a0 <TIM_Base_SetConfig+0x40>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a3c      	ldr	r2, [pc, #240]	; (800857c <TIM_Base_SetConfig+0x11c>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d007      	beq.n	80084a0 <TIM_Base_SetConfig+0x40>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a3b      	ldr	r2, [pc, #236]	; (8008580 <TIM_Base_SetConfig+0x120>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d003      	beq.n	80084a0 <TIM_Base_SetConfig+0x40>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a3a      	ldr	r2, [pc, #232]	; (8008584 <TIM_Base_SetConfig+0x124>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d108      	bne.n	80084b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a2f      	ldr	r2, [pc, #188]	; (8008574 <TIM_Base_SetConfig+0x114>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d02b      	beq.n	8008512 <TIM_Base_SetConfig+0xb2>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084c0:	d027      	beq.n	8008512 <TIM_Base_SetConfig+0xb2>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a2c      	ldr	r2, [pc, #176]	; (8008578 <TIM_Base_SetConfig+0x118>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d023      	beq.n	8008512 <TIM_Base_SetConfig+0xb2>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a2b      	ldr	r2, [pc, #172]	; (800857c <TIM_Base_SetConfig+0x11c>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d01f      	beq.n	8008512 <TIM_Base_SetConfig+0xb2>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a2a      	ldr	r2, [pc, #168]	; (8008580 <TIM_Base_SetConfig+0x120>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d01b      	beq.n	8008512 <TIM_Base_SetConfig+0xb2>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a29      	ldr	r2, [pc, #164]	; (8008584 <TIM_Base_SetConfig+0x124>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d017      	beq.n	8008512 <TIM_Base_SetConfig+0xb2>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a28      	ldr	r2, [pc, #160]	; (8008588 <TIM_Base_SetConfig+0x128>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d013      	beq.n	8008512 <TIM_Base_SetConfig+0xb2>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a27      	ldr	r2, [pc, #156]	; (800858c <TIM_Base_SetConfig+0x12c>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d00f      	beq.n	8008512 <TIM_Base_SetConfig+0xb2>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a26      	ldr	r2, [pc, #152]	; (8008590 <TIM_Base_SetConfig+0x130>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d00b      	beq.n	8008512 <TIM_Base_SetConfig+0xb2>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a25      	ldr	r2, [pc, #148]	; (8008594 <TIM_Base_SetConfig+0x134>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d007      	beq.n	8008512 <TIM_Base_SetConfig+0xb2>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a24      	ldr	r2, [pc, #144]	; (8008598 <TIM_Base_SetConfig+0x138>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d003      	beq.n	8008512 <TIM_Base_SetConfig+0xb2>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a23      	ldr	r2, [pc, #140]	; (800859c <TIM_Base_SetConfig+0x13c>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d108      	bne.n	8008524 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	4313      	orrs	r3, r2
 8008522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	695b      	ldr	r3, [r3, #20]
 800852e:	4313      	orrs	r3, r2
 8008530:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	689a      	ldr	r2, [r3, #8]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a0a      	ldr	r2, [pc, #40]	; (8008574 <TIM_Base_SetConfig+0x114>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d003      	beq.n	8008558 <TIM_Base_SetConfig+0xf8>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a0c      	ldr	r2, [pc, #48]	; (8008584 <TIM_Base_SetConfig+0x124>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d103      	bne.n	8008560 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	691a      	ldr	r2, [r3, #16]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	615a      	str	r2, [r3, #20]
}
 8008566:	bf00      	nop
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	40010000 	.word	0x40010000
 8008578:	40000400 	.word	0x40000400
 800857c:	40000800 	.word	0x40000800
 8008580:	40000c00 	.word	0x40000c00
 8008584:	40010400 	.word	0x40010400
 8008588:	40014000 	.word	0x40014000
 800858c:	40014400 	.word	0x40014400
 8008590:	40014800 	.word	0x40014800
 8008594:	40001800 	.word	0x40001800
 8008598:	40001c00 	.word	0x40001c00
 800859c:	40002000 	.word	0x40002000

080085a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b087      	sub	sp, #28
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a1b      	ldr	r3, [r3, #32]
 80085ae:	f023 0201 	bic.w	r2, r3, #1
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a1b      	ldr	r3, [r3, #32]
 80085ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f023 0303 	bic.w	r3, r3, #3
 80085d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	4313      	orrs	r3, r2
 80085e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	f023 0302 	bic.w	r3, r3, #2
 80085e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a20      	ldr	r2, [pc, #128]	; (8008678 <TIM_OC1_SetConfig+0xd8>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d003      	beq.n	8008604 <TIM_OC1_SetConfig+0x64>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a1f      	ldr	r2, [pc, #124]	; (800867c <TIM_OC1_SetConfig+0xdc>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d10c      	bne.n	800861e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	f023 0308 	bic.w	r3, r3, #8
 800860a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	697a      	ldr	r2, [r7, #20]
 8008612:	4313      	orrs	r3, r2
 8008614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	f023 0304 	bic.w	r3, r3, #4
 800861c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a15      	ldr	r2, [pc, #84]	; (8008678 <TIM_OC1_SetConfig+0xd8>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d003      	beq.n	800862e <TIM_OC1_SetConfig+0x8e>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a14      	ldr	r2, [pc, #80]	; (800867c <TIM_OC1_SetConfig+0xdc>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d111      	bne.n	8008652 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800863c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	695b      	ldr	r3, [r3, #20]
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	4313      	orrs	r3, r2
 8008646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	693a      	ldr	r2, [r7, #16]
 800864e:	4313      	orrs	r3, r2
 8008650:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	693a      	ldr	r2, [r7, #16]
 8008656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	685a      	ldr	r2, [r3, #4]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	697a      	ldr	r2, [r7, #20]
 800866a:	621a      	str	r2, [r3, #32]
}
 800866c:	bf00      	nop
 800866e:	371c      	adds	r7, #28
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr
 8008678:	40010000 	.word	0x40010000
 800867c:	40010400 	.word	0x40010400

08008680 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008680:	b480      	push	{r7}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	f023 0210 	bic.w	r2, r3, #16
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a1b      	ldr	r3, [r3, #32]
 800869a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	021b      	lsls	r3, r3, #8
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	f023 0320 	bic.w	r3, r3, #32
 80086ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	011b      	lsls	r3, r3, #4
 80086d2:	697a      	ldr	r2, [r7, #20]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a22      	ldr	r2, [pc, #136]	; (8008764 <TIM_OC2_SetConfig+0xe4>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d003      	beq.n	80086e8 <TIM_OC2_SetConfig+0x68>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a21      	ldr	r2, [pc, #132]	; (8008768 <TIM_OC2_SetConfig+0xe8>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d10d      	bne.n	8008704 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	011b      	lsls	r3, r3, #4
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008702:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a17      	ldr	r2, [pc, #92]	; (8008764 <TIM_OC2_SetConfig+0xe4>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d003      	beq.n	8008714 <TIM_OC2_SetConfig+0x94>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a16      	ldr	r2, [pc, #88]	; (8008768 <TIM_OC2_SetConfig+0xe8>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d113      	bne.n	800873c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800871a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008722:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	695b      	ldr	r3, [r3, #20]
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	693a      	ldr	r2, [r7, #16]
 800872c:	4313      	orrs	r3, r2
 800872e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	693a      	ldr	r2, [r7, #16]
 8008738:	4313      	orrs	r3, r2
 800873a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	693a      	ldr	r2, [r7, #16]
 8008740:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	685a      	ldr	r2, [r3, #4]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	621a      	str	r2, [r3, #32]
}
 8008756:	bf00      	nop
 8008758:	371c      	adds	r7, #28
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	40010000 	.word	0x40010000
 8008768:	40010400 	.word	0x40010400

0800876c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800876c:	b480      	push	{r7}
 800876e:	b087      	sub	sp, #28
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a1b      	ldr	r3, [r3, #32]
 800877a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a1b      	ldr	r3, [r3, #32]
 8008786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	69db      	ldr	r3, [r3, #28]
 8008792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800879a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f023 0303 	bic.w	r3, r3, #3
 80087a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	021b      	lsls	r3, r3, #8
 80087bc:	697a      	ldr	r2, [r7, #20]
 80087be:	4313      	orrs	r3, r2
 80087c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a21      	ldr	r2, [pc, #132]	; (800884c <TIM_OC3_SetConfig+0xe0>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d003      	beq.n	80087d2 <TIM_OC3_SetConfig+0x66>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a20      	ldr	r2, [pc, #128]	; (8008850 <TIM_OC3_SetConfig+0xe4>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d10d      	bne.n	80087ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	021b      	lsls	r3, r3, #8
 80087e0:	697a      	ldr	r2, [r7, #20]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a16      	ldr	r2, [pc, #88]	; (800884c <TIM_OC3_SetConfig+0xe0>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d003      	beq.n	80087fe <TIM_OC3_SetConfig+0x92>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a15      	ldr	r2, [pc, #84]	; (8008850 <TIM_OC3_SetConfig+0xe4>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d113      	bne.n	8008826 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800880c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	011b      	lsls	r3, r3, #4
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	4313      	orrs	r3, r2
 8008818:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	011b      	lsls	r3, r3, #4
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	4313      	orrs	r3, r2
 8008824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	693a      	ldr	r2, [r7, #16]
 800882a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	685a      	ldr	r2, [r3, #4]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	697a      	ldr	r2, [r7, #20]
 800883e:	621a      	str	r2, [r3, #32]
}
 8008840:	bf00      	nop
 8008842:	371c      	adds	r7, #28
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	40010000 	.word	0x40010000
 8008850:	40010400 	.word	0x40010400

08008854 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008854:	b480      	push	{r7}
 8008856:	b087      	sub	sp, #28
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a1b      	ldr	r3, [r3, #32]
 8008862:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	69db      	ldr	r3, [r3, #28]
 800887a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800888a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	021b      	lsls	r3, r3, #8
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	4313      	orrs	r3, r2
 8008896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800889e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	031b      	lsls	r3, r3, #12
 80088a6:	693a      	ldr	r2, [r7, #16]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a12      	ldr	r2, [pc, #72]	; (80088f8 <TIM_OC4_SetConfig+0xa4>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d003      	beq.n	80088bc <TIM_OC4_SetConfig+0x68>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a11      	ldr	r2, [pc, #68]	; (80088fc <TIM_OC4_SetConfig+0xa8>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d109      	bne.n	80088d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	695b      	ldr	r3, [r3, #20]
 80088c8:	019b      	lsls	r3, r3, #6
 80088ca:	697a      	ldr	r2, [r7, #20]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	685a      	ldr	r2, [r3, #4]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	621a      	str	r2, [r3, #32]
}
 80088ea:	bf00      	nop
 80088ec:	371c      	adds	r7, #28
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	40010000 	.word	0x40010000
 80088fc:	40010400 	.word	0x40010400

08008900 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008900:	b480      	push	{r7}
 8008902:	b087      	sub	sp, #28
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6a1b      	ldr	r3, [r3, #32]
 8008910:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6a1b      	ldr	r3, [r3, #32]
 8008916:	f023 0201 	bic.w	r2, r3, #1
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800892a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	011b      	lsls	r3, r3, #4
 8008930:	693a      	ldr	r2, [r7, #16]
 8008932:	4313      	orrs	r3, r2
 8008934:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	f023 030a 	bic.w	r3, r3, #10
 800893c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800893e:	697a      	ldr	r2, [r7, #20]
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	4313      	orrs	r3, r2
 8008944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	621a      	str	r2, [r3, #32]
}
 8008952:	bf00      	nop
 8008954:	371c      	adds	r7, #28
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800895e:	b480      	push	{r7}
 8008960:	b087      	sub	sp, #28
 8008962:	af00      	add	r7, sp, #0
 8008964:	60f8      	str	r0, [r7, #12]
 8008966:	60b9      	str	r1, [r7, #8]
 8008968:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6a1b      	ldr	r3, [r3, #32]
 800896e:	f023 0210 	bic.w	r2, r3, #16
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	699b      	ldr	r3, [r3, #24]
 800897a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6a1b      	ldr	r3, [r3, #32]
 8008980:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008988:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	031b      	lsls	r3, r3, #12
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	4313      	orrs	r3, r2
 8008992:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800899a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	011b      	lsls	r3, r3, #4
 80089a0:	693a      	ldr	r2, [r7, #16]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	697a      	ldr	r2, [r7, #20]
 80089aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	693a      	ldr	r2, [r7, #16]
 80089b0:	621a      	str	r2, [r3, #32]
}
 80089b2:	bf00      	nop
 80089b4:	371c      	adds	r7, #28
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr

080089be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089be:	b480      	push	{r7}
 80089c0:	b085      	sub	sp, #20
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
 80089c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089d6:	683a      	ldr	r2, [r7, #0]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	4313      	orrs	r3, r2
 80089dc:	f043 0307 	orr.w	r3, r3, #7
 80089e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	609a      	str	r2, [r3, #8]
}
 80089e8:	bf00      	nop
 80089ea:	3714      	adds	r7, #20
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b087      	sub	sp, #28
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
 8008a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	021a      	lsls	r2, r3, #8
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	431a      	orrs	r2, r3
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	697a      	ldr	r2, [r7, #20]
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	609a      	str	r2, [r3, #8]
}
 8008a28:	bf00      	nop
 8008a2a:	371c      	adds	r7, #28
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b087      	sub	sp, #28
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	f003 031f 	and.w	r3, r3, #31
 8008a46:	2201      	movs	r2, #1
 8008a48:	fa02 f303 	lsl.w	r3, r2, r3
 8008a4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6a1a      	ldr	r2, [r3, #32]
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	43db      	mvns	r3, r3
 8008a56:	401a      	ands	r2, r3
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6a1a      	ldr	r2, [r3, #32]
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	f003 031f 	and.w	r3, r3, #31
 8008a66:	6879      	ldr	r1, [r7, #4]
 8008a68:	fa01 f303 	lsl.w	r3, r1, r3
 8008a6c:	431a      	orrs	r2, r3
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	621a      	str	r2, [r3, #32]
}
 8008a72:	bf00      	nop
 8008a74:	371c      	adds	r7, #28
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
	...

08008a80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d101      	bne.n	8008a98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a94:	2302      	movs	r3, #2
 8008a96:	e05a      	b.n	8008b4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008abe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a21      	ldr	r2, [pc, #132]	; (8008b5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d022      	beq.n	8008b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ae4:	d01d      	beq.n	8008b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a1d      	ldr	r2, [pc, #116]	; (8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d018      	beq.n	8008b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a1b      	ldr	r2, [pc, #108]	; (8008b64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d013      	beq.n	8008b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a1a      	ldr	r2, [pc, #104]	; (8008b68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d00e      	beq.n	8008b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a18      	ldr	r2, [pc, #96]	; (8008b6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d009      	beq.n	8008b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a17      	ldr	r2, [pc, #92]	; (8008b70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d004      	beq.n	8008b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a15      	ldr	r2, [pc, #84]	; (8008b74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d10c      	bne.n	8008b3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	68ba      	ldr	r2, [r7, #8]
 8008b3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3714      	adds	r7, #20
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	40010000 	.word	0x40010000
 8008b60:	40000400 	.word	0x40000400
 8008b64:	40000800 	.word	0x40000800
 8008b68:	40000c00 	.word	0x40000c00
 8008b6c:	40010400 	.word	0x40010400
 8008b70:	40014000 	.word	0x40014000
 8008b74:	40001800 	.word	0x40001800

08008b78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008b82:	2300      	movs	r3, #0
 8008b84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d101      	bne.n	8008b94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008b90:	2302      	movs	r3, #2
 8008b92:	e03d      	b.n	8008c10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	695b      	ldr	r3, [r3, #20]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	69db      	ldr	r3, [r3, #28]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3714      	adds	r7, #20
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d101      	bne.n	8008c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e03f      	b.n	8008cae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d106      	bne.n	8008c48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f7fb ff5a 	bl	8004afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2224      	movs	r2, #36	; 0x24
 8008c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68da      	ldr	r2, [r3, #12]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f929 	bl	8008eb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	691a      	ldr	r2, [r3, #16]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	695a      	ldr	r2, [r3, #20]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68da      	ldr	r2, [r3, #12]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2220      	movs	r2, #32
 8008ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2220      	movs	r2, #32
 8008ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b08a      	sub	sp, #40	; 0x28
 8008cba:	af02      	add	r7, sp, #8
 8008cbc:	60f8      	str	r0, [r7, #12]
 8008cbe:	60b9      	str	r1, [r7, #8]
 8008cc0:	603b      	str	r3, [r7, #0]
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	2b20      	cmp	r3, #32
 8008cd4:	d17c      	bne.n	8008dd0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d002      	beq.n	8008ce2 <HAL_UART_Transmit+0x2c>
 8008cdc:	88fb      	ldrh	r3, [r7, #6]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d101      	bne.n	8008ce6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e075      	b.n	8008dd2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d101      	bne.n	8008cf4 <HAL_UART_Transmit+0x3e>
 8008cf0:	2302      	movs	r3, #2
 8008cf2:	e06e      	b.n	8008dd2 <HAL_UART_Transmit+0x11c>
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2221      	movs	r2, #33	; 0x21
 8008d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d0a:	f7fc f8f9 	bl	8004f00 <HAL_GetTick>
 8008d0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	88fa      	ldrh	r2, [r7, #6]
 8008d14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	88fa      	ldrh	r2, [r7, #6]
 8008d1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d24:	d108      	bne.n	8008d38 <HAL_UART_Transmit+0x82>
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	691b      	ldr	r3, [r3, #16]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d104      	bne.n	8008d38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	61bb      	str	r3, [r7, #24]
 8008d36:	e003      	b.n	8008d40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008d48:	e02a      	b.n	8008da0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	2200      	movs	r2, #0
 8008d52:	2180      	movs	r1, #128	; 0x80
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f000 f840 	bl	8008dda <UART_WaitOnFlagUntilTimeout>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d001      	beq.n	8008d64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008d60:	2303      	movs	r3, #3
 8008d62:	e036      	b.n	8008dd2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10b      	bne.n	8008d82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	881b      	ldrh	r3, [r3, #0]
 8008d6e:	461a      	mov	r2, r3
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	3302      	adds	r3, #2
 8008d7e:	61bb      	str	r3, [r7, #24]
 8008d80:	e007      	b.n	8008d92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	781a      	ldrb	r2, [r3, #0]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d1cf      	bne.n	8008d4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	9300      	str	r3, [sp, #0]
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	2200      	movs	r2, #0
 8008db2:	2140      	movs	r1, #64	; 0x40
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f000 f810 	bl	8008dda <UART_WaitOnFlagUntilTimeout>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d001      	beq.n	8008dc4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008dc0:	2303      	movs	r3, #3
 8008dc2:	e006      	b.n	8008dd2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2220      	movs	r2, #32
 8008dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	e000      	b.n	8008dd2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008dd0:	2302      	movs	r3, #2
  }
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3720      	adds	r7, #32
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b090      	sub	sp, #64	; 0x40
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	60f8      	str	r0, [r7, #12]
 8008de2:	60b9      	str	r1, [r7, #8]
 8008de4:	603b      	str	r3, [r7, #0]
 8008de6:	4613      	mov	r3, r2
 8008de8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dea:	e050      	b.n	8008e8e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008df2:	d04c      	beq.n	8008e8e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d007      	beq.n	8008e0a <UART_WaitOnFlagUntilTimeout+0x30>
 8008dfa:	f7fc f881 	bl	8004f00 <HAL_GetTick>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	1ad3      	subs	r3, r2, r3
 8008e04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d241      	bcs.n	8008e8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	330c      	adds	r3, #12
 8008e10:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e14:	e853 3f00 	ldrex	r3, [r3]
 8008e18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	330c      	adds	r3, #12
 8008e28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e2a:	637a      	str	r2, [r7, #52]	; 0x34
 8008e2c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e32:	e841 2300 	strex	r3, r2, [r1]
 8008e36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1e5      	bne.n	8008e0a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	3314      	adds	r3, #20
 8008e44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	e853 3f00 	ldrex	r3, [r3]
 8008e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	f023 0301 	bic.w	r3, r3, #1
 8008e54:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	3314      	adds	r3, #20
 8008e5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e5e:	623a      	str	r2, [r7, #32]
 8008e60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e62:	69f9      	ldr	r1, [r7, #28]
 8008e64:	6a3a      	ldr	r2, [r7, #32]
 8008e66:	e841 2300 	strex	r3, r2, [r1]
 8008e6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1e5      	bne.n	8008e3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2220      	movs	r2, #32
 8008e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2220      	movs	r2, #32
 8008e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	e00f      	b.n	8008eae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	4013      	ands	r3, r2
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	bf0c      	ite	eq
 8008e9e:	2301      	moveq	r3, #1
 8008ea0:	2300      	movne	r3, #0
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	79fb      	ldrb	r3, [r7, #7]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d09f      	beq.n	8008dec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3740      	adds	r7, #64	; 0x40
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
	...

08008eb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ebc:	b0c0      	sub	sp, #256	; 0x100
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ed4:	68d9      	ldr	r1, [r3, #12]
 8008ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	ea40 0301 	orr.w	r3, r0, r1
 8008ee0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ee6:	689a      	ldr	r2, [r3, #8]
 8008ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	431a      	orrs	r2, r3
 8008ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ef4:	695b      	ldr	r3, [r3, #20]
 8008ef6:	431a      	orrs	r2, r3
 8008ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008efc:	69db      	ldr	r3, [r3, #28]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008f10:	f021 010c 	bic.w	r1, r1, #12
 8008f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f1e:	430b      	orrs	r3, r1
 8008f20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	695b      	ldr	r3, [r3, #20]
 8008f2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f32:	6999      	ldr	r1, [r3, #24]
 8008f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	ea40 0301 	orr.w	r3, r0, r1
 8008f3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	4b8f      	ldr	r3, [pc, #572]	; (8009184 <UART_SetConfig+0x2cc>)
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d005      	beq.n	8008f58 <UART_SetConfig+0xa0>
 8008f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	4b8d      	ldr	r3, [pc, #564]	; (8009188 <UART_SetConfig+0x2d0>)
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d104      	bne.n	8008f62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008f58:	f7fd fc94 	bl	8006884 <HAL_RCC_GetPCLK2Freq>
 8008f5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008f60:	e003      	b.n	8008f6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008f62:	f7fd fc7b 	bl	800685c <HAL_RCC_GetPCLK1Freq>
 8008f66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f6e:	69db      	ldr	r3, [r3, #28]
 8008f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f74:	f040 810c 	bne.w	8009190 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008f82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008f86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008f8a:	4622      	mov	r2, r4
 8008f8c:	462b      	mov	r3, r5
 8008f8e:	1891      	adds	r1, r2, r2
 8008f90:	65b9      	str	r1, [r7, #88]	; 0x58
 8008f92:	415b      	adcs	r3, r3
 8008f94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008f9a:	4621      	mov	r1, r4
 8008f9c:	eb12 0801 	adds.w	r8, r2, r1
 8008fa0:	4629      	mov	r1, r5
 8008fa2:	eb43 0901 	adc.w	r9, r3, r1
 8008fa6:	f04f 0200 	mov.w	r2, #0
 8008faa:	f04f 0300 	mov.w	r3, #0
 8008fae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008fb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008fb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008fba:	4690      	mov	r8, r2
 8008fbc:	4699      	mov	r9, r3
 8008fbe:	4623      	mov	r3, r4
 8008fc0:	eb18 0303 	adds.w	r3, r8, r3
 8008fc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008fc8:	462b      	mov	r3, r5
 8008fca:	eb49 0303 	adc.w	r3, r9, r3
 8008fce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008fde:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008fe2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	18db      	adds	r3, r3, r3
 8008fea:	653b      	str	r3, [r7, #80]	; 0x50
 8008fec:	4613      	mov	r3, r2
 8008fee:	eb42 0303 	adc.w	r3, r2, r3
 8008ff2:	657b      	str	r3, [r7, #84]	; 0x54
 8008ff4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008ff8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008ffc:	f7f7 fe64 	bl	8000cc8 <__aeabi_uldivmod>
 8009000:	4602      	mov	r2, r0
 8009002:	460b      	mov	r3, r1
 8009004:	4b61      	ldr	r3, [pc, #388]	; (800918c <UART_SetConfig+0x2d4>)
 8009006:	fba3 2302 	umull	r2, r3, r3, r2
 800900a:	095b      	lsrs	r3, r3, #5
 800900c:	011c      	lsls	r4, r3, #4
 800900e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009012:	2200      	movs	r2, #0
 8009014:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009018:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800901c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009020:	4642      	mov	r2, r8
 8009022:	464b      	mov	r3, r9
 8009024:	1891      	adds	r1, r2, r2
 8009026:	64b9      	str	r1, [r7, #72]	; 0x48
 8009028:	415b      	adcs	r3, r3
 800902a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800902c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009030:	4641      	mov	r1, r8
 8009032:	eb12 0a01 	adds.w	sl, r2, r1
 8009036:	4649      	mov	r1, r9
 8009038:	eb43 0b01 	adc.w	fp, r3, r1
 800903c:	f04f 0200 	mov.w	r2, #0
 8009040:	f04f 0300 	mov.w	r3, #0
 8009044:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009048:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800904c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009050:	4692      	mov	sl, r2
 8009052:	469b      	mov	fp, r3
 8009054:	4643      	mov	r3, r8
 8009056:	eb1a 0303 	adds.w	r3, sl, r3
 800905a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800905e:	464b      	mov	r3, r9
 8009060:	eb4b 0303 	adc.w	r3, fp, r3
 8009064:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009074:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009078:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800907c:	460b      	mov	r3, r1
 800907e:	18db      	adds	r3, r3, r3
 8009080:	643b      	str	r3, [r7, #64]	; 0x40
 8009082:	4613      	mov	r3, r2
 8009084:	eb42 0303 	adc.w	r3, r2, r3
 8009088:	647b      	str	r3, [r7, #68]	; 0x44
 800908a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800908e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009092:	f7f7 fe19 	bl	8000cc8 <__aeabi_uldivmod>
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	4611      	mov	r1, r2
 800909c:	4b3b      	ldr	r3, [pc, #236]	; (800918c <UART_SetConfig+0x2d4>)
 800909e:	fba3 2301 	umull	r2, r3, r3, r1
 80090a2:	095b      	lsrs	r3, r3, #5
 80090a4:	2264      	movs	r2, #100	; 0x64
 80090a6:	fb02 f303 	mul.w	r3, r2, r3
 80090aa:	1acb      	subs	r3, r1, r3
 80090ac:	00db      	lsls	r3, r3, #3
 80090ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80090b2:	4b36      	ldr	r3, [pc, #216]	; (800918c <UART_SetConfig+0x2d4>)
 80090b4:	fba3 2302 	umull	r2, r3, r3, r2
 80090b8:	095b      	lsrs	r3, r3, #5
 80090ba:	005b      	lsls	r3, r3, #1
 80090bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80090c0:	441c      	add	r4, r3
 80090c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090c6:	2200      	movs	r2, #0
 80090c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80090cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80090d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80090d4:	4642      	mov	r2, r8
 80090d6:	464b      	mov	r3, r9
 80090d8:	1891      	adds	r1, r2, r2
 80090da:	63b9      	str	r1, [r7, #56]	; 0x38
 80090dc:	415b      	adcs	r3, r3
 80090de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80090e4:	4641      	mov	r1, r8
 80090e6:	1851      	adds	r1, r2, r1
 80090e8:	6339      	str	r1, [r7, #48]	; 0x30
 80090ea:	4649      	mov	r1, r9
 80090ec:	414b      	adcs	r3, r1
 80090ee:	637b      	str	r3, [r7, #52]	; 0x34
 80090f0:	f04f 0200 	mov.w	r2, #0
 80090f4:	f04f 0300 	mov.w	r3, #0
 80090f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80090fc:	4659      	mov	r1, fp
 80090fe:	00cb      	lsls	r3, r1, #3
 8009100:	4651      	mov	r1, sl
 8009102:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009106:	4651      	mov	r1, sl
 8009108:	00ca      	lsls	r2, r1, #3
 800910a:	4610      	mov	r0, r2
 800910c:	4619      	mov	r1, r3
 800910e:	4603      	mov	r3, r0
 8009110:	4642      	mov	r2, r8
 8009112:	189b      	adds	r3, r3, r2
 8009114:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009118:	464b      	mov	r3, r9
 800911a:	460a      	mov	r2, r1
 800911c:	eb42 0303 	adc.w	r3, r2, r3
 8009120:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009130:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009134:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009138:	460b      	mov	r3, r1
 800913a:	18db      	adds	r3, r3, r3
 800913c:	62bb      	str	r3, [r7, #40]	; 0x28
 800913e:	4613      	mov	r3, r2
 8009140:	eb42 0303 	adc.w	r3, r2, r3
 8009144:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009146:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800914a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800914e:	f7f7 fdbb 	bl	8000cc8 <__aeabi_uldivmod>
 8009152:	4602      	mov	r2, r0
 8009154:	460b      	mov	r3, r1
 8009156:	4b0d      	ldr	r3, [pc, #52]	; (800918c <UART_SetConfig+0x2d4>)
 8009158:	fba3 1302 	umull	r1, r3, r3, r2
 800915c:	095b      	lsrs	r3, r3, #5
 800915e:	2164      	movs	r1, #100	; 0x64
 8009160:	fb01 f303 	mul.w	r3, r1, r3
 8009164:	1ad3      	subs	r3, r2, r3
 8009166:	00db      	lsls	r3, r3, #3
 8009168:	3332      	adds	r3, #50	; 0x32
 800916a:	4a08      	ldr	r2, [pc, #32]	; (800918c <UART_SetConfig+0x2d4>)
 800916c:	fba2 2303 	umull	r2, r3, r2, r3
 8009170:	095b      	lsrs	r3, r3, #5
 8009172:	f003 0207 	and.w	r2, r3, #7
 8009176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4422      	add	r2, r4
 800917e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009180:	e106      	b.n	8009390 <UART_SetConfig+0x4d8>
 8009182:	bf00      	nop
 8009184:	40011000 	.word	0x40011000
 8009188:	40011400 	.word	0x40011400
 800918c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009194:	2200      	movs	r2, #0
 8009196:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800919a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800919e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80091a2:	4642      	mov	r2, r8
 80091a4:	464b      	mov	r3, r9
 80091a6:	1891      	adds	r1, r2, r2
 80091a8:	6239      	str	r1, [r7, #32]
 80091aa:	415b      	adcs	r3, r3
 80091ac:	627b      	str	r3, [r7, #36]	; 0x24
 80091ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80091b2:	4641      	mov	r1, r8
 80091b4:	1854      	adds	r4, r2, r1
 80091b6:	4649      	mov	r1, r9
 80091b8:	eb43 0501 	adc.w	r5, r3, r1
 80091bc:	f04f 0200 	mov.w	r2, #0
 80091c0:	f04f 0300 	mov.w	r3, #0
 80091c4:	00eb      	lsls	r3, r5, #3
 80091c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80091ca:	00e2      	lsls	r2, r4, #3
 80091cc:	4614      	mov	r4, r2
 80091ce:	461d      	mov	r5, r3
 80091d0:	4643      	mov	r3, r8
 80091d2:	18e3      	adds	r3, r4, r3
 80091d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80091d8:	464b      	mov	r3, r9
 80091da:	eb45 0303 	adc.w	r3, r5, r3
 80091de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80091e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80091ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80091f2:	f04f 0200 	mov.w	r2, #0
 80091f6:	f04f 0300 	mov.w	r3, #0
 80091fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80091fe:	4629      	mov	r1, r5
 8009200:	008b      	lsls	r3, r1, #2
 8009202:	4621      	mov	r1, r4
 8009204:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009208:	4621      	mov	r1, r4
 800920a:	008a      	lsls	r2, r1, #2
 800920c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009210:	f7f7 fd5a 	bl	8000cc8 <__aeabi_uldivmod>
 8009214:	4602      	mov	r2, r0
 8009216:	460b      	mov	r3, r1
 8009218:	4b60      	ldr	r3, [pc, #384]	; (800939c <UART_SetConfig+0x4e4>)
 800921a:	fba3 2302 	umull	r2, r3, r3, r2
 800921e:	095b      	lsrs	r3, r3, #5
 8009220:	011c      	lsls	r4, r3, #4
 8009222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009226:	2200      	movs	r2, #0
 8009228:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800922c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009230:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009234:	4642      	mov	r2, r8
 8009236:	464b      	mov	r3, r9
 8009238:	1891      	adds	r1, r2, r2
 800923a:	61b9      	str	r1, [r7, #24]
 800923c:	415b      	adcs	r3, r3
 800923e:	61fb      	str	r3, [r7, #28]
 8009240:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009244:	4641      	mov	r1, r8
 8009246:	1851      	adds	r1, r2, r1
 8009248:	6139      	str	r1, [r7, #16]
 800924a:	4649      	mov	r1, r9
 800924c:	414b      	adcs	r3, r1
 800924e:	617b      	str	r3, [r7, #20]
 8009250:	f04f 0200 	mov.w	r2, #0
 8009254:	f04f 0300 	mov.w	r3, #0
 8009258:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800925c:	4659      	mov	r1, fp
 800925e:	00cb      	lsls	r3, r1, #3
 8009260:	4651      	mov	r1, sl
 8009262:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009266:	4651      	mov	r1, sl
 8009268:	00ca      	lsls	r2, r1, #3
 800926a:	4610      	mov	r0, r2
 800926c:	4619      	mov	r1, r3
 800926e:	4603      	mov	r3, r0
 8009270:	4642      	mov	r2, r8
 8009272:	189b      	adds	r3, r3, r2
 8009274:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009278:	464b      	mov	r3, r9
 800927a:	460a      	mov	r2, r1
 800927c:	eb42 0303 	adc.w	r3, r2, r3
 8009280:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	67bb      	str	r3, [r7, #120]	; 0x78
 800928e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009290:	f04f 0200 	mov.w	r2, #0
 8009294:	f04f 0300 	mov.w	r3, #0
 8009298:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800929c:	4649      	mov	r1, r9
 800929e:	008b      	lsls	r3, r1, #2
 80092a0:	4641      	mov	r1, r8
 80092a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092a6:	4641      	mov	r1, r8
 80092a8:	008a      	lsls	r2, r1, #2
 80092aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80092ae:	f7f7 fd0b 	bl	8000cc8 <__aeabi_uldivmod>
 80092b2:	4602      	mov	r2, r0
 80092b4:	460b      	mov	r3, r1
 80092b6:	4611      	mov	r1, r2
 80092b8:	4b38      	ldr	r3, [pc, #224]	; (800939c <UART_SetConfig+0x4e4>)
 80092ba:	fba3 2301 	umull	r2, r3, r3, r1
 80092be:	095b      	lsrs	r3, r3, #5
 80092c0:	2264      	movs	r2, #100	; 0x64
 80092c2:	fb02 f303 	mul.w	r3, r2, r3
 80092c6:	1acb      	subs	r3, r1, r3
 80092c8:	011b      	lsls	r3, r3, #4
 80092ca:	3332      	adds	r3, #50	; 0x32
 80092cc:	4a33      	ldr	r2, [pc, #204]	; (800939c <UART_SetConfig+0x4e4>)
 80092ce:	fba2 2303 	umull	r2, r3, r2, r3
 80092d2:	095b      	lsrs	r3, r3, #5
 80092d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092d8:	441c      	add	r4, r3
 80092da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092de:	2200      	movs	r2, #0
 80092e0:	673b      	str	r3, [r7, #112]	; 0x70
 80092e2:	677a      	str	r2, [r7, #116]	; 0x74
 80092e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80092e8:	4642      	mov	r2, r8
 80092ea:	464b      	mov	r3, r9
 80092ec:	1891      	adds	r1, r2, r2
 80092ee:	60b9      	str	r1, [r7, #8]
 80092f0:	415b      	adcs	r3, r3
 80092f2:	60fb      	str	r3, [r7, #12]
 80092f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092f8:	4641      	mov	r1, r8
 80092fa:	1851      	adds	r1, r2, r1
 80092fc:	6039      	str	r1, [r7, #0]
 80092fe:	4649      	mov	r1, r9
 8009300:	414b      	adcs	r3, r1
 8009302:	607b      	str	r3, [r7, #4]
 8009304:	f04f 0200 	mov.w	r2, #0
 8009308:	f04f 0300 	mov.w	r3, #0
 800930c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009310:	4659      	mov	r1, fp
 8009312:	00cb      	lsls	r3, r1, #3
 8009314:	4651      	mov	r1, sl
 8009316:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800931a:	4651      	mov	r1, sl
 800931c:	00ca      	lsls	r2, r1, #3
 800931e:	4610      	mov	r0, r2
 8009320:	4619      	mov	r1, r3
 8009322:	4603      	mov	r3, r0
 8009324:	4642      	mov	r2, r8
 8009326:	189b      	adds	r3, r3, r2
 8009328:	66bb      	str	r3, [r7, #104]	; 0x68
 800932a:	464b      	mov	r3, r9
 800932c:	460a      	mov	r2, r1
 800932e:	eb42 0303 	adc.w	r3, r2, r3
 8009332:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	663b      	str	r3, [r7, #96]	; 0x60
 800933e:	667a      	str	r2, [r7, #100]	; 0x64
 8009340:	f04f 0200 	mov.w	r2, #0
 8009344:	f04f 0300 	mov.w	r3, #0
 8009348:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800934c:	4649      	mov	r1, r9
 800934e:	008b      	lsls	r3, r1, #2
 8009350:	4641      	mov	r1, r8
 8009352:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009356:	4641      	mov	r1, r8
 8009358:	008a      	lsls	r2, r1, #2
 800935a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800935e:	f7f7 fcb3 	bl	8000cc8 <__aeabi_uldivmod>
 8009362:	4602      	mov	r2, r0
 8009364:	460b      	mov	r3, r1
 8009366:	4b0d      	ldr	r3, [pc, #52]	; (800939c <UART_SetConfig+0x4e4>)
 8009368:	fba3 1302 	umull	r1, r3, r3, r2
 800936c:	095b      	lsrs	r3, r3, #5
 800936e:	2164      	movs	r1, #100	; 0x64
 8009370:	fb01 f303 	mul.w	r3, r1, r3
 8009374:	1ad3      	subs	r3, r2, r3
 8009376:	011b      	lsls	r3, r3, #4
 8009378:	3332      	adds	r3, #50	; 0x32
 800937a:	4a08      	ldr	r2, [pc, #32]	; (800939c <UART_SetConfig+0x4e4>)
 800937c:	fba2 2303 	umull	r2, r3, r2, r3
 8009380:	095b      	lsrs	r3, r3, #5
 8009382:	f003 020f 	and.w	r2, r3, #15
 8009386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4422      	add	r2, r4
 800938e:	609a      	str	r2, [r3, #8]
}
 8009390:	bf00      	nop
 8009392:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009396:	46bd      	mov	sp, r7
 8009398:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800939c:	51eb851f 	.word	0x51eb851f

080093a0 <__cvt>:
 80093a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093a4:	ec55 4b10 	vmov	r4, r5, d0
 80093a8:	2d00      	cmp	r5, #0
 80093aa:	460e      	mov	r6, r1
 80093ac:	4619      	mov	r1, r3
 80093ae:	462b      	mov	r3, r5
 80093b0:	bfbb      	ittet	lt
 80093b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80093b6:	461d      	movlt	r5, r3
 80093b8:	2300      	movge	r3, #0
 80093ba:	232d      	movlt	r3, #45	; 0x2d
 80093bc:	700b      	strb	r3, [r1, #0]
 80093be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80093c4:	4691      	mov	r9, r2
 80093c6:	f023 0820 	bic.w	r8, r3, #32
 80093ca:	bfbc      	itt	lt
 80093cc:	4622      	movlt	r2, r4
 80093ce:	4614      	movlt	r4, r2
 80093d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80093d4:	d005      	beq.n	80093e2 <__cvt+0x42>
 80093d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80093da:	d100      	bne.n	80093de <__cvt+0x3e>
 80093dc:	3601      	adds	r6, #1
 80093de:	2102      	movs	r1, #2
 80093e0:	e000      	b.n	80093e4 <__cvt+0x44>
 80093e2:	2103      	movs	r1, #3
 80093e4:	ab03      	add	r3, sp, #12
 80093e6:	9301      	str	r3, [sp, #4]
 80093e8:	ab02      	add	r3, sp, #8
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	ec45 4b10 	vmov	d0, r4, r5
 80093f0:	4653      	mov	r3, sl
 80093f2:	4632      	mov	r2, r6
 80093f4:	f000 feac 	bl	800a150 <_dtoa_r>
 80093f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80093fc:	4607      	mov	r7, r0
 80093fe:	d102      	bne.n	8009406 <__cvt+0x66>
 8009400:	f019 0f01 	tst.w	r9, #1
 8009404:	d022      	beq.n	800944c <__cvt+0xac>
 8009406:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800940a:	eb07 0906 	add.w	r9, r7, r6
 800940e:	d110      	bne.n	8009432 <__cvt+0x92>
 8009410:	783b      	ldrb	r3, [r7, #0]
 8009412:	2b30      	cmp	r3, #48	; 0x30
 8009414:	d10a      	bne.n	800942c <__cvt+0x8c>
 8009416:	2200      	movs	r2, #0
 8009418:	2300      	movs	r3, #0
 800941a:	4620      	mov	r0, r4
 800941c:	4629      	mov	r1, r5
 800941e:	f7f7 fb73 	bl	8000b08 <__aeabi_dcmpeq>
 8009422:	b918      	cbnz	r0, 800942c <__cvt+0x8c>
 8009424:	f1c6 0601 	rsb	r6, r6, #1
 8009428:	f8ca 6000 	str.w	r6, [sl]
 800942c:	f8da 3000 	ldr.w	r3, [sl]
 8009430:	4499      	add	r9, r3
 8009432:	2200      	movs	r2, #0
 8009434:	2300      	movs	r3, #0
 8009436:	4620      	mov	r0, r4
 8009438:	4629      	mov	r1, r5
 800943a:	f7f7 fb65 	bl	8000b08 <__aeabi_dcmpeq>
 800943e:	b108      	cbz	r0, 8009444 <__cvt+0xa4>
 8009440:	f8cd 900c 	str.w	r9, [sp, #12]
 8009444:	2230      	movs	r2, #48	; 0x30
 8009446:	9b03      	ldr	r3, [sp, #12]
 8009448:	454b      	cmp	r3, r9
 800944a:	d307      	bcc.n	800945c <__cvt+0xbc>
 800944c:	9b03      	ldr	r3, [sp, #12]
 800944e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009450:	1bdb      	subs	r3, r3, r7
 8009452:	4638      	mov	r0, r7
 8009454:	6013      	str	r3, [r2, #0]
 8009456:	b004      	add	sp, #16
 8009458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800945c:	1c59      	adds	r1, r3, #1
 800945e:	9103      	str	r1, [sp, #12]
 8009460:	701a      	strb	r2, [r3, #0]
 8009462:	e7f0      	b.n	8009446 <__cvt+0xa6>

08009464 <__exponent>:
 8009464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009466:	4603      	mov	r3, r0
 8009468:	2900      	cmp	r1, #0
 800946a:	bfb8      	it	lt
 800946c:	4249      	neglt	r1, r1
 800946e:	f803 2b02 	strb.w	r2, [r3], #2
 8009472:	bfb4      	ite	lt
 8009474:	222d      	movlt	r2, #45	; 0x2d
 8009476:	222b      	movge	r2, #43	; 0x2b
 8009478:	2909      	cmp	r1, #9
 800947a:	7042      	strb	r2, [r0, #1]
 800947c:	dd2a      	ble.n	80094d4 <__exponent+0x70>
 800947e:	f10d 0207 	add.w	r2, sp, #7
 8009482:	4617      	mov	r7, r2
 8009484:	260a      	movs	r6, #10
 8009486:	4694      	mov	ip, r2
 8009488:	fb91 f5f6 	sdiv	r5, r1, r6
 800948c:	fb06 1415 	mls	r4, r6, r5, r1
 8009490:	3430      	adds	r4, #48	; 0x30
 8009492:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009496:	460c      	mov	r4, r1
 8009498:	2c63      	cmp	r4, #99	; 0x63
 800949a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800949e:	4629      	mov	r1, r5
 80094a0:	dcf1      	bgt.n	8009486 <__exponent+0x22>
 80094a2:	3130      	adds	r1, #48	; 0x30
 80094a4:	f1ac 0402 	sub.w	r4, ip, #2
 80094a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80094ac:	1c41      	adds	r1, r0, #1
 80094ae:	4622      	mov	r2, r4
 80094b0:	42ba      	cmp	r2, r7
 80094b2:	d30a      	bcc.n	80094ca <__exponent+0x66>
 80094b4:	f10d 0209 	add.w	r2, sp, #9
 80094b8:	eba2 020c 	sub.w	r2, r2, ip
 80094bc:	42bc      	cmp	r4, r7
 80094be:	bf88      	it	hi
 80094c0:	2200      	movhi	r2, #0
 80094c2:	4413      	add	r3, r2
 80094c4:	1a18      	subs	r0, r3, r0
 80094c6:	b003      	add	sp, #12
 80094c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094ca:	f812 5b01 	ldrb.w	r5, [r2], #1
 80094ce:	f801 5f01 	strb.w	r5, [r1, #1]!
 80094d2:	e7ed      	b.n	80094b0 <__exponent+0x4c>
 80094d4:	2330      	movs	r3, #48	; 0x30
 80094d6:	3130      	adds	r1, #48	; 0x30
 80094d8:	7083      	strb	r3, [r0, #2]
 80094da:	70c1      	strb	r1, [r0, #3]
 80094dc:	1d03      	adds	r3, r0, #4
 80094de:	e7f1      	b.n	80094c4 <__exponent+0x60>

080094e0 <_printf_float>:
 80094e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e4:	ed2d 8b02 	vpush	{d8}
 80094e8:	b08d      	sub	sp, #52	; 0x34
 80094ea:	460c      	mov	r4, r1
 80094ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80094f0:	4616      	mov	r6, r2
 80094f2:	461f      	mov	r7, r3
 80094f4:	4605      	mov	r5, r0
 80094f6:	f000 fd61 	bl	8009fbc <_localeconv_r>
 80094fa:	f8d0 a000 	ldr.w	sl, [r0]
 80094fe:	4650      	mov	r0, sl
 8009500:	f7f6 fed6 	bl	80002b0 <strlen>
 8009504:	2300      	movs	r3, #0
 8009506:	930a      	str	r3, [sp, #40]	; 0x28
 8009508:	6823      	ldr	r3, [r4, #0]
 800950a:	9305      	str	r3, [sp, #20]
 800950c:	f8d8 3000 	ldr.w	r3, [r8]
 8009510:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009514:	3307      	adds	r3, #7
 8009516:	f023 0307 	bic.w	r3, r3, #7
 800951a:	f103 0208 	add.w	r2, r3, #8
 800951e:	f8c8 2000 	str.w	r2, [r8]
 8009522:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009526:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800952a:	9307      	str	r3, [sp, #28]
 800952c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009530:	ee08 0a10 	vmov	s16, r0
 8009534:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009538:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800953c:	4b9e      	ldr	r3, [pc, #632]	; (80097b8 <_printf_float+0x2d8>)
 800953e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009542:	f7f7 fb13 	bl	8000b6c <__aeabi_dcmpun>
 8009546:	bb88      	cbnz	r0, 80095ac <_printf_float+0xcc>
 8009548:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800954c:	4b9a      	ldr	r3, [pc, #616]	; (80097b8 <_printf_float+0x2d8>)
 800954e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009552:	f7f7 faed 	bl	8000b30 <__aeabi_dcmple>
 8009556:	bb48      	cbnz	r0, 80095ac <_printf_float+0xcc>
 8009558:	2200      	movs	r2, #0
 800955a:	2300      	movs	r3, #0
 800955c:	4640      	mov	r0, r8
 800955e:	4649      	mov	r1, r9
 8009560:	f7f7 fadc 	bl	8000b1c <__aeabi_dcmplt>
 8009564:	b110      	cbz	r0, 800956c <_printf_float+0x8c>
 8009566:	232d      	movs	r3, #45	; 0x2d
 8009568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800956c:	4a93      	ldr	r2, [pc, #588]	; (80097bc <_printf_float+0x2dc>)
 800956e:	4b94      	ldr	r3, [pc, #592]	; (80097c0 <_printf_float+0x2e0>)
 8009570:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009574:	bf94      	ite	ls
 8009576:	4690      	movls	r8, r2
 8009578:	4698      	movhi	r8, r3
 800957a:	2303      	movs	r3, #3
 800957c:	6123      	str	r3, [r4, #16]
 800957e:	9b05      	ldr	r3, [sp, #20]
 8009580:	f023 0304 	bic.w	r3, r3, #4
 8009584:	6023      	str	r3, [r4, #0]
 8009586:	f04f 0900 	mov.w	r9, #0
 800958a:	9700      	str	r7, [sp, #0]
 800958c:	4633      	mov	r3, r6
 800958e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009590:	4621      	mov	r1, r4
 8009592:	4628      	mov	r0, r5
 8009594:	f000 fa8a 	bl	8009aac <_printf_common>
 8009598:	3001      	adds	r0, #1
 800959a:	f040 8090 	bne.w	80096be <_printf_float+0x1de>
 800959e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095a2:	b00d      	add	sp, #52	; 0x34
 80095a4:	ecbd 8b02 	vpop	{d8}
 80095a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ac:	4642      	mov	r2, r8
 80095ae:	464b      	mov	r3, r9
 80095b0:	4640      	mov	r0, r8
 80095b2:	4649      	mov	r1, r9
 80095b4:	f7f7 fada 	bl	8000b6c <__aeabi_dcmpun>
 80095b8:	b140      	cbz	r0, 80095cc <_printf_float+0xec>
 80095ba:	464b      	mov	r3, r9
 80095bc:	2b00      	cmp	r3, #0
 80095be:	bfbc      	itt	lt
 80095c0:	232d      	movlt	r3, #45	; 0x2d
 80095c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80095c6:	4a7f      	ldr	r2, [pc, #508]	; (80097c4 <_printf_float+0x2e4>)
 80095c8:	4b7f      	ldr	r3, [pc, #508]	; (80097c8 <_printf_float+0x2e8>)
 80095ca:	e7d1      	b.n	8009570 <_printf_float+0x90>
 80095cc:	6863      	ldr	r3, [r4, #4]
 80095ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80095d2:	9206      	str	r2, [sp, #24]
 80095d4:	1c5a      	adds	r2, r3, #1
 80095d6:	d13f      	bne.n	8009658 <_printf_float+0x178>
 80095d8:	2306      	movs	r3, #6
 80095da:	6063      	str	r3, [r4, #4]
 80095dc:	9b05      	ldr	r3, [sp, #20]
 80095de:	6861      	ldr	r1, [r4, #4]
 80095e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80095e4:	2300      	movs	r3, #0
 80095e6:	9303      	str	r3, [sp, #12]
 80095e8:	ab0a      	add	r3, sp, #40	; 0x28
 80095ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80095ee:	ab09      	add	r3, sp, #36	; 0x24
 80095f0:	ec49 8b10 	vmov	d0, r8, r9
 80095f4:	9300      	str	r3, [sp, #0]
 80095f6:	6022      	str	r2, [r4, #0]
 80095f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80095fc:	4628      	mov	r0, r5
 80095fe:	f7ff fecf 	bl	80093a0 <__cvt>
 8009602:	9b06      	ldr	r3, [sp, #24]
 8009604:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009606:	2b47      	cmp	r3, #71	; 0x47
 8009608:	4680      	mov	r8, r0
 800960a:	d108      	bne.n	800961e <_printf_float+0x13e>
 800960c:	1cc8      	adds	r0, r1, #3
 800960e:	db02      	blt.n	8009616 <_printf_float+0x136>
 8009610:	6863      	ldr	r3, [r4, #4]
 8009612:	4299      	cmp	r1, r3
 8009614:	dd41      	ble.n	800969a <_printf_float+0x1ba>
 8009616:	f1ab 0302 	sub.w	r3, fp, #2
 800961a:	fa5f fb83 	uxtb.w	fp, r3
 800961e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009622:	d820      	bhi.n	8009666 <_printf_float+0x186>
 8009624:	3901      	subs	r1, #1
 8009626:	465a      	mov	r2, fp
 8009628:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800962c:	9109      	str	r1, [sp, #36]	; 0x24
 800962e:	f7ff ff19 	bl	8009464 <__exponent>
 8009632:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009634:	1813      	adds	r3, r2, r0
 8009636:	2a01      	cmp	r2, #1
 8009638:	4681      	mov	r9, r0
 800963a:	6123      	str	r3, [r4, #16]
 800963c:	dc02      	bgt.n	8009644 <_printf_float+0x164>
 800963e:	6822      	ldr	r2, [r4, #0]
 8009640:	07d2      	lsls	r2, r2, #31
 8009642:	d501      	bpl.n	8009648 <_printf_float+0x168>
 8009644:	3301      	adds	r3, #1
 8009646:	6123      	str	r3, [r4, #16]
 8009648:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800964c:	2b00      	cmp	r3, #0
 800964e:	d09c      	beq.n	800958a <_printf_float+0xaa>
 8009650:	232d      	movs	r3, #45	; 0x2d
 8009652:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009656:	e798      	b.n	800958a <_printf_float+0xaa>
 8009658:	9a06      	ldr	r2, [sp, #24]
 800965a:	2a47      	cmp	r2, #71	; 0x47
 800965c:	d1be      	bne.n	80095dc <_printf_float+0xfc>
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1bc      	bne.n	80095dc <_printf_float+0xfc>
 8009662:	2301      	movs	r3, #1
 8009664:	e7b9      	b.n	80095da <_printf_float+0xfa>
 8009666:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800966a:	d118      	bne.n	800969e <_printf_float+0x1be>
 800966c:	2900      	cmp	r1, #0
 800966e:	6863      	ldr	r3, [r4, #4]
 8009670:	dd0b      	ble.n	800968a <_printf_float+0x1aa>
 8009672:	6121      	str	r1, [r4, #16]
 8009674:	b913      	cbnz	r3, 800967c <_printf_float+0x19c>
 8009676:	6822      	ldr	r2, [r4, #0]
 8009678:	07d0      	lsls	r0, r2, #31
 800967a:	d502      	bpl.n	8009682 <_printf_float+0x1a2>
 800967c:	3301      	adds	r3, #1
 800967e:	440b      	add	r3, r1
 8009680:	6123      	str	r3, [r4, #16]
 8009682:	65a1      	str	r1, [r4, #88]	; 0x58
 8009684:	f04f 0900 	mov.w	r9, #0
 8009688:	e7de      	b.n	8009648 <_printf_float+0x168>
 800968a:	b913      	cbnz	r3, 8009692 <_printf_float+0x1b2>
 800968c:	6822      	ldr	r2, [r4, #0]
 800968e:	07d2      	lsls	r2, r2, #31
 8009690:	d501      	bpl.n	8009696 <_printf_float+0x1b6>
 8009692:	3302      	adds	r3, #2
 8009694:	e7f4      	b.n	8009680 <_printf_float+0x1a0>
 8009696:	2301      	movs	r3, #1
 8009698:	e7f2      	b.n	8009680 <_printf_float+0x1a0>
 800969a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800969e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096a0:	4299      	cmp	r1, r3
 80096a2:	db05      	blt.n	80096b0 <_printf_float+0x1d0>
 80096a4:	6823      	ldr	r3, [r4, #0]
 80096a6:	6121      	str	r1, [r4, #16]
 80096a8:	07d8      	lsls	r0, r3, #31
 80096aa:	d5ea      	bpl.n	8009682 <_printf_float+0x1a2>
 80096ac:	1c4b      	adds	r3, r1, #1
 80096ae:	e7e7      	b.n	8009680 <_printf_float+0x1a0>
 80096b0:	2900      	cmp	r1, #0
 80096b2:	bfd4      	ite	le
 80096b4:	f1c1 0202 	rsble	r2, r1, #2
 80096b8:	2201      	movgt	r2, #1
 80096ba:	4413      	add	r3, r2
 80096bc:	e7e0      	b.n	8009680 <_printf_float+0x1a0>
 80096be:	6823      	ldr	r3, [r4, #0]
 80096c0:	055a      	lsls	r2, r3, #21
 80096c2:	d407      	bmi.n	80096d4 <_printf_float+0x1f4>
 80096c4:	6923      	ldr	r3, [r4, #16]
 80096c6:	4642      	mov	r2, r8
 80096c8:	4631      	mov	r1, r6
 80096ca:	4628      	mov	r0, r5
 80096cc:	47b8      	blx	r7
 80096ce:	3001      	adds	r0, #1
 80096d0:	d12c      	bne.n	800972c <_printf_float+0x24c>
 80096d2:	e764      	b.n	800959e <_printf_float+0xbe>
 80096d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80096d8:	f240 80e0 	bls.w	800989c <_printf_float+0x3bc>
 80096dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80096e0:	2200      	movs	r2, #0
 80096e2:	2300      	movs	r3, #0
 80096e4:	f7f7 fa10 	bl	8000b08 <__aeabi_dcmpeq>
 80096e8:	2800      	cmp	r0, #0
 80096ea:	d034      	beq.n	8009756 <_printf_float+0x276>
 80096ec:	4a37      	ldr	r2, [pc, #220]	; (80097cc <_printf_float+0x2ec>)
 80096ee:	2301      	movs	r3, #1
 80096f0:	4631      	mov	r1, r6
 80096f2:	4628      	mov	r0, r5
 80096f4:	47b8      	blx	r7
 80096f6:	3001      	adds	r0, #1
 80096f8:	f43f af51 	beq.w	800959e <_printf_float+0xbe>
 80096fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009700:	429a      	cmp	r2, r3
 8009702:	db02      	blt.n	800970a <_printf_float+0x22a>
 8009704:	6823      	ldr	r3, [r4, #0]
 8009706:	07d8      	lsls	r0, r3, #31
 8009708:	d510      	bpl.n	800972c <_printf_float+0x24c>
 800970a:	ee18 3a10 	vmov	r3, s16
 800970e:	4652      	mov	r2, sl
 8009710:	4631      	mov	r1, r6
 8009712:	4628      	mov	r0, r5
 8009714:	47b8      	blx	r7
 8009716:	3001      	adds	r0, #1
 8009718:	f43f af41 	beq.w	800959e <_printf_float+0xbe>
 800971c:	f04f 0800 	mov.w	r8, #0
 8009720:	f104 091a 	add.w	r9, r4, #26
 8009724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009726:	3b01      	subs	r3, #1
 8009728:	4543      	cmp	r3, r8
 800972a:	dc09      	bgt.n	8009740 <_printf_float+0x260>
 800972c:	6823      	ldr	r3, [r4, #0]
 800972e:	079b      	lsls	r3, r3, #30
 8009730:	f100 8107 	bmi.w	8009942 <_printf_float+0x462>
 8009734:	68e0      	ldr	r0, [r4, #12]
 8009736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009738:	4298      	cmp	r0, r3
 800973a:	bfb8      	it	lt
 800973c:	4618      	movlt	r0, r3
 800973e:	e730      	b.n	80095a2 <_printf_float+0xc2>
 8009740:	2301      	movs	r3, #1
 8009742:	464a      	mov	r2, r9
 8009744:	4631      	mov	r1, r6
 8009746:	4628      	mov	r0, r5
 8009748:	47b8      	blx	r7
 800974a:	3001      	adds	r0, #1
 800974c:	f43f af27 	beq.w	800959e <_printf_float+0xbe>
 8009750:	f108 0801 	add.w	r8, r8, #1
 8009754:	e7e6      	b.n	8009724 <_printf_float+0x244>
 8009756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009758:	2b00      	cmp	r3, #0
 800975a:	dc39      	bgt.n	80097d0 <_printf_float+0x2f0>
 800975c:	4a1b      	ldr	r2, [pc, #108]	; (80097cc <_printf_float+0x2ec>)
 800975e:	2301      	movs	r3, #1
 8009760:	4631      	mov	r1, r6
 8009762:	4628      	mov	r0, r5
 8009764:	47b8      	blx	r7
 8009766:	3001      	adds	r0, #1
 8009768:	f43f af19 	beq.w	800959e <_printf_float+0xbe>
 800976c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009770:	4313      	orrs	r3, r2
 8009772:	d102      	bne.n	800977a <_printf_float+0x29a>
 8009774:	6823      	ldr	r3, [r4, #0]
 8009776:	07d9      	lsls	r1, r3, #31
 8009778:	d5d8      	bpl.n	800972c <_printf_float+0x24c>
 800977a:	ee18 3a10 	vmov	r3, s16
 800977e:	4652      	mov	r2, sl
 8009780:	4631      	mov	r1, r6
 8009782:	4628      	mov	r0, r5
 8009784:	47b8      	blx	r7
 8009786:	3001      	adds	r0, #1
 8009788:	f43f af09 	beq.w	800959e <_printf_float+0xbe>
 800978c:	f04f 0900 	mov.w	r9, #0
 8009790:	f104 0a1a 	add.w	sl, r4, #26
 8009794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009796:	425b      	negs	r3, r3
 8009798:	454b      	cmp	r3, r9
 800979a:	dc01      	bgt.n	80097a0 <_printf_float+0x2c0>
 800979c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800979e:	e792      	b.n	80096c6 <_printf_float+0x1e6>
 80097a0:	2301      	movs	r3, #1
 80097a2:	4652      	mov	r2, sl
 80097a4:	4631      	mov	r1, r6
 80097a6:	4628      	mov	r0, r5
 80097a8:	47b8      	blx	r7
 80097aa:	3001      	adds	r0, #1
 80097ac:	f43f aef7 	beq.w	800959e <_printf_float+0xbe>
 80097b0:	f109 0901 	add.w	r9, r9, #1
 80097b4:	e7ee      	b.n	8009794 <_printf_float+0x2b4>
 80097b6:	bf00      	nop
 80097b8:	7fefffff 	.word	0x7fefffff
 80097bc:	0800c638 	.word	0x0800c638
 80097c0:	0800c63c 	.word	0x0800c63c
 80097c4:	0800c640 	.word	0x0800c640
 80097c8:	0800c644 	.word	0x0800c644
 80097cc:	0800c648 	.word	0x0800c648
 80097d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80097d4:	429a      	cmp	r2, r3
 80097d6:	bfa8      	it	ge
 80097d8:	461a      	movge	r2, r3
 80097da:	2a00      	cmp	r2, #0
 80097dc:	4691      	mov	r9, r2
 80097de:	dc37      	bgt.n	8009850 <_printf_float+0x370>
 80097e0:	f04f 0b00 	mov.w	fp, #0
 80097e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097e8:	f104 021a 	add.w	r2, r4, #26
 80097ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80097ee:	9305      	str	r3, [sp, #20]
 80097f0:	eba3 0309 	sub.w	r3, r3, r9
 80097f4:	455b      	cmp	r3, fp
 80097f6:	dc33      	bgt.n	8009860 <_printf_float+0x380>
 80097f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097fc:	429a      	cmp	r2, r3
 80097fe:	db3b      	blt.n	8009878 <_printf_float+0x398>
 8009800:	6823      	ldr	r3, [r4, #0]
 8009802:	07da      	lsls	r2, r3, #31
 8009804:	d438      	bmi.n	8009878 <_printf_float+0x398>
 8009806:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800980a:	eba2 0903 	sub.w	r9, r2, r3
 800980e:	9b05      	ldr	r3, [sp, #20]
 8009810:	1ad2      	subs	r2, r2, r3
 8009812:	4591      	cmp	r9, r2
 8009814:	bfa8      	it	ge
 8009816:	4691      	movge	r9, r2
 8009818:	f1b9 0f00 	cmp.w	r9, #0
 800981c:	dc35      	bgt.n	800988a <_printf_float+0x3aa>
 800981e:	f04f 0800 	mov.w	r8, #0
 8009822:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009826:	f104 0a1a 	add.w	sl, r4, #26
 800982a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800982e:	1a9b      	subs	r3, r3, r2
 8009830:	eba3 0309 	sub.w	r3, r3, r9
 8009834:	4543      	cmp	r3, r8
 8009836:	f77f af79 	ble.w	800972c <_printf_float+0x24c>
 800983a:	2301      	movs	r3, #1
 800983c:	4652      	mov	r2, sl
 800983e:	4631      	mov	r1, r6
 8009840:	4628      	mov	r0, r5
 8009842:	47b8      	blx	r7
 8009844:	3001      	adds	r0, #1
 8009846:	f43f aeaa 	beq.w	800959e <_printf_float+0xbe>
 800984a:	f108 0801 	add.w	r8, r8, #1
 800984e:	e7ec      	b.n	800982a <_printf_float+0x34a>
 8009850:	4613      	mov	r3, r2
 8009852:	4631      	mov	r1, r6
 8009854:	4642      	mov	r2, r8
 8009856:	4628      	mov	r0, r5
 8009858:	47b8      	blx	r7
 800985a:	3001      	adds	r0, #1
 800985c:	d1c0      	bne.n	80097e0 <_printf_float+0x300>
 800985e:	e69e      	b.n	800959e <_printf_float+0xbe>
 8009860:	2301      	movs	r3, #1
 8009862:	4631      	mov	r1, r6
 8009864:	4628      	mov	r0, r5
 8009866:	9205      	str	r2, [sp, #20]
 8009868:	47b8      	blx	r7
 800986a:	3001      	adds	r0, #1
 800986c:	f43f ae97 	beq.w	800959e <_printf_float+0xbe>
 8009870:	9a05      	ldr	r2, [sp, #20]
 8009872:	f10b 0b01 	add.w	fp, fp, #1
 8009876:	e7b9      	b.n	80097ec <_printf_float+0x30c>
 8009878:	ee18 3a10 	vmov	r3, s16
 800987c:	4652      	mov	r2, sl
 800987e:	4631      	mov	r1, r6
 8009880:	4628      	mov	r0, r5
 8009882:	47b8      	blx	r7
 8009884:	3001      	adds	r0, #1
 8009886:	d1be      	bne.n	8009806 <_printf_float+0x326>
 8009888:	e689      	b.n	800959e <_printf_float+0xbe>
 800988a:	9a05      	ldr	r2, [sp, #20]
 800988c:	464b      	mov	r3, r9
 800988e:	4442      	add	r2, r8
 8009890:	4631      	mov	r1, r6
 8009892:	4628      	mov	r0, r5
 8009894:	47b8      	blx	r7
 8009896:	3001      	adds	r0, #1
 8009898:	d1c1      	bne.n	800981e <_printf_float+0x33e>
 800989a:	e680      	b.n	800959e <_printf_float+0xbe>
 800989c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800989e:	2a01      	cmp	r2, #1
 80098a0:	dc01      	bgt.n	80098a6 <_printf_float+0x3c6>
 80098a2:	07db      	lsls	r3, r3, #31
 80098a4:	d53a      	bpl.n	800991c <_printf_float+0x43c>
 80098a6:	2301      	movs	r3, #1
 80098a8:	4642      	mov	r2, r8
 80098aa:	4631      	mov	r1, r6
 80098ac:	4628      	mov	r0, r5
 80098ae:	47b8      	blx	r7
 80098b0:	3001      	adds	r0, #1
 80098b2:	f43f ae74 	beq.w	800959e <_printf_float+0xbe>
 80098b6:	ee18 3a10 	vmov	r3, s16
 80098ba:	4652      	mov	r2, sl
 80098bc:	4631      	mov	r1, r6
 80098be:	4628      	mov	r0, r5
 80098c0:	47b8      	blx	r7
 80098c2:	3001      	adds	r0, #1
 80098c4:	f43f ae6b 	beq.w	800959e <_printf_float+0xbe>
 80098c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80098cc:	2200      	movs	r2, #0
 80098ce:	2300      	movs	r3, #0
 80098d0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80098d4:	f7f7 f918 	bl	8000b08 <__aeabi_dcmpeq>
 80098d8:	b9d8      	cbnz	r0, 8009912 <_printf_float+0x432>
 80098da:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80098de:	f108 0201 	add.w	r2, r8, #1
 80098e2:	4631      	mov	r1, r6
 80098e4:	4628      	mov	r0, r5
 80098e6:	47b8      	blx	r7
 80098e8:	3001      	adds	r0, #1
 80098ea:	d10e      	bne.n	800990a <_printf_float+0x42a>
 80098ec:	e657      	b.n	800959e <_printf_float+0xbe>
 80098ee:	2301      	movs	r3, #1
 80098f0:	4652      	mov	r2, sl
 80098f2:	4631      	mov	r1, r6
 80098f4:	4628      	mov	r0, r5
 80098f6:	47b8      	blx	r7
 80098f8:	3001      	adds	r0, #1
 80098fa:	f43f ae50 	beq.w	800959e <_printf_float+0xbe>
 80098fe:	f108 0801 	add.w	r8, r8, #1
 8009902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009904:	3b01      	subs	r3, #1
 8009906:	4543      	cmp	r3, r8
 8009908:	dcf1      	bgt.n	80098ee <_printf_float+0x40e>
 800990a:	464b      	mov	r3, r9
 800990c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009910:	e6da      	b.n	80096c8 <_printf_float+0x1e8>
 8009912:	f04f 0800 	mov.w	r8, #0
 8009916:	f104 0a1a 	add.w	sl, r4, #26
 800991a:	e7f2      	b.n	8009902 <_printf_float+0x422>
 800991c:	2301      	movs	r3, #1
 800991e:	4642      	mov	r2, r8
 8009920:	e7df      	b.n	80098e2 <_printf_float+0x402>
 8009922:	2301      	movs	r3, #1
 8009924:	464a      	mov	r2, r9
 8009926:	4631      	mov	r1, r6
 8009928:	4628      	mov	r0, r5
 800992a:	47b8      	blx	r7
 800992c:	3001      	adds	r0, #1
 800992e:	f43f ae36 	beq.w	800959e <_printf_float+0xbe>
 8009932:	f108 0801 	add.w	r8, r8, #1
 8009936:	68e3      	ldr	r3, [r4, #12]
 8009938:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800993a:	1a5b      	subs	r3, r3, r1
 800993c:	4543      	cmp	r3, r8
 800993e:	dcf0      	bgt.n	8009922 <_printf_float+0x442>
 8009940:	e6f8      	b.n	8009734 <_printf_float+0x254>
 8009942:	f04f 0800 	mov.w	r8, #0
 8009946:	f104 0919 	add.w	r9, r4, #25
 800994a:	e7f4      	b.n	8009936 <_printf_float+0x456>

0800994c <malloc>:
 800994c:	4b02      	ldr	r3, [pc, #8]	; (8009958 <malloc+0xc>)
 800994e:	4601      	mov	r1, r0
 8009950:	6818      	ldr	r0, [r3, #0]
 8009952:	f000 b82b 	b.w	80099ac <_malloc_r>
 8009956:	bf00      	nop
 8009958:	20002440 	.word	0x20002440

0800995c <free>:
 800995c:	4b02      	ldr	r3, [pc, #8]	; (8009968 <free+0xc>)
 800995e:	4601      	mov	r1, r0
 8009960:	6818      	ldr	r0, [r3, #0]
 8009962:	f001 b9e7 	b.w	800ad34 <_free_r>
 8009966:	bf00      	nop
 8009968:	20002440 	.word	0x20002440

0800996c <sbrk_aligned>:
 800996c:	b570      	push	{r4, r5, r6, lr}
 800996e:	4e0e      	ldr	r6, [pc, #56]	; (80099a8 <sbrk_aligned+0x3c>)
 8009970:	460c      	mov	r4, r1
 8009972:	6831      	ldr	r1, [r6, #0]
 8009974:	4605      	mov	r5, r0
 8009976:	b911      	cbnz	r1, 800997e <sbrk_aligned+0x12>
 8009978:	f000 fb24 	bl	8009fc4 <_sbrk_r>
 800997c:	6030      	str	r0, [r6, #0]
 800997e:	4621      	mov	r1, r4
 8009980:	4628      	mov	r0, r5
 8009982:	f000 fb1f 	bl	8009fc4 <_sbrk_r>
 8009986:	1c43      	adds	r3, r0, #1
 8009988:	d00a      	beq.n	80099a0 <sbrk_aligned+0x34>
 800998a:	1cc4      	adds	r4, r0, #3
 800998c:	f024 0403 	bic.w	r4, r4, #3
 8009990:	42a0      	cmp	r0, r4
 8009992:	d007      	beq.n	80099a4 <sbrk_aligned+0x38>
 8009994:	1a21      	subs	r1, r4, r0
 8009996:	4628      	mov	r0, r5
 8009998:	f000 fb14 	bl	8009fc4 <_sbrk_r>
 800999c:	3001      	adds	r0, #1
 800999e:	d101      	bne.n	80099a4 <sbrk_aligned+0x38>
 80099a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80099a4:	4620      	mov	r0, r4
 80099a6:	bd70      	pop	{r4, r5, r6, pc}
 80099a8:	20003258 	.word	0x20003258

080099ac <_malloc_r>:
 80099ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099b0:	1ccd      	adds	r5, r1, #3
 80099b2:	f025 0503 	bic.w	r5, r5, #3
 80099b6:	3508      	adds	r5, #8
 80099b8:	2d0c      	cmp	r5, #12
 80099ba:	bf38      	it	cc
 80099bc:	250c      	movcc	r5, #12
 80099be:	2d00      	cmp	r5, #0
 80099c0:	4607      	mov	r7, r0
 80099c2:	db01      	blt.n	80099c8 <_malloc_r+0x1c>
 80099c4:	42a9      	cmp	r1, r5
 80099c6:	d905      	bls.n	80099d4 <_malloc_r+0x28>
 80099c8:	230c      	movs	r3, #12
 80099ca:	603b      	str	r3, [r7, #0]
 80099cc:	2600      	movs	r6, #0
 80099ce:	4630      	mov	r0, r6
 80099d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009aa8 <_malloc_r+0xfc>
 80099d8:	f000 f9f8 	bl	8009dcc <__malloc_lock>
 80099dc:	f8d8 3000 	ldr.w	r3, [r8]
 80099e0:	461c      	mov	r4, r3
 80099e2:	bb5c      	cbnz	r4, 8009a3c <_malloc_r+0x90>
 80099e4:	4629      	mov	r1, r5
 80099e6:	4638      	mov	r0, r7
 80099e8:	f7ff ffc0 	bl	800996c <sbrk_aligned>
 80099ec:	1c43      	adds	r3, r0, #1
 80099ee:	4604      	mov	r4, r0
 80099f0:	d155      	bne.n	8009a9e <_malloc_r+0xf2>
 80099f2:	f8d8 4000 	ldr.w	r4, [r8]
 80099f6:	4626      	mov	r6, r4
 80099f8:	2e00      	cmp	r6, #0
 80099fa:	d145      	bne.n	8009a88 <_malloc_r+0xdc>
 80099fc:	2c00      	cmp	r4, #0
 80099fe:	d048      	beq.n	8009a92 <_malloc_r+0xe6>
 8009a00:	6823      	ldr	r3, [r4, #0]
 8009a02:	4631      	mov	r1, r6
 8009a04:	4638      	mov	r0, r7
 8009a06:	eb04 0903 	add.w	r9, r4, r3
 8009a0a:	f000 fadb 	bl	8009fc4 <_sbrk_r>
 8009a0e:	4581      	cmp	r9, r0
 8009a10:	d13f      	bne.n	8009a92 <_malloc_r+0xe6>
 8009a12:	6821      	ldr	r1, [r4, #0]
 8009a14:	1a6d      	subs	r5, r5, r1
 8009a16:	4629      	mov	r1, r5
 8009a18:	4638      	mov	r0, r7
 8009a1a:	f7ff ffa7 	bl	800996c <sbrk_aligned>
 8009a1e:	3001      	adds	r0, #1
 8009a20:	d037      	beq.n	8009a92 <_malloc_r+0xe6>
 8009a22:	6823      	ldr	r3, [r4, #0]
 8009a24:	442b      	add	r3, r5
 8009a26:	6023      	str	r3, [r4, #0]
 8009a28:	f8d8 3000 	ldr.w	r3, [r8]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d038      	beq.n	8009aa2 <_malloc_r+0xf6>
 8009a30:	685a      	ldr	r2, [r3, #4]
 8009a32:	42a2      	cmp	r2, r4
 8009a34:	d12b      	bne.n	8009a8e <_malloc_r+0xe2>
 8009a36:	2200      	movs	r2, #0
 8009a38:	605a      	str	r2, [r3, #4]
 8009a3a:	e00f      	b.n	8009a5c <_malloc_r+0xb0>
 8009a3c:	6822      	ldr	r2, [r4, #0]
 8009a3e:	1b52      	subs	r2, r2, r5
 8009a40:	d41f      	bmi.n	8009a82 <_malloc_r+0xd6>
 8009a42:	2a0b      	cmp	r2, #11
 8009a44:	d917      	bls.n	8009a76 <_malloc_r+0xca>
 8009a46:	1961      	adds	r1, r4, r5
 8009a48:	42a3      	cmp	r3, r4
 8009a4a:	6025      	str	r5, [r4, #0]
 8009a4c:	bf18      	it	ne
 8009a4e:	6059      	strne	r1, [r3, #4]
 8009a50:	6863      	ldr	r3, [r4, #4]
 8009a52:	bf08      	it	eq
 8009a54:	f8c8 1000 	streq.w	r1, [r8]
 8009a58:	5162      	str	r2, [r4, r5]
 8009a5a:	604b      	str	r3, [r1, #4]
 8009a5c:	4638      	mov	r0, r7
 8009a5e:	f104 060b 	add.w	r6, r4, #11
 8009a62:	f000 f9b9 	bl	8009dd8 <__malloc_unlock>
 8009a66:	f026 0607 	bic.w	r6, r6, #7
 8009a6a:	1d23      	adds	r3, r4, #4
 8009a6c:	1af2      	subs	r2, r6, r3
 8009a6e:	d0ae      	beq.n	80099ce <_malloc_r+0x22>
 8009a70:	1b9b      	subs	r3, r3, r6
 8009a72:	50a3      	str	r3, [r4, r2]
 8009a74:	e7ab      	b.n	80099ce <_malloc_r+0x22>
 8009a76:	42a3      	cmp	r3, r4
 8009a78:	6862      	ldr	r2, [r4, #4]
 8009a7a:	d1dd      	bne.n	8009a38 <_malloc_r+0x8c>
 8009a7c:	f8c8 2000 	str.w	r2, [r8]
 8009a80:	e7ec      	b.n	8009a5c <_malloc_r+0xb0>
 8009a82:	4623      	mov	r3, r4
 8009a84:	6864      	ldr	r4, [r4, #4]
 8009a86:	e7ac      	b.n	80099e2 <_malloc_r+0x36>
 8009a88:	4634      	mov	r4, r6
 8009a8a:	6876      	ldr	r6, [r6, #4]
 8009a8c:	e7b4      	b.n	80099f8 <_malloc_r+0x4c>
 8009a8e:	4613      	mov	r3, r2
 8009a90:	e7cc      	b.n	8009a2c <_malloc_r+0x80>
 8009a92:	230c      	movs	r3, #12
 8009a94:	603b      	str	r3, [r7, #0]
 8009a96:	4638      	mov	r0, r7
 8009a98:	f000 f99e 	bl	8009dd8 <__malloc_unlock>
 8009a9c:	e797      	b.n	80099ce <_malloc_r+0x22>
 8009a9e:	6025      	str	r5, [r4, #0]
 8009aa0:	e7dc      	b.n	8009a5c <_malloc_r+0xb0>
 8009aa2:	605b      	str	r3, [r3, #4]
 8009aa4:	deff      	udf	#255	; 0xff
 8009aa6:	bf00      	nop
 8009aa8:	20003254 	.word	0x20003254

08009aac <_printf_common>:
 8009aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab0:	4616      	mov	r6, r2
 8009ab2:	4699      	mov	r9, r3
 8009ab4:	688a      	ldr	r2, [r1, #8]
 8009ab6:	690b      	ldr	r3, [r1, #16]
 8009ab8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009abc:	4293      	cmp	r3, r2
 8009abe:	bfb8      	it	lt
 8009ac0:	4613      	movlt	r3, r2
 8009ac2:	6033      	str	r3, [r6, #0]
 8009ac4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ac8:	4607      	mov	r7, r0
 8009aca:	460c      	mov	r4, r1
 8009acc:	b10a      	cbz	r2, 8009ad2 <_printf_common+0x26>
 8009ace:	3301      	adds	r3, #1
 8009ad0:	6033      	str	r3, [r6, #0]
 8009ad2:	6823      	ldr	r3, [r4, #0]
 8009ad4:	0699      	lsls	r1, r3, #26
 8009ad6:	bf42      	ittt	mi
 8009ad8:	6833      	ldrmi	r3, [r6, #0]
 8009ada:	3302      	addmi	r3, #2
 8009adc:	6033      	strmi	r3, [r6, #0]
 8009ade:	6825      	ldr	r5, [r4, #0]
 8009ae0:	f015 0506 	ands.w	r5, r5, #6
 8009ae4:	d106      	bne.n	8009af4 <_printf_common+0x48>
 8009ae6:	f104 0a19 	add.w	sl, r4, #25
 8009aea:	68e3      	ldr	r3, [r4, #12]
 8009aec:	6832      	ldr	r2, [r6, #0]
 8009aee:	1a9b      	subs	r3, r3, r2
 8009af0:	42ab      	cmp	r3, r5
 8009af2:	dc26      	bgt.n	8009b42 <_printf_common+0x96>
 8009af4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009af8:	1e13      	subs	r3, r2, #0
 8009afa:	6822      	ldr	r2, [r4, #0]
 8009afc:	bf18      	it	ne
 8009afe:	2301      	movne	r3, #1
 8009b00:	0692      	lsls	r2, r2, #26
 8009b02:	d42b      	bmi.n	8009b5c <_printf_common+0xb0>
 8009b04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b08:	4649      	mov	r1, r9
 8009b0a:	4638      	mov	r0, r7
 8009b0c:	47c0      	blx	r8
 8009b0e:	3001      	adds	r0, #1
 8009b10:	d01e      	beq.n	8009b50 <_printf_common+0xa4>
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	6922      	ldr	r2, [r4, #16]
 8009b16:	f003 0306 	and.w	r3, r3, #6
 8009b1a:	2b04      	cmp	r3, #4
 8009b1c:	bf02      	ittt	eq
 8009b1e:	68e5      	ldreq	r5, [r4, #12]
 8009b20:	6833      	ldreq	r3, [r6, #0]
 8009b22:	1aed      	subeq	r5, r5, r3
 8009b24:	68a3      	ldr	r3, [r4, #8]
 8009b26:	bf0c      	ite	eq
 8009b28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b2c:	2500      	movne	r5, #0
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	bfc4      	itt	gt
 8009b32:	1a9b      	subgt	r3, r3, r2
 8009b34:	18ed      	addgt	r5, r5, r3
 8009b36:	2600      	movs	r6, #0
 8009b38:	341a      	adds	r4, #26
 8009b3a:	42b5      	cmp	r5, r6
 8009b3c:	d11a      	bne.n	8009b74 <_printf_common+0xc8>
 8009b3e:	2000      	movs	r0, #0
 8009b40:	e008      	b.n	8009b54 <_printf_common+0xa8>
 8009b42:	2301      	movs	r3, #1
 8009b44:	4652      	mov	r2, sl
 8009b46:	4649      	mov	r1, r9
 8009b48:	4638      	mov	r0, r7
 8009b4a:	47c0      	blx	r8
 8009b4c:	3001      	adds	r0, #1
 8009b4e:	d103      	bne.n	8009b58 <_printf_common+0xac>
 8009b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b58:	3501      	adds	r5, #1
 8009b5a:	e7c6      	b.n	8009aea <_printf_common+0x3e>
 8009b5c:	18e1      	adds	r1, r4, r3
 8009b5e:	1c5a      	adds	r2, r3, #1
 8009b60:	2030      	movs	r0, #48	; 0x30
 8009b62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b66:	4422      	add	r2, r4
 8009b68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b70:	3302      	adds	r3, #2
 8009b72:	e7c7      	b.n	8009b04 <_printf_common+0x58>
 8009b74:	2301      	movs	r3, #1
 8009b76:	4622      	mov	r2, r4
 8009b78:	4649      	mov	r1, r9
 8009b7a:	4638      	mov	r0, r7
 8009b7c:	47c0      	blx	r8
 8009b7e:	3001      	adds	r0, #1
 8009b80:	d0e6      	beq.n	8009b50 <_printf_common+0xa4>
 8009b82:	3601      	adds	r6, #1
 8009b84:	e7d9      	b.n	8009b3a <_printf_common+0x8e>
	...

08009b88 <_printf_i>:
 8009b88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b8c:	7e0f      	ldrb	r7, [r1, #24]
 8009b8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b90:	2f78      	cmp	r7, #120	; 0x78
 8009b92:	4691      	mov	r9, r2
 8009b94:	4680      	mov	r8, r0
 8009b96:	460c      	mov	r4, r1
 8009b98:	469a      	mov	sl, r3
 8009b9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b9e:	d807      	bhi.n	8009bb0 <_printf_i+0x28>
 8009ba0:	2f62      	cmp	r7, #98	; 0x62
 8009ba2:	d80a      	bhi.n	8009bba <_printf_i+0x32>
 8009ba4:	2f00      	cmp	r7, #0
 8009ba6:	f000 80d4 	beq.w	8009d52 <_printf_i+0x1ca>
 8009baa:	2f58      	cmp	r7, #88	; 0x58
 8009bac:	f000 80c0 	beq.w	8009d30 <_printf_i+0x1a8>
 8009bb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009bb8:	e03a      	b.n	8009c30 <_printf_i+0xa8>
 8009bba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bbe:	2b15      	cmp	r3, #21
 8009bc0:	d8f6      	bhi.n	8009bb0 <_printf_i+0x28>
 8009bc2:	a101      	add	r1, pc, #4	; (adr r1, 8009bc8 <_printf_i+0x40>)
 8009bc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bc8:	08009c21 	.word	0x08009c21
 8009bcc:	08009c35 	.word	0x08009c35
 8009bd0:	08009bb1 	.word	0x08009bb1
 8009bd4:	08009bb1 	.word	0x08009bb1
 8009bd8:	08009bb1 	.word	0x08009bb1
 8009bdc:	08009bb1 	.word	0x08009bb1
 8009be0:	08009c35 	.word	0x08009c35
 8009be4:	08009bb1 	.word	0x08009bb1
 8009be8:	08009bb1 	.word	0x08009bb1
 8009bec:	08009bb1 	.word	0x08009bb1
 8009bf0:	08009bb1 	.word	0x08009bb1
 8009bf4:	08009d39 	.word	0x08009d39
 8009bf8:	08009c61 	.word	0x08009c61
 8009bfc:	08009cf3 	.word	0x08009cf3
 8009c00:	08009bb1 	.word	0x08009bb1
 8009c04:	08009bb1 	.word	0x08009bb1
 8009c08:	08009d5b 	.word	0x08009d5b
 8009c0c:	08009bb1 	.word	0x08009bb1
 8009c10:	08009c61 	.word	0x08009c61
 8009c14:	08009bb1 	.word	0x08009bb1
 8009c18:	08009bb1 	.word	0x08009bb1
 8009c1c:	08009cfb 	.word	0x08009cfb
 8009c20:	682b      	ldr	r3, [r5, #0]
 8009c22:	1d1a      	adds	r2, r3, #4
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	602a      	str	r2, [r5, #0]
 8009c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c30:	2301      	movs	r3, #1
 8009c32:	e09f      	b.n	8009d74 <_printf_i+0x1ec>
 8009c34:	6820      	ldr	r0, [r4, #0]
 8009c36:	682b      	ldr	r3, [r5, #0]
 8009c38:	0607      	lsls	r7, r0, #24
 8009c3a:	f103 0104 	add.w	r1, r3, #4
 8009c3e:	6029      	str	r1, [r5, #0]
 8009c40:	d501      	bpl.n	8009c46 <_printf_i+0xbe>
 8009c42:	681e      	ldr	r6, [r3, #0]
 8009c44:	e003      	b.n	8009c4e <_printf_i+0xc6>
 8009c46:	0646      	lsls	r6, r0, #25
 8009c48:	d5fb      	bpl.n	8009c42 <_printf_i+0xba>
 8009c4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009c4e:	2e00      	cmp	r6, #0
 8009c50:	da03      	bge.n	8009c5a <_printf_i+0xd2>
 8009c52:	232d      	movs	r3, #45	; 0x2d
 8009c54:	4276      	negs	r6, r6
 8009c56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c5a:	485a      	ldr	r0, [pc, #360]	; (8009dc4 <_printf_i+0x23c>)
 8009c5c:	230a      	movs	r3, #10
 8009c5e:	e012      	b.n	8009c86 <_printf_i+0xfe>
 8009c60:	682b      	ldr	r3, [r5, #0]
 8009c62:	6820      	ldr	r0, [r4, #0]
 8009c64:	1d19      	adds	r1, r3, #4
 8009c66:	6029      	str	r1, [r5, #0]
 8009c68:	0605      	lsls	r5, r0, #24
 8009c6a:	d501      	bpl.n	8009c70 <_printf_i+0xe8>
 8009c6c:	681e      	ldr	r6, [r3, #0]
 8009c6e:	e002      	b.n	8009c76 <_printf_i+0xee>
 8009c70:	0641      	lsls	r1, r0, #25
 8009c72:	d5fb      	bpl.n	8009c6c <_printf_i+0xe4>
 8009c74:	881e      	ldrh	r6, [r3, #0]
 8009c76:	4853      	ldr	r0, [pc, #332]	; (8009dc4 <_printf_i+0x23c>)
 8009c78:	2f6f      	cmp	r7, #111	; 0x6f
 8009c7a:	bf0c      	ite	eq
 8009c7c:	2308      	moveq	r3, #8
 8009c7e:	230a      	movne	r3, #10
 8009c80:	2100      	movs	r1, #0
 8009c82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c86:	6865      	ldr	r5, [r4, #4]
 8009c88:	60a5      	str	r5, [r4, #8]
 8009c8a:	2d00      	cmp	r5, #0
 8009c8c:	bfa2      	ittt	ge
 8009c8e:	6821      	ldrge	r1, [r4, #0]
 8009c90:	f021 0104 	bicge.w	r1, r1, #4
 8009c94:	6021      	strge	r1, [r4, #0]
 8009c96:	b90e      	cbnz	r6, 8009c9c <_printf_i+0x114>
 8009c98:	2d00      	cmp	r5, #0
 8009c9a:	d04b      	beq.n	8009d34 <_printf_i+0x1ac>
 8009c9c:	4615      	mov	r5, r2
 8009c9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ca2:	fb03 6711 	mls	r7, r3, r1, r6
 8009ca6:	5dc7      	ldrb	r7, [r0, r7]
 8009ca8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009cac:	4637      	mov	r7, r6
 8009cae:	42bb      	cmp	r3, r7
 8009cb0:	460e      	mov	r6, r1
 8009cb2:	d9f4      	bls.n	8009c9e <_printf_i+0x116>
 8009cb4:	2b08      	cmp	r3, #8
 8009cb6:	d10b      	bne.n	8009cd0 <_printf_i+0x148>
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	07de      	lsls	r6, r3, #31
 8009cbc:	d508      	bpl.n	8009cd0 <_printf_i+0x148>
 8009cbe:	6923      	ldr	r3, [r4, #16]
 8009cc0:	6861      	ldr	r1, [r4, #4]
 8009cc2:	4299      	cmp	r1, r3
 8009cc4:	bfde      	ittt	le
 8009cc6:	2330      	movle	r3, #48	; 0x30
 8009cc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ccc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009cd0:	1b52      	subs	r2, r2, r5
 8009cd2:	6122      	str	r2, [r4, #16]
 8009cd4:	f8cd a000 	str.w	sl, [sp]
 8009cd8:	464b      	mov	r3, r9
 8009cda:	aa03      	add	r2, sp, #12
 8009cdc:	4621      	mov	r1, r4
 8009cde:	4640      	mov	r0, r8
 8009ce0:	f7ff fee4 	bl	8009aac <_printf_common>
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	d14a      	bne.n	8009d7e <_printf_i+0x1f6>
 8009ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cec:	b004      	add	sp, #16
 8009cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cf2:	6823      	ldr	r3, [r4, #0]
 8009cf4:	f043 0320 	orr.w	r3, r3, #32
 8009cf8:	6023      	str	r3, [r4, #0]
 8009cfa:	4833      	ldr	r0, [pc, #204]	; (8009dc8 <_printf_i+0x240>)
 8009cfc:	2778      	movs	r7, #120	; 0x78
 8009cfe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009d02:	6823      	ldr	r3, [r4, #0]
 8009d04:	6829      	ldr	r1, [r5, #0]
 8009d06:	061f      	lsls	r7, r3, #24
 8009d08:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d0c:	d402      	bmi.n	8009d14 <_printf_i+0x18c>
 8009d0e:	065f      	lsls	r7, r3, #25
 8009d10:	bf48      	it	mi
 8009d12:	b2b6      	uxthmi	r6, r6
 8009d14:	07df      	lsls	r7, r3, #31
 8009d16:	bf48      	it	mi
 8009d18:	f043 0320 	orrmi.w	r3, r3, #32
 8009d1c:	6029      	str	r1, [r5, #0]
 8009d1e:	bf48      	it	mi
 8009d20:	6023      	strmi	r3, [r4, #0]
 8009d22:	b91e      	cbnz	r6, 8009d2c <_printf_i+0x1a4>
 8009d24:	6823      	ldr	r3, [r4, #0]
 8009d26:	f023 0320 	bic.w	r3, r3, #32
 8009d2a:	6023      	str	r3, [r4, #0]
 8009d2c:	2310      	movs	r3, #16
 8009d2e:	e7a7      	b.n	8009c80 <_printf_i+0xf8>
 8009d30:	4824      	ldr	r0, [pc, #144]	; (8009dc4 <_printf_i+0x23c>)
 8009d32:	e7e4      	b.n	8009cfe <_printf_i+0x176>
 8009d34:	4615      	mov	r5, r2
 8009d36:	e7bd      	b.n	8009cb4 <_printf_i+0x12c>
 8009d38:	682b      	ldr	r3, [r5, #0]
 8009d3a:	6826      	ldr	r6, [r4, #0]
 8009d3c:	6961      	ldr	r1, [r4, #20]
 8009d3e:	1d18      	adds	r0, r3, #4
 8009d40:	6028      	str	r0, [r5, #0]
 8009d42:	0635      	lsls	r5, r6, #24
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	d501      	bpl.n	8009d4c <_printf_i+0x1c4>
 8009d48:	6019      	str	r1, [r3, #0]
 8009d4a:	e002      	b.n	8009d52 <_printf_i+0x1ca>
 8009d4c:	0670      	lsls	r0, r6, #25
 8009d4e:	d5fb      	bpl.n	8009d48 <_printf_i+0x1c0>
 8009d50:	8019      	strh	r1, [r3, #0]
 8009d52:	2300      	movs	r3, #0
 8009d54:	6123      	str	r3, [r4, #16]
 8009d56:	4615      	mov	r5, r2
 8009d58:	e7bc      	b.n	8009cd4 <_printf_i+0x14c>
 8009d5a:	682b      	ldr	r3, [r5, #0]
 8009d5c:	1d1a      	adds	r2, r3, #4
 8009d5e:	602a      	str	r2, [r5, #0]
 8009d60:	681d      	ldr	r5, [r3, #0]
 8009d62:	6862      	ldr	r2, [r4, #4]
 8009d64:	2100      	movs	r1, #0
 8009d66:	4628      	mov	r0, r5
 8009d68:	f7f6 fa52 	bl	8000210 <memchr>
 8009d6c:	b108      	cbz	r0, 8009d72 <_printf_i+0x1ea>
 8009d6e:	1b40      	subs	r0, r0, r5
 8009d70:	6060      	str	r0, [r4, #4]
 8009d72:	6863      	ldr	r3, [r4, #4]
 8009d74:	6123      	str	r3, [r4, #16]
 8009d76:	2300      	movs	r3, #0
 8009d78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d7c:	e7aa      	b.n	8009cd4 <_printf_i+0x14c>
 8009d7e:	6923      	ldr	r3, [r4, #16]
 8009d80:	462a      	mov	r2, r5
 8009d82:	4649      	mov	r1, r9
 8009d84:	4640      	mov	r0, r8
 8009d86:	47d0      	blx	sl
 8009d88:	3001      	adds	r0, #1
 8009d8a:	d0ad      	beq.n	8009ce8 <_printf_i+0x160>
 8009d8c:	6823      	ldr	r3, [r4, #0]
 8009d8e:	079b      	lsls	r3, r3, #30
 8009d90:	d413      	bmi.n	8009dba <_printf_i+0x232>
 8009d92:	68e0      	ldr	r0, [r4, #12]
 8009d94:	9b03      	ldr	r3, [sp, #12]
 8009d96:	4298      	cmp	r0, r3
 8009d98:	bfb8      	it	lt
 8009d9a:	4618      	movlt	r0, r3
 8009d9c:	e7a6      	b.n	8009cec <_printf_i+0x164>
 8009d9e:	2301      	movs	r3, #1
 8009da0:	4632      	mov	r2, r6
 8009da2:	4649      	mov	r1, r9
 8009da4:	4640      	mov	r0, r8
 8009da6:	47d0      	blx	sl
 8009da8:	3001      	adds	r0, #1
 8009daa:	d09d      	beq.n	8009ce8 <_printf_i+0x160>
 8009dac:	3501      	adds	r5, #1
 8009dae:	68e3      	ldr	r3, [r4, #12]
 8009db0:	9903      	ldr	r1, [sp, #12]
 8009db2:	1a5b      	subs	r3, r3, r1
 8009db4:	42ab      	cmp	r3, r5
 8009db6:	dcf2      	bgt.n	8009d9e <_printf_i+0x216>
 8009db8:	e7eb      	b.n	8009d92 <_printf_i+0x20a>
 8009dba:	2500      	movs	r5, #0
 8009dbc:	f104 0619 	add.w	r6, r4, #25
 8009dc0:	e7f5      	b.n	8009dae <_printf_i+0x226>
 8009dc2:	bf00      	nop
 8009dc4:	0800c64a 	.word	0x0800c64a
 8009dc8:	0800c65b 	.word	0x0800c65b

08009dcc <__malloc_lock>:
 8009dcc:	4801      	ldr	r0, [pc, #4]	; (8009dd4 <__malloc_lock+0x8>)
 8009dce:	f000 b933 	b.w	800a038 <__retarget_lock_acquire_recursive>
 8009dd2:	bf00      	nop
 8009dd4:	20003398 	.word	0x20003398

08009dd8 <__malloc_unlock>:
 8009dd8:	4801      	ldr	r0, [pc, #4]	; (8009de0 <__malloc_unlock+0x8>)
 8009dda:	f000 b92e 	b.w	800a03a <__retarget_lock_release_recursive>
 8009dde:	bf00      	nop
 8009de0:	20003398 	.word	0x20003398

08009de4 <siprintf>:
 8009de4:	b40e      	push	{r1, r2, r3}
 8009de6:	b500      	push	{lr}
 8009de8:	b09c      	sub	sp, #112	; 0x70
 8009dea:	ab1d      	add	r3, sp, #116	; 0x74
 8009dec:	9002      	str	r0, [sp, #8]
 8009dee:	9006      	str	r0, [sp, #24]
 8009df0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009df4:	4809      	ldr	r0, [pc, #36]	; (8009e1c <siprintf+0x38>)
 8009df6:	9107      	str	r1, [sp, #28]
 8009df8:	9104      	str	r1, [sp, #16]
 8009dfa:	4909      	ldr	r1, [pc, #36]	; (8009e20 <siprintf+0x3c>)
 8009dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e00:	9105      	str	r1, [sp, #20]
 8009e02:	6800      	ldr	r0, [r0, #0]
 8009e04:	9301      	str	r3, [sp, #4]
 8009e06:	a902      	add	r1, sp, #8
 8009e08:	f001 f83a 	bl	800ae80 <_svfiprintf_r>
 8009e0c:	9b02      	ldr	r3, [sp, #8]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	701a      	strb	r2, [r3, #0]
 8009e12:	b01c      	add	sp, #112	; 0x70
 8009e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e18:	b003      	add	sp, #12
 8009e1a:	4770      	bx	lr
 8009e1c:	20002440 	.word	0x20002440
 8009e20:	ffff0208 	.word	0xffff0208

08009e24 <std>:
 8009e24:	2300      	movs	r3, #0
 8009e26:	b510      	push	{r4, lr}
 8009e28:	4604      	mov	r4, r0
 8009e2a:	e9c0 3300 	strd	r3, r3, [r0]
 8009e2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e32:	6083      	str	r3, [r0, #8]
 8009e34:	8181      	strh	r1, [r0, #12]
 8009e36:	6643      	str	r3, [r0, #100]	; 0x64
 8009e38:	81c2      	strh	r2, [r0, #14]
 8009e3a:	6183      	str	r3, [r0, #24]
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	2208      	movs	r2, #8
 8009e40:	305c      	adds	r0, #92	; 0x5c
 8009e42:	f000 f8b2 	bl	8009faa <memset>
 8009e46:	4b05      	ldr	r3, [pc, #20]	; (8009e5c <std+0x38>)
 8009e48:	6263      	str	r3, [r4, #36]	; 0x24
 8009e4a:	4b05      	ldr	r3, [pc, #20]	; (8009e60 <std+0x3c>)
 8009e4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e4e:	4b05      	ldr	r3, [pc, #20]	; (8009e64 <std+0x40>)
 8009e50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e52:	4b05      	ldr	r3, [pc, #20]	; (8009e68 <std+0x44>)
 8009e54:	6224      	str	r4, [r4, #32]
 8009e56:	6323      	str	r3, [r4, #48]	; 0x30
 8009e58:	bd10      	pop	{r4, pc}
 8009e5a:	bf00      	nop
 8009e5c:	0800b8d1 	.word	0x0800b8d1
 8009e60:	0800b8f3 	.word	0x0800b8f3
 8009e64:	0800b92b 	.word	0x0800b92b
 8009e68:	0800b94f 	.word	0x0800b94f

08009e6c <stdio_exit_handler>:
 8009e6c:	4a02      	ldr	r2, [pc, #8]	; (8009e78 <stdio_exit_handler+0xc>)
 8009e6e:	4903      	ldr	r1, [pc, #12]	; (8009e7c <stdio_exit_handler+0x10>)
 8009e70:	4803      	ldr	r0, [pc, #12]	; (8009e80 <stdio_exit_handler+0x14>)
 8009e72:	f000 b869 	b.w	8009f48 <_fwalk_sglue>
 8009e76:	bf00      	nop
 8009e78:	200023e8 	.word	0x200023e8
 8009e7c:	0800b189 	.word	0x0800b189
 8009e80:	200023f4 	.word	0x200023f4

08009e84 <cleanup_stdio>:
 8009e84:	6841      	ldr	r1, [r0, #4]
 8009e86:	4b0c      	ldr	r3, [pc, #48]	; (8009eb8 <cleanup_stdio+0x34>)
 8009e88:	4299      	cmp	r1, r3
 8009e8a:	b510      	push	{r4, lr}
 8009e8c:	4604      	mov	r4, r0
 8009e8e:	d001      	beq.n	8009e94 <cleanup_stdio+0x10>
 8009e90:	f001 f97a 	bl	800b188 <_fflush_r>
 8009e94:	68a1      	ldr	r1, [r4, #8]
 8009e96:	4b09      	ldr	r3, [pc, #36]	; (8009ebc <cleanup_stdio+0x38>)
 8009e98:	4299      	cmp	r1, r3
 8009e9a:	d002      	beq.n	8009ea2 <cleanup_stdio+0x1e>
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f001 f973 	bl	800b188 <_fflush_r>
 8009ea2:	68e1      	ldr	r1, [r4, #12]
 8009ea4:	4b06      	ldr	r3, [pc, #24]	; (8009ec0 <cleanup_stdio+0x3c>)
 8009ea6:	4299      	cmp	r1, r3
 8009ea8:	d004      	beq.n	8009eb4 <cleanup_stdio+0x30>
 8009eaa:	4620      	mov	r0, r4
 8009eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009eb0:	f001 b96a 	b.w	800b188 <_fflush_r>
 8009eb4:	bd10      	pop	{r4, pc}
 8009eb6:	bf00      	nop
 8009eb8:	2000325c 	.word	0x2000325c
 8009ebc:	200032c4 	.word	0x200032c4
 8009ec0:	2000332c 	.word	0x2000332c

08009ec4 <global_stdio_init.part.0>:
 8009ec4:	b510      	push	{r4, lr}
 8009ec6:	4b0b      	ldr	r3, [pc, #44]	; (8009ef4 <global_stdio_init.part.0+0x30>)
 8009ec8:	4c0b      	ldr	r4, [pc, #44]	; (8009ef8 <global_stdio_init.part.0+0x34>)
 8009eca:	4a0c      	ldr	r2, [pc, #48]	; (8009efc <global_stdio_init.part.0+0x38>)
 8009ecc:	601a      	str	r2, [r3, #0]
 8009ece:	4620      	mov	r0, r4
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	2104      	movs	r1, #4
 8009ed4:	f7ff ffa6 	bl	8009e24 <std>
 8009ed8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009edc:	2201      	movs	r2, #1
 8009ede:	2109      	movs	r1, #9
 8009ee0:	f7ff ffa0 	bl	8009e24 <std>
 8009ee4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009ee8:	2202      	movs	r2, #2
 8009eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009eee:	2112      	movs	r1, #18
 8009ef0:	f7ff bf98 	b.w	8009e24 <std>
 8009ef4:	20003394 	.word	0x20003394
 8009ef8:	2000325c 	.word	0x2000325c
 8009efc:	08009e6d 	.word	0x08009e6d

08009f00 <__sfp_lock_acquire>:
 8009f00:	4801      	ldr	r0, [pc, #4]	; (8009f08 <__sfp_lock_acquire+0x8>)
 8009f02:	f000 b899 	b.w	800a038 <__retarget_lock_acquire_recursive>
 8009f06:	bf00      	nop
 8009f08:	20003399 	.word	0x20003399

08009f0c <__sfp_lock_release>:
 8009f0c:	4801      	ldr	r0, [pc, #4]	; (8009f14 <__sfp_lock_release+0x8>)
 8009f0e:	f000 b894 	b.w	800a03a <__retarget_lock_release_recursive>
 8009f12:	bf00      	nop
 8009f14:	20003399 	.word	0x20003399

08009f18 <__sinit>:
 8009f18:	b510      	push	{r4, lr}
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	f7ff fff0 	bl	8009f00 <__sfp_lock_acquire>
 8009f20:	6a23      	ldr	r3, [r4, #32]
 8009f22:	b11b      	cbz	r3, 8009f2c <__sinit+0x14>
 8009f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f28:	f7ff bff0 	b.w	8009f0c <__sfp_lock_release>
 8009f2c:	4b04      	ldr	r3, [pc, #16]	; (8009f40 <__sinit+0x28>)
 8009f2e:	6223      	str	r3, [r4, #32]
 8009f30:	4b04      	ldr	r3, [pc, #16]	; (8009f44 <__sinit+0x2c>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d1f5      	bne.n	8009f24 <__sinit+0xc>
 8009f38:	f7ff ffc4 	bl	8009ec4 <global_stdio_init.part.0>
 8009f3c:	e7f2      	b.n	8009f24 <__sinit+0xc>
 8009f3e:	bf00      	nop
 8009f40:	08009e85 	.word	0x08009e85
 8009f44:	20003394 	.word	0x20003394

08009f48 <_fwalk_sglue>:
 8009f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f4c:	4607      	mov	r7, r0
 8009f4e:	4688      	mov	r8, r1
 8009f50:	4614      	mov	r4, r2
 8009f52:	2600      	movs	r6, #0
 8009f54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f58:	f1b9 0901 	subs.w	r9, r9, #1
 8009f5c:	d505      	bpl.n	8009f6a <_fwalk_sglue+0x22>
 8009f5e:	6824      	ldr	r4, [r4, #0]
 8009f60:	2c00      	cmp	r4, #0
 8009f62:	d1f7      	bne.n	8009f54 <_fwalk_sglue+0xc>
 8009f64:	4630      	mov	r0, r6
 8009f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f6a:	89ab      	ldrh	r3, [r5, #12]
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d907      	bls.n	8009f80 <_fwalk_sglue+0x38>
 8009f70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f74:	3301      	adds	r3, #1
 8009f76:	d003      	beq.n	8009f80 <_fwalk_sglue+0x38>
 8009f78:	4629      	mov	r1, r5
 8009f7a:	4638      	mov	r0, r7
 8009f7c:	47c0      	blx	r8
 8009f7e:	4306      	orrs	r6, r0
 8009f80:	3568      	adds	r5, #104	; 0x68
 8009f82:	e7e9      	b.n	8009f58 <_fwalk_sglue+0x10>

08009f84 <strncat>:
 8009f84:	b530      	push	{r4, r5, lr}
 8009f86:	4604      	mov	r4, r0
 8009f88:	7825      	ldrb	r5, [r4, #0]
 8009f8a:	4623      	mov	r3, r4
 8009f8c:	3401      	adds	r4, #1
 8009f8e:	2d00      	cmp	r5, #0
 8009f90:	d1fa      	bne.n	8009f88 <strncat+0x4>
 8009f92:	3a01      	subs	r2, #1
 8009f94:	d304      	bcc.n	8009fa0 <strncat+0x1c>
 8009f96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f9a:	f803 4b01 	strb.w	r4, [r3], #1
 8009f9e:	b904      	cbnz	r4, 8009fa2 <strncat+0x1e>
 8009fa0:	bd30      	pop	{r4, r5, pc}
 8009fa2:	2a00      	cmp	r2, #0
 8009fa4:	d1f5      	bne.n	8009f92 <strncat+0xe>
 8009fa6:	701a      	strb	r2, [r3, #0]
 8009fa8:	e7f3      	b.n	8009f92 <strncat+0xe>

08009faa <memset>:
 8009faa:	4402      	add	r2, r0
 8009fac:	4603      	mov	r3, r0
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d100      	bne.n	8009fb4 <memset+0xa>
 8009fb2:	4770      	bx	lr
 8009fb4:	f803 1b01 	strb.w	r1, [r3], #1
 8009fb8:	e7f9      	b.n	8009fae <memset+0x4>
	...

08009fbc <_localeconv_r>:
 8009fbc:	4800      	ldr	r0, [pc, #0]	; (8009fc0 <_localeconv_r+0x4>)
 8009fbe:	4770      	bx	lr
 8009fc0:	20002534 	.word	0x20002534

08009fc4 <_sbrk_r>:
 8009fc4:	b538      	push	{r3, r4, r5, lr}
 8009fc6:	4d06      	ldr	r5, [pc, #24]	; (8009fe0 <_sbrk_r+0x1c>)
 8009fc8:	2300      	movs	r3, #0
 8009fca:	4604      	mov	r4, r0
 8009fcc:	4608      	mov	r0, r1
 8009fce:	602b      	str	r3, [r5, #0]
 8009fd0:	f7fa febe 	bl	8004d50 <_sbrk>
 8009fd4:	1c43      	adds	r3, r0, #1
 8009fd6:	d102      	bne.n	8009fde <_sbrk_r+0x1a>
 8009fd8:	682b      	ldr	r3, [r5, #0]
 8009fda:	b103      	cbz	r3, 8009fde <_sbrk_r+0x1a>
 8009fdc:	6023      	str	r3, [r4, #0]
 8009fde:	bd38      	pop	{r3, r4, r5, pc}
 8009fe0:	2000339c 	.word	0x2000339c

08009fe4 <__errno>:
 8009fe4:	4b01      	ldr	r3, [pc, #4]	; (8009fec <__errno+0x8>)
 8009fe6:	6818      	ldr	r0, [r3, #0]
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	20002440 	.word	0x20002440

08009ff0 <__libc_init_array>:
 8009ff0:	b570      	push	{r4, r5, r6, lr}
 8009ff2:	4d0d      	ldr	r5, [pc, #52]	; (800a028 <__libc_init_array+0x38>)
 8009ff4:	4c0d      	ldr	r4, [pc, #52]	; (800a02c <__libc_init_array+0x3c>)
 8009ff6:	1b64      	subs	r4, r4, r5
 8009ff8:	10a4      	asrs	r4, r4, #2
 8009ffa:	2600      	movs	r6, #0
 8009ffc:	42a6      	cmp	r6, r4
 8009ffe:	d109      	bne.n	800a014 <__libc_init_array+0x24>
 800a000:	4d0b      	ldr	r5, [pc, #44]	; (800a030 <__libc_init_array+0x40>)
 800a002:	4c0c      	ldr	r4, [pc, #48]	; (800a034 <__libc_init_array+0x44>)
 800a004:	f002 f8a2 	bl	800c14c <_init>
 800a008:	1b64      	subs	r4, r4, r5
 800a00a:	10a4      	asrs	r4, r4, #2
 800a00c:	2600      	movs	r6, #0
 800a00e:	42a6      	cmp	r6, r4
 800a010:	d105      	bne.n	800a01e <__libc_init_array+0x2e>
 800a012:	bd70      	pop	{r4, r5, r6, pc}
 800a014:	f855 3b04 	ldr.w	r3, [r5], #4
 800a018:	4798      	blx	r3
 800a01a:	3601      	adds	r6, #1
 800a01c:	e7ee      	b.n	8009ffc <__libc_init_array+0xc>
 800a01e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a022:	4798      	blx	r3
 800a024:	3601      	adds	r6, #1
 800a026:	e7f2      	b.n	800a00e <__libc_init_array+0x1e>
 800a028:	0800c9b4 	.word	0x0800c9b4
 800a02c:	0800c9b4 	.word	0x0800c9b4
 800a030:	0800c9b4 	.word	0x0800c9b4
 800a034:	0800c9b8 	.word	0x0800c9b8

0800a038 <__retarget_lock_acquire_recursive>:
 800a038:	4770      	bx	lr

0800a03a <__retarget_lock_release_recursive>:
 800a03a:	4770      	bx	lr

0800a03c <quorem>:
 800a03c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a040:	6903      	ldr	r3, [r0, #16]
 800a042:	690c      	ldr	r4, [r1, #16]
 800a044:	42a3      	cmp	r3, r4
 800a046:	4607      	mov	r7, r0
 800a048:	db7e      	blt.n	800a148 <quorem+0x10c>
 800a04a:	3c01      	subs	r4, #1
 800a04c:	f101 0814 	add.w	r8, r1, #20
 800a050:	f100 0514 	add.w	r5, r0, #20
 800a054:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a058:	9301      	str	r3, [sp, #4]
 800a05a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a05e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a062:	3301      	adds	r3, #1
 800a064:	429a      	cmp	r2, r3
 800a066:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a06a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a06e:	fbb2 f6f3 	udiv	r6, r2, r3
 800a072:	d331      	bcc.n	800a0d8 <quorem+0x9c>
 800a074:	f04f 0e00 	mov.w	lr, #0
 800a078:	4640      	mov	r0, r8
 800a07a:	46ac      	mov	ip, r5
 800a07c:	46f2      	mov	sl, lr
 800a07e:	f850 2b04 	ldr.w	r2, [r0], #4
 800a082:	b293      	uxth	r3, r2
 800a084:	fb06 e303 	mla	r3, r6, r3, lr
 800a088:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a08c:	0c1a      	lsrs	r2, r3, #16
 800a08e:	b29b      	uxth	r3, r3
 800a090:	ebaa 0303 	sub.w	r3, sl, r3
 800a094:	f8dc a000 	ldr.w	sl, [ip]
 800a098:	fa13 f38a 	uxtah	r3, r3, sl
 800a09c:	fb06 220e 	mla	r2, r6, lr, r2
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	9b00      	ldr	r3, [sp, #0]
 800a0a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a0a8:	b292      	uxth	r2, r2
 800a0aa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a0ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0b2:	f8bd 3000 	ldrh.w	r3, [sp]
 800a0b6:	4581      	cmp	r9, r0
 800a0b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0bc:	f84c 3b04 	str.w	r3, [ip], #4
 800a0c0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a0c4:	d2db      	bcs.n	800a07e <quorem+0x42>
 800a0c6:	f855 300b 	ldr.w	r3, [r5, fp]
 800a0ca:	b92b      	cbnz	r3, 800a0d8 <quorem+0x9c>
 800a0cc:	9b01      	ldr	r3, [sp, #4]
 800a0ce:	3b04      	subs	r3, #4
 800a0d0:	429d      	cmp	r5, r3
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	d32c      	bcc.n	800a130 <quorem+0xf4>
 800a0d6:	613c      	str	r4, [r7, #16]
 800a0d8:	4638      	mov	r0, r7
 800a0da:	f001 faf9 	bl	800b6d0 <__mcmp>
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	db22      	blt.n	800a128 <quorem+0xec>
 800a0e2:	3601      	adds	r6, #1
 800a0e4:	4629      	mov	r1, r5
 800a0e6:	2000      	movs	r0, #0
 800a0e8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a0ec:	f8d1 c000 	ldr.w	ip, [r1]
 800a0f0:	b293      	uxth	r3, r2
 800a0f2:	1ac3      	subs	r3, r0, r3
 800a0f4:	0c12      	lsrs	r2, r2, #16
 800a0f6:	fa13 f38c 	uxtah	r3, r3, ip
 800a0fa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a0fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a102:	b29b      	uxth	r3, r3
 800a104:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a108:	45c1      	cmp	r9, r8
 800a10a:	f841 3b04 	str.w	r3, [r1], #4
 800a10e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a112:	d2e9      	bcs.n	800a0e8 <quorem+0xac>
 800a114:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a118:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a11c:	b922      	cbnz	r2, 800a128 <quorem+0xec>
 800a11e:	3b04      	subs	r3, #4
 800a120:	429d      	cmp	r5, r3
 800a122:	461a      	mov	r2, r3
 800a124:	d30a      	bcc.n	800a13c <quorem+0x100>
 800a126:	613c      	str	r4, [r7, #16]
 800a128:	4630      	mov	r0, r6
 800a12a:	b003      	add	sp, #12
 800a12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a130:	6812      	ldr	r2, [r2, #0]
 800a132:	3b04      	subs	r3, #4
 800a134:	2a00      	cmp	r2, #0
 800a136:	d1ce      	bne.n	800a0d6 <quorem+0x9a>
 800a138:	3c01      	subs	r4, #1
 800a13a:	e7c9      	b.n	800a0d0 <quorem+0x94>
 800a13c:	6812      	ldr	r2, [r2, #0]
 800a13e:	3b04      	subs	r3, #4
 800a140:	2a00      	cmp	r2, #0
 800a142:	d1f0      	bne.n	800a126 <quorem+0xea>
 800a144:	3c01      	subs	r4, #1
 800a146:	e7eb      	b.n	800a120 <quorem+0xe4>
 800a148:	2000      	movs	r0, #0
 800a14a:	e7ee      	b.n	800a12a <quorem+0xee>
 800a14c:	0000      	movs	r0, r0
	...

0800a150 <_dtoa_r>:
 800a150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a154:	ed2d 8b04 	vpush	{d8-d9}
 800a158:	69c5      	ldr	r5, [r0, #28]
 800a15a:	b093      	sub	sp, #76	; 0x4c
 800a15c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a160:	ec57 6b10 	vmov	r6, r7, d0
 800a164:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a168:	9107      	str	r1, [sp, #28]
 800a16a:	4604      	mov	r4, r0
 800a16c:	920a      	str	r2, [sp, #40]	; 0x28
 800a16e:	930d      	str	r3, [sp, #52]	; 0x34
 800a170:	b975      	cbnz	r5, 800a190 <_dtoa_r+0x40>
 800a172:	2010      	movs	r0, #16
 800a174:	f7ff fbea 	bl	800994c <malloc>
 800a178:	4602      	mov	r2, r0
 800a17a:	61e0      	str	r0, [r4, #28]
 800a17c:	b920      	cbnz	r0, 800a188 <_dtoa_r+0x38>
 800a17e:	4bae      	ldr	r3, [pc, #696]	; (800a438 <_dtoa_r+0x2e8>)
 800a180:	21ef      	movs	r1, #239	; 0xef
 800a182:	48ae      	ldr	r0, [pc, #696]	; (800a43c <_dtoa_r+0x2ec>)
 800a184:	f001 fc84 	bl	800ba90 <__assert_func>
 800a188:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a18c:	6005      	str	r5, [r0, #0]
 800a18e:	60c5      	str	r5, [r0, #12]
 800a190:	69e3      	ldr	r3, [r4, #28]
 800a192:	6819      	ldr	r1, [r3, #0]
 800a194:	b151      	cbz	r1, 800a1ac <_dtoa_r+0x5c>
 800a196:	685a      	ldr	r2, [r3, #4]
 800a198:	604a      	str	r2, [r1, #4]
 800a19a:	2301      	movs	r3, #1
 800a19c:	4093      	lsls	r3, r2
 800a19e:	608b      	str	r3, [r1, #8]
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	f001 f859 	bl	800b258 <_Bfree>
 800a1a6:	69e3      	ldr	r3, [r4, #28]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	601a      	str	r2, [r3, #0]
 800a1ac:	1e3b      	subs	r3, r7, #0
 800a1ae:	bfbb      	ittet	lt
 800a1b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a1b4:	9303      	strlt	r3, [sp, #12]
 800a1b6:	2300      	movge	r3, #0
 800a1b8:	2201      	movlt	r2, #1
 800a1ba:	bfac      	ite	ge
 800a1bc:	f8c8 3000 	strge.w	r3, [r8]
 800a1c0:	f8c8 2000 	strlt.w	r2, [r8]
 800a1c4:	4b9e      	ldr	r3, [pc, #632]	; (800a440 <_dtoa_r+0x2f0>)
 800a1c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a1ca:	ea33 0308 	bics.w	r3, r3, r8
 800a1ce:	d11b      	bne.n	800a208 <_dtoa_r+0xb8>
 800a1d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1d2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a1d6:	6013      	str	r3, [r2, #0]
 800a1d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a1dc:	4333      	orrs	r3, r6
 800a1de:	f000 8593 	beq.w	800ad08 <_dtoa_r+0xbb8>
 800a1e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1e4:	b963      	cbnz	r3, 800a200 <_dtoa_r+0xb0>
 800a1e6:	4b97      	ldr	r3, [pc, #604]	; (800a444 <_dtoa_r+0x2f4>)
 800a1e8:	e027      	b.n	800a23a <_dtoa_r+0xea>
 800a1ea:	4b97      	ldr	r3, [pc, #604]	; (800a448 <_dtoa_r+0x2f8>)
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	3308      	adds	r3, #8
 800a1f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a1f2:	6013      	str	r3, [r2, #0]
 800a1f4:	9800      	ldr	r0, [sp, #0]
 800a1f6:	b013      	add	sp, #76	; 0x4c
 800a1f8:	ecbd 8b04 	vpop	{d8-d9}
 800a1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a200:	4b90      	ldr	r3, [pc, #576]	; (800a444 <_dtoa_r+0x2f4>)
 800a202:	9300      	str	r3, [sp, #0]
 800a204:	3303      	adds	r3, #3
 800a206:	e7f3      	b.n	800a1f0 <_dtoa_r+0xa0>
 800a208:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a20c:	2200      	movs	r2, #0
 800a20e:	ec51 0b17 	vmov	r0, r1, d7
 800a212:	eeb0 8a47 	vmov.f32	s16, s14
 800a216:	eef0 8a67 	vmov.f32	s17, s15
 800a21a:	2300      	movs	r3, #0
 800a21c:	f7f6 fc74 	bl	8000b08 <__aeabi_dcmpeq>
 800a220:	4681      	mov	r9, r0
 800a222:	b160      	cbz	r0, 800a23e <_dtoa_r+0xee>
 800a224:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a226:	2301      	movs	r3, #1
 800a228:	6013      	str	r3, [r2, #0]
 800a22a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	f000 8568 	beq.w	800ad02 <_dtoa_r+0xbb2>
 800a232:	4b86      	ldr	r3, [pc, #536]	; (800a44c <_dtoa_r+0x2fc>)
 800a234:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a236:	6013      	str	r3, [r2, #0]
 800a238:	3b01      	subs	r3, #1
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	e7da      	b.n	800a1f4 <_dtoa_r+0xa4>
 800a23e:	aa10      	add	r2, sp, #64	; 0x40
 800a240:	a911      	add	r1, sp, #68	; 0x44
 800a242:	4620      	mov	r0, r4
 800a244:	eeb0 0a48 	vmov.f32	s0, s16
 800a248:	eef0 0a68 	vmov.f32	s1, s17
 800a24c:	f001 fae6 	bl	800b81c <__d2b>
 800a250:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a254:	4682      	mov	sl, r0
 800a256:	2d00      	cmp	r5, #0
 800a258:	d07f      	beq.n	800a35a <_dtoa_r+0x20a>
 800a25a:	ee18 3a90 	vmov	r3, s17
 800a25e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a262:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a266:	ec51 0b18 	vmov	r0, r1, d8
 800a26a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a26e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a272:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a276:	4619      	mov	r1, r3
 800a278:	2200      	movs	r2, #0
 800a27a:	4b75      	ldr	r3, [pc, #468]	; (800a450 <_dtoa_r+0x300>)
 800a27c:	f7f6 f824 	bl	80002c8 <__aeabi_dsub>
 800a280:	a367      	add	r3, pc, #412	; (adr r3, 800a420 <_dtoa_r+0x2d0>)
 800a282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a286:	f7f6 f9d7 	bl	8000638 <__aeabi_dmul>
 800a28a:	a367      	add	r3, pc, #412	; (adr r3, 800a428 <_dtoa_r+0x2d8>)
 800a28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a290:	f7f6 f81c 	bl	80002cc <__adddf3>
 800a294:	4606      	mov	r6, r0
 800a296:	4628      	mov	r0, r5
 800a298:	460f      	mov	r7, r1
 800a29a:	f7f6 f963 	bl	8000564 <__aeabi_i2d>
 800a29e:	a364      	add	r3, pc, #400	; (adr r3, 800a430 <_dtoa_r+0x2e0>)
 800a2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a4:	f7f6 f9c8 	bl	8000638 <__aeabi_dmul>
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	4639      	mov	r1, r7
 800a2b0:	f7f6 f80c 	bl	80002cc <__adddf3>
 800a2b4:	4606      	mov	r6, r0
 800a2b6:	460f      	mov	r7, r1
 800a2b8:	f7f6 fc6e 	bl	8000b98 <__aeabi_d2iz>
 800a2bc:	2200      	movs	r2, #0
 800a2be:	4683      	mov	fp, r0
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	4630      	mov	r0, r6
 800a2c4:	4639      	mov	r1, r7
 800a2c6:	f7f6 fc29 	bl	8000b1c <__aeabi_dcmplt>
 800a2ca:	b148      	cbz	r0, 800a2e0 <_dtoa_r+0x190>
 800a2cc:	4658      	mov	r0, fp
 800a2ce:	f7f6 f949 	bl	8000564 <__aeabi_i2d>
 800a2d2:	4632      	mov	r2, r6
 800a2d4:	463b      	mov	r3, r7
 800a2d6:	f7f6 fc17 	bl	8000b08 <__aeabi_dcmpeq>
 800a2da:	b908      	cbnz	r0, 800a2e0 <_dtoa_r+0x190>
 800a2dc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a2e0:	f1bb 0f16 	cmp.w	fp, #22
 800a2e4:	d857      	bhi.n	800a396 <_dtoa_r+0x246>
 800a2e6:	4b5b      	ldr	r3, [pc, #364]	; (800a454 <_dtoa_r+0x304>)
 800a2e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f0:	ec51 0b18 	vmov	r0, r1, d8
 800a2f4:	f7f6 fc12 	bl	8000b1c <__aeabi_dcmplt>
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	d04e      	beq.n	800a39a <_dtoa_r+0x24a>
 800a2fc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a300:	2300      	movs	r3, #0
 800a302:	930c      	str	r3, [sp, #48]	; 0x30
 800a304:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a306:	1b5b      	subs	r3, r3, r5
 800a308:	1e5a      	subs	r2, r3, #1
 800a30a:	bf45      	ittet	mi
 800a30c:	f1c3 0301 	rsbmi	r3, r3, #1
 800a310:	9305      	strmi	r3, [sp, #20]
 800a312:	2300      	movpl	r3, #0
 800a314:	2300      	movmi	r3, #0
 800a316:	9206      	str	r2, [sp, #24]
 800a318:	bf54      	ite	pl
 800a31a:	9305      	strpl	r3, [sp, #20]
 800a31c:	9306      	strmi	r3, [sp, #24]
 800a31e:	f1bb 0f00 	cmp.w	fp, #0
 800a322:	db3c      	blt.n	800a39e <_dtoa_r+0x24e>
 800a324:	9b06      	ldr	r3, [sp, #24]
 800a326:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a32a:	445b      	add	r3, fp
 800a32c:	9306      	str	r3, [sp, #24]
 800a32e:	2300      	movs	r3, #0
 800a330:	9308      	str	r3, [sp, #32]
 800a332:	9b07      	ldr	r3, [sp, #28]
 800a334:	2b09      	cmp	r3, #9
 800a336:	d868      	bhi.n	800a40a <_dtoa_r+0x2ba>
 800a338:	2b05      	cmp	r3, #5
 800a33a:	bfc4      	itt	gt
 800a33c:	3b04      	subgt	r3, #4
 800a33e:	9307      	strgt	r3, [sp, #28]
 800a340:	9b07      	ldr	r3, [sp, #28]
 800a342:	f1a3 0302 	sub.w	r3, r3, #2
 800a346:	bfcc      	ite	gt
 800a348:	2500      	movgt	r5, #0
 800a34a:	2501      	movle	r5, #1
 800a34c:	2b03      	cmp	r3, #3
 800a34e:	f200 8085 	bhi.w	800a45c <_dtoa_r+0x30c>
 800a352:	e8df f003 	tbb	[pc, r3]
 800a356:	3b2e      	.short	0x3b2e
 800a358:	5839      	.short	0x5839
 800a35a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a35e:	441d      	add	r5, r3
 800a360:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a364:	2b20      	cmp	r3, #32
 800a366:	bfc1      	itttt	gt
 800a368:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a36c:	fa08 f803 	lslgt.w	r8, r8, r3
 800a370:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a374:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a378:	bfd6      	itet	le
 800a37a:	f1c3 0320 	rsble	r3, r3, #32
 800a37e:	ea48 0003 	orrgt.w	r0, r8, r3
 800a382:	fa06 f003 	lslle.w	r0, r6, r3
 800a386:	f7f6 f8dd 	bl	8000544 <__aeabi_ui2d>
 800a38a:	2201      	movs	r2, #1
 800a38c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a390:	3d01      	subs	r5, #1
 800a392:	920e      	str	r2, [sp, #56]	; 0x38
 800a394:	e76f      	b.n	800a276 <_dtoa_r+0x126>
 800a396:	2301      	movs	r3, #1
 800a398:	e7b3      	b.n	800a302 <_dtoa_r+0x1b2>
 800a39a:	900c      	str	r0, [sp, #48]	; 0x30
 800a39c:	e7b2      	b.n	800a304 <_dtoa_r+0x1b4>
 800a39e:	9b05      	ldr	r3, [sp, #20]
 800a3a0:	eba3 030b 	sub.w	r3, r3, fp
 800a3a4:	9305      	str	r3, [sp, #20]
 800a3a6:	f1cb 0300 	rsb	r3, fp, #0
 800a3aa:	9308      	str	r3, [sp, #32]
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3b0:	e7bf      	b.n	800a332 <_dtoa_r+0x1e2>
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a3b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	dc52      	bgt.n	800a462 <_dtoa_r+0x312>
 800a3bc:	2301      	movs	r3, #1
 800a3be:	9301      	str	r3, [sp, #4]
 800a3c0:	9304      	str	r3, [sp, #16]
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	920a      	str	r2, [sp, #40]	; 0x28
 800a3c6:	e00b      	b.n	800a3e0 <_dtoa_r+0x290>
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e7f3      	b.n	800a3b4 <_dtoa_r+0x264>
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a3d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3d2:	445b      	add	r3, fp
 800a3d4:	9301      	str	r3, [sp, #4]
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	9304      	str	r3, [sp, #16]
 800a3dc:	bfb8      	it	lt
 800a3de:	2301      	movlt	r3, #1
 800a3e0:	69e0      	ldr	r0, [r4, #28]
 800a3e2:	2100      	movs	r1, #0
 800a3e4:	2204      	movs	r2, #4
 800a3e6:	f102 0614 	add.w	r6, r2, #20
 800a3ea:	429e      	cmp	r6, r3
 800a3ec:	d93d      	bls.n	800a46a <_dtoa_r+0x31a>
 800a3ee:	6041      	str	r1, [r0, #4]
 800a3f0:	4620      	mov	r0, r4
 800a3f2:	f000 fef1 	bl	800b1d8 <_Balloc>
 800a3f6:	9000      	str	r0, [sp, #0]
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	d139      	bne.n	800a470 <_dtoa_r+0x320>
 800a3fc:	4b16      	ldr	r3, [pc, #88]	; (800a458 <_dtoa_r+0x308>)
 800a3fe:	4602      	mov	r2, r0
 800a400:	f240 11af 	movw	r1, #431	; 0x1af
 800a404:	e6bd      	b.n	800a182 <_dtoa_r+0x32>
 800a406:	2301      	movs	r3, #1
 800a408:	e7e1      	b.n	800a3ce <_dtoa_r+0x27e>
 800a40a:	2501      	movs	r5, #1
 800a40c:	2300      	movs	r3, #0
 800a40e:	9307      	str	r3, [sp, #28]
 800a410:	9509      	str	r5, [sp, #36]	; 0x24
 800a412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a416:	9301      	str	r3, [sp, #4]
 800a418:	9304      	str	r3, [sp, #16]
 800a41a:	2200      	movs	r2, #0
 800a41c:	2312      	movs	r3, #18
 800a41e:	e7d1      	b.n	800a3c4 <_dtoa_r+0x274>
 800a420:	636f4361 	.word	0x636f4361
 800a424:	3fd287a7 	.word	0x3fd287a7
 800a428:	8b60c8b3 	.word	0x8b60c8b3
 800a42c:	3fc68a28 	.word	0x3fc68a28
 800a430:	509f79fb 	.word	0x509f79fb
 800a434:	3fd34413 	.word	0x3fd34413
 800a438:	0800c679 	.word	0x0800c679
 800a43c:	0800c690 	.word	0x0800c690
 800a440:	7ff00000 	.word	0x7ff00000
 800a444:	0800c675 	.word	0x0800c675
 800a448:	0800c66c 	.word	0x0800c66c
 800a44c:	0800c649 	.word	0x0800c649
 800a450:	3ff80000 	.word	0x3ff80000
 800a454:	0800c790 	.word	0x0800c790
 800a458:	0800c6e8 	.word	0x0800c6e8
 800a45c:	2301      	movs	r3, #1
 800a45e:	9309      	str	r3, [sp, #36]	; 0x24
 800a460:	e7d7      	b.n	800a412 <_dtoa_r+0x2c2>
 800a462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a464:	9301      	str	r3, [sp, #4]
 800a466:	9304      	str	r3, [sp, #16]
 800a468:	e7ba      	b.n	800a3e0 <_dtoa_r+0x290>
 800a46a:	3101      	adds	r1, #1
 800a46c:	0052      	lsls	r2, r2, #1
 800a46e:	e7ba      	b.n	800a3e6 <_dtoa_r+0x296>
 800a470:	69e3      	ldr	r3, [r4, #28]
 800a472:	9a00      	ldr	r2, [sp, #0]
 800a474:	601a      	str	r2, [r3, #0]
 800a476:	9b04      	ldr	r3, [sp, #16]
 800a478:	2b0e      	cmp	r3, #14
 800a47a:	f200 80a8 	bhi.w	800a5ce <_dtoa_r+0x47e>
 800a47e:	2d00      	cmp	r5, #0
 800a480:	f000 80a5 	beq.w	800a5ce <_dtoa_r+0x47e>
 800a484:	f1bb 0f00 	cmp.w	fp, #0
 800a488:	dd38      	ble.n	800a4fc <_dtoa_r+0x3ac>
 800a48a:	4bc0      	ldr	r3, [pc, #768]	; (800a78c <_dtoa_r+0x63c>)
 800a48c:	f00b 020f 	and.w	r2, fp, #15
 800a490:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a494:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a498:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a49c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a4a0:	d019      	beq.n	800a4d6 <_dtoa_r+0x386>
 800a4a2:	4bbb      	ldr	r3, [pc, #748]	; (800a790 <_dtoa_r+0x640>)
 800a4a4:	ec51 0b18 	vmov	r0, r1, d8
 800a4a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a4ac:	f7f6 f9ee 	bl	800088c <__aeabi_ddiv>
 800a4b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4b4:	f008 080f 	and.w	r8, r8, #15
 800a4b8:	2503      	movs	r5, #3
 800a4ba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a790 <_dtoa_r+0x640>
 800a4be:	f1b8 0f00 	cmp.w	r8, #0
 800a4c2:	d10a      	bne.n	800a4da <_dtoa_r+0x38a>
 800a4c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4c8:	4632      	mov	r2, r6
 800a4ca:	463b      	mov	r3, r7
 800a4cc:	f7f6 f9de 	bl	800088c <__aeabi_ddiv>
 800a4d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4d4:	e02b      	b.n	800a52e <_dtoa_r+0x3de>
 800a4d6:	2502      	movs	r5, #2
 800a4d8:	e7ef      	b.n	800a4ba <_dtoa_r+0x36a>
 800a4da:	f018 0f01 	tst.w	r8, #1
 800a4de:	d008      	beq.n	800a4f2 <_dtoa_r+0x3a2>
 800a4e0:	4630      	mov	r0, r6
 800a4e2:	4639      	mov	r1, r7
 800a4e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a4e8:	f7f6 f8a6 	bl	8000638 <__aeabi_dmul>
 800a4ec:	3501      	adds	r5, #1
 800a4ee:	4606      	mov	r6, r0
 800a4f0:	460f      	mov	r7, r1
 800a4f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a4f6:	f109 0908 	add.w	r9, r9, #8
 800a4fa:	e7e0      	b.n	800a4be <_dtoa_r+0x36e>
 800a4fc:	f000 809f 	beq.w	800a63e <_dtoa_r+0x4ee>
 800a500:	f1cb 0600 	rsb	r6, fp, #0
 800a504:	4ba1      	ldr	r3, [pc, #644]	; (800a78c <_dtoa_r+0x63c>)
 800a506:	4fa2      	ldr	r7, [pc, #648]	; (800a790 <_dtoa_r+0x640>)
 800a508:	f006 020f 	and.w	r2, r6, #15
 800a50c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a514:	ec51 0b18 	vmov	r0, r1, d8
 800a518:	f7f6 f88e 	bl	8000638 <__aeabi_dmul>
 800a51c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a520:	1136      	asrs	r6, r6, #4
 800a522:	2300      	movs	r3, #0
 800a524:	2502      	movs	r5, #2
 800a526:	2e00      	cmp	r6, #0
 800a528:	d17e      	bne.n	800a628 <_dtoa_r+0x4d8>
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1d0      	bne.n	800a4d0 <_dtoa_r+0x380>
 800a52e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a530:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a534:	2b00      	cmp	r3, #0
 800a536:	f000 8084 	beq.w	800a642 <_dtoa_r+0x4f2>
 800a53a:	4b96      	ldr	r3, [pc, #600]	; (800a794 <_dtoa_r+0x644>)
 800a53c:	2200      	movs	r2, #0
 800a53e:	4640      	mov	r0, r8
 800a540:	4649      	mov	r1, r9
 800a542:	f7f6 faeb 	bl	8000b1c <__aeabi_dcmplt>
 800a546:	2800      	cmp	r0, #0
 800a548:	d07b      	beq.n	800a642 <_dtoa_r+0x4f2>
 800a54a:	9b04      	ldr	r3, [sp, #16]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d078      	beq.n	800a642 <_dtoa_r+0x4f2>
 800a550:	9b01      	ldr	r3, [sp, #4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	dd39      	ble.n	800a5ca <_dtoa_r+0x47a>
 800a556:	4b90      	ldr	r3, [pc, #576]	; (800a798 <_dtoa_r+0x648>)
 800a558:	2200      	movs	r2, #0
 800a55a:	4640      	mov	r0, r8
 800a55c:	4649      	mov	r1, r9
 800a55e:	f7f6 f86b 	bl	8000638 <__aeabi_dmul>
 800a562:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a566:	9e01      	ldr	r6, [sp, #4]
 800a568:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800a56c:	3501      	adds	r5, #1
 800a56e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a572:	4628      	mov	r0, r5
 800a574:	f7f5 fff6 	bl	8000564 <__aeabi_i2d>
 800a578:	4642      	mov	r2, r8
 800a57a:	464b      	mov	r3, r9
 800a57c:	f7f6 f85c 	bl	8000638 <__aeabi_dmul>
 800a580:	4b86      	ldr	r3, [pc, #536]	; (800a79c <_dtoa_r+0x64c>)
 800a582:	2200      	movs	r2, #0
 800a584:	f7f5 fea2 	bl	80002cc <__adddf3>
 800a588:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a58c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a590:	9303      	str	r3, [sp, #12]
 800a592:	2e00      	cmp	r6, #0
 800a594:	d158      	bne.n	800a648 <_dtoa_r+0x4f8>
 800a596:	4b82      	ldr	r3, [pc, #520]	; (800a7a0 <_dtoa_r+0x650>)
 800a598:	2200      	movs	r2, #0
 800a59a:	4640      	mov	r0, r8
 800a59c:	4649      	mov	r1, r9
 800a59e:	f7f5 fe93 	bl	80002c8 <__aeabi_dsub>
 800a5a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5a6:	4680      	mov	r8, r0
 800a5a8:	4689      	mov	r9, r1
 800a5aa:	f7f6 fad5 	bl	8000b58 <__aeabi_dcmpgt>
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	f040 8296 	bne.w	800aae0 <_dtoa_r+0x990>
 800a5b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a5b8:	4640      	mov	r0, r8
 800a5ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5be:	4649      	mov	r1, r9
 800a5c0:	f7f6 faac 	bl	8000b1c <__aeabi_dcmplt>
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	f040 8289 	bne.w	800aadc <_dtoa_r+0x98c>
 800a5ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a5ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	f2c0 814e 	blt.w	800a872 <_dtoa_r+0x722>
 800a5d6:	f1bb 0f0e 	cmp.w	fp, #14
 800a5da:	f300 814a 	bgt.w	800a872 <_dtoa_r+0x722>
 800a5de:	4b6b      	ldr	r3, [pc, #428]	; (800a78c <_dtoa_r+0x63c>)
 800a5e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a5e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	f280 80dc 	bge.w	800a7a8 <_dtoa_r+0x658>
 800a5f0:	9b04      	ldr	r3, [sp, #16]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	f300 80d8 	bgt.w	800a7a8 <_dtoa_r+0x658>
 800a5f8:	f040 826f 	bne.w	800aada <_dtoa_r+0x98a>
 800a5fc:	4b68      	ldr	r3, [pc, #416]	; (800a7a0 <_dtoa_r+0x650>)
 800a5fe:	2200      	movs	r2, #0
 800a600:	4640      	mov	r0, r8
 800a602:	4649      	mov	r1, r9
 800a604:	f7f6 f818 	bl	8000638 <__aeabi_dmul>
 800a608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a60c:	f7f6 fa9a 	bl	8000b44 <__aeabi_dcmpge>
 800a610:	9e04      	ldr	r6, [sp, #16]
 800a612:	4637      	mov	r7, r6
 800a614:	2800      	cmp	r0, #0
 800a616:	f040 8245 	bne.w	800aaa4 <_dtoa_r+0x954>
 800a61a:	9d00      	ldr	r5, [sp, #0]
 800a61c:	2331      	movs	r3, #49	; 0x31
 800a61e:	f805 3b01 	strb.w	r3, [r5], #1
 800a622:	f10b 0b01 	add.w	fp, fp, #1
 800a626:	e241      	b.n	800aaac <_dtoa_r+0x95c>
 800a628:	07f2      	lsls	r2, r6, #31
 800a62a:	d505      	bpl.n	800a638 <_dtoa_r+0x4e8>
 800a62c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a630:	f7f6 f802 	bl	8000638 <__aeabi_dmul>
 800a634:	3501      	adds	r5, #1
 800a636:	2301      	movs	r3, #1
 800a638:	1076      	asrs	r6, r6, #1
 800a63a:	3708      	adds	r7, #8
 800a63c:	e773      	b.n	800a526 <_dtoa_r+0x3d6>
 800a63e:	2502      	movs	r5, #2
 800a640:	e775      	b.n	800a52e <_dtoa_r+0x3de>
 800a642:	9e04      	ldr	r6, [sp, #16]
 800a644:	465f      	mov	r7, fp
 800a646:	e792      	b.n	800a56e <_dtoa_r+0x41e>
 800a648:	9900      	ldr	r1, [sp, #0]
 800a64a:	4b50      	ldr	r3, [pc, #320]	; (800a78c <_dtoa_r+0x63c>)
 800a64c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a650:	4431      	add	r1, r6
 800a652:	9102      	str	r1, [sp, #8]
 800a654:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a656:	eeb0 9a47 	vmov.f32	s18, s14
 800a65a:	eef0 9a67 	vmov.f32	s19, s15
 800a65e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a662:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a666:	2900      	cmp	r1, #0
 800a668:	d044      	beq.n	800a6f4 <_dtoa_r+0x5a4>
 800a66a:	494e      	ldr	r1, [pc, #312]	; (800a7a4 <_dtoa_r+0x654>)
 800a66c:	2000      	movs	r0, #0
 800a66e:	f7f6 f90d 	bl	800088c <__aeabi_ddiv>
 800a672:	ec53 2b19 	vmov	r2, r3, d9
 800a676:	f7f5 fe27 	bl	80002c8 <__aeabi_dsub>
 800a67a:	9d00      	ldr	r5, [sp, #0]
 800a67c:	ec41 0b19 	vmov	d9, r0, r1
 800a680:	4649      	mov	r1, r9
 800a682:	4640      	mov	r0, r8
 800a684:	f7f6 fa88 	bl	8000b98 <__aeabi_d2iz>
 800a688:	4606      	mov	r6, r0
 800a68a:	f7f5 ff6b 	bl	8000564 <__aeabi_i2d>
 800a68e:	4602      	mov	r2, r0
 800a690:	460b      	mov	r3, r1
 800a692:	4640      	mov	r0, r8
 800a694:	4649      	mov	r1, r9
 800a696:	f7f5 fe17 	bl	80002c8 <__aeabi_dsub>
 800a69a:	3630      	adds	r6, #48	; 0x30
 800a69c:	f805 6b01 	strb.w	r6, [r5], #1
 800a6a0:	ec53 2b19 	vmov	r2, r3, d9
 800a6a4:	4680      	mov	r8, r0
 800a6a6:	4689      	mov	r9, r1
 800a6a8:	f7f6 fa38 	bl	8000b1c <__aeabi_dcmplt>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	d164      	bne.n	800a77a <_dtoa_r+0x62a>
 800a6b0:	4642      	mov	r2, r8
 800a6b2:	464b      	mov	r3, r9
 800a6b4:	4937      	ldr	r1, [pc, #220]	; (800a794 <_dtoa_r+0x644>)
 800a6b6:	2000      	movs	r0, #0
 800a6b8:	f7f5 fe06 	bl	80002c8 <__aeabi_dsub>
 800a6bc:	ec53 2b19 	vmov	r2, r3, d9
 800a6c0:	f7f6 fa2c 	bl	8000b1c <__aeabi_dcmplt>
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	f040 80b6 	bne.w	800a836 <_dtoa_r+0x6e6>
 800a6ca:	9b02      	ldr	r3, [sp, #8]
 800a6cc:	429d      	cmp	r5, r3
 800a6ce:	f43f af7c 	beq.w	800a5ca <_dtoa_r+0x47a>
 800a6d2:	4b31      	ldr	r3, [pc, #196]	; (800a798 <_dtoa_r+0x648>)
 800a6d4:	ec51 0b19 	vmov	r0, r1, d9
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f7f5 ffad 	bl	8000638 <__aeabi_dmul>
 800a6de:	4b2e      	ldr	r3, [pc, #184]	; (800a798 <_dtoa_r+0x648>)
 800a6e0:	ec41 0b19 	vmov	d9, r0, r1
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	4640      	mov	r0, r8
 800a6e8:	4649      	mov	r1, r9
 800a6ea:	f7f5 ffa5 	bl	8000638 <__aeabi_dmul>
 800a6ee:	4680      	mov	r8, r0
 800a6f0:	4689      	mov	r9, r1
 800a6f2:	e7c5      	b.n	800a680 <_dtoa_r+0x530>
 800a6f4:	ec51 0b17 	vmov	r0, r1, d7
 800a6f8:	f7f5 ff9e 	bl	8000638 <__aeabi_dmul>
 800a6fc:	9b02      	ldr	r3, [sp, #8]
 800a6fe:	9d00      	ldr	r5, [sp, #0]
 800a700:	930f      	str	r3, [sp, #60]	; 0x3c
 800a702:	ec41 0b19 	vmov	d9, r0, r1
 800a706:	4649      	mov	r1, r9
 800a708:	4640      	mov	r0, r8
 800a70a:	f7f6 fa45 	bl	8000b98 <__aeabi_d2iz>
 800a70e:	4606      	mov	r6, r0
 800a710:	f7f5 ff28 	bl	8000564 <__aeabi_i2d>
 800a714:	3630      	adds	r6, #48	; 0x30
 800a716:	4602      	mov	r2, r0
 800a718:	460b      	mov	r3, r1
 800a71a:	4640      	mov	r0, r8
 800a71c:	4649      	mov	r1, r9
 800a71e:	f7f5 fdd3 	bl	80002c8 <__aeabi_dsub>
 800a722:	f805 6b01 	strb.w	r6, [r5], #1
 800a726:	9b02      	ldr	r3, [sp, #8]
 800a728:	429d      	cmp	r5, r3
 800a72a:	4680      	mov	r8, r0
 800a72c:	4689      	mov	r9, r1
 800a72e:	f04f 0200 	mov.w	r2, #0
 800a732:	d124      	bne.n	800a77e <_dtoa_r+0x62e>
 800a734:	4b1b      	ldr	r3, [pc, #108]	; (800a7a4 <_dtoa_r+0x654>)
 800a736:	ec51 0b19 	vmov	r0, r1, d9
 800a73a:	f7f5 fdc7 	bl	80002cc <__adddf3>
 800a73e:	4602      	mov	r2, r0
 800a740:	460b      	mov	r3, r1
 800a742:	4640      	mov	r0, r8
 800a744:	4649      	mov	r1, r9
 800a746:	f7f6 fa07 	bl	8000b58 <__aeabi_dcmpgt>
 800a74a:	2800      	cmp	r0, #0
 800a74c:	d173      	bne.n	800a836 <_dtoa_r+0x6e6>
 800a74e:	ec53 2b19 	vmov	r2, r3, d9
 800a752:	4914      	ldr	r1, [pc, #80]	; (800a7a4 <_dtoa_r+0x654>)
 800a754:	2000      	movs	r0, #0
 800a756:	f7f5 fdb7 	bl	80002c8 <__aeabi_dsub>
 800a75a:	4602      	mov	r2, r0
 800a75c:	460b      	mov	r3, r1
 800a75e:	4640      	mov	r0, r8
 800a760:	4649      	mov	r1, r9
 800a762:	f7f6 f9db 	bl	8000b1c <__aeabi_dcmplt>
 800a766:	2800      	cmp	r0, #0
 800a768:	f43f af2f 	beq.w	800a5ca <_dtoa_r+0x47a>
 800a76c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a76e:	1e6b      	subs	r3, r5, #1
 800a770:	930f      	str	r3, [sp, #60]	; 0x3c
 800a772:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a776:	2b30      	cmp	r3, #48	; 0x30
 800a778:	d0f8      	beq.n	800a76c <_dtoa_r+0x61c>
 800a77a:	46bb      	mov	fp, r7
 800a77c:	e04a      	b.n	800a814 <_dtoa_r+0x6c4>
 800a77e:	4b06      	ldr	r3, [pc, #24]	; (800a798 <_dtoa_r+0x648>)
 800a780:	f7f5 ff5a 	bl	8000638 <__aeabi_dmul>
 800a784:	4680      	mov	r8, r0
 800a786:	4689      	mov	r9, r1
 800a788:	e7bd      	b.n	800a706 <_dtoa_r+0x5b6>
 800a78a:	bf00      	nop
 800a78c:	0800c790 	.word	0x0800c790
 800a790:	0800c768 	.word	0x0800c768
 800a794:	3ff00000 	.word	0x3ff00000
 800a798:	40240000 	.word	0x40240000
 800a79c:	401c0000 	.word	0x401c0000
 800a7a0:	40140000 	.word	0x40140000
 800a7a4:	3fe00000 	.word	0x3fe00000
 800a7a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a7ac:	9d00      	ldr	r5, [sp, #0]
 800a7ae:	4642      	mov	r2, r8
 800a7b0:	464b      	mov	r3, r9
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	4639      	mov	r1, r7
 800a7b6:	f7f6 f869 	bl	800088c <__aeabi_ddiv>
 800a7ba:	f7f6 f9ed 	bl	8000b98 <__aeabi_d2iz>
 800a7be:	9001      	str	r0, [sp, #4]
 800a7c0:	f7f5 fed0 	bl	8000564 <__aeabi_i2d>
 800a7c4:	4642      	mov	r2, r8
 800a7c6:	464b      	mov	r3, r9
 800a7c8:	f7f5 ff36 	bl	8000638 <__aeabi_dmul>
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	4639      	mov	r1, r7
 800a7d4:	f7f5 fd78 	bl	80002c8 <__aeabi_dsub>
 800a7d8:	9e01      	ldr	r6, [sp, #4]
 800a7da:	9f04      	ldr	r7, [sp, #16]
 800a7dc:	3630      	adds	r6, #48	; 0x30
 800a7de:	f805 6b01 	strb.w	r6, [r5], #1
 800a7e2:	9e00      	ldr	r6, [sp, #0]
 800a7e4:	1bae      	subs	r6, r5, r6
 800a7e6:	42b7      	cmp	r7, r6
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	460b      	mov	r3, r1
 800a7ec:	d134      	bne.n	800a858 <_dtoa_r+0x708>
 800a7ee:	f7f5 fd6d 	bl	80002cc <__adddf3>
 800a7f2:	4642      	mov	r2, r8
 800a7f4:	464b      	mov	r3, r9
 800a7f6:	4606      	mov	r6, r0
 800a7f8:	460f      	mov	r7, r1
 800a7fa:	f7f6 f9ad 	bl	8000b58 <__aeabi_dcmpgt>
 800a7fe:	b9c8      	cbnz	r0, 800a834 <_dtoa_r+0x6e4>
 800a800:	4642      	mov	r2, r8
 800a802:	464b      	mov	r3, r9
 800a804:	4630      	mov	r0, r6
 800a806:	4639      	mov	r1, r7
 800a808:	f7f6 f97e 	bl	8000b08 <__aeabi_dcmpeq>
 800a80c:	b110      	cbz	r0, 800a814 <_dtoa_r+0x6c4>
 800a80e:	9b01      	ldr	r3, [sp, #4]
 800a810:	07db      	lsls	r3, r3, #31
 800a812:	d40f      	bmi.n	800a834 <_dtoa_r+0x6e4>
 800a814:	4651      	mov	r1, sl
 800a816:	4620      	mov	r0, r4
 800a818:	f000 fd1e 	bl	800b258 <_Bfree>
 800a81c:	2300      	movs	r3, #0
 800a81e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a820:	702b      	strb	r3, [r5, #0]
 800a822:	f10b 0301 	add.w	r3, fp, #1
 800a826:	6013      	str	r3, [r2, #0]
 800a828:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	f43f ace2 	beq.w	800a1f4 <_dtoa_r+0xa4>
 800a830:	601d      	str	r5, [r3, #0]
 800a832:	e4df      	b.n	800a1f4 <_dtoa_r+0xa4>
 800a834:	465f      	mov	r7, fp
 800a836:	462b      	mov	r3, r5
 800a838:	461d      	mov	r5, r3
 800a83a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a83e:	2a39      	cmp	r2, #57	; 0x39
 800a840:	d106      	bne.n	800a850 <_dtoa_r+0x700>
 800a842:	9a00      	ldr	r2, [sp, #0]
 800a844:	429a      	cmp	r2, r3
 800a846:	d1f7      	bne.n	800a838 <_dtoa_r+0x6e8>
 800a848:	9900      	ldr	r1, [sp, #0]
 800a84a:	2230      	movs	r2, #48	; 0x30
 800a84c:	3701      	adds	r7, #1
 800a84e:	700a      	strb	r2, [r1, #0]
 800a850:	781a      	ldrb	r2, [r3, #0]
 800a852:	3201      	adds	r2, #1
 800a854:	701a      	strb	r2, [r3, #0]
 800a856:	e790      	b.n	800a77a <_dtoa_r+0x62a>
 800a858:	4ba3      	ldr	r3, [pc, #652]	; (800aae8 <_dtoa_r+0x998>)
 800a85a:	2200      	movs	r2, #0
 800a85c:	f7f5 feec 	bl	8000638 <__aeabi_dmul>
 800a860:	2200      	movs	r2, #0
 800a862:	2300      	movs	r3, #0
 800a864:	4606      	mov	r6, r0
 800a866:	460f      	mov	r7, r1
 800a868:	f7f6 f94e 	bl	8000b08 <__aeabi_dcmpeq>
 800a86c:	2800      	cmp	r0, #0
 800a86e:	d09e      	beq.n	800a7ae <_dtoa_r+0x65e>
 800a870:	e7d0      	b.n	800a814 <_dtoa_r+0x6c4>
 800a872:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a874:	2a00      	cmp	r2, #0
 800a876:	f000 80ca 	beq.w	800aa0e <_dtoa_r+0x8be>
 800a87a:	9a07      	ldr	r2, [sp, #28]
 800a87c:	2a01      	cmp	r2, #1
 800a87e:	f300 80ad 	bgt.w	800a9dc <_dtoa_r+0x88c>
 800a882:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a884:	2a00      	cmp	r2, #0
 800a886:	f000 80a5 	beq.w	800a9d4 <_dtoa_r+0x884>
 800a88a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a88e:	9e08      	ldr	r6, [sp, #32]
 800a890:	9d05      	ldr	r5, [sp, #20]
 800a892:	9a05      	ldr	r2, [sp, #20]
 800a894:	441a      	add	r2, r3
 800a896:	9205      	str	r2, [sp, #20]
 800a898:	9a06      	ldr	r2, [sp, #24]
 800a89a:	2101      	movs	r1, #1
 800a89c:	441a      	add	r2, r3
 800a89e:	4620      	mov	r0, r4
 800a8a0:	9206      	str	r2, [sp, #24]
 800a8a2:	f000 fd8f 	bl	800b3c4 <__i2b>
 800a8a6:	4607      	mov	r7, r0
 800a8a8:	b165      	cbz	r5, 800a8c4 <_dtoa_r+0x774>
 800a8aa:	9b06      	ldr	r3, [sp, #24]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	dd09      	ble.n	800a8c4 <_dtoa_r+0x774>
 800a8b0:	42ab      	cmp	r3, r5
 800a8b2:	9a05      	ldr	r2, [sp, #20]
 800a8b4:	bfa8      	it	ge
 800a8b6:	462b      	movge	r3, r5
 800a8b8:	1ad2      	subs	r2, r2, r3
 800a8ba:	9205      	str	r2, [sp, #20]
 800a8bc:	9a06      	ldr	r2, [sp, #24]
 800a8be:	1aed      	subs	r5, r5, r3
 800a8c0:	1ad3      	subs	r3, r2, r3
 800a8c2:	9306      	str	r3, [sp, #24]
 800a8c4:	9b08      	ldr	r3, [sp, #32]
 800a8c6:	b1f3      	cbz	r3, 800a906 <_dtoa_r+0x7b6>
 800a8c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	f000 80a3 	beq.w	800aa16 <_dtoa_r+0x8c6>
 800a8d0:	2e00      	cmp	r6, #0
 800a8d2:	dd10      	ble.n	800a8f6 <_dtoa_r+0x7a6>
 800a8d4:	4639      	mov	r1, r7
 800a8d6:	4632      	mov	r2, r6
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f000 fe33 	bl	800b544 <__pow5mult>
 800a8de:	4652      	mov	r2, sl
 800a8e0:	4601      	mov	r1, r0
 800a8e2:	4607      	mov	r7, r0
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f000 fd83 	bl	800b3f0 <__multiply>
 800a8ea:	4651      	mov	r1, sl
 800a8ec:	4680      	mov	r8, r0
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	f000 fcb2 	bl	800b258 <_Bfree>
 800a8f4:	46c2      	mov	sl, r8
 800a8f6:	9b08      	ldr	r3, [sp, #32]
 800a8f8:	1b9a      	subs	r2, r3, r6
 800a8fa:	d004      	beq.n	800a906 <_dtoa_r+0x7b6>
 800a8fc:	4651      	mov	r1, sl
 800a8fe:	4620      	mov	r0, r4
 800a900:	f000 fe20 	bl	800b544 <__pow5mult>
 800a904:	4682      	mov	sl, r0
 800a906:	2101      	movs	r1, #1
 800a908:	4620      	mov	r0, r4
 800a90a:	f000 fd5b 	bl	800b3c4 <__i2b>
 800a90e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a910:	2b00      	cmp	r3, #0
 800a912:	4606      	mov	r6, r0
 800a914:	f340 8081 	ble.w	800aa1a <_dtoa_r+0x8ca>
 800a918:	461a      	mov	r2, r3
 800a91a:	4601      	mov	r1, r0
 800a91c:	4620      	mov	r0, r4
 800a91e:	f000 fe11 	bl	800b544 <__pow5mult>
 800a922:	9b07      	ldr	r3, [sp, #28]
 800a924:	2b01      	cmp	r3, #1
 800a926:	4606      	mov	r6, r0
 800a928:	dd7a      	ble.n	800aa20 <_dtoa_r+0x8d0>
 800a92a:	f04f 0800 	mov.w	r8, #0
 800a92e:	6933      	ldr	r3, [r6, #16]
 800a930:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a934:	6918      	ldr	r0, [r3, #16]
 800a936:	f000 fcf7 	bl	800b328 <__hi0bits>
 800a93a:	f1c0 0020 	rsb	r0, r0, #32
 800a93e:	9b06      	ldr	r3, [sp, #24]
 800a940:	4418      	add	r0, r3
 800a942:	f010 001f 	ands.w	r0, r0, #31
 800a946:	f000 8094 	beq.w	800aa72 <_dtoa_r+0x922>
 800a94a:	f1c0 0320 	rsb	r3, r0, #32
 800a94e:	2b04      	cmp	r3, #4
 800a950:	f340 8085 	ble.w	800aa5e <_dtoa_r+0x90e>
 800a954:	9b05      	ldr	r3, [sp, #20]
 800a956:	f1c0 001c 	rsb	r0, r0, #28
 800a95a:	4403      	add	r3, r0
 800a95c:	9305      	str	r3, [sp, #20]
 800a95e:	9b06      	ldr	r3, [sp, #24]
 800a960:	4403      	add	r3, r0
 800a962:	4405      	add	r5, r0
 800a964:	9306      	str	r3, [sp, #24]
 800a966:	9b05      	ldr	r3, [sp, #20]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	dd05      	ble.n	800a978 <_dtoa_r+0x828>
 800a96c:	4651      	mov	r1, sl
 800a96e:	461a      	mov	r2, r3
 800a970:	4620      	mov	r0, r4
 800a972:	f000 fe41 	bl	800b5f8 <__lshift>
 800a976:	4682      	mov	sl, r0
 800a978:	9b06      	ldr	r3, [sp, #24]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	dd05      	ble.n	800a98a <_dtoa_r+0x83a>
 800a97e:	4631      	mov	r1, r6
 800a980:	461a      	mov	r2, r3
 800a982:	4620      	mov	r0, r4
 800a984:	f000 fe38 	bl	800b5f8 <__lshift>
 800a988:	4606      	mov	r6, r0
 800a98a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d072      	beq.n	800aa76 <_dtoa_r+0x926>
 800a990:	4631      	mov	r1, r6
 800a992:	4650      	mov	r0, sl
 800a994:	f000 fe9c 	bl	800b6d0 <__mcmp>
 800a998:	2800      	cmp	r0, #0
 800a99a:	da6c      	bge.n	800aa76 <_dtoa_r+0x926>
 800a99c:	2300      	movs	r3, #0
 800a99e:	4651      	mov	r1, sl
 800a9a0:	220a      	movs	r2, #10
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f000 fc7a 	bl	800b29c <__multadd>
 800a9a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9aa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a9ae:	4682      	mov	sl, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f000 81b0 	beq.w	800ad16 <_dtoa_r+0xbc6>
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	4639      	mov	r1, r7
 800a9ba:	220a      	movs	r2, #10
 800a9bc:	4620      	mov	r0, r4
 800a9be:	f000 fc6d 	bl	800b29c <__multadd>
 800a9c2:	9b01      	ldr	r3, [sp, #4]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	4607      	mov	r7, r0
 800a9c8:	f300 8096 	bgt.w	800aaf8 <_dtoa_r+0x9a8>
 800a9cc:	9b07      	ldr	r3, [sp, #28]
 800a9ce:	2b02      	cmp	r3, #2
 800a9d0:	dc59      	bgt.n	800aa86 <_dtoa_r+0x936>
 800a9d2:	e091      	b.n	800aaf8 <_dtoa_r+0x9a8>
 800a9d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a9da:	e758      	b.n	800a88e <_dtoa_r+0x73e>
 800a9dc:	9b04      	ldr	r3, [sp, #16]
 800a9de:	1e5e      	subs	r6, r3, #1
 800a9e0:	9b08      	ldr	r3, [sp, #32]
 800a9e2:	42b3      	cmp	r3, r6
 800a9e4:	bfbf      	itttt	lt
 800a9e6:	9b08      	ldrlt	r3, [sp, #32]
 800a9e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a9ea:	9608      	strlt	r6, [sp, #32]
 800a9ec:	1af3      	sublt	r3, r6, r3
 800a9ee:	bfb4      	ite	lt
 800a9f0:	18d2      	addlt	r2, r2, r3
 800a9f2:	1b9e      	subge	r6, r3, r6
 800a9f4:	9b04      	ldr	r3, [sp, #16]
 800a9f6:	bfbc      	itt	lt
 800a9f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a9fa:	2600      	movlt	r6, #0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	bfb7      	itett	lt
 800aa00:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800aa04:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800aa08:	1a9d      	sublt	r5, r3, r2
 800aa0a:	2300      	movlt	r3, #0
 800aa0c:	e741      	b.n	800a892 <_dtoa_r+0x742>
 800aa0e:	9e08      	ldr	r6, [sp, #32]
 800aa10:	9d05      	ldr	r5, [sp, #20]
 800aa12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aa14:	e748      	b.n	800a8a8 <_dtoa_r+0x758>
 800aa16:	9a08      	ldr	r2, [sp, #32]
 800aa18:	e770      	b.n	800a8fc <_dtoa_r+0x7ac>
 800aa1a:	9b07      	ldr	r3, [sp, #28]
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	dc19      	bgt.n	800aa54 <_dtoa_r+0x904>
 800aa20:	9b02      	ldr	r3, [sp, #8]
 800aa22:	b9bb      	cbnz	r3, 800aa54 <_dtoa_r+0x904>
 800aa24:	9b03      	ldr	r3, [sp, #12]
 800aa26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa2a:	b99b      	cbnz	r3, 800aa54 <_dtoa_r+0x904>
 800aa2c:	9b03      	ldr	r3, [sp, #12]
 800aa2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa32:	0d1b      	lsrs	r3, r3, #20
 800aa34:	051b      	lsls	r3, r3, #20
 800aa36:	b183      	cbz	r3, 800aa5a <_dtoa_r+0x90a>
 800aa38:	9b05      	ldr	r3, [sp, #20]
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	9305      	str	r3, [sp, #20]
 800aa3e:	9b06      	ldr	r3, [sp, #24]
 800aa40:	3301      	adds	r3, #1
 800aa42:	9306      	str	r3, [sp, #24]
 800aa44:	f04f 0801 	mov.w	r8, #1
 800aa48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	f47f af6f 	bne.w	800a92e <_dtoa_r+0x7de>
 800aa50:	2001      	movs	r0, #1
 800aa52:	e774      	b.n	800a93e <_dtoa_r+0x7ee>
 800aa54:	f04f 0800 	mov.w	r8, #0
 800aa58:	e7f6      	b.n	800aa48 <_dtoa_r+0x8f8>
 800aa5a:	4698      	mov	r8, r3
 800aa5c:	e7f4      	b.n	800aa48 <_dtoa_r+0x8f8>
 800aa5e:	d082      	beq.n	800a966 <_dtoa_r+0x816>
 800aa60:	9a05      	ldr	r2, [sp, #20]
 800aa62:	331c      	adds	r3, #28
 800aa64:	441a      	add	r2, r3
 800aa66:	9205      	str	r2, [sp, #20]
 800aa68:	9a06      	ldr	r2, [sp, #24]
 800aa6a:	441a      	add	r2, r3
 800aa6c:	441d      	add	r5, r3
 800aa6e:	9206      	str	r2, [sp, #24]
 800aa70:	e779      	b.n	800a966 <_dtoa_r+0x816>
 800aa72:	4603      	mov	r3, r0
 800aa74:	e7f4      	b.n	800aa60 <_dtoa_r+0x910>
 800aa76:	9b04      	ldr	r3, [sp, #16]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	dc37      	bgt.n	800aaec <_dtoa_r+0x99c>
 800aa7c:	9b07      	ldr	r3, [sp, #28]
 800aa7e:	2b02      	cmp	r3, #2
 800aa80:	dd34      	ble.n	800aaec <_dtoa_r+0x99c>
 800aa82:	9b04      	ldr	r3, [sp, #16]
 800aa84:	9301      	str	r3, [sp, #4]
 800aa86:	9b01      	ldr	r3, [sp, #4]
 800aa88:	b963      	cbnz	r3, 800aaa4 <_dtoa_r+0x954>
 800aa8a:	4631      	mov	r1, r6
 800aa8c:	2205      	movs	r2, #5
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f000 fc04 	bl	800b29c <__multadd>
 800aa94:	4601      	mov	r1, r0
 800aa96:	4606      	mov	r6, r0
 800aa98:	4650      	mov	r0, sl
 800aa9a:	f000 fe19 	bl	800b6d0 <__mcmp>
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	f73f adbb 	bgt.w	800a61a <_dtoa_r+0x4ca>
 800aaa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaa6:	9d00      	ldr	r5, [sp, #0]
 800aaa8:	ea6f 0b03 	mvn.w	fp, r3
 800aaac:	f04f 0800 	mov.w	r8, #0
 800aab0:	4631      	mov	r1, r6
 800aab2:	4620      	mov	r0, r4
 800aab4:	f000 fbd0 	bl	800b258 <_Bfree>
 800aab8:	2f00      	cmp	r7, #0
 800aaba:	f43f aeab 	beq.w	800a814 <_dtoa_r+0x6c4>
 800aabe:	f1b8 0f00 	cmp.w	r8, #0
 800aac2:	d005      	beq.n	800aad0 <_dtoa_r+0x980>
 800aac4:	45b8      	cmp	r8, r7
 800aac6:	d003      	beq.n	800aad0 <_dtoa_r+0x980>
 800aac8:	4641      	mov	r1, r8
 800aaca:	4620      	mov	r0, r4
 800aacc:	f000 fbc4 	bl	800b258 <_Bfree>
 800aad0:	4639      	mov	r1, r7
 800aad2:	4620      	mov	r0, r4
 800aad4:	f000 fbc0 	bl	800b258 <_Bfree>
 800aad8:	e69c      	b.n	800a814 <_dtoa_r+0x6c4>
 800aada:	2600      	movs	r6, #0
 800aadc:	4637      	mov	r7, r6
 800aade:	e7e1      	b.n	800aaa4 <_dtoa_r+0x954>
 800aae0:	46bb      	mov	fp, r7
 800aae2:	4637      	mov	r7, r6
 800aae4:	e599      	b.n	800a61a <_dtoa_r+0x4ca>
 800aae6:	bf00      	nop
 800aae8:	40240000 	.word	0x40240000
 800aaec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f000 80c8 	beq.w	800ac84 <_dtoa_r+0xb34>
 800aaf4:	9b04      	ldr	r3, [sp, #16]
 800aaf6:	9301      	str	r3, [sp, #4]
 800aaf8:	2d00      	cmp	r5, #0
 800aafa:	dd05      	ble.n	800ab08 <_dtoa_r+0x9b8>
 800aafc:	4639      	mov	r1, r7
 800aafe:	462a      	mov	r2, r5
 800ab00:	4620      	mov	r0, r4
 800ab02:	f000 fd79 	bl	800b5f8 <__lshift>
 800ab06:	4607      	mov	r7, r0
 800ab08:	f1b8 0f00 	cmp.w	r8, #0
 800ab0c:	d05b      	beq.n	800abc6 <_dtoa_r+0xa76>
 800ab0e:	6879      	ldr	r1, [r7, #4]
 800ab10:	4620      	mov	r0, r4
 800ab12:	f000 fb61 	bl	800b1d8 <_Balloc>
 800ab16:	4605      	mov	r5, r0
 800ab18:	b928      	cbnz	r0, 800ab26 <_dtoa_r+0x9d6>
 800ab1a:	4b83      	ldr	r3, [pc, #524]	; (800ad28 <_dtoa_r+0xbd8>)
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ab22:	f7ff bb2e 	b.w	800a182 <_dtoa_r+0x32>
 800ab26:	693a      	ldr	r2, [r7, #16]
 800ab28:	3202      	adds	r2, #2
 800ab2a:	0092      	lsls	r2, r2, #2
 800ab2c:	f107 010c 	add.w	r1, r7, #12
 800ab30:	300c      	adds	r0, #12
 800ab32:	f000 ff9f 	bl	800ba74 <memcpy>
 800ab36:	2201      	movs	r2, #1
 800ab38:	4629      	mov	r1, r5
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	f000 fd5c 	bl	800b5f8 <__lshift>
 800ab40:	9b00      	ldr	r3, [sp, #0]
 800ab42:	3301      	adds	r3, #1
 800ab44:	9304      	str	r3, [sp, #16]
 800ab46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	9308      	str	r3, [sp, #32]
 800ab4e:	9b02      	ldr	r3, [sp, #8]
 800ab50:	f003 0301 	and.w	r3, r3, #1
 800ab54:	46b8      	mov	r8, r7
 800ab56:	9306      	str	r3, [sp, #24]
 800ab58:	4607      	mov	r7, r0
 800ab5a:	9b04      	ldr	r3, [sp, #16]
 800ab5c:	4631      	mov	r1, r6
 800ab5e:	3b01      	subs	r3, #1
 800ab60:	4650      	mov	r0, sl
 800ab62:	9301      	str	r3, [sp, #4]
 800ab64:	f7ff fa6a 	bl	800a03c <quorem>
 800ab68:	4641      	mov	r1, r8
 800ab6a:	9002      	str	r0, [sp, #8]
 800ab6c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ab70:	4650      	mov	r0, sl
 800ab72:	f000 fdad 	bl	800b6d0 <__mcmp>
 800ab76:	463a      	mov	r2, r7
 800ab78:	9005      	str	r0, [sp, #20]
 800ab7a:	4631      	mov	r1, r6
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f000 fdc3 	bl	800b708 <__mdiff>
 800ab82:	68c2      	ldr	r2, [r0, #12]
 800ab84:	4605      	mov	r5, r0
 800ab86:	bb02      	cbnz	r2, 800abca <_dtoa_r+0xa7a>
 800ab88:	4601      	mov	r1, r0
 800ab8a:	4650      	mov	r0, sl
 800ab8c:	f000 fda0 	bl	800b6d0 <__mcmp>
 800ab90:	4602      	mov	r2, r0
 800ab92:	4629      	mov	r1, r5
 800ab94:	4620      	mov	r0, r4
 800ab96:	9209      	str	r2, [sp, #36]	; 0x24
 800ab98:	f000 fb5e 	bl	800b258 <_Bfree>
 800ab9c:	9b07      	ldr	r3, [sp, #28]
 800ab9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aba0:	9d04      	ldr	r5, [sp, #16]
 800aba2:	ea43 0102 	orr.w	r1, r3, r2
 800aba6:	9b06      	ldr	r3, [sp, #24]
 800aba8:	4319      	orrs	r1, r3
 800abaa:	d110      	bne.n	800abce <_dtoa_r+0xa7e>
 800abac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800abb0:	d029      	beq.n	800ac06 <_dtoa_r+0xab6>
 800abb2:	9b05      	ldr	r3, [sp, #20]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	dd02      	ble.n	800abbe <_dtoa_r+0xa6e>
 800abb8:	9b02      	ldr	r3, [sp, #8]
 800abba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800abbe:	9b01      	ldr	r3, [sp, #4]
 800abc0:	f883 9000 	strb.w	r9, [r3]
 800abc4:	e774      	b.n	800aab0 <_dtoa_r+0x960>
 800abc6:	4638      	mov	r0, r7
 800abc8:	e7ba      	b.n	800ab40 <_dtoa_r+0x9f0>
 800abca:	2201      	movs	r2, #1
 800abcc:	e7e1      	b.n	800ab92 <_dtoa_r+0xa42>
 800abce:	9b05      	ldr	r3, [sp, #20]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	db04      	blt.n	800abde <_dtoa_r+0xa8e>
 800abd4:	9907      	ldr	r1, [sp, #28]
 800abd6:	430b      	orrs	r3, r1
 800abd8:	9906      	ldr	r1, [sp, #24]
 800abda:	430b      	orrs	r3, r1
 800abdc:	d120      	bne.n	800ac20 <_dtoa_r+0xad0>
 800abde:	2a00      	cmp	r2, #0
 800abe0:	dded      	ble.n	800abbe <_dtoa_r+0xa6e>
 800abe2:	4651      	mov	r1, sl
 800abe4:	2201      	movs	r2, #1
 800abe6:	4620      	mov	r0, r4
 800abe8:	f000 fd06 	bl	800b5f8 <__lshift>
 800abec:	4631      	mov	r1, r6
 800abee:	4682      	mov	sl, r0
 800abf0:	f000 fd6e 	bl	800b6d0 <__mcmp>
 800abf4:	2800      	cmp	r0, #0
 800abf6:	dc03      	bgt.n	800ac00 <_dtoa_r+0xab0>
 800abf8:	d1e1      	bne.n	800abbe <_dtoa_r+0xa6e>
 800abfa:	f019 0f01 	tst.w	r9, #1
 800abfe:	d0de      	beq.n	800abbe <_dtoa_r+0xa6e>
 800ac00:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ac04:	d1d8      	bne.n	800abb8 <_dtoa_r+0xa68>
 800ac06:	9a01      	ldr	r2, [sp, #4]
 800ac08:	2339      	movs	r3, #57	; 0x39
 800ac0a:	7013      	strb	r3, [r2, #0]
 800ac0c:	462b      	mov	r3, r5
 800ac0e:	461d      	mov	r5, r3
 800ac10:	3b01      	subs	r3, #1
 800ac12:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ac16:	2a39      	cmp	r2, #57	; 0x39
 800ac18:	d06c      	beq.n	800acf4 <_dtoa_r+0xba4>
 800ac1a:	3201      	adds	r2, #1
 800ac1c:	701a      	strb	r2, [r3, #0]
 800ac1e:	e747      	b.n	800aab0 <_dtoa_r+0x960>
 800ac20:	2a00      	cmp	r2, #0
 800ac22:	dd07      	ble.n	800ac34 <_dtoa_r+0xae4>
 800ac24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ac28:	d0ed      	beq.n	800ac06 <_dtoa_r+0xab6>
 800ac2a:	9a01      	ldr	r2, [sp, #4]
 800ac2c:	f109 0301 	add.w	r3, r9, #1
 800ac30:	7013      	strb	r3, [r2, #0]
 800ac32:	e73d      	b.n	800aab0 <_dtoa_r+0x960>
 800ac34:	9b04      	ldr	r3, [sp, #16]
 800ac36:	9a08      	ldr	r2, [sp, #32]
 800ac38:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d043      	beq.n	800acc8 <_dtoa_r+0xb78>
 800ac40:	4651      	mov	r1, sl
 800ac42:	2300      	movs	r3, #0
 800ac44:	220a      	movs	r2, #10
 800ac46:	4620      	mov	r0, r4
 800ac48:	f000 fb28 	bl	800b29c <__multadd>
 800ac4c:	45b8      	cmp	r8, r7
 800ac4e:	4682      	mov	sl, r0
 800ac50:	f04f 0300 	mov.w	r3, #0
 800ac54:	f04f 020a 	mov.w	r2, #10
 800ac58:	4641      	mov	r1, r8
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	d107      	bne.n	800ac6e <_dtoa_r+0xb1e>
 800ac5e:	f000 fb1d 	bl	800b29c <__multadd>
 800ac62:	4680      	mov	r8, r0
 800ac64:	4607      	mov	r7, r0
 800ac66:	9b04      	ldr	r3, [sp, #16]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	9304      	str	r3, [sp, #16]
 800ac6c:	e775      	b.n	800ab5a <_dtoa_r+0xa0a>
 800ac6e:	f000 fb15 	bl	800b29c <__multadd>
 800ac72:	4639      	mov	r1, r7
 800ac74:	4680      	mov	r8, r0
 800ac76:	2300      	movs	r3, #0
 800ac78:	220a      	movs	r2, #10
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f000 fb0e 	bl	800b29c <__multadd>
 800ac80:	4607      	mov	r7, r0
 800ac82:	e7f0      	b.n	800ac66 <_dtoa_r+0xb16>
 800ac84:	9b04      	ldr	r3, [sp, #16]
 800ac86:	9301      	str	r3, [sp, #4]
 800ac88:	9d00      	ldr	r5, [sp, #0]
 800ac8a:	4631      	mov	r1, r6
 800ac8c:	4650      	mov	r0, sl
 800ac8e:	f7ff f9d5 	bl	800a03c <quorem>
 800ac92:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ac96:	9b00      	ldr	r3, [sp, #0]
 800ac98:	f805 9b01 	strb.w	r9, [r5], #1
 800ac9c:	1aea      	subs	r2, r5, r3
 800ac9e:	9b01      	ldr	r3, [sp, #4]
 800aca0:	4293      	cmp	r3, r2
 800aca2:	dd07      	ble.n	800acb4 <_dtoa_r+0xb64>
 800aca4:	4651      	mov	r1, sl
 800aca6:	2300      	movs	r3, #0
 800aca8:	220a      	movs	r2, #10
 800acaa:	4620      	mov	r0, r4
 800acac:	f000 faf6 	bl	800b29c <__multadd>
 800acb0:	4682      	mov	sl, r0
 800acb2:	e7ea      	b.n	800ac8a <_dtoa_r+0xb3a>
 800acb4:	9b01      	ldr	r3, [sp, #4]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	bfc8      	it	gt
 800acba:	461d      	movgt	r5, r3
 800acbc:	9b00      	ldr	r3, [sp, #0]
 800acbe:	bfd8      	it	le
 800acc0:	2501      	movle	r5, #1
 800acc2:	441d      	add	r5, r3
 800acc4:	f04f 0800 	mov.w	r8, #0
 800acc8:	4651      	mov	r1, sl
 800acca:	2201      	movs	r2, #1
 800accc:	4620      	mov	r0, r4
 800acce:	f000 fc93 	bl	800b5f8 <__lshift>
 800acd2:	4631      	mov	r1, r6
 800acd4:	4682      	mov	sl, r0
 800acd6:	f000 fcfb 	bl	800b6d0 <__mcmp>
 800acda:	2800      	cmp	r0, #0
 800acdc:	dc96      	bgt.n	800ac0c <_dtoa_r+0xabc>
 800acde:	d102      	bne.n	800ace6 <_dtoa_r+0xb96>
 800ace0:	f019 0f01 	tst.w	r9, #1
 800ace4:	d192      	bne.n	800ac0c <_dtoa_r+0xabc>
 800ace6:	462b      	mov	r3, r5
 800ace8:	461d      	mov	r5, r3
 800acea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acee:	2a30      	cmp	r2, #48	; 0x30
 800acf0:	d0fa      	beq.n	800ace8 <_dtoa_r+0xb98>
 800acf2:	e6dd      	b.n	800aab0 <_dtoa_r+0x960>
 800acf4:	9a00      	ldr	r2, [sp, #0]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d189      	bne.n	800ac0e <_dtoa_r+0xabe>
 800acfa:	f10b 0b01 	add.w	fp, fp, #1
 800acfe:	2331      	movs	r3, #49	; 0x31
 800ad00:	e796      	b.n	800ac30 <_dtoa_r+0xae0>
 800ad02:	4b0a      	ldr	r3, [pc, #40]	; (800ad2c <_dtoa_r+0xbdc>)
 800ad04:	f7ff ba99 	b.w	800a23a <_dtoa_r+0xea>
 800ad08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	f47f aa6d 	bne.w	800a1ea <_dtoa_r+0x9a>
 800ad10:	4b07      	ldr	r3, [pc, #28]	; (800ad30 <_dtoa_r+0xbe0>)
 800ad12:	f7ff ba92 	b.w	800a23a <_dtoa_r+0xea>
 800ad16:	9b01      	ldr	r3, [sp, #4]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	dcb5      	bgt.n	800ac88 <_dtoa_r+0xb38>
 800ad1c:	9b07      	ldr	r3, [sp, #28]
 800ad1e:	2b02      	cmp	r3, #2
 800ad20:	f73f aeb1 	bgt.w	800aa86 <_dtoa_r+0x936>
 800ad24:	e7b0      	b.n	800ac88 <_dtoa_r+0xb38>
 800ad26:	bf00      	nop
 800ad28:	0800c6e8 	.word	0x0800c6e8
 800ad2c:	0800c648 	.word	0x0800c648
 800ad30:	0800c66c 	.word	0x0800c66c

0800ad34 <_free_r>:
 800ad34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad36:	2900      	cmp	r1, #0
 800ad38:	d044      	beq.n	800adc4 <_free_r+0x90>
 800ad3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad3e:	9001      	str	r0, [sp, #4]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	f1a1 0404 	sub.w	r4, r1, #4
 800ad46:	bfb8      	it	lt
 800ad48:	18e4      	addlt	r4, r4, r3
 800ad4a:	f7ff f83f 	bl	8009dcc <__malloc_lock>
 800ad4e:	4a1e      	ldr	r2, [pc, #120]	; (800adc8 <_free_r+0x94>)
 800ad50:	9801      	ldr	r0, [sp, #4]
 800ad52:	6813      	ldr	r3, [r2, #0]
 800ad54:	b933      	cbnz	r3, 800ad64 <_free_r+0x30>
 800ad56:	6063      	str	r3, [r4, #4]
 800ad58:	6014      	str	r4, [r2, #0]
 800ad5a:	b003      	add	sp, #12
 800ad5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad60:	f7ff b83a 	b.w	8009dd8 <__malloc_unlock>
 800ad64:	42a3      	cmp	r3, r4
 800ad66:	d908      	bls.n	800ad7a <_free_r+0x46>
 800ad68:	6825      	ldr	r5, [r4, #0]
 800ad6a:	1961      	adds	r1, r4, r5
 800ad6c:	428b      	cmp	r3, r1
 800ad6e:	bf01      	itttt	eq
 800ad70:	6819      	ldreq	r1, [r3, #0]
 800ad72:	685b      	ldreq	r3, [r3, #4]
 800ad74:	1949      	addeq	r1, r1, r5
 800ad76:	6021      	streq	r1, [r4, #0]
 800ad78:	e7ed      	b.n	800ad56 <_free_r+0x22>
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	b10b      	cbz	r3, 800ad84 <_free_r+0x50>
 800ad80:	42a3      	cmp	r3, r4
 800ad82:	d9fa      	bls.n	800ad7a <_free_r+0x46>
 800ad84:	6811      	ldr	r1, [r2, #0]
 800ad86:	1855      	adds	r5, r2, r1
 800ad88:	42a5      	cmp	r5, r4
 800ad8a:	d10b      	bne.n	800ada4 <_free_r+0x70>
 800ad8c:	6824      	ldr	r4, [r4, #0]
 800ad8e:	4421      	add	r1, r4
 800ad90:	1854      	adds	r4, r2, r1
 800ad92:	42a3      	cmp	r3, r4
 800ad94:	6011      	str	r1, [r2, #0]
 800ad96:	d1e0      	bne.n	800ad5a <_free_r+0x26>
 800ad98:	681c      	ldr	r4, [r3, #0]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	6053      	str	r3, [r2, #4]
 800ad9e:	440c      	add	r4, r1
 800ada0:	6014      	str	r4, [r2, #0]
 800ada2:	e7da      	b.n	800ad5a <_free_r+0x26>
 800ada4:	d902      	bls.n	800adac <_free_r+0x78>
 800ada6:	230c      	movs	r3, #12
 800ada8:	6003      	str	r3, [r0, #0]
 800adaa:	e7d6      	b.n	800ad5a <_free_r+0x26>
 800adac:	6825      	ldr	r5, [r4, #0]
 800adae:	1961      	adds	r1, r4, r5
 800adb0:	428b      	cmp	r3, r1
 800adb2:	bf04      	itt	eq
 800adb4:	6819      	ldreq	r1, [r3, #0]
 800adb6:	685b      	ldreq	r3, [r3, #4]
 800adb8:	6063      	str	r3, [r4, #4]
 800adba:	bf04      	itt	eq
 800adbc:	1949      	addeq	r1, r1, r5
 800adbe:	6021      	streq	r1, [r4, #0]
 800adc0:	6054      	str	r4, [r2, #4]
 800adc2:	e7ca      	b.n	800ad5a <_free_r+0x26>
 800adc4:	b003      	add	sp, #12
 800adc6:	bd30      	pop	{r4, r5, pc}
 800adc8:	20003254 	.word	0x20003254

0800adcc <__ssputs_r>:
 800adcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800add0:	688e      	ldr	r6, [r1, #8]
 800add2:	461f      	mov	r7, r3
 800add4:	42be      	cmp	r6, r7
 800add6:	680b      	ldr	r3, [r1, #0]
 800add8:	4682      	mov	sl, r0
 800adda:	460c      	mov	r4, r1
 800addc:	4690      	mov	r8, r2
 800adde:	d82c      	bhi.n	800ae3a <__ssputs_r+0x6e>
 800ade0:	898a      	ldrh	r2, [r1, #12]
 800ade2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ade6:	d026      	beq.n	800ae36 <__ssputs_r+0x6a>
 800ade8:	6965      	ldr	r5, [r4, #20]
 800adea:	6909      	ldr	r1, [r1, #16]
 800adec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adf0:	eba3 0901 	sub.w	r9, r3, r1
 800adf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800adf8:	1c7b      	adds	r3, r7, #1
 800adfa:	444b      	add	r3, r9
 800adfc:	106d      	asrs	r5, r5, #1
 800adfe:	429d      	cmp	r5, r3
 800ae00:	bf38      	it	cc
 800ae02:	461d      	movcc	r5, r3
 800ae04:	0553      	lsls	r3, r2, #21
 800ae06:	d527      	bpl.n	800ae58 <__ssputs_r+0x8c>
 800ae08:	4629      	mov	r1, r5
 800ae0a:	f7fe fdcf 	bl	80099ac <_malloc_r>
 800ae0e:	4606      	mov	r6, r0
 800ae10:	b360      	cbz	r0, 800ae6c <__ssputs_r+0xa0>
 800ae12:	6921      	ldr	r1, [r4, #16]
 800ae14:	464a      	mov	r2, r9
 800ae16:	f000 fe2d 	bl	800ba74 <memcpy>
 800ae1a:	89a3      	ldrh	r3, [r4, #12]
 800ae1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae24:	81a3      	strh	r3, [r4, #12]
 800ae26:	6126      	str	r6, [r4, #16]
 800ae28:	6165      	str	r5, [r4, #20]
 800ae2a:	444e      	add	r6, r9
 800ae2c:	eba5 0509 	sub.w	r5, r5, r9
 800ae30:	6026      	str	r6, [r4, #0]
 800ae32:	60a5      	str	r5, [r4, #8]
 800ae34:	463e      	mov	r6, r7
 800ae36:	42be      	cmp	r6, r7
 800ae38:	d900      	bls.n	800ae3c <__ssputs_r+0x70>
 800ae3a:	463e      	mov	r6, r7
 800ae3c:	6820      	ldr	r0, [r4, #0]
 800ae3e:	4632      	mov	r2, r6
 800ae40:	4641      	mov	r1, r8
 800ae42:	f000 fdb7 	bl	800b9b4 <memmove>
 800ae46:	68a3      	ldr	r3, [r4, #8]
 800ae48:	1b9b      	subs	r3, r3, r6
 800ae4a:	60a3      	str	r3, [r4, #8]
 800ae4c:	6823      	ldr	r3, [r4, #0]
 800ae4e:	4433      	add	r3, r6
 800ae50:	6023      	str	r3, [r4, #0]
 800ae52:	2000      	movs	r0, #0
 800ae54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae58:	462a      	mov	r2, r5
 800ae5a:	f000 fd7c 	bl	800b956 <_realloc_r>
 800ae5e:	4606      	mov	r6, r0
 800ae60:	2800      	cmp	r0, #0
 800ae62:	d1e0      	bne.n	800ae26 <__ssputs_r+0x5a>
 800ae64:	6921      	ldr	r1, [r4, #16]
 800ae66:	4650      	mov	r0, sl
 800ae68:	f7ff ff64 	bl	800ad34 <_free_r>
 800ae6c:	230c      	movs	r3, #12
 800ae6e:	f8ca 3000 	str.w	r3, [sl]
 800ae72:	89a3      	ldrh	r3, [r4, #12]
 800ae74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae78:	81a3      	strh	r3, [r4, #12]
 800ae7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae7e:	e7e9      	b.n	800ae54 <__ssputs_r+0x88>

0800ae80 <_svfiprintf_r>:
 800ae80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae84:	4698      	mov	r8, r3
 800ae86:	898b      	ldrh	r3, [r1, #12]
 800ae88:	061b      	lsls	r3, r3, #24
 800ae8a:	b09d      	sub	sp, #116	; 0x74
 800ae8c:	4607      	mov	r7, r0
 800ae8e:	460d      	mov	r5, r1
 800ae90:	4614      	mov	r4, r2
 800ae92:	d50e      	bpl.n	800aeb2 <_svfiprintf_r+0x32>
 800ae94:	690b      	ldr	r3, [r1, #16]
 800ae96:	b963      	cbnz	r3, 800aeb2 <_svfiprintf_r+0x32>
 800ae98:	2140      	movs	r1, #64	; 0x40
 800ae9a:	f7fe fd87 	bl	80099ac <_malloc_r>
 800ae9e:	6028      	str	r0, [r5, #0]
 800aea0:	6128      	str	r0, [r5, #16]
 800aea2:	b920      	cbnz	r0, 800aeae <_svfiprintf_r+0x2e>
 800aea4:	230c      	movs	r3, #12
 800aea6:	603b      	str	r3, [r7, #0]
 800aea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aeac:	e0d0      	b.n	800b050 <_svfiprintf_r+0x1d0>
 800aeae:	2340      	movs	r3, #64	; 0x40
 800aeb0:	616b      	str	r3, [r5, #20]
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	9309      	str	r3, [sp, #36]	; 0x24
 800aeb6:	2320      	movs	r3, #32
 800aeb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aebc:	f8cd 800c 	str.w	r8, [sp, #12]
 800aec0:	2330      	movs	r3, #48	; 0x30
 800aec2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b068 <_svfiprintf_r+0x1e8>
 800aec6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aeca:	f04f 0901 	mov.w	r9, #1
 800aece:	4623      	mov	r3, r4
 800aed0:	469a      	mov	sl, r3
 800aed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aed6:	b10a      	cbz	r2, 800aedc <_svfiprintf_r+0x5c>
 800aed8:	2a25      	cmp	r2, #37	; 0x25
 800aeda:	d1f9      	bne.n	800aed0 <_svfiprintf_r+0x50>
 800aedc:	ebba 0b04 	subs.w	fp, sl, r4
 800aee0:	d00b      	beq.n	800aefa <_svfiprintf_r+0x7a>
 800aee2:	465b      	mov	r3, fp
 800aee4:	4622      	mov	r2, r4
 800aee6:	4629      	mov	r1, r5
 800aee8:	4638      	mov	r0, r7
 800aeea:	f7ff ff6f 	bl	800adcc <__ssputs_r>
 800aeee:	3001      	adds	r0, #1
 800aef0:	f000 80a9 	beq.w	800b046 <_svfiprintf_r+0x1c6>
 800aef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aef6:	445a      	add	r2, fp
 800aef8:	9209      	str	r2, [sp, #36]	; 0x24
 800aefa:	f89a 3000 	ldrb.w	r3, [sl]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	f000 80a1 	beq.w	800b046 <_svfiprintf_r+0x1c6>
 800af04:	2300      	movs	r3, #0
 800af06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af0e:	f10a 0a01 	add.w	sl, sl, #1
 800af12:	9304      	str	r3, [sp, #16]
 800af14:	9307      	str	r3, [sp, #28]
 800af16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af1a:	931a      	str	r3, [sp, #104]	; 0x68
 800af1c:	4654      	mov	r4, sl
 800af1e:	2205      	movs	r2, #5
 800af20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af24:	4850      	ldr	r0, [pc, #320]	; (800b068 <_svfiprintf_r+0x1e8>)
 800af26:	f7f5 f973 	bl	8000210 <memchr>
 800af2a:	9a04      	ldr	r2, [sp, #16]
 800af2c:	b9d8      	cbnz	r0, 800af66 <_svfiprintf_r+0xe6>
 800af2e:	06d0      	lsls	r0, r2, #27
 800af30:	bf44      	itt	mi
 800af32:	2320      	movmi	r3, #32
 800af34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af38:	0711      	lsls	r1, r2, #28
 800af3a:	bf44      	itt	mi
 800af3c:	232b      	movmi	r3, #43	; 0x2b
 800af3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af42:	f89a 3000 	ldrb.w	r3, [sl]
 800af46:	2b2a      	cmp	r3, #42	; 0x2a
 800af48:	d015      	beq.n	800af76 <_svfiprintf_r+0xf6>
 800af4a:	9a07      	ldr	r2, [sp, #28]
 800af4c:	4654      	mov	r4, sl
 800af4e:	2000      	movs	r0, #0
 800af50:	f04f 0c0a 	mov.w	ip, #10
 800af54:	4621      	mov	r1, r4
 800af56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af5a:	3b30      	subs	r3, #48	; 0x30
 800af5c:	2b09      	cmp	r3, #9
 800af5e:	d94d      	bls.n	800affc <_svfiprintf_r+0x17c>
 800af60:	b1b0      	cbz	r0, 800af90 <_svfiprintf_r+0x110>
 800af62:	9207      	str	r2, [sp, #28]
 800af64:	e014      	b.n	800af90 <_svfiprintf_r+0x110>
 800af66:	eba0 0308 	sub.w	r3, r0, r8
 800af6a:	fa09 f303 	lsl.w	r3, r9, r3
 800af6e:	4313      	orrs	r3, r2
 800af70:	9304      	str	r3, [sp, #16]
 800af72:	46a2      	mov	sl, r4
 800af74:	e7d2      	b.n	800af1c <_svfiprintf_r+0x9c>
 800af76:	9b03      	ldr	r3, [sp, #12]
 800af78:	1d19      	adds	r1, r3, #4
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	9103      	str	r1, [sp, #12]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	bfbb      	ittet	lt
 800af82:	425b      	neglt	r3, r3
 800af84:	f042 0202 	orrlt.w	r2, r2, #2
 800af88:	9307      	strge	r3, [sp, #28]
 800af8a:	9307      	strlt	r3, [sp, #28]
 800af8c:	bfb8      	it	lt
 800af8e:	9204      	strlt	r2, [sp, #16]
 800af90:	7823      	ldrb	r3, [r4, #0]
 800af92:	2b2e      	cmp	r3, #46	; 0x2e
 800af94:	d10c      	bne.n	800afb0 <_svfiprintf_r+0x130>
 800af96:	7863      	ldrb	r3, [r4, #1]
 800af98:	2b2a      	cmp	r3, #42	; 0x2a
 800af9a:	d134      	bne.n	800b006 <_svfiprintf_r+0x186>
 800af9c:	9b03      	ldr	r3, [sp, #12]
 800af9e:	1d1a      	adds	r2, r3, #4
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	9203      	str	r2, [sp, #12]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	bfb8      	it	lt
 800afa8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800afac:	3402      	adds	r4, #2
 800afae:	9305      	str	r3, [sp, #20]
 800afb0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b078 <_svfiprintf_r+0x1f8>
 800afb4:	7821      	ldrb	r1, [r4, #0]
 800afb6:	2203      	movs	r2, #3
 800afb8:	4650      	mov	r0, sl
 800afba:	f7f5 f929 	bl	8000210 <memchr>
 800afbe:	b138      	cbz	r0, 800afd0 <_svfiprintf_r+0x150>
 800afc0:	9b04      	ldr	r3, [sp, #16]
 800afc2:	eba0 000a 	sub.w	r0, r0, sl
 800afc6:	2240      	movs	r2, #64	; 0x40
 800afc8:	4082      	lsls	r2, r0
 800afca:	4313      	orrs	r3, r2
 800afcc:	3401      	adds	r4, #1
 800afce:	9304      	str	r3, [sp, #16]
 800afd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afd4:	4825      	ldr	r0, [pc, #148]	; (800b06c <_svfiprintf_r+0x1ec>)
 800afd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afda:	2206      	movs	r2, #6
 800afdc:	f7f5 f918 	bl	8000210 <memchr>
 800afe0:	2800      	cmp	r0, #0
 800afe2:	d038      	beq.n	800b056 <_svfiprintf_r+0x1d6>
 800afe4:	4b22      	ldr	r3, [pc, #136]	; (800b070 <_svfiprintf_r+0x1f0>)
 800afe6:	bb1b      	cbnz	r3, 800b030 <_svfiprintf_r+0x1b0>
 800afe8:	9b03      	ldr	r3, [sp, #12]
 800afea:	3307      	adds	r3, #7
 800afec:	f023 0307 	bic.w	r3, r3, #7
 800aff0:	3308      	adds	r3, #8
 800aff2:	9303      	str	r3, [sp, #12]
 800aff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aff6:	4433      	add	r3, r6
 800aff8:	9309      	str	r3, [sp, #36]	; 0x24
 800affa:	e768      	b.n	800aece <_svfiprintf_r+0x4e>
 800affc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b000:	460c      	mov	r4, r1
 800b002:	2001      	movs	r0, #1
 800b004:	e7a6      	b.n	800af54 <_svfiprintf_r+0xd4>
 800b006:	2300      	movs	r3, #0
 800b008:	3401      	adds	r4, #1
 800b00a:	9305      	str	r3, [sp, #20]
 800b00c:	4619      	mov	r1, r3
 800b00e:	f04f 0c0a 	mov.w	ip, #10
 800b012:	4620      	mov	r0, r4
 800b014:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b018:	3a30      	subs	r2, #48	; 0x30
 800b01a:	2a09      	cmp	r2, #9
 800b01c:	d903      	bls.n	800b026 <_svfiprintf_r+0x1a6>
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d0c6      	beq.n	800afb0 <_svfiprintf_r+0x130>
 800b022:	9105      	str	r1, [sp, #20]
 800b024:	e7c4      	b.n	800afb0 <_svfiprintf_r+0x130>
 800b026:	fb0c 2101 	mla	r1, ip, r1, r2
 800b02a:	4604      	mov	r4, r0
 800b02c:	2301      	movs	r3, #1
 800b02e:	e7f0      	b.n	800b012 <_svfiprintf_r+0x192>
 800b030:	ab03      	add	r3, sp, #12
 800b032:	9300      	str	r3, [sp, #0]
 800b034:	462a      	mov	r2, r5
 800b036:	4b0f      	ldr	r3, [pc, #60]	; (800b074 <_svfiprintf_r+0x1f4>)
 800b038:	a904      	add	r1, sp, #16
 800b03a:	4638      	mov	r0, r7
 800b03c:	f7fe fa50 	bl	80094e0 <_printf_float>
 800b040:	1c42      	adds	r2, r0, #1
 800b042:	4606      	mov	r6, r0
 800b044:	d1d6      	bne.n	800aff4 <_svfiprintf_r+0x174>
 800b046:	89ab      	ldrh	r3, [r5, #12]
 800b048:	065b      	lsls	r3, r3, #25
 800b04a:	f53f af2d 	bmi.w	800aea8 <_svfiprintf_r+0x28>
 800b04e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b050:	b01d      	add	sp, #116	; 0x74
 800b052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b056:	ab03      	add	r3, sp, #12
 800b058:	9300      	str	r3, [sp, #0]
 800b05a:	462a      	mov	r2, r5
 800b05c:	4b05      	ldr	r3, [pc, #20]	; (800b074 <_svfiprintf_r+0x1f4>)
 800b05e:	a904      	add	r1, sp, #16
 800b060:	4638      	mov	r0, r7
 800b062:	f7fe fd91 	bl	8009b88 <_printf_i>
 800b066:	e7eb      	b.n	800b040 <_svfiprintf_r+0x1c0>
 800b068:	0800c6f9 	.word	0x0800c6f9
 800b06c:	0800c703 	.word	0x0800c703
 800b070:	080094e1 	.word	0x080094e1
 800b074:	0800adcd 	.word	0x0800adcd
 800b078:	0800c6ff 	.word	0x0800c6ff

0800b07c <__sflush_r>:
 800b07c:	898a      	ldrh	r2, [r1, #12]
 800b07e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b082:	4605      	mov	r5, r0
 800b084:	0710      	lsls	r0, r2, #28
 800b086:	460c      	mov	r4, r1
 800b088:	d458      	bmi.n	800b13c <__sflush_r+0xc0>
 800b08a:	684b      	ldr	r3, [r1, #4]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	dc05      	bgt.n	800b09c <__sflush_r+0x20>
 800b090:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b092:	2b00      	cmp	r3, #0
 800b094:	dc02      	bgt.n	800b09c <__sflush_r+0x20>
 800b096:	2000      	movs	r0, #0
 800b098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b09c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b09e:	2e00      	cmp	r6, #0
 800b0a0:	d0f9      	beq.n	800b096 <__sflush_r+0x1a>
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b0a8:	682f      	ldr	r7, [r5, #0]
 800b0aa:	6a21      	ldr	r1, [r4, #32]
 800b0ac:	602b      	str	r3, [r5, #0]
 800b0ae:	d032      	beq.n	800b116 <__sflush_r+0x9a>
 800b0b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b0b2:	89a3      	ldrh	r3, [r4, #12]
 800b0b4:	075a      	lsls	r2, r3, #29
 800b0b6:	d505      	bpl.n	800b0c4 <__sflush_r+0x48>
 800b0b8:	6863      	ldr	r3, [r4, #4]
 800b0ba:	1ac0      	subs	r0, r0, r3
 800b0bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b0be:	b10b      	cbz	r3, 800b0c4 <__sflush_r+0x48>
 800b0c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0c2:	1ac0      	subs	r0, r0, r3
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0ca:	6a21      	ldr	r1, [r4, #32]
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	47b0      	blx	r6
 800b0d0:	1c43      	adds	r3, r0, #1
 800b0d2:	89a3      	ldrh	r3, [r4, #12]
 800b0d4:	d106      	bne.n	800b0e4 <__sflush_r+0x68>
 800b0d6:	6829      	ldr	r1, [r5, #0]
 800b0d8:	291d      	cmp	r1, #29
 800b0da:	d82b      	bhi.n	800b134 <__sflush_r+0xb8>
 800b0dc:	4a29      	ldr	r2, [pc, #164]	; (800b184 <__sflush_r+0x108>)
 800b0de:	410a      	asrs	r2, r1
 800b0e0:	07d6      	lsls	r6, r2, #31
 800b0e2:	d427      	bmi.n	800b134 <__sflush_r+0xb8>
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	6062      	str	r2, [r4, #4]
 800b0e8:	04d9      	lsls	r1, r3, #19
 800b0ea:	6922      	ldr	r2, [r4, #16]
 800b0ec:	6022      	str	r2, [r4, #0]
 800b0ee:	d504      	bpl.n	800b0fa <__sflush_r+0x7e>
 800b0f0:	1c42      	adds	r2, r0, #1
 800b0f2:	d101      	bne.n	800b0f8 <__sflush_r+0x7c>
 800b0f4:	682b      	ldr	r3, [r5, #0]
 800b0f6:	b903      	cbnz	r3, 800b0fa <__sflush_r+0x7e>
 800b0f8:	6560      	str	r0, [r4, #84]	; 0x54
 800b0fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0fc:	602f      	str	r7, [r5, #0]
 800b0fe:	2900      	cmp	r1, #0
 800b100:	d0c9      	beq.n	800b096 <__sflush_r+0x1a>
 800b102:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b106:	4299      	cmp	r1, r3
 800b108:	d002      	beq.n	800b110 <__sflush_r+0x94>
 800b10a:	4628      	mov	r0, r5
 800b10c:	f7ff fe12 	bl	800ad34 <_free_r>
 800b110:	2000      	movs	r0, #0
 800b112:	6360      	str	r0, [r4, #52]	; 0x34
 800b114:	e7c0      	b.n	800b098 <__sflush_r+0x1c>
 800b116:	2301      	movs	r3, #1
 800b118:	4628      	mov	r0, r5
 800b11a:	47b0      	blx	r6
 800b11c:	1c41      	adds	r1, r0, #1
 800b11e:	d1c8      	bne.n	800b0b2 <__sflush_r+0x36>
 800b120:	682b      	ldr	r3, [r5, #0]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d0c5      	beq.n	800b0b2 <__sflush_r+0x36>
 800b126:	2b1d      	cmp	r3, #29
 800b128:	d001      	beq.n	800b12e <__sflush_r+0xb2>
 800b12a:	2b16      	cmp	r3, #22
 800b12c:	d101      	bne.n	800b132 <__sflush_r+0xb6>
 800b12e:	602f      	str	r7, [r5, #0]
 800b130:	e7b1      	b.n	800b096 <__sflush_r+0x1a>
 800b132:	89a3      	ldrh	r3, [r4, #12]
 800b134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b138:	81a3      	strh	r3, [r4, #12]
 800b13a:	e7ad      	b.n	800b098 <__sflush_r+0x1c>
 800b13c:	690f      	ldr	r7, [r1, #16]
 800b13e:	2f00      	cmp	r7, #0
 800b140:	d0a9      	beq.n	800b096 <__sflush_r+0x1a>
 800b142:	0793      	lsls	r3, r2, #30
 800b144:	680e      	ldr	r6, [r1, #0]
 800b146:	bf08      	it	eq
 800b148:	694b      	ldreq	r3, [r1, #20]
 800b14a:	600f      	str	r7, [r1, #0]
 800b14c:	bf18      	it	ne
 800b14e:	2300      	movne	r3, #0
 800b150:	eba6 0807 	sub.w	r8, r6, r7
 800b154:	608b      	str	r3, [r1, #8]
 800b156:	f1b8 0f00 	cmp.w	r8, #0
 800b15a:	dd9c      	ble.n	800b096 <__sflush_r+0x1a>
 800b15c:	6a21      	ldr	r1, [r4, #32]
 800b15e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b160:	4643      	mov	r3, r8
 800b162:	463a      	mov	r2, r7
 800b164:	4628      	mov	r0, r5
 800b166:	47b0      	blx	r6
 800b168:	2800      	cmp	r0, #0
 800b16a:	dc06      	bgt.n	800b17a <__sflush_r+0xfe>
 800b16c:	89a3      	ldrh	r3, [r4, #12]
 800b16e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b172:	81a3      	strh	r3, [r4, #12]
 800b174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b178:	e78e      	b.n	800b098 <__sflush_r+0x1c>
 800b17a:	4407      	add	r7, r0
 800b17c:	eba8 0800 	sub.w	r8, r8, r0
 800b180:	e7e9      	b.n	800b156 <__sflush_r+0xda>
 800b182:	bf00      	nop
 800b184:	dfbffffe 	.word	0xdfbffffe

0800b188 <_fflush_r>:
 800b188:	b538      	push	{r3, r4, r5, lr}
 800b18a:	690b      	ldr	r3, [r1, #16]
 800b18c:	4605      	mov	r5, r0
 800b18e:	460c      	mov	r4, r1
 800b190:	b913      	cbnz	r3, 800b198 <_fflush_r+0x10>
 800b192:	2500      	movs	r5, #0
 800b194:	4628      	mov	r0, r5
 800b196:	bd38      	pop	{r3, r4, r5, pc}
 800b198:	b118      	cbz	r0, 800b1a2 <_fflush_r+0x1a>
 800b19a:	6a03      	ldr	r3, [r0, #32]
 800b19c:	b90b      	cbnz	r3, 800b1a2 <_fflush_r+0x1a>
 800b19e:	f7fe febb 	bl	8009f18 <__sinit>
 800b1a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d0f3      	beq.n	800b192 <_fflush_r+0xa>
 800b1aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b1ac:	07d0      	lsls	r0, r2, #31
 800b1ae:	d404      	bmi.n	800b1ba <_fflush_r+0x32>
 800b1b0:	0599      	lsls	r1, r3, #22
 800b1b2:	d402      	bmi.n	800b1ba <_fflush_r+0x32>
 800b1b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1b6:	f7fe ff3f 	bl	800a038 <__retarget_lock_acquire_recursive>
 800b1ba:	4628      	mov	r0, r5
 800b1bc:	4621      	mov	r1, r4
 800b1be:	f7ff ff5d 	bl	800b07c <__sflush_r>
 800b1c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1c4:	07da      	lsls	r2, r3, #31
 800b1c6:	4605      	mov	r5, r0
 800b1c8:	d4e4      	bmi.n	800b194 <_fflush_r+0xc>
 800b1ca:	89a3      	ldrh	r3, [r4, #12]
 800b1cc:	059b      	lsls	r3, r3, #22
 800b1ce:	d4e1      	bmi.n	800b194 <_fflush_r+0xc>
 800b1d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1d2:	f7fe ff32 	bl	800a03a <__retarget_lock_release_recursive>
 800b1d6:	e7dd      	b.n	800b194 <_fflush_r+0xc>

0800b1d8 <_Balloc>:
 800b1d8:	b570      	push	{r4, r5, r6, lr}
 800b1da:	69c6      	ldr	r6, [r0, #28]
 800b1dc:	4604      	mov	r4, r0
 800b1de:	460d      	mov	r5, r1
 800b1e0:	b976      	cbnz	r6, 800b200 <_Balloc+0x28>
 800b1e2:	2010      	movs	r0, #16
 800b1e4:	f7fe fbb2 	bl	800994c <malloc>
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	61e0      	str	r0, [r4, #28]
 800b1ec:	b920      	cbnz	r0, 800b1f8 <_Balloc+0x20>
 800b1ee:	4b18      	ldr	r3, [pc, #96]	; (800b250 <_Balloc+0x78>)
 800b1f0:	4818      	ldr	r0, [pc, #96]	; (800b254 <_Balloc+0x7c>)
 800b1f2:	216b      	movs	r1, #107	; 0x6b
 800b1f4:	f000 fc4c 	bl	800ba90 <__assert_func>
 800b1f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1fc:	6006      	str	r6, [r0, #0]
 800b1fe:	60c6      	str	r6, [r0, #12]
 800b200:	69e6      	ldr	r6, [r4, #28]
 800b202:	68f3      	ldr	r3, [r6, #12]
 800b204:	b183      	cbz	r3, 800b228 <_Balloc+0x50>
 800b206:	69e3      	ldr	r3, [r4, #28]
 800b208:	68db      	ldr	r3, [r3, #12]
 800b20a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b20e:	b9b8      	cbnz	r0, 800b240 <_Balloc+0x68>
 800b210:	2101      	movs	r1, #1
 800b212:	fa01 f605 	lsl.w	r6, r1, r5
 800b216:	1d72      	adds	r2, r6, #5
 800b218:	0092      	lsls	r2, r2, #2
 800b21a:	4620      	mov	r0, r4
 800b21c:	f000 fc56 	bl	800bacc <_calloc_r>
 800b220:	b160      	cbz	r0, 800b23c <_Balloc+0x64>
 800b222:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b226:	e00e      	b.n	800b246 <_Balloc+0x6e>
 800b228:	2221      	movs	r2, #33	; 0x21
 800b22a:	2104      	movs	r1, #4
 800b22c:	4620      	mov	r0, r4
 800b22e:	f000 fc4d 	bl	800bacc <_calloc_r>
 800b232:	69e3      	ldr	r3, [r4, #28]
 800b234:	60f0      	str	r0, [r6, #12]
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d1e4      	bne.n	800b206 <_Balloc+0x2e>
 800b23c:	2000      	movs	r0, #0
 800b23e:	bd70      	pop	{r4, r5, r6, pc}
 800b240:	6802      	ldr	r2, [r0, #0]
 800b242:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b246:	2300      	movs	r3, #0
 800b248:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b24c:	e7f7      	b.n	800b23e <_Balloc+0x66>
 800b24e:	bf00      	nop
 800b250:	0800c679 	.word	0x0800c679
 800b254:	0800c70a 	.word	0x0800c70a

0800b258 <_Bfree>:
 800b258:	b570      	push	{r4, r5, r6, lr}
 800b25a:	69c6      	ldr	r6, [r0, #28]
 800b25c:	4605      	mov	r5, r0
 800b25e:	460c      	mov	r4, r1
 800b260:	b976      	cbnz	r6, 800b280 <_Bfree+0x28>
 800b262:	2010      	movs	r0, #16
 800b264:	f7fe fb72 	bl	800994c <malloc>
 800b268:	4602      	mov	r2, r0
 800b26a:	61e8      	str	r0, [r5, #28]
 800b26c:	b920      	cbnz	r0, 800b278 <_Bfree+0x20>
 800b26e:	4b09      	ldr	r3, [pc, #36]	; (800b294 <_Bfree+0x3c>)
 800b270:	4809      	ldr	r0, [pc, #36]	; (800b298 <_Bfree+0x40>)
 800b272:	218f      	movs	r1, #143	; 0x8f
 800b274:	f000 fc0c 	bl	800ba90 <__assert_func>
 800b278:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b27c:	6006      	str	r6, [r0, #0]
 800b27e:	60c6      	str	r6, [r0, #12]
 800b280:	b13c      	cbz	r4, 800b292 <_Bfree+0x3a>
 800b282:	69eb      	ldr	r3, [r5, #28]
 800b284:	6862      	ldr	r2, [r4, #4]
 800b286:	68db      	ldr	r3, [r3, #12]
 800b288:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b28c:	6021      	str	r1, [r4, #0]
 800b28e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b292:	bd70      	pop	{r4, r5, r6, pc}
 800b294:	0800c679 	.word	0x0800c679
 800b298:	0800c70a 	.word	0x0800c70a

0800b29c <__multadd>:
 800b29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a0:	690d      	ldr	r5, [r1, #16]
 800b2a2:	4607      	mov	r7, r0
 800b2a4:	460c      	mov	r4, r1
 800b2a6:	461e      	mov	r6, r3
 800b2a8:	f101 0c14 	add.w	ip, r1, #20
 800b2ac:	2000      	movs	r0, #0
 800b2ae:	f8dc 3000 	ldr.w	r3, [ip]
 800b2b2:	b299      	uxth	r1, r3
 800b2b4:	fb02 6101 	mla	r1, r2, r1, r6
 800b2b8:	0c1e      	lsrs	r6, r3, #16
 800b2ba:	0c0b      	lsrs	r3, r1, #16
 800b2bc:	fb02 3306 	mla	r3, r2, r6, r3
 800b2c0:	b289      	uxth	r1, r1
 800b2c2:	3001      	adds	r0, #1
 800b2c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b2c8:	4285      	cmp	r5, r0
 800b2ca:	f84c 1b04 	str.w	r1, [ip], #4
 800b2ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b2d2:	dcec      	bgt.n	800b2ae <__multadd+0x12>
 800b2d4:	b30e      	cbz	r6, 800b31a <__multadd+0x7e>
 800b2d6:	68a3      	ldr	r3, [r4, #8]
 800b2d8:	42ab      	cmp	r3, r5
 800b2da:	dc19      	bgt.n	800b310 <__multadd+0x74>
 800b2dc:	6861      	ldr	r1, [r4, #4]
 800b2de:	4638      	mov	r0, r7
 800b2e0:	3101      	adds	r1, #1
 800b2e2:	f7ff ff79 	bl	800b1d8 <_Balloc>
 800b2e6:	4680      	mov	r8, r0
 800b2e8:	b928      	cbnz	r0, 800b2f6 <__multadd+0x5a>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	4b0c      	ldr	r3, [pc, #48]	; (800b320 <__multadd+0x84>)
 800b2ee:	480d      	ldr	r0, [pc, #52]	; (800b324 <__multadd+0x88>)
 800b2f0:	21ba      	movs	r1, #186	; 0xba
 800b2f2:	f000 fbcd 	bl	800ba90 <__assert_func>
 800b2f6:	6922      	ldr	r2, [r4, #16]
 800b2f8:	3202      	adds	r2, #2
 800b2fa:	f104 010c 	add.w	r1, r4, #12
 800b2fe:	0092      	lsls	r2, r2, #2
 800b300:	300c      	adds	r0, #12
 800b302:	f000 fbb7 	bl	800ba74 <memcpy>
 800b306:	4621      	mov	r1, r4
 800b308:	4638      	mov	r0, r7
 800b30a:	f7ff ffa5 	bl	800b258 <_Bfree>
 800b30e:	4644      	mov	r4, r8
 800b310:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b314:	3501      	adds	r5, #1
 800b316:	615e      	str	r6, [r3, #20]
 800b318:	6125      	str	r5, [r4, #16]
 800b31a:	4620      	mov	r0, r4
 800b31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b320:	0800c6e8 	.word	0x0800c6e8
 800b324:	0800c70a 	.word	0x0800c70a

0800b328 <__hi0bits>:
 800b328:	0c03      	lsrs	r3, r0, #16
 800b32a:	041b      	lsls	r3, r3, #16
 800b32c:	b9d3      	cbnz	r3, 800b364 <__hi0bits+0x3c>
 800b32e:	0400      	lsls	r0, r0, #16
 800b330:	2310      	movs	r3, #16
 800b332:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b336:	bf04      	itt	eq
 800b338:	0200      	lsleq	r0, r0, #8
 800b33a:	3308      	addeq	r3, #8
 800b33c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b340:	bf04      	itt	eq
 800b342:	0100      	lsleq	r0, r0, #4
 800b344:	3304      	addeq	r3, #4
 800b346:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b34a:	bf04      	itt	eq
 800b34c:	0080      	lsleq	r0, r0, #2
 800b34e:	3302      	addeq	r3, #2
 800b350:	2800      	cmp	r0, #0
 800b352:	db05      	blt.n	800b360 <__hi0bits+0x38>
 800b354:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b358:	f103 0301 	add.w	r3, r3, #1
 800b35c:	bf08      	it	eq
 800b35e:	2320      	moveq	r3, #32
 800b360:	4618      	mov	r0, r3
 800b362:	4770      	bx	lr
 800b364:	2300      	movs	r3, #0
 800b366:	e7e4      	b.n	800b332 <__hi0bits+0xa>

0800b368 <__lo0bits>:
 800b368:	6803      	ldr	r3, [r0, #0]
 800b36a:	f013 0207 	ands.w	r2, r3, #7
 800b36e:	d00c      	beq.n	800b38a <__lo0bits+0x22>
 800b370:	07d9      	lsls	r1, r3, #31
 800b372:	d422      	bmi.n	800b3ba <__lo0bits+0x52>
 800b374:	079a      	lsls	r2, r3, #30
 800b376:	bf49      	itett	mi
 800b378:	085b      	lsrmi	r3, r3, #1
 800b37a:	089b      	lsrpl	r3, r3, #2
 800b37c:	6003      	strmi	r3, [r0, #0]
 800b37e:	2201      	movmi	r2, #1
 800b380:	bf5c      	itt	pl
 800b382:	6003      	strpl	r3, [r0, #0]
 800b384:	2202      	movpl	r2, #2
 800b386:	4610      	mov	r0, r2
 800b388:	4770      	bx	lr
 800b38a:	b299      	uxth	r1, r3
 800b38c:	b909      	cbnz	r1, 800b392 <__lo0bits+0x2a>
 800b38e:	0c1b      	lsrs	r3, r3, #16
 800b390:	2210      	movs	r2, #16
 800b392:	b2d9      	uxtb	r1, r3
 800b394:	b909      	cbnz	r1, 800b39a <__lo0bits+0x32>
 800b396:	3208      	adds	r2, #8
 800b398:	0a1b      	lsrs	r3, r3, #8
 800b39a:	0719      	lsls	r1, r3, #28
 800b39c:	bf04      	itt	eq
 800b39e:	091b      	lsreq	r3, r3, #4
 800b3a0:	3204      	addeq	r2, #4
 800b3a2:	0799      	lsls	r1, r3, #30
 800b3a4:	bf04      	itt	eq
 800b3a6:	089b      	lsreq	r3, r3, #2
 800b3a8:	3202      	addeq	r2, #2
 800b3aa:	07d9      	lsls	r1, r3, #31
 800b3ac:	d403      	bmi.n	800b3b6 <__lo0bits+0x4e>
 800b3ae:	085b      	lsrs	r3, r3, #1
 800b3b0:	f102 0201 	add.w	r2, r2, #1
 800b3b4:	d003      	beq.n	800b3be <__lo0bits+0x56>
 800b3b6:	6003      	str	r3, [r0, #0]
 800b3b8:	e7e5      	b.n	800b386 <__lo0bits+0x1e>
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	e7e3      	b.n	800b386 <__lo0bits+0x1e>
 800b3be:	2220      	movs	r2, #32
 800b3c0:	e7e1      	b.n	800b386 <__lo0bits+0x1e>
	...

0800b3c4 <__i2b>:
 800b3c4:	b510      	push	{r4, lr}
 800b3c6:	460c      	mov	r4, r1
 800b3c8:	2101      	movs	r1, #1
 800b3ca:	f7ff ff05 	bl	800b1d8 <_Balloc>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	b928      	cbnz	r0, 800b3de <__i2b+0x1a>
 800b3d2:	4b05      	ldr	r3, [pc, #20]	; (800b3e8 <__i2b+0x24>)
 800b3d4:	4805      	ldr	r0, [pc, #20]	; (800b3ec <__i2b+0x28>)
 800b3d6:	f240 1145 	movw	r1, #325	; 0x145
 800b3da:	f000 fb59 	bl	800ba90 <__assert_func>
 800b3de:	2301      	movs	r3, #1
 800b3e0:	6144      	str	r4, [r0, #20]
 800b3e2:	6103      	str	r3, [r0, #16]
 800b3e4:	bd10      	pop	{r4, pc}
 800b3e6:	bf00      	nop
 800b3e8:	0800c6e8 	.word	0x0800c6e8
 800b3ec:	0800c70a 	.word	0x0800c70a

0800b3f0 <__multiply>:
 800b3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f4:	4691      	mov	r9, r2
 800b3f6:	690a      	ldr	r2, [r1, #16]
 800b3f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	bfb8      	it	lt
 800b400:	460b      	movlt	r3, r1
 800b402:	460c      	mov	r4, r1
 800b404:	bfbc      	itt	lt
 800b406:	464c      	movlt	r4, r9
 800b408:	4699      	movlt	r9, r3
 800b40a:	6927      	ldr	r7, [r4, #16]
 800b40c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b410:	68a3      	ldr	r3, [r4, #8]
 800b412:	6861      	ldr	r1, [r4, #4]
 800b414:	eb07 060a 	add.w	r6, r7, sl
 800b418:	42b3      	cmp	r3, r6
 800b41a:	b085      	sub	sp, #20
 800b41c:	bfb8      	it	lt
 800b41e:	3101      	addlt	r1, #1
 800b420:	f7ff feda 	bl	800b1d8 <_Balloc>
 800b424:	b930      	cbnz	r0, 800b434 <__multiply+0x44>
 800b426:	4602      	mov	r2, r0
 800b428:	4b44      	ldr	r3, [pc, #272]	; (800b53c <__multiply+0x14c>)
 800b42a:	4845      	ldr	r0, [pc, #276]	; (800b540 <__multiply+0x150>)
 800b42c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b430:	f000 fb2e 	bl	800ba90 <__assert_func>
 800b434:	f100 0514 	add.w	r5, r0, #20
 800b438:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b43c:	462b      	mov	r3, r5
 800b43e:	2200      	movs	r2, #0
 800b440:	4543      	cmp	r3, r8
 800b442:	d321      	bcc.n	800b488 <__multiply+0x98>
 800b444:	f104 0314 	add.w	r3, r4, #20
 800b448:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b44c:	f109 0314 	add.w	r3, r9, #20
 800b450:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b454:	9202      	str	r2, [sp, #8]
 800b456:	1b3a      	subs	r2, r7, r4
 800b458:	3a15      	subs	r2, #21
 800b45a:	f022 0203 	bic.w	r2, r2, #3
 800b45e:	3204      	adds	r2, #4
 800b460:	f104 0115 	add.w	r1, r4, #21
 800b464:	428f      	cmp	r7, r1
 800b466:	bf38      	it	cc
 800b468:	2204      	movcc	r2, #4
 800b46a:	9201      	str	r2, [sp, #4]
 800b46c:	9a02      	ldr	r2, [sp, #8]
 800b46e:	9303      	str	r3, [sp, #12]
 800b470:	429a      	cmp	r2, r3
 800b472:	d80c      	bhi.n	800b48e <__multiply+0x9e>
 800b474:	2e00      	cmp	r6, #0
 800b476:	dd03      	ble.n	800b480 <__multiply+0x90>
 800b478:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d05b      	beq.n	800b538 <__multiply+0x148>
 800b480:	6106      	str	r6, [r0, #16]
 800b482:	b005      	add	sp, #20
 800b484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b488:	f843 2b04 	str.w	r2, [r3], #4
 800b48c:	e7d8      	b.n	800b440 <__multiply+0x50>
 800b48e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b492:	f1ba 0f00 	cmp.w	sl, #0
 800b496:	d024      	beq.n	800b4e2 <__multiply+0xf2>
 800b498:	f104 0e14 	add.w	lr, r4, #20
 800b49c:	46a9      	mov	r9, r5
 800b49e:	f04f 0c00 	mov.w	ip, #0
 800b4a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b4a6:	f8d9 1000 	ldr.w	r1, [r9]
 800b4aa:	fa1f fb82 	uxth.w	fp, r2
 800b4ae:	b289      	uxth	r1, r1
 800b4b0:	fb0a 110b 	mla	r1, sl, fp, r1
 800b4b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b4b8:	f8d9 2000 	ldr.w	r2, [r9]
 800b4bc:	4461      	add	r1, ip
 800b4be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b4c2:	fb0a c20b 	mla	r2, sl, fp, ip
 800b4c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b4ca:	b289      	uxth	r1, r1
 800b4cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b4d0:	4577      	cmp	r7, lr
 800b4d2:	f849 1b04 	str.w	r1, [r9], #4
 800b4d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b4da:	d8e2      	bhi.n	800b4a2 <__multiply+0xb2>
 800b4dc:	9a01      	ldr	r2, [sp, #4]
 800b4de:	f845 c002 	str.w	ip, [r5, r2]
 800b4e2:	9a03      	ldr	r2, [sp, #12]
 800b4e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b4e8:	3304      	adds	r3, #4
 800b4ea:	f1b9 0f00 	cmp.w	r9, #0
 800b4ee:	d021      	beq.n	800b534 <__multiply+0x144>
 800b4f0:	6829      	ldr	r1, [r5, #0]
 800b4f2:	f104 0c14 	add.w	ip, r4, #20
 800b4f6:	46ae      	mov	lr, r5
 800b4f8:	f04f 0a00 	mov.w	sl, #0
 800b4fc:	f8bc b000 	ldrh.w	fp, [ip]
 800b500:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b504:	fb09 220b 	mla	r2, r9, fp, r2
 800b508:	4452      	add	r2, sl
 800b50a:	b289      	uxth	r1, r1
 800b50c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b510:	f84e 1b04 	str.w	r1, [lr], #4
 800b514:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b518:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b51c:	f8be 1000 	ldrh.w	r1, [lr]
 800b520:	fb09 110a 	mla	r1, r9, sl, r1
 800b524:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b528:	4567      	cmp	r7, ip
 800b52a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b52e:	d8e5      	bhi.n	800b4fc <__multiply+0x10c>
 800b530:	9a01      	ldr	r2, [sp, #4]
 800b532:	50a9      	str	r1, [r5, r2]
 800b534:	3504      	adds	r5, #4
 800b536:	e799      	b.n	800b46c <__multiply+0x7c>
 800b538:	3e01      	subs	r6, #1
 800b53a:	e79b      	b.n	800b474 <__multiply+0x84>
 800b53c:	0800c6e8 	.word	0x0800c6e8
 800b540:	0800c70a 	.word	0x0800c70a

0800b544 <__pow5mult>:
 800b544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b548:	4615      	mov	r5, r2
 800b54a:	f012 0203 	ands.w	r2, r2, #3
 800b54e:	4606      	mov	r6, r0
 800b550:	460f      	mov	r7, r1
 800b552:	d007      	beq.n	800b564 <__pow5mult+0x20>
 800b554:	4c25      	ldr	r4, [pc, #148]	; (800b5ec <__pow5mult+0xa8>)
 800b556:	3a01      	subs	r2, #1
 800b558:	2300      	movs	r3, #0
 800b55a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b55e:	f7ff fe9d 	bl	800b29c <__multadd>
 800b562:	4607      	mov	r7, r0
 800b564:	10ad      	asrs	r5, r5, #2
 800b566:	d03d      	beq.n	800b5e4 <__pow5mult+0xa0>
 800b568:	69f4      	ldr	r4, [r6, #28]
 800b56a:	b97c      	cbnz	r4, 800b58c <__pow5mult+0x48>
 800b56c:	2010      	movs	r0, #16
 800b56e:	f7fe f9ed 	bl	800994c <malloc>
 800b572:	4602      	mov	r2, r0
 800b574:	61f0      	str	r0, [r6, #28]
 800b576:	b928      	cbnz	r0, 800b584 <__pow5mult+0x40>
 800b578:	4b1d      	ldr	r3, [pc, #116]	; (800b5f0 <__pow5mult+0xac>)
 800b57a:	481e      	ldr	r0, [pc, #120]	; (800b5f4 <__pow5mult+0xb0>)
 800b57c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b580:	f000 fa86 	bl	800ba90 <__assert_func>
 800b584:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b588:	6004      	str	r4, [r0, #0]
 800b58a:	60c4      	str	r4, [r0, #12]
 800b58c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b590:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b594:	b94c      	cbnz	r4, 800b5aa <__pow5mult+0x66>
 800b596:	f240 2171 	movw	r1, #625	; 0x271
 800b59a:	4630      	mov	r0, r6
 800b59c:	f7ff ff12 	bl	800b3c4 <__i2b>
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b5a6:	4604      	mov	r4, r0
 800b5a8:	6003      	str	r3, [r0, #0]
 800b5aa:	f04f 0900 	mov.w	r9, #0
 800b5ae:	07eb      	lsls	r3, r5, #31
 800b5b0:	d50a      	bpl.n	800b5c8 <__pow5mult+0x84>
 800b5b2:	4639      	mov	r1, r7
 800b5b4:	4622      	mov	r2, r4
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	f7ff ff1a 	bl	800b3f0 <__multiply>
 800b5bc:	4639      	mov	r1, r7
 800b5be:	4680      	mov	r8, r0
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	f7ff fe49 	bl	800b258 <_Bfree>
 800b5c6:	4647      	mov	r7, r8
 800b5c8:	106d      	asrs	r5, r5, #1
 800b5ca:	d00b      	beq.n	800b5e4 <__pow5mult+0xa0>
 800b5cc:	6820      	ldr	r0, [r4, #0]
 800b5ce:	b938      	cbnz	r0, 800b5e0 <__pow5mult+0x9c>
 800b5d0:	4622      	mov	r2, r4
 800b5d2:	4621      	mov	r1, r4
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	f7ff ff0b 	bl	800b3f0 <__multiply>
 800b5da:	6020      	str	r0, [r4, #0]
 800b5dc:	f8c0 9000 	str.w	r9, [r0]
 800b5e0:	4604      	mov	r4, r0
 800b5e2:	e7e4      	b.n	800b5ae <__pow5mult+0x6a>
 800b5e4:	4638      	mov	r0, r7
 800b5e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5ea:	bf00      	nop
 800b5ec:	0800c858 	.word	0x0800c858
 800b5f0:	0800c679 	.word	0x0800c679
 800b5f4:	0800c70a 	.word	0x0800c70a

0800b5f8 <__lshift>:
 800b5f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5fc:	460c      	mov	r4, r1
 800b5fe:	6849      	ldr	r1, [r1, #4]
 800b600:	6923      	ldr	r3, [r4, #16]
 800b602:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b606:	68a3      	ldr	r3, [r4, #8]
 800b608:	4607      	mov	r7, r0
 800b60a:	4691      	mov	r9, r2
 800b60c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b610:	f108 0601 	add.w	r6, r8, #1
 800b614:	42b3      	cmp	r3, r6
 800b616:	db0b      	blt.n	800b630 <__lshift+0x38>
 800b618:	4638      	mov	r0, r7
 800b61a:	f7ff fddd 	bl	800b1d8 <_Balloc>
 800b61e:	4605      	mov	r5, r0
 800b620:	b948      	cbnz	r0, 800b636 <__lshift+0x3e>
 800b622:	4602      	mov	r2, r0
 800b624:	4b28      	ldr	r3, [pc, #160]	; (800b6c8 <__lshift+0xd0>)
 800b626:	4829      	ldr	r0, [pc, #164]	; (800b6cc <__lshift+0xd4>)
 800b628:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b62c:	f000 fa30 	bl	800ba90 <__assert_func>
 800b630:	3101      	adds	r1, #1
 800b632:	005b      	lsls	r3, r3, #1
 800b634:	e7ee      	b.n	800b614 <__lshift+0x1c>
 800b636:	2300      	movs	r3, #0
 800b638:	f100 0114 	add.w	r1, r0, #20
 800b63c:	f100 0210 	add.w	r2, r0, #16
 800b640:	4618      	mov	r0, r3
 800b642:	4553      	cmp	r3, sl
 800b644:	db33      	blt.n	800b6ae <__lshift+0xb6>
 800b646:	6920      	ldr	r0, [r4, #16]
 800b648:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b64c:	f104 0314 	add.w	r3, r4, #20
 800b650:	f019 091f 	ands.w	r9, r9, #31
 800b654:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b658:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b65c:	d02b      	beq.n	800b6b6 <__lshift+0xbe>
 800b65e:	f1c9 0e20 	rsb	lr, r9, #32
 800b662:	468a      	mov	sl, r1
 800b664:	2200      	movs	r2, #0
 800b666:	6818      	ldr	r0, [r3, #0]
 800b668:	fa00 f009 	lsl.w	r0, r0, r9
 800b66c:	4310      	orrs	r0, r2
 800b66e:	f84a 0b04 	str.w	r0, [sl], #4
 800b672:	f853 2b04 	ldr.w	r2, [r3], #4
 800b676:	459c      	cmp	ip, r3
 800b678:	fa22 f20e 	lsr.w	r2, r2, lr
 800b67c:	d8f3      	bhi.n	800b666 <__lshift+0x6e>
 800b67e:	ebac 0304 	sub.w	r3, ip, r4
 800b682:	3b15      	subs	r3, #21
 800b684:	f023 0303 	bic.w	r3, r3, #3
 800b688:	3304      	adds	r3, #4
 800b68a:	f104 0015 	add.w	r0, r4, #21
 800b68e:	4584      	cmp	ip, r0
 800b690:	bf38      	it	cc
 800b692:	2304      	movcc	r3, #4
 800b694:	50ca      	str	r2, [r1, r3]
 800b696:	b10a      	cbz	r2, 800b69c <__lshift+0xa4>
 800b698:	f108 0602 	add.w	r6, r8, #2
 800b69c:	3e01      	subs	r6, #1
 800b69e:	4638      	mov	r0, r7
 800b6a0:	612e      	str	r6, [r5, #16]
 800b6a2:	4621      	mov	r1, r4
 800b6a4:	f7ff fdd8 	bl	800b258 <_Bfree>
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ae:	f842 0f04 	str.w	r0, [r2, #4]!
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	e7c5      	b.n	800b642 <__lshift+0x4a>
 800b6b6:	3904      	subs	r1, #4
 800b6b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6bc:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6c0:	459c      	cmp	ip, r3
 800b6c2:	d8f9      	bhi.n	800b6b8 <__lshift+0xc0>
 800b6c4:	e7ea      	b.n	800b69c <__lshift+0xa4>
 800b6c6:	bf00      	nop
 800b6c8:	0800c6e8 	.word	0x0800c6e8
 800b6cc:	0800c70a 	.word	0x0800c70a

0800b6d0 <__mcmp>:
 800b6d0:	b530      	push	{r4, r5, lr}
 800b6d2:	6902      	ldr	r2, [r0, #16]
 800b6d4:	690c      	ldr	r4, [r1, #16]
 800b6d6:	1b12      	subs	r2, r2, r4
 800b6d8:	d10e      	bne.n	800b6f8 <__mcmp+0x28>
 800b6da:	f100 0314 	add.w	r3, r0, #20
 800b6de:	3114      	adds	r1, #20
 800b6e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b6e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b6e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b6ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b6f0:	42a5      	cmp	r5, r4
 800b6f2:	d003      	beq.n	800b6fc <__mcmp+0x2c>
 800b6f4:	d305      	bcc.n	800b702 <__mcmp+0x32>
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	4610      	mov	r0, r2
 800b6fa:	bd30      	pop	{r4, r5, pc}
 800b6fc:	4283      	cmp	r3, r0
 800b6fe:	d3f3      	bcc.n	800b6e8 <__mcmp+0x18>
 800b700:	e7fa      	b.n	800b6f8 <__mcmp+0x28>
 800b702:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b706:	e7f7      	b.n	800b6f8 <__mcmp+0x28>

0800b708 <__mdiff>:
 800b708:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b70c:	460c      	mov	r4, r1
 800b70e:	4606      	mov	r6, r0
 800b710:	4611      	mov	r1, r2
 800b712:	4620      	mov	r0, r4
 800b714:	4690      	mov	r8, r2
 800b716:	f7ff ffdb 	bl	800b6d0 <__mcmp>
 800b71a:	1e05      	subs	r5, r0, #0
 800b71c:	d110      	bne.n	800b740 <__mdiff+0x38>
 800b71e:	4629      	mov	r1, r5
 800b720:	4630      	mov	r0, r6
 800b722:	f7ff fd59 	bl	800b1d8 <_Balloc>
 800b726:	b930      	cbnz	r0, 800b736 <__mdiff+0x2e>
 800b728:	4b3a      	ldr	r3, [pc, #232]	; (800b814 <__mdiff+0x10c>)
 800b72a:	4602      	mov	r2, r0
 800b72c:	f240 2137 	movw	r1, #567	; 0x237
 800b730:	4839      	ldr	r0, [pc, #228]	; (800b818 <__mdiff+0x110>)
 800b732:	f000 f9ad 	bl	800ba90 <__assert_func>
 800b736:	2301      	movs	r3, #1
 800b738:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b73c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b740:	bfa4      	itt	ge
 800b742:	4643      	movge	r3, r8
 800b744:	46a0      	movge	r8, r4
 800b746:	4630      	mov	r0, r6
 800b748:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b74c:	bfa6      	itte	ge
 800b74e:	461c      	movge	r4, r3
 800b750:	2500      	movge	r5, #0
 800b752:	2501      	movlt	r5, #1
 800b754:	f7ff fd40 	bl	800b1d8 <_Balloc>
 800b758:	b920      	cbnz	r0, 800b764 <__mdiff+0x5c>
 800b75a:	4b2e      	ldr	r3, [pc, #184]	; (800b814 <__mdiff+0x10c>)
 800b75c:	4602      	mov	r2, r0
 800b75e:	f240 2145 	movw	r1, #581	; 0x245
 800b762:	e7e5      	b.n	800b730 <__mdiff+0x28>
 800b764:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b768:	6926      	ldr	r6, [r4, #16]
 800b76a:	60c5      	str	r5, [r0, #12]
 800b76c:	f104 0914 	add.w	r9, r4, #20
 800b770:	f108 0514 	add.w	r5, r8, #20
 800b774:	f100 0e14 	add.w	lr, r0, #20
 800b778:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b77c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b780:	f108 0210 	add.w	r2, r8, #16
 800b784:	46f2      	mov	sl, lr
 800b786:	2100      	movs	r1, #0
 800b788:	f859 3b04 	ldr.w	r3, [r9], #4
 800b78c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b790:	fa11 f88b 	uxtah	r8, r1, fp
 800b794:	b299      	uxth	r1, r3
 800b796:	0c1b      	lsrs	r3, r3, #16
 800b798:	eba8 0801 	sub.w	r8, r8, r1
 800b79c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b7a0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b7a4:	fa1f f888 	uxth.w	r8, r8
 800b7a8:	1419      	asrs	r1, r3, #16
 800b7aa:	454e      	cmp	r6, r9
 800b7ac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b7b0:	f84a 3b04 	str.w	r3, [sl], #4
 800b7b4:	d8e8      	bhi.n	800b788 <__mdiff+0x80>
 800b7b6:	1b33      	subs	r3, r6, r4
 800b7b8:	3b15      	subs	r3, #21
 800b7ba:	f023 0303 	bic.w	r3, r3, #3
 800b7be:	3304      	adds	r3, #4
 800b7c0:	3415      	adds	r4, #21
 800b7c2:	42a6      	cmp	r6, r4
 800b7c4:	bf38      	it	cc
 800b7c6:	2304      	movcc	r3, #4
 800b7c8:	441d      	add	r5, r3
 800b7ca:	4473      	add	r3, lr
 800b7cc:	469e      	mov	lr, r3
 800b7ce:	462e      	mov	r6, r5
 800b7d0:	4566      	cmp	r6, ip
 800b7d2:	d30e      	bcc.n	800b7f2 <__mdiff+0xea>
 800b7d4:	f10c 0203 	add.w	r2, ip, #3
 800b7d8:	1b52      	subs	r2, r2, r5
 800b7da:	f022 0203 	bic.w	r2, r2, #3
 800b7de:	3d03      	subs	r5, #3
 800b7e0:	45ac      	cmp	ip, r5
 800b7e2:	bf38      	it	cc
 800b7e4:	2200      	movcc	r2, #0
 800b7e6:	4413      	add	r3, r2
 800b7e8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b7ec:	b17a      	cbz	r2, 800b80e <__mdiff+0x106>
 800b7ee:	6107      	str	r7, [r0, #16]
 800b7f0:	e7a4      	b.n	800b73c <__mdiff+0x34>
 800b7f2:	f856 8b04 	ldr.w	r8, [r6], #4
 800b7f6:	fa11 f288 	uxtah	r2, r1, r8
 800b7fa:	1414      	asrs	r4, r2, #16
 800b7fc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b800:	b292      	uxth	r2, r2
 800b802:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b806:	f84e 2b04 	str.w	r2, [lr], #4
 800b80a:	1421      	asrs	r1, r4, #16
 800b80c:	e7e0      	b.n	800b7d0 <__mdiff+0xc8>
 800b80e:	3f01      	subs	r7, #1
 800b810:	e7ea      	b.n	800b7e8 <__mdiff+0xe0>
 800b812:	bf00      	nop
 800b814:	0800c6e8 	.word	0x0800c6e8
 800b818:	0800c70a 	.word	0x0800c70a

0800b81c <__d2b>:
 800b81c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b820:	460f      	mov	r7, r1
 800b822:	2101      	movs	r1, #1
 800b824:	ec59 8b10 	vmov	r8, r9, d0
 800b828:	4616      	mov	r6, r2
 800b82a:	f7ff fcd5 	bl	800b1d8 <_Balloc>
 800b82e:	4604      	mov	r4, r0
 800b830:	b930      	cbnz	r0, 800b840 <__d2b+0x24>
 800b832:	4602      	mov	r2, r0
 800b834:	4b24      	ldr	r3, [pc, #144]	; (800b8c8 <__d2b+0xac>)
 800b836:	4825      	ldr	r0, [pc, #148]	; (800b8cc <__d2b+0xb0>)
 800b838:	f240 310f 	movw	r1, #783	; 0x30f
 800b83c:	f000 f928 	bl	800ba90 <__assert_func>
 800b840:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b844:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b848:	bb2d      	cbnz	r5, 800b896 <__d2b+0x7a>
 800b84a:	9301      	str	r3, [sp, #4]
 800b84c:	f1b8 0300 	subs.w	r3, r8, #0
 800b850:	d026      	beq.n	800b8a0 <__d2b+0x84>
 800b852:	4668      	mov	r0, sp
 800b854:	9300      	str	r3, [sp, #0]
 800b856:	f7ff fd87 	bl	800b368 <__lo0bits>
 800b85a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b85e:	b1e8      	cbz	r0, 800b89c <__d2b+0x80>
 800b860:	f1c0 0320 	rsb	r3, r0, #32
 800b864:	fa02 f303 	lsl.w	r3, r2, r3
 800b868:	430b      	orrs	r3, r1
 800b86a:	40c2      	lsrs	r2, r0
 800b86c:	6163      	str	r3, [r4, #20]
 800b86e:	9201      	str	r2, [sp, #4]
 800b870:	9b01      	ldr	r3, [sp, #4]
 800b872:	61a3      	str	r3, [r4, #24]
 800b874:	2b00      	cmp	r3, #0
 800b876:	bf14      	ite	ne
 800b878:	2202      	movne	r2, #2
 800b87a:	2201      	moveq	r2, #1
 800b87c:	6122      	str	r2, [r4, #16]
 800b87e:	b1bd      	cbz	r5, 800b8b0 <__d2b+0x94>
 800b880:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b884:	4405      	add	r5, r0
 800b886:	603d      	str	r5, [r7, #0]
 800b888:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b88c:	6030      	str	r0, [r6, #0]
 800b88e:	4620      	mov	r0, r4
 800b890:	b003      	add	sp, #12
 800b892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b896:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b89a:	e7d6      	b.n	800b84a <__d2b+0x2e>
 800b89c:	6161      	str	r1, [r4, #20]
 800b89e:	e7e7      	b.n	800b870 <__d2b+0x54>
 800b8a0:	a801      	add	r0, sp, #4
 800b8a2:	f7ff fd61 	bl	800b368 <__lo0bits>
 800b8a6:	9b01      	ldr	r3, [sp, #4]
 800b8a8:	6163      	str	r3, [r4, #20]
 800b8aa:	3020      	adds	r0, #32
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	e7e5      	b.n	800b87c <__d2b+0x60>
 800b8b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b8b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b8b8:	6038      	str	r0, [r7, #0]
 800b8ba:	6918      	ldr	r0, [r3, #16]
 800b8bc:	f7ff fd34 	bl	800b328 <__hi0bits>
 800b8c0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b8c4:	e7e2      	b.n	800b88c <__d2b+0x70>
 800b8c6:	bf00      	nop
 800b8c8:	0800c6e8 	.word	0x0800c6e8
 800b8cc:	0800c70a 	.word	0x0800c70a

0800b8d0 <__sread>:
 800b8d0:	b510      	push	{r4, lr}
 800b8d2:	460c      	mov	r4, r1
 800b8d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8d8:	f000 f8a8 	bl	800ba2c <_read_r>
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	bfab      	itete	ge
 800b8e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b8e2:	89a3      	ldrhlt	r3, [r4, #12]
 800b8e4:	181b      	addge	r3, r3, r0
 800b8e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b8ea:	bfac      	ite	ge
 800b8ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800b8ee:	81a3      	strhlt	r3, [r4, #12]
 800b8f0:	bd10      	pop	{r4, pc}

0800b8f2 <__swrite>:
 800b8f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8f6:	461f      	mov	r7, r3
 800b8f8:	898b      	ldrh	r3, [r1, #12]
 800b8fa:	05db      	lsls	r3, r3, #23
 800b8fc:	4605      	mov	r5, r0
 800b8fe:	460c      	mov	r4, r1
 800b900:	4616      	mov	r6, r2
 800b902:	d505      	bpl.n	800b910 <__swrite+0x1e>
 800b904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b908:	2302      	movs	r3, #2
 800b90a:	2200      	movs	r2, #0
 800b90c:	f000 f87c 	bl	800ba08 <_lseek_r>
 800b910:	89a3      	ldrh	r3, [r4, #12]
 800b912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b916:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b91a:	81a3      	strh	r3, [r4, #12]
 800b91c:	4632      	mov	r2, r6
 800b91e:	463b      	mov	r3, r7
 800b920:	4628      	mov	r0, r5
 800b922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b926:	f000 b893 	b.w	800ba50 <_write_r>

0800b92a <__sseek>:
 800b92a:	b510      	push	{r4, lr}
 800b92c:	460c      	mov	r4, r1
 800b92e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b932:	f000 f869 	bl	800ba08 <_lseek_r>
 800b936:	1c43      	adds	r3, r0, #1
 800b938:	89a3      	ldrh	r3, [r4, #12]
 800b93a:	bf15      	itete	ne
 800b93c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b93e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b942:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b946:	81a3      	strheq	r3, [r4, #12]
 800b948:	bf18      	it	ne
 800b94a:	81a3      	strhne	r3, [r4, #12]
 800b94c:	bd10      	pop	{r4, pc}

0800b94e <__sclose>:
 800b94e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b952:	f000 b849 	b.w	800b9e8 <_close_r>

0800b956 <_realloc_r>:
 800b956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b95a:	4680      	mov	r8, r0
 800b95c:	4614      	mov	r4, r2
 800b95e:	460e      	mov	r6, r1
 800b960:	b921      	cbnz	r1, 800b96c <_realloc_r+0x16>
 800b962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b966:	4611      	mov	r1, r2
 800b968:	f7fe b820 	b.w	80099ac <_malloc_r>
 800b96c:	b92a      	cbnz	r2, 800b97a <_realloc_r+0x24>
 800b96e:	f7ff f9e1 	bl	800ad34 <_free_r>
 800b972:	4625      	mov	r5, r4
 800b974:	4628      	mov	r0, r5
 800b976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b97a:	f000 f8cf 	bl	800bb1c <_malloc_usable_size_r>
 800b97e:	4284      	cmp	r4, r0
 800b980:	4607      	mov	r7, r0
 800b982:	d802      	bhi.n	800b98a <_realloc_r+0x34>
 800b984:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b988:	d812      	bhi.n	800b9b0 <_realloc_r+0x5a>
 800b98a:	4621      	mov	r1, r4
 800b98c:	4640      	mov	r0, r8
 800b98e:	f7fe f80d 	bl	80099ac <_malloc_r>
 800b992:	4605      	mov	r5, r0
 800b994:	2800      	cmp	r0, #0
 800b996:	d0ed      	beq.n	800b974 <_realloc_r+0x1e>
 800b998:	42bc      	cmp	r4, r7
 800b99a:	4622      	mov	r2, r4
 800b99c:	4631      	mov	r1, r6
 800b99e:	bf28      	it	cs
 800b9a0:	463a      	movcs	r2, r7
 800b9a2:	f000 f867 	bl	800ba74 <memcpy>
 800b9a6:	4631      	mov	r1, r6
 800b9a8:	4640      	mov	r0, r8
 800b9aa:	f7ff f9c3 	bl	800ad34 <_free_r>
 800b9ae:	e7e1      	b.n	800b974 <_realloc_r+0x1e>
 800b9b0:	4635      	mov	r5, r6
 800b9b2:	e7df      	b.n	800b974 <_realloc_r+0x1e>

0800b9b4 <memmove>:
 800b9b4:	4288      	cmp	r0, r1
 800b9b6:	b510      	push	{r4, lr}
 800b9b8:	eb01 0402 	add.w	r4, r1, r2
 800b9bc:	d902      	bls.n	800b9c4 <memmove+0x10>
 800b9be:	4284      	cmp	r4, r0
 800b9c0:	4623      	mov	r3, r4
 800b9c2:	d807      	bhi.n	800b9d4 <memmove+0x20>
 800b9c4:	1e43      	subs	r3, r0, #1
 800b9c6:	42a1      	cmp	r1, r4
 800b9c8:	d008      	beq.n	800b9dc <memmove+0x28>
 800b9ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b9d2:	e7f8      	b.n	800b9c6 <memmove+0x12>
 800b9d4:	4402      	add	r2, r0
 800b9d6:	4601      	mov	r1, r0
 800b9d8:	428a      	cmp	r2, r1
 800b9da:	d100      	bne.n	800b9de <memmove+0x2a>
 800b9dc:	bd10      	pop	{r4, pc}
 800b9de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9e6:	e7f7      	b.n	800b9d8 <memmove+0x24>

0800b9e8 <_close_r>:
 800b9e8:	b538      	push	{r3, r4, r5, lr}
 800b9ea:	4d06      	ldr	r5, [pc, #24]	; (800ba04 <_close_r+0x1c>)
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	4604      	mov	r4, r0
 800b9f0:	4608      	mov	r0, r1
 800b9f2:	602b      	str	r3, [r5, #0]
 800b9f4:	f7f9 f977 	bl	8004ce6 <_close>
 800b9f8:	1c43      	adds	r3, r0, #1
 800b9fa:	d102      	bne.n	800ba02 <_close_r+0x1a>
 800b9fc:	682b      	ldr	r3, [r5, #0]
 800b9fe:	b103      	cbz	r3, 800ba02 <_close_r+0x1a>
 800ba00:	6023      	str	r3, [r4, #0]
 800ba02:	bd38      	pop	{r3, r4, r5, pc}
 800ba04:	2000339c 	.word	0x2000339c

0800ba08 <_lseek_r>:
 800ba08:	b538      	push	{r3, r4, r5, lr}
 800ba0a:	4d07      	ldr	r5, [pc, #28]	; (800ba28 <_lseek_r+0x20>)
 800ba0c:	4604      	mov	r4, r0
 800ba0e:	4608      	mov	r0, r1
 800ba10:	4611      	mov	r1, r2
 800ba12:	2200      	movs	r2, #0
 800ba14:	602a      	str	r2, [r5, #0]
 800ba16:	461a      	mov	r2, r3
 800ba18:	f7f9 f98c 	bl	8004d34 <_lseek>
 800ba1c:	1c43      	adds	r3, r0, #1
 800ba1e:	d102      	bne.n	800ba26 <_lseek_r+0x1e>
 800ba20:	682b      	ldr	r3, [r5, #0]
 800ba22:	b103      	cbz	r3, 800ba26 <_lseek_r+0x1e>
 800ba24:	6023      	str	r3, [r4, #0]
 800ba26:	bd38      	pop	{r3, r4, r5, pc}
 800ba28:	2000339c 	.word	0x2000339c

0800ba2c <_read_r>:
 800ba2c:	b538      	push	{r3, r4, r5, lr}
 800ba2e:	4d07      	ldr	r5, [pc, #28]	; (800ba4c <_read_r+0x20>)
 800ba30:	4604      	mov	r4, r0
 800ba32:	4608      	mov	r0, r1
 800ba34:	4611      	mov	r1, r2
 800ba36:	2200      	movs	r2, #0
 800ba38:	602a      	str	r2, [r5, #0]
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	f7f9 f91a 	bl	8004c74 <_read>
 800ba40:	1c43      	adds	r3, r0, #1
 800ba42:	d102      	bne.n	800ba4a <_read_r+0x1e>
 800ba44:	682b      	ldr	r3, [r5, #0]
 800ba46:	b103      	cbz	r3, 800ba4a <_read_r+0x1e>
 800ba48:	6023      	str	r3, [r4, #0]
 800ba4a:	bd38      	pop	{r3, r4, r5, pc}
 800ba4c:	2000339c 	.word	0x2000339c

0800ba50 <_write_r>:
 800ba50:	b538      	push	{r3, r4, r5, lr}
 800ba52:	4d07      	ldr	r5, [pc, #28]	; (800ba70 <_write_r+0x20>)
 800ba54:	4604      	mov	r4, r0
 800ba56:	4608      	mov	r0, r1
 800ba58:	4611      	mov	r1, r2
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	602a      	str	r2, [r5, #0]
 800ba5e:	461a      	mov	r2, r3
 800ba60:	f7f9 f925 	bl	8004cae <_write>
 800ba64:	1c43      	adds	r3, r0, #1
 800ba66:	d102      	bne.n	800ba6e <_write_r+0x1e>
 800ba68:	682b      	ldr	r3, [r5, #0]
 800ba6a:	b103      	cbz	r3, 800ba6e <_write_r+0x1e>
 800ba6c:	6023      	str	r3, [r4, #0]
 800ba6e:	bd38      	pop	{r3, r4, r5, pc}
 800ba70:	2000339c 	.word	0x2000339c

0800ba74 <memcpy>:
 800ba74:	440a      	add	r2, r1
 800ba76:	4291      	cmp	r1, r2
 800ba78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ba7c:	d100      	bne.n	800ba80 <memcpy+0xc>
 800ba7e:	4770      	bx	lr
 800ba80:	b510      	push	{r4, lr}
 800ba82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba8a:	4291      	cmp	r1, r2
 800ba8c:	d1f9      	bne.n	800ba82 <memcpy+0xe>
 800ba8e:	bd10      	pop	{r4, pc}

0800ba90 <__assert_func>:
 800ba90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba92:	4614      	mov	r4, r2
 800ba94:	461a      	mov	r2, r3
 800ba96:	4b09      	ldr	r3, [pc, #36]	; (800babc <__assert_func+0x2c>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4605      	mov	r5, r0
 800ba9c:	68d8      	ldr	r0, [r3, #12]
 800ba9e:	b14c      	cbz	r4, 800bab4 <__assert_func+0x24>
 800baa0:	4b07      	ldr	r3, [pc, #28]	; (800bac0 <__assert_func+0x30>)
 800baa2:	9100      	str	r1, [sp, #0]
 800baa4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800baa8:	4906      	ldr	r1, [pc, #24]	; (800bac4 <__assert_func+0x34>)
 800baaa:	462b      	mov	r3, r5
 800baac:	f000 f83e 	bl	800bb2c <fiprintf>
 800bab0:	f000 f85b 	bl	800bb6a <abort>
 800bab4:	4b04      	ldr	r3, [pc, #16]	; (800bac8 <__assert_func+0x38>)
 800bab6:	461c      	mov	r4, r3
 800bab8:	e7f3      	b.n	800baa2 <__assert_func+0x12>
 800baba:	bf00      	nop
 800babc:	20002440 	.word	0x20002440
 800bac0:	0800c96f 	.word	0x0800c96f
 800bac4:	0800c97c 	.word	0x0800c97c
 800bac8:	0800c9aa 	.word	0x0800c9aa

0800bacc <_calloc_r>:
 800bacc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bace:	fba1 2402 	umull	r2, r4, r1, r2
 800bad2:	b94c      	cbnz	r4, 800bae8 <_calloc_r+0x1c>
 800bad4:	4611      	mov	r1, r2
 800bad6:	9201      	str	r2, [sp, #4]
 800bad8:	f7fd ff68 	bl	80099ac <_malloc_r>
 800badc:	9a01      	ldr	r2, [sp, #4]
 800bade:	4605      	mov	r5, r0
 800bae0:	b930      	cbnz	r0, 800baf0 <_calloc_r+0x24>
 800bae2:	4628      	mov	r0, r5
 800bae4:	b003      	add	sp, #12
 800bae6:	bd30      	pop	{r4, r5, pc}
 800bae8:	220c      	movs	r2, #12
 800baea:	6002      	str	r2, [r0, #0]
 800baec:	2500      	movs	r5, #0
 800baee:	e7f8      	b.n	800bae2 <_calloc_r+0x16>
 800baf0:	4621      	mov	r1, r4
 800baf2:	f7fe fa5a 	bl	8009faa <memset>
 800baf6:	e7f4      	b.n	800bae2 <_calloc_r+0x16>

0800baf8 <__ascii_mbtowc>:
 800baf8:	b082      	sub	sp, #8
 800bafa:	b901      	cbnz	r1, 800bafe <__ascii_mbtowc+0x6>
 800bafc:	a901      	add	r1, sp, #4
 800bafe:	b142      	cbz	r2, 800bb12 <__ascii_mbtowc+0x1a>
 800bb00:	b14b      	cbz	r3, 800bb16 <__ascii_mbtowc+0x1e>
 800bb02:	7813      	ldrb	r3, [r2, #0]
 800bb04:	600b      	str	r3, [r1, #0]
 800bb06:	7812      	ldrb	r2, [r2, #0]
 800bb08:	1e10      	subs	r0, r2, #0
 800bb0a:	bf18      	it	ne
 800bb0c:	2001      	movne	r0, #1
 800bb0e:	b002      	add	sp, #8
 800bb10:	4770      	bx	lr
 800bb12:	4610      	mov	r0, r2
 800bb14:	e7fb      	b.n	800bb0e <__ascii_mbtowc+0x16>
 800bb16:	f06f 0001 	mvn.w	r0, #1
 800bb1a:	e7f8      	b.n	800bb0e <__ascii_mbtowc+0x16>

0800bb1c <_malloc_usable_size_r>:
 800bb1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb20:	1f18      	subs	r0, r3, #4
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	bfbc      	itt	lt
 800bb26:	580b      	ldrlt	r3, [r1, r0]
 800bb28:	18c0      	addlt	r0, r0, r3
 800bb2a:	4770      	bx	lr

0800bb2c <fiprintf>:
 800bb2c:	b40e      	push	{r1, r2, r3}
 800bb2e:	b503      	push	{r0, r1, lr}
 800bb30:	4601      	mov	r1, r0
 800bb32:	ab03      	add	r3, sp, #12
 800bb34:	4805      	ldr	r0, [pc, #20]	; (800bb4c <fiprintf+0x20>)
 800bb36:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb3a:	6800      	ldr	r0, [r0, #0]
 800bb3c:	9301      	str	r3, [sp, #4]
 800bb3e:	f000 f845 	bl	800bbcc <_vfiprintf_r>
 800bb42:	b002      	add	sp, #8
 800bb44:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb48:	b003      	add	sp, #12
 800bb4a:	4770      	bx	lr
 800bb4c:	20002440 	.word	0x20002440

0800bb50 <__ascii_wctomb>:
 800bb50:	b149      	cbz	r1, 800bb66 <__ascii_wctomb+0x16>
 800bb52:	2aff      	cmp	r2, #255	; 0xff
 800bb54:	bf85      	ittet	hi
 800bb56:	238a      	movhi	r3, #138	; 0x8a
 800bb58:	6003      	strhi	r3, [r0, #0]
 800bb5a:	700a      	strbls	r2, [r1, #0]
 800bb5c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800bb60:	bf98      	it	ls
 800bb62:	2001      	movls	r0, #1
 800bb64:	4770      	bx	lr
 800bb66:	4608      	mov	r0, r1
 800bb68:	4770      	bx	lr

0800bb6a <abort>:
 800bb6a:	b508      	push	{r3, lr}
 800bb6c:	2006      	movs	r0, #6
 800bb6e:	f000 fa89 	bl	800c084 <raise>
 800bb72:	2001      	movs	r0, #1
 800bb74:	f7f9 f874 	bl	8004c60 <_exit>

0800bb78 <__sfputc_r>:
 800bb78:	6893      	ldr	r3, [r2, #8]
 800bb7a:	3b01      	subs	r3, #1
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	b410      	push	{r4}
 800bb80:	6093      	str	r3, [r2, #8]
 800bb82:	da08      	bge.n	800bb96 <__sfputc_r+0x1e>
 800bb84:	6994      	ldr	r4, [r2, #24]
 800bb86:	42a3      	cmp	r3, r4
 800bb88:	db01      	blt.n	800bb8e <__sfputc_r+0x16>
 800bb8a:	290a      	cmp	r1, #10
 800bb8c:	d103      	bne.n	800bb96 <__sfputc_r+0x1e>
 800bb8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb92:	f000 b935 	b.w	800be00 <__swbuf_r>
 800bb96:	6813      	ldr	r3, [r2, #0]
 800bb98:	1c58      	adds	r0, r3, #1
 800bb9a:	6010      	str	r0, [r2, #0]
 800bb9c:	7019      	strb	r1, [r3, #0]
 800bb9e:	4608      	mov	r0, r1
 800bba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bba4:	4770      	bx	lr

0800bba6 <__sfputs_r>:
 800bba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bba8:	4606      	mov	r6, r0
 800bbaa:	460f      	mov	r7, r1
 800bbac:	4614      	mov	r4, r2
 800bbae:	18d5      	adds	r5, r2, r3
 800bbb0:	42ac      	cmp	r4, r5
 800bbb2:	d101      	bne.n	800bbb8 <__sfputs_r+0x12>
 800bbb4:	2000      	movs	r0, #0
 800bbb6:	e007      	b.n	800bbc8 <__sfputs_r+0x22>
 800bbb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbbc:	463a      	mov	r2, r7
 800bbbe:	4630      	mov	r0, r6
 800bbc0:	f7ff ffda 	bl	800bb78 <__sfputc_r>
 800bbc4:	1c43      	adds	r3, r0, #1
 800bbc6:	d1f3      	bne.n	800bbb0 <__sfputs_r+0xa>
 800bbc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bbcc <_vfiprintf_r>:
 800bbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd0:	460d      	mov	r5, r1
 800bbd2:	b09d      	sub	sp, #116	; 0x74
 800bbd4:	4614      	mov	r4, r2
 800bbd6:	4698      	mov	r8, r3
 800bbd8:	4606      	mov	r6, r0
 800bbda:	b118      	cbz	r0, 800bbe4 <_vfiprintf_r+0x18>
 800bbdc:	6a03      	ldr	r3, [r0, #32]
 800bbde:	b90b      	cbnz	r3, 800bbe4 <_vfiprintf_r+0x18>
 800bbe0:	f7fe f99a 	bl	8009f18 <__sinit>
 800bbe4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbe6:	07d9      	lsls	r1, r3, #31
 800bbe8:	d405      	bmi.n	800bbf6 <_vfiprintf_r+0x2a>
 800bbea:	89ab      	ldrh	r3, [r5, #12]
 800bbec:	059a      	lsls	r2, r3, #22
 800bbee:	d402      	bmi.n	800bbf6 <_vfiprintf_r+0x2a>
 800bbf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbf2:	f7fe fa21 	bl	800a038 <__retarget_lock_acquire_recursive>
 800bbf6:	89ab      	ldrh	r3, [r5, #12]
 800bbf8:	071b      	lsls	r3, r3, #28
 800bbfa:	d501      	bpl.n	800bc00 <_vfiprintf_r+0x34>
 800bbfc:	692b      	ldr	r3, [r5, #16]
 800bbfe:	b99b      	cbnz	r3, 800bc28 <_vfiprintf_r+0x5c>
 800bc00:	4629      	mov	r1, r5
 800bc02:	4630      	mov	r0, r6
 800bc04:	f000 f93a 	bl	800be7c <__swsetup_r>
 800bc08:	b170      	cbz	r0, 800bc28 <_vfiprintf_r+0x5c>
 800bc0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc0c:	07dc      	lsls	r4, r3, #31
 800bc0e:	d504      	bpl.n	800bc1a <_vfiprintf_r+0x4e>
 800bc10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc14:	b01d      	add	sp, #116	; 0x74
 800bc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc1a:	89ab      	ldrh	r3, [r5, #12]
 800bc1c:	0598      	lsls	r0, r3, #22
 800bc1e:	d4f7      	bmi.n	800bc10 <_vfiprintf_r+0x44>
 800bc20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc22:	f7fe fa0a 	bl	800a03a <__retarget_lock_release_recursive>
 800bc26:	e7f3      	b.n	800bc10 <_vfiprintf_r+0x44>
 800bc28:	2300      	movs	r3, #0
 800bc2a:	9309      	str	r3, [sp, #36]	; 0x24
 800bc2c:	2320      	movs	r3, #32
 800bc2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc32:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc36:	2330      	movs	r3, #48	; 0x30
 800bc38:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bdec <_vfiprintf_r+0x220>
 800bc3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc40:	f04f 0901 	mov.w	r9, #1
 800bc44:	4623      	mov	r3, r4
 800bc46:	469a      	mov	sl, r3
 800bc48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc4c:	b10a      	cbz	r2, 800bc52 <_vfiprintf_r+0x86>
 800bc4e:	2a25      	cmp	r2, #37	; 0x25
 800bc50:	d1f9      	bne.n	800bc46 <_vfiprintf_r+0x7a>
 800bc52:	ebba 0b04 	subs.w	fp, sl, r4
 800bc56:	d00b      	beq.n	800bc70 <_vfiprintf_r+0xa4>
 800bc58:	465b      	mov	r3, fp
 800bc5a:	4622      	mov	r2, r4
 800bc5c:	4629      	mov	r1, r5
 800bc5e:	4630      	mov	r0, r6
 800bc60:	f7ff ffa1 	bl	800bba6 <__sfputs_r>
 800bc64:	3001      	adds	r0, #1
 800bc66:	f000 80a9 	beq.w	800bdbc <_vfiprintf_r+0x1f0>
 800bc6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc6c:	445a      	add	r2, fp
 800bc6e:	9209      	str	r2, [sp, #36]	; 0x24
 800bc70:	f89a 3000 	ldrb.w	r3, [sl]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	f000 80a1 	beq.w	800bdbc <_vfiprintf_r+0x1f0>
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc84:	f10a 0a01 	add.w	sl, sl, #1
 800bc88:	9304      	str	r3, [sp, #16]
 800bc8a:	9307      	str	r3, [sp, #28]
 800bc8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc90:	931a      	str	r3, [sp, #104]	; 0x68
 800bc92:	4654      	mov	r4, sl
 800bc94:	2205      	movs	r2, #5
 800bc96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc9a:	4854      	ldr	r0, [pc, #336]	; (800bdec <_vfiprintf_r+0x220>)
 800bc9c:	f7f4 fab8 	bl	8000210 <memchr>
 800bca0:	9a04      	ldr	r2, [sp, #16]
 800bca2:	b9d8      	cbnz	r0, 800bcdc <_vfiprintf_r+0x110>
 800bca4:	06d1      	lsls	r1, r2, #27
 800bca6:	bf44      	itt	mi
 800bca8:	2320      	movmi	r3, #32
 800bcaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcae:	0713      	lsls	r3, r2, #28
 800bcb0:	bf44      	itt	mi
 800bcb2:	232b      	movmi	r3, #43	; 0x2b
 800bcb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcb8:	f89a 3000 	ldrb.w	r3, [sl]
 800bcbc:	2b2a      	cmp	r3, #42	; 0x2a
 800bcbe:	d015      	beq.n	800bcec <_vfiprintf_r+0x120>
 800bcc0:	9a07      	ldr	r2, [sp, #28]
 800bcc2:	4654      	mov	r4, sl
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	f04f 0c0a 	mov.w	ip, #10
 800bcca:	4621      	mov	r1, r4
 800bccc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcd0:	3b30      	subs	r3, #48	; 0x30
 800bcd2:	2b09      	cmp	r3, #9
 800bcd4:	d94d      	bls.n	800bd72 <_vfiprintf_r+0x1a6>
 800bcd6:	b1b0      	cbz	r0, 800bd06 <_vfiprintf_r+0x13a>
 800bcd8:	9207      	str	r2, [sp, #28]
 800bcda:	e014      	b.n	800bd06 <_vfiprintf_r+0x13a>
 800bcdc:	eba0 0308 	sub.w	r3, r0, r8
 800bce0:	fa09 f303 	lsl.w	r3, r9, r3
 800bce4:	4313      	orrs	r3, r2
 800bce6:	9304      	str	r3, [sp, #16]
 800bce8:	46a2      	mov	sl, r4
 800bcea:	e7d2      	b.n	800bc92 <_vfiprintf_r+0xc6>
 800bcec:	9b03      	ldr	r3, [sp, #12]
 800bcee:	1d19      	adds	r1, r3, #4
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	9103      	str	r1, [sp, #12]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	bfbb      	ittet	lt
 800bcf8:	425b      	neglt	r3, r3
 800bcfa:	f042 0202 	orrlt.w	r2, r2, #2
 800bcfe:	9307      	strge	r3, [sp, #28]
 800bd00:	9307      	strlt	r3, [sp, #28]
 800bd02:	bfb8      	it	lt
 800bd04:	9204      	strlt	r2, [sp, #16]
 800bd06:	7823      	ldrb	r3, [r4, #0]
 800bd08:	2b2e      	cmp	r3, #46	; 0x2e
 800bd0a:	d10c      	bne.n	800bd26 <_vfiprintf_r+0x15a>
 800bd0c:	7863      	ldrb	r3, [r4, #1]
 800bd0e:	2b2a      	cmp	r3, #42	; 0x2a
 800bd10:	d134      	bne.n	800bd7c <_vfiprintf_r+0x1b0>
 800bd12:	9b03      	ldr	r3, [sp, #12]
 800bd14:	1d1a      	adds	r2, r3, #4
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	9203      	str	r2, [sp, #12]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	bfb8      	it	lt
 800bd1e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bd22:	3402      	adds	r4, #2
 800bd24:	9305      	str	r3, [sp, #20]
 800bd26:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bdfc <_vfiprintf_r+0x230>
 800bd2a:	7821      	ldrb	r1, [r4, #0]
 800bd2c:	2203      	movs	r2, #3
 800bd2e:	4650      	mov	r0, sl
 800bd30:	f7f4 fa6e 	bl	8000210 <memchr>
 800bd34:	b138      	cbz	r0, 800bd46 <_vfiprintf_r+0x17a>
 800bd36:	9b04      	ldr	r3, [sp, #16]
 800bd38:	eba0 000a 	sub.w	r0, r0, sl
 800bd3c:	2240      	movs	r2, #64	; 0x40
 800bd3e:	4082      	lsls	r2, r0
 800bd40:	4313      	orrs	r3, r2
 800bd42:	3401      	adds	r4, #1
 800bd44:	9304      	str	r3, [sp, #16]
 800bd46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd4a:	4829      	ldr	r0, [pc, #164]	; (800bdf0 <_vfiprintf_r+0x224>)
 800bd4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd50:	2206      	movs	r2, #6
 800bd52:	f7f4 fa5d 	bl	8000210 <memchr>
 800bd56:	2800      	cmp	r0, #0
 800bd58:	d03f      	beq.n	800bdda <_vfiprintf_r+0x20e>
 800bd5a:	4b26      	ldr	r3, [pc, #152]	; (800bdf4 <_vfiprintf_r+0x228>)
 800bd5c:	bb1b      	cbnz	r3, 800bda6 <_vfiprintf_r+0x1da>
 800bd5e:	9b03      	ldr	r3, [sp, #12]
 800bd60:	3307      	adds	r3, #7
 800bd62:	f023 0307 	bic.w	r3, r3, #7
 800bd66:	3308      	adds	r3, #8
 800bd68:	9303      	str	r3, [sp, #12]
 800bd6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd6c:	443b      	add	r3, r7
 800bd6e:	9309      	str	r3, [sp, #36]	; 0x24
 800bd70:	e768      	b.n	800bc44 <_vfiprintf_r+0x78>
 800bd72:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd76:	460c      	mov	r4, r1
 800bd78:	2001      	movs	r0, #1
 800bd7a:	e7a6      	b.n	800bcca <_vfiprintf_r+0xfe>
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	3401      	adds	r4, #1
 800bd80:	9305      	str	r3, [sp, #20]
 800bd82:	4619      	mov	r1, r3
 800bd84:	f04f 0c0a 	mov.w	ip, #10
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd8e:	3a30      	subs	r2, #48	; 0x30
 800bd90:	2a09      	cmp	r2, #9
 800bd92:	d903      	bls.n	800bd9c <_vfiprintf_r+0x1d0>
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d0c6      	beq.n	800bd26 <_vfiprintf_r+0x15a>
 800bd98:	9105      	str	r1, [sp, #20]
 800bd9a:	e7c4      	b.n	800bd26 <_vfiprintf_r+0x15a>
 800bd9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bda0:	4604      	mov	r4, r0
 800bda2:	2301      	movs	r3, #1
 800bda4:	e7f0      	b.n	800bd88 <_vfiprintf_r+0x1bc>
 800bda6:	ab03      	add	r3, sp, #12
 800bda8:	9300      	str	r3, [sp, #0]
 800bdaa:	462a      	mov	r2, r5
 800bdac:	4b12      	ldr	r3, [pc, #72]	; (800bdf8 <_vfiprintf_r+0x22c>)
 800bdae:	a904      	add	r1, sp, #16
 800bdb0:	4630      	mov	r0, r6
 800bdb2:	f7fd fb95 	bl	80094e0 <_printf_float>
 800bdb6:	4607      	mov	r7, r0
 800bdb8:	1c78      	adds	r0, r7, #1
 800bdba:	d1d6      	bne.n	800bd6a <_vfiprintf_r+0x19e>
 800bdbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdbe:	07d9      	lsls	r1, r3, #31
 800bdc0:	d405      	bmi.n	800bdce <_vfiprintf_r+0x202>
 800bdc2:	89ab      	ldrh	r3, [r5, #12]
 800bdc4:	059a      	lsls	r2, r3, #22
 800bdc6:	d402      	bmi.n	800bdce <_vfiprintf_r+0x202>
 800bdc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdca:	f7fe f936 	bl	800a03a <__retarget_lock_release_recursive>
 800bdce:	89ab      	ldrh	r3, [r5, #12]
 800bdd0:	065b      	lsls	r3, r3, #25
 800bdd2:	f53f af1d 	bmi.w	800bc10 <_vfiprintf_r+0x44>
 800bdd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdd8:	e71c      	b.n	800bc14 <_vfiprintf_r+0x48>
 800bdda:	ab03      	add	r3, sp, #12
 800bddc:	9300      	str	r3, [sp, #0]
 800bdde:	462a      	mov	r2, r5
 800bde0:	4b05      	ldr	r3, [pc, #20]	; (800bdf8 <_vfiprintf_r+0x22c>)
 800bde2:	a904      	add	r1, sp, #16
 800bde4:	4630      	mov	r0, r6
 800bde6:	f7fd fecf 	bl	8009b88 <_printf_i>
 800bdea:	e7e4      	b.n	800bdb6 <_vfiprintf_r+0x1ea>
 800bdec:	0800c6f9 	.word	0x0800c6f9
 800bdf0:	0800c703 	.word	0x0800c703
 800bdf4:	080094e1 	.word	0x080094e1
 800bdf8:	0800bba7 	.word	0x0800bba7
 800bdfc:	0800c6ff 	.word	0x0800c6ff

0800be00 <__swbuf_r>:
 800be00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be02:	460e      	mov	r6, r1
 800be04:	4614      	mov	r4, r2
 800be06:	4605      	mov	r5, r0
 800be08:	b118      	cbz	r0, 800be12 <__swbuf_r+0x12>
 800be0a:	6a03      	ldr	r3, [r0, #32]
 800be0c:	b90b      	cbnz	r3, 800be12 <__swbuf_r+0x12>
 800be0e:	f7fe f883 	bl	8009f18 <__sinit>
 800be12:	69a3      	ldr	r3, [r4, #24]
 800be14:	60a3      	str	r3, [r4, #8]
 800be16:	89a3      	ldrh	r3, [r4, #12]
 800be18:	071a      	lsls	r2, r3, #28
 800be1a:	d525      	bpl.n	800be68 <__swbuf_r+0x68>
 800be1c:	6923      	ldr	r3, [r4, #16]
 800be1e:	b31b      	cbz	r3, 800be68 <__swbuf_r+0x68>
 800be20:	6823      	ldr	r3, [r4, #0]
 800be22:	6922      	ldr	r2, [r4, #16]
 800be24:	1a98      	subs	r0, r3, r2
 800be26:	6963      	ldr	r3, [r4, #20]
 800be28:	b2f6      	uxtb	r6, r6
 800be2a:	4283      	cmp	r3, r0
 800be2c:	4637      	mov	r7, r6
 800be2e:	dc04      	bgt.n	800be3a <__swbuf_r+0x3a>
 800be30:	4621      	mov	r1, r4
 800be32:	4628      	mov	r0, r5
 800be34:	f7ff f9a8 	bl	800b188 <_fflush_r>
 800be38:	b9e0      	cbnz	r0, 800be74 <__swbuf_r+0x74>
 800be3a:	68a3      	ldr	r3, [r4, #8]
 800be3c:	3b01      	subs	r3, #1
 800be3e:	60a3      	str	r3, [r4, #8]
 800be40:	6823      	ldr	r3, [r4, #0]
 800be42:	1c5a      	adds	r2, r3, #1
 800be44:	6022      	str	r2, [r4, #0]
 800be46:	701e      	strb	r6, [r3, #0]
 800be48:	6962      	ldr	r2, [r4, #20]
 800be4a:	1c43      	adds	r3, r0, #1
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d004      	beq.n	800be5a <__swbuf_r+0x5a>
 800be50:	89a3      	ldrh	r3, [r4, #12]
 800be52:	07db      	lsls	r3, r3, #31
 800be54:	d506      	bpl.n	800be64 <__swbuf_r+0x64>
 800be56:	2e0a      	cmp	r6, #10
 800be58:	d104      	bne.n	800be64 <__swbuf_r+0x64>
 800be5a:	4621      	mov	r1, r4
 800be5c:	4628      	mov	r0, r5
 800be5e:	f7ff f993 	bl	800b188 <_fflush_r>
 800be62:	b938      	cbnz	r0, 800be74 <__swbuf_r+0x74>
 800be64:	4638      	mov	r0, r7
 800be66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be68:	4621      	mov	r1, r4
 800be6a:	4628      	mov	r0, r5
 800be6c:	f000 f806 	bl	800be7c <__swsetup_r>
 800be70:	2800      	cmp	r0, #0
 800be72:	d0d5      	beq.n	800be20 <__swbuf_r+0x20>
 800be74:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800be78:	e7f4      	b.n	800be64 <__swbuf_r+0x64>
	...

0800be7c <__swsetup_r>:
 800be7c:	b538      	push	{r3, r4, r5, lr}
 800be7e:	4b2a      	ldr	r3, [pc, #168]	; (800bf28 <__swsetup_r+0xac>)
 800be80:	4605      	mov	r5, r0
 800be82:	6818      	ldr	r0, [r3, #0]
 800be84:	460c      	mov	r4, r1
 800be86:	b118      	cbz	r0, 800be90 <__swsetup_r+0x14>
 800be88:	6a03      	ldr	r3, [r0, #32]
 800be8a:	b90b      	cbnz	r3, 800be90 <__swsetup_r+0x14>
 800be8c:	f7fe f844 	bl	8009f18 <__sinit>
 800be90:	89a3      	ldrh	r3, [r4, #12]
 800be92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be96:	0718      	lsls	r0, r3, #28
 800be98:	d422      	bmi.n	800bee0 <__swsetup_r+0x64>
 800be9a:	06d9      	lsls	r1, r3, #27
 800be9c:	d407      	bmi.n	800beae <__swsetup_r+0x32>
 800be9e:	2309      	movs	r3, #9
 800bea0:	602b      	str	r3, [r5, #0]
 800bea2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bea6:	81a3      	strh	r3, [r4, #12]
 800bea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800beac:	e034      	b.n	800bf18 <__swsetup_r+0x9c>
 800beae:	0758      	lsls	r0, r3, #29
 800beb0:	d512      	bpl.n	800bed8 <__swsetup_r+0x5c>
 800beb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800beb4:	b141      	cbz	r1, 800bec8 <__swsetup_r+0x4c>
 800beb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800beba:	4299      	cmp	r1, r3
 800bebc:	d002      	beq.n	800bec4 <__swsetup_r+0x48>
 800bebe:	4628      	mov	r0, r5
 800bec0:	f7fe ff38 	bl	800ad34 <_free_r>
 800bec4:	2300      	movs	r3, #0
 800bec6:	6363      	str	r3, [r4, #52]	; 0x34
 800bec8:	89a3      	ldrh	r3, [r4, #12]
 800beca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bece:	81a3      	strh	r3, [r4, #12]
 800bed0:	2300      	movs	r3, #0
 800bed2:	6063      	str	r3, [r4, #4]
 800bed4:	6923      	ldr	r3, [r4, #16]
 800bed6:	6023      	str	r3, [r4, #0]
 800bed8:	89a3      	ldrh	r3, [r4, #12]
 800beda:	f043 0308 	orr.w	r3, r3, #8
 800bede:	81a3      	strh	r3, [r4, #12]
 800bee0:	6923      	ldr	r3, [r4, #16]
 800bee2:	b94b      	cbnz	r3, 800bef8 <__swsetup_r+0x7c>
 800bee4:	89a3      	ldrh	r3, [r4, #12]
 800bee6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800beea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800beee:	d003      	beq.n	800bef8 <__swsetup_r+0x7c>
 800bef0:	4621      	mov	r1, r4
 800bef2:	4628      	mov	r0, r5
 800bef4:	f000 f840 	bl	800bf78 <__smakebuf_r>
 800bef8:	89a0      	ldrh	r0, [r4, #12]
 800befa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800befe:	f010 0301 	ands.w	r3, r0, #1
 800bf02:	d00a      	beq.n	800bf1a <__swsetup_r+0x9e>
 800bf04:	2300      	movs	r3, #0
 800bf06:	60a3      	str	r3, [r4, #8]
 800bf08:	6963      	ldr	r3, [r4, #20]
 800bf0a:	425b      	negs	r3, r3
 800bf0c:	61a3      	str	r3, [r4, #24]
 800bf0e:	6923      	ldr	r3, [r4, #16]
 800bf10:	b943      	cbnz	r3, 800bf24 <__swsetup_r+0xa8>
 800bf12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf16:	d1c4      	bne.n	800bea2 <__swsetup_r+0x26>
 800bf18:	bd38      	pop	{r3, r4, r5, pc}
 800bf1a:	0781      	lsls	r1, r0, #30
 800bf1c:	bf58      	it	pl
 800bf1e:	6963      	ldrpl	r3, [r4, #20]
 800bf20:	60a3      	str	r3, [r4, #8]
 800bf22:	e7f4      	b.n	800bf0e <__swsetup_r+0x92>
 800bf24:	2000      	movs	r0, #0
 800bf26:	e7f7      	b.n	800bf18 <__swsetup_r+0x9c>
 800bf28:	20002440 	.word	0x20002440

0800bf2c <__swhatbuf_r>:
 800bf2c:	b570      	push	{r4, r5, r6, lr}
 800bf2e:	460c      	mov	r4, r1
 800bf30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf34:	2900      	cmp	r1, #0
 800bf36:	b096      	sub	sp, #88	; 0x58
 800bf38:	4615      	mov	r5, r2
 800bf3a:	461e      	mov	r6, r3
 800bf3c:	da0d      	bge.n	800bf5a <__swhatbuf_r+0x2e>
 800bf3e:	89a3      	ldrh	r3, [r4, #12]
 800bf40:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bf44:	f04f 0100 	mov.w	r1, #0
 800bf48:	bf0c      	ite	eq
 800bf4a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bf4e:	2340      	movne	r3, #64	; 0x40
 800bf50:	2000      	movs	r0, #0
 800bf52:	6031      	str	r1, [r6, #0]
 800bf54:	602b      	str	r3, [r5, #0]
 800bf56:	b016      	add	sp, #88	; 0x58
 800bf58:	bd70      	pop	{r4, r5, r6, pc}
 800bf5a:	466a      	mov	r2, sp
 800bf5c:	f000 f848 	bl	800bff0 <_fstat_r>
 800bf60:	2800      	cmp	r0, #0
 800bf62:	dbec      	blt.n	800bf3e <__swhatbuf_r+0x12>
 800bf64:	9901      	ldr	r1, [sp, #4]
 800bf66:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bf6a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bf6e:	4259      	negs	r1, r3
 800bf70:	4159      	adcs	r1, r3
 800bf72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf76:	e7eb      	b.n	800bf50 <__swhatbuf_r+0x24>

0800bf78 <__smakebuf_r>:
 800bf78:	898b      	ldrh	r3, [r1, #12]
 800bf7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf7c:	079d      	lsls	r5, r3, #30
 800bf7e:	4606      	mov	r6, r0
 800bf80:	460c      	mov	r4, r1
 800bf82:	d507      	bpl.n	800bf94 <__smakebuf_r+0x1c>
 800bf84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf88:	6023      	str	r3, [r4, #0]
 800bf8a:	6123      	str	r3, [r4, #16]
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	6163      	str	r3, [r4, #20]
 800bf90:	b002      	add	sp, #8
 800bf92:	bd70      	pop	{r4, r5, r6, pc}
 800bf94:	ab01      	add	r3, sp, #4
 800bf96:	466a      	mov	r2, sp
 800bf98:	f7ff ffc8 	bl	800bf2c <__swhatbuf_r>
 800bf9c:	9900      	ldr	r1, [sp, #0]
 800bf9e:	4605      	mov	r5, r0
 800bfa0:	4630      	mov	r0, r6
 800bfa2:	f7fd fd03 	bl	80099ac <_malloc_r>
 800bfa6:	b948      	cbnz	r0, 800bfbc <__smakebuf_r+0x44>
 800bfa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfac:	059a      	lsls	r2, r3, #22
 800bfae:	d4ef      	bmi.n	800bf90 <__smakebuf_r+0x18>
 800bfb0:	f023 0303 	bic.w	r3, r3, #3
 800bfb4:	f043 0302 	orr.w	r3, r3, #2
 800bfb8:	81a3      	strh	r3, [r4, #12]
 800bfba:	e7e3      	b.n	800bf84 <__smakebuf_r+0xc>
 800bfbc:	89a3      	ldrh	r3, [r4, #12]
 800bfbe:	6020      	str	r0, [r4, #0]
 800bfc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfc4:	81a3      	strh	r3, [r4, #12]
 800bfc6:	9b00      	ldr	r3, [sp, #0]
 800bfc8:	6163      	str	r3, [r4, #20]
 800bfca:	9b01      	ldr	r3, [sp, #4]
 800bfcc:	6120      	str	r0, [r4, #16]
 800bfce:	b15b      	cbz	r3, 800bfe8 <__smakebuf_r+0x70>
 800bfd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfd4:	4630      	mov	r0, r6
 800bfd6:	f000 f81d 	bl	800c014 <_isatty_r>
 800bfda:	b128      	cbz	r0, 800bfe8 <__smakebuf_r+0x70>
 800bfdc:	89a3      	ldrh	r3, [r4, #12]
 800bfde:	f023 0303 	bic.w	r3, r3, #3
 800bfe2:	f043 0301 	orr.w	r3, r3, #1
 800bfe6:	81a3      	strh	r3, [r4, #12]
 800bfe8:	89a3      	ldrh	r3, [r4, #12]
 800bfea:	431d      	orrs	r5, r3
 800bfec:	81a5      	strh	r5, [r4, #12]
 800bfee:	e7cf      	b.n	800bf90 <__smakebuf_r+0x18>

0800bff0 <_fstat_r>:
 800bff0:	b538      	push	{r3, r4, r5, lr}
 800bff2:	4d07      	ldr	r5, [pc, #28]	; (800c010 <_fstat_r+0x20>)
 800bff4:	2300      	movs	r3, #0
 800bff6:	4604      	mov	r4, r0
 800bff8:	4608      	mov	r0, r1
 800bffa:	4611      	mov	r1, r2
 800bffc:	602b      	str	r3, [r5, #0]
 800bffe:	f7f8 fe7e 	bl	8004cfe <_fstat>
 800c002:	1c43      	adds	r3, r0, #1
 800c004:	d102      	bne.n	800c00c <_fstat_r+0x1c>
 800c006:	682b      	ldr	r3, [r5, #0]
 800c008:	b103      	cbz	r3, 800c00c <_fstat_r+0x1c>
 800c00a:	6023      	str	r3, [r4, #0]
 800c00c:	bd38      	pop	{r3, r4, r5, pc}
 800c00e:	bf00      	nop
 800c010:	2000339c 	.word	0x2000339c

0800c014 <_isatty_r>:
 800c014:	b538      	push	{r3, r4, r5, lr}
 800c016:	4d06      	ldr	r5, [pc, #24]	; (800c030 <_isatty_r+0x1c>)
 800c018:	2300      	movs	r3, #0
 800c01a:	4604      	mov	r4, r0
 800c01c:	4608      	mov	r0, r1
 800c01e:	602b      	str	r3, [r5, #0]
 800c020:	f7f8 fe7d 	bl	8004d1e <_isatty>
 800c024:	1c43      	adds	r3, r0, #1
 800c026:	d102      	bne.n	800c02e <_isatty_r+0x1a>
 800c028:	682b      	ldr	r3, [r5, #0]
 800c02a:	b103      	cbz	r3, 800c02e <_isatty_r+0x1a>
 800c02c:	6023      	str	r3, [r4, #0]
 800c02e:	bd38      	pop	{r3, r4, r5, pc}
 800c030:	2000339c 	.word	0x2000339c

0800c034 <_raise_r>:
 800c034:	291f      	cmp	r1, #31
 800c036:	b538      	push	{r3, r4, r5, lr}
 800c038:	4604      	mov	r4, r0
 800c03a:	460d      	mov	r5, r1
 800c03c:	d904      	bls.n	800c048 <_raise_r+0x14>
 800c03e:	2316      	movs	r3, #22
 800c040:	6003      	str	r3, [r0, #0]
 800c042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c046:	bd38      	pop	{r3, r4, r5, pc}
 800c048:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c04a:	b112      	cbz	r2, 800c052 <_raise_r+0x1e>
 800c04c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c050:	b94b      	cbnz	r3, 800c066 <_raise_r+0x32>
 800c052:	4620      	mov	r0, r4
 800c054:	f000 f830 	bl	800c0b8 <_getpid_r>
 800c058:	462a      	mov	r2, r5
 800c05a:	4601      	mov	r1, r0
 800c05c:	4620      	mov	r0, r4
 800c05e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c062:	f000 b817 	b.w	800c094 <_kill_r>
 800c066:	2b01      	cmp	r3, #1
 800c068:	d00a      	beq.n	800c080 <_raise_r+0x4c>
 800c06a:	1c59      	adds	r1, r3, #1
 800c06c:	d103      	bne.n	800c076 <_raise_r+0x42>
 800c06e:	2316      	movs	r3, #22
 800c070:	6003      	str	r3, [r0, #0]
 800c072:	2001      	movs	r0, #1
 800c074:	e7e7      	b.n	800c046 <_raise_r+0x12>
 800c076:	2400      	movs	r4, #0
 800c078:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c07c:	4628      	mov	r0, r5
 800c07e:	4798      	blx	r3
 800c080:	2000      	movs	r0, #0
 800c082:	e7e0      	b.n	800c046 <_raise_r+0x12>

0800c084 <raise>:
 800c084:	4b02      	ldr	r3, [pc, #8]	; (800c090 <raise+0xc>)
 800c086:	4601      	mov	r1, r0
 800c088:	6818      	ldr	r0, [r3, #0]
 800c08a:	f7ff bfd3 	b.w	800c034 <_raise_r>
 800c08e:	bf00      	nop
 800c090:	20002440 	.word	0x20002440

0800c094 <_kill_r>:
 800c094:	b538      	push	{r3, r4, r5, lr}
 800c096:	4d07      	ldr	r5, [pc, #28]	; (800c0b4 <_kill_r+0x20>)
 800c098:	2300      	movs	r3, #0
 800c09a:	4604      	mov	r4, r0
 800c09c:	4608      	mov	r0, r1
 800c09e:	4611      	mov	r1, r2
 800c0a0:	602b      	str	r3, [r5, #0]
 800c0a2:	f7f8 fdcd 	bl	8004c40 <_kill>
 800c0a6:	1c43      	adds	r3, r0, #1
 800c0a8:	d102      	bne.n	800c0b0 <_kill_r+0x1c>
 800c0aa:	682b      	ldr	r3, [r5, #0]
 800c0ac:	b103      	cbz	r3, 800c0b0 <_kill_r+0x1c>
 800c0ae:	6023      	str	r3, [r4, #0]
 800c0b0:	bd38      	pop	{r3, r4, r5, pc}
 800c0b2:	bf00      	nop
 800c0b4:	2000339c 	.word	0x2000339c

0800c0b8 <_getpid_r>:
 800c0b8:	f7f8 bdba 	b.w	8004c30 <_getpid>

0800c0bc <round>:
 800c0bc:	ec53 2b10 	vmov	r2, r3, d0
 800c0c0:	b570      	push	{r4, r5, r6, lr}
 800c0c2:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800c0c6:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800c0ca:	2813      	cmp	r0, #19
 800c0cc:	ee10 5a10 	vmov	r5, s0
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	dc18      	bgt.n	800c106 <round+0x4a>
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	da09      	bge.n	800c0ec <round+0x30>
 800c0d8:	3001      	adds	r0, #1
 800c0da:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800c0de:	d103      	bne.n	800c0e8 <round+0x2c>
 800c0e0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800c0e4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	e02a      	b.n	800c142 <round+0x86>
 800c0ec:	4c16      	ldr	r4, [pc, #88]	; (800c148 <round+0x8c>)
 800c0ee:	4104      	asrs	r4, r0
 800c0f0:	ea03 0604 	and.w	r6, r3, r4
 800c0f4:	4316      	orrs	r6, r2
 800c0f6:	d011      	beq.n	800c11c <round+0x60>
 800c0f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c0fc:	4103      	asrs	r3, r0
 800c0fe:	440b      	add	r3, r1
 800c100:	ea23 0104 	bic.w	r1, r3, r4
 800c104:	e7f0      	b.n	800c0e8 <round+0x2c>
 800c106:	2833      	cmp	r0, #51	; 0x33
 800c108:	dd0b      	ble.n	800c122 <round+0x66>
 800c10a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800c10e:	d105      	bne.n	800c11c <round+0x60>
 800c110:	ee10 0a10 	vmov	r0, s0
 800c114:	f7f4 f8da 	bl	80002cc <__adddf3>
 800c118:	4602      	mov	r2, r0
 800c11a:	460b      	mov	r3, r1
 800c11c:	ec43 2b10 	vmov	d0, r2, r3
 800c120:	bd70      	pop	{r4, r5, r6, pc}
 800c122:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800c126:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c12a:	40f4      	lsrs	r4, r6
 800c12c:	4214      	tst	r4, r2
 800c12e:	d0f5      	beq.n	800c11c <round+0x60>
 800c130:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800c134:	2301      	movs	r3, #1
 800c136:	4083      	lsls	r3, r0
 800c138:	195b      	adds	r3, r3, r5
 800c13a:	bf28      	it	cs
 800c13c:	3101      	addcs	r1, #1
 800c13e:	ea23 0304 	bic.w	r3, r3, r4
 800c142:	461a      	mov	r2, r3
 800c144:	460b      	mov	r3, r1
 800c146:	e7e9      	b.n	800c11c <round+0x60>
 800c148:	000fffff 	.word	0x000fffff

0800c14c <_init>:
 800c14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c14e:	bf00      	nop
 800c150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c152:	bc08      	pop	{r3}
 800c154:	469e      	mov	lr, r3
 800c156:	4770      	bx	lr

0800c158 <_fini>:
 800c158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c15a:	bf00      	nop
 800c15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c15e:	bc08      	pop	{r3}
 800c160:	469e      	mov	lr, r3
 800c162:	4770      	bx	lr
