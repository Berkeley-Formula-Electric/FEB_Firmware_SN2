
FinalAPPSCode_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008614  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  080087e8  080087e8  000187e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c1c  08008c1c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008c1c  08008c1c  00018c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c24  08008c24  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c24  08008c24  00018c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c28  08008c28  00018c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  200001dc  08008e08  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  08008e08  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e9a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002502  00000000  00000000  000320a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  000345a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  000355d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000247e9  00000000  00000000  00036520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012af8  00000000  00000000  0005ad09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1dc4  00000000  00000000  0006d801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014f5c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056bc  00000000  00000000  0014f618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080087cc 	.word	0x080087cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	080087cc 	.word	0x080087cc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <Store_EMERGENCY_Msg>:
    EMERGENCY_APPS_EMERGENCY_TYPE apps_emergency;
    EMERGENCY_SW_EMERGENCY_TYPE sw_emergency;
} EMERGENCY_MESSAGE_TYPE;
EMERGENCY_MESSAGE_TYPE EMERGENCY_MESSAGE;

void Store_EMERGENCY_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <Store_EMERGENCY_Msg+0x1a>
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d006      	beq.n	8000fb2 <Store_EMERGENCY_Msg+0x26>
            break;
        case EMERGENCY_SW_EMERGENCY:
            memcpy(&(EMERGENCY_MESSAGE.sw_emergency), RxData, data_length);
            break;
    }
}
 8000fa4:	e00b      	b.n	8000fbe <Store_EMERGENCY_Msg+0x32>
            memcpy(&(EMERGENCY_MESSAGE.apps_emergency), RxData, data_length);
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	68b9      	ldr	r1, [r7, #8]
 8000faa:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <Store_EMERGENCY_Msg+0x3c>)
 8000fac:	f004 fd24 	bl	80059f8 <memcpy>
            break;
 8000fb0:	e005      	b.n	8000fbe <Store_EMERGENCY_Msg+0x32>
            memcpy(&(EMERGENCY_MESSAGE.sw_emergency), RxData, data_length);
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	68b9      	ldr	r1, [r7, #8]
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <Store_EMERGENCY_Msg+0x40>)
 8000fb8:	f004 fd1e 	bl	80059f8 <memcpy>
            break;
 8000fbc:	bf00      	nop
}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200001f8 	.word	0x200001f8
 8000fcc:	200001f9 	.word	0x200001f9

08000fd0 <Store_BMS_Msg>:
    BMS_TEMPERATURE_TYPE temperature;
    BMS_VOLTAGE_TYPE voltage;
} BMS_MESSAGE_TYPE;
BMS_MESSAGE_TYPE BMS_MESSAGE;

void Store_BMS_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2b10      	cmp	r3, #16
 8000fe0:	d003      	beq.n	8000fea <Store_BMS_Msg+0x1a>
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2b11      	cmp	r3, #17
 8000fe6:	d006      	beq.n	8000ff6 <Store_BMS_Msg+0x26>
            break;
        case BMS_VOLTAGE:
            memcpy(&(BMS_MESSAGE.voltage), RxData, data_length);
            break;
    }
}
 8000fe8:	e00b      	b.n	8001002 <Store_BMS_Msg+0x32>
            memcpy(&(BMS_MESSAGE.temperature), RxData, data_length);
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	4807      	ldr	r0, [pc, #28]	; (800100c <Store_BMS_Msg+0x3c>)
 8000ff0:	f004 fd02 	bl	80059f8 <memcpy>
            break;
 8000ff4:	e005      	b.n	8001002 <Store_BMS_Msg+0x32>
            memcpy(&(BMS_MESSAGE.voltage), RxData, data_length);
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <Store_BMS_Msg+0x40>)
 8000ffc:	f004 fcfc 	bl	80059f8 <memcpy>
            break;
 8001000:	bf00      	nop
}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200001fc 	.word	0x200001fc
 8001010:	20000200 	.word	0x20000200

08001014 <Store_SW_Msg>:
    SW_ACUMULATOR_FANS_TYPE acumulator_fans;
    SW_EXTRA_TYPE extra;
} SW_MESSAGE_TYPE;
SW_MESSAGE_TYPE SW_MESSAGE;

void Store_SW_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	3b20      	subs	r3, #32
 8001024:	2b03      	cmp	r3, #3
 8001026:	d823      	bhi.n	8001070 <Store_SW_Msg+0x5c>
 8001028:	a201      	add	r2, pc, #4	; (adr r2, 8001030 <Store_SW_Msg+0x1c>)
 800102a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102e:	bf00      	nop
 8001030:	08001041 	.word	0x08001041
 8001034:	0800104d 	.word	0x0800104d
 8001038:	08001059 	.word	0x08001059
 800103c:	08001065 	.word	0x08001065
        case SW_READY_TO_DRIVE:
            memcpy(&(SW_MESSAGE.ready_to_drive), RxData, data_length);
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	68b9      	ldr	r1, [r7, #8]
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <Store_SW_Msg+0x64>)
 8001046:	f004 fcd7 	bl	80059f8 <memcpy>
            break;
 800104a:	e011      	b.n	8001070 <Store_SW_Msg+0x5c>
        case SW_COOLANT_PUMP:
            memcpy(&(SW_MESSAGE.coolant_pump), RxData, data_length);
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	480a      	ldr	r0, [pc, #40]	; (800107c <Store_SW_Msg+0x68>)
 8001052:	f004 fcd1 	bl	80059f8 <memcpy>
            break;
 8001056:	e00b      	b.n	8001070 <Store_SW_Msg+0x5c>
        case SW_ACUMULATOR_FANS:
            memcpy(&(SW_MESSAGE.acumulator_fans), RxData, data_length);
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	68b9      	ldr	r1, [r7, #8]
 800105c:	4808      	ldr	r0, [pc, #32]	; (8001080 <Store_SW_Msg+0x6c>)
 800105e:	f004 fccb 	bl	80059f8 <memcpy>
            break;
 8001062:	e005      	b.n	8001070 <Store_SW_Msg+0x5c>
        case SW_EXTRA:
            memcpy(&(SW_MESSAGE.extra), RxData, data_length);
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	68b9      	ldr	r1, [r7, #8]
 8001068:	4806      	ldr	r0, [pc, #24]	; (8001084 <Store_SW_Msg+0x70>)
 800106a:	f004 fcc5 	bl	80059f8 <memcpy>
            break;
 800106e:	bf00      	nop
    }
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000204 	.word	0x20000204
 800107c:	20000205 	.word	0x20000205
 8001080:	20000206 	.word	0x20000206
 8001084:	20000207 	.word	0x20000207

08001088 <Store_APPS_Msg>:
    APPS_BRAKE_PEDAL_TYPE brake_pedal;
    APPS_TORQUE_TYPE torque;
} APPS_MESSAGE_TYPE;
APPS_MESSAGE_TYPE APPS_MESSAGE;

void Store_APPS_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	3b30      	subs	r3, #48	; 0x30
 8001098:	2b03      	cmp	r3, #3
 800109a:	d823      	bhi.n	80010e4 <Store_APPS_Msg+0x5c>
 800109c:	a201      	add	r2, pc, #4	; (adr r2, 80010a4 <Store_APPS_Msg+0x1c>)
 800109e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a2:	bf00      	nop
 80010a4:	080010b5 	.word	0x080010b5
 80010a8:	080010c1 	.word	0x080010c1
 80010ac:	080010cd 	.word	0x080010cd
 80010b0:	080010d9 	.word	0x080010d9
        case APPS_ACCELERATOR1_PEDAL:
            memcpy(&(APPS_MESSAGE.accelerator1_pedal), RxData, data_length);
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	68b9      	ldr	r1, [r7, #8]
 80010b8:	480c      	ldr	r0, [pc, #48]	; (80010ec <Store_APPS_Msg+0x64>)
 80010ba:	f004 fc9d 	bl	80059f8 <memcpy>
            break;
 80010be:	e011      	b.n	80010e4 <Store_APPS_Msg+0x5c>
        case APPS_ACCELERATOR2_PEDAL:
            memcpy(&(APPS_MESSAGE.accelerator2_pedal), RxData, data_length);
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	68b9      	ldr	r1, [r7, #8]
 80010c4:	480a      	ldr	r0, [pc, #40]	; (80010f0 <Store_APPS_Msg+0x68>)
 80010c6:	f004 fc97 	bl	80059f8 <memcpy>
            break;
 80010ca:	e00b      	b.n	80010e4 <Store_APPS_Msg+0x5c>
        case APPS_BRAKE_PEDAL:
            memcpy(&(APPS_MESSAGE.brake_pedal), RxData, data_length);
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	4808      	ldr	r0, [pc, #32]	; (80010f4 <Store_APPS_Msg+0x6c>)
 80010d2:	f004 fc91 	bl	80059f8 <memcpy>
            break;
 80010d6:	e005      	b.n	80010e4 <Store_APPS_Msg+0x5c>
        case APPS_TORQUE:
            memcpy(&(APPS_MESSAGE.torque), RxData, data_length);
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	68b9      	ldr	r1, [r7, #8]
 80010dc:	4806      	ldr	r0, [pc, #24]	; (80010f8 <Store_APPS_Msg+0x70>)
 80010de:	f004 fc8b 	bl	80059f8 <memcpy>
            break;
 80010e2:	bf00      	nop
    }
}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000208 	.word	0x20000208
 80010f0:	2000020c 	.word	0x2000020c
 80010f4:	20000210 	.word	0x20000210
 80010f8:	20000214 	.word	0x20000214

080010fc <assign_filter_array>:
const FilterArrayLength RMS_RX_NUM = 1;

const AddressIdType IVPDB_RX_ID[] = {SW_ID};
const FilterArrayLength IVPDB_RX_NUM = 1;

const AddressIdType* assign_filter_array(AddressIdType NODE_ID) {
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	2b04      	cmp	r3, #4
 800110a:	d815      	bhi.n	8001138 <assign_filter_array+0x3c>
 800110c:	a201      	add	r2, pc, #4	; (adr r2, 8001114 <assign_filter_array+0x18>)
 800110e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001112:	bf00      	nop
 8001114:	08001129 	.word	0x08001129
 8001118:	08001139 	.word	0x08001139
 800111c:	0800112d 	.word	0x0800112d
 8001120:	08001131 	.word	0x08001131
 8001124:	08001135 	.word	0x08001135
        case BMS_ID:
            return BMS_RX_ID;
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <assign_filter_array+0x4c>)
 800112a:	e006      	b.n	800113a <assign_filter_array+0x3e>
            break;
        case APPS_ID:
            return APPS_RX_ID;
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <assign_filter_array+0x50>)
 800112e:	e004      	b.n	800113a <assign_filter_array+0x3e>
            break;
        case RMS_ID:
            return RMS_RX_ID;
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <assign_filter_array+0x54>)
 8001132:	e002      	b.n	800113a <assign_filter_array+0x3e>
            break;
        case IVPDB_ID:
            return IVPDB_RX_ID;
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <assign_filter_array+0x58>)
 8001136:	e000      	b.n	800113a <assign_filter_array+0x3e>
            break;
    }
    return 0;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	08008818 	.word	0x08008818
 800114c:	0800881c 	.word	0x0800881c
 8001150:	08008824 	.word	0x08008824
 8001154:	08008828 	.word	0x08008828

08001158 <assign_filter_array_legnth>:

FilterArrayLength assign_filter_array_legnth(AddressIdType NODE_ID) {
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3b01      	subs	r3, #1
 8001164:	2b04      	cmp	r3, #4
 8001166:	d815      	bhi.n	8001194 <assign_filter_array_legnth+0x3c>
 8001168:	a201      	add	r2, pc, #4	; (adr r2, 8001170 <assign_filter_array_legnth+0x18>)
 800116a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116e:	bf00      	nop
 8001170:	08001185 	.word	0x08001185
 8001174:	08001195 	.word	0x08001195
 8001178:	08001189 	.word	0x08001189
 800117c:	0800118d 	.word	0x0800118d
 8001180:	08001191 	.word	0x08001191
        case BMS_ID:
            return BMS_RX_NUM;
 8001184:	2301      	movs	r3, #1
 8001186:	e006      	b.n	8001196 <assign_filter_array_legnth+0x3e>
            break;
        case APPS_ID:
            return APPS_RX_NUM;
 8001188:	2302      	movs	r3, #2
 800118a:	e004      	b.n	8001196 <assign_filter_array_legnth+0x3e>
            break;
        case RMS_ID:
            return RMS_RX_NUM;
 800118c:	2301      	movs	r3, #1
 800118e:	e002      	b.n	8001196 <assign_filter_array_legnth+0x3e>
            break;
        case IVPDB_ID:
            return IVPDB_RX_NUM;
 8001190:	2301      	movs	r3, #1
 8001192:	e000      	b.n	8001196 <assign_filter_array_legnth+0x3e>
            break;
    }
    return 0;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop

080011a4 <store_msg>:

void store_msg(CAN_RxHeaderTypeDef *pHeader, uint8_t RxData[]) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
    switch(pHeader->StdId >> BITS_PER_MESSAGE_TYPE) {
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	091b      	lsrs	r3, r3, #4
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d82f      	bhi.n	8001218 <store_msg+0x74>
 80011b8:	a201      	add	r2, pc, #4	; (adr r2, 80011c0 <store_msg+0x1c>)
 80011ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011be:	bf00      	nop
 80011c0:	080011d1 	.word	0x080011d1
 80011c4:	080011e3 	.word	0x080011e3
 80011c8:	080011f5 	.word	0x080011f5
 80011cc:	08001207 	.word	0x08001207
        case EMERGENCY_ID:
            Store_EMERGENCY_Msg(pHeader->StdId, RxData, pHeader->DLC);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	461a      	mov	r2, r3
 80011da:	6839      	ldr	r1, [r7, #0]
 80011dc:	f7ff fed6 	bl	8000f8c <Store_EMERGENCY_Msg>
            break;
 80011e0:	e01a      	b.n	8001218 <store_msg+0x74>
        case BMS_ID:
            Store_BMS_Msg(pHeader->StdId, RxData, pHeader->DLC);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	461a      	mov	r2, r3
 80011ec:	6839      	ldr	r1, [r7, #0]
 80011ee:	f7ff feef 	bl	8000fd0 <Store_BMS_Msg>
            break;
 80011f2:	e011      	b.n	8001218 <store_msg+0x74>
        case SW_ID:
            Store_SW_Msg(pHeader->StdId, RxData, pHeader->DLC);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	461a      	mov	r2, r3
 80011fe:	6839      	ldr	r1, [r7, #0]
 8001200:	f7ff ff08 	bl	8001014 <Store_SW_Msg>
            break;
 8001204:	e008      	b.n	8001218 <store_msg+0x74>
        case APPS_ID:
            Store_APPS_Msg(pHeader->StdId, RxData, pHeader->DLC);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6818      	ldr	r0, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	461a      	mov	r2, r3
 8001210:	6839      	ldr	r1, [r7, #0]
 8001212:	f7ff ff39 	bl	8001088 <Store_APPS_Msg>
            break;
 8001216:	bf00      	nop
    }
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <FEB_CAN_Filter_Config>:
uint8_t TxData[8];
uint8_t RxData[8];
uint32_t TxMailbox;
uint8_t CAN_Flag = 0;

void FEB_CAN_Filter_Config(CAN_HandleTypeDef* hcan, const AddressIdType* filter_array, uint8_t filter_array_len, uint8_t FIFO_Assignment) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b090      	sub	sp, #64	; 0x40
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	4611      	mov	r1, r2
 800122c:	461a      	mov	r2, r3
 800122e:	460b      	mov	r3, r1
 8001230:	71fb      	strb	r3, [r7, #7]
 8001232:	4613      	mov	r3, r2
 8001234:	71bb      	strb	r3, [r7, #6]
	for (int i = 0; i < filter_array_len; i++) {
 8001236:	2300      	movs	r3, #0
 8001238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800123a:	e027      	b.n	800128c <FEB_CAN_Filter_Config+0x6c>
		CAN_FilterTypeDef filter_config;

		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 800123c:	2301      	movs	r3, #1
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
		filter_config.FilterBank = i;
 8001240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.FilterFIFOAssignment = FIFO_Assignment;
 8001244:	79bb      	ldrb	r3, [r7, #6]
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.FilterIdHigh = filter_array[i] << (16 - BITS_PER_ID);
 8001248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	4413      	add	r3, r2
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	025b      	lsls	r3, r3, #9
 8001254:	617b      	str	r3, [r7, #20]
		filter_config.FilterIdLow = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	61bb      	str	r3, [r7, #24]
		filter_config.FilterMaskIdHigh = 0x7F << (16 - BITS_PER_ID);
 800125a:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 800125e:	61fb      	str	r3, [r7, #28]
		filter_config.FilterMaskIdLow = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8001264:	2300      	movs	r3, #0
 8001266:	62fb      	str	r3, [r7, #44]	; 0x2c
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8001268:	2301      	movs	r3, #1
 800126a:	633b      	str	r3, [r7, #48]	; 0x30
		filter_config.SlaveStartFilterBank = 27;
 800126c:	231b      	movs	r3, #27
 800126e:	63bb      	str	r3, [r7, #56]	; 0x38

		if(HAL_CAN_ConfigFilter(hcan, &filter_config))
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f001 fe7c 	bl	8002f74 <HAL_CAN_ConfigFilter>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <FEB_CAN_Filter_Config+0x66>
		{
		  Error_Handler();
 8001282:	f000 fd63 	bl	8001d4c <Error_Handler>
	for (int i = 0; i < filter_array_len; i++) {
 8001286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001288:	3301      	adds	r3, #1
 800128a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001290:	429a      	cmp	r2, r3
 8001292:	dbd3      	blt.n	800123c <FEB_CAN_Filter_Config+0x1c>
		}
	}
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3740      	adds	r7, #64	; 0x40
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <FEB_CAN_Init>:

void FEB_CAN_Init(CAN_HandleTypeDef* hcan, uint32_t NODE_ID) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
	// Select Rx FIFO
	uint8_t FIFO_Assignment;
	uint32_t FIFO_Interrupt;
	if (hcan->Instance == CAN1) {
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a1c      	ldr	r2, [pc, #112]	; (8001320 <FEB_CAN_Init+0x80>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d104      	bne.n	80012be <FEB_CAN_Init+0x1e>
		FIFO_Assignment = CAN_RX_FIFO0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO0_MSG_PENDING;
 80012b8:	2302      	movs	r3, #2
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	e008      	b.n	80012d0 <FEB_CAN_Init+0x30>
	} else if (hcan->Instance == CAN2) {
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a18      	ldr	r2, [pc, #96]	; (8001324 <FEB_CAN_Init+0x84>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d103      	bne.n	80012d0 <FEB_CAN_Init+0x30>
		FIFO_Assignment = CAN_RX_FIFO1;
 80012c8:	2301      	movs	r3, #1
 80012ca:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO1_MSG_PENDING;
 80012cc:	2310      	movs	r3, #16
 80012ce:	613b      	str	r3, [r7, #16]
	}

	// Initialize transmission header
	TxHeader.IDE = CAN_ID_STD;
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <FEB_CAN_Init+0x88>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <FEB_CAN_Init+0x88>)
 80012d8:	2200      	movs	r2, #0
 80012da:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <FEB_CAN_Init+0x88>)
 80012de:	2200      	movs	r2, #0
 80012e0:	751a      	strb	r2, [r3, #20]

	// Initialize CAN filters
	const AddressIdType* filter_array;
	FilterArrayLength filter_num;
	filter_array  = assign_filter_array(NODE_ID);
 80012e2:	6838      	ldr	r0, [r7, #0]
 80012e4:	f7ff ff0a 	bl	80010fc <assign_filter_array>
 80012e8:	60f8      	str	r0, [r7, #12]
	filter_num = assign_filter_array_legnth(NODE_ID);
 80012ea:	6838      	ldr	r0, [r7, #0]
 80012ec:	f7ff ff34 	bl	8001158 <assign_filter_array_legnth>
 80012f0:	4603      	mov	r3, r0
 80012f2:	72fb      	strb	r3, [r7, #11]
	FEB_CAN_Filter_Config(hcan, filter_array, filter_num, FIFO_Assignment);
 80012f4:	7dfb      	ldrb	r3, [r7, #23]
 80012f6:	7afa      	ldrb	r2, [r7, #11]
 80012f8:	68f9      	ldr	r1, [r7, #12]
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ff90 	bl	8001220 <FEB_CAN_Filter_Config>

	// Start CAN peripheral
	if (HAL_CAN_Start(hcan) != HAL_OK) {
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f001 ff17 	bl	8003134 <HAL_CAN_Start>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <FEB_CAN_Init+0x70>
	  Error_Handler();
 800130c:	f000 fd1e 	bl	8001d4c <Error_Handler>
	}

	// Activate receive interrupt
	HAL_CAN_ActivateNotification(hcan, FIFO_Interrupt);
 8001310:	6939      	ldr	r1, [r7, #16]
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f002 f974 	bl	8003600 <HAL_CAN_ActivateNotification>

}
 8001318:	bf00      	nop
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40006400 	.word	0x40006400
 8001324:	40006800 	.word	0x40006800
 8001328:	20000218 	.word	0x20000218

0800132c <FEB_CAN_Receive>:

void FEB_CAN_Receive(CAN_HandleTypeDef *hcan, uint32_t CAN_RX_FIFO) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO, &RxHeader, RxData) != HAL_OK) {
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <FEB_CAN_Receive+0x30>)
 8001338:	4a09      	ldr	r2, [pc, #36]	; (8001360 <FEB_CAN_Receive+0x34>)
 800133a:	6839      	ldr	r1, [r7, #0]
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f002 f84d 	bl	80033dc <HAL_CAN_GetRxMessage>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <FEB_CAN_Receive+0x20>
		Error_Handler();
 8001348:	f000 fd00 	bl	8001d4c <Error_Handler>
	}
	store_msg(&RxHeader, RxData);
 800134c:	4903      	ldr	r1, [pc, #12]	; (800135c <FEB_CAN_Receive+0x30>)
 800134e:	4804      	ldr	r0, [pc, #16]	; (8001360 <FEB_CAN_Receive+0x34>)
 8001350:	f7ff ff28 	bl	80011a4 <store_msg>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000254 	.word	0x20000254
 8001360:	20000230 	.word	0x20000230

08001364 <FEB_CAN_Transmit>:

void FEB_CAN_Transmit(CAN_HandleTypeDef* hcan, AddressIdType Msg_ID, void* pData, uint8_t size) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
 8001370:	70fb      	strb	r3, [r7, #3]
	// Copy data to Tx buffer
	memcpy(TxData, pData, size);
 8001372:	78fb      	ldrb	r3, [r7, #3]
 8001374:	461a      	mov	r2, r3
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	480f      	ldr	r0, [pc, #60]	; (80013b8 <FEB_CAN_Transmit+0x54>)
 800137a:	f004 fb3d 	bl	80059f8 <memcpy>

	// Update Tx header
	TxHeader.StdId = Msg_ID;
 800137e:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <FEB_CAN_Transmit+0x58>)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	6013      	str	r3, [r2, #0]
	TxHeader.DLC = size;
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	4a0d      	ldr	r2, [pc, #52]	; (80013bc <FEB_CAN_Transmit+0x58>)
 8001388:	6113      	str	r3, [r2, #16]

	// Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(hcan) == 0) {}
 800138a:	bf00      	nop
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f001 fff0 	bl	8003372 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f9      	beq.n	800138c <FEB_CAN_Transmit+0x28>

	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <FEB_CAN_Transmit+0x5c>)
 800139a:	4a07      	ldr	r2, [pc, #28]	; (80013b8 <FEB_CAN_Transmit+0x54>)
 800139c:	4907      	ldr	r1, [pc, #28]	; (80013bc <FEB_CAN_Transmit+0x58>)
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f001 ff0c 	bl	80031bc <HAL_CAN_AddTxMessage>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <FEB_CAN_Transmit+0x4a>
	{
	  Error_Handler();
 80013aa:	f000 fccf 	bl	8001d4c <Error_Handler>
	}
}
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000024c 	.word	0x2000024c
 80013bc:	20000218 	.word	0x20000218
 80013c0:	2000025c 	.word	0x2000025c

080013c4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	FEB_CAN_Receive(hcan, CAN_RX_FIFO0);
 80013cc:	2100      	movs	r1, #0
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ffac 	bl	800132c <FEB_CAN_Receive>
	CAN_Flag = 1;
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000260 	.word	0x20000260

080013e8 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	FEB_CAN_Receive(hcan, CAN_RX_FIFO1);
 80013f0:	2101      	movs	r1, #1
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ff9a 	bl	800132c <FEB_CAN_Receive>
	CAN_Flag = 1;
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	701a      	strb	r2, [r3, #0]
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000260 	.word	0x20000260
 800140c:	00000000 	.word	0x00000000

08001410 <FEB_Normalized_Acc_Pedals>:

//float getPedal(uint32_t variable){
//	return (float)variable*3.3/4096;
//}

float FEB_Normalized_Acc_Pedals(){
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
	// raw ADC readings of the two acc pedal sensors
//	uint16_t acc_pedal_1 = buffer[2];
//	uint16_t acc_pedal_2 = buffer[3];

	uint16_t acc_pedal_1 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8001416:	2102      	movs	r1, #2
 8001418:	487b      	ldr	r0, [pc, #492]	; (8001608 <FEB_Normalized_Acc_Pedals+0x1f8>)
 800141a:	f001 fadd 	bl	80029d8 <HAL_ADCEx_InjectedGetValue>
 800141e:	4603      	mov	r3, r0
 8001420:	81fb      	strh	r3, [r7, #14]
	uint16_t acc_pedal_2 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8001422:	2103      	movs	r1, #3
 8001424:	4878      	ldr	r0, [pc, #480]	; (8001608 <FEB_Normalized_Acc_Pedals+0x1f8>)
 8001426:	f001 fad7 	bl	80029d8 <HAL_ADCEx_InjectedGetValue>
 800142a:	4603      	mov	r3, r0
 800142c:	81bb      	strh	r3, [r7, #12]
//		buf_len = sprintf(buf, "acc1:%d acc2:%d\n", acc_pedal_1, acc_pedal_2);
//		HAL_UART_Transmit(&huart2,(uint8_t *)buf, buf_len, HAL_MAX_DELAY);


	// check implausibility for shorting
	if (acc_pedal_1 < Sensor_Min || acc_pedal_1 > Sensor_Max
 800142e:	f240 1299 	movw	r2, #409	; 0x199
 8001432:	89fb      	ldrh	r3, [r7, #14]
 8001434:	4293      	cmp	r3, r2
 8001436:	d319      	bcc.n	800146c <FEB_Normalized_Acc_Pedals+0x5c>
 8001438:	f640 6265 	movw	r2, #3685	; 0xe65
 800143c:	89fb      	ldrh	r3, [r7, #14]
 800143e:	4293      	cmp	r3, r2
 8001440:	d814      	bhi.n	800146c <FEB_Normalized_Acc_Pedals+0x5c>
			|| acc_pedal_2 < Sensor_Min || acc_pedal_2 > Sensor_Max
 8001442:	f240 1299 	movw	r2, #409	; 0x199
 8001446:	89bb      	ldrh	r3, [r7, #12]
 8001448:	4293      	cmp	r3, r2
 800144a:	d30f      	bcc.n	800146c <FEB_Normalized_Acc_Pedals+0x5c>
 800144c:	f640 6265 	movw	r2, #3685	; 0xe65
 8001450:	89bb      	ldrh	r3, [r7, #12]
 8001452:	4293      	cmp	r3, r2
 8001454:	d80a      	bhi.n	800146c <FEB_Normalized_Acc_Pedals+0x5c>
			|| abs(acc_pedal_1 - acc_pedal_2) < 100) {
 8001456:	89fa      	ldrh	r2, [r7, #14]
 8001458:	89bb      	ldrh	r3, [r7, #12]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8001460:	db0a      	blt.n	8001478 <FEB_Normalized_Acc_Pedals+0x68>
 8001462:	89fa      	ldrh	r2, [r7, #14]
 8001464:	89bb      	ldrh	r3, [r7, #12]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b63      	cmp	r3, #99	; 0x63
 800146a:	dc05      	bgt.n	8001478 <FEB_Normalized_Acc_Pedals+0x68>
		isImpl = true;
 800146c:	4b67      	ldr	r3, [pc, #412]	; (800160c <FEB_Normalized_Acc_Pedals+0x1fc>)
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]
		return 0.0;
 8001472:	f04f 0300 	mov.w	r3, #0
 8001476:	e0a9      	b.n	80015cc <FEB_Normalized_Acc_Pedals+0x1bc>
	}

	//convert to % travel
	// sensor 1 has positive slope
	float ped1_normalized = (acc_pedal_1 - ACC_PEDAL_1_START)/ (ACC_PEDAL_1_END - ACC_PEDAL_1_START);
 8001478:	89fb      	ldrh	r3, [r7, #14]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f872 	bl	8000564 <__aeabi_i2d>
 8001480:	a357      	add	r3, pc, #348	; (adr r3, 80015e0 <FEB_Normalized_Acc_Pedals+0x1d0>)
 8001482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001486:	f7fe ff1f 	bl	80002c8 <__aeabi_dsub>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4610      	mov	r0, r2
 8001490:	4619      	mov	r1, r3
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	4b5e      	ldr	r3, [pc, #376]	; (8001610 <FEB_Normalized_Acc_Pedals+0x200>)
 8001498:	f7ff f9f8 	bl	800088c <__aeabi_ddiv>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	f7ff fba0 	bl	8000be8 <__aeabi_d2f>
 80014a8:	4603      	mov	r3, r0
 80014aa:	60bb      	str	r3, [r7, #8]
	// sensor 2 has negative slope
	float ped2_normalized = (acc_pedal_2 - ACC_PEDAL_2_START) / (ACC_PEDAL_2_END - ACC_PEDAL_2_START);
 80014ac:	89bb      	ldrh	r3, [r7, #12]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f858 	bl	8000564 <__aeabi_i2d>
 80014b4:	a34c      	add	r3, pc, #304	; (adr r3, 80015e8 <FEB_Normalized_Acc_Pedals+0x1d8>)
 80014b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ba:	f7fe ff05 	bl	80002c8 <__aeabi_dsub>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4610      	mov	r0, r2
 80014c4:	4619      	mov	r1, r3
 80014c6:	a34a      	add	r3, pc, #296	; (adr r3, 80015f0 <FEB_Normalized_Acc_Pedals+0x1e0>)
 80014c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014cc:	f7ff f9de 	bl	800088c <__aeabi_ddiv>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f7ff fb86 	bl	8000be8 <__aeabi_d2f>
 80014dc:	4603      	mov	r3, r0
 80014de:	607b      	str	r3, [r7, #4]

	// sensor measurements mismatch by more than 10%
	if(abs(ped1_normalized - ped2_normalized) > 0.1 ){
 80014e0:	ed97 7a02 	vldr	s14, [r7, #8]
 80014e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014f0:	ee17 3a90 	vmov	r3, s15
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	bfb8      	it	lt
 80014f8:	425b      	neglt	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	dd05      	ble.n	800150a <FEB_Normalized_Acc_Pedals+0xfa>
		isImpl = true;
 80014fe:	4b43      	ldr	r3, [pc, #268]	; (800160c <FEB_Normalized_Acc_Pedals+0x1fc>)
 8001500:	2201      	movs	r2, #1
 8001502:	701a      	strb	r2, [r3, #0]
		return 0.0;
 8001504:	f04f 0300 	mov.w	r3, #0
 8001508:	e060      	b.n	80015cc <FEB_Normalized_Acc_Pedals+0x1bc>
	}

	float final_normalized = 0.5*(ped1_normalized + ped2_normalized);
 800150a:	ed97 7a02 	vldr	s14, [r7, #8]
 800150e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001516:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800151a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800151e:	edc7 7a00 	vstr	s15, [r7]

	// Implausiblity check if both pedals are stepped
	if (normalized_brake > 0.1 && normalized_acc > 0.25) {
 8001522:	4b3c      	ldr	r3, [pc, #240]	; (8001614 <FEB_Normalized_Acc_Pedals+0x204>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f82e 	bl	8000588 <__aeabi_f2d>
 800152c:	a332      	add	r3, pc, #200	; (adr r3, 80015f8 <FEB_Normalized_Acc_Pedals+0x1e8>)
 800152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001532:	f7ff fb11 	bl	8000b58 <__aeabi_dcmpgt>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d00c      	beq.n	8001556 <FEB_Normalized_Acc_Pedals+0x146>
 800153c:	4b36      	ldr	r3, [pc, #216]	; (8001618 <FEB_Normalized_Acc_Pedals+0x208>)
 800153e:	edd3 7a00 	vldr	s15, [r3]
 8001542:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001546:	eef4 7ac7 	vcmpe.f32	s15, s14
 800154a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154e:	dd02      	ble.n	8001556 <FEB_Normalized_Acc_Pedals+0x146>
		isImpl = true;
 8001550:	4b2e      	ldr	r3, [pc, #184]	; (800160c <FEB_Normalized_Acc_Pedals+0x1fc>)
 8001552:	2201      	movs	r2, #1
 8001554:	701a      	strb	r2, [r3, #0]
	}

	// recover from implausibility if acc pedal is not 5% less
	if (final_normalized < 0.05 && isImpl) {
 8001556:	6838      	ldr	r0, [r7, #0]
 8001558:	f7ff f816 	bl	8000588 <__aeabi_f2d>
 800155c:	a328      	add	r3, pc, #160	; (adr r3, 8001600 <FEB_Normalized_Acc_Pedals+0x1f0>)
 800155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001562:	f7ff fadb 	bl	8000b1c <__aeabi_dcmplt>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d006      	beq.n	800157a <FEB_Normalized_Acc_Pedals+0x16a>
 800156c:	4b27      	ldr	r3, [pc, #156]	; (800160c <FEB_Normalized_Acc_Pedals+0x1fc>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <FEB_Normalized_Acc_Pedals+0x16a>
		isImpl = false;
 8001574:	4b25      	ldr	r3, [pc, #148]	; (800160c <FEB_Normalized_Acc_Pedals+0x1fc>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
	}

	if (!isImpl) {
 800157a:	4b24      	ldr	r3, [pc, #144]	; (800160c <FEB_Normalized_Acc_Pedals+0x1fc>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	f083 0301 	eor.w	r3, r3, #1
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	d01f      	beq.n	80015c8 <FEB_Normalized_Acc_Pedals+0x1b8>
		final_normalized = final_normalized > 1 ? 1 : final_normalized;
 8001588:	edd7 7a00 	vldr	s15, [r7]
 800158c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001590:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001598:	dd02      	ble.n	80015a0 <FEB_Normalized_Acc_Pedals+0x190>
 800159a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800159e:	e000      	b.n	80015a2 <FEB_Normalized_Acc_Pedals+0x192>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	603b      	str	r3, [r7, #0]
		final_normalized = final_normalized < 0.05 ? 0 : final_normalized;
 80015a4:	6838      	ldr	r0, [r7, #0]
 80015a6:	f7fe ffef 	bl	8000588 <__aeabi_f2d>
 80015aa:	a315      	add	r3, pc, #84	; (adr r3, 8001600 <FEB_Normalized_Acc_Pedals+0x1f0>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	f7ff fab4 	bl	8000b1c <__aeabi_dcmplt>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d002      	beq.n	80015c0 <FEB_Normalized_Acc_Pedals+0x1b0>
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	e000      	b.n	80015c2 <FEB_Normalized_Acc_Pedals+0x1b2>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	603b      	str	r3, [r7, #0]
		return final_normalized;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	e001      	b.n	80015cc <FEB_Normalized_Acc_Pedals+0x1bc>
	} else {
		return 0.0;
 80015c8:	f04f 0300 	mov.w	r3, #0
	}
}
 80015cc:	ee07 3a90 	vmov	s15, r3
 80015d0:	eeb0 0a67 	vmov.f32	s0, s15
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	f3af 8000 	nop.w
 80015e0:	00000000 	.word	0x00000000
 80015e4:	408a6800 	.word	0x408a6800
 80015e8:	00000000 	.word	0x00000000
 80015ec:	40a96400 	.word	0x40a96400
 80015f0:	00000000 	.word	0x00000000
 80015f4:	c06f4000 	.word	0xc06f4000
 80015f8:	9999999a 	.word	0x9999999a
 80015fc:	3fb99999 	.word	0x3fb99999
 8001600:	9999999a 	.word	0x9999999a
 8001604:	3fa99999 	.word	0x3fa99999
 8001608:	20000264 	.word	0x20000264
 800160c:	20000360 	.word	0x20000360
 8001610:	406f4000 	.word	0x406f4000
 8001614:	2000036c 	.word	0x2000036c
 8001618:	20000368 	.word	0x20000368
 800161c:	00000000 	.word	0x00000000

08001620 <FEB_Normalized_Brake_Pedals>:

float FEB_Normalized_Brake_Pedals(){
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
	uint16_t brake_pedal_1 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8001626:	2101      	movs	r1, #1
 8001628:	4829      	ldr	r0, [pc, #164]	; (80016d0 <FEB_Normalized_Brake_Pedals+0xb0>)
 800162a:	f001 f9d5 	bl	80029d8 <HAL_ADCEx_InjectedGetValue>
 800162e:	4603      	mov	r3, r0
 8001630:	80fb      	strh	r3, [r7, #6]
//	char buf[128];
//		uint8_t buf_len;
//		buf_len = sprintf(buf, "brake%d\n", brake_pedal_1);
//		HAL_UART_Transmit(&huart2,(uint8_t *)buf, buf_len, HAL_MAX_DELAY);
	float final_normalized = (brake_pedal_1 - BRAKE_PEDAL_1_START)/ (BRAKE_PEDAL_1_END - BRAKE_PEDAL_1_START);
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff95 	bl	8000564 <__aeabi_i2d>
 800163a:	a31f      	add	r3, pc, #124	; (adr r3, 80016b8 <FEB_Normalized_Brake_Pedals+0x98>)
 800163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001640:	f7fe fe42 	bl	80002c8 <__aeabi_dsub>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4610      	mov	r0, r2
 800164a:	4619      	mov	r1, r3
 800164c:	a31c      	add	r3, pc, #112	; (adr r3, 80016c0 <FEB_Normalized_Brake_Pedals+0xa0>)
 800164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001652:	f7ff f91b 	bl	800088c <__aeabi_ddiv>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4610      	mov	r0, r2
 800165c:	4619      	mov	r1, r3
 800165e:	f7ff fac3 	bl	8000be8 <__aeabi_d2f>
 8001662:	4603      	mov	r3, r0
 8001664:	603b      	str	r3, [r7, #0]
	final_normalized = final_normalized > 1 ? 1 : final_normalized;
 8001666:	edd7 7a00 	vldr	s15, [r7]
 800166a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800166e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001676:	dd02      	ble.n	800167e <FEB_Normalized_Brake_Pedals+0x5e>
 8001678:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800167c:	e000      	b.n	8001680 <FEB_Normalized_Brake_Pedals+0x60>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	603b      	str	r3, [r7, #0]
	final_normalized = final_normalized < 0.05 ? 0 : final_normalized;
 8001682:	6838      	ldr	r0, [r7, #0]
 8001684:	f7fe ff80 	bl	8000588 <__aeabi_f2d>
 8001688:	a30f      	add	r3, pc, #60	; (adr r3, 80016c8 <FEB_Normalized_Brake_Pedals+0xa8>)
 800168a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168e:	f7ff fa45 	bl	8000b1c <__aeabi_dcmplt>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <FEB_Normalized_Brake_Pedals+0x7e>
 8001698:	f04f 0300 	mov.w	r3, #0
 800169c:	e000      	b.n	80016a0 <FEB_Normalized_Brake_Pedals+0x80>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	603b      	str	r3, [r7, #0]

	return final_normalized;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	ee07 3a90 	vmov	s15, r3
}
 80016a8:	eeb0 0a67 	vmov.f32	s0, s15
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	f3af 8000 	nop.w
 80016b8:	00000000 	.word	0x00000000
 80016bc:	40759000 	.word	0x40759000
 80016c0:	00000000 	.word	0x00000000
 80016c4:	40636000 	.word	0x40636000
 80016c8:	9999999a 	.word	0x9999999a
 80016cc:	3fa99999 	.word	0x3fa99999
 80016d0:	20000264 	.word	0x20000264

080016d4 <FEB_APPS_sendBrake>:


void FEB_APPS_sendBrake(){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	FEB_CAN_Transmit(&hcan1,APPS_BRAKE_PEDAL,&normalized_brake,sizeof(float));
 80016d8:	2304      	movs	r3, #4
 80016da:	4a03      	ldr	r2, [pc, #12]	; (80016e8 <FEB_APPS_sendBrake+0x14>)
 80016dc:	2132      	movs	r1, #50	; 0x32
 80016de:	4803      	ldr	r0, [pc, #12]	; (80016ec <FEB_APPS_sendBrake+0x18>)
 80016e0:	f7ff fe40 	bl	8001364 <FEB_CAN_Transmit>
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	2000036c 	.word	0x2000036c
 80016ec:	200002ac 	.word	0x200002ac

080016f0 <FEB_RMS_updateTorque>:

void FEB_RMS_updateTorque() {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
  uint8_t message_data[8] = {RMSControl.torque & 0xFF, RMSControl.torque >> 8, 0, 0, 0, RMSControl.enabled, 0, 0};
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <FEB_RMS_updateTorque+0x48>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	703b      	strb	r3, [r7, #0]
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <FEB_RMS_updateTorque+0x48>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	0a1b      	lsrs	r3, r3, #8
 8001704:	b29b      	uxth	r3, r3
 8001706:	b2db      	uxtb	r3, r3
 8001708:	707b      	strb	r3, [r7, #1]
 800170a:	2300      	movs	r3, #0
 800170c:	70bb      	strb	r3, [r7, #2]
 800170e:	2300      	movs	r3, #0
 8001710:	70fb      	strb	r3, [r7, #3]
 8001712:	2300      	movs	r3, #0
 8001714:	713b      	strb	r3, [r7, #4]
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <FEB_RMS_updateTorque+0x48>)
 8001718:	789b      	ldrb	r3, [r3, #2]
 800171a:	717b      	strb	r3, [r7, #5]
 800171c:	2300      	movs	r3, #0
 800171e:	71bb      	strb	r3, [r7, #6]
 8001720:	2300      	movs	r3, #0
 8001722:	71fb      	strb	r3, [r7, #7]
  FEB_CAN_Transmit(&hcan1, 0x0C0, message_data, 8);
 8001724:	463a      	mov	r2, r7
 8001726:	2308      	movs	r3, #8
 8001728:	21c0      	movs	r1, #192	; 0xc0
 800172a:	4804      	ldr	r0, [pc, #16]	; (800173c <FEB_RMS_updateTorque+0x4c>)
 800172c:	f7ff fe1a 	bl	8001364 <FEB_CAN_Transmit>
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000364 	.word	0x20000364
 800173c:	200002ac 	.word	0x200002ac

08001740 <FEB_RMS_setTorque>:

void FEB_RMS_setTorque(uint16_t torque) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	80fb      	strh	r3, [r7, #6]
  RMSControl.torque = torque * 10;
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	461a      	mov	r2, r3
 800174e:	0092      	lsls	r2, r2, #2
 8001750:	4413      	add	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	b29a      	uxth	r2, r3
 8001756:	4b04      	ldr	r3, [pc, #16]	; (8001768 <FEB_RMS_setTorque+0x28>)
 8001758:	801a      	strh	r2, [r3, #0]
  FEB_RMS_updateTorque();
 800175a:	f7ff ffc9 	bl	80016f0 <FEB_RMS_updateTorque>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000364 	.word	0x20000364

0800176c <FEB_RMS_enable>:

void FEB_RMS_enable() {
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  RMSControl.enabled = 1;
 8001770:	4b03      	ldr	r3, [pc, #12]	; (8001780 <FEB_RMS_enable+0x14>)
 8001772:	2201      	movs	r2, #1
 8001774:	709a      	strb	r2, [r3, #2]
  FEB_RMS_updateTorque();
 8001776:	f7ff ffbb 	bl	80016f0 <FEB_RMS_updateTorque>
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000364 	.word	0x20000364

08001784 <FEB_RMS_Init>:
void FEB_RMS_disable() {
  RMSControl.enabled = 0;
  FEB_RMS_updateTorque();
}

void FEB_RMS_Init(){
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
	// Clear fault in case inverter is powered up before disable command is sent
	uint8_t fault_clear_addr = 20;
 800178a:	2314      	movs	r3, #20
 800178c:	75fb      	strb	r3, [r7, #23]
	uint8_t fault_clear_data = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	75bb      	strb	r3, [r7, #22]
	// 0,1: param addr
	// 2: r/w cmd
	// 3: NA
	// 4,5: data
	// 6,7: NA
	uint8_t param_msg[8] = {fault_clear_addr, 0, 1, 0, fault_clear_data, 0, 0, 0};
 8001792:	7dfb      	ldrb	r3, [r7, #23]
 8001794:	733b      	strb	r3, [r7, #12]
 8001796:	2300      	movs	r3, #0
 8001798:	737b      	strb	r3, [r7, #13]
 800179a:	2301      	movs	r3, #1
 800179c:	73bb      	strb	r3, [r7, #14]
 800179e:	2300      	movs	r3, #0
 80017a0:	73fb      	strb	r3, [r7, #15]
 80017a2:	7dbb      	ldrb	r3, [r7, #22]
 80017a4:	743b      	strb	r3, [r7, #16]
 80017a6:	2300      	movs	r3, #0
 80017a8:	747b      	strb	r3, [r7, #17]
 80017aa:	2300      	movs	r3, #0
 80017ac:	74bb      	strb	r3, [r7, #18]
 80017ae:	2300      	movs	r3, #0
 80017b0:	74fb      	strb	r3, [r7, #19]
	FEB_CAN_Transmit(&hcan1, 0x0C1, param_msg, 8);
 80017b2:	f107 020c 	add.w	r2, r7, #12
 80017b6:	2308      	movs	r3, #8
 80017b8:	21c1      	movs	r1, #193	; 0xc1
 80017ba:	4816      	ldr	r0, [pc, #88]	; (8001814 <FEB_RMS_Init+0x90>)
 80017bc:	f7ff fdd2 	bl	8001364 <FEB_CAN_Transmit>

	// send disable command to remove lockout
	uint8_t message_data[8] = {0,0,0,0,0,0,0};
 80017c0:	4a15      	ldr	r2, [pc, #84]	; (8001818 <FEB_RMS_Init+0x94>)
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017c8:	e883 0003 	stmia.w	r3, {r0, r1}
	normalized_acc = 0;
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <FEB_RMS_Init+0x98>)
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
	normalized_brake = 0;
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <FEB_RMS_Init+0x9c>)
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
	FEB_CAN_Transmit(&hcan1, 0x0C0, message_data, 8);
 80017dc:	1d3a      	adds	r2, r7, #4
 80017de:	2308      	movs	r3, #8
 80017e0:	21c0      	movs	r1, #192	; 0xc0
 80017e2:	480c      	ldr	r0, [pc, #48]	; (8001814 <FEB_RMS_Init+0x90>)
 80017e4:	f7ff fdbe 	bl	8001364 <FEB_CAN_Transmit>
	FEB_RMS_enable();
 80017e8:	f7ff ffc0 	bl	800176c <FEB_RMS_enable>

	// Select CAN msg to broadcast
	uint8_t param_addr = 148;
 80017ec:	2394      	movs	r3, #148	; 0x94
 80017ee:	757b      	strb	r3, [r7, #21]
	uint8_t CAN_active_msg = 0b00100000; //only motor position is broadcasted by the inverter
 80017f0:	2320      	movs	r3, #32
 80017f2:	753b      	strb	r3, [r7, #20]
	param_msg[0] = param_addr;
 80017f4:	7d7b      	ldrb	r3, [r7, #21]
 80017f6:	733b      	strb	r3, [r7, #12]
	param_msg[4] = CAN_active_msg;
 80017f8:	7d3b      	ldrb	r3, [r7, #20]
 80017fa:	743b      	strb	r3, [r7, #16]
	FEB_CAN_Transmit(&hcan1, 0x0C1, param_msg, 8);
 80017fc:	f107 020c 	add.w	r2, r7, #12
 8001800:	2308      	movs	r3, #8
 8001802:	21c1      	movs	r1, #193	; 0xc1
 8001804:	4803      	ldr	r0, [pc, #12]	; (8001814 <FEB_RMS_Init+0x90>)
 8001806:	f7ff fdad 	bl	8001364 <FEB_CAN_Transmit>
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200002ac 	.word	0x200002ac
 8001818:	080087e8 	.word	0x080087e8
 800181c:	20000368 	.word	0x20000368
 8001820:	2000036c 	.word	0x2000036c

08001824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001828:	b0a6      	sub	sp, #152	; 0x98
 800182a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800182c:	f000 fd02 	bl	8002234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001830:	f000 f884 	bl	800193c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001834:	f000 fa30 	bl	8001c98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001838:	f000 fa04 	bl	8001c44 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 800183c:	f000 f97e 	bl	8001b3c <MX_CAN1_Init>
  MX_ADC1_Init();
 8001840:	f000 f8e8 	bl	8001a14 <MX_ADC1_Init>
  MX_TIM5_Init();
 8001844:	f000 f9b0 	bl	8001ba8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
//  HAL_ADC_Start_DMA(&hadc1,buffer,6);
  HAL_ADCEx_InjectedStart(&hadc1);
 8001848:	4832      	ldr	r0, [pc, #200]	; (8001914 <main+0xf0>)
 800184a:	f000 fffb 	bl	8002844 <HAL_ADCEx_InjectedStart>
  HAL_TIM_Base_Start(&htim5);
 800184e:	4832      	ldr	r0, [pc, #200]	; (8001918 <main+0xf4>)
 8001850:	f003 fa00 	bl	8004c54 <HAL_TIM_Base_Start>


  char buf[128];
  uint8_t buf_len;

  FEB_CAN_Init(&hcan1, APPS_ID); // The transceiver must be connected otherwise you get sent into an infinite loop
 8001854:	2103      	movs	r1, #3
 8001856:	4831      	ldr	r0, [pc, #196]	; (800191c <main+0xf8>)
 8001858:	f7ff fd22 	bl	80012a0 <FEB_CAN_Init>
  FEB_RMS_Init();
 800185c:	f7ff ff92 	bl	8001784 <FEB_RMS_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //ready to drive
	  if (SW_MESSAGE.ready_to_drive == 1) {
 8001860:	4b2f      	ldr	r3, [pc, #188]	; (8001920 <main+0xfc>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d107      	bne.n	8001878 <main+0x54>
		  normalized_acc = FEB_Normalized_Acc_Pedals();
 8001868:	f7ff fdd2 	bl	8001410 <FEB_Normalized_Acc_Pedals>
 800186c:	eef0 7a40 	vmov.f32	s15, s0
 8001870:	4b2c      	ldr	r3, [pc, #176]	; (8001924 <main+0x100>)
 8001872:	edc3 7a00 	vstr	s15, [r3]
 8001876:	e003      	b.n	8001880 <main+0x5c>
	  } else {
		  normalized_acc = 0.0;
 8001878:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <main+0x100>)
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
	  }

	  normalized_brake = FEB_Normalized_Brake_Pedals();
 8001880:	f7ff fece 	bl	8001620 <FEB_Normalized_Brake_Pedals>
 8001884:	eef0 7a40 	vmov.f32	s15, s0
 8001888:	4b27      	ldr	r3, [pc, #156]	; (8001928 <main+0x104>)
 800188a:	edc3 7a00 	vstr	s15, [r3]

	  uint16_t torque = normalized_acc * 40;
 800188e:	4b25      	ldr	r3, [pc, #148]	; (8001924 <main+0x100>)
 8001890:	edd3 7a00 	vldr	s15, [r3]
 8001894:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800192c <main+0x108>
 8001898:	ee67 7a87 	vmul.f32	s15, s15, s14
 800189c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018a0:	ee17 3a90 	vmov	r3, s15
 80018a4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86


	  //Transmit CAN messages to other boards

	  FEB_RMS_setTorque(torque);
 80018a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff47 	bl	8001740 <FEB_RMS_setTorque>
	  FEB_APPS_sendBrake();
 80018b2:	f7ff ff0f 	bl	80016d4 <FEB_APPS_sendBrake>

	  buf_len = sprintf(buf, "rtd:%d, impl:%d acc: %.3f brake: %.3f\n", SW_MESSAGE.ready_to_drive, isImpl, normalized_acc, normalized_brake);
 80018b6:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <main+0xfc>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	461e      	mov	r6, r3
 80018bc:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <main+0x10c>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4698      	mov	r8, r3
 80018c2:	4b18      	ldr	r3, [pc, #96]	; (8001924 <main+0x100>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe5e 	bl	8000588 <__aeabi_f2d>
 80018cc:	4604      	mov	r4, r0
 80018ce:	460d      	mov	r5, r1
 80018d0:	4b15      	ldr	r3, [pc, #84]	; (8001928 <main+0x104>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fe57 	bl	8000588 <__aeabi_f2d>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	1d38      	adds	r0, r7, #4
 80018e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018e4:	e9cd 4500 	strd	r4, r5, [sp]
 80018e8:	4643      	mov	r3, r8
 80018ea:	4632      	mov	r2, r6
 80018ec:	4911      	ldr	r1, [pc, #68]	; (8001934 <main+0x110>)
 80018ee:	f004 fd03 	bl	80062f8 <siprintf>
 80018f2:	4603      	mov	r3, r0
 80018f4:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	  HAL_UART_Transmit(&huart2,(uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 80018f8:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	1d39      	adds	r1, r7, #4
 8001900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001904:	480c      	ldr	r0, [pc, #48]	; (8001938 <main+0x114>)
 8001906:	f003 fcd8 	bl	80052ba <HAL_UART_Transmit>

	  HAL_Delay(SLEEP_TIME);
 800190a:	200a      	movs	r0, #10
 800190c:	f000 fd04 	bl	8002318 <HAL_Delay>
  {
 8001910:	e7a6      	b.n	8001860 <main+0x3c>
 8001912:	bf00      	nop
 8001914:	20000264 	.word	0x20000264
 8001918:	200002d4 	.word	0x200002d4
 800191c:	200002ac 	.word	0x200002ac
 8001920:	20000204 	.word	0x20000204
 8001924:	20000368 	.word	0x20000368
 8001928:	2000036c 	.word	0x2000036c
 800192c:	42200000 	.word	0x42200000
 8001930:	20000360 	.word	0x20000360
 8001934:	080087f0 	.word	0x080087f0
 8001938:	2000031c 	.word	0x2000031c

0800193c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b094      	sub	sp, #80	; 0x50
 8001940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001942:	f107 031c 	add.w	r3, r7, #28
 8001946:	2234      	movs	r2, #52	; 0x34
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f004 f862 	bl	8005a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001950:	f107 0308 	add.w	r3, r7, #8
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001960:	2300      	movs	r3, #0
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <SystemClock_Config+0xd0>)
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	4a28      	ldr	r2, [pc, #160]	; (8001a0c <SystemClock_Config+0xd0>)
 800196a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196e:	6413      	str	r3, [r2, #64]	; 0x40
 8001970:	4b26      	ldr	r3, [pc, #152]	; (8001a0c <SystemClock_Config+0xd0>)
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800197c:	2300      	movs	r3, #0
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	4b23      	ldr	r3, [pc, #140]	; (8001a10 <SystemClock_Config+0xd4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a22      	ldr	r2, [pc, #136]	; (8001a10 <SystemClock_Config+0xd4>)
 8001986:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <SystemClock_Config+0xd4>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001994:	603b      	str	r3, [r7, #0]
 8001996:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001998:	2301      	movs	r3, #1
 800199a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800199c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019a2:	2302      	movs	r3, #2
 80019a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019ac:	2304      	movs	r3, #4
 80019ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 80019b0:	23a0      	movs	r3, #160	; 0xa0
 80019b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019b4:	2302      	movs	r3, #2
 80019b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80019b8:	2302      	movs	r3, #2
 80019ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019bc:	2302      	movs	r3, #2
 80019be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	4618      	mov	r0, r3
 80019c6:	f002 fe57 	bl	8004678 <HAL_RCC_OscConfig>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80019d0:	f000 f9bc 	bl	8001d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019d4:	230f      	movs	r3, #15
 80019d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d8:	2302      	movs	r3, #2
 80019da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019dc:	2300      	movs	r3, #0
 80019de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80019e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019ec:	f107 0308 	add.w	r3, r7, #8
 80019f0:	2105      	movs	r1, #5
 80019f2:	4618      	mov	r0, r3
 80019f4:	f002 faf6 	bl	8003fe4 <HAL_RCC_ClockConfig>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80019fe:	f000 f9a5 	bl	8001d4c <Error_Handler>
  }
}
 8001a02:	bf00      	nop
 8001a04:	3750      	adds	r7, #80	; 0x50
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40007000 	.word	0x40007000

08001a14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08c      	sub	sp, #48	; 0x30
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a1a:	f107 0320 	add.w	r3, r7, #32
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001a28:	463b      	mov	r3, r7
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f003 fff0 	bl	8005a14 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a34:	4b3e      	ldr	r3, [pc, #248]	; (8001b30 <MX_ADC1_Init+0x11c>)
 8001a36:	4a3f      	ldr	r2, [pc, #252]	; (8001b34 <MX_ADC1_Init+0x120>)
 8001a38:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a3a:	4b3d      	ldr	r3, [pc, #244]	; (8001b30 <MX_ADC1_Init+0x11c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a40:	4b3b      	ldr	r3, [pc, #236]	; (8001b30 <MX_ADC1_Init+0x11c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001a46:	4b3a      	ldr	r3, [pc, #232]	; (8001b30 <MX_ADC1_Init+0x11c>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a4c:	4b38      	ldr	r3, [pc, #224]	; (8001b30 <MX_ADC1_Init+0x11c>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a52:	4b37      	ldr	r3, [pc, #220]	; (8001b30 <MX_ADC1_Init+0x11c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a5a:	4b35      	ldr	r3, [pc, #212]	; (8001b30 <MX_ADC1_Init+0x11c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a60:	4b33      	ldr	r3, [pc, #204]	; (8001b30 <MX_ADC1_Init+0x11c>)
 8001a62:	4a35      	ldr	r2, [pc, #212]	; (8001b38 <MX_ADC1_Init+0x124>)
 8001a64:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a66:	4b32      	ldr	r3, [pc, #200]	; (8001b30 <MX_ADC1_Init+0x11c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a6c:	4b30      	ldr	r3, [pc, #192]	; (8001b30 <MX_ADC1_Init+0x11c>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a72:	4b2f      	ldr	r3, [pc, #188]	; (8001b30 <MX_ADC1_Init+0x11c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001a7a:	4b2d      	ldr	r3, [pc, #180]	; (8001b30 <MX_ADC1_Init+0x11c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a80:	482b      	ldr	r0, [pc, #172]	; (8001b30 <MX_ADC1_Init+0x11c>)
 8001a82:	f000 fc6d 	bl	8002360 <HAL_ADC_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8001a8c:	f000 f95e 	bl	8001d4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a90:	2301      	movs	r3, #1
 8001a92:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8001a94:	2301      	movs	r3, #1
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001a98:	2304      	movs	r3, #4
 8001a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a9c:	f107 0320 	add.w	r3, r7, #32
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4823      	ldr	r0, [pc, #140]	; (8001b30 <MX_ADC1_Init+0x11c>)
 8001aa4:	f000 fca0 	bl	80023e8 <HAL_ADC_ConfigChannel>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8001aae:	f000 f94d 	bl	8001d4c <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8001aba:	2303      	movs	r3, #3
 8001abc:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001abe:	2304      	movs	r3, #4
 8001ac0:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8001ac2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ac6:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T5_TRGO;
 8001ac8:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
 8001acc:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001ada:	463b      	mov	r3, r7
 8001adc:	4619      	mov	r1, r3
 8001ade:	4814      	ldr	r0, [pc, #80]	; (8001b30 <MX_ADC1_Init+0x11c>)
 8001ae0:	f000 ffb2 	bl	8002a48 <HAL_ADCEx_InjectedConfigChannel>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8001aea:	f000 f92f 	bl	8001d4c <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8001aee:	2304      	movs	r3, #4
 8001af0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8001af2:	2302      	movs	r3, #2
 8001af4:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001af6:	463b      	mov	r3, r7
 8001af8:	4619      	mov	r1, r3
 8001afa:	480d      	ldr	r0, [pc, #52]	; (8001b30 <MX_ADC1_Init+0x11c>)
 8001afc:	f000 ffa4 	bl	8002a48 <HAL_ADCEx_InjectedConfigChannel>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8001b06:	f000 f921 	bl	8001d4c <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8001b0a:	2305      	movs	r3, #5
 8001b0c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001b12:	463b      	mov	r3, r7
 8001b14:	4619      	mov	r1, r3
 8001b16:	4806      	ldr	r0, [pc, #24]	; (8001b30 <MX_ADC1_Init+0x11c>)
 8001b18:	f000 ff96 	bl	8002a48 <HAL_ADCEx_InjectedConfigChannel>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8001b22:	f000 f913 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	3730      	adds	r7, #48	; 0x30
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000264 	.word	0x20000264
 8001b34:	40012000 	.word	0x40012000
 8001b38:	0f000001 	.word	0x0f000001

08001b3c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001b40:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <MX_CAN1_Init+0x64>)
 8001b42:	4a18      	ldr	r2, [pc, #96]	; (8001ba4 <MX_CAN1_Init+0x68>)
 8001b44:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001b46:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <MX_CAN1_Init+0x64>)
 8001b48:	2210      	movs	r2, #16
 8001b4a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001b4c:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <MX_CAN1_Init+0x64>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b52:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <MX_CAN1_Init+0x64>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <MX_CAN1_Init+0x64>)
 8001b5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b5e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <MX_CAN1_Init+0x64>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <MX_CAN1_Init+0x64>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_CAN1_Init+0x64>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <MX_CAN1_Init+0x64>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <MX_CAN1_Init+0x64>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <MX_CAN1_Init+0x64>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <MX_CAN1_Init+0x64>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001b8a:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <MX_CAN1_Init+0x64>)
 8001b8c:	f001 f8f6 	bl	8002d7c <HAL_CAN_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001b96:	f000 f8d9 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200002ac 	.word	0x200002ac
 8001ba4:	40006400 	.word	0x40006400

08001ba8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bae:	f107 0308 	add.w	r3, r7, #8
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bbc:	463b      	mov	r3, r7
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <MX_TIM5_Init+0x94>)
 8001bc6:	4a1e      	ldr	r2, [pc, #120]	; (8001c40 <MX_TIM5_Init+0x98>)
 8001bc8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 159;
 8001bca:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <MX_TIM5_Init+0x94>)
 8001bcc:	229f      	movs	r2, #159	; 0x9f
 8001bce:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <MX_TIM5_Init+0x94>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001bd6:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <MX_TIM5_Init+0x94>)
 8001bd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bdc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bde:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <MX_TIM5_Init+0x94>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be4:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <MX_TIM5_Init+0x94>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001bea:	4814      	ldr	r0, [pc, #80]	; (8001c3c <MX_TIM5_Init+0x94>)
 8001bec:	f002 ffe2 	bl	8004bb4 <HAL_TIM_Base_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001bf6:	f000 f8a9 	bl	8001d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001c00:	f107 0308 	add.w	r3, r7, #8
 8001c04:	4619      	mov	r1, r3
 8001c06:	480d      	ldr	r0, [pc, #52]	; (8001c3c <MX_TIM5_Init+0x94>)
 8001c08:	f003 f88c 	bl	8004d24 <HAL_TIM_ConfigClockSource>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001c12:	f000 f89b 	bl	8001d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c16:	2320      	movs	r3, #32
 8001c18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c1e:	463b      	mov	r3, r7
 8001c20:	4619      	mov	r1, r3
 8001c22:	4806      	ldr	r0, [pc, #24]	; (8001c3c <MX_TIM5_Init+0x94>)
 8001c24:	f003 fa80 	bl	8005128 <HAL_TIMEx_MasterConfigSynchronization>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001c2e:	f000 f88d 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001c32:	bf00      	nop
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200002d4 	.word	0x200002d4
 8001c40:	40000c00 	.word	0x40000c00

08001c44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <MX_USART2_UART_Init+0x4c>)
 8001c4a:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <MX_USART2_UART_Init+0x50>)
 8001c4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <MX_USART2_UART_Init+0x4c>)
 8001c50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c56:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <MX_USART2_UART_Init+0x4c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <MX_USART2_UART_Init+0x4c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c62:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <MX_USART2_UART_Init+0x4c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c68:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <MX_USART2_UART_Init+0x4c>)
 8001c6a:	220c      	movs	r2, #12
 8001c6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6e:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <MX_USART2_UART_Init+0x4c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <MX_USART2_UART_Init+0x4c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c7a:	4805      	ldr	r0, [pc, #20]	; (8001c90 <MX_USART2_UART_Init+0x4c>)
 8001c7c:	f003 fad0 	bl	8005220 <HAL_UART_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c86:	f000 f861 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	2000031c 	.word	0x2000031c
 8001c94:	40004400 	.word	0x40004400

08001c98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08a      	sub	sp, #40	; 0x28
 8001c9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9e:	f107 0314 	add.w	r3, r7, #20
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <MX_GPIO_Init+0xac>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	4a23      	ldr	r2, [pc, #140]	; (8001d44 <MX_GPIO_Init+0xac>)
 8001cb8:	f043 0304 	orr.w	r3, r3, #4
 8001cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbe:	4b21      	ldr	r3, [pc, #132]	; (8001d44 <MX_GPIO_Init+0xac>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <MX_GPIO_Init+0xac>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a1c      	ldr	r2, [pc, #112]	; (8001d44 <MX_GPIO_Init+0xac>)
 8001cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <MX_GPIO_Init+0xac>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	4b16      	ldr	r3, [pc, #88]	; (8001d44 <MX_GPIO_Init+0xac>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a15      	ldr	r2, [pc, #84]	; (8001d44 <MX_GPIO_Init+0xac>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <MX_GPIO_Init+0xac>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <MX_GPIO_Init+0xac>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	4a0e      	ldr	r2, [pc, #56]	; (8001d44 <MX_GPIO_Init+0xac>)
 8001d0c:	f043 0302 	orr.w	r3, r3, #2
 8001d10:	6313      	str	r3, [r2, #48]	; 0x30
 8001d12:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <MX_GPIO_Init+0xac>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	607b      	str	r3, [r7, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d24:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d2e:	f107 0314 	add.w	r3, r7, #20
 8001d32:	4619      	mov	r1, r3
 8001d34:	4804      	ldr	r0, [pc, #16]	; (8001d48 <MX_GPIO_Init+0xb0>)
 8001d36:	f001 ffc1 	bl	8003cbc <HAL_GPIO_Init>

}
 8001d3a:	bf00      	nop
 8001d3c:	3728      	adds	r7, #40	; 0x28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40020800 	.word	0x40020800

08001d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d50:	b672      	cpsid	i
}
 8001d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <Error_Handler+0x8>
	...

08001d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	4a0f      	ldr	r2, [pc, #60]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	603b      	str	r3, [r7, #0]
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a08      	ldr	r2, [pc, #32]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d96:	2007      	movs	r0, #7
 8001d98:	f001 ff4e 	bl	8003c38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40023800 	.word	0x40023800

08001da8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08a      	sub	sp, #40	; 0x28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a17      	ldr	r2, [pc, #92]	; (8001e24 <HAL_ADC_MspInit+0x7c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d127      	bne.n	8001e1a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <HAL_ADC_MspInit+0x80>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	4a15      	ldr	r2, [pc, #84]	; (8001e28 <HAL_ADC_MspInit+0x80>)
 8001dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dda:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <HAL_ADC_MspInit+0x80>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <HAL_ADC_MspInit+0x80>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a0e      	ldr	r2, [pc, #56]	; (8001e28 <HAL_ADC_MspInit+0x80>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <HAL_ADC_MspInit+0x80>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001e02:	23f3      	movs	r3, #243	; 0xf3
 8001e04:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e06:	2303      	movs	r3, #3
 8001e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	4805      	ldr	r0, [pc, #20]	; (8001e2c <HAL_ADC_MspInit+0x84>)
 8001e16:	f001 ff51 	bl	8003cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e1a:	bf00      	nop
 8001e1c:	3728      	adds	r7, #40	; 0x28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40012000 	.word	0x40012000
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020000 	.word	0x40020000

08001e30 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	; 0x28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a21      	ldr	r2, [pc, #132]	; (8001ed4 <HAL_CAN_MspInit+0xa4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d13c      	bne.n	8001ecc <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <HAL_CAN_MspInit+0xa8>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a1f      	ldr	r2, [pc, #124]	; (8001ed8 <HAL_CAN_MspInit+0xa8>)
 8001e5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <HAL_CAN_MspInit+0xa8>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <HAL_CAN_MspInit+0xa8>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a18      	ldr	r2, [pc, #96]	; (8001ed8 <HAL_CAN_MspInit+0xa8>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <HAL_CAN_MspInit+0xa8>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e8a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001e9c:	2309      	movs	r3, #9
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	480d      	ldr	r0, [pc, #52]	; (8001edc <HAL_CAN_MspInit+0xac>)
 8001ea8:	f001 ff08 	bl	8003cbc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001eac:	2200      	movs	r2, #0
 8001eae:	2100      	movs	r1, #0
 8001eb0:	2014      	movs	r0, #20
 8001eb2:	f001 fecc 	bl	8003c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001eb6:	2014      	movs	r0, #20
 8001eb8:	f001 fee5 	bl	8003c86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	2015      	movs	r0, #21
 8001ec2:	f001 fec4 	bl	8003c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001ec6:	2015      	movs	r0, #21
 8001ec8:	f001 fedd 	bl	8003c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001ecc:	bf00      	nop
 8001ece:	3728      	adds	r7, #40	; 0x28
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40006400 	.word	0x40006400
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40020000 	.word	0x40020000

08001ee0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0b      	ldr	r2, [pc, #44]	; (8001f1c <HAL_TIM_Base_MspInit+0x3c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d10d      	bne.n	8001f0e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <HAL_TIM_Base_MspInit+0x40>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	4a09      	ldr	r2, [pc, #36]	; (8001f20 <HAL_TIM_Base_MspInit+0x40>)
 8001efc:	f043 0308 	orr.w	r3, r3, #8
 8001f00:	6413      	str	r3, [r2, #64]	; 0x40
 8001f02:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <HAL_TIM_Base_MspInit+0x40>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001f0e:	bf00      	nop
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40000c00 	.word	0x40000c00
 8001f20:	40023800 	.word	0x40023800

08001f24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a19      	ldr	r2, [pc, #100]	; (8001fa8 <HAL_UART_MspInit+0x84>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d12b      	bne.n	8001f9e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	4b18      	ldr	r3, [pc, #96]	; (8001fac <HAL_UART_MspInit+0x88>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	4a17      	ldr	r2, [pc, #92]	; (8001fac <HAL_UART_MspInit+0x88>)
 8001f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f54:	6413      	str	r3, [r2, #64]	; 0x40
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <HAL_UART_MspInit+0x88>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	4b11      	ldr	r3, [pc, #68]	; (8001fac <HAL_UART_MspInit+0x88>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a10      	ldr	r2, [pc, #64]	; (8001fac <HAL_UART_MspInit+0x88>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <HAL_UART_MspInit+0x88>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f7e:	230c      	movs	r3, #12
 8001f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f8e:	2307      	movs	r3, #7
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f92:	f107 0314 	add.w	r3, r7, #20
 8001f96:	4619      	mov	r1, r3
 8001f98:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <HAL_UART_MspInit+0x8c>)
 8001f9a:	f001 fe8f 	bl	8003cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f9e:	bf00      	nop
 8001fa0:	3728      	adds	r7, #40	; 0x28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40004400 	.word	0x40004400
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40020000 	.word	0x40020000

08001fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fb8:	e7fe      	b.n	8001fb8 <NMI_Handler+0x4>

08001fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fbe:	e7fe      	b.n	8001fbe <HardFault_Handler+0x4>

08001fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <MemManage_Handler+0x4>

08001fc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fca:	e7fe      	b.n	8001fca <BusFault_Handler+0x4>

08001fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <UsageFault_Handler+0x4>

08001fd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002000:	f000 f96a 	bl	80022d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}

08002008 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <CAN1_RX0_IRQHandler+0x10>)
 800200e:	f001 fb1d 	bl	800364c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200002ac 	.word	0x200002ac

0800201c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002020:	4802      	ldr	r0, [pc, #8]	; (800202c <CAN1_RX1_IRQHandler+0x10>)
 8002022:	f001 fb13 	bl	800364c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	200002ac 	.word	0x200002ac

08002030 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
	return 1;
 8002034:	2301      	movs	r3, #1
}
 8002036:	4618      	mov	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <_kill>:

int _kill(int pid, int sig)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800204a:	f003 fcab 	bl	80059a4 <__errno>
 800204e:	4603      	mov	r3, r0
 8002050:	2216      	movs	r2, #22
 8002052:	601a      	str	r2, [r3, #0]
	return -1;
 8002054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <_exit>:

void _exit (int status)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002068:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff ffe7 	bl	8002040 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002072:	e7fe      	b.n	8002072 <_exit+0x12>

08002074 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	e00a      	b.n	800209c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002086:	f3af 8000 	nop.w
 800208a:	4601      	mov	r1, r0
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	60ba      	str	r2, [r7, #8]
 8002092:	b2ca      	uxtb	r2, r1
 8002094:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	3301      	adds	r3, #1
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	dbf0      	blt.n	8002086 <_read+0x12>
	}

return len;
 80020a4:	687b      	ldr	r3, [r7, #4]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b086      	sub	sp, #24
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	60f8      	str	r0, [r7, #12]
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	e009      	b.n	80020d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	60ba      	str	r2, [r7, #8]
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	3301      	adds	r3, #1
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	429a      	cmp	r2, r3
 80020da:	dbf1      	blt.n	80020c0 <_write+0x12>
	}
	return len;
 80020dc:	687b      	ldr	r3, [r7, #4]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <_close>:

int _close(int file)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
	return -1;
 80020ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800210e:	605a      	str	r2, [r3, #4]
	return 0;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <_isatty>:

int _isatty(int file)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
	return 1;
 8002126:	2301      	movs	r3, #1
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
	return 0;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
	...

08002150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002158:	4a14      	ldr	r2, [pc, #80]	; (80021ac <_sbrk+0x5c>)
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <_sbrk+0x60>)
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <_sbrk+0x64>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d102      	bne.n	8002172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800216c:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <_sbrk+0x64>)
 800216e:	4a12      	ldr	r2, [pc, #72]	; (80021b8 <_sbrk+0x68>)
 8002170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002172:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <_sbrk+0x64>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	429a      	cmp	r2, r3
 800217e:	d207      	bcs.n	8002190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002180:	f003 fc10 	bl	80059a4 <__errno>
 8002184:	4603      	mov	r3, r0
 8002186:	220c      	movs	r2, #12
 8002188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800218a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800218e:	e009      	b.n	80021a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002190:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <_sbrk+0x64>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002196:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <_sbrk+0x64>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	4a05      	ldr	r2, [pc, #20]	; (80021b4 <_sbrk+0x64>)
 80021a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021a2:	68fb      	ldr	r3, [r7, #12]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20020000 	.word	0x20020000
 80021b0:	00000400 	.word	0x00000400
 80021b4:	20000370 	.word	0x20000370
 80021b8:	20000388 	.word	0x20000388

080021bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <SystemInit+0x20>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c6:	4a05      	ldr	r2, [pc, #20]	; (80021dc <SystemInit+0x20>)
 80021c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002218 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021e4:	480d      	ldr	r0, [pc, #52]	; (800221c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021e6:	490e      	ldr	r1, [pc, #56]	; (8002220 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021e8:	4a0e      	ldr	r2, [pc, #56]	; (8002224 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021ec:	e002      	b.n	80021f4 <LoopCopyDataInit>

080021ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021f2:	3304      	adds	r3, #4

080021f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f8:	d3f9      	bcc.n	80021ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021fa:	4a0b      	ldr	r2, [pc, #44]	; (8002228 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021fc:	4c0b      	ldr	r4, [pc, #44]	; (800222c <LoopFillZerobss+0x26>)
  movs r3, #0
 80021fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002200:	e001      	b.n	8002206 <LoopFillZerobss>

08002202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002204:	3204      	adds	r2, #4

08002206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002208:	d3fb      	bcc.n	8002202 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800220a:	f7ff ffd7 	bl	80021bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800220e:	f003 fbcf 	bl	80059b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002212:	f7ff fb07 	bl	8001824 <main>
  bx  lr    
 8002216:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002218:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800221c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002220:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002224:	08008c2c 	.word	0x08008c2c
  ldr r2, =_sbss
 8002228:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800222c:	20000388 	.word	0x20000388

08002230 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002230:	e7fe      	b.n	8002230 <ADC_IRQHandler>
	...

08002234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002238:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <HAL_Init+0x40>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0d      	ldr	r2, [pc, #52]	; (8002274 <HAL_Init+0x40>)
 800223e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002242:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_Init+0x40>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <HAL_Init+0x40>)
 800224a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800224e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <HAL_Init+0x40>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a07      	ldr	r2, [pc, #28]	; (8002274 <HAL_Init+0x40>)
 8002256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800225c:	2003      	movs	r0, #3
 800225e:	f001 fceb 	bl	8003c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002262:	2000      	movs	r0, #0
 8002264:	f000 f808 	bl	8002278 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002268:	f7ff fd76 	bl	8001d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40023c00 	.word	0x40023c00

08002278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002280:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_InitTick+0x54>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_InitTick+0x58>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	4619      	mov	r1, r3
 800228a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800228e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002292:	fbb2 f3f3 	udiv	r3, r2, r3
 8002296:	4618      	mov	r0, r3
 8002298:	f001 fd03 	bl	8003ca2 <HAL_SYSTICK_Config>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e00e      	b.n	80022c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b0f      	cmp	r3, #15
 80022aa:	d80a      	bhi.n	80022c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ac:	2200      	movs	r2, #0
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022b4:	f001 fccb 	bl	8003c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b8:	4a06      	ldr	r2, [pc, #24]	; (80022d4 <HAL_InitTick+0x5c>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	e000      	b.n	80022c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000000 	.word	0x20000000
 80022d0:	20000008 	.word	0x20000008
 80022d4:	20000004 	.word	0x20000004

080022d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_IncTick+0x20>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <HAL_IncTick+0x24>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4413      	add	r3, r2
 80022e8:	4a04      	ldr	r2, [pc, #16]	; (80022fc <HAL_IncTick+0x24>)
 80022ea:	6013      	str	r3, [r2, #0]
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	20000008 	.word	0x20000008
 80022fc:	20000374 	.word	0x20000374

08002300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return uwTick;
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <HAL_GetTick+0x14>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000374 	.word	0x20000374

08002318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002320:	f7ff ffee 	bl	8002300 <HAL_GetTick>
 8002324:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002330:	d005      	beq.n	800233e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002332:	4b0a      	ldr	r3, [pc, #40]	; (800235c <HAL_Delay+0x44>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4413      	add	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800233e:	bf00      	nop
 8002340:	f7ff ffde 	bl	8002300 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	429a      	cmp	r2, r3
 800234e:	d8f7      	bhi.n	8002340 <HAL_Delay+0x28>
  {
  }
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000008 	.word	0x20000008

08002360 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e033      	b.n	80023de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff fd12 	bl	8001da8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	2b00      	cmp	r3, #0
 800239c:	d118      	bne.n	80023d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023a6:	f023 0302 	bic.w	r3, r3, #2
 80023aa:	f043 0202 	orr.w	r2, r3, #2
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f94a 	bl	800264c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f023 0303 	bic.w	r3, r3, #3
 80023c6:	f043 0201 	orr.w	r2, r3, #1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40
 80023ce:	e001      	b.n	80023d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x1c>
 8002400:	2302      	movs	r3, #2
 8002402:	e113      	b.n	800262c <HAL_ADC_ConfigChannel+0x244>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b09      	cmp	r3, #9
 8002412:	d925      	bls.n	8002460 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68d9      	ldr	r1, [r3, #12]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	b29b      	uxth	r3, r3
 8002420:	461a      	mov	r2, r3
 8002422:	4613      	mov	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	4413      	add	r3, r2
 8002428:	3b1e      	subs	r3, #30
 800242a:	2207      	movs	r2, #7
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43da      	mvns	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	400a      	ands	r2, r1
 8002438:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68d9      	ldr	r1, [r3, #12]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	b29b      	uxth	r3, r3
 800244a:	4618      	mov	r0, r3
 800244c:	4603      	mov	r3, r0
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4403      	add	r3, r0
 8002452:	3b1e      	subs	r3, #30
 8002454:	409a      	lsls	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	e022      	b.n	80024a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6919      	ldr	r1, [r3, #16]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	b29b      	uxth	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	4613      	mov	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	4413      	add	r3, r2
 8002474:	2207      	movs	r2, #7
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43da      	mvns	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	400a      	ands	r2, r1
 8002482:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6919      	ldr	r1, [r3, #16]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	4618      	mov	r0, r3
 8002496:	4603      	mov	r3, r0
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4403      	add	r3, r0
 800249c:	409a      	lsls	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b06      	cmp	r3, #6
 80024ac:	d824      	bhi.n	80024f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	3b05      	subs	r3, #5
 80024c0:	221f      	movs	r2, #31
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43da      	mvns	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	400a      	ands	r2, r1
 80024ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	4618      	mov	r0, r3
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	3b05      	subs	r3, #5
 80024ea:	fa00 f203 	lsl.w	r2, r0, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	635a      	str	r2, [r3, #52]	; 0x34
 80024f6:	e04c      	b.n	8002592 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b0c      	cmp	r3, #12
 80024fe:	d824      	bhi.n	800254a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	3b23      	subs	r3, #35	; 0x23
 8002512:	221f      	movs	r2, #31
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43da      	mvns	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	400a      	ands	r2, r1
 8002520:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	b29b      	uxth	r3, r3
 800252e:	4618      	mov	r0, r3
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	3b23      	subs	r3, #35	; 0x23
 800253c:	fa00 f203 	lsl.w	r2, r0, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	631a      	str	r2, [r3, #48]	; 0x30
 8002548:	e023      	b.n	8002592 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	3b41      	subs	r3, #65	; 0x41
 800255c:	221f      	movs	r2, #31
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43da      	mvns	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	400a      	ands	r2, r1
 800256a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	b29b      	uxth	r3, r3
 8002578:	4618      	mov	r0, r3
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	3b41      	subs	r3, #65	; 0x41
 8002586:	fa00 f203 	lsl.w	r2, r0, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002592:	4b29      	ldr	r3, [pc, #164]	; (8002638 <HAL_ADC_ConfigChannel+0x250>)
 8002594:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a28      	ldr	r2, [pc, #160]	; (800263c <HAL_ADC_ConfigChannel+0x254>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d10f      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x1d8>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b12      	cmp	r3, #18
 80025a6:	d10b      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a1d      	ldr	r2, [pc, #116]	; (800263c <HAL_ADC_ConfigChannel+0x254>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d12b      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x23a>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a1c      	ldr	r2, [pc, #112]	; (8002640 <HAL_ADC_ConfigChannel+0x258>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d003      	beq.n	80025dc <HAL_ADC_ConfigChannel+0x1f4>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b11      	cmp	r3, #17
 80025da:	d122      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a11      	ldr	r2, [pc, #68]	; (8002640 <HAL_ADC_ConfigChannel+0x258>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d111      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025fe:	4b11      	ldr	r3, [pc, #68]	; (8002644 <HAL_ADC_ConfigChannel+0x25c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a11      	ldr	r2, [pc, #68]	; (8002648 <HAL_ADC_ConfigChannel+0x260>)
 8002604:	fba2 2303 	umull	r2, r3, r2, r3
 8002608:	0c9a      	lsrs	r2, r3, #18
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002614:	e002      	b.n	800261c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	3b01      	subs	r3, #1
 800261a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f9      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	40012300 	.word	0x40012300
 800263c:	40012000 	.word	0x40012000
 8002640:	10000012 	.word	0x10000012
 8002644:	20000000 	.word	0x20000000
 8002648:	431bde83 	.word	0x431bde83

0800264c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002654:	4b79      	ldr	r3, [pc, #484]	; (800283c <ADC_Init+0x1f0>)
 8002656:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	431a      	orrs	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002680:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6859      	ldr	r1, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	021a      	lsls	r2, r3, #8
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6899      	ldr	r1, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026de:	4a58      	ldr	r2, [pc, #352]	; (8002840 <ADC_Init+0x1f4>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d022      	beq.n	800272a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6899      	ldr	r1, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002714:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6899      	ldr	r1, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	e00f      	b.n	800274a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002738:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002748:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0202 	bic.w	r2, r2, #2
 8002758:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6899      	ldr	r1, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	7e1b      	ldrb	r3, [r3, #24]
 8002764:	005a      	lsls	r2, r3, #1
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d01b      	beq.n	80027b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002786:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002796:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6859      	ldr	r1, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	3b01      	subs	r3, #1
 80027a4:	035a      	lsls	r2, r3, #13
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	e007      	b.n	80027c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	3b01      	subs	r3, #1
 80027dc:	051a      	lsls	r2, r3, #20
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6899      	ldr	r1, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002802:	025a      	lsls	r2, r3, #9
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800281a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6899      	ldr	r1, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	029a      	lsls	r2, r3, #10
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	609a      	str	r2, [r3, #8]
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	40012300 	.word	0x40012300
 8002840:	0f000001 	.word	0x0f000001

08002844 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	2300      	movs	r3, #0
 8002856:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_ADCEx_InjectedStart+0x22>
 8002862:	2302      	movs	r3, #2
 8002864:	e0aa      	b.n	80029bc <HAL_ADCEx_InjectedStart+0x178>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b01      	cmp	r3, #1
 800287a:	d018      	beq.n	80028ae <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800288c:	4b4e      	ldr	r3, [pc, #312]	; (80029c8 <HAL_ADCEx_InjectedStart+0x184>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a4e      	ldr	r2, [pc, #312]	; (80029cc <HAL_ADCEx_InjectedStart+0x188>)
 8002892:	fba2 2303 	umull	r2, r3, r2, r3
 8002896:	0c9a      	lsrs	r2, r3, #18
 8002898:	4613      	mov	r3, r2
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	4413      	add	r3, r2
 800289e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80028a0:	e002      	b.n	80028a8 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f9      	bne.n	80028a2 <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d172      	bne.n	80029a2 <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028c4:	f023 0301 	bic.w	r3, r3, #1
 80028c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d102      	bne.n	80028e2 <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f06f 0204 	mvn.w	r2, #4
 80028f2:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028f4:	4b36      	ldr	r3, [pc, #216]	; (80029d0 <HAL_ADCEx_InjectedStart+0x18c>)
 80028f6:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	2b00      	cmp	r3, #0
 8002902:	d124      	bne.n	800294e <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800290e:	2b00      	cmp	r3, #0
 8002910:	bf0c      	ite	eq
 8002912:	2301      	moveq	r3, #1
 8002914:	2300      	movne	r3, #0
 8002916:	b2db      	uxtb	r3, r3
 8002918:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002924:	2b00      	cmp	r3, #0
 8002926:	bf0c      	ite	eq
 8002928:	2301      	moveq	r3, #1
 800292a:	2300      	movne	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d041      	beq.n	80029ba <HAL_ADCEx_InjectedStart+0x176>
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d03e      	beq.n	80029ba <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	e035      	b.n	80029ba <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002958:	2b00      	cmp	r3, #0
 800295a:	bf0c      	ite	eq
 800295c:	2301      	moveq	r3, #1
 800295e:	2300      	movne	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800296e:	2b00      	cmp	r3, #0
 8002970:	bf0c      	ite	eq
 8002972:	2301      	moveq	r3, #1
 8002974:	2300      	movne	r3, #0
 8002976:	b2db      	uxtb	r3, r3
 8002978:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a15      	ldr	r2, [pc, #84]	; (80029d4 <HAL_ADCEx_InjectedStart+0x190>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d11a      	bne.n	80029ba <HAL_ADCEx_InjectedStart+0x176>
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d017      	beq.n	80029ba <HAL_ADCEx_InjectedStart+0x176>
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d014      	beq.n	80029ba <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	e00b      	b.n	80029ba <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f043 0210 	orr.w	r2, r3, #16
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	f043 0201 	orr.w	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	371c      	adds	r7, #28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	20000000 	.word	0x20000000
 80029cc:	431bde83 	.word	0x431bde83
 80029d0:	40012300 	.word	0x40012300
 80029d4:	40012000 	.word	0x40012000

080029d8 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f06f 0204 	mvn.w	r2, #4
 80029ee:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d81f      	bhi.n	8002a38 <HAL_ADCEx_InjectedGetValue+0x60>
 80029f8:	a201      	add	r2, pc, #4	; (adr r2, 8002a00 <HAL_ADCEx_InjectedGetValue+0x28>)
 80029fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fe:	bf00      	nop
 8002a00:	08002a2f 	.word	0x08002a2f
 8002a04:	08002a25 	.word	0x08002a25
 8002a08:	08002a1b 	.word	0x08002a1b
 8002a0c:	08002a11 	.word	0x08002a11
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a16:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8002a18:	e00f      	b.n	8002a3a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a20:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8002a22:	e00a      	b.n	8002a3a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	60fb      	str	r3, [r7, #12]
    }
    break;
 8002a2c:	e005      	b.n	8002a3a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a34:	60fb      	str	r3, [r7, #12]
    }
    break;
 8002a36:	e000      	b.n	8002a3a <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8002a38:	bf00      	nop
  }
  return tmp;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e17e      	b.n	8002d5e <HAL_ADCEx_InjectedConfigChannel+0x316>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b09      	cmp	r3, #9
 8002a6e:	d925      	bls.n	8002abc <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68d9      	ldr	r1, [r3, #12]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4613      	mov	r3, r2
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	4413      	add	r3, r2
 8002a84:	3b1e      	subs	r3, #30
 8002a86:	2207      	movs	r2, #7
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43da      	mvns	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	400a      	ands	r2, r1
 8002a94:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68d9      	ldr	r1, [r3, #12]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4403      	add	r3, r0
 8002aae:	3b1e      	subs	r3, #30
 8002ab0:	409a      	lsls	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	e022      	b.n	8002b02 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6919      	ldr	r1, [r3, #16]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4613      	mov	r3, r2
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	4413      	add	r3, r2
 8002ad0:	2207      	movs	r2, #7
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	400a      	ands	r2, r1
 8002ade:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6919      	ldr	r1, [r3, #16]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	4618      	mov	r0, r3
 8002af2:	4603      	mov	r3, r0
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	4403      	add	r3, r0
 8002af8:	409a      	lsls	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002b10:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	051a      	lsls	r2, r3, #20
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	3303      	adds	r3, #3
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	461a      	mov	r2, r3
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	221f      	movs	r2, #31
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43da      	mvns	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	400a      	ands	r2, r1
 8002b58:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	4618      	mov	r0, r3
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	3303      	adds	r3, #3
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	fa00 f203 	lsl.w	r2, r0, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	4a75      	ldr	r2, [pc, #468]	; (8002d6c <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d022      	beq.n	8002be0 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002ba8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6899      	ldr	r1, [r3, #8]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	699a      	ldr	r2, [r3, #24]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002bca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6899      	ldr	r1, [r3, #8]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	69da      	ldr	r2, [r3, #28]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	609a      	str	r2, [r3, #8]
 8002bde:	e00f      	b.n	8002c00 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002bee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002bfe:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	7d5b      	ldrb	r3, [r3, #21]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c16:	605a      	str	r2, [r3, #4]
 8002c18:	e007      	b.n	8002c2a <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c28:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	7d1b      	ldrb	r3, [r3, #20]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d008      	beq.n	8002c44 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	e007      	b.n	8002c54 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c52:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d02e      	beq.n	8002cba <HAL_ADCEx_InjectedConfigChannel+0x272>
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d840      	bhi.n	8002ce2 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d002      	beq.n	8002c6a <HAL_ADCEx_InjectedConfigChannel+0x222>
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d014      	beq.n	8002c92 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8002c68:	e03b      	b.n	8002ce2 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002c78:	f023 030f 	bic.w	r3, r3, #15
 8002c7c:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6959      	ldr	r1, [r3, #20]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	615a      	str	r2, [r3, #20]
      break;
 8002c90:	e03b      	b.n	8002d0a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002ca0:	f023 030f 	bic.w	r3, r3, #15
 8002ca4:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6999      	ldr	r1, [r3, #24]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	619a      	str	r2, [r3, #24]
      break;
 8002cb8:	e027      	b.n	8002d0a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002cc8:	f023 030f 	bic.w	r3, r3, #15
 8002ccc:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	69d9      	ldr	r1, [r3, #28]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	61da      	str	r2, [r3, #28]
      break;
 8002ce0:	e013      	b.n	8002d0a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002cf0:	f023 030f 	bic.w	r3, r3, #15
 8002cf4:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6a19      	ldr	r1, [r3, #32]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	621a      	str	r2, [r3, #32]
      break;
 8002d08:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d0a:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a18      	ldr	r2, [pc, #96]	; (8002d74 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d109      	bne.n	8002d2c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b12      	cmp	r3, #18
 8002d1e:	d105      	bne.n	8002d2c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a10      	ldr	r2, [pc, #64]	; (8002d74 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d10e      	bne.n	8002d54 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a0f      	ldr	r2, [pc, #60]	; (8002d78 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d003      	beq.n	8002d48 <HAL_ADCEx_InjectedConfigChannel+0x300>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b11      	cmp	r3, #17
 8002d46:	d105      	bne.n	8002d54 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	000f0001 	.word	0x000f0001
 8002d70:	40012300 	.word	0x40012300
 8002d74:	40012000 	.word	0x40012000
 8002d78:	10000012 	.word	0x10000012

08002d7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e0ed      	b.n	8002f6a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d102      	bne.n	8002da0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff f848 	bl	8001e30 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0201 	orr.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002db0:	f7ff faa6 	bl	8002300 <HAL_GetTick>
 8002db4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002db6:	e012      	b.n	8002dde <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002db8:	f7ff faa2 	bl	8002300 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b0a      	cmp	r3, #10
 8002dc4:	d90b      	bls.n	8002dde <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2205      	movs	r2, #5
 8002dd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e0c5      	b.n	8002f6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0e5      	beq.n	8002db8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0202 	bic.w	r2, r2, #2
 8002dfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dfc:	f7ff fa80 	bl	8002300 <HAL_GetTick>
 8002e00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e02:	e012      	b.n	8002e2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e04:	f7ff fa7c 	bl	8002300 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b0a      	cmp	r3, #10
 8002e10:	d90b      	bls.n	8002e2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2205      	movs	r2, #5
 8002e22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e09f      	b.n	8002f6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1e5      	bne.n	8002e04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	7e1b      	ldrb	r3, [r3, #24]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d108      	bne.n	8002e52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	e007      	b.n	8002e62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	7e5b      	ldrb	r3, [r3, #25]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d108      	bne.n	8002e7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	e007      	b.n	8002e8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	7e9b      	ldrb	r3, [r3, #26]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d108      	bne.n	8002ea6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0220 	orr.w	r2, r2, #32
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	e007      	b.n	8002eb6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0220 	bic.w	r2, r2, #32
 8002eb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	7edb      	ldrb	r3, [r3, #27]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d108      	bne.n	8002ed0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0210 	bic.w	r2, r2, #16
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	e007      	b.n	8002ee0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 0210 	orr.w	r2, r2, #16
 8002ede:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	7f1b      	ldrb	r3, [r3, #28]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d108      	bne.n	8002efa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0208 	orr.w	r2, r2, #8
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	e007      	b.n	8002f0a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0208 	bic.w	r2, r2, #8
 8002f08:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	7f5b      	ldrb	r3, [r3, #29]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d108      	bne.n	8002f24 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 0204 	orr.w	r2, r2, #4
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	e007      	b.n	8002f34 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0204 	bic.w	r2, r2, #4
 8002f32:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	ea42 0103 	orr.w	r1, r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	1e5a      	subs	r2, r3, #1
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f8a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002f8c:	7cfb      	ldrb	r3, [r7, #19]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d003      	beq.n	8002f9a <HAL_CAN_ConfigFilter+0x26>
 8002f92:	7cfb      	ldrb	r3, [r7, #19]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	f040 80be 	bne.w	8003116 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002f9a:	4b65      	ldr	r3, [pc, #404]	; (8003130 <HAL_CAN_ConfigFilter+0x1bc>)
 8002f9c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002fa4:	f043 0201 	orr.w	r2, r3, #1
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002fb4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	021b      	lsls	r3, r3, #8
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	f003 031f 	and.w	r3, r3, #31
 8002fda:	2201      	movs	r2, #1
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	43db      	mvns	r3, r3
 8002fec:	401a      	ands	r2, r3
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d123      	bne.n	8003044 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	43db      	mvns	r3, r3
 8003006:	401a      	ands	r2, r3
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800301e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	3248      	adds	r2, #72	; 0x48
 8003024:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003038:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800303a:	6979      	ldr	r1, [r7, #20]
 800303c:	3348      	adds	r3, #72	; 0x48
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	440b      	add	r3, r1
 8003042:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d122      	bne.n	8003092 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	431a      	orrs	r2, r3
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800306c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	3248      	adds	r2, #72	; 0x48
 8003072:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003086:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003088:	6979      	ldr	r1, [r7, #20]
 800308a:	3348      	adds	r3, #72	; 0x48
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	440b      	add	r3, r1
 8003090:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	43db      	mvns	r3, r3
 80030a4:	401a      	ands	r2, r3
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80030ac:	e007      	b.n	80030be <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d109      	bne.n	80030da <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	401a      	ands	r2, r3
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80030d8:	e007      	b.n	80030ea <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d107      	bne.n	8003102 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003108:	f023 0201 	bic.w	r2, r3, #1
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	e006      	b.n	8003124 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
  }
}
 8003124:	4618      	mov	r0, r3
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	40006400 	.word	0x40006400

08003134 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b01      	cmp	r3, #1
 8003146:	d12e      	bne.n	80031a6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0201 	bic.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003160:	f7ff f8ce 	bl	8002300 <HAL_GetTick>
 8003164:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003166:	e012      	b.n	800318e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003168:	f7ff f8ca 	bl	8002300 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b0a      	cmp	r3, #10
 8003174:	d90b      	bls.n	800318e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2205      	movs	r2, #5
 8003186:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e012      	b.n	80031b4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1e5      	bne.n	8003168 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	e006      	b.n	80031b4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
  }
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80031bc:	b480      	push	{r7}
 80031be:	b089      	sub	sp, #36	; 0x24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031d0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80031da:	7ffb      	ldrb	r3, [r7, #31]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d003      	beq.n	80031e8 <HAL_CAN_AddTxMessage+0x2c>
 80031e0:	7ffb      	ldrb	r3, [r7, #31]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	f040 80b8 	bne.w	8003358 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10a      	bne.n	8003208 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d105      	bne.n	8003208 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 80a0 	beq.w	8003348 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	0e1b      	lsrs	r3, r3, #24
 800320c:	f003 0303 	and.w	r3, r3, #3
 8003210:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d907      	bls.n	8003228 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e09e      	b.n	8003366 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003228:	2201      	movs	r2, #1
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	409a      	lsls	r2, r3
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10d      	bne.n	8003256 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003244:	68f9      	ldr	r1, [r7, #12]
 8003246:	6809      	ldr	r1, [r1, #0]
 8003248:	431a      	orrs	r2, r3
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	3318      	adds	r3, #24
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	440b      	add	r3, r1
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	e00f      	b.n	8003276 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003260:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003266:	68f9      	ldr	r1, [r7, #12]
 8003268:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800326a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	3318      	adds	r3, #24
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	440b      	add	r3, r1
 8003274:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6819      	ldr	r1, [r3, #0]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	691a      	ldr	r2, [r3, #16]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	3318      	adds	r3, #24
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	440b      	add	r3, r1
 8003286:	3304      	adds	r3, #4
 8003288:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	7d1b      	ldrb	r3, [r3, #20]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d111      	bne.n	80032b6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	3318      	adds	r3, #24
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	4413      	add	r3, r2
 800329e:	3304      	adds	r3, #4
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	6811      	ldr	r1, [r2, #0]
 80032a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	3318      	adds	r3, #24
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	440b      	add	r3, r1
 80032b2:	3304      	adds	r3, #4
 80032b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	3307      	adds	r3, #7
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	061a      	lsls	r2, r3, #24
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3306      	adds	r3, #6
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	041b      	lsls	r3, r3, #16
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3305      	adds	r3, #5
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	021b      	lsls	r3, r3, #8
 80032d0:	4313      	orrs	r3, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	3204      	adds	r2, #4
 80032d6:	7812      	ldrb	r2, [r2, #0]
 80032d8:	4610      	mov	r0, r2
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	6811      	ldr	r1, [r2, #0]
 80032de:	ea43 0200 	orr.w	r2, r3, r0
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	440b      	add	r3, r1
 80032e8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80032ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3303      	adds	r3, #3
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	061a      	lsls	r2, r3, #24
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3302      	adds	r3, #2
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	041b      	lsls	r3, r3, #16
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3301      	adds	r3, #1
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	021b      	lsls	r3, r3, #8
 8003308:	4313      	orrs	r3, r2
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	7812      	ldrb	r2, [r2, #0]
 800330e:	4610      	mov	r0, r2
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	6811      	ldr	r1, [r2, #0]
 8003314:	ea43 0200 	orr.w	r2, r3, r0
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	440b      	add	r3, r1
 800331e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003322:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	3318      	adds	r3, #24
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	4413      	add	r3, r2
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	6811      	ldr	r1, [r2, #0]
 8003336:	f043 0201 	orr.w	r2, r3, #1
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	3318      	adds	r3, #24
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	440b      	add	r3, r1
 8003342:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	e00e      	b.n	8003366 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e006      	b.n	8003366 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
  }
}
 8003366:	4618      	mov	r0, r3
 8003368:	3724      	adds	r7, #36	; 0x24
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003372:	b480      	push	{r7}
 8003374:	b085      	sub	sp, #20
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003384:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003386:	7afb      	ldrb	r3, [r7, #11]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d002      	beq.n	8003392 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800338c:	7afb      	ldrb	r3, [r7, #11]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d11d      	bne.n	80033ce <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	3301      	adds	r3, #1
 80033a4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d002      	beq.n	80033ba <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3301      	adds	r3, #1
 80033b8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	3301      	adds	r3, #1
 80033cc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80033ce:	68fb      	ldr	r3, [r7, #12]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80033dc:	b480      	push	{r7}
 80033de:	b087      	sub	sp, #28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
 80033e8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033f0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80033f2:	7dfb      	ldrb	r3, [r7, #23]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d003      	beq.n	8003400 <HAL_CAN_GetRxMessage+0x24>
 80033f8:	7dfb      	ldrb	r3, [r7, #23]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	f040 80f3 	bne.w	80035e6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10e      	bne.n	8003424 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0303 	and.w	r3, r3, #3
 8003410:	2b00      	cmp	r3, #0
 8003412:	d116      	bne.n	8003442 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e0e7      	b.n	80035f4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d107      	bne.n	8003442 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e0d8      	b.n	80035f4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	331b      	adds	r3, #27
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	4413      	add	r3, r2
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0204 	and.w	r2, r3, #4
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10c      	bne.n	800347a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	331b      	adds	r3, #27
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	4413      	add	r3, r2
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	0d5b      	lsrs	r3, r3, #21
 8003470:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	e00b      	b.n	8003492 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	331b      	adds	r3, #27
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	4413      	add	r3, r2
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	08db      	lsrs	r3, r3, #3
 800348a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	331b      	adds	r3, #27
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	4413      	add	r3, r2
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0202 	and.w	r2, r3, #2
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	331b      	adds	r3, #27
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	4413      	add	r3, r2
 80034b4:	3304      	adds	r3, #4
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 020f 	and.w	r2, r3, #15
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	331b      	adds	r3, #27
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	4413      	add	r3, r2
 80034cc:	3304      	adds	r3, #4
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	0a1b      	lsrs	r3, r3, #8
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	331b      	adds	r3, #27
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	4413      	add	r3, r2
 80034e4:	3304      	adds	r3, #4
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	0c1b      	lsrs	r3, r3, #16
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	b2da      	uxtb	r2, r3
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	4413      	add	r3, r2
 8003510:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	0a1a      	lsrs	r2, r3, #8
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	3301      	adds	r3, #1
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	4413      	add	r3, r2
 800352a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	0c1a      	lsrs	r2, r3, #16
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	3302      	adds	r3, #2
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	4413      	add	r3, r2
 8003544:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	0e1a      	lsrs	r2, r3, #24
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	3303      	adds	r3, #3
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	4413      	add	r3, r2
 800355e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	3304      	adds	r3, #4
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	4413      	add	r3, r2
 8003576:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	0a1a      	lsrs	r2, r3, #8
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	3305      	adds	r3, #5
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	4413      	add	r3, r2
 8003590:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	0c1a      	lsrs	r2, r3, #16
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	3306      	adds	r3, #6
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	0e1a      	lsrs	r2, r3, #24
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	3307      	adds	r3, #7
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d108      	bne.n	80035d2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0220 	orr.w	r2, r2, #32
 80035ce:	60da      	str	r2, [r3, #12]
 80035d0:	e007      	b.n	80035e2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f042 0220 	orr.w	r2, r2, #32
 80035e0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80035e2:	2300      	movs	r3, #0
 80035e4:	e006      	b.n	80035f4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
  }
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	371c      	adds	r7, #28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003610:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003612:	7bfb      	ldrb	r3, [r7, #15]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d002      	beq.n	800361e <HAL_CAN_ActivateNotification+0x1e>
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d109      	bne.n	8003632 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6959      	ldr	r1, [r3, #20]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	e006      	b.n	8003640 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
  }
}
 8003640:	4618      	mov	r0, r3
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08a      	sub	sp, #40	; 0x28
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003654:	2300      	movs	r3, #0
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d07c      	beq.n	800378c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d023      	beq.n	80036e4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2201      	movs	r2, #1
 80036a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f983 	bl	80039ba <HAL_CAN_TxMailbox0CompleteCallback>
 80036b4:	e016      	b.n	80036e4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d004      	beq.n	80036ca <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
 80036c8:	e00c      	b.n	80036e4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d004      	beq.n	80036de <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
 80036dc:	e002      	b.n	80036e4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f989 	bl	80039f6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d024      	beq.n	8003738 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f963 	bl	80039ce <HAL_CAN_TxMailbox1CompleteCallback>
 8003708:	e016      	b.n	8003738 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003710:	2b00      	cmp	r3, #0
 8003712:	d004      	beq.n	800371e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800371a:	627b      	str	r3, [r7, #36]	; 0x24
 800371c:	e00c      	b.n	8003738 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003724:	2b00      	cmp	r3, #0
 8003726:	d004      	beq.n	8003732 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
 8003730:	e002      	b.n	8003738 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f969 	bl	8003a0a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d024      	beq.n	800378c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800374a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f943 	bl	80039e2 <HAL_CAN_TxMailbox2CompleteCallback>
 800375c:	e016      	b.n	800378c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d004      	beq.n	8003772 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800376e:	627b      	str	r3, [r7, #36]	; 0x24
 8003770:	e00c      	b.n	800378c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d004      	beq.n	8003786 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
 8003784:	e002      	b.n	800378c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f949 	bl	8003a1e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00c      	beq.n	80037b0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	2b00      	cmp	r3, #0
 800379e:	d007      	beq.n	80037b0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2210      	movs	r2, #16
 80037ae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00b      	beq.n	80037d2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d006      	beq.n	80037d2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2208      	movs	r2, #8
 80037ca:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f930 	bl	8003a32 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d009      	beq.n	80037f0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7fd fdea 	bl	80013c4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00c      	beq.n	8003814 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b00      	cmp	r3, #0
 8003802:	d007      	beq.n	8003814 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800380a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2210      	movs	r2, #16
 8003812:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00b      	beq.n	8003836 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	2b00      	cmp	r3, #0
 8003826:	d006      	beq.n	8003836 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2208      	movs	r2, #8
 800382e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f908 	bl	8003a46 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	f003 0310 	and.w	r3, r3, #16
 800383c:	2b00      	cmp	r3, #0
 800383e:	d009      	beq.n	8003854 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fd fdca 	bl	80013e8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00b      	beq.n	8003876 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f003 0310 	and.w	r3, r3, #16
 8003864:	2b00      	cmp	r3, #0
 8003866:	d006      	beq.n	8003876 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2210      	movs	r2, #16
 800386e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f8f2 	bl	8003a5a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00b      	beq.n	8003898 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d006      	beq.n	8003898 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2208      	movs	r2, #8
 8003890:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f8eb 	bl	8003a6e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d07b      	beq.n	800399a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d072      	beq.n	8003992 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d008      	beq.n	80038c8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	f043 0301 	orr.w	r3, r3, #1
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d008      	beq.n	80038e4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	f043 0302 	orr.w	r3, r3, #2
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d008      	beq.n	8003900 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	f043 0304 	orr.w	r3, r3, #4
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003906:	2b00      	cmp	r3, #0
 8003908:	d043      	beq.n	8003992 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003910:	2b00      	cmp	r3, #0
 8003912:	d03e      	beq.n	8003992 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800391a:	2b60      	cmp	r3, #96	; 0x60
 800391c:	d02b      	beq.n	8003976 <HAL_CAN_IRQHandler+0x32a>
 800391e:	2b60      	cmp	r3, #96	; 0x60
 8003920:	d82e      	bhi.n	8003980 <HAL_CAN_IRQHandler+0x334>
 8003922:	2b50      	cmp	r3, #80	; 0x50
 8003924:	d022      	beq.n	800396c <HAL_CAN_IRQHandler+0x320>
 8003926:	2b50      	cmp	r3, #80	; 0x50
 8003928:	d82a      	bhi.n	8003980 <HAL_CAN_IRQHandler+0x334>
 800392a:	2b40      	cmp	r3, #64	; 0x40
 800392c:	d019      	beq.n	8003962 <HAL_CAN_IRQHandler+0x316>
 800392e:	2b40      	cmp	r3, #64	; 0x40
 8003930:	d826      	bhi.n	8003980 <HAL_CAN_IRQHandler+0x334>
 8003932:	2b30      	cmp	r3, #48	; 0x30
 8003934:	d010      	beq.n	8003958 <HAL_CAN_IRQHandler+0x30c>
 8003936:	2b30      	cmp	r3, #48	; 0x30
 8003938:	d822      	bhi.n	8003980 <HAL_CAN_IRQHandler+0x334>
 800393a:	2b10      	cmp	r3, #16
 800393c:	d002      	beq.n	8003944 <HAL_CAN_IRQHandler+0x2f8>
 800393e:	2b20      	cmp	r3, #32
 8003940:	d005      	beq.n	800394e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003942:	e01d      	b.n	8003980 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	f043 0308 	orr.w	r3, r3, #8
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800394c:	e019      	b.n	8003982 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	f043 0310 	orr.w	r3, r3, #16
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003956:	e014      	b.n	8003982 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	f043 0320 	orr.w	r3, r3, #32
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003960:	e00f      	b.n	8003982 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003968:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800396a:	e00a      	b.n	8003982 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003972:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003974:	e005      	b.n	8003982 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800397e:	e000      	b.n	8003982 <HAL_CAN_IRQHandler+0x336>
            break;
 8003980:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	699a      	ldr	r2, [r3, #24]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003990:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2204      	movs	r2, #4
 8003998:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	2b00      	cmp	r3, #0
 800399e:	d008      	beq.n	80039b2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f868 	bl	8003a82 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80039b2:	bf00      	nop
 80039b4:	3728      	adds	r7, #40	; 0x28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
	...

08003a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <__NVIC_SetPriorityGrouping+0x44>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aca:	4a04      	ldr	r2, [pc, #16]	; (8003adc <__NVIC_SetPriorityGrouping+0x44>)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	60d3      	str	r3, [r2, #12]
}
 8003ad0:	bf00      	nop
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	e000ed00 	.word	0xe000ed00

08003ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ae4:	4b04      	ldr	r3, [pc, #16]	; (8003af8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	0a1b      	lsrs	r3, r3, #8
 8003aea:	f003 0307 	and.w	r3, r3, #7
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	e000ed00 	.word	0xe000ed00

08003afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4603      	mov	r3, r0
 8003b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	db0b      	blt.n	8003b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	f003 021f 	and.w	r2, r3, #31
 8003b14:	4907      	ldr	r1, [pc, #28]	; (8003b34 <__NVIC_EnableIRQ+0x38>)
 8003b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	2001      	movs	r0, #1
 8003b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	e000e100 	.word	0xe000e100

08003b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	6039      	str	r1, [r7, #0]
 8003b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	db0a      	blt.n	8003b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	490c      	ldr	r1, [pc, #48]	; (8003b84 <__NVIC_SetPriority+0x4c>)
 8003b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b56:	0112      	lsls	r2, r2, #4
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b60:	e00a      	b.n	8003b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	4908      	ldr	r1, [pc, #32]	; (8003b88 <__NVIC_SetPriority+0x50>)
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	3b04      	subs	r3, #4
 8003b70:	0112      	lsls	r2, r2, #4
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	440b      	add	r3, r1
 8003b76:	761a      	strb	r2, [r3, #24]
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	e000e100 	.word	0xe000e100
 8003b88:	e000ed00 	.word	0xe000ed00

08003b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b089      	sub	sp, #36	; 0x24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f1c3 0307 	rsb	r3, r3, #7
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	bf28      	it	cs
 8003baa:	2304      	movcs	r3, #4
 8003bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	2b06      	cmp	r3, #6
 8003bb4:	d902      	bls.n	8003bbc <NVIC_EncodePriority+0x30>
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	3b03      	subs	r3, #3
 8003bba:	e000      	b.n	8003bbe <NVIC_EncodePriority+0x32>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43da      	mvns	r2, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	401a      	ands	r2, r3
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	fa01 f303 	lsl.w	r3, r1, r3
 8003bde:	43d9      	mvns	r1, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be4:	4313      	orrs	r3, r2
         );
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3724      	adds	r7, #36	; 0x24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
	...

08003bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c04:	d301      	bcc.n	8003c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c06:	2301      	movs	r3, #1
 8003c08:	e00f      	b.n	8003c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c0a:	4a0a      	ldr	r2, [pc, #40]	; (8003c34 <SysTick_Config+0x40>)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c12:	210f      	movs	r1, #15
 8003c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c18:	f7ff ff8e 	bl	8003b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c1c:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <SysTick_Config+0x40>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c22:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <SysTick_Config+0x40>)
 8003c24:	2207      	movs	r2, #7
 8003c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	e000e010 	.word	0xe000e010

08003c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff ff29 	bl	8003a98 <__NVIC_SetPriorityGrouping>
}
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b086      	sub	sp, #24
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	4603      	mov	r3, r0
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
 8003c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c60:	f7ff ff3e 	bl	8003ae0 <__NVIC_GetPriorityGrouping>
 8003c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	6978      	ldr	r0, [r7, #20]
 8003c6c:	f7ff ff8e 	bl	8003b8c <NVIC_EncodePriority>
 8003c70:	4602      	mov	r2, r0
 8003c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c76:	4611      	mov	r1, r2
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff ff5d 	bl	8003b38 <__NVIC_SetPriority>
}
 8003c7e:	bf00      	nop
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b082      	sub	sp, #8
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff ff31 	bl	8003afc <__NVIC_EnableIRQ>
}
 8003c9a:	bf00      	nop
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b082      	sub	sp, #8
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff ffa2 	bl	8003bf4 <SysTick_Config>
 8003cb0:	4603      	mov	r3, r0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b089      	sub	sp, #36	; 0x24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	e165      	b.n	8003fa4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cd8:	2201      	movs	r2, #1
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	f040 8154 	bne.w	8003f9e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d005      	beq.n	8003d0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d130      	bne.n	8003d70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	2203      	movs	r2, #3
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4013      	ands	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d44:	2201      	movs	r2, #1
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	4013      	ands	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	f003 0201 	and.w	r2, r3, #1
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f003 0303 	and.w	r3, r3, #3
 8003d78:	2b03      	cmp	r3, #3
 8003d7a:	d017      	beq.n	8003dac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	2203      	movs	r2, #3
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4013      	ands	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f003 0303 	and.w	r3, r3, #3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d123      	bne.n	8003e00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	08da      	lsrs	r2, r3, #3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3208      	adds	r2, #8
 8003dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	220f      	movs	r2, #15
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	08da      	lsrs	r2, r3, #3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3208      	adds	r2, #8
 8003dfa:	69b9      	ldr	r1, [r7, #24]
 8003dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	43db      	mvns	r3, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4013      	ands	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 0203 	and.w	r2, r3, #3
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 80ae 	beq.w	8003f9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e42:	2300      	movs	r3, #0
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	4b5d      	ldr	r3, [pc, #372]	; (8003fbc <HAL_GPIO_Init+0x300>)
 8003e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4a:	4a5c      	ldr	r2, [pc, #368]	; (8003fbc <HAL_GPIO_Init+0x300>)
 8003e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e50:	6453      	str	r3, [r2, #68]	; 0x44
 8003e52:	4b5a      	ldr	r3, [pc, #360]	; (8003fbc <HAL_GPIO_Init+0x300>)
 8003e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e5e:	4a58      	ldr	r2, [pc, #352]	; (8003fc0 <HAL_GPIO_Init+0x304>)
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	089b      	lsrs	r3, r3, #2
 8003e64:	3302      	adds	r3, #2
 8003e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	220f      	movs	r2, #15
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a4f      	ldr	r2, [pc, #316]	; (8003fc4 <HAL_GPIO_Init+0x308>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d025      	beq.n	8003ed6 <HAL_GPIO_Init+0x21a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a4e      	ldr	r2, [pc, #312]	; (8003fc8 <HAL_GPIO_Init+0x30c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01f      	beq.n	8003ed2 <HAL_GPIO_Init+0x216>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a4d      	ldr	r2, [pc, #308]	; (8003fcc <HAL_GPIO_Init+0x310>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d019      	beq.n	8003ece <HAL_GPIO_Init+0x212>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a4c      	ldr	r2, [pc, #304]	; (8003fd0 <HAL_GPIO_Init+0x314>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d013      	beq.n	8003eca <HAL_GPIO_Init+0x20e>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a4b      	ldr	r2, [pc, #300]	; (8003fd4 <HAL_GPIO_Init+0x318>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00d      	beq.n	8003ec6 <HAL_GPIO_Init+0x20a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a4a      	ldr	r2, [pc, #296]	; (8003fd8 <HAL_GPIO_Init+0x31c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d007      	beq.n	8003ec2 <HAL_GPIO_Init+0x206>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a49      	ldr	r2, [pc, #292]	; (8003fdc <HAL_GPIO_Init+0x320>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d101      	bne.n	8003ebe <HAL_GPIO_Init+0x202>
 8003eba:	2306      	movs	r3, #6
 8003ebc:	e00c      	b.n	8003ed8 <HAL_GPIO_Init+0x21c>
 8003ebe:	2307      	movs	r3, #7
 8003ec0:	e00a      	b.n	8003ed8 <HAL_GPIO_Init+0x21c>
 8003ec2:	2305      	movs	r3, #5
 8003ec4:	e008      	b.n	8003ed8 <HAL_GPIO_Init+0x21c>
 8003ec6:	2304      	movs	r3, #4
 8003ec8:	e006      	b.n	8003ed8 <HAL_GPIO_Init+0x21c>
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e004      	b.n	8003ed8 <HAL_GPIO_Init+0x21c>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e002      	b.n	8003ed8 <HAL_GPIO_Init+0x21c>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <HAL_GPIO_Init+0x21c>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	f002 0203 	and.w	r2, r2, #3
 8003ede:	0092      	lsls	r2, r2, #2
 8003ee0:	4093      	lsls	r3, r2
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ee8:	4935      	ldr	r1, [pc, #212]	; (8003fc0 <HAL_GPIO_Init+0x304>)
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	089b      	lsrs	r3, r3, #2
 8003eee:	3302      	adds	r3, #2
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ef6:	4b3a      	ldr	r3, [pc, #232]	; (8003fe0 <HAL_GPIO_Init+0x324>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	43db      	mvns	r3, r3
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	4013      	ands	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f1a:	4a31      	ldr	r2, [pc, #196]	; (8003fe0 <HAL_GPIO_Init+0x324>)
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f20:	4b2f      	ldr	r3, [pc, #188]	; (8003fe0 <HAL_GPIO_Init+0x324>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f44:	4a26      	ldr	r2, [pc, #152]	; (8003fe0 <HAL_GPIO_Init+0x324>)
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f4a:	4b25      	ldr	r3, [pc, #148]	; (8003fe0 <HAL_GPIO_Init+0x324>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	43db      	mvns	r3, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4013      	ands	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f6e:	4a1c      	ldr	r2, [pc, #112]	; (8003fe0 <HAL_GPIO_Init+0x324>)
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f74:	4b1a      	ldr	r3, [pc, #104]	; (8003fe0 <HAL_GPIO_Init+0x324>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4013      	ands	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f98:	4a11      	ldr	r2, [pc, #68]	; (8003fe0 <HAL_GPIO_Init+0x324>)
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	61fb      	str	r3, [r7, #28]
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	2b0f      	cmp	r3, #15
 8003fa8:	f67f ae96 	bls.w	8003cd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fac:	bf00      	nop
 8003fae:	bf00      	nop
 8003fb0:	3724      	adds	r7, #36	; 0x24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	40013800 	.word	0x40013800
 8003fc4:	40020000 	.word	0x40020000
 8003fc8:	40020400 	.word	0x40020400
 8003fcc:	40020800 	.word	0x40020800
 8003fd0:	40020c00 	.word	0x40020c00
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	40021400 	.word	0x40021400
 8003fdc:	40021800 	.word	0x40021800
 8003fe0:	40013c00 	.word	0x40013c00

08003fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e0cc      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ff8:	4b68      	ldr	r3, [pc, #416]	; (800419c <HAL_RCC_ClockConfig+0x1b8>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 030f 	and.w	r3, r3, #15
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d90c      	bls.n	8004020 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004006:	4b65      	ldr	r3, [pc, #404]	; (800419c <HAL_RCC_ClockConfig+0x1b8>)
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800400e:	4b63      	ldr	r3, [pc, #396]	; (800419c <HAL_RCC_ClockConfig+0x1b8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d001      	beq.n	8004020 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e0b8      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d020      	beq.n	800406e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004038:	4b59      	ldr	r3, [pc, #356]	; (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	4a58      	ldr	r2, [pc, #352]	; (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004042:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0308 	and.w	r3, r3, #8
 800404c:	2b00      	cmp	r3, #0
 800404e:	d005      	beq.n	800405c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004050:	4b53      	ldr	r3, [pc, #332]	; (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	4a52      	ldr	r2, [pc, #328]	; (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800405a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800405c:	4b50      	ldr	r3, [pc, #320]	; (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	494d      	ldr	r1, [pc, #308]	; (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	4313      	orrs	r3, r2
 800406c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d044      	beq.n	8004104 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d107      	bne.n	8004092 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004082:	4b47      	ldr	r3, [pc, #284]	; (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d119      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e07f      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d003      	beq.n	80040a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800409e:	2b03      	cmp	r3, #3
 80040a0:	d107      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a2:	4b3f      	ldr	r3, [pc, #252]	; (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d109      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e06f      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b2:	4b3b      	ldr	r3, [pc, #236]	; (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e067      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040c2:	4b37      	ldr	r3, [pc, #220]	; (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f023 0203 	bic.w	r2, r3, #3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	4934      	ldr	r1, [pc, #208]	; (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040d4:	f7fe f914 	bl	8002300 <HAL_GetTick>
 80040d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040da:	e00a      	b.n	80040f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040dc:	f7fe f910 	bl	8002300 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e04f      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f2:	4b2b      	ldr	r3, [pc, #172]	; (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 020c 	and.w	r2, r3, #12
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	429a      	cmp	r2, r3
 8004102:	d1eb      	bne.n	80040dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004104:	4b25      	ldr	r3, [pc, #148]	; (800419c <HAL_RCC_ClockConfig+0x1b8>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 030f 	and.w	r3, r3, #15
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	429a      	cmp	r2, r3
 8004110:	d20c      	bcs.n	800412c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004112:	4b22      	ldr	r3, [pc, #136]	; (800419c <HAL_RCC_ClockConfig+0x1b8>)
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800411a:	4b20      	ldr	r3, [pc, #128]	; (800419c <HAL_RCC_ClockConfig+0x1b8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d001      	beq.n	800412c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e032      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d008      	beq.n	800414a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004138:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4916      	ldr	r1, [pc, #88]	; (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	4313      	orrs	r3, r2
 8004148:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d009      	beq.n	800416a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004156:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	490e      	ldr	r1, [pc, #56]	; (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004166:	4313      	orrs	r3, r2
 8004168:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800416a:	f000 f855 	bl	8004218 <HAL_RCC_GetSysClockFreq>
 800416e:	4602      	mov	r2, r0
 8004170:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	490a      	ldr	r1, [pc, #40]	; (80041a4 <HAL_RCC_ClockConfig+0x1c0>)
 800417c:	5ccb      	ldrb	r3, [r1, r3]
 800417e:	fa22 f303 	lsr.w	r3, r2, r3
 8004182:	4a09      	ldr	r2, [pc, #36]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004186:	4b09      	ldr	r3, [pc, #36]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f7fe f874 	bl	8002278 <HAL_InitTick>

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40023c00 	.word	0x40023c00
 80041a0:	40023800 	.word	0x40023800
 80041a4:	0800882c 	.word	0x0800882c
 80041a8:	20000000 	.word	0x20000000
 80041ac:	20000004 	.word	0x20000004

080041b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041b4:	4b03      	ldr	r3, [pc, #12]	; (80041c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80041b6:	681b      	ldr	r3, [r3, #0]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	20000000 	.word	0x20000000

080041c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041cc:	f7ff fff0 	bl	80041b0 <HAL_RCC_GetHCLKFreq>
 80041d0:	4602      	mov	r2, r0
 80041d2:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	0a9b      	lsrs	r3, r3, #10
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	4903      	ldr	r1, [pc, #12]	; (80041ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80041de:	5ccb      	ldrb	r3, [r1, r3]
 80041e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40023800 	.word	0x40023800
 80041ec:	0800883c 	.word	0x0800883c

080041f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041f4:	f7ff ffdc 	bl	80041b0 <HAL_RCC_GetHCLKFreq>
 80041f8:	4602      	mov	r2, r0
 80041fa:	4b05      	ldr	r3, [pc, #20]	; (8004210 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	0b5b      	lsrs	r3, r3, #13
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	4903      	ldr	r1, [pc, #12]	; (8004214 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004206:	5ccb      	ldrb	r3, [r1, r3]
 8004208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800420c:	4618      	mov	r0, r3
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40023800 	.word	0x40023800
 8004214:	0800883c 	.word	0x0800883c

08004218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800421c:	b0ae      	sub	sp, #184	; 0xb8
 800421e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800423e:	4bcb      	ldr	r3, [pc, #812]	; (800456c <HAL_RCC_GetSysClockFreq+0x354>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 030c 	and.w	r3, r3, #12
 8004246:	2b0c      	cmp	r3, #12
 8004248:	f200 8206 	bhi.w	8004658 <HAL_RCC_GetSysClockFreq+0x440>
 800424c:	a201      	add	r2, pc, #4	; (adr r2, 8004254 <HAL_RCC_GetSysClockFreq+0x3c>)
 800424e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004252:	bf00      	nop
 8004254:	08004289 	.word	0x08004289
 8004258:	08004659 	.word	0x08004659
 800425c:	08004659 	.word	0x08004659
 8004260:	08004659 	.word	0x08004659
 8004264:	08004291 	.word	0x08004291
 8004268:	08004659 	.word	0x08004659
 800426c:	08004659 	.word	0x08004659
 8004270:	08004659 	.word	0x08004659
 8004274:	08004299 	.word	0x08004299
 8004278:	08004659 	.word	0x08004659
 800427c:	08004659 	.word	0x08004659
 8004280:	08004659 	.word	0x08004659
 8004284:	08004489 	.word	0x08004489
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004288:	4bb9      	ldr	r3, [pc, #740]	; (8004570 <HAL_RCC_GetSysClockFreq+0x358>)
 800428a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800428e:	e1e7      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004290:	4bb8      	ldr	r3, [pc, #736]	; (8004574 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004292:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004296:	e1e3      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004298:	4bb4      	ldr	r3, [pc, #720]	; (800456c <HAL_RCC_GetSysClockFreq+0x354>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042a4:	4bb1      	ldr	r3, [pc, #708]	; (800456c <HAL_RCC_GetSysClockFreq+0x354>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d071      	beq.n	8004394 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042b0:	4bae      	ldr	r3, [pc, #696]	; (800456c <HAL_RCC_GetSysClockFreq+0x354>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	099b      	lsrs	r3, r3, #6
 80042b6:	2200      	movs	r2, #0
 80042b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042bc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80042c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042cc:	2300      	movs	r3, #0
 80042ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042d6:	4622      	mov	r2, r4
 80042d8:	462b      	mov	r3, r5
 80042da:	f04f 0000 	mov.w	r0, #0
 80042de:	f04f 0100 	mov.w	r1, #0
 80042e2:	0159      	lsls	r1, r3, #5
 80042e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042e8:	0150      	lsls	r0, r2, #5
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	4621      	mov	r1, r4
 80042f0:	1a51      	subs	r1, r2, r1
 80042f2:	6439      	str	r1, [r7, #64]	; 0x40
 80042f4:	4629      	mov	r1, r5
 80042f6:	eb63 0301 	sbc.w	r3, r3, r1
 80042fa:	647b      	str	r3, [r7, #68]	; 0x44
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	f04f 0300 	mov.w	r3, #0
 8004304:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004308:	4649      	mov	r1, r9
 800430a:	018b      	lsls	r3, r1, #6
 800430c:	4641      	mov	r1, r8
 800430e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004312:	4641      	mov	r1, r8
 8004314:	018a      	lsls	r2, r1, #6
 8004316:	4641      	mov	r1, r8
 8004318:	1a51      	subs	r1, r2, r1
 800431a:	63b9      	str	r1, [r7, #56]	; 0x38
 800431c:	4649      	mov	r1, r9
 800431e:	eb63 0301 	sbc.w	r3, r3, r1
 8004322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004330:	4649      	mov	r1, r9
 8004332:	00cb      	lsls	r3, r1, #3
 8004334:	4641      	mov	r1, r8
 8004336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800433a:	4641      	mov	r1, r8
 800433c:	00ca      	lsls	r2, r1, #3
 800433e:	4610      	mov	r0, r2
 8004340:	4619      	mov	r1, r3
 8004342:	4603      	mov	r3, r0
 8004344:	4622      	mov	r2, r4
 8004346:	189b      	adds	r3, r3, r2
 8004348:	633b      	str	r3, [r7, #48]	; 0x30
 800434a:	462b      	mov	r3, r5
 800434c:	460a      	mov	r2, r1
 800434e:	eb42 0303 	adc.w	r3, r2, r3
 8004352:	637b      	str	r3, [r7, #52]	; 0x34
 8004354:	f04f 0200 	mov.w	r2, #0
 8004358:	f04f 0300 	mov.w	r3, #0
 800435c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004360:	4629      	mov	r1, r5
 8004362:	024b      	lsls	r3, r1, #9
 8004364:	4621      	mov	r1, r4
 8004366:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800436a:	4621      	mov	r1, r4
 800436c:	024a      	lsls	r2, r1, #9
 800436e:	4610      	mov	r0, r2
 8004370:	4619      	mov	r1, r3
 8004372:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004376:	2200      	movs	r2, #0
 8004378:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800437c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004380:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004384:	f7fc fc80 	bl	8000c88 <__aeabi_uldivmod>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4613      	mov	r3, r2
 800438e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004392:	e067      	b.n	8004464 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004394:	4b75      	ldr	r3, [pc, #468]	; (800456c <HAL_RCC_GetSysClockFreq+0x354>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	099b      	lsrs	r3, r3, #6
 800439a:	2200      	movs	r2, #0
 800439c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043a0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80043a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80043ae:	2300      	movs	r3, #0
 80043b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80043b2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80043b6:	4622      	mov	r2, r4
 80043b8:	462b      	mov	r3, r5
 80043ba:	f04f 0000 	mov.w	r0, #0
 80043be:	f04f 0100 	mov.w	r1, #0
 80043c2:	0159      	lsls	r1, r3, #5
 80043c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043c8:	0150      	lsls	r0, r2, #5
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	4621      	mov	r1, r4
 80043d0:	1a51      	subs	r1, r2, r1
 80043d2:	62b9      	str	r1, [r7, #40]	; 0x28
 80043d4:	4629      	mov	r1, r5
 80043d6:	eb63 0301 	sbc.w	r3, r3, r1
 80043da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80043e8:	4649      	mov	r1, r9
 80043ea:	018b      	lsls	r3, r1, #6
 80043ec:	4641      	mov	r1, r8
 80043ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043f2:	4641      	mov	r1, r8
 80043f4:	018a      	lsls	r2, r1, #6
 80043f6:	4641      	mov	r1, r8
 80043f8:	ebb2 0a01 	subs.w	sl, r2, r1
 80043fc:	4649      	mov	r1, r9
 80043fe:	eb63 0b01 	sbc.w	fp, r3, r1
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800440e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004412:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004416:	4692      	mov	sl, r2
 8004418:	469b      	mov	fp, r3
 800441a:	4623      	mov	r3, r4
 800441c:	eb1a 0303 	adds.w	r3, sl, r3
 8004420:	623b      	str	r3, [r7, #32]
 8004422:	462b      	mov	r3, r5
 8004424:	eb4b 0303 	adc.w	r3, fp, r3
 8004428:	627b      	str	r3, [r7, #36]	; 0x24
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	f04f 0300 	mov.w	r3, #0
 8004432:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004436:	4629      	mov	r1, r5
 8004438:	028b      	lsls	r3, r1, #10
 800443a:	4621      	mov	r1, r4
 800443c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004440:	4621      	mov	r1, r4
 8004442:	028a      	lsls	r2, r1, #10
 8004444:	4610      	mov	r0, r2
 8004446:	4619      	mov	r1, r3
 8004448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800444c:	2200      	movs	r2, #0
 800444e:	673b      	str	r3, [r7, #112]	; 0x70
 8004450:	677a      	str	r2, [r7, #116]	; 0x74
 8004452:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004456:	f7fc fc17 	bl	8000c88 <__aeabi_uldivmod>
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	4613      	mov	r3, r2
 8004460:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004464:	4b41      	ldr	r3, [pc, #260]	; (800456c <HAL_RCC_GetSysClockFreq+0x354>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	0c1b      	lsrs	r3, r3, #16
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	3301      	adds	r3, #1
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004476:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800447a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800447e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004482:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004486:	e0eb      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004488:	4b38      	ldr	r3, [pc, #224]	; (800456c <HAL_RCC_GetSysClockFreq+0x354>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004490:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004494:	4b35      	ldr	r3, [pc, #212]	; (800456c <HAL_RCC_GetSysClockFreq+0x354>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d06b      	beq.n	8004578 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044a0:	4b32      	ldr	r3, [pc, #200]	; (800456c <HAL_RCC_GetSysClockFreq+0x354>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	099b      	lsrs	r3, r3, #6
 80044a6:	2200      	movs	r2, #0
 80044a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80044aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80044ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044b2:	663b      	str	r3, [r7, #96]	; 0x60
 80044b4:	2300      	movs	r3, #0
 80044b6:	667b      	str	r3, [r7, #100]	; 0x64
 80044b8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80044bc:	4622      	mov	r2, r4
 80044be:	462b      	mov	r3, r5
 80044c0:	f04f 0000 	mov.w	r0, #0
 80044c4:	f04f 0100 	mov.w	r1, #0
 80044c8:	0159      	lsls	r1, r3, #5
 80044ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044ce:	0150      	lsls	r0, r2, #5
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4621      	mov	r1, r4
 80044d6:	1a51      	subs	r1, r2, r1
 80044d8:	61b9      	str	r1, [r7, #24]
 80044da:	4629      	mov	r1, r5
 80044dc:	eb63 0301 	sbc.w	r3, r3, r1
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	f04f 0200 	mov.w	r2, #0
 80044e6:	f04f 0300 	mov.w	r3, #0
 80044ea:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80044ee:	4659      	mov	r1, fp
 80044f0:	018b      	lsls	r3, r1, #6
 80044f2:	4651      	mov	r1, sl
 80044f4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044f8:	4651      	mov	r1, sl
 80044fa:	018a      	lsls	r2, r1, #6
 80044fc:	4651      	mov	r1, sl
 80044fe:	ebb2 0801 	subs.w	r8, r2, r1
 8004502:	4659      	mov	r1, fp
 8004504:	eb63 0901 	sbc.w	r9, r3, r1
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004514:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004518:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800451c:	4690      	mov	r8, r2
 800451e:	4699      	mov	r9, r3
 8004520:	4623      	mov	r3, r4
 8004522:	eb18 0303 	adds.w	r3, r8, r3
 8004526:	613b      	str	r3, [r7, #16]
 8004528:	462b      	mov	r3, r5
 800452a:	eb49 0303 	adc.w	r3, r9, r3
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800453c:	4629      	mov	r1, r5
 800453e:	024b      	lsls	r3, r1, #9
 8004540:	4621      	mov	r1, r4
 8004542:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004546:	4621      	mov	r1, r4
 8004548:	024a      	lsls	r2, r1, #9
 800454a:	4610      	mov	r0, r2
 800454c:	4619      	mov	r1, r3
 800454e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004552:	2200      	movs	r2, #0
 8004554:	65bb      	str	r3, [r7, #88]	; 0x58
 8004556:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004558:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800455c:	f7fc fb94 	bl	8000c88 <__aeabi_uldivmod>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4613      	mov	r3, r2
 8004566:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800456a:	e065      	b.n	8004638 <HAL_RCC_GetSysClockFreq+0x420>
 800456c:	40023800 	.word	0x40023800
 8004570:	00f42400 	.word	0x00f42400
 8004574:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004578:	4b3d      	ldr	r3, [pc, #244]	; (8004670 <HAL_RCC_GetSysClockFreq+0x458>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	099b      	lsrs	r3, r3, #6
 800457e:	2200      	movs	r2, #0
 8004580:	4618      	mov	r0, r3
 8004582:	4611      	mov	r1, r2
 8004584:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004588:	653b      	str	r3, [r7, #80]	; 0x50
 800458a:	2300      	movs	r3, #0
 800458c:	657b      	str	r3, [r7, #84]	; 0x54
 800458e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004592:	4642      	mov	r2, r8
 8004594:	464b      	mov	r3, r9
 8004596:	f04f 0000 	mov.w	r0, #0
 800459a:	f04f 0100 	mov.w	r1, #0
 800459e:	0159      	lsls	r1, r3, #5
 80045a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045a4:	0150      	lsls	r0, r2, #5
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	4641      	mov	r1, r8
 80045ac:	1a51      	subs	r1, r2, r1
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	4649      	mov	r1, r9
 80045b2:	eb63 0301 	sbc.w	r3, r3, r1
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80045c4:	4659      	mov	r1, fp
 80045c6:	018b      	lsls	r3, r1, #6
 80045c8:	4651      	mov	r1, sl
 80045ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045ce:	4651      	mov	r1, sl
 80045d0:	018a      	lsls	r2, r1, #6
 80045d2:	4651      	mov	r1, sl
 80045d4:	1a54      	subs	r4, r2, r1
 80045d6:	4659      	mov	r1, fp
 80045d8:	eb63 0501 	sbc.w	r5, r3, r1
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	00eb      	lsls	r3, r5, #3
 80045e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045ea:	00e2      	lsls	r2, r4, #3
 80045ec:	4614      	mov	r4, r2
 80045ee:	461d      	mov	r5, r3
 80045f0:	4643      	mov	r3, r8
 80045f2:	18e3      	adds	r3, r4, r3
 80045f4:	603b      	str	r3, [r7, #0]
 80045f6:	464b      	mov	r3, r9
 80045f8:	eb45 0303 	adc.w	r3, r5, r3
 80045fc:	607b      	str	r3, [r7, #4]
 80045fe:	f04f 0200 	mov.w	r2, #0
 8004602:	f04f 0300 	mov.w	r3, #0
 8004606:	e9d7 4500 	ldrd	r4, r5, [r7]
 800460a:	4629      	mov	r1, r5
 800460c:	028b      	lsls	r3, r1, #10
 800460e:	4621      	mov	r1, r4
 8004610:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004614:	4621      	mov	r1, r4
 8004616:	028a      	lsls	r2, r1, #10
 8004618:	4610      	mov	r0, r2
 800461a:	4619      	mov	r1, r3
 800461c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004620:	2200      	movs	r2, #0
 8004622:	64bb      	str	r3, [r7, #72]	; 0x48
 8004624:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004626:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800462a:	f7fc fb2d 	bl	8000c88 <__aeabi_uldivmod>
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	4613      	mov	r3, r2
 8004634:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004638:	4b0d      	ldr	r3, [pc, #52]	; (8004670 <HAL_RCC_GetSysClockFreq+0x458>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	0f1b      	lsrs	r3, r3, #28
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004646:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800464a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800464e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004652:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004656:	e003      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004658:	4b06      	ldr	r3, [pc, #24]	; (8004674 <HAL_RCC_GetSysClockFreq+0x45c>)
 800465a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800465e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004660:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004664:	4618      	mov	r0, r3
 8004666:	37b8      	adds	r7, #184	; 0xb8
 8004668:	46bd      	mov	sp, r7
 800466a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800466e:	bf00      	nop
 8004670:	40023800 	.word	0x40023800
 8004674:	00f42400 	.word	0x00f42400

08004678 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e28d      	b.n	8004ba6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 8083 	beq.w	800479e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004698:	4b94      	ldr	r3, [pc, #592]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f003 030c 	and.w	r3, r3, #12
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d019      	beq.n	80046d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80046a4:	4b91      	ldr	r3, [pc, #580]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d106      	bne.n	80046be <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80046b0:	4b8e      	ldr	r3, [pc, #568]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046bc:	d00c      	beq.n	80046d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046be:	4b8b      	ldr	r3, [pc, #556]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80046c6:	2b0c      	cmp	r3, #12
 80046c8:	d112      	bne.n	80046f0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ca:	4b88      	ldr	r3, [pc, #544]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046d6:	d10b      	bne.n	80046f0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d8:	4b84      	ldr	r3, [pc, #528]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d05b      	beq.n	800479c <HAL_RCC_OscConfig+0x124>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d157      	bne.n	800479c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e25a      	b.n	8004ba6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f8:	d106      	bne.n	8004708 <HAL_RCC_OscConfig+0x90>
 80046fa:	4b7c      	ldr	r3, [pc, #496]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a7b      	ldr	r2, [pc, #492]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 8004700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	e01d      	b.n	8004744 <HAL_RCC_OscConfig+0xcc>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004710:	d10c      	bne.n	800472c <HAL_RCC_OscConfig+0xb4>
 8004712:	4b76      	ldr	r3, [pc, #472]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a75      	ldr	r2, [pc, #468]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 8004718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	4b73      	ldr	r3, [pc, #460]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a72      	ldr	r2, [pc, #456]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 8004724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	e00b      	b.n	8004744 <HAL_RCC_OscConfig+0xcc>
 800472c:	4b6f      	ldr	r3, [pc, #444]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a6e      	ldr	r2, [pc, #440]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 8004732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	4b6c      	ldr	r3, [pc, #432]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a6b      	ldr	r2, [pc, #428]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 800473e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d013      	beq.n	8004774 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474c:	f7fd fdd8 	bl	8002300 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004754:	f7fd fdd4 	bl	8002300 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b64      	cmp	r3, #100	; 0x64
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e21f      	b.n	8004ba6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004766:	4b61      	ldr	r3, [pc, #388]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0f0      	beq.n	8004754 <HAL_RCC_OscConfig+0xdc>
 8004772:	e014      	b.n	800479e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004774:	f7fd fdc4 	bl	8002300 <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800477c:	f7fd fdc0 	bl	8002300 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b64      	cmp	r3, #100	; 0x64
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e20b      	b.n	8004ba6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800478e:	4b57      	ldr	r3, [pc, #348]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1f0      	bne.n	800477c <HAL_RCC_OscConfig+0x104>
 800479a:	e000      	b.n	800479e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800479c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d06f      	beq.n	800488a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80047aa:	4b50      	ldr	r3, [pc, #320]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 030c 	and.w	r3, r3, #12
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d017      	beq.n	80047e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80047b6:	4b4d      	ldr	r3, [pc, #308]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d105      	bne.n	80047ce <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80047c2:	4b4a      	ldr	r3, [pc, #296]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00b      	beq.n	80047e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ce:	4b47      	ldr	r3, [pc, #284]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80047d6:	2b0c      	cmp	r3, #12
 80047d8:	d11c      	bne.n	8004814 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047da:	4b44      	ldr	r3, [pc, #272]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d116      	bne.n	8004814 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047e6:	4b41      	ldr	r3, [pc, #260]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d005      	beq.n	80047fe <HAL_RCC_OscConfig+0x186>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d001      	beq.n	80047fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e1d3      	b.n	8004ba6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047fe:	4b3b      	ldr	r3, [pc, #236]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	4937      	ldr	r1, [pc, #220]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 800480e:	4313      	orrs	r3, r2
 8004810:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004812:	e03a      	b.n	800488a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d020      	beq.n	800485e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800481c:	4b34      	ldr	r3, [pc, #208]	; (80048f0 <HAL_RCC_OscConfig+0x278>)
 800481e:	2201      	movs	r2, #1
 8004820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004822:	f7fd fd6d 	bl	8002300 <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004828:	e008      	b.n	800483c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800482a:	f7fd fd69 	bl	8002300 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e1b4      	b.n	8004ba6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800483c:	4b2b      	ldr	r3, [pc, #172]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0f0      	beq.n	800482a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004848:	4b28      	ldr	r3, [pc, #160]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	4925      	ldr	r1, [pc, #148]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 8004858:	4313      	orrs	r3, r2
 800485a:	600b      	str	r3, [r1, #0]
 800485c:	e015      	b.n	800488a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800485e:	4b24      	ldr	r3, [pc, #144]	; (80048f0 <HAL_RCC_OscConfig+0x278>)
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004864:	f7fd fd4c 	bl	8002300 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800486c:	f7fd fd48 	bl	8002300 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e193      	b.n	8004ba6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800487e:	4b1b      	ldr	r3, [pc, #108]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1f0      	bne.n	800486c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0308 	and.w	r3, r3, #8
 8004892:	2b00      	cmp	r3, #0
 8004894:	d036      	beq.n	8004904 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d016      	beq.n	80048cc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800489e:	4b15      	ldr	r3, [pc, #84]	; (80048f4 <HAL_RCC_OscConfig+0x27c>)
 80048a0:	2201      	movs	r2, #1
 80048a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a4:	f7fd fd2c 	bl	8002300 <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048ac:	f7fd fd28 	bl	8002300 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e173      	b.n	8004ba6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048be:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 80048c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0f0      	beq.n	80048ac <HAL_RCC_OscConfig+0x234>
 80048ca:	e01b      	b.n	8004904 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048cc:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <HAL_RCC_OscConfig+0x27c>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d2:	f7fd fd15 	bl	8002300 <HAL_GetTick>
 80048d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d8:	e00e      	b.n	80048f8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048da:	f7fd fd11 	bl	8002300 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d907      	bls.n	80048f8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e15c      	b.n	8004ba6 <HAL_RCC_OscConfig+0x52e>
 80048ec:	40023800 	.word	0x40023800
 80048f0:	42470000 	.word	0x42470000
 80048f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048f8:	4b8a      	ldr	r3, [pc, #552]	; (8004b24 <HAL_RCC_OscConfig+0x4ac>)
 80048fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1ea      	bne.n	80048da <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 8097 	beq.w	8004a40 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004912:	2300      	movs	r3, #0
 8004914:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004916:	4b83      	ldr	r3, [pc, #524]	; (8004b24 <HAL_RCC_OscConfig+0x4ac>)
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10f      	bne.n	8004942 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004922:	2300      	movs	r3, #0
 8004924:	60bb      	str	r3, [r7, #8]
 8004926:	4b7f      	ldr	r3, [pc, #508]	; (8004b24 <HAL_RCC_OscConfig+0x4ac>)
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	4a7e      	ldr	r2, [pc, #504]	; (8004b24 <HAL_RCC_OscConfig+0x4ac>)
 800492c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004930:	6413      	str	r3, [r2, #64]	; 0x40
 8004932:	4b7c      	ldr	r3, [pc, #496]	; (8004b24 <HAL_RCC_OscConfig+0x4ac>)
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800493a:	60bb      	str	r3, [r7, #8]
 800493c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800493e:	2301      	movs	r3, #1
 8004940:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004942:	4b79      	ldr	r3, [pc, #484]	; (8004b28 <HAL_RCC_OscConfig+0x4b0>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494a:	2b00      	cmp	r3, #0
 800494c:	d118      	bne.n	8004980 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800494e:	4b76      	ldr	r3, [pc, #472]	; (8004b28 <HAL_RCC_OscConfig+0x4b0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a75      	ldr	r2, [pc, #468]	; (8004b28 <HAL_RCC_OscConfig+0x4b0>)
 8004954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800495a:	f7fd fcd1 	bl	8002300 <HAL_GetTick>
 800495e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004960:	e008      	b.n	8004974 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004962:	f7fd fccd 	bl	8002300 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d901      	bls.n	8004974 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e118      	b.n	8004ba6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004974:	4b6c      	ldr	r3, [pc, #432]	; (8004b28 <HAL_RCC_OscConfig+0x4b0>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0f0      	beq.n	8004962 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d106      	bne.n	8004996 <HAL_RCC_OscConfig+0x31e>
 8004988:	4b66      	ldr	r3, [pc, #408]	; (8004b24 <HAL_RCC_OscConfig+0x4ac>)
 800498a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498c:	4a65      	ldr	r2, [pc, #404]	; (8004b24 <HAL_RCC_OscConfig+0x4ac>)
 800498e:	f043 0301 	orr.w	r3, r3, #1
 8004992:	6713      	str	r3, [r2, #112]	; 0x70
 8004994:	e01c      	b.n	80049d0 <HAL_RCC_OscConfig+0x358>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	2b05      	cmp	r3, #5
 800499c:	d10c      	bne.n	80049b8 <HAL_RCC_OscConfig+0x340>
 800499e:	4b61      	ldr	r3, [pc, #388]	; (8004b24 <HAL_RCC_OscConfig+0x4ac>)
 80049a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a2:	4a60      	ldr	r2, [pc, #384]	; (8004b24 <HAL_RCC_OscConfig+0x4ac>)
 80049a4:	f043 0304 	orr.w	r3, r3, #4
 80049a8:	6713      	str	r3, [r2, #112]	; 0x70
 80049aa:	4b5e      	ldr	r3, [pc, #376]	; (8004b24 <HAL_RCC_OscConfig+0x4ac>)
 80049ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ae:	4a5d      	ldr	r2, [pc, #372]	; (8004b24 <HAL_RCC_OscConfig+0x4ac>)
 80049b0:	f043 0301 	orr.w	r3, r3, #1
 80049b4:	6713      	str	r3, [r2, #112]	; 0x70
 80049b6:	e00b      	b.n	80049d0 <HAL_RCC_OscConfig+0x358>
 80049b8:	4b5a      	ldr	r3, [pc, #360]	; (8004b24 <HAL_RCC_OscConfig+0x4ac>)
 80049ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049bc:	4a59      	ldr	r2, [pc, #356]	; (8004b24 <HAL_RCC_OscConfig+0x4ac>)
 80049be:	f023 0301 	bic.w	r3, r3, #1
 80049c2:	6713      	str	r3, [r2, #112]	; 0x70
 80049c4:	4b57      	ldr	r3, [pc, #348]	; (8004b24 <HAL_RCC_OscConfig+0x4ac>)
 80049c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c8:	4a56      	ldr	r2, [pc, #344]	; (8004b24 <HAL_RCC_OscConfig+0x4ac>)
 80049ca:	f023 0304 	bic.w	r3, r3, #4
 80049ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d015      	beq.n	8004a04 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d8:	f7fd fc92 	bl	8002300 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049de:	e00a      	b.n	80049f6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049e0:	f7fd fc8e 	bl	8002300 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e0d7      	b.n	8004ba6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049f6:	4b4b      	ldr	r3, [pc, #300]	; (8004b24 <HAL_RCC_OscConfig+0x4ac>)
 80049f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0ee      	beq.n	80049e0 <HAL_RCC_OscConfig+0x368>
 8004a02:	e014      	b.n	8004a2e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a04:	f7fd fc7c 	bl	8002300 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a0a:	e00a      	b.n	8004a22 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a0c:	f7fd fc78 	bl	8002300 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e0c1      	b.n	8004ba6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a22:	4b40      	ldr	r3, [pc, #256]	; (8004b24 <HAL_RCC_OscConfig+0x4ac>)
 8004a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1ee      	bne.n	8004a0c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a2e:	7dfb      	ldrb	r3, [r7, #23]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d105      	bne.n	8004a40 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a34:	4b3b      	ldr	r3, [pc, #236]	; (8004b24 <HAL_RCC_OscConfig+0x4ac>)
 8004a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a38:	4a3a      	ldr	r2, [pc, #232]	; (8004b24 <HAL_RCC_OscConfig+0x4ac>)
 8004a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 80ad 	beq.w	8004ba4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a4a:	4b36      	ldr	r3, [pc, #216]	; (8004b24 <HAL_RCC_OscConfig+0x4ac>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 030c 	and.w	r3, r3, #12
 8004a52:	2b08      	cmp	r3, #8
 8004a54:	d060      	beq.n	8004b18 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d145      	bne.n	8004aea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a5e:	4b33      	ldr	r3, [pc, #204]	; (8004b2c <HAL_RCC_OscConfig+0x4b4>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a64:	f7fd fc4c 	bl	8002300 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a6c:	f7fd fc48 	bl	8002300 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e093      	b.n	8004ba6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a7e:	4b29      	ldr	r3, [pc, #164]	; (8004b24 <HAL_RCC_OscConfig+0x4ac>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1f0      	bne.n	8004a6c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69da      	ldr	r2, [r3, #28]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	019b      	lsls	r3, r3, #6
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa0:	085b      	lsrs	r3, r3, #1
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	041b      	lsls	r3, r3, #16
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aac:	061b      	lsls	r3, r3, #24
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab4:	071b      	lsls	r3, r3, #28
 8004ab6:	491b      	ldr	r1, [pc, #108]	; (8004b24 <HAL_RCC_OscConfig+0x4ac>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004abc:	4b1b      	ldr	r3, [pc, #108]	; (8004b2c <HAL_RCC_OscConfig+0x4b4>)
 8004abe:	2201      	movs	r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac2:	f7fd fc1d 	bl	8002300 <HAL_GetTick>
 8004ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac8:	e008      	b.n	8004adc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aca:	f7fd fc19 	bl	8002300 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e064      	b.n	8004ba6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004adc:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <HAL_RCC_OscConfig+0x4ac>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0f0      	beq.n	8004aca <HAL_RCC_OscConfig+0x452>
 8004ae8:	e05c      	b.n	8004ba4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aea:	4b10      	ldr	r3, [pc, #64]	; (8004b2c <HAL_RCC_OscConfig+0x4b4>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af0:	f7fd fc06 	bl	8002300 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004af8:	f7fd fc02 	bl	8002300 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e04d      	b.n	8004ba6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b0a:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <HAL_RCC_OscConfig+0x4ac>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1f0      	bne.n	8004af8 <HAL_RCC_OscConfig+0x480>
 8004b16:	e045      	b.n	8004ba4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d107      	bne.n	8004b30 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e040      	b.n	8004ba6 <HAL_RCC_OscConfig+0x52e>
 8004b24:	40023800 	.word	0x40023800
 8004b28:	40007000 	.word	0x40007000
 8004b2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b30:	4b1f      	ldr	r3, [pc, #124]	; (8004bb0 <HAL_RCC_OscConfig+0x538>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d030      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d129      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d122      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b60:	4013      	ands	r3, r2
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d119      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b76:	085b      	lsrs	r3, r3, #1
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d10f      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d107      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d001      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40023800 	.word	0x40023800

08004bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e041      	b.n	8004c4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d106      	bne.n	8004be0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7fd f980 	bl	8001ee0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	f000 f95e 	bl	8004eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d001      	beq.n	8004c6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e046      	b.n	8004cfa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a23      	ldr	r2, [pc, #140]	; (8004d08 <HAL_TIM_Base_Start+0xb4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d022      	beq.n	8004cc4 <HAL_TIM_Base_Start+0x70>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c86:	d01d      	beq.n	8004cc4 <HAL_TIM_Base_Start+0x70>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a1f      	ldr	r2, [pc, #124]	; (8004d0c <HAL_TIM_Base_Start+0xb8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d018      	beq.n	8004cc4 <HAL_TIM_Base_Start+0x70>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a1e      	ldr	r2, [pc, #120]	; (8004d10 <HAL_TIM_Base_Start+0xbc>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d013      	beq.n	8004cc4 <HAL_TIM_Base_Start+0x70>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a1c      	ldr	r2, [pc, #112]	; (8004d14 <HAL_TIM_Base_Start+0xc0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00e      	beq.n	8004cc4 <HAL_TIM_Base_Start+0x70>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a1b      	ldr	r2, [pc, #108]	; (8004d18 <HAL_TIM_Base_Start+0xc4>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d009      	beq.n	8004cc4 <HAL_TIM_Base_Start+0x70>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a19      	ldr	r2, [pc, #100]	; (8004d1c <HAL_TIM_Base_Start+0xc8>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d004      	beq.n	8004cc4 <HAL_TIM_Base_Start+0x70>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a18      	ldr	r2, [pc, #96]	; (8004d20 <HAL_TIM_Base_Start+0xcc>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d111      	bne.n	8004ce8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2b06      	cmp	r3, #6
 8004cd4:	d010      	beq.n	8004cf8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f042 0201 	orr.w	r2, r2, #1
 8004ce4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce6:	e007      	b.n	8004cf8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0201 	orr.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	40010000 	.word	0x40010000
 8004d0c:	40000400 	.word	0x40000400
 8004d10:	40000800 	.word	0x40000800
 8004d14:	40000c00 	.word	0x40000c00
 8004d18:	40010400 	.word	0x40010400
 8004d1c:	40014000 	.word	0x40014000
 8004d20:	40001800 	.word	0x40001800

08004d24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_TIM_ConfigClockSource+0x1c>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e0b4      	b.n	8004eaa <HAL_TIM_ConfigClockSource+0x186>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d78:	d03e      	beq.n	8004df8 <HAL_TIM_ConfigClockSource+0xd4>
 8004d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d7e:	f200 8087 	bhi.w	8004e90 <HAL_TIM_ConfigClockSource+0x16c>
 8004d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d86:	f000 8086 	beq.w	8004e96 <HAL_TIM_ConfigClockSource+0x172>
 8004d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d8e:	d87f      	bhi.n	8004e90 <HAL_TIM_ConfigClockSource+0x16c>
 8004d90:	2b70      	cmp	r3, #112	; 0x70
 8004d92:	d01a      	beq.n	8004dca <HAL_TIM_ConfigClockSource+0xa6>
 8004d94:	2b70      	cmp	r3, #112	; 0x70
 8004d96:	d87b      	bhi.n	8004e90 <HAL_TIM_ConfigClockSource+0x16c>
 8004d98:	2b60      	cmp	r3, #96	; 0x60
 8004d9a:	d050      	beq.n	8004e3e <HAL_TIM_ConfigClockSource+0x11a>
 8004d9c:	2b60      	cmp	r3, #96	; 0x60
 8004d9e:	d877      	bhi.n	8004e90 <HAL_TIM_ConfigClockSource+0x16c>
 8004da0:	2b50      	cmp	r3, #80	; 0x50
 8004da2:	d03c      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0xfa>
 8004da4:	2b50      	cmp	r3, #80	; 0x50
 8004da6:	d873      	bhi.n	8004e90 <HAL_TIM_ConfigClockSource+0x16c>
 8004da8:	2b40      	cmp	r3, #64	; 0x40
 8004daa:	d058      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0x13a>
 8004dac:	2b40      	cmp	r3, #64	; 0x40
 8004dae:	d86f      	bhi.n	8004e90 <HAL_TIM_ConfigClockSource+0x16c>
 8004db0:	2b30      	cmp	r3, #48	; 0x30
 8004db2:	d064      	beq.n	8004e7e <HAL_TIM_ConfigClockSource+0x15a>
 8004db4:	2b30      	cmp	r3, #48	; 0x30
 8004db6:	d86b      	bhi.n	8004e90 <HAL_TIM_ConfigClockSource+0x16c>
 8004db8:	2b20      	cmp	r3, #32
 8004dba:	d060      	beq.n	8004e7e <HAL_TIM_ConfigClockSource+0x15a>
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d867      	bhi.n	8004e90 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d05c      	beq.n	8004e7e <HAL_TIM_ConfigClockSource+0x15a>
 8004dc4:	2b10      	cmp	r3, #16
 8004dc6:	d05a      	beq.n	8004e7e <HAL_TIM_ConfigClockSource+0x15a>
 8004dc8:	e062      	b.n	8004e90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6818      	ldr	r0, [r3, #0]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	6899      	ldr	r1, [r3, #8]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f000 f985 	bl	80050e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004dec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	609a      	str	r2, [r3, #8]
      break;
 8004df6:	e04f      	b.n	8004e98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6818      	ldr	r0, [r3, #0]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	6899      	ldr	r1, [r3, #8]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f000 f96e 	bl	80050e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689a      	ldr	r2, [r3, #8]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e1a:	609a      	str	r2, [r3, #8]
      break;
 8004e1c:	e03c      	b.n	8004e98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6818      	ldr	r0, [r3, #0]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	6859      	ldr	r1, [r3, #4]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f000 f8e2 	bl	8004ff4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2150      	movs	r1, #80	; 0x50
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 f93b 	bl	80050b2 <TIM_ITRx_SetConfig>
      break;
 8004e3c:	e02c      	b.n	8004e98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6818      	ldr	r0, [r3, #0]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	6859      	ldr	r1, [r3, #4]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	f000 f901 	bl	8005052 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2160      	movs	r1, #96	; 0x60
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 f92b 	bl	80050b2 <TIM_ITRx_SetConfig>
      break;
 8004e5c:	e01c      	b.n	8004e98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6818      	ldr	r0, [r3, #0]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	6859      	ldr	r1, [r3, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f000 f8c2 	bl	8004ff4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2140      	movs	r1, #64	; 0x40
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 f91b 	bl	80050b2 <TIM_ITRx_SetConfig>
      break;
 8004e7c:	e00c      	b.n	8004e98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4619      	mov	r1, r3
 8004e88:	4610      	mov	r0, r2
 8004e8a:	f000 f912 	bl	80050b2 <TIM_ITRx_SetConfig>
      break;
 8004e8e:	e003      	b.n	8004e98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
      break;
 8004e94:	e000      	b.n	8004e98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
	...

08004eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a40      	ldr	r2, [pc, #256]	; (8004fc8 <TIM_Base_SetConfig+0x114>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d013      	beq.n	8004ef4 <TIM_Base_SetConfig+0x40>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed2:	d00f      	beq.n	8004ef4 <TIM_Base_SetConfig+0x40>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a3d      	ldr	r2, [pc, #244]	; (8004fcc <TIM_Base_SetConfig+0x118>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d00b      	beq.n	8004ef4 <TIM_Base_SetConfig+0x40>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a3c      	ldr	r2, [pc, #240]	; (8004fd0 <TIM_Base_SetConfig+0x11c>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d007      	beq.n	8004ef4 <TIM_Base_SetConfig+0x40>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a3b      	ldr	r2, [pc, #236]	; (8004fd4 <TIM_Base_SetConfig+0x120>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d003      	beq.n	8004ef4 <TIM_Base_SetConfig+0x40>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a3a      	ldr	r2, [pc, #232]	; (8004fd8 <TIM_Base_SetConfig+0x124>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d108      	bne.n	8004f06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a2f      	ldr	r2, [pc, #188]	; (8004fc8 <TIM_Base_SetConfig+0x114>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d02b      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f14:	d027      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a2c      	ldr	r2, [pc, #176]	; (8004fcc <TIM_Base_SetConfig+0x118>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d023      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a2b      	ldr	r2, [pc, #172]	; (8004fd0 <TIM_Base_SetConfig+0x11c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d01f      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a2a      	ldr	r2, [pc, #168]	; (8004fd4 <TIM_Base_SetConfig+0x120>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d01b      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a29      	ldr	r2, [pc, #164]	; (8004fd8 <TIM_Base_SetConfig+0x124>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d017      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a28      	ldr	r2, [pc, #160]	; (8004fdc <TIM_Base_SetConfig+0x128>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d013      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a27      	ldr	r2, [pc, #156]	; (8004fe0 <TIM_Base_SetConfig+0x12c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00f      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a26      	ldr	r2, [pc, #152]	; (8004fe4 <TIM_Base_SetConfig+0x130>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d00b      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a25      	ldr	r2, [pc, #148]	; (8004fe8 <TIM_Base_SetConfig+0x134>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d007      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a24      	ldr	r2, [pc, #144]	; (8004fec <TIM_Base_SetConfig+0x138>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d003      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a23      	ldr	r2, [pc, #140]	; (8004ff0 <TIM_Base_SetConfig+0x13c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d108      	bne.n	8004f78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a0a      	ldr	r2, [pc, #40]	; (8004fc8 <TIM_Base_SetConfig+0x114>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d003      	beq.n	8004fac <TIM_Base_SetConfig+0xf8>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a0c      	ldr	r2, [pc, #48]	; (8004fd8 <TIM_Base_SetConfig+0x124>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d103      	bne.n	8004fb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	691a      	ldr	r2, [r3, #16]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	615a      	str	r2, [r3, #20]
}
 8004fba:	bf00      	nop
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	40010000 	.word	0x40010000
 8004fcc:	40000400 	.word	0x40000400
 8004fd0:	40000800 	.word	0x40000800
 8004fd4:	40000c00 	.word	0x40000c00
 8004fd8:	40010400 	.word	0x40010400
 8004fdc:	40014000 	.word	0x40014000
 8004fe0:	40014400 	.word	0x40014400
 8004fe4:	40014800 	.word	0x40014800
 8004fe8:	40001800 	.word	0x40001800
 8004fec:	40001c00 	.word	0x40001c00
 8004ff0:	40002000 	.word	0x40002000

08004ff4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	f023 0201 	bic.w	r2, r3, #1
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800501e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4313      	orrs	r3, r2
 8005028:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f023 030a 	bic.w	r3, r3, #10
 8005030:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	4313      	orrs	r3, r2
 8005038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	621a      	str	r2, [r3, #32]
}
 8005046:	bf00      	nop
 8005048:	371c      	adds	r7, #28
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005052:	b480      	push	{r7}
 8005054:	b087      	sub	sp, #28
 8005056:	af00      	add	r7, sp, #0
 8005058:	60f8      	str	r0, [r7, #12]
 800505a:	60b9      	str	r1, [r7, #8]
 800505c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	f023 0210 	bic.w	r2, r3, #16
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800507c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	031b      	lsls	r3, r3, #12
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4313      	orrs	r3, r2
 8005086:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800508e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	011b      	lsls	r3, r3, #4
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	4313      	orrs	r3, r2
 8005098:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	621a      	str	r2, [r3, #32]
}
 80050a6:	bf00      	nop
 80050a8:	371c      	adds	r7, #28
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b085      	sub	sp, #20
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
 80050ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	f043 0307 	orr.w	r3, r3, #7
 80050d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	609a      	str	r2, [r3, #8]
}
 80050dc:	bf00      	nop
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b087      	sub	sp, #28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
 80050f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005102:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	021a      	lsls	r2, r3, #8
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	431a      	orrs	r2, r3
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	4313      	orrs	r3, r2
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	4313      	orrs	r3, r2
 8005114:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	609a      	str	r2, [r3, #8]
}
 800511c:	bf00      	nop
 800511e:	371c      	adds	r7, #28
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005138:	2b01      	cmp	r3, #1
 800513a:	d101      	bne.n	8005140 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800513c:	2302      	movs	r3, #2
 800513e:	e05a      	b.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005166:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a21      	ldr	r2, [pc, #132]	; (8005204 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d022      	beq.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800518c:	d01d      	beq.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a1d      	ldr	r2, [pc, #116]	; (8005208 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d018      	beq.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a1b      	ldr	r2, [pc, #108]	; (800520c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d013      	beq.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a1a      	ldr	r2, [pc, #104]	; (8005210 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d00e      	beq.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a18      	ldr	r2, [pc, #96]	; (8005214 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d009      	beq.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a17      	ldr	r2, [pc, #92]	; (8005218 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d004      	beq.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a15      	ldr	r2, [pc, #84]	; (800521c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d10c      	bne.n	80051e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	4313      	orrs	r3, r2
 80051da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	40010000 	.word	0x40010000
 8005208:	40000400 	.word	0x40000400
 800520c:	40000800 	.word	0x40000800
 8005210:	40000c00 	.word	0x40000c00
 8005214:	40010400 	.word	0x40010400
 8005218:	40014000 	.word	0x40014000
 800521c:	40001800 	.word	0x40001800

08005220 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e03f      	b.n	80052b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d106      	bne.n	800524c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7fc fe6c 	bl	8001f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2224      	movs	r2, #36	; 0x24
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005262:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f929 	bl	80054bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005278:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	695a      	ldr	r2, [r3, #20]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005288:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005298:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b08a      	sub	sp, #40	; 0x28
 80052be:	af02      	add	r7, sp, #8
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	60b9      	str	r1, [r7, #8]
 80052c4:	603b      	str	r3, [r7, #0]
 80052c6:	4613      	mov	r3, r2
 80052c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b20      	cmp	r3, #32
 80052d8:	d17c      	bne.n	80053d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <HAL_UART_Transmit+0x2c>
 80052e0:	88fb      	ldrh	r3, [r7, #6]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e075      	b.n	80053d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d101      	bne.n	80052f8 <HAL_UART_Transmit+0x3e>
 80052f4:	2302      	movs	r3, #2
 80052f6:	e06e      	b.n	80053d6 <HAL_UART_Transmit+0x11c>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2221      	movs	r2, #33	; 0x21
 800530a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800530e:	f7fc fff7 	bl	8002300 <HAL_GetTick>
 8005312:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	88fa      	ldrh	r2, [r7, #6]
 8005318:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	88fa      	ldrh	r2, [r7, #6]
 800531e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005328:	d108      	bne.n	800533c <HAL_UART_Transmit+0x82>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d104      	bne.n	800533c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005332:	2300      	movs	r3, #0
 8005334:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	61bb      	str	r3, [r7, #24]
 800533a:	e003      	b.n	8005344 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005340:	2300      	movs	r3, #0
 8005342:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800534c:	e02a      	b.n	80053a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	2200      	movs	r2, #0
 8005356:	2180      	movs	r1, #128	; 0x80
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 f840 	bl	80053de <UART_WaitOnFlagUntilTimeout>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e036      	b.n	80053d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10b      	bne.n	8005386 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800537c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	3302      	adds	r3, #2
 8005382:	61bb      	str	r3, [r7, #24]
 8005384:	e007      	b.n	8005396 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	781a      	ldrb	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	3301      	adds	r3, #1
 8005394:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800539a:	b29b      	uxth	r3, r3
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1cf      	bne.n	800534e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2200      	movs	r2, #0
 80053b6:	2140      	movs	r1, #64	; 0x40
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 f810 	bl	80053de <UART_WaitOnFlagUntilTimeout>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e006      	b.n	80053d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80053d0:	2300      	movs	r3, #0
 80053d2:	e000      	b.n	80053d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80053d4:	2302      	movs	r3, #2
  }
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3720      	adds	r7, #32
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b090      	sub	sp, #64	; 0x40
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	60f8      	str	r0, [r7, #12]
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	603b      	str	r3, [r7, #0]
 80053ea:	4613      	mov	r3, r2
 80053ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ee:	e050      	b.n	8005492 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053f6:	d04c      	beq.n	8005492 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80053f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d007      	beq.n	800540e <UART_WaitOnFlagUntilTimeout+0x30>
 80053fe:	f7fc ff7f 	bl	8002300 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800540a:	429a      	cmp	r2, r3
 800540c:	d241      	bcs.n	8005492 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	330c      	adds	r3, #12
 8005414:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005418:	e853 3f00 	ldrex	r3, [r3]
 800541c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005424:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	330c      	adds	r3, #12
 800542c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800542e:	637a      	str	r2, [r7, #52]	; 0x34
 8005430:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005432:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005434:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005436:	e841 2300 	strex	r3, r2, [r1]
 800543a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800543c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1e5      	bne.n	800540e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3314      	adds	r3, #20
 8005448:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	e853 3f00 	ldrex	r3, [r3]
 8005450:	613b      	str	r3, [r7, #16]
   return(result);
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f023 0301 	bic.w	r3, r3, #1
 8005458:	63bb      	str	r3, [r7, #56]	; 0x38
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	3314      	adds	r3, #20
 8005460:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005462:	623a      	str	r2, [r7, #32]
 8005464:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005466:	69f9      	ldr	r1, [r7, #28]
 8005468:	6a3a      	ldr	r2, [r7, #32]
 800546a:	e841 2300 	strex	r3, r2, [r1]
 800546e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1e5      	bne.n	8005442 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2220      	movs	r2, #32
 800547a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2220      	movs	r2, #32
 8005482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e00f      	b.n	80054b2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4013      	ands	r3, r2
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	429a      	cmp	r2, r3
 80054a0:	bf0c      	ite	eq
 80054a2:	2301      	moveq	r3, #1
 80054a4:	2300      	movne	r3, #0
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	461a      	mov	r2, r3
 80054aa:	79fb      	ldrb	r3, [r7, #7]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d09f      	beq.n	80053f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3740      	adds	r7, #64	; 0x40
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
	...

080054bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054c0:	b0c0      	sub	sp, #256	; 0x100
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80054d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d8:	68d9      	ldr	r1, [r3, #12]
 80054da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	ea40 0301 	orr.w	r3, r0, r1
 80054e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	431a      	orrs	r2, r3
 80054f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	431a      	orrs	r2, r3
 80054fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	4313      	orrs	r3, r2
 8005504:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005514:	f021 010c 	bic.w	r1, r1, #12
 8005518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005522:	430b      	orrs	r3, r1
 8005524:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005536:	6999      	ldr	r1, [r3, #24]
 8005538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	ea40 0301 	orr.w	r3, r0, r1
 8005542:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	4b8f      	ldr	r3, [pc, #572]	; (8005788 <UART_SetConfig+0x2cc>)
 800554c:	429a      	cmp	r2, r3
 800554e:	d005      	beq.n	800555c <UART_SetConfig+0xa0>
 8005550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	4b8d      	ldr	r3, [pc, #564]	; (800578c <UART_SetConfig+0x2d0>)
 8005558:	429a      	cmp	r2, r3
 800555a:	d104      	bne.n	8005566 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800555c:	f7fe fe48 	bl	80041f0 <HAL_RCC_GetPCLK2Freq>
 8005560:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005564:	e003      	b.n	800556e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005566:	f7fe fe2f 	bl	80041c8 <HAL_RCC_GetPCLK1Freq>
 800556a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800556e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005578:	f040 810c 	bne.w	8005794 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800557c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005580:	2200      	movs	r2, #0
 8005582:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005586:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800558a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800558e:	4622      	mov	r2, r4
 8005590:	462b      	mov	r3, r5
 8005592:	1891      	adds	r1, r2, r2
 8005594:	65b9      	str	r1, [r7, #88]	; 0x58
 8005596:	415b      	adcs	r3, r3
 8005598:	65fb      	str	r3, [r7, #92]	; 0x5c
 800559a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800559e:	4621      	mov	r1, r4
 80055a0:	eb12 0801 	adds.w	r8, r2, r1
 80055a4:	4629      	mov	r1, r5
 80055a6:	eb43 0901 	adc.w	r9, r3, r1
 80055aa:	f04f 0200 	mov.w	r2, #0
 80055ae:	f04f 0300 	mov.w	r3, #0
 80055b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055be:	4690      	mov	r8, r2
 80055c0:	4699      	mov	r9, r3
 80055c2:	4623      	mov	r3, r4
 80055c4:	eb18 0303 	adds.w	r3, r8, r3
 80055c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80055cc:	462b      	mov	r3, r5
 80055ce:	eb49 0303 	adc.w	r3, r9, r3
 80055d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80055e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80055e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80055ea:	460b      	mov	r3, r1
 80055ec:	18db      	adds	r3, r3, r3
 80055ee:	653b      	str	r3, [r7, #80]	; 0x50
 80055f0:	4613      	mov	r3, r2
 80055f2:	eb42 0303 	adc.w	r3, r2, r3
 80055f6:	657b      	str	r3, [r7, #84]	; 0x54
 80055f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80055fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005600:	f7fb fb42 	bl	8000c88 <__aeabi_uldivmod>
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	4b61      	ldr	r3, [pc, #388]	; (8005790 <UART_SetConfig+0x2d4>)
 800560a:	fba3 2302 	umull	r2, r3, r3, r2
 800560e:	095b      	lsrs	r3, r3, #5
 8005610:	011c      	lsls	r4, r3, #4
 8005612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005616:	2200      	movs	r2, #0
 8005618:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800561c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005620:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005624:	4642      	mov	r2, r8
 8005626:	464b      	mov	r3, r9
 8005628:	1891      	adds	r1, r2, r2
 800562a:	64b9      	str	r1, [r7, #72]	; 0x48
 800562c:	415b      	adcs	r3, r3
 800562e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005630:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005634:	4641      	mov	r1, r8
 8005636:	eb12 0a01 	adds.w	sl, r2, r1
 800563a:	4649      	mov	r1, r9
 800563c:	eb43 0b01 	adc.w	fp, r3, r1
 8005640:	f04f 0200 	mov.w	r2, #0
 8005644:	f04f 0300 	mov.w	r3, #0
 8005648:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800564c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005650:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005654:	4692      	mov	sl, r2
 8005656:	469b      	mov	fp, r3
 8005658:	4643      	mov	r3, r8
 800565a:	eb1a 0303 	adds.w	r3, sl, r3
 800565e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005662:	464b      	mov	r3, r9
 8005664:	eb4b 0303 	adc.w	r3, fp, r3
 8005668:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800566c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005678:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800567c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005680:	460b      	mov	r3, r1
 8005682:	18db      	adds	r3, r3, r3
 8005684:	643b      	str	r3, [r7, #64]	; 0x40
 8005686:	4613      	mov	r3, r2
 8005688:	eb42 0303 	adc.w	r3, r2, r3
 800568c:	647b      	str	r3, [r7, #68]	; 0x44
 800568e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005692:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005696:	f7fb faf7 	bl	8000c88 <__aeabi_uldivmod>
 800569a:	4602      	mov	r2, r0
 800569c:	460b      	mov	r3, r1
 800569e:	4611      	mov	r1, r2
 80056a0:	4b3b      	ldr	r3, [pc, #236]	; (8005790 <UART_SetConfig+0x2d4>)
 80056a2:	fba3 2301 	umull	r2, r3, r3, r1
 80056a6:	095b      	lsrs	r3, r3, #5
 80056a8:	2264      	movs	r2, #100	; 0x64
 80056aa:	fb02 f303 	mul.w	r3, r2, r3
 80056ae:	1acb      	subs	r3, r1, r3
 80056b0:	00db      	lsls	r3, r3, #3
 80056b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80056b6:	4b36      	ldr	r3, [pc, #216]	; (8005790 <UART_SetConfig+0x2d4>)
 80056b8:	fba3 2302 	umull	r2, r3, r3, r2
 80056bc:	095b      	lsrs	r3, r3, #5
 80056be:	005b      	lsls	r3, r3, #1
 80056c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056c4:	441c      	add	r4, r3
 80056c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056ca:	2200      	movs	r2, #0
 80056cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80056d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80056d8:	4642      	mov	r2, r8
 80056da:	464b      	mov	r3, r9
 80056dc:	1891      	adds	r1, r2, r2
 80056de:	63b9      	str	r1, [r7, #56]	; 0x38
 80056e0:	415b      	adcs	r3, r3
 80056e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80056e8:	4641      	mov	r1, r8
 80056ea:	1851      	adds	r1, r2, r1
 80056ec:	6339      	str	r1, [r7, #48]	; 0x30
 80056ee:	4649      	mov	r1, r9
 80056f0:	414b      	adcs	r3, r1
 80056f2:	637b      	str	r3, [r7, #52]	; 0x34
 80056f4:	f04f 0200 	mov.w	r2, #0
 80056f8:	f04f 0300 	mov.w	r3, #0
 80056fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005700:	4659      	mov	r1, fp
 8005702:	00cb      	lsls	r3, r1, #3
 8005704:	4651      	mov	r1, sl
 8005706:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800570a:	4651      	mov	r1, sl
 800570c:	00ca      	lsls	r2, r1, #3
 800570e:	4610      	mov	r0, r2
 8005710:	4619      	mov	r1, r3
 8005712:	4603      	mov	r3, r0
 8005714:	4642      	mov	r2, r8
 8005716:	189b      	adds	r3, r3, r2
 8005718:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800571c:	464b      	mov	r3, r9
 800571e:	460a      	mov	r2, r1
 8005720:	eb42 0303 	adc.w	r3, r2, r3
 8005724:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005734:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005738:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800573c:	460b      	mov	r3, r1
 800573e:	18db      	adds	r3, r3, r3
 8005740:	62bb      	str	r3, [r7, #40]	; 0x28
 8005742:	4613      	mov	r3, r2
 8005744:	eb42 0303 	adc.w	r3, r2, r3
 8005748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800574a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800574e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005752:	f7fb fa99 	bl	8000c88 <__aeabi_uldivmod>
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	4b0d      	ldr	r3, [pc, #52]	; (8005790 <UART_SetConfig+0x2d4>)
 800575c:	fba3 1302 	umull	r1, r3, r3, r2
 8005760:	095b      	lsrs	r3, r3, #5
 8005762:	2164      	movs	r1, #100	; 0x64
 8005764:	fb01 f303 	mul.w	r3, r1, r3
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	3332      	adds	r3, #50	; 0x32
 800576e:	4a08      	ldr	r2, [pc, #32]	; (8005790 <UART_SetConfig+0x2d4>)
 8005770:	fba2 2303 	umull	r2, r3, r2, r3
 8005774:	095b      	lsrs	r3, r3, #5
 8005776:	f003 0207 	and.w	r2, r3, #7
 800577a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4422      	add	r2, r4
 8005782:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005784:	e105      	b.n	8005992 <UART_SetConfig+0x4d6>
 8005786:	bf00      	nop
 8005788:	40011000 	.word	0x40011000
 800578c:	40011400 	.word	0x40011400
 8005790:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005794:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005798:	2200      	movs	r2, #0
 800579a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800579e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80057a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80057a6:	4642      	mov	r2, r8
 80057a8:	464b      	mov	r3, r9
 80057aa:	1891      	adds	r1, r2, r2
 80057ac:	6239      	str	r1, [r7, #32]
 80057ae:	415b      	adcs	r3, r3
 80057b0:	627b      	str	r3, [r7, #36]	; 0x24
 80057b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057b6:	4641      	mov	r1, r8
 80057b8:	1854      	adds	r4, r2, r1
 80057ba:	4649      	mov	r1, r9
 80057bc:	eb43 0501 	adc.w	r5, r3, r1
 80057c0:	f04f 0200 	mov.w	r2, #0
 80057c4:	f04f 0300 	mov.w	r3, #0
 80057c8:	00eb      	lsls	r3, r5, #3
 80057ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057ce:	00e2      	lsls	r2, r4, #3
 80057d0:	4614      	mov	r4, r2
 80057d2:	461d      	mov	r5, r3
 80057d4:	4643      	mov	r3, r8
 80057d6:	18e3      	adds	r3, r4, r3
 80057d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80057dc:	464b      	mov	r3, r9
 80057de:	eb45 0303 	adc.w	r3, r5, r3
 80057e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80057e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057f6:	f04f 0200 	mov.w	r2, #0
 80057fa:	f04f 0300 	mov.w	r3, #0
 80057fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005802:	4629      	mov	r1, r5
 8005804:	008b      	lsls	r3, r1, #2
 8005806:	4621      	mov	r1, r4
 8005808:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800580c:	4621      	mov	r1, r4
 800580e:	008a      	lsls	r2, r1, #2
 8005810:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005814:	f7fb fa38 	bl	8000c88 <__aeabi_uldivmod>
 8005818:	4602      	mov	r2, r0
 800581a:	460b      	mov	r3, r1
 800581c:	4b60      	ldr	r3, [pc, #384]	; (80059a0 <UART_SetConfig+0x4e4>)
 800581e:	fba3 2302 	umull	r2, r3, r3, r2
 8005822:	095b      	lsrs	r3, r3, #5
 8005824:	011c      	lsls	r4, r3, #4
 8005826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800582a:	2200      	movs	r2, #0
 800582c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005830:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005834:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005838:	4642      	mov	r2, r8
 800583a:	464b      	mov	r3, r9
 800583c:	1891      	adds	r1, r2, r2
 800583e:	61b9      	str	r1, [r7, #24]
 8005840:	415b      	adcs	r3, r3
 8005842:	61fb      	str	r3, [r7, #28]
 8005844:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005848:	4641      	mov	r1, r8
 800584a:	1851      	adds	r1, r2, r1
 800584c:	6139      	str	r1, [r7, #16]
 800584e:	4649      	mov	r1, r9
 8005850:	414b      	adcs	r3, r1
 8005852:	617b      	str	r3, [r7, #20]
 8005854:	f04f 0200 	mov.w	r2, #0
 8005858:	f04f 0300 	mov.w	r3, #0
 800585c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005860:	4659      	mov	r1, fp
 8005862:	00cb      	lsls	r3, r1, #3
 8005864:	4651      	mov	r1, sl
 8005866:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800586a:	4651      	mov	r1, sl
 800586c:	00ca      	lsls	r2, r1, #3
 800586e:	4610      	mov	r0, r2
 8005870:	4619      	mov	r1, r3
 8005872:	4603      	mov	r3, r0
 8005874:	4642      	mov	r2, r8
 8005876:	189b      	adds	r3, r3, r2
 8005878:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800587c:	464b      	mov	r3, r9
 800587e:	460a      	mov	r2, r1
 8005880:	eb42 0303 	adc.w	r3, r2, r3
 8005884:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	67bb      	str	r3, [r7, #120]	; 0x78
 8005892:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005894:	f04f 0200 	mov.w	r2, #0
 8005898:	f04f 0300 	mov.w	r3, #0
 800589c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80058a0:	4649      	mov	r1, r9
 80058a2:	008b      	lsls	r3, r1, #2
 80058a4:	4641      	mov	r1, r8
 80058a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058aa:	4641      	mov	r1, r8
 80058ac:	008a      	lsls	r2, r1, #2
 80058ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80058b2:	f7fb f9e9 	bl	8000c88 <__aeabi_uldivmod>
 80058b6:	4602      	mov	r2, r0
 80058b8:	460b      	mov	r3, r1
 80058ba:	4b39      	ldr	r3, [pc, #228]	; (80059a0 <UART_SetConfig+0x4e4>)
 80058bc:	fba3 1302 	umull	r1, r3, r3, r2
 80058c0:	095b      	lsrs	r3, r3, #5
 80058c2:	2164      	movs	r1, #100	; 0x64
 80058c4:	fb01 f303 	mul.w	r3, r1, r3
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	011b      	lsls	r3, r3, #4
 80058cc:	3332      	adds	r3, #50	; 0x32
 80058ce:	4a34      	ldr	r2, [pc, #208]	; (80059a0 <UART_SetConfig+0x4e4>)
 80058d0:	fba2 2303 	umull	r2, r3, r2, r3
 80058d4:	095b      	lsrs	r3, r3, #5
 80058d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058da:	441c      	add	r4, r3
 80058dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058e0:	2200      	movs	r2, #0
 80058e2:	673b      	str	r3, [r7, #112]	; 0x70
 80058e4:	677a      	str	r2, [r7, #116]	; 0x74
 80058e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80058ea:	4642      	mov	r2, r8
 80058ec:	464b      	mov	r3, r9
 80058ee:	1891      	adds	r1, r2, r2
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	415b      	adcs	r3, r3
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058fa:	4641      	mov	r1, r8
 80058fc:	1851      	adds	r1, r2, r1
 80058fe:	6039      	str	r1, [r7, #0]
 8005900:	4649      	mov	r1, r9
 8005902:	414b      	adcs	r3, r1
 8005904:	607b      	str	r3, [r7, #4]
 8005906:	f04f 0200 	mov.w	r2, #0
 800590a:	f04f 0300 	mov.w	r3, #0
 800590e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005912:	4659      	mov	r1, fp
 8005914:	00cb      	lsls	r3, r1, #3
 8005916:	4651      	mov	r1, sl
 8005918:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800591c:	4651      	mov	r1, sl
 800591e:	00ca      	lsls	r2, r1, #3
 8005920:	4610      	mov	r0, r2
 8005922:	4619      	mov	r1, r3
 8005924:	4603      	mov	r3, r0
 8005926:	4642      	mov	r2, r8
 8005928:	189b      	adds	r3, r3, r2
 800592a:	66bb      	str	r3, [r7, #104]	; 0x68
 800592c:	464b      	mov	r3, r9
 800592e:	460a      	mov	r2, r1
 8005930:	eb42 0303 	adc.w	r3, r2, r3
 8005934:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	663b      	str	r3, [r7, #96]	; 0x60
 8005940:	667a      	str	r2, [r7, #100]	; 0x64
 8005942:	f04f 0200 	mov.w	r2, #0
 8005946:	f04f 0300 	mov.w	r3, #0
 800594a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800594e:	4649      	mov	r1, r9
 8005950:	008b      	lsls	r3, r1, #2
 8005952:	4641      	mov	r1, r8
 8005954:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005958:	4641      	mov	r1, r8
 800595a:	008a      	lsls	r2, r1, #2
 800595c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005960:	f7fb f992 	bl	8000c88 <__aeabi_uldivmod>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	4b0d      	ldr	r3, [pc, #52]	; (80059a0 <UART_SetConfig+0x4e4>)
 800596a:	fba3 1302 	umull	r1, r3, r3, r2
 800596e:	095b      	lsrs	r3, r3, #5
 8005970:	2164      	movs	r1, #100	; 0x64
 8005972:	fb01 f303 	mul.w	r3, r1, r3
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	011b      	lsls	r3, r3, #4
 800597a:	3332      	adds	r3, #50	; 0x32
 800597c:	4a08      	ldr	r2, [pc, #32]	; (80059a0 <UART_SetConfig+0x4e4>)
 800597e:	fba2 2303 	umull	r2, r3, r2, r3
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	f003 020f 	and.w	r2, r3, #15
 8005988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4422      	add	r2, r4
 8005990:	609a      	str	r2, [r3, #8]
}
 8005992:	bf00      	nop
 8005994:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005998:	46bd      	mov	sp, r7
 800599a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800599e:	bf00      	nop
 80059a0:	51eb851f 	.word	0x51eb851f

080059a4 <__errno>:
 80059a4:	4b01      	ldr	r3, [pc, #4]	; (80059ac <__errno+0x8>)
 80059a6:	6818      	ldr	r0, [r3, #0]
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	2000000c 	.word	0x2000000c

080059b0 <__libc_init_array>:
 80059b0:	b570      	push	{r4, r5, r6, lr}
 80059b2:	4d0d      	ldr	r5, [pc, #52]	; (80059e8 <__libc_init_array+0x38>)
 80059b4:	4c0d      	ldr	r4, [pc, #52]	; (80059ec <__libc_init_array+0x3c>)
 80059b6:	1b64      	subs	r4, r4, r5
 80059b8:	10a4      	asrs	r4, r4, #2
 80059ba:	2600      	movs	r6, #0
 80059bc:	42a6      	cmp	r6, r4
 80059be:	d109      	bne.n	80059d4 <__libc_init_array+0x24>
 80059c0:	4d0b      	ldr	r5, [pc, #44]	; (80059f0 <__libc_init_array+0x40>)
 80059c2:	4c0c      	ldr	r4, [pc, #48]	; (80059f4 <__libc_init_array+0x44>)
 80059c4:	f002 ff02 	bl	80087cc <_init>
 80059c8:	1b64      	subs	r4, r4, r5
 80059ca:	10a4      	asrs	r4, r4, #2
 80059cc:	2600      	movs	r6, #0
 80059ce:	42a6      	cmp	r6, r4
 80059d0:	d105      	bne.n	80059de <__libc_init_array+0x2e>
 80059d2:	bd70      	pop	{r4, r5, r6, pc}
 80059d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d8:	4798      	blx	r3
 80059da:	3601      	adds	r6, #1
 80059dc:	e7ee      	b.n	80059bc <__libc_init_array+0xc>
 80059de:	f855 3b04 	ldr.w	r3, [r5], #4
 80059e2:	4798      	blx	r3
 80059e4:	3601      	adds	r6, #1
 80059e6:	e7f2      	b.n	80059ce <__libc_init_array+0x1e>
 80059e8:	08008c24 	.word	0x08008c24
 80059ec:	08008c24 	.word	0x08008c24
 80059f0:	08008c24 	.word	0x08008c24
 80059f4:	08008c28 	.word	0x08008c28

080059f8 <memcpy>:
 80059f8:	440a      	add	r2, r1
 80059fa:	4291      	cmp	r1, r2
 80059fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005a00:	d100      	bne.n	8005a04 <memcpy+0xc>
 8005a02:	4770      	bx	lr
 8005a04:	b510      	push	{r4, lr}
 8005a06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a0e:	4291      	cmp	r1, r2
 8005a10:	d1f9      	bne.n	8005a06 <memcpy+0xe>
 8005a12:	bd10      	pop	{r4, pc}

08005a14 <memset>:
 8005a14:	4402      	add	r2, r0
 8005a16:	4603      	mov	r3, r0
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d100      	bne.n	8005a1e <memset+0xa>
 8005a1c:	4770      	bx	lr
 8005a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a22:	e7f9      	b.n	8005a18 <memset+0x4>

08005a24 <__cvt>:
 8005a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a28:	ec55 4b10 	vmov	r4, r5, d0
 8005a2c:	2d00      	cmp	r5, #0
 8005a2e:	460e      	mov	r6, r1
 8005a30:	4619      	mov	r1, r3
 8005a32:	462b      	mov	r3, r5
 8005a34:	bfbb      	ittet	lt
 8005a36:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005a3a:	461d      	movlt	r5, r3
 8005a3c:	2300      	movge	r3, #0
 8005a3e:	232d      	movlt	r3, #45	; 0x2d
 8005a40:	700b      	strb	r3, [r1, #0]
 8005a42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a44:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005a48:	4691      	mov	r9, r2
 8005a4a:	f023 0820 	bic.w	r8, r3, #32
 8005a4e:	bfbc      	itt	lt
 8005a50:	4622      	movlt	r2, r4
 8005a52:	4614      	movlt	r4, r2
 8005a54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a58:	d005      	beq.n	8005a66 <__cvt+0x42>
 8005a5a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005a5e:	d100      	bne.n	8005a62 <__cvt+0x3e>
 8005a60:	3601      	adds	r6, #1
 8005a62:	2102      	movs	r1, #2
 8005a64:	e000      	b.n	8005a68 <__cvt+0x44>
 8005a66:	2103      	movs	r1, #3
 8005a68:	ab03      	add	r3, sp, #12
 8005a6a:	9301      	str	r3, [sp, #4]
 8005a6c:	ab02      	add	r3, sp, #8
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	ec45 4b10 	vmov	d0, r4, r5
 8005a74:	4653      	mov	r3, sl
 8005a76:	4632      	mov	r2, r6
 8005a78:	f000 fcea 	bl	8006450 <_dtoa_r>
 8005a7c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005a80:	4607      	mov	r7, r0
 8005a82:	d102      	bne.n	8005a8a <__cvt+0x66>
 8005a84:	f019 0f01 	tst.w	r9, #1
 8005a88:	d022      	beq.n	8005ad0 <__cvt+0xac>
 8005a8a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a8e:	eb07 0906 	add.w	r9, r7, r6
 8005a92:	d110      	bne.n	8005ab6 <__cvt+0x92>
 8005a94:	783b      	ldrb	r3, [r7, #0]
 8005a96:	2b30      	cmp	r3, #48	; 0x30
 8005a98:	d10a      	bne.n	8005ab0 <__cvt+0x8c>
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	4629      	mov	r1, r5
 8005aa2:	f7fb f831 	bl	8000b08 <__aeabi_dcmpeq>
 8005aa6:	b918      	cbnz	r0, 8005ab0 <__cvt+0x8c>
 8005aa8:	f1c6 0601 	rsb	r6, r6, #1
 8005aac:	f8ca 6000 	str.w	r6, [sl]
 8005ab0:	f8da 3000 	ldr.w	r3, [sl]
 8005ab4:	4499      	add	r9, r3
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	2300      	movs	r3, #0
 8005aba:	4620      	mov	r0, r4
 8005abc:	4629      	mov	r1, r5
 8005abe:	f7fb f823 	bl	8000b08 <__aeabi_dcmpeq>
 8005ac2:	b108      	cbz	r0, 8005ac8 <__cvt+0xa4>
 8005ac4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ac8:	2230      	movs	r2, #48	; 0x30
 8005aca:	9b03      	ldr	r3, [sp, #12]
 8005acc:	454b      	cmp	r3, r9
 8005ace:	d307      	bcc.n	8005ae0 <__cvt+0xbc>
 8005ad0:	9b03      	ldr	r3, [sp, #12]
 8005ad2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ad4:	1bdb      	subs	r3, r3, r7
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	6013      	str	r3, [r2, #0]
 8005ada:	b004      	add	sp, #16
 8005adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae0:	1c59      	adds	r1, r3, #1
 8005ae2:	9103      	str	r1, [sp, #12]
 8005ae4:	701a      	strb	r2, [r3, #0]
 8005ae6:	e7f0      	b.n	8005aca <__cvt+0xa6>

08005ae8 <__exponent>:
 8005ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005aea:	4603      	mov	r3, r0
 8005aec:	2900      	cmp	r1, #0
 8005aee:	bfb8      	it	lt
 8005af0:	4249      	neglt	r1, r1
 8005af2:	f803 2b02 	strb.w	r2, [r3], #2
 8005af6:	bfb4      	ite	lt
 8005af8:	222d      	movlt	r2, #45	; 0x2d
 8005afa:	222b      	movge	r2, #43	; 0x2b
 8005afc:	2909      	cmp	r1, #9
 8005afe:	7042      	strb	r2, [r0, #1]
 8005b00:	dd2a      	ble.n	8005b58 <__exponent+0x70>
 8005b02:	f10d 0407 	add.w	r4, sp, #7
 8005b06:	46a4      	mov	ip, r4
 8005b08:	270a      	movs	r7, #10
 8005b0a:	46a6      	mov	lr, r4
 8005b0c:	460a      	mov	r2, r1
 8005b0e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005b12:	fb07 1516 	mls	r5, r7, r6, r1
 8005b16:	3530      	adds	r5, #48	; 0x30
 8005b18:	2a63      	cmp	r2, #99	; 0x63
 8005b1a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005b1e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005b22:	4631      	mov	r1, r6
 8005b24:	dcf1      	bgt.n	8005b0a <__exponent+0x22>
 8005b26:	3130      	adds	r1, #48	; 0x30
 8005b28:	f1ae 0502 	sub.w	r5, lr, #2
 8005b2c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005b30:	1c44      	adds	r4, r0, #1
 8005b32:	4629      	mov	r1, r5
 8005b34:	4561      	cmp	r1, ip
 8005b36:	d30a      	bcc.n	8005b4e <__exponent+0x66>
 8005b38:	f10d 0209 	add.w	r2, sp, #9
 8005b3c:	eba2 020e 	sub.w	r2, r2, lr
 8005b40:	4565      	cmp	r5, ip
 8005b42:	bf88      	it	hi
 8005b44:	2200      	movhi	r2, #0
 8005b46:	4413      	add	r3, r2
 8005b48:	1a18      	subs	r0, r3, r0
 8005b4a:	b003      	add	sp, #12
 8005b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b52:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005b56:	e7ed      	b.n	8005b34 <__exponent+0x4c>
 8005b58:	2330      	movs	r3, #48	; 0x30
 8005b5a:	3130      	adds	r1, #48	; 0x30
 8005b5c:	7083      	strb	r3, [r0, #2]
 8005b5e:	70c1      	strb	r1, [r0, #3]
 8005b60:	1d03      	adds	r3, r0, #4
 8005b62:	e7f1      	b.n	8005b48 <__exponent+0x60>

08005b64 <_printf_float>:
 8005b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b68:	ed2d 8b02 	vpush	{d8}
 8005b6c:	b08d      	sub	sp, #52	; 0x34
 8005b6e:	460c      	mov	r4, r1
 8005b70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005b74:	4616      	mov	r6, r2
 8005b76:	461f      	mov	r7, r3
 8005b78:	4605      	mov	r5, r0
 8005b7a:	f001 fa57 	bl	800702c <_localeconv_r>
 8005b7e:	f8d0 a000 	ldr.w	sl, [r0]
 8005b82:	4650      	mov	r0, sl
 8005b84:	f7fa fb44 	bl	8000210 <strlen>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	930a      	str	r3, [sp, #40]	; 0x28
 8005b8c:	6823      	ldr	r3, [r4, #0]
 8005b8e:	9305      	str	r3, [sp, #20]
 8005b90:	f8d8 3000 	ldr.w	r3, [r8]
 8005b94:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005b98:	3307      	adds	r3, #7
 8005b9a:	f023 0307 	bic.w	r3, r3, #7
 8005b9e:	f103 0208 	add.w	r2, r3, #8
 8005ba2:	f8c8 2000 	str.w	r2, [r8]
 8005ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005baa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005bae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005bb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005bb6:	9307      	str	r3, [sp, #28]
 8005bb8:	f8cd 8018 	str.w	r8, [sp, #24]
 8005bbc:	ee08 0a10 	vmov	s16, r0
 8005bc0:	4b9f      	ldr	r3, [pc, #636]	; (8005e40 <_printf_float+0x2dc>)
 8005bc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bca:	f7fa ffcf 	bl	8000b6c <__aeabi_dcmpun>
 8005bce:	bb88      	cbnz	r0, 8005c34 <_printf_float+0xd0>
 8005bd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bd4:	4b9a      	ldr	r3, [pc, #616]	; (8005e40 <_printf_float+0x2dc>)
 8005bd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bda:	f7fa ffa9 	bl	8000b30 <__aeabi_dcmple>
 8005bde:	bb48      	cbnz	r0, 8005c34 <_printf_float+0xd0>
 8005be0:	2200      	movs	r2, #0
 8005be2:	2300      	movs	r3, #0
 8005be4:	4640      	mov	r0, r8
 8005be6:	4649      	mov	r1, r9
 8005be8:	f7fa ff98 	bl	8000b1c <__aeabi_dcmplt>
 8005bec:	b110      	cbz	r0, 8005bf4 <_printf_float+0x90>
 8005bee:	232d      	movs	r3, #45	; 0x2d
 8005bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bf4:	4b93      	ldr	r3, [pc, #588]	; (8005e44 <_printf_float+0x2e0>)
 8005bf6:	4894      	ldr	r0, [pc, #592]	; (8005e48 <_printf_float+0x2e4>)
 8005bf8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005bfc:	bf94      	ite	ls
 8005bfe:	4698      	movls	r8, r3
 8005c00:	4680      	movhi	r8, r0
 8005c02:	2303      	movs	r3, #3
 8005c04:	6123      	str	r3, [r4, #16]
 8005c06:	9b05      	ldr	r3, [sp, #20]
 8005c08:	f023 0204 	bic.w	r2, r3, #4
 8005c0c:	6022      	str	r2, [r4, #0]
 8005c0e:	f04f 0900 	mov.w	r9, #0
 8005c12:	9700      	str	r7, [sp, #0]
 8005c14:	4633      	mov	r3, r6
 8005c16:	aa0b      	add	r2, sp, #44	; 0x2c
 8005c18:	4621      	mov	r1, r4
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	f000 f9d8 	bl	8005fd0 <_printf_common>
 8005c20:	3001      	adds	r0, #1
 8005c22:	f040 8090 	bne.w	8005d46 <_printf_float+0x1e2>
 8005c26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c2a:	b00d      	add	sp, #52	; 0x34
 8005c2c:	ecbd 8b02 	vpop	{d8}
 8005c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c34:	4642      	mov	r2, r8
 8005c36:	464b      	mov	r3, r9
 8005c38:	4640      	mov	r0, r8
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	f7fa ff96 	bl	8000b6c <__aeabi_dcmpun>
 8005c40:	b140      	cbz	r0, 8005c54 <_printf_float+0xf0>
 8005c42:	464b      	mov	r3, r9
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	bfbc      	itt	lt
 8005c48:	232d      	movlt	r3, #45	; 0x2d
 8005c4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005c4e:	487f      	ldr	r0, [pc, #508]	; (8005e4c <_printf_float+0x2e8>)
 8005c50:	4b7f      	ldr	r3, [pc, #508]	; (8005e50 <_printf_float+0x2ec>)
 8005c52:	e7d1      	b.n	8005bf8 <_printf_float+0x94>
 8005c54:	6863      	ldr	r3, [r4, #4]
 8005c56:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005c5a:	9206      	str	r2, [sp, #24]
 8005c5c:	1c5a      	adds	r2, r3, #1
 8005c5e:	d13f      	bne.n	8005ce0 <_printf_float+0x17c>
 8005c60:	2306      	movs	r3, #6
 8005c62:	6063      	str	r3, [r4, #4]
 8005c64:	9b05      	ldr	r3, [sp, #20]
 8005c66:	6861      	ldr	r1, [r4, #4]
 8005c68:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	9303      	str	r3, [sp, #12]
 8005c70:	ab0a      	add	r3, sp, #40	; 0x28
 8005c72:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005c76:	ab09      	add	r3, sp, #36	; 0x24
 8005c78:	ec49 8b10 	vmov	d0, r8, r9
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	6022      	str	r2, [r4, #0]
 8005c80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005c84:	4628      	mov	r0, r5
 8005c86:	f7ff fecd 	bl	8005a24 <__cvt>
 8005c8a:	9b06      	ldr	r3, [sp, #24]
 8005c8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c8e:	2b47      	cmp	r3, #71	; 0x47
 8005c90:	4680      	mov	r8, r0
 8005c92:	d108      	bne.n	8005ca6 <_printf_float+0x142>
 8005c94:	1cc8      	adds	r0, r1, #3
 8005c96:	db02      	blt.n	8005c9e <_printf_float+0x13a>
 8005c98:	6863      	ldr	r3, [r4, #4]
 8005c9a:	4299      	cmp	r1, r3
 8005c9c:	dd41      	ble.n	8005d22 <_printf_float+0x1be>
 8005c9e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005ca2:	fa5f fb8b 	uxtb.w	fp, fp
 8005ca6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005caa:	d820      	bhi.n	8005cee <_printf_float+0x18a>
 8005cac:	3901      	subs	r1, #1
 8005cae:	465a      	mov	r2, fp
 8005cb0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005cb4:	9109      	str	r1, [sp, #36]	; 0x24
 8005cb6:	f7ff ff17 	bl	8005ae8 <__exponent>
 8005cba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cbc:	1813      	adds	r3, r2, r0
 8005cbe:	2a01      	cmp	r2, #1
 8005cc0:	4681      	mov	r9, r0
 8005cc2:	6123      	str	r3, [r4, #16]
 8005cc4:	dc02      	bgt.n	8005ccc <_printf_float+0x168>
 8005cc6:	6822      	ldr	r2, [r4, #0]
 8005cc8:	07d2      	lsls	r2, r2, #31
 8005cca:	d501      	bpl.n	8005cd0 <_printf_float+0x16c>
 8005ccc:	3301      	adds	r3, #1
 8005cce:	6123      	str	r3, [r4, #16]
 8005cd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d09c      	beq.n	8005c12 <_printf_float+0xae>
 8005cd8:	232d      	movs	r3, #45	; 0x2d
 8005cda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cde:	e798      	b.n	8005c12 <_printf_float+0xae>
 8005ce0:	9a06      	ldr	r2, [sp, #24]
 8005ce2:	2a47      	cmp	r2, #71	; 0x47
 8005ce4:	d1be      	bne.n	8005c64 <_printf_float+0x100>
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1bc      	bne.n	8005c64 <_printf_float+0x100>
 8005cea:	2301      	movs	r3, #1
 8005cec:	e7b9      	b.n	8005c62 <_printf_float+0xfe>
 8005cee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005cf2:	d118      	bne.n	8005d26 <_printf_float+0x1c2>
 8005cf4:	2900      	cmp	r1, #0
 8005cf6:	6863      	ldr	r3, [r4, #4]
 8005cf8:	dd0b      	ble.n	8005d12 <_printf_float+0x1ae>
 8005cfa:	6121      	str	r1, [r4, #16]
 8005cfc:	b913      	cbnz	r3, 8005d04 <_printf_float+0x1a0>
 8005cfe:	6822      	ldr	r2, [r4, #0]
 8005d00:	07d0      	lsls	r0, r2, #31
 8005d02:	d502      	bpl.n	8005d0a <_printf_float+0x1a6>
 8005d04:	3301      	adds	r3, #1
 8005d06:	440b      	add	r3, r1
 8005d08:	6123      	str	r3, [r4, #16]
 8005d0a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d0c:	f04f 0900 	mov.w	r9, #0
 8005d10:	e7de      	b.n	8005cd0 <_printf_float+0x16c>
 8005d12:	b913      	cbnz	r3, 8005d1a <_printf_float+0x1b6>
 8005d14:	6822      	ldr	r2, [r4, #0]
 8005d16:	07d2      	lsls	r2, r2, #31
 8005d18:	d501      	bpl.n	8005d1e <_printf_float+0x1ba>
 8005d1a:	3302      	adds	r3, #2
 8005d1c:	e7f4      	b.n	8005d08 <_printf_float+0x1a4>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e7f2      	b.n	8005d08 <_printf_float+0x1a4>
 8005d22:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d28:	4299      	cmp	r1, r3
 8005d2a:	db05      	blt.n	8005d38 <_printf_float+0x1d4>
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	6121      	str	r1, [r4, #16]
 8005d30:	07d8      	lsls	r0, r3, #31
 8005d32:	d5ea      	bpl.n	8005d0a <_printf_float+0x1a6>
 8005d34:	1c4b      	adds	r3, r1, #1
 8005d36:	e7e7      	b.n	8005d08 <_printf_float+0x1a4>
 8005d38:	2900      	cmp	r1, #0
 8005d3a:	bfd4      	ite	le
 8005d3c:	f1c1 0202 	rsble	r2, r1, #2
 8005d40:	2201      	movgt	r2, #1
 8005d42:	4413      	add	r3, r2
 8005d44:	e7e0      	b.n	8005d08 <_printf_float+0x1a4>
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	055a      	lsls	r2, r3, #21
 8005d4a:	d407      	bmi.n	8005d5c <_printf_float+0x1f8>
 8005d4c:	6923      	ldr	r3, [r4, #16]
 8005d4e:	4642      	mov	r2, r8
 8005d50:	4631      	mov	r1, r6
 8005d52:	4628      	mov	r0, r5
 8005d54:	47b8      	blx	r7
 8005d56:	3001      	adds	r0, #1
 8005d58:	d12c      	bne.n	8005db4 <_printf_float+0x250>
 8005d5a:	e764      	b.n	8005c26 <_printf_float+0xc2>
 8005d5c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d60:	f240 80e0 	bls.w	8005f24 <_printf_float+0x3c0>
 8005d64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d68:	2200      	movs	r2, #0
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	f7fa fecc 	bl	8000b08 <__aeabi_dcmpeq>
 8005d70:	2800      	cmp	r0, #0
 8005d72:	d034      	beq.n	8005dde <_printf_float+0x27a>
 8005d74:	4a37      	ldr	r2, [pc, #220]	; (8005e54 <_printf_float+0x2f0>)
 8005d76:	2301      	movs	r3, #1
 8005d78:	4631      	mov	r1, r6
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	47b8      	blx	r7
 8005d7e:	3001      	adds	r0, #1
 8005d80:	f43f af51 	beq.w	8005c26 <_printf_float+0xc2>
 8005d84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	db02      	blt.n	8005d92 <_printf_float+0x22e>
 8005d8c:	6823      	ldr	r3, [r4, #0]
 8005d8e:	07d8      	lsls	r0, r3, #31
 8005d90:	d510      	bpl.n	8005db4 <_printf_float+0x250>
 8005d92:	ee18 3a10 	vmov	r3, s16
 8005d96:	4652      	mov	r2, sl
 8005d98:	4631      	mov	r1, r6
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	47b8      	blx	r7
 8005d9e:	3001      	adds	r0, #1
 8005da0:	f43f af41 	beq.w	8005c26 <_printf_float+0xc2>
 8005da4:	f04f 0800 	mov.w	r8, #0
 8005da8:	f104 091a 	add.w	r9, r4, #26
 8005dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dae:	3b01      	subs	r3, #1
 8005db0:	4543      	cmp	r3, r8
 8005db2:	dc09      	bgt.n	8005dc8 <_printf_float+0x264>
 8005db4:	6823      	ldr	r3, [r4, #0]
 8005db6:	079b      	lsls	r3, r3, #30
 8005db8:	f100 8105 	bmi.w	8005fc6 <_printf_float+0x462>
 8005dbc:	68e0      	ldr	r0, [r4, #12]
 8005dbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dc0:	4298      	cmp	r0, r3
 8005dc2:	bfb8      	it	lt
 8005dc4:	4618      	movlt	r0, r3
 8005dc6:	e730      	b.n	8005c2a <_printf_float+0xc6>
 8005dc8:	2301      	movs	r3, #1
 8005dca:	464a      	mov	r2, r9
 8005dcc:	4631      	mov	r1, r6
 8005dce:	4628      	mov	r0, r5
 8005dd0:	47b8      	blx	r7
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	f43f af27 	beq.w	8005c26 <_printf_float+0xc2>
 8005dd8:	f108 0801 	add.w	r8, r8, #1
 8005ddc:	e7e6      	b.n	8005dac <_printf_float+0x248>
 8005dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	dc39      	bgt.n	8005e58 <_printf_float+0x2f4>
 8005de4:	4a1b      	ldr	r2, [pc, #108]	; (8005e54 <_printf_float+0x2f0>)
 8005de6:	2301      	movs	r3, #1
 8005de8:	4631      	mov	r1, r6
 8005dea:	4628      	mov	r0, r5
 8005dec:	47b8      	blx	r7
 8005dee:	3001      	adds	r0, #1
 8005df0:	f43f af19 	beq.w	8005c26 <_printf_float+0xc2>
 8005df4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	d102      	bne.n	8005e02 <_printf_float+0x29e>
 8005dfc:	6823      	ldr	r3, [r4, #0]
 8005dfe:	07d9      	lsls	r1, r3, #31
 8005e00:	d5d8      	bpl.n	8005db4 <_printf_float+0x250>
 8005e02:	ee18 3a10 	vmov	r3, s16
 8005e06:	4652      	mov	r2, sl
 8005e08:	4631      	mov	r1, r6
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	47b8      	blx	r7
 8005e0e:	3001      	adds	r0, #1
 8005e10:	f43f af09 	beq.w	8005c26 <_printf_float+0xc2>
 8005e14:	f04f 0900 	mov.w	r9, #0
 8005e18:	f104 0a1a 	add.w	sl, r4, #26
 8005e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e1e:	425b      	negs	r3, r3
 8005e20:	454b      	cmp	r3, r9
 8005e22:	dc01      	bgt.n	8005e28 <_printf_float+0x2c4>
 8005e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e26:	e792      	b.n	8005d4e <_printf_float+0x1ea>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	4652      	mov	r2, sl
 8005e2c:	4631      	mov	r1, r6
 8005e2e:	4628      	mov	r0, r5
 8005e30:	47b8      	blx	r7
 8005e32:	3001      	adds	r0, #1
 8005e34:	f43f aef7 	beq.w	8005c26 <_printf_float+0xc2>
 8005e38:	f109 0901 	add.w	r9, r9, #1
 8005e3c:	e7ee      	b.n	8005e1c <_printf_float+0x2b8>
 8005e3e:	bf00      	nop
 8005e40:	7fefffff 	.word	0x7fefffff
 8005e44:	08008848 	.word	0x08008848
 8005e48:	0800884c 	.word	0x0800884c
 8005e4c:	08008854 	.word	0x08008854
 8005e50:	08008850 	.word	0x08008850
 8005e54:	08008858 	.word	0x08008858
 8005e58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	bfa8      	it	ge
 8005e60:	461a      	movge	r2, r3
 8005e62:	2a00      	cmp	r2, #0
 8005e64:	4691      	mov	r9, r2
 8005e66:	dc37      	bgt.n	8005ed8 <_printf_float+0x374>
 8005e68:	f04f 0b00 	mov.w	fp, #0
 8005e6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e70:	f104 021a 	add.w	r2, r4, #26
 8005e74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e76:	9305      	str	r3, [sp, #20]
 8005e78:	eba3 0309 	sub.w	r3, r3, r9
 8005e7c:	455b      	cmp	r3, fp
 8005e7e:	dc33      	bgt.n	8005ee8 <_printf_float+0x384>
 8005e80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e84:	429a      	cmp	r2, r3
 8005e86:	db3b      	blt.n	8005f00 <_printf_float+0x39c>
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	07da      	lsls	r2, r3, #31
 8005e8c:	d438      	bmi.n	8005f00 <_printf_float+0x39c>
 8005e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e90:	9a05      	ldr	r2, [sp, #20]
 8005e92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e94:	1a9a      	subs	r2, r3, r2
 8005e96:	eba3 0901 	sub.w	r9, r3, r1
 8005e9a:	4591      	cmp	r9, r2
 8005e9c:	bfa8      	it	ge
 8005e9e:	4691      	movge	r9, r2
 8005ea0:	f1b9 0f00 	cmp.w	r9, #0
 8005ea4:	dc35      	bgt.n	8005f12 <_printf_float+0x3ae>
 8005ea6:	f04f 0800 	mov.w	r8, #0
 8005eaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005eae:	f104 0a1a 	add.w	sl, r4, #26
 8005eb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005eb6:	1a9b      	subs	r3, r3, r2
 8005eb8:	eba3 0309 	sub.w	r3, r3, r9
 8005ebc:	4543      	cmp	r3, r8
 8005ebe:	f77f af79 	ble.w	8005db4 <_printf_float+0x250>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	4652      	mov	r2, sl
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	4628      	mov	r0, r5
 8005eca:	47b8      	blx	r7
 8005ecc:	3001      	adds	r0, #1
 8005ece:	f43f aeaa 	beq.w	8005c26 <_printf_float+0xc2>
 8005ed2:	f108 0801 	add.w	r8, r8, #1
 8005ed6:	e7ec      	b.n	8005eb2 <_printf_float+0x34e>
 8005ed8:	4613      	mov	r3, r2
 8005eda:	4631      	mov	r1, r6
 8005edc:	4642      	mov	r2, r8
 8005ede:	4628      	mov	r0, r5
 8005ee0:	47b8      	blx	r7
 8005ee2:	3001      	adds	r0, #1
 8005ee4:	d1c0      	bne.n	8005e68 <_printf_float+0x304>
 8005ee6:	e69e      	b.n	8005c26 <_printf_float+0xc2>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	4631      	mov	r1, r6
 8005eec:	4628      	mov	r0, r5
 8005eee:	9205      	str	r2, [sp, #20]
 8005ef0:	47b8      	blx	r7
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	f43f ae97 	beq.w	8005c26 <_printf_float+0xc2>
 8005ef8:	9a05      	ldr	r2, [sp, #20]
 8005efa:	f10b 0b01 	add.w	fp, fp, #1
 8005efe:	e7b9      	b.n	8005e74 <_printf_float+0x310>
 8005f00:	ee18 3a10 	vmov	r3, s16
 8005f04:	4652      	mov	r2, sl
 8005f06:	4631      	mov	r1, r6
 8005f08:	4628      	mov	r0, r5
 8005f0a:	47b8      	blx	r7
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	d1be      	bne.n	8005e8e <_printf_float+0x32a>
 8005f10:	e689      	b.n	8005c26 <_printf_float+0xc2>
 8005f12:	9a05      	ldr	r2, [sp, #20]
 8005f14:	464b      	mov	r3, r9
 8005f16:	4442      	add	r2, r8
 8005f18:	4631      	mov	r1, r6
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	47b8      	blx	r7
 8005f1e:	3001      	adds	r0, #1
 8005f20:	d1c1      	bne.n	8005ea6 <_printf_float+0x342>
 8005f22:	e680      	b.n	8005c26 <_printf_float+0xc2>
 8005f24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f26:	2a01      	cmp	r2, #1
 8005f28:	dc01      	bgt.n	8005f2e <_printf_float+0x3ca>
 8005f2a:	07db      	lsls	r3, r3, #31
 8005f2c:	d538      	bpl.n	8005fa0 <_printf_float+0x43c>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	4642      	mov	r2, r8
 8005f32:	4631      	mov	r1, r6
 8005f34:	4628      	mov	r0, r5
 8005f36:	47b8      	blx	r7
 8005f38:	3001      	adds	r0, #1
 8005f3a:	f43f ae74 	beq.w	8005c26 <_printf_float+0xc2>
 8005f3e:	ee18 3a10 	vmov	r3, s16
 8005f42:	4652      	mov	r2, sl
 8005f44:	4631      	mov	r1, r6
 8005f46:	4628      	mov	r0, r5
 8005f48:	47b8      	blx	r7
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	f43f ae6b 	beq.w	8005c26 <_printf_float+0xc2>
 8005f50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f54:	2200      	movs	r2, #0
 8005f56:	2300      	movs	r3, #0
 8005f58:	f7fa fdd6 	bl	8000b08 <__aeabi_dcmpeq>
 8005f5c:	b9d8      	cbnz	r0, 8005f96 <_printf_float+0x432>
 8005f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f60:	f108 0201 	add.w	r2, r8, #1
 8005f64:	3b01      	subs	r3, #1
 8005f66:	4631      	mov	r1, r6
 8005f68:	4628      	mov	r0, r5
 8005f6a:	47b8      	blx	r7
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	d10e      	bne.n	8005f8e <_printf_float+0x42a>
 8005f70:	e659      	b.n	8005c26 <_printf_float+0xc2>
 8005f72:	2301      	movs	r3, #1
 8005f74:	4652      	mov	r2, sl
 8005f76:	4631      	mov	r1, r6
 8005f78:	4628      	mov	r0, r5
 8005f7a:	47b8      	blx	r7
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	f43f ae52 	beq.w	8005c26 <_printf_float+0xc2>
 8005f82:	f108 0801 	add.w	r8, r8, #1
 8005f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	4543      	cmp	r3, r8
 8005f8c:	dcf1      	bgt.n	8005f72 <_printf_float+0x40e>
 8005f8e:	464b      	mov	r3, r9
 8005f90:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005f94:	e6dc      	b.n	8005d50 <_printf_float+0x1ec>
 8005f96:	f04f 0800 	mov.w	r8, #0
 8005f9a:	f104 0a1a 	add.w	sl, r4, #26
 8005f9e:	e7f2      	b.n	8005f86 <_printf_float+0x422>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	4642      	mov	r2, r8
 8005fa4:	e7df      	b.n	8005f66 <_printf_float+0x402>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	464a      	mov	r2, r9
 8005faa:	4631      	mov	r1, r6
 8005fac:	4628      	mov	r0, r5
 8005fae:	47b8      	blx	r7
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	f43f ae38 	beq.w	8005c26 <_printf_float+0xc2>
 8005fb6:	f108 0801 	add.w	r8, r8, #1
 8005fba:	68e3      	ldr	r3, [r4, #12]
 8005fbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fbe:	1a5b      	subs	r3, r3, r1
 8005fc0:	4543      	cmp	r3, r8
 8005fc2:	dcf0      	bgt.n	8005fa6 <_printf_float+0x442>
 8005fc4:	e6fa      	b.n	8005dbc <_printf_float+0x258>
 8005fc6:	f04f 0800 	mov.w	r8, #0
 8005fca:	f104 0919 	add.w	r9, r4, #25
 8005fce:	e7f4      	b.n	8005fba <_printf_float+0x456>

08005fd0 <_printf_common>:
 8005fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd4:	4616      	mov	r6, r2
 8005fd6:	4699      	mov	r9, r3
 8005fd8:	688a      	ldr	r2, [r1, #8]
 8005fda:	690b      	ldr	r3, [r1, #16]
 8005fdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	bfb8      	it	lt
 8005fe4:	4613      	movlt	r3, r2
 8005fe6:	6033      	str	r3, [r6, #0]
 8005fe8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fec:	4607      	mov	r7, r0
 8005fee:	460c      	mov	r4, r1
 8005ff0:	b10a      	cbz	r2, 8005ff6 <_printf_common+0x26>
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	6033      	str	r3, [r6, #0]
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	0699      	lsls	r1, r3, #26
 8005ffa:	bf42      	ittt	mi
 8005ffc:	6833      	ldrmi	r3, [r6, #0]
 8005ffe:	3302      	addmi	r3, #2
 8006000:	6033      	strmi	r3, [r6, #0]
 8006002:	6825      	ldr	r5, [r4, #0]
 8006004:	f015 0506 	ands.w	r5, r5, #6
 8006008:	d106      	bne.n	8006018 <_printf_common+0x48>
 800600a:	f104 0a19 	add.w	sl, r4, #25
 800600e:	68e3      	ldr	r3, [r4, #12]
 8006010:	6832      	ldr	r2, [r6, #0]
 8006012:	1a9b      	subs	r3, r3, r2
 8006014:	42ab      	cmp	r3, r5
 8006016:	dc26      	bgt.n	8006066 <_printf_common+0x96>
 8006018:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800601c:	1e13      	subs	r3, r2, #0
 800601e:	6822      	ldr	r2, [r4, #0]
 8006020:	bf18      	it	ne
 8006022:	2301      	movne	r3, #1
 8006024:	0692      	lsls	r2, r2, #26
 8006026:	d42b      	bmi.n	8006080 <_printf_common+0xb0>
 8006028:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800602c:	4649      	mov	r1, r9
 800602e:	4638      	mov	r0, r7
 8006030:	47c0      	blx	r8
 8006032:	3001      	adds	r0, #1
 8006034:	d01e      	beq.n	8006074 <_printf_common+0xa4>
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	68e5      	ldr	r5, [r4, #12]
 800603a:	6832      	ldr	r2, [r6, #0]
 800603c:	f003 0306 	and.w	r3, r3, #6
 8006040:	2b04      	cmp	r3, #4
 8006042:	bf08      	it	eq
 8006044:	1aad      	subeq	r5, r5, r2
 8006046:	68a3      	ldr	r3, [r4, #8]
 8006048:	6922      	ldr	r2, [r4, #16]
 800604a:	bf0c      	ite	eq
 800604c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006050:	2500      	movne	r5, #0
 8006052:	4293      	cmp	r3, r2
 8006054:	bfc4      	itt	gt
 8006056:	1a9b      	subgt	r3, r3, r2
 8006058:	18ed      	addgt	r5, r5, r3
 800605a:	2600      	movs	r6, #0
 800605c:	341a      	adds	r4, #26
 800605e:	42b5      	cmp	r5, r6
 8006060:	d11a      	bne.n	8006098 <_printf_common+0xc8>
 8006062:	2000      	movs	r0, #0
 8006064:	e008      	b.n	8006078 <_printf_common+0xa8>
 8006066:	2301      	movs	r3, #1
 8006068:	4652      	mov	r2, sl
 800606a:	4649      	mov	r1, r9
 800606c:	4638      	mov	r0, r7
 800606e:	47c0      	blx	r8
 8006070:	3001      	adds	r0, #1
 8006072:	d103      	bne.n	800607c <_printf_common+0xac>
 8006074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800607c:	3501      	adds	r5, #1
 800607e:	e7c6      	b.n	800600e <_printf_common+0x3e>
 8006080:	18e1      	adds	r1, r4, r3
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	2030      	movs	r0, #48	; 0x30
 8006086:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800608a:	4422      	add	r2, r4
 800608c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006090:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006094:	3302      	adds	r3, #2
 8006096:	e7c7      	b.n	8006028 <_printf_common+0x58>
 8006098:	2301      	movs	r3, #1
 800609a:	4622      	mov	r2, r4
 800609c:	4649      	mov	r1, r9
 800609e:	4638      	mov	r0, r7
 80060a0:	47c0      	blx	r8
 80060a2:	3001      	adds	r0, #1
 80060a4:	d0e6      	beq.n	8006074 <_printf_common+0xa4>
 80060a6:	3601      	adds	r6, #1
 80060a8:	e7d9      	b.n	800605e <_printf_common+0x8e>
	...

080060ac <_printf_i>:
 80060ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060b0:	7e0f      	ldrb	r7, [r1, #24]
 80060b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060b4:	2f78      	cmp	r7, #120	; 0x78
 80060b6:	4691      	mov	r9, r2
 80060b8:	4680      	mov	r8, r0
 80060ba:	460c      	mov	r4, r1
 80060bc:	469a      	mov	sl, r3
 80060be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060c2:	d807      	bhi.n	80060d4 <_printf_i+0x28>
 80060c4:	2f62      	cmp	r7, #98	; 0x62
 80060c6:	d80a      	bhi.n	80060de <_printf_i+0x32>
 80060c8:	2f00      	cmp	r7, #0
 80060ca:	f000 80d8 	beq.w	800627e <_printf_i+0x1d2>
 80060ce:	2f58      	cmp	r7, #88	; 0x58
 80060d0:	f000 80a3 	beq.w	800621a <_printf_i+0x16e>
 80060d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060dc:	e03a      	b.n	8006154 <_printf_i+0xa8>
 80060de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060e2:	2b15      	cmp	r3, #21
 80060e4:	d8f6      	bhi.n	80060d4 <_printf_i+0x28>
 80060e6:	a101      	add	r1, pc, #4	; (adr r1, 80060ec <_printf_i+0x40>)
 80060e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060ec:	08006145 	.word	0x08006145
 80060f0:	08006159 	.word	0x08006159
 80060f4:	080060d5 	.word	0x080060d5
 80060f8:	080060d5 	.word	0x080060d5
 80060fc:	080060d5 	.word	0x080060d5
 8006100:	080060d5 	.word	0x080060d5
 8006104:	08006159 	.word	0x08006159
 8006108:	080060d5 	.word	0x080060d5
 800610c:	080060d5 	.word	0x080060d5
 8006110:	080060d5 	.word	0x080060d5
 8006114:	080060d5 	.word	0x080060d5
 8006118:	08006265 	.word	0x08006265
 800611c:	08006189 	.word	0x08006189
 8006120:	08006247 	.word	0x08006247
 8006124:	080060d5 	.word	0x080060d5
 8006128:	080060d5 	.word	0x080060d5
 800612c:	08006287 	.word	0x08006287
 8006130:	080060d5 	.word	0x080060d5
 8006134:	08006189 	.word	0x08006189
 8006138:	080060d5 	.word	0x080060d5
 800613c:	080060d5 	.word	0x080060d5
 8006140:	0800624f 	.word	0x0800624f
 8006144:	682b      	ldr	r3, [r5, #0]
 8006146:	1d1a      	adds	r2, r3, #4
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	602a      	str	r2, [r5, #0]
 800614c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006150:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006154:	2301      	movs	r3, #1
 8006156:	e0a3      	b.n	80062a0 <_printf_i+0x1f4>
 8006158:	6820      	ldr	r0, [r4, #0]
 800615a:	6829      	ldr	r1, [r5, #0]
 800615c:	0606      	lsls	r6, r0, #24
 800615e:	f101 0304 	add.w	r3, r1, #4
 8006162:	d50a      	bpl.n	800617a <_printf_i+0xce>
 8006164:	680e      	ldr	r6, [r1, #0]
 8006166:	602b      	str	r3, [r5, #0]
 8006168:	2e00      	cmp	r6, #0
 800616a:	da03      	bge.n	8006174 <_printf_i+0xc8>
 800616c:	232d      	movs	r3, #45	; 0x2d
 800616e:	4276      	negs	r6, r6
 8006170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006174:	485e      	ldr	r0, [pc, #376]	; (80062f0 <_printf_i+0x244>)
 8006176:	230a      	movs	r3, #10
 8006178:	e019      	b.n	80061ae <_printf_i+0x102>
 800617a:	680e      	ldr	r6, [r1, #0]
 800617c:	602b      	str	r3, [r5, #0]
 800617e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006182:	bf18      	it	ne
 8006184:	b236      	sxthne	r6, r6
 8006186:	e7ef      	b.n	8006168 <_printf_i+0xbc>
 8006188:	682b      	ldr	r3, [r5, #0]
 800618a:	6820      	ldr	r0, [r4, #0]
 800618c:	1d19      	adds	r1, r3, #4
 800618e:	6029      	str	r1, [r5, #0]
 8006190:	0601      	lsls	r1, r0, #24
 8006192:	d501      	bpl.n	8006198 <_printf_i+0xec>
 8006194:	681e      	ldr	r6, [r3, #0]
 8006196:	e002      	b.n	800619e <_printf_i+0xf2>
 8006198:	0646      	lsls	r6, r0, #25
 800619a:	d5fb      	bpl.n	8006194 <_printf_i+0xe8>
 800619c:	881e      	ldrh	r6, [r3, #0]
 800619e:	4854      	ldr	r0, [pc, #336]	; (80062f0 <_printf_i+0x244>)
 80061a0:	2f6f      	cmp	r7, #111	; 0x6f
 80061a2:	bf0c      	ite	eq
 80061a4:	2308      	moveq	r3, #8
 80061a6:	230a      	movne	r3, #10
 80061a8:	2100      	movs	r1, #0
 80061aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061ae:	6865      	ldr	r5, [r4, #4]
 80061b0:	60a5      	str	r5, [r4, #8]
 80061b2:	2d00      	cmp	r5, #0
 80061b4:	bfa2      	ittt	ge
 80061b6:	6821      	ldrge	r1, [r4, #0]
 80061b8:	f021 0104 	bicge.w	r1, r1, #4
 80061bc:	6021      	strge	r1, [r4, #0]
 80061be:	b90e      	cbnz	r6, 80061c4 <_printf_i+0x118>
 80061c0:	2d00      	cmp	r5, #0
 80061c2:	d04d      	beq.n	8006260 <_printf_i+0x1b4>
 80061c4:	4615      	mov	r5, r2
 80061c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80061ca:	fb03 6711 	mls	r7, r3, r1, r6
 80061ce:	5dc7      	ldrb	r7, [r0, r7]
 80061d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061d4:	4637      	mov	r7, r6
 80061d6:	42bb      	cmp	r3, r7
 80061d8:	460e      	mov	r6, r1
 80061da:	d9f4      	bls.n	80061c6 <_printf_i+0x11a>
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d10b      	bne.n	80061f8 <_printf_i+0x14c>
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	07de      	lsls	r6, r3, #31
 80061e4:	d508      	bpl.n	80061f8 <_printf_i+0x14c>
 80061e6:	6923      	ldr	r3, [r4, #16]
 80061e8:	6861      	ldr	r1, [r4, #4]
 80061ea:	4299      	cmp	r1, r3
 80061ec:	bfde      	ittt	le
 80061ee:	2330      	movle	r3, #48	; 0x30
 80061f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061f4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80061f8:	1b52      	subs	r2, r2, r5
 80061fa:	6122      	str	r2, [r4, #16]
 80061fc:	f8cd a000 	str.w	sl, [sp]
 8006200:	464b      	mov	r3, r9
 8006202:	aa03      	add	r2, sp, #12
 8006204:	4621      	mov	r1, r4
 8006206:	4640      	mov	r0, r8
 8006208:	f7ff fee2 	bl	8005fd0 <_printf_common>
 800620c:	3001      	adds	r0, #1
 800620e:	d14c      	bne.n	80062aa <_printf_i+0x1fe>
 8006210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006214:	b004      	add	sp, #16
 8006216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800621a:	4835      	ldr	r0, [pc, #212]	; (80062f0 <_printf_i+0x244>)
 800621c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006220:	6829      	ldr	r1, [r5, #0]
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	f851 6b04 	ldr.w	r6, [r1], #4
 8006228:	6029      	str	r1, [r5, #0]
 800622a:	061d      	lsls	r5, r3, #24
 800622c:	d514      	bpl.n	8006258 <_printf_i+0x1ac>
 800622e:	07df      	lsls	r7, r3, #31
 8006230:	bf44      	itt	mi
 8006232:	f043 0320 	orrmi.w	r3, r3, #32
 8006236:	6023      	strmi	r3, [r4, #0]
 8006238:	b91e      	cbnz	r6, 8006242 <_printf_i+0x196>
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	f023 0320 	bic.w	r3, r3, #32
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	2310      	movs	r3, #16
 8006244:	e7b0      	b.n	80061a8 <_printf_i+0xfc>
 8006246:	6823      	ldr	r3, [r4, #0]
 8006248:	f043 0320 	orr.w	r3, r3, #32
 800624c:	6023      	str	r3, [r4, #0]
 800624e:	2378      	movs	r3, #120	; 0x78
 8006250:	4828      	ldr	r0, [pc, #160]	; (80062f4 <_printf_i+0x248>)
 8006252:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006256:	e7e3      	b.n	8006220 <_printf_i+0x174>
 8006258:	0659      	lsls	r1, r3, #25
 800625a:	bf48      	it	mi
 800625c:	b2b6      	uxthmi	r6, r6
 800625e:	e7e6      	b.n	800622e <_printf_i+0x182>
 8006260:	4615      	mov	r5, r2
 8006262:	e7bb      	b.n	80061dc <_printf_i+0x130>
 8006264:	682b      	ldr	r3, [r5, #0]
 8006266:	6826      	ldr	r6, [r4, #0]
 8006268:	6961      	ldr	r1, [r4, #20]
 800626a:	1d18      	adds	r0, r3, #4
 800626c:	6028      	str	r0, [r5, #0]
 800626e:	0635      	lsls	r5, r6, #24
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	d501      	bpl.n	8006278 <_printf_i+0x1cc>
 8006274:	6019      	str	r1, [r3, #0]
 8006276:	e002      	b.n	800627e <_printf_i+0x1d2>
 8006278:	0670      	lsls	r0, r6, #25
 800627a:	d5fb      	bpl.n	8006274 <_printf_i+0x1c8>
 800627c:	8019      	strh	r1, [r3, #0]
 800627e:	2300      	movs	r3, #0
 8006280:	6123      	str	r3, [r4, #16]
 8006282:	4615      	mov	r5, r2
 8006284:	e7ba      	b.n	80061fc <_printf_i+0x150>
 8006286:	682b      	ldr	r3, [r5, #0]
 8006288:	1d1a      	adds	r2, r3, #4
 800628a:	602a      	str	r2, [r5, #0]
 800628c:	681d      	ldr	r5, [r3, #0]
 800628e:	6862      	ldr	r2, [r4, #4]
 8006290:	2100      	movs	r1, #0
 8006292:	4628      	mov	r0, r5
 8006294:	f7f9 ffc4 	bl	8000220 <memchr>
 8006298:	b108      	cbz	r0, 800629e <_printf_i+0x1f2>
 800629a:	1b40      	subs	r0, r0, r5
 800629c:	6060      	str	r0, [r4, #4]
 800629e:	6863      	ldr	r3, [r4, #4]
 80062a0:	6123      	str	r3, [r4, #16]
 80062a2:	2300      	movs	r3, #0
 80062a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062a8:	e7a8      	b.n	80061fc <_printf_i+0x150>
 80062aa:	6923      	ldr	r3, [r4, #16]
 80062ac:	462a      	mov	r2, r5
 80062ae:	4649      	mov	r1, r9
 80062b0:	4640      	mov	r0, r8
 80062b2:	47d0      	blx	sl
 80062b4:	3001      	adds	r0, #1
 80062b6:	d0ab      	beq.n	8006210 <_printf_i+0x164>
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	079b      	lsls	r3, r3, #30
 80062bc:	d413      	bmi.n	80062e6 <_printf_i+0x23a>
 80062be:	68e0      	ldr	r0, [r4, #12]
 80062c0:	9b03      	ldr	r3, [sp, #12]
 80062c2:	4298      	cmp	r0, r3
 80062c4:	bfb8      	it	lt
 80062c6:	4618      	movlt	r0, r3
 80062c8:	e7a4      	b.n	8006214 <_printf_i+0x168>
 80062ca:	2301      	movs	r3, #1
 80062cc:	4632      	mov	r2, r6
 80062ce:	4649      	mov	r1, r9
 80062d0:	4640      	mov	r0, r8
 80062d2:	47d0      	blx	sl
 80062d4:	3001      	adds	r0, #1
 80062d6:	d09b      	beq.n	8006210 <_printf_i+0x164>
 80062d8:	3501      	adds	r5, #1
 80062da:	68e3      	ldr	r3, [r4, #12]
 80062dc:	9903      	ldr	r1, [sp, #12]
 80062de:	1a5b      	subs	r3, r3, r1
 80062e0:	42ab      	cmp	r3, r5
 80062e2:	dcf2      	bgt.n	80062ca <_printf_i+0x21e>
 80062e4:	e7eb      	b.n	80062be <_printf_i+0x212>
 80062e6:	2500      	movs	r5, #0
 80062e8:	f104 0619 	add.w	r6, r4, #25
 80062ec:	e7f5      	b.n	80062da <_printf_i+0x22e>
 80062ee:	bf00      	nop
 80062f0:	0800885a 	.word	0x0800885a
 80062f4:	0800886b 	.word	0x0800886b

080062f8 <siprintf>:
 80062f8:	b40e      	push	{r1, r2, r3}
 80062fa:	b500      	push	{lr}
 80062fc:	b09c      	sub	sp, #112	; 0x70
 80062fe:	ab1d      	add	r3, sp, #116	; 0x74
 8006300:	9002      	str	r0, [sp, #8]
 8006302:	9006      	str	r0, [sp, #24]
 8006304:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006308:	4809      	ldr	r0, [pc, #36]	; (8006330 <siprintf+0x38>)
 800630a:	9107      	str	r1, [sp, #28]
 800630c:	9104      	str	r1, [sp, #16]
 800630e:	4909      	ldr	r1, [pc, #36]	; (8006334 <siprintf+0x3c>)
 8006310:	f853 2b04 	ldr.w	r2, [r3], #4
 8006314:	9105      	str	r1, [sp, #20]
 8006316:	6800      	ldr	r0, [r0, #0]
 8006318:	9301      	str	r3, [sp, #4]
 800631a:	a902      	add	r1, sp, #8
 800631c:	f001 fb68 	bl	80079f0 <_svfiprintf_r>
 8006320:	9b02      	ldr	r3, [sp, #8]
 8006322:	2200      	movs	r2, #0
 8006324:	701a      	strb	r2, [r3, #0]
 8006326:	b01c      	add	sp, #112	; 0x70
 8006328:	f85d eb04 	ldr.w	lr, [sp], #4
 800632c:	b003      	add	sp, #12
 800632e:	4770      	bx	lr
 8006330:	2000000c 	.word	0x2000000c
 8006334:	ffff0208 	.word	0xffff0208

08006338 <quorem>:
 8006338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800633c:	6903      	ldr	r3, [r0, #16]
 800633e:	690c      	ldr	r4, [r1, #16]
 8006340:	42a3      	cmp	r3, r4
 8006342:	4607      	mov	r7, r0
 8006344:	f2c0 8081 	blt.w	800644a <quorem+0x112>
 8006348:	3c01      	subs	r4, #1
 800634a:	f101 0814 	add.w	r8, r1, #20
 800634e:	f100 0514 	add.w	r5, r0, #20
 8006352:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006356:	9301      	str	r3, [sp, #4]
 8006358:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800635c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006360:	3301      	adds	r3, #1
 8006362:	429a      	cmp	r2, r3
 8006364:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006368:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800636c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006370:	d331      	bcc.n	80063d6 <quorem+0x9e>
 8006372:	f04f 0e00 	mov.w	lr, #0
 8006376:	4640      	mov	r0, r8
 8006378:	46ac      	mov	ip, r5
 800637a:	46f2      	mov	sl, lr
 800637c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006380:	b293      	uxth	r3, r2
 8006382:	fb06 e303 	mla	r3, r6, r3, lr
 8006386:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800638a:	b29b      	uxth	r3, r3
 800638c:	ebaa 0303 	sub.w	r3, sl, r3
 8006390:	f8dc a000 	ldr.w	sl, [ip]
 8006394:	0c12      	lsrs	r2, r2, #16
 8006396:	fa13 f38a 	uxtah	r3, r3, sl
 800639a:	fb06 e202 	mla	r2, r6, r2, lr
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	9b00      	ldr	r3, [sp, #0]
 80063a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063a6:	b292      	uxth	r2, r2
 80063a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80063ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80063b4:	4581      	cmp	r9, r0
 80063b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063ba:	f84c 3b04 	str.w	r3, [ip], #4
 80063be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80063c2:	d2db      	bcs.n	800637c <quorem+0x44>
 80063c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80063c8:	b92b      	cbnz	r3, 80063d6 <quorem+0x9e>
 80063ca:	9b01      	ldr	r3, [sp, #4]
 80063cc:	3b04      	subs	r3, #4
 80063ce:	429d      	cmp	r5, r3
 80063d0:	461a      	mov	r2, r3
 80063d2:	d32e      	bcc.n	8006432 <quorem+0xfa>
 80063d4:	613c      	str	r4, [r7, #16]
 80063d6:	4638      	mov	r0, r7
 80063d8:	f001 f8b6 	bl	8007548 <__mcmp>
 80063dc:	2800      	cmp	r0, #0
 80063de:	db24      	blt.n	800642a <quorem+0xf2>
 80063e0:	3601      	adds	r6, #1
 80063e2:	4628      	mov	r0, r5
 80063e4:	f04f 0c00 	mov.w	ip, #0
 80063e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80063ec:	f8d0 e000 	ldr.w	lr, [r0]
 80063f0:	b293      	uxth	r3, r2
 80063f2:	ebac 0303 	sub.w	r3, ip, r3
 80063f6:	0c12      	lsrs	r2, r2, #16
 80063f8:	fa13 f38e 	uxtah	r3, r3, lr
 80063fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006400:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006404:	b29b      	uxth	r3, r3
 8006406:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800640a:	45c1      	cmp	r9, r8
 800640c:	f840 3b04 	str.w	r3, [r0], #4
 8006410:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006414:	d2e8      	bcs.n	80063e8 <quorem+0xb0>
 8006416:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800641a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800641e:	b922      	cbnz	r2, 800642a <quorem+0xf2>
 8006420:	3b04      	subs	r3, #4
 8006422:	429d      	cmp	r5, r3
 8006424:	461a      	mov	r2, r3
 8006426:	d30a      	bcc.n	800643e <quorem+0x106>
 8006428:	613c      	str	r4, [r7, #16]
 800642a:	4630      	mov	r0, r6
 800642c:	b003      	add	sp, #12
 800642e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006432:	6812      	ldr	r2, [r2, #0]
 8006434:	3b04      	subs	r3, #4
 8006436:	2a00      	cmp	r2, #0
 8006438:	d1cc      	bne.n	80063d4 <quorem+0x9c>
 800643a:	3c01      	subs	r4, #1
 800643c:	e7c7      	b.n	80063ce <quorem+0x96>
 800643e:	6812      	ldr	r2, [r2, #0]
 8006440:	3b04      	subs	r3, #4
 8006442:	2a00      	cmp	r2, #0
 8006444:	d1f0      	bne.n	8006428 <quorem+0xf0>
 8006446:	3c01      	subs	r4, #1
 8006448:	e7eb      	b.n	8006422 <quorem+0xea>
 800644a:	2000      	movs	r0, #0
 800644c:	e7ee      	b.n	800642c <quorem+0xf4>
	...

08006450 <_dtoa_r>:
 8006450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006454:	ed2d 8b04 	vpush	{d8-d9}
 8006458:	ec57 6b10 	vmov	r6, r7, d0
 800645c:	b093      	sub	sp, #76	; 0x4c
 800645e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006460:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006464:	9106      	str	r1, [sp, #24]
 8006466:	ee10 aa10 	vmov	sl, s0
 800646a:	4604      	mov	r4, r0
 800646c:	9209      	str	r2, [sp, #36]	; 0x24
 800646e:	930c      	str	r3, [sp, #48]	; 0x30
 8006470:	46bb      	mov	fp, r7
 8006472:	b975      	cbnz	r5, 8006492 <_dtoa_r+0x42>
 8006474:	2010      	movs	r0, #16
 8006476:	f000 fddd 	bl	8007034 <malloc>
 800647a:	4602      	mov	r2, r0
 800647c:	6260      	str	r0, [r4, #36]	; 0x24
 800647e:	b920      	cbnz	r0, 800648a <_dtoa_r+0x3a>
 8006480:	4ba7      	ldr	r3, [pc, #668]	; (8006720 <_dtoa_r+0x2d0>)
 8006482:	21ea      	movs	r1, #234	; 0xea
 8006484:	48a7      	ldr	r0, [pc, #668]	; (8006724 <_dtoa_r+0x2d4>)
 8006486:	f001 fbc3 	bl	8007c10 <__assert_func>
 800648a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800648e:	6005      	str	r5, [r0, #0]
 8006490:	60c5      	str	r5, [r0, #12]
 8006492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006494:	6819      	ldr	r1, [r3, #0]
 8006496:	b151      	cbz	r1, 80064ae <_dtoa_r+0x5e>
 8006498:	685a      	ldr	r2, [r3, #4]
 800649a:	604a      	str	r2, [r1, #4]
 800649c:	2301      	movs	r3, #1
 800649e:	4093      	lsls	r3, r2
 80064a0:	608b      	str	r3, [r1, #8]
 80064a2:	4620      	mov	r0, r4
 80064a4:	f000 fe0e 	bl	80070c4 <_Bfree>
 80064a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064aa:	2200      	movs	r2, #0
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	1e3b      	subs	r3, r7, #0
 80064b0:	bfaa      	itet	ge
 80064b2:	2300      	movge	r3, #0
 80064b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80064b8:	f8c8 3000 	strge.w	r3, [r8]
 80064bc:	4b9a      	ldr	r3, [pc, #616]	; (8006728 <_dtoa_r+0x2d8>)
 80064be:	bfbc      	itt	lt
 80064c0:	2201      	movlt	r2, #1
 80064c2:	f8c8 2000 	strlt.w	r2, [r8]
 80064c6:	ea33 030b 	bics.w	r3, r3, fp
 80064ca:	d11b      	bne.n	8006504 <_dtoa_r+0xb4>
 80064cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80064d2:	6013      	str	r3, [r2, #0]
 80064d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80064d8:	4333      	orrs	r3, r6
 80064da:	f000 8592 	beq.w	8007002 <_dtoa_r+0xbb2>
 80064de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064e0:	b963      	cbnz	r3, 80064fc <_dtoa_r+0xac>
 80064e2:	4b92      	ldr	r3, [pc, #584]	; (800672c <_dtoa_r+0x2dc>)
 80064e4:	e022      	b.n	800652c <_dtoa_r+0xdc>
 80064e6:	4b92      	ldr	r3, [pc, #584]	; (8006730 <_dtoa_r+0x2e0>)
 80064e8:	9301      	str	r3, [sp, #4]
 80064ea:	3308      	adds	r3, #8
 80064ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80064ee:	6013      	str	r3, [r2, #0]
 80064f0:	9801      	ldr	r0, [sp, #4]
 80064f2:	b013      	add	sp, #76	; 0x4c
 80064f4:	ecbd 8b04 	vpop	{d8-d9}
 80064f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064fc:	4b8b      	ldr	r3, [pc, #556]	; (800672c <_dtoa_r+0x2dc>)
 80064fe:	9301      	str	r3, [sp, #4]
 8006500:	3303      	adds	r3, #3
 8006502:	e7f3      	b.n	80064ec <_dtoa_r+0x9c>
 8006504:	2200      	movs	r2, #0
 8006506:	2300      	movs	r3, #0
 8006508:	4650      	mov	r0, sl
 800650a:	4659      	mov	r1, fp
 800650c:	f7fa fafc 	bl	8000b08 <__aeabi_dcmpeq>
 8006510:	ec4b ab19 	vmov	d9, sl, fp
 8006514:	4680      	mov	r8, r0
 8006516:	b158      	cbz	r0, 8006530 <_dtoa_r+0xe0>
 8006518:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800651a:	2301      	movs	r3, #1
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 856b 	beq.w	8006ffc <_dtoa_r+0xbac>
 8006526:	4883      	ldr	r0, [pc, #524]	; (8006734 <_dtoa_r+0x2e4>)
 8006528:	6018      	str	r0, [r3, #0]
 800652a:	1e43      	subs	r3, r0, #1
 800652c:	9301      	str	r3, [sp, #4]
 800652e:	e7df      	b.n	80064f0 <_dtoa_r+0xa0>
 8006530:	ec4b ab10 	vmov	d0, sl, fp
 8006534:	aa10      	add	r2, sp, #64	; 0x40
 8006536:	a911      	add	r1, sp, #68	; 0x44
 8006538:	4620      	mov	r0, r4
 800653a:	f001 f8ab 	bl	8007694 <__d2b>
 800653e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006542:	ee08 0a10 	vmov	s16, r0
 8006546:	2d00      	cmp	r5, #0
 8006548:	f000 8084 	beq.w	8006654 <_dtoa_r+0x204>
 800654c:	ee19 3a90 	vmov	r3, s19
 8006550:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006554:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006558:	4656      	mov	r6, sl
 800655a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800655e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006562:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006566:	4b74      	ldr	r3, [pc, #464]	; (8006738 <_dtoa_r+0x2e8>)
 8006568:	2200      	movs	r2, #0
 800656a:	4630      	mov	r0, r6
 800656c:	4639      	mov	r1, r7
 800656e:	f7f9 feab 	bl	80002c8 <__aeabi_dsub>
 8006572:	a365      	add	r3, pc, #404	; (adr r3, 8006708 <_dtoa_r+0x2b8>)
 8006574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006578:	f7fa f85e 	bl	8000638 <__aeabi_dmul>
 800657c:	a364      	add	r3, pc, #400	; (adr r3, 8006710 <_dtoa_r+0x2c0>)
 800657e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006582:	f7f9 fea3 	bl	80002cc <__adddf3>
 8006586:	4606      	mov	r6, r0
 8006588:	4628      	mov	r0, r5
 800658a:	460f      	mov	r7, r1
 800658c:	f7f9 ffea 	bl	8000564 <__aeabi_i2d>
 8006590:	a361      	add	r3, pc, #388	; (adr r3, 8006718 <_dtoa_r+0x2c8>)
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	f7fa f84f 	bl	8000638 <__aeabi_dmul>
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	4630      	mov	r0, r6
 80065a0:	4639      	mov	r1, r7
 80065a2:	f7f9 fe93 	bl	80002cc <__adddf3>
 80065a6:	4606      	mov	r6, r0
 80065a8:	460f      	mov	r7, r1
 80065aa:	f7fa faf5 	bl	8000b98 <__aeabi_d2iz>
 80065ae:	2200      	movs	r2, #0
 80065b0:	9000      	str	r0, [sp, #0]
 80065b2:	2300      	movs	r3, #0
 80065b4:	4630      	mov	r0, r6
 80065b6:	4639      	mov	r1, r7
 80065b8:	f7fa fab0 	bl	8000b1c <__aeabi_dcmplt>
 80065bc:	b150      	cbz	r0, 80065d4 <_dtoa_r+0x184>
 80065be:	9800      	ldr	r0, [sp, #0]
 80065c0:	f7f9 ffd0 	bl	8000564 <__aeabi_i2d>
 80065c4:	4632      	mov	r2, r6
 80065c6:	463b      	mov	r3, r7
 80065c8:	f7fa fa9e 	bl	8000b08 <__aeabi_dcmpeq>
 80065cc:	b910      	cbnz	r0, 80065d4 <_dtoa_r+0x184>
 80065ce:	9b00      	ldr	r3, [sp, #0]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	9b00      	ldr	r3, [sp, #0]
 80065d6:	2b16      	cmp	r3, #22
 80065d8:	d85a      	bhi.n	8006690 <_dtoa_r+0x240>
 80065da:	9a00      	ldr	r2, [sp, #0]
 80065dc:	4b57      	ldr	r3, [pc, #348]	; (800673c <_dtoa_r+0x2ec>)
 80065de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e6:	ec51 0b19 	vmov	r0, r1, d9
 80065ea:	f7fa fa97 	bl	8000b1c <__aeabi_dcmplt>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	d050      	beq.n	8006694 <_dtoa_r+0x244>
 80065f2:	9b00      	ldr	r3, [sp, #0]
 80065f4:	3b01      	subs	r3, #1
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	2300      	movs	r3, #0
 80065fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80065fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065fe:	1b5d      	subs	r5, r3, r5
 8006600:	1e6b      	subs	r3, r5, #1
 8006602:	9305      	str	r3, [sp, #20]
 8006604:	bf45      	ittet	mi
 8006606:	f1c5 0301 	rsbmi	r3, r5, #1
 800660a:	9304      	strmi	r3, [sp, #16]
 800660c:	2300      	movpl	r3, #0
 800660e:	2300      	movmi	r3, #0
 8006610:	bf4c      	ite	mi
 8006612:	9305      	strmi	r3, [sp, #20]
 8006614:	9304      	strpl	r3, [sp, #16]
 8006616:	9b00      	ldr	r3, [sp, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	db3d      	blt.n	8006698 <_dtoa_r+0x248>
 800661c:	9b05      	ldr	r3, [sp, #20]
 800661e:	9a00      	ldr	r2, [sp, #0]
 8006620:	920a      	str	r2, [sp, #40]	; 0x28
 8006622:	4413      	add	r3, r2
 8006624:	9305      	str	r3, [sp, #20]
 8006626:	2300      	movs	r3, #0
 8006628:	9307      	str	r3, [sp, #28]
 800662a:	9b06      	ldr	r3, [sp, #24]
 800662c:	2b09      	cmp	r3, #9
 800662e:	f200 8089 	bhi.w	8006744 <_dtoa_r+0x2f4>
 8006632:	2b05      	cmp	r3, #5
 8006634:	bfc4      	itt	gt
 8006636:	3b04      	subgt	r3, #4
 8006638:	9306      	strgt	r3, [sp, #24]
 800663a:	9b06      	ldr	r3, [sp, #24]
 800663c:	f1a3 0302 	sub.w	r3, r3, #2
 8006640:	bfcc      	ite	gt
 8006642:	2500      	movgt	r5, #0
 8006644:	2501      	movle	r5, #1
 8006646:	2b03      	cmp	r3, #3
 8006648:	f200 8087 	bhi.w	800675a <_dtoa_r+0x30a>
 800664c:	e8df f003 	tbb	[pc, r3]
 8006650:	59383a2d 	.word	0x59383a2d
 8006654:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006658:	441d      	add	r5, r3
 800665a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800665e:	2b20      	cmp	r3, #32
 8006660:	bfc1      	itttt	gt
 8006662:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006666:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800666a:	fa0b f303 	lslgt.w	r3, fp, r3
 800666e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006672:	bfda      	itte	le
 8006674:	f1c3 0320 	rsble	r3, r3, #32
 8006678:	fa06 f003 	lslle.w	r0, r6, r3
 800667c:	4318      	orrgt	r0, r3
 800667e:	f7f9 ff61 	bl	8000544 <__aeabi_ui2d>
 8006682:	2301      	movs	r3, #1
 8006684:	4606      	mov	r6, r0
 8006686:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800668a:	3d01      	subs	r5, #1
 800668c:	930e      	str	r3, [sp, #56]	; 0x38
 800668e:	e76a      	b.n	8006566 <_dtoa_r+0x116>
 8006690:	2301      	movs	r3, #1
 8006692:	e7b2      	b.n	80065fa <_dtoa_r+0x1aa>
 8006694:	900b      	str	r0, [sp, #44]	; 0x2c
 8006696:	e7b1      	b.n	80065fc <_dtoa_r+0x1ac>
 8006698:	9b04      	ldr	r3, [sp, #16]
 800669a:	9a00      	ldr	r2, [sp, #0]
 800669c:	1a9b      	subs	r3, r3, r2
 800669e:	9304      	str	r3, [sp, #16]
 80066a0:	4253      	negs	r3, r2
 80066a2:	9307      	str	r3, [sp, #28]
 80066a4:	2300      	movs	r3, #0
 80066a6:	930a      	str	r3, [sp, #40]	; 0x28
 80066a8:	e7bf      	b.n	800662a <_dtoa_r+0x1da>
 80066aa:	2300      	movs	r3, #0
 80066ac:	9308      	str	r3, [sp, #32]
 80066ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	dc55      	bgt.n	8006760 <_dtoa_r+0x310>
 80066b4:	2301      	movs	r3, #1
 80066b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80066ba:	461a      	mov	r2, r3
 80066bc:	9209      	str	r2, [sp, #36]	; 0x24
 80066be:	e00c      	b.n	80066da <_dtoa_r+0x28a>
 80066c0:	2301      	movs	r3, #1
 80066c2:	e7f3      	b.n	80066ac <_dtoa_r+0x25c>
 80066c4:	2300      	movs	r3, #0
 80066c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066c8:	9308      	str	r3, [sp, #32]
 80066ca:	9b00      	ldr	r3, [sp, #0]
 80066cc:	4413      	add	r3, r2
 80066ce:	9302      	str	r3, [sp, #8]
 80066d0:	3301      	adds	r3, #1
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	9303      	str	r3, [sp, #12]
 80066d6:	bfb8      	it	lt
 80066d8:	2301      	movlt	r3, #1
 80066da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80066dc:	2200      	movs	r2, #0
 80066de:	6042      	str	r2, [r0, #4]
 80066e0:	2204      	movs	r2, #4
 80066e2:	f102 0614 	add.w	r6, r2, #20
 80066e6:	429e      	cmp	r6, r3
 80066e8:	6841      	ldr	r1, [r0, #4]
 80066ea:	d93d      	bls.n	8006768 <_dtoa_r+0x318>
 80066ec:	4620      	mov	r0, r4
 80066ee:	f000 fca9 	bl	8007044 <_Balloc>
 80066f2:	9001      	str	r0, [sp, #4]
 80066f4:	2800      	cmp	r0, #0
 80066f6:	d13b      	bne.n	8006770 <_dtoa_r+0x320>
 80066f8:	4b11      	ldr	r3, [pc, #68]	; (8006740 <_dtoa_r+0x2f0>)
 80066fa:	4602      	mov	r2, r0
 80066fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006700:	e6c0      	b.n	8006484 <_dtoa_r+0x34>
 8006702:	2301      	movs	r3, #1
 8006704:	e7df      	b.n	80066c6 <_dtoa_r+0x276>
 8006706:	bf00      	nop
 8006708:	636f4361 	.word	0x636f4361
 800670c:	3fd287a7 	.word	0x3fd287a7
 8006710:	8b60c8b3 	.word	0x8b60c8b3
 8006714:	3fc68a28 	.word	0x3fc68a28
 8006718:	509f79fb 	.word	0x509f79fb
 800671c:	3fd34413 	.word	0x3fd34413
 8006720:	08008889 	.word	0x08008889
 8006724:	080088a0 	.word	0x080088a0
 8006728:	7ff00000 	.word	0x7ff00000
 800672c:	08008885 	.word	0x08008885
 8006730:	0800887c 	.word	0x0800887c
 8006734:	08008859 	.word	0x08008859
 8006738:	3ff80000 	.word	0x3ff80000
 800673c:	08008990 	.word	0x08008990
 8006740:	080088fb 	.word	0x080088fb
 8006744:	2501      	movs	r5, #1
 8006746:	2300      	movs	r3, #0
 8006748:	9306      	str	r3, [sp, #24]
 800674a:	9508      	str	r5, [sp, #32]
 800674c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006750:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006754:	2200      	movs	r2, #0
 8006756:	2312      	movs	r3, #18
 8006758:	e7b0      	b.n	80066bc <_dtoa_r+0x26c>
 800675a:	2301      	movs	r3, #1
 800675c:	9308      	str	r3, [sp, #32]
 800675e:	e7f5      	b.n	800674c <_dtoa_r+0x2fc>
 8006760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006762:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006766:	e7b8      	b.n	80066da <_dtoa_r+0x28a>
 8006768:	3101      	adds	r1, #1
 800676a:	6041      	str	r1, [r0, #4]
 800676c:	0052      	lsls	r2, r2, #1
 800676e:	e7b8      	b.n	80066e2 <_dtoa_r+0x292>
 8006770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006772:	9a01      	ldr	r2, [sp, #4]
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	9b03      	ldr	r3, [sp, #12]
 8006778:	2b0e      	cmp	r3, #14
 800677a:	f200 809d 	bhi.w	80068b8 <_dtoa_r+0x468>
 800677e:	2d00      	cmp	r5, #0
 8006780:	f000 809a 	beq.w	80068b8 <_dtoa_r+0x468>
 8006784:	9b00      	ldr	r3, [sp, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	dd32      	ble.n	80067f0 <_dtoa_r+0x3a0>
 800678a:	4ab7      	ldr	r2, [pc, #732]	; (8006a68 <_dtoa_r+0x618>)
 800678c:	f003 030f 	and.w	r3, r3, #15
 8006790:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006794:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006798:	9b00      	ldr	r3, [sp, #0]
 800679a:	05d8      	lsls	r0, r3, #23
 800679c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80067a0:	d516      	bpl.n	80067d0 <_dtoa_r+0x380>
 80067a2:	4bb2      	ldr	r3, [pc, #712]	; (8006a6c <_dtoa_r+0x61c>)
 80067a4:	ec51 0b19 	vmov	r0, r1, d9
 80067a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067ac:	f7fa f86e 	bl	800088c <__aeabi_ddiv>
 80067b0:	f007 070f 	and.w	r7, r7, #15
 80067b4:	4682      	mov	sl, r0
 80067b6:	468b      	mov	fp, r1
 80067b8:	2503      	movs	r5, #3
 80067ba:	4eac      	ldr	r6, [pc, #688]	; (8006a6c <_dtoa_r+0x61c>)
 80067bc:	b957      	cbnz	r7, 80067d4 <_dtoa_r+0x384>
 80067be:	4642      	mov	r2, r8
 80067c0:	464b      	mov	r3, r9
 80067c2:	4650      	mov	r0, sl
 80067c4:	4659      	mov	r1, fp
 80067c6:	f7fa f861 	bl	800088c <__aeabi_ddiv>
 80067ca:	4682      	mov	sl, r0
 80067cc:	468b      	mov	fp, r1
 80067ce:	e028      	b.n	8006822 <_dtoa_r+0x3d2>
 80067d0:	2502      	movs	r5, #2
 80067d2:	e7f2      	b.n	80067ba <_dtoa_r+0x36a>
 80067d4:	07f9      	lsls	r1, r7, #31
 80067d6:	d508      	bpl.n	80067ea <_dtoa_r+0x39a>
 80067d8:	4640      	mov	r0, r8
 80067da:	4649      	mov	r1, r9
 80067dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067e0:	f7f9 ff2a 	bl	8000638 <__aeabi_dmul>
 80067e4:	3501      	adds	r5, #1
 80067e6:	4680      	mov	r8, r0
 80067e8:	4689      	mov	r9, r1
 80067ea:	107f      	asrs	r7, r7, #1
 80067ec:	3608      	adds	r6, #8
 80067ee:	e7e5      	b.n	80067bc <_dtoa_r+0x36c>
 80067f0:	f000 809b 	beq.w	800692a <_dtoa_r+0x4da>
 80067f4:	9b00      	ldr	r3, [sp, #0]
 80067f6:	4f9d      	ldr	r7, [pc, #628]	; (8006a6c <_dtoa_r+0x61c>)
 80067f8:	425e      	negs	r6, r3
 80067fa:	4b9b      	ldr	r3, [pc, #620]	; (8006a68 <_dtoa_r+0x618>)
 80067fc:	f006 020f 	and.w	r2, r6, #15
 8006800:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006808:	ec51 0b19 	vmov	r0, r1, d9
 800680c:	f7f9 ff14 	bl	8000638 <__aeabi_dmul>
 8006810:	1136      	asrs	r6, r6, #4
 8006812:	4682      	mov	sl, r0
 8006814:	468b      	mov	fp, r1
 8006816:	2300      	movs	r3, #0
 8006818:	2502      	movs	r5, #2
 800681a:	2e00      	cmp	r6, #0
 800681c:	d17a      	bne.n	8006914 <_dtoa_r+0x4c4>
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1d3      	bne.n	80067ca <_dtoa_r+0x37a>
 8006822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 8082 	beq.w	800692e <_dtoa_r+0x4de>
 800682a:	4b91      	ldr	r3, [pc, #580]	; (8006a70 <_dtoa_r+0x620>)
 800682c:	2200      	movs	r2, #0
 800682e:	4650      	mov	r0, sl
 8006830:	4659      	mov	r1, fp
 8006832:	f7fa f973 	bl	8000b1c <__aeabi_dcmplt>
 8006836:	2800      	cmp	r0, #0
 8006838:	d079      	beq.n	800692e <_dtoa_r+0x4de>
 800683a:	9b03      	ldr	r3, [sp, #12]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d076      	beq.n	800692e <_dtoa_r+0x4de>
 8006840:	9b02      	ldr	r3, [sp, #8]
 8006842:	2b00      	cmp	r3, #0
 8006844:	dd36      	ble.n	80068b4 <_dtoa_r+0x464>
 8006846:	9b00      	ldr	r3, [sp, #0]
 8006848:	4650      	mov	r0, sl
 800684a:	4659      	mov	r1, fp
 800684c:	1e5f      	subs	r7, r3, #1
 800684e:	2200      	movs	r2, #0
 8006850:	4b88      	ldr	r3, [pc, #544]	; (8006a74 <_dtoa_r+0x624>)
 8006852:	f7f9 fef1 	bl	8000638 <__aeabi_dmul>
 8006856:	9e02      	ldr	r6, [sp, #8]
 8006858:	4682      	mov	sl, r0
 800685a:	468b      	mov	fp, r1
 800685c:	3501      	adds	r5, #1
 800685e:	4628      	mov	r0, r5
 8006860:	f7f9 fe80 	bl	8000564 <__aeabi_i2d>
 8006864:	4652      	mov	r2, sl
 8006866:	465b      	mov	r3, fp
 8006868:	f7f9 fee6 	bl	8000638 <__aeabi_dmul>
 800686c:	4b82      	ldr	r3, [pc, #520]	; (8006a78 <_dtoa_r+0x628>)
 800686e:	2200      	movs	r2, #0
 8006870:	f7f9 fd2c 	bl	80002cc <__adddf3>
 8006874:	46d0      	mov	r8, sl
 8006876:	46d9      	mov	r9, fp
 8006878:	4682      	mov	sl, r0
 800687a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800687e:	2e00      	cmp	r6, #0
 8006880:	d158      	bne.n	8006934 <_dtoa_r+0x4e4>
 8006882:	4b7e      	ldr	r3, [pc, #504]	; (8006a7c <_dtoa_r+0x62c>)
 8006884:	2200      	movs	r2, #0
 8006886:	4640      	mov	r0, r8
 8006888:	4649      	mov	r1, r9
 800688a:	f7f9 fd1d 	bl	80002c8 <__aeabi_dsub>
 800688e:	4652      	mov	r2, sl
 8006890:	465b      	mov	r3, fp
 8006892:	4680      	mov	r8, r0
 8006894:	4689      	mov	r9, r1
 8006896:	f7fa f95f 	bl	8000b58 <__aeabi_dcmpgt>
 800689a:	2800      	cmp	r0, #0
 800689c:	f040 8295 	bne.w	8006dca <_dtoa_r+0x97a>
 80068a0:	4652      	mov	r2, sl
 80068a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80068a6:	4640      	mov	r0, r8
 80068a8:	4649      	mov	r1, r9
 80068aa:	f7fa f937 	bl	8000b1c <__aeabi_dcmplt>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	f040 8289 	bne.w	8006dc6 <_dtoa_r+0x976>
 80068b4:	ec5b ab19 	vmov	sl, fp, d9
 80068b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f2c0 8148 	blt.w	8006b50 <_dtoa_r+0x700>
 80068c0:	9a00      	ldr	r2, [sp, #0]
 80068c2:	2a0e      	cmp	r2, #14
 80068c4:	f300 8144 	bgt.w	8006b50 <_dtoa_r+0x700>
 80068c8:	4b67      	ldr	r3, [pc, #412]	; (8006a68 <_dtoa_r+0x618>)
 80068ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f280 80d5 	bge.w	8006a84 <_dtoa_r+0x634>
 80068da:	9b03      	ldr	r3, [sp, #12]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f300 80d1 	bgt.w	8006a84 <_dtoa_r+0x634>
 80068e2:	f040 826f 	bne.w	8006dc4 <_dtoa_r+0x974>
 80068e6:	4b65      	ldr	r3, [pc, #404]	; (8006a7c <_dtoa_r+0x62c>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	4640      	mov	r0, r8
 80068ec:	4649      	mov	r1, r9
 80068ee:	f7f9 fea3 	bl	8000638 <__aeabi_dmul>
 80068f2:	4652      	mov	r2, sl
 80068f4:	465b      	mov	r3, fp
 80068f6:	f7fa f925 	bl	8000b44 <__aeabi_dcmpge>
 80068fa:	9e03      	ldr	r6, [sp, #12]
 80068fc:	4637      	mov	r7, r6
 80068fe:	2800      	cmp	r0, #0
 8006900:	f040 8245 	bne.w	8006d8e <_dtoa_r+0x93e>
 8006904:	9d01      	ldr	r5, [sp, #4]
 8006906:	2331      	movs	r3, #49	; 0x31
 8006908:	f805 3b01 	strb.w	r3, [r5], #1
 800690c:	9b00      	ldr	r3, [sp, #0]
 800690e:	3301      	adds	r3, #1
 8006910:	9300      	str	r3, [sp, #0]
 8006912:	e240      	b.n	8006d96 <_dtoa_r+0x946>
 8006914:	07f2      	lsls	r2, r6, #31
 8006916:	d505      	bpl.n	8006924 <_dtoa_r+0x4d4>
 8006918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800691c:	f7f9 fe8c 	bl	8000638 <__aeabi_dmul>
 8006920:	3501      	adds	r5, #1
 8006922:	2301      	movs	r3, #1
 8006924:	1076      	asrs	r6, r6, #1
 8006926:	3708      	adds	r7, #8
 8006928:	e777      	b.n	800681a <_dtoa_r+0x3ca>
 800692a:	2502      	movs	r5, #2
 800692c:	e779      	b.n	8006822 <_dtoa_r+0x3d2>
 800692e:	9f00      	ldr	r7, [sp, #0]
 8006930:	9e03      	ldr	r6, [sp, #12]
 8006932:	e794      	b.n	800685e <_dtoa_r+0x40e>
 8006934:	9901      	ldr	r1, [sp, #4]
 8006936:	4b4c      	ldr	r3, [pc, #304]	; (8006a68 <_dtoa_r+0x618>)
 8006938:	4431      	add	r1, r6
 800693a:	910d      	str	r1, [sp, #52]	; 0x34
 800693c:	9908      	ldr	r1, [sp, #32]
 800693e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006942:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006946:	2900      	cmp	r1, #0
 8006948:	d043      	beq.n	80069d2 <_dtoa_r+0x582>
 800694a:	494d      	ldr	r1, [pc, #308]	; (8006a80 <_dtoa_r+0x630>)
 800694c:	2000      	movs	r0, #0
 800694e:	f7f9 ff9d 	bl	800088c <__aeabi_ddiv>
 8006952:	4652      	mov	r2, sl
 8006954:	465b      	mov	r3, fp
 8006956:	f7f9 fcb7 	bl	80002c8 <__aeabi_dsub>
 800695a:	9d01      	ldr	r5, [sp, #4]
 800695c:	4682      	mov	sl, r0
 800695e:	468b      	mov	fp, r1
 8006960:	4649      	mov	r1, r9
 8006962:	4640      	mov	r0, r8
 8006964:	f7fa f918 	bl	8000b98 <__aeabi_d2iz>
 8006968:	4606      	mov	r6, r0
 800696a:	f7f9 fdfb 	bl	8000564 <__aeabi_i2d>
 800696e:	4602      	mov	r2, r0
 8006970:	460b      	mov	r3, r1
 8006972:	4640      	mov	r0, r8
 8006974:	4649      	mov	r1, r9
 8006976:	f7f9 fca7 	bl	80002c8 <__aeabi_dsub>
 800697a:	3630      	adds	r6, #48	; 0x30
 800697c:	f805 6b01 	strb.w	r6, [r5], #1
 8006980:	4652      	mov	r2, sl
 8006982:	465b      	mov	r3, fp
 8006984:	4680      	mov	r8, r0
 8006986:	4689      	mov	r9, r1
 8006988:	f7fa f8c8 	bl	8000b1c <__aeabi_dcmplt>
 800698c:	2800      	cmp	r0, #0
 800698e:	d163      	bne.n	8006a58 <_dtoa_r+0x608>
 8006990:	4642      	mov	r2, r8
 8006992:	464b      	mov	r3, r9
 8006994:	4936      	ldr	r1, [pc, #216]	; (8006a70 <_dtoa_r+0x620>)
 8006996:	2000      	movs	r0, #0
 8006998:	f7f9 fc96 	bl	80002c8 <__aeabi_dsub>
 800699c:	4652      	mov	r2, sl
 800699e:	465b      	mov	r3, fp
 80069a0:	f7fa f8bc 	bl	8000b1c <__aeabi_dcmplt>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	f040 80b5 	bne.w	8006b14 <_dtoa_r+0x6c4>
 80069aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069ac:	429d      	cmp	r5, r3
 80069ae:	d081      	beq.n	80068b4 <_dtoa_r+0x464>
 80069b0:	4b30      	ldr	r3, [pc, #192]	; (8006a74 <_dtoa_r+0x624>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	4650      	mov	r0, sl
 80069b6:	4659      	mov	r1, fp
 80069b8:	f7f9 fe3e 	bl	8000638 <__aeabi_dmul>
 80069bc:	4b2d      	ldr	r3, [pc, #180]	; (8006a74 <_dtoa_r+0x624>)
 80069be:	4682      	mov	sl, r0
 80069c0:	468b      	mov	fp, r1
 80069c2:	4640      	mov	r0, r8
 80069c4:	4649      	mov	r1, r9
 80069c6:	2200      	movs	r2, #0
 80069c8:	f7f9 fe36 	bl	8000638 <__aeabi_dmul>
 80069cc:	4680      	mov	r8, r0
 80069ce:	4689      	mov	r9, r1
 80069d0:	e7c6      	b.n	8006960 <_dtoa_r+0x510>
 80069d2:	4650      	mov	r0, sl
 80069d4:	4659      	mov	r1, fp
 80069d6:	f7f9 fe2f 	bl	8000638 <__aeabi_dmul>
 80069da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069dc:	9d01      	ldr	r5, [sp, #4]
 80069de:	930f      	str	r3, [sp, #60]	; 0x3c
 80069e0:	4682      	mov	sl, r0
 80069e2:	468b      	mov	fp, r1
 80069e4:	4649      	mov	r1, r9
 80069e6:	4640      	mov	r0, r8
 80069e8:	f7fa f8d6 	bl	8000b98 <__aeabi_d2iz>
 80069ec:	4606      	mov	r6, r0
 80069ee:	f7f9 fdb9 	bl	8000564 <__aeabi_i2d>
 80069f2:	3630      	adds	r6, #48	; 0x30
 80069f4:	4602      	mov	r2, r0
 80069f6:	460b      	mov	r3, r1
 80069f8:	4640      	mov	r0, r8
 80069fa:	4649      	mov	r1, r9
 80069fc:	f7f9 fc64 	bl	80002c8 <__aeabi_dsub>
 8006a00:	f805 6b01 	strb.w	r6, [r5], #1
 8006a04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a06:	429d      	cmp	r5, r3
 8006a08:	4680      	mov	r8, r0
 8006a0a:	4689      	mov	r9, r1
 8006a0c:	f04f 0200 	mov.w	r2, #0
 8006a10:	d124      	bne.n	8006a5c <_dtoa_r+0x60c>
 8006a12:	4b1b      	ldr	r3, [pc, #108]	; (8006a80 <_dtoa_r+0x630>)
 8006a14:	4650      	mov	r0, sl
 8006a16:	4659      	mov	r1, fp
 8006a18:	f7f9 fc58 	bl	80002cc <__adddf3>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	4640      	mov	r0, r8
 8006a22:	4649      	mov	r1, r9
 8006a24:	f7fa f898 	bl	8000b58 <__aeabi_dcmpgt>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d173      	bne.n	8006b14 <_dtoa_r+0x6c4>
 8006a2c:	4652      	mov	r2, sl
 8006a2e:	465b      	mov	r3, fp
 8006a30:	4913      	ldr	r1, [pc, #76]	; (8006a80 <_dtoa_r+0x630>)
 8006a32:	2000      	movs	r0, #0
 8006a34:	f7f9 fc48 	bl	80002c8 <__aeabi_dsub>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4640      	mov	r0, r8
 8006a3e:	4649      	mov	r1, r9
 8006a40:	f7fa f86c 	bl	8000b1c <__aeabi_dcmplt>
 8006a44:	2800      	cmp	r0, #0
 8006a46:	f43f af35 	beq.w	80068b4 <_dtoa_r+0x464>
 8006a4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006a4c:	1e6b      	subs	r3, r5, #1
 8006a4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a54:	2b30      	cmp	r3, #48	; 0x30
 8006a56:	d0f8      	beq.n	8006a4a <_dtoa_r+0x5fa>
 8006a58:	9700      	str	r7, [sp, #0]
 8006a5a:	e049      	b.n	8006af0 <_dtoa_r+0x6a0>
 8006a5c:	4b05      	ldr	r3, [pc, #20]	; (8006a74 <_dtoa_r+0x624>)
 8006a5e:	f7f9 fdeb 	bl	8000638 <__aeabi_dmul>
 8006a62:	4680      	mov	r8, r0
 8006a64:	4689      	mov	r9, r1
 8006a66:	e7bd      	b.n	80069e4 <_dtoa_r+0x594>
 8006a68:	08008990 	.word	0x08008990
 8006a6c:	08008968 	.word	0x08008968
 8006a70:	3ff00000 	.word	0x3ff00000
 8006a74:	40240000 	.word	0x40240000
 8006a78:	401c0000 	.word	0x401c0000
 8006a7c:	40140000 	.word	0x40140000
 8006a80:	3fe00000 	.word	0x3fe00000
 8006a84:	9d01      	ldr	r5, [sp, #4]
 8006a86:	4656      	mov	r6, sl
 8006a88:	465f      	mov	r7, fp
 8006a8a:	4642      	mov	r2, r8
 8006a8c:	464b      	mov	r3, r9
 8006a8e:	4630      	mov	r0, r6
 8006a90:	4639      	mov	r1, r7
 8006a92:	f7f9 fefb 	bl	800088c <__aeabi_ddiv>
 8006a96:	f7fa f87f 	bl	8000b98 <__aeabi_d2iz>
 8006a9a:	4682      	mov	sl, r0
 8006a9c:	f7f9 fd62 	bl	8000564 <__aeabi_i2d>
 8006aa0:	4642      	mov	r2, r8
 8006aa2:	464b      	mov	r3, r9
 8006aa4:	f7f9 fdc8 	bl	8000638 <__aeabi_dmul>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	4630      	mov	r0, r6
 8006aae:	4639      	mov	r1, r7
 8006ab0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006ab4:	f7f9 fc08 	bl	80002c8 <__aeabi_dsub>
 8006ab8:	f805 6b01 	strb.w	r6, [r5], #1
 8006abc:	9e01      	ldr	r6, [sp, #4]
 8006abe:	9f03      	ldr	r7, [sp, #12]
 8006ac0:	1bae      	subs	r6, r5, r6
 8006ac2:	42b7      	cmp	r7, r6
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	d135      	bne.n	8006b36 <_dtoa_r+0x6e6>
 8006aca:	f7f9 fbff 	bl	80002cc <__adddf3>
 8006ace:	4642      	mov	r2, r8
 8006ad0:	464b      	mov	r3, r9
 8006ad2:	4606      	mov	r6, r0
 8006ad4:	460f      	mov	r7, r1
 8006ad6:	f7fa f83f 	bl	8000b58 <__aeabi_dcmpgt>
 8006ada:	b9d0      	cbnz	r0, 8006b12 <_dtoa_r+0x6c2>
 8006adc:	4642      	mov	r2, r8
 8006ade:	464b      	mov	r3, r9
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	4639      	mov	r1, r7
 8006ae4:	f7fa f810 	bl	8000b08 <__aeabi_dcmpeq>
 8006ae8:	b110      	cbz	r0, 8006af0 <_dtoa_r+0x6a0>
 8006aea:	f01a 0f01 	tst.w	sl, #1
 8006aee:	d110      	bne.n	8006b12 <_dtoa_r+0x6c2>
 8006af0:	4620      	mov	r0, r4
 8006af2:	ee18 1a10 	vmov	r1, s16
 8006af6:	f000 fae5 	bl	80070c4 <_Bfree>
 8006afa:	2300      	movs	r3, #0
 8006afc:	9800      	ldr	r0, [sp, #0]
 8006afe:	702b      	strb	r3, [r5, #0]
 8006b00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b02:	3001      	adds	r0, #1
 8006b04:	6018      	str	r0, [r3, #0]
 8006b06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f43f acf1 	beq.w	80064f0 <_dtoa_r+0xa0>
 8006b0e:	601d      	str	r5, [r3, #0]
 8006b10:	e4ee      	b.n	80064f0 <_dtoa_r+0xa0>
 8006b12:	9f00      	ldr	r7, [sp, #0]
 8006b14:	462b      	mov	r3, r5
 8006b16:	461d      	mov	r5, r3
 8006b18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b1c:	2a39      	cmp	r2, #57	; 0x39
 8006b1e:	d106      	bne.n	8006b2e <_dtoa_r+0x6de>
 8006b20:	9a01      	ldr	r2, [sp, #4]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d1f7      	bne.n	8006b16 <_dtoa_r+0x6c6>
 8006b26:	9901      	ldr	r1, [sp, #4]
 8006b28:	2230      	movs	r2, #48	; 0x30
 8006b2a:	3701      	adds	r7, #1
 8006b2c:	700a      	strb	r2, [r1, #0]
 8006b2e:	781a      	ldrb	r2, [r3, #0]
 8006b30:	3201      	adds	r2, #1
 8006b32:	701a      	strb	r2, [r3, #0]
 8006b34:	e790      	b.n	8006a58 <_dtoa_r+0x608>
 8006b36:	4ba6      	ldr	r3, [pc, #664]	; (8006dd0 <_dtoa_r+0x980>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f7f9 fd7d 	bl	8000638 <__aeabi_dmul>
 8006b3e:	2200      	movs	r2, #0
 8006b40:	2300      	movs	r3, #0
 8006b42:	4606      	mov	r6, r0
 8006b44:	460f      	mov	r7, r1
 8006b46:	f7f9 ffdf 	bl	8000b08 <__aeabi_dcmpeq>
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	d09d      	beq.n	8006a8a <_dtoa_r+0x63a>
 8006b4e:	e7cf      	b.n	8006af0 <_dtoa_r+0x6a0>
 8006b50:	9a08      	ldr	r2, [sp, #32]
 8006b52:	2a00      	cmp	r2, #0
 8006b54:	f000 80d7 	beq.w	8006d06 <_dtoa_r+0x8b6>
 8006b58:	9a06      	ldr	r2, [sp, #24]
 8006b5a:	2a01      	cmp	r2, #1
 8006b5c:	f300 80ba 	bgt.w	8006cd4 <_dtoa_r+0x884>
 8006b60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b62:	2a00      	cmp	r2, #0
 8006b64:	f000 80b2 	beq.w	8006ccc <_dtoa_r+0x87c>
 8006b68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b6c:	9e07      	ldr	r6, [sp, #28]
 8006b6e:	9d04      	ldr	r5, [sp, #16]
 8006b70:	9a04      	ldr	r2, [sp, #16]
 8006b72:	441a      	add	r2, r3
 8006b74:	9204      	str	r2, [sp, #16]
 8006b76:	9a05      	ldr	r2, [sp, #20]
 8006b78:	2101      	movs	r1, #1
 8006b7a:	441a      	add	r2, r3
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	9205      	str	r2, [sp, #20]
 8006b80:	f000 fb58 	bl	8007234 <__i2b>
 8006b84:	4607      	mov	r7, r0
 8006b86:	2d00      	cmp	r5, #0
 8006b88:	dd0c      	ble.n	8006ba4 <_dtoa_r+0x754>
 8006b8a:	9b05      	ldr	r3, [sp, #20]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	dd09      	ble.n	8006ba4 <_dtoa_r+0x754>
 8006b90:	42ab      	cmp	r3, r5
 8006b92:	9a04      	ldr	r2, [sp, #16]
 8006b94:	bfa8      	it	ge
 8006b96:	462b      	movge	r3, r5
 8006b98:	1ad2      	subs	r2, r2, r3
 8006b9a:	9204      	str	r2, [sp, #16]
 8006b9c:	9a05      	ldr	r2, [sp, #20]
 8006b9e:	1aed      	subs	r5, r5, r3
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	9305      	str	r3, [sp, #20]
 8006ba4:	9b07      	ldr	r3, [sp, #28]
 8006ba6:	b31b      	cbz	r3, 8006bf0 <_dtoa_r+0x7a0>
 8006ba8:	9b08      	ldr	r3, [sp, #32]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 80af 	beq.w	8006d0e <_dtoa_r+0x8be>
 8006bb0:	2e00      	cmp	r6, #0
 8006bb2:	dd13      	ble.n	8006bdc <_dtoa_r+0x78c>
 8006bb4:	4639      	mov	r1, r7
 8006bb6:	4632      	mov	r2, r6
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f000 fbfb 	bl	80073b4 <__pow5mult>
 8006bbe:	ee18 2a10 	vmov	r2, s16
 8006bc2:	4601      	mov	r1, r0
 8006bc4:	4607      	mov	r7, r0
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	f000 fb4a 	bl	8007260 <__multiply>
 8006bcc:	ee18 1a10 	vmov	r1, s16
 8006bd0:	4680      	mov	r8, r0
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f000 fa76 	bl	80070c4 <_Bfree>
 8006bd8:	ee08 8a10 	vmov	s16, r8
 8006bdc:	9b07      	ldr	r3, [sp, #28]
 8006bde:	1b9a      	subs	r2, r3, r6
 8006be0:	d006      	beq.n	8006bf0 <_dtoa_r+0x7a0>
 8006be2:	ee18 1a10 	vmov	r1, s16
 8006be6:	4620      	mov	r0, r4
 8006be8:	f000 fbe4 	bl	80073b4 <__pow5mult>
 8006bec:	ee08 0a10 	vmov	s16, r0
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	f000 fb1e 	bl	8007234 <__i2b>
 8006bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	4606      	mov	r6, r0
 8006bfe:	f340 8088 	ble.w	8006d12 <_dtoa_r+0x8c2>
 8006c02:	461a      	mov	r2, r3
 8006c04:	4601      	mov	r1, r0
 8006c06:	4620      	mov	r0, r4
 8006c08:	f000 fbd4 	bl	80073b4 <__pow5mult>
 8006c0c:	9b06      	ldr	r3, [sp, #24]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	4606      	mov	r6, r0
 8006c12:	f340 8081 	ble.w	8006d18 <_dtoa_r+0x8c8>
 8006c16:	f04f 0800 	mov.w	r8, #0
 8006c1a:	6933      	ldr	r3, [r6, #16]
 8006c1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c20:	6918      	ldr	r0, [r3, #16]
 8006c22:	f000 fab7 	bl	8007194 <__hi0bits>
 8006c26:	f1c0 0020 	rsb	r0, r0, #32
 8006c2a:	9b05      	ldr	r3, [sp, #20]
 8006c2c:	4418      	add	r0, r3
 8006c2e:	f010 001f 	ands.w	r0, r0, #31
 8006c32:	f000 8092 	beq.w	8006d5a <_dtoa_r+0x90a>
 8006c36:	f1c0 0320 	rsb	r3, r0, #32
 8006c3a:	2b04      	cmp	r3, #4
 8006c3c:	f340 808a 	ble.w	8006d54 <_dtoa_r+0x904>
 8006c40:	f1c0 001c 	rsb	r0, r0, #28
 8006c44:	9b04      	ldr	r3, [sp, #16]
 8006c46:	4403      	add	r3, r0
 8006c48:	9304      	str	r3, [sp, #16]
 8006c4a:	9b05      	ldr	r3, [sp, #20]
 8006c4c:	4403      	add	r3, r0
 8006c4e:	4405      	add	r5, r0
 8006c50:	9305      	str	r3, [sp, #20]
 8006c52:	9b04      	ldr	r3, [sp, #16]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	dd07      	ble.n	8006c68 <_dtoa_r+0x818>
 8006c58:	ee18 1a10 	vmov	r1, s16
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	4620      	mov	r0, r4
 8006c60:	f000 fc02 	bl	8007468 <__lshift>
 8006c64:	ee08 0a10 	vmov	s16, r0
 8006c68:	9b05      	ldr	r3, [sp, #20]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	dd05      	ble.n	8006c7a <_dtoa_r+0x82a>
 8006c6e:	4631      	mov	r1, r6
 8006c70:	461a      	mov	r2, r3
 8006c72:	4620      	mov	r0, r4
 8006c74:	f000 fbf8 	bl	8007468 <__lshift>
 8006c78:	4606      	mov	r6, r0
 8006c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d06e      	beq.n	8006d5e <_dtoa_r+0x90e>
 8006c80:	ee18 0a10 	vmov	r0, s16
 8006c84:	4631      	mov	r1, r6
 8006c86:	f000 fc5f 	bl	8007548 <__mcmp>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	da67      	bge.n	8006d5e <_dtoa_r+0x90e>
 8006c8e:	9b00      	ldr	r3, [sp, #0]
 8006c90:	3b01      	subs	r3, #1
 8006c92:	ee18 1a10 	vmov	r1, s16
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	220a      	movs	r2, #10
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	f000 fa33 	bl	8007108 <__multadd>
 8006ca2:	9b08      	ldr	r3, [sp, #32]
 8006ca4:	ee08 0a10 	vmov	s16, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 81b1 	beq.w	8007010 <_dtoa_r+0xbc0>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	4639      	mov	r1, r7
 8006cb2:	220a      	movs	r2, #10
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	f000 fa27 	bl	8007108 <__multadd>
 8006cba:	9b02      	ldr	r3, [sp, #8]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	4607      	mov	r7, r0
 8006cc0:	f300 808e 	bgt.w	8006de0 <_dtoa_r+0x990>
 8006cc4:	9b06      	ldr	r3, [sp, #24]
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	dc51      	bgt.n	8006d6e <_dtoa_r+0x91e>
 8006cca:	e089      	b.n	8006de0 <_dtoa_r+0x990>
 8006ccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006cd2:	e74b      	b.n	8006b6c <_dtoa_r+0x71c>
 8006cd4:	9b03      	ldr	r3, [sp, #12]
 8006cd6:	1e5e      	subs	r6, r3, #1
 8006cd8:	9b07      	ldr	r3, [sp, #28]
 8006cda:	42b3      	cmp	r3, r6
 8006cdc:	bfbf      	itttt	lt
 8006cde:	9b07      	ldrlt	r3, [sp, #28]
 8006ce0:	9607      	strlt	r6, [sp, #28]
 8006ce2:	1af2      	sublt	r2, r6, r3
 8006ce4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006ce6:	bfb6      	itet	lt
 8006ce8:	189b      	addlt	r3, r3, r2
 8006cea:	1b9e      	subge	r6, r3, r6
 8006cec:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006cee:	9b03      	ldr	r3, [sp, #12]
 8006cf0:	bfb8      	it	lt
 8006cf2:	2600      	movlt	r6, #0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	bfb7      	itett	lt
 8006cf8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006cfc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006d00:	1a9d      	sublt	r5, r3, r2
 8006d02:	2300      	movlt	r3, #0
 8006d04:	e734      	b.n	8006b70 <_dtoa_r+0x720>
 8006d06:	9e07      	ldr	r6, [sp, #28]
 8006d08:	9d04      	ldr	r5, [sp, #16]
 8006d0a:	9f08      	ldr	r7, [sp, #32]
 8006d0c:	e73b      	b.n	8006b86 <_dtoa_r+0x736>
 8006d0e:	9a07      	ldr	r2, [sp, #28]
 8006d10:	e767      	b.n	8006be2 <_dtoa_r+0x792>
 8006d12:	9b06      	ldr	r3, [sp, #24]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	dc18      	bgt.n	8006d4a <_dtoa_r+0x8fa>
 8006d18:	f1ba 0f00 	cmp.w	sl, #0
 8006d1c:	d115      	bne.n	8006d4a <_dtoa_r+0x8fa>
 8006d1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d22:	b993      	cbnz	r3, 8006d4a <_dtoa_r+0x8fa>
 8006d24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d28:	0d1b      	lsrs	r3, r3, #20
 8006d2a:	051b      	lsls	r3, r3, #20
 8006d2c:	b183      	cbz	r3, 8006d50 <_dtoa_r+0x900>
 8006d2e:	9b04      	ldr	r3, [sp, #16]
 8006d30:	3301      	adds	r3, #1
 8006d32:	9304      	str	r3, [sp, #16]
 8006d34:	9b05      	ldr	r3, [sp, #20]
 8006d36:	3301      	adds	r3, #1
 8006d38:	9305      	str	r3, [sp, #20]
 8006d3a:	f04f 0801 	mov.w	r8, #1
 8006d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f47f af6a 	bne.w	8006c1a <_dtoa_r+0x7ca>
 8006d46:	2001      	movs	r0, #1
 8006d48:	e76f      	b.n	8006c2a <_dtoa_r+0x7da>
 8006d4a:	f04f 0800 	mov.w	r8, #0
 8006d4e:	e7f6      	b.n	8006d3e <_dtoa_r+0x8ee>
 8006d50:	4698      	mov	r8, r3
 8006d52:	e7f4      	b.n	8006d3e <_dtoa_r+0x8ee>
 8006d54:	f43f af7d 	beq.w	8006c52 <_dtoa_r+0x802>
 8006d58:	4618      	mov	r0, r3
 8006d5a:	301c      	adds	r0, #28
 8006d5c:	e772      	b.n	8006c44 <_dtoa_r+0x7f4>
 8006d5e:	9b03      	ldr	r3, [sp, #12]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	dc37      	bgt.n	8006dd4 <_dtoa_r+0x984>
 8006d64:	9b06      	ldr	r3, [sp, #24]
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	dd34      	ble.n	8006dd4 <_dtoa_r+0x984>
 8006d6a:	9b03      	ldr	r3, [sp, #12]
 8006d6c:	9302      	str	r3, [sp, #8]
 8006d6e:	9b02      	ldr	r3, [sp, #8]
 8006d70:	b96b      	cbnz	r3, 8006d8e <_dtoa_r+0x93e>
 8006d72:	4631      	mov	r1, r6
 8006d74:	2205      	movs	r2, #5
 8006d76:	4620      	mov	r0, r4
 8006d78:	f000 f9c6 	bl	8007108 <__multadd>
 8006d7c:	4601      	mov	r1, r0
 8006d7e:	4606      	mov	r6, r0
 8006d80:	ee18 0a10 	vmov	r0, s16
 8006d84:	f000 fbe0 	bl	8007548 <__mcmp>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	f73f adbb 	bgt.w	8006904 <_dtoa_r+0x4b4>
 8006d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d90:	9d01      	ldr	r5, [sp, #4]
 8006d92:	43db      	mvns	r3, r3
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	f04f 0800 	mov.w	r8, #0
 8006d9a:	4631      	mov	r1, r6
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	f000 f991 	bl	80070c4 <_Bfree>
 8006da2:	2f00      	cmp	r7, #0
 8006da4:	f43f aea4 	beq.w	8006af0 <_dtoa_r+0x6a0>
 8006da8:	f1b8 0f00 	cmp.w	r8, #0
 8006dac:	d005      	beq.n	8006dba <_dtoa_r+0x96a>
 8006dae:	45b8      	cmp	r8, r7
 8006db0:	d003      	beq.n	8006dba <_dtoa_r+0x96a>
 8006db2:	4641      	mov	r1, r8
 8006db4:	4620      	mov	r0, r4
 8006db6:	f000 f985 	bl	80070c4 <_Bfree>
 8006dba:	4639      	mov	r1, r7
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	f000 f981 	bl	80070c4 <_Bfree>
 8006dc2:	e695      	b.n	8006af0 <_dtoa_r+0x6a0>
 8006dc4:	2600      	movs	r6, #0
 8006dc6:	4637      	mov	r7, r6
 8006dc8:	e7e1      	b.n	8006d8e <_dtoa_r+0x93e>
 8006dca:	9700      	str	r7, [sp, #0]
 8006dcc:	4637      	mov	r7, r6
 8006dce:	e599      	b.n	8006904 <_dtoa_r+0x4b4>
 8006dd0:	40240000 	.word	0x40240000
 8006dd4:	9b08      	ldr	r3, [sp, #32]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 80ca 	beq.w	8006f70 <_dtoa_r+0xb20>
 8006ddc:	9b03      	ldr	r3, [sp, #12]
 8006dde:	9302      	str	r3, [sp, #8]
 8006de0:	2d00      	cmp	r5, #0
 8006de2:	dd05      	ble.n	8006df0 <_dtoa_r+0x9a0>
 8006de4:	4639      	mov	r1, r7
 8006de6:	462a      	mov	r2, r5
 8006de8:	4620      	mov	r0, r4
 8006dea:	f000 fb3d 	bl	8007468 <__lshift>
 8006dee:	4607      	mov	r7, r0
 8006df0:	f1b8 0f00 	cmp.w	r8, #0
 8006df4:	d05b      	beq.n	8006eae <_dtoa_r+0xa5e>
 8006df6:	6879      	ldr	r1, [r7, #4]
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f000 f923 	bl	8007044 <_Balloc>
 8006dfe:	4605      	mov	r5, r0
 8006e00:	b928      	cbnz	r0, 8006e0e <_dtoa_r+0x9be>
 8006e02:	4b87      	ldr	r3, [pc, #540]	; (8007020 <_dtoa_r+0xbd0>)
 8006e04:	4602      	mov	r2, r0
 8006e06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e0a:	f7ff bb3b 	b.w	8006484 <_dtoa_r+0x34>
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	3202      	adds	r2, #2
 8006e12:	0092      	lsls	r2, r2, #2
 8006e14:	f107 010c 	add.w	r1, r7, #12
 8006e18:	300c      	adds	r0, #12
 8006e1a:	f7fe fded 	bl	80059f8 <memcpy>
 8006e1e:	2201      	movs	r2, #1
 8006e20:	4629      	mov	r1, r5
 8006e22:	4620      	mov	r0, r4
 8006e24:	f000 fb20 	bl	8007468 <__lshift>
 8006e28:	9b01      	ldr	r3, [sp, #4]
 8006e2a:	f103 0901 	add.w	r9, r3, #1
 8006e2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006e32:	4413      	add	r3, r2
 8006e34:	9305      	str	r3, [sp, #20]
 8006e36:	f00a 0301 	and.w	r3, sl, #1
 8006e3a:	46b8      	mov	r8, r7
 8006e3c:	9304      	str	r3, [sp, #16]
 8006e3e:	4607      	mov	r7, r0
 8006e40:	4631      	mov	r1, r6
 8006e42:	ee18 0a10 	vmov	r0, s16
 8006e46:	f7ff fa77 	bl	8006338 <quorem>
 8006e4a:	4641      	mov	r1, r8
 8006e4c:	9002      	str	r0, [sp, #8]
 8006e4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006e52:	ee18 0a10 	vmov	r0, s16
 8006e56:	f000 fb77 	bl	8007548 <__mcmp>
 8006e5a:	463a      	mov	r2, r7
 8006e5c:	9003      	str	r0, [sp, #12]
 8006e5e:	4631      	mov	r1, r6
 8006e60:	4620      	mov	r0, r4
 8006e62:	f000 fb8d 	bl	8007580 <__mdiff>
 8006e66:	68c2      	ldr	r2, [r0, #12]
 8006e68:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006e6c:	4605      	mov	r5, r0
 8006e6e:	bb02      	cbnz	r2, 8006eb2 <_dtoa_r+0xa62>
 8006e70:	4601      	mov	r1, r0
 8006e72:	ee18 0a10 	vmov	r0, s16
 8006e76:	f000 fb67 	bl	8007548 <__mcmp>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	4629      	mov	r1, r5
 8006e7e:	4620      	mov	r0, r4
 8006e80:	9207      	str	r2, [sp, #28]
 8006e82:	f000 f91f 	bl	80070c4 <_Bfree>
 8006e86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006e8a:	ea43 0102 	orr.w	r1, r3, r2
 8006e8e:	9b04      	ldr	r3, [sp, #16]
 8006e90:	430b      	orrs	r3, r1
 8006e92:	464d      	mov	r5, r9
 8006e94:	d10f      	bne.n	8006eb6 <_dtoa_r+0xa66>
 8006e96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e9a:	d02a      	beq.n	8006ef2 <_dtoa_r+0xaa2>
 8006e9c:	9b03      	ldr	r3, [sp, #12]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	dd02      	ble.n	8006ea8 <_dtoa_r+0xa58>
 8006ea2:	9b02      	ldr	r3, [sp, #8]
 8006ea4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006ea8:	f88b a000 	strb.w	sl, [fp]
 8006eac:	e775      	b.n	8006d9a <_dtoa_r+0x94a>
 8006eae:	4638      	mov	r0, r7
 8006eb0:	e7ba      	b.n	8006e28 <_dtoa_r+0x9d8>
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	e7e2      	b.n	8006e7c <_dtoa_r+0xa2c>
 8006eb6:	9b03      	ldr	r3, [sp, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	db04      	blt.n	8006ec6 <_dtoa_r+0xa76>
 8006ebc:	9906      	ldr	r1, [sp, #24]
 8006ebe:	430b      	orrs	r3, r1
 8006ec0:	9904      	ldr	r1, [sp, #16]
 8006ec2:	430b      	orrs	r3, r1
 8006ec4:	d122      	bne.n	8006f0c <_dtoa_r+0xabc>
 8006ec6:	2a00      	cmp	r2, #0
 8006ec8:	ddee      	ble.n	8006ea8 <_dtoa_r+0xa58>
 8006eca:	ee18 1a10 	vmov	r1, s16
 8006ece:	2201      	movs	r2, #1
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	f000 fac9 	bl	8007468 <__lshift>
 8006ed6:	4631      	mov	r1, r6
 8006ed8:	ee08 0a10 	vmov	s16, r0
 8006edc:	f000 fb34 	bl	8007548 <__mcmp>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	dc03      	bgt.n	8006eec <_dtoa_r+0xa9c>
 8006ee4:	d1e0      	bne.n	8006ea8 <_dtoa_r+0xa58>
 8006ee6:	f01a 0f01 	tst.w	sl, #1
 8006eea:	d0dd      	beq.n	8006ea8 <_dtoa_r+0xa58>
 8006eec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006ef0:	d1d7      	bne.n	8006ea2 <_dtoa_r+0xa52>
 8006ef2:	2339      	movs	r3, #57	; 0x39
 8006ef4:	f88b 3000 	strb.w	r3, [fp]
 8006ef8:	462b      	mov	r3, r5
 8006efa:	461d      	mov	r5, r3
 8006efc:	3b01      	subs	r3, #1
 8006efe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f02:	2a39      	cmp	r2, #57	; 0x39
 8006f04:	d071      	beq.n	8006fea <_dtoa_r+0xb9a>
 8006f06:	3201      	adds	r2, #1
 8006f08:	701a      	strb	r2, [r3, #0]
 8006f0a:	e746      	b.n	8006d9a <_dtoa_r+0x94a>
 8006f0c:	2a00      	cmp	r2, #0
 8006f0e:	dd07      	ble.n	8006f20 <_dtoa_r+0xad0>
 8006f10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f14:	d0ed      	beq.n	8006ef2 <_dtoa_r+0xaa2>
 8006f16:	f10a 0301 	add.w	r3, sl, #1
 8006f1a:	f88b 3000 	strb.w	r3, [fp]
 8006f1e:	e73c      	b.n	8006d9a <_dtoa_r+0x94a>
 8006f20:	9b05      	ldr	r3, [sp, #20]
 8006f22:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006f26:	4599      	cmp	r9, r3
 8006f28:	d047      	beq.n	8006fba <_dtoa_r+0xb6a>
 8006f2a:	ee18 1a10 	vmov	r1, s16
 8006f2e:	2300      	movs	r3, #0
 8006f30:	220a      	movs	r2, #10
 8006f32:	4620      	mov	r0, r4
 8006f34:	f000 f8e8 	bl	8007108 <__multadd>
 8006f38:	45b8      	cmp	r8, r7
 8006f3a:	ee08 0a10 	vmov	s16, r0
 8006f3e:	f04f 0300 	mov.w	r3, #0
 8006f42:	f04f 020a 	mov.w	r2, #10
 8006f46:	4641      	mov	r1, r8
 8006f48:	4620      	mov	r0, r4
 8006f4a:	d106      	bne.n	8006f5a <_dtoa_r+0xb0a>
 8006f4c:	f000 f8dc 	bl	8007108 <__multadd>
 8006f50:	4680      	mov	r8, r0
 8006f52:	4607      	mov	r7, r0
 8006f54:	f109 0901 	add.w	r9, r9, #1
 8006f58:	e772      	b.n	8006e40 <_dtoa_r+0x9f0>
 8006f5a:	f000 f8d5 	bl	8007108 <__multadd>
 8006f5e:	4639      	mov	r1, r7
 8006f60:	4680      	mov	r8, r0
 8006f62:	2300      	movs	r3, #0
 8006f64:	220a      	movs	r2, #10
 8006f66:	4620      	mov	r0, r4
 8006f68:	f000 f8ce 	bl	8007108 <__multadd>
 8006f6c:	4607      	mov	r7, r0
 8006f6e:	e7f1      	b.n	8006f54 <_dtoa_r+0xb04>
 8006f70:	9b03      	ldr	r3, [sp, #12]
 8006f72:	9302      	str	r3, [sp, #8]
 8006f74:	9d01      	ldr	r5, [sp, #4]
 8006f76:	ee18 0a10 	vmov	r0, s16
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	f7ff f9dc 	bl	8006338 <quorem>
 8006f80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006f84:	9b01      	ldr	r3, [sp, #4]
 8006f86:	f805 ab01 	strb.w	sl, [r5], #1
 8006f8a:	1aea      	subs	r2, r5, r3
 8006f8c:	9b02      	ldr	r3, [sp, #8]
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	dd09      	ble.n	8006fa6 <_dtoa_r+0xb56>
 8006f92:	ee18 1a10 	vmov	r1, s16
 8006f96:	2300      	movs	r3, #0
 8006f98:	220a      	movs	r2, #10
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	f000 f8b4 	bl	8007108 <__multadd>
 8006fa0:	ee08 0a10 	vmov	s16, r0
 8006fa4:	e7e7      	b.n	8006f76 <_dtoa_r+0xb26>
 8006fa6:	9b02      	ldr	r3, [sp, #8]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	bfc8      	it	gt
 8006fac:	461d      	movgt	r5, r3
 8006fae:	9b01      	ldr	r3, [sp, #4]
 8006fb0:	bfd8      	it	le
 8006fb2:	2501      	movle	r5, #1
 8006fb4:	441d      	add	r5, r3
 8006fb6:	f04f 0800 	mov.w	r8, #0
 8006fba:	ee18 1a10 	vmov	r1, s16
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	f000 fa51 	bl	8007468 <__lshift>
 8006fc6:	4631      	mov	r1, r6
 8006fc8:	ee08 0a10 	vmov	s16, r0
 8006fcc:	f000 fabc 	bl	8007548 <__mcmp>
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	dc91      	bgt.n	8006ef8 <_dtoa_r+0xaa8>
 8006fd4:	d102      	bne.n	8006fdc <_dtoa_r+0xb8c>
 8006fd6:	f01a 0f01 	tst.w	sl, #1
 8006fda:	d18d      	bne.n	8006ef8 <_dtoa_r+0xaa8>
 8006fdc:	462b      	mov	r3, r5
 8006fde:	461d      	mov	r5, r3
 8006fe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fe4:	2a30      	cmp	r2, #48	; 0x30
 8006fe6:	d0fa      	beq.n	8006fde <_dtoa_r+0xb8e>
 8006fe8:	e6d7      	b.n	8006d9a <_dtoa_r+0x94a>
 8006fea:	9a01      	ldr	r2, [sp, #4]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d184      	bne.n	8006efa <_dtoa_r+0xaaa>
 8006ff0:	9b00      	ldr	r3, [sp, #0]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	2331      	movs	r3, #49	; 0x31
 8006ff8:	7013      	strb	r3, [r2, #0]
 8006ffa:	e6ce      	b.n	8006d9a <_dtoa_r+0x94a>
 8006ffc:	4b09      	ldr	r3, [pc, #36]	; (8007024 <_dtoa_r+0xbd4>)
 8006ffe:	f7ff ba95 	b.w	800652c <_dtoa_r+0xdc>
 8007002:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007004:	2b00      	cmp	r3, #0
 8007006:	f47f aa6e 	bne.w	80064e6 <_dtoa_r+0x96>
 800700a:	4b07      	ldr	r3, [pc, #28]	; (8007028 <_dtoa_r+0xbd8>)
 800700c:	f7ff ba8e 	b.w	800652c <_dtoa_r+0xdc>
 8007010:	9b02      	ldr	r3, [sp, #8]
 8007012:	2b00      	cmp	r3, #0
 8007014:	dcae      	bgt.n	8006f74 <_dtoa_r+0xb24>
 8007016:	9b06      	ldr	r3, [sp, #24]
 8007018:	2b02      	cmp	r3, #2
 800701a:	f73f aea8 	bgt.w	8006d6e <_dtoa_r+0x91e>
 800701e:	e7a9      	b.n	8006f74 <_dtoa_r+0xb24>
 8007020:	080088fb 	.word	0x080088fb
 8007024:	08008858 	.word	0x08008858
 8007028:	0800887c 	.word	0x0800887c

0800702c <_localeconv_r>:
 800702c:	4800      	ldr	r0, [pc, #0]	; (8007030 <_localeconv_r+0x4>)
 800702e:	4770      	bx	lr
 8007030:	20000160 	.word	0x20000160

08007034 <malloc>:
 8007034:	4b02      	ldr	r3, [pc, #8]	; (8007040 <malloc+0xc>)
 8007036:	4601      	mov	r1, r0
 8007038:	6818      	ldr	r0, [r3, #0]
 800703a:	f000 bc09 	b.w	8007850 <_malloc_r>
 800703e:	bf00      	nop
 8007040:	2000000c 	.word	0x2000000c

08007044 <_Balloc>:
 8007044:	b570      	push	{r4, r5, r6, lr}
 8007046:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007048:	4604      	mov	r4, r0
 800704a:	460d      	mov	r5, r1
 800704c:	b976      	cbnz	r6, 800706c <_Balloc+0x28>
 800704e:	2010      	movs	r0, #16
 8007050:	f7ff fff0 	bl	8007034 <malloc>
 8007054:	4602      	mov	r2, r0
 8007056:	6260      	str	r0, [r4, #36]	; 0x24
 8007058:	b920      	cbnz	r0, 8007064 <_Balloc+0x20>
 800705a:	4b18      	ldr	r3, [pc, #96]	; (80070bc <_Balloc+0x78>)
 800705c:	4818      	ldr	r0, [pc, #96]	; (80070c0 <_Balloc+0x7c>)
 800705e:	2166      	movs	r1, #102	; 0x66
 8007060:	f000 fdd6 	bl	8007c10 <__assert_func>
 8007064:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007068:	6006      	str	r6, [r0, #0]
 800706a:	60c6      	str	r6, [r0, #12]
 800706c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800706e:	68f3      	ldr	r3, [r6, #12]
 8007070:	b183      	cbz	r3, 8007094 <_Balloc+0x50>
 8007072:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800707a:	b9b8      	cbnz	r0, 80070ac <_Balloc+0x68>
 800707c:	2101      	movs	r1, #1
 800707e:	fa01 f605 	lsl.w	r6, r1, r5
 8007082:	1d72      	adds	r2, r6, #5
 8007084:	0092      	lsls	r2, r2, #2
 8007086:	4620      	mov	r0, r4
 8007088:	f000 fb60 	bl	800774c <_calloc_r>
 800708c:	b160      	cbz	r0, 80070a8 <_Balloc+0x64>
 800708e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007092:	e00e      	b.n	80070b2 <_Balloc+0x6e>
 8007094:	2221      	movs	r2, #33	; 0x21
 8007096:	2104      	movs	r1, #4
 8007098:	4620      	mov	r0, r4
 800709a:	f000 fb57 	bl	800774c <_calloc_r>
 800709e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070a0:	60f0      	str	r0, [r6, #12]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1e4      	bne.n	8007072 <_Balloc+0x2e>
 80070a8:	2000      	movs	r0, #0
 80070aa:	bd70      	pop	{r4, r5, r6, pc}
 80070ac:	6802      	ldr	r2, [r0, #0]
 80070ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80070b2:	2300      	movs	r3, #0
 80070b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80070b8:	e7f7      	b.n	80070aa <_Balloc+0x66>
 80070ba:	bf00      	nop
 80070bc:	08008889 	.word	0x08008889
 80070c0:	0800890c 	.word	0x0800890c

080070c4 <_Bfree>:
 80070c4:	b570      	push	{r4, r5, r6, lr}
 80070c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070c8:	4605      	mov	r5, r0
 80070ca:	460c      	mov	r4, r1
 80070cc:	b976      	cbnz	r6, 80070ec <_Bfree+0x28>
 80070ce:	2010      	movs	r0, #16
 80070d0:	f7ff ffb0 	bl	8007034 <malloc>
 80070d4:	4602      	mov	r2, r0
 80070d6:	6268      	str	r0, [r5, #36]	; 0x24
 80070d8:	b920      	cbnz	r0, 80070e4 <_Bfree+0x20>
 80070da:	4b09      	ldr	r3, [pc, #36]	; (8007100 <_Bfree+0x3c>)
 80070dc:	4809      	ldr	r0, [pc, #36]	; (8007104 <_Bfree+0x40>)
 80070de:	218a      	movs	r1, #138	; 0x8a
 80070e0:	f000 fd96 	bl	8007c10 <__assert_func>
 80070e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070e8:	6006      	str	r6, [r0, #0]
 80070ea:	60c6      	str	r6, [r0, #12]
 80070ec:	b13c      	cbz	r4, 80070fe <_Bfree+0x3a>
 80070ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80070f0:	6862      	ldr	r2, [r4, #4]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070f8:	6021      	str	r1, [r4, #0]
 80070fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80070fe:	bd70      	pop	{r4, r5, r6, pc}
 8007100:	08008889 	.word	0x08008889
 8007104:	0800890c 	.word	0x0800890c

08007108 <__multadd>:
 8007108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800710c:	690d      	ldr	r5, [r1, #16]
 800710e:	4607      	mov	r7, r0
 8007110:	460c      	mov	r4, r1
 8007112:	461e      	mov	r6, r3
 8007114:	f101 0c14 	add.w	ip, r1, #20
 8007118:	2000      	movs	r0, #0
 800711a:	f8dc 3000 	ldr.w	r3, [ip]
 800711e:	b299      	uxth	r1, r3
 8007120:	fb02 6101 	mla	r1, r2, r1, r6
 8007124:	0c1e      	lsrs	r6, r3, #16
 8007126:	0c0b      	lsrs	r3, r1, #16
 8007128:	fb02 3306 	mla	r3, r2, r6, r3
 800712c:	b289      	uxth	r1, r1
 800712e:	3001      	adds	r0, #1
 8007130:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007134:	4285      	cmp	r5, r0
 8007136:	f84c 1b04 	str.w	r1, [ip], #4
 800713a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800713e:	dcec      	bgt.n	800711a <__multadd+0x12>
 8007140:	b30e      	cbz	r6, 8007186 <__multadd+0x7e>
 8007142:	68a3      	ldr	r3, [r4, #8]
 8007144:	42ab      	cmp	r3, r5
 8007146:	dc19      	bgt.n	800717c <__multadd+0x74>
 8007148:	6861      	ldr	r1, [r4, #4]
 800714a:	4638      	mov	r0, r7
 800714c:	3101      	adds	r1, #1
 800714e:	f7ff ff79 	bl	8007044 <_Balloc>
 8007152:	4680      	mov	r8, r0
 8007154:	b928      	cbnz	r0, 8007162 <__multadd+0x5a>
 8007156:	4602      	mov	r2, r0
 8007158:	4b0c      	ldr	r3, [pc, #48]	; (800718c <__multadd+0x84>)
 800715a:	480d      	ldr	r0, [pc, #52]	; (8007190 <__multadd+0x88>)
 800715c:	21b5      	movs	r1, #181	; 0xb5
 800715e:	f000 fd57 	bl	8007c10 <__assert_func>
 8007162:	6922      	ldr	r2, [r4, #16]
 8007164:	3202      	adds	r2, #2
 8007166:	f104 010c 	add.w	r1, r4, #12
 800716a:	0092      	lsls	r2, r2, #2
 800716c:	300c      	adds	r0, #12
 800716e:	f7fe fc43 	bl	80059f8 <memcpy>
 8007172:	4621      	mov	r1, r4
 8007174:	4638      	mov	r0, r7
 8007176:	f7ff ffa5 	bl	80070c4 <_Bfree>
 800717a:	4644      	mov	r4, r8
 800717c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007180:	3501      	adds	r5, #1
 8007182:	615e      	str	r6, [r3, #20]
 8007184:	6125      	str	r5, [r4, #16]
 8007186:	4620      	mov	r0, r4
 8007188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800718c:	080088fb 	.word	0x080088fb
 8007190:	0800890c 	.word	0x0800890c

08007194 <__hi0bits>:
 8007194:	0c03      	lsrs	r3, r0, #16
 8007196:	041b      	lsls	r3, r3, #16
 8007198:	b9d3      	cbnz	r3, 80071d0 <__hi0bits+0x3c>
 800719a:	0400      	lsls	r0, r0, #16
 800719c:	2310      	movs	r3, #16
 800719e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80071a2:	bf04      	itt	eq
 80071a4:	0200      	lsleq	r0, r0, #8
 80071a6:	3308      	addeq	r3, #8
 80071a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80071ac:	bf04      	itt	eq
 80071ae:	0100      	lsleq	r0, r0, #4
 80071b0:	3304      	addeq	r3, #4
 80071b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80071b6:	bf04      	itt	eq
 80071b8:	0080      	lsleq	r0, r0, #2
 80071ba:	3302      	addeq	r3, #2
 80071bc:	2800      	cmp	r0, #0
 80071be:	db05      	blt.n	80071cc <__hi0bits+0x38>
 80071c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80071c4:	f103 0301 	add.w	r3, r3, #1
 80071c8:	bf08      	it	eq
 80071ca:	2320      	moveq	r3, #32
 80071cc:	4618      	mov	r0, r3
 80071ce:	4770      	bx	lr
 80071d0:	2300      	movs	r3, #0
 80071d2:	e7e4      	b.n	800719e <__hi0bits+0xa>

080071d4 <__lo0bits>:
 80071d4:	6803      	ldr	r3, [r0, #0]
 80071d6:	f013 0207 	ands.w	r2, r3, #7
 80071da:	4601      	mov	r1, r0
 80071dc:	d00b      	beq.n	80071f6 <__lo0bits+0x22>
 80071de:	07da      	lsls	r2, r3, #31
 80071e0:	d423      	bmi.n	800722a <__lo0bits+0x56>
 80071e2:	0798      	lsls	r0, r3, #30
 80071e4:	bf49      	itett	mi
 80071e6:	085b      	lsrmi	r3, r3, #1
 80071e8:	089b      	lsrpl	r3, r3, #2
 80071ea:	2001      	movmi	r0, #1
 80071ec:	600b      	strmi	r3, [r1, #0]
 80071ee:	bf5c      	itt	pl
 80071f0:	600b      	strpl	r3, [r1, #0]
 80071f2:	2002      	movpl	r0, #2
 80071f4:	4770      	bx	lr
 80071f6:	b298      	uxth	r0, r3
 80071f8:	b9a8      	cbnz	r0, 8007226 <__lo0bits+0x52>
 80071fa:	0c1b      	lsrs	r3, r3, #16
 80071fc:	2010      	movs	r0, #16
 80071fe:	b2da      	uxtb	r2, r3
 8007200:	b90a      	cbnz	r2, 8007206 <__lo0bits+0x32>
 8007202:	3008      	adds	r0, #8
 8007204:	0a1b      	lsrs	r3, r3, #8
 8007206:	071a      	lsls	r2, r3, #28
 8007208:	bf04      	itt	eq
 800720a:	091b      	lsreq	r3, r3, #4
 800720c:	3004      	addeq	r0, #4
 800720e:	079a      	lsls	r2, r3, #30
 8007210:	bf04      	itt	eq
 8007212:	089b      	lsreq	r3, r3, #2
 8007214:	3002      	addeq	r0, #2
 8007216:	07da      	lsls	r2, r3, #31
 8007218:	d403      	bmi.n	8007222 <__lo0bits+0x4e>
 800721a:	085b      	lsrs	r3, r3, #1
 800721c:	f100 0001 	add.w	r0, r0, #1
 8007220:	d005      	beq.n	800722e <__lo0bits+0x5a>
 8007222:	600b      	str	r3, [r1, #0]
 8007224:	4770      	bx	lr
 8007226:	4610      	mov	r0, r2
 8007228:	e7e9      	b.n	80071fe <__lo0bits+0x2a>
 800722a:	2000      	movs	r0, #0
 800722c:	4770      	bx	lr
 800722e:	2020      	movs	r0, #32
 8007230:	4770      	bx	lr
	...

08007234 <__i2b>:
 8007234:	b510      	push	{r4, lr}
 8007236:	460c      	mov	r4, r1
 8007238:	2101      	movs	r1, #1
 800723a:	f7ff ff03 	bl	8007044 <_Balloc>
 800723e:	4602      	mov	r2, r0
 8007240:	b928      	cbnz	r0, 800724e <__i2b+0x1a>
 8007242:	4b05      	ldr	r3, [pc, #20]	; (8007258 <__i2b+0x24>)
 8007244:	4805      	ldr	r0, [pc, #20]	; (800725c <__i2b+0x28>)
 8007246:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800724a:	f000 fce1 	bl	8007c10 <__assert_func>
 800724e:	2301      	movs	r3, #1
 8007250:	6144      	str	r4, [r0, #20]
 8007252:	6103      	str	r3, [r0, #16]
 8007254:	bd10      	pop	{r4, pc}
 8007256:	bf00      	nop
 8007258:	080088fb 	.word	0x080088fb
 800725c:	0800890c 	.word	0x0800890c

08007260 <__multiply>:
 8007260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007264:	4691      	mov	r9, r2
 8007266:	690a      	ldr	r2, [r1, #16]
 8007268:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800726c:	429a      	cmp	r2, r3
 800726e:	bfb8      	it	lt
 8007270:	460b      	movlt	r3, r1
 8007272:	460c      	mov	r4, r1
 8007274:	bfbc      	itt	lt
 8007276:	464c      	movlt	r4, r9
 8007278:	4699      	movlt	r9, r3
 800727a:	6927      	ldr	r7, [r4, #16]
 800727c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007280:	68a3      	ldr	r3, [r4, #8]
 8007282:	6861      	ldr	r1, [r4, #4]
 8007284:	eb07 060a 	add.w	r6, r7, sl
 8007288:	42b3      	cmp	r3, r6
 800728a:	b085      	sub	sp, #20
 800728c:	bfb8      	it	lt
 800728e:	3101      	addlt	r1, #1
 8007290:	f7ff fed8 	bl	8007044 <_Balloc>
 8007294:	b930      	cbnz	r0, 80072a4 <__multiply+0x44>
 8007296:	4602      	mov	r2, r0
 8007298:	4b44      	ldr	r3, [pc, #272]	; (80073ac <__multiply+0x14c>)
 800729a:	4845      	ldr	r0, [pc, #276]	; (80073b0 <__multiply+0x150>)
 800729c:	f240 115d 	movw	r1, #349	; 0x15d
 80072a0:	f000 fcb6 	bl	8007c10 <__assert_func>
 80072a4:	f100 0514 	add.w	r5, r0, #20
 80072a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80072ac:	462b      	mov	r3, r5
 80072ae:	2200      	movs	r2, #0
 80072b0:	4543      	cmp	r3, r8
 80072b2:	d321      	bcc.n	80072f8 <__multiply+0x98>
 80072b4:	f104 0314 	add.w	r3, r4, #20
 80072b8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80072bc:	f109 0314 	add.w	r3, r9, #20
 80072c0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80072c4:	9202      	str	r2, [sp, #8]
 80072c6:	1b3a      	subs	r2, r7, r4
 80072c8:	3a15      	subs	r2, #21
 80072ca:	f022 0203 	bic.w	r2, r2, #3
 80072ce:	3204      	adds	r2, #4
 80072d0:	f104 0115 	add.w	r1, r4, #21
 80072d4:	428f      	cmp	r7, r1
 80072d6:	bf38      	it	cc
 80072d8:	2204      	movcc	r2, #4
 80072da:	9201      	str	r2, [sp, #4]
 80072dc:	9a02      	ldr	r2, [sp, #8]
 80072de:	9303      	str	r3, [sp, #12]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d80c      	bhi.n	80072fe <__multiply+0x9e>
 80072e4:	2e00      	cmp	r6, #0
 80072e6:	dd03      	ble.n	80072f0 <__multiply+0x90>
 80072e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d05a      	beq.n	80073a6 <__multiply+0x146>
 80072f0:	6106      	str	r6, [r0, #16]
 80072f2:	b005      	add	sp, #20
 80072f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f8:	f843 2b04 	str.w	r2, [r3], #4
 80072fc:	e7d8      	b.n	80072b0 <__multiply+0x50>
 80072fe:	f8b3 a000 	ldrh.w	sl, [r3]
 8007302:	f1ba 0f00 	cmp.w	sl, #0
 8007306:	d024      	beq.n	8007352 <__multiply+0xf2>
 8007308:	f104 0e14 	add.w	lr, r4, #20
 800730c:	46a9      	mov	r9, r5
 800730e:	f04f 0c00 	mov.w	ip, #0
 8007312:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007316:	f8d9 1000 	ldr.w	r1, [r9]
 800731a:	fa1f fb82 	uxth.w	fp, r2
 800731e:	b289      	uxth	r1, r1
 8007320:	fb0a 110b 	mla	r1, sl, fp, r1
 8007324:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007328:	f8d9 2000 	ldr.w	r2, [r9]
 800732c:	4461      	add	r1, ip
 800732e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007332:	fb0a c20b 	mla	r2, sl, fp, ip
 8007336:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800733a:	b289      	uxth	r1, r1
 800733c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007340:	4577      	cmp	r7, lr
 8007342:	f849 1b04 	str.w	r1, [r9], #4
 8007346:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800734a:	d8e2      	bhi.n	8007312 <__multiply+0xb2>
 800734c:	9a01      	ldr	r2, [sp, #4]
 800734e:	f845 c002 	str.w	ip, [r5, r2]
 8007352:	9a03      	ldr	r2, [sp, #12]
 8007354:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007358:	3304      	adds	r3, #4
 800735a:	f1b9 0f00 	cmp.w	r9, #0
 800735e:	d020      	beq.n	80073a2 <__multiply+0x142>
 8007360:	6829      	ldr	r1, [r5, #0]
 8007362:	f104 0c14 	add.w	ip, r4, #20
 8007366:	46ae      	mov	lr, r5
 8007368:	f04f 0a00 	mov.w	sl, #0
 800736c:	f8bc b000 	ldrh.w	fp, [ip]
 8007370:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007374:	fb09 220b 	mla	r2, r9, fp, r2
 8007378:	4492      	add	sl, r2
 800737a:	b289      	uxth	r1, r1
 800737c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007380:	f84e 1b04 	str.w	r1, [lr], #4
 8007384:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007388:	f8be 1000 	ldrh.w	r1, [lr]
 800738c:	0c12      	lsrs	r2, r2, #16
 800738e:	fb09 1102 	mla	r1, r9, r2, r1
 8007392:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007396:	4567      	cmp	r7, ip
 8007398:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800739c:	d8e6      	bhi.n	800736c <__multiply+0x10c>
 800739e:	9a01      	ldr	r2, [sp, #4]
 80073a0:	50a9      	str	r1, [r5, r2]
 80073a2:	3504      	adds	r5, #4
 80073a4:	e79a      	b.n	80072dc <__multiply+0x7c>
 80073a6:	3e01      	subs	r6, #1
 80073a8:	e79c      	b.n	80072e4 <__multiply+0x84>
 80073aa:	bf00      	nop
 80073ac:	080088fb 	.word	0x080088fb
 80073b0:	0800890c 	.word	0x0800890c

080073b4 <__pow5mult>:
 80073b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073b8:	4615      	mov	r5, r2
 80073ba:	f012 0203 	ands.w	r2, r2, #3
 80073be:	4606      	mov	r6, r0
 80073c0:	460f      	mov	r7, r1
 80073c2:	d007      	beq.n	80073d4 <__pow5mult+0x20>
 80073c4:	4c25      	ldr	r4, [pc, #148]	; (800745c <__pow5mult+0xa8>)
 80073c6:	3a01      	subs	r2, #1
 80073c8:	2300      	movs	r3, #0
 80073ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80073ce:	f7ff fe9b 	bl	8007108 <__multadd>
 80073d2:	4607      	mov	r7, r0
 80073d4:	10ad      	asrs	r5, r5, #2
 80073d6:	d03d      	beq.n	8007454 <__pow5mult+0xa0>
 80073d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80073da:	b97c      	cbnz	r4, 80073fc <__pow5mult+0x48>
 80073dc:	2010      	movs	r0, #16
 80073de:	f7ff fe29 	bl	8007034 <malloc>
 80073e2:	4602      	mov	r2, r0
 80073e4:	6270      	str	r0, [r6, #36]	; 0x24
 80073e6:	b928      	cbnz	r0, 80073f4 <__pow5mult+0x40>
 80073e8:	4b1d      	ldr	r3, [pc, #116]	; (8007460 <__pow5mult+0xac>)
 80073ea:	481e      	ldr	r0, [pc, #120]	; (8007464 <__pow5mult+0xb0>)
 80073ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80073f0:	f000 fc0e 	bl	8007c10 <__assert_func>
 80073f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073f8:	6004      	str	r4, [r0, #0]
 80073fa:	60c4      	str	r4, [r0, #12]
 80073fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007400:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007404:	b94c      	cbnz	r4, 800741a <__pow5mult+0x66>
 8007406:	f240 2171 	movw	r1, #625	; 0x271
 800740a:	4630      	mov	r0, r6
 800740c:	f7ff ff12 	bl	8007234 <__i2b>
 8007410:	2300      	movs	r3, #0
 8007412:	f8c8 0008 	str.w	r0, [r8, #8]
 8007416:	4604      	mov	r4, r0
 8007418:	6003      	str	r3, [r0, #0]
 800741a:	f04f 0900 	mov.w	r9, #0
 800741e:	07eb      	lsls	r3, r5, #31
 8007420:	d50a      	bpl.n	8007438 <__pow5mult+0x84>
 8007422:	4639      	mov	r1, r7
 8007424:	4622      	mov	r2, r4
 8007426:	4630      	mov	r0, r6
 8007428:	f7ff ff1a 	bl	8007260 <__multiply>
 800742c:	4639      	mov	r1, r7
 800742e:	4680      	mov	r8, r0
 8007430:	4630      	mov	r0, r6
 8007432:	f7ff fe47 	bl	80070c4 <_Bfree>
 8007436:	4647      	mov	r7, r8
 8007438:	106d      	asrs	r5, r5, #1
 800743a:	d00b      	beq.n	8007454 <__pow5mult+0xa0>
 800743c:	6820      	ldr	r0, [r4, #0]
 800743e:	b938      	cbnz	r0, 8007450 <__pow5mult+0x9c>
 8007440:	4622      	mov	r2, r4
 8007442:	4621      	mov	r1, r4
 8007444:	4630      	mov	r0, r6
 8007446:	f7ff ff0b 	bl	8007260 <__multiply>
 800744a:	6020      	str	r0, [r4, #0]
 800744c:	f8c0 9000 	str.w	r9, [r0]
 8007450:	4604      	mov	r4, r0
 8007452:	e7e4      	b.n	800741e <__pow5mult+0x6a>
 8007454:	4638      	mov	r0, r7
 8007456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800745a:	bf00      	nop
 800745c:	08008a58 	.word	0x08008a58
 8007460:	08008889 	.word	0x08008889
 8007464:	0800890c 	.word	0x0800890c

08007468 <__lshift>:
 8007468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800746c:	460c      	mov	r4, r1
 800746e:	6849      	ldr	r1, [r1, #4]
 8007470:	6923      	ldr	r3, [r4, #16]
 8007472:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007476:	68a3      	ldr	r3, [r4, #8]
 8007478:	4607      	mov	r7, r0
 800747a:	4691      	mov	r9, r2
 800747c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007480:	f108 0601 	add.w	r6, r8, #1
 8007484:	42b3      	cmp	r3, r6
 8007486:	db0b      	blt.n	80074a0 <__lshift+0x38>
 8007488:	4638      	mov	r0, r7
 800748a:	f7ff fddb 	bl	8007044 <_Balloc>
 800748e:	4605      	mov	r5, r0
 8007490:	b948      	cbnz	r0, 80074a6 <__lshift+0x3e>
 8007492:	4602      	mov	r2, r0
 8007494:	4b2a      	ldr	r3, [pc, #168]	; (8007540 <__lshift+0xd8>)
 8007496:	482b      	ldr	r0, [pc, #172]	; (8007544 <__lshift+0xdc>)
 8007498:	f240 11d9 	movw	r1, #473	; 0x1d9
 800749c:	f000 fbb8 	bl	8007c10 <__assert_func>
 80074a0:	3101      	adds	r1, #1
 80074a2:	005b      	lsls	r3, r3, #1
 80074a4:	e7ee      	b.n	8007484 <__lshift+0x1c>
 80074a6:	2300      	movs	r3, #0
 80074a8:	f100 0114 	add.w	r1, r0, #20
 80074ac:	f100 0210 	add.w	r2, r0, #16
 80074b0:	4618      	mov	r0, r3
 80074b2:	4553      	cmp	r3, sl
 80074b4:	db37      	blt.n	8007526 <__lshift+0xbe>
 80074b6:	6920      	ldr	r0, [r4, #16]
 80074b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074bc:	f104 0314 	add.w	r3, r4, #20
 80074c0:	f019 091f 	ands.w	r9, r9, #31
 80074c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80074cc:	d02f      	beq.n	800752e <__lshift+0xc6>
 80074ce:	f1c9 0e20 	rsb	lr, r9, #32
 80074d2:	468a      	mov	sl, r1
 80074d4:	f04f 0c00 	mov.w	ip, #0
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	fa02 f209 	lsl.w	r2, r2, r9
 80074de:	ea42 020c 	orr.w	r2, r2, ip
 80074e2:	f84a 2b04 	str.w	r2, [sl], #4
 80074e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80074ea:	4298      	cmp	r0, r3
 80074ec:	fa22 fc0e 	lsr.w	ip, r2, lr
 80074f0:	d8f2      	bhi.n	80074d8 <__lshift+0x70>
 80074f2:	1b03      	subs	r3, r0, r4
 80074f4:	3b15      	subs	r3, #21
 80074f6:	f023 0303 	bic.w	r3, r3, #3
 80074fa:	3304      	adds	r3, #4
 80074fc:	f104 0215 	add.w	r2, r4, #21
 8007500:	4290      	cmp	r0, r2
 8007502:	bf38      	it	cc
 8007504:	2304      	movcc	r3, #4
 8007506:	f841 c003 	str.w	ip, [r1, r3]
 800750a:	f1bc 0f00 	cmp.w	ip, #0
 800750e:	d001      	beq.n	8007514 <__lshift+0xac>
 8007510:	f108 0602 	add.w	r6, r8, #2
 8007514:	3e01      	subs	r6, #1
 8007516:	4638      	mov	r0, r7
 8007518:	612e      	str	r6, [r5, #16]
 800751a:	4621      	mov	r1, r4
 800751c:	f7ff fdd2 	bl	80070c4 <_Bfree>
 8007520:	4628      	mov	r0, r5
 8007522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007526:	f842 0f04 	str.w	r0, [r2, #4]!
 800752a:	3301      	adds	r3, #1
 800752c:	e7c1      	b.n	80074b2 <__lshift+0x4a>
 800752e:	3904      	subs	r1, #4
 8007530:	f853 2b04 	ldr.w	r2, [r3], #4
 8007534:	f841 2f04 	str.w	r2, [r1, #4]!
 8007538:	4298      	cmp	r0, r3
 800753a:	d8f9      	bhi.n	8007530 <__lshift+0xc8>
 800753c:	e7ea      	b.n	8007514 <__lshift+0xac>
 800753e:	bf00      	nop
 8007540:	080088fb 	.word	0x080088fb
 8007544:	0800890c 	.word	0x0800890c

08007548 <__mcmp>:
 8007548:	b530      	push	{r4, r5, lr}
 800754a:	6902      	ldr	r2, [r0, #16]
 800754c:	690c      	ldr	r4, [r1, #16]
 800754e:	1b12      	subs	r2, r2, r4
 8007550:	d10e      	bne.n	8007570 <__mcmp+0x28>
 8007552:	f100 0314 	add.w	r3, r0, #20
 8007556:	3114      	adds	r1, #20
 8007558:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800755c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007560:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007564:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007568:	42a5      	cmp	r5, r4
 800756a:	d003      	beq.n	8007574 <__mcmp+0x2c>
 800756c:	d305      	bcc.n	800757a <__mcmp+0x32>
 800756e:	2201      	movs	r2, #1
 8007570:	4610      	mov	r0, r2
 8007572:	bd30      	pop	{r4, r5, pc}
 8007574:	4283      	cmp	r3, r0
 8007576:	d3f3      	bcc.n	8007560 <__mcmp+0x18>
 8007578:	e7fa      	b.n	8007570 <__mcmp+0x28>
 800757a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800757e:	e7f7      	b.n	8007570 <__mcmp+0x28>

08007580 <__mdiff>:
 8007580:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007584:	460c      	mov	r4, r1
 8007586:	4606      	mov	r6, r0
 8007588:	4611      	mov	r1, r2
 800758a:	4620      	mov	r0, r4
 800758c:	4690      	mov	r8, r2
 800758e:	f7ff ffdb 	bl	8007548 <__mcmp>
 8007592:	1e05      	subs	r5, r0, #0
 8007594:	d110      	bne.n	80075b8 <__mdiff+0x38>
 8007596:	4629      	mov	r1, r5
 8007598:	4630      	mov	r0, r6
 800759a:	f7ff fd53 	bl	8007044 <_Balloc>
 800759e:	b930      	cbnz	r0, 80075ae <__mdiff+0x2e>
 80075a0:	4b3a      	ldr	r3, [pc, #232]	; (800768c <__mdiff+0x10c>)
 80075a2:	4602      	mov	r2, r0
 80075a4:	f240 2132 	movw	r1, #562	; 0x232
 80075a8:	4839      	ldr	r0, [pc, #228]	; (8007690 <__mdiff+0x110>)
 80075aa:	f000 fb31 	bl	8007c10 <__assert_func>
 80075ae:	2301      	movs	r3, #1
 80075b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80075b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b8:	bfa4      	itt	ge
 80075ba:	4643      	movge	r3, r8
 80075bc:	46a0      	movge	r8, r4
 80075be:	4630      	mov	r0, r6
 80075c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80075c4:	bfa6      	itte	ge
 80075c6:	461c      	movge	r4, r3
 80075c8:	2500      	movge	r5, #0
 80075ca:	2501      	movlt	r5, #1
 80075cc:	f7ff fd3a 	bl	8007044 <_Balloc>
 80075d0:	b920      	cbnz	r0, 80075dc <__mdiff+0x5c>
 80075d2:	4b2e      	ldr	r3, [pc, #184]	; (800768c <__mdiff+0x10c>)
 80075d4:	4602      	mov	r2, r0
 80075d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80075da:	e7e5      	b.n	80075a8 <__mdiff+0x28>
 80075dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80075e0:	6926      	ldr	r6, [r4, #16]
 80075e2:	60c5      	str	r5, [r0, #12]
 80075e4:	f104 0914 	add.w	r9, r4, #20
 80075e8:	f108 0514 	add.w	r5, r8, #20
 80075ec:	f100 0e14 	add.w	lr, r0, #20
 80075f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80075f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80075f8:	f108 0210 	add.w	r2, r8, #16
 80075fc:	46f2      	mov	sl, lr
 80075fe:	2100      	movs	r1, #0
 8007600:	f859 3b04 	ldr.w	r3, [r9], #4
 8007604:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007608:	fa1f f883 	uxth.w	r8, r3
 800760c:	fa11 f18b 	uxtah	r1, r1, fp
 8007610:	0c1b      	lsrs	r3, r3, #16
 8007612:	eba1 0808 	sub.w	r8, r1, r8
 8007616:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800761a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800761e:	fa1f f888 	uxth.w	r8, r8
 8007622:	1419      	asrs	r1, r3, #16
 8007624:	454e      	cmp	r6, r9
 8007626:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800762a:	f84a 3b04 	str.w	r3, [sl], #4
 800762e:	d8e7      	bhi.n	8007600 <__mdiff+0x80>
 8007630:	1b33      	subs	r3, r6, r4
 8007632:	3b15      	subs	r3, #21
 8007634:	f023 0303 	bic.w	r3, r3, #3
 8007638:	3304      	adds	r3, #4
 800763a:	3415      	adds	r4, #21
 800763c:	42a6      	cmp	r6, r4
 800763e:	bf38      	it	cc
 8007640:	2304      	movcc	r3, #4
 8007642:	441d      	add	r5, r3
 8007644:	4473      	add	r3, lr
 8007646:	469e      	mov	lr, r3
 8007648:	462e      	mov	r6, r5
 800764a:	4566      	cmp	r6, ip
 800764c:	d30e      	bcc.n	800766c <__mdiff+0xec>
 800764e:	f10c 0203 	add.w	r2, ip, #3
 8007652:	1b52      	subs	r2, r2, r5
 8007654:	f022 0203 	bic.w	r2, r2, #3
 8007658:	3d03      	subs	r5, #3
 800765a:	45ac      	cmp	ip, r5
 800765c:	bf38      	it	cc
 800765e:	2200      	movcc	r2, #0
 8007660:	441a      	add	r2, r3
 8007662:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007666:	b17b      	cbz	r3, 8007688 <__mdiff+0x108>
 8007668:	6107      	str	r7, [r0, #16]
 800766a:	e7a3      	b.n	80075b4 <__mdiff+0x34>
 800766c:	f856 8b04 	ldr.w	r8, [r6], #4
 8007670:	fa11 f288 	uxtah	r2, r1, r8
 8007674:	1414      	asrs	r4, r2, #16
 8007676:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800767a:	b292      	uxth	r2, r2
 800767c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007680:	f84e 2b04 	str.w	r2, [lr], #4
 8007684:	1421      	asrs	r1, r4, #16
 8007686:	e7e0      	b.n	800764a <__mdiff+0xca>
 8007688:	3f01      	subs	r7, #1
 800768a:	e7ea      	b.n	8007662 <__mdiff+0xe2>
 800768c:	080088fb 	.word	0x080088fb
 8007690:	0800890c 	.word	0x0800890c

08007694 <__d2b>:
 8007694:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007698:	4689      	mov	r9, r1
 800769a:	2101      	movs	r1, #1
 800769c:	ec57 6b10 	vmov	r6, r7, d0
 80076a0:	4690      	mov	r8, r2
 80076a2:	f7ff fccf 	bl	8007044 <_Balloc>
 80076a6:	4604      	mov	r4, r0
 80076a8:	b930      	cbnz	r0, 80076b8 <__d2b+0x24>
 80076aa:	4602      	mov	r2, r0
 80076ac:	4b25      	ldr	r3, [pc, #148]	; (8007744 <__d2b+0xb0>)
 80076ae:	4826      	ldr	r0, [pc, #152]	; (8007748 <__d2b+0xb4>)
 80076b0:	f240 310a 	movw	r1, #778	; 0x30a
 80076b4:	f000 faac 	bl	8007c10 <__assert_func>
 80076b8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80076bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80076c0:	bb35      	cbnz	r5, 8007710 <__d2b+0x7c>
 80076c2:	2e00      	cmp	r6, #0
 80076c4:	9301      	str	r3, [sp, #4]
 80076c6:	d028      	beq.n	800771a <__d2b+0x86>
 80076c8:	4668      	mov	r0, sp
 80076ca:	9600      	str	r6, [sp, #0]
 80076cc:	f7ff fd82 	bl	80071d4 <__lo0bits>
 80076d0:	9900      	ldr	r1, [sp, #0]
 80076d2:	b300      	cbz	r0, 8007716 <__d2b+0x82>
 80076d4:	9a01      	ldr	r2, [sp, #4]
 80076d6:	f1c0 0320 	rsb	r3, r0, #32
 80076da:	fa02 f303 	lsl.w	r3, r2, r3
 80076de:	430b      	orrs	r3, r1
 80076e0:	40c2      	lsrs	r2, r0
 80076e2:	6163      	str	r3, [r4, #20]
 80076e4:	9201      	str	r2, [sp, #4]
 80076e6:	9b01      	ldr	r3, [sp, #4]
 80076e8:	61a3      	str	r3, [r4, #24]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	bf14      	ite	ne
 80076ee:	2202      	movne	r2, #2
 80076f0:	2201      	moveq	r2, #1
 80076f2:	6122      	str	r2, [r4, #16]
 80076f4:	b1d5      	cbz	r5, 800772c <__d2b+0x98>
 80076f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80076fa:	4405      	add	r5, r0
 80076fc:	f8c9 5000 	str.w	r5, [r9]
 8007700:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007704:	f8c8 0000 	str.w	r0, [r8]
 8007708:	4620      	mov	r0, r4
 800770a:	b003      	add	sp, #12
 800770c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007710:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007714:	e7d5      	b.n	80076c2 <__d2b+0x2e>
 8007716:	6161      	str	r1, [r4, #20]
 8007718:	e7e5      	b.n	80076e6 <__d2b+0x52>
 800771a:	a801      	add	r0, sp, #4
 800771c:	f7ff fd5a 	bl	80071d4 <__lo0bits>
 8007720:	9b01      	ldr	r3, [sp, #4]
 8007722:	6163      	str	r3, [r4, #20]
 8007724:	2201      	movs	r2, #1
 8007726:	6122      	str	r2, [r4, #16]
 8007728:	3020      	adds	r0, #32
 800772a:	e7e3      	b.n	80076f4 <__d2b+0x60>
 800772c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007730:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007734:	f8c9 0000 	str.w	r0, [r9]
 8007738:	6918      	ldr	r0, [r3, #16]
 800773a:	f7ff fd2b 	bl	8007194 <__hi0bits>
 800773e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007742:	e7df      	b.n	8007704 <__d2b+0x70>
 8007744:	080088fb 	.word	0x080088fb
 8007748:	0800890c 	.word	0x0800890c

0800774c <_calloc_r>:
 800774c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800774e:	fba1 2402 	umull	r2, r4, r1, r2
 8007752:	b94c      	cbnz	r4, 8007768 <_calloc_r+0x1c>
 8007754:	4611      	mov	r1, r2
 8007756:	9201      	str	r2, [sp, #4]
 8007758:	f000 f87a 	bl	8007850 <_malloc_r>
 800775c:	9a01      	ldr	r2, [sp, #4]
 800775e:	4605      	mov	r5, r0
 8007760:	b930      	cbnz	r0, 8007770 <_calloc_r+0x24>
 8007762:	4628      	mov	r0, r5
 8007764:	b003      	add	sp, #12
 8007766:	bd30      	pop	{r4, r5, pc}
 8007768:	220c      	movs	r2, #12
 800776a:	6002      	str	r2, [r0, #0]
 800776c:	2500      	movs	r5, #0
 800776e:	e7f8      	b.n	8007762 <_calloc_r+0x16>
 8007770:	4621      	mov	r1, r4
 8007772:	f7fe f94f 	bl	8005a14 <memset>
 8007776:	e7f4      	b.n	8007762 <_calloc_r+0x16>

08007778 <_free_r>:
 8007778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800777a:	2900      	cmp	r1, #0
 800777c:	d044      	beq.n	8007808 <_free_r+0x90>
 800777e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007782:	9001      	str	r0, [sp, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	f1a1 0404 	sub.w	r4, r1, #4
 800778a:	bfb8      	it	lt
 800778c:	18e4      	addlt	r4, r4, r3
 800778e:	f000 fa9b 	bl	8007cc8 <__malloc_lock>
 8007792:	4a1e      	ldr	r2, [pc, #120]	; (800780c <_free_r+0x94>)
 8007794:	9801      	ldr	r0, [sp, #4]
 8007796:	6813      	ldr	r3, [r2, #0]
 8007798:	b933      	cbnz	r3, 80077a8 <_free_r+0x30>
 800779a:	6063      	str	r3, [r4, #4]
 800779c:	6014      	str	r4, [r2, #0]
 800779e:	b003      	add	sp, #12
 80077a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077a4:	f000 ba96 	b.w	8007cd4 <__malloc_unlock>
 80077a8:	42a3      	cmp	r3, r4
 80077aa:	d908      	bls.n	80077be <_free_r+0x46>
 80077ac:	6825      	ldr	r5, [r4, #0]
 80077ae:	1961      	adds	r1, r4, r5
 80077b0:	428b      	cmp	r3, r1
 80077b2:	bf01      	itttt	eq
 80077b4:	6819      	ldreq	r1, [r3, #0]
 80077b6:	685b      	ldreq	r3, [r3, #4]
 80077b8:	1949      	addeq	r1, r1, r5
 80077ba:	6021      	streq	r1, [r4, #0]
 80077bc:	e7ed      	b.n	800779a <_free_r+0x22>
 80077be:	461a      	mov	r2, r3
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	b10b      	cbz	r3, 80077c8 <_free_r+0x50>
 80077c4:	42a3      	cmp	r3, r4
 80077c6:	d9fa      	bls.n	80077be <_free_r+0x46>
 80077c8:	6811      	ldr	r1, [r2, #0]
 80077ca:	1855      	adds	r5, r2, r1
 80077cc:	42a5      	cmp	r5, r4
 80077ce:	d10b      	bne.n	80077e8 <_free_r+0x70>
 80077d0:	6824      	ldr	r4, [r4, #0]
 80077d2:	4421      	add	r1, r4
 80077d4:	1854      	adds	r4, r2, r1
 80077d6:	42a3      	cmp	r3, r4
 80077d8:	6011      	str	r1, [r2, #0]
 80077da:	d1e0      	bne.n	800779e <_free_r+0x26>
 80077dc:	681c      	ldr	r4, [r3, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	6053      	str	r3, [r2, #4]
 80077e2:	4421      	add	r1, r4
 80077e4:	6011      	str	r1, [r2, #0]
 80077e6:	e7da      	b.n	800779e <_free_r+0x26>
 80077e8:	d902      	bls.n	80077f0 <_free_r+0x78>
 80077ea:	230c      	movs	r3, #12
 80077ec:	6003      	str	r3, [r0, #0]
 80077ee:	e7d6      	b.n	800779e <_free_r+0x26>
 80077f0:	6825      	ldr	r5, [r4, #0]
 80077f2:	1961      	adds	r1, r4, r5
 80077f4:	428b      	cmp	r3, r1
 80077f6:	bf04      	itt	eq
 80077f8:	6819      	ldreq	r1, [r3, #0]
 80077fa:	685b      	ldreq	r3, [r3, #4]
 80077fc:	6063      	str	r3, [r4, #4]
 80077fe:	bf04      	itt	eq
 8007800:	1949      	addeq	r1, r1, r5
 8007802:	6021      	streq	r1, [r4, #0]
 8007804:	6054      	str	r4, [r2, #4]
 8007806:	e7ca      	b.n	800779e <_free_r+0x26>
 8007808:	b003      	add	sp, #12
 800780a:	bd30      	pop	{r4, r5, pc}
 800780c:	20000378 	.word	0x20000378

08007810 <sbrk_aligned>:
 8007810:	b570      	push	{r4, r5, r6, lr}
 8007812:	4e0e      	ldr	r6, [pc, #56]	; (800784c <sbrk_aligned+0x3c>)
 8007814:	460c      	mov	r4, r1
 8007816:	6831      	ldr	r1, [r6, #0]
 8007818:	4605      	mov	r5, r0
 800781a:	b911      	cbnz	r1, 8007822 <sbrk_aligned+0x12>
 800781c:	f000 f9e8 	bl	8007bf0 <_sbrk_r>
 8007820:	6030      	str	r0, [r6, #0]
 8007822:	4621      	mov	r1, r4
 8007824:	4628      	mov	r0, r5
 8007826:	f000 f9e3 	bl	8007bf0 <_sbrk_r>
 800782a:	1c43      	adds	r3, r0, #1
 800782c:	d00a      	beq.n	8007844 <sbrk_aligned+0x34>
 800782e:	1cc4      	adds	r4, r0, #3
 8007830:	f024 0403 	bic.w	r4, r4, #3
 8007834:	42a0      	cmp	r0, r4
 8007836:	d007      	beq.n	8007848 <sbrk_aligned+0x38>
 8007838:	1a21      	subs	r1, r4, r0
 800783a:	4628      	mov	r0, r5
 800783c:	f000 f9d8 	bl	8007bf0 <_sbrk_r>
 8007840:	3001      	adds	r0, #1
 8007842:	d101      	bne.n	8007848 <sbrk_aligned+0x38>
 8007844:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007848:	4620      	mov	r0, r4
 800784a:	bd70      	pop	{r4, r5, r6, pc}
 800784c:	2000037c 	.word	0x2000037c

08007850 <_malloc_r>:
 8007850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007854:	1ccd      	adds	r5, r1, #3
 8007856:	f025 0503 	bic.w	r5, r5, #3
 800785a:	3508      	adds	r5, #8
 800785c:	2d0c      	cmp	r5, #12
 800785e:	bf38      	it	cc
 8007860:	250c      	movcc	r5, #12
 8007862:	2d00      	cmp	r5, #0
 8007864:	4607      	mov	r7, r0
 8007866:	db01      	blt.n	800786c <_malloc_r+0x1c>
 8007868:	42a9      	cmp	r1, r5
 800786a:	d905      	bls.n	8007878 <_malloc_r+0x28>
 800786c:	230c      	movs	r3, #12
 800786e:	603b      	str	r3, [r7, #0]
 8007870:	2600      	movs	r6, #0
 8007872:	4630      	mov	r0, r6
 8007874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007878:	4e2e      	ldr	r6, [pc, #184]	; (8007934 <_malloc_r+0xe4>)
 800787a:	f000 fa25 	bl	8007cc8 <__malloc_lock>
 800787e:	6833      	ldr	r3, [r6, #0]
 8007880:	461c      	mov	r4, r3
 8007882:	bb34      	cbnz	r4, 80078d2 <_malloc_r+0x82>
 8007884:	4629      	mov	r1, r5
 8007886:	4638      	mov	r0, r7
 8007888:	f7ff ffc2 	bl	8007810 <sbrk_aligned>
 800788c:	1c43      	adds	r3, r0, #1
 800788e:	4604      	mov	r4, r0
 8007890:	d14d      	bne.n	800792e <_malloc_r+0xde>
 8007892:	6834      	ldr	r4, [r6, #0]
 8007894:	4626      	mov	r6, r4
 8007896:	2e00      	cmp	r6, #0
 8007898:	d140      	bne.n	800791c <_malloc_r+0xcc>
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	4631      	mov	r1, r6
 800789e:	4638      	mov	r0, r7
 80078a0:	eb04 0803 	add.w	r8, r4, r3
 80078a4:	f000 f9a4 	bl	8007bf0 <_sbrk_r>
 80078a8:	4580      	cmp	r8, r0
 80078aa:	d13a      	bne.n	8007922 <_malloc_r+0xd2>
 80078ac:	6821      	ldr	r1, [r4, #0]
 80078ae:	3503      	adds	r5, #3
 80078b0:	1a6d      	subs	r5, r5, r1
 80078b2:	f025 0503 	bic.w	r5, r5, #3
 80078b6:	3508      	adds	r5, #8
 80078b8:	2d0c      	cmp	r5, #12
 80078ba:	bf38      	it	cc
 80078bc:	250c      	movcc	r5, #12
 80078be:	4629      	mov	r1, r5
 80078c0:	4638      	mov	r0, r7
 80078c2:	f7ff ffa5 	bl	8007810 <sbrk_aligned>
 80078c6:	3001      	adds	r0, #1
 80078c8:	d02b      	beq.n	8007922 <_malloc_r+0xd2>
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	442b      	add	r3, r5
 80078ce:	6023      	str	r3, [r4, #0]
 80078d0:	e00e      	b.n	80078f0 <_malloc_r+0xa0>
 80078d2:	6822      	ldr	r2, [r4, #0]
 80078d4:	1b52      	subs	r2, r2, r5
 80078d6:	d41e      	bmi.n	8007916 <_malloc_r+0xc6>
 80078d8:	2a0b      	cmp	r2, #11
 80078da:	d916      	bls.n	800790a <_malloc_r+0xba>
 80078dc:	1961      	adds	r1, r4, r5
 80078de:	42a3      	cmp	r3, r4
 80078e0:	6025      	str	r5, [r4, #0]
 80078e2:	bf18      	it	ne
 80078e4:	6059      	strne	r1, [r3, #4]
 80078e6:	6863      	ldr	r3, [r4, #4]
 80078e8:	bf08      	it	eq
 80078ea:	6031      	streq	r1, [r6, #0]
 80078ec:	5162      	str	r2, [r4, r5]
 80078ee:	604b      	str	r3, [r1, #4]
 80078f0:	4638      	mov	r0, r7
 80078f2:	f104 060b 	add.w	r6, r4, #11
 80078f6:	f000 f9ed 	bl	8007cd4 <__malloc_unlock>
 80078fa:	f026 0607 	bic.w	r6, r6, #7
 80078fe:	1d23      	adds	r3, r4, #4
 8007900:	1af2      	subs	r2, r6, r3
 8007902:	d0b6      	beq.n	8007872 <_malloc_r+0x22>
 8007904:	1b9b      	subs	r3, r3, r6
 8007906:	50a3      	str	r3, [r4, r2]
 8007908:	e7b3      	b.n	8007872 <_malloc_r+0x22>
 800790a:	6862      	ldr	r2, [r4, #4]
 800790c:	42a3      	cmp	r3, r4
 800790e:	bf0c      	ite	eq
 8007910:	6032      	streq	r2, [r6, #0]
 8007912:	605a      	strne	r2, [r3, #4]
 8007914:	e7ec      	b.n	80078f0 <_malloc_r+0xa0>
 8007916:	4623      	mov	r3, r4
 8007918:	6864      	ldr	r4, [r4, #4]
 800791a:	e7b2      	b.n	8007882 <_malloc_r+0x32>
 800791c:	4634      	mov	r4, r6
 800791e:	6876      	ldr	r6, [r6, #4]
 8007920:	e7b9      	b.n	8007896 <_malloc_r+0x46>
 8007922:	230c      	movs	r3, #12
 8007924:	603b      	str	r3, [r7, #0]
 8007926:	4638      	mov	r0, r7
 8007928:	f000 f9d4 	bl	8007cd4 <__malloc_unlock>
 800792c:	e7a1      	b.n	8007872 <_malloc_r+0x22>
 800792e:	6025      	str	r5, [r4, #0]
 8007930:	e7de      	b.n	80078f0 <_malloc_r+0xa0>
 8007932:	bf00      	nop
 8007934:	20000378 	.word	0x20000378

08007938 <__ssputs_r>:
 8007938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800793c:	688e      	ldr	r6, [r1, #8]
 800793e:	429e      	cmp	r6, r3
 8007940:	4682      	mov	sl, r0
 8007942:	460c      	mov	r4, r1
 8007944:	4690      	mov	r8, r2
 8007946:	461f      	mov	r7, r3
 8007948:	d838      	bhi.n	80079bc <__ssputs_r+0x84>
 800794a:	898a      	ldrh	r2, [r1, #12]
 800794c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007950:	d032      	beq.n	80079b8 <__ssputs_r+0x80>
 8007952:	6825      	ldr	r5, [r4, #0]
 8007954:	6909      	ldr	r1, [r1, #16]
 8007956:	eba5 0901 	sub.w	r9, r5, r1
 800795a:	6965      	ldr	r5, [r4, #20]
 800795c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007960:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007964:	3301      	adds	r3, #1
 8007966:	444b      	add	r3, r9
 8007968:	106d      	asrs	r5, r5, #1
 800796a:	429d      	cmp	r5, r3
 800796c:	bf38      	it	cc
 800796e:	461d      	movcc	r5, r3
 8007970:	0553      	lsls	r3, r2, #21
 8007972:	d531      	bpl.n	80079d8 <__ssputs_r+0xa0>
 8007974:	4629      	mov	r1, r5
 8007976:	f7ff ff6b 	bl	8007850 <_malloc_r>
 800797a:	4606      	mov	r6, r0
 800797c:	b950      	cbnz	r0, 8007994 <__ssputs_r+0x5c>
 800797e:	230c      	movs	r3, #12
 8007980:	f8ca 3000 	str.w	r3, [sl]
 8007984:	89a3      	ldrh	r3, [r4, #12]
 8007986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800798a:	81a3      	strh	r3, [r4, #12]
 800798c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007994:	6921      	ldr	r1, [r4, #16]
 8007996:	464a      	mov	r2, r9
 8007998:	f7fe f82e 	bl	80059f8 <memcpy>
 800799c:	89a3      	ldrh	r3, [r4, #12]
 800799e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079a6:	81a3      	strh	r3, [r4, #12]
 80079a8:	6126      	str	r6, [r4, #16]
 80079aa:	6165      	str	r5, [r4, #20]
 80079ac:	444e      	add	r6, r9
 80079ae:	eba5 0509 	sub.w	r5, r5, r9
 80079b2:	6026      	str	r6, [r4, #0]
 80079b4:	60a5      	str	r5, [r4, #8]
 80079b6:	463e      	mov	r6, r7
 80079b8:	42be      	cmp	r6, r7
 80079ba:	d900      	bls.n	80079be <__ssputs_r+0x86>
 80079bc:	463e      	mov	r6, r7
 80079be:	6820      	ldr	r0, [r4, #0]
 80079c0:	4632      	mov	r2, r6
 80079c2:	4641      	mov	r1, r8
 80079c4:	f000 f966 	bl	8007c94 <memmove>
 80079c8:	68a3      	ldr	r3, [r4, #8]
 80079ca:	1b9b      	subs	r3, r3, r6
 80079cc:	60a3      	str	r3, [r4, #8]
 80079ce:	6823      	ldr	r3, [r4, #0]
 80079d0:	4433      	add	r3, r6
 80079d2:	6023      	str	r3, [r4, #0]
 80079d4:	2000      	movs	r0, #0
 80079d6:	e7db      	b.n	8007990 <__ssputs_r+0x58>
 80079d8:	462a      	mov	r2, r5
 80079da:	f000 f981 	bl	8007ce0 <_realloc_r>
 80079de:	4606      	mov	r6, r0
 80079e0:	2800      	cmp	r0, #0
 80079e2:	d1e1      	bne.n	80079a8 <__ssputs_r+0x70>
 80079e4:	6921      	ldr	r1, [r4, #16]
 80079e6:	4650      	mov	r0, sl
 80079e8:	f7ff fec6 	bl	8007778 <_free_r>
 80079ec:	e7c7      	b.n	800797e <__ssputs_r+0x46>
	...

080079f0 <_svfiprintf_r>:
 80079f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f4:	4698      	mov	r8, r3
 80079f6:	898b      	ldrh	r3, [r1, #12]
 80079f8:	061b      	lsls	r3, r3, #24
 80079fa:	b09d      	sub	sp, #116	; 0x74
 80079fc:	4607      	mov	r7, r0
 80079fe:	460d      	mov	r5, r1
 8007a00:	4614      	mov	r4, r2
 8007a02:	d50e      	bpl.n	8007a22 <_svfiprintf_r+0x32>
 8007a04:	690b      	ldr	r3, [r1, #16]
 8007a06:	b963      	cbnz	r3, 8007a22 <_svfiprintf_r+0x32>
 8007a08:	2140      	movs	r1, #64	; 0x40
 8007a0a:	f7ff ff21 	bl	8007850 <_malloc_r>
 8007a0e:	6028      	str	r0, [r5, #0]
 8007a10:	6128      	str	r0, [r5, #16]
 8007a12:	b920      	cbnz	r0, 8007a1e <_svfiprintf_r+0x2e>
 8007a14:	230c      	movs	r3, #12
 8007a16:	603b      	str	r3, [r7, #0]
 8007a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a1c:	e0d1      	b.n	8007bc2 <_svfiprintf_r+0x1d2>
 8007a1e:	2340      	movs	r3, #64	; 0x40
 8007a20:	616b      	str	r3, [r5, #20]
 8007a22:	2300      	movs	r3, #0
 8007a24:	9309      	str	r3, [sp, #36]	; 0x24
 8007a26:	2320      	movs	r3, #32
 8007a28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a30:	2330      	movs	r3, #48	; 0x30
 8007a32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007bdc <_svfiprintf_r+0x1ec>
 8007a36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a3a:	f04f 0901 	mov.w	r9, #1
 8007a3e:	4623      	mov	r3, r4
 8007a40:	469a      	mov	sl, r3
 8007a42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a46:	b10a      	cbz	r2, 8007a4c <_svfiprintf_r+0x5c>
 8007a48:	2a25      	cmp	r2, #37	; 0x25
 8007a4a:	d1f9      	bne.n	8007a40 <_svfiprintf_r+0x50>
 8007a4c:	ebba 0b04 	subs.w	fp, sl, r4
 8007a50:	d00b      	beq.n	8007a6a <_svfiprintf_r+0x7a>
 8007a52:	465b      	mov	r3, fp
 8007a54:	4622      	mov	r2, r4
 8007a56:	4629      	mov	r1, r5
 8007a58:	4638      	mov	r0, r7
 8007a5a:	f7ff ff6d 	bl	8007938 <__ssputs_r>
 8007a5e:	3001      	adds	r0, #1
 8007a60:	f000 80aa 	beq.w	8007bb8 <_svfiprintf_r+0x1c8>
 8007a64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a66:	445a      	add	r2, fp
 8007a68:	9209      	str	r2, [sp, #36]	; 0x24
 8007a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f000 80a2 	beq.w	8007bb8 <_svfiprintf_r+0x1c8>
 8007a74:	2300      	movs	r3, #0
 8007a76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a7e:	f10a 0a01 	add.w	sl, sl, #1
 8007a82:	9304      	str	r3, [sp, #16]
 8007a84:	9307      	str	r3, [sp, #28]
 8007a86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a8a:	931a      	str	r3, [sp, #104]	; 0x68
 8007a8c:	4654      	mov	r4, sl
 8007a8e:	2205      	movs	r2, #5
 8007a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a94:	4851      	ldr	r0, [pc, #324]	; (8007bdc <_svfiprintf_r+0x1ec>)
 8007a96:	f7f8 fbc3 	bl	8000220 <memchr>
 8007a9a:	9a04      	ldr	r2, [sp, #16]
 8007a9c:	b9d8      	cbnz	r0, 8007ad6 <_svfiprintf_r+0xe6>
 8007a9e:	06d0      	lsls	r0, r2, #27
 8007aa0:	bf44      	itt	mi
 8007aa2:	2320      	movmi	r3, #32
 8007aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aa8:	0711      	lsls	r1, r2, #28
 8007aaa:	bf44      	itt	mi
 8007aac:	232b      	movmi	r3, #43	; 0x2b
 8007aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ab8:	d015      	beq.n	8007ae6 <_svfiprintf_r+0xf6>
 8007aba:	9a07      	ldr	r2, [sp, #28]
 8007abc:	4654      	mov	r4, sl
 8007abe:	2000      	movs	r0, #0
 8007ac0:	f04f 0c0a 	mov.w	ip, #10
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007aca:	3b30      	subs	r3, #48	; 0x30
 8007acc:	2b09      	cmp	r3, #9
 8007ace:	d94e      	bls.n	8007b6e <_svfiprintf_r+0x17e>
 8007ad0:	b1b0      	cbz	r0, 8007b00 <_svfiprintf_r+0x110>
 8007ad2:	9207      	str	r2, [sp, #28]
 8007ad4:	e014      	b.n	8007b00 <_svfiprintf_r+0x110>
 8007ad6:	eba0 0308 	sub.w	r3, r0, r8
 8007ada:	fa09 f303 	lsl.w	r3, r9, r3
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	9304      	str	r3, [sp, #16]
 8007ae2:	46a2      	mov	sl, r4
 8007ae4:	e7d2      	b.n	8007a8c <_svfiprintf_r+0x9c>
 8007ae6:	9b03      	ldr	r3, [sp, #12]
 8007ae8:	1d19      	adds	r1, r3, #4
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	9103      	str	r1, [sp, #12]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	bfbb      	ittet	lt
 8007af2:	425b      	neglt	r3, r3
 8007af4:	f042 0202 	orrlt.w	r2, r2, #2
 8007af8:	9307      	strge	r3, [sp, #28]
 8007afa:	9307      	strlt	r3, [sp, #28]
 8007afc:	bfb8      	it	lt
 8007afe:	9204      	strlt	r2, [sp, #16]
 8007b00:	7823      	ldrb	r3, [r4, #0]
 8007b02:	2b2e      	cmp	r3, #46	; 0x2e
 8007b04:	d10c      	bne.n	8007b20 <_svfiprintf_r+0x130>
 8007b06:	7863      	ldrb	r3, [r4, #1]
 8007b08:	2b2a      	cmp	r3, #42	; 0x2a
 8007b0a:	d135      	bne.n	8007b78 <_svfiprintf_r+0x188>
 8007b0c:	9b03      	ldr	r3, [sp, #12]
 8007b0e:	1d1a      	adds	r2, r3, #4
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	9203      	str	r2, [sp, #12]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	bfb8      	it	lt
 8007b18:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007b1c:	3402      	adds	r4, #2
 8007b1e:	9305      	str	r3, [sp, #20]
 8007b20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007bec <_svfiprintf_r+0x1fc>
 8007b24:	7821      	ldrb	r1, [r4, #0]
 8007b26:	2203      	movs	r2, #3
 8007b28:	4650      	mov	r0, sl
 8007b2a:	f7f8 fb79 	bl	8000220 <memchr>
 8007b2e:	b140      	cbz	r0, 8007b42 <_svfiprintf_r+0x152>
 8007b30:	2340      	movs	r3, #64	; 0x40
 8007b32:	eba0 000a 	sub.w	r0, r0, sl
 8007b36:	fa03 f000 	lsl.w	r0, r3, r0
 8007b3a:	9b04      	ldr	r3, [sp, #16]
 8007b3c:	4303      	orrs	r3, r0
 8007b3e:	3401      	adds	r4, #1
 8007b40:	9304      	str	r3, [sp, #16]
 8007b42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b46:	4826      	ldr	r0, [pc, #152]	; (8007be0 <_svfiprintf_r+0x1f0>)
 8007b48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b4c:	2206      	movs	r2, #6
 8007b4e:	f7f8 fb67 	bl	8000220 <memchr>
 8007b52:	2800      	cmp	r0, #0
 8007b54:	d038      	beq.n	8007bc8 <_svfiprintf_r+0x1d8>
 8007b56:	4b23      	ldr	r3, [pc, #140]	; (8007be4 <_svfiprintf_r+0x1f4>)
 8007b58:	bb1b      	cbnz	r3, 8007ba2 <_svfiprintf_r+0x1b2>
 8007b5a:	9b03      	ldr	r3, [sp, #12]
 8007b5c:	3307      	adds	r3, #7
 8007b5e:	f023 0307 	bic.w	r3, r3, #7
 8007b62:	3308      	adds	r3, #8
 8007b64:	9303      	str	r3, [sp, #12]
 8007b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b68:	4433      	add	r3, r6
 8007b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b6c:	e767      	b.n	8007a3e <_svfiprintf_r+0x4e>
 8007b6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b72:	460c      	mov	r4, r1
 8007b74:	2001      	movs	r0, #1
 8007b76:	e7a5      	b.n	8007ac4 <_svfiprintf_r+0xd4>
 8007b78:	2300      	movs	r3, #0
 8007b7a:	3401      	adds	r4, #1
 8007b7c:	9305      	str	r3, [sp, #20]
 8007b7e:	4619      	mov	r1, r3
 8007b80:	f04f 0c0a 	mov.w	ip, #10
 8007b84:	4620      	mov	r0, r4
 8007b86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b8a:	3a30      	subs	r2, #48	; 0x30
 8007b8c:	2a09      	cmp	r2, #9
 8007b8e:	d903      	bls.n	8007b98 <_svfiprintf_r+0x1a8>
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d0c5      	beq.n	8007b20 <_svfiprintf_r+0x130>
 8007b94:	9105      	str	r1, [sp, #20]
 8007b96:	e7c3      	b.n	8007b20 <_svfiprintf_r+0x130>
 8007b98:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e7f0      	b.n	8007b84 <_svfiprintf_r+0x194>
 8007ba2:	ab03      	add	r3, sp, #12
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	462a      	mov	r2, r5
 8007ba8:	4b0f      	ldr	r3, [pc, #60]	; (8007be8 <_svfiprintf_r+0x1f8>)
 8007baa:	a904      	add	r1, sp, #16
 8007bac:	4638      	mov	r0, r7
 8007bae:	f7fd ffd9 	bl	8005b64 <_printf_float>
 8007bb2:	1c42      	adds	r2, r0, #1
 8007bb4:	4606      	mov	r6, r0
 8007bb6:	d1d6      	bne.n	8007b66 <_svfiprintf_r+0x176>
 8007bb8:	89ab      	ldrh	r3, [r5, #12]
 8007bba:	065b      	lsls	r3, r3, #25
 8007bbc:	f53f af2c 	bmi.w	8007a18 <_svfiprintf_r+0x28>
 8007bc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bc2:	b01d      	add	sp, #116	; 0x74
 8007bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc8:	ab03      	add	r3, sp, #12
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	462a      	mov	r2, r5
 8007bce:	4b06      	ldr	r3, [pc, #24]	; (8007be8 <_svfiprintf_r+0x1f8>)
 8007bd0:	a904      	add	r1, sp, #16
 8007bd2:	4638      	mov	r0, r7
 8007bd4:	f7fe fa6a 	bl	80060ac <_printf_i>
 8007bd8:	e7eb      	b.n	8007bb2 <_svfiprintf_r+0x1c2>
 8007bda:	bf00      	nop
 8007bdc:	08008a64 	.word	0x08008a64
 8007be0:	08008a6e 	.word	0x08008a6e
 8007be4:	08005b65 	.word	0x08005b65
 8007be8:	08007939 	.word	0x08007939
 8007bec:	08008a6a 	.word	0x08008a6a

08007bf0 <_sbrk_r>:
 8007bf0:	b538      	push	{r3, r4, r5, lr}
 8007bf2:	4d06      	ldr	r5, [pc, #24]	; (8007c0c <_sbrk_r+0x1c>)
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	4608      	mov	r0, r1
 8007bfa:	602b      	str	r3, [r5, #0]
 8007bfc:	f7fa faa8 	bl	8002150 <_sbrk>
 8007c00:	1c43      	adds	r3, r0, #1
 8007c02:	d102      	bne.n	8007c0a <_sbrk_r+0x1a>
 8007c04:	682b      	ldr	r3, [r5, #0]
 8007c06:	b103      	cbz	r3, 8007c0a <_sbrk_r+0x1a>
 8007c08:	6023      	str	r3, [r4, #0]
 8007c0a:	bd38      	pop	{r3, r4, r5, pc}
 8007c0c:	20000380 	.word	0x20000380

08007c10 <__assert_func>:
 8007c10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c12:	4614      	mov	r4, r2
 8007c14:	461a      	mov	r2, r3
 8007c16:	4b09      	ldr	r3, [pc, #36]	; (8007c3c <__assert_func+0x2c>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4605      	mov	r5, r0
 8007c1c:	68d8      	ldr	r0, [r3, #12]
 8007c1e:	b14c      	cbz	r4, 8007c34 <__assert_func+0x24>
 8007c20:	4b07      	ldr	r3, [pc, #28]	; (8007c40 <__assert_func+0x30>)
 8007c22:	9100      	str	r1, [sp, #0]
 8007c24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c28:	4906      	ldr	r1, [pc, #24]	; (8007c44 <__assert_func+0x34>)
 8007c2a:	462b      	mov	r3, r5
 8007c2c:	f000 f80e 	bl	8007c4c <fiprintf>
 8007c30:	f000 faac 	bl	800818c <abort>
 8007c34:	4b04      	ldr	r3, [pc, #16]	; (8007c48 <__assert_func+0x38>)
 8007c36:	461c      	mov	r4, r3
 8007c38:	e7f3      	b.n	8007c22 <__assert_func+0x12>
 8007c3a:	bf00      	nop
 8007c3c:	2000000c 	.word	0x2000000c
 8007c40:	08008a75 	.word	0x08008a75
 8007c44:	08008a82 	.word	0x08008a82
 8007c48:	08008ab0 	.word	0x08008ab0

08007c4c <fiprintf>:
 8007c4c:	b40e      	push	{r1, r2, r3}
 8007c4e:	b503      	push	{r0, r1, lr}
 8007c50:	4601      	mov	r1, r0
 8007c52:	ab03      	add	r3, sp, #12
 8007c54:	4805      	ldr	r0, [pc, #20]	; (8007c6c <fiprintf+0x20>)
 8007c56:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c5a:	6800      	ldr	r0, [r0, #0]
 8007c5c:	9301      	str	r3, [sp, #4]
 8007c5e:	f000 f897 	bl	8007d90 <_vfiprintf_r>
 8007c62:	b002      	add	sp, #8
 8007c64:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c68:	b003      	add	sp, #12
 8007c6a:	4770      	bx	lr
 8007c6c:	2000000c 	.word	0x2000000c

08007c70 <__ascii_mbtowc>:
 8007c70:	b082      	sub	sp, #8
 8007c72:	b901      	cbnz	r1, 8007c76 <__ascii_mbtowc+0x6>
 8007c74:	a901      	add	r1, sp, #4
 8007c76:	b142      	cbz	r2, 8007c8a <__ascii_mbtowc+0x1a>
 8007c78:	b14b      	cbz	r3, 8007c8e <__ascii_mbtowc+0x1e>
 8007c7a:	7813      	ldrb	r3, [r2, #0]
 8007c7c:	600b      	str	r3, [r1, #0]
 8007c7e:	7812      	ldrb	r2, [r2, #0]
 8007c80:	1e10      	subs	r0, r2, #0
 8007c82:	bf18      	it	ne
 8007c84:	2001      	movne	r0, #1
 8007c86:	b002      	add	sp, #8
 8007c88:	4770      	bx	lr
 8007c8a:	4610      	mov	r0, r2
 8007c8c:	e7fb      	b.n	8007c86 <__ascii_mbtowc+0x16>
 8007c8e:	f06f 0001 	mvn.w	r0, #1
 8007c92:	e7f8      	b.n	8007c86 <__ascii_mbtowc+0x16>

08007c94 <memmove>:
 8007c94:	4288      	cmp	r0, r1
 8007c96:	b510      	push	{r4, lr}
 8007c98:	eb01 0402 	add.w	r4, r1, r2
 8007c9c:	d902      	bls.n	8007ca4 <memmove+0x10>
 8007c9e:	4284      	cmp	r4, r0
 8007ca0:	4623      	mov	r3, r4
 8007ca2:	d807      	bhi.n	8007cb4 <memmove+0x20>
 8007ca4:	1e43      	subs	r3, r0, #1
 8007ca6:	42a1      	cmp	r1, r4
 8007ca8:	d008      	beq.n	8007cbc <memmove+0x28>
 8007caa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cb2:	e7f8      	b.n	8007ca6 <memmove+0x12>
 8007cb4:	4402      	add	r2, r0
 8007cb6:	4601      	mov	r1, r0
 8007cb8:	428a      	cmp	r2, r1
 8007cba:	d100      	bne.n	8007cbe <memmove+0x2a>
 8007cbc:	bd10      	pop	{r4, pc}
 8007cbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cc6:	e7f7      	b.n	8007cb8 <memmove+0x24>

08007cc8 <__malloc_lock>:
 8007cc8:	4801      	ldr	r0, [pc, #4]	; (8007cd0 <__malloc_lock+0x8>)
 8007cca:	f000 bc1f 	b.w	800850c <__retarget_lock_acquire_recursive>
 8007cce:	bf00      	nop
 8007cd0:	20000384 	.word	0x20000384

08007cd4 <__malloc_unlock>:
 8007cd4:	4801      	ldr	r0, [pc, #4]	; (8007cdc <__malloc_unlock+0x8>)
 8007cd6:	f000 bc1a 	b.w	800850e <__retarget_lock_release_recursive>
 8007cda:	bf00      	nop
 8007cdc:	20000384 	.word	0x20000384

08007ce0 <_realloc_r>:
 8007ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ce4:	4680      	mov	r8, r0
 8007ce6:	4614      	mov	r4, r2
 8007ce8:	460e      	mov	r6, r1
 8007cea:	b921      	cbnz	r1, 8007cf6 <_realloc_r+0x16>
 8007cec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf0:	4611      	mov	r1, r2
 8007cf2:	f7ff bdad 	b.w	8007850 <_malloc_r>
 8007cf6:	b92a      	cbnz	r2, 8007d04 <_realloc_r+0x24>
 8007cf8:	f7ff fd3e 	bl	8007778 <_free_r>
 8007cfc:	4625      	mov	r5, r4
 8007cfe:	4628      	mov	r0, r5
 8007d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d04:	f000 fc6a 	bl	80085dc <_malloc_usable_size_r>
 8007d08:	4284      	cmp	r4, r0
 8007d0a:	4607      	mov	r7, r0
 8007d0c:	d802      	bhi.n	8007d14 <_realloc_r+0x34>
 8007d0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d12:	d812      	bhi.n	8007d3a <_realloc_r+0x5a>
 8007d14:	4621      	mov	r1, r4
 8007d16:	4640      	mov	r0, r8
 8007d18:	f7ff fd9a 	bl	8007850 <_malloc_r>
 8007d1c:	4605      	mov	r5, r0
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	d0ed      	beq.n	8007cfe <_realloc_r+0x1e>
 8007d22:	42bc      	cmp	r4, r7
 8007d24:	4622      	mov	r2, r4
 8007d26:	4631      	mov	r1, r6
 8007d28:	bf28      	it	cs
 8007d2a:	463a      	movcs	r2, r7
 8007d2c:	f7fd fe64 	bl	80059f8 <memcpy>
 8007d30:	4631      	mov	r1, r6
 8007d32:	4640      	mov	r0, r8
 8007d34:	f7ff fd20 	bl	8007778 <_free_r>
 8007d38:	e7e1      	b.n	8007cfe <_realloc_r+0x1e>
 8007d3a:	4635      	mov	r5, r6
 8007d3c:	e7df      	b.n	8007cfe <_realloc_r+0x1e>

08007d3e <__sfputc_r>:
 8007d3e:	6893      	ldr	r3, [r2, #8]
 8007d40:	3b01      	subs	r3, #1
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	b410      	push	{r4}
 8007d46:	6093      	str	r3, [r2, #8]
 8007d48:	da08      	bge.n	8007d5c <__sfputc_r+0x1e>
 8007d4a:	6994      	ldr	r4, [r2, #24]
 8007d4c:	42a3      	cmp	r3, r4
 8007d4e:	db01      	blt.n	8007d54 <__sfputc_r+0x16>
 8007d50:	290a      	cmp	r1, #10
 8007d52:	d103      	bne.n	8007d5c <__sfputc_r+0x1e>
 8007d54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d58:	f000 b94a 	b.w	8007ff0 <__swbuf_r>
 8007d5c:	6813      	ldr	r3, [r2, #0]
 8007d5e:	1c58      	adds	r0, r3, #1
 8007d60:	6010      	str	r0, [r2, #0]
 8007d62:	7019      	strb	r1, [r3, #0]
 8007d64:	4608      	mov	r0, r1
 8007d66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <__sfputs_r>:
 8007d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6e:	4606      	mov	r6, r0
 8007d70:	460f      	mov	r7, r1
 8007d72:	4614      	mov	r4, r2
 8007d74:	18d5      	adds	r5, r2, r3
 8007d76:	42ac      	cmp	r4, r5
 8007d78:	d101      	bne.n	8007d7e <__sfputs_r+0x12>
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	e007      	b.n	8007d8e <__sfputs_r+0x22>
 8007d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d82:	463a      	mov	r2, r7
 8007d84:	4630      	mov	r0, r6
 8007d86:	f7ff ffda 	bl	8007d3e <__sfputc_r>
 8007d8a:	1c43      	adds	r3, r0, #1
 8007d8c:	d1f3      	bne.n	8007d76 <__sfputs_r+0xa>
 8007d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007d90 <_vfiprintf_r>:
 8007d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d94:	460d      	mov	r5, r1
 8007d96:	b09d      	sub	sp, #116	; 0x74
 8007d98:	4614      	mov	r4, r2
 8007d9a:	4698      	mov	r8, r3
 8007d9c:	4606      	mov	r6, r0
 8007d9e:	b118      	cbz	r0, 8007da8 <_vfiprintf_r+0x18>
 8007da0:	6983      	ldr	r3, [r0, #24]
 8007da2:	b90b      	cbnz	r3, 8007da8 <_vfiprintf_r+0x18>
 8007da4:	f000 fb14 	bl	80083d0 <__sinit>
 8007da8:	4b89      	ldr	r3, [pc, #548]	; (8007fd0 <_vfiprintf_r+0x240>)
 8007daa:	429d      	cmp	r5, r3
 8007dac:	d11b      	bne.n	8007de6 <_vfiprintf_r+0x56>
 8007dae:	6875      	ldr	r5, [r6, #4]
 8007db0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007db2:	07d9      	lsls	r1, r3, #31
 8007db4:	d405      	bmi.n	8007dc2 <_vfiprintf_r+0x32>
 8007db6:	89ab      	ldrh	r3, [r5, #12]
 8007db8:	059a      	lsls	r2, r3, #22
 8007dba:	d402      	bmi.n	8007dc2 <_vfiprintf_r+0x32>
 8007dbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dbe:	f000 fba5 	bl	800850c <__retarget_lock_acquire_recursive>
 8007dc2:	89ab      	ldrh	r3, [r5, #12]
 8007dc4:	071b      	lsls	r3, r3, #28
 8007dc6:	d501      	bpl.n	8007dcc <_vfiprintf_r+0x3c>
 8007dc8:	692b      	ldr	r3, [r5, #16]
 8007dca:	b9eb      	cbnz	r3, 8007e08 <_vfiprintf_r+0x78>
 8007dcc:	4629      	mov	r1, r5
 8007dce:	4630      	mov	r0, r6
 8007dd0:	f000 f96e 	bl	80080b0 <__swsetup_r>
 8007dd4:	b1c0      	cbz	r0, 8007e08 <_vfiprintf_r+0x78>
 8007dd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dd8:	07dc      	lsls	r4, r3, #31
 8007dda:	d50e      	bpl.n	8007dfa <_vfiprintf_r+0x6a>
 8007ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007de0:	b01d      	add	sp, #116	; 0x74
 8007de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de6:	4b7b      	ldr	r3, [pc, #492]	; (8007fd4 <_vfiprintf_r+0x244>)
 8007de8:	429d      	cmp	r5, r3
 8007dea:	d101      	bne.n	8007df0 <_vfiprintf_r+0x60>
 8007dec:	68b5      	ldr	r5, [r6, #8]
 8007dee:	e7df      	b.n	8007db0 <_vfiprintf_r+0x20>
 8007df0:	4b79      	ldr	r3, [pc, #484]	; (8007fd8 <_vfiprintf_r+0x248>)
 8007df2:	429d      	cmp	r5, r3
 8007df4:	bf08      	it	eq
 8007df6:	68f5      	ldreq	r5, [r6, #12]
 8007df8:	e7da      	b.n	8007db0 <_vfiprintf_r+0x20>
 8007dfa:	89ab      	ldrh	r3, [r5, #12]
 8007dfc:	0598      	lsls	r0, r3, #22
 8007dfe:	d4ed      	bmi.n	8007ddc <_vfiprintf_r+0x4c>
 8007e00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e02:	f000 fb84 	bl	800850e <__retarget_lock_release_recursive>
 8007e06:	e7e9      	b.n	8007ddc <_vfiprintf_r+0x4c>
 8007e08:	2300      	movs	r3, #0
 8007e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e0c:	2320      	movs	r3, #32
 8007e0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e12:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e16:	2330      	movs	r3, #48	; 0x30
 8007e18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007fdc <_vfiprintf_r+0x24c>
 8007e1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e20:	f04f 0901 	mov.w	r9, #1
 8007e24:	4623      	mov	r3, r4
 8007e26:	469a      	mov	sl, r3
 8007e28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e2c:	b10a      	cbz	r2, 8007e32 <_vfiprintf_r+0xa2>
 8007e2e:	2a25      	cmp	r2, #37	; 0x25
 8007e30:	d1f9      	bne.n	8007e26 <_vfiprintf_r+0x96>
 8007e32:	ebba 0b04 	subs.w	fp, sl, r4
 8007e36:	d00b      	beq.n	8007e50 <_vfiprintf_r+0xc0>
 8007e38:	465b      	mov	r3, fp
 8007e3a:	4622      	mov	r2, r4
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	4630      	mov	r0, r6
 8007e40:	f7ff ff94 	bl	8007d6c <__sfputs_r>
 8007e44:	3001      	adds	r0, #1
 8007e46:	f000 80aa 	beq.w	8007f9e <_vfiprintf_r+0x20e>
 8007e4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e4c:	445a      	add	r2, fp
 8007e4e:	9209      	str	r2, [sp, #36]	; 0x24
 8007e50:	f89a 3000 	ldrb.w	r3, [sl]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f000 80a2 	beq.w	8007f9e <_vfiprintf_r+0x20e>
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e64:	f10a 0a01 	add.w	sl, sl, #1
 8007e68:	9304      	str	r3, [sp, #16]
 8007e6a:	9307      	str	r3, [sp, #28]
 8007e6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e70:	931a      	str	r3, [sp, #104]	; 0x68
 8007e72:	4654      	mov	r4, sl
 8007e74:	2205      	movs	r2, #5
 8007e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e7a:	4858      	ldr	r0, [pc, #352]	; (8007fdc <_vfiprintf_r+0x24c>)
 8007e7c:	f7f8 f9d0 	bl	8000220 <memchr>
 8007e80:	9a04      	ldr	r2, [sp, #16]
 8007e82:	b9d8      	cbnz	r0, 8007ebc <_vfiprintf_r+0x12c>
 8007e84:	06d1      	lsls	r1, r2, #27
 8007e86:	bf44      	itt	mi
 8007e88:	2320      	movmi	r3, #32
 8007e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e8e:	0713      	lsls	r3, r2, #28
 8007e90:	bf44      	itt	mi
 8007e92:	232b      	movmi	r3, #43	; 0x2b
 8007e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e98:	f89a 3000 	ldrb.w	r3, [sl]
 8007e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8007e9e:	d015      	beq.n	8007ecc <_vfiprintf_r+0x13c>
 8007ea0:	9a07      	ldr	r2, [sp, #28]
 8007ea2:	4654      	mov	r4, sl
 8007ea4:	2000      	movs	r0, #0
 8007ea6:	f04f 0c0a 	mov.w	ip, #10
 8007eaa:	4621      	mov	r1, r4
 8007eac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007eb0:	3b30      	subs	r3, #48	; 0x30
 8007eb2:	2b09      	cmp	r3, #9
 8007eb4:	d94e      	bls.n	8007f54 <_vfiprintf_r+0x1c4>
 8007eb6:	b1b0      	cbz	r0, 8007ee6 <_vfiprintf_r+0x156>
 8007eb8:	9207      	str	r2, [sp, #28]
 8007eba:	e014      	b.n	8007ee6 <_vfiprintf_r+0x156>
 8007ebc:	eba0 0308 	sub.w	r3, r0, r8
 8007ec0:	fa09 f303 	lsl.w	r3, r9, r3
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	9304      	str	r3, [sp, #16]
 8007ec8:	46a2      	mov	sl, r4
 8007eca:	e7d2      	b.n	8007e72 <_vfiprintf_r+0xe2>
 8007ecc:	9b03      	ldr	r3, [sp, #12]
 8007ece:	1d19      	adds	r1, r3, #4
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	9103      	str	r1, [sp, #12]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	bfbb      	ittet	lt
 8007ed8:	425b      	neglt	r3, r3
 8007eda:	f042 0202 	orrlt.w	r2, r2, #2
 8007ede:	9307      	strge	r3, [sp, #28]
 8007ee0:	9307      	strlt	r3, [sp, #28]
 8007ee2:	bfb8      	it	lt
 8007ee4:	9204      	strlt	r2, [sp, #16]
 8007ee6:	7823      	ldrb	r3, [r4, #0]
 8007ee8:	2b2e      	cmp	r3, #46	; 0x2e
 8007eea:	d10c      	bne.n	8007f06 <_vfiprintf_r+0x176>
 8007eec:	7863      	ldrb	r3, [r4, #1]
 8007eee:	2b2a      	cmp	r3, #42	; 0x2a
 8007ef0:	d135      	bne.n	8007f5e <_vfiprintf_r+0x1ce>
 8007ef2:	9b03      	ldr	r3, [sp, #12]
 8007ef4:	1d1a      	adds	r2, r3, #4
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	9203      	str	r2, [sp, #12]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	bfb8      	it	lt
 8007efe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007f02:	3402      	adds	r4, #2
 8007f04:	9305      	str	r3, [sp, #20]
 8007f06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007fec <_vfiprintf_r+0x25c>
 8007f0a:	7821      	ldrb	r1, [r4, #0]
 8007f0c:	2203      	movs	r2, #3
 8007f0e:	4650      	mov	r0, sl
 8007f10:	f7f8 f986 	bl	8000220 <memchr>
 8007f14:	b140      	cbz	r0, 8007f28 <_vfiprintf_r+0x198>
 8007f16:	2340      	movs	r3, #64	; 0x40
 8007f18:	eba0 000a 	sub.w	r0, r0, sl
 8007f1c:	fa03 f000 	lsl.w	r0, r3, r0
 8007f20:	9b04      	ldr	r3, [sp, #16]
 8007f22:	4303      	orrs	r3, r0
 8007f24:	3401      	adds	r4, #1
 8007f26:	9304      	str	r3, [sp, #16]
 8007f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f2c:	482c      	ldr	r0, [pc, #176]	; (8007fe0 <_vfiprintf_r+0x250>)
 8007f2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f32:	2206      	movs	r2, #6
 8007f34:	f7f8 f974 	bl	8000220 <memchr>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	d03f      	beq.n	8007fbc <_vfiprintf_r+0x22c>
 8007f3c:	4b29      	ldr	r3, [pc, #164]	; (8007fe4 <_vfiprintf_r+0x254>)
 8007f3e:	bb1b      	cbnz	r3, 8007f88 <_vfiprintf_r+0x1f8>
 8007f40:	9b03      	ldr	r3, [sp, #12]
 8007f42:	3307      	adds	r3, #7
 8007f44:	f023 0307 	bic.w	r3, r3, #7
 8007f48:	3308      	adds	r3, #8
 8007f4a:	9303      	str	r3, [sp, #12]
 8007f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f4e:	443b      	add	r3, r7
 8007f50:	9309      	str	r3, [sp, #36]	; 0x24
 8007f52:	e767      	b.n	8007e24 <_vfiprintf_r+0x94>
 8007f54:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f58:	460c      	mov	r4, r1
 8007f5a:	2001      	movs	r0, #1
 8007f5c:	e7a5      	b.n	8007eaa <_vfiprintf_r+0x11a>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	3401      	adds	r4, #1
 8007f62:	9305      	str	r3, [sp, #20]
 8007f64:	4619      	mov	r1, r3
 8007f66:	f04f 0c0a 	mov.w	ip, #10
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f70:	3a30      	subs	r2, #48	; 0x30
 8007f72:	2a09      	cmp	r2, #9
 8007f74:	d903      	bls.n	8007f7e <_vfiprintf_r+0x1ee>
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d0c5      	beq.n	8007f06 <_vfiprintf_r+0x176>
 8007f7a:	9105      	str	r1, [sp, #20]
 8007f7c:	e7c3      	b.n	8007f06 <_vfiprintf_r+0x176>
 8007f7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f82:	4604      	mov	r4, r0
 8007f84:	2301      	movs	r3, #1
 8007f86:	e7f0      	b.n	8007f6a <_vfiprintf_r+0x1da>
 8007f88:	ab03      	add	r3, sp, #12
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	462a      	mov	r2, r5
 8007f8e:	4b16      	ldr	r3, [pc, #88]	; (8007fe8 <_vfiprintf_r+0x258>)
 8007f90:	a904      	add	r1, sp, #16
 8007f92:	4630      	mov	r0, r6
 8007f94:	f7fd fde6 	bl	8005b64 <_printf_float>
 8007f98:	4607      	mov	r7, r0
 8007f9a:	1c78      	adds	r0, r7, #1
 8007f9c:	d1d6      	bne.n	8007f4c <_vfiprintf_r+0x1bc>
 8007f9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fa0:	07d9      	lsls	r1, r3, #31
 8007fa2:	d405      	bmi.n	8007fb0 <_vfiprintf_r+0x220>
 8007fa4:	89ab      	ldrh	r3, [r5, #12]
 8007fa6:	059a      	lsls	r2, r3, #22
 8007fa8:	d402      	bmi.n	8007fb0 <_vfiprintf_r+0x220>
 8007faa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fac:	f000 faaf 	bl	800850e <__retarget_lock_release_recursive>
 8007fb0:	89ab      	ldrh	r3, [r5, #12]
 8007fb2:	065b      	lsls	r3, r3, #25
 8007fb4:	f53f af12 	bmi.w	8007ddc <_vfiprintf_r+0x4c>
 8007fb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fba:	e711      	b.n	8007de0 <_vfiprintf_r+0x50>
 8007fbc:	ab03      	add	r3, sp, #12
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	462a      	mov	r2, r5
 8007fc2:	4b09      	ldr	r3, [pc, #36]	; (8007fe8 <_vfiprintf_r+0x258>)
 8007fc4:	a904      	add	r1, sp, #16
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	f7fe f870 	bl	80060ac <_printf_i>
 8007fcc:	e7e4      	b.n	8007f98 <_vfiprintf_r+0x208>
 8007fce:	bf00      	nop
 8007fd0:	08008bdc 	.word	0x08008bdc
 8007fd4:	08008bfc 	.word	0x08008bfc
 8007fd8:	08008bbc 	.word	0x08008bbc
 8007fdc:	08008a64 	.word	0x08008a64
 8007fe0:	08008a6e 	.word	0x08008a6e
 8007fe4:	08005b65 	.word	0x08005b65
 8007fe8:	08007d6d 	.word	0x08007d6d
 8007fec:	08008a6a 	.word	0x08008a6a

08007ff0 <__swbuf_r>:
 8007ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff2:	460e      	mov	r6, r1
 8007ff4:	4614      	mov	r4, r2
 8007ff6:	4605      	mov	r5, r0
 8007ff8:	b118      	cbz	r0, 8008002 <__swbuf_r+0x12>
 8007ffa:	6983      	ldr	r3, [r0, #24]
 8007ffc:	b90b      	cbnz	r3, 8008002 <__swbuf_r+0x12>
 8007ffe:	f000 f9e7 	bl	80083d0 <__sinit>
 8008002:	4b21      	ldr	r3, [pc, #132]	; (8008088 <__swbuf_r+0x98>)
 8008004:	429c      	cmp	r4, r3
 8008006:	d12b      	bne.n	8008060 <__swbuf_r+0x70>
 8008008:	686c      	ldr	r4, [r5, #4]
 800800a:	69a3      	ldr	r3, [r4, #24]
 800800c:	60a3      	str	r3, [r4, #8]
 800800e:	89a3      	ldrh	r3, [r4, #12]
 8008010:	071a      	lsls	r2, r3, #28
 8008012:	d52f      	bpl.n	8008074 <__swbuf_r+0x84>
 8008014:	6923      	ldr	r3, [r4, #16]
 8008016:	b36b      	cbz	r3, 8008074 <__swbuf_r+0x84>
 8008018:	6923      	ldr	r3, [r4, #16]
 800801a:	6820      	ldr	r0, [r4, #0]
 800801c:	1ac0      	subs	r0, r0, r3
 800801e:	6963      	ldr	r3, [r4, #20]
 8008020:	b2f6      	uxtb	r6, r6
 8008022:	4283      	cmp	r3, r0
 8008024:	4637      	mov	r7, r6
 8008026:	dc04      	bgt.n	8008032 <__swbuf_r+0x42>
 8008028:	4621      	mov	r1, r4
 800802a:	4628      	mov	r0, r5
 800802c:	f000 f93c 	bl	80082a8 <_fflush_r>
 8008030:	bb30      	cbnz	r0, 8008080 <__swbuf_r+0x90>
 8008032:	68a3      	ldr	r3, [r4, #8]
 8008034:	3b01      	subs	r3, #1
 8008036:	60a3      	str	r3, [r4, #8]
 8008038:	6823      	ldr	r3, [r4, #0]
 800803a:	1c5a      	adds	r2, r3, #1
 800803c:	6022      	str	r2, [r4, #0]
 800803e:	701e      	strb	r6, [r3, #0]
 8008040:	6963      	ldr	r3, [r4, #20]
 8008042:	3001      	adds	r0, #1
 8008044:	4283      	cmp	r3, r0
 8008046:	d004      	beq.n	8008052 <__swbuf_r+0x62>
 8008048:	89a3      	ldrh	r3, [r4, #12]
 800804a:	07db      	lsls	r3, r3, #31
 800804c:	d506      	bpl.n	800805c <__swbuf_r+0x6c>
 800804e:	2e0a      	cmp	r6, #10
 8008050:	d104      	bne.n	800805c <__swbuf_r+0x6c>
 8008052:	4621      	mov	r1, r4
 8008054:	4628      	mov	r0, r5
 8008056:	f000 f927 	bl	80082a8 <_fflush_r>
 800805a:	b988      	cbnz	r0, 8008080 <__swbuf_r+0x90>
 800805c:	4638      	mov	r0, r7
 800805e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008060:	4b0a      	ldr	r3, [pc, #40]	; (800808c <__swbuf_r+0x9c>)
 8008062:	429c      	cmp	r4, r3
 8008064:	d101      	bne.n	800806a <__swbuf_r+0x7a>
 8008066:	68ac      	ldr	r4, [r5, #8]
 8008068:	e7cf      	b.n	800800a <__swbuf_r+0x1a>
 800806a:	4b09      	ldr	r3, [pc, #36]	; (8008090 <__swbuf_r+0xa0>)
 800806c:	429c      	cmp	r4, r3
 800806e:	bf08      	it	eq
 8008070:	68ec      	ldreq	r4, [r5, #12]
 8008072:	e7ca      	b.n	800800a <__swbuf_r+0x1a>
 8008074:	4621      	mov	r1, r4
 8008076:	4628      	mov	r0, r5
 8008078:	f000 f81a 	bl	80080b0 <__swsetup_r>
 800807c:	2800      	cmp	r0, #0
 800807e:	d0cb      	beq.n	8008018 <__swbuf_r+0x28>
 8008080:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008084:	e7ea      	b.n	800805c <__swbuf_r+0x6c>
 8008086:	bf00      	nop
 8008088:	08008bdc 	.word	0x08008bdc
 800808c:	08008bfc 	.word	0x08008bfc
 8008090:	08008bbc 	.word	0x08008bbc

08008094 <__ascii_wctomb>:
 8008094:	b149      	cbz	r1, 80080aa <__ascii_wctomb+0x16>
 8008096:	2aff      	cmp	r2, #255	; 0xff
 8008098:	bf85      	ittet	hi
 800809a:	238a      	movhi	r3, #138	; 0x8a
 800809c:	6003      	strhi	r3, [r0, #0]
 800809e:	700a      	strbls	r2, [r1, #0]
 80080a0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80080a4:	bf98      	it	ls
 80080a6:	2001      	movls	r0, #1
 80080a8:	4770      	bx	lr
 80080aa:	4608      	mov	r0, r1
 80080ac:	4770      	bx	lr
	...

080080b0 <__swsetup_r>:
 80080b0:	4b32      	ldr	r3, [pc, #200]	; (800817c <__swsetup_r+0xcc>)
 80080b2:	b570      	push	{r4, r5, r6, lr}
 80080b4:	681d      	ldr	r5, [r3, #0]
 80080b6:	4606      	mov	r6, r0
 80080b8:	460c      	mov	r4, r1
 80080ba:	b125      	cbz	r5, 80080c6 <__swsetup_r+0x16>
 80080bc:	69ab      	ldr	r3, [r5, #24]
 80080be:	b913      	cbnz	r3, 80080c6 <__swsetup_r+0x16>
 80080c0:	4628      	mov	r0, r5
 80080c2:	f000 f985 	bl	80083d0 <__sinit>
 80080c6:	4b2e      	ldr	r3, [pc, #184]	; (8008180 <__swsetup_r+0xd0>)
 80080c8:	429c      	cmp	r4, r3
 80080ca:	d10f      	bne.n	80080ec <__swsetup_r+0x3c>
 80080cc:	686c      	ldr	r4, [r5, #4]
 80080ce:	89a3      	ldrh	r3, [r4, #12]
 80080d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080d4:	0719      	lsls	r1, r3, #28
 80080d6:	d42c      	bmi.n	8008132 <__swsetup_r+0x82>
 80080d8:	06dd      	lsls	r5, r3, #27
 80080da:	d411      	bmi.n	8008100 <__swsetup_r+0x50>
 80080dc:	2309      	movs	r3, #9
 80080de:	6033      	str	r3, [r6, #0]
 80080e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80080e4:	81a3      	strh	r3, [r4, #12]
 80080e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080ea:	e03e      	b.n	800816a <__swsetup_r+0xba>
 80080ec:	4b25      	ldr	r3, [pc, #148]	; (8008184 <__swsetup_r+0xd4>)
 80080ee:	429c      	cmp	r4, r3
 80080f0:	d101      	bne.n	80080f6 <__swsetup_r+0x46>
 80080f2:	68ac      	ldr	r4, [r5, #8]
 80080f4:	e7eb      	b.n	80080ce <__swsetup_r+0x1e>
 80080f6:	4b24      	ldr	r3, [pc, #144]	; (8008188 <__swsetup_r+0xd8>)
 80080f8:	429c      	cmp	r4, r3
 80080fa:	bf08      	it	eq
 80080fc:	68ec      	ldreq	r4, [r5, #12]
 80080fe:	e7e6      	b.n	80080ce <__swsetup_r+0x1e>
 8008100:	0758      	lsls	r0, r3, #29
 8008102:	d512      	bpl.n	800812a <__swsetup_r+0x7a>
 8008104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008106:	b141      	cbz	r1, 800811a <__swsetup_r+0x6a>
 8008108:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800810c:	4299      	cmp	r1, r3
 800810e:	d002      	beq.n	8008116 <__swsetup_r+0x66>
 8008110:	4630      	mov	r0, r6
 8008112:	f7ff fb31 	bl	8007778 <_free_r>
 8008116:	2300      	movs	r3, #0
 8008118:	6363      	str	r3, [r4, #52]	; 0x34
 800811a:	89a3      	ldrh	r3, [r4, #12]
 800811c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008120:	81a3      	strh	r3, [r4, #12]
 8008122:	2300      	movs	r3, #0
 8008124:	6063      	str	r3, [r4, #4]
 8008126:	6923      	ldr	r3, [r4, #16]
 8008128:	6023      	str	r3, [r4, #0]
 800812a:	89a3      	ldrh	r3, [r4, #12]
 800812c:	f043 0308 	orr.w	r3, r3, #8
 8008130:	81a3      	strh	r3, [r4, #12]
 8008132:	6923      	ldr	r3, [r4, #16]
 8008134:	b94b      	cbnz	r3, 800814a <__swsetup_r+0x9a>
 8008136:	89a3      	ldrh	r3, [r4, #12]
 8008138:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800813c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008140:	d003      	beq.n	800814a <__swsetup_r+0x9a>
 8008142:	4621      	mov	r1, r4
 8008144:	4630      	mov	r0, r6
 8008146:	f000 fa09 	bl	800855c <__smakebuf_r>
 800814a:	89a0      	ldrh	r0, [r4, #12]
 800814c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008150:	f010 0301 	ands.w	r3, r0, #1
 8008154:	d00a      	beq.n	800816c <__swsetup_r+0xbc>
 8008156:	2300      	movs	r3, #0
 8008158:	60a3      	str	r3, [r4, #8]
 800815a:	6963      	ldr	r3, [r4, #20]
 800815c:	425b      	negs	r3, r3
 800815e:	61a3      	str	r3, [r4, #24]
 8008160:	6923      	ldr	r3, [r4, #16]
 8008162:	b943      	cbnz	r3, 8008176 <__swsetup_r+0xc6>
 8008164:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008168:	d1ba      	bne.n	80080e0 <__swsetup_r+0x30>
 800816a:	bd70      	pop	{r4, r5, r6, pc}
 800816c:	0781      	lsls	r1, r0, #30
 800816e:	bf58      	it	pl
 8008170:	6963      	ldrpl	r3, [r4, #20]
 8008172:	60a3      	str	r3, [r4, #8]
 8008174:	e7f4      	b.n	8008160 <__swsetup_r+0xb0>
 8008176:	2000      	movs	r0, #0
 8008178:	e7f7      	b.n	800816a <__swsetup_r+0xba>
 800817a:	bf00      	nop
 800817c:	2000000c 	.word	0x2000000c
 8008180:	08008bdc 	.word	0x08008bdc
 8008184:	08008bfc 	.word	0x08008bfc
 8008188:	08008bbc 	.word	0x08008bbc

0800818c <abort>:
 800818c:	b508      	push	{r3, lr}
 800818e:	2006      	movs	r0, #6
 8008190:	f000 fa54 	bl	800863c <raise>
 8008194:	2001      	movs	r0, #1
 8008196:	f7f9 ff63 	bl	8002060 <_exit>
	...

0800819c <__sflush_r>:
 800819c:	898a      	ldrh	r2, [r1, #12]
 800819e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081a2:	4605      	mov	r5, r0
 80081a4:	0710      	lsls	r0, r2, #28
 80081a6:	460c      	mov	r4, r1
 80081a8:	d458      	bmi.n	800825c <__sflush_r+0xc0>
 80081aa:	684b      	ldr	r3, [r1, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	dc05      	bgt.n	80081bc <__sflush_r+0x20>
 80081b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	dc02      	bgt.n	80081bc <__sflush_r+0x20>
 80081b6:	2000      	movs	r0, #0
 80081b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081be:	2e00      	cmp	r6, #0
 80081c0:	d0f9      	beq.n	80081b6 <__sflush_r+0x1a>
 80081c2:	2300      	movs	r3, #0
 80081c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081c8:	682f      	ldr	r7, [r5, #0]
 80081ca:	602b      	str	r3, [r5, #0]
 80081cc:	d032      	beq.n	8008234 <__sflush_r+0x98>
 80081ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081d0:	89a3      	ldrh	r3, [r4, #12]
 80081d2:	075a      	lsls	r2, r3, #29
 80081d4:	d505      	bpl.n	80081e2 <__sflush_r+0x46>
 80081d6:	6863      	ldr	r3, [r4, #4]
 80081d8:	1ac0      	subs	r0, r0, r3
 80081da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081dc:	b10b      	cbz	r3, 80081e2 <__sflush_r+0x46>
 80081de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081e0:	1ac0      	subs	r0, r0, r3
 80081e2:	2300      	movs	r3, #0
 80081e4:	4602      	mov	r2, r0
 80081e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081e8:	6a21      	ldr	r1, [r4, #32]
 80081ea:	4628      	mov	r0, r5
 80081ec:	47b0      	blx	r6
 80081ee:	1c43      	adds	r3, r0, #1
 80081f0:	89a3      	ldrh	r3, [r4, #12]
 80081f2:	d106      	bne.n	8008202 <__sflush_r+0x66>
 80081f4:	6829      	ldr	r1, [r5, #0]
 80081f6:	291d      	cmp	r1, #29
 80081f8:	d82c      	bhi.n	8008254 <__sflush_r+0xb8>
 80081fa:	4a2a      	ldr	r2, [pc, #168]	; (80082a4 <__sflush_r+0x108>)
 80081fc:	40ca      	lsrs	r2, r1
 80081fe:	07d6      	lsls	r6, r2, #31
 8008200:	d528      	bpl.n	8008254 <__sflush_r+0xb8>
 8008202:	2200      	movs	r2, #0
 8008204:	6062      	str	r2, [r4, #4]
 8008206:	04d9      	lsls	r1, r3, #19
 8008208:	6922      	ldr	r2, [r4, #16]
 800820a:	6022      	str	r2, [r4, #0]
 800820c:	d504      	bpl.n	8008218 <__sflush_r+0x7c>
 800820e:	1c42      	adds	r2, r0, #1
 8008210:	d101      	bne.n	8008216 <__sflush_r+0x7a>
 8008212:	682b      	ldr	r3, [r5, #0]
 8008214:	b903      	cbnz	r3, 8008218 <__sflush_r+0x7c>
 8008216:	6560      	str	r0, [r4, #84]	; 0x54
 8008218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800821a:	602f      	str	r7, [r5, #0]
 800821c:	2900      	cmp	r1, #0
 800821e:	d0ca      	beq.n	80081b6 <__sflush_r+0x1a>
 8008220:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008224:	4299      	cmp	r1, r3
 8008226:	d002      	beq.n	800822e <__sflush_r+0x92>
 8008228:	4628      	mov	r0, r5
 800822a:	f7ff faa5 	bl	8007778 <_free_r>
 800822e:	2000      	movs	r0, #0
 8008230:	6360      	str	r0, [r4, #52]	; 0x34
 8008232:	e7c1      	b.n	80081b8 <__sflush_r+0x1c>
 8008234:	6a21      	ldr	r1, [r4, #32]
 8008236:	2301      	movs	r3, #1
 8008238:	4628      	mov	r0, r5
 800823a:	47b0      	blx	r6
 800823c:	1c41      	adds	r1, r0, #1
 800823e:	d1c7      	bne.n	80081d0 <__sflush_r+0x34>
 8008240:	682b      	ldr	r3, [r5, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d0c4      	beq.n	80081d0 <__sflush_r+0x34>
 8008246:	2b1d      	cmp	r3, #29
 8008248:	d001      	beq.n	800824e <__sflush_r+0xb2>
 800824a:	2b16      	cmp	r3, #22
 800824c:	d101      	bne.n	8008252 <__sflush_r+0xb6>
 800824e:	602f      	str	r7, [r5, #0]
 8008250:	e7b1      	b.n	80081b6 <__sflush_r+0x1a>
 8008252:	89a3      	ldrh	r3, [r4, #12]
 8008254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008258:	81a3      	strh	r3, [r4, #12]
 800825a:	e7ad      	b.n	80081b8 <__sflush_r+0x1c>
 800825c:	690f      	ldr	r7, [r1, #16]
 800825e:	2f00      	cmp	r7, #0
 8008260:	d0a9      	beq.n	80081b6 <__sflush_r+0x1a>
 8008262:	0793      	lsls	r3, r2, #30
 8008264:	680e      	ldr	r6, [r1, #0]
 8008266:	bf08      	it	eq
 8008268:	694b      	ldreq	r3, [r1, #20]
 800826a:	600f      	str	r7, [r1, #0]
 800826c:	bf18      	it	ne
 800826e:	2300      	movne	r3, #0
 8008270:	eba6 0807 	sub.w	r8, r6, r7
 8008274:	608b      	str	r3, [r1, #8]
 8008276:	f1b8 0f00 	cmp.w	r8, #0
 800827a:	dd9c      	ble.n	80081b6 <__sflush_r+0x1a>
 800827c:	6a21      	ldr	r1, [r4, #32]
 800827e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008280:	4643      	mov	r3, r8
 8008282:	463a      	mov	r2, r7
 8008284:	4628      	mov	r0, r5
 8008286:	47b0      	blx	r6
 8008288:	2800      	cmp	r0, #0
 800828a:	dc06      	bgt.n	800829a <__sflush_r+0xfe>
 800828c:	89a3      	ldrh	r3, [r4, #12]
 800828e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008292:	81a3      	strh	r3, [r4, #12]
 8008294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008298:	e78e      	b.n	80081b8 <__sflush_r+0x1c>
 800829a:	4407      	add	r7, r0
 800829c:	eba8 0800 	sub.w	r8, r8, r0
 80082a0:	e7e9      	b.n	8008276 <__sflush_r+0xda>
 80082a2:	bf00      	nop
 80082a4:	20400001 	.word	0x20400001

080082a8 <_fflush_r>:
 80082a8:	b538      	push	{r3, r4, r5, lr}
 80082aa:	690b      	ldr	r3, [r1, #16]
 80082ac:	4605      	mov	r5, r0
 80082ae:	460c      	mov	r4, r1
 80082b0:	b913      	cbnz	r3, 80082b8 <_fflush_r+0x10>
 80082b2:	2500      	movs	r5, #0
 80082b4:	4628      	mov	r0, r5
 80082b6:	bd38      	pop	{r3, r4, r5, pc}
 80082b8:	b118      	cbz	r0, 80082c2 <_fflush_r+0x1a>
 80082ba:	6983      	ldr	r3, [r0, #24]
 80082bc:	b90b      	cbnz	r3, 80082c2 <_fflush_r+0x1a>
 80082be:	f000 f887 	bl	80083d0 <__sinit>
 80082c2:	4b14      	ldr	r3, [pc, #80]	; (8008314 <_fflush_r+0x6c>)
 80082c4:	429c      	cmp	r4, r3
 80082c6:	d11b      	bne.n	8008300 <_fflush_r+0x58>
 80082c8:	686c      	ldr	r4, [r5, #4]
 80082ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d0ef      	beq.n	80082b2 <_fflush_r+0xa>
 80082d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80082d4:	07d0      	lsls	r0, r2, #31
 80082d6:	d404      	bmi.n	80082e2 <_fflush_r+0x3a>
 80082d8:	0599      	lsls	r1, r3, #22
 80082da:	d402      	bmi.n	80082e2 <_fflush_r+0x3a>
 80082dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082de:	f000 f915 	bl	800850c <__retarget_lock_acquire_recursive>
 80082e2:	4628      	mov	r0, r5
 80082e4:	4621      	mov	r1, r4
 80082e6:	f7ff ff59 	bl	800819c <__sflush_r>
 80082ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082ec:	07da      	lsls	r2, r3, #31
 80082ee:	4605      	mov	r5, r0
 80082f0:	d4e0      	bmi.n	80082b4 <_fflush_r+0xc>
 80082f2:	89a3      	ldrh	r3, [r4, #12]
 80082f4:	059b      	lsls	r3, r3, #22
 80082f6:	d4dd      	bmi.n	80082b4 <_fflush_r+0xc>
 80082f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082fa:	f000 f908 	bl	800850e <__retarget_lock_release_recursive>
 80082fe:	e7d9      	b.n	80082b4 <_fflush_r+0xc>
 8008300:	4b05      	ldr	r3, [pc, #20]	; (8008318 <_fflush_r+0x70>)
 8008302:	429c      	cmp	r4, r3
 8008304:	d101      	bne.n	800830a <_fflush_r+0x62>
 8008306:	68ac      	ldr	r4, [r5, #8]
 8008308:	e7df      	b.n	80082ca <_fflush_r+0x22>
 800830a:	4b04      	ldr	r3, [pc, #16]	; (800831c <_fflush_r+0x74>)
 800830c:	429c      	cmp	r4, r3
 800830e:	bf08      	it	eq
 8008310:	68ec      	ldreq	r4, [r5, #12]
 8008312:	e7da      	b.n	80082ca <_fflush_r+0x22>
 8008314:	08008bdc 	.word	0x08008bdc
 8008318:	08008bfc 	.word	0x08008bfc
 800831c:	08008bbc 	.word	0x08008bbc

08008320 <std>:
 8008320:	2300      	movs	r3, #0
 8008322:	b510      	push	{r4, lr}
 8008324:	4604      	mov	r4, r0
 8008326:	e9c0 3300 	strd	r3, r3, [r0]
 800832a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800832e:	6083      	str	r3, [r0, #8]
 8008330:	8181      	strh	r1, [r0, #12]
 8008332:	6643      	str	r3, [r0, #100]	; 0x64
 8008334:	81c2      	strh	r2, [r0, #14]
 8008336:	6183      	str	r3, [r0, #24]
 8008338:	4619      	mov	r1, r3
 800833a:	2208      	movs	r2, #8
 800833c:	305c      	adds	r0, #92	; 0x5c
 800833e:	f7fd fb69 	bl	8005a14 <memset>
 8008342:	4b05      	ldr	r3, [pc, #20]	; (8008358 <std+0x38>)
 8008344:	6263      	str	r3, [r4, #36]	; 0x24
 8008346:	4b05      	ldr	r3, [pc, #20]	; (800835c <std+0x3c>)
 8008348:	62a3      	str	r3, [r4, #40]	; 0x28
 800834a:	4b05      	ldr	r3, [pc, #20]	; (8008360 <std+0x40>)
 800834c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800834e:	4b05      	ldr	r3, [pc, #20]	; (8008364 <std+0x44>)
 8008350:	6224      	str	r4, [r4, #32]
 8008352:	6323      	str	r3, [r4, #48]	; 0x30
 8008354:	bd10      	pop	{r4, pc}
 8008356:	bf00      	nop
 8008358:	08008675 	.word	0x08008675
 800835c:	08008697 	.word	0x08008697
 8008360:	080086cf 	.word	0x080086cf
 8008364:	080086f3 	.word	0x080086f3

08008368 <_cleanup_r>:
 8008368:	4901      	ldr	r1, [pc, #4]	; (8008370 <_cleanup_r+0x8>)
 800836a:	f000 b8af 	b.w	80084cc <_fwalk_reent>
 800836e:	bf00      	nop
 8008370:	080082a9 	.word	0x080082a9

08008374 <__sfmoreglue>:
 8008374:	b570      	push	{r4, r5, r6, lr}
 8008376:	2268      	movs	r2, #104	; 0x68
 8008378:	1e4d      	subs	r5, r1, #1
 800837a:	4355      	muls	r5, r2
 800837c:	460e      	mov	r6, r1
 800837e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008382:	f7ff fa65 	bl	8007850 <_malloc_r>
 8008386:	4604      	mov	r4, r0
 8008388:	b140      	cbz	r0, 800839c <__sfmoreglue+0x28>
 800838a:	2100      	movs	r1, #0
 800838c:	e9c0 1600 	strd	r1, r6, [r0]
 8008390:	300c      	adds	r0, #12
 8008392:	60a0      	str	r0, [r4, #8]
 8008394:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008398:	f7fd fb3c 	bl	8005a14 <memset>
 800839c:	4620      	mov	r0, r4
 800839e:	bd70      	pop	{r4, r5, r6, pc}

080083a0 <__sfp_lock_acquire>:
 80083a0:	4801      	ldr	r0, [pc, #4]	; (80083a8 <__sfp_lock_acquire+0x8>)
 80083a2:	f000 b8b3 	b.w	800850c <__retarget_lock_acquire_recursive>
 80083a6:	bf00      	nop
 80083a8:	20000385 	.word	0x20000385

080083ac <__sfp_lock_release>:
 80083ac:	4801      	ldr	r0, [pc, #4]	; (80083b4 <__sfp_lock_release+0x8>)
 80083ae:	f000 b8ae 	b.w	800850e <__retarget_lock_release_recursive>
 80083b2:	bf00      	nop
 80083b4:	20000385 	.word	0x20000385

080083b8 <__sinit_lock_acquire>:
 80083b8:	4801      	ldr	r0, [pc, #4]	; (80083c0 <__sinit_lock_acquire+0x8>)
 80083ba:	f000 b8a7 	b.w	800850c <__retarget_lock_acquire_recursive>
 80083be:	bf00      	nop
 80083c0:	20000386 	.word	0x20000386

080083c4 <__sinit_lock_release>:
 80083c4:	4801      	ldr	r0, [pc, #4]	; (80083cc <__sinit_lock_release+0x8>)
 80083c6:	f000 b8a2 	b.w	800850e <__retarget_lock_release_recursive>
 80083ca:	bf00      	nop
 80083cc:	20000386 	.word	0x20000386

080083d0 <__sinit>:
 80083d0:	b510      	push	{r4, lr}
 80083d2:	4604      	mov	r4, r0
 80083d4:	f7ff fff0 	bl	80083b8 <__sinit_lock_acquire>
 80083d8:	69a3      	ldr	r3, [r4, #24]
 80083da:	b11b      	cbz	r3, 80083e4 <__sinit+0x14>
 80083dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083e0:	f7ff bff0 	b.w	80083c4 <__sinit_lock_release>
 80083e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80083e8:	6523      	str	r3, [r4, #80]	; 0x50
 80083ea:	4b13      	ldr	r3, [pc, #76]	; (8008438 <__sinit+0x68>)
 80083ec:	4a13      	ldr	r2, [pc, #76]	; (800843c <__sinit+0x6c>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80083f2:	42a3      	cmp	r3, r4
 80083f4:	bf04      	itt	eq
 80083f6:	2301      	moveq	r3, #1
 80083f8:	61a3      	streq	r3, [r4, #24]
 80083fa:	4620      	mov	r0, r4
 80083fc:	f000 f820 	bl	8008440 <__sfp>
 8008400:	6060      	str	r0, [r4, #4]
 8008402:	4620      	mov	r0, r4
 8008404:	f000 f81c 	bl	8008440 <__sfp>
 8008408:	60a0      	str	r0, [r4, #8]
 800840a:	4620      	mov	r0, r4
 800840c:	f000 f818 	bl	8008440 <__sfp>
 8008410:	2200      	movs	r2, #0
 8008412:	60e0      	str	r0, [r4, #12]
 8008414:	2104      	movs	r1, #4
 8008416:	6860      	ldr	r0, [r4, #4]
 8008418:	f7ff ff82 	bl	8008320 <std>
 800841c:	68a0      	ldr	r0, [r4, #8]
 800841e:	2201      	movs	r2, #1
 8008420:	2109      	movs	r1, #9
 8008422:	f7ff ff7d 	bl	8008320 <std>
 8008426:	68e0      	ldr	r0, [r4, #12]
 8008428:	2202      	movs	r2, #2
 800842a:	2112      	movs	r1, #18
 800842c:	f7ff ff78 	bl	8008320 <std>
 8008430:	2301      	movs	r3, #1
 8008432:	61a3      	str	r3, [r4, #24]
 8008434:	e7d2      	b.n	80083dc <__sinit+0xc>
 8008436:	bf00      	nop
 8008438:	08008844 	.word	0x08008844
 800843c:	08008369 	.word	0x08008369

08008440 <__sfp>:
 8008440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008442:	4607      	mov	r7, r0
 8008444:	f7ff ffac 	bl	80083a0 <__sfp_lock_acquire>
 8008448:	4b1e      	ldr	r3, [pc, #120]	; (80084c4 <__sfp+0x84>)
 800844a:	681e      	ldr	r6, [r3, #0]
 800844c:	69b3      	ldr	r3, [r6, #24]
 800844e:	b913      	cbnz	r3, 8008456 <__sfp+0x16>
 8008450:	4630      	mov	r0, r6
 8008452:	f7ff ffbd 	bl	80083d0 <__sinit>
 8008456:	3648      	adds	r6, #72	; 0x48
 8008458:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800845c:	3b01      	subs	r3, #1
 800845e:	d503      	bpl.n	8008468 <__sfp+0x28>
 8008460:	6833      	ldr	r3, [r6, #0]
 8008462:	b30b      	cbz	r3, 80084a8 <__sfp+0x68>
 8008464:	6836      	ldr	r6, [r6, #0]
 8008466:	e7f7      	b.n	8008458 <__sfp+0x18>
 8008468:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800846c:	b9d5      	cbnz	r5, 80084a4 <__sfp+0x64>
 800846e:	4b16      	ldr	r3, [pc, #88]	; (80084c8 <__sfp+0x88>)
 8008470:	60e3      	str	r3, [r4, #12]
 8008472:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008476:	6665      	str	r5, [r4, #100]	; 0x64
 8008478:	f000 f847 	bl	800850a <__retarget_lock_init_recursive>
 800847c:	f7ff ff96 	bl	80083ac <__sfp_lock_release>
 8008480:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008484:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008488:	6025      	str	r5, [r4, #0]
 800848a:	61a5      	str	r5, [r4, #24]
 800848c:	2208      	movs	r2, #8
 800848e:	4629      	mov	r1, r5
 8008490:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008494:	f7fd fabe 	bl	8005a14 <memset>
 8008498:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800849c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80084a0:	4620      	mov	r0, r4
 80084a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084a4:	3468      	adds	r4, #104	; 0x68
 80084a6:	e7d9      	b.n	800845c <__sfp+0x1c>
 80084a8:	2104      	movs	r1, #4
 80084aa:	4638      	mov	r0, r7
 80084ac:	f7ff ff62 	bl	8008374 <__sfmoreglue>
 80084b0:	4604      	mov	r4, r0
 80084b2:	6030      	str	r0, [r6, #0]
 80084b4:	2800      	cmp	r0, #0
 80084b6:	d1d5      	bne.n	8008464 <__sfp+0x24>
 80084b8:	f7ff ff78 	bl	80083ac <__sfp_lock_release>
 80084bc:	230c      	movs	r3, #12
 80084be:	603b      	str	r3, [r7, #0]
 80084c0:	e7ee      	b.n	80084a0 <__sfp+0x60>
 80084c2:	bf00      	nop
 80084c4:	08008844 	.word	0x08008844
 80084c8:	ffff0001 	.word	0xffff0001

080084cc <_fwalk_reent>:
 80084cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084d0:	4606      	mov	r6, r0
 80084d2:	4688      	mov	r8, r1
 80084d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80084d8:	2700      	movs	r7, #0
 80084da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084de:	f1b9 0901 	subs.w	r9, r9, #1
 80084e2:	d505      	bpl.n	80084f0 <_fwalk_reent+0x24>
 80084e4:	6824      	ldr	r4, [r4, #0]
 80084e6:	2c00      	cmp	r4, #0
 80084e8:	d1f7      	bne.n	80084da <_fwalk_reent+0xe>
 80084ea:	4638      	mov	r0, r7
 80084ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084f0:	89ab      	ldrh	r3, [r5, #12]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d907      	bls.n	8008506 <_fwalk_reent+0x3a>
 80084f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084fa:	3301      	adds	r3, #1
 80084fc:	d003      	beq.n	8008506 <_fwalk_reent+0x3a>
 80084fe:	4629      	mov	r1, r5
 8008500:	4630      	mov	r0, r6
 8008502:	47c0      	blx	r8
 8008504:	4307      	orrs	r7, r0
 8008506:	3568      	adds	r5, #104	; 0x68
 8008508:	e7e9      	b.n	80084de <_fwalk_reent+0x12>

0800850a <__retarget_lock_init_recursive>:
 800850a:	4770      	bx	lr

0800850c <__retarget_lock_acquire_recursive>:
 800850c:	4770      	bx	lr

0800850e <__retarget_lock_release_recursive>:
 800850e:	4770      	bx	lr

08008510 <__swhatbuf_r>:
 8008510:	b570      	push	{r4, r5, r6, lr}
 8008512:	460e      	mov	r6, r1
 8008514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008518:	2900      	cmp	r1, #0
 800851a:	b096      	sub	sp, #88	; 0x58
 800851c:	4614      	mov	r4, r2
 800851e:	461d      	mov	r5, r3
 8008520:	da08      	bge.n	8008534 <__swhatbuf_r+0x24>
 8008522:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	602a      	str	r2, [r5, #0]
 800852a:	061a      	lsls	r2, r3, #24
 800852c:	d410      	bmi.n	8008550 <__swhatbuf_r+0x40>
 800852e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008532:	e00e      	b.n	8008552 <__swhatbuf_r+0x42>
 8008534:	466a      	mov	r2, sp
 8008536:	f000 f903 	bl	8008740 <_fstat_r>
 800853a:	2800      	cmp	r0, #0
 800853c:	dbf1      	blt.n	8008522 <__swhatbuf_r+0x12>
 800853e:	9a01      	ldr	r2, [sp, #4]
 8008540:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008544:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008548:	425a      	negs	r2, r3
 800854a:	415a      	adcs	r2, r3
 800854c:	602a      	str	r2, [r5, #0]
 800854e:	e7ee      	b.n	800852e <__swhatbuf_r+0x1e>
 8008550:	2340      	movs	r3, #64	; 0x40
 8008552:	2000      	movs	r0, #0
 8008554:	6023      	str	r3, [r4, #0]
 8008556:	b016      	add	sp, #88	; 0x58
 8008558:	bd70      	pop	{r4, r5, r6, pc}
	...

0800855c <__smakebuf_r>:
 800855c:	898b      	ldrh	r3, [r1, #12]
 800855e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008560:	079d      	lsls	r5, r3, #30
 8008562:	4606      	mov	r6, r0
 8008564:	460c      	mov	r4, r1
 8008566:	d507      	bpl.n	8008578 <__smakebuf_r+0x1c>
 8008568:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800856c:	6023      	str	r3, [r4, #0]
 800856e:	6123      	str	r3, [r4, #16]
 8008570:	2301      	movs	r3, #1
 8008572:	6163      	str	r3, [r4, #20]
 8008574:	b002      	add	sp, #8
 8008576:	bd70      	pop	{r4, r5, r6, pc}
 8008578:	ab01      	add	r3, sp, #4
 800857a:	466a      	mov	r2, sp
 800857c:	f7ff ffc8 	bl	8008510 <__swhatbuf_r>
 8008580:	9900      	ldr	r1, [sp, #0]
 8008582:	4605      	mov	r5, r0
 8008584:	4630      	mov	r0, r6
 8008586:	f7ff f963 	bl	8007850 <_malloc_r>
 800858a:	b948      	cbnz	r0, 80085a0 <__smakebuf_r+0x44>
 800858c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008590:	059a      	lsls	r2, r3, #22
 8008592:	d4ef      	bmi.n	8008574 <__smakebuf_r+0x18>
 8008594:	f023 0303 	bic.w	r3, r3, #3
 8008598:	f043 0302 	orr.w	r3, r3, #2
 800859c:	81a3      	strh	r3, [r4, #12]
 800859e:	e7e3      	b.n	8008568 <__smakebuf_r+0xc>
 80085a0:	4b0d      	ldr	r3, [pc, #52]	; (80085d8 <__smakebuf_r+0x7c>)
 80085a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80085a4:	89a3      	ldrh	r3, [r4, #12]
 80085a6:	6020      	str	r0, [r4, #0]
 80085a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085ac:	81a3      	strh	r3, [r4, #12]
 80085ae:	9b00      	ldr	r3, [sp, #0]
 80085b0:	6163      	str	r3, [r4, #20]
 80085b2:	9b01      	ldr	r3, [sp, #4]
 80085b4:	6120      	str	r0, [r4, #16]
 80085b6:	b15b      	cbz	r3, 80085d0 <__smakebuf_r+0x74>
 80085b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085bc:	4630      	mov	r0, r6
 80085be:	f000 f8d1 	bl	8008764 <_isatty_r>
 80085c2:	b128      	cbz	r0, 80085d0 <__smakebuf_r+0x74>
 80085c4:	89a3      	ldrh	r3, [r4, #12]
 80085c6:	f023 0303 	bic.w	r3, r3, #3
 80085ca:	f043 0301 	orr.w	r3, r3, #1
 80085ce:	81a3      	strh	r3, [r4, #12]
 80085d0:	89a0      	ldrh	r0, [r4, #12]
 80085d2:	4305      	orrs	r5, r0
 80085d4:	81a5      	strh	r5, [r4, #12]
 80085d6:	e7cd      	b.n	8008574 <__smakebuf_r+0x18>
 80085d8:	08008369 	.word	0x08008369

080085dc <_malloc_usable_size_r>:
 80085dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085e0:	1f18      	subs	r0, r3, #4
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	bfbc      	itt	lt
 80085e6:	580b      	ldrlt	r3, [r1, r0]
 80085e8:	18c0      	addlt	r0, r0, r3
 80085ea:	4770      	bx	lr

080085ec <_raise_r>:
 80085ec:	291f      	cmp	r1, #31
 80085ee:	b538      	push	{r3, r4, r5, lr}
 80085f0:	4604      	mov	r4, r0
 80085f2:	460d      	mov	r5, r1
 80085f4:	d904      	bls.n	8008600 <_raise_r+0x14>
 80085f6:	2316      	movs	r3, #22
 80085f8:	6003      	str	r3, [r0, #0]
 80085fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085fe:	bd38      	pop	{r3, r4, r5, pc}
 8008600:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008602:	b112      	cbz	r2, 800860a <_raise_r+0x1e>
 8008604:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008608:	b94b      	cbnz	r3, 800861e <_raise_r+0x32>
 800860a:	4620      	mov	r0, r4
 800860c:	f000 f830 	bl	8008670 <_getpid_r>
 8008610:	462a      	mov	r2, r5
 8008612:	4601      	mov	r1, r0
 8008614:	4620      	mov	r0, r4
 8008616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800861a:	f000 b817 	b.w	800864c <_kill_r>
 800861e:	2b01      	cmp	r3, #1
 8008620:	d00a      	beq.n	8008638 <_raise_r+0x4c>
 8008622:	1c59      	adds	r1, r3, #1
 8008624:	d103      	bne.n	800862e <_raise_r+0x42>
 8008626:	2316      	movs	r3, #22
 8008628:	6003      	str	r3, [r0, #0]
 800862a:	2001      	movs	r0, #1
 800862c:	e7e7      	b.n	80085fe <_raise_r+0x12>
 800862e:	2400      	movs	r4, #0
 8008630:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008634:	4628      	mov	r0, r5
 8008636:	4798      	blx	r3
 8008638:	2000      	movs	r0, #0
 800863a:	e7e0      	b.n	80085fe <_raise_r+0x12>

0800863c <raise>:
 800863c:	4b02      	ldr	r3, [pc, #8]	; (8008648 <raise+0xc>)
 800863e:	4601      	mov	r1, r0
 8008640:	6818      	ldr	r0, [r3, #0]
 8008642:	f7ff bfd3 	b.w	80085ec <_raise_r>
 8008646:	bf00      	nop
 8008648:	2000000c 	.word	0x2000000c

0800864c <_kill_r>:
 800864c:	b538      	push	{r3, r4, r5, lr}
 800864e:	4d07      	ldr	r5, [pc, #28]	; (800866c <_kill_r+0x20>)
 8008650:	2300      	movs	r3, #0
 8008652:	4604      	mov	r4, r0
 8008654:	4608      	mov	r0, r1
 8008656:	4611      	mov	r1, r2
 8008658:	602b      	str	r3, [r5, #0]
 800865a:	f7f9 fcf1 	bl	8002040 <_kill>
 800865e:	1c43      	adds	r3, r0, #1
 8008660:	d102      	bne.n	8008668 <_kill_r+0x1c>
 8008662:	682b      	ldr	r3, [r5, #0]
 8008664:	b103      	cbz	r3, 8008668 <_kill_r+0x1c>
 8008666:	6023      	str	r3, [r4, #0]
 8008668:	bd38      	pop	{r3, r4, r5, pc}
 800866a:	bf00      	nop
 800866c:	20000380 	.word	0x20000380

08008670 <_getpid_r>:
 8008670:	f7f9 bcde 	b.w	8002030 <_getpid>

08008674 <__sread>:
 8008674:	b510      	push	{r4, lr}
 8008676:	460c      	mov	r4, r1
 8008678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800867c:	f000 f894 	bl	80087a8 <_read_r>
 8008680:	2800      	cmp	r0, #0
 8008682:	bfab      	itete	ge
 8008684:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008686:	89a3      	ldrhlt	r3, [r4, #12]
 8008688:	181b      	addge	r3, r3, r0
 800868a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800868e:	bfac      	ite	ge
 8008690:	6563      	strge	r3, [r4, #84]	; 0x54
 8008692:	81a3      	strhlt	r3, [r4, #12]
 8008694:	bd10      	pop	{r4, pc}

08008696 <__swrite>:
 8008696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800869a:	461f      	mov	r7, r3
 800869c:	898b      	ldrh	r3, [r1, #12]
 800869e:	05db      	lsls	r3, r3, #23
 80086a0:	4605      	mov	r5, r0
 80086a2:	460c      	mov	r4, r1
 80086a4:	4616      	mov	r6, r2
 80086a6:	d505      	bpl.n	80086b4 <__swrite+0x1e>
 80086a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086ac:	2302      	movs	r3, #2
 80086ae:	2200      	movs	r2, #0
 80086b0:	f000 f868 	bl	8008784 <_lseek_r>
 80086b4:	89a3      	ldrh	r3, [r4, #12]
 80086b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086be:	81a3      	strh	r3, [r4, #12]
 80086c0:	4632      	mov	r2, r6
 80086c2:	463b      	mov	r3, r7
 80086c4:	4628      	mov	r0, r5
 80086c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086ca:	f000 b817 	b.w	80086fc <_write_r>

080086ce <__sseek>:
 80086ce:	b510      	push	{r4, lr}
 80086d0:	460c      	mov	r4, r1
 80086d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d6:	f000 f855 	bl	8008784 <_lseek_r>
 80086da:	1c43      	adds	r3, r0, #1
 80086dc:	89a3      	ldrh	r3, [r4, #12]
 80086de:	bf15      	itete	ne
 80086e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80086e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80086e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80086ea:	81a3      	strheq	r3, [r4, #12]
 80086ec:	bf18      	it	ne
 80086ee:	81a3      	strhne	r3, [r4, #12]
 80086f0:	bd10      	pop	{r4, pc}

080086f2 <__sclose>:
 80086f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f6:	f000 b813 	b.w	8008720 <_close_r>
	...

080086fc <_write_r>:
 80086fc:	b538      	push	{r3, r4, r5, lr}
 80086fe:	4d07      	ldr	r5, [pc, #28]	; (800871c <_write_r+0x20>)
 8008700:	4604      	mov	r4, r0
 8008702:	4608      	mov	r0, r1
 8008704:	4611      	mov	r1, r2
 8008706:	2200      	movs	r2, #0
 8008708:	602a      	str	r2, [r5, #0]
 800870a:	461a      	mov	r2, r3
 800870c:	f7f9 fccf 	bl	80020ae <_write>
 8008710:	1c43      	adds	r3, r0, #1
 8008712:	d102      	bne.n	800871a <_write_r+0x1e>
 8008714:	682b      	ldr	r3, [r5, #0]
 8008716:	b103      	cbz	r3, 800871a <_write_r+0x1e>
 8008718:	6023      	str	r3, [r4, #0]
 800871a:	bd38      	pop	{r3, r4, r5, pc}
 800871c:	20000380 	.word	0x20000380

08008720 <_close_r>:
 8008720:	b538      	push	{r3, r4, r5, lr}
 8008722:	4d06      	ldr	r5, [pc, #24]	; (800873c <_close_r+0x1c>)
 8008724:	2300      	movs	r3, #0
 8008726:	4604      	mov	r4, r0
 8008728:	4608      	mov	r0, r1
 800872a:	602b      	str	r3, [r5, #0]
 800872c:	f7f9 fcdb 	bl	80020e6 <_close>
 8008730:	1c43      	adds	r3, r0, #1
 8008732:	d102      	bne.n	800873a <_close_r+0x1a>
 8008734:	682b      	ldr	r3, [r5, #0]
 8008736:	b103      	cbz	r3, 800873a <_close_r+0x1a>
 8008738:	6023      	str	r3, [r4, #0]
 800873a:	bd38      	pop	{r3, r4, r5, pc}
 800873c:	20000380 	.word	0x20000380

08008740 <_fstat_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	4d07      	ldr	r5, [pc, #28]	; (8008760 <_fstat_r+0x20>)
 8008744:	2300      	movs	r3, #0
 8008746:	4604      	mov	r4, r0
 8008748:	4608      	mov	r0, r1
 800874a:	4611      	mov	r1, r2
 800874c:	602b      	str	r3, [r5, #0]
 800874e:	f7f9 fcd6 	bl	80020fe <_fstat>
 8008752:	1c43      	adds	r3, r0, #1
 8008754:	d102      	bne.n	800875c <_fstat_r+0x1c>
 8008756:	682b      	ldr	r3, [r5, #0]
 8008758:	b103      	cbz	r3, 800875c <_fstat_r+0x1c>
 800875a:	6023      	str	r3, [r4, #0]
 800875c:	bd38      	pop	{r3, r4, r5, pc}
 800875e:	bf00      	nop
 8008760:	20000380 	.word	0x20000380

08008764 <_isatty_r>:
 8008764:	b538      	push	{r3, r4, r5, lr}
 8008766:	4d06      	ldr	r5, [pc, #24]	; (8008780 <_isatty_r+0x1c>)
 8008768:	2300      	movs	r3, #0
 800876a:	4604      	mov	r4, r0
 800876c:	4608      	mov	r0, r1
 800876e:	602b      	str	r3, [r5, #0]
 8008770:	f7f9 fcd5 	bl	800211e <_isatty>
 8008774:	1c43      	adds	r3, r0, #1
 8008776:	d102      	bne.n	800877e <_isatty_r+0x1a>
 8008778:	682b      	ldr	r3, [r5, #0]
 800877a:	b103      	cbz	r3, 800877e <_isatty_r+0x1a>
 800877c:	6023      	str	r3, [r4, #0]
 800877e:	bd38      	pop	{r3, r4, r5, pc}
 8008780:	20000380 	.word	0x20000380

08008784 <_lseek_r>:
 8008784:	b538      	push	{r3, r4, r5, lr}
 8008786:	4d07      	ldr	r5, [pc, #28]	; (80087a4 <_lseek_r+0x20>)
 8008788:	4604      	mov	r4, r0
 800878a:	4608      	mov	r0, r1
 800878c:	4611      	mov	r1, r2
 800878e:	2200      	movs	r2, #0
 8008790:	602a      	str	r2, [r5, #0]
 8008792:	461a      	mov	r2, r3
 8008794:	f7f9 fcce 	bl	8002134 <_lseek>
 8008798:	1c43      	adds	r3, r0, #1
 800879a:	d102      	bne.n	80087a2 <_lseek_r+0x1e>
 800879c:	682b      	ldr	r3, [r5, #0]
 800879e:	b103      	cbz	r3, 80087a2 <_lseek_r+0x1e>
 80087a0:	6023      	str	r3, [r4, #0]
 80087a2:	bd38      	pop	{r3, r4, r5, pc}
 80087a4:	20000380 	.word	0x20000380

080087a8 <_read_r>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	4d07      	ldr	r5, [pc, #28]	; (80087c8 <_read_r+0x20>)
 80087ac:	4604      	mov	r4, r0
 80087ae:	4608      	mov	r0, r1
 80087b0:	4611      	mov	r1, r2
 80087b2:	2200      	movs	r2, #0
 80087b4:	602a      	str	r2, [r5, #0]
 80087b6:	461a      	mov	r2, r3
 80087b8:	f7f9 fc5c 	bl	8002074 <_read>
 80087bc:	1c43      	adds	r3, r0, #1
 80087be:	d102      	bne.n	80087c6 <_read_r+0x1e>
 80087c0:	682b      	ldr	r3, [r5, #0]
 80087c2:	b103      	cbz	r3, 80087c6 <_read_r+0x1e>
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	bd38      	pop	{r3, r4, r5, pc}
 80087c8:	20000380 	.word	0x20000380

080087cc <_init>:
 80087cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ce:	bf00      	nop
 80087d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087d2:	bc08      	pop	{r3}
 80087d4:	469e      	mov	lr, r3
 80087d6:	4770      	bx	lr

080087d8 <_fini>:
 80087d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087da:	bf00      	nop
 80087dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087de:	bc08      	pop	{r3}
 80087e0:	469e      	mov	lr, r3
 80087e2:	4770      	bx	lr
