
FinalAPPSCode_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008424  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  080085f8  080085f8  000185f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a24  08008a24  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008a24  08008a24  00018a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a2c  08008a2c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a2c  08008a2c  00018a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a30  08008a30  00018a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  200001dc  08008c10  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  08008c10  000203b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d71f  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002063  00000000  00000000  0002d92b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002f990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  00030480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000239b1  00000000  00000000  00030ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7a3  00000000  00000000  00054859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d977d  00000000  00000000  00061ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013b779  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e88  00000000  00000000  0013b7cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080085dc 	.word	0x080085dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	080085dc 	.word	0x080085dc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <Store_EMERGENCY_Msg>:
    EMERGENCY_APPS_EMERGENCY_TYPE apps_emergency;
    EMERGENCY_SW_EMERGENCY_TYPE sw_emergency;
} EMERGENCY_MESSAGE_TYPE;
EMERGENCY_MESSAGE_TYPE EMERGENCY_MESSAGE;

void Store_EMERGENCY_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <Store_EMERGENCY_Msg+0x1a>
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d006      	beq.n	8000fb2 <Store_EMERGENCY_Msg+0x26>
            break;
        case EMERGENCY_SW_EMERGENCY:
            memcpy(&(EMERGENCY_MESSAGE.sw_emergency), RxData, data_length);
            break;
    }
}
 8000fa4:	e00b      	b.n	8000fbe <Store_EMERGENCY_Msg+0x32>
            memcpy(&(EMERGENCY_MESSAGE.apps_emergency), RxData, data_length);
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	68b9      	ldr	r1, [r7, #8]
 8000faa:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <Store_EMERGENCY_Msg+0x3c>)
 8000fac:	f004 fc2c 	bl	8005808 <memcpy>
            break;
 8000fb0:	e005      	b.n	8000fbe <Store_EMERGENCY_Msg+0x32>
            memcpy(&(EMERGENCY_MESSAGE.sw_emergency), RxData, data_length);
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	68b9      	ldr	r1, [r7, #8]
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <Store_EMERGENCY_Msg+0x40>)
 8000fb8:	f004 fc26 	bl	8005808 <memcpy>
            break;
 8000fbc:	bf00      	nop
}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200001f8 	.word	0x200001f8
 8000fcc:	200001f9 	.word	0x200001f9

08000fd0 <Store_BMS_Msg>:
    BMS_TEMPERATURE_TYPE temperature;
    BMS_VOLTAGE_TYPE voltage;
} BMS_MESSAGE_TYPE;
BMS_MESSAGE_TYPE BMS_MESSAGE;

void Store_BMS_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2b10      	cmp	r3, #16
 8000fe0:	d003      	beq.n	8000fea <Store_BMS_Msg+0x1a>
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2b11      	cmp	r3, #17
 8000fe6:	d006      	beq.n	8000ff6 <Store_BMS_Msg+0x26>
            break;
        case BMS_VOLTAGE:
            memcpy(&(BMS_MESSAGE.voltage), RxData, data_length);
            break;
    }
}
 8000fe8:	e00b      	b.n	8001002 <Store_BMS_Msg+0x32>
            memcpy(&(BMS_MESSAGE.temperature), RxData, data_length);
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	4807      	ldr	r0, [pc, #28]	; (800100c <Store_BMS_Msg+0x3c>)
 8000ff0:	f004 fc0a 	bl	8005808 <memcpy>
            break;
 8000ff4:	e005      	b.n	8001002 <Store_BMS_Msg+0x32>
            memcpy(&(BMS_MESSAGE.voltage), RxData, data_length);
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <Store_BMS_Msg+0x40>)
 8000ffc:	f004 fc04 	bl	8005808 <memcpy>
            break;
 8001000:	bf00      	nop
}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200001fc 	.word	0x200001fc
 8001010:	20000200 	.word	0x20000200

08001014 <Store_SW_Msg>:
    SW_ACUMULATOR_FANS_TYPE acumulator_fans;
    SW_EXTRA_TYPE extra;
} SW_MESSAGE_TYPE;
SW_MESSAGE_TYPE SW_MESSAGE;

void Store_SW_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	3b20      	subs	r3, #32
 8001024:	2b03      	cmp	r3, #3
 8001026:	d823      	bhi.n	8001070 <Store_SW_Msg+0x5c>
 8001028:	a201      	add	r2, pc, #4	; (adr r2, 8001030 <Store_SW_Msg+0x1c>)
 800102a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102e:	bf00      	nop
 8001030:	08001041 	.word	0x08001041
 8001034:	0800104d 	.word	0x0800104d
 8001038:	08001059 	.word	0x08001059
 800103c:	08001065 	.word	0x08001065
        case SW_READY_TO_DRIVE:
            memcpy(&(SW_MESSAGE.ready_to_drive), RxData, data_length);
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	68b9      	ldr	r1, [r7, #8]
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <Store_SW_Msg+0x64>)
 8001046:	f004 fbdf 	bl	8005808 <memcpy>
            break;
 800104a:	e011      	b.n	8001070 <Store_SW_Msg+0x5c>
        case SW_COOLANT_PUMP:
            memcpy(&(SW_MESSAGE.coolant_pump), RxData, data_length);
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	480a      	ldr	r0, [pc, #40]	; (800107c <Store_SW_Msg+0x68>)
 8001052:	f004 fbd9 	bl	8005808 <memcpy>
            break;
 8001056:	e00b      	b.n	8001070 <Store_SW_Msg+0x5c>
        case SW_ACUMULATOR_FANS:
            memcpy(&(SW_MESSAGE.acumulator_fans), RxData, data_length);
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	68b9      	ldr	r1, [r7, #8]
 800105c:	4808      	ldr	r0, [pc, #32]	; (8001080 <Store_SW_Msg+0x6c>)
 800105e:	f004 fbd3 	bl	8005808 <memcpy>
            break;
 8001062:	e005      	b.n	8001070 <Store_SW_Msg+0x5c>
        case SW_EXTRA:
            memcpy(&(SW_MESSAGE.extra), RxData, data_length);
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	68b9      	ldr	r1, [r7, #8]
 8001068:	4806      	ldr	r0, [pc, #24]	; (8001084 <Store_SW_Msg+0x70>)
 800106a:	f004 fbcd 	bl	8005808 <memcpy>
            break;
 800106e:	bf00      	nop
    }
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000204 	.word	0x20000204
 800107c:	20000205 	.word	0x20000205
 8001080:	20000206 	.word	0x20000206
 8001084:	20000207 	.word	0x20000207

08001088 <Store_APPS_Msg>:
    APPS_BRAKE_PEDAL_TYPE brake_pedal;
    APPS_TORQUE_TYPE torque;
} APPS_MESSAGE_TYPE;
APPS_MESSAGE_TYPE APPS_MESSAGE;

void Store_APPS_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	3b30      	subs	r3, #48	; 0x30
 8001098:	2b03      	cmp	r3, #3
 800109a:	d823      	bhi.n	80010e4 <Store_APPS_Msg+0x5c>
 800109c:	a201      	add	r2, pc, #4	; (adr r2, 80010a4 <Store_APPS_Msg+0x1c>)
 800109e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a2:	bf00      	nop
 80010a4:	080010b5 	.word	0x080010b5
 80010a8:	080010c1 	.word	0x080010c1
 80010ac:	080010cd 	.word	0x080010cd
 80010b0:	080010d9 	.word	0x080010d9
        case APPS_ACCELERATOR1_PEDAL:
            memcpy(&(APPS_MESSAGE.accelerator1_pedal), RxData, data_length);
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	68b9      	ldr	r1, [r7, #8]
 80010b8:	480c      	ldr	r0, [pc, #48]	; (80010ec <Store_APPS_Msg+0x64>)
 80010ba:	f004 fba5 	bl	8005808 <memcpy>
            break;
 80010be:	e011      	b.n	80010e4 <Store_APPS_Msg+0x5c>
        case APPS_ACCELERATOR2_PEDAL:
            memcpy(&(APPS_MESSAGE.accelerator2_pedal), RxData, data_length);
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	68b9      	ldr	r1, [r7, #8]
 80010c4:	480a      	ldr	r0, [pc, #40]	; (80010f0 <Store_APPS_Msg+0x68>)
 80010c6:	f004 fb9f 	bl	8005808 <memcpy>
            break;
 80010ca:	e00b      	b.n	80010e4 <Store_APPS_Msg+0x5c>
        case APPS_BRAKE_PEDAL:
            memcpy(&(APPS_MESSAGE.brake_pedal), RxData, data_length);
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	4808      	ldr	r0, [pc, #32]	; (80010f4 <Store_APPS_Msg+0x6c>)
 80010d2:	f004 fb99 	bl	8005808 <memcpy>
            break;
 80010d6:	e005      	b.n	80010e4 <Store_APPS_Msg+0x5c>
        case APPS_TORQUE:
            memcpy(&(APPS_MESSAGE.torque), RxData, data_length);
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	68b9      	ldr	r1, [r7, #8]
 80010dc:	4806      	ldr	r0, [pc, #24]	; (80010f8 <Store_APPS_Msg+0x70>)
 80010de:	f004 fb93 	bl	8005808 <memcpy>
            break;
 80010e2:	bf00      	nop
    }
}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000208 	.word	0x20000208
 80010f0:	2000020c 	.word	0x2000020c
 80010f4:	20000210 	.word	0x20000210
 80010f8:	20000214 	.word	0x20000214

080010fc <assign_filter_array>:
const FilterArrayLength RMS_RX_NUM = 1;

const AddressIdType IVPDB_RX_ID[] = {SW_ID};
const FilterArrayLength IVPDB_RX_NUM = 1;

const AddressIdType* assign_filter_array(AddressIdType NODE_ID) {
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	2b04      	cmp	r3, #4
 800110a:	d815      	bhi.n	8001138 <assign_filter_array+0x3c>
 800110c:	a201      	add	r2, pc, #4	; (adr r2, 8001114 <assign_filter_array+0x18>)
 800110e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001112:	bf00      	nop
 8001114:	08001129 	.word	0x08001129
 8001118:	08001139 	.word	0x08001139
 800111c:	0800112d 	.word	0x0800112d
 8001120:	08001131 	.word	0x08001131
 8001124:	08001135 	.word	0x08001135
        case BMS_ID:
            return BMS_RX_ID;
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <assign_filter_array+0x4c>)
 800112a:	e006      	b.n	800113a <assign_filter_array+0x3e>
            break;
        case APPS_ID:
            return APPS_RX_ID;
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <assign_filter_array+0x50>)
 800112e:	e004      	b.n	800113a <assign_filter_array+0x3e>
            break;
        case RMS_ID:
            return RMS_RX_ID;
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <assign_filter_array+0x54>)
 8001132:	e002      	b.n	800113a <assign_filter_array+0x3e>
            break;
        case IVPDB_ID:
            return IVPDB_RX_ID;
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <assign_filter_array+0x58>)
 8001136:	e000      	b.n	800113a <assign_filter_array+0x3e>
            break;
    }
    return 0;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	08008618 	.word	0x08008618
 800114c:	0800861c 	.word	0x0800861c
 8001150:	08008624 	.word	0x08008624
 8001154:	08008628 	.word	0x08008628

08001158 <assign_filter_array_legnth>:

FilterArrayLength assign_filter_array_legnth(AddressIdType NODE_ID) {
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3b01      	subs	r3, #1
 8001164:	2b04      	cmp	r3, #4
 8001166:	d815      	bhi.n	8001194 <assign_filter_array_legnth+0x3c>
 8001168:	a201      	add	r2, pc, #4	; (adr r2, 8001170 <assign_filter_array_legnth+0x18>)
 800116a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116e:	bf00      	nop
 8001170:	08001185 	.word	0x08001185
 8001174:	08001195 	.word	0x08001195
 8001178:	08001189 	.word	0x08001189
 800117c:	0800118d 	.word	0x0800118d
 8001180:	08001191 	.word	0x08001191
        case BMS_ID:
            return BMS_RX_NUM;
 8001184:	2301      	movs	r3, #1
 8001186:	e006      	b.n	8001196 <assign_filter_array_legnth+0x3e>
            break;
        case APPS_ID:
            return APPS_RX_NUM;
 8001188:	2302      	movs	r3, #2
 800118a:	e004      	b.n	8001196 <assign_filter_array_legnth+0x3e>
            break;
        case RMS_ID:
            return RMS_RX_NUM;
 800118c:	2301      	movs	r3, #1
 800118e:	e002      	b.n	8001196 <assign_filter_array_legnth+0x3e>
            break;
        case IVPDB_ID:
            return IVPDB_RX_NUM;
 8001190:	2301      	movs	r3, #1
 8001192:	e000      	b.n	8001196 <assign_filter_array_legnth+0x3e>
            break;
    }
    return 0;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop

080011a4 <store_msg>:

void store_msg(CAN_RxHeaderTypeDef *pHeader, uint8_t RxData[]) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
    switch(pHeader->StdId >> BITS_PER_MESSAGE_TYPE) {
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	091b      	lsrs	r3, r3, #4
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d82f      	bhi.n	8001218 <store_msg+0x74>
 80011b8:	a201      	add	r2, pc, #4	; (adr r2, 80011c0 <store_msg+0x1c>)
 80011ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011be:	bf00      	nop
 80011c0:	080011d1 	.word	0x080011d1
 80011c4:	080011e3 	.word	0x080011e3
 80011c8:	080011f5 	.word	0x080011f5
 80011cc:	08001207 	.word	0x08001207
        case EMERGENCY_ID:
            Store_EMERGENCY_Msg(pHeader->StdId, RxData, pHeader->DLC);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	461a      	mov	r2, r3
 80011da:	6839      	ldr	r1, [r7, #0]
 80011dc:	f7ff fed6 	bl	8000f8c <Store_EMERGENCY_Msg>
            break;
 80011e0:	e01a      	b.n	8001218 <store_msg+0x74>
        case BMS_ID:
            Store_BMS_Msg(pHeader->StdId, RxData, pHeader->DLC);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	461a      	mov	r2, r3
 80011ec:	6839      	ldr	r1, [r7, #0]
 80011ee:	f7ff feef 	bl	8000fd0 <Store_BMS_Msg>
            break;
 80011f2:	e011      	b.n	8001218 <store_msg+0x74>
        case SW_ID:
            Store_SW_Msg(pHeader->StdId, RxData, pHeader->DLC);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	461a      	mov	r2, r3
 80011fe:	6839      	ldr	r1, [r7, #0]
 8001200:	f7ff ff08 	bl	8001014 <Store_SW_Msg>
            break;
 8001204:	e008      	b.n	8001218 <store_msg+0x74>
        case APPS_ID:
            Store_APPS_Msg(pHeader->StdId, RxData, pHeader->DLC);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6818      	ldr	r0, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	461a      	mov	r2, r3
 8001210:	6839      	ldr	r1, [r7, #0]
 8001212:	f7ff ff39 	bl	8001088 <Store_APPS_Msg>
            break;
 8001216:	bf00      	nop
    }
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <FEB_CAN_Filter_Config>:
uint8_t TxData[8];
uint8_t RxData[8];
uint32_t TxMailbox;
uint8_t CAN_Flag = 0;

void FEB_CAN_Filter_Config(CAN_HandleTypeDef* hcan, const AddressIdType* filter_array, uint8_t filter_array_len, uint8_t FIFO_Assignment) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b090      	sub	sp, #64	; 0x40
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	4611      	mov	r1, r2
 800122c:	461a      	mov	r2, r3
 800122e:	460b      	mov	r3, r1
 8001230:	71fb      	strb	r3, [r7, #7]
 8001232:	4613      	mov	r3, r2
 8001234:	71bb      	strb	r3, [r7, #6]
	for (int i = 0; i < filter_array_len; i++) {
 8001236:	2300      	movs	r3, #0
 8001238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800123a:	e027      	b.n	800128c <FEB_CAN_Filter_Config+0x6c>
		CAN_FilterTypeDef filter_config;

		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 800123c:	2301      	movs	r3, #1
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
		filter_config.FilterBank = i;
 8001240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.FilterFIFOAssignment = FIFO_Assignment;
 8001244:	79bb      	ldrb	r3, [r7, #6]
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.FilterIdHigh = filter_array[i] << (16 - BITS_PER_ID);
 8001248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	4413      	add	r3, r2
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	025b      	lsls	r3, r3, #9
 8001254:	617b      	str	r3, [r7, #20]
		filter_config.FilterIdLow = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	61bb      	str	r3, [r7, #24]
		filter_config.FilterMaskIdHigh = 0x7F << (16 - BITS_PER_ID);
 800125a:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 800125e:	61fb      	str	r3, [r7, #28]
		filter_config.FilterMaskIdLow = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8001264:	2300      	movs	r3, #0
 8001266:	62fb      	str	r3, [r7, #44]	; 0x2c
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8001268:	2301      	movs	r3, #1
 800126a:	633b      	str	r3, [r7, #48]	; 0x30
		filter_config.SlaveStartFilterBank = 27;
 800126c:	231b      	movs	r3, #27
 800126e:	63bb      	str	r3, [r7, #56]	; 0x38

		if(HAL_CAN_ConfigFilter(hcan, &filter_config))
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f001 fd4a 	bl	8002d10 <HAL_CAN_ConfigFilter>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <FEB_CAN_Filter_Config+0x66>
		{
		  Error_Handler();
 8001282:	f000 fd01 	bl	8001c88 <Error_Handler>
	for (int i = 0; i < filter_array_len; i++) {
 8001286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001288:	3301      	adds	r3, #1
 800128a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001290:	429a      	cmp	r2, r3
 8001292:	dbd3      	blt.n	800123c <FEB_CAN_Filter_Config+0x1c>
		}
	}
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3740      	adds	r7, #64	; 0x40
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <FEB_CAN_Init>:

void FEB_CAN_Init(CAN_HandleTypeDef* hcan, uint32_t NODE_ID) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
	// Select Rx FIFO
	uint8_t FIFO_Assignment;
	uint32_t FIFO_Interrupt;
	if (hcan->Instance == CAN1) {
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a1c      	ldr	r2, [pc, #112]	; (8001320 <FEB_CAN_Init+0x80>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d104      	bne.n	80012be <FEB_CAN_Init+0x1e>
		FIFO_Assignment = CAN_RX_FIFO0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO0_MSG_PENDING;
 80012b8:	2302      	movs	r3, #2
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	e008      	b.n	80012d0 <FEB_CAN_Init+0x30>
	} else if (hcan->Instance == CAN2) {
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a18      	ldr	r2, [pc, #96]	; (8001324 <FEB_CAN_Init+0x84>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d103      	bne.n	80012d0 <FEB_CAN_Init+0x30>
		FIFO_Assignment = CAN_RX_FIFO1;
 80012c8:	2301      	movs	r3, #1
 80012ca:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO1_MSG_PENDING;
 80012cc:	2310      	movs	r3, #16
 80012ce:	613b      	str	r3, [r7, #16]
	}

	// Initialize transmission header
	TxHeader.IDE = CAN_ID_STD;
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <FEB_CAN_Init+0x88>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <FEB_CAN_Init+0x88>)
 80012d8:	2200      	movs	r2, #0
 80012da:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <FEB_CAN_Init+0x88>)
 80012de:	2200      	movs	r2, #0
 80012e0:	751a      	strb	r2, [r3, #20]

	// Initialize CAN filters
	const AddressIdType* filter_array;
	FilterArrayLength filter_num;
	filter_array  = assign_filter_array(NODE_ID);
 80012e2:	6838      	ldr	r0, [r7, #0]
 80012e4:	f7ff ff0a 	bl	80010fc <assign_filter_array>
 80012e8:	60f8      	str	r0, [r7, #12]
	filter_num = assign_filter_array_legnth(NODE_ID);
 80012ea:	6838      	ldr	r0, [r7, #0]
 80012ec:	f7ff ff34 	bl	8001158 <assign_filter_array_legnth>
 80012f0:	4603      	mov	r3, r0
 80012f2:	72fb      	strb	r3, [r7, #11]
	FEB_CAN_Filter_Config(hcan, filter_array, filter_num, FIFO_Assignment);
 80012f4:	7dfb      	ldrb	r3, [r7, #23]
 80012f6:	7afa      	ldrb	r2, [r7, #11]
 80012f8:	68f9      	ldr	r1, [r7, #12]
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ff90 	bl	8001220 <FEB_CAN_Filter_Config>

	// Start CAN peripheral
	if (HAL_CAN_Start(hcan) != HAL_OK) {
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f001 fde5 	bl	8002ed0 <HAL_CAN_Start>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <FEB_CAN_Init+0x70>
	  Error_Handler();
 800130c:	f000 fcbc 	bl	8001c88 <Error_Handler>
	}

	// Activate receive interrupt
	HAL_CAN_ActivateNotification(hcan, FIFO_Interrupt);
 8001310:	6939      	ldr	r1, [r7, #16]
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f002 f842 	bl	800339c <HAL_CAN_ActivateNotification>

}
 8001318:	bf00      	nop
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40006400 	.word	0x40006400
 8001324:	40006800 	.word	0x40006800
 8001328:	20000218 	.word	0x20000218

0800132c <FEB_CAN_Receive>:

void FEB_CAN_Receive(CAN_HandleTypeDef *hcan, uint32_t CAN_RX_FIFO) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO, &RxHeader, RxData) != HAL_OK) {
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <FEB_CAN_Receive+0x30>)
 8001338:	4a09      	ldr	r2, [pc, #36]	; (8001360 <FEB_CAN_Receive+0x34>)
 800133a:	6839      	ldr	r1, [r7, #0]
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f001 ff1b 	bl	8003178 <HAL_CAN_GetRxMessage>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <FEB_CAN_Receive+0x20>
		Error_Handler();
 8001348:	f000 fc9e 	bl	8001c88 <Error_Handler>
	}
	store_msg(&RxHeader, RxData);
 800134c:	4903      	ldr	r1, [pc, #12]	; (800135c <FEB_CAN_Receive+0x30>)
 800134e:	4804      	ldr	r0, [pc, #16]	; (8001360 <FEB_CAN_Receive+0x34>)
 8001350:	f7ff ff28 	bl	80011a4 <store_msg>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000254 	.word	0x20000254
 8001360:	20000230 	.word	0x20000230

08001364 <FEB_CAN_Transmit>:

void FEB_CAN_Transmit(CAN_HandleTypeDef* hcan, AddressIdType Msg_ID, void* pData, uint8_t size) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
 8001370:	70fb      	strb	r3, [r7, #3]
	// Copy data to Tx buffer
	memcpy(TxData, pData, size);
 8001372:	78fb      	ldrb	r3, [r7, #3]
 8001374:	461a      	mov	r2, r3
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	480f      	ldr	r0, [pc, #60]	; (80013b8 <FEB_CAN_Transmit+0x54>)
 800137a:	f004 fa45 	bl	8005808 <memcpy>

	// Update Tx header
	TxHeader.StdId = Msg_ID;
 800137e:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <FEB_CAN_Transmit+0x58>)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	6013      	str	r3, [r2, #0]
	TxHeader.DLC = size;
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	4a0d      	ldr	r2, [pc, #52]	; (80013bc <FEB_CAN_Transmit+0x58>)
 8001388:	6113      	str	r3, [r2, #16]

	// Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(hcan) == 0) {}
 800138a:	bf00      	nop
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f001 febe 	bl	800310e <HAL_CAN_GetTxMailboxesFreeLevel>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f9      	beq.n	800138c <FEB_CAN_Transmit+0x28>

	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <FEB_CAN_Transmit+0x5c>)
 800139a:	4a07      	ldr	r2, [pc, #28]	; (80013b8 <FEB_CAN_Transmit+0x54>)
 800139c:	4907      	ldr	r1, [pc, #28]	; (80013bc <FEB_CAN_Transmit+0x58>)
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f001 fdda 	bl	8002f58 <HAL_CAN_AddTxMessage>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <FEB_CAN_Transmit+0x4a>
	{
	  Error_Handler();
 80013aa:	f000 fc6d 	bl	8001c88 <Error_Handler>
	}
}
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000024c 	.word	0x2000024c
 80013bc:	20000218 	.word	0x20000218
 80013c0:	2000025c 	.word	0x2000025c

080013c4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	FEB_CAN_Receive(hcan, CAN_RX_FIFO0);
 80013cc:	2100      	movs	r1, #0
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ffac 	bl	800132c <FEB_CAN_Receive>
	CAN_Flag = 1;
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000260 	.word	0x20000260

080013e8 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	FEB_CAN_Receive(hcan, CAN_RX_FIFO1);
 80013f0:	2101      	movs	r1, #1
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ff9a 	bl	800132c <FEB_CAN_Receive>
	CAN_Flag = 1;
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	701a      	strb	r2, [r3, #0]
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000260 	.word	0x20000260
 800140c:	00000000 	.word	0x00000000

08001410 <FEB_Normalized_Acc_Pedals>:

//float getPedal(uint32_t variable){
//	return (float)variable*3.3/4096;
//}

float FEB_Normalized_Acc_Pedals(){
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
	// raw ADC readings of the two acc pedal sensors
	uint16_t acc_pedal_1 = buffer[2];
 8001416:	4b78      	ldr	r3, [pc, #480]	; (80015f8 <FEB_Normalized_Acc_Pedals+0x1e8>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	81fb      	strh	r3, [r7, #14]
	uint16_t acc_pedal_2 = buffer[3];
 800141c:	4b76      	ldr	r3, [pc, #472]	; (80015f8 <FEB_Normalized_Acc_Pedals+0x1e8>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	81bb      	strh	r3, [r7, #12]

	// check implausibility for shorting
	if (acc_pedal_1 < Sensor_Min || acc_pedal_1 > Sensor_Max
 8001422:	f240 1299 	movw	r2, #409	; 0x199
 8001426:	89fb      	ldrh	r3, [r7, #14]
 8001428:	4293      	cmp	r3, r2
 800142a:	d319      	bcc.n	8001460 <FEB_Normalized_Acc_Pedals+0x50>
 800142c:	f640 6265 	movw	r2, #3685	; 0xe65
 8001430:	89fb      	ldrh	r3, [r7, #14]
 8001432:	4293      	cmp	r3, r2
 8001434:	d814      	bhi.n	8001460 <FEB_Normalized_Acc_Pedals+0x50>
			|| acc_pedal_2 < Sensor_Min || acc_pedal_2 > Sensor_Max
 8001436:	f240 1299 	movw	r2, #409	; 0x199
 800143a:	89bb      	ldrh	r3, [r7, #12]
 800143c:	4293      	cmp	r3, r2
 800143e:	d30f      	bcc.n	8001460 <FEB_Normalized_Acc_Pedals+0x50>
 8001440:	f640 6265 	movw	r2, #3685	; 0xe65
 8001444:	89bb      	ldrh	r3, [r7, #12]
 8001446:	4293      	cmp	r3, r2
 8001448:	d80a      	bhi.n	8001460 <FEB_Normalized_Acc_Pedals+0x50>
			|| abs(acc_pedal_1 - acc_pedal_2) < 100) {
 800144a:	89fa      	ldrh	r2, [r7, #14]
 800144c:	89bb      	ldrh	r3, [r7, #12]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8001454:	db0a      	blt.n	800146c <FEB_Normalized_Acc_Pedals+0x5c>
 8001456:	89fa      	ldrh	r2, [r7, #14]
 8001458:	89bb      	ldrh	r3, [r7, #12]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b63      	cmp	r3, #99	; 0x63
 800145e:	dc05      	bgt.n	800146c <FEB_Normalized_Acc_Pedals+0x5c>
		isImpl = true;
 8001460:	4b66      	ldr	r3, [pc, #408]	; (80015fc <FEB_Normalized_Acc_Pedals+0x1ec>)
 8001462:	2201      	movs	r2, #1
 8001464:	701a      	strb	r2, [r3, #0]
		return 0.0;
 8001466:	f04f 0300 	mov.w	r3, #0
 800146a:	e0a9      	b.n	80015c0 <FEB_Normalized_Acc_Pedals+0x1b0>
	}

	//convert to % travel
	// sensor 1 has positive slope
	float ped1_normalized = (acc_pedal_1 - ACC_PEDAL_1_START)/ (ACC_PEDAL_1_END - ACC_PEDAL_1_START);
 800146c:	89fb      	ldrh	r3, [r7, #14]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f878 	bl	8000564 <__aeabi_i2d>
 8001474:	a356      	add	r3, pc, #344	; (adr r3, 80015d0 <FEB_Normalized_Acc_Pedals+0x1c0>)
 8001476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147a:	f7fe ff25 	bl	80002c8 <__aeabi_dsub>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	a354      	add	r3, pc, #336	; (adr r3, 80015d8 <FEB_Normalized_Acc_Pedals+0x1c8>)
 8001488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148c:	f7ff f9fe 	bl	800088c <__aeabi_ddiv>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4610      	mov	r0, r2
 8001496:	4619      	mov	r1, r3
 8001498:	f7ff fba6 	bl	8000be8 <__aeabi_d2f>
 800149c:	4603      	mov	r3, r0
 800149e:	60bb      	str	r3, [r7, #8]
	// sensor 2 has negative slope
	float ped2_normalized = (acc_pedal_2 - ACC_PEDAL_2_START) / (ACC_PEDAL_2_END - ACC_PEDAL_2_START);
 80014a0:	89bb      	ldrh	r3, [r7, #12]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff f85e 	bl	8000564 <__aeabi_i2d>
 80014a8:	a34d      	add	r3, pc, #308	; (adr r3, 80015e0 <FEB_Normalized_Acc_Pedals+0x1d0>)
 80014aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ae:	f7fe ff0b 	bl	80002c8 <__aeabi_dsub>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4610      	mov	r0, r2
 80014b8:	4619      	mov	r1, r3
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	4b50      	ldr	r3, [pc, #320]	; (8001600 <FEB_Normalized_Acc_Pedals+0x1f0>)
 80014c0:	f7ff f9e4 	bl	800088c <__aeabi_ddiv>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4610      	mov	r0, r2
 80014ca:	4619      	mov	r1, r3
 80014cc:	f7ff fb8c 	bl	8000be8 <__aeabi_d2f>
 80014d0:	4603      	mov	r3, r0
 80014d2:	607b      	str	r3, [r7, #4]

	// sensor measurements mismatch by more than 10%
	if(abs(ped1_normalized - ped2_normalized) > 0.1 ){
 80014d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80014d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014e4:	ee17 3a90 	vmov	r3, s15
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	bfb8      	it	lt
 80014ec:	425b      	neglt	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	dd05      	ble.n	80014fe <FEB_Normalized_Acc_Pedals+0xee>
		isImpl = true;
 80014f2:	4b42      	ldr	r3, [pc, #264]	; (80015fc <FEB_Normalized_Acc_Pedals+0x1ec>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	701a      	strb	r2, [r3, #0]
		return 0.0;
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	e060      	b.n	80015c0 <FEB_Normalized_Acc_Pedals+0x1b0>
	}

	float final_normalized = 0.5*(ped1_normalized + ped2_normalized);
 80014fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8001502:	edd7 7a01 	vldr	s15, [r7, #4]
 8001506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800150e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001512:	edc7 7a00 	vstr	s15, [r7]

	// Implausiblity check if both pedals are stepped
	if (normalized_brake > 0.1 && normalized_acc > 0.25) {
 8001516:	4b3b      	ldr	r3, [pc, #236]	; (8001604 <FEB_Normalized_Acc_Pedals+0x1f4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff f834 	bl	8000588 <__aeabi_f2d>
 8001520:	a331      	add	r3, pc, #196	; (adr r3, 80015e8 <FEB_Normalized_Acc_Pedals+0x1d8>)
 8001522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001526:	f7ff fb17 	bl	8000b58 <__aeabi_dcmpgt>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00c      	beq.n	800154a <FEB_Normalized_Acc_Pedals+0x13a>
 8001530:	4b35      	ldr	r3, [pc, #212]	; (8001608 <FEB_Normalized_Acc_Pedals+0x1f8>)
 8001532:	edd3 7a00 	vldr	s15, [r3]
 8001536:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800153a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800153e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001542:	dd02      	ble.n	800154a <FEB_Normalized_Acc_Pedals+0x13a>
		isImpl = true;
 8001544:	4b2d      	ldr	r3, [pc, #180]	; (80015fc <FEB_Normalized_Acc_Pedals+0x1ec>)
 8001546:	2201      	movs	r2, #1
 8001548:	701a      	strb	r2, [r3, #0]
	}

	// recover from implausibility if acc pedal is not 5% less
	if (final_normalized < 0.05 && isImpl) {
 800154a:	6838      	ldr	r0, [r7, #0]
 800154c:	f7ff f81c 	bl	8000588 <__aeabi_f2d>
 8001550:	a327      	add	r3, pc, #156	; (adr r3, 80015f0 <FEB_Normalized_Acc_Pedals+0x1e0>)
 8001552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001556:	f7ff fae1 	bl	8000b1c <__aeabi_dcmplt>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <FEB_Normalized_Acc_Pedals+0x15e>
 8001560:	4b26      	ldr	r3, [pc, #152]	; (80015fc <FEB_Normalized_Acc_Pedals+0x1ec>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d002      	beq.n	800156e <FEB_Normalized_Acc_Pedals+0x15e>
		isImpl = false;
 8001568:	4b24      	ldr	r3, [pc, #144]	; (80015fc <FEB_Normalized_Acc_Pedals+0x1ec>)
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
	}

	if (!isImpl) {
 800156e:	4b23      	ldr	r3, [pc, #140]	; (80015fc <FEB_Normalized_Acc_Pedals+0x1ec>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	f083 0301 	eor.w	r3, r3, #1
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d01f      	beq.n	80015bc <FEB_Normalized_Acc_Pedals+0x1ac>
		final_normalized = final_normalized > 1 ? 1 : final_normalized;
 800157c:	edd7 7a00 	vldr	s15, [r7]
 8001580:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001584:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158c:	dd02      	ble.n	8001594 <FEB_Normalized_Acc_Pedals+0x184>
 800158e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001592:	e000      	b.n	8001596 <FEB_Normalized_Acc_Pedals+0x186>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	603b      	str	r3, [r7, #0]
		final_normalized = final_normalized < 0.05 ? 0 : final_normalized;
 8001598:	6838      	ldr	r0, [r7, #0]
 800159a:	f7fe fff5 	bl	8000588 <__aeabi_f2d>
 800159e:	a314      	add	r3, pc, #80	; (adr r3, 80015f0 <FEB_Normalized_Acc_Pedals+0x1e0>)
 80015a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a4:	f7ff faba 	bl	8000b1c <__aeabi_dcmplt>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d002      	beq.n	80015b4 <FEB_Normalized_Acc_Pedals+0x1a4>
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	e000      	b.n	80015b6 <FEB_Normalized_Acc_Pedals+0x1a6>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	603b      	str	r3, [r7, #0]
		return final_normalized;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	e001      	b.n	80015c0 <FEB_Normalized_Acc_Pedals+0x1b0>
	} else {
		return 0.0;
 80015bc:	f04f 0300 	mov.w	r3, #0
	}
}
 80015c0:	ee07 3a90 	vmov	s15, r3
 80015c4:	eeb0 0a67 	vmov.f32	s0, s15
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	00000000 	.word	0x00000000
 80015d4:	40a51800 	.word	0x40a51800
 80015d8:	00000000 	.word	0x00000000
 80015dc:	406cc000 	.word	0x406cc000
 80015e0:	00000000 	.word	0x00000000
 80015e4:	4095b800 	.word	0x4095b800
 80015e8:	9999999a 	.word	0x9999999a
 80015ec:	3fb99999 	.word	0x3fb99999
 80015f0:	9999999a 	.word	0x9999999a
 80015f4:	3fa99999 	.word	0x3fa99999
 80015f8:	20000378 	.word	0x20000378
 80015fc:	20000390 	.word	0x20000390
 8001600:	c06cc000 	.word	0xc06cc000
 8001604:	2000039c 	.word	0x2000039c
 8001608:	20000398 	.word	0x20000398
 800160c:	00000000 	.word	0x00000000

08001610 <FEB_Normalized_Brake_Pedals>:

float FEB_Normalized_Brake_Pedals(){
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
	uint16_t brake_pedal_1 = buffer[1];
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <FEB_Normalized_Brake_Pedals+0xa0>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	80fb      	strh	r3, [r7, #6]
	float final_normalized = (brake_pedal_1 - BRAKE_PEDAL_1_START)/ (BRAKE_PEDAL_1_END - BRAKE_PEDAL_1_START);
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ffa0 	bl	8000564 <__aeabi_i2d>
 8001624:	a31e      	add	r3, pc, #120	; (adr r3, 80016a0 <FEB_Normalized_Brake_Pedals+0x90>)
 8001626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162a:	f7fe fe4d 	bl	80002c8 <__aeabi_dsub>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	f04f 0200 	mov.w	r2, #0
 800163a:	4b1e      	ldr	r3, [pc, #120]	; (80016b4 <FEB_Normalized_Brake_Pedals+0xa4>)
 800163c:	f7ff f926 	bl	800088c <__aeabi_ddiv>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4610      	mov	r0, r2
 8001646:	4619      	mov	r1, r3
 8001648:	f7ff face 	bl	8000be8 <__aeabi_d2f>
 800164c:	4603      	mov	r3, r0
 800164e:	603b      	str	r3, [r7, #0]
	final_normalized = final_normalized > 1 ? 1 : final_normalized;
 8001650:	edd7 7a00 	vldr	s15, [r7]
 8001654:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800165c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001660:	dd02      	ble.n	8001668 <FEB_Normalized_Brake_Pedals+0x58>
 8001662:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001666:	e000      	b.n	800166a <FEB_Normalized_Brake_Pedals+0x5a>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	603b      	str	r3, [r7, #0]
	final_normalized = final_normalized < 0.05 ? 0 : final_normalized;
 800166c:	6838      	ldr	r0, [r7, #0]
 800166e:	f7fe ff8b 	bl	8000588 <__aeabi_f2d>
 8001672:	a30d      	add	r3, pc, #52	; (adr r3, 80016a8 <FEB_Normalized_Brake_Pedals+0x98>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	f7ff fa50 	bl	8000b1c <__aeabi_dcmplt>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d002      	beq.n	8001688 <FEB_Normalized_Brake_Pedals+0x78>
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	e000      	b.n	800168a <FEB_Normalized_Brake_Pedals+0x7a>
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	603b      	str	r3, [r7, #0]

	return final_normalized;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	ee07 3a90 	vmov	s15, r3
}
 8001692:	eeb0 0a67 	vmov.f32	s0, s15
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	f3af 8000 	nop.w
 80016a0:	00000000 	.word	0x00000000
 80016a4:	40781000 	.word	0x40781000
 80016a8:	9999999a 	.word	0x9999999a
 80016ac:	3fa99999 	.word	0x3fa99999
 80016b0:	20000378 	.word	0x20000378
 80016b4:	403e0000 	.word	0x403e0000

080016b8 <FEB_APPS_sendBrake>:


void FEB_APPS_sendBrake(){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	FEB_CAN_Transmit(&hcan1,APPS_BRAKE_PEDAL,&normalized_brake,sizeof(float));
 80016bc:	2304      	movs	r3, #4
 80016be:	4a03      	ldr	r2, [pc, #12]	; (80016cc <FEB_APPS_sendBrake+0x14>)
 80016c0:	2132      	movs	r1, #50	; 0x32
 80016c2:	4803      	ldr	r0, [pc, #12]	; (80016d0 <FEB_APPS_sendBrake+0x18>)
 80016c4:	f7ff fe4e 	bl	8001364 <FEB_CAN_Transmit>
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	2000039c 	.word	0x2000039c
 80016d0:	2000030c 	.word	0x2000030c

080016d4 <FEB_RMS_updateTorque>:

void FEB_RMS_updateTorque() {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
  uint8_t message_data[8] = {RMSControl.torque & 0xFF, RMSControl.torque >> 8, 0, 0, 0, RMSControl.enabled, 0, 0};
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <FEB_RMS_updateTorque+0x48>)
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	703b      	strb	r3, [r7, #0]
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <FEB_RMS_updateTorque+0x48>)
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	0a1b      	lsrs	r3, r3, #8
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	707b      	strb	r3, [r7, #1]
 80016ee:	2300      	movs	r3, #0
 80016f0:	70bb      	strb	r3, [r7, #2]
 80016f2:	2300      	movs	r3, #0
 80016f4:	70fb      	strb	r3, [r7, #3]
 80016f6:	2300      	movs	r3, #0
 80016f8:	713b      	strb	r3, [r7, #4]
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <FEB_RMS_updateTorque+0x48>)
 80016fc:	789b      	ldrb	r3, [r3, #2]
 80016fe:	717b      	strb	r3, [r7, #5]
 8001700:	2300      	movs	r3, #0
 8001702:	71bb      	strb	r3, [r7, #6]
 8001704:	2300      	movs	r3, #0
 8001706:	71fb      	strb	r3, [r7, #7]
  FEB_CAN_Transmit(&hcan1, 0x0C0, message_data, 8);
 8001708:	463a      	mov	r2, r7
 800170a:	2308      	movs	r3, #8
 800170c:	21c0      	movs	r1, #192	; 0xc0
 800170e:	4804      	ldr	r0, [pc, #16]	; (8001720 <FEB_RMS_updateTorque+0x4c>)
 8001710:	f7ff fe28 	bl	8001364 <FEB_CAN_Transmit>
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000394 	.word	0x20000394
 8001720:	2000030c 	.word	0x2000030c

08001724 <FEB_RMS_setTorque>:

void FEB_RMS_setTorque(uint16_t torque) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	80fb      	strh	r3, [r7, #6]
  RMSControl.torque = torque * 10;
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	461a      	mov	r2, r3
 8001732:	0092      	lsls	r2, r2, #2
 8001734:	4413      	add	r3, r2
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	b29a      	uxth	r2, r3
 800173a:	4b04      	ldr	r3, [pc, #16]	; (800174c <FEB_RMS_setTorque+0x28>)
 800173c:	801a      	strh	r2, [r3, #0]
  FEB_RMS_updateTorque();
 800173e:	f7ff ffc9 	bl	80016d4 <FEB_RMS_updateTorque>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000394 	.word	0x20000394

08001750 <FEB_RMS_enable>:

void FEB_RMS_enable() {
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  RMSControl.enabled = 1;
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <FEB_RMS_enable+0x14>)
 8001756:	2201      	movs	r2, #1
 8001758:	709a      	strb	r2, [r3, #2]
  FEB_RMS_updateTorque();
 800175a:	f7ff ffbb 	bl	80016d4 <FEB_RMS_updateTorque>
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000394 	.word	0x20000394

08001768 <FEB_RMS_Init>:
void FEB_RMS_disable() {
  RMSControl.enabled = 0;
  FEB_RMS_updateTorque();
}

void FEB_RMS_Init(){
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
	uint8_t message_data[8] = {0,0,0,0,0,0,0};
 800176e:	4a13      	ldr	r2, [pc, #76]	; (80017bc <FEB_RMS_Init+0x54>)
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001776:	e883 0003 	stmia.w	r3, {r0, r1}
	normalized_acc = 0;
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <FEB_RMS_Init+0x58>)
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
	normalized_brake = 0;
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <FEB_RMS_Init+0x5c>)
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	601a      	str	r2, [r3, #0]

	for (int i=0; i<100; i+=1) {
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	e00b      	b.n	80017a8 <FEB_RMS_Init+0x40>
		FEB_CAN_Transmit(&hcan1, 0x0C0, message_data, 8);
 8001790:	1d3a      	adds	r2, r7, #4
 8001792:	2308      	movs	r3, #8
 8001794:	21c0      	movs	r1, #192	; 0xc0
 8001796:	480c      	ldr	r0, [pc, #48]	; (80017c8 <FEB_RMS_Init+0x60>)
 8001798:	f7ff fde4 	bl	8001364 <FEB_CAN_Transmit>
	    HAL_Delay(100);
 800179c:	2064      	movs	r0, #100	; 0x64
 800179e:	f000 fd75 	bl	800228c <HAL_Delay>
	for (int i=0; i<100; i+=1) {
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	3301      	adds	r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2b63      	cmp	r3, #99	; 0x63
 80017ac:	ddf0      	ble.n	8001790 <FEB_RMS_Init+0x28>
	}
	FEB_RMS_enable();
 80017ae:	f7ff ffcf 	bl	8001750 <FEB_RMS_enable>
}
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	080085f8 	.word	0x080085f8
 80017c0:	20000398 	.word	0x20000398
 80017c4:	2000039c 	.word	0x2000039c
 80017c8:	2000030c 	.word	0x2000030c

080017cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017cc:	b5b0      	push	{r4, r5, r7, lr}
 80017ce:	b0a4      	sub	sp, #144	; 0x90
 80017d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017d2:	f000 fce9 	bl	80021a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017d6:	f000 f879 	bl	80018cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017da:	f000 f9fb 	bl	8001bd4 <MX_GPIO_Init>
  MX_DMA_Init();
 80017de:	f000 f9d9 	bl	8001b94 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80017e2:	f000 f9ad 	bl	8001b40 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80017e6:	f000 f975 	bl	8001ad4 <MX_CAN1_Init>
  MX_ADC1_Init();
 80017ea:	f000 f8db 	bl	80019a4 <MX_ADC1_Init>

  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1,buffer,6);
 80017ee:	2206      	movs	r2, #6
 80017f0:	492d      	ldr	r1, [pc, #180]	; (80018a8 <main+0xdc>)
 80017f2:	482e      	ldr	r0, [pc, #184]	; (80018ac <main+0xe0>)
 80017f4:	f000 fdb2 	bl	800235c <HAL_ADC_Start_DMA>


  char buf[128];
  uint8_t buf_len;

  FEB_CAN_Init(&hcan1, APPS_ID); // The transceiver must be connected otherwise you get sent into an infinite loop
 80017f8:	2103      	movs	r1, #3
 80017fa:	482d      	ldr	r0, [pc, #180]	; (80018b0 <main+0xe4>)
 80017fc:	f7ff fd50 	bl	80012a0 <FEB_CAN_Init>
  FEB_RMS_Init();
 8001800:	f7ff ffb2 	bl	8001768 <FEB_RMS_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //ready to drive
	  if (SW_MESSAGE.ready_to_drive == 1) {
 8001804:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <main+0xe8>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d107      	bne.n	800181c <main+0x50>
		  normalized_acc = FEB_Normalized_Acc_Pedals();
 800180c:	f7ff fe00 	bl	8001410 <FEB_Normalized_Acc_Pedals>
 8001810:	eef0 7a40 	vmov.f32	s15, s0
 8001814:	4b28      	ldr	r3, [pc, #160]	; (80018b8 <main+0xec>)
 8001816:	edc3 7a00 	vstr	s15, [r3]
 800181a:	e003      	b.n	8001824 <main+0x58>
	  } else {
		  normalized_acc = 0.0;
 800181c:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <main+0xec>)
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
	  }

	  normalized_brake = FEB_Normalized_Brake_Pedals();
 8001824:	f7ff fef4 	bl	8001610 <FEB_Normalized_Brake_Pedals>
 8001828:	eef0 7a40 	vmov.f32	s15, s0
 800182c:	4b23      	ldr	r3, [pc, #140]	; (80018bc <main+0xf0>)
 800182e:	edc3 7a00 	vstr	s15, [r3]

	  uint16_t torque = normalized_acc * 50;
 8001832:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <main+0xec>)
 8001834:	edd3 7a00 	vldr	s15, [r3]
 8001838:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80018c0 <main+0xf4>
 800183c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001840:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001844:	ee17 3a90 	vmov	r3, s15
 8001848:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86


	  //Transmit CAN messages to other boards

	  FEB_RMS_setTorque(torque);
 800184c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff67 	bl	8001724 <FEB_RMS_setTorque>
	  FEB_APPS_sendBrake();
 8001856:	f7ff ff2f 	bl	80016b8 <FEB_APPS_sendBrake>

	  buf_len = sprintf(buf, "acc: %.3f brake: %.3f\n", normalized_acc, normalized_brake);
 800185a:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <main+0xec>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fe92 	bl	8000588 <__aeabi_f2d>
 8001864:	4604      	mov	r4, r0
 8001866:	460d      	mov	r5, r1
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <main+0xf0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fe8b 	bl	8000588 <__aeabi_f2d>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	1d38      	adds	r0, r7, #4
 8001878:	e9cd 2300 	strd	r2, r3, [sp]
 800187c:	4622      	mov	r2, r4
 800187e:	462b      	mov	r3, r5
 8001880:	4910      	ldr	r1, [pc, #64]	; (80018c4 <main+0xf8>)
 8001882:	f004 fc41 	bl	8006108 <siprintf>
 8001886:	4603      	mov	r3, r0
 8001888:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	  HAL_UART_Transmit(&huart2,(uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 800188c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001890:	b29a      	uxth	r2, r3
 8001892:	1d39      	adds	r1, r7, #4
 8001894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001898:	480b      	ldr	r0, [pc, #44]	; (80018c8 <main+0xfc>)
 800189a:	f003 fc16 	bl	80050ca <HAL_UART_Transmit>

	  HAL_Delay(SLEEP_TIME);
 800189e:	200a      	movs	r0, #10
 80018a0:	f000 fcf4 	bl	800228c <HAL_Delay>
  {
 80018a4:	e7ae      	b.n	8001804 <main+0x38>
 80018a6:	bf00      	nop
 80018a8:	20000378 	.word	0x20000378
 80018ac:	20000264 	.word	0x20000264
 80018b0:	2000030c 	.word	0x2000030c
 80018b4:	20000204 	.word	0x20000204
 80018b8:	20000398 	.word	0x20000398
 80018bc:	2000039c 	.word	0x2000039c
 80018c0:	42480000 	.word	0x42480000
 80018c4:	08008600 	.word	0x08008600
 80018c8:	20000334 	.word	0x20000334

080018cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b094      	sub	sp, #80	; 0x50
 80018d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	2234      	movs	r2, #52	; 0x34
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f003 ffa2 	bl	8005824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e0:	f107 0308 	add.w	r3, r7, #8
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f0:	2300      	movs	r3, #0
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	4b29      	ldr	r3, [pc, #164]	; (800199c <SystemClock_Config+0xd0>)
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	4a28      	ldr	r2, [pc, #160]	; (800199c <SystemClock_Config+0xd0>)
 80018fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001900:	4b26      	ldr	r3, [pc, #152]	; (800199c <SystemClock_Config+0xd0>)
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800190c:	2300      	movs	r3, #0
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	4b23      	ldr	r3, [pc, #140]	; (80019a0 <SystemClock_Config+0xd4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a22      	ldr	r2, [pc, #136]	; (80019a0 <SystemClock_Config+0xd4>)
 8001916:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <SystemClock_Config+0xd4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001924:	603b      	str	r3, [r7, #0]
 8001926:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001928:	2301      	movs	r3, #1
 800192a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800192c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001930:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001932:	2302      	movs	r3, #2
 8001934:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001936:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800193a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800193c:	2304      	movs	r3, #4
 800193e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001940:	23a0      	movs	r3, #160	; 0xa0
 8001942:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001944:	2302      	movs	r3, #2
 8001946:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001948:	2302      	movs	r3, #2
 800194a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800194c:	2302      	movs	r3, #2
 800194e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	4618      	mov	r0, r3
 8001956:	f003 f8cd 	bl	8004af4 <HAL_RCC_OscConfig>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001960:	f000 f992 	bl	8001c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001964:	230f      	movs	r3, #15
 8001966:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001968:	2302      	movs	r3, #2
 800196a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800196c:	2300      	movs	r3, #0
 800196e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001970:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001974:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001976:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800197a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800197c:	f107 0308 	add.w	r3, r7, #8
 8001980:	2105      	movs	r1, #5
 8001982:	4618      	mov	r0, r3
 8001984:	f002 fd6c 	bl	8004460 <HAL_RCC_ClockConfig>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800198e:	f000 f97b 	bl	8001c88 <Error_Handler>
  }
}
 8001992:	bf00      	nop
 8001994:	3750      	adds	r7, #80	; 0x50
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800
 80019a0:	40007000 	.word	0x40007000

080019a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019aa:	463b      	mov	r3, r7
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019b6:	4b44      	ldr	r3, [pc, #272]	; (8001ac8 <MX_ADC1_Init+0x124>)
 80019b8:	4a44      	ldr	r2, [pc, #272]	; (8001acc <MX_ADC1_Init+0x128>)
 80019ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019bc:	4b42      	ldr	r3, [pc, #264]	; (8001ac8 <MX_ADC1_Init+0x124>)
 80019be:	2200      	movs	r2, #0
 80019c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019c2:	4b41      	ldr	r3, [pc, #260]	; (8001ac8 <MX_ADC1_Init+0x124>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80019c8:	4b3f      	ldr	r3, [pc, #252]	; (8001ac8 <MX_ADC1_Init+0x124>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80019ce:	4b3e      	ldr	r3, [pc, #248]	; (8001ac8 <MX_ADC1_Init+0x124>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019d4:	4b3c      	ldr	r3, [pc, #240]	; (8001ac8 <MX_ADC1_Init+0x124>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019dc:	4b3a      	ldr	r3, [pc, #232]	; (8001ac8 <MX_ADC1_Init+0x124>)
 80019de:	2200      	movs	r2, #0
 80019e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019e2:	4b39      	ldr	r3, [pc, #228]	; (8001ac8 <MX_ADC1_Init+0x124>)
 80019e4:	4a3a      	ldr	r2, [pc, #232]	; (8001ad0 <MX_ADC1_Init+0x12c>)
 80019e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019e8:	4b37      	ldr	r3, [pc, #220]	; (8001ac8 <MX_ADC1_Init+0x124>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 80019ee:	4b36      	ldr	r3, [pc, #216]	; (8001ac8 <MX_ADC1_Init+0x124>)
 80019f0:	2206      	movs	r2, #6
 80019f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80019f4:	4b34      	ldr	r3, [pc, #208]	; (8001ac8 <MX_ADC1_Init+0x124>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019fc:	4b32      	ldr	r3, [pc, #200]	; (8001ac8 <MX_ADC1_Init+0x124>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a02:	4831      	ldr	r0, [pc, #196]	; (8001ac8 <MX_ADC1_Init+0x124>)
 8001a04:	f000 fc66 	bl	80022d4 <HAL_ADC_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001a0e:	f000 f93b 	bl	8001c88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a16:	2301      	movs	r3, #1
 8001a18:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a1e:	463b      	mov	r3, r7
 8001a20:	4619      	mov	r1, r3
 8001a22:	4829      	ldr	r0, [pc, #164]	; (8001ac8 <MX_ADC1_Init+0x124>)
 8001a24:	f000 fdc8 	bl	80025b8 <HAL_ADC_ConfigChannel>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001a2e:	f000 f92b 	bl	8001c88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a32:	2301      	movs	r3, #1
 8001a34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001a36:	2302      	movs	r3, #2
 8001a38:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4822      	ldr	r0, [pc, #136]	; (8001ac8 <MX_ADC1_Init+0x124>)
 8001a40:	f000 fdba 	bl	80025b8 <HAL_ADC_ConfigChannel>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001a4a:	f000 f91d 	bl	8001c88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001a4e:	2304      	movs	r3, #4
 8001a50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001a52:	2303      	movs	r3, #3
 8001a54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a56:	463b      	mov	r3, r7
 8001a58:	4619      	mov	r1, r3
 8001a5a:	481b      	ldr	r0, [pc, #108]	; (8001ac8 <MX_ADC1_Init+0x124>)
 8001a5c:	f000 fdac 	bl	80025b8 <HAL_ADC_ConfigChannel>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001a66:	f000 f90f 	bl	8001c88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001a6a:	2305      	movs	r3, #5
 8001a6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001a6e:	2304      	movs	r3, #4
 8001a70:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a72:	463b      	mov	r3, r7
 8001a74:	4619      	mov	r1, r3
 8001a76:	4814      	ldr	r0, [pc, #80]	; (8001ac8 <MX_ADC1_Init+0x124>)
 8001a78:	f000 fd9e 	bl	80025b8 <HAL_ADC_ConfigChannel>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001a82:	f000 f901 	bl	8001c88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001a86:	2306      	movs	r3, #6
 8001a88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001a8a:	2305      	movs	r3, #5
 8001a8c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a8e:	463b      	mov	r3, r7
 8001a90:	4619      	mov	r1, r3
 8001a92:	480d      	ldr	r0, [pc, #52]	; (8001ac8 <MX_ADC1_Init+0x124>)
 8001a94:	f000 fd90 	bl	80025b8 <HAL_ADC_ConfigChannel>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001a9e:	f000 f8f3 	bl	8001c88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001aa2:	2307      	movs	r3, #7
 8001aa4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001aa6:	2306      	movs	r3, #6
 8001aa8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aaa:	463b      	mov	r3, r7
 8001aac:	4619      	mov	r1, r3
 8001aae:	4806      	ldr	r0, [pc, #24]	; (8001ac8 <MX_ADC1_Init+0x124>)
 8001ab0:	f000 fd82 	bl	80025b8 <HAL_ADC_ConfigChannel>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8001aba:	f000 f8e5 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000264 	.word	0x20000264
 8001acc:	40012000 	.word	0x40012000
 8001ad0:	0f000001 	.word	0x0f000001

08001ad4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001ad8:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <MX_CAN1_Init+0x64>)
 8001ada:	4a18      	ldr	r2, [pc, #96]	; (8001b3c <MX_CAN1_Init+0x68>)
 8001adc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001ade:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <MX_CAN1_Init+0x64>)
 8001ae0:	2210      	movs	r2, #16
 8001ae2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001ae4:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <MX_CAN1_Init+0x64>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <MX_CAN1_Init+0x64>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <MX_CAN1_Init+0x64>)
 8001af2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001af6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <MX_CAN1_Init+0x64>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001afe:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <MX_CAN1_Init+0x64>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <MX_CAN1_Init+0x64>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <MX_CAN1_Init+0x64>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001b10:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <MX_CAN1_Init+0x64>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001b16:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <MX_CAN1_Init+0x64>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <MX_CAN1_Init+0x64>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001b22:	4805      	ldr	r0, [pc, #20]	; (8001b38 <MX_CAN1_Init+0x64>)
 8001b24:	f000 fff8 	bl	8002b18 <HAL_CAN_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001b2e:	f000 f8ab 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	2000030c 	.word	0x2000030c
 8001b3c:	40006400 	.word	0x40006400

08001b40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <MX_USART2_UART_Init+0x4c>)
 8001b46:	4a12      	ldr	r2, [pc, #72]	; (8001b90 <MX_USART2_UART_Init+0x50>)
 8001b48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <MX_USART2_UART_Init+0x4c>)
 8001b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <MX_USART2_UART_Init+0x4c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <MX_USART2_UART_Init+0x4c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <MX_USART2_UART_Init+0x4c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b64:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <MX_USART2_UART_Init+0x4c>)
 8001b66:	220c      	movs	r2, #12
 8001b68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6a:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <MX_USART2_UART_Init+0x4c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <MX_USART2_UART_Init+0x4c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b76:	4805      	ldr	r0, [pc, #20]	; (8001b8c <MX_USART2_UART_Init+0x4c>)
 8001b78:	f003 fa5a 	bl	8005030 <HAL_UART_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b82:	f000 f881 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000334 	.word	0x20000334
 8001b90:	40004400 	.word	0x40004400

08001b94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <MX_DMA_Init+0x3c>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a0b      	ldr	r2, [pc, #44]	; (8001bd0 <MX_DMA_Init+0x3c>)
 8001ba4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <MX_DMA_Init+0x3c>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2100      	movs	r1, #0
 8001bba:	2038      	movs	r0, #56	; 0x38
 8001bbc:	f001 ff15 	bl	80039ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001bc0:	2038      	movs	r0, #56	; 0x38
 8001bc2:	f001 ff2e 	bl	8003a22 <HAL_NVIC_EnableIRQ>

}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800

08001bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08a      	sub	sp, #40	; 0x28
 8001bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
 8001be8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <MX_GPIO_Init+0xac>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a23      	ldr	r2, [pc, #140]	; (8001c80 <MX_GPIO_Init+0xac>)
 8001bf4:	f043 0304 	orr.w	r3, r3, #4
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <MX_GPIO_Init+0xac>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <MX_GPIO_Init+0xac>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	4a1c      	ldr	r2, [pc, #112]	; (8001c80 <MX_GPIO_Init+0xac>)
 8001c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <MX_GPIO_Init+0xac>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <MX_GPIO_Init+0xac>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a15      	ldr	r2, [pc, #84]	; (8001c80 <MX_GPIO_Init+0xac>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <MX_GPIO_Init+0xac>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <MX_GPIO_Init+0xac>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a0e      	ldr	r2, [pc, #56]	; (8001c80 <MX_GPIO_Init+0xac>)
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <MX_GPIO_Init+0xac>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c60:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4804      	ldr	r0, [pc, #16]	; (8001c84 <MX_GPIO_Init+0xb0>)
 8001c72:	f002 fa61 	bl	8004138 <HAL_GPIO_Init>

}
 8001c76:	bf00      	nop
 8001c78:	3728      	adds	r7, #40	; 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40020800 	.word	0x40020800

08001c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c8c:	b672      	cpsid	i
}
 8001c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c90:	e7fe      	b.n	8001c90 <Error_Handler+0x8>
	...

08001c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	4a0f      	ldr	r2, [pc, #60]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8001caa:	4b0d      	ldr	r3, [pc, #52]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	603b      	str	r3, [r7, #0]
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	4a08      	ldr	r2, [pc, #32]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cd2:	2007      	movs	r0, #7
 8001cd4:	f001 fe7e 	bl	80039d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40023800 	.word	0x40023800

08001ce4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a2f      	ldr	r2, [pc, #188]	; (8001dc0 <HAL_ADC_MspInit+0xdc>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d157      	bne.n	8001db6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <HAL_ADC_MspInit+0xe0>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	4a2d      	ldr	r2, [pc, #180]	; (8001dc4 <HAL_ADC_MspInit+0xe0>)
 8001d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d14:	6453      	str	r3, [r2, #68]	; 0x44
 8001d16:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <HAL_ADC_MspInit+0xe0>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <HAL_ADC_MspInit+0xe0>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a26      	ldr	r2, [pc, #152]	; (8001dc4 <HAL_ADC_MspInit+0xe0>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b24      	ldr	r3, [pc, #144]	; (8001dc4 <HAL_ADC_MspInit+0xe0>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001d3e:	23f3      	movs	r3, #243	; 0xf3
 8001d40:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d42:	2303      	movs	r3, #3
 8001d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	4619      	mov	r1, r3
 8001d50:	481d      	ldr	r0, [pc, #116]	; (8001dc8 <HAL_ADC_MspInit+0xe4>)
 8001d52:	f002 f9f1 	bl	8004138 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001d56:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <HAL_ADC_MspInit+0xe8>)
 8001d58:	4a1d      	ldr	r2, [pc, #116]	; (8001dd0 <HAL_ADC_MspInit+0xec>)
 8001d5a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <HAL_ADC_MspInit+0xe8>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d62:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <HAL_ADC_MspInit+0xe8>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d68:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <HAL_ADC_MspInit+0xe8>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d6e:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <HAL_ADC_MspInit+0xe8>)
 8001d70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d74:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <HAL_ADC_MspInit+0xe8>)
 8001d78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d7e:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <HAL_ADC_MspInit+0xe8>)
 8001d80:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d86:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <HAL_ADC_MspInit+0xe8>)
 8001d88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d8c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d8e:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <HAL_ADC_MspInit+0xe8>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d94:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <HAL_ADC_MspInit+0xe8>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d9a:	480c      	ldr	r0, [pc, #48]	; (8001dcc <HAL_ADC_MspInit+0xe8>)
 8001d9c:	f001 fe5c 	bl	8003a58 <HAL_DMA_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001da6:	f7ff ff6f 	bl	8001c88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a07      	ldr	r2, [pc, #28]	; (8001dcc <HAL_ADC_MspInit+0xe8>)
 8001dae:	639a      	str	r2, [r3, #56]	; 0x38
 8001db0:	4a06      	ldr	r2, [pc, #24]	; (8001dcc <HAL_ADC_MspInit+0xe8>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001db6:	bf00      	nop
 8001db8:	3728      	adds	r7, #40	; 0x28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40012000 	.word	0x40012000
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	200002ac 	.word	0x200002ac
 8001dd0:	40026410 	.word	0x40026410

08001dd4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a21      	ldr	r2, [pc, #132]	; (8001e78 <HAL_CAN_MspInit+0xa4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d13c      	bne.n	8001e70 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <HAL_CAN_MspInit+0xa8>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <HAL_CAN_MspInit+0xa8>)
 8001e00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40
 8001e06:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <HAL_CAN_MspInit+0xa8>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <HAL_CAN_MspInit+0xa8>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a18      	ldr	r2, [pc, #96]	; (8001e7c <HAL_CAN_MspInit+0xa8>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <HAL_CAN_MspInit+0xa8>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e2e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001e40:	2309      	movs	r3, #9
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	4619      	mov	r1, r3
 8001e4a:	480d      	ldr	r0, [pc, #52]	; (8001e80 <HAL_CAN_MspInit+0xac>)
 8001e4c:	f002 f974 	bl	8004138 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001e50:	2200      	movs	r2, #0
 8001e52:	2100      	movs	r1, #0
 8001e54:	2014      	movs	r0, #20
 8001e56:	f001 fdc8 	bl	80039ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001e5a:	2014      	movs	r0, #20
 8001e5c:	f001 fde1 	bl	8003a22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2100      	movs	r1, #0
 8001e64:	2015      	movs	r0, #21
 8001e66:	f001 fdc0 	bl	80039ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001e6a:	2015      	movs	r0, #21
 8001e6c:	f001 fdd9 	bl	8003a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001e70:	bf00      	nop
 8001e72:	3728      	adds	r7, #40	; 0x28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40006400 	.word	0x40006400
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40020000 	.word	0x40020000

08001e84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	; 0x28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a19      	ldr	r2, [pc, #100]	; (8001f08 <HAL_UART_MspInit+0x84>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d12b      	bne.n	8001efe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <HAL_UART_MspInit+0x88>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	4a17      	ldr	r2, [pc, #92]	; (8001f0c <HAL_UART_MspInit+0x88>)
 8001eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <HAL_UART_MspInit+0x88>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <HAL_UART_MspInit+0x88>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a10      	ldr	r2, [pc, #64]	; (8001f0c <HAL_UART_MspInit+0x88>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <HAL_UART_MspInit+0x88>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ede:	230c      	movs	r3, #12
 8001ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eea:	2303      	movs	r3, #3
 8001eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eee:	2307      	movs	r3, #7
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4805      	ldr	r0, [pc, #20]	; (8001f10 <HAL_UART_MspInit+0x8c>)
 8001efa:	f002 f91d 	bl	8004138 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001efe:	bf00      	nop
 8001f00:	3728      	adds	r7, #40	; 0x28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40004400 	.word	0x40004400
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40020000 	.word	0x40020000

08001f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <NMI_Handler+0x4>

08001f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f1e:	e7fe      	b.n	8001f1e <HardFault_Handler+0x4>

08001f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <MemManage_Handler+0x4>

08001f26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f2a:	e7fe      	b.n	8001f2a <BusFault_Handler+0x4>

08001f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f30:	e7fe      	b.n	8001f30 <UsageFault_Handler+0x4>

08001f32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f60:	f000 f974 	bl	800224c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f6c:	4802      	ldr	r0, [pc, #8]	; (8001f78 <CAN1_RX0_IRQHandler+0x10>)
 8001f6e:	f001 fa3b 	bl	80033e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	2000030c 	.word	0x2000030c

08001f7c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f80:	4802      	ldr	r0, [pc, #8]	; (8001f8c <CAN1_RX1_IRQHandler+0x10>)
 8001f82:	f001 fa31 	bl	80033e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	2000030c 	.word	0x2000030c

08001f90 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <DMA2_Stream0_IRQHandler+0x10>)
 8001f96:	f001 fe65 	bl	8003c64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200002ac 	.word	0x200002ac

08001fa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
	return 1;
 8001fa8:	2301      	movs	r3, #1
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <_kill>:

int _kill(int pid, int sig)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fbe:	f003 fbf9 	bl	80057b4 <__errno>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2216      	movs	r2, #22
 8001fc6:	601a      	str	r2, [r3, #0]
	return -1;
 8001fc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <_exit>:

void _exit (int status)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ffe7 	bl	8001fb4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fe6:	e7fe      	b.n	8001fe6 <_exit+0x12>

08001fe8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	e00a      	b.n	8002010 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ffa:	f3af 8000 	nop.w
 8001ffe:	4601      	mov	r1, r0
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	60ba      	str	r2, [r7, #8]
 8002006:	b2ca      	uxtb	r2, r1
 8002008:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	3301      	adds	r3, #1
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	429a      	cmp	r2, r3
 8002016:	dbf0      	blt.n	8001ffa <_read+0x12>
	}

return len;
 8002018:	687b      	ldr	r3, [r7, #4]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	e009      	b.n	8002048 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	60ba      	str	r2, [r7, #8]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	3301      	adds	r3, #1
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	429a      	cmp	r2, r3
 800204e:	dbf1      	blt.n	8002034 <_write+0x12>
	}
	return len;
 8002050:	687b      	ldr	r3, [r7, #4]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <_close>:

int _close(int file)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
	return -1;
 8002062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002082:	605a      	str	r2, [r3, #4]
	return 0;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <_isatty>:

int _isatty(int file)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
	return 1;
 800209a:	2301      	movs	r3, #1
}
 800209c:	4618      	mov	r0, r3
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
	return 0;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020cc:	4a14      	ldr	r2, [pc, #80]	; (8002120 <_sbrk+0x5c>)
 80020ce:	4b15      	ldr	r3, [pc, #84]	; (8002124 <_sbrk+0x60>)
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020d8:	4b13      	ldr	r3, [pc, #76]	; (8002128 <_sbrk+0x64>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d102      	bne.n	80020e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <_sbrk+0x64>)
 80020e2:	4a12      	ldr	r2, [pc, #72]	; (800212c <_sbrk+0x68>)
 80020e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020e6:	4b10      	ldr	r3, [pc, #64]	; (8002128 <_sbrk+0x64>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d207      	bcs.n	8002104 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020f4:	f003 fb5e 	bl	80057b4 <__errno>
 80020f8:	4603      	mov	r3, r0
 80020fa:	220c      	movs	r2, #12
 80020fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002102:	e009      	b.n	8002118 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <_sbrk+0x64>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800210a:	4b07      	ldr	r3, [pc, #28]	; (8002128 <_sbrk+0x64>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	4a05      	ldr	r2, [pc, #20]	; (8002128 <_sbrk+0x64>)
 8002114:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002116:	68fb      	ldr	r3, [r7, #12]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20020000 	.word	0x20020000
 8002124:	00000400 	.word	0x00000400
 8002128:	200003a0 	.word	0x200003a0
 800212c:	200003b8 	.word	0x200003b8

08002130 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <SystemInit+0x20>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213a:	4a05      	ldr	r2, [pc, #20]	; (8002150 <SystemInit+0x20>)
 800213c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002140:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002154:	f8df d034 	ldr.w	sp, [pc, #52]	; 800218c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002158:	480d      	ldr	r0, [pc, #52]	; (8002190 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800215a:	490e      	ldr	r1, [pc, #56]	; (8002194 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800215c:	4a0e      	ldr	r2, [pc, #56]	; (8002198 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800215e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002160:	e002      	b.n	8002168 <LoopCopyDataInit>

08002162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002166:	3304      	adds	r3, #4

08002168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800216a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800216c:	d3f9      	bcc.n	8002162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800216e:	4a0b      	ldr	r2, [pc, #44]	; (800219c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002170:	4c0b      	ldr	r4, [pc, #44]	; (80021a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002174:	e001      	b.n	800217a <LoopFillZerobss>

08002176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002178:	3204      	adds	r2, #4

0800217a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800217a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800217c:	d3fb      	bcc.n	8002176 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800217e:	f7ff ffd7 	bl	8002130 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002182:	f003 fb1d 	bl	80057c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002186:	f7ff fb21 	bl	80017cc <main>
  bx  lr    
 800218a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800218c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002194:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002198:	08008a34 	.word	0x08008a34
  ldr r2, =_sbss
 800219c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80021a0:	200003b8 	.word	0x200003b8

080021a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021a4:	e7fe      	b.n	80021a4 <ADC_IRQHandler>
	...

080021a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021ac:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <HAL_Init+0x40>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a0d      	ldr	r2, [pc, #52]	; (80021e8 <HAL_Init+0x40>)
 80021b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_Init+0x40>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a0a      	ldr	r2, [pc, #40]	; (80021e8 <HAL_Init+0x40>)
 80021be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <HAL_Init+0x40>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a07      	ldr	r2, [pc, #28]	; (80021e8 <HAL_Init+0x40>)
 80021ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d0:	2003      	movs	r0, #3
 80021d2:	f001 fbff 	bl	80039d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021d6:	2000      	movs	r0, #0
 80021d8:	f000 f808 	bl	80021ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021dc:	f7ff fd5a 	bl	8001c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40023c00 	.word	0x40023c00

080021ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f4:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_InitTick+0x54>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_InitTick+0x58>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	4619      	mov	r1, r3
 80021fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002202:	fbb3 f3f1 	udiv	r3, r3, r1
 8002206:	fbb2 f3f3 	udiv	r3, r2, r3
 800220a:	4618      	mov	r0, r3
 800220c:	f001 fc17 	bl	8003a3e <HAL_SYSTICK_Config>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e00e      	b.n	8002238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b0f      	cmp	r3, #15
 800221e:	d80a      	bhi.n	8002236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002220:	2200      	movs	r2, #0
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002228:	f001 fbdf 	bl	80039ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800222c:	4a06      	ldr	r2, [pc, #24]	; (8002248 <HAL_InitTick+0x5c>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	e000      	b.n	8002238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000000 	.word	0x20000000
 8002244:	20000008 	.word	0x20000008
 8002248:	20000004 	.word	0x20000004

0800224c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_IncTick+0x20>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_IncTick+0x24>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4413      	add	r3, r2
 800225c:	4a04      	ldr	r2, [pc, #16]	; (8002270 <HAL_IncTick+0x24>)
 800225e:	6013      	str	r3, [r2, #0]
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	20000008 	.word	0x20000008
 8002270:	200003a4 	.word	0x200003a4

08002274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return uwTick;
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <HAL_GetTick+0x14>)
 800227a:	681b      	ldr	r3, [r3, #0]
}
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	200003a4 	.word	0x200003a4

0800228c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002294:	f7ff ffee 	bl	8002274 <HAL_GetTick>
 8002298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022a4:	d005      	beq.n	80022b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022a6:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <HAL_Delay+0x44>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4413      	add	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022b2:	bf00      	nop
 80022b4:	f7ff ffde 	bl	8002274 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d8f7      	bhi.n	80022b4 <HAL_Delay+0x28>
  {
  }
}
 80022c4:	bf00      	nop
 80022c6:	bf00      	nop
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000008 	.word	0x20000008

080022d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e033      	b.n	8002352 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d109      	bne.n	8002306 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff fcf6 	bl	8001ce4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	2b00      	cmp	r3, #0
 8002310:	d118      	bne.n	8002344 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800231a:	f023 0302 	bic.w	r3, r3, #2
 800231e:	f043 0202 	orr.w	r2, r3, #2
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 fa78 	bl	800281c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f023 0303 	bic.w	r3, r3, #3
 800233a:	f043 0201 	orr.w	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	641a      	str	r2, [r3, #64]	; 0x40
 8002342:	e001      	b.n	8002348 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002350:	7bfb      	ldrb	r3, [r7, #15]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <HAL_ADC_Start_DMA+0x1e>
 8002376:	2302      	movs	r3, #2
 8002378:	e0e9      	b.n	800254e <HAL_ADC_Start_DMA+0x1f2>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b01      	cmp	r3, #1
 800238e:	d018      	beq.n	80023c2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023a0:	4b6d      	ldr	r3, [pc, #436]	; (8002558 <HAL_ADC_Start_DMA+0x1fc>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a6d      	ldr	r2, [pc, #436]	; (800255c <HAL_ADC_Start_DMA+0x200>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	0c9a      	lsrs	r2, r3, #18
 80023ac:	4613      	mov	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4413      	add	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80023b4:	e002      	b.n	80023bc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	3b01      	subs	r3, #1
 80023ba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f9      	bne.n	80023b6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023d0:	d107      	bne.n	80023e2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	f040 80a1 	bne.w	8002534 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023fa:	f023 0301 	bic.w	r3, r3, #1
 80023fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002410:	2b00      	cmp	r3, #0
 8002412:	d007      	beq.n	8002424 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800241c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800242c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002430:	d106      	bne.n	8002440 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	f023 0206 	bic.w	r2, r3, #6
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	645a      	str	r2, [r3, #68]	; 0x44
 800243e:	e002      	b.n	8002446 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800244e:	4b44      	ldr	r3, [pc, #272]	; (8002560 <HAL_ADC_Start_DMA+0x204>)
 8002450:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002456:	4a43      	ldr	r2, [pc, #268]	; (8002564 <HAL_ADC_Start_DMA+0x208>)
 8002458:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245e:	4a42      	ldr	r2, [pc, #264]	; (8002568 <HAL_ADC_Start_DMA+0x20c>)
 8002460:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002466:	4a41      	ldr	r2, [pc, #260]	; (800256c <HAL_ADC_Start_DMA+0x210>)
 8002468:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002472:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002482:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002492:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	334c      	adds	r3, #76	; 0x4c
 800249e:	4619      	mov	r1, r3
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f001 fb86 	bl	8003bb4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 031f 	and.w	r3, r3, #31
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d12a      	bne.n	800250a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a2d      	ldr	r2, [pc, #180]	; (8002570 <HAL_ADC_Start_DMA+0x214>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d015      	beq.n	80024ea <HAL_ADC_Start_DMA+0x18e>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a2c      	ldr	r2, [pc, #176]	; (8002574 <HAL_ADC_Start_DMA+0x218>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d105      	bne.n	80024d4 <HAL_ADC_Start_DMA+0x178>
 80024c8:	4b25      	ldr	r3, [pc, #148]	; (8002560 <HAL_ADC_Start_DMA+0x204>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 031f 	and.w	r3, r3, #31
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00a      	beq.n	80024ea <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a27      	ldr	r2, [pc, #156]	; (8002578 <HAL_ADC_Start_DMA+0x21c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d136      	bne.n	800254c <HAL_ADC_Start_DMA+0x1f0>
 80024de:	4b20      	ldr	r3, [pc, #128]	; (8002560 <HAL_ADC_Start_DMA+0x204>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d130      	bne.n	800254c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d129      	bne.n	800254c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	e020      	b.n	800254c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a18      	ldr	r2, [pc, #96]	; (8002570 <HAL_ADC_Start_DMA+0x214>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d11b      	bne.n	800254c <HAL_ADC_Start_DMA+0x1f0>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d114      	bne.n	800254c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002530:	609a      	str	r2, [r3, #8]
 8002532:	e00b      	b.n	800254c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002538:	f043 0210 	orr.w	r2, r3, #16
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002544:	f043 0201 	orr.w	r2, r3, #1
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000000 	.word	0x20000000
 800255c:	431bde83 	.word	0x431bde83
 8002560:	40012300 	.word	0x40012300
 8002564:	08002a15 	.word	0x08002a15
 8002568:	08002acf 	.word	0x08002acf
 800256c:	08002aeb 	.word	0x08002aeb
 8002570:	40012000 	.word	0x40012000
 8002574:	40012100 	.word	0x40012100
 8002578:	40012200 	.word	0x40012200

0800257c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x1c>
 80025d0:	2302      	movs	r3, #2
 80025d2:	e113      	b.n	80027fc <HAL_ADC_ConfigChannel+0x244>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b09      	cmp	r3, #9
 80025e2:	d925      	bls.n	8002630 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68d9      	ldr	r1, [r3, #12]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	461a      	mov	r2, r3
 80025f2:	4613      	mov	r3, r2
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	4413      	add	r3, r2
 80025f8:	3b1e      	subs	r3, #30
 80025fa:	2207      	movs	r2, #7
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43da      	mvns	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	400a      	ands	r2, r1
 8002608:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68d9      	ldr	r1, [r3, #12]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	b29b      	uxth	r3, r3
 800261a:	4618      	mov	r0, r3
 800261c:	4603      	mov	r3, r0
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	4403      	add	r3, r0
 8002622:	3b1e      	subs	r3, #30
 8002624:	409a      	lsls	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	e022      	b.n	8002676 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6919      	ldr	r1, [r3, #16]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	b29b      	uxth	r3, r3
 800263c:	461a      	mov	r2, r3
 800263e:	4613      	mov	r3, r2
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	4413      	add	r3, r2
 8002644:	2207      	movs	r2, #7
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43da      	mvns	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	400a      	ands	r2, r1
 8002652:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6919      	ldr	r1, [r3, #16]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	4618      	mov	r0, r3
 8002666:	4603      	mov	r3, r0
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	4403      	add	r3, r0
 800266c:	409a      	lsls	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b06      	cmp	r3, #6
 800267c:	d824      	bhi.n	80026c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	3b05      	subs	r3, #5
 8002690:	221f      	movs	r2, #31
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43da      	mvns	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	400a      	ands	r2, r1
 800269e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	4618      	mov	r0, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	3b05      	subs	r3, #5
 80026ba:	fa00 f203 	lsl.w	r2, r0, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	635a      	str	r2, [r3, #52]	; 0x34
 80026c6:	e04c      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b0c      	cmp	r3, #12
 80026ce:	d824      	bhi.n	800271a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	3b23      	subs	r3, #35	; 0x23
 80026e2:	221f      	movs	r2, #31
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43da      	mvns	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	400a      	ands	r2, r1
 80026f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	4618      	mov	r0, r3
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	3b23      	subs	r3, #35	; 0x23
 800270c:	fa00 f203 	lsl.w	r2, r0, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	631a      	str	r2, [r3, #48]	; 0x30
 8002718:	e023      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	3b41      	subs	r3, #65	; 0x41
 800272c:	221f      	movs	r2, #31
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43da      	mvns	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	400a      	ands	r2, r1
 800273a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	b29b      	uxth	r3, r3
 8002748:	4618      	mov	r0, r3
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	3b41      	subs	r3, #65	; 0x41
 8002756:	fa00 f203 	lsl.w	r2, r0, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002762:	4b29      	ldr	r3, [pc, #164]	; (8002808 <HAL_ADC_ConfigChannel+0x250>)
 8002764:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a28      	ldr	r2, [pc, #160]	; (800280c <HAL_ADC_ConfigChannel+0x254>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d10f      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x1d8>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b12      	cmp	r3, #18
 8002776:	d10b      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a1d      	ldr	r2, [pc, #116]	; (800280c <HAL_ADC_ConfigChannel+0x254>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d12b      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x23a>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a1c      	ldr	r2, [pc, #112]	; (8002810 <HAL_ADC_ConfigChannel+0x258>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d003      	beq.n	80027ac <HAL_ADC_ConfigChannel+0x1f4>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b11      	cmp	r3, #17
 80027aa:	d122      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a11      	ldr	r2, [pc, #68]	; (8002810 <HAL_ADC_ConfigChannel+0x258>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d111      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027ce:	4b11      	ldr	r3, [pc, #68]	; (8002814 <HAL_ADC_ConfigChannel+0x25c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a11      	ldr	r2, [pc, #68]	; (8002818 <HAL_ADC_ConfigChannel+0x260>)
 80027d4:	fba2 2303 	umull	r2, r3, r2, r3
 80027d8:	0c9a      	lsrs	r2, r3, #18
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027e4:	e002      	b.n	80027ec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	3b01      	subs	r3, #1
 80027ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f9      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	40012300 	.word	0x40012300
 800280c:	40012000 	.word	0x40012000
 8002810:	10000012 	.word	0x10000012
 8002814:	20000000 	.word	0x20000000
 8002818:	431bde83 	.word	0x431bde83

0800281c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002824:	4b79      	ldr	r3, [pc, #484]	; (8002a0c <ADC_Init+0x1f0>)
 8002826:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	431a      	orrs	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002850:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6859      	ldr	r1, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	021a      	lsls	r2, r3, #8
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002874:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6859      	ldr	r1, [r3, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002896:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6899      	ldr	r1, [r3, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ae:	4a58      	ldr	r2, [pc, #352]	; (8002a10 <ADC_Init+0x1f4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d022      	beq.n	80028fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6899      	ldr	r1, [r3, #8]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6899      	ldr	r1, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	e00f      	b.n	800291a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002908:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002918:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0202 	bic.w	r2, r2, #2
 8002928:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6899      	ldr	r1, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	7e1b      	ldrb	r3, [r3, #24]
 8002934:	005a      	lsls	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d01b      	beq.n	8002980 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002956:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002966:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6859      	ldr	r1, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	3b01      	subs	r3, #1
 8002974:	035a      	lsls	r2, r3, #13
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	e007      	b.n	8002990 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800298e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800299e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	051a      	lsls	r2, r3, #20
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6899      	ldr	r1, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029d2:	025a      	lsls	r2, r3, #9
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6899      	ldr	r1, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	029a      	lsls	r2, r3, #10
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	609a      	str	r2, [r3, #8]
}
 8002a00:	bf00      	nop
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	40012300 	.word	0x40012300
 8002a10:	0f000001 	.word	0x0f000001

08002a14 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a20:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d13c      	bne.n	8002aa8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d12b      	bne.n	8002aa0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d127      	bne.n	8002aa0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a56:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d006      	beq.n	8002a6c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d119      	bne.n	8002aa0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0220 	bic.w	r2, r2, #32
 8002a7a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d105      	bne.n	8002aa0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	f043 0201 	orr.w	r2, r3, #1
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f7ff fd6b 	bl	800257c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002aa6:	e00e      	b.n	8002ac6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	f003 0310 	and.w	r3, r3, #16
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f7ff fd75 	bl	80025a4 <HAL_ADC_ErrorCallback>
}
 8002aba:	e004      	b.n	8002ac6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	4798      	blx	r3
}
 8002ac6:	bf00      	nop
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b084      	sub	sp, #16
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ada:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f7ff fd57 	bl	8002590 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b084      	sub	sp, #16
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2240      	movs	r2, #64	; 0x40
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	f043 0204 	orr.w	r2, r3, #4
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f7ff fd4a 	bl	80025a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b10:	bf00      	nop
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e0ed      	b.n	8002d06 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d102      	bne.n	8002b3c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff f94c 	bl	8001dd4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b4c:	f7ff fb92 	bl	8002274 <HAL_GetTick>
 8002b50:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b52:	e012      	b.n	8002b7a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b54:	f7ff fb8e 	bl	8002274 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b0a      	cmp	r3, #10
 8002b60:	d90b      	bls.n	8002b7a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2205      	movs	r2, #5
 8002b72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e0c5      	b.n	8002d06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0e5      	beq.n	8002b54 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0202 	bic.w	r2, r2, #2
 8002b96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b98:	f7ff fb6c 	bl	8002274 <HAL_GetTick>
 8002b9c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b9e:	e012      	b.n	8002bc6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ba0:	f7ff fb68 	bl	8002274 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b0a      	cmp	r3, #10
 8002bac:	d90b      	bls.n	8002bc6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2205      	movs	r2, #5
 8002bbe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e09f      	b.n	8002d06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1e5      	bne.n	8002ba0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	7e1b      	ldrb	r3, [r3, #24]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d108      	bne.n	8002bee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	e007      	b.n	8002bfe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	7e5b      	ldrb	r3, [r3, #25]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d108      	bne.n	8002c18 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	e007      	b.n	8002c28 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c26:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	7e9b      	ldrb	r3, [r3, #26]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d108      	bne.n	8002c42 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0220 	orr.w	r2, r2, #32
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	e007      	b.n	8002c52 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0220 	bic.w	r2, r2, #32
 8002c50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	7edb      	ldrb	r3, [r3, #27]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d108      	bne.n	8002c6c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0210 	bic.w	r2, r2, #16
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	e007      	b.n	8002c7c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0210 	orr.w	r2, r2, #16
 8002c7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	7f1b      	ldrb	r3, [r3, #28]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d108      	bne.n	8002c96 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0208 	orr.w	r2, r2, #8
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	e007      	b.n	8002ca6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0208 	bic.w	r2, r2, #8
 8002ca4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	7f5b      	ldrb	r3, [r3, #29]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d108      	bne.n	8002cc0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f042 0204 	orr.w	r2, r2, #4
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	e007      	b.n	8002cd0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0204 	bic.w	r2, r2, #4
 8002cce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	ea42 0103 	orr.w	r1, r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	1e5a      	subs	r2, r3, #1
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b087      	sub	sp, #28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d26:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002d28:	7cfb      	ldrb	r3, [r7, #19]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d003      	beq.n	8002d36 <HAL_CAN_ConfigFilter+0x26>
 8002d2e:	7cfb      	ldrb	r3, [r7, #19]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	f040 80be 	bne.w	8002eb2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002d36:	4b65      	ldr	r3, [pc, #404]	; (8002ecc <HAL_CAN_ConfigFilter+0x1bc>)
 8002d38:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d40:	f043 0201 	orr.w	r2, r3, #1
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d50:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	431a      	orrs	r2, r3
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f003 031f 	and.w	r3, r3, #31
 8002d76:	2201      	movs	r2, #1
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	401a      	ands	r2, r3
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d123      	bne.n	8002de0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	43db      	mvns	r3, r3
 8002da2:	401a      	ands	r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002dba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	3248      	adds	r2, #72	; 0x48
 8002dc0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002dd4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002dd6:	6979      	ldr	r1, [r7, #20]
 8002dd8:	3348      	adds	r3, #72	; 0x48
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	440b      	add	r3, r1
 8002dde:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d122      	bne.n	8002e2e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	431a      	orrs	r2, r3
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e08:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	3248      	adds	r2, #72	; 0x48
 8002e0e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e22:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e24:	6979      	ldr	r1, [r7, #20]
 8002e26:	3348      	adds	r3, #72	; 0x48
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	440b      	add	r3, r1
 8002e2c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	401a      	ands	r2, r3
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002e48:	e007      	b.n	8002e5a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d109      	bne.n	8002e76 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	401a      	ands	r2, r3
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002e74:	e007      	b.n	8002e86 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d107      	bne.n	8002e9e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ea4:	f023 0201 	bic.w	r2, r3, #1
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	e006      	b.n	8002ec0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
  }
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	371c      	adds	r7, #28
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	40006400 	.word	0x40006400

08002ed0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d12e      	bne.n	8002f42 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0201 	bic.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002efc:	f7ff f9ba 	bl	8002274 <HAL_GetTick>
 8002f00:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f02:	e012      	b.n	8002f2a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f04:	f7ff f9b6 	bl	8002274 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b0a      	cmp	r3, #10
 8002f10:	d90b      	bls.n	8002f2a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2205      	movs	r2, #5
 8002f22:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e012      	b.n	8002f50 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1e5      	bne.n	8002f04 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	e006      	b.n	8002f50 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
  }
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b089      	sub	sp, #36	; 0x24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f6c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f76:	7ffb      	ldrb	r3, [r7, #31]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d003      	beq.n	8002f84 <HAL_CAN_AddTxMessage+0x2c>
 8002f7c:	7ffb      	ldrb	r3, [r7, #31]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	f040 80b8 	bne.w	80030f4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10a      	bne.n	8002fa4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d105      	bne.n	8002fa4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 80a0 	beq.w	80030e4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	0e1b      	lsrs	r3, r3, #24
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d907      	bls.n	8002fc4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e09e      	b.n	8003102 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	409a      	lsls	r2, r3
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10d      	bne.n	8002ff2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002fe0:	68f9      	ldr	r1, [r7, #12]
 8002fe2:	6809      	ldr	r1, [r1, #0]
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	3318      	adds	r3, #24
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	440b      	add	r3, r1
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	e00f      	b.n	8003012 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ffc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003002:	68f9      	ldr	r1, [r7, #12]
 8003004:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003006:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	3318      	adds	r3, #24
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	440b      	add	r3, r1
 8003010:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6819      	ldr	r1, [r3, #0]
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	691a      	ldr	r2, [r3, #16]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	3318      	adds	r3, #24
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	440b      	add	r3, r1
 8003022:	3304      	adds	r3, #4
 8003024:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	7d1b      	ldrb	r3, [r3, #20]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d111      	bne.n	8003052 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	3318      	adds	r3, #24
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	4413      	add	r3, r2
 800303a:	3304      	adds	r3, #4
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	6811      	ldr	r1, [r2, #0]
 8003042:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	3318      	adds	r3, #24
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	440b      	add	r3, r1
 800304e:	3304      	adds	r3, #4
 8003050:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3307      	adds	r3, #7
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	061a      	lsls	r2, r3, #24
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3306      	adds	r3, #6
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	041b      	lsls	r3, r3, #16
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3305      	adds	r3, #5
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	021b      	lsls	r3, r3, #8
 800306c:	4313      	orrs	r3, r2
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	3204      	adds	r2, #4
 8003072:	7812      	ldrb	r2, [r2, #0]
 8003074:	4610      	mov	r0, r2
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	6811      	ldr	r1, [r2, #0]
 800307a:	ea43 0200 	orr.w	r2, r3, r0
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	440b      	add	r3, r1
 8003084:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003088:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3303      	adds	r3, #3
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	061a      	lsls	r2, r3, #24
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3302      	adds	r3, #2
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	041b      	lsls	r3, r3, #16
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3301      	adds	r3, #1
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	021b      	lsls	r3, r3, #8
 80030a4:	4313      	orrs	r3, r2
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	7812      	ldrb	r2, [r2, #0]
 80030aa:	4610      	mov	r0, r2
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	6811      	ldr	r1, [r2, #0]
 80030b0:	ea43 0200 	orr.w	r2, r3, r0
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	440b      	add	r3, r1
 80030ba:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80030be:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	3318      	adds	r3, #24
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	4413      	add	r3, r2
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	6811      	ldr	r1, [r2, #0]
 80030d2:	f043 0201 	orr.w	r2, r3, #1
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	3318      	adds	r3, #24
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	440b      	add	r3, r1
 80030de:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	e00e      	b.n	8003102 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e006      	b.n	8003102 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
  }
}
 8003102:	4618      	mov	r0, r3
 8003104:	3724      	adds	r7, #36	; 0x24
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800310e:	b480      	push	{r7}
 8003110:	b085      	sub	sp, #20
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003120:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003122:	7afb      	ldrb	r3, [r7, #11]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d002      	beq.n	800312e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003128:	7afb      	ldrb	r3, [r7, #11]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d11d      	bne.n	800316a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	3301      	adds	r3, #1
 8003140:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d002      	beq.n	8003156 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	3301      	adds	r3, #1
 8003154:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	3301      	adds	r3, #1
 8003168:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800316a:	68fb      	ldr	r3, [r7, #12]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003178:	b480      	push	{r7}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
 8003184:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f893 3020 	ldrb.w	r3, [r3, #32]
 800318c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800318e:	7dfb      	ldrb	r3, [r7, #23]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d003      	beq.n	800319c <HAL_CAN_GetRxMessage+0x24>
 8003194:	7dfb      	ldrb	r3, [r7, #23]
 8003196:	2b02      	cmp	r3, #2
 8003198:	f040 80f3 	bne.w	8003382 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10e      	bne.n	80031c0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d116      	bne.n	80031de <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e0e7      	b.n	8003390 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d107      	bne.n	80031de <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e0d8      	b.n	8003390 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	331b      	adds	r3, #27
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	4413      	add	r3, r2
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0204 	and.w	r2, r3, #4
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10c      	bne.n	8003216 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	331b      	adds	r3, #27
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	4413      	add	r3, r2
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	0d5b      	lsrs	r3, r3, #21
 800320c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	e00b      	b.n	800322e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	331b      	adds	r3, #27
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	4413      	add	r3, r2
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	08db      	lsrs	r3, r3, #3
 8003226:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	331b      	adds	r3, #27
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	4413      	add	r3, r2
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0202 	and.w	r2, r3, #2
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	331b      	adds	r3, #27
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	4413      	add	r3, r2
 8003250:	3304      	adds	r3, #4
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 020f 	and.w	r2, r3, #15
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	331b      	adds	r3, #27
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	4413      	add	r3, r2
 8003268:	3304      	adds	r3, #4
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	0a1b      	lsrs	r3, r3, #8
 800326e:	b2da      	uxtb	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	331b      	adds	r3, #27
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	4413      	add	r3, r2
 8003280:	3304      	adds	r3, #4
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	0c1b      	lsrs	r3, r3, #16
 8003286:	b29a      	uxth	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	4413      	add	r3, r2
 8003296:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	b2da      	uxtb	r2, r3
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	0a1a      	lsrs	r2, r3, #8
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	3301      	adds	r3, #1
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	0c1a      	lsrs	r2, r3, #16
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	3302      	adds	r3, #2
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	4413      	add	r3, r2
 80032e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	0e1a      	lsrs	r2, r3, #24
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	3303      	adds	r3, #3
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	3304      	adds	r3, #4
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	4413      	add	r3, r2
 8003312:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	0a1a      	lsrs	r2, r3, #8
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	3305      	adds	r3, #5
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	4413      	add	r3, r2
 800332c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	0c1a      	lsrs	r2, r3, #16
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	3306      	adds	r3, #6
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	4413      	add	r3, r2
 8003346:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	0e1a      	lsrs	r2, r3, #24
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	3307      	adds	r3, #7
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d108      	bne.n	800336e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0220 	orr.w	r2, r2, #32
 800336a:	60da      	str	r2, [r3, #12]
 800336c:	e007      	b.n	800337e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 0220 	orr.w	r2, r2, #32
 800337c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	e006      	b.n	8003390 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
  }
}
 8003390:	4618      	mov	r0, r3
 8003392:	371c      	adds	r7, #28
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033ac:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d002      	beq.n	80033ba <HAL_CAN_ActivateNotification+0x1e>
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d109      	bne.n	80033ce <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6959      	ldr	r1, [r3, #20]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	e006      	b.n	80033dc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
  }
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08a      	sub	sp, #40	; 0x28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80033f0:	2300      	movs	r3, #0
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d07c      	beq.n	8003528 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d023      	beq.n	8003480 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2201      	movs	r2, #1
 800343e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f983 	bl	8003756 <HAL_CAN_TxMailbox0CompleteCallback>
 8003450:	e016      	b.n	8003480 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	d004      	beq.n	8003466 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
 8003464:	e00c      	b.n	8003480 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b00      	cmp	r3, #0
 800346e:	d004      	beq.n	800347a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
 8003478:	e002      	b.n	8003480 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f989 	bl	8003792 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003486:	2b00      	cmp	r3, #0
 8003488:	d024      	beq.n	80034d4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003492:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f963 	bl	800376a <HAL_CAN_TxMailbox1CompleteCallback>
 80034a4:	e016      	b.n	80034d4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d004      	beq.n	80034ba <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
 80034b8:	e00c      	b.n	80034d4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d004      	beq.n	80034ce <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
 80034cc:	e002      	b.n	80034d4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f969 	bl	80037a6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d024      	beq.n	8003528 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80034e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f943 	bl	800377e <HAL_CAN_TxMailbox2CompleteCallback>
 80034f8:	e016      	b.n	8003528 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d004      	beq.n	800350e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
 800350c:	e00c      	b.n	8003528 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d004      	beq.n	8003522 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351e:	627b      	str	r3, [r7, #36]	; 0x24
 8003520:	e002      	b.n	8003528 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f949 	bl	80037ba <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00c      	beq.n	800354c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	2b00      	cmp	r3, #0
 800353a:	d007      	beq.n	800354c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003542:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2210      	movs	r2, #16
 800354a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00b      	beq.n	800356e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f003 0308 	and.w	r3, r3, #8
 800355c:	2b00      	cmp	r3, #0
 800355e:	d006      	beq.n	800356e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2208      	movs	r2, #8
 8003566:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f930 	bl	80037ce <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d009      	beq.n	800358c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7fd ff1c 	bl	80013c4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00c      	beq.n	80035b0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f003 0310 	and.w	r3, r3, #16
 800359c:	2b00      	cmp	r3, #0
 800359e:	d007      	beq.n	80035b0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2210      	movs	r2, #16
 80035ae:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00b      	beq.n	80035d2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d006      	beq.n	80035d2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2208      	movs	r2, #8
 80035ca:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f908 	bl	80037e2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d009      	beq.n	80035f0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fd fefc 	bl	80013e8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00b      	beq.n	8003612 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	f003 0310 	and.w	r3, r3, #16
 8003600:	2b00      	cmp	r3, #0
 8003602:	d006      	beq.n	8003612 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2210      	movs	r2, #16
 800360a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f8f2 	bl	80037f6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00b      	beq.n	8003634 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d006      	beq.n	8003634 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2208      	movs	r2, #8
 800362c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f8eb 	bl	800380a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d07b      	beq.n	8003736 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d072      	beq.n	800372e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364e:	2b00      	cmp	r3, #0
 8003650:	d008      	beq.n	8003664 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	f043 0301 	orr.w	r3, r3, #1
 8003662:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800366a:	2b00      	cmp	r3, #0
 800366c:	d008      	beq.n	8003680 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	f043 0302 	orr.w	r3, r3, #2
 800367e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003686:	2b00      	cmp	r3, #0
 8003688:	d008      	beq.n	800369c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	f043 0304 	orr.w	r3, r3, #4
 800369a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d043      	beq.n	800372e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d03e      	beq.n	800372e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036b6:	2b60      	cmp	r3, #96	; 0x60
 80036b8:	d02b      	beq.n	8003712 <HAL_CAN_IRQHandler+0x32a>
 80036ba:	2b60      	cmp	r3, #96	; 0x60
 80036bc:	d82e      	bhi.n	800371c <HAL_CAN_IRQHandler+0x334>
 80036be:	2b50      	cmp	r3, #80	; 0x50
 80036c0:	d022      	beq.n	8003708 <HAL_CAN_IRQHandler+0x320>
 80036c2:	2b50      	cmp	r3, #80	; 0x50
 80036c4:	d82a      	bhi.n	800371c <HAL_CAN_IRQHandler+0x334>
 80036c6:	2b40      	cmp	r3, #64	; 0x40
 80036c8:	d019      	beq.n	80036fe <HAL_CAN_IRQHandler+0x316>
 80036ca:	2b40      	cmp	r3, #64	; 0x40
 80036cc:	d826      	bhi.n	800371c <HAL_CAN_IRQHandler+0x334>
 80036ce:	2b30      	cmp	r3, #48	; 0x30
 80036d0:	d010      	beq.n	80036f4 <HAL_CAN_IRQHandler+0x30c>
 80036d2:	2b30      	cmp	r3, #48	; 0x30
 80036d4:	d822      	bhi.n	800371c <HAL_CAN_IRQHandler+0x334>
 80036d6:	2b10      	cmp	r3, #16
 80036d8:	d002      	beq.n	80036e0 <HAL_CAN_IRQHandler+0x2f8>
 80036da:	2b20      	cmp	r3, #32
 80036dc:	d005      	beq.n	80036ea <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80036de:	e01d      	b.n	800371c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	f043 0308 	orr.w	r3, r3, #8
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036e8:	e019      	b.n	800371e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	f043 0310 	orr.w	r3, r3, #16
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036f2:	e014      	b.n	800371e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	f043 0320 	orr.w	r3, r3, #32
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036fc:	e00f      	b.n	800371e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003706:	e00a      	b.n	800371e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003710:	e005      	b.n	800371e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800371a:	e000      	b.n	800371e <HAL_CAN_IRQHandler+0x336>
            break;
 800371c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	699a      	ldr	r2, [r3, #24]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800372c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2204      	movs	r2, #4
 8003734:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f868 	bl	800381e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800374e:	bf00      	nop
 8003750:	3728      	adds	r7, #40	; 0x28
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
	...

08003834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003844:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <__NVIC_SetPriorityGrouping+0x44>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003850:	4013      	ands	r3, r2
 8003852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800385c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003866:	4a04      	ldr	r2, [pc, #16]	; (8003878 <__NVIC_SetPriorityGrouping+0x44>)
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	60d3      	str	r3, [r2, #12]
}
 800386c:	bf00      	nop
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	e000ed00 	.word	0xe000ed00

0800387c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003880:	4b04      	ldr	r3, [pc, #16]	; (8003894 <__NVIC_GetPriorityGrouping+0x18>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	0a1b      	lsrs	r3, r3, #8
 8003886:	f003 0307 	and.w	r3, r3, #7
}
 800388a:	4618      	mov	r0, r3
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	db0b      	blt.n	80038c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038aa:	79fb      	ldrb	r3, [r7, #7]
 80038ac:	f003 021f 	and.w	r2, r3, #31
 80038b0:	4907      	ldr	r1, [pc, #28]	; (80038d0 <__NVIC_EnableIRQ+0x38>)
 80038b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	2001      	movs	r0, #1
 80038ba:	fa00 f202 	lsl.w	r2, r0, r2
 80038be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	e000e100 	.word	0xe000e100

080038d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	6039      	str	r1, [r7, #0]
 80038de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	db0a      	blt.n	80038fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	490c      	ldr	r1, [pc, #48]	; (8003920 <__NVIC_SetPriority+0x4c>)
 80038ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f2:	0112      	lsls	r2, r2, #4
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	440b      	add	r3, r1
 80038f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038fc:	e00a      	b.n	8003914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	b2da      	uxtb	r2, r3
 8003902:	4908      	ldr	r1, [pc, #32]	; (8003924 <__NVIC_SetPriority+0x50>)
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	3b04      	subs	r3, #4
 800390c:	0112      	lsls	r2, r2, #4
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	440b      	add	r3, r1
 8003912:	761a      	strb	r2, [r3, #24]
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	e000e100 	.word	0xe000e100
 8003924:	e000ed00 	.word	0xe000ed00

08003928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003928:	b480      	push	{r7}
 800392a:	b089      	sub	sp, #36	; 0x24
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f1c3 0307 	rsb	r3, r3, #7
 8003942:	2b04      	cmp	r3, #4
 8003944:	bf28      	it	cs
 8003946:	2304      	movcs	r3, #4
 8003948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	3304      	adds	r3, #4
 800394e:	2b06      	cmp	r3, #6
 8003950:	d902      	bls.n	8003958 <NVIC_EncodePriority+0x30>
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	3b03      	subs	r3, #3
 8003956:	e000      	b.n	800395a <NVIC_EncodePriority+0x32>
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800395c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	43da      	mvns	r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	401a      	ands	r2, r3
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003970:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	fa01 f303 	lsl.w	r3, r1, r3
 800397a:	43d9      	mvns	r1, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003980:	4313      	orrs	r3, r2
         );
}
 8003982:	4618      	mov	r0, r3
 8003984:	3724      	adds	r7, #36	; 0x24
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
	...

08003990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3b01      	subs	r3, #1
 800399c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039a0:	d301      	bcc.n	80039a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039a2:	2301      	movs	r3, #1
 80039a4:	e00f      	b.n	80039c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039a6:	4a0a      	ldr	r2, [pc, #40]	; (80039d0 <SysTick_Config+0x40>)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039ae:	210f      	movs	r1, #15
 80039b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039b4:	f7ff ff8e 	bl	80038d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <SysTick_Config+0x40>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039be:	4b04      	ldr	r3, [pc, #16]	; (80039d0 <SysTick_Config+0x40>)
 80039c0:	2207      	movs	r2, #7
 80039c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	e000e010 	.word	0xe000e010

080039d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff ff29 	bl	8003834 <__NVIC_SetPriorityGrouping>
}
 80039e2:	bf00      	nop
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b086      	sub	sp, #24
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	4603      	mov	r3, r0
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	607a      	str	r2, [r7, #4]
 80039f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039fc:	f7ff ff3e 	bl	800387c <__NVIC_GetPriorityGrouping>
 8003a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	68b9      	ldr	r1, [r7, #8]
 8003a06:	6978      	ldr	r0, [r7, #20]
 8003a08:	f7ff ff8e 	bl	8003928 <NVIC_EncodePriority>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a12:	4611      	mov	r1, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff ff5d 	bl	80038d4 <__NVIC_SetPriority>
}
 8003a1a:	bf00      	nop
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	4603      	mov	r3, r0
 8003a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff ff31 	bl	8003898 <__NVIC_EnableIRQ>
}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b082      	sub	sp, #8
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff ffa2 	bl	8003990 <SysTick_Config>
 8003a4c:	4603      	mov	r3, r0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a64:	f7fe fc06 	bl	8002274 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e099      	b.n	8003ba8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0201 	bic.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a94:	e00f      	b.n	8003ab6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a96:	f7fe fbed 	bl	8002274 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b05      	cmp	r3, #5
 8003aa2:	d908      	bls.n	8003ab6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2203      	movs	r2, #3
 8003aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e078      	b.n	8003ba8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1e8      	bne.n	8003a96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	4b38      	ldr	r3, [pc, #224]	; (8003bb0 <HAL_DMA_Init+0x158>)
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ae2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003afa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d107      	bne.n	8003b20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f023 0307 	bic.w	r3, r3, #7
 8003b36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d117      	bne.n	8003b7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00e      	beq.n	8003b7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fa6f 	bl	8004040 <DMA_CheckFifoParam>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2240      	movs	r2, #64	; 0x40
 8003b6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b76:	2301      	movs	r3, #1
 8003b78:	e016      	b.n	8003ba8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 fa26 	bl	8003fd4 <DMA_CalcBaseAndBitshift>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b90:	223f      	movs	r2, #63	; 0x3f
 8003b92:	409a      	lsls	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	f010803f 	.word	0xf010803f

08003bb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d101      	bne.n	8003bda <HAL_DMA_Start_IT+0x26>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e040      	b.n	8003c5c <HAL_DMA_Start_IT+0xa8>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d12f      	bne.n	8003c4e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	68b9      	ldr	r1, [r7, #8]
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 f9b8 	bl	8003f78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0c:	223f      	movs	r2, #63	; 0x3f
 8003c0e:	409a      	lsls	r2, r3
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0216 	orr.w	r2, r2, #22
 8003c22:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d007      	beq.n	8003c3c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0208 	orr.w	r2, r2, #8
 8003c3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0201 	orr.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	e005      	b.n	8003c5a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c56:	2302      	movs	r3, #2
 8003c58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c70:	4b8e      	ldr	r3, [pc, #568]	; (8003eac <HAL_DMA_IRQHandler+0x248>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a8e      	ldr	r2, [pc, #568]	; (8003eb0 <HAL_DMA_IRQHandler+0x24c>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	0a9b      	lsrs	r3, r3, #10
 8003c7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8e:	2208      	movs	r2, #8
 8003c90:	409a      	lsls	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	4013      	ands	r3, r2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d01a      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d013      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0204 	bic.w	r2, r2, #4
 8003cb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cbc:	2208      	movs	r2, #8
 8003cbe:	409a      	lsls	r2, r3
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc8:	f043 0201 	orr.w	r2, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	409a      	lsls	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d012      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00b      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	409a      	lsls	r2, r3
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfe:	f043 0202 	orr.w	r2, r3, #2
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d0a:	2204      	movs	r2, #4
 8003d0c:	409a      	lsls	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4013      	ands	r3, r2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d012      	beq.n	8003d3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00b      	beq.n	8003d3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d28:	2204      	movs	r2, #4
 8003d2a:	409a      	lsls	r2, r3
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d34:	f043 0204 	orr.w	r2, r3, #4
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d40:	2210      	movs	r2, #16
 8003d42:	409a      	lsls	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d043      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d03c      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5e:	2210      	movs	r2, #16
 8003d60:	409a      	lsls	r2, r3
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d018      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d108      	bne.n	8003d94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d024      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	4798      	blx	r3
 8003d92:	e01f      	b.n	8003dd4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d01b      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	4798      	blx	r3
 8003da4:	e016      	b.n	8003dd4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d107      	bne.n	8003dc4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0208 	bic.w	r2, r2, #8
 8003dc2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd8:	2220      	movs	r2, #32
 8003dda:	409a      	lsls	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4013      	ands	r3, r2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 808f 	beq.w	8003f04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0310 	and.w	r3, r3, #16
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 8087 	beq.w	8003f04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	409a      	lsls	r2, r3
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b05      	cmp	r3, #5
 8003e0c:	d136      	bne.n	8003e7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0216 	bic.w	r2, r2, #22
 8003e1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695a      	ldr	r2, [r3, #20]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d103      	bne.n	8003e3e <HAL_DMA_IRQHandler+0x1da>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d007      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0208 	bic.w	r2, r2, #8
 8003e4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e52:	223f      	movs	r2, #63	; 0x3f
 8003e54:	409a      	lsls	r2, r3
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d07e      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	4798      	blx	r3
        }
        return;
 8003e7a:	e079      	b.n	8003f70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d01d      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10d      	bne.n	8003eb4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d031      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	4798      	blx	r3
 8003ea8:	e02c      	b.n	8003f04 <HAL_DMA_IRQHandler+0x2a0>
 8003eaa:	bf00      	nop
 8003eac:	20000000 	.word	0x20000000
 8003eb0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d023      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	4798      	blx	r3
 8003ec4:	e01e      	b.n	8003f04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10f      	bne.n	8003ef4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0210 	bic.w	r2, r2, #16
 8003ee2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d032      	beq.n	8003f72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d022      	beq.n	8003f5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2205      	movs	r2, #5
 8003f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0201 	bic.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	3301      	adds	r3, #1
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d307      	bcc.n	8003f4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f2      	bne.n	8003f30 <HAL_DMA_IRQHandler+0x2cc>
 8003f4a:	e000      	b.n	8003f4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d005      	beq.n	8003f72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	4798      	blx	r3
 8003f6e:	e000      	b.n	8003f72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f70:	bf00      	nop
    }
  }
}
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	2b40      	cmp	r3, #64	; 0x40
 8003fa4:	d108      	bne.n	8003fb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003fb6:	e007      	b.n	8003fc8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	60da      	str	r2, [r3, #12]
}
 8003fc8:	bf00      	nop
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	3b10      	subs	r3, #16
 8003fe4:	4a14      	ldr	r2, [pc, #80]	; (8004038 <DMA_CalcBaseAndBitshift+0x64>)
 8003fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fea:	091b      	lsrs	r3, r3, #4
 8003fec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003fee:	4a13      	ldr	r2, [pc, #76]	; (800403c <DMA_CalcBaseAndBitshift+0x68>)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	d909      	bls.n	8004016 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800400a:	f023 0303 	bic.w	r3, r3, #3
 800400e:	1d1a      	adds	r2, r3, #4
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	659a      	str	r2, [r3, #88]	; 0x58
 8004014:	e007      	b.n	8004026 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800401e:	f023 0303 	bic.w	r3, r3, #3
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	aaaaaaab 	.word	0xaaaaaaab
 800403c:	08008644 	.word	0x08008644

08004040 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004048:	2300      	movs	r3, #0
 800404a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004050:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d11f      	bne.n	800409a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b03      	cmp	r3, #3
 800405e:	d856      	bhi.n	800410e <DMA_CheckFifoParam+0xce>
 8004060:	a201      	add	r2, pc, #4	; (adr r2, 8004068 <DMA_CheckFifoParam+0x28>)
 8004062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004066:	bf00      	nop
 8004068:	08004079 	.word	0x08004079
 800406c:	0800408b 	.word	0x0800408b
 8004070:	08004079 	.word	0x08004079
 8004074:	0800410f 	.word	0x0800410f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d046      	beq.n	8004112 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004088:	e043      	b.n	8004112 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004092:	d140      	bne.n	8004116 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004098:	e03d      	b.n	8004116 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a2:	d121      	bne.n	80040e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d837      	bhi.n	800411a <DMA_CheckFifoParam+0xda>
 80040aa:	a201      	add	r2, pc, #4	; (adr r2, 80040b0 <DMA_CheckFifoParam+0x70>)
 80040ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b0:	080040c1 	.word	0x080040c1
 80040b4:	080040c7 	.word	0x080040c7
 80040b8:	080040c1 	.word	0x080040c1
 80040bc:	080040d9 	.word	0x080040d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	73fb      	strb	r3, [r7, #15]
      break;
 80040c4:	e030      	b.n	8004128 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d025      	beq.n	800411e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040d6:	e022      	b.n	800411e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040e0:	d11f      	bne.n	8004122 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040e6:	e01c      	b.n	8004122 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d903      	bls.n	80040f6 <DMA_CheckFifoParam+0xb6>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d003      	beq.n	80040fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80040f4:	e018      	b.n	8004128 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	73fb      	strb	r3, [r7, #15]
      break;
 80040fa:	e015      	b.n	8004128 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00e      	beq.n	8004126 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	73fb      	strb	r3, [r7, #15]
      break;
 800410c:	e00b      	b.n	8004126 <DMA_CheckFifoParam+0xe6>
      break;
 800410e:	bf00      	nop
 8004110:	e00a      	b.n	8004128 <DMA_CheckFifoParam+0xe8>
      break;
 8004112:	bf00      	nop
 8004114:	e008      	b.n	8004128 <DMA_CheckFifoParam+0xe8>
      break;
 8004116:	bf00      	nop
 8004118:	e006      	b.n	8004128 <DMA_CheckFifoParam+0xe8>
      break;
 800411a:	bf00      	nop
 800411c:	e004      	b.n	8004128 <DMA_CheckFifoParam+0xe8>
      break;
 800411e:	bf00      	nop
 8004120:	e002      	b.n	8004128 <DMA_CheckFifoParam+0xe8>
      break;   
 8004122:	bf00      	nop
 8004124:	e000      	b.n	8004128 <DMA_CheckFifoParam+0xe8>
      break;
 8004126:	bf00      	nop
    }
  } 
  
  return status; 
 8004128:	7bfb      	ldrb	r3, [r7, #15]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop

08004138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004138:	b480      	push	{r7}
 800413a:	b089      	sub	sp, #36	; 0x24
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004142:	2300      	movs	r3, #0
 8004144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004146:	2300      	movs	r3, #0
 8004148:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800414a:	2300      	movs	r3, #0
 800414c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800414e:	2300      	movs	r3, #0
 8004150:	61fb      	str	r3, [r7, #28]
 8004152:	e165      	b.n	8004420 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004154:	2201      	movs	r2, #1
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	4013      	ands	r3, r2
 8004166:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	429a      	cmp	r2, r3
 800416e:	f040 8154 	bne.w	800441a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	2b01      	cmp	r3, #1
 800417c:	d005      	beq.n	800418a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004186:	2b02      	cmp	r3, #2
 8004188:	d130      	bne.n	80041ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	2203      	movs	r2, #3
 8004196:	fa02 f303 	lsl.w	r3, r2, r3
 800419a:	43db      	mvns	r3, r3
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	4013      	ands	r3, r2
 80041a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041c0:	2201      	movs	r2, #1
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	43db      	mvns	r3, r3
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4013      	ands	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	091b      	lsrs	r3, r3, #4
 80041d6:	f003 0201 	and.w	r2, r3, #1
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f003 0303 	and.w	r3, r3, #3
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d017      	beq.n	8004228 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	2203      	movs	r2, #3
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	43db      	mvns	r3, r3
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	4013      	ands	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	4313      	orrs	r3, r2
 8004220:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f003 0303 	and.w	r3, r3, #3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d123      	bne.n	800427c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	08da      	lsrs	r2, r3, #3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3208      	adds	r2, #8
 800423c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004240:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	220f      	movs	r2, #15
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	43db      	mvns	r3, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4013      	ands	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	691a      	ldr	r2, [r3, #16]
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	4313      	orrs	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	08da      	lsrs	r2, r3, #3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3208      	adds	r2, #8
 8004276:	69b9      	ldr	r1, [r7, #24]
 8004278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	2203      	movs	r2, #3
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	43db      	mvns	r3, r3
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	4013      	ands	r3, r2
 8004292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 0203 	and.w	r2, r3, #3
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 80ae 	beq.w	800441a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	4b5d      	ldr	r3, [pc, #372]	; (8004438 <HAL_GPIO_Init+0x300>)
 80042c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c6:	4a5c      	ldr	r2, [pc, #368]	; (8004438 <HAL_GPIO_Init+0x300>)
 80042c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042cc:	6453      	str	r3, [r2, #68]	; 0x44
 80042ce:	4b5a      	ldr	r3, [pc, #360]	; (8004438 <HAL_GPIO_Init+0x300>)
 80042d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042da:	4a58      	ldr	r2, [pc, #352]	; (800443c <HAL_GPIO_Init+0x304>)
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	089b      	lsrs	r3, r3, #2
 80042e0:	3302      	adds	r3, #2
 80042e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	220f      	movs	r2, #15
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	43db      	mvns	r3, r3
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	4013      	ands	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a4f      	ldr	r2, [pc, #316]	; (8004440 <HAL_GPIO_Init+0x308>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d025      	beq.n	8004352 <HAL_GPIO_Init+0x21a>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a4e      	ldr	r2, [pc, #312]	; (8004444 <HAL_GPIO_Init+0x30c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d01f      	beq.n	800434e <HAL_GPIO_Init+0x216>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a4d      	ldr	r2, [pc, #308]	; (8004448 <HAL_GPIO_Init+0x310>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d019      	beq.n	800434a <HAL_GPIO_Init+0x212>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a4c      	ldr	r2, [pc, #304]	; (800444c <HAL_GPIO_Init+0x314>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d013      	beq.n	8004346 <HAL_GPIO_Init+0x20e>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a4b      	ldr	r2, [pc, #300]	; (8004450 <HAL_GPIO_Init+0x318>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d00d      	beq.n	8004342 <HAL_GPIO_Init+0x20a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a4a      	ldr	r2, [pc, #296]	; (8004454 <HAL_GPIO_Init+0x31c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d007      	beq.n	800433e <HAL_GPIO_Init+0x206>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a49      	ldr	r2, [pc, #292]	; (8004458 <HAL_GPIO_Init+0x320>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d101      	bne.n	800433a <HAL_GPIO_Init+0x202>
 8004336:	2306      	movs	r3, #6
 8004338:	e00c      	b.n	8004354 <HAL_GPIO_Init+0x21c>
 800433a:	2307      	movs	r3, #7
 800433c:	e00a      	b.n	8004354 <HAL_GPIO_Init+0x21c>
 800433e:	2305      	movs	r3, #5
 8004340:	e008      	b.n	8004354 <HAL_GPIO_Init+0x21c>
 8004342:	2304      	movs	r3, #4
 8004344:	e006      	b.n	8004354 <HAL_GPIO_Init+0x21c>
 8004346:	2303      	movs	r3, #3
 8004348:	e004      	b.n	8004354 <HAL_GPIO_Init+0x21c>
 800434a:	2302      	movs	r3, #2
 800434c:	e002      	b.n	8004354 <HAL_GPIO_Init+0x21c>
 800434e:	2301      	movs	r3, #1
 8004350:	e000      	b.n	8004354 <HAL_GPIO_Init+0x21c>
 8004352:	2300      	movs	r3, #0
 8004354:	69fa      	ldr	r2, [r7, #28]
 8004356:	f002 0203 	and.w	r2, r2, #3
 800435a:	0092      	lsls	r2, r2, #2
 800435c:	4093      	lsls	r3, r2
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	4313      	orrs	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004364:	4935      	ldr	r1, [pc, #212]	; (800443c <HAL_GPIO_Init+0x304>)
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	089b      	lsrs	r3, r3, #2
 800436a:	3302      	adds	r3, #2
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004372:	4b3a      	ldr	r3, [pc, #232]	; (800445c <HAL_GPIO_Init+0x324>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	43db      	mvns	r3, r3
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	4013      	ands	r3, r2
 8004380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004396:	4a31      	ldr	r2, [pc, #196]	; (800445c <HAL_GPIO_Init+0x324>)
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800439c:	4b2f      	ldr	r3, [pc, #188]	; (800445c <HAL_GPIO_Init+0x324>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	43db      	mvns	r3, r3
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	4013      	ands	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	4313      	orrs	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043c0:	4a26      	ldr	r2, [pc, #152]	; (800445c <HAL_GPIO_Init+0x324>)
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043c6:	4b25      	ldr	r3, [pc, #148]	; (800445c <HAL_GPIO_Init+0x324>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	43db      	mvns	r3, r3
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	4013      	ands	r3, r2
 80043d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043ea:	4a1c      	ldr	r2, [pc, #112]	; (800445c <HAL_GPIO_Init+0x324>)
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043f0:	4b1a      	ldr	r3, [pc, #104]	; (800445c <HAL_GPIO_Init+0x324>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	43db      	mvns	r3, r3
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	4013      	ands	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d003      	beq.n	8004414 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	4313      	orrs	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004414:	4a11      	ldr	r2, [pc, #68]	; (800445c <HAL_GPIO_Init+0x324>)
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	3301      	adds	r3, #1
 800441e:	61fb      	str	r3, [r7, #28]
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	2b0f      	cmp	r3, #15
 8004424:	f67f ae96 	bls.w	8004154 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004428:	bf00      	nop
 800442a:	bf00      	nop
 800442c:	3724      	adds	r7, #36	; 0x24
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40023800 	.word	0x40023800
 800443c:	40013800 	.word	0x40013800
 8004440:	40020000 	.word	0x40020000
 8004444:	40020400 	.word	0x40020400
 8004448:	40020800 	.word	0x40020800
 800444c:	40020c00 	.word	0x40020c00
 8004450:	40021000 	.word	0x40021000
 8004454:	40021400 	.word	0x40021400
 8004458:	40021800 	.word	0x40021800
 800445c:	40013c00 	.word	0x40013c00

08004460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e0cc      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004474:	4b68      	ldr	r3, [pc, #416]	; (8004618 <HAL_RCC_ClockConfig+0x1b8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 030f 	and.w	r3, r3, #15
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d90c      	bls.n	800449c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004482:	4b65      	ldr	r3, [pc, #404]	; (8004618 <HAL_RCC_ClockConfig+0x1b8>)
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800448a:	4b63      	ldr	r3, [pc, #396]	; (8004618 <HAL_RCC_ClockConfig+0x1b8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d001      	beq.n	800449c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e0b8      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d020      	beq.n	80044ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044b4:	4b59      	ldr	r3, [pc, #356]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	4a58      	ldr	r2, [pc, #352]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80044ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0308 	and.w	r3, r3, #8
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044cc:	4b53      	ldr	r3, [pc, #332]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	4a52      	ldr	r2, [pc, #328]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d8:	4b50      	ldr	r3, [pc, #320]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	494d      	ldr	r1, [pc, #308]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d044      	beq.n	8004580 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d107      	bne.n	800450e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fe:	4b47      	ldr	r3, [pc, #284]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d119      	bne.n	800453e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e07f      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b02      	cmp	r3, #2
 8004514:	d003      	beq.n	800451e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800451a:	2b03      	cmp	r3, #3
 800451c:	d107      	bne.n	800452e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800451e:	4b3f      	ldr	r3, [pc, #252]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d109      	bne.n	800453e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e06f      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800452e:	4b3b      	ldr	r3, [pc, #236]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e067      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800453e:	4b37      	ldr	r3, [pc, #220]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f023 0203 	bic.w	r2, r3, #3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	4934      	ldr	r1, [pc, #208]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 800454c:	4313      	orrs	r3, r2
 800454e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004550:	f7fd fe90 	bl	8002274 <HAL_GetTick>
 8004554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004556:	e00a      	b.n	800456e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004558:	f7fd fe8c 	bl	8002274 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	f241 3288 	movw	r2, #5000	; 0x1388
 8004566:	4293      	cmp	r3, r2
 8004568:	d901      	bls.n	800456e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e04f      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800456e:	4b2b      	ldr	r3, [pc, #172]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 020c 	and.w	r2, r3, #12
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	429a      	cmp	r2, r3
 800457e:	d1eb      	bne.n	8004558 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004580:	4b25      	ldr	r3, [pc, #148]	; (8004618 <HAL_RCC_ClockConfig+0x1b8>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 030f 	and.w	r3, r3, #15
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d20c      	bcs.n	80045a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458e:	4b22      	ldr	r3, [pc, #136]	; (8004618 <HAL_RCC_ClockConfig+0x1b8>)
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004596:	4b20      	ldr	r3, [pc, #128]	; (8004618 <HAL_RCC_ClockConfig+0x1b8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d001      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e032      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d008      	beq.n	80045c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045b4:	4b19      	ldr	r3, [pc, #100]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	4916      	ldr	r1, [pc, #88]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0308 	and.w	r3, r3, #8
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d009      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045d2:	4b12      	ldr	r3, [pc, #72]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	490e      	ldr	r1, [pc, #56]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045e6:	f000 f855 	bl	8004694 <HAL_RCC_GetSysClockFreq>
 80045ea:	4602      	mov	r2, r0
 80045ec:	4b0b      	ldr	r3, [pc, #44]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	091b      	lsrs	r3, r3, #4
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	490a      	ldr	r1, [pc, #40]	; (8004620 <HAL_RCC_ClockConfig+0x1c0>)
 80045f8:	5ccb      	ldrb	r3, [r1, r3]
 80045fa:	fa22 f303 	lsr.w	r3, r2, r3
 80045fe:	4a09      	ldr	r2, [pc, #36]	; (8004624 <HAL_RCC_ClockConfig+0x1c4>)
 8004600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004602:	4b09      	ldr	r3, [pc, #36]	; (8004628 <HAL_RCC_ClockConfig+0x1c8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f7fd fdf0 	bl	80021ec <HAL_InitTick>

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40023c00 	.word	0x40023c00
 800461c:	40023800 	.word	0x40023800
 8004620:	0800862c 	.word	0x0800862c
 8004624:	20000000 	.word	0x20000000
 8004628:	20000004 	.word	0x20000004

0800462c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004630:	4b03      	ldr	r3, [pc, #12]	; (8004640 <HAL_RCC_GetHCLKFreq+0x14>)
 8004632:	681b      	ldr	r3, [r3, #0]
}
 8004634:	4618      	mov	r0, r3
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	20000000 	.word	0x20000000

08004644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004648:	f7ff fff0 	bl	800462c <HAL_RCC_GetHCLKFreq>
 800464c:	4602      	mov	r2, r0
 800464e:	4b05      	ldr	r3, [pc, #20]	; (8004664 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	0a9b      	lsrs	r3, r3, #10
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	4903      	ldr	r1, [pc, #12]	; (8004668 <HAL_RCC_GetPCLK1Freq+0x24>)
 800465a:	5ccb      	ldrb	r3, [r1, r3]
 800465c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004660:	4618      	mov	r0, r3
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40023800 	.word	0x40023800
 8004668:	0800863c 	.word	0x0800863c

0800466c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004670:	f7ff ffdc 	bl	800462c <HAL_RCC_GetHCLKFreq>
 8004674:	4602      	mov	r2, r0
 8004676:	4b05      	ldr	r3, [pc, #20]	; (800468c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	0b5b      	lsrs	r3, r3, #13
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	4903      	ldr	r1, [pc, #12]	; (8004690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004682:	5ccb      	ldrb	r3, [r1, r3]
 8004684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004688:	4618      	mov	r0, r3
 800468a:	bd80      	pop	{r7, pc}
 800468c:	40023800 	.word	0x40023800
 8004690:	0800863c 	.word	0x0800863c

08004694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004698:	b0ae      	sub	sp, #184	; 0xb8
 800469a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046ba:	4bcb      	ldr	r3, [pc, #812]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 030c 	and.w	r3, r3, #12
 80046c2:	2b0c      	cmp	r3, #12
 80046c4:	f200 8206 	bhi.w	8004ad4 <HAL_RCC_GetSysClockFreq+0x440>
 80046c8:	a201      	add	r2, pc, #4	; (adr r2, 80046d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80046ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ce:	bf00      	nop
 80046d0:	08004705 	.word	0x08004705
 80046d4:	08004ad5 	.word	0x08004ad5
 80046d8:	08004ad5 	.word	0x08004ad5
 80046dc:	08004ad5 	.word	0x08004ad5
 80046e0:	0800470d 	.word	0x0800470d
 80046e4:	08004ad5 	.word	0x08004ad5
 80046e8:	08004ad5 	.word	0x08004ad5
 80046ec:	08004ad5 	.word	0x08004ad5
 80046f0:	08004715 	.word	0x08004715
 80046f4:	08004ad5 	.word	0x08004ad5
 80046f8:	08004ad5 	.word	0x08004ad5
 80046fc:	08004ad5 	.word	0x08004ad5
 8004700:	08004905 	.word	0x08004905
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004704:	4bb9      	ldr	r3, [pc, #740]	; (80049ec <HAL_RCC_GetSysClockFreq+0x358>)
 8004706:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800470a:	e1e7      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800470c:	4bb8      	ldr	r3, [pc, #736]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800470e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004712:	e1e3      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004714:	4bb4      	ldr	r3, [pc, #720]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800471c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004720:	4bb1      	ldr	r3, [pc, #708]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d071      	beq.n	8004810 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800472c:	4bae      	ldr	r3, [pc, #696]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	099b      	lsrs	r3, r3, #6
 8004732:	2200      	movs	r2, #0
 8004734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004738:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800473c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004744:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004748:	2300      	movs	r3, #0
 800474a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800474e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004752:	4622      	mov	r2, r4
 8004754:	462b      	mov	r3, r5
 8004756:	f04f 0000 	mov.w	r0, #0
 800475a:	f04f 0100 	mov.w	r1, #0
 800475e:	0159      	lsls	r1, r3, #5
 8004760:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004764:	0150      	lsls	r0, r2, #5
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	4621      	mov	r1, r4
 800476c:	1a51      	subs	r1, r2, r1
 800476e:	6439      	str	r1, [r7, #64]	; 0x40
 8004770:	4629      	mov	r1, r5
 8004772:	eb63 0301 	sbc.w	r3, r3, r1
 8004776:	647b      	str	r3, [r7, #68]	; 0x44
 8004778:	f04f 0200 	mov.w	r2, #0
 800477c:	f04f 0300 	mov.w	r3, #0
 8004780:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004784:	4649      	mov	r1, r9
 8004786:	018b      	lsls	r3, r1, #6
 8004788:	4641      	mov	r1, r8
 800478a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800478e:	4641      	mov	r1, r8
 8004790:	018a      	lsls	r2, r1, #6
 8004792:	4641      	mov	r1, r8
 8004794:	1a51      	subs	r1, r2, r1
 8004796:	63b9      	str	r1, [r7, #56]	; 0x38
 8004798:	4649      	mov	r1, r9
 800479a:	eb63 0301 	sbc.w	r3, r3, r1
 800479e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047a0:	f04f 0200 	mov.w	r2, #0
 80047a4:	f04f 0300 	mov.w	r3, #0
 80047a8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80047ac:	4649      	mov	r1, r9
 80047ae:	00cb      	lsls	r3, r1, #3
 80047b0:	4641      	mov	r1, r8
 80047b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047b6:	4641      	mov	r1, r8
 80047b8:	00ca      	lsls	r2, r1, #3
 80047ba:	4610      	mov	r0, r2
 80047bc:	4619      	mov	r1, r3
 80047be:	4603      	mov	r3, r0
 80047c0:	4622      	mov	r2, r4
 80047c2:	189b      	adds	r3, r3, r2
 80047c4:	633b      	str	r3, [r7, #48]	; 0x30
 80047c6:	462b      	mov	r3, r5
 80047c8:	460a      	mov	r2, r1
 80047ca:	eb42 0303 	adc.w	r3, r2, r3
 80047ce:	637b      	str	r3, [r7, #52]	; 0x34
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80047dc:	4629      	mov	r1, r5
 80047de:	024b      	lsls	r3, r1, #9
 80047e0:	4621      	mov	r1, r4
 80047e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047e6:	4621      	mov	r1, r4
 80047e8:	024a      	lsls	r2, r1, #9
 80047ea:	4610      	mov	r0, r2
 80047ec:	4619      	mov	r1, r3
 80047ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047f2:	2200      	movs	r2, #0
 80047f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80047fc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004800:	f7fc fa42 	bl	8000c88 <__aeabi_uldivmod>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4613      	mov	r3, r2
 800480a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800480e:	e067      	b.n	80048e0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004810:	4b75      	ldr	r3, [pc, #468]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	099b      	lsrs	r3, r3, #6
 8004816:	2200      	movs	r2, #0
 8004818:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800481c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004820:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004828:	67bb      	str	r3, [r7, #120]	; 0x78
 800482a:	2300      	movs	r3, #0
 800482c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800482e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004832:	4622      	mov	r2, r4
 8004834:	462b      	mov	r3, r5
 8004836:	f04f 0000 	mov.w	r0, #0
 800483a:	f04f 0100 	mov.w	r1, #0
 800483e:	0159      	lsls	r1, r3, #5
 8004840:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004844:	0150      	lsls	r0, r2, #5
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	4621      	mov	r1, r4
 800484c:	1a51      	subs	r1, r2, r1
 800484e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004850:	4629      	mov	r1, r5
 8004852:	eb63 0301 	sbc.w	r3, r3, r1
 8004856:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004858:	f04f 0200 	mov.w	r2, #0
 800485c:	f04f 0300 	mov.w	r3, #0
 8004860:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004864:	4649      	mov	r1, r9
 8004866:	018b      	lsls	r3, r1, #6
 8004868:	4641      	mov	r1, r8
 800486a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800486e:	4641      	mov	r1, r8
 8004870:	018a      	lsls	r2, r1, #6
 8004872:	4641      	mov	r1, r8
 8004874:	ebb2 0a01 	subs.w	sl, r2, r1
 8004878:	4649      	mov	r1, r9
 800487a:	eb63 0b01 	sbc.w	fp, r3, r1
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	f04f 0300 	mov.w	r3, #0
 8004886:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800488a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800488e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004892:	4692      	mov	sl, r2
 8004894:	469b      	mov	fp, r3
 8004896:	4623      	mov	r3, r4
 8004898:	eb1a 0303 	adds.w	r3, sl, r3
 800489c:	623b      	str	r3, [r7, #32]
 800489e:	462b      	mov	r3, r5
 80048a0:	eb4b 0303 	adc.w	r3, fp, r3
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
 80048a6:	f04f 0200 	mov.w	r2, #0
 80048aa:	f04f 0300 	mov.w	r3, #0
 80048ae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80048b2:	4629      	mov	r1, r5
 80048b4:	028b      	lsls	r3, r1, #10
 80048b6:	4621      	mov	r1, r4
 80048b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048bc:	4621      	mov	r1, r4
 80048be:	028a      	lsls	r2, r1, #10
 80048c0:	4610      	mov	r0, r2
 80048c2:	4619      	mov	r1, r3
 80048c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048c8:	2200      	movs	r2, #0
 80048ca:	673b      	str	r3, [r7, #112]	; 0x70
 80048cc:	677a      	str	r2, [r7, #116]	; 0x74
 80048ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80048d2:	f7fc f9d9 	bl	8000c88 <__aeabi_uldivmod>
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	4613      	mov	r3, r2
 80048dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048e0:	4b41      	ldr	r3, [pc, #260]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	0c1b      	lsrs	r3, r3, #16
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	3301      	adds	r3, #1
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80048f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004902:	e0eb      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004904:	4b38      	ldr	r3, [pc, #224]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800490c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004910:	4b35      	ldr	r3, [pc, #212]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d06b      	beq.n	80049f4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800491c:	4b32      	ldr	r3, [pc, #200]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	099b      	lsrs	r3, r3, #6
 8004922:	2200      	movs	r2, #0
 8004924:	66bb      	str	r3, [r7, #104]	; 0x68
 8004926:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004928:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800492a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800492e:	663b      	str	r3, [r7, #96]	; 0x60
 8004930:	2300      	movs	r3, #0
 8004932:	667b      	str	r3, [r7, #100]	; 0x64
 8004934:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004938:	4622      	mov	r2, r4
 800493a:	462b      	mov	r3, r5
 800493c:	f04f 0000 	mov.w	r0, #0
 8004940:	f04f 0100 	mov.w	r1, #0
 8004944:	0159      	lsls	r1, r3, #5
 8004946:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800494a:	0150      	lsls	r0, r2, #5
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	4621      	mov	r1, r4
 8004952:	1a51      	subs	r1, r2, r1
 8004954:	61b9      	str	r1, [r7, #24]
 8004956:	4629      	mov	r1, r5
 8004958:	eb63 0301 	sbc.w	r3, r3, r1
 800495c:	61fb      	str	r3, [r7, #28]
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800496a:	4659      	mov	r1, fp
 800496c:	018b      	lsls	r3, r1, #6
 800496e:	4651      	mov	r1, sl
 8004970:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004974:	4651      	mov	r1, sl
 8004976:	018a      	lsls	r2, r1, #6
 8004978:	4651      	mov	r1, sl
 800497a:	ebb2 0801 	subs.w	r8, r2, r1
 800497e:	4659      	mov	r1, fp
 8004980:	eb63 0901 	sbc.w	r9, r3, r1
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004990:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004994:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004998:	4690      	mov	r8, r2
 800499a:	4699      	mov	r9, r3
 800499c:	4623      	mov	r3, r4
 800499e:	eb18 0303 	adds.w	r3, r8, r3
 80049a2:	613b      	str	r3, [r7, #16]
 80049a4:	462b      	mov	r3, r5
 80049a6:	eb49 0303 	adc.w	r3, r9, r3
 80049aa:	617b      	str	r3, [r7, #20]
 80049ac:	f04f 0200 	mov.w	r2, #0
 80049b0:	f04f 0300 	mov.w	r3, #0
 80049b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80049b8:	4629      	mov	r1, r5
 80049ba:	024b      	lsls	r3, r1, #9
 80049bc:	4621      	mov	r1, r4
 80049be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049c2:	4621      	mov	r1, r4
 80049c4:	024a      	lsls	r2, r1, #9
 80049c6:	4610      	mov	r0, r2
 80049c8:	4619      	mov	r1, r3
 80049ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049ce:	2200      	movs	r2, #0
 80049d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80049d2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80049d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049d8:	f7fc f956 	bl	8000c88 <__aeabi_uldivmod>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	4613      	mov	r3, r2
 80049e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049e6:	e065      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x420>
 80049e8:	40023800 	.word	0x40023800
 80049ec:	00f42400 	.word	0x00f42400
 80049f0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049f4:	4b3d      	ldr	r3, [pc, #244]	; (8004aec <HAL_RCC_GetSysClockFreq+0x458>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	099b      	lsrs	r3, r3, #6
 80049fa:	2200      	movs	r2, #0
 80049fc:	4618      	mov	r0, r3
 80049fe:	4611      	mov	r1, r2
 8004a00:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a04:	653b      	str	r3, [r7, #80]	; 0x50
 8004a06:	2300      	movs	r3, #0
 8004a08:	657b      	str	r3, [r7, #84]	; 0x54
 8004a0a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004a0e:	4642      	mov	r2, r8
 8004a10:	464b      	mov	r3, r9
 8004a12:	f04f 0000 	mov.w	r0, #0
 8004a16:	f04f 0100 	mov.w	r1, #0
 8004a1a:	0159      	lsls	r1, r3, #5
 8004a1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a20:	0150      	lsls	r0, r2, #5
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	4641      	mov	r1, r8
 8004a28:	1a51      	subs	r1, r2, r1
 8004a2a:	60b9      	str	r1, [r7, #8]
 8004a2c:	4649      	mov	r1, r9
 8004a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004a40:	4659      	mov	r1, fp
 8004a42:	018b      	lsls	r3, r1, #6
 8004a44:	4651      	mov	r1, sl
 8004a46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a4a:	4651      	mov	r1, sl
 8004a4c:	018a      	lsls	r2, r1, #6
 8004a4e:	4651      	mov	r1, sl
 8004a50:	1a54      	subs	r4, r2, r1
 8004a52:	4659      	mov	r1, fp
 8004a54:	eb63 0501 	sbc.w	r5, r3, r1
 8004a58:	f04f 0200 	mov.w	r2, #0
 8004a5c:	f04f 0300 	mov.w	r3, #0
 8004a60:	00eb      	lsls	r3, r5, #3
 8004a62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a66:	00e2      	lsls	r2, r4, #3
 8004a68:	4614      	mov	r4, r2
 8004a6a:	461d      	mov	r5, r3
 8004a6c:	4643      	mov	r3, r8
 8004a6e:	18e3      	adds	r3, r4, r3
 8004a70:	603b      	str	r3, [r7, #0]
 8004a72:	464b      	mov	r3, r9
 8004a74:	eb45 0303 	adc.w	r3, r5, r3
 8004a78:	607b      	str	r3, [r7, #4]
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a86:	4629      	mov	r1, r5
 8004a88:	028b      	lsls	r3, r1, #10
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a90:	4621      	mov	r1, r4
 8004a92:	028a      	lsls	r2, r1, #10
 8004a94:	4610      	mov	r0, r2
 8004a96:	4619      	mov	r1, r3
 8004a98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004aa0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004aa2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004aa6:	f7fc f8ef 	bl	8000c88 <__aeabi_uldivmod>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	4613      	mov	r3, r2
 8004ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004ab4:	4b0d      	ldr	r3, [pc, #52]	; (8004aec <HAL_RCC_GetSysClockFreq+0x458>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	0f1b      	lsrs	r3, r3, #28
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004ac2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ac6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ace:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004ad2:	e003      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ad4:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004ad6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004ada:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004adc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	37b8      	adds	r7, #184	; 0xb8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aea:	bf00      	nop
 8004aec:	40023800 	.word	0x40023800
 8004af0:	00f42400 	.word	0x00f42400

08004af4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e28d      	b.n	8005022 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 8083 	beq.w	8004c1a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b14:	4b94      	ldr	r3, [pc, #592]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 030c 	and.w	r3, r3, #12
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	d019      	beq.n	8004b54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b20:	4b91      	ldr	r3, [pc, #580]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d106      	bne.n	8004b3a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b2c:	4b8e      	ldr	r3, [pc, #568]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b38:	d00c      	beq.n	8004b54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b3a:	4b8b      	ldr	r3, [pc, #556]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b42:	2b0c      	cmp	r3, #12
 8004b44:	d112      	bne.n	8004b6c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b46:	4b88      	ldr	r3, [pc, #544]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b52:	d10b      	bne.n	8004b6c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b54:	4b84      	ldr	r3, [pc, #528]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d05b      	beq.n	8004c18 <HAL_RCC_OscConfig+0x124>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d157      	bne.n	8004c18 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e25a      	b.n	8005022 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b74:	d106      	bne.n	8004b84 <HAL_RCC_OscConfig+0x90>
 8004b76:	4b7c      	ldr	r3, [pc, #496]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a7b      	ldr	r2, [pc, #492]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b80:	6013      	str	r3, [r2, #0]
 8004b82:	e01d      	b.n	8004bc0 <HAL_RCC_OscConfig+0xcc>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b8c:	d10c      	bne.n	8004ba8 <HAL_RCC_OscConfig+0xb4>
 8004b8e:	4b76      	ldr	r3, [pc, #472]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a75      	ldr	r2, [pc, #468]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	4b73      	ldr	r3, [pc, #460]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a72      	ldr	r2, [pc, #456]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	e00b      	b.n	8004bc0 <HAL_RCC_OscConfig+0xcc>
 8004ba8:	4b6f      	ldr	r3, [pc, #444]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a6e      	ldr	r2, [pc, #440]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bb2:	6013      	str	r3, [r2, #0]
 8004bb4:	4b6c      	ldr	r3, [pc, #432]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a6b      	ldr	r2, [pc, #428]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d013      	beq.n	8004bf0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc8:	f7fd fb54 	bl	8002274 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bd0:	f7fd fb50 	bl	8002274 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b64      	cmp	r3, #100	; 0x64
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e21f      	b.n	8005022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004be2:	4b61      	ldr	r3, [pc, #388]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0f0      	beq.n	8004bd0 <HAL_RCC_OscConfig+0xdc>
 8004bee:	e014      	b.n	8004c1a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf0:	f7fd fb40 	bl	8002274 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bf8:	f7fd fb3c 	bl	8002274 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b64      	cmp	r3, #100	; 0x64
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e20b      	b.n	8005022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c0a:	4b57      	ldr	r3, [pc, #348]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1f0      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x104>
 8004c16:	e000      	b.n	8004c1a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d06f      	beq.n	8004d06 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c26:	4b50      	ldr	r3, [pc, #320]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 030c 	and.w	r3, r3, #12
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d017      	beq.n	8004c62 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c32:	4b4d      	ldr	r3, [pc, #308]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d105      	bne.n	8004c4a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c3e:	4b4a      	ldr	r3, [pc, #296]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00b      	beq.n	8004c62 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c4a:	4b47      	ldr	r3, [pc, #284]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c52:	2b0c      	cmp	r3, #12
 8004c54:	d11c      	bne.n	8004c90 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c56:	4b44      	ldr	r3, [pc, #272]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d116      	bne.n	8004c90 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c62:	4b41      	ldr	r3, [pc, #260]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d005      	beq.n	8004c7a <HAL_RCC_OscConfig+0x186>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d001      	beq.n	8004c7a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e1d3      	b.n	8005022 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c7a:	4b3b      	ldr	r3, [pc, #236]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	4937      	ldr	r1, [pc, #220]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c8e:	e03a      	b.n	8004d06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d020      	beq.n	8004cda <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c98:	4b34      	ldr	r3, [pc, #208]	; (8004d6c <HAL_RCC_OscConfig+0x278>)
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9e:	f7fd fae9 	bl	8002274 <HAL_GetTick>
 8004ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca4:	e008      	b.n	8004cb8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ca6:	f7fd fae5 	bl	8002274 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e1b4      	b.n	8005022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cb8:	4b2b      	ldr	r3, [pc, #172]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0f0      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc4:	4b28      	ldr	r3, [pc, #160]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	4925      	ldr	r1, [pc, #148]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	600b      	str	r3, [r1, #0]
 8004cd8:	e015      	b.n	8004d06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cda:	4b24      	ldr	r3, [pc, #144]	; (8004d6c <HAL_RCC_OscConfig+0x278>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce0:	f7fd fac8 	bl	8002274 <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ce8:	f7fd fac4 	bl	8002274 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e193      	b.n	8005022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cfa:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1f0      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d036      	beq.n	8004d80 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d016      	beq.n	8004d48 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d1a:	4b15      	ldr	r3, [pc, #84]	; (8004d70 <HAL_RCC_OscConfig+0x27c>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d20:	f7fd faa8 	bl	8002274 <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d28:	f7fd faa4 	bl	8002274 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e173      	b.n	8005022 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d3a:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0f0      	beq.n	8004d28 <HAL_RCC_OscConfig+0x234>
 8004d46:	e01b      	b.n	8004d80 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d48:	4b09      	ldr	r3, [pc, #36]	; (8004d70 <HAL_RCC_OscConfig+0x27c>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d4e:	f7fd fa91 	bl	8002274 <HAL_GetTick>
 8004d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d54:	e00e      	b.n	8004d74 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d56:	f7fd fa8d 	bl	8002274 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d907      	bls.n	8004d74 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e15c      	b.n	8005022 <HAL_RCC_OscConfig+0x52e>
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	42470000 	.word	0x42470000
 8004d70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d74:	4b8a      	ldr	r3, [pc, #552]	; (8004fa0 <HAL_RCC_OscConfig+0x4ac>)
 8004d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1ea      	bne.n	8004d56 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 8097 	beq.w	8004ebc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d92:	4b83      	ldr	r3, [pc, #524]	; (8004fa0 <HAL_RCC_OscConfig+0x4ac>)
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10f      	bne.n	8004dbe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60bb      	str	r3, [r7, #8]
 8004da2:	4b7f      	ldr	r3, [pc, #508]	; (8004fa0 <HAL_RCC_OscConfig+0x4ac>)
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	4a7e      	ldr	r2, [pc, #504]	; (8004fa0 <HAL_RCC_OscConfig+0x4ac>)
 8004da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dac:	6413      	str	r3, [r2, #64]	; 0x40
 8004dae:	4b7c      	ldr	r3, [pc, #496]	; (8004fa0 <HAL_RCC_OscConfig+0x4ac>)
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db6:	60bb      	str	r3, [r7, #8]
 8004db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dbe:	4b79      	ldr	r3, [pc, #484]	; (8004fa4 <HAL_RCC_OscConfig+0x4b0>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d118      	bne.n	8004dfc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dca:	4b76      	ldr	r3, [pc, #472]	; (8004fa4 <HAL_RCC_OscConfig+0x4b0>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a75      	ldr	r2, [pc, #468]	; (8004fa4 <HAL_RCC_OscConfig+0x4b0>)
 8004dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dd6:	f7fd fa4d 	bl	8002274 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dde:	f7fd fa49 	bl	8002274 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e118      	b.n	8005022 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df0:	4b6c      	ldr	r3, [pc, #432]	; (8004fa4 <HAL_RCC_OscConfig+0x4b0>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0f0      	beq.n	8004dde <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d106      	bne.n	8004e12 <HAL_RCC_OscConfig+0x31e>
 8004e04:	4b66      	ldr	r3, [pc, #408]	; (8004fa0 <HAL_RCC_OscConfig+0x4ac>)
 8004e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e08:	4a65      	ldr	r2, [pc, #404]	; (8004fa0 <HAL_RCC_OscConfig+0x4ac>)
 8004e0a:	f043 0301 	orr.w	r3, r3, #1
 8004e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e10:	e01c      	b.n	8004e4c <HAL_RCC_OscConfig+0x358>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b05      	cmp	r3, #5
 8004e18:	d10c      	bne.n	8004e34 <HAL_RCC_OscConfig+0x340>
 8004e1a:	4b61      	ldr	r3, [pc, #388]	; (8004fa0 <HAL_RCC_OscConfig+0x4ac>)
 8004e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1e:	4a60      	ldr	r2, [pc, #384]	; (8004fa0 <HAL_RCC_OscConfig+0x4ac>)
 8004e20:	f043 0304 	orr.w	r3, r3, #4
 8004e24:	6713      	str	r3, [r2, #112]	; 0x70
 8004e26:	4b5e      	ldr	r3, [pc, #376]	; (8004fa0 <HAL_RCC_OscConfig+0x4ac>)
 8004e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2a:	4a5d      	ldr	r2, [pc, #372]	; (8004fa0 <HAL_RCC_OscConfig+0x4ac>)
 8004e2c:	f043 0301 	orr.w	r3, r3, #1
 8004e30:	6713      	str	r3, [r2, #112]	; 0x70
 8004e32:	e00b      	b.n	8004e4c <HAL_RCC_OscConfig+0x358>
 8004e34:	4b5a      	ldr	r3, [pc, #360]	; (8004fa0 <HAL_RCC_OscConfig+0x4ac>)
 8004e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e38:	4a59      	ldr	r2, [pc, #356]	; (8004fa0 <HAL_RCC_OscConfig+0x4ac>)
 8004e3a:	f023 0301 	bic.w	r3, r3, #1
 8004e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e40:	4b57      	ldr	r3, [pc, #348]	; (8004fa0 <HAL_RCC_OscConfig+0x4ac>)
 8004e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e44:	4a56      	ldr	r2, [pc, #344]	; (8004fa0 <HAL_RCC_OscConfig+0x4ac>)
 8004e46:	f023 0304 	bic.w	r3, r3, #4
 8004e4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d015      	beq.n	8004e80 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e54:	f7fd fa0e 	bl	8002274 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e5a:	e00a      	b.n	8004e72 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e5c:	f7fd fa0a 	bl	8002274 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e0d7      	b.n	8005022 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e72:	4b4b      	ldr	r3, [pc, #300]	; (8004fa0 <HAL_RCC_OscConfig+0x4ac>)
 8004e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0ee      	beq.n	8004e5c <HAL_RCC_OscConfig+0x368>
 8004e7e:	e014      	b.n	8004eaa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e80:	f7fd f9f8 	bl	8002274 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e86:	e00a      	b.n	8004e9e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e88:	f7fd f9f4 	bl	8002274 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e0c1      	b.n	8005022 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e9e:	4b40      	ldr	r3, [pc, #256]	; (8004fa0 <HAL_RCC_OscConfig+0x4ac>)
 8004ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1ee      	bne.n	8004e88 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004eaa:	7dfb      	ldrb	r3, [r7, #23]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d105      	bne.n	8004ebc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eb0:	4b3b      	ldr	r3, [pc, #236]	; (8004fa0 <HAL_RCC_OscConfig+0x4ac>)
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	4a3a      	ldr	r2, [pc, #232]	; (8004fa0 <HAL_RCC_OscConfig+0x4ac>)
 8004eb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 80ad 	beq.w	8005020 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ec6:	4b36      	ldr	r3, [pc, #216]	; (8004fa0 <HAL_RCC_OscConfig+0x4ac>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 030c 	and.w	r3, r3, #12
 8004ece:	2b08      	cmp	r3, #8
 8004ed0:	d060      	beq.n	8004f94 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d145      	bne.n	8004f66 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eda:	4b33      	ldr	r3, [pc, #204]	; (8004fa8 <HAL_RCC_OscConfig+0x4b4>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee0:	f7fd f9c8 	bl	8002274 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ee8:	f7fd f9c4 	bl	8002274 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e093      	b.n	8005022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004efa:	4b29      	ldr	r3, [pc, #164]	; (8004fa0 <HAL_RCC_OscConfig+0x4ac>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1f0      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69da      	ldr	r2, [r3, #28]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	019b      	lsls	r3, r3, #6
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1c:	085b      	lsrs	r3, r3, #1
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	041b      	lsls	r3, r3, #16
 8004f22:	431a      	orrs	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	061b      	lsls	r3, r3, #24
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f30:	071b      	lsls	r3, r3, #28
 8004f32:	491b      	ldr	r1, [pc, #108]	; (8004fa0 <HAL_RCC_OscConfig+0x4ac>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f38:	4b1b      	ldr	r3, [pc, #108]	; (8004fa8 <HAL_RCC_OscConfig+0x4b4>)
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3e:	f7fd f999 	bl	8002274 <HAL_GetTick>
 8004f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f44:	e008      	b.n	8004f58 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f46:	f7fd f995 	bl	8002274 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e064      	b.n	8005022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f58:	4b11      	ldr	r3, [pc, #68]	; (8004fa0 <HAL_RCC_OscConfig+0x4ac>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0f0      	beq.n	8004f46 <HAL_RCC_OscConfig+0x452>
 8004f64:	e05c      	b.n	8005020 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f66:	4b10      	ldr	r3, [pc, #64]	; (8004fa8 <HAL_RCC_OscConfig+0x4b4>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6c:	f7fd f982 	bl	8002274 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f74:	f7fd f97e 	bl	8002274 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e04d      	b.n	8005022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f86:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <HAL_RCC_OscConfig+0x4ac>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f0      	bne.n	8004f74 <HAL_RCC_OscConfig+0x480>
 8004f92:	e045      	b.n	8005020 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d107      	bne.n	8004fac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e040      	b.n	8005022 <HAL_RCC_OscConfig+0x52e>
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	40007000 	.word	0x40007000
 8004fa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fac:	4b1f      	ldr	r3, [pc, #124]	; (800502c <HAL_RCC_OscConfig+0x538>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d030      	beq.n	800501c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d129      	bne.n	800501c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d122      	bne.n	800501c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fdc:	4013      	ands	r3, r2
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fe2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d119      	bne.n	800501c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	085b      	lsrs	r3, r3, #1
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d10f      	bne.n	800501c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005006:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005008:	429a      	cmp	r2, r3
 800500a:	d107      	bne.n	800501c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005018:	429a      	cmp	r2, r3
 800501a:	d001      	beq.n	8005020 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e000      	b.n	8005022 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	40023800 	.word	0x40023800

08005030 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e03f      	b.n	80050c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7fc ff14 	bl	8001e84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2224      	movs	r2, #36	; 0x24
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005072:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f929 	bl	80052cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005088:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695a      	ldr	r2, [r3, #20]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005098:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68da      	ldr	r2, [r3, #12]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2220      	movs	r2, #32
 80050bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b08a      	sub	sp, #40	; 0x28
 80050ce:	af02      	add	r7, sp, #8
 80050d0:	60f8      	str	r0, [r7, #12]
 80050d2:	60b9      	str	r1, [r7, #8]
 80050d4:	603b      	str	r3, [r7, #0]
 80050d6:	4613      	mov	r3, r2
 80050d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050da:	2300      	movs	r3, #0
 80050dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b20      	cmp	r3, #32
 80050e8:	d17c      	bne.n	80051e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <HAL_UART_Transmit+0x2c>
 80050f0:	88fb      	ldrh	r3, [r7, #6]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e075      	b.n	80051e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005100:	2b01      	cmp	r3, #1
 8005102:	d101      	bne.n	8005108 <HAL_UART_Transmit+0x3e>
 8005104:	2302      	movs	r3, #2
 8005106:	e06e      	b.n	80051e6 <HAL_UART_Transmit+0x11c>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2221      	movs	r2, #33	; 0x21
 800511a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800511e:	f7fd f8a9 	bl	8002274 <HAL_GetTick>
 8005122:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	88fa      	ldrh	r2, [r7, #6]
 8005128:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	88fa      	ldrh	r2, [r7, #6]
 800512e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005138:	d108      	bne.n	800514c <HAL_UART_Transmit+0x82>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d104      	bne.n	800514c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005142:	2300      	movs	r3, #0
 8005144:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	61bb      	str	r3, [r7, #24]
 800514a:	e003      	b.n	8005154 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005150:	2300      	movs	r3, #0
 8005152:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800515c:	e02a      	b.n	80051b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2200      	movs	r2, #0
 8005166:	2180      	movs	r1, #128	; 0x80
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 f840 	bl	80051ee <UART_WaitOnFlagUntilTimeout>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e036      	b.n	80051e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10b      	bne.n	8005196 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	461a      	mov	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800518c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	3302      	adds	r3, #2
 8005192:	61bb      	str	r3, [r7, #24]
 8005194:	e007      	b.n	80051a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	781a      	ldrb	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	3301      	adds	r3, #1
 80051a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	3b01      	subs	r3, #1
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1cf      	bne.n	800515e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2200      	movs	r2, #0
 80051c6:	2140      	movs	r1, #64	; 0x40
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 f810 	bl	80051ee <UART_WaitOnFlagUntilTimeout>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e006      	b.n	80051e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2220      	movs	r2, #32
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	e000      	b.n	80051e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80051e4:	2302      	movs	r3, #2
  }
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3720      	adds	r7, #32
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b090      	sub	sp, #64	; 0x40
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	603b      	str	r3, [r7, #0]
 80051fa:	4613      	mov	r3, r2
 80051fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051fe:	e050      	b.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005202:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005206:	d04c      	beq.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800520a:	2b00      	cmp	r3, #0
 800520c:	d007      	beq.n	800521e <UART_WaitOnFlagUntilTimeout+0x30>
 800520e:	f7fd f831 	bl	8002274 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800521a:	429a      	cmp	r2, r3
 800521c:	d241      	bcs.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	330c      	adds	r3, #12
 8005224:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005228:	e853 3f00 	ldrex	r3, [r3]
 800522c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005234:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	330c      	adds	r3, #12
 800523c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800523e:	637a      	str	r2, [r7, #52]	; 0x34
 8005240:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005242:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005244:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005246:	e841 2300 	strex	r3, r2, [r1]
 800524a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800524c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1e5      	bne.n	800521e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3314      	adds	r3, #20
 8005258:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	e853 3f00 	ldrex	r3, [r3]
 8005260:	613b      	str	r3, [r7, #16]
   return(result);
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f023 0301 	bic.w	r3, r3, #1
 8005268:	63bb      	str	r3, [r7, #56]	; 0x38
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	3314      	adds	r3, #20
 8005270:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005272:	623a      	str	r2, [r7, #32]
 8005274:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005276:	69f9      	ldr	r1, [r7, #28]
 8005278:	6a3a      	ldr	r2, [r7, #32]
 800527a:	e841 2300 	strex	r3, r2, [r1]
 800527e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1e5      	bne.n	8005252 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2220      	movs	r2, #32
 800528a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2220      	movs	r2, #32
 8005292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e00f      	b.n	80052c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4013      	ands	r3, r2
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	bf0c      	ite	eq
 80052b2:	2301      	moveq	r3, #1
 80052b4:	2300      	movne	r3, #0
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	461a      	mov	r2, r3
 80052ba:	79fb      	ldrb	r3, [r7, #7]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d09f      	beq.n	8005200 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3740      	adds	r7, #64	; 0x40
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
	...

080052cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052d0:	b0c0      	sub	sp, #256	; 0x100
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80052e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e8:	68d9      	ldr	r1, [r3, #12]
 80052ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	ea40 0301 	orr.w	r3, r0, r1
 80052f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	431a      	orrs	r2, r3
 8005304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	431a      	orrs	r2, r3
 800530c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	4313      	orrs	r3, r2
 8005314:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005324:	f021 010c 	bic.w	r1, r1, #12
 8005328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005332:	430b      	orrs	r3, r1
 8005334:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005346:	6999      	ldr	r1, [r3, #24]
 8005348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	ea40 0301 	orr.w	r3, r0, r1
 8005352:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	4b8f      	ldr	r3, [pc, #572]	; (8005598 <UART_SetConfig+0x2cc>)
 800535c:	429a      	cmp	r2, r3
 800535e:	d005      	beq.n	800536c <UART_SetConfig+0xa0>
 8005360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	4b8d      	ldr	r3, [pc, #564]	; (800559c <UART_SetConfig+0x2d0>)
 8005368:	429a      	cmp	r2, r3
 800536a:	d104      	bne.n	8005376 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800536c:	f7ff f97e 	bl	800466c <HAL_RCC_GetPCLK2Freq>
 8005370:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005374:	e003      	b.n	800537e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005376:	f7ff f965 	bl	8004644 <HAL_RCC_GetPCLK1Freq>
 800537a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800537e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005382:	69db      	ldr	r3, [r3, #28]
 8005384:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005388:	f040 810c 	bne.w	80055a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800538c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005390:	2200      	movs	r2, #0
 8005392:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005396:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800539a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800539e:	4622      	mov	r2, r4
 80053a0:	462b      	mov	r3, r5
 80053a2:	1891      	adds	r1, r2, r2
 80053a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80053a6:	415b      	adcs	r3, r3
 80053a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053ae:	4621      	mov	r1, r4
 80053b0:	eb12 0801 	adds.w	r8, r2, r1
 80053b4:	4629      	mov	r1, r5
 80053b6:	eb43 0901 	adc.w	r9, r3, r1
 80053ba:	f04f 0200 	mov.w	r2, #0
 80053be:	f04f 0300 	mov.w	r3, #0
 80053c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053ce:	4690      	mov	r8, r2
 80053d0:	4699      	mov	r9, r3
 80053d2:	4623      	mov	r3, r4
 80053d4:	eb18 0303 	adds.w	r3, r8, r3
 80053d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053dc:	462b      	mov	r3, r5
 80053de:	eb49 0303 	adc.w	r3, r9, r3
 80053e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80053f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80053f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80053fa:	460b      	mov	r3, r1
 80053fc:	18db      	adds	r3, r3, r3
 80053fe:	653b      	str	r3, [r7, #80]	; 0x50
 8005400:	4613      	mov	r3, r2
 8005402:	eb42 0303 	adc.w	r3, r2, r3
 8005406:	657b      	str	r3, [r7, #84]	; 0x54
 8005408:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800540c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005410:	f7fb fc3a 	bl	8000c88 <__aeabi_uldivmod>
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4b61      	ldr	r3, [pc, #388]	; (80055a0 <UART_SetConfig+0x2d4>)
 800541a:	fba3 2302 	umull	r2, r3, r3, r2
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	011c      	lsls	r4, r3, #4
 8005422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005426:	2200      	movs	r2, #0
 8005428:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800542c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005430:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005434:	4642      	mov	r2, r8
 8005436:	464b      	mov	r3, r9
 8005438:	1891      	adds	r1, r2, r2
 800543a:	64b9      	str	r1, [r7, #72]	; 0x48
 800543c:	415b      	adcs	r3, r3
 800543e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005440:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005444:	4641      	mov	r1, r8
 8005446:	eb12 0a01 	adds.w	sl, r2, r1
 800544a:	4649      	mov	r1, r9
 800544c:	eb43 0b01 	adc.w	fp, r3, r1
 8005450:	f04f 0200 	mov.w	r2, #0
 8005454:	f04f 0300 	mov.w	r3, #0
 8005458:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800545c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005460:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005464:	4692      	mov	sl, r2
 8005466:	469b      	mov	fp, r3
 8005468:	4643      	mov	r3, r8
 800546a:	eb1a 0303 	adds.w	r3, sl, r3
 800546e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005472:	464b      	mov	r3, r9
 8005474:	eb4b 0303 	adc.w	r3, fp, r3
 8005478:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800547c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005488:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800548c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005490:	460b      	mov	r3, r1
 8005492:	18db      	adds	r3, r3, r3
 8005494:	643b      	str	r3, [r7, #64]	; 0x40
 8005496:	4613      	mov	r3, r2
 8005498:	eb42 0303 	adc.w	r3, r2, r3
 800549c:	647b      	str	r3, [r7, #68]	; 0x44
 800549e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80054a6:	f7fb fbef 	bl	8000c88 <__aeabi_uldivmod>
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
 80054ae:	4611      	mov	r1, r2
 80054b0:	4b3b      	ldr	r3, [pc, #236]	; (80055a0 <UART_SetConfig+0x2d4>)
 80054b2:	fba3 2301 	umull	r2, r3, r3, r1
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	2264      	movs	r2, #100	; 0x64
 80054ba:	fb02 f303 	mul.w	r3, r2, r3
 80054be:	1acb      	subs	r3, r1, r3
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80054c6:	4b36      	ldr	r3, [pc, #216]	; (80055a0 <UART_SetConfig+0x2d4>)
 80054c8:	fba3 2302 	umull	r2, r3, r3, r2
 80054cc:	095b      	lsrs	r3, r3, #5
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054d4:	441c      	add	r4, r3
 80054d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054da:	2200      	movs	r2, #0
 80054dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80054e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80054e8:	4642      	mov	r2, r8
 80054ea:	464b      	mov	r3, r9
 80054ec:	1891      	adds	r1, r2, r2
 80054ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80054f0:	415b      	adcs	r3, r3
 80054f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054f8:	4641      	mov	r1, r8
 80054fa:	1851      	adds	r1, r2, r1
 80054fc:	6339      	str	r1, [r7, #48]	; 0x30
 80054fe:	4649      	mov	r1, r9
 8005500:	414b      	adcs	r3, r1
 8005502:	637b      	str	r3, [r7, #52]	; 0x34
 8005504:	f04f 0200 	mov.w	r2, #0
 8005508:	f04f 0300 	mov.w	r3, #0
 800550c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005510:	4659      	mov	r1, fp
 8005512:	00cb      	lsls	r3, r1, #3
 8005514:	4651      	mov	r1, sl
 8005516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800551a:	4651      	mov	r1, sl
 800551c:	00ca      	lsls	r2, r1, #3
 800551e:	4610      	mov	r0, r2
 8005520:	4619      	mov	r1, r3
 8005522:	4603      	mov	r3, r0
 8005524:	4642      	mov	r2, r8
 8005526:	189b      	adds	r3, r3, r2
 8005528:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800552c:	464b      	mov	r3, r9
 800552e:	460a      	mov	r2, r1
 8005530:	eb42 0303 	adc.w	r3, r2, r3
 8005534:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005544:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005548:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800554c:	460b      	mov	r3, r1
 800554e:	18db      	adds	r3, r3, r3
 8005550:	62bb      	str	r3, [r7, #40]	; 0x28
 8005552:	4613      	mov	r3, r2
 8005554:	eb42 0303 	adc.w	r3, r2, r3
 8005558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800555a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800555e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005562:	f7fb fb91 	bl	8000c88 <__aeabi_uldivmod>
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	4b0d      	ldr	r3, [pc, #52]	; (80055a0 <UART_SetConfig+0x2d4>)
 800556c:	fba3 1302 	umull	r1, r3, r3, r2
 8005570:	095b      	lsrs	r3, r3, #5
 8005572:	2164      	movs	r1, #100	; 0x64
 8005574:	fb01 f303 	mul.w	r3, r1, r3
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	3332      	adds	r3, #50	; 0x32
 800557e:	4a08      	ldr	r2, [pc, #32]	; (80055a0 <UART_SetConfig+0x2d4>)
 8005580:	fba2 2303 	umull	r2, r3, r2, r3
 8005584:	095b      	lsrs	r3, r3, #5
 8005586:	f003 0207 	and.w	r2, r3, #7
 800558a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4422      	add	r2, r4
 8005592:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005594:	e105      	b.n	80057a2 <UART_SetConfig+0x4d6>
 8005596:	bf00      	nop
 8005598:	40011000 	.word	0x40011000
 800559c:	40011400 	.word	0x40011400
 80055a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055a8:	2200      	movs	r2, #0
 80055aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80055b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80055b6:	4642      	mov	r2, r8
 80055b8:	464b      	mov	r3, r9
 80055ba:	1891      	adds	r1, r2, r2
 80055bc:	6239      	str	r1, [r7, #32]
 80055be:	415b      	adcs	r3, r3
 80055c0:	627b      	str	r3, [r7, #36]	; 0x24
 80055c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055c6:	4641      	mov	r1, r8
 80055c8:	1854      	adds	r4, r2, r1
 80055ca:	4649      	mov	r1, r9
 80055cc:	eb43 0501 	adc.w	r5, r3, r1
 80055d0:	f04f 0200 	mov.w	r2, #0
 80055d4:	f04f 0300 	mov.w	r3, #0
 80055d8:	00eb      	lsls	r3, r5, #3
 80055da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055de:	00e2      	lsls	r2, r4, #3
 80055e0:	4614      	mov	r4, r2
 80055e2:	461d      	mov	r5, r3
 80055e4:	4643      	mov	r3, r8
 80055e6:	18e3      	adds	r3, r4, r3
 80055e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055ec:	464b      	mov	r3, r9
 80055ee:	eb45 0303 	adc.w	r3, r5, r3
 80055f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005602:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005606:	f04f 0200 	mov.w	r2, #0
 800560a:	f04f 0300 	mov.w	r3, #0
 800560e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005612:	4629      	mov	r1, r5
 8005614:	008b      	lsls	r3, r1, #2
 8005616:	4621      	mov	r1, r4
 8005618:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800561c:	4621      	mov	r1, r4
 800561e:	008a      	lsls	r2, r1, #2
 8005620:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005624:	f7fb fb30 	bl	8000c88 <__aeabi_uldivmod>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	4b60      	ldr	r3, [pc, #384]	; (80057b0 <UART_SetConfig+0x4e4>)
 800562e:	fba3 2302 	umull	r2, r3, r3, r2
 8005632:	095b      	lsrs	r3, r3, #5
 8005634:	011c      	lsls	r4, r3, #4
 8005636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800563a:	2200      	movs	r2, #0
 800563c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005640:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005644:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005648:	4642      	mov	r2, r8
 800564a:	464b      	mov	r3, r9
 800564c:	1891      	adds	r1, r2, r2
 800564e:	61b9      	str	r1, [r7, #24]
 8005650:	415b      	adcs	r3, r3
 8005652:	61fb      	str	r3, [r7, #28]
 8005654:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005658:	4641      	mov	r1, r8
 800565a:	1851      	adds	r1, r2, r1
 800565c:	6139      	str	r1, [r7, #16]
 800565e:	4649      	mov	r1, r9
 8005660:	414b      	adcs	r3, r1
 8005662:	617b      	str	r3, [r7, #20]
 8005664:	f04f 0200 	mov.w	r2, #0
 8005668:	f04f 0300 	mov.w	r3, #0
 800566c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005670:	4659      	mov	r1, fp
 8005672:	00cb      	lsls	r3, r1, #3
 8005674:	4651      	mov	r1, sl
 8005676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800567a:	4651      	mov	r1, sl
 800567c:	00ca      	lsls	r2, r1, #3
 800567e:	4610      	mov	r0, r2
 8005680:	4619      	mov	r1, r3
 8005682:	4603      	mov	r3, r0
 8005684:	4642      	mov	r2, r8
 8005686:	189b      	adds	r3, r3, r2
 8005688:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800568c:	464b      	mov	r3, r9
 800568e:	460a      	mov	r2, r1
 8005690:	eb42 0303 	adc.w	r3, r2, r3
 8005694:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80056a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80056a4:	f04f 0200 	mov.w	r2, #0
 80056a8:	f04f 0300 	mov.w	r3, #0
 80056ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80056b0:	4649      	mov	r1, r9
 80056b2:	008b      	lsls	r3, r1, #2
 80056b4:	4641      	mov	r1, r8
 80056b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056ba:	4641      	mov	r1, r8
 80056bc:	008a      	lsls	r2, r1, #2
 80056be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80056c2:	f7fb fae1 	bl	8000c88 <__aeabi_uldivmod>
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	4b39      	ldr	r3, [pc, #228]	; (80057b0 <UART_SetConfig+0x4e4>)
 80056cc:	fba3 1302 	umull	r1, r3, r3, r2
 80056d0:	095b      	lsrs	r3, r3, #5
 80056d2:	2164      	movs	r1, #100	; 0x64
 80056d4:	fb01 f303 	mul.w	r3, r1, r3
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	011b      	lsls	r3, r3, #4
 80056dc:	3332      	adds	r3, #50	; 0x32
 80056de:	4a34      	ldr	r2, [pc, #208]	; (80057b0 <UART_SetConfig+0x4e4>)
 80056e0:	fba2 2303 	umull	r2, r3, r2, r3
 80056e4:	095b      	lsrs	r3, r3, #5
 80056e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056ea:	441c      	add	r4, r3
 80056ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056f0:	2200      	movs	r2, #0
 80056f2:	673b      	str	r3, [r7, #112]	; 0x70
 80056f4:	677a      	str	r2, [r7, #116]	; 0x74
 80056f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80056fa:	4642      	mov	r2, r8
 80056fc:	464b      	mov	r3, r9
 80056fe:	1891      	adds	r1, r2, r2
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	415b      	adcs	r3, r3
 8005704:	60fb      	str	r3, [r7, #12]
 8005706:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800570a:	4641      	mov	r1, r8
 800570c:	1851      	adds	r1, r2, r1
 800570e:	6039      	str	r1, [r7, #0]
 8005710:	4649      	mov	r1, r9
 8005712:	414b      	adcs	r3, r1
 8005714:	607b      	str	r3, [r7, #4]
 8005716:	f04f 0200 	mov.w	r2, #0
 800571a:	f04f 0300 	mov.w	r3, #0
 800571e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005722:	4659      	mov	r1, fp
 8005724:	00cb      	lsls	r3, r1, #3
 8005726:	4651      	mov	r1, sl
 8005728:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800572c:	4651      	mov	r1, sl
 800572e:	00ca      	lsls	r2, r1, #3
 8005730:	4610      	mov	r0, r2
 8005732:	4619      	mov	r1, r3
 8005734:	4603      	mov	r3, r0
 8005736:	4642      	mov	r2, r8
 8005738:	189b      	adds	r3, r3, r2
 800573a:	66bb      	str	r3, [r7, #104]	; 0x68
 800573c:	464b      	mov	r3, r9
 800573e:	460a      	mov	r2, r1
 8005740:	eb42 0303 	adc.w	r3, r2, r3
 8005744:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	663b      	str	r3, [r7, #96]	; 0x60
 8005750:	667a      	str	r2, [r7, #100]	; 0x64
 8005752:	f04f 0200 	mov.w	r2, #0
 8005756:	f04f 0300 	mov.w	r3, #0
 800575a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800575e:	4649      	mov	r1, r9
 8005760:	008b      	lsls	r3, r1, #2
 8005762:	4641      	mov	r1, r8
 8005764:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005768:	4641      	mov	r1, r8
 800576a:	008a      	lsls	r2, r1, #2
 800576c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005770:	f7fb fa8a 	bl	8000c88 <__aeabi_uldivmod>
 8005774:	4602      	mov	r2, r0
 8005776:	460b      	mov	r3, r1
 8005778:	4b0d      	ldr	r3, [pc, #52]	; (80057b0 <UART_SetConfig+0x4e4>)
 800577a:	fba3 1302 	umull	r1, r3, r3, r2
 800577e:	095b      	lsrs	r3, r3, #5
 8005780:	2164      	movs	r1, #100	; 0x64
 8005782:	fb01 f303 	mul.w	r3, r1, r3
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	011b      	lsls	r3, r3, #4
 800578a:	3332      	adds	r3, #50	; 0x32
 800578c:	4a08      	ldr	r2, [pc, #32]	; (80057b0 <UART_SetConfig+0x4e4>)
 800578e:	fba2 2303 	umull	r2, r3, r2, r3
 8005792:	095b      	lsrs	r3, r3, #5
 8005794:	f003 020f 	and.w	r2, r3, #15
 8005798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4422      	add	r2, r4
 80057a0:	609a      	str	r2, [r3, #8]
}
 80057a2:	bf00      	nop
 80057a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80057a8:	46bd      	mov	sp, r7
 80057aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057ae:	bf00      	nop
 80057b0:	51eb851f 	.word	0x51eb851f

080057b4 <__errno>:
 80057b4:	4b01      	ldr	r3, [pc, #4]	; (80057bc <__errno+0x8>)
 80057b6:	6818      	ldr	r0, [r3, #0]
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	2000000c 	.word	0x2000000c

080057c0 <__libc_init_array>:
 80057c0:	b570      	push	{r4, r5, r6, lr}
 80057c2:	4d0d      	ldr	r5, [pc, #52]	; (80057f8 <__libc_init_array+0x38>)
 80057c4:	4c0d      	ldr	r4, [pc, #52]	; (80057fc <__libc_init_array+0x3c>)
 80057c6:	1b64      	subs	r4, r4, r5
 80057c8:	10a4      	asrs	r4, r4, #2
 80057ca:	2600      	movs	r6, #0
 80057cc:	42a6      	cmp	r6, r4
 80057ce:	d109      	bne.n	80057e4 <__libc_init_array+0x24>
 80057d0:	4d0b      	ldr	r5, [pc, #44]	; (8005800 <__libc_init_array+0x40>)
 80057d2:	4c0c      	ldr	r4, [pc, #48]	; (8005804 <__libc_init_array+0x44>)
 80057d4:	f002 ff02 	bl	80085dc <_init>
 80057d8:	1b64      	subs	r4, r4, r5
 80057da:	10a4      	asrs	r4, r4, #2
 80057dc:	2600      	movs	r6, #0
 80057de:	42a6      	cmp	r6, r4
 80057e0:	d105      	bne.n	80057ee <__libc_init_array+0x2e>
 80057e2:	bd70      	pop	{r4, r5, r6, pc}
 80057e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80057e8:	4798      	blx	r3
 80057ea:	3601      	adds	r6, #1
 80057ec:	e7ee      	b.n	80057cc <__libc_init_array+0xc>
 80057ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f2:	4798      	blx	r3
 80057f4:	3601      	adds	r6, #1
 80057f6:	e7f2      	b.n	80057de <__libc_init_array+0x1e>
 80057f8:	08008a2c 	.word	0x08008a2c
 80057fc:	08008a2c 	.word	0x08008a2c
 8005800:	08008a2c 	.word	0x08008a2c
 8005804:	08008a30 	.word	0x08008a30

08005808 <memcpy>:
 8005808:	440a      	add	r2, r1
 800580a:	4291      	cmp	r1, r2
 800580c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005810:	d100      	bne.n	8005814 <memcpy+0xc>
 8005812:	4770      	bx	lr
 8005814:	b510      	push	{r4, lr}
 8005816:	f811 4b01 	ldrb.w	r4, [r1], #1
 800581a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800581e:	4291      	cmp	r1, r2
 8005820:	d1f9      	bne.n	8005816 <memcpy+0xe>
 8005822:	bd10      	pop	{r4, pc}

08005824 <memset>:
 8005824:	4402      	add	r2, r0
 8005826:	4603      	mov	r3, r0
 8005828:	4293      	cmp	r3, r2
 800582a:	d100      	bne.n	800582e <memset+0xa>
 800582c:	4770      	bx	lr
 800582e:	f803 1b01 	strb.w	r1, [r3], #1
 8005832:	e7f9      	b.n	8005828 <memset+0x4>

08005834 <__cvt>:
 8005834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005838:	ec55 4b10 	vmov	r4, r5, d0
 800583c:	2d00      	cmp	r5, #0
 800583e:	460e      	mov	r6, r1
 8005840:	4619      	mov	r1, r3
 8005842:	462b      	mov	r3, r5
 8005844:	bfbb      	ittet	lt
 8005846:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800584a:	461d      	movlt	r5, r3
 800584c:	2300      	movge	r3, #0
 800584e:	232d      	movlt	r3, #45	; 0x2d
 8005850:	700b      	strb	r3, [r1, #0]
 8005852:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005854:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005858:	4691      	mov	r9, r2
 800585a:	f023 0820 	bic.w	r8, r3, #32
 800585e:	bfbc      	itt	lt
 8005860:	4622      	movlt	r2, r4
 8005862:	4614      	movlt	r4, r2
 8005864:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005868:	d005      	beq.n	8005876 <__cvt+0x42>
 800586a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800586e:	d100      	bne.n	8005872 <__cvt+0x3e>
 8005870:	3601      	adds	r6, #1
 8005872:	2102      	movs	r1, #2
 8005874:	e000      	b.n	8005878 <__cvt+0x44>
 8005876:	2103      	movs	r1, #3
 8005878:	ab03      	add	r3, sp, #12
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	ab02      	add	r3, sp, #8
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	ec45 4b10 	vmov	d0, r4, r5
 8005884:	4653      	mov	r3, sl
 8005886:	4632      	mov	r2, r6
 8005888:	f000 fcea 	bl	8006260 <_dtoa_r>
 800588c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005890:	4607      	mov	r7, r0
 8005892:	d102      	bne.n	800589a <__cvt+0x66>
 8005894:	f019 0f01 	tst.w	r9, #1
 8005898:	d022      	beq.n	80058e0 <__cvt+0xac>
 800589a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800589e:	eb07 0906 	add.w	r9, r7, r6
 80058a2:	d110      	bne.n	80058c6 <__cvt+0x92>
 80058a4:	783b      	ldrb	r3, [r7, #0]
 80058a6:	2b30      	cmp	r3, #48	; 0x30
 80058a8:	d10a      	bne.n	80058c0 <__cvt+0x8c>
 80058aa:	2200      	movs	r2, #0
 80058ac:	2300      	movs	r3, #0
 80058ae:	4620      	mov	r0, r4
 80058b0:	4629      	mov	r1, r5
 80058b2:	f7fb f929 	bl	8000b08 <__aeabi_dcmpeq>
 80058b6:	b918      	cbnz	r0, 80058c0 <__cvt+0x8c>
 80058b8:	f1c6 0601 	rsb	r6, r6, #1
 80058bc:	f8ca 6000 	str.w	r6, [sl]
 80058c0:	f8da 3000 	ldr.w	r3, [sl]
 80058c4:	4499      	add	r9, r3
 80058c6:	2200      	movs	r2, #0
 80058c8:	2300      	movs	r3, #0
 80058ca:	4620      	mov	r0, r4
 80058cc:	4629      	mov	r1, r5
 80058ce:	f7fb f91b 	bl	8000b08 <__aeabi_dcmpeq>
 80058d2:	b108      	cbz	r0, 80058d8 <__cvt+0xa4>
 80058d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80058d8:	2230      	movs	r2, #48	; 0x30
 80058da:	9b03      	ldr	r3, [sp, #12]
 80058dc:	454b      	cmp	r3, r9
 80058de:	d307      	bcc.n	80058f0 <__cvt+0xbc>
 80058e0:	9b03      	ldr	r3, [sp, #12]
 80058e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058e4:	1bdb      	subs	r3, r3, r7
 80058e6:	4638      	mov	r0, r7
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	b004      	add	sp, #16
 80058ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f0:	1c59      	adds	r1, r3, #1
 80058f2:	9103      	str	r1, [sp, #12]
 80058f4:	701a      	strb	r2, [r3, #0]
 80058f6:	e7f0      	b.n	80058da <__cvt+0xa6>

080058f8 <__exponent>:
 80058f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058fa:	4603      	mov	r3, r0
 80058fc:	2900      	cmp	r1, #0
 80058fe:	bfb8      	it	lt
 8005900:	4249      	neglt	r1, r1
 8005902:	f803 2b02 	strb.w	r2, [r3], #2
 8005906:	bfb4      	ite	lt
 8005908:	222d      	movlt	r2, #45	; 0x2d
 800590a:	222b      	movge	r2, #43	; 0x2b
 800590c:	2909      	cmp	r1, #9
 800590e:	7042      	strb	r2, [r0, #1]
 8005910:	dd2a      	ble.n	8005968 <__exponent+0x70>
 8005912:	f10d 0407 	add.w	r4, sp, #7
 8005916:	46a4      	mov	ip, r4
 8005918:	270a      	movs	r7, #10
 800591a:	46a6      	mov	lr, r4
 800591c:	460a      	mov	r2, r1
 800591e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005922:	fb07 1516 	mls	r5, r7, r6, r1
 8005926:	3530      	adds	r5, #48	; 0x30
 8005928:	2a63      	cmp	r2, #99	; 0x63
 800592a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800592e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005932:	4631      	mov	r1, r6
 8005934:	dcf1      	bgt.n	800591a <__exponent+0x22>
 8005936:	3130      	adds	r1, #48	; 0x30
 8005938:	f1ae 0502 	sub.w	r5, lr, #2
 800593c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005940:	1c44      	adds	r4, r0, #1
 8005942:	4629      	mov	r1, r5
 8005944:	4561      	cmp	r1, ip
 8005946:	d30a      	bcc.n	800595e <__exponent+0x66>
 8005948:	f10d 0209 	add.w	r2, sp, #9
 800594c:	eba2 020e 	sub.w	r2, r2, lr
 8005950:	4565      	cmp	r5, ip
 8005952:	bf88      	it	hi
 8005954:	2200      	movhi	r2, #0
 8005956:	4413      	add	r3, r2
 8005958:	1a18      	subs	r0, r3, r0
 800595a:	b003      	add	sp, #12
 800595c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800595e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005962:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005966:	e7ed      	b.n	8005944 <__exponent+0x4c>
 8005968:	2330      	movs	r3, #48	; 0x30
 800596a:	3130      	adds	r1, #48	; 0x30
 800596c:	7083      	strb	r3, [r0, #2]
 800596e:	70c1      	strb	r1, [r0, #3]
 8005970:	1d03      	adds	r3, r0, #4
 8005972:	e7f1      	b.n	8005958 <__exponent+0x60>

08005974 <_printf_float>:
 8005974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005978:	ed2d 8b02 	vpush	{d8}
 800597c:	b08d      	sub	sp, #52	; 0x34
 800597e:	460c      	mov	r4, r1
 8005980:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005984:	4616      	mov	r6, r2
 8005986:	461f      	mov	r7, r3
 8005988:	4605      	mov	r5, r0
 800598a:	f001 fa57 	bl	8006e3c <_localeconv_r>
 800598e:	f8d0 a000 	ldr.w	sl, [r0]
 8005992:	4650      	mov	r0, sl
 8005994:	f7fa fc3c 	bl	8000210 <strlen>
 8005998:	2300      	movs	r3, #0
 800599a:	930a      	str	r3, [sp, #40]	; 0x28
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	9305      	str	r3, [sp, #20]
 80059a0:	f8d8 3000 	ldr.w	r3, [r8]
 80059a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80059a8:	3307      	adds	r3, #7
 80059aa:	f023 0307 	bic.w	r3, r3, #7
 80059ae:	f103 0208 	add.w	r2, r3, #8
 80059b2:	f8c8 2000 	str.w	r2, [r8]
 80059b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80059be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80059c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80059c6:	9307      	str	r3, [sp, #28]
 80059c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80059cc:	ee08 0a10 	vmov	s16, r0
 80059d0:	4b9f      	ldr	r3, [pc, #636]	; (8005c50 <_printf_float+0x2dc>)
 80059d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059da:	f7fb f8c7 	bl	8000b6c <__aeabi_dcmpun>
 80059de:	bb88      	cbnz	r0, 8005a44 <_printf_float+0xd0>
 80059e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059e4:	4b9a      	ldr	r3, [pc, #616]	; (8005c50 <_printf_float+0x2dc>)
 80059e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059ea:	f7fb f8a1 	bl	8000b30 <__aeabi_dcmple>
 80059ee:	bb48      	cbnz	r0, 8005a44 <_printf_float+0xd0>
 80059f0:	2200      	movs	r2, #0
 80059f2:	2300      	movs	r3, #0
 80059f4:	4640      	mov	r0, r8
 80059f6:	4649      	mov	r1, r9
 80059f8:	f7fb f890 	bl	8000b1c <__aeabi_dcmplt>
 80059fc:	b110      	cbz	r0, 8005a04 <_printf_float+0x90>
 80059fe:	232d      	movs	r3, #45	; 0x2d
 8005a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a04:	4b93      	ldr	r3, [pc, #588]	; (8005c54 <_printf_float+0x2e0>)
 8005a06:	4894      	ldr	r0, [pc, #592]	; (8005c58 <_printf_float+0x2e4>)
 8005a08:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005a0c:	bf94      	ite	ls
 8005a0e:	4698      	movls	r8, r3
 8005a10:	4680      	movhi	r8, r0
 8005a12:	2303      	movs	r3, #3
 8005a14:	6123      	str	r3, [r4, #16]
 8005a16:	9b05      	ldr	r3, [sp, #20]
 8005a18:	f023 0204 	bic.w	r2, r3, #4
 8005a1c:	6022      	str	r2, [r4, #0]
 8005a1e:	f04f 0900 	mov.w	r9, #0
 8005a22:	9700      	str	r7, [sp, #0]
 8005a24:	4633      	mov	r3, r6
 8005a26:	aa0b      	add	r2, sp, #44	; 0x2c
 8005a28:	4621      	mov	r1, r4
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	f000 f9d8 	bl	8005de0 <_printf_common>
 8005a30:	3001      	adds	r0, #1
 8005a32:	f040 8090 	bne.w	8005b56 <_printf_float+0x1e2>
 8005a36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a3a:	b00d      	add	sp, #52	; 0x34
 8005a3c:	ecbd 8b02 	vpop	{d8}
 8005a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a44:	4642      	mov	r2, r8
 8005a46:	464b      	mov	r3, r9
 8005a48:	4640      	mov	r0, r8
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	f7fb f88e 	bl	8000b6c <__aeabi_dcmpun>
 8005a50:	b140      	cbz	r0, 8005a64 <_printf_float+0xf0>
 8005a52:	464b      	mov	r3, r9
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	bfbc      	itt	lt
 8005a58:	232d      	movlt	r3, #45	; 0x2d
 8005a5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a5e:	487f      	ldr	r0, [pc, #508]	; (8005c5c <_printf_float+0x2e8>)
 8005a60:	4b7f      	ldr	r3, [pc, #508]	; (8005c60 <_printf_float+0x2ec>)
 8005a62:	e7d1      	b.n	8005a08 <_printf_float+0x94>
 8005a64:	6863      	ldr	r3, [r4, #4]
 8005a66:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a6a:	9206      	str	r2, [sp, #24]
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	d13f      	bne.n	8005af0 <_printf_float+0x17c>
 8005a70:	2306      	movs	r3, #6
 8005a72:	6063      	str	r3, [r4, #4]
 8005a74:	9b05      	ldr	r3, [sp, #20]
 8005a76:	6861      	ldr	r1, [r4, #4]
 8005a78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	9303      	str	r3, [sp, #12]
 8005a80:	ab0a      	add	r3, sp, #40	; 0x28
 8005a82:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a86:	ab09      	add	r3, sp, #36	; 0x24
 8005a88:	ec49 8b10 	vmov	d0, r8, r9
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	6022      	str	r2, [r4, #0]
 8005a90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a94:	4628      	mov	r0, r5
 8005a96:	f7ff fecd 	bl	8005834 <__cvt>
 8005a9a:	9b06      	ldr	r3, [sp, #24]
 8005a9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a9e:	2b47      	cmp	r3, #71	; 0x47
 8005aa0:	4680      	mov	r8, r0
 8005aa2:	d108      	bne.n	8005ab6 <_printf_float+0x142>
 8005aa4:	1cc8      	adds	r0, r1, #3
 8005aa6:	db02      	blt.n	8005aae <_printf_float+0x13a>
 8005aa8:	6863      	ldr	r3, [r4, #4]
 8005aaa:	4299      	cmp	r1, r3
 8005aac:	dd41      	ble.n	8005b32 <_printf_float+0x1be>
 8005aae:	f1ab 0b02 	sub.w	fp, fp, #2
 8005ab2:	fa5f fb8b 	uxtb.w	fp, fp
 8005ab6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005aba:	d820      	bhi.n	8005afe <_printf_float+0x18a>
 8005abc:	3901      	subs	r1, #1
 8005abe:	465a      	mov	r2, fp
 8005ac0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ac4:	9109      	str	r1, [sp, #36]	; 0x24
 8005ac6:	f7ff ff17 	bl	80058f8 <__exponent>
 8005aca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005acc:	1813      	adds	r3, r2, r0
 8005ace:	2a01      	cmp	r2, #1
 8005ad0:	4681      	mov	r9, r0
 8005ad2:	6123      	str	r3, [r4, #16]
 8005ad4:	dc02      	bgt.n	8005adc <_printf_float+0x168>
 8005ad6:	6822      	ldr	r2, [r4, #0]
 8005ad8:	07d2      	lsls	r2, r2, #31
 8005ada:	d501      	bpl.n	8005ae0 <_printf_float+0x16c>
 8005adc:	3301      	adds	r3, #1
 8005ade:	6123      	str	r3, [r4, #16]
 8005ae0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d09c      	beq.n	8005a22 <_printf_float+0xae>
 8005ae8:	232d      	movs	r3, #45	; 0x2d
 8005aea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aee:	e798      	b.n	8005a22 <_printf_float+0xae>
 8005af0:	9a06      	ldr	r2, [sp, #24]
 8005af2:	2a47      	cmp	r2, #71	; 0x47
 8005af4:	d1be      	bne.n	8005a74 <_printf_float+0x100>
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1bc      	bne.n	8005a74 <_printf_float+0x100>
 8005afa:	2301      	movs	r3, #1
 8005afc:	e7b9      	b.n	8005a72 <_printf_float+0xfe>
 8005afe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005b02:	d118      	bne.n	8005b36 <_printf_float+0x1c2>
 8005b04:	2900      	cmp	r1, #0
 8005b06:	6863      	ldr	r3, [r4, #4]
 8005b08:	dd0b      	ble.n	8005b22 <_printf_float+0x1ae>
 8005b0a:	6121      	str	r1, [r4, #16]
 8005b0c:	b913      	cbnz	r3, 8005b14 <_printf_float+0x1a0>
 8005b0e:	6822      	ldr	r2, [r4, #0]
 8005b10:	07d0      	lsls	r0, r2, #31
 8005b12:	d502      	bpl.n	8005b1a <_printf_float+0x1a6>
 8005b14:	3301      	adds	r3, #1
 8005b16:	440b      	add	r3, r1
 8005b18:	6123      	str	r3, [r4, #16]
 8005b1a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b1c:	f04f 0900 	mov.w	r9, #0
 8005b20:	e7de      	b.n	8005ae0 <_printf_float+0x16c>
 8005b22:	b913      	cbnz	r3, 8005b2a <_printf_float+0x1b6>
 8005b24:	6822      	ldr	r2, [r4, #0]
 8005b26:	07d2      	lsls	r2, r2, #31
 8005b28:	d501      	bpl.n	8005b2e <_printf_float+0x1ba>
 8005b2a:	3302      	adds	r3, #2
 8005b2c:	e7f4      	b.n	8005b18 <_printf_float+0x1a4>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e7f2      	b.n	8005b18 <_printf_float+0x1a4>
 8005b32:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b38:	4299      	cmp	r1, r3
 8005b3a:	db05      	blt.n	8005b48 <_printf_float+0x1d4>
 8005b3c:	6823      	ldr	r3, [r4, #0]
 8005b3e:	6121      	str	r1, [r4, #16]
 8005b40:	07d8      	lsls	r0, r3, #31
 8005b42:	d5ea      	bpl.n	8005b1a <_printf_float+0x1a6>
 8005b44:	1c4b      	adds	r3, r1, #1
 8005b46:	e7e7      	b.n	8005b18 <_printf_float+0x1a4>
 8005b48:	2900      	cmp	r1, #0
 8005b4a:	bfd4      	ite	le
 8005b4c:	f1c1 0202 	rsble	r2, r1, #2
 8005b50:	2201      	movgt	r2, #1
 8005b52:	4413      	add	r3, r2
 8005b54:	e7e0      	b.n	8005b18 <_printf_float+0x1a4>
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	055a      	lsls	r2, r3, #21
 8005b5a:	d407      	bmi.n	8005b6c <_printf_float+0x1f8>
 8005b5c:	6923      	ldr	r3, [r4, #16]
 8005b5e:	4642      	mov	r2, r8
 8005b60:	4631      	mov	r1, r6
 8005b62:	4628      	mov	r0, r5
 8005b64:	47b8      	blx	r7
 8005b66:	3001      	adds	r0, #1
 8005b68:	d12c      	bne.n	8005bc4 <_printf_float+0x250>
 8005b6a:	e764      	b.n	8005a36 <_printf_float+0xc2>
 8005b6c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b70:	f240 80e0 	bls.w	8005d34 <_printf_float+0x3c0>
 8005b74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b78:	2200      	movs	r2, #0
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f7fa ffc4 	bl	8000b08 <__aeabi_dcmpeq>
 8005b80:	2800      	cmp	r0, #0
 8005b82:	d034      	beq.n	8005bee <_printf_float+0x27a>
 8005b84:	4a37      	ldr	r2, [pc, #220]	; (8005c64 <_printf_float+0x2f0>)
 8005b86:	2301      	movs	r3, #1
 8005b88:	4631      	mov	r1, r6
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	47b8      	blx	r7
 8005b8e:	3001      	adds	r0, #1
 8005b90:	f43f af51 	beq.w	8005a36 <_printf_float+0xc2>
 8005b94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	db02      	blt.n	8005ba2 <_printf_float+0x22e>
 8005b9c:	6823      	ldr	r3, [r4, #0]
 8005b9e:	07d8      	lsls	r0, r3, #31
 8005ba0:	d510      	bpl.n	8005bc4 <_printf_float+0x250>
 8005ba2:	ee18 3a10 	vmov	r3, s16
 8005ba6:	4652      	mov	r2, sl
 8005ba8:	4631      	mov	r1, r6
 8005baa:	4628      	mov	r0, r5
 8005bac:	47b8      	blx	r7
 8005bae:	3001      	adds	r0, #1
 8005bb0:	f43f af41 	beq.w	8005a36 <_printf_float+0xc2>
 8005bb4:	f04f 0800 	mov.w	r8, #0
 8005bb8:	f104 091a 	add.w	r9, r4, #26
 8005bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	4543      	cmp	r3, r8
 8005bc2:	dc09      	bgt.n	8005bd8 <_printf_float+0x264>
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	079b      	lsls	r3, r3, #30
 8005bc8:	f100 8105 	bmi.w	8005dd6 <_printf_float+0x462>
 8005bcc:	68e0      	ldr	r0, [r4, #12]
 8005bce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bd0:	4298      	cmp	r0, r3
 8005bd2:	bfb8      	it	lt
 8005bd4:	4618      	movlt	r0, r3
 8005bd6:	e730      	b.n	8005a3a <_printf_float+0xc6>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	464a      	mov	r2, r9
 8005bdc:	4631      	mov	r1, r6
 8005bde:	4628      	mov	r0, r5
 8005be0:	47b8      	blx	r7
 8005be2:	3001      	adds	r0, #1
 8005be4:	f43f af27 	beq.w	8005a36 <_printf_float+0xc2>
 8005be8:	f108 0801 	add.w	r8, r8, #1
 8005bec:	e7e6      	b.n	8005bbc <_printf_float+0x248>
 8005bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	dc39      	bgt.n	8005c68 <_printf_float+0x2f4>
 8005bf4:	4a1b      	ldr	r2, [pc, #108]	; (8005c64 <_printf_float+0x2f0>)
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	4631      	mov	r1, r6
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	47b8      	blx	r7
 8005bfe:	3001      	adds	r0, #1
 8005c00:	f43f af19 	beq.w	8005a36 <_printf_float+0xc2>
 8005c04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	d102      	bne.n	8005c12 <_printf_float+0x29e>
 8005c0c:	6823      	ldr	r3, [r4, #0]
 8005c0e:	07d9      	lsls	r1, r3, #31
 8005c10:	d5d8      	bpl.n	8005bc4 <_printf_float+0x250>
 8005c12:	ee18 3a10 	vmov	r3, s16
 8005c16:	4652      	mov	r2, sl
 8005c18:	4631      	mov	r1, r6
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	47b8      	blx	r7
 8005c1e:	3001      	adds	r0, #1
 8005c20:	f43f af09 	beq.w	8005a36 <_printf_float+0xc2>
 8005c24:	f04f 0900 	mov.w	r9, #0
 8005c28:	f104 0a1a 	add.w	sl, r4, #26
 8005c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c2e:	425b      	negs	r3, r3
 8005c30:	454b      	cmp	r3, r9
 8005c32:	dc01      	bgt.n	8005c38 <_printf_float+0x2c4>
 8005c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c36:	e792      	b.n	8005b5e <_printf_float+0x1ea>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	4652      	mov	r2, sl
 8005c3c:	4631      	mov	r1, r6
 8005c3e:	4628      	mov	r0, r5
 8005c40:	47b8      	blx	r7
 8005c42:	3001      	adds	r0, #1
 8005c44:	f43f aef7 	beq.w	8005a36 <_printf_float+0xc2>
 8005c48:	f109 0901 	add.w	r9, r9, #1
 8005c4c:	e7ee      	b.n	8005c2c <_printf_float+0x2b8>
 8005c4e:	bf00      	nop
 8005c50:	7fefffff 	.word	0x7fefffff
 8005c54:	08008650 	.word	0x08008650
 8005c58:	08008654 	.word	0x08008654
 8005c5c:	0800865c 	.word	0x0800865c
 8005c60:	08008658 	.word	0x08008658
 8005c64:	08008660 	.word	0x08008660
 8005c68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	bfa8      	it	ge
 8005c70:	461a      	movge	r2, r3
 8005c72:	2a00      	cmp	r2, #0
 8005c74:	4691      	mov	r9, r2
 8005c76:	dc37      	bgt.n	8005ce8 <_printf_float+0x374>
 8005c78:	f04f 0b00 	mov.w	fp, #0
 8005c7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c80:	f104 021a 	add.w	r2, r4, #26
 8005c84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c86:	9305      	str	r3, [sp, #20]
 8005c88:	eba3 0309 	sub.w	r3, r3, r9
 8005c8c:	455b      	cmp	r3, fp
 8005c8e:	dc33      	bgt.n	8005cf8 <_printf_float+0x384>
 8005c90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c94:	429a      	cmp	r2, r3
 8005c96:	db3b      	blt.n	8005d10 <_printf_float+0x39c>
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	07da      	lsls	r2, r3, #31
 8005c9c:	d438      	bmi.n	8005d10 <_printf_float+0x39c>
 8005c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ca0:	9a05      	ldr	r2, [sp, #20]
 8005ca2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ca4:	1a9a      	subs	r2, r3, r2
 8005ca6:	eba3 0901 	sub.w	r9, r3, r1
 8005caa:	4591      	cmp	r9, r2
 8005cac:	bfa8      	it	ge
 8005cae:	4691      	movge	r9, r2
 8005cb0:	f1b9 0f00 	cmp.w	r9, #0
 8005cb4:	dc35      	bgt.n	8005d22 <_printf_float+0x3ae>
 8005cb6:	f04f 0800 	mov.w	r8, #0
 8005cba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cbe:	f104 0a1a 	add.w	sl, r4, #26
 8005cc2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cc6:	1a9b      	subs	r3, r3, r2
 8005cc8:	eba3 0309 	sub.w	r3, r3, r9
 8005ccc:	4543      	cmp	r3, r8
 8005cce:	f77f af79 	ble.w	8005bc4 <_printf_float+0x250>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	4652      	mov	r2, sl
 8005cd6:	4631      	mov	r1, r6
 8005cd8:	4628      	mov	r0, r5
 8005cda:	47b8      	blx	r7
 8005cdc:	3001      	adds	r0, #1
 8005cde:	f43f aeaa 	beq.w	8005a36 <_printf_float+0xc2>
 8005ce2:	f108 0801 	add.w	r8, r8, #1
 8005ce6:	e7ec      	b.n	8005cc2 <_printf_float+0x34e>
 8005ce8:	4613      	mov	r3, r2
 8005cea:	4631      	mov	r1, r6
 8005cec:	4642      	mov	r2, r8
 8005cee:	4628      	mov	r0, r5
 8005cf0:	47b8      	blx	r7
 8005cf2:	3001      	adds	r0, #1
 8005cf4:	d1c0      	bne.n	8005c78 <_printf_float+0x304>
 8005cf6:	e69e      	b.n	8005a36 <_printf_float+0xc2>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	4631      	mov	r1, r6
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	9205      	str	r2, [sp, #20]
 8005d00:	47b8      	blx	r7
 8005d02:	3001      	adds	r0, #1
 8005d04:	f43f ae97 	beq.w	8005a36 <_printf_float+0xc2>
 8005d08:	9a05      	ldr	r2, [sp, #20]
 8005d0a:	f10b 0b01 	add.w	fp, fp, #1
 8005d0e:	e7b9      	b.n	8005c84 <_printf_float+0x310>
 8005d10:	ee18 3a10 	vmov	r3, s16
 8005d14:	4652      	mov	r2, sl
 8005d16:	4631      	mov	r1, r6
 8005d18:	4628      	mov	r0, r5
 8005d1a:	47b8      	blx	r7
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d1be      	bne.n	8005c9e <_printf_float+0x32a>
 8005d20:	e689      	b.n	8005a36 <_printf_float+0xc2>
 8005d22:	9a05      	ldr	r2, [sp, #20]
 8005d24:	464b      	mov	r3, r9
 8005d26:	4442      	add	r2, r8
 8005d28:	4631      	mov	r1, r6
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	47b8      	blx	r7
 8005d2e:	3001      	adds	r0, #1
 8005d30:	d1c1      	bne.n	8005cb6 <_printf_float+0x342>
 8005d32:	e680      	b.n	8005a36 <_printf_float+0xc2>
 8005d34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d36:	2a01      	cmp	r2, #1
 8005d38:	dc01      	bgt.n	8005d3e <_printf_float+0x3ca>
 8005d3a:	07db      	lsls	r3, r3, #31
 8005d3c:	d538      	bpl.n	8005db0 <_printf_float+0x43c>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	4642      	mov	r2, r8
 8005d42:	4631      	mov	r1, r6
 8005d44:	4628      	mov	r0, r5
 8005d46:	47b8      	blx	r7
 8005d48:	3001      	adds	r0, #1
 8005d4a:	f43f ae74 	beq.w	8005a36 <_printf_float+0xc2>
 8005d4e:	ee18 3a10 	vmov	r3, s16
 8005d52:	4652      	mov	r2, sl
 8005d54:	4631      	mov	r1, r6
 8005d56:	4628      	mov	r0, r5
 8005d58:	47b8      	blx	r7
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	f43f ae6b 	beq.w	8005a36 <_printf_float+0xc2>
 8005d60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d64:	2200      	movs	r2, #0
 8005d66:	2300      	movs	r3, #0
 8005d68:	f7fa fece 	bl	8000b08 <__aeabi_dcmpeq>
 8005d6c:	b9d8      	cbnz	r0, 8005da6 <_printf_float+0x432>
 8005d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d70:	f108 0201 	add.w	r2, r8, #1
 8005d74:	3b01      	subs	r3, #1
 8005d76:	4631      	mov	r1, r6
 8005d78:	4628      	mov	r0, r5
 8005d7a:	47b8      	blx	r7
 8005d7c:	3001      	adds	r0, #1
 8005d7e:	d10e      	bne.n	8005d9e <_printf_float+0x42a>
 8005d80:	e659      	b.n	8005a36 <_printf_float+0xc2>
 8005d82:	2301      	movs	r3, #1
 8005d84:	4652      	mov	r2, sl
 8005d86:	4631      	mov	r1, r6
 8005d88:	4628      	mov	r0, r5
 8005d8a:	47b8      	blx	r7
 8005d8c:	3001      	adds	r0, #1
 8005d8e:	f43f ae52 	beq.w	8005a36 <_printf_float+0xc2>
 8005d92:	f108 0801 	add.w	r8, r8, #1
 8005d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	4543      	cmp	r3, r8
 8005d9c:	dcf1      	bgt.n	8005d82 <_printf_float+0x40e>
 8005d9e:	464b      	mov	r3, r9
 8005da0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005da4:	e6dc      	b.n	8005b60 <_printf_float+0x1ec>
 8005da6:	f04f 0800 	mov.w	r8, #0
 8005daa:	f104 0a1a 	add.w	sl, r4, #26
 8005dae:	e7f2      	b.n	8005d96 <_printf_float+0x422>
 8005db0:	2301      	movs	r3, #1
 8005db2:	4642      	mov	r2, r8
 8005db4:	e7df      	b.n	8005d76 <_printf_float+0x402>
 8005db6:	2301      	movs	r3, #1
 8005db8:	464a      	mov	r2, r9
 8005dba:	4631      	mov	r1, r6
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	47b8      	blx	r7
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	f43f ae38 	beq.w	8005a36 <_printf_float+0xc2>
 8005dc6:	f108 0801 	add.w	r8, r8, #1
 8005dca:	68e3      	ldr	r3, [r4, #12]
 8005dcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005dce:	1a5b      	subs	r3, r3, r1
 8005dd0:	4543      	cmp	r3, r8
 8005dd2:	dcf0      	bgt.n	8005db6 <_printf_float+0x442>
 8005dd4:	e6fa      	b.n	8005bcc <_printf_float+0x258>
 8005dd6:	f04f 0800 	mov.w	r8, #0
 8005dda:	f104 0919 	add.w	r9, r4, #25
 8005dde:	e7f4      	b.n	8005dca <_printf_float+0x456>

08005de0 <_printf_common>:
 8005de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005de4:	4616      	mov	r6, r2
 8005de6:	4699      	mov	r9, r3
 8005de8:	688a      	ldr	r2, [r1, #8]
 8005dea:	690b      	ldr	r3, [r1, #16]
 8005dec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005df0:	4293      	cmp	r3, r2
 8005df2:	bfb8      	it	lt
 8005df4:	4613      	movlt	r3, r2
 8005df6:	6033      	str	r3, [r6, #0]
 8005df8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005dfc:	4607      	mov	r7, r0
 8005dfe:	460c      	mov	r4, r1
 8005e00:	b10a      	cbz	r2, 8005e06 <_printf_common+0x26>
 8005e02:	3301      	adds	r3, #1
 8005e04:	6033      	str	r3, [r6, #0]
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	0699      	lsls	r1, r3, #26
 8005e0a:	bf42      	ittt	mi
 8005e0c:	6833      	ldrmi	r3, [r6, #0]
 8005e0e:	3302      	addmi	r3, #2
 8005e10:	6033      	strmi	r3, [r6, #0]
 8005e12:	6825      	ldr	r5, [r4, #0]
 8005e14:	f015 0506 	ands.w	r5, r5, #6
 8005e18:	d106      	bne.n	8005e28 <_printf_common+0x48>
 8005e1a:	f104 0a19 	add.w	sl, r4, #25
 8005e1e:	68e3      	ldr	r3, [r4, #12]
 8005e20:	6832      	ldr	r2, [r6, #0]
 8005e22:	1a9b      	subs	r3, r3, r2
 8005e24:	42ab      	cmp	r3, r5
 8005e26:	dc26      	bgt.n	8005e76 <_printf_common+0x96>
 8005e28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e2c:	1e13      	subs	r3, r2, #0
 8005e2e:	6822      	ldr	r2, [r4, #0]
 8005e30:	bf18      	it	ne
 8005e32:	2301      	movne	r3, #1
 8005e34:	0692      	lsls	r2, r2, #26
 8005e36:	d42b      	bmi.n	8005e90 <_printf_common+0xb0>
 8005e38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	4638      	mov	r0, r7
 8005e40:	47c0      	blx	r8
 8005e42:	3001      	adds	r0, #1
 8005e44:	d01e      	beq.n	8005e84 <_printf_common+0xa4>
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	68e5      	ldr	r5, [r4, #12]
 8005e4a:	6832      	ldr	r2, [r6, #0]
 8005e4c:	f003 0306 	and.w	r3, r3, #6
 8005e50:	2b04      	cmp	r3, #4
 8005e52:	bf08      	it	eq
 8005e54:	1aad      	subeq	r5, r5, r2
 8005e56:	68a3      	ldr	r3, [r4, #8]
 8005e58:	6922      	ldr	r2, [r4, #16]
 8005e5a:	bf0c      	ite	eq
 8005e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e60:	2500      	movne	r5, #0
 8005e62:	4293      	cmp	r3, r2
 8005e64:	bfc4      	itt	gt
 8005e66:	1a9b      	subgt	r3, r3, r2
 8005e68:	18ed      	addgt	r5, r5, r3
 8005e6a:	2600      	movs	r6, #0
 8005e6c:	341a      	adds	r4, #26
 8005e6e:	42b5      	cmp	r5, r6
 8005e70:	d11a      	bne.n	8005ea8 <_printf_common+0xc8>
 8005e72:	2000      	movs	r0, #0
 8005e74:	e008      	b.n	8005e88 <_printf_common+0xa8>
 8005e76:	2301      	movs	r3, #1
 8005e78:	4652      	mov	r2, sl
 8005e7a:	4649      	mov	r1, r9
 8005e7c:	4638      	mov	r0, r7
 8005e7e:	47c0      	blx	r8
 8005e80:	3001      	adds	r0, #1
 8005e82:	d103      	bne.n	8005e8c <_printf_common+0xac>
 8005e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e8c:	3501      	adds	r5, #1
 8005e8e:	e7c6      	b.n	8005e1e <_printf_common+0x3e>
 8005e90:	18e1      	adds	r1, r4, r3
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	2030      	movs	r0, #48	; 0x30
 8005e96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e9a:	4422      	add	r2, r4
 8005e9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ea0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ea4:	3302      	adds	r3, #2
 8005ea6:	e7c7      	b.n	8005e38 <_printf_common+0x58>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	4622      	mov	r2, r4
 8005eac:	4649      	mov	r1, r9
 8005eae:	4638      	mov	r0, r7
 8005eb0:	47c0      	blx	r8
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	d0e6      	beq.n	8005e84 <_printf_common+0xa4>
 8005eb6:	3601      	adds	r6, #1
 8005eb8:	e7d9      	b.n	8005e6e <_printf_common+0x8e>
	...

08005ebc <_printf_i>:
 8005ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec0:	7e0f      	ldrb	r7, [r1, #24]
 8005ec2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ec4:	2f78      	cmp	r7, #120	; 0x78
 8005ec6:	4691      	mov	r9, r2
 8005ec8:	4680      	mov	r8, r0
 8005eca:	460c      	mov	r4, r1
 8005ecc:	469a      	mov	sl, r3
 8005ece:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ed2:	d807      	bhi.n	8005ee4 <_printf_i+0x28>
 8005ed4:	2f62      	cmp	r7, #98	; 0x62
 8005ed6:	d80a      	bhi.n	8005eee <_printf_i+0x32>
 8005ed8:	2f00      	cmp	r7, #0
 8005eda:	f000 80d8 	beq.w	800608e <_printf_i+0x1d2>
 8005ede:	2f58      	cmp	r7, #88	; 0x58
 8005ee0:	f000 80a3 	beq.w	800602a <_printf_i+0x16e>
 8005ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ee8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005eec:	e03a      	b.n	8005f64 <_printf_i+0xa8>
 8005eee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ef2:	2b15      	cmp	r3, #21
 8005ef4:	d8f6      	bhi.n	8005ee4 <_printf_i+0x28>
 8005ef6:	a101      	add	r1, pc, #4	; (adr r1, 8005efc <_printf_i+0x40>)
 8005ef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005efc:	08005f55 	.word	0x08005f55
 8005f00:	08005f69 	.word	0x08005f69
 8005f04:	08005ee5 	.word	0x08005ee5
 8005f08:	08005ee5 	.word	0x08005ee5
 8005f0c:	08005ee5 	.word	0x08005ee5
 8005f10:	08005ee5 	.word	0x08005ee5
 8005f14:	08005f69 	.word	0x08005f69
 8005f18:	08005ee5 	.word	0x08005ee5
 8005f1c:	08005ee5 	.word	0x08005ee5
 8005f20:	08005ee5 	.word	0x08005ee5
 8005f24:	08005ee5 	.word	0x08005ee5
 8005f28:	08006075 	.word	0x08006075
 8005f2c:	08005f99 	.word	0x08005f99
 8005f30:	08006057 	.word	0x08006057
 8005f34:	08005ee5 	.word	0x08005ee5
 8005f38:	08005ee5 	.word	0x08005ee5
 8005f3c:	08006097 	.word	0x08006097
 8005f40:	08005ee5 	.word	0x08005ee5
 8005f44:	08005f99 	.word	0x08005f99
 8005f48:	08005ee5 	.word	0x08005ee5
 8005f4c:	08005ee5 	.word	0x08005ee5
 8005f50:	0800605f 	.word	0x0800605f
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	1d1a      	adds	r2, r3, #4
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	602a      	str	r2, [r5, #0]
 8005f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f64:	2301      	movs	r3, #1
 8005f66:	e0a3      	b.n	80060b0 <_printf_i+0x1f4>
 8005f68:	6820      	ldr	r0, [r4, #0]
 8005f6a:	6829      	ldr	r1, [r5, #0]
 8005f6c:	0606      	lsls	r6, r0, #24
 8005f6e:	f101 0304 	add.w	r3, r1, #4
 8005f72:	d50a      	bpl.n	8005f8a <_printf_i+0xce>
 8005f74:	680e      	ldr	r6, [r1, #0]
 8005f76:	602b      	str	r3, [r5, #0]
 8005f78:	2e00      	cmp	r6, #0
 8005f7a:	da03      	bge.n	8005f84 <_printf_i+0xc8>
 8005f7c:	232d      	movs	r3, #45	; 0x2d
 8005f7e:	4276      	negs	r6, r6
 8005f80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f84:	485e      	ldr	r0, [pc, #376]	; (8006100 <_printf_i+0x244>)
 8005f86:	230a      	movs	r3, #10
 8005f88:	e019      	b.n	8005fbe <_printf_i+0x102>
 8005f8a:	680e      	ldr	r6, [r1, #0]
 8005f8c:	602b      	str	r3, [r5, #0]
 8005f8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f92:	bf18      	it	ne
 8005f94:	b236      	sxthne	r6, r6
 8005f96:	e7ef      	b.n	8005f78 <_printf_i+0xbc>
 8005f98:	682b      	ldr	r3, [r5, #0]
 8005f9a:	6820      	ldr	r0, [r4, #0]
 8005f9c:	1d19      	adds	r1, r3, #4
 8005f9e:	6029      	str	r1, [r5, #0]
 8005fa0:	0601      	lsls	r1, r0, #24
 8005fa2:	d501      	bpl.n	8005fa8 <_printf_i+0xec>
 8005fa4:	681e      	ldr	r6, [r3, #0]
 8005fa6:	e002      	b.n	8005fae <_printf_i+0xf2>
 8005fa8:	0646      	lsls	r6, r0, #25
 8005faa:	d5fb      	bpl.n	8005fa4 <_printf_i+0xe8>
 8005fac:	881e      	ldrh	r6, [r3, #0]
 8005fae:	4854      	ldr	r0, [pc, #336]	; (8006100 <_printf_i+0x244>)
 8005fb0:	2f6f      	cmp	r7, #111	; 0x6f
 8005fb2:	bf0c      	ite	eq
 8005fb4:	2308      	moveq	r3, #8
 8005fb6:	230a      	movne	r3, #10
 8005fb8:	2100      	movs	r1, #0
 8005fba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fbe:	6865      	ldr	r5, [r4, #4]
 8005fc0:	60a5      	str	r5, [r4, #8]
 8005fc2:	2d00      	cmp	r5, #0
 8005fc4:	bfa2      	ittt	ge
 8005fc6:	6821      	ldrge	r1, [r4, #0]
 8005fc8:	f021 0104 	bicge.w	r1, r1, #4
 8005fcc:	6021      	strge	r1, [r4, #0]
 8005fce:	b90e      	cbnz	r6, 8005fd4 <_printf_i+0x118>
 8005fd0:	2d00      	cmp	r5, #0
 8005fd2:	d04d      	beq.n	8006070 <_printf_i+0x1b4>
 8005fd4:	4615      	mov	r5, r2
 8005fd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005fda:	fb03 6711 	mls	r7, r3, r1, r6
 8005fde:	5dc7      	ldrb	r7, [r0, r7]
 8005fe0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fe4:	4637      	mov	r7, r6
 8005fe6:	42bb      	cmp	r3, r7
 8005fe8:	460e      	mov	r6, r1
 8005fea:	d9f4      	bls.n	8005fd6 <_printf_i+0x11a>
 8005fec:	2b08      	cmp	r3, #8
 8005fee:	d10b      	bne.n	8006008 <_printf_i+0x14c>
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	07de      	lsls	r6, r3, #31
 8005ff4:	d508      	bpl.n	8006008 <_printf_i+0x14c>
 8005ff6:	6923      	ldr	r3, [r4, #16]
 8005ff8:	6861      	ldr	r1, [r4, #4]
 8005ffa:	4299      	cmp	r1, r3
 8005ffc:	bfde      	ittt	le
 8005ffe:	2330      	movle	r3, #48	; 0x30
 8006000:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006004:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006008:	1b52      	subs	r2, r2, r5
 800600a:	6122      	str	r2, [r4, #16]
 800600c:	f8cd a000 	str.w	sl, [sp]
 8006010:	464b      	mov	r3, r9
 8006012:	aa03      	add	r2, sp, #12
 8006014:	4621      	mov	r1, r4
 8006016:	4640      	mov	r0, r8
 8006018:	f7ff fee2 	bl	8005de0 <_printf_common>
 800601c:	3001      	adds	r0, #1
 800601e:	d14c      	bne.n	80060ba <_printf_i+0x1fe>
 8006020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006024:	b004      	add	sp, #16
 8006026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800602a:	4835      	ldr	r0, [pc, #212]	; (8006100 <_printf_i+0x244>)
 800602c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006030:	6829      	ldr	r1, [r5, #0]
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	f851 6b04 	ldr.w	r6, [r1], #4
 8006038:	6029      	str	r1, [r5, #0]
 800603a:	061d      	lsls	r5, r3, #24
 800603c:	d514      	bpl.n	8006068 <_printf_i+0x1ac>
 800603e:	07df      	lsls	r7, r3, #31
 8006040:	bf44      	itt	mi
 8006042:	f043 0320 	orrmi.w	r3, r3, #32
 8006046:	6023      	strmi	r3, [r4, #0]
 8006048:	b91e      	cbnz	r6, 8006052 <_printf_i+0x196>
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	f023 0320 	bic.w	r3, r3, #32
 8006050:	6023      	str	r3, [r4, #0]
 8006052:	2310      	movs	r3, #16
 8006054:	e7b0      	b.n	8005fb8 <_printf_i+0xfc>
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	f043 0320 	orr.w	r3, r3, #32
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	2378      	movs	r3, #120	; 0x78
 8006060:	4828      	ldr	r0, [pc, #160]	; (8006104 <_printf_i+0x248>)
 8006062:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006066:	e7e3      	b.n	8006030 <_printf_i+0x174>
 8006068:	0659      	lsls	r1, r3, #25
 800606a:	bf48      	it	mi
 800606c:	b2b6      	uxthmi	r6, r6
 800606e:	e7e6      	b.n	800603e <_printf_i+0x182>
 8006070:	4615      	mov	r5, r2
 8006072:	e7bb      	b.n	8005fec <_printf_i+0x130>
 8006074:	682b      	ldr	r3, [r5, #0]
 8006076:	6826      	ldr	r6, [r4, #0]
 8006078:	6961      	ldr	r1, [r4, #20]
 800607a:	1d18      	adds	r0, r3, #4
 800607c:	6028      	str	r0, [r5, #0]
 800607e:	0635      	lsls	r5, r6, #24
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	d501      	bpl.n	8006088 <_printf_i+0x1cc>
 8006084:	6019      	str	r1, [r3, #0]
 8006086:	e002      	b.n	800608e <_printf_i+0x1d2>
 8006088:	0670      	lsls	r0, r6, #25
 800608a:	d5fb      	bpl.n	8006084 <_printf_i+0x1c8>
 800608c:	8019      	strh	r1, [r3, #0]
 800608e:	2300      	movs	r3, #0
 8006090:	6123      	str	r3, [r4, #16]
 8006092:	4615      	mov	r5, r2
 8006094:	e7ba      	b.n	800600c <_printf_i+0x150>
 8006096:	682b      	ldr	r3, [r5, #0]
 8006098:	1d1a      	adds	r2, r3, #4
 800609a:	602a      	str	r2, [r5, #0]
 800609c:	681d      	ldr	r5, [r3, #0]
 800609e:	6862      	ldr	r2, [r4, #4]
 80060a0:	2100      	movs	r1, #0
 80060a2:	4628      	mov	r0, r5
 80060a4:	f7fa f8bc 	bl	8000220 <memchr>
 80060a8:	b108      	cbz	r0, 80060ae <_printf_i+0x1f2>
 80060aa:	1b40      	subs	r0, r0, r5
 80060ac:	6060      	str	r0, [r4, #4]
 80060ae:	6863      	ldr	r3, [r4, #4]
 80060b0:	6123      	str	r3, [r4, #16]
 80060b2:	2300      	movs	r3, #0
 80060b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060b8:	e7a8      	b.n	800600c <_printf_i+0x150>
 80060ba:	6923      	ldr	r3, [r4, #16]
 80060bc:	462a      	mov	r2, r5
 80060be:	4649      	mov	r1, r9
 80060c0:	4640      	mov	r0, r8
 80060c2:	47d0      	blx	sl
 80060c4:	3001      	adds	r0, #1
 80060c6:	d0ab      	beq.n	8006020 <_printf_i+0x164>
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	079b      	lsls	r3, r3, #30
 80060cc:	d413      	bmi.n	80060f6 <_printf_i+0x23a>
 80060ce:	68e0      	ldr	r0, [r4, #12]
 80060d0:	9b03      	ldr	r3, [sp, #12]
 80060d2:	4298      	cmp	r0, r3
 80060d4:	bfb8      	it	lt
 80060d6:	4618      	movlt	r0, r3
 80060d8:	e7a4      	b.n	8006024 <_printf_i+0x168>
 80060da:	2301      	movs	r3, #1
 80060dc:	4632      	mov	r2, r6
 80060de:	4649      	mov	r1, r9
 80060e0:	4640      	mov	r0, r8
 80060e2:	47d0      	blx	sl
 80060e4:	3001      	adds	r0, #1
 80060e6:	d09b      	beq.n	8006020 <_printf_i+0x164>
 80060e8:	3501      	adds	r5, #1
 80060ea:	68e3      	ldr	r3, [r4, #12]
 80060ec:	9903      	ldr	r1, [sp, #12]
 80060ee:	1a5b      	subs	r3, r3, r1
 80060f0:	42ab      	cmp	r3, r5
 80060f2:	dcf2      	bgt.n	80060da <_printf_i+0x21e>
 80060f4:	e7eb      	b.n	80060ce <_printf_i+0x212>
 80060f6:	2500      	movs	r5, #0
 80060f8:	f104 0619 	add.w	r6, r4, #25
 80060fc:	e7f5      	b.n	80060ea <_printf_i+0x22e>
 80060fe:	bf00      	nop
 8006100:	08008662 	.word	0x08008662
 8006104:	08008673 	.word	0x08008673

08006108 <siprintf>:
 8006108:	b40e      	push	{r1, r2, r3}
 800610a:	b500      	push	{lr}
 800610c:	b09c      	sub	sp, #112	; 0x70
 800610e:	ab1d      	add	r3, sp, #116	; 0x74
 8006110:	9002      	str	r0, [sp, #8]
 8006112:	9006      	str	r0, [sp, #24]
 8006114:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006118:	4809      	ldr	r0, [pc, #36]	; (8006140 <siprintf+0x38>)
 800611a:	9107      	str	r1, [sp, #28]
 800611c:	9104      	str	r1, [sp, #16]
 800611e:	4909      	ldr	r1, [pc, #36]	; (8006144 <siprintf+0x3c>)
 8006120:	f853 2b04 	ldr.w	r2, [r3], #4
 8006124:	9105      	str	r1, [sp, #20]
 8006126:	6800      	ldr	r0, [r0, #0]
 8006128:	9301      	str	r3, [sp, #4]
 800612a:	a902      	add	r1, sp, #8
 800612c:	f001 fb68 	bl	8007800 <_svfiprintf_r>
 8006130:	9b02      	ldr	r3, [sp, #8]
 8006132:	2200      	movs	r2, #0
 8006134:	701a      	strb	r2, [r3, #0]
 8006136:	b01c      	add	sp, #112	; 0x70
 8006138:	f85d eb04 	ldr.w	lr, [sp], #4
 800613c:	b003      	add	sp, #12
 800613e:	4770      	bx	lr
 8006140:	2000000c 	.word	0x2000000c
 8006144:	ffff0208 	.word	0xffff0208

08006148 <quorem>:
 8006148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614c:	6903      	ldr	r3, [r0, #16]
 800614e:	690c      	ldr	r4, [r1, #16]
 8006150:	42a3      	cmp	r3, r4
 8006152:	4607      	mov	r7, r0
 8006154:	f2c0 8081 	blt.w	800625a <quorem+0x112>
 8006158:	3c01      	subs	r4, #1
 800615a:	f101 0814 	add.w	r8, r1, #20
 800615e:	f100 0514 	add.w	r5, r0, #20
 8006162:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006166:	9301      	str	r3, [sp, #4]
 8006168:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800616c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006170:	3301      	adds	r3, #1
 8006172:	429a      	cmp	r2, r3
 8006174:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006178:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800617c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006180:	d331      	bcc.n	80061e6 <quorem+0x9e>
 8006182:	f04f 0e00 	mov.w	lr, #0
 8006186:	4640      	mov	r0, r8
 8006188:	46ac      	mov	ip, r5
 800618a:	46f2      	mov	sl, lr
 800618c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006190:	b293      	uxth	r3, r2
 8006192:	fb06 e303 	mla	r3, r6, r3, lr
 8006196:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800619a:	b29b      	uxth	r3, r3
 800619c:	ebaa 0303 	sub.w	r3, sl, r3
 80061a0:	f8dc a000 	ldr.w	sl, [ip]
 80061a4:	0c12      	lsrs	r2, r2, #16
 80061a6:	fa13 f38a 	uxtah	r3, r3, sl
 80061aa:	fb06 e202 	mla	r2, r6, r2, lr
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	9b00      	ldr	r3, [sp, #0]
 80061b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80061b6:	b292      	uxth	r2, r2
 80061b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80061bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061c0:	f8bd 3000 	ldrh.w	r3, [sp]
 80061c4:	4581      	cmp	r9, r0
 80061c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061ca:	f84c 3b04 	str.w	r3, [ip], #4
 80061ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80061d2:	d2db      	bcs.n	800618c <quorem+0x44>
 80061d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80061d8:	b92b      	cbnz	r3, 80061e6 <quorem+0x9e>
 80061da:	9b01      	ldr	r3, [sp, #4]
 80061dc:	3b04      	subs	r3, #4
 80061de:	429d      	cmp	r5, r3
 80061e0:	461a      	mov	r2, r3
 80061e2:	d32e      	bcc.n	8006242 <quorem+0xfa>
 80061e4:	613c      	str	r4, [r7, #16]
 80061e6:	4638      	mov	r0, r7
 80061e8:	f001 f8b6 	bl	8007358 <__mcmp>
 80061ec:	2800      	cmp	r0, #0
 80061ee:	db24      	blt.n	800623a <quorem+0xf2>
 80061f0:	3601      	adds	r6, #1
 80061f2:	4628      	mov	r0, r5
 80061f4:	f04f 0c00 	mov.w	ip, #0
 80061f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80061fc:	f8d0 e000 	ldr.w	lr, [r0]
 8006200:	b293      	uxth	r3, r2
 8006202:	ebac 0303 	sub.w	r3, ip, r3
 8006206:	0c12      	lsrs	r2, r2, #16
 8006208:	fa13 f38e 	uxtah	r3, r3, lr
 800620c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006210:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006214:	b29b      	uxth	r3, r3
 8006216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800621a:	45c1      	cmp	r9, r8
 800621c:	f840 3b04 	str.w	r3, [r0], #4
 8006220:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006224:	d2e8      	bcs.n	80061f8 <quorem+0xb0>
 8006226:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800622a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800622e:	b922      	cbnz	r2, 800623a <quorem+0xf2>
 8006230:	3b04      	subs	r3, #4
 8006232:	429d      	cmp	r5, r3
 8006234:	461a      	mov	r2, r3
 8006236:	d30a      	bcc.n	800624e <quorem+0x106>
 8006238:	613c      	str	r4, [r7, #16]
 800623a:	4630      	mov	r0, r6
 800623c:	b003      	add	sp, #12
 800623e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006242:	6812      	ldr	r2, [r2, #0]
 8006244:	3b04      	subs	r3, #4
 8006246:	2a00      	cmp	r2, #0
 8006248:	d1cc      	bne.n	80061e4 <quorem+0x9c>
 800624a:	3c01      	subs	r4, #1
 800624c:	e7c7      	b.n	80061de <quorem+0x96>
 800624e:	6812      	ldr	r2, [r2, #0]
 8006250:	3b04      	subs	r3, #4
 8006252:	2a00      	cmp	r2, #0
 8006254:	d1f0      	bne.n	8006238 <quorem+0xf0>
 8006256:	3c01      	subs	r4, #1
 8006258:	e7eb      	b.n	8006232 <quorem+0xea>
 800625a:	2000      	movs	r0, #0
 800625c:	e7ee      	b.n	800623c <quorem+0xf4>
	...

08006260 <_dtoa_r>:
 8006260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006264:	ed2d 8b04 	vpush	{d8-d9}
 8006268:	ec57 6b10 	vmov	r6, r7, d0
 800626c:	b093      	sub	sp, #76	; 0x4c
 800626e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006270:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006274:	9106      	str	r1, [sp, #24]
 8006276:	ee10 aa10 	vmov	sl, s0
 800627a:	4604      	mov	r4, r0
 800627c:	9209      	str	r2, [sp, #36]	; 0x24
 800627e:	930c      	str	r3, [sp, #48]	; 0x30
 8006280:	46bb      	mov	fp, r7
 8006282:	b975      	cbnz	r5, 80062a2 <_dtoa_r+0x42>
 8006284:	2010      	movs	r0, #16
 8006286:	f000 fddd 	bl	8006e44 <malloc>
 800628a:	4602      	mov	r2, r0
 800628c:	6260      	str	r0, [r4, #36]	; 0x24
 800628e:	b920      	cbnz	r0, 800629a <_dtoa_r+0x3a>
 8006290:	4ba7      	ldr	r3, [pc, #668]	; (8006530 <_dtoa_r+0x2d0>)
 8006292:	21ea      	movs	r1, #234	; 0xea
 8006294:	48a7      	ldr	r0, [pc, #668]	; (8006534 <_dtoa_r+0x2d4>)
 8006296:	f001 fbc3 	bl	8007a20 <__assert_func>
 800629a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800629e:	6005      	str	r5, [r0, #0]
 80062a0:	60c5      	str	r5, [r0, #12]
 80062a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062a4:	6819      	ldr	r1, [r3, #0]
 80062a6:	b151      	cbz	r1, 80062be <_dtoa_r+0x5e>
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	604a      	str	r2, [r1, #4]
 80062ac:	2301      	movs	r3, #1
 80062ae:	4093      	lsls	r3, r2
 80062b0:	608b      	str	r3, [r1, #8]
 80062b2:	4620      	mov	r0, r4
 80062b4:	f000 fe0e 	bl	8006ed4 <_Bfree>
 80062b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062ba:	2200      	movs	r2, #0
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	1e3b      	subs	r3, r7, #0
 80062c0:	bfaa      	itet	ge
 80062c2:	2300      	movge	r3, #0
 80062c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80062c8:	f8c8 3000 	strge.w	r3, [r8]
 80062cc:	4b9a      	ldr	r3, [pc, #616]	; (8006538 <_dtoa_r+0x2d8>)
 80062ce:	bfbc      	itt	lt
 80062d0:	2201      	movlt	r2, #1
 80062d2:	f8c8 2000 	strlt.w	r2, [r8]
 80062d6:	ea33 030b 	bics.w	r3, r3, fp
 80062da:	d11b      	bne.n	8006314 <_dtoa_r+0xb4>
 80062dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062de:	f242 730f 	movw	r3, #9999	; 0x270f
 80062e2:	6013      	str	r3, [r2, #0]
 80062e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80062e8:	4333      	orrs	r3, r6
 80062ea:	f000 8592 	beq.w	8006e12 <_dtoa_r+0xbb2>
 80062ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062f0:	b963      	cbnz	r3, 800630c <_dtoa_r+0xac>
 80062f2:	4b92      	ldr	r3, [pc, #584]	; (800653c <_dtoa_r+0x2dc>)
 80062f4:	e022      	b.n	800633c <_dtoa_r+0xdc>
 80062f6:	4b92      	ldr	r3, [pc, #584]	; (8006540 <_dtoa_r+0x2e0>)
 80062f8:	9301      	str	r3, [sp, #4]
 80062fa:	3308      	adds	r3, #8
 80062fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80062fe:	6013      	str	r3, [r2, #0]
 8006300:	9801      	ldr	r0, [sp, #4]
 8006302:	b013      	add	sp, #76	; 0x4c
 8006304:	ecbd 8b04 	vpop	{d8-d9}
 8006308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800630c:	4b8b      	ldr	r3, [pc, #556]	; (800653c <_dtoa_r+0x2dc>)
 800630e:	9301      	str	r3, [sp, #4]
 8006310:	3303      	adds	r3, #3
 8006312:	e7f3      	b.n	80062fc <_dtoa_r+0x9c>
 8006314:	2200      	movs	r2, #0
 8006316:	2300      	movs	r3, #0
 8006318:	4650      	mov	r0, sl
 800631a:	4659      	mov	r1, fp
 800631c:	f7fa fbf4 	bl	8000b08 <__aeabi_dcmpeq>
 8006320:	ec4b ab19 	vmov	d9, sl, fp
 8006324:	4680      	mov	r8, r0
 8006326:	b158      	cbz	r0, 8006340 <_dtoa_r+0xe0>
 8006328:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800632a:	2301      	movs	r3, #1
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 856b 	beq.w	8006e0c <_dtoa_r+0xbac>
 8006336:	4883      	ldr	r0, [pc, #524]	; (8006544 <_dtoa_r+0x2e4>)
 8006338:	6018      	str	r0, [r3, #0]
 800633a:	1e43      	subs	r3, r0, #1
 800633c:	9301      	str	r3, [sp, #4]
 800633e:	e7df      	b.n	8006300 <_dtoa_r+0xa0>
 8006340:	ec4b ab10 	vmov	d0, sl, fp
 8006344:	aa10      	add	r2, sp, #64	; 0x40
 8006346:	a911      	add	r1, sp, #68	; 0x44
 8006348:	4620      	mov	r0, r4
 800634a:	f001 f8ab 	bl	80074a4 <__d2b>
 800634e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006352:	ee08 0a10 	vmov	s16, r0
 8006356:	2d00      	cmp	r5, #0
 8006358:	f000 8084 	beq.w	8006464 <_dtoa_r+0x204>
 800635c:	ee19 3a90 	vmov	r3, s19
 8006360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006364:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006368:	4656      	mov	r6, sl
 800636a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800636e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006372:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006376:	4b74      	ldr	r3, [pc, #464]	; (8006548 <_dtoa_r+0x2e8>)
 8006378:	2200      	movs	r2, #0
 800637a:	4630      	mov	r0, r6
 800637c:	4639      	mov	r1, r7
 800637e:	f7f9 ffa3 	bl	80002c8 <__aeabi_dsub>
 8006382:	a365      	add	r3, pc, #404	; (adr r3, 8006518 <_dtoa_r+0x2b8>)
 8006384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006388:	f7fa f956 	bl	8000638 <__aeabi_dmul>
 800638c:	a364      	add	r3, pc, #400	; (adr r3, 8006520 <_dtoa_r+0x2c0>)
 800638e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006392:	f7f9 ff9b 	bl	80002cc <__adddf3>
 8006396:	4606      	mov	r6, r0
 8006398:	4628      	mov	r0, r5
 800639a:	460f      	mov	r7, r1
 800639c:	f7fa f8e2 	bl	8000564 <__aeabi_i2d>
 80063a0:	a361      	add	r3, pc, #388	; (adr r3, 8006528 <_dtoa_r+0x2c8>)
 80063a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a6:	f7fa f947 	bl	8000638 <__aeabi_dmul>
 80063aa:	4602      	mov	r2, r0
 80063ac:	460b      	mov	r3, r1
 80063ae:	4630      	mov	r0, r6
 80063b0:	4639      	mov	r1, r7
 80063b2:	f7f9 ff8b 	bl	80002cc <__adddf3>
 80063b6:	4606      	mov	r6, r0
 80063b8:	460f      	mov	r7, r1
 80063ba:	f7fa fbed 	bl	8000b98 <__aeabi_d2iz>
 80063be:	2200      	movs	r2, #0
 80063c0:	9000      	str	r0, [sp, #0]
 80063c2:	2300      	movs	r3, #0
 80063c4:	4630      	mov	r0, r6
 80063c6:	4639      	mov	r1, r7
 80063c8:	f7fa fba8 	bl	8000b1c <__aeabi_dcmplt>
 80063cc:	b150      	cbz	r0, 80063e4 <_dtoa_r+0x184>
 80063ce:	9800      	ldr	r0, [sp, #0]
 80063d0:	f7fa f8c8 	bl	8000564 <__aeabi_i2d>
 80063d4:	4632      	mov	r2, r6
 80063d6:	463b      	mov	r3, r7
 80063d8:	f7fa fb96 	bl	8000b08 <__aeabi_dcmpeq>
 80063dc:	b910      	cbnz	r0, 80063e4 <_dtoa_r+0x184>
 80063de:	9b00      	ldr	r3, [sp, #0]
 80063e0:	3b01      	subs	r3, #1
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	9b00      	ldr	r3, [sp, #0]
 80063e6:	2b16      	cmp	r3, #22
 80063e8:	d85a      	bhi.n	80064a0 <_dtoa_r+0x240>
 80063ea:	9a00      	ldr	r2, [sp, #0]
 80063ec:	4b57      	ldr	r3, [pc, #348]	; (800654c <_dtoa_r+0x2ec>)
 80063ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f6:	ec51 0b19 	vmov	r0, r1, d9
 80063fa:	f7fa fb8f 	bl	8000b1c <__aeabi_dcmplt>
 80063fe:	2800      	cmp	r0, #0
 8006400:	d050      	beq.n	80064a4 <_dtoa_r+0x244>
 8006402:	9b00      	ldr	r3, [sp, #0]
 8006404:	3b01      	subs	r3, #1
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	2300      	movs	r3, #0
 800640a:	930b      	str	r3, [sp, #44]	; 0x2c
 800640c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800640e:	1b5d      	subs	r5, r3, r5
 8006410:	1e6b      	subs	r3, r5, #1
 8006412:	9305      	str	r3, [sp, #20]
 8006414:	bf45      	ittet	mi
 8006416:	f1c5 0301 	rsbmi	r3, r5, #1
 800641a:	9304      	strmi	r3, [sp, #16]
 800641c:	2300      	movpl	r3, #0
 800641e:	2300      	movmi	r3, #0
 8006420:	bf4c      	ite	mi
 8006422:	9305      	strmi	r3, [sp, #20]
 8006424:	9304      	strpl	r3, [sp, #16]
 8006426:	9b00      	ldr	r3, [sp, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	db3d      	blt.n	80064a8 <_dtoa_r+0x248>
 800642c:	9b05      	ldr	r3, [sp, #20]
 800642e:	9a00      	ldr	r2, [sp, #0]
 8006430:	920a      	str	r2, [sp, #40]	; 0x28
 8006432:	4413      	add	r3, r2
 8006434:	9305      	str	r3, [sp, #20]
 8006436:	2300      	movs	r3, #0
 8006438:	9307      	str	r3, [sp, #28]
 800643a:	9b06      	ldr	r3, [sp, #24]
 800643c:	2b09      	cmp	r3, #9
 800643e:	f200 8089 	bhi.w	8006554 <_dtoa_r+0x2f4>
 8006442:	2b05      	cmp	r3, #5
 8006444:	bfc4      	itt	gt
 8006446:	3b04      	subgt	r3, #4
 8006448:	9306      	strgt	r3, [sp, #24]
 800644a:	9b06      	ldr	r3, [sp, #24]
 800644c:	f1a3 0302 	sub.w	r3, r3, #2
 8006450:	bfcc      	ite	gt
 8006452:	2500      	movgt	r5, #0
 8006454:	2501      	movle	r5, #1
 8006456:	2b03      	cmp	r3, #3
 8006458:	f200 8087 	bhi.w	800656a <_dtoa_r+0x30a>
 800645c:	e8df f003 	tbb	[pc, r3]
 8006460:	59383a2d 	.word	0x59383a2d
 8006464:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006468:	441d      	add	r5, r3
 800646a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800646e:	2b20      	cmp	r3, #32
 8006470:	bfc1      	itttt	gt
 8006472:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006476:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800647a:	fa0b f303 	lslgt.w	r3, fp, r3
 800647e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006482:	bfda      	itte	le
 8006484:	f1c3 0320 	rsble	r3, r3, #32
 8006488:	fa06 f003 	lslle.w	r0, r6, r3
 800648c:	4318      	orrgt	r0, r3
 800648e:	f7fa f859 	bl	8000544 <__aeabi_ui2d>
 8006492:	2301      	movs	r3, #1
 8006494:	4606      	mov	r6, r0
 8006496:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800649a:	3d01      	subs	r5, #1
 800649c:	930e      	str	r3, [sp, #56]	; 0x38
 800649e:	e76a      	b.n	8006376 <_dtoa_r+0x116>
 80064a0:	2301      	movs	r3, #1
 80064a2:	e7b2      	b.n	800640a <_dtoa_r+0x1aa>
 80064a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80064a6:	e7b1      	b.n	800640c <_dtoa_r+0x1ac>
 80064a8:	9b04      	ldr	r3, [sp, #16]
 80064aa:	9a00      	ldr	r2, [sp, #0]
 80064ac:	1a9b      	subs	r3, r3, r2
 80064ae:	9304      	str	r3, [sp, #16]
 80064b0:	4253      	negs	r3, r2
 80064b2:	9307      	str	r3, [sp, #28]
 80064b4:	2300      	movs	r3, #0
 80064b6:	930a      	str	r3, [sp, #40]	; 0x28
 80064b8:	e7bf      	b.n	800643a <_dtoa_r+0x1da>
 80064ba:	2300      	movs	r3, #0
 80064bc:	9308      	str	r3, [sp, #32]
 80064be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	dc55      	bgt.n	8006570 <_dtoa_r+0x310>
 80064c4:	2301      	movs	r3, #1
 80064c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80064ca:	461a      	mov	r2, r3
 80064cc:	9209      	str	r2, [sp, #36]	; 0x24
 80064ce:	e00c      	b.n	80064ea <_dtoa_r+0x28a>
 80064d0:	2301      	movs	r3, #1
 80064d2:	e7f3      	b.n	80064bc <_dtoa_r+0x25c>
 80064d4:	2300      	movs	r3, #0
 80064d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064d8:	9308      	str	r3, [sp, #32]
 80064da:	9b00      	ldr	r3, [sp, #0]
 80064dc:	4413      	add	r3, r2
 80064de:	9302      	str	r3, [sp, #8]
 80064e0:	3301      	adds	r3, #1
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	9303      	str	r3, [sp, #12]
 80064e6:	bfb8      	it	lt
 80064e8:	2301      	movlt	r3, #1
 80064ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80064ec:	2200      	movs	r2, #0
 80064ee:	6042      	str	r2, [r0, #4]
 80064f0:	2204      	movs	r2, #4
 80064f2:	f102 0614 	add.w	r6, r2, #20
 80064f6:	429e      	cmp	r6, r3
 80064f8:	6841      	ldr	r1, [r0, #4]
 80064fa:	d93d      	bls.n	8006578 <_dtoa_r+0x318>
 80064fc:	4620      	mov	r0, r4
 80064fe:	f000 fca9 	bl	8006e54 <_Balloc>
 8006502:	9001      	str	r0, [sp, #4]
 8006504:	2800      	cmp	r0, #0
 8006506:	d13b      	bne.n	8006580 <_dtoa_r+0x320>
 8006508:	4b11      	ldr	r3, [pc, #68]	; (8006550 <_dtoa_r+0x2f0>)
 800650a:	4602      	mov	r2, r0
 800650c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006510:	e6c0      	b.n	8006294 <_dtoa_r+0x34>
 8006512:	2301      	movs	r3, #1
 8006514:	e7df      	b.n	80064d6 <_dtoa_r+0x276>
 8006516:	bf00      	nop
 8006518:	636f4361 	.word	0x636f4361
 800651c:	3fd287a7 	.word	0x3fd287a7
 8006520:	8b60c8b3 	.word	0x8b60c8b3
 8006524:	3fc68a28 	.word	0x3fc68a28
 8006528:	509f79fb 	.word	0x509f79fb
 800652c:	3fd34413 	.word	0x3fd34413
 8006530:	08008691 	.word	0x08008691
 8006534:	080086a8 	.word	0x080086a8
 8006538:	7ff00000 	.word	0x7ff00000
 800653c:	0800868d 	.word	0x0800868d
 8006540:	08008684 	.word	0x08008684
 8006544:	08008661 	.word	0x08008661
 8006548:	3ff80000 	.word	0x3ff80000
 800654c:	08008798 	.word	0x08008798
 8006550:	08008703 	.word	0x08008703
 8006554:	2501      	movs	r5, #1
 8006556:	2300      	movs	r3, #0
 8006558:	9306      	str	r3, [sp, #24]
 800655a:	9508      	str	r5, [sp, #32]
 800655c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006560:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006564:	2200      	movs	r2, #0
 8006566:	2312      	movs	r3, #18
 8006568:	e7b0      	b.n	80064cc <_dtoa_r+0x26c>
 800656a:	2301      	movs	r3, #1
 800656c:	9308      	str	r3, [sp, #32]
 800656e:	e7f5      	b.n	800655c <_dtoa_r+0x2fc>
 8006570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006572:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006576:	e7b8      	b.n	80064ea <_dtoa_r+0x28a>
 8006578:	3101      	adds	r1, #1
 800657a:	6041      	str	r1, [r0, #4]
 800657c:	0052      	lsls	r2, r2, #1
 800657e:	e7b8      	b.n	80064f2 <_dtoa_r+0x292>
 8006580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006582:	9a01      	ldr	r2, [sp, #4]
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	9b03      	ldr	r3, [sp, #12]
 8006588:	2b0e      	cmp	r3, #14
 800658a:	f200 809d 	bhi.w	80066c8 <_dtoa_r+0x468>
 800658e:	2d00      	cmp	r5, #0
 8006590:	f000 809a 	beq.w	80066c8 <_dtoa_r+0x468>
 8006594:	9b00      	ldr	r3, [sp, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	dd32      	ble.n	8006600 <_dtoa_r+0x3a0>
 800659a:	4ab7      	ldr	r2, [pc, #732]	; (8006878 <_dtoa_r+0x618>)
 800659c:	f003 030f 	and.w	r3, r3, #15
 80065a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80065a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065a8:	9b00      	ldr	r3, [sp, #0]
 80065aa:	05d8      	lsls	r0, r3, #23
 80065ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80065b0:	d516      	bpl.n	80065e0 <_dtoa_r+0x380>
 80065b2:	4bb2      	ldr	r3, [pc, #712]	; (800687c <_dtoa_r+0x61c>)
 80065b4:	ec51 0b19 	vmov	r0, r1, d9
 80065b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80065bc:	f7fa f966 	bl	800088c <__aeabi_ddiv>
 80065c0:	f007 070f 	and.w	r7, r7, #15
 80065c4:	4682      	mov	sl, r0
 80065c6:	468b      	mov	fp, r1
 80065c8:	2503      	movs	r5, #3
 80065ca:	4eac      	ldr	r6, [pc, #688]	; (800687c <_dtoa_r+0x61c>)
 80065cc:	b957      	cbnz	r7, 80065e4 <_dtoa_r+0x384>
 80065ce:	4642      	mov	r2, r8
 80065d0:	464b      	mov	r3, r9
 80065d2:	4650      	mov	r0, sl
 80065d4:	4659      	mov	r1, fp
 80065d6:	f7fa f959 	bl	800088c <__aeabi_ddiv>
 80065da:	4682      	mov	sl, r0
 80065dc:	468b      	mov	fp, r1
 80065de:	e028      	b.n	8006632 <_dtoa_r+0x3d2>
 80065e0:	2502      	movs	r5, #2
 80065e2:	e7f2      	b.n	80065ca <_dtoa_r+0x36a>
 80065e4:	07f9      	lsls	r1, r7, #31
 80065e6:	d508      	bpl.n	80065fa <_dtoa_r+0x39a>
 80065e8:	4640      	mov	r0, r8
 80065ea:	4649      	mov	r1, r9
 80065ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065f0:	f7fa f822 	bl	8000638 <__aeabi_dmul>
 80065f4:	3501      	adds	r5, #1
 80065f6:	4680      	mov	r8, r0
 80065f8:	4689      	mov	r9, r1
 80065fa:	107f      	asrs	r7, r7, #1
 80065fc:	3608      	adds	r6, #8
 80065fe:	e7e5      	b.n	80065cc <_dtoa_r+0x36c>
 8006600:	f000 809b 	beq.w	800673a <_dtoa_r+0x4da>
 8006604:	9b00      	ldr	r3, [sp, #0]
 8006606:	4f9d      	ldr	r7, [pc, #628]	; (800687c <_dtoa_r+0x61c>)
 8006608:	425e      	negs	r6, r3
 800660a:	4b9b      	ldr	r3, [pc, #620]	; (8006878 <_dtoa_r+0x618>)
 800660c:	f006 020f 	and.w	r2, r6, #15
 8006610:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006618:	ec51 0b19 	vmov	r0, r1, d9
 800661c:	f7fa f80c 	bl	8000638 <__aeabi_dmul>
 8006620:	1136      	asrs	r6, r6, #4
 8006622:	4682      	mov	sl, r0
 8006624:	468b      	mov	fp, r1
 8006626:	2300      	movs	r3, #0
 8006628:	2502      	movs	r5, #2
 800662a:	2e00      	cmp	r6, #0
 800662c:	d17a      	bne.n	8006724 <_dtoa_r+0x4c4>
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1d3      	bne.n	80065da <_dtoa_r+0x37a>
 8006632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 8082 	beq.w	800673e <_dtoa_r+0x4de>
 800663a:	4b91      	ldr	r3, [pc, #580]	; (8006880 <_dtoa_r+0x620>)
 800663c:	2200      	movs	r2, #0
 800663e:	4650      	mov	r0, sl
 8006640:	4659      	mov	r1, fp
 8006642:	f7fa fa6b 	bl	8000b1c <__aeabi_dcmplt>
 8006646:	2800      	cmp	r0, #0
 8006648:	d079      	beq.n	800673e <_dtoa_r+0x4de>
 800664a:	9b03      	ldr	r3, [sp, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d076      	beq.n	800673e <_dtoa_r+0x4de>
 8006650:	9b02      	ldr	r3, [sp, #8]
 8006652:	2b00      	cmp	r3, #0
 8006654:	dd36      	ble.n	80066c4 <_dtoa_r+0x464>
 8006656:	9b00      	ldr	r3, [sp, #0]
 8006658:	4650      	mov	r0, sl
 800665a:	4659      	mov	r1, fp
 800665c:	1e5f      	subs	r7, r3, #1
 800665e:	2200      	movs	r2, #0
 8006660:	4b88      	ldr	r3, [pc, #544]	; (8006884 <_dtoa_r+0x624>)
 8006662:	f7f9 ffe9 	bl	8000638 <__aeabi_dmul>
 8006666:	9e02      	ldr	r6, [sp, #8]
 8006668:	4682      	mov	sl, r0
 800666a:	468b      	mov	fp, r1
 800666c:	3501      	adds	r5, #1
 800666e:	4628      	mov	r0, r5
 8006670:	f7f9 ff78 	bl	8000564 <__aeabi_i2d>
 8006674:	4652      	mov	r2, sl
 8006676:	465b      	mov	r3, fp
 8006678:	f7f9 ffde 	bl	8000638 <__aeabi_dmul>
 800667c:	4b82      	ldr	r3, [pc, #520]	; (8006888 <_dtoa_r+0x628>)
 800667e:	2200      	movs	r2, #0
 8006680:	f7f9 fe24 	bl	80002cc <__adddf3>
 8006684:	46d0      	mov	r8, sl
 8006686:	46d9      	mov	r9, fp
 8006688:	4682      	mov	sl, r0
 800668a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800668e:	2e00      	cmp	r6, #0
 8006690:	d158      	bne.n	8006744 <_dtoa_r+0x4e4>
 8006692:	4b7e      	ldr	r3, [pc, #504]	; (800688c <_dtoa_r+0x62c>)
 8006694:	2200      	movs	r2, #0
 8006696:	4640      	mov	r0, r8
 8006698:	4649      	mov	r1, r9
 800669a:	f7f9 fe15 	bl	80002c8 <__aeabi_dsub>
 800669e:	4652      	mov	r2, sl
 80066a0:	465b      	mov	r3, fp
 80066a2:	4680      	mov	r8, r0
 80066a4:	4689      	mov	r9, r1
 80066a6:	f7fa fa57 	bl	8000b58 <__aeabi_dcmpgt>
 80066aa:	2800      	cmp	r0, #0
 80066ac:	f040 8295 	bne.w	8006bda <_dtoa_r+0x97a>
 80066b0:	4652      	mov	r2, sl
 80066b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80066b6:	4640      	mov	r0, r8
 80066b8:	4649      	mov	r1, r9
 80066ba:	f7fa fa2f 	bl	8000b1c <__aeabi_dcmplt>
 80066be:	2800      	cmp	r0, #0
 80066c0:	f040 8289 	bne.w	8006bd6 <_dtoa_r+0x976>
 80066c4:	ec5b ab19 	vmov	sl, fp, d9
 80066c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f2c0 8148 	blt.w	8006960 <_dtoa_r+0x700>
 80066d0:	9a00      	ldr	r2, [sp, #0]
 80066d2:	2a0e      	cmp	r2, #14
 80066d4:	f300 8144 	bgt.w	8006960 <_dtoa_r+0x700>
 80066d8:	4b67      	ldr	r3, [pc, #412]	; (8006878 <_dtoa_r+0x618>)
 80066da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f280 80d5 	bge.w	8006894 <_dtoa_r+0x634>
 80066ea:	9b03      	ldr	r3, [sp, #12]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f300 80d1 	bgt.w	8006894 <_dtoa_r+0x634>
 80066f2:	f040 826f 	bne.w	8006bd4 <_dtoa_r+0x974>
 80066f6:	4b65      	ldr	r3, [pc, #404]	; (800688c <_dtoa_r+0x62c>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	4640      	mov	r0, r8
 80066fc:	4649      	mov	r1, r9
 80066fe:	f7f9 ff9b 	bl	8000638 <__aeabi_dmul>
 8006702:	4652      	mov	r2, sl
 8006704:	465b      	mov	r3, fp
 8006706:	f7fa fa1d 	bl	8000b44 <__aeabi_dcmpge>
 800670a:	9e03      	ldr	r6, [sp, #12]
 800670c:	4637      	mov	r7, r6
 800670e:	2800      	cmp	r0, #0
 8006710:	f040 8245 	bne.w	8006b9e <_dtoa_r+0x93e>
 8006714:	9d01      	ldr	r5, [sp, #4]
 8006716:	2331      	movs	r3, #49	; 0x31
 8006718:	f805 3b01 	strb.w	r3, [r5], #1
 800671c:	9b00      	ldr	r3, [sp, #0]
 800671e:	3301      	adds	r3, #1
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	e240      	b.n	8006ba6 <_dtoa_r+0x946>
 8006724:	07f2      	lsls	r2, r6, #31
 8006726:	d505      	bpl.n	8006734 <_dtoa_r+0x4d4>
 8006728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800672c:	f7f9 ff84 	bl	8000638 <__aeabi_dmul>
 8006730:	3501      	adds	r5, #1
 8006732:	2301      	movs	r3, #1
 8006734:	1076      	asrs	r6, r6, #1
 8006736:	3708      	adds	r7, #8
 8006738:	e777      	b.n	800662a <_dtoa_r+0x3ca>
 800673a:	2502      	movs	r5, #2
 800673c:	e779      	b.n	8006632 <_dtoa_r+0x3d2>
 800673e:	9f00      	ldr	r7, [sp, #0]
 8006740:	9e03      	ldr	r6, [sp, #12]
 8006742:	e794      	b.n	800666e <_dtoa_r+0x40e>
 8006744:	9901      	ldr	r1, [sp, #4]
 8006746:	4b4c      	ldr	r3, [pc, #304]	; (8006878 <_dtoa_r+0x618>)
 8006748:	4431      	add	r1, r6
 800674a:	910d      	str	r1, [sp, #52]	; 0x34
 800674c:	9908      	ldr	r1, [sp, #32]
 800674e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006752:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006756:	2900      	cmp	r1, #0
 8006758:	d043      	beq.n	80067e2 <_dtoa_r+0x582>
 800675a:	494d      	ldr	r1, [pc, #308]	; (8006890 <_dtoa_r+0x630>)
 800675c:	2000      	movs	r0, #0
 800675e:	f7fa f895 	bl	800088c <__aeabi_ddiv>
 8006762:	4652      	mov	r2, sl
 8006764:	465b      	mov	r3, fp
 8006766:	f7f9 fdaf 	bl	80002c8 <__aeabi_dsub>
 800676a:	9d01      	ldr	r5, [sp, #4]
 800676c:	4682      	mov	sl, r0
 800676e:	468b      	mov	fp, r1
 8006770:	4649      	mov	r1, r9
 8006772:	4640      	mov	r0, r8
 8006774:	f7fa fa10 	bl	8000b98 <__aeabi_d2iz>
 8006778:	4606      	mov	r6, r0
 800677a:	f7f9 fef3 	bl	8000564 <__aeabi_i2d>
 800677e:	4602      	mov	r2, r0
 8006780:	460b      	mov	r3, r1
 8006782:	4640      	mov	r0, r8
 8006784:	4649      	mov	r1, r9
 8006786:	f7f9 fd9f 	bl	80002c8 <__aeabi_dsub>
 800678a:	3630      	adds	r6, #48	; 0x30
 800678c:	f805 6b01 	strb.w	r6, [r5], #1
 8006790:	4652      	mov	r2, sl
 8006792:	465b      	mov	r3, fp
 8006794:	4680      	mov	r8, r0
 8006796:	4689      	mov	r9, r1
 8006798:	f7fa f9c0 	bl	8000b1c <__aeabi_dcmplt>
 800679c:	2800      	cmp	r0, #0
 800679e:	d163      	bne.n	8006868 <_dtoa_r+0x608>
 80067a0:	4642      	mov	r2, r8
 80067a2:	464b      	mov	r3, r9
 80067a4:	4936      	ldr	r1, [pc, #216]	; (8006880 <_dtoa_r+0x620>)
 80067a6:	2000      	movs	r0, #0
 80067a8:	f7f9 fd8e 	bl	80002c8 <__aeabi_dsub>
 80067ac:	4652      	mov	r2, sl
 80067ae:	465b      	mov	r3, fp
 80067b0:	f7fa f9b4 	bl	8000b1c <__aeabi_dcmplt>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	f040 80b5 	bne.w	8006924 <_dtoa_r+0x6c4>
 80067ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067bc:	429d      	cmp	r5, r3
 80067be:	d081      	beq.n	80066c4 <_dtoa_r+0x464>
 80067c0:	4b30      	ldr	r3, [pc, #192]	; (8006884 <_dtoa_r+0x624>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	4650      	mov	r0, sl
 80067c6:	4659      	mov	r1, fp
 80067c8:	f7f9 ff36 	bl	8000638 <__aeabi_dmul>
 80067cc:	4b2d      	ldr	r3, [pc, #180]	; (8006884 <_dtoa_r+0x624>)
 80067ce:	4682      	mov	sl, r0
 80067d0:	468b      	mov	fp, r1
 80067d2:	4640      	mov	r0, r8
 80067d4:	4649      	mov	r1, r9
 80067d6:	2200      	movs	r2, #0
 80067d8:	f7f9 ff2e 	bl	8000638 <__aeabi_dmul>
 80067dc:	4680      	mov	r8, r0
 80067de:	4689      	mov	r9, r1
 80067e0:	e7c6      	b.n	8006770 <_dtoa_r+0x510>
 80067e2:	4650      	mov	r0, sl
 80067e4:	4659      	mov	r1, fp
 80067e6:	f7f9 ff27 	bl	8000638 <__aeabi_dmul>
 80067ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067ec:	9d01      	ldr	r5, [sp, #4]
 80067ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80067f0:	4682      	mov	sl, r0
 80067f2:	468b      	mov	fp, r1
 80067f4:	4649      	mov	r1, r9
 80067f6:	4640      	mov	r0, r8
 80067f8:	f7fa f9ce 	bl	8000b98 <__aeabi_d2iz>
 80067fc:	4606      	mov	r6, r0
 80067fe:	f7f9 feb1 	bl	8000564 <__aeabi_i2d>
 8006802:	3630      	adds	r6, #48	; 0x30
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	4640      	mov	r0, r8
 800680a:	4649      	mov	r1, r9
 800680c:	f7f9 fd5c 	bl	80002c8 <__aeabi_dsub>
 8006810:	f805 6b01 	strb.w	r6, [r5], #1
 8006814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006816:	429d      	cmp	r5, r3
 8006818:	4680      	mov	r8, r0
 800681a:	4689      	mov	r9, r1
 800681c:	f04f 0200 	mov.w	r2, #0
 8006820:	d124      	bne.n	800686c <_dtoa_r+0x60c>
 8006822:	4b1b      	ldr	r3, [pc, #108]	; (8006890 <_dtoa_r+0x630>)
 8006824:	4650      	mov	r0, sl
 8006826:	4659      	mov	r1, fp
 8006828:	f7f9 fd50 	bl	80002cc <__adddf3>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4640      	mov	r0, r8
 8006832:	4649      	mov	r1, r9
 8006834:	f7fa f990 	bl	8000b58 <__aeabi_dcmpgt>
 8006838:	2800      	cmp	r0, #0
 800683a:	d173      	bne.n	8006924 <_dtoa_r+0x6c4>
 800683c:	4652      	mov	r2, sl
 800683e:	465b      	mov	r3, fp
 8006840:	4913      	ldr	r1, [pc, #76]	; (8006890 <_dtoa_r+0x630>)
 8006842:	2000      	movs	r0, #0
 8006844:	f7f9 fd40 	bl	80002c8 <__aeabi_dsub>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4640      	mov	r0, r8
 800684e:	4649      	mov	r1, r9
 8006850:	f7fa f964 	bl	8000b1c <__aeabi_dcmplt>
 8006854:	2800      	cmp	r0, #0
 8006856:	f43f af35 	beq.w	80066c4 <_dtoa_r+0x464>
 800685a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800685c:	1e6b      	subs	r3, r5, #1
 800685e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006860:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006864:	2b30      	cmp	r3, #48	; 0x30
 8006866:	d0f8      	beq.n	800685a <_dtoa_r+0x5fa>
 8006868:	9700      	str	r7, [sp, #0]
 800686a:	e049      	b.n	8006900 <_dtoa_r+0x6a0>
 800686c:	4b05      	ldr	r3, [pc, #20]	; (8006884 <_dtoa_r+0x624>)
 800686e:	f7f9 fee3 	bl	8000638 <__aeabi_dmul>
 8006872:	4680      	mov	r8, r0
 8006874:	4689      	mov	r9, r1
 8006876:	e7bd      	b.n	80067f4 <_dtoa_r+0x594>
 8006878:	08008798 	.word	0x08008798
 800687c:	08008770 	.word	0x08008770
 8006880:	3ff00000 	.word	0x3ff00000
 8006884:	40240000 	.word	0x40240000
 8006888:	401c0000 	.word	0x401c0000
 800688c:	40140000 	.word	0x40140000
 8006890:	3fe00000 	.word	0x3fe00000
 8006894:	9d01      	ldr	r5, [sp, #4]
 8006896:	4656      	mov	r6, sl
 8006898:	465f      	mov	r7, fp
 800689a:	4642      	mov	r2, r8
 800689c:	464b      	mov	r3, r9
 800689e:	4630      	mov	r0, r6
 80068a0:	4639      	mov	r1, r7
 80068a2:	f7f9 fff3 	bl	800088c <__aeabi_ddiv>
 80068a6:	f7fa f977 	bl	8000b98 <__aeabi_d2iz>
 80068aa:	4682      	mov	sl, r0
 80068ac:	f7f9 fe5a 	bl	8000564 <__aeabi_i2d>
 80068b0:	4642      	mov	r2, r8
 80068b2:	464b      	mov	r3, r9
 80068b4:	f7f9 fec0 	bl	8000638 <__aeabi_dmul>
 80068b8:	4602      	mov	r2, r0
 80068ba:	460b      	mov	r3, r1
 80068bc:	4630      	mov	r0, r6
 80068be:	4639      	mov	r1, r7
 80068c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80068c4:	f7f9 fd00 	bl	80002c8 <__aeabi_dsub>
 80068c8:	f805 6b01 	strb.w	r6, [r5], #1
 80068cc:	9e01      	ldr	r6, [sp, #4]
 80068ce:	9f03      	ldr	r7, [sp, #12]
 80068d0:	1bae      	subs	r6, r5, r6
 80068d2:	42b7      	cmp	r7, r6
 80068d4:	4602      	mov	r2, r0
 80068d6:	460b      	mov	r3, r1
 80068d8:	d135      	bne.n	8006946 <_dtoa_r+0x6e6>
 80068da:	f7f9 fcf7 	bl	80002cc <__adddf3>
 80068de:	4642      	mov	r2, r8
 80068e0:	464b      	mov	r3, r9
 80068e2:	4606      	mov	r6, r0
 80068e4:	460f      	mov	r7, r1
 80068e6:	f7fa f937 	bl	8000b58 <__aeabi_dcmpgt>
 80068ea:	b9d0      	cbnz	r0, 8006922 <_dtoa_r+0x6c2>
 80068ec:	4642      	mov	r2, r8
 80068ee:	464b      	mov	r3, r9
 80068f0:	4630      	mov	r0, r6
 80068f2:	4639      	mov	r1, r7
 80068f4:	f7fa f908 	bl	8000b08 <__aeabi_dcmpeq>
 80068f8:	b110      	cbz	r0, 8006900 <_dtoa_r+0x6a0>
 80068fa:	f01a 0f01 	tst.w	sl, #1
 80068fe:	d110      	bne.n	8006922 <_dtoa_r+0x6c2>
 8006900:	4620      	mov	r0, r4
 8006902:	ee18 1a10 	vmov	r1, s16
 8006906:	f000 fae5 	bl	8006ed4 <_Bfree>
 800690a:	2300      	movs	r3, #0
 800690c:	9800      	ldr	r0, [sp, #0]
 800690e:	702b      	strb	r3, [r5, #0]
 8006910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006912:	3001      	adds	r0, #1
 8006914:	6018      	str	r0, [r3, #0]
 8006916:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006918:	2b00      	cmp	r3, #0
 800691a:	f43f acf1 	beq.w	8006300 <_dtoa_r+0xa0>
 800691e:	601d      	str	r5, [r3, #0]
 8006920:	e4ee      	b.n	8006300 <_dtoa_r+0xa0>
 8006922:	9f00      	ldr	r7, [sp, #0]
 8006924:	462b      	mov	r3, r5
 8006926:	461d      	mov	r5, r3
 8006928:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800692c:	2a39      	cmp	r2, #57	; 0x39
 800692e:	d106      	bne.n	800693e <_dtoa_r+0x6de>
 8006930:	9a01      	ldr	r2, [sp, #4]
 8006932:	429a      	cmp	r2, r3
 8006934:	d1f7      	bne.n	8006926 <_dtoa_r+0x6c6>
 8006936:	9901      	ldr	r1, [sp, #4]
 8006938:	2230      	movs	r2, #48	; 0x30
 800693a:	3701      	adds	r7, #1
 800693c:	700a      	strb	r2, [r1, #0]
 800693e:	781a      	ldrb	r2, [r3, #0]
 8006940:	3201      	adds	r2, #1
 8006942:	701a      	strb	r2, [r3, #0]
 8006944:	e790      	b.n	8006868 <_dtoa_r+0x608>
 8006946:	4ba6      	ldr	r3, [pc, #664]	; (8006be0 <_dtoa_r+0x980>)
 8006948:	2200      	movs	r2, #0
 800694a:	f7f9 fe75 	bl	8000638 <__aeabi_dmul>
 800694e:	2200      	movs	r2, #0
 8006950:	2300      	movs	r3, #0
 8006952:	4606      	mov	r6, r0
 8006954:	460f      	mov	r7, r1
 8006956:	f7fa f8d7 	bl	8000b08 <__aeabi_dcmpeq>
 800695a:	2800      	cmp	r0, #0
 800695c:	d09d      	beq.n	800689a <_dtoa_r+0x63a>
 800695e:	e7cf      	b.n	8006900 <_dtoa_r+0x6a0>
 8006960:	9a08      	ldr	r2, [sp, #32]
 8006962:	2a00      	cmp	r2, #0
 8006964:	f000 80d7 	beq.w	8006b16 <_dtoa_r+0x8b6>
 8006968:	9a06      	ldr	r2, [sp, #24]
 800696a:	2a01      	cmp	r2, #1
 800696c:	f300 80ba 	bgt.w	8006ae4 <_dtoa_r+0x884>
 8006970:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006972:	2a00      	cmp	r2, #0
 8006974:	f000 80b2 	beq.w	8006adc <_dtoa_r+0x87c>
 8006978:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800697c:	9e07      	ldr	r6, [sp, #28]
 800697e:	9d04      	ldr	r5, [sp, #16]
 8006980:	9a04      	ldr	r2, [sp, #16]
 8006982:	441a      	add	r2, r3
 8006984:	9204      	str	r2, [sp, #16]
 8006986:	9a05      	ldr	r2, [sp, #20]
 8006988:	2101      	movs	r1, #1
 800698a:	441a      	add	r2, r3
 800698c:	4620      	mov	r0, r4
 800698e:	9205      	str	r2, [sp, #20]
 8006990:	f000 fb58 	bl	8007044 <__i2b>
 8006994:	4607      	mov	r7, r0
 8006996:	2d00      	cmp	r5, #0
 8006998:	dd0c      	ble.n	80069b4 <_dtoa_r+0x754>
 800699a:	9b05      	ldr	r3, [sp, #20]
 800699c:	2b00      	cmp	r3, #0
 800699e:	dd09      	ble.n	80069b4 <_dtoa_r+0x754>
 80069a0:	42ab      	cmp	r3, r5
 80069a2:	9a04      	ldr	r2, [sp, #16]
 80069a4:	bfa8      	it	ge
 80069a6:	462b      	movge	r3, r5
 80069a8:	1ad2      	subs	r2, r2, r3
 80069aa:	9204      	str	r2, [sp, #16]
 80069ac:	9a05      	ldr	r2, [sp, #20]
 80069ae:	1aed      	subs	r5, r5, r3
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	9305      	str	r3, [sp, #20]
 80069b4:	9b07      	ldr	r3, [sp, #28]
 80069b6:	b31b      	cbz	r3, 8006a00 <_dtoa_r+0x7a0>
 80069b8:	9b08      	ldr	r3, [sp, #32]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 80af 	beq.w	8006b1e <_dtoa_r+0x8be>
 80069c0:	2e00      	cmp	r6, #0
 80069c2:	dd13      	ble.n	80069ec <_dtoa_r+0x78c>
 80069c4:	4639      	mov	r1, r7
 80069c6:	4632      	mov	r2, r6
 80069c8:	4620      	mov	r0, r4
 80069ca:	f000 fbfb 	bl	80071c4 <__pow5mult>
 80069ce:	ee18 2a10 	vmov	r2, s16
 80069d2:	4601      	mov	r1, r0
 80069d4:	4607      	mov	r7, r0
 80069d6:	4620      	mov	r0, r4
 80069d8:	f000 fb4a 	bl	8007070 <__multiply>
 80069dc:	ee18 1a10 	vmov	r1, s16
 80069e0:	4680      	mov	r8, r0
 80069e2:	4620      	mov	r0, r4
 80069e4:	f000 fa76 	bl	8006ed4 <_Bfree>
 80069e8:	ee08 8a10 	vmov	s16, r8
 80069ec:	9b07      	ldr	r3, [sp, #28]
 80069ee:	1b9a      	subs	r2, r3, r6
 80069f0:	d006      	beq.n	8006a00 <_dtoa_r+0x7a0>
 80069f2:	ee18 1a10 	vmov	r1, s16
 80069f6:	4620      	mov	r0, r4
 80069f8:	f000 fbe4 	bl	80071c4 <__pow5mult>
 80069fc:	ee08 0a10 	vmov	s16, r0
 8006a00:	2101      	movs	r1, #1
 8006a02:	4620      	mov	r0, r4
 8006a04:	f000 fb1e 	bl	8007044 <__i2b>
 8006a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	4606      	mov	r6, r0
 8006a0e:	f340 8088 	ble.w	8006b22 <_dtoa_r+0x8c2>
 8006a12:	461a      	mov	r2, r3
 8006a14:	4601      	mov	r1, r0
 8006a16:	4620      	mov	r0, r4
 8006a18:	f000 fbd4 	bl	80071c4 <__pow5mult>
 8006a1c:	9b06      	ldr	r3, [sp, #24]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	4606      	mov	r6, r0
 8006a22:	f340 8081 	ble.w	8006b28 <_dtoa_r+0x8c8>
 8006a26:	f04f 0800 	mov.w	r8, #0
 8006a2a:	6933      	ldr	r3, [r6, #16]
 8006a2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006a30:	6918      	ldr	r0, [r3, #16]
 8006a32:	f000 fab7 	bl	8006fa4 <__hi0bits>
 8006a36:	f1c0 0020 	rsb	r0, r0, #32
 8006a3a:	9b05      	ldr	r3, [sp, #20]
 8006a3c:	4418      	add	r0, r3
 8006a3e:	f010 001f 	ands.w	r0, r0, #31
 8006a42:	f000 8092 	beq.w	8006b6a <_dtoa_r+0x90a>
 8006a46:	f1c0 0320 	rsb	r3, r0, #32
 8006a4a:	2b04      	cmp	r3, #4
 8006a4c:	f340 808a 	ble.w	8006b64 <_dtoa_r+0x904>
 8006a50:	f1c0 001c 	rsb	r0, r0, #28
 8006a54:	9b04      	ldr	r3, [sp, #16]
 8006a56:	4403      	add	r3, r0
 8006a58:	9304      	str	r3, [sp, #16]
 8006a5a:	9b05      	ldr	r3, [sp, #20]
 8006a5c:	4403      	add	r3, r0
 8006a5e:	4405      	add	r5, r0
 8006a60:	9305      	str	r3, [sp, #20]
 8006a62:	9b04      	ldr	r3, [sp, #16]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	dd07      	ble.n	8006a78 <_dtoa_r+0x818>
 8006a68:	ee18 1a10 	vmov	r1, s16
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	4620      	mov	r0, r4
 8006a70:	f000 fc02 	bl	8007278 <__lshift>
 8006a74:	ee08 0a10 	vmov	s16, r0
 8006a78:	9b05      	ldr	r3, [sp, #20]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	dd05      	ble.n	8006a8a <_dtoa_r+0x82a>
 8006a7e:	4631      	mov	r1, r6
 8006a80:	461a      	mov	r2, r3
 8006a82:	4620      	mov	r0, r4
 8006a84:	f000 fbf8 	bl	8007278 <__lshift>
 8006a88:	4606      	mov	r6, r0
 8006a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d06e      	beq.n	8006b6e <_dtoa_r+0x90e>
 8006a90:	ee18 0a10 	vmov	r0, s16
 8006a94:	4631      	mov	r1, r6
 8006a96:	f000 fc5f 	bl	8007358 <__mcmp>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	da67      	bge.n	8006b6e <_dtoa_r+0x90e>
 8006a9e:	9b00      	ldr	r3, [sp, #0]
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	ee18 1a10 	vmov	r1, s16
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	220a      	movs	r2, #10
 8006aaa:	2300      	movs	r3, #0
 8006aac:	4620      	mov	r0, r4
 8006aae:	f000 fa33 	bl	8006f18 <__multadd>
 8006ab2:	9b08      	ldr	r3, [sp, #32]
 8006ab4:	ee08 0a10 	vmov	s16, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 81b1 	beq.w	8006e20 <_dtoa_r+0xbc0>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	4639      	mov	r1, r7
 8006ac2:	220a      	movs	r2, #10
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	f000 fa27 	bl	8006f18 <__multadd>
 8006aca:	9b02      	ldr	r3, [sp, #8]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	4607      	mov	r7, r0
 8006ad0:	f300 808e 	bgt.w	8006bf0 <_dtoa_r+0x990>
 8006ad4:	9b06      	ldr	r3, [sp, #24]
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	dc51      	bgt.n	8006b7e <_dtoa_r+0x91e>
 8006ada:	e089      	b.n	8006bf0 <_dtoa_r+0x990>
 8006adc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ade:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ae2:	e74b      	b.n	800697c <_dtoa_r+0x71c>
 8006ae4:	9b03      	ldr	r3, [sp, #12]
 8006ae6:	1e5e      	subs	r6, r3, #1
 8006ae8:	9b07      	ldr	r3, [sp, #28]
 8006aea:	42b3      	cmp	r3, r6
 8006aec:	bfbf      	itttt	lt
 8006aee:	9b07      	ldrlt	r3, [sp, #28]
 8006af0:	9607      	strlt	r6, [sp, #28]
 8006af2:	1af2      	sublt	r2, r6, r3
 8006af4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006af6:	bfb6      	itet	lt
 8006af8:	189b      	addlt	r3, r3, r2
 8006afa:	1b9e      	subge	r6, r3, r6
 8006afc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006afe:	9b03      	ldr	r3, [sp, #12]
 8006b00:	bfb8      	it	lt
 8006b02:	2600      	movlt	r6, #0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	bfb7      	itett	lt
 8006b08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006b0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006b10:	1a9d      	sublt	r5, r3, r2
 8006b12:	2300      	movlt	r3, #0
 8006b14:	e734      	b.n	8006980 <_dtoa_r+0x720>
 8006b16:	9e07      	ldr	r6, [sp, #28]
 8006b18:	9d04      	ldr	r5, [sp, #16]
 8006b1a:	9f08      	ldr	r7, [sp, #32]
 8006b1c:	e73b      	b.n	8006996 <_dtoa_r+0x736>
 8006b1e:	9a07      	ldr	r2, [sp, #28]
 8006b20:	e767      	b.n	80069f2 <_dtoa_r+0x792>
 8006b22:	9b06      	ldr	r3, [sp, #24]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	dc18      	bgt.n	8006b5a <_dtoa_r+0x8fa>
 8006b28:	f1ba 0f00 	cmp.w	sl, #0
 8006b2c:	d115      	bne.n	8006b5a <_dtoa_r+0x8fa>
 8006b2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b32:	b993      	cbnz	r3, 8006b5a <_dtoa_r+0x8fa>
 8006b34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006b38:	0d1b      	lsrs	r3, r3, #20
 8006b3a:	051b      	lsls	r3, r3, #20
 8006b3c:	b183      	cbz	r3, 8006b60 <_dtoa_r+0x900>
 8006b3e:	9b04      	ldr	r3, [sp, #16]
 8006b40:	3301      	adds	r3, #1
 8006b42:	9304      	str	r3, [sp, #16]
 8006b44:	9b05      	ldr	r3, [sp, #20]
 8006b46:	3301      	adds	r3, #1
 8006b48:	9305      	str	r3, [sp, #20]
 8006b4a:	f04f 0801 	mov.w	r8, #1
 8006b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f47f af6a 	bne.w	8006a2a <_dtoa_r+0x7ca>
 8006b56:	2001      	movs	r0, #1
 8006b58:	e76f      	b.n	8006a3a <_dtoa_r+0x7da>
 8006b5a:	f04f 0800 	mov.w	r8, #0
 8006b5e:	e7f6      	b.n	8006b4e <_dtoa_r+0x8ee>
 8006b60:	4698      	mov	r8, r3
 8006b62:	e7f4      	b.n	8006b4e <_dtoa_r+0x8ee>
 8006b64:	f43f af7d 	beq.w	8006a62 <_dtoa_r+0x802>
 8006b68:	4618      	mov	r0, r3
 8006b6a:	301c      	adds	r0, #28
 8006b6c:	e772      	b.n	8006a54 <_dtoa_r+0x7f4>
 8006b6e:	9b03      	ldr	r3, [sp, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	dc37      	bgt.n	8006be4 <_dtoa_r+0x984>
 8006b74:	9b06      	ldr	r3, [sp, #24]
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	dd34      	ble.n	8006be4 <_dtoa_r+0x984>
 8006b7a:	9b03      	ldr	r3, [sp, #12]
 8006b7c:	9302      	str	r3, [sp, #8]
 8006b7e:	9b02      	ldr	r3, [sp, #8]
 8006b80:	b96b      	cbnz	r3, 8006b9e <_dtoa_r+0x93e>
 8006b82:	4631      	mov	r1, r6
 8006b84:	2205      	movs	r2, #5
 8006b86:	4620      	mov	r0, r4
 8006b88:	f000 f9c6 	bl	8006f18 <__multadd>
 8006b8c:	4601      	mov	r1, r0
 8006b8e:	4606      	mov	r6, r0
 8006b90:	ee18 0a10 	vmov	r0, s16
 8006b94:	f000 fbe0 	bl	8007358 <__mcmp>
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	f73f adbb 	bgt.w	8006714 <_dtoa_r+0x4b4>
 8006b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba0:	9d01      	ldr	r5, [sp, #4]
 8006ba2:	43db      	mvns	r3, r3
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	f04f 0800 	mov.w	r8, #0
 8006baa:	4631      	mov	r1, r6
 8006bac:	4620      	mov	r0, r4
 8006bae:	f000 f991 	bl	8006ed4 <_Bfree>
 8006bb2:	2f00      	cmp	r7, #0
 8006bb4:	f43f aea4 	beq.w	8006900 <_dtoa_r+0x6a0>
 8006bb8:	f1b8 0f00 	cmp.w	r8, #0
 8006bbc:	d005      	beq.n	8006bca <_dtoa_r+0x96a>
 8006bbe:	45b8      	cmp	r8, r7
 8006bc0:	d003      	beq.n	8006bca <_dtoa_r+0x96a>
 8006bc2:	4641      	mov	r1, r8
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f000 f985 	bl	8006ed4 <_Bfree>
 8006bca:	4639      	mov	r1, r7
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f000 f981 	bl	8006ed4 <_Bfree>
 8006bd2:	e695      	b.n	8006900 <_dtoa_r+0x6a0>
 8006bd4:	2600      	movs	r6, #0
 8006bd6:	4637      	mov	r7, r6
 8006bd8:	e7e1      	b.n	8006b9e <_dtoa_r+0x93e>
 8006bda:	9700      	str	r7, [sp, #0]
 8006bdc:	4637      	mov	r7, r6
 8006bde:	e599      	b.n	8006714 <_dtoa_r+0x4b4>
 8006be0:	40240000 	.word	0x40240000
 8006be4:	9b08      	ldr	r3, [sp, #32]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 80ca 	beq.w	8006d80 <_dtoa_r+0xb20>
 8006bec:	9b03      	ldr	r3, [sp, #12]
 8006bee:	9302      	str	r3, [sp, #8]
 8006bf0:	2d00      	cmp	r5, #0
 8006bf2:	dd05      	ble.n	8006c00 <_dtoa_r+0x9a0>
 8006bf4:	4639      	mov	r1, r7
 8006bf6:	462a      	mov	r2, r5
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f000 fb3d 	bl	8007278 <__lshift>
 8006bfe:	4607      	mov	r7, r0
 8006c00:	f1b8 0f00 	cmp.w	r8, #0
 8006c04:	d05b      	beq.n	8006cbe <_dtoa_r+0xa5e>
 8006c06:	6879      	ldr	r1, [r7, #4]
 8006c08:	4620      	mov	r0, r4
 8006c0a:	f000 f923 	bl	8006e54 <_Balloc>
 8006c0e:	4605      	mov	r5, r0
 8006c10:	b928      	cbnz	r0, 8006c1e <_dtoa_r+0x9be>
 8006c12:	4b87      	ldr	r3, [pc, #540]	; (8006e30 <_dtoa_r+0xbd0>)
 8006c14:	4602      	mov	r2, r0
 8006c16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006c1a:	f7ff bb3b 	b.w	8006294 <_dtoa_r+0x34>
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	3202      	adds	r2, #2
 8006c22:	0092      	lsls	r2, r2, #2
 8006c24:	f107 010c 	add.w	r1, r7, #12
 8006c28:	300c      	adds	r0, #12
 8006c2a:	f7fe fded 	bl	8005808 <memcpy>
 8006c2e:	2201      	movs	r2, #1
 8006c30:	4629      	mov	r1, r5
 8006c32:	4620      	mov	r0, r4
 8006c34:	f000 fb20 	bl	8007278 <__lshift>
 8006c38:	9b01      	ldr	r3, [sp, #4]
 8006c3a:	f103 0901 	add.w	r9, r3, #1
 8006c3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006c42:	4413      	add	r3, r2
 8006c44:	9305      	str	r3, [sp, #20]
 8006c46:	f00a 0301 	and.w	r3, sl, #1
 8006c4a:	46b8      	mov	r8, r7
 8006c4c:	9304      	str	r3, [sp, #16]
 8006c4e:	4607      	mov	r7, r0
 8006c50:	4631      	mov	r1, r6
 8006c52:	ee18 0a10 	vmov	r0, s16
 8006c56:	f7ff fa77 	bl	8006148 <quorem>
 8006c5a:	4641      	mov	r1, r8
 8006c5c:	9002      	str	r0, [sp, #8]
 8006c5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006c62:	ee18 0a10 	vmov	r0, s16
 8006c66:	f000 fb77 	bl	8007358 <__mcmp>
 8006c6a:	463a      	mov	r2, r7
 8006c6c:	9003      	str	r0, [sp, #12]
 8006c6e:	4631      	mov	r1, r6
 8006c70:	4620      	mov	r0, r4
 8006c72:	f000 fb8d 	bl	8007390 <__mdiff>
 8006c76:	68c2      	ldr	r2, [r0, #12]
 8006c78:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006c7c:	4605      	mov	r5, r0
 8006c7e:	bb02      	cbnz	r2, 8006cc2 <_dtoa_r+0xa62>
 8006c80:	4601      	mov	r1, r0
 8006c82:	ee18 0a10 	vmov	r0, s16
 8006c86:	f000 fb67 	bl	8007358 <__mcmp>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	4629      	mov	r1, r5
 8006c8e:	4620      	mov	r0, r4
 8006c90:	9207      	str	r2, [sp, #28]
 8006c92:	f000 f91f 	bl	8006ed4 <_Bfree>
 8006c96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006c9a:	ea43 0102 	orr.w	r1, r3, r2
 8006c9e:	9b04      	ldr	r3, [sp, #16]
 8006ca0:	430b      	orrs	r3, r1
 8006ca2:	464d      	mov	r5, r9
 8006ca4:	d10f      	bne.n	8006cc6 <_dtoa_r+0xa66>
 8006ca6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006caa:	d02a      	beq.n	8006d02 <_dtoa_r+0xaa2>
 8006cac:	9b03      	ldr	r3, [sp, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	dd02      	ble.n	8006cb8 <_dtoa_r+0xa58>
 8006cb2:	9b02      	ldr	r3, [sp, #8]
 8006cb4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006cb8:	f88b a000 	strb.w	sl, [fp]
 8006cbc:	e775      	b.n	8006baa <_dtoa_r+0x94a>
 8006cbe:	4638      	mov	r0, r7
 8006cc0:	e7ba      	b.n	8006c38 <_dtoa_r+0x9d8>
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	e7e2      	b.n	8006c8c <_dtoa_r+0xa2c>
 8006cc6:	9b03      	ldr	r3, [sp, #12]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	db04      	blt.n	8006cd6 <_dtoa_r+0xa76>
 8006ccc:	9906      	ldr	r1, [sp, #24]
 8006cce:	430b      	orrs	r3, r1
 8006cd0:	9904      	ldr	r1, [sp, #16]
 8006cd2:	430b      	orrs	r3, r1
 8006cd4:	d122      	bne.n	8006d1c <_dtoa_r+0xabc>
 8006cd6:	2a00      	cmp	r2, #0
 8006cd8:	ddee      	ble.n	8006cb8 <_dtoa_r+0xa58>
 8006cda:	ee18 1a10 	vmov	r1, s16
 8006cde:	2201      	movs	r2, #1
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	f000 fac9 	bl	8007278 <__lshift>
 8006ce6:	4631      	mov	r1, r6
 8006ce8:	ee08 0a10 	vmov	s16, r0
 8006cec:	f000 fb34 	bl	8007358 <__mcmp>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	dc03      	bgt.n	8006cfc <_dtoa_r+0xa9c>
 8006cf4:	d1e0      	bne.n	8006cb8 <_dtoa_r+0xa58>
 8006cf6:	f01a 0f01 	tst.w	sl, #1
 8006cfa:	d0dd      	beq.n	8006cb8 <_dtoa_r+0xa58>
 8006cfc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006d00:	d1d7      	bne.n	8006cb2 <_dtoa_r+0xa52>
 8006d02:	2339      	movs	r3, #57	; 0x39
 8006d04:	f88b 3000 	strb.w	r3, [fp]
 8006d08:	462b      	mov	r3, r5
 8006d0a:	461d      	mov	r5, r3
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006d12:	2a39      	cmp	r2, #57	; 0x39
 8006d14:	d071      	beq.n	8006dfa <_dtoa_r+0xb9a>
 8006d16:	3201      	adds	r2, #1
 8006d18:	701a      	strb	r2, [r3, #0]
 8006d1a:	e746      	b.n	8006baa <_dtoa_r+0x94a>
 8006d1c:	2a00      	cmp	r2, #0
 8006d1e:	dd07      	ble.n	8006d30 <_dtoa_r+0xad0>
 8006d20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006d24:	d0ed      	beq.n	8006d02 <_dtoa_r+0xaa2>
 8006d26:	f10a 0301 	add.w	r3, sl, #1
 8006d2a:	f88b 3000 	strb.w	r3, [fp]
 8006d2e:	e73c      	b.n	8006baa <_dtoa_r+0x94a>
 8006d30:	9b05      	ldr	r3, [sp, #20]
 8006d32:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006d36:	4599      	cmp	r9, r3
 8006d38:	d047      	beq.n	8006dca <_dtoa_r+0xb6a>
 8006d3a:	ee18 1a10 	vmov	r1, s16
 8006d3e:	2300      	movs	r3, #0
 8006d40:	220a      	movs	r2, #10
 8006d42:	4620      	mov	r0, r4
 8006d44:	f000 f8e8 	bl	8006f18 <__multadd>
 8006d48:	45b8      	cmp	r8, r7
 8006d4a:	ee08 0a10 	vmov	s16, r0
 8006d4e:	f04f 0300 	mov.w	r3, #0
 8006d52:	f04f 020a 	mov.w	r2, #10
 8006d56:	4641      	mov	r1, r8
 8006d58:	4620      	mov	r0, r4
 8006d5a:	d106      	bne.n	8006d6a <_dtoa_r+0xb0a>
 8006d5c:	f000 f8dc 	bl	8006f18 <__multadd>
 8006d60:	4680      	mov	r8, r0
 8006d62:	4607      	mov	r7, r0
 8006d64:	f109 0901 	add.w	r9, r9, #1
 8006d68:	e772      	b.n	8006c50 <_dtoa_r+0x9f0>
 8006d6a:	f000 f8d5 	bl	8006f18 <__multadd>
 8006d6e:	4639      	mov	r1, r7
 8006d70:	4680      	mov	r8, r0
 8006d72:	2300      	movs	r3, #0
 8006d74:	220a      	movs	r2, #10
 8006d76:	4620      	mov	r0, r4
 8006d78:	f000 f8ce 	bl	8006f18 <__multadd>
 8006d7c:	4607      	mov	r7, r0
 8006d7e:	e7f1      	b.n	8006d64 <_dtoa_r+0xb04>
 8006d80:	9b03      	ldr	r3, [sp, #12]
 8006d82:	9302      	str	r3, [sp, #8]
 8006d84:	9d01      	ldr	r5, [sp, #4]
 8006d86:	ee18 0a10 	vmov	r0, s16
 8006d8a:	4631      	mov	r1, r6
 8006d8c:	f7ff f9dc 	bl	8006148 <quorem>
 8006d90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006d94:	9b01      	ldr	r3, [sp, #4]
 8006d96:	f805 ab01 	strb.w	sl, [r5], #1
 8006d9a:	1aea      	subs	r2, r5, r3
 8006d9c:	9b02      	ldr	r3, [sp, #8]
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	dd09      	ble.n	8006db6 <_dtoa_r+0xb56>
 8006da2:	ee18 1a10 	vmov	r1, s16
 8006da6:	2300      	movs	r3, #0
 8006da8:	220a      	movs	r2, #10
 8006daa:	4620      	mov	r0, r4
 8006dac:	f000 f8b4 	bl	8006f18 <__multadd>
 8006db0:	ee08 0a10 	vmov	s16, r0
 8006db4:	e7e7      	b.n	8006d86 <_dtoa_r+0xb26>
 8006db6:	9b02      	ldr	r3, [sp, #8]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	bfc8      	it	gt
 8006dbc:	461d      	movgt	r5, r3
 8006dbe:	9b01      	ldr	r3, [sp, #4]
 8006dc0:	bfd8      	it	le
 8006dc2:	2501      	movle	r5, #1
 8006dc4:	441d      	add	r5, r3
 8006dc6:	f04f 0800 	mov.w	r8, #0
 8006dca:	ee18 1a10 	vmov	r1, s16
 8006dce:	2201      	movs	r2, #1
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f000 fa51 	bl	8007278 <__lshift>
 8006dd6:	4631      	mov	r1, r6
 8006dd8:	ee08 0a10 	vmov	s16, r0
 8006ddc:	f000 fabc 	bl	8007358 <__mcmp>
 8006de0:	2800      	cmp	r0, #0
 8006de2:	dc91      	bgt.n	8006d08 <_dtoa_r+0xaa8>
 8006de4:	d102      	bne.n	8006dec <_dtoa_r+0xb8c>
 8006de6:	f01a 0f01 	tst.w	sl, #1
 8006dea:	d18d      	bne.n	8006d08 <_dtoa_r+0xaa8>
 8006dec:	462b      	mov	r3, r5
 8006dee:	461d      	mov	r5, r3
 8006df0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006df4:	2a30      	cmp	r2, #48	; 0x30
 8006df6:	d0fa      	beq.n	8006dee <_dtoa_r+0xb8e>
 8006df8:	e6d7      	b.n	8006baa <_dtoa_r+0x94a>
 8006dfa:	9a01      	ldr	r2, [sp, #4]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d184      	bne.n	8006d0a <_dtoa_r+0xaaa>
 8006e00:	9b00      	ldr	r3, [sp, #0]
 8006e02:	3301      	adds	r3, #1
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	2331      	movs	r3, #49	; 0x31
 8006e08:	7013      	strb	r3, [r2, #0]
 8006e0a:	e6ce      	b.n	8006baa <_dtoa_r+0x94a>
 8006e0c:	4b09      	ldr	r3, [pc, #36]	; (8006e34 <_dtoa_r+0xbd4>)
 8006e0e:	f7ff ba95 	b.w	800633c <_dtoa_r+0xdc>
 8006e12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f47f aa6e 	bne.w	80062f6 <_dtoa_r+0x96>
 8006e1a:	4b07      	ldr	r3, [pc, #28]	; (8006e38 <_dtoa_r+0xbd8>)
 8006e1c:	f7ff ba8e 	b.w	800633c <_dtoa_r+0xdc>
 8006e20:	9b02      	ldr	r3, [sp, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	dcae      	bgt.n	8006d84 <_dtoa_r+0xb24>
 8006e26:	9b06      	ldr	r3, [sp, #24]
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	f73f aea8 	bgt.w	8006b7e <_dtoa_r+0x91e>
 8006e2e:	e7a9      	b.n	8006d84 <_dtoa_r+0xb24>
 8006e30:	08008703 	.word	0x08008703
 8006e34:	08008660 	.word	0x08008660
 8006e38:	08008684 	.word	0x08008684

08006e3c <_localeconv_r>:
 8006e3c:	4800      	ldr	r0, [pc, #0]	; (8006e40 <_localeconv_r+0x4>)
 8006e3e:	4770      	bx	lr
 8006e40:	20000160 	.word	0x20000160

08006e44 <malloc>:
 8006e44:	4b02      	ldr	r3, [pc, #8]	; (8006e50 <malloc+0xc>)
 8006e46:	4601      	mov	r1, r0
 8006e48:	6818      	ldr	r0, [r3, #0]
 8006e4a:	f000 bc09 	b.w	8007660 <_malloc_r>
 8006e4e:	bf00      	nop
 8006e50:	2000000c 	.word	0x2000000c

08006e54 <_Balloc>:
 8006e54:	b570      	push	{r4, r5, r6, lr}
 8006e56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e58:	4604      	mov	r4, r0
 8006e5a:	460d      	mov	r5, r1
 8006e5c:	b976      	cbnz	r6, 8006e7c <_Balloc+0x28>
 8006e5e:	2010      	movs	r0, #16
 8006e60:	f7ff fff0 	bl	8006e44 <malloc>
 8006e64:	4602      	mov	r2, r0
 8006e66:	6260      	str	r0, [r4, #36]	; 0x24
 8006e68:	b920      	cbnz	r0, 8006e74 <_Balloc+0x20>
 8006e6a:	4b18      	ldr	r3, [pc, #96]	; (8006ecc <_Balloc+0x78>)
 8006e6c:	4818      	ldr	r0, [pc, #96]	; (8006ed0 <_Balloc+0x7c>)
 8006e6e:	2166      	movs	r1, #102	; 0x66
 8006e70:	f000 fdd6 	bl	8007a20 <__assert_func>
 8006e74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e78:	6006      	str	r6, [r0, #0]
 8006e7a:	60c6      	str	r6, [r0, #12]
 8006e7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e7e:	68f3      	ldr	r3, [r6, #12]
 8006e80:	b183      	cbz	r3, 8006ea4 <_Balloc+0x50>
 8006e82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e8a:	b9b8      	cbnz	r0, 8006ebc <_Balloc+0x68>
 8006e8c:	2101      	movs	r1, #1
 8006e8e:	fa01 f605 	lsl.w	r6, r1, r5
 8006e92:	1d72      	adds	r2, r6, #5
 8006e94:	0092      	lsls	r2, r2, #2
 8006e96:	4620      	mov	r0, r4
 8006e98:	f000 fb60 	bl	800755c <_calloc_r>
 8006e9c:	b160      	cbz	r0, 8006eb8 <_Balloc+0x64>
 8006e9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ea2:	e00e      	b.n	8006ec2 <_Balloc+0x6e>
 8006ea4:	2221      	movs	r2, #33	; 0x21
 8006ea6:	2104      	movs	r1, #4
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	f000 fb57 	bl	800755c <_calloc_r>
 8006eae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006eb0:	60f0      	str	r0, [r6, #12]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1e4      	bne.n	8006e82 <_Balloc+0x2e>
 8006eb8:	2000      	movs	r0, #0
 8006eba:	bd70      	pop	{r4, r5, r6, pc}
 8006ebc:	6802      	ldr	r2, [r0, #0]
 8006ebe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ec8:	e7f7      	b.n	8006eba <_Balloc+0x66>
 8006eca:	bf00      	nop
 8006ecc:	08008691 	.word	0x08008691
 8006ed0:	08008714 	.word	0x08008714

08006ed4 <_Bfree>:
 8006ed4:	b570      	push	{r4, r5, r6, lr}
 8006ed6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ed8:	4605      	mov	r5, r0
 8006eda:	460c      	mov	r4, r1
 8006edc:	b976      	cbnz	r6, 8006efc <_Bfree+0x28>
 8006ede:	2010      	movs	r0, #16
 8006ee0:	f7ff ffb0 	bl	8006e44 <malloc>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	6268      	str	r0, [r5, #36]	; 0x24
 8006ee8:	b920      	cbnz	r0, 8006ef4 <_Bfree+0x20>
 8006eea:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <_Bfree+0x3c>)
 8006eec:	4809      	ldr	r0, [pc, #36]	; (8006f14 <_Bfree+0x40>)
 8006eee:	218a      	movs	r1, #138	; 0x8a
 8006ef0:	f000 fd96 	bl	8007a20 <__assert_func>
 8006ef4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ef8:	6006      	str	r6, [r0, #0]
 8006efa:	60c6      	str	r6, [r0, #12]
 8006efc:	b13c      	cbz	r4, 8006f0e <_Bfree+0x3a>
 8006efe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f00:	6862      	ldr	r2, [r4, #4]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f08:	6021      	str	r1, [r4, #0]
 8006f0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f0e:	bd70      	pop	{r4, r5, r6, pc}
 8006f10:	08008691 	.word	0x08008691
 8006f14:	08008714 	.word	0x08008714

08006f18 <__multadd>:
 8006f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f1c:	690d      	ldr	r5, [r1, #16]
 8006f1e:	4607      	mov	r7, r0
 8006f20:	460c      	mov	r4, r1
 8006f22:	461e      	mov	r6, r3
 8006f24:	f101 0c14 	add.w	ip, r1, #20
 8006f28:	2000      	movs	r0, #0
 8006f2a:	f8dc 3000 	ldr.w	r3, [ip]
 8006f2e:	b299      	uxth	r1, r3
 8006f30:	fb02 6101 	mla	r1, r2, r1, r6
 8006f34:	0c1e      	lsrs	r6, r3, #16
 8006f36:	0c0b      	lsrs	r3, r1, #16
 8006f38:	fb02 3306 	mla	r3, r2, r6, r3
 8006f3c:	b289      	uxth	r1, r1
 8006f3e:	3001      	adds	r0, #1
 8006f40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006f44:	4285      	cmp	r5, r0
 8006f46:	f84c 1b04 	str.w	r1, [ip], #4
 8006f4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006f4e:	dcec      	bgt.n	8006f2a <__multadd+0x12>
 8006f50:	b30e      	cbz	r6, 8006f96 <__multadd+0x7e>
 8006f52:	68a3      	ldr	r3, [r4, #8]
 8006f54:	42ab      	cmp	r3, r5
 8006f56:	dc19      	bgt.n	8006f8c <__multadd+0x74>
 8006f58:	6861      	ldr	r1, [r4, #4]
 8006f5a:	4638      	mov	r0, r7
 8006f5c:	3101      	adds	r1, #1
 8006f5e:	f7ff ff79 	bl	8006e54 <_Balloc>
 8006f62:	4680      	mov	r8, r0
 8006f64:	b928      	cbnz	r0, 8006f72 <__multadd+0x5a>
 8006f66:	4602      	mov	r2, r0
 8006f68:	4b0c      	ldr	r3, [pc, #48]	; (8006f9c <__multadd+0x84>)
 8006f6a:	480d      	ldr	r0, [pc, #52]	; (8006fa0 <__multadd+0x88>)
 8006f6c:	21b5      	movs	r1, #181	; 0xb5
 8006f6e:	f000 fd57 	bl	8007a20 <__assert_func>
 8006f72:	6922      	ldr	r2, [r4, #16]
 8006f74:	3202      	adds	r2, #2
 8006f76:	f104 010c 	add.w	r1, r4, #12
 8006f7a:	0092      	lsls	r2, r2, #2
 8006f7c:	300c      	adds	r0, #12
 8006f7e:	f7fe fc43 	bl	8005808 <memcpy>
 8006f82:	4621      	mov	r1, r4
 8006f84:	4638      	mov	r0, r7
 8006f86:	f7ff ffa5 	bl	8006ed4 <_Bfree>
 8006f8a:	4644      	mov	r4, r8
 8006f8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f90:	3501      	adds	r5, #1
 8006f92:	615e      	str	r6, [r3, #20]
 8006f94:	6125      	str	r5, [r4, #16]
 8006f96:	4620      	mov	r0, r4
 8006f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f9c:	08008703 	.word	0x08008703
 8006fa0:	08008714 	.word	0x08008714

08006fa4 <__hi0bits>:
 8006fa4:	0c03      	lsrs	r3, r0, #16
 8006fa6:	041b      	lsls	r3, r3, #16
 8006fa8:	b9d3      	cbnz	r3, 8006fe0 <__hi0bits+0x3c>
 8006faa:	0400      	lsls	r0, r0, #16
 8006fac:	2310      	movs	r3, #16
 8006fae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006fb2:	bf04      	itt	eq
 8006fb4:	0200      	lsleq	r0, r0, #8
 8006fb6:	3308      	addeq	r3, #8
 8006fb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006fbc:	bf04      	itt	eq
 8006fbe:	0100      	lsleq	r0, r0, #4
 8006fc0:	3304      	addeq	r3, #4
 8006fc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006fc6:	bf04      	itt	eq
 8006fc8:	0080      	lsleq	r0, r0, #2
 8006fca:	3302      	addeq	r3, #2
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	db05      	blt.n	8006fdc <__hi0bits+0x38>
 8006fd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006fd4:	f103 0301 	add.w	r3, r3, #1
 8006fd8:	bf08      	it	eq
 8006fda:	2320      	moveq	r3, #32
 8006fdc:	4618      	mov	r0, r3
 8006fde:	4770      	bx	lr
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	e7e4      	b.n	8006fae <__hi0bits+0xa>

08006fe4 <__lo0bits>:
 8006fe4:	6803      	ldr	r3, [r0, #0]
 8006fe6:	f013 0207 	ands.w	r2, r3, #7
 8006fea:	4601      	mov	r1, r0
 8006fec:	d00b      	beq.n	8007006 <__lo0bits+0x22>
 8006fee:	07da      	lsls	r2, r3, #31
 8006ff0:	d423      	bmi.n	800703a <__lo0bits+0x56>
 8006ff2:	0798      	lsls	r0, r3, #30
 8006ff4:	bf49      	itett	mi
 8006ff6:	085b      	lsrmi	r3, r3, #1
 8006ff8:	089b      	lsrpl	r3, r3, #2
 8006ffa:	2001      	movmi	r0, #1
 8006ffc:	600b      	strmi	r3, [r1, #0]
 8006ffe:	bf5c      	itt	pl
 8007000:	600b      	strpl	r3, [r1, #0]
 8007002:	2002      	movpl	r0, #2
 8007004:	4770      	bx	lr
 8007006:	b298      	uxth	r0, r3
 8007008:	b9a8      	cbnz	r0, 8007036 <__lo0bits+0x52>
 800700a:	0c1b      	lsrs	r3, r3, #16
 800700c:	2010      	movs	r0, #16
 800700e:	b2da      	uxtb	r2, r3
 8007010:	b90a      	cbnz	r2, 8007016 <__lo0bits+0x32>
 8007012:	3008      	adds	r0, #8
 8007014:	0a1b      	lsrs	r3, r3, #8
 8007016:	071a      	lsls	r2, r3, #28
 8007018:	bf04      	itt	eq
 800701a:	091b      	lsreq	r3, r3, #4
 800701c:	3004      	addeq	r0, #4
 800701e:	079a      	lsls	r2, r3, #30
 8007020:	bf04      	itt	eq
 8007022:	089b      	lsreq	r3, r3, #2
 8007024:	3002      	addeq	r0, #2
 8007026:	07da      	lsls	r2, r3, #31
 8007028:	d403      	bmi.n	8007032 <__lo0bits+0x4e>
 800702a:	085b      	lsrs	r3, r3, #1
 800702c:	f100 0001 	add.w	r0, r0, #1
 8007030:	d005      	beq.n	800703e <__lo0bits+0x5a>
 8007032:	600b      	str	r3, [r1, #0]
 8007034:	4770      	bx	lr
 8007036:	4610      	mov	r0, r2
 8007038:	e7e9      	b.n	800700e <__lo0bits+0x2a>
 800703a:	2000      	movs	r0, #0
 800703c:	4770      	bx	lr
 800703e:	2020      	movs	r0, #32
 8007040:	4770      	bx	lr
	...

08007044 <__i2b>:
 8007044:	b510      	push	{r4, lr}
 8007046:	460c      	mov	r4, r1
 8007048:	2101      	movs	r1, #1
 800704a:	f7ff ff03 	bl	8006e54 <_Balloc>
 800704e:	4602      	mov	r2, r0
 8007050:	b928      	cbnz	r0, 800705e <__i2b+0x1a>
 8007052:	4b05      	ldr	r3, [pc, #20]	; (8007068 <__i2b+0x24>)
 8007054:	4805      	ldr	r0, [pc, #20]	; (800706c <__i2b+0x28>)
 8007056:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800705a:	f000 fce1 	bl	8007a20 <__assert_func>
 800705e:	2301      	movs	r3, #1
 8007060:	6144      	str	r4, [r0, #20]
 8007062:	6103      	str	r3, [r0, #16]
 8007064:	bd10      	pop	{r4, pc}
 8007066:	bf00      	nop
 8007068:	08008703 	.word	0x08008703
 800706c:	08008714 	.word	0x08008714

08007070 <__multiply>:
 8007070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007074:	4691      	mov	r9, r2
 8007076:	690a      	ldr	r2, [r1, #16]
 8007078:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800707c:	429a      	cmp	r2, r3
 800707e:	bfb8      	it	lt
 8007080:	460b      	movlt	r3, r1
 8007082:	460c      	mov	r4, r1
 8007084:	bfbc      	itt	lt
 8007086:	464c      	movlt	r4, r9
 8007088:	4699      	movlt	r9, r3
 800708a:	6927      	ldr	r7, [r4, #16]
 800708c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007090:	68a3      	ldr	r3, [r4, #8]
 8007092:	6861      	ldr	r1, [r4, #4]
 8007094:	eb07 060a 	add.w	r6, r7, sl
 8007098:	42b3      	cmp	r3, r6
 800709a:	b085      	sub	sp, #20
 800709c:	bfb8      	it	lt
 800709e:	3101      	addlt	r1, #1
 80070a0:	f7ff fed8 	bl	8006e54 <_Balloc>
 80070a4:	b930      	cbnz	r0, 80070b4 <__multiply+0x44>
 80070a6:	4602      	mov	r2, r0
 80070a8:	4b44      	ldr	r3, [pc, #272]	; (80071bc <__multiply+0x14c>)
 80070aa:	4845      	ldr	r0, [pc, #276]	; (80071c0 <__multiply+0x150>)
 80070ac:	f240 115d 	movw	r1, #349	; 0x15d
 80070b0:	f000 fcb6 	bl	8007a20 <__assert_func>
 80070b4:	f100 0514 	add.w	r5, r0, #20
 80070b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80070bc:	462b      	mov	r3, r5
 80070be:	2200      	movs	r2, #0
 80070c0:	4543      	cmp	r3, r8
 80070c2:	d321      	bcc.n	8007108 <__multiply+0x98>
 80070c4:	f104 0314 	add.w	r3, r4, #20
 80070c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80070cc:	f109 0314 	add.w	r3, r9, #20
 80070d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80070d4:	9202      	str	r2, [sp, #8]
 80070d6:	1b3a      	subs	r2, r7, r4
 80070d8:	3a15      	subs	r2, #21
 80070da:	f022 0203 	bic.w	r2, r2, #3
 80070de:	3204      	adds	r2, #4
 80070e0:	f104 0115 	add.w	r1, r4, #21
 80070e4:	428f      	cmp	r7, r1
 80070e6:	bf38      	it	cc
 80070e8:	2204      	movcc	r2, #4
 80070ea:	9201      	str	r2, [sp, #4]
 80070ec:	9a02      	ldr	r2, [sp, #8]
 80070ee:	9303      	str	r3, [sp, #12]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d80c      	bhi.n	800710e <__multiply+0x9e>
 80070f4:	2e00      	cmp	r6, #0
 80070f6:	dd03      	ble.n	8007100 <__multiply+0x90>
 80070f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d05a      	beq.n	80071b6 <__multiply+0x146>
 8007100:	6106      	str	r6, [r0, #16]
 8007102:	b005      	add	sp, #20
 8007104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007108:	f843 2b04 	str.w	r2, [r3], #4
 800710c:	e7d8      	b.n	80070c0 <__multiply+0x50>
 800710e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007112:	f1ba 0f00 	cmp.w	sl, #0
 8007116:	d024      	beq.n	8007162 <__multiply+0xf2>
 8007118:	f104 0e14 	add.w	lr, r4, #20
 800711c:	46a9      	mov	r9, r5
 800711e:	f04f 0c00 	mov.w	ip, #0
 8007122:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007126:	f8d9 1000 	ldr.w	r1, [r9]
 800712a:	fa1f fb82 	uxth.w	fp, r2
 800712e:	b289      	uxth	r1, r1
 8007130:	fb0a 110b 	mla	r1, sl, fp, r1
 8007134:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007138:	f8d9 2000 	ldr.w	r2, [r9]
 800713c:	4461      	add	r1, ip
 800713e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007142:	fb0a c20b 	mla	r2, sl, fp, ip
 8007146:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800714a:	b289      	uxth	r1, r1
 800714c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007150:	4577      	cmp	r7, lr
 8007152:	f849 1b04 	str.w	r1, [r9], #4
 8007156:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800715a:	d8e2      	bhi.n	8007122 <__multiply+0xb2>
 800715c:	9a01      	ldr	r2, [sp, #4]
 800715e:	f845 c002 	str.w	ip, [r5, r2]
 8007162:	9a03      	ldr	r2, [sp, #12]
 8007164:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007168:	3304      	adds	r3, #4
 800716a:	f1b9 0f00 	cmp.w	r9, #0
 800716e:	d020      	beq.n	80071b2 <__multiply+0x142>
 8007170:	6829      	ldr	r1, [r5, #0]
 8007172:	f104 0c14 	add.w	ip, r4, #20
 8007176:	46ae      	mov	lr, r5
 8007178:	f04f 0a00 	mov.w	sl, #0
 800717c:	f8bc b000 	ldrh.w	fp, [ip]
 8007180:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007184:	fb09 220b 	mla	r2, r9, fp, r2
 8007188:	4492      	add	sl, r2
 800718a:	b289      	uxth	r1, r1
 800718c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007190:	f84e 1b04 	str.w	r1, [lr], #4
 8007194:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007198:	f8be 1000 	ldrh.w	r1, [lr]
 800719c:	0c12      	lsrs	r2, r2, #16
 800719e:	fb09 1102 	mla	r1, r9, r2, r1
 80071a2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80071a6:	4567      	cmp	r7, ip
 80071a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80071ac:	d8e6      	bhi.n	800717c <__multiply+0x10c>
 80071ae:	9a01      	ldr	r2, [sp, #4]
 80071b0:	50a9      	str	r1, [r5, r2]
 80071b2:	3504      	adds	r5, #4
 80071b4:	e79a      	b.n	80070ec <__multiply+0x7c>
 80071b6:	3e01      	subs	r6, #1
 80071b8:	e79c      	b.n	80070f4 <__multiply+0x84>
 80071ba:	bf00      	nop
 80071bc:	08008703 	.word	0x08008703
 80071c0:	08008714 	.word	0x08008714

080071c4 <__pow5mult>:
 80071c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071c8:	4615      	mov	r5, r2
 80071ca:	f012 0203 	ands.w	r2, r2, #3
 80071ce:	4606      	mov	r6, r0
 80071d0:	460f      	mov	r7, r1
 80071d2:	d007      	beq.n	80071e4 <__pow5mult+0x20>
 80071d4:	4c25      	ldr	r4, [pc, #148]	; (800726c <__pow5mult+0xa8>)
 80071d6:	3a01      	subs	r2, #1
 80071d8:	2300      	movs	r3, #0
 80071da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80071de:	f7ff fe9b 	bl	8006f18 <__multadd>
 80071e2:	4607      	mov	r7, r0
 80071e4:	10ad      	asrs	r5, r5, #2
 80071e6:	d03d      	beq.n	8007264 <__pow5mult+0xa0>
 80071e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80071ea:	b97c      	cbnz	r4, 800720c <__pow5mult+0x48>
 80071ec:	2010      	movs	r0, #16
 80071ee:	f7ff fe29 	bl	8006e44 <malloc>
 80071f2:	4602      	mov	r2, r0
 80071f4:	6270      	str	r0, [r6, #36]	; 0x24
 80071f6:	b928      	cbnz	r0, 8007204 <__pow5mult+0x40>
 80071f8:	4b1d      	ldr	r3, [pc, #116]	; (8007270 <__pow5mult+0xac>)
 80071fa:	481e      	ldr	r0, [pc, #120]	; (8007274 <__pow5mult+0xb0>)
 80071fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007200:	f000 fc0e 	bl	8007a20 <__assert_func>
 8007204:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007208:	6004      	str	r4, [r0, #0]
 800720a:	60c4      	str	r4, [r0, #12]
 800720c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007210:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007214:	b94c      	cbnz	r4, 800722a <__pow5mult+0x66>
 8007216:	f240 2171 	movw	r1, #625	; 0x271
 800721a:	4630      	mov	r0, r6
 800721c:	f7ff ff12 	bl	8007044 <__i2b>
 8007220:	2300      	movs	r3, #0
 8007222:	f8c8 0008 	str.w	r0, [r8, #8]
 8007226:	4604      	mov	r4, r0
 8007228:	6003      	str	r3, [r0, #0]
 800722a:	f04f 0900 	mov.w	r9, #0
 800722e:	07eb      	lsls	r3, r5, #31
 8007230:	d50a      	bpl.n	8007248 <__pow5mult+0x84>
 8007232:	4639      	mov	r1, r7
 8007234:	4622      	mov	r2, r4
 8007236:	4630      	mov	r0, r6
 8007238:	f7ff ff1a 	bl	8007070 <__multiply>
 800723c:	4639      	mov	r1, r7
 800723e:	4680      	mov	r8, r0
 8007240:	4630      	mov	r0, r6
 8007242:	f7ff fe47 	bl	8006ed4 <_Bfree>
 8007246:	4647      	mov	r7, r8
 8007248:	106d      	asrs	r5, r5, #1
 800724a:	d00b      	beq.n	8007264 <__pow5mult+0xa0>
 800724c:	6820      	ldr	r0, [r4, #0]
 800724e:	b938      	cbnz	r0, 8007260 <__pow5mult+0x9c>
 8007250:	4622      	mov	r2, r4
 8007252:	4621      	mov	r1, r4
 8007254:	4630      	mov	r0, r6
 8007256:	f7ff ff0b 	bl	8007070 <__multiply>
 800725a:	6020      	str	r0, [r4, #0]
 800725c:	f8c0 9000 	str.w	r9, [r0]
 8007260:	4604      	mov	r4, r0
 8007262:	e7e4      	b.n	800722e <__pow5mult+0x6a>
 8007264:	4638      	mov	r0, r7
 8007266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800726a:	bf00      	nop
 800726c:	08008860 	.word	0x08008860
 8007270:	08008691 	.word	0x08008691
 8007274:	08008714 	.word	0x08008714

08007278 <__lshift>:
 8007278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800727c:	460c      	mov	r4, r1
 800727e:	6849      	ldr	r1, [r1, #4]
 8007280:	6923      	ldr	r3, [r4, #16]
 8007282:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007286:	68a3      	ldr	r3, [r4, #8]
 8007288:	4607      	mov	r7, r0
 800728a:	4691      	mov	r9, r2
 800728c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007290:	f108 0601 	add.w	r6, r8, #1
 8007294:	42b3      	cmp	r3, r6
 8007296:	db0b      	blt.n	80072b0 <__lshift+0x38>
 8007298:	4638      	mov	r0, r7
 800729a:	f7ff fddb 	bl	8006e54 <_Balloc>
 800729e:	4605      	mov	r5, r0
 80072a0:	b948      	cbnz	r0, 80072b6 <__lshift+0x3e>
 80072a2:	4602      	mov	r2, r0
 80072a4:	4b2a      	ldr	r3, [pc, #168]	; (8007350 <__lshift+0xd8>)
 80072a6:	482b      	ldr	r0, [pc, #172]	; (8007354 <__lshift+0xdc>)
 80072a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80072ac:	f000 fbb8 	bl	8007a20 <__assert_func>
 80072b0:	3101      	adds	r1, #1
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	e7ee      	b.n	8007294 <__lshift+0x1c>
 80072b6:	2300      	movs	r3, #0
 80072b8:	f100 0114 	add.w	r1, r0, #20
 80072bc:	f100 0210 	add.w	r2, r0, #16
 80072c0:	4618      	mov	r0, r3
 80072c2:	4553      	cmp	r3, sl
 80072c4:	db37      	blt.n	8007336 <__lshift+0xbe>
 80072c6:	6920      	ldr	r0, [r4, #16]
 80072c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80072cc:	f104 0314 	add.w	r3, r4, #20
 80072d0:	f019 091f 	ands.w	r9, r9, #31
 80072d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80072d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80072dc:	d02f      	beq.n	800733e <__lshift+0xc6>
 80072de:	f1c9 0e20 	rsb	lr, r9, #32
 80072e2:	468a      	mov	sl, r1
 80072e4:	f04f 0c00 	mov.w	ip, #0
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	fa02 f209 	lsl.w	r2, r2, r9
 80072ee:	ea42 020c 	orr.w	r2, r2, ip
 80072f2:	f84a 2b04 	str.w	r2, [sl], #4
 80072f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80072fa:	4298      	cmp	r0, r3
 80072fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007300:	d8f2      	bhi.n	80072e8 <__lshift+0x70>
 8007302:	1b03      	subs	r3, r0, r4
 8007304:	3b15      	subs	r3, #21
 8007306:	f023 0303 	bic.w	r3, r3, #3
 800730a:	3304      	adds	r3, #4
 800730c:	f104 0215 	add.w	r2, r4, #21
 8007310:	4290      	cmp	r0, r2
 8007312:	bf38      	it	cc
 8007314:	2304      	movcc	r3, #4
 8007316:	f841 c003 	str.w	ip, [r1, r3]
 800731a:	f1bc 0f00 	cmp.w	ip, #0
 800731e:	d001      	beq.n	8007324 <__lshift+0xac>
 8007320:	f108 0602 	add.w	r6, r8, #2
 8007324:	3e01      	subs	r6, #1
 8007326:	4638      	mov	r0, r7
 8007328:	612e      	str	r6, [r5, #16]
 800732a:	4621      	mov	r1, r4
 800732c:	f7ff fdd2 	bl	8006ed4 <_Bfree>
 8007330:	4628      	mov	r0, r5
 8007332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007336:	f842 0f04 	str.w	r0, [r2, #4]!
 800733a:	3301      	adds	r3, #1
 800733c:	e7c1      	b.n	80072c2 <__lshift+0x4a>
 800733e:	3904      	subs	r1, #4
 8007340:	f853 2b04 	ldr.w	r2, [r3], #4
 8007344:	f841 2f04 	str.w	r2, [r1, #4]!
 8007348:	4298      	cmp	r0, r3
 800734a:	d8f9      	bhi.n	8007340 <__lshift+0xc8>
 800734c:	e7ea      	b.n	8007324 <__lshift+0xac>
 800734e:	bf00      	nop
 8007350:	08008703 	.word	0x08008703
 8007354:	08008714 	.word	0x08008714

08007358 <__mcmp>:
 8007358:	b530      	push	{r4, r5, lr}
 800735a:	6902      	ldr	r2, [r0, #16]
 800735c:	690c      	ldr	r4, [r1, #16]
 800735e:	1b12      	subs	r2, r2, r4
 8007360:	d10e      	bne.n	8007380 <__mcmp+0x28>
 8007362:	f100 0314 	add.w	r3, r0, #20
 8007366:	3114      	adds	r1, #20
 8007368:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800736c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007370:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007374:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007378:	42a5      	cmp	r5, r4
 800737a:	d003      	beq.n	8007384 <__mcmp+0x2c>
 800737c:	d305      	bcc.n	800738a <__mcmp+0x32>
 800737e:	2201      	movs	r2, #1
 8007380:	4610      	mov	r0, r2
 8007382:	bd30      	pop	{r4, r5, pc}
 8007384:	4283      	cmp	r3, r0
 8007386:	d3f3      	bcc.n	8007370 <__mcmp+0x18>
 8007388:	e7fa      	b.n	8007380 <__mcmp+0x28>
 800738a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800738e:	e7f7      	b.n	8007380 <__mcmp+0x28>

08007390 <__mdiff>:
 8007390:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007394:	460c      	mov	r4, r1
 8007396:	4606      	mov	r6, r0
 8007398:	4611      	mov	r1, r2
 800739a:	4620      	mov	r0, r4
 800739c:	4690      	mov	r8, r2
 800739e:	f7ff ffdb 	bl	8007358 <__mcmp>
 80073a2:	1e05      	subs	r5, r0, #0
 80073a4:	d110      	bne.n	80073c8 <__mdiff+0x38>
 80073a6:	4629      	mov	r1, r5
 80073a8:	4630      	mov	r0, r6
 80073aa:	f7ff fd53 	bl	8006e54 <_Balloc>
 80073ae:	b930      	cbnz	r0, 80073be <__mdiff+0x2e>
 80073b0:	4b3a      	ldr	r3, [pc, #232]	; (800749c <__mdiff+0x10c>)
 80073b2:	4602      	mov	r2, r0
 80073b4:	f240 2132 	movw	r1, #562	; 0x232
 80073b8:	4839      	ldr	r0, [pc, #228]	; (80074a0 <__mdiff+0x110>)
 80073ba:	f000 fb31 	bl	8007a20 <__assert_func>
 80073be:	2301      	movs	r3, #1
 80073c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80073c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c8:	bfa4      	itt	ge
 80073ca:	4643      	movge	r3, r8
 80073cc:	46a0      	movge	r8, r4
 80073ce:	4630      	mov	r0, r6
 80073d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80073d4:	bfa6      	itte	ge
 80073d6:	461c      	movge	r4, r3
 80073d8:	2500      	movge	r5, #0
 80073da:	2501      	movlt	r5, #1
 80073dc:	f7ff fd3a 	bl	8006e54 <_Balloc>
 80073e0:	b920      	cbnz	r0, 80073ec <__mdiff+0x5c>
 80073e2:	4b2e      	ldr	r3, [pc, #184]	; (800749c <__mdiff+0x10c>)
 80073e4:	4602      	mov	r2, r0
 80073e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80073ea:	e7e5      	b.n	80073b8 <__mdiff+0x28>
 80073ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80073f0:	6926      	ldr	r6, [r4, #16]
 80073f2:	60c5      	str	r5, [r0, #12]
 80073f4:	f104 0914 	add.w	r9, r4, #20
 80073f8:	f108 0514 	add.w	r5, r8, #20
 80073fc:	f100 0e14 	add.w	lr, r0, #20
 8007400:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007404:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007408:	f108 0210 	add.w	r2, r8, #16
 800740c:	46f2      	mov	sl, lr
 800740e:	2100      	movs	r1, #0
 8007410:	f859 3b04 	ldr.w	r3, [r9], #4
 8007414:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007418:	fa1f f883 	uxth.w	r8, r3
 800741c:	fa11 f18b 	uxtah	r1, r1, fp
 8007420:	0c1b      	lsrs	r3, r3, #16
 8007422:	eba1 0808 	sub.w	r8, r1, r8
 8007426:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800742a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800742e:	fa1f f888 	uxth.w	r8, r8
 8007432:	1419      	asrs	r1, r3, #16
 8007434:	454e      	cmp	r6, r9
 8007436:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800743a:	f84a 3b04 	str.w	r3, [sl], #4
 800743e:	d8e7      	bhi.n	8007410 <__mdiff+0x80>
 8007440:	1b33      	subs	r3, r6, r4
 8007442:	3b15      	subs	r3, #21
 8007444:	f023 0303 	bic.w	r3, r3, #3
 8007448:	3304      	adds	r3, #4
 800744a:	3415      	adds	r4, #21
 800744c:	42a6      	cmp	r6, r4
 800744e:	bf38      	it	cc
 8007450:	2304      	movcc	r3, #4
 8007452:	441d      	add	r5, r3
 8007454:	4473      	add	r3, lr
 8007456:	469e      	mov	lr, r3
 8007458:	462e      	mov	r6, r5
 800745a:	4566      	cmp	r6, ip
 800745c:	d30e      	bcc.n	800747c <__mdiff+0xec>
 800745e:	f10c 0203 	add.w	r2, ip, #3
 8007462:	1b52      	subs	r2, r2, r5
 8007464:	f022 0203 	bic.w	r2, r2, #3
 8007468:	3d03      	subs	r5, #3
 800746a:	45ac      	cmp	ip, r5
 800746c:	bf38      	it	cc
 800746e:	2200      	movcc	r2, #0
 8007470:	441a      	add	r2, r3
 8007472:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007476:	b17b      	cbz	r3, 8007498 <__mdiff+0x108>
 8007478:	6107      	str	r7, [r0, #16]
 800747a:	e7a3      	b.n	80073c4 <__mdiff+0x34>
 800747c:	f856 8b04 	ldr.w	r8, [r6], #4
 8007480:	fa11 f288 	uxtah	r2, r1, r8
 8007484:	1414      	asrs	r4, r2, #16
 8007486:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800748a:	b292      	uxth	r2, r2
 800748c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007490:	f84e 2b04 	str.w	r2, [lr], #4
 8007494:	1421      	asrs	r1, r4, #16
 8007496:	e7e0      	b.n	800745a <__mdiff+0xca>
 8007498:	3f01      	subs	r7, #1
 800749a:	e7ea      	b.n	8007472 <__mdiff+0xe2>
 800749c:	08008703 	.word	0x08008703
 80074a0:	08008714 	.word	0x08008714

080074a4 <__d2b>:
 80074a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80074a8:	4689      	mov	r9, r1
 80074aa:	2101      	movs	r1, #1
 80074ac:	ec57 6b10 	vmov	r6, r7, d0
 80074b0:	4690      	mov	r8, r2
 80074b2:	f7ff fccf 	bl	8006e54 <_Balloc>
 80074b6:	4604      	mov	r4, r0
 80074b8:	b930      	cbnz	r0, 80074c8 <__d2b+0x24>
 80074ba:	4602      	mov	r2, r0
 80074bc:	4b25      	ldr	r3, [pc, #148]	; (8007554 <__d2b+0xb0>)
 80074be:	4826      	ldr	r0, [pc, #152]	; (8007558 <__d2b+0xb4>)
 80074c0:	f240 310a 	movw	r1, #778	; 0x30a
 80074c4:	f000 faac 	bl	8007a20 <__assert_func>
 80074c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80074cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80074d0:	bb35      	cbnz	r5, 8007520 <__d2b+0x7c>
 80074d2:	2e00      	cmp	r6, #0
 80074d4:	9301      	str	r3, [sp, #4]
 80074d6:	d028      	beq.n	800752a <__d2b+0x86>
 80074d8:	4668      	mov	r0, sp
 80074da:	9600      	str	r6, [sp, #0]
 80074dc:	f7ff fd82 	bl	8006fe4 <__lo0bits>
 80074e0:	9900      	ldr	r1, [sp, #0]
 80074e2:	b300      	cbz	r0, 8007526 <__d2b+0x82>
 80074e4:	9a01      	ldr	r2, [sp, #4]
 80074e6:	f1c0 0320 	rsb	r3, r0, #32
 80074ea:	fa02 f303 	lsl.w	r3, r2, r3
 80074ee:	430b      	orrs	r3, r1
 80074f0:	40c2      	lsrs	r2, r0
 80074f2:	6163      	str	r3, [r4, #20]
 80074f4:	9201      	str	r2, [sp, #4]
 80074f6:	9b01      	ldr	r3, [sp, #4]
 80074f8:	61a3      	str	r3, [r4, #24]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	bf14      	ite	ne
 80074fe:	2202      	movne	r2, #2
 8007500:	2201      	moveq	r2, #1
 8007502:	6122      	str	r2, [r4, #16]
 8007504:	b1d5      	cbz	r5, 800753c <__d2b+0x98>
 8007506:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800750a:	4405      	add	r5, r0
 800750c:	f8c9 5000 	str.w	r5, [r9]
 8007510:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007514:	f8c8 0000 	str.w	r0, [r8]
 8007518:	4620      	mov	r0, r4
 800751a:	b003      	add	sp, #12
 800751c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007524:	e7d5      	b.n	80074d2 <__d2b+0x2e>
 8007526:	6161      	str	r1, [r4, #20]
 8007528:	e7e5      	b.n	80074f6 <__d2b+0x52>
 800752a:	a801      	add	r0, sp, #4
 800752c:	f7ff fd5a 	bl	8006fe4 <__lo0bits>
 8007530:	9b01      	ldr	r3, [sp, #4]
 8007532:	6163      	str	r3, [r4, #20]
 8007534:	2201      	movs	r2, #1
 8007536:	6122      	str	r2, [r4, #16]
 8007538:	3020      	adds	r0, #32
 800753a:	e7e3      	b.n	8007504 <__d2b+0x60>
 800753c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007540:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007544:	f8c9 0000 	str.w	r0, [r9]
 8007548:	6918      	ldr	r0, [r3, #16]
 800754a:	f7ff fd2b 	bl	8006fa4 <__hi0bits>
 800754e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007552:	e7df      	b.n	8007514 <__d2b+0x70>
 8007554:	08008703 	.word	0x08008703
 8007558:	08008714 	.word	0x08008714

0800755c <_calloc_r>:
 800755c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800755e:	fba1 2402 	umull	r2, r4, r1, r2
 8007562:	b94c      	cbnz	r4, 8007578 <_calloc_r+0x1c>
 8007564:	4611      	mov	r1, r2
 8007566:	9201      	str	r2, [sp, #4]
 8007568:	f000 f87a 	bl	8007660 <_malloc_r>
 800756c:	9a01      	ldr	r2, [sp, #4]
 800756e:	4605      	mov	r5, r0
 8007570:	b930      	cbnz	r0, 8007580 <_calloc_r+0x24>
 8007572:	4628      	mov	r0, r5
 8007574:	b003      	add	sp, #12
 8007576:	bd30      	pop	{r4, r5, pc}
 8007578:	220c      	movs	r2, #12
 800757a:	6002      	str	r2, [r0, #0]
 800757c:	2500      	movs	r5, #0
 800757e:	e7f8      	b.n	8007572 <_calloc_r+0x16>
 8007580:	4621      	mov	r1, r4
 8007582:	f7fe f94f 	bl	8005824 <memset>
 8007586:	e7f4      	b.n	8007572 <_calloc_r+0x16>

08007588 <_free_r>:
 8007588:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800758a:	2900      	cmp	r1, #0
 800758c:	d044      	beq.n	8007618 <_free_r+0x90>
 800758e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007592:	9001      	str	r0, [sp, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	f1a1 0404 	sub.w	r4, r1, #4
 800759a:	bfb8      	it	lt
 800759c:	18e4      	addlt	r4, r4, r3
 800759e:	f000 fa9b 	bl	8007ad8 <__malloc_lock>
 80075a2:	4a1e      	ldr	r2, [pc, #120]	; (800761c <_free_r+0x94>)
 80075a4:	9801      	ldr	r0, [sp, #4]
 80075a6:	6813      	ldr	r3, [r2, #0]
 80075a8:	b933      	cbnz	r3, 80075b8 <_free_r+0x30>
 80075aa:	6063      	str	r3, [r4, #4]
 80075ac:	6014      	str	r4, [r2, #0]
 80075ae:	b003      	add	sp, #12
 80075b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075b4:	f000 ba96 	b.w	8007ae4 <__malloc_unlock>
 80075b8:	42a3      	cmp	r3, r4
 80075ba:	d908      	bls.n	80075ce <_free_r+0x46>
 80075bc:	6825      	ldr	r5, [r4, #0]
 80075be:	1961      	adds	r1, r4, r5
 80075c0:	428b      	cmp	r3, r1
 80075c2:	bf01      	itttt	eq
 80075c4:	6819      	ldreq	r1, [r3, #0]
 80075c6:	685b      	ldreq	r3, [r3, #4]
 80075c8:	1949      	addeq	r1, r1, r5
 80075ca:	6021      	streq	r1, [r4, #0]
 80075cc:	e7ed      	b.n	80075aa <_free_r+0x22>
 80075ce:	461a      	mov	r2, r3
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	b10b      	cbz	r3, 80075d8 <_free_r+0x50>
 80075d4:	42a3      	cmp	r3, r4
 80075d6:	d9fa      	bls.n	80075ce <_free_r+0x46>
 80075d8:	6811      	ldr	r1, [r2, #0]
 80075da:	1855      	adds	r5, r2, r1
 80075dc:	42a5      	cmp	r5, r4
 80075de:	d10b      	bne.n	80075f8 <_free_r+0x70>
 80075e0:	6824      	ldr	r4, [r4, #0]
 80075e2:	4421      	add	r1, r4
 80075e4:	1854      	adds	r4, r2, r1
 80075e6:	42a3      	cmp	r3, r4
 80075e8:	6011      	str	r1, [r2, #0]
 80075ea:	d1e0      	bne.n	80075ae <_free_r+0x26>
 80075ec:	681c      	ldr	r4, [r3, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	6053      	str	r3, [r2, #4]
 80075f2:	4421      	add	r1, r4
 80075f4:	6011      	str	r1, [r2, #0]
 80075f6:	e7da      	b.n	80075ae <_free_r+0x26>
 80075f8:	d902      	bls.n	8007600 <_free_r+0x78>
 80075fa:	230c      	movs	r3, #12
 80075fc:	6003      	str	r3, [r0, #0]
 80075fe:	e7d6      	b.n	80075ae <_free_r+0x26>
 8007600:	6825      	ldr	r5, [r4, #0]
 8007602:	1961      	adds	r1, r4, r5
 8007604:	428b      	cmp	r3, r1
 8007606:	bf04      	itt	eq
 8007608:	6819      	ldreq	r1, [r3, #0]
 800760a:	685b      	ldreq	r3, [r3, #4]
 800760c:	6063      	str	r3, [r4, #4]
 800760e:	bf04      	itt	eq
 8007610:	1949      	addeq	r1, r1, r5
 8007612:	6021      	streq	r1, [r4, #0]
 8007614:	6054      	str	r4, [r2, #4]
 8007616:	e7ca      	b.n	80075ae <_free_r+0x26>
 8007618:	b003      	add	sp, #12
 800761a:	bd30      	pop	{r4, r5, pc}
 800761c:	200003a8 	.word	0x200003a8

08007620 <sbrk_aligned>:
 8007620:	b570      	push	{r4, r5, r6, lr}
 8007622:	4e0e      	ldr	r6, [pc, #56]	; (800765c <sbrk_aligned+0x3c>)
 8007624:	460c      	mov	r4, r1
 8007626:	6831      	ldr	r1, [r6, #0]
 8007628:	4605      	mov	r5, r0
 800762a:	b911      	cbnz	r1, 8007632 <sbrk_aligned+0x12>
 800762c:	f000 f9e8 	bl	8007a00 <_sbrk_r>
 8007630:	6030      	str	r0, [r6, #0]
 8007632:	4621      	mov	r1, r4
 8007634:	4628      	mov	r0, r5
 8007636:	f000 f9e3 	bl	8007a00 <_sbrk_r>
 800763a:	1c43      	adds	r3, r0, #1
 800763c:	d00a      	beq.n	8007654 <sbrk_aligned+0x34>
 800763e:	1cc4      	adds	r4, r0, #3
 8007640:	f024 0403 	bic.w	r4, r4, #3
 8007644:	42a0      	cmp	r0, r4
 8007646:	d007      	beq.n	8007658 <sbrk_aligned+0x38>
 8007648:	1a21      	subs	r1, r4, r0
 800764a:	4628      	mov	r0, r5
 800764c:	f000 f9d8 	bl	8007a00 <_sbrk_r>
 8007650:	3001      	adds	r0, #1
 8007652:	d101      	bne.n	8007658 <sbrk_aligned+0x38>
 8007654:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007658:	4620      	mov	r0, r4
 800765a:	bd70      	pop	{r4, r5, r6, pc}
 800765c:	200003ac 	.word	0x200003ac

08007660 <_malloc_r>:
 8007660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007664:	1ccd      	adds	r5, r1, #3
 8007666:	f025 0503 	bic.w	r5, r5, #3
 800766a:	3508      	adds	r5, #8
 800766c:	2d0c      	cmp	r5, #12
 800766e:	bf38      	it	cc
 8007670:	250c      	movcc	r5, #12
 8007672:	2d00      	cmp	r5, #0
 8007674:	4607      	mov	r7, r0
 8007676:	db01      	blt.n	800767c <_malloc_r+0x1c>
 8007678:	42a9      	cmp	r1, r5
 800767a:	d905      	bls.n	8007688 <_malloc_r+0x28>
 800767c:	230c      	movs	r3, #12
 800767e:	603b      	str	r3, [r7, #0]
 8007680:	2600      	movs	r6, #0
 8007682:	4630      	mov	r0, r6
 8007684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007688:	4e2e      	ldr	r6, [pc, #184]	; (8007744 <_malloc_r+0xe4>)
 800768a:	f000 fa25 	bl	8007ad8 <__malloc_lock>
 800768e:	6833      	ldr	r3, [r6, #0]
 8007690:	461c      	mov	r4, r3
 8007692:	bb34      	cbnz	r4, 80076e2 <_malloc_r+0x82>
 8007694:	4629      	mov	r1, r5
 8007696:	4638      	mov	r0, r7
 8007698:	f7ff ffc2 	bl	8007620 <sbrk_aligned>
 800769c:	1c43      	adds	r3, r0, #1
 800769e:	4604      	mov	r4, r0
 80076a0:	d14d      	bne.n	800773e <_malloc_r+0xde>
 80076a2:	6834      	ldr	r4, [r6, #0]
 80076a4:	4626      	mov	r6, r4
 80076a6:	2e00      	cmp	r6, #0
 80076a8:	d140      	bne.n	800772c <_malloc_r+0xcc>
 80076aa:	6823      	ldr	r3, [r4, #0]
 80076ac:	4631      	mov	r1, r6
 80076ae:	4638      	mov	r0, r7
 80076b0:	eb04 0803 	add.w	r8, r4, r3
 80076b4:	f000 f9a4 	bl	8007a00 <_sbrk_r>
 80076b8:	4580      	cmp	r8, r0
 80076ba:	d13a      	bne.n	8007732 <_malloc_r+0xd2>
 80076bc:	6821      	ldr	r1, [r4, #0]
 80076be:	3503      	adds	r5, #3
 80076c0:	1a6d      	subs	r5, r5, r1
 80076c2:	f025 0503 	bic.w	r5, r5, #3
 80076c6:	3508      	adds	r5, #8
 80076c8:	2d0c      	cmp	r5, #12
 80076ca:	bf38      	it	cc
 80076cc:	250c      	movcc	r5, #12
 80076ce:	4629      	mov	r1, r5
 80076d0:	4638      	mov	r0, r7
 80076d2:	f7ff ffa5 	bl	8007620 <sbrk_aligned>
 80076d6:	3001      	adds	r0, #1
 80076d8:	d02b      	beq.n	8007732 <_malloc_r+0xd2>
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	442b      	add	r3, r5
 80076de:	6023      	str	r3, [r4, #0]
 80076e0:	e00e      	b.n	8007700 <_malloc_r+0xa0>
 80076e2:	6822      	ldr	r2, [r4, #0]
 80076e4:	1b52      	subs	r2, r2, r5
 80076e6:	d41e      	bmi.n	8007726 <_malloc_r+0xc6>
 80076e8:	2a0b      	cmp	r2, #11
 80076ea:	d916      	bls.n	800771a <_malloc_r+0xba>
 80076ec:	1961      	adds	r1, r4, r5
 80076ee:	42a3      	cmp	r3, r4
 80076f0:	6025      	str	r5, [r4, #0]
 80076f2:	bf18      	it	ne
 80076f4:	6059      	strne	r1, [r3, #4]
 80076f6:	6863      	ldr	r3, [r4, #4]
 80076f8:	bf08      	it	eq
 80076fa:	6031      	streq	r1, [r6, #0]
 80076fc:	5162      	str	r2, [r4, r5]
 80076fe:	604b      	str	r3, [r1, #4]
 8007700:	4638      	mov	r0, r7
 8007702:	f104 060b 	add.w	r6, r4, #11
 8007706:	f000 f9ed 	bl	8007ae4 <__malloc_unlock>
 800770a:	f026 0607 	bic.w	r6, r6, #7
 800770e:	1d23      	adds	r3, r4, #4
 8007710:	1af2      	subs	r2, r6, r3
 8007712:	d0b6      	beq.n	8007682 <_malloc_r+0x22>
 8007714:	1b9b      	subs	r3, r3, r6
 8007716:	50a3      	str	r3, [r4, r2]
 8007718:	e7b3      	b.n	8007682 <_malloc_r+0x22>
 800771a:	6862      	ldr	r2, [r4, #4]
 800771c:	42a3      	cmp	r3, r4
 800771e:	bf0c      	ite	eq
 8007720:	6032      	streq	r2, [r6, #0]
 8007722:	605a      	strne	r2, [r3, #4]
 8007724:	e7ec      	b.n	8007700 <_malloc_r+0xa0>
 8007726:	4623      	mov	r3, r4
 8007728:	6864      	ldr	r4, [r4, #4]
 800772a:	e7b2      	b.n	8007692 <_malloc_r+0x32>
 800772c:	4634      	mov	r4, r6
 800772e:	6876      	ldr	r6, [r6, #4]
 8007730:	e7b9      	b.n	80076a6 <_malloc_r+0x46>
 8007732:	230c      	movs	r3, #12
 8007734:	603b      	str	r3, [r7, #0]
 8007736:	4638      	mov	r0, r7
 8007738:	f000 f9d4 	bl	8007ae4 <__malloc_unlock>
 800773c:	e7a1      	b.n	8007682 <_malloc_r+0x22>
 800773e:	6025      	str	r5, [r4, #0]
 8007740:	e7de      	b.n	8007700 <_malloc_r+0xa0>
 8007742:	bf00      	nop
 8007744:	200003a8 	.word	0x200003a8

08007748 <__ssputs_r>:
 8007748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800774c:	688e      	ldr	r6, [r1, #8]
 800774e:	429e      	cmp	r6, r3
 8007750:	4682      	mov	sl, r0
 8007752:	460c      	mov	r4, r1
 8007754:	4690      	mov	r8, r2
 8007756:	461f      	mov	r7, r3
 8007758:	d838      	bhi.n	80077cc <__ssputs_r+0x84>
 800775a:	898a      	ldrh	r2, [r1, #12]
 800775c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007760:	d032      	beq.n	80077c8 <__ssputs_r+0x80>
 8007762:	6825      	ldr	r5, [r4, #0]
 8007764:	6909      	ldr	r1, [r1, #16]
 8007766:	eba5 0901 	sub.w	r9, r5, r1
 800776a:	6965      	ldr	r5, [r4, #20]
 800776c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007770:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007774:	3301      	adds	r3, #1
 8007776:	444b      	add	r3, r9
 8007778:	106d      	asrs	r5, r5, #1
 800777a:	429d      	cmp	r5, r3
 800777c:	bf38      	it	cc
 800777e:	461d      	movcc	r5, r3
 8007780:	0553      	lsls	r3, r2, #21
 8007782:	d531      	bpl.n	80077e8 <__ssputs_r+0xa0>
 8007784:	4629      	mov	r1, r5
 8007786:	f7ff ff6b 	bl	8007660 <_malloc_r>
 800778a:	4606      	mov	r6, r0
 800778c:	b950      	cbnz	r0, 80077a4 <__ssputs_r+0x5c>
 800778e:	230c      	movs	r3, #12
 8007790:	f8ca 3000 	str.w	r3, [sl]
 8007794:	89a3      	ldrh	r3, [r4, #12]
 8007796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800779a:	81a3      	strh	r3, [r4, #12]
 800779c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a4:	6921      	ldr	r1, [r4, #16]
 80077a6:	464a      	mov	r2, r9
 80077a8:	f7fe f82e 	bl	8005808 <memcpy>
 80077ac:	89a3      	ldrh	r3, [r4, #12]
 80077ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077b6:	81a3      	strh	r3, [r4, #12]
 80077b8:	6126      	str	r6, [r4, #16]
 80077ba:	6165      	str	r5, [r4, #20]
 80077bc:	444e      	add	r6, r9
 80077be:	eba5 0509 	sub.w	r5, r5, r9
 80077c2:	6026      	str	r6, [r4, #0]
 80077c4:	60a5      	str	r5, [r4, #8]
 80077c6:	463e      	mov	r6, r7
 80077c8:	42be      	cmp	r6, r7
 80077ca:	d900      	bls.n	80077ce <__ssputs_r+0x86>
 80077cc:	463e      	mov	r6, r7
 80077ce:	6820      	ldr	r0, [r4, #0]
 80077d0:	4632      	mov	r2, r6
 80077d2:	4641      	mov	r1, r8
 80077d4:	f000 f966 	bl	8007aa4 <memmove>
 80077d8:	68a3      	ldr	r3, [r4, #8]
 80077da:	1b9b      	subs	r3, r3, r6
 80077dc:	60a3      	str	r3, [r4, #8]
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	4433      	add	r3, r6
 80077e2:	6023      	str	r3, [r4, #0]
 80077e4:	2000      	movs	r0, #0
 80077e6:	e7db      	b.n	80077a0 <__ssputs_r+0x58>
 80077e8:	462a      	mov	r2, r5
 80077ea:	f000 f981 	bl	8007af0 <_realloc_r>
 80077ee:	4606      	mov	r6, r0
 80077f0:	2800      	cmp	r0, #0
 80077f2:	d1e1      	bne.n	80077b8 <__ssputs_r+0x70>
 80077f4:	6921      	ldr	r1, [r4, #16]
 80077f6:	4650      	mov	r0, sl
 80077f8:	f7ff fec6 	bl	8007588 <_free_r>
 80077fc:	e7c7      	b.n	800778e <__ssputs_r+0x46>
	...

08007800 <_svfiprintf_r>:
 8007800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007804:	4698      	mov	r8, r3
 8007806:	898b      	ldrh	r3, [r1, #12]
 8007808:	061b      	lsls	r3, r3, #24
 800780a:	b09d      	sub	sp, #116	; 0x74
 800780c:	4607      	mov	r7, r0
 800780e:	460d      	mov	r5, r1
 8007810:	4614      	mov	r4, r2
 8007812:	d50e      	bpl.n	8007832 <_svfiprintf_r+0x32>
 8007814:	690b      	ldr	r3, [r1, #16]
 8007816:	b963      	cbnz	r3, 8007832 <_svfiprintf_r+0x32>
 8007818:	2140      	movs	r1, #64	; 0x40
 800781a:	f7ff ff21 	bl	8007660 <_malloc_r>
 800781e:	6028      	str	r0, [r5, #0]
 8007820:	6128      	str	r0, [r5, #16]
 8007822:	b920      	cbnz	r0, 800782e <_svfiprintf_r+0x2e>
 8007824:	230c      	movs	r3, #12
 8007826:	603b      	str	r3, [r7, #0]
 8007828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800782c:	e0d1      	b.n	80079d2 <_svfiprintf_r+0x1d2>
 800782e:	2340      	movs	r3, #64	; 0x40
 8007830:	616b      	str	r3, [r5, #20]
 8007832:	2300      	movs	r3, #0
 8007834:	9309      	str	r3, [sp, #36]	; 0x24
 8007836:	2320      	movs	r3, #32
 8007838:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800783c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007840:	2330      	movs	r3, #48	; 0x30
 8007842:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80079ec <_svfiprintf_r+0x1ec>
 8007846:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800784a:	f04f 0901 	mov.w	r9, #1
 800784e:	4623      	mov	r3, r4
 8007850:	469a      	mov	sl, r3
 8007852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007856:	b10a      	cbz	r2, 800785c <_svfiprintf_r+0x5c>
 8007858:	2a25      	cmp	r2, #37	; 0x25
 800785a:	d1f9      	bne.n	8007850 <_svfiprintf_r+0x50>
 800785c:	ebba 0b04 	subs.w	fp, sl, r4
 8007860:	d00b      	beq.n	800787a <_svfiprintf_r+0x7a>
 8007862:	465b      	mov	r3, fp
 8007864:	4622      	mov	r2, r4
 8007866:	4629      	mov	r1, r5
 8007868:	4638      	mov	r0, r7
 800786a:	f7ff ff6d 	bl	8007748 <__ssputs_r>
 800786e:	3001      	adds	r0, #1
 8007870:	f000 80aa 	beq.w	80079c8 <_svfiprintf_r+0x1c8>
 8007874:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007876:	445a      	add	r2, fp
 8007878:	9209      	str	r2, [sp, #36]	; 0x24
 800787a:	f89a 3000 	ldrb.w	r3, [sl]
 800787e:	2b00      	cmp	r3, #0
 8007880:	f000 80a2 	beq.w	80079c8 <_svfiprintf_r+0x1c8>
 8007884:	2300      	movs	r3, #0
 8007886:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800788a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800788e:	f10a 0a01 	add.w	sl, sl, #1
 8007892:	9304      	str	r3, [sp, #16]
 8007894:	9307      	str	r3, [sp, #28]
 8007896:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800789a:	931a      	str	r3, [sp, #104]	; 0x68
 800789c:	4654      	mov	r4, sl
 800789e:	2205      	movs	r2, #5
 80078a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078a4:	4851      	ldr	r0, [pc, #324]	; (80079ec <_svfiprintf_r+0x1ec>)
 80078a6:	f7f8 fcbb 	bl	8000220 <memchr>
 80078aa:	9a04      	ldr	r2, [sp, #16]
 80078ac:	b9d8      	cbnz	r0, 80078e6 <_svfiprintf_r+0xe6>
 80078ae:	06d0      	lsls	r0, r2, #27
 80078b0:	bf44      	itt	mi
 80078b2:	2320      	movmi	r3, #32
 80078b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078b8:	0711      	lsls	r1, r2, #28
 80078ba:	bf44      	itt	mi
 80078bc:	232b      	movmi	r3, #43	; 0x2b
 80078be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078c2:	f89a 3000 	ldrb.w	r3, [sl]
 80078c6:	2b2a      	cmp	r3, #42	; 0x2a
 80078c8:	d015      	beq.n	80078f6 <_svfiprintf_r+0xf6>
 80078ca:	9a07      	ldr	r2, [sp, #28]
 80078cc:	4654      	mov	r4, sl
 80078ce:	2000      	movs	r0, #0
 80078d0:	f04f 0c0a 	mov.w	ip, #10
 80078d4:	4621      	mov	r1, r4
 80078d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078da:	3b30      	subs	r3, #48	; 0x30
 80078dc:	2b09      	cmp	r3, #9
 80078de:	d94e      	bls.n	800797e <_svfiprintf_r+0x17e>
 80078e0:	b1b0      	cbz	r0, 8007910 <_svfiprintf_r+0x110>
 80078e2:	9207      	str	r2, [sp, #28]
 80078e4:	e014      	b.n	8007910 <_svfiprintf_r+0x110>
 80078e6:	eba0 0308 	sub.w	r3, r0, r8
 80078ea:	fa09 f303 	lsl.w	r3, r9, r3
 80078ee:	4313      	orrs	r3, r2
 80078f0:	9304      	str	r3, [sp, #16]
 80078f2:	46a2      	mov	sl, r4
 80078f4:	e7d2      	b.n	800789c <_svfiprintf_r+0x9c>
 80078f6:	9b03      	ldr	r3, [sp, #12]
 80078f8:	1d19      	adds	r1, r3, #4
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	9103      	str	r1, [sp, #12]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	bfbb      	ittet	lt
 8007902:	425b      	neglt	r3, r3
 8007904:	f042 0202 	orrlt.w	r2, r2, #2
 8007908:	9307      	strge	r3, [sp, #28]
 800790a:	9307      	strlt	r3, [sp, #28]
 800790c:	bfb8      	it	lt
 800790e:	9204      	strlt	r2, [sp, #16]
 8007910:	7823      	ldrb	r3, [r4, #0]
 8007912:	2b2e      	cmp	r3, #46	; 0x2e
 8007914:	d10c      	bne.n	8007930 <_svfiprintf_r+0x130>
 8007916:	7863      	ldrb	r3, [r4, #1]
 8007918:	2b2a      	cmp	r3, #42	; 0x2a
 800791a:	d135      	bne.n	8007988 <_svfiprintf_r+0x188>
 800791c:	9b03      	ldr	r3, [sp, #12]
 800791e:	1d1a      	adds	r2, r3, #4
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	9203      	str	r2, [sp, #12]
 8007924:	2b00      	cmp	r3, #0
 8007926:	bfb8      	it	lt
 8007928:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800792c:	3402      	adds	r4, #2
 800792e:	9305      	str	r3, [sp, #20]
 8007930:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80079fc <_svfiprintf_r+0x1fc>
 8007934:	7821      	ldrb	r1, [r4, #0]
 8007936:	2203      	movs	r2, #3
 8007938:	4650      	mov	r0, sl
 800793a:	f7f8 fc71 	bl	8000220 <memchr>
 800793e:	b140      	cbz	r0, 8007952 <_svfiprintf_r+0x152>
 8007940:	2340      	movs	r3, #64	; 0x40
 8007942:	eba0 000a 	sub.w	r0, r0, sl
 8007946:	fa03 f000 	lsl.w	r0, r3, r0
 800794a:	9b04      	ldr	r3, [sp, #16]
 800794c:	4303      	orrs	r3, r0
 800794e:	3401      	adds	r4, #1
 8007950:	9304      	str	r3, [sp, #16]
 8007952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007956:	4826      	ldr	r0, [pc, #152]	; (80079f0 <_svfiprintf_r+0x1f0>)
 8007958:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800795c:	2206      	movs	r2, #6
 800795e:	f7f8 fc5f 	bl	8000220 <memchr>
 8007962:	2800      	cmp	r0, #0
 8007964:	d038      	beq.n	80079d8 <_svfiprintf_r+0x1d8>
 8007966:	4b23      	ldr	r3, [pc, #140]	; (80079f4 <_svfiprintf_r+0x1f4>)
 8007968:	bb1b      	cbnz	r3, 80079b2 <_svfiprintf_r+0x1b2>
 800796a:	9b03      	ldr	r3, [sp, #12]
 800796c:	3307      	adds	r3, #7
 800796e:	f023 0307 	bic.w	r3, r3, #7
 8007972:	3308      	adds	r3, #8
 8007974:	9303      	str	r3, [sp, #12]
 8007976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007978:	4433      	add	r3, r6
 800797a:	9309      	str	r3, [sp, #36]	; 0x24
 800797c:	e767      	b.n	800784e <_svfiprintf_r+0x4e>
 800797e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007982:	460c      	mov	r4, r1
 8007984:	2001      	movs	r0, #1
 8007986:	e7a5      	b.n	80078d4 <_svfiprintf_r+0xd4>
 8007988:	2300      	movs	r3, #0
 800798a:	3401      	adds	r4, #1
 800798c:	9305      	str	r3, [sp, #20]
 800798e:	4619      	mov	r1, r3
 8007990:	f04f 0c0a 	mov.w	ip, #10
 8007994:	4620      	mov	r0, r4
 8007996:	f810 2b01 	ldrb.w	r2, [r0], #1
 800799a:	3a30      	subs	r2, #48	; 0x30
 800799c:	2a09      	cmp	r2, #9
 800799e:	d903      	bls.n	80079a8 <_svfiprintf_r+0x1a8>
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d0c5      	beq.n	8007930 <_svfiprintf_r+0x130>
 80079a4:	9105      	str	r1, [sp, #20]
 80079a6:	e7c3      	b.n	8007930 <_svfiprintf_r+0x130>
 80079a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80079ac:	4604      	mov	r4, r0
 80079ae:	2301      	movs	r3, #1
 80079b0:	e7f0      	b.n	8007994 <_svfiprintf_r+0x194>
 80079b2:	ab03      	add	r3, sp, #12
 80079b4:	9300      	str	r3, [sp, #0]
 80079b6:	462a      	mov	r2, r5
 80079b8:	4b0f      	ldr	r3, [pc, #60]	; (80079f8 <_svfiprintf_r+0x1f8>)
 80079ba:	a904      	add	r1, sp, #16
 80079bc:	4638      	mov	r0, r7
 80079be:	f7fd ffd9 	bl	8005974 <_printf_float>
 80079c2:	1c42      	adds	r2, r0, #1
 80079c4:	4606      	mov	r6, r0
 80079c6:	d1d6      	bne.n	8007976 <_svfiprintf_r+0x176>
 80079c8:	89ab      	ldrh	r3, [r5, #12]
 80079ca:	065b      	lsls	r3, r3, #25
 80079cc:	f53f af2c 	bmi.w	8007828 <_svfiprintf_r+0x28>
 80079d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079d2:	b01d      	add	sp, #116	; 0x74
 80079d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079d8:	ab03      	add	r3, sp, #12
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	462a      	mov	r2, r5
 80079de:	4b06      	ldr	r3, [pc, #24]	; (80079f8 <_svfiprintf_r+0x1f8>)
 80079e0:	a904      	add	r1, sp, #16
 80079e2:	4638      	mov	r0, r7
 80079e4:	f7fe fa6a 	bl	8005ebc <_printf_i>
 80079e8:	e7eb      	b.n	80079c2 <_svfiprintf_r+0x1c2>
 80079ea:	bf00      	nop
 80079ec:	0800886c 	.word	0x0800886c
 80079f0:	08008876 	.word	0x08008876
 80079f4:	08005975 	.word	0x08005975
 80079f8:	08007749 	.word	0x08007749
 80079fc:	08008872 	.word	0x08008872

08007a00 <_sbrk_r>:
 8007a00:	b538      	push	{r3, r4, r5, lr}
 8007a02:	4d06      	ldr	r5, [pc, #24]	; (8007a1c <_sbrk_r+0x1c>)
 8007a04:	2300      	movs	r3, #0
 8007a06:	4604      	mov	r4, r0
 8007a08:	4608      	mov	r0, r1
 8007a0a:	602b      	str	r3, [r5, #0]
 8007a0c:	f7fa fb5a 	bl	80020c4 <_sbrk>
 8007a10:	1c43      	adds	r3, r0, #1
 8007a12:	d102      	bne.n	8007a1a <_sbrk_r+0x1a>
 8007a14:	682b      	ldr	r3, [r5, #0]
 8007a16:	b103      	cbz	r3, 8007a1a <_sbrk_r+0x1a>
 8007a18:	6023      	str	r3, [r4, #0]
 8007a1a:	bd38      	pop	{r3, r4, r5, pc}
 8007a1c:	200003b0 	.word	0x200003b0

08007a20 <__assert_func>:
 8007a20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a22:	4614      	mov	r4, r2
 8007a24:	461a      	mov	r2, r3
 8007a26:	4b09      	ldr	r3, [pc, #36]	; (8007a4c <__assert_func+0x2c>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4605      	mov	r5, r0
 8007a2c:	68d8      	ldr	r0, [r3, #12]
 8007a2e:	b14c      	cbz	r4, 8007a44 <__assert_func+0x24>
 8007a30:	4b07      	ldr	r3, [pc, #28]	; (8007a50 <__assert_func+0x30>)
 8007a32:	9100      	str	r1, [sp, #0]
 8007a34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a38:	4906      	ldr	r1, [pc, #24]	; (8007a54 <__assert_func+0x34>)
 8007a3a:	462b      	mov	r3, r5
 8007a3c:	f000 f80e 	bl	8007a5c <fiprintf>
 8007a40:	f000 faac 	bl	8007f9c <abort>
 8007a44:	4b04      	ldr	r3, [pc, #16]	; (8007a58 <__assert_func+0x38>)
 8007a46:	461c      	mov	r4, r3
 8007a48:	e7f3      	b.n	8007a32 <__assert_func+0x12>
 8007a4a:	bf00      	nop
 8007a4c:	2000000c 	.word	0x2000000c
 8007a50:	0800887d 	.word	0x0800887d
 8007a54:	0800888a 	.word	0x0800888a
 8007a58:	080088b8 	.word	0x080088b8

08007a5c <fiprintf>:
 8007a5c:	b40e      	push	{r1, r2, r3}
 8007a5e:	b503      	push	{r0, r1, lr}
 8007a60:	4601      	mov	r1, r0
 8007a62:	ab03      	add	r3, sp, #12
 8007a64:	4805      	ldr	r0, [pc, #20]	; (8007a7c <fiprintf+0x20>)
 8007a66:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a6a:	6800      	ldr	r0, [r0, #0]
 8007a6c:	9301      	str	r3, [sp, #4]
 8007a6e:	f000 f897 	bl	8007ba0 <_vfiprintf_r>
 8007a72:	b002      	add	sp, #8
 8007a74:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a78:	b003      	add	sp, #12
 8007a7a:	4770      	bx	lr
 8007a7c:	2000000c 	.word	0x2000000c

08007a80 <__ascii_mbtowc>:
 8007a80:	b082      	sub	sp, #8
 8007a82:	b901      	cbnz	r1, 8007a86 <__ascii_mbtowc+0x6>
 8007a84:	a901      	add	r1, sp, #4
 8007a86:	b142      	cbz	r2, 8007a9a <__ascii_mbtowc+0x1a>
 8007a88:	b14b      	cbz	r3, 8007a9e <__ascii_mbtowc+0x1e>
 8007a8a:	7813      	ldrb	r3, [r2, #0]
 8007a8c:	600b      	str	r3, [r1, #0]
 8007a8e:	7812      	ldrb	r2, [r2, #0]
 8007a90:	1e10      	subs	r0, r2, #0
 8007a92:	bf18      	it	ne
 8007a94:	2001      	movne	r0, #1
 8007a96:	b002      	add	sp, #8
 8007a98:	4770      	bx	lr
 8007a9a:	4610      	mov	r0, r2
 8007a9c:	e7fb      	b.n	8007a96 <__ascii_mbtowc+0x16>
 8007a9e:	f06f 0001 	mvn.w	r0, #1
 8007aa2:	e7f8      	b.n	8007a96 <__ascii_mbtowc+0x16>

08007aa4 <memmove>:
 8007aa4:	4288      	cmp	r0, r1
 8007aa6:	b510      	push	{r4, lr}
 8007aa8:	eb01 0402 	add.w	r4, r1, r2
 8007aac:	d902      	bls.n	8007ab4 <memmove+0x10>
 8007aae:	4284      	cmp	r4, r0
 8007ab0:	4623      	mov	r3, r4
 8007ab2:	d807      	bhi.n	8007ac4 <memmove+0x20>
 8007ab4:	1e43      	subs	r3, r0, #1
 8007ab6:	42a1      	cmp	r1, r4
 8007ab8:	d008      	beq.n	8007acc <memmove+0x28>
 8007aba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007abe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ac2:	e7f8      	b.n	8007ab6 <memmove+0x12>
 8007ac4:	4402      	add	r2, r0
 8007ac6:	4601      	mov	r1, r0
 8007ac8:	428a      	cmp	r2, r1
 8007aca:	d100      	bne.n	8007ace <memmove+0x2a>
 8007acc:	bd10      	pop	{r4, pc}
 8007ace:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ad2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ad6:	e7f7      	b.n	8007ac8 <memmove+0x24>

08007ad8 <__malloc_lock>:
 8007ad8:	4801      	ldr	r0, [pc, #4]	; (8007ae0 <__malloc_lock+0x8>)
 8007ada:	f000 bc1f 	b.w	800831c <__retarget_lock_acquire_recursive>
 8007ade:	bf00      	nop
 8007ae0:	200003b4 	.word	0x200003b4

08007ae4 <__malloc_unlock>:
 8007ae4:	4801      	ldr	r0, [pc, #4]	; (8007aec <__malloc_unlock+0x8>)
 8007ae6:	f000 bc1a 	b.w	800831e <__retarget_lock_release_recursive>
 8007aea:	bf00      	nop
 8007aec:	200003b4 	.word	0x200003b4

08007af0 <_realloc_r>:
 8007af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007af4:	4680      	mov	r8, r0
 8007af6:	4614      	mov	r4, r2
 8007af8:	460e      	mov	r6, r1
 8007afa:	b921      	cbnz	r1, 8007b06 <_realloc_r+0x16>
 8007afc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b00:	4611      	mov	r1, r2
 8007b02:	f7ff bdad 	b.w	8007660 <_malloc_r>
 8007b06:	b92a      	cbnz	r2, 8007b14 <_realloc_r+0x24>
 8007b08:	f7ff fd3e 	bl	8007588 <_free_r>
 8007b0c:	4625      	mov	r5, r4
 8007b0e:	4628      	mov	r0, r5
 8007b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b14:	f000 fc6a 	bl	80083ec <_malloc_usable_size_r>
 8007b18:	4284      	cmp	r4, r0
 8007b1a:	4607      	mov	r7, r0
 8007b1c:	d802      	bhi.n	8007b24 <_realloc_r+0x34>
 8007b1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b22:	d812      	bhi.n	8007b4a <_realloc_r+0x5a>
 8007b24:	4621      	mov	r1, r4
 8007b26:	4640      	mov	r0, r8
 8007b28:	f7ff fd9a 	bl	8007660 <_malloc_r>
 8007b2c:	4605      	mov	r5, r0
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	d0ed      	beq.n	8007b0e <_realloc_r+0x1e>
 8007b32:	42bc      	cmp	r4, r7
 8007b34:	4622      	mov	r2, r4
 8007b36:	4631      	mov	r1, r6
 8007b38:	bf28      	it	cs
 8007b3a:	463a      	movcs	r2, r7
 8007b3c:	f7fd fe64 	bl	8005808 <memcpy>
 8007b40:	4631      	mov	r1, r6
 8007b42:	4640      	mov	r0, r8
 8007b44:	f7ff fd20 	bl	8007588 <_free_r>
 8007b48:	e7e1      	b.n	8007b0e <_realloc_r+0x1e>
 8007b4a:	4635      	mov	r5, r6
 8007b4c:	e7df      	b.n	8007b0e <_realloc_r+0x1e>

08007b4e <__sfputc_r>:
 8007b4e:	6893      	ldr	r3, [r2, #8]
 8007b50:	3b01      	subs	r3, #1
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	b410      	push	{r4}
 8007b56:	6093      	str	r3, [r2, #8]
 8007b58:	da08      	bge.n	8007b6c <__sfputc_r+0x1e>
 8007b5a:	6994      	ldr	r4, [r2, #24]
 8007b5c:	42a3      	cmp	r3, r4
 8007b5e:	db01      	blt.n	8007b64 <__sfputc_r+0x16>
 8007b60:	290a      	cmp	r1, #10
 8007b62:	d103      	bne.n	8007b6c <__sfputc_r+0x1e>
 8007b64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b68:	f000 b94a 	b.w	8007e00 <__swbuf_r>
 8007b6c:	6813      	ldr	r3, [r2, #0]
 8007b6e:	1c58      	adds	r0, r3, #1
 8007b70:	6010      	str	r0, [r2, #0]
 8007b72:	7019      	strb	r1, [r3, #0]
 8007b74:	4608      	mov	r0, r1
 8007b76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <__sfputs_r>:
 8007b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7e:	4606      	mov	r6, r0
 8007b80:	460f      	mov	r7, r1
 8007b82:	4614      	mov	r4, r2
 8007b84:	18d5      	adds	r5, r2, r3
 8007b86:	42ac      	cmp	r4, r5
 8007b88:	d101      	bne.n	8007b8e <__sfputs_r+0x12>
 8007b8a:	2000      	movs	r0, #0
 8007b8c:	e007      	b.n	8007b9e <__sfputs_r+0x22>
 8007b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b92:	463a      	mov	r2, r7
 8007b94:	4630      	mov	r0, r6
 8007b96:	f7ff ffda 	bl	8007b4e <__sfputc_r>
 8007b9a:	1c43      	adds	r3, r0, #1
 8007b9c:	d1f3      	bne.n	8007b86 <__sfputs_r+0xa>
 8007b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ba0 <_vfiprintf_r>:
 8007ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba4:	460d      	mov	r5, r1
 8007ba6:	b09d      	sub	sp, #116	; 0x74
 8007ba8:	4614      	mov	r4, r2
 8007baa:	4698      	mov	r8, r3
 8007bac:	4606      	mov	r6, r0
 8007bae:	b118      	cbz	r0, 8007bb8 <_vfiprintf_r+0x18>
 8007bb0:	6983      	ldr	r3, [r0, #24]
 8007bb2:	b90b      	cbnz	r3, 8007bb8 <_vfiprintf_r+0x18>
 8007bb4:	f000 fb14 	bl	80081e0 <__sinit>
 8007bb8:	4b89      	ldr	r3, [pc, #548]	; (8007de0 <_vfiprintf_r+0x240>)
 8007bba:	429d      	cmp	r5, r3
 8007bbc:	d11b      	bne.n	8007bf6 <_vfiprintf_r+0x56>
 8007bbe:	6875      	ldr	r5, [r6, #4]
 8007bc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bc2:	07d9      	lsls	r1, r3, #31
 8007bc4:	d405      	bmi.n	8007bd2 <_vfiprintf_r+0x32>
 8007bc6:	89ab      	ldrh	r3, [r5, #12]
 8007bc8:	059a      	lsls	r2, r3, #22
 8007bca:	d402      	bmi.n	8007bd2 <_vfiprintf_r+0x32>
 8007bcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bce:	f000 fba5 	bl	800831c <__retarget_lock_acquire_recursive>
 8007bd2:	89ab      	ldrh	r3, [r5, #12]
 8007bd4:	071b      	lsls	r3, r3, #28
 8007bd6:	d501      	bpl.n	8007bdc <_vfiprintf_r+0x3c>
 8007bd8:	692b      	ldr	r3, [r5, #16]
 8007bda:	b9eb      	cbnz	r3, 8007c18 <_vfiprintf_r+0x78>
 8007bdc:	4629      	mov	r1, r5
 8007bde:	4630      	mov	r0, r6
 8007be0:	f000 f96e 	bl	8007ec0 <__swsetup_r>
 8007be4:	b1c0      	cbz	r0, 8007c18 <_vfiprintf_r+0x78>
 8007be6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007be8:	07dc      	lsls	r4, r3, #31
 8007bea:	d50e      	bpl.n	8007c0a <_vfiprintf_r+0x6a>
 8007bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bf0:	b01d      	add	sp, #116	; 0x74
 8007bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bf6:	4b7b      	ldr	r3, [pc, #492]	; (8007de4 <_vfiprintf_r+0x244>)
 8007bf8:	429d      	cmp	r5, r3
 8007bfa:	d101      	bne.n	8007c00 <_vfiprintf_r+0x60>
 8007bfc:	68b5      	ldr	r5, [r6, #8]
 8007bfe:	e7df      	b.n	8007bc0 <_vfiprintf_r+0x20>
 8007c00:	4b79      	ldr	r3, [pc, #484]	; (8007de8 <_vfiprintf_r+0x248>)
 8007c02:	429d      	cmp	r5, r3
 8007c04:	bf08      	it	eq
 8007c06:	68f5      	ldreq	r5, [r6, #12]
 8007c08:	e7da      	b.n	8007bc0 <_vfiprintf_r+0x20>
 8007c0a:	89ab      	ldrh	r3, [r5, #12]
 8007c0c:	0598      	lsls	r0, r3, #22
 8007c0e:	d4ed      	bmi.n	8007bec <_vfiprintf_r+0x4c>
 8007c10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c12:	f000 fb84 	bl	800831e <__retarget_lock_release_recursive>
 8007c16:	e7e9      	b.n	8007bec <_vfiprintf_r+0x4c>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c1c:	2320      	movs	r3, #32
 8007c1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c22:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c26:	2330      	movs	r3, #48	; 0x30
 8007c28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007dec <_vfiprintf_r+0x24c>
 8007c2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c30:	f04f 0901 	mov.w	r9, #1
 8007c34:	4623      	mov	r3, r4
 8007c36:	469a      	mov	sl, r3
 8007c38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c3c:	b10a      	cbz	r2, 8007c42 <_vfiprintf_r+0xa2>
 8007c3e:	2a25      	cmp	r2, #37	; 0x25
 8007c40:	d1f9      	bne.n	8007c36 <_vfiprintf_r+0x96>
 8007c42:	ebba 0b04 	subs.w	fp, sl, r4
 8007c46:	d00b      	beq.n	8007c60 <_vfiprintf_r+0xc0>
 8007c48:	465b      	mov	r3, fp
 8007c4a:	4622      	mov	r2, r4
 8007c4c:	4629      	mov	r1, r5
 8007c4e:	4630      	mov	r0, r6
 8007c50:	f7ff ff94 	bl	8007b7c <__sfputs_r>
 8007c54:	3001      	adds	r0, #1
 8007c56:	f000 80aa 	beq.w	8007dae <_vfiprintf_r+0x20e>
 8007c5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c5c:	445a      	add	r2, fp
 8007c5e:	9209      	str	r2, [sp, #36]	; 0x24
 8007c60:	f89a 3000 	ldrb.w	r3, [sl]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 80a2 	beq.w	8007dae <_vfiprintf_r+0x20e>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c74:	f10a 0a01 	add.w	sl, sl, #1
 8007c78:	9304      	str	r3, [sp, #16]
 8007c7a:	9307      	str	r3, [sp, #28]
 8007c7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c80:	931a      	str	r3, [sp, #104]	; 0x68
 8007c82:	4654      	mov	r4, sl
 8007c84:	2205      	movs	r2, #5
 8007c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c8a:	4858      	ldr	r0, [pc, #352]	; (8007dec <_vfiprintf_r+0x24c>)
 8007c8c:	f7f8 fac8 	bl	8000220 <memchr>
 8007c90:	9a04      	ldr	r2, [sp, #16]
 8007c92:	b9d8      	cbnz	r0, 8007ccc <_vfiprintf_r+0x12c>
 8007c94:	06d1      	lsls	r1, r2, #27
 8007c96:	bf44      	itt	mi
 8007c98:	2320      	movmi	r3, #32
 8007c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c9e:	0713      	lsls	r3, r2, #28
 8007ca0:	bf44      	itt	mi
 8007ca2:	232b      	movmi	r3, #43	; 0x2b
 8007ca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8007cac:	2b2a      	cmp	r3, #42	; 0x2a
 8007cae:	d015      	beq.n	8007cdc <_vfiprintf_r+0x13c>
 8007cb0:	9a07      	ldr	r2, [sp, #28]
 8007cb2:	4654      	mov	r4, sl
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	f04f 0c0a 	mov.w	ip, #10
 8007cba:	4621      	mov	r1, r4
 8007cbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cc0:	3b30      	subs	r3, #48	; 0x30
 8007cc2:	2b09      	cmp	r3, #9
 8007cc4:	d94e      	bls.n	8007d64 <_vfiprintf_r+0x1c4>
 8007cc6:	b1b0      	cbz	r0, 8007cf6 <_vfiprintf_r+0x156>
 8007cc8:	9207      	str	r2, [sp, #28]
 8007cca:	e014      	b.n	8007cf6 <_vfiprintf_r+0x156>
 8007ccc:	eba0 0308 	sub.w	r3, r0, r8
 8007cd0:	fa09 f303 	lsl.w	r3, r9, r3
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	9304      	str	r3, [sp, #16]
 8007cd8:	46a2      	mov	sl, r4
 8007cda:	e7d2      	b.n	8007c82 <_vfiprintf_r+0xe2>
 8007cdc:	9b03      	ldr	r3, [sp, #12]
 8007cde:	1d19      	adds	r1, r3, #4
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	9103      	str	r1, [sp, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	bfbb      	ittet	lt
 8007ce8:	425b      	neglt	r3, r3
 8007cea:	f042 0202 	orrlt.w	r2, r2, #2
 8007cee:	9307      	strge	r3, [sp, #28]
 8007cf0:	9307      	strlt	r3, [sp, #28]
 8007cf2:	bfb8      	it	lt
 8007cf4:	9204      	strlt	r2, [sp, #16]
 8007cf6:	7823      	ldrb	r3, [r4, #0]
 8007cf8:	2b2e      	cmp	r3, #46	; 0x2e
 8007cfa:	d10c      	bne.n	8007d16 <_vfiprintf_r+0x176>
 8007cfc:	7863      	ldrb	r3, [r4, #1]
 8007cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8007d00:	d135      	bne.n	8007d6e <_vfiprintf_r+0x1ce>
 8007d02:	9b03      	ldr	r3, [sp, #12]
 8007d04:	1d1a      	adds	r2, r3, #4
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	9203      	str	r2, [sp, #12]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	bfb8      	it	lt
 8007d0e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007d12:	3402      	adds	r4, #2
 8007d14:	9305      	str	r3, [sp, #20]
 8007d16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007dfc <_vfiprintf_r+0x25c>
 8007d1a:	7821      	ldrb	r1, [r4, #0]
 8007d1c:	2203      	movs	r2, #3
 8007d1e:	4650      	mov	r0, sl
 8007d20:	f7f8 fa7e 	bl	8000220 <memchr>
 8007d24:	b140      	cbz	r0, 8007d38 <_vfiprintf_r+0x198>
 8007d26:	2340      	movs	r3, #64	; 0x40
 8007d28:	eba0 000a 	sub.w	r0, r0, sl
 8007d2c:	fa03 f000 	lsl.w	r0, r3, r0
 8007d30:	9b04      	ldr	r3, [sp, #16]
 8007d32:	4303      	orrs	r3, r0
 8007d34:	3401      	adds	r4, #1
 8007d36:	9304      	str	r3, [sp, #16]
 8007d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d3c:	482c      	ldr	r0, [pc, #176]	; (8007df0 <_vfiprintf_r+0x250>)
 8007d3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d42:	2206      	movs	r2, #6
 8007d44:	f7f8 fa6c 	bl	8000220 <memchr>
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	d03f      	beq.n	8007dcc <_vfiprintf_r+0x22c>
 8007d4c:	4b29      	ldr	r3, [pc, #164]	; (8007df4 <_vfiprintf_r+0x254>)
 8007d4e:	bb1b      	cbnz	r3, 8007d98 <_vfiprintf_r+0x1f8>
 8007d50:	9b03      	ldr	r3, [sp, #12]
 8007d52:	3307      	adds	r3, #7
 8007d54:	f023 0307 	bic.w	r3, r3, #7
 8007d58:	3308      	adds	r3, #8
 8007d5a:	9303      	str	r3, [sp, #12]
 8007d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d5e:	443b      	add	r3, r7
 8007d60:	9309      	str	r3, [sp, #36]	; 0x24
 8007d62:	e767      	b.n	8007c34 <_vfiprintf_r+0x94>
 8007d64:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d68:	460c      	mov	r4, r1
 8007d6a:	2001      	movs	r0, #1
 8007d6c:	e7a5      	b.n	8007cba <_vfiprintf_r+0x11a>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	3401      	adds	r4, #1
 8007d72:	9305      	str	r3, [sp, #20]
 8007d74:	4619      	mov	r1, r3
 8007d76:	f04f 0c0a 	mov.w	ip, #10
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d80:	3a30      	subs	r2, #48	; 0x30
 8007d82:	2a09      	cmp	r2, #9
 8007d84:	d903      	bls.n	8007d8e <_vfiprintf_r+0x1ee>
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d0c5      	beq.n	8007d16 <_vfiprintf_r+0x176>
 8007d8a:	9105      	str	r1, [sp, #20]
 8007d8c:	e7c3      	b.n	8007d16 <_vfiprintf_r+0x176>
 8007d8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d92:	4604      	mov	r4, r0
 8007d94:	2301      	movs	r3, #1
 8007d96:	e7f0      	b.n	8007d7a <_vfiprintf_r+0x1da>
 8007d98:	ab03      	add	r3, sp, #12
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	462a      	mov	r2, r5
 8007d9e:	4b16      	ldr	r3, [pc, #88]	; (8007df8 <_vfiprintf_r+0x258>)
 8007da0:	a904      	add	r1, sp, #16
 8007da2:	4630      	mov	r0, r6
 8007da4:	f7fd fde6 	bl	8005974 <_printf_float>
 8007da8:	4607      	mov	r7, r0
 8007daa:	1c78      	adds	r0, r7, #1
 8007dac:	d1d6      	bne.n	8007d5c <_vfiprintf_r+0x1bc>
 8007dae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007db0:	07d9      	lsls	r1, r3, #31
 8007db2:	d405      	bmi.n	8007dc0 <_vfiprintf_r+0x220>
 8007db4:	89ab      	ldrh	r3, [r5, #12]
 8007db6:	059a      	lsls	r2, r3, #22
 8007db8:	d402      	bmi.n	8007dc0 <_vfiprintf_r+0x220>
 8007dba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dbc:	f000 faaf 	bl	800831e <__retarget_lock_release_recursive>
 8007dc0:	89ab      	ldrh	r3, [r5, #12]
 8007dc2:	065b      	lsls	r3, r3, #25
 8007dc4:	f53f af12 	bmi.w	8007bec <_vfiprintf_r+0x4c>
 8007dc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dca:	e711      	b.n	8007bf0 <_vfiprintf_r+0x50>
 8007dcc:	ab03      	add	r3, sp, #12
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	462a      	mov	r2, r5
 8007dd2:	4b09      	ldr	r3, [pc, #36]	; (8007df8 <_vfiprintf_r+0x258>)
 8007dd4:	a904      	add	r1, sp, #16
 8007dd6:	4630      	mov	r0, r6
 8007dd8:	f7fe f870 	bl	8005ebc <_printf_i>
 8007ddc:	e7e4      	b.n	8007da8 <_vfiprintf_r+0x208>
 8007dde:	bf00      	nop
 8007de0:	080089e4 	.word	0x080089e4
 8007de4:	08008a04 	.word	0x08008a04
 8007de8:	080089c4 	.word	0x080089c4
 8007dec:	0800886c 	.word	0x0800886c
 8007df0:	08008876 	.word	0x08008876
 8007df4:	08005975 	.word	0x08005975
 8007df8:	08007b7d 	.word	0x08007b7d
 8007dfc:	08008872 	.word	0x08008872

08007e00 <__swbuf_r>:
 8007e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e02:	460e      	mov	r6, r1
 8007e04:	4614      	mov	r4, r2
 8007e06:	4605      	mov	r5, r0
 8007e08:	b118      	cbz	r0, 8007e12 <__swbuf_r+0x12>
 8007e0a:	6983      	ldr	r3, [r0, #24]
 8007e0c:	b90b      	cbnz	r3, 8007e12 <__swbuf_r+0x12>
 8007e0e:	f000 f9e7 	bl	80081e0 <__sinit>
 8007e12:	4b21      	ldr	r3, [pc, #132]	; (8007e98 <__swbuf_r+0x98>)
 8007e14:	429c      	cmp	r4, r3
 8007e16:	d12b      	bne.n	8007e70 <__swbuf_r+0x70>
 8007e18:	686c      	ldr	r4, [r5, #4]
 8007e1a:	69a3      	ldr	r3, [r4, #24]
 8007e1c:	60a3      	str	r3, [r4, #8]
 8007e1e:	89a3      	ldrh	r3, [r4, #12]
 8007e20:	071a      	lsls	r2, r3, #28
 8007e22:	d52f      	bpl.n	8007e84 <__swbuf_r+0x84>
 8007e24:	6923      	ldr	r3, [r4, #16]
 8007e26:	b36b      	cbz	r3, 8007e84 <__swbuf_r+0x84>
 8007e28:	6923      	ldr	r3, [r4, #16]
 8007e2a:	6820      	ldr	r0, [r4, #0]
 8007e2c:	1ac0      	subs	r0, r0, r3
 8007e2e:	6963      	ldr	r3, [r4, #20]
 8007e30:	b2f6      	uxtb	r6, r6
 8007e32:	4283      	cmp	r3, r0
 8007e34:	4637      	mov	r7, r6
 8007e36:	dc04      	bgt.n	8007e42 <__swbuf_r+0x42>
 8007e38:	4621      	mov	r1, r4
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	f000 f93c 	bl	80080b8 <_fflush_r>
 8007e40:	bb30      	cbnz	r0, 8007e90 <__swbuf_r+0x90>
 8007e42:	68a3      	ldr	r3, [r4, #8]
 8007e44:	3b01      	subs	r3, #1
 8007e46:	60a3      	str	r3, [r4, #8]
 8007e48:	6823      	ldr	r3, [r4, #0]
 8007e4a:	1c5a      	adds	r2, r3, #1
 8007e4c:	6022      	str	r2, [r4, #0]
 8007e4e:	701e      	strb	r6, [r3, #0]
 8007e50:	6963      	ldr	r3, [r4, #20]
 8007e52:	3001      	adds	r0, #1
 8007e54:	4283      	cmp	r3, r0
 8007e56:	d004      	beq.n	8007e62 <__swbuf_r+0x62>
 8007e58:	89a3      	ldrh	r3, [r4, #12]
 8007e5a:	07db      	lsls	r3, r3, #31
 8007e5c:	d506      	bpl.n	8007e6c <__swbuf_r+0x6c>
 8007e5e:	2e0a      	cmp	r6, #10
 8007e60:	d104      	bne.n	8007e6c <__swbuf_r+0x6c>
 8007e62:	4621      	mov	r1, r4
 8007e64:	4628      	mov	r0, r5
 8007e66:	f000 f927 	bl	80080b8 <_fflush_r>
 8007e6a:	b988      	cbnz	r0, 8007e90 <__swbuf_r+0x90>
 8007e6c:	4638      	mov	r0, r7
 8007e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e70:	4b0a      	ldr	r3, [pc, #40]	; (8007e9c <__swbuf_r+0x9c>)
 8007e72:	429c      	cmp	r4, r3
 8007e74:	d101      	bne.n	8007e7a <__swbuf_r+0x7a>
 8007e76:	68ac      	ldr	r4, [r5, #8]
 8007e78:	e7cf      	b.n	8007e1a <__swbuf_r+0x1a>
 8007e7a:	4b09      	ldr	r3, [pc, #36]	; (8007ea0 <__swbuf_r+0xa0>)
 8007e7c:	429c      	cmp	r4, r3
 8007e7e:	bf08      	it	eq
 8007e80:	68ec      	ldreq	r4, [r5, #12]
 8007e82:	e7ca      	b.n	8007e1a <__swbuf_r+0x1a>
 8007e84:	4621      	mov	r1, r4
 8007e86:	4628      	mov	r0, r5
 8007e88:	f000 f81a 	bl	8007ec0 <__swsetup_r>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d0cb      	beq.n	8007e28 <__swbuf_r+0x28>
 8007e90:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007e94:	e7ea      	b.n	8007e6c <__swbuf_r+0x6c>
 8007e96:	bf00      	nop
 8007e98:	080089e4 	.word	0x080089e4
 8007e9c:	08008a04 	.word	0x08008a04
 8007ea0:	080089c4 	.word	0x080089c4

08007ea4 <__ascii_wctomb>:
 8007ea4:	b149      	cbz	r1, 8007eba <__ascii_wctomb+0x16>
 8007ea6:	2aff      	cmp	r2, #255	; 0xff
 8007ea8:	bf85      	ittet	hi
 8007eaa:	238a      	movhi	r3, #138	; 0x8a
 8007eac:	6003      	strhi	r3, [r0, #0]
 8007eae:	700a      	strbls	r2, [r1, #0]
 8007eb0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007eb4:	bf98      	it	ls
 8007eb6:	2001      	movls	r0, #1
 8007eb8:	4770      	bx	lr
 8007eba:	4608      	mov	r0, r1
 8007ebc:	4770      	bx	lr
	...

08007ec0 <__swsetup_r>:
 8007ec0:	4b32      	ldr	r3, [pc, #200]	; (8007f8c <__swsetup_r+0xcc>)
 8007ec2:	b570      	push	{r4, r5, r6, lr}
 8007ec4:	681d      	ldr	r5, [r3, #0]
 8007ec6:	4606      	mov	r6, r0
 8007ec8:	460c      	mov	r4, r1
 8007eca:	b125      	cbz	r5, 8007ed6 <__swsetup_r+0x16>
 8007ecc:	69ab      	ldr	r3, [r5, #24]
 8007ece:	b913      	cbnz	r3, 8007ed6 <__swsetup_r+0x16>
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	f000 f985 	bl	80081e0 <__sinit>
 8007ed6:	4b2e      	ldr	r3, [pc, #184]	; (8007f90 <__swsetup_r+0xd0>)
 8007ed8:	429c      	cmp	r4, r3
 8007eda:	d10f      	bne.n	8007efc <__swsetup_r+0x3c>
 8007edc:	686c      	ldr	r4, [r5, #4]
 8007ede:	89a3      	ldrh	r3, [r4, #12]
 8007ee0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ee4:	0719      	lsls	r1, r3, #28
 8007ee6:	d42c      	bmi.n	8007f42 <__swsetup_r+0x82>
 8007ee8:	06dd      	lsls	r5, r3, #27
 8007eea:	d411      	bmi.n	8007f10 <__swsetup_r+0x50>
 8007eec:	2309      	movs	r3, #9
 8007eee:	6033      	str	r3, [r6, #0]
 8007ef0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ef4:	81a3      	strh	r3, [r4, #12]
 8007ef6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007efa:	e03e      	b.n	8007f7a <__swsetup_r+0xba>
 8007efc:	4b25      	ldr	r3, [pc, #148]	; (8007f94 <__swsetup_r+0xd4>)
 8007efe:	429c      	cmp	r4, r3
 8007f00:	d101      	bne.n	8007f06 <__swsetup_r+0x46>
 8007f02:	68ac      	ldr	r4, [r5, #8]
 8007f04:	e7eb      	b.n	8007ede <__swsetup_r+0x1e>
 8007f06:	4b24      	ldr	r3, [pc, #144]	; (8007f98 <__swsetup_r+0xd8>)
 8007f08:	429c      	cmp	r4, r3
 8007f0a:	bf08      	it	eq
 8007f0c:	68ec      	ldreq	r4, [r5, #12]
 8007f0e:	e7e6      	b.n	8007ede <__swsetup_r+0x1e>
 8007f10:	0758      	lsls	r0, r3, #29
 8007f12:	d512      	bpl.n	8007f3a <__swsetup_r+0x7a>
 8007f14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f16:	b141      	cbz	r1, 8007f2a <__swsetup_r+0x6a>
 8007f18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f1c:	4299      	cmp	r1, r3
 8007f1e:	d002      	beq.n	8007f26 <__swsetup_r+0x66>
 8007f20:	4630      	mov	r0, r6
 8007f22:	f7ff fb31 	bl	8007588 <_free_r>
 8007f26:	2300      	movs	r3, #0
 8007f28:	6363      	str	r3, [r4, #52]	; 0x34
 8007f2a:	89a3      	ldrh	r3, [r4, #12]
 8007f2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f30:	81a3      	strh	r3, [r4, #12]
 8007f32:	2300      	movs	r3, #0
 8007f34:	6063      	str	r3, [r4, #4]
 8007f36:	6923      	ldr	r3, [r4, #16]
 8007f38:	6023      	str	r3, [r4, #0]
 8007f3a:	89a3      	ldrh	r3, [r4, #12]
 8007f3c:	f043 0308 	orr.w	r3, r3, #8
 8007f40:	81a3      	strh	r3, [r4, #12]
 8007f42:	6923      	ldr	r3, [r4, #16]
 8007f44:	b94b      	cbnz	r3, 8007f5a <__swsetup_r+0x9a>
 8007f46:	89a3      	ldrh	r3, [r4, #12]
 8007f48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f50:	d003      	beq.n	8007f5a <__swsetup_r+0x9a>
 8007f52:	4621      	mov	r1, r4
 8007f54:	4630      	mov	r0, r6
 8007f56:	f000 fa09 	bl	800836c <__smakebuf_r>
 8007f5a:	89a0      	ldrh	r0, [r4, #12]
 8007f5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f60:	f010 0301 	ands.w	r3, r0, #1
 8007f64:	d00a      	beq.n	8007f7c <__swsetup_r+0xbc>
 8007f66:	2300      	movs	r3, #0
 8007f68:	60a3      	str	r3, [r4, #8]
 8007f6a:	6963      	ldr	r3, [r4, #20]
 8007f6c:	425b      	negs	r3, r3
 8007f6e:	61a3      	str	r3, [r4, #24]
 8007f70:	6923      	ldr	r3, [r4, #16]
 8007f72:	b943      	cbnz	r3, 8007f86 <__swsetup_r+0xc6>
 8007f74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f78:	d1ba      	bne.n	8007ef0 <__swsetup_r+0x30>
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}
 8007f7c:	0781      	lsls	r1, r0, #30
 8007f7e:	bf58      	it	pl
 8007f80:	6963      	ldrpl	r3, [r4, #20]
 8007f82:	60a3      	str	r3, [r4, #8]
 8007f84:	e7f4      	b.n	8007f70 <__swsetup_r+0xb0>
 8007f86:	2000      	movs	r0, #0
 8007f88:	e7f7      	b.n	8007f7a <__swsetup_r+0xba>
 8007f8a:	bf00      	nop
 8007f8c:	2000000c 	.word	0x2000000c
 8007f90:	080089e4 	.word	0x080089e4
 8007f94:	08008a04 	.word	0x08008a04
 8007f98:	080089c4 	.word	0x080089c4

08007f9c <abort>:
 8007f9c:	b508      	push	{r3, lr}
 8007f9e:	2006      	movs	r0, #6
 8007fa0:	f000 fa54 	bl	800844c <raise>
 8007fa4:	2001      	movs	r0, #1
 8007fa6:	f7fa f815 	bl	8001fd4 <_exit>
	...

08007fac <__sflush_r>:
 8007fac:	898a      	ldrh	r2, [r1, #12]
 8007fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb2:	4605      	mov	r5, r0
 8007fb4:	0710      	lsls	r0, r2, #28
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	d458      	bmi.n	800806c <__sflush_r+0xc0>
 8007fba:	684b      	ldr	r3, [r1, #4]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	dc05      	bgt.n	8007fcc <__sflush_r+0x20>
 8007fc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	dc02      	bgt.n	8007fcc <__sflush_r+0x20>
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fce:	2e00      	cmp	r6, #0
 8007fd0:	d0f9      	beq.n	8007fc6 <__sflush_r+0x1a>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007fd8:	682f      	ldr	r7, [r5, #0]
 8007fda:	602b      	str	r3, [r5, #0]
 8007fdc:	d032      	beq.n	8008044 <__sflush_r+0x98>
 8007fde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007fe0:	89a3      	ldrh	r3, [r4, #12]
 8007fe2:	075a      	lsls	r2, r3, #29
 8007fe4:	d505      	bpl.n	8007ff2 <__sflush_r+0x46>
 8007fe6:	6863      	ldr	r3, [r4, #4]
 8007fe8:	1ac0      	subs	r0, r0, r3
 8007fea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007fec:	b10b      	cbz	r3, 8007ff2 <__sflush_r+0x46>
 8007fee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ff0:	1ac0      	subs	r0, r0, r3
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ff8:	6a21      	ldr	r1, [r4, #32]
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	47b0      	blx	r6
 8007ffe:	1c43      	adds	r3, r0, #1
 8008000:	89a3      	ldrh	r3, [r4, #12]
 8008002:	d106      	bne.n	8008012 <__sflush_r+0x66>
 8008004:	6829      	ldr	r1, [r5, #0]
 8008006:	291d      	cmp	r1, #29
 8008008:	d82c      	bhi.n	8008064 <__sflush_r+0xb8>
 800800a:	4a2a      	ldr	r2, [pc, #168]	; (80080b4 <__sflush_r+0x108>)
 800800c:	40ca      	lsrs	r2, r1
 800800e:	07d6      	lsls	r6, r2, #31
 8008010:	d528      	bpl.n	8008064 <__sflush_r+0xb8>
 8008012:	2200      	movs	r2, #0
 8008014:	6062      	str	r2, [r4, #4]
 8008016:	04d9      	lsls	r1, r3, #19
 8008018:	6922      	ldr	r2, [r4, #16]
 800801a:	6022      	str	r2, [r4, #0]
 800801c:	d504      	bpl.n	8008028 <__sflush_r+0x7c>
 800801e:	1c42      	adds	r2, r0, #1
 8008020:	d101      	bne.n	8008026 <__sflush_r+0x7a>
 8008022:	682b      	ldr	r3, [r5, #0]
 8008024:	b903      	cbnz	r3, 8008028 <__sflush_r+0x7c>
 8008026:	6560      	str	r0, [r4, #84]	; 0x54
 8008028:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800802a:	602f      	str	r7, [r5, #0]
 800802c:	2900      	cmp	r1, #0
 800802e:	d0ca      	beq.n	8007fc6 <__sflush_r+0x1a>
 8008030:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008034:	4299      	cmp	r1, r3
 8008036:	d002      	beq.n	800803e <__sflush_r+0x92>
 8008038:	4628      	mov	r0, r5
 800803a:	f7ff faa5 	bl	8007588 <_free_r>
 800803e:	2000      	movs	r0, #0
 8008040:	6360      	str	r0, [r4, #52]	; 0x34
 8008042:	e7c1      	b.n	8007fc8 <__sflush_r+0x1c>
 8008044:	6a21      	ldr	r1, [r4, #32]
 8008046:	2301      	movs	r3, #1
 8008048:	4628      	mov	r0, r5
 800804a:	47b0      	blx	r6
 800804c:	1c41      	adds	r1, r0, #1
 800804e:	d1c7      	bne.n	8007fe0 <__sflush_r+0x34>
 8008050:	682b      	ldr	r3, [r5, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d0c4      	beq.n	8007fe0 <__sflush_r+0x34>
 8008056:	2b1d      	cmp	r3, #29
 8008058:	d001      	beq.n	800805e <__sflush_r+0xb2>
 800805a:	2b16      	cmp	r3, #22
 800805c:	d101      	bne.n	8008062 <__sflush_r+0xb6>
 800805e:	602f      	str	r7, [r5, #0]
 8008060:	e7b1      	b.n	8007fc6 <__sflush_r+0x1a>
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008068:	81a3      	strh	r3, [r4, #12]
 800806a:	e7ad      	b.n	8007fc8 <__sflush_r+0x1c>
 800806c:	690f      	ldr	r7, [r1, #16]
 800806e:	2f00      	cmp	r7, #0
 8008070:	d0a9      	beq.n	8007fc6 <__sflush_r+0x1a>
 8008072:	0793      	lsls	r3, r2, #30
 8008074:	680e      	ldr	r6, [r1, #0]
 8008076:	bf08      	it	eq
 8008078:	694b      	ldreq	r3, [r1, #20]
 800807a:	600f      	str	r7, [r1, #0]
 800807c:	bf18      	it	ne
 800807e:	2300      	movne	r3, #0
 8008080:	eba6 0807 	sub.w	r8, r6, r7
 8008084:	608b      	str	r3, [r1, #8]
 8008086:	f1b8 0f00 	cmp.w	r8, #0
 800808a:	dd9c      	ble.n	8007fc6 <__sflush_r+0x1a>
 800808c:	6a21      	ldr	r1, [r4, #32]
 800808e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008090:	4643      	mov	r3, r8
 8008092:	463a      	mov	r2, r7
 8008094:	4628      	mov	r0, r5
 8008096:	47b0      	blx	r6
 8008098:	2800      	cmp	r0, #0
 800809a:	dc06      	bgt.n	80080aa <__sflush_r+0xfe>
 800809c:	89a3      	ldrh	r3, [r4, #12]
 800809e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080a2:	81a3      	strh	r3, [r4, #12]
 80080a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080a8:	e78e      	b.n	8007fc8 <__sflush_r+0x1c>
 80080aa:	4407      	add	r7, r0
 80080ac:	eba8 0800 	sub.w	r8, r8, r0
 80080b0:	e7e9      	b.n	8008086 <__sflush_r+0xda>
 80080b2:	bf00      	nop
 80080b4:	20400001 	.word	0x20400001

080080b8 <_fflush_r>:
 80080b8:	b538      	push	{r3, r4, r5, lr}
 80080ba:	690b      	ldr	r3, [r1, #16]
 80080bc:	4605      	mov	r5, r0
 80080be:	460c      	mov	r4, r1
 80080c0:	b913      	cbnz	r3, 80080c8 <_fflush_r+0x10>
 80080c2:	2500      	movs	r5, #0
 80080c4:	4628      	mov	r0, r5
 80080c6:	bd38      	pop	{r3, r4, r5, pc}
 80080c8:	b118      	cbz	r0, 80080d2 <_fflush_r+0x1a>
 80080ca:	6983      	ldr	r3, [r0, #24]
 80080cc:	b90b      	cbnz	r3, 80080d2 <_fflush_r+0x1a>
 80080ce:	f000 f887 	bl	80081e0 <__sinit>
 80080d2:	4b14      	ldr	r3, [pc, #80]	; (8008124 <_fflush_r+0x6c>)
 80080d4:	429c      	cmp	r4, r3
 80080d6:	d11b      	bne.n	8008110 <_fflush_r+0x58>
 80080d8:	686c      	ldr	r4, [r5, #4]
 80080da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d0ef      	beq.n	80080c2 <_fflush_r+0xa>
 80080e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80080e4:	07d0      	lsls	r0, r2, #31
 80080e6:	d404      	bmi.n	80080f2 <_fflush_r+0x3a>
 80080e8:	0599      	lsls	r1, r3, #22
 80080ea:	d402      	bmi.n	80080f2 <_fflush_r+0x3a>
 80080ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080ee:	f000 f915 	bl	800831c <__retarget_lock_acquire_recursive>
 80080f2:	4628      	mov	r0, r5
 80080f4:	4621      	mov	r1, r4
 80080f6:	f7ff ff59 	bl	8007fac <__sflush_r>
 80080fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080fc:	07da      	lsls	r2, r3, #31
 80080fe:	4605      	mov	r5, r0
 8008100:	d4e0      	bmi.n	80080c4 <_fflush_r+0xc>
 8008102:	89a3      	ldrh	r3, [r4, #12]
 8008104:	059b      	lsls	r3, r3, #22
 8008106:	d4dd      	bmi.n	80080c4 <_fflush_r+0xc>
 8008108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800810a:	f000 f908 	bl	800831e <__retarget_lock_release_recursive>
 800810e:	e7d9      	b.n	80080c4 <_fflush_r+0xc>
 8008110:	4b05      	ldr	r3, [pc, #20]	; (8008128 <_fflush_r+0x70>)
 8008112:	429c      	cmp	r4, r3
 8008114:	d101      	bne.n	800811a <_fflush_r+0x62>
 8008116:	68ac      	ldr	r4, [r5, #8]
 8008118:	e7df      	b.n	80080da <_fflush_r+0x22>
 800811a:	4b04      	ldr	r3, [pc, #16]	; (800812c <_fflush_r+0x74>)
 800811c:	429c      	cmp	r4, r3
 800811e:	bf08      	it	eq
 8008120:	68ec      	ldreq	r4, [r5, #12]
 8008122:	e7da      	b.n	80080da <_fflush_r+0x22>
 8008124:	080089e4 	.word	0x080089e4
 8008128:	08008a04 	.word	0x08008a04
 800812c:	080089c4 	.word	0x080089c4

08008130 <std>:
 8008130:	2300      	movs	r3, #0
 8008132:	b510      	push	{r4, lr}
 8008134:	4604      	mov	r4, r0
 8008136:	e9c0 3300 	strd	r3, r3, [r0]
 800813a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800813e:	6083      	str	r3, [r0, #8]
 8008140:	8181      	strh	r1, [r0, #12]
 8008142:	6643      	str	r3, [r0, #100]	; 0x64
 8008144:	81c2      	strh	r2, [r0, #14]
 8008146:	6183      	str	r3, [r0, #24]
 8008148:	4619      	mov	r1, r3
 800814a:	2208      	movs	r2, #8
 800814c:	305c      	adds	r0, #92	; 0x5c
 800814e:	f7fd fb69 	bl	8005824 <memset>
 8008152:	4b05      	ldr	r3, [pc, #20]	; (8008168 <std+0x38>)
 8008154:	6263      	str	r3, [r4, #36]	; 0x24
 8008156:	4b05      	ldr	r3, [pc, #20]	; (800816c <std+0x3c>)
 8008158:	62a3      	str	r3, [r4, #40]	; 0x28
 800815a:	4b05      	ldr	r3, [pc, #20]	; (8008170 <std+0x40>)
 800815c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800815e:	4b05      	ldr	r3, [pc, #20]	; (8008174 <std+0x44>)
 8008160:	6224      	str	r4, [r4, #32]
 8008162:	6323      	str	r3, [r4, #48]	; 0x30
 8008164:	bd10      	pop	{r4, pc}
 8008166:	bf00      	nop
 8008168:	08008485 	.word	0x08008485
 800816c:	080084a7 	.word	0x080084a7
 8008170:	080084df 	.word	0x080084df
 8008174:	08008503 	.word	0x08008503

08008178 <_cleanup_r>:
 8008178:	4901      	ldr	r1, [pc, #4]	; (8008180 <_cleanup_r+0x8>)
 800817a:	f000 b8af 	b.w	80082dc <_fwalk_reent>
 800817e:	bf00      	nop
 8008180:	080080b9 	.word	0x080080b9

08008184 <__sfmoreglue>:
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	2268      	movs	r2, #104	; 0x68
 8008188:	1e4d      	subs	r5, r1, #1
 800818a:	4355      	muls	r5, r2
 800818c:	460e      	mov	r6, r1
 800818e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008192:	f7ff fa65 	bl	8007660 <_malloc_r>
 8008196:	4604      	mov	r4, r0
 8008198:	b140      	cbz	r0, 80081ac <__sfmoreglue+0x28>
 800819a:	2100      	movs	r1, #0
 800819c:	e9c0 1600 	strd	r1, r6, [r0]
 80081a0:	300c      	adds	r0, #12
 80081a2:	60a0      	str	r0, [r4, #8]
 80081a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80081a8:	f7fd fb3c 	bl	8005824 <memset>
 80081ac:	4620      	mov	r0, r4
 80081ae:	bd70      	pop	{r4, r5, r6, pc}

080081b0 <__sfp_lock_acquire>:
 80081b0:	4801      	ldr	r0, [pc, #4]	; (80081b8 <__sfp_lock_acquire+0x8>)
 80081b2:	f000 b8b3 	b.w	800831c <__retarget_lock_acquire_recursive>
 80081b6:	bf00      	nop
 80081b8:	200003b5 	.word	0x200003b5

080081bc <__sfp_lock_release>:
 80081bc:	4801      	ldr	r0, [pc, #4]	; (80081c4 <__sfp_lock_release+0x8>)
 80081be:	f000 b8ae 	b.w	800831e <__retarget_lock_release_recursive>
 80081c2:	bf00      	nop
 80081c4:	200003b5 	.word	0x200003b5

080081c8 <__sinit_lock_acquire>:
 80081c8:	4801      	ldr	r0, [pc, #4]	; (80081d0 <__sinit_lock_acquire+0x8>)
 80081ca:	f000 b8a7 	b.w	800831c <__retarget_lock_acquire_recursive>
 80081ce:	bf00      	nop
 80081d0:	200003b6 	.word	0x200003b6

080081d4 <__sinit_lock_release>:
 80081d4:	4801      	ldr	r0, [pc, #4]	; (80081dc <__sinit_lock_release+0x8>)
 80081d6:	f000 b8a2 	b.w	800831e <__retarget_lock_release_recursive>
 80081da:	bf00      	nop
 80081dc:	200003b6 	.word	0x200003b6

080081e0 <__sinit>:
 80081e0:	b510      	push	{r4, lr}
 80081e2:	4604      	mov	r4, r0
 80081e4:	f7ff fff0 	bl	80081c8 <__sinit_lock_acquire>
 80081e8:	69a3      	ldr	r3, [r4, #24]
 80081ea:	b11b      	cbz	r3, 80081f4 <__sinit+0x14>
 80081ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081f0:	f7ff bff0 	b.w	80081d4 <__sinit_lock_release>
 80081f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80081f8:	6523      	str	r3, [r4, #80]	; 0x50
 80081fa:	4b13      	ldr	r3, [pc, #76]	; (8008248 <__sinit+0x68>)
 80081fc:	4a13      	ldr	r2, [pc, #76]	; (800824c <__sinit+0x6c>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	62a2      	str	r2, [r4, #40]	; 0x28
 8008202:	42a3      	cmp	r3, r4
 8008204:	bf04      	itt	eq
 8008206:	2301      	moveq	r3, #1
 8008208:	61a3      	streq	r3, [r4, #24]
 800820a:	4620      	mov	r0, r4
 800820c:	f000 f820 	bl	8008250 <__sfp>
 8008210:	6060      	str	r0, [r4, #4]
 8008212:	4620      	mov	r0, r4
 8008214:	f000 f81c 	bl	8008250 <__sfp>
 8008218:	60a0      	str	r0, [r4, #8]
 800821a:	4620      	mov	r0, r4
 800821c:	f000 f818 	bl	8008250 <__sfp>
 8008220:	2200      	movs	r2, #0
 8008222:	60e0      	str	r0, [r4, #12]
 8008224:	2104      	movs	r1, #4
 8008226:	6860      	ldr	r0, [r4, #4]
 8008228:	f7ff ff82 	bl	8008130 <std>
 800822c:	68a0      	ldr	r0, [r4, #8]
 800822e:	2201      	movs	r2, #1
 8008230:	2109      	movs	r1, #9
 8008232:	f7ff ff7d 	bl	8008130 <std>
 8008236:	68e0      	ldr	r0, [r4, #12]
 8008238:	2202      	movs	r2, #2
 800823a:	2112      	movs	r1, #18
 800823c:	f7ff ff78 	bl	8008130 <std>
 8008240:	2301      	movs	r3, #1
 8008242:	61a3      	str	r3, [r4, #24]
 8008244:	e7d2      	b.n	80081ec <__sinit+0xc>
 8008246:	bf00      	nop
 8008248:	0800864c 	.word	0x0800864c
 800824c:	08008179 	.word	0x08008179

08008250 <__sfp>:
 8008250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008252:	4607      	mov	r7, r0
 8008254:	f7ff ffac 	bl	80081b0 <__sfp_lock_acquire>
 8008258:	4b1e      	ldr	r3, [pc, #120]	; (80082d4 <__sfp+0x84>)
 800825a:	681e      	ldr	r6, [r3, #0]
 800825c:	69b3      	ldr	r3, [r6, #24]
 800825e:	b913      	cbnz	r3, 8008266 <__sfp+0x16>
 8008260:	4630      	mov	r0, r6
 8008262:	f7ff ffbd 	bl	80081e0 <__sinit>
 8008266:	3648      	adds	r6, #72	; 0x48
 8008268:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800826c:	3b01      	subs	r3, #1
 800826e:	d503      	bpl.n	8008278 <__sfp+0x28>
 8008270:	6833      	ldr	r3, [r6, #0]
 8008272:	b30b      	cbz	r3, 80082b8 <__sfp+0x68>
 8008274:	6836      	ldr	r6, [r6, #0]
 8008276:	e7f7      	b.n	8008268 <__sfp+0x18>
 8008278:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800827c:	b9d5      	cbnz	r5, 80082b4 <__sfp+0x64>
 800827e:	4b16      	ldr	r3, [pc, #88]	; (80082d8 <__sfp+0x88>)
 8008280:	60e3      	str	r3, [r4, #12]
 8008282:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008286:	6665      	str	r5, [r4, #100]	; 0x64
 8008288:	f000 f847 	bl	800831a <__retarget_lock_init_recursive>
 800828c:	f7ff ff96 	bl	80081bc <__sfp_lock_release>
 8008290:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008294:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008298:	6025      	str	r5, [r4, #0]
 800829a:	61a5      	str	r5, [r4, #24]
 800829c:	2208      	movs	r2, #8
 800829e:	4629      	mov	r1, r5
 80082a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80082a4:	f7fd fabe 	bl	8005824 <memset>
 80082a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80082ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80082b0:	4620      	mov	r0, r4
 80082b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082b4:	3468      	adds	r4, #104	; 0x68
 80082b6:	e7d9      	b.n	800826c <__sfp+0x1c>
 80082b8:	2104      	movs	r1, #4
 80082ba:	4638      	mov	r0, r7
 80082bc:	f7ff ff62 	bl	8008184 <__sfmoreglue>
 80082c0:	4604      	mov	r4, r0
 80082c2:	6030      	str	r0, [r6, #0]
 80082c4:	2800      	cmp	r0, #0
 80082c6:	d1d5      	bne.n	8008274 <__sfp+0x24>
 80082c8:	f7ff ff78 	bl	80081bc <__sfp_lock_release>
 80082cc:	230c      	movs	r3, #12
 80082ce:	603b      	str	r3, [r7, #0]
 80082d0:	e7ee      	b.n	80082b0 <__sfp+0x60>
 80082d2:	bf00      	nop
 80082d4:	0800864c 	.word	0x0800864c
 80082d8:	ffff0001 	.word	0xffff0001

080082dc <_fwalk_reent>:
 80082dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082e0:	4606      	mov	r6, r0
 80082e2:	4688      	mov	r8, r1
 80082e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80082e8:	2700      	movs	r7, #0
 80082ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082ee:	f1b9 0901 	subs.w	r9, r9, #1
 80082f2:	d505      	bpl.n	8008300 <_fwalk_reent+0x24>
 80082f4:	6824      	ldr	r4, [r4, #0]
 80082f6:	2c00      	cmp	r4, #0
 80082f8:	d1f7      	bne.n	80082ea <_fwalk_reent+0xe>
 80082fa:	4638      	mov	r0, r7
 80082fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008300:	89ab      	ldrh	r3, [r5, #12]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d907      	bls.n	8008316 <_fwalk_reent+0x3a>
 8008306:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800830a:	3301      	adds	r3, #1
 800830c:	d003      	beq.n	8008316 <_fwalk_reent+0x3a>
 800830e:	4629      	mov	r1, r5
 8008310:	4630      	mov	r0, r6
 8008312:	47c0      	blx	r8
 8008314:	4307      	orrs	r7, r0
 8008316:	3568      	adds	r5, #104	; 0x68
 8008318:	e7e9      	b.n	80082ee <_fwalk_reent+0x12>

0800831a <__retarget_lock_init_recursive>:
 800831a:	4770      	bx	lr

0800831c <__retarget_lock_acquire_recursive>:
 800831c:	4770      	bx	lr

0800831e <__retarget_lock_release_recursive>:
 800831e:	4770      	bx	lr

08008320 <__swhatbuf_r>:
 8008320:	b570      	push	{r4, r5, r6, lr}
 8008322:	460e      	mov	r6, r1
 8008324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008328:	2900      	cmp	r1, #0
 800832a:	b096      	sub	sp, #88	; 0x58
 800832c:	4614      	mov	r4, r2
 800832e:	461d      	mov	r5, r3
 8008330:	da08      	bge.n	8008344 <__swhatbuf_r+0x24>
 8008332:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	602a      	str	r2, [r5, #0]
 800833a:	061a      	lsls	r2, r3, #24
 800833c:	d410      	bmi.n	8008360 <__swhatbuf_r+0x40>
 800833e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008342:	e00e      	b.n	8008362 <__swhatbuf_r+0x42>
 8008344:	466a      	mov	r2, sp
 8008346:	f000 f903 	bl	8008550 <_fstat_r>
 800834a:	2800      	cmp	r0, #0
 800834c:	dbf1      	blt.n	8008332 <__swhatbuf_r+0x12>
 800834e:	9a01      	ldr	r2, [sp, #4]
 8008350:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008354:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008358:	425a      	negs	r2, r3
 800835a:	415a      	adcs	r2, r3
 800835c:	602a      	str	r2, [r5, #0]
 800835e:	e7ee      	b.n	800833e <__swhatbuf_r+0x1e>
 8008360:	2340      	movs	r3, #64	; 0x40
 8008362:	2000      	movs	r0, #0
 8008364:	6023      	str	r3, [r4, #0]
 8008366:	b016      	add	sp, #88	; 0x58
 8008368:	bd70      	pop	{r4, r5, r6, pc}
	...

0800836c <__smakebuf_r>:
 800836c:	898b      	ldrh	r3, [r1, #12]
 800836e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008370:	079d      	lsls	r5, r3, #30
 8008372:	4606      	mov	r6, r0
 8008374:	460c      	mov	r4, r1
 8008376:	d507      	bpl.n	8008388 <__smakebuf_r+0x1c>
 8008378:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800837c:	6023      	str	r3, [r4, #0]
 800837e:	6123      	str	r3, [r4, #16]
 8008380:	2301      	movs	r3, #1
 8008382:	6163      	str	r3, [r4, #20]
 8008384:	b002      	add	sp, #8
 8008386:	bd70      	pop	{r4, r5, r6, pc}
 8008388:	ab01      	add	r3, sp, #4
 800838a:	466a      	mov	r2, sp
 800838c:	f7ff ffc8 	bl	8008320 <__swhatbuf_r>
 8008390:	9900      	ldr	r1, [sp, #0]
 8008392:	4605      	mov	r5, r0
 8008394:	4630      	mov	r0, r6
 8008396:	f7ff f963 	bl	8007660 <_malloc_r>
 800839a:	b948      	cbnz	r0, 80083b0 <__smakebuf_r+0x44>
 800839c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083a0:	059a      	lsls	r2, r3, #22
 80083a2:	d4ef      	bmi.n	8008384 <__smakebuf_r+0x18>
 80083a4:	f023 0303 	bic.w	r3, r3, #3
 80083a8:	f043 0302 	orr.w	r3, r3, #2
 80083ac:	81a3      	strh	r3, [r4, #12]
 80083ae:	e7e3      	b.n	8008378 <__smakebuf_r+0xc>
 80083b0:	4b0d      	ldr	r3, [pc, #52]	; (80083e8 <__smakebuf_r+0x7c>)
 80083b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80083b4:	89a3      	ldrh	r3, [r4, #12]
 80083b6:	6020      	str	r0, [r4, #0]
 80083b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083bc:	81a3      	strh	r3, [r4, #12]
 80083be:	9b00      	ldr	r3, [sp, #0]
 80083c0:	6163      	str	r3, [r4, #20]
 80083c2:	9b01      	ldr	r3, [sp, #4]
 80083c4:	6120      	str	r0, [r4, #16]
 80083c6:	b15b      	cbz	r3, 80083e0 <__smakebuf_r+0x74>
 80083c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083cc:	4630      	mov	r0, r6
 80083ce:	f000 f8d1 	bl	8008574 <_isatty_r>
 80083d2:	b128      	cbz	r0, 80083e0 <__smakebuf_r+0x74>
 80083d4:	89a3      	ldrh	r3, [r4, #12]
 80083d6:	f023 0303 	bic.w	r3, r3, #3
 80083da:	f043 0301 	orr.w	r3, r3, #1
 80083de:	81a3      	strh	r3, [r4, #12]
 80083e0:	89a0      	ldrh	r0, [r4, #12]
 80083e2:	4305      	orrs	r5, r0
 80083e4:	81a5      	strh	r5, [r4, #12]
 80083e6:	e7cd      	b.n	8008384 <__smakebuf_r+0x18>
 80083e8:	08008179 	.word	0x08008179

080083ec <_malloc_usable_size_r>:
 80083ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083f0:	1f18      	subs	r0, r3, #4
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	bfbc      	itt	lt
 80083f6:	580b      	ldrlt	r3, [r1, r0]
 80083f8:	18c0      	addlt	r0, r0, r3
 80083fa:	4770      	bx	lr

080083fc <_raise_r>:
 80083fc:	291f      	cmp	r1, #31
 80083fe:	b538      	push	{r3, r4, r5, lr}
 8008400:	4604      	mov	r4, r0
 8008402:	460d      	mov	r5, r1
 8008404:	d904      	bls.n	8008410 <_raise_r+0x14>
 8008406:	2316      	movs	r3, #22
 8008408:	6003      	str	r3, [r0, #0]
 800840a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008412:	b112      	cbz	r2, 800841a <_raise_r+0x1e>
 8008414:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008418:	b94b      	cbnz	r3, 800842e <_raise_r+0x32>
 800841a:	4620      	mov	r0, r4
 800841c:	f000 f830 	bl	8008480 <_getpid_r>
 8008420:	462a      	mov	r2, r5
 8008422:	4601      	mov	r1, r0
 8008424:	4620      	mov	r0, r4
 8008426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800842a:	f000 b817 	b.w	800845c <_kill_r>
 800842e:	2b01      	cmp	r3, #1
 8008430:	d00a      	beq.n	8008448 <_raise_r+0x4c>
 8008432:	1c59      	adds	r1, r3, #1
 8008434:	d103      	bne.n	800843e <_raise_r+0x42>
 8008436:	2316      	movs	r3, #22
 8008438:	6003      	str	r3, [r0, #0]
 800843a:	2001      	movs	r0, #1
 800843c:	e7e7      	b.n	800840e <_raise_r+0x12>
 800843e:	2400      	movs	r4, #0
 8008440:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008444:	4628      	mov	r0, r5
 8008446:	4798      	blx	r3
 8008448:	2000      	movs	r0, #0
 800844a:	e7e0      	b.n	800840e <_raise_r+0x12>

0800844c <raise>:
 800844c:	4b02      	ldr	r3, [pc, #8]	; (8008458 <raise+0xc>)
 800844e:	4601      	mov	r1, r0
 8008450:	6818      	ldr	r0, [r3, #0]
 8008452:	f7ff bfd3 	b.w	80083fc <_raise_r>
 8008456:	bf00      	nop
 8008458:	2000000c 	.word	0x2000000c

0800845c <_kill_r>:
 800845c:	b538      	push	{r3, r4, r5, lr}
 800845e:	4d07      	ldr	r5, [pc, #28]	; (800847c <_kill_r+0x20>)
 8008460:	2300      	movs	r3, #0
 8008462:	4604      	mov	r4, r0
 8008464:	4608      	mov	r0, r1
 8008466:	4611      	mov	r1, r2
 8008468:	602b      	str	r3, [r5, #0]
 800846a:	f7f9 fda3 	bl	8001fb4 <_kill>
 800846e:	1c43      	adds	r3, r0, #1
 8008470:	d102      	bne.n	8008478 <_kill_r+0x1c>
 8008472:	682b      	ldr	r3, [r5, #0]
 8008474:	b103      	cbz	r3, 8008478 <_kill_r+0x1c>
 8008476:	6023      	str	r3, [r4, #0]
 8008478:	bd38      	pop	{r3, r4, r5, pc}
 800847a:	bf00      	nop
 800847c:	200003b0 	.word	0x200003b0

08008480 <_getpid_r>:
 8008480:	f7f9 bd90 	b.w	8001fa4 <_getpid>

08008484 <__sread>:
 8008484:	b510      	push	{r4, lr}
 8008486:	460c      	mov	r4, r1
 8008488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800848c:	f000 f894 	bl	80085b8 <_read_r>
 8008490:	2800      	cmp	r0, #0
 8008492:	bfab      	itete	ge
 8008494:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008496:	89a3      	ldrhlt	r3, [r4, #12]
 8008498:	181b      	addge	r3, r3, r0
 800849a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800849e:	bfac      	ite	ge
 80084a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80084a2:	81a3      	strhlt	r3, [r4, #12]
 80084a4:	bd10      	pop	{r4, pc}

080084a6 <__swrite>:
 80084a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084aa:	461f      	mov	r7, r3
 80084ac:	898b      	ldrh	r3, [r1, #12]
 80084ae:	05db      	lsls	r3, r3, #23
 80084b0:	4605      	mov	r5, r0
 80084b2:	460c      	mov	r4, r1
 80084b4:	4616      	mov	r6, r2
 80084b6:	d505      	bpl.n	80084c4 <__swrite+0x1e>
 80084b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084bc:	2302      	movs	r3, #2
 80084be:	2200      	movs	r2, #0
 80084c0:	f000 f868 	bl	8008594 <_lseek_r>
 80084c4:	89a3      	ldrh	r3, [r4, #12]
 80084c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084ce:	81a3      	strh	r3, [r4, #12]
 80084d0:	4632      	mov	r2, r6
 80084d2:	463b      	mov	r3, r7
 80084d4:	4628      	mov	r0, r5
 80084d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084da:	f000 b817 	b.w	800850c <_write_r>

080084de <__sseek>:
 80084de:	b510      	push	{r4, lr}
 80084e0:	460c      	mov	r4, r1
 80084e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084e6:	f000 f855 	bl	8008594 <_lseek_r>
 80084ea:	1c43      	adds	r3, r0, #1
 80084ec:	89a3      	ldrh	r3, [r4, #12]
 80084ee:	bf15      	itete	ne
 80084f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80084f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80084f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80084fa:	81a3      	strheq	r3, [r4, #12]
 80084fc:	bf18      	it	ne
 80084fe:	81a3      	strhne	r3, [r4, #12]
 8008500:	bd10      	pop	{r4, pc}

08008502 <__sclose>:
 8008502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008506:	f000 b813 	b.w	8008530 <_close_r>
	...

0800850c <_write_r>:
 800850c:	b538      	push	{r3, r4, r5, lr}
 800850e:	4d07      	ldr	r5, [pc, #28]	; (800852c <_write_r+0x20>)
 8008510:	4604      	mov	r4, r0
 8008512:	4608      	mov	r0, r1
 8008514:	4611      	mov	r1, r2
 8008516:	2200      	movs	r2, #0
 8008518:	602a      	str	r2, [r5, #0]
 800851a:	461a      	mov	r2, r3
 800851c:	f7f9 fd81 	bl	8002022 <_write>
 8008520:	1c43      	adds	r3, r0, #1
 8008522:	d102      	bne.n	800852a <_write_r+0x1e>
 8008524:	682b      	ldr	r3, [r5, #0]
 8008526:	b103      	cbz	r3, 800852a <_write_r+0x1e>
 8008528:	6023      	str	r3, [r4, #0]
 800852a:	bd38      	pop	{r3, r4, r5, pc}
 800852c:	200003b0 	.word	0x200003b0

08008530 <_close_r>:
 8008530:	b538      	push	{r3, r4, r5, lr}
 8008532:	4d06      	ldr	r5, [pc, #24]	; (800854c <_close_r+0x1c>)
 8008534:	2300      	movs	r3, #0
 8008536:	4604      	mov	r4, r0
 8008538:	4608      	mov	r0, r1
 800853a:	602b      	str	r3, [r5, #0]
 800853c:	f7f9 fd8d 	bl	800205a <_close>
 8008540:	1c43      	adds	r3, r0, #1
 8008542:	d102      	bne.n	800854a <_close_r+0x1a>
 8008544:	682b      	ldr	r3, [r5, #0]
 8008546:	b103      	cbz	r3, 800854a <_close_r+0x1a>
 8008548:	6023      	str	r3, [r4, #0]
 800854a:	bd38      	pop	{r3, r4, r5, pc}
 800854c:	200003b0 	.word	0x200003b0

08008550 <_fstat_r>:
 8008550:	b538      	push	{r3, r4, r5, lr}
 8008552:	4d07      	ldr	r5, [pc, #28]	; (8008570 <_fstat_r+0x20>)
 8008554:	2300      	movs	r3, #0
 8008556:	4604      	mov	r4, r0
 8008558:	4608      	mov	r0, r1
 800855a:	4611      	mov	r1, r2
 800855c:	602b      	str	r3, [r5, #0]
 800855e:	f7f9 fd88 	bl	8002072 <_fstat>
 8008562:	1c43      	adds	r3, r0, #1
 8008564:	d102      	bne.n	800856c <_fstat_r+0x1c>
 8008566:	682b      	ldr	r3, [r5, #0]
 8008568:	b103      	cbz	r3, 800856c <_fstat_r+0x1c>
 800856a:	6023      	str	r3, [r4, #0]
 800856c:	bd38      	pop	{r3, r4, r5, pc}
 800856e:	bf00      	nop
 8008570:	200003b0 	.word	0x200003b0

08008574 <_isatty_r>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	4d06      	ldr	r5, [pc, #24]	; (8008590 <_isatty_r+0x1c>)
 8008578:	2300      	movs	r3, #0
 800857a:	4604      	mov	r4, r0
 800857c:	4608      	mov	r0, r1
 800857e:	602b      	str	r3, [r5, #0]
 8008580:	f7f9 fd87 	bl	8002092 <_isatty>
 8008584:	1c43      	adds	r3, r0, #1
 8008586:	d102      	bne.n	800858e <_isatty_r+0x1a>
 8008588:	682b      	ldr	r3, [r5, #0]
 800858a:	b103      	cbz	r3, 800858e <_isatty_r+0x1a>
 800858c:	6023      	str	r3, [r4, #0]
 800858e:	bd38      	pop	{r3, r4, r5, pc}
 8008590:	200003b0 	.word	0x200003b0

08008594 <_lseek_r>:
 8008594:	b538      	push	{r3, r4, r5, lr}
 8008596:	4d07      	ldr	r5, [pc, #28]	; (80085b4 <_lseek_r+0x20>)
 8008598:	4604      	mov	r4, r0
 800859a:	4608      	mov	r0, r1
 800859c:	4611      	mov	r1, r2
 800859e:	2200      	movs	r2, #0
 80085a0:	602a      	str	r2, [r5, #0]
 80085a2:	461a      	mov	r2, r3
 80085a4:	f7f9 fd80 	bl	80020a8 <_lseek>
 80085a8:	1c43      	adds	r3, r0, #1
 80085aa:	d102      	bne.n	80085b2 <_lseek_r+0x1e>
 80085ac:	682b      	ldr	r3, [r5, #0]
 80085ae:	b103      	cbz	r3, 80085b2 <_lseek_r+0x1e>
 80085b0:	6023      	str	r3, [r4, #0]
 80085b2:	bd38      	pop	{r3, r4, r5, pc}
 80085b4:	200003b0 	.word	0x200003b0

080085b8 <_read_r>:
 80085b8:	b538      	push	{r3, r4, r5, lr}
 80085ba:	4d07      	ldr	r5, [pc, #28]	; (80085d8 <_read_r+0x20>)
 80085bc:	4604      	mov	r4, r0
 80085be:	4608      	mov	r0, r1
 80085c0:	4611      	mov	r1, r2
 80085c2:	2200      	movs	r2, #0
 80085c4:	602a      	str	r2, [r5, #0]
 80085c6:	461a      	mov	r2, r3
 80085c8:	f7f9 fd0e 	bl	8001fe8 <_read>
 80085cc:	1c43      	adds	r3, r0, #1
 80085ce:	d102      	bne.n	80085d6 <_read_r+0x1e>
 80085d0:	682b      	ldr	r3, [r5, #0]
 80085d2:	b103      	cbz	r3, 80085d6 <_read_r+0x1e>
 80085d4:	6023      	str	r3, [r4, #0]
 80085d6:	bd38      	pop	{r3, r4, r5, pc}
 80085d8:	200003b0 	.word	0x200003b0

080085dc <_init>:
 80085dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085de:	bf00      	nop
 80085e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085e2:	bc08      	pop	{r3}
 80085e4:	469e      	mov	lr, r3
 80085e6:	4770      	bx	lr

080085e8 <_fini>:
 80085e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ea:	bf00      	nop
 80085ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ee:	bc08      	pop	{r3}
 80085f0:	469e      	mov	lr, r3
 80085f2:	4770      	bx	lr
