
FinalAPPSCode_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000875c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08008930  08008930  00018930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d9c  08008d9c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008d9c  08008d9c  00018d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008da4  08008da4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008da4  08008da4  00018da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008da8  08008da8  00018da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  200001e0  08008f8c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08008f8c  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f39  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002524  00000000  00000000  00032149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  00034670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  000356a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000247e2  00000000  00000000  000365e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b81  00000000  00000000  0005adca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1de8  00000000  00000000  0006d94b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014f733  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056c8  00000000  00000000  0014f784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008914 	.word	0x08008914

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08008914 	.word	0x08008914

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <Store_EMERGENCY_Msg>:
    EMERGENCY_APPS_EMERGENCY_TYPE apps_emergency;
    EMERGENCY_SW_EMERGENCY_TYPE sw_emergency;
} EMERGENCY_MESSAGE_TYPE;
EMERGENCY_MESSAGE_TYPE EMERGENCY_MESSAGE;

void Store_EMERGENCY_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <Store_EMERGENCY_Msg+0x1a>
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d006      	beq.n	8000fb2 <Store_EMERGENCY_Msg+0x26>
            break;
        case EMERGENCY_SW_EMERGENCY:
            memcpy(&(EMERGENCY_MESSAGE.sw_emergency), RxData, data_length);
            break;
    }
}
 8000fa4:	e00b      	b.n	8000fbe <Store_EMERGENCY_Msg+0x32>
            memcpy(&(EMERGENCY_MESSAGE.apps_emergency), RxData, data_length);
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	68b9      	ldr	r1, [r7, #8]
 8000faa:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <Store_EMERGENCY_Msg+0x3c>)
 8000fac:	f004 fdc6 	bl	8005b3c <memcpy>
            break;
 8000fb0:	e005      	b.n	8000fbe <Store_EMERGENCY_Msg+0x32>
            memcpy(&(EMERGENCY_MESSAGE.sw_emergency), RxData, data_length);
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	68b9      	ldr	r1, [r7, #8]
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <Store_EMERGENCY_Msg+0x40>)
 8000fb8:	f004 fdc0 	bl	8005b3c <memcpy>
            break;
 8000fbc:	bf00      	nop
}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200001fc 	.word	0x200001fc
 8000fcc:	200001fd 	.word	0x200001fd

08000fd0 <Store_BMS_Msg>:
    BMS_TEMPERATURE_TYPE temperature;
    BMS_VOLTAGE_TYPE voltage;
} BMS_MESSAGE_TYPE;
BMS_MESSAGE_TYPE BMS_MESSAGE;

void Store_BMS_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2b10      	cmp	r3, #16
 8000fe0:	d003      	beq.n	8000fea <Store_BMS_Msg+0x1a>
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2b11      	cmp	r3, #17
 8000fe6:	d006      	beq.n	8000ff6 <Store_BMS_Msg+0x26>
            break;
        case BMS_VOLTAGE:
            memcpy(&(BMS_MESSAGE.voltage), RxData, data_length);
            break;
    }
}
 8000fe8:	e00b      	b.n	8001002 <Store_BMS_Msg+0x32>
            memcpy(&(BMS_MESSAGE.temperature), RxData, data_length);
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	4807      	ldr	r0, [pc, #28]	; (800100c <Store_BMS_Msg+0x3c>)
 8000ff0:	f004 fda4 	bl	8005b3c <memcpy>
            break;
 8000ff4:	e005      	b.n	8001002 <Store_BMS_Msg+0x32>
            memcpy(&(BMS_MESSAGE.voltage), RxData, data_length);
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <Store_BMS_Msg+0x40>)
 8000ffc:	f004 fd9e 	bl	8005b3c <memcpy>
            break;
 8001000:	bf00      	nop
}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000200 	.word	0x20000200
 8001010:	20000204 	.word	0x20000204

08001014 <Store_SW_Msg>:
    SW_ACUMULATOR_FANS_TYPE acumulator_fans;
    SW_EXTRA_TYPE extra;
} SW_MESSAGE_TYPE;
SW_MESSAGE_TYPE SW_MESSAGE;

void Store_SW_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	3b20      	subs	r3, #32
 8001024:	2b03      	cmp	r3, #3
 8001026:	d823      	bhi.n	8001070 <Store_SW_Msg+0x5c>
 8001028:	a201      	add	r2, pc, #4	; (adr r2, 8001030 <Store_SW_Msg+0x1c>)
 800102a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102e:	bf00      	nop
 8001030:	08001041 	.word	0x08001041
 8001034:	0800104d 	.word	0x0800104d
 8001038:	08001059 	.word	0x08001059
 800103c:	08001065 	.word	0x08001065
        case SW_READY_TO_DRIVE:
            memcpy(&(SW_MESSAGE.ready_to_drive), RxData, data_length);
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	68b9      	ldr	r1, [r7, #8]
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <Store_SW_Msg+0x64>)
 8001046:	f004 fd79 	bl	8005b3c <memcpy>
            break;
 800104a:	e011      	b.n	8001070 <Store_SW_Msg+0x5c>
        case SW_COOLANT_PUMP:
            memcpy(&(SW_MESSAGE.coolant_pump), RxData, data_length);
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	480a      	ldr	r0, [pc, #40]	; (800107c <Store_SW_Msg+0x68>)
 8001052:	f004 fd73 	bl	8005b3c <memcpy>
            break;
 8001056:	e00b      	b.n	8001070 <Store_SW_Msg+0x5c>
        case SW_ACUMULATOR_FANS:
            memcpy(&(SW_MESSAGE.acumulator_fans), RxData, data_length);
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	68b9      	ldr	r1, [r7, #8]
 800105c:	4808      	ldr	r0, [pc, #32]	; (8001080 <Store_SW_Msg+0x6c>)
 800105e:	f004 fd6d 	bl	8005b3c <memcpy>
            break;
 8001062:	e005      	b.n	8001070 <Store_SW_Msg+0x5c>
        case SW_EXTRA:
            memcpy(&(SW_MESSAGE.extra), RxData, data_length);
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	68b9      	ldr	r1, [r7, #8]
 8001068:	4806      	ldr	r0, [pc, #24]	; (8001084 <Store_SW_Msg+0x70>)
 800106a:	f004 fd67 	bl	8005b3c <memcpy>
            break;
 800106e:	bf00      	nop
    }
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000208 	.word	0x20000208
 800107c:	20000209 	.word	0x20000209
 8001080:	2000020a 	.word	0x2000020a
 8001084:	2000020b 	.word	0x2000020b

08001088 <Store_APPS_Msg>:
    APPS_BRAKE_PEDAL_TYPE brake_pedal;
    APPS_TORQUE_TYPE torque;
} APPS_MESSAGE_TYPE;
APPS_MESSAGE_TYPE APPS_MESSAGE;

void Store_APPS_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	3b30      	subs	r3, #48	; 0x30
 8001098:	2b03      	cmp	r3, #3
 800109a:	d823      	bhi.n	80010e4 <Store_APPS_Msg+0x5c>
 800109c:	a201      	add	r2, pc, #4	; (adr r2, 80010a4 <Store_APPS_Msg+0x1c>)
 800109e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a2:	bf00      	nop
 80010a4:	080010b5 	.word	0x080010b5
 80010a8:	080010c1 	.word	0x080010c1
 80010ac:	080010cd 	.word	0x080010cd
 80010b0:	080010d9 	.word	0x080010d9
        case APPS_ACCELERATOR1_PEDAL:
            memcpy(&(APPS_MESSAGE.accelerator1_pedal), RxData, data_length);
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	68b9      	ldr	r1, [r7, #8]
 80010b8:	480c      	ldr	r0, [pc, #48]	; (80010ec <Store_APPS_Msg+0x64>)
 80010ba:	f004 fd3f 	bl	8005b3c <memcpy>
            break;
 80010be:	e011      	b.n	80010e4 <Store_APPS_Msg+0x5c>
        case APPS_ACCELERATOR2_PEDAL:
            memcpy(&(APPS_MESSAGE.accelerator2_pedal), RxData, data_length);
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	68b9      	ldr	r1, [r7, #8]
 80010c4:	480a      	ldr	r0, [pc, #40]	; (80010f0 <Store_APPS_Msg+0x68>)
 80010c6:	f004 fd39 	bl	8005b3c <memcpy>
            break;
 80010ca:	e00b      	b.n	80010e4 <Store_APPS_Msg+0x5c>
        case APPS_BRAKE_PEDAL:
            memcpy(&(APPS_MESSAGE.brake_pedal), RxData, data_length);
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	4808      	ldr	r0, [pc, #32]	; (80010f4 <Store_APPS_Msg+0x6c>)
 80010d2:	f004 fd33 	bl	8005b3c <memcpy>
            break;
 80010d6:	e005      	b.n	80010e4 <Store_APPS_Msg+0x5c>
        case APPS_TORQUE:
            memcpy(&(APPS_MESSAGE.torque), RxData, data_length);
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	68b9      	ldr	r1, [r7, #8]
 80010dc:	4806      	ldr	r0, [pc, #24]	; (80010f8 <Store_APPS_Msg+0x70>)
 80010de:	f004 fd2d 	bl	8005b3c <memcpy>
            break;
 80010e2:	bf00      	nop
    }
}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	2000020c 	.word	0x2000020c
 80010f0:	20000210 	.word	0x20000210
 80010f4:	20000214 	.word	0x20000214
 80010f8:	20000218 	.word	0x20000218

080010fc <assign_filter_array>:
const FilterArrayLength APPS_RX_NUM = 2;

const AddressIdType LVPDB_RX_ID[] = {SW_ID, APPS_ID};
const FilterArrayLength LVPDB_RX_NUM = 2;

const AddressIdType* assign_filter_array(AddressIdType NODE_ID) {
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	2b03      	cmp	r3, #3
 800110a:	d813      	bhi.n	8001134 <assign_filter_array+0x38>
 800110c:	a201      	add	r2, pc, #4	; (adr r2, 8001114 <assign_filter_array+0x18>)
 800110e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001112:	bf00      	nop
 8001114:	08001125 	.word	0x08001125
 8001118:	08001129 	.word	0x08001129
 800111c:	0800112d 	.word	0x0800112d
 8001120:	08001131 	.word	0x08001131
        case BMS_ID:
            return BMS_RX_ID;
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <assign_filter_array+0x48>)
 8001126:	e006      	b.n	8001136 <assign_filter_array+0x3a>
            break;
        case SW_ID:
            return SW_RX_ID;
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <assign_filter_array+0x4c>)
 800112a:	e004      	b.n	8001136 <assign_filter_array+0x3a>
            break;
        case APPS_ID:
            return APPS_RX_ID;
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <assign_filter_array+0x50>)
 800112e:	e002      	b.n	8001136 <assign_filter_array+0x3a>
            break;
        case LVPDB_ID:
            return LVPDB_RX_ID;
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <assign_filter_array+0x54>)
 8001132:	e000      	b.n	8001136 <assign_filter_array+0x3a>
            break;
    }
    return 0;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	08008994 	.word	0x08008994
 8001148:	08008998 	.word	0x08008998
 800114c:	0800899c 	.word	0x0800899c
 8001150:	080089a4 	.word	0x080089a4

08001154 <assign_filter_array_legnth>:

FilterArrayLength assign_filter_array_legnth(AddressIdType NODE_ID) {
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	2b03      	cmp	r3, #3
 8001162:	d813      	bhi.n	800118c <assign_filter_array_legnth+0x38>
 8001164:	a201      	add	r2, pc, #4	; (adr r2, 800116c <assign_filter_array_legnth+0x18>)
 8001166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116a:	bf00      	nop
 800116c:	0800117d 	.word	0x0800117d
 8001170:	08001181 	.word	0x08001181
 8001174:	08001185 	.word	0x08001185
 8001178:	08001189 	.word	0x08001189
        case BMS_ID:
            return BMS_RX_NUM;
 800117c:	2301      	movs	r3, #1
 800117e:	e006      	b.n	800118e <assign_filter_array_legnth+0x3a>
            break;
        case SW_ID:
            return SW_RX_NUM;
 8001180:	2301      	movs	r3, #1
 8001182:	e004      	b.n	800118e <assign_filter_array_legnth+0x3a>
            break;
        case APPS_ID:
            return APPS_RX_NUM;
 8001184:	2302      	movs	r3, #2
 8001186:	e002      	b.n	800118e <assign_filter_array_legnth+0x3a>
            break;
        case LVPDB_ID:
            return LVPDB_RX_NUM;
 8001188:	2302      	movs	r3, #2
 800118a:	e000      	b.n	800118e <assign_filter_array_legnth+0x3a>
            break;
    }
    return 0;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <store_msg>:

void store_msg(CAN_RxHeaderTypeDef *pHeader, uint8_t RxData[]) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
    switch(pHeader->StdId >> BITS_PER_MESSAGE_TYPE) {
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	091b      	lsrs	r3, r3, #4
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d82f      	bhi.n	8001210 <store_msg+0x74>
 80011b0:	a201      	add	r2, pc, #4	; (adr r2, 80011b8 <store_msg+0x1c>)
 80011b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b6:	bf00      	nop
 80011b8:	080011c9 	.word	0x080011c9
 80011bc:	080011db 	.word	0x080011db
 80011c0:	080011ed 	.word	0x080011ed
 80011c4:	080011ff 	.word	0x080011ff
        case EMERGENCY_ID:
            Store_EMERGENCY_Msg(pHeader->StdId, RxData, pHeader->DLC);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6818      	ldr	r0, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	461a      	mov	r2, r3
 80011d2:	6839      	ldr	r1, [r7, #0]
 80011d4:	f7ff feda 	bl	8000f8c <Store_EMERGENCY_Msg>
            break;
 80011d8:	e01a      	b.n	8001210 <store_msg+0x74>
        case BMS_ID:
            Store_BMS_Msg(pHeader->StdId, RxData, pHeader->DLC);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6818      	ldr	r0, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	461a      	mov	r2, r3
 80011e4:	6839      	ldr	r1, [r7, #0]
 80011e6:	f7ff fef3 	bl	8000fd0 <Store_BMS_Msg>
            break;
 80011ea:	e011      	b.n	8001210 <store_msg+0x74>
        case SW_ID:
            Store_SW_Msg(pHeader->StdId, RxData, pHeader->DLC);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	461a      	mov	r2, r3
 80011f6:	6839      	ldr	r1, [r7, #0]
 80011f8:	f7ff ff0c 	bl	8001014 <Store_SW_Msg>
            break;
 80011fc:	e008      	b.n	8001210 <store_msg+0x74>
        case APPS_ID:
            Store_APPS_Msg(pHeader->StdId, RxData, pHeader->DLC);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	461a      	mov	r2, r3
 8001208:	6839      	ldr	r1, [r7, #0]
 800120a:	f7ff ff3d 	bl	8001088 <Store_APPS_Msg>
            break;
 800120e:	bf00      	nop
    }
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <FEB_CAN_Filter_Config>:
uint32_t TxMailbox;
uint8_t Inverter_enable = 0;
uint8_t Inverter_enable_lockout = 1;
extern UART_HandleTypeDef huart2;

void FEB_CAN_Filter_Config(CAN_HandleTypeDef* hcan, const AddressIdType* filter_array, uint8_t filter_array_len, uint8_t FIFO_Assignment) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b09a      	sub	sp, #104	; 0x68
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	4611      	mov	r1, r2
 8001224:	461a      	mov	r2, r3
 8001226:	460b      	mov	r3, r1
 8001228:	71fb      	strb	r3, [r7, #7]
 800122a:	4613      	mov	r3, r2
 800122c:	71bb      	strb	r3, [r7, #6]
	for (int i = 0; i < filter_array_len; i++) {
 800122e:	2300      	movs	r3, #0
 8001230:	667b      	str	r3, [r7, #100]	; 0x64
 8001232:	e027      	b.n	8001284 <FEB_CAN_Filter_Config+0x6c>
		CAN_FilterTypeDef filter_config;

		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8001234:	2301      	movs	r3, #1
 8001236:	637b      	str	r3, [r7, #52]	; 0x34
		filter_config.FilterBank = i;
 8001238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.FilterFIFOAssignment = FIFO_Assignment;
 800123c:	79bb      	ldrb	r3, [r7, #6]
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.FilterIdHigh = filter_array[i] << (16 - BITS_PER_ID);
 8001240:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	68ba      	ldr	r2, [r7, #8]
 8001246:	4413      	add	r3, r2
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	025b      	lsls	r3, r3, #9
 800124c:	617b      	str	r3, [r7, #20]
		filter_config.FilterIdLow = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
		filter_config.FilterMaskIdHigh = 0x7F << (16 - BITS_PER_ID);
 8001252:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8001256:	61fb      	str	r3, [r7, #28]
		filter_config.FilterMaskIdLow = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 800125c:	2300      	movs	r3, #0
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8001260:	2301      	movs	r3, #1
 8001262:	633b      	str	r3, [r7, #48]	; 0x30
		filter_config.SlaveStartFilterBank = 27;
 8001264:	231b      	movs	r3, #27
 8001266:	63bb      	str	r3, [r7, #56]	; 0x38

		if(HAL_CAN_ConfigFilter(hcan, &filter_config))
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f001 ff22 	bl	80030b8 <HAL_CAN_ConfigFilter>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <FEB_CAN_Filter_Config+0x66>
		{
		  Error_Handler();
 800127a:	f000 fe09 	bl	8001e90 <Error_Handler>
	for (int i = 0; i < filter_array_len; i++) {
 800127e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001280:	3301      	adds	r3, #1
 8001282:	667b      	str	r3, [r7, #100]	; 0x64
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001288:	429a      	cmp	r2, r3
 800128a:	dbd3      	blt.n	8001234 <FEB_CAN_Filter_Config+0x1c>
	}

	// for receiving motor info
	CAN_FilterTypeDef filter_config;

	filter_config.FilterActivation = CAN_FILTER_ENABLE;
 800128c:	2301      	movs	r3, #1
 800128e:	65fb      	str	r3, [r7, #92]	; 0x5c
	filter_config.FilterBank = filter_array_len;
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	653b      	str	r3, [r7, #80]	; 0x50
	filter_config.FilterFIFOAssignment = FIFO_Assignment;
 8001294:	79bb      	ldrb	r3, [r7, #6]
 8001296:	64fb      	str	r3, [r7, #76]	; 0x4c
	filter_config.FilterIdHigh = 0xAA << 5;
 8001298:	f44f 53aa 	mov.w	r3, #5440	; 0x1540
 800129c:	63fb      	str	r3, [r7, #60]	; 0x3c
	filter_config.FilterIdLow = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	643b      	str	r3, [r7, #64]	; 0x40
	filter_config.FilterMaskIdHigh = 0x7FF << 5;
 80012a2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80012a6:	647b      	str	r3, [r7, #68]	; 0x44
	filter_config.FilterMaskIdLow = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	64bb      	str	r3, [r7, #72]	; 0x48
	filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	657b      	str	r3, [r7, #84]	; 0x54
	filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 80012b0:	2301      	movs	r3, #1
 80012b2:	65bb      	str	r3, [r7, #88]	; 0x58
	filter_config.SlaveStartFilterBank = 27;
 80012b4:	231b      	movs	r3, #27
 80012b6:	663b      	str	r3, [r7, #96]	; 0x60

	if(HAL_CAN_ConfigFilter(hcan, &filter_config))
 80012b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012bc:	4619      	mov	r1, r3
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f001 fefa 	bl	80030b8 <HAL_CAN_ConfigFilter>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <FEB_CAN_Filter_Config+0xb6>
	{
	  Error_Handler();
 80012ca:	f000 fde1 	bl	8001e90 <Error_Handler>
	}

}
 80012ce:	bf00      	nop
 80012d0:	3768      	adds	r7, #104	; 0x68
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <FEB_CAN_Init>:

void FEB_CAN_Init(CAN_HandleTypeDef* hcan, uint32_t NODE_ID) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
	// Select Rx FIFO
	uint8_t FIFO_Assignment;
	uint32_t FIFO_Interrupt;
	if (hcan->Instance == CAN1) {
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a1c      	ldr	r2, [pc, #112]	; (8001358 <FEB_CAN_Init+0x80>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d104      	bne.n	80012f6 <FEB_CAN_Init+0x1e>
		FIFO_Assignment = CAN_RX_FIFO0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO0_MSG_PENDING;
 80012f0:	2302      	movs	r3, #2
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	e008      	b.n	8001308 <FEB_CAN_Init+0x30>
	} else if (hcan->Instance == CAN2) {
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a18      	ldr	r2, [pc, #96]	; (800135c <FEB_CAN_Init+0x84>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d103      	bne.n	8001308 <FEB_CAN_Init+0x30>
		FIFO_Assignment = CAN_RX_FIFO1;
 8001300:	2301      	movs	r3, #1
 8001302:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO1_MSG_PENDING;
 8001304:	2310      	movs	r3, #16
 8001306:	613b      	str	r3, [r7, #16]
	}

	// Initialize transmission header
	TxHeader.IDE = CAN_ID_STD;
 8001308:	4b15      	ldr	r3, [pc, #84]	; (8001360 <FEB_CAN_Init+0x88>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <FEB_CAN_Init+0x88>)
 8001310:	2200      	movs	r2, #0
 8001312:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <FEB_CAN_Init+0x88>)
 8001316:	2200      	movs	r2, #0
 8001318:	751a      	strb	r2, [r3, #20]

	// Initialize CAN filters
	const AddressIdType* filter_array;
	FilterArrayLength filter_num;
	filter_array  = assign_filter_array(NODE_ID);
 800131a:	6838      	ldr	r0, [r7, #0]
 800131c:	f7ff feee 	bl	80010fc <assign_filter_array>
 8001320:	60f8      	str	r0, [r7, #12]
	filter_num = assign_filter_array_legnth(NODE_ID);
 8001322:	6838      	ldr	r0, [r7, #0]
 8001324:	f7ff ff16 	bl	8001154 <assign_filter_array_legnth>
 8001328:	4603      	mov	r3, r0
 800132a:	72fb      	strb	r3, [r7, #11]
	FEB_CAN_Filter_Config(hcan, filter_array, filter_num, FIFO_Assignment);
 800132c:	7dfb      	ldrb	r3, [r7, #23]
 800132e:	7afa      	ldrb	r2, [r7, #11]
 8001330:	68f9      	ldr	r1, [r7, #12]
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ff70 	bl	8001218 <FEB_CAN_Filter_Config>

	// Start CAN peripheral
	if (HAL_CAN_Start(hcan) != HAL_OK) {
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f001 ff9d 	bl	8003278 <HAL_CAN_Start>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <FEB_CAN_Init+0x70>
	  Error_Handler();
 8001344:	f000 fda4 	bl	8001e90 <Error_Handler>
	}

	// Activate receive interrupt
	HAL_CAN_ActivateNotification(hcan, FIFO_Interrupt);
 8001348:	6939      	ldr	r1, [r7, #16]
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f002 f9fa 	bl	8003744 <HAL_CAN_ActivateNotification>

}
 8001350:	bf00      	nop
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40006400 	.word	0x40006400
 800135c:	40006800 	.word	0x40006800
 8001360:	2000021c 	.word	0x2000021c

08001364 <FEB_CAN_Receive>:

void FEB_CAN_Receive(CAN_HandleTypeDef *hcan, uint32_t CAN_RX_FIFO) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO, &RxHeader, RxData) != HAL_OK) {
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <FEB_CAN_Receive+0x54>)
 8001370:	4a12      	ldr	r2, [pc, #72]	; (80013bc <FEB_CAN_Receive+0x58>)
 8001372:	6839      	ldr	r1, [r7, #0]
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f002 f8d3 	bl	8003520 <HAL_CAN_GetRxMessage>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <FEB_CAN_Receive+0x20>
		Error_Handler();
 8001380:	f000 fd86 	bl	8001e90 <Error_Handler>
	}
	if (RxHeader.StdId == 0x0AA) { //internal states from the inverter
 8001384:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <FEB_CAN_Receive+0x58>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2baa      	cmp	r3, #170	; 0xaa
 800138a:	d10d      	bne.n	80013a8 <FEB_CAN_Receive+0x44>
		Inverter_enable = (RxData[6] & 0x1); // bit 0
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <FEB_CAN_Receive+0x54>)
 800138e:	799b      	ldrb	r3, [r3, #6]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <FEB_CAN_Receive+0x5c>)
 8001398:	701a      	strb	r2, [r3, #0]
		Inverter_enable_lockout = (RxData[6] & 0x80) >> 7; // bit 7
 800139a:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <FEB_CAN_Receive+0x54>)
 800139c:	799b      	ldrb	r3, [r3, #6]
 800139e:	09db      	lsrs	r3, r3, #7
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <FEB_CAN_Receive+0x60>)
 80013a4:	701a      	strb	r2, [r3, #0]
//			buf_len = sprintf(buf, "byte6: %d, enable:%d lockout:%d\n", RxData[6], Inverter_enable, Inverter_enable_lockout);
//			HAL_UART_Transmit(&huart2,(uint8_t *)buf, buf_len, HAL_MAX_DELAY);
	} else {
		store_msg(&RxHeader, RxData);
	}
}
 80013a6:	e003      	b.n	80013b0 <FEB_CAN_Receive+0x4c>
		store_msg(&RxHeader, RxData);
 80013a8:	4903      	ldr	r1, [pc, #12]	; (80013b8 <FEB_CAN_Receive+0x54>)
 80013aa:	4804      	ldr	r0, [pc, #16]	; (80013bc <FEB_CAN_Receive+0x58>)
 80013ac:	f7ff fef6 	bl	800119c <store_msg>
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000258 	.word	0x20000258
 80013bc:	20000234 	.word	0x20000234
 80013c0:	20000264 	.word	0x20000264
 80013c4:	20000000 	.word	0x20000000

080013c8 <FEB_CAN_Transmit>:

void FEB_CAN_Transmit(CAN_HandleTypeDef* hcan, AddressIdType Msg_ID, void* pData, uint8_t size) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
 80013d4:	70fb      	strb	r3, [r7, #3]
	// Copy data to Tx buffer
	memcpy(TxData, pData, size);
 80013d6:	78fb      	ldrb	r3, [r7, #3]
 80013d8:	461a      	mov	r2, r3
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	480f      	ldr	r0, [pc, #60]	; (800141c <FEB_CAN_Transmit+0x54>)
 80013de:	f004 fbad 	bl	8005b3c <memcpy>

	// Update Tx header
	TxHeader.StdId = Msg_ID;
 80013e2:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <FEB_CAN_Transmit+0x58>)
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	6013      	str	r3, [r2, #0]
	TxHeader.DLC = size;
 80013e8:	78fb      	ldrb	r3, [r7, #3]
 80013ea:	4a0d      	ldr	r2, [pc, #52]	; (8001420 <FEB_CAN_Transmit+0x58>)
 80013ec:	6113      	str	r3, [r2, #16]

	// Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(hcan) == 0) {}
 80013ee:	bf00      	nop
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f002 f860 	bl	80034b6 <HAL_CAN_GetTxMailboxesFreeLevel>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0f9      	beq.n	80013f0 <FEB_CAN_Transmit+0x28>

	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <FEB_CAN_Transmit+0x5c>)
 80013fe:	4a07      	ldr	r2, [pc, #28]	; (800141c <FEB_CAN_Transmit+0x54>)
 8001400:	4907      	ldr	r1, [pc, #28]	; (8001420 <FEB_CAN_Transmit+0x58>)
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f001 ff7c 	bl	8003300 <HAL_CAN_AddTxMessage>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <FEB_CAN_Transmit+0x4a>
	{
	  Error_Handler();
 800140e:	f000 fd3f 	bl	8001e90 <Error_Handler>
	}
}
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000250 	.word	0x20000250
 8001420:	2000021c 	.word	0x2000021c
 8001424:	20000260 	.word	0x20000260

08001428 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	FEB_CAN_Receive(hcan, CAN_RX_FIFO0);
 8001430:	2100      	movs	r1, #0
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ff96 	bl	8001364 <FEB_CAN_Receive>
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	FEB_CAN_Receive(hcan, CAN_RX_FIFO1);
 8001448:	2101      	movs	r1, #1
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ff8a 	bl	8001364 <FEB_CAN_Receive>
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <FEB_Normalized_Acc_Pedals>:

//float getPedal(uint32_t variable){
//	return (float)variable*3.3/4096;
//}

float FEB_Normalized_Acc_Pedals(){
 8001458:	b580      	push	{r7, lr}
 800145a:	b0a6      	sub	sp, #152	; 0x98
 800145c:	af00      	add	r7, sp, #0
	// raw ADC readings of the two acc pedal sensors
	uint16_t acc_pedal_1 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 800145e:	2102      	movs	r1, #2
 8001460:	4891      	ldr	r0, [pc, #580]	; (80016a8 <FEB_Normalized_Acc_Pedals+0x250>)
 8001462:	f001 fb5b 	bl	8002b1c <HAL_ADCEx_InjectedGetValue>
 8001466:	4603      	mov	r3, r0
 8001468:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	uint16_t acc_pedal_2 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 800146c:	2103      	movs	r1, #3
 800146e:	488e      	ldr	r0, [pc, #568]	; (80016a8 <FEB_Normalized_Acc_Pedals+0x250>)
 8001470:	f001 fb54 	bl	8002b1c <HAL_ADCEx_InjectedGetValue>
 8001474:	4603      	mov	r3, r0
 8001476:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	char buf[128];
	uint8_t buf_len;
	buf_len = sprintf(buf, "acc1:%d acc2:%d\n", acc_pedal_1, acc_pedal_2);
 800147a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800147e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001482:	1d38      	adds	r0, r7, #4
 8001484:	4989      	ldr	r1, [pc, #548]	; (80016ac <FEB_Normalized_Acc_Pedals+0x254>)
 8001486:	f004 ffd9 	bl	800643c <siprintf>
 800148a:	4603      	mov	r3, r0
 800148c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	HAL_UART_Transmit(&huart2,(uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 8001490:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001494:	b29a      	uxth	r2, r3
 8001496:	1d39      	adds	r1, r7, #4
 8001498:	f04f 33ff 	mov.w	r3, #4294967295
 800149c:	4884      	ldr	r0, [pc, #528]	; (80016b0 <FEB_Normalized_Acc_Pedals+0x258>)
 800149e:	f003 ffae 	bl	80053fe <HAL_UART_Transmit>


	// check implausibility for shorting
	if (acc_pedal_1 < Sensor_Min || acc_pedal_1 > Sensor_Max
 80014a2:	f240 1299 	movw	r2, #409	; 0x199
 80014a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d320      	bcc.n	80014f0 <FEB_Normalized_Acc_Pedals+0x98>
 80014ae:	f640 6265 	movw	r2, #3685	; 0xe65
 80014b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d81a      	bhi.n	80014f0 <FEB_Normalized_Acc_Pedals+0x98>
			|| acc_pedal_2 < Sensor_Min || acc_pedal_2 > Sensor_Max
 80014ba:	f240 1299 	movw	r2, #409	; 0x199
 80014be:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d314      	bcc.n	80014f0 <FEB_Normalized_Acc_Pedals+0x98>
 80014c6:	f640 6265 	movw	r2, #3685	; 0xe65
 80014ca:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d80e      	bhi.n	80014f0 <FEB_Normalized_Acc_Pedals+0x98>
			|| abs(acc_pedal_1 - acc_pedal_2) < 100) {
 80014d2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80014d6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80014e0:	db0c      	blt.n	80014fc <FEB_Normalized_Acc_Pedals+0xa4>
 80014e2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80014e6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b63      	cmp	r3, #99	; 0x63
 80014ee:	dc05      	bgt.n	80014fc <FEB_Normalized_Acc_Pedals+0xa4>
		isImpl = true;
 80014f0:	4b70      	ldr	r3, [pc, #448]	; (80016b4 <FEB_Normalized_Acc_Pedals+0x25c>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	701a      	strb	r2, [r3, #0]
		return 0.0;
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	e0b7      	b.n	800166c <FEB_Normalized_Acc_Pedals+0x214>
	}

	//convert to % travel
	// sensor 1 has positive slope
	float ped1_normalized = (acc_pedal_1 - ACC_PEDAL_1_START)/ (ACC_PEDAL_1_END - ACC_PEDAL_1_START);
 80014fc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f82f 	bl	8000564 <__aeabi_i2d>
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	4b6b      	ldr	r3, [pc, #428]	; (80016b8 <FEB_Normalized_Acc_Pedals+0x260>)
 800150c:	f7fe fedc 	bl	80002c8 <__aeabi_dsub>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	4b67      	ldr	r3, [pc, #412]	; (80016bc <FEB_Normalized_Acc_Pedals+0x264>)
 800151e:	f7ff f9b5 	bl	800088c <__aeabi_ddiv>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f7ff fb5d 	bl	8000be8 <__aeabi_d2f>
 800152e:	4603      	mov	r3, r0
 8001530:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	// sensor 2 has negative slope
	float ped2_normalized = (acc_pedal_2 - ACC_PEDAL_2_START) / (ACC_PEDAL_2_END - ACC_PEDAL_2_START);
 8001534:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f813 	bl	8000564 <__aeabi_i2d>
 800153e:	a350      	add	r3, pc, #320	; (adr r3, 8001680 <FEB_Normalized_Acc_Pedals+0x228>)
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	f7fe fec0 	bl	80002c8 <__aeabi_dsub>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	a34d      	add	r3, pc, #308	; (adr r3, 8001688 <FEB_Normalized_Acc_Pedals+0x230>)
 8001552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001556:	f7ff f999 	bl	800088c <__aeabi_ddiv>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	f7ff fb41 	bl	8000be8 <__aeabi_d2f>
 8001566:	4603      	mov	r3, r0
 8001568:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	// sensor measurements mismatch by more than 10%
	if(abs(ped1_normalized - ped2_normalized) > 0.1 ){
 800156c:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001570:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001574:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001578:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800157c:	ee17 3a90 	vmov	r3, s15
 8001580:	2b00      	cmp	r3, #0
 8001582:	bfb8      	it	lt
 8001584:	425b      	neglt	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	dd05      	ble.n	8001596 <FEB_Normalized_Acc_Pedals+0x13e>
		isImpl = true;
 800158a:	4b4a      	ldr	r3, [pc, #296]	; (80016b4 <FEB_Normalized_Acc_Pedals+0x25c>)
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
		return 0.0;
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	e06a      	b.n	800166c <FEB_Normalized_Acc_Pedals+0x214>
	}

	float final_normalized = 0.5*(ped1_normalized + ped2_normalized);
 8001596:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800159a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800159e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80015a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015aa:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

	// Implausiblity check if both pedals are stepped
	if (normalized_brake > 0.2 && normalized_acc > 0.1) {
 80015ae:	4b44      	ldr	r3, [pc, #272]	; (80016c0 <FEB_Normalized_Acc_Pedals+0x268>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ffe8 	bl	8000588 <__aeabi_f2d>
 80015b8:	a335      	add	r3, pc, #212	; (adr r3, 8001690 <FEB_Normalized_Acc_Pedals+0x238>)
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	f7ff facb 	bl	8000b58 <__aeabi_dcmpgt>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00f      	beq.n	80015e8 <FEB_Normalized_Acc_Pedals+0x190>
 80015c8:	4b3e      	ldr	r3, [pc, #248]	; (80016c4 <FEB_Normalized_Acc_Pedals+0x26c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe ffdb 	bl	8000588 <__aeabi_f2d>
 80015d2:	a331      	add	r3, pc, #196	; (adr r3, 8001698 <FEB_Normalized_Acc_Pedals+0x240>)
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	f7ff fabe 	bl	8000b58 <__aeabi_dcmpgt>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d002      	beq.n	80015e8 <FEB_Normalized_Acc_Pedals+0x190>
		isImpl = true;
 80015e2:	4b34      	ldr	r3, [pc, #208]	; (80016b4 <FEB_Normalized_Acc_Pedals+0x25c>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	701a      	strb	r2, [r3, #0]
	}

	// recover from implausibility if acc pedal is not 5% less
	if (final_normalized < 0.05 && isImpl) {
 80015e8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80015ec:	f7fe ffcc 	bl	8000588 <__aeabi_f2d>
 80015f0:	a32b      	add	r3, pc, #172	; (adr r3, 80016a0 <FEB_Normalized_Acc_Pedals+0x248>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	f7ff fa91 	bl	8000b1c <__aeabi_dcmplt>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d006      	beq.n	800160e <FEB_Normalized_Acc_Pedals+0x1b6>
 8001600:	4b2c      	ldr	r3, [pc, #176]	; (80016b4 <FEB_Normalized_Acc_Pedals+0x25c>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d002      	beq.n	800160e <FEB_Normalized_Acc_Pedals+0x1b6>
		isImpl = false;
 8001608:	4b2a      	ldr	r3, [pc, #168]	; (80016b4 <FEB_Normalized_Acc_Pedals+0x25c>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
	}

	if (!isImpl) {
 800160e:	4b29      	ldr	r3, [pc, #164]	; (80016b4 <FEB_Normalized_Acc_Pedals+0x25c>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	f083 0301 	eor.w	r3, r3, #1
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d025      	beq.n	8001668 <FEB_Normalized_Acc_Pedals+0x210>
		final_normalized = final_normalized > 1 ? 1 : final_normalized;
 800161c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001620:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001624:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162c:	dd02      	ble.n	8001634 <FEB_Normalized_Acc_Pedals+0x1dc>
 800162e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001632:	e001      	b.n	8001638 <FEB_Normalized_Acc_Pedals+0x1e0>
 8001634:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001638:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		final_normalized = final_normalized < 0.05 ? 0 : final_normalized;
 800163c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001640:	f7fe ffa2 	bl	8000588 <__aeabi_f2d>
 8001644:	a316      	add	r3, pc, #88	; (adr r3, 80016a0 <FEB_Normalized_Acc_Pedals+0x248>)
 8001646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164a:	f7ff fa67 	bl	8000b1c <__aeabi_dcmplt>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <FEB_Normalized_Acc_Pedals+0x202>
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	e001      	b.n	800165e <FEB_Normalized_Acc_Pedals+0x206>
 800165a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800165e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		return final_normalized;
 8001662:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001666:	e001      	b.n	800166c <FEB_Normalized_Acc_Pedals+0x214>
	} else {
		return 0.0;
 8001668:	f04f 0300 	mov.w	r3, #0
	}
}
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eeb0 0a67 	vmov.f32	s0, s15
 8001674:	3798      	adds	r7, #152	; 0x98
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	f3af 8000 	nop.w
 8001680:	00000000 	.word	0x00000000
 8001684:	40a95a00 	.word	0x40a95a00
 8001688:	00000000 	.word	0x00000000
 800168c:	c06f4000 	.word	0xc06f4000
 8001690:	9999999a 	.word	0x9999999a
 8001694:	3fc99999 	.word	0x3fc99999
 8001698:	9999999a 	.word	0x9999999a
 800169c:	3fb99999 	.word	0x3fb99999
 80016a0:	9999999a 	.word	0x9999999a
 80016a4:	3fa99999 	.word	0x3fa99999
 80016a8:	20000268 	.word	0x20000268
 80016ac:	08008930 	.word	0x08008930
 80016b0:	20000320 	.word	0x20000320
 80016b4:	20000364 	.word	0x20000364
 80016b8:	408ae000 	.word	0x408ae000
 80016bc:	406f4000 	.word	0x406f4000
 80016c0:	20000370 	.word	0x20000370
 80016c4:	2000036c 	.word	0x2000036c

080016c8 <FEB_Normalized_Brake_Pedals>:

float FEB_Normalized_Brake_Pedals(){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b0a2      	sub	sp, #136	; 0x88
 80016cc:	af00      	add	r7, sp, #0
	uint16_t brake_pedal_1 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 80016ce:	2101      	movs	r1, #1
 80016d0:	483b      	ldr	r0, [pc, #236]	; (80017c0 <FEB_Normalized_Brake_Pedals+0xf8>)
 80016d2:	f001 fa23 	bl	8002b1c <HAL_ADCEx_InjectedGetValue>
 80016d6:	4603      	mov	r3, r0
 80016d8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	char buf[128];
		uint8_t buf_len;
		buf_len = sprintf(buf, "brake%d\n", brake_pedal_1);
 80016dc:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 80016e0:	463b      	mov	r3, r7
 80016e2:	4938      	ldr	r1, [pc, #224]	; (80017c4 <FEB_Normalized_Brake_Pedals+0xfc>)
 80016e4:	4618      	mov	r0, r3
 80016e6:	f004 fea9 	bl	800643c <siprintf>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		HAL_UART_Transmit(&huart2,(uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 80016f0:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	4639      	mov	r1, r7
 80016f8:	f04f 33ff 	mov.w	r3, #4294967295
 80016fc:	4832      	ldr	r0, [pc, #200]	; (80017c8 <FEB_Normalized_Brake_Pedals+0x100>)
 80016fe:	f003 fe7e 	bl	80053fe <HAL_UART_Transmit>

	float final_normalized = (brake_pedal_1 - BRAKE_PEDAL_1_START)/ (BRAKE_PEDAL_1_END - BRAKE_PEDAL_1_START);
 8001702:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe ff2c 	bl	8000564 <__aeabi_i2d>
 800170c:	a328      	add	r3, pc, #160	; (adr r3, 80017b0 <FEB_Normalized_Brake_Pedals+0xe8>)
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	f7fe fdd9 	bl	80002c8 <__aeabi_dsub>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <FEB_Normalized_Brake_Pedals+0x104>)
 8001724:	f7ff f8b2 	bl	800088c <__aeabi_ddiv>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	f7ff fa5a 	bl	8000be8 <__aeabi_d2f>
 8001734:	4603      	mov	r3, r0
 8001736:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	final_normalized = final_normalized > 1 ? 1 : final_normalized;
 800173a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800173e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001742:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174a:	dd02      	ble.n	8001752 <FEB_Normalized_Brake_Pedals+0x8a>
 800174c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001750:	e001      	b.n	8001756 <FEB_Normalized_Brake_Pedals+0x8e>
 8001752:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001756:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	final_normalized = final_normalized < 0.05 ? 0 : final_normalized;
 800175a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800175e:	f7fe ff13 	bl	8000588 <__aeabi_f2d>
 8001762:	a315      	add	r3, pc, #84	; (adr r3, 80017b8 <FEB_Normalized_Brake_Pedals+0xf0>)
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	f7ff f9d8 	bl	8000b1c <__aeabi_dcmplt>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d002      	beq.n	8001778 <FEB_Normalized_Brake_Pedals+0xb0>
 8001772:	f04f 0300 	mov.w	r3, #0
 8001776:	e001      	b.n	800177c <FEB_Normalized_Brake_Pedals+0xb4>
 8001778:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800177c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	if (brake_pedal_1 < 10 || brake_pedal_1 > 4085) {
 8001780:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001784:	2b09      	cmp	r3, #9
 8001786:	d905      	bls.n	8001794 <FEB_Normalized_Brake_Pedals+0xcc>
 8001788:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800178c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8001790:	4293      	cmp	r3, r2
 8001792:	d902      	bls.n	800179a <FEB_Normalized_Brake_Pedals+0xd2>
		return 0.0;
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	e001      	b.n	800179e <FEB_Normalized_Brake_Pedals+0xd6>
	}

	return final_normalized;
 800179a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
}
 800179e:	ee07 3a90 	vmov	s15, r3
 80017a2:	eeb0 0a67 	vmov.f32	s0, s15
 80017a6:	3788      	adds	r7, #136	; 0x88
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	f3af 8000 	nop.w
 80017b0:	00000000 	.word	0x00000000
 80017b4:	40781000 	.word	0x40781000
 80017b8:	9999999a 	.word	0x9999999a
 80017bc:	3fa99999 	.word	0x3fa99999
 80017c0:	20000268 	.word	0x20000268
 80017c4:	08008944 	.word	0x08008944
 80017c8:	20000320 	.word	0x20000320
 80017cc:	40668000 	.word	0x40668000

080017d0 <FEB_APPS_sendBrake>:


void FEB_APPS_sendBrake(){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	FEB_CAN_Transmit(&hcan1,APPS_BRAKE_PEDAL,&normalized_brake,sizeof(float));
 80017d4:	2304      	movs	r3, #4
 80017d6:	4a03      	ldr	r2, [pc, #12]	; (80017e4 <FEB_APPS_sendBrake+0x14>)
 80017d8:	2132      	movs	r1, #50	; 0x32
 80017da:	4803      	ldr	r0, [pc, #12]	; (80017e8 <FEB_APPS_sendBrake+0x18>)
 80017dc:	f7ff fdf4 	bl	80013c8 <FEB_CAN_Transmit>
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000370 	.word	0x20000370
 80017e8:	200002b0 	.word	0x200002b0

080017ec <FEB_RMS_updateTorque>:

void FEB_RMS_updateTorque() {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
  uint8_t message_data[8] = {RMSControl.torque & 0xFF, RMSControl.torque >> 8, 0, 0, 0, RMSControl.enabled, 0, 0};
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <FEB_RMS_updateTorque+0x48>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	703b      	strb	r3, [r7, #0]
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <FEB_RMS_updateTorque+0x48>)
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	0a1b      	lsrs	r3, r3, #8
 8001800:	b29b      	uxth	r3, r3
 8001802:	b2db      	uxtb	r3, r3
 8001804:	707b      	strb	r3, [r7, #1]
 8001806:	2300      	movs	r3, #0
 8001808:	70bb      	strb	r3, [r7, #2]
 800180a:	2300      	movs	r3, #0
 800180c:	70fb      	strb	r3, [r7, #3]
 800180e:	2300      	movs	r3, #0
 8001810:	713b      	strb	r3, [r7, #4]
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <FEB_RMS_updateTorque+0x48>)
 8001814:	789b      	ldrb	r3, [r3, #2]
 8001816:	717b      	strb	r3, [r7, #5]
 8001818:	2300      	movs	r3, #0
 800181a:	71bb      	strb	r3, [r7, #6]
 800181c:	2300      	movs	r3, #0
 800181e:	71fb      	strb	r3, [r7, #7]
  FEB_CAN_Transmit(&hcan1, 0x0C0, message_data, 8);
 8001820:	463a      	mov	r2, r7
 8001822:	2308      	movs	r3, #8
 8001824:	21c0      	movs	r1, #192	; 0xc0
 8001826:	4804      	ldr	r0, [pc, #16]	; (8001838 <FEB_RMS_updateTorque+0x4c>)
 8001828:	f7ff fdce 	bl	80013c8 <FEB_CAN_Transmit>
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000368 	.word	0x20000368
 8001838:	200002b0 	.word	0x200002b0

0800183c <FEB_RMS_setTorque>:

void FEB_RMS_setTorque(uint16_t torque) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	80fb      	strh	r3, [r7, #6]
  RMSControl.torque = torque * 10;
 8001846:	88fb      	ldrh	r3, [r7, #6]
 8001848:	461a      	mov	r2, r3
 800184a:	0092      	lsls	r2, r2, #2
 800184c:	4413      	add	r3, r2
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	b29a      	uxth	r2, r3
 8001852:	4b04      	ldr	r3, [pc, #16]	; (8001864 <FEB_RMS_setTorque+0x28>)
 8001854:	801a      	strh	r2, [r3, #0]
  FEB_RMS_updateTorque();
 8001856:	f7ff ffc9 	bl	80017ec <FEB_RMS_updateTorque>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000368 	.word	0x20000368

08001868 <FEB_RMS_Init>:
void FEB_RMS_disable() {
  RMSControl.enabled = 0;
  FEB_RMS_updateTorque();
}

void FEB_RMS_Init(){
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0
	// Clear fault in case inverter is powered up before disable command is sent
	uint8_t fault_clear_addr = 20;
 800186e:	2314      	movs	r3, #20
 8001870:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t fault_clear_data = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	// 0,1: param addr
	// 2: r/w cmd
	// 3: NA
	// 4,5: data
	// 6,7: NA
	uint8_t param_msg[8] = {fault_clear_addr, 0, 1, 0, fault_clear_data, 0, 0, 0};
 800187a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800187e:	753b      	strb	r3, [r7, #20]
 8001880:	2300      	movs	r3, #0
 8001882:	757b      	strb	r3, [r7, #21]
 8001884:	2301      	movs	r3, #1
 8001886:	75bb      	strb	r3, [r7, #22]
 8001888:	2300      	movs	r3, #0
 800188a:	75fb      	strb	r3, [r7, #23]
 800188c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001890:	763b      	strb	r3, [r7, #24]
 8001892:	2300      	movs	r3, #0
 8001894:	767b      	strb	r3, [r7, #25]
 8001896:	2300      	movs	r3, #0
 8001898:	76bb      	strb	r3, [r7, #26]
 800189a:	2300      	movs	r3, #0
 800189c:	76fb      	strb	r3, [r7, #27]
	FEB_CAN_Transmit(&hcan1, 0x0C1, param_msg, 8);
 800189e:	f107 0214 	add.w	r2, r7, #20
 80018a2:	2308      	movs	r3, #8
 80018a4:	21c1      	movs	r1, #193	; 0xc1
 80018a6:	4820      	ldr	r0, [pc, #128]	; (8001928 <FEB_RMS_Init+0xc0>)
 80018a8:	f7ff fd8e 	bl	80013c8 <FEB_CAN_Transmit>

	// send disable command to remove lockout
	uint8_t message_data[8] = {0,0,0,0,0,0,0};
 80018ac:	4a1f      	ldr	r2, [pc, #124]	; (800192c <FEB_RMS_Init+0xc4>)
 80018ae:	f107 030c 	add.w	r3, r7, #12
 80018b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018b6:	e883 0003 	stmia.w	r3, {r0, r1}
	for (int i = 0; i < 10; i++) {
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
 80018be:	e00c      	b.n	80018da <FEB_RMS_Init+0x72>
		FEB_CAN_Transmit(&hcan1, 0x0C0, message_data, 8);
 80018c0:	f107 020c 	add.w	r2, r7, #12
 80018c4:	2308      	movs	r3, #8
 80018c6:	21c0      	movs	r1, #192	; 0xc0
 80018c8:	4817      	ldr	r0, [pc, #92]	; (8001928 <FEB_RMS_Init+0xc0>)
 80018ca:	f7ff fd7d 	bl	80013c8 <FEB_CAN_Transmit>
		HAL_Delay(10);
 80018ce:	200a      	movs	r0, #10
 80018d0:	f000 fdc4 	bl	800245c <HAL_Delay>
	for (int i = 0; i < 10; i++) {
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	3301      	adds	r3, #1
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	2b09      	cmp	r3, #9
 80018de:	ddef      	ble.n	80018c0 <FEB_RMS_Init+0x58>
	}

	// Select CAN msg to broadcast
	uint8_t param_addr = 148;
 80018e0:	2394      	movs	r3, #148	; 0x94
 80018e2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t CAN_active_msg_byte4 = 0b10100000; // motor position, input voltage
 80018e6:	23a0      	movs	r3, #160	; 0xa0
 80018e8:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t CAN_active_msg_byte5 = 0b00000100; // internal states
 80018ec:	2304      	movs	r3, #4
 80018ee:	77fb      	strb	r3, [r7, #31]
//	uint8_t CAN_active_msg_byte4 = 0xff;
//	uint8_t CAN_active_msg_byte5 = 0xff;
	uint8_t broadcast_msg[8] = {param_addr, 0, 1, 0, CAN_active_msg_byte4, CAN_active_msg_byte5, 0, 0};
 80018f0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80018f4:	713b      	strb	r3, [r7, #4]
 80018f6:	2300      	movs	r3, #0
 80018f8:	717b      	strb	r3, [r7, #5]
 80018fa:	2301      	movs	r3, #1
 80018fc:	71bb      	strb	r3, [r7, #6]
 80018fe:	2300      	movs	r3, #0
 8001900:	71fb      	strb	r3, [r7, #7]
 8001902:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001906:	723b      	strb	r3, [r7, #8]
 8001908:	7ffb      	ldrb	r3, [r7, #31]
 800190a:	727b      	strb	r3, [r7, #9]
 800190c:	2300      	movs	r3, #0
 800190e:	72bb      	strb	r3, [r7, #10]
 8001910:	2300      	movs	r3, #0
 8001912:	72fb      	strb	r3, [r7, #11]
	FEB_CAN_Transmit(&hcan1, 0x0C1, broadcast_msg, 8);
 8001914:	1d3a      	adds	r2, r7, #4
 8001916:	2308      	movs	r3, #8
 8001918:	21c1      	movs	r1, #193	; 0xc1
 800191a:	4803      	ldr	r0, [pc, #12]	; (8001928 <FEB_RMS_Init+0xc0>)
 800191c:	f7ff fd54 	bl	80013c8 <FEB_CAN_Transmit>
}
 8001920:	bf00      	nop
 8001922:	3728      	adds	r7, #40	; 0x28
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200002b0 	.word	0x200002b0
 800192c:	08008950 	.word	0x08008950

08001930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001934:	b0ab      	sub	sp, #172	; 0xac
 8001936:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001938:	f000 fd1e 	bl	8002378 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800193c:	f000 f8a0 	bl	8001a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001940:	f000 fa4c 	bl	8001ddc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001944:	f000 fa20 	bl	8001d88 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8001948:	f000 f99a 	bl	8001c80 <MX_CAN1_Init>
  MX_ADC1_Init();
 800194c:	f000 f904 	bl	8001b58 <MX_ADC1_Init>
  MX_TIM5_Init();
 8001950:	f000 f9cc 	bl	8001cec <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_InjectedStart(&hadc1);
 8001954:	483e      	ldr	r0, [pc, #248]	; (8001a50 <main+0x120>)
 8001956:	f001 f817 	bl	8002988 <HAL_ADCEx_InjectedStart>
  HAL_TIM_Base_Start(&htim5);
 800195a:	483e      	ldr	r0, [pc, #248]	; (8001a54 <main+0x124>)
 800195c:	f003 fa1c 	bl	8004d98 <HAL_TIM_Base_Start>


  char buf[128];
  uint8_t buf_len;

  FEB_CAN_Init(&hcan1, APPS_ID); // The transceiver must be connected otherwise you get sent into an infinite loop
 8001960:	2103      	movs	r1, #3
 8001962:	483d      	ldr	r0, [pc, #244]	; (8001a58 <main+0x128>)
 8001964:	f7ff fcb8 	bl	80012d8 <FEB_CAN_Init>
  RMSControl.enabled = 0;
 8001968:	4b3c      	ldr	r3, [pc, #240]	; (8001a5c <main+0x12c>)
 800196a:	2200      	movs	r2, #0
 800196c:	709a      	strb	r2, [r3, #2]
  RMSControl.torque= 0.0;
 800196e:	4b3b      	ldr	r3, [pc, #236]	; (8001a5c <main+0x12c>)
 8001970:	2200      	movs	r2, #0
 8001972:	801a      	strh	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //ready to drive
	  if (SW_MESSAGE.ready_to_drive == 1) {
 8001974:	4b3a      	ldr	r3, [pc, #232]	; (8001a60 <main+0x130>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d110      	bne.n	800199e <main+0x6e>
		  normalized_acc = FEB_Normalized_Acc_Pedals();
 800197c:	f7ff fd6c 	bl	8001458 <FEB_Normalized_Acc_Pedals>
 8001980:	eef0 7a40 	vmov.f32	s15, s0
 8001984:	4b37      	ldr	r3, [pc, #220]	; (8001a64 <main+0x134>)
 8001986:	edc3 7a00 	vstr	s15, [r3]
		  if (!RMSControl.enabled) {  // when the car just powered on, driver commands ready to drive but rms is not enabled
 800198a:	4b34      	ldr	r3, [pc, #208]	; (8001a5c <main+0x12c>)
 800198c:	789b      	ldrb	r3, [r3, #2]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d113      	bne.n	80019ba <main+0x8a>
			  FEB_RMS_Init();
 8001992:	f7ff ff69 	bl	8001868 <FEB_RMS_Init>
			  RMSControl.enabled = 1;
 8001996:	4b31      	ldr	r3, [pc, #196]	; (8001a5c <main+0x12c>)
 8001998:	2201      	movs	r2, #1
 800199a:	709a      	strb	r2, [r3, #2]
 800199c:	e00d      	b.n	80019ba <main+0x8a>
		  }
	  } else {
		  normalized_acc = FEB_Normalized_Acc_Pedals();
 800199e:	f7ff fd5b 	bl	8001458 <FEB_Normalized_Acc_Pedals>
 80019a2:	eef0 7a40 	vmov.f32	s15, s0
 80019a6:	4b2f      	ldr	r3, [pc, #188]	; (8001a64 <main+0x134>)
 80019a8:	edc3 7a00 	vstr	s15, [r3]
		  normalized_acc = 0.0;
 80019ac:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <main+0x134>)
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
		  RMSControl.enabled = 0;
 80019b4:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <main+0x12c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	709a      	strb	r2, [r3, #2]
	  }

	  uint16_t torque = (normalized_acc * 130);
 80019ba:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <main+0x134>)
 80019bc:	edd3 7a00 	vldr	s15, [r3]
 80019c0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001a68 <main+0x138>
 80019c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019cc:	ee17 3a90 	vmov	r3, s15
 80019d0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	  normalized_brake = FEB_Normalized_Brake_Pedals();
 80019d4:	f7ff fe78 	bl	80016c8 <FEB_Normalized_Brake_Pedals>
 80019d8:	eef0 7a40 	vmov.f32	s15, s0
 80019dc:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <main+0x13c>)
 80019de:	edc3 7a00 	vstr	s15, [r3]
	  FEB_RMS_setTorque(torque);
 80019e2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff ff28 	bl	800183c <FEB_RMS_setTorque>
	  FEB_APPS_sendBrake();
 80019ec:	f7ff fef0 	bl	80017d0 <FEB_APPS_sendBrake>

	  buf_len = sprintf(buf, "rtd:%d, enable:%d lockout:%d impl:%d acc: %.3f brake: %.3f\n", SW_MESSAGE.ready_to_drive, Inverter_enable, Inverter_enable_lockout, isImpl, normalized_acc, normalized_brake);
 80019f0:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <main+0x130>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	4698      	mov	r8, r3
 80019f6:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <main+0x140>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	4699      	mov	r9, r3
 80019fc:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <main+0x144>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	461e      	mov	r6, r3
 8001a02:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <main+0x148>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <main+0x134>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fdbb 	bl	8000588 <__aeabi_f2d>
 8001a12:	4604      	mov	r4, r0
 8001a14:	460d      	mov	r5, r1
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <main+0x13c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe fdb4 	bl	8000588 <__aeabi_f2d>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	f107 000c 	add.w	r0, r7, #12
 8001a28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001a2c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	9600      	str	r6, [sp, #0]
 8001a36:	464b      	mov	r3, r9
 8001a38:	4642      	mov	r2, r8
 8001a3a:	4910      	ldr	r1, [pc, #64]	; (8001a7c <main+0x14c>)
 8001a3c:	f004 fcfe 	bl	800643c <siprintf>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
//	  HAL_UART_Transmit(&huart2,(uint8_t *)buf, buf_len, 1000);

	  HAL_Delay(SLEEP_TIME);
 8001a46:	200a      	movs	r0, #10
 8001a48:	f000 fd08 	bl	800245c <HAL_Delay>
  {
 8001a4c:	e792      	b.n	8001974 <main+0x44>
 8001a4e:	bf00      	nop
 8001a50:	20000268 	.word	0x20000268
 8001a54:	200002d8 	.word	0x200002d8
 8001a58:	200002b0 	.word	0x200002b0
 8001a5c:	20000368 	.word	0x20000368
 8001a60:	20000208 	.word	0x20000208
 8001a64:	2000036c 	.word	0x2000036c
 8001a68:	43020000 	.word	0x43020000
 8001a6c:	20000370 	.word	0x20000370
 8001a70:	20000264 	.word	0x20000264
 8001a74:	20000000 	.word	0x20000000
 8001a78:	20000364 	.word	0x20000364
 8001a7c:	08008958 	.word	0x08008958

08001a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b094      	sub	sp, #80	; 0x50
 8001a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a86:	f107 031c 	add.w	r3, r7, #28
 8001a8a:	2234      	movs	r2, #52	; 0x34
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f004 f862 	bl	8005b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a94:	f107 0308 	add.w	r3, r7, #8
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	4b29      	ldr	r3, [pc, #164]	; (8001b50 <SystemClock_Config+0xd0>)
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	4a28      	ldr	r2, [pc, #160]	; (8001b50 <SystemClock_Config+0xd0>)
 8001aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab4:	4b26      	ldr	r3, [pc, #152]	; (8001b50 <SystemClock_Config+0xd0>)
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	4b23      	ldr	r3, [pc, #140]	; (8001b54 <SystemClock_Config+0xd4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a22      	ldr	r2, [pc, #136]	; (8001b54 <SystemClock_Config+0xd4>)
 8001aca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <SystemClock_Config+0xd4>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ad8:	603b      	str	r3, [r7, #0]
 8001ada:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001adc:	2301      	movs	r3, #1
 8001ade:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ae0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ae4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001aee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001af0:	2304      	movs	r3, #4
 8001af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001af4:	23a0      	movs	r3, #160	; 0xa0
 8001af6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001af8:	2302      	movs	r3, #2
 8001afa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001afc:	2302      	movs	r3, #2
 8001afe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b00:	2302      	movs	r3, #2
 8001b02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f002 fe57 	bl	80047bc <HAL_RCC_OscConfig>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001b14:	f000 f9bc 	bl	8001e90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b18:	230f      	movs	r3, #15
 8001b1a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b20:	2300      	movs	r3, #0
 8001b22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001b2a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b2e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b30:	f107 0308 	add.w	r3, r7, #8
 8001b34:	2105      	movs	r1, #5
 8001b36:	4618      	mov	r0, r3
 8001b38:	f002 faf6 	bl	8004128 <HAL_RCC_ClockConfig>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001b42:	f000 f9a5 	bl	8001e90 <Error_Handler>
  }
}
 8001b46:	bf00      	nop
 8001b48:	3750      	adds	r7, #80	; 0x50
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40007000 	.word	0x40007000

08001b58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08c      	sub	sp, #48	; 0x30
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b5e:	f107 0320 	add.w	r3, r7, #32
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001b6c:	463b      	mov	r3, r7
 8001b6e:	2220      	movs	r2, #32
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f003 fff0 	bl	8005b58 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b78:	4b3e      	ldr	r3, [pc, #248]	; (8001c74 <MX_ADC1_Init+0x11c>)
 8001b7a:	4a3f      	ldr	r2, [pc, #252]	; (8001c78 <MX_ADC1_Init+0x120>)
 8001b7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	; (8001c74 <MX_ADC1_Init+0x11c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b84:	4b3b      	ldr	r3, [pc, #236]	; (8001c74 <MX_ADC1_Init+0x11c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001b8a:	4b3a      	ldr	r3, [pc, #232]	; (8001c74 <MX_ADC1_Init+0x11c>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b90:	4b38      	ldr	r3, [pc, #224]	; (8001c74 <MX_ADC1_Init+0x11c>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b96:	4b37      	ldr	r3, [pc, #220]	; (8001c74 <MX_ADC1_Init+0x11c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b9e:	4b35      	ldr	r3, [pc, #212]	; (8001c74 <MX_ADC1_Init+0x11c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ba4:	4b33      	ldr	r3, [pc, #204]	; (8001c74 <MX_ADC1_Init+0x11c>)
 8001ba6:	4a35      	ldr	r2, [pc, #212]	; (8001c7c <MX_ADC1_Init+0x124>)
 8001ba8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001baa:	4b32      	ldr	r3, [pc, #200]	; (8001c74 <MX_ADC1_Init+0x11c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001bb0:	4b30      	ldr	r3, [pc, #192]	; (8001c74 <MX_ADC1_Init+0x11c>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001bb6:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <MX_ADC1_Init+0x11c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001bbe:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <MX_ADC1_Init+0x11c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bc4:	482b      	ldr	r0, [pc, #172]	; (8001c74 <MX_ADC1_Init+0x11c>)
 8001bc6:	f000 fc6d 	bl	80024a4 <HAL_ADC_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8001bd0:	f000 f95e 	bl	8001e90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001bdc:	2304      	movs	r3, #4
 8001bde:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001be0:	f107 0320 	add.w	r3, r7, #32
 8001be4:	4619      	mov	r1, r3
 8001be6:	4823      	ldr	r0, [pc, #140]	; (8001c74 <MX_ADC1_Init+0x11c>)
 8001be8:	f000 fca0 	bl	800252c <HAL_ADC_ConfigChannel>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8001bf2:	f000 f94d 	bl	8001e90 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001c02:	2304      	movs	r3, #4
 8001c04:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8001c06:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c0a:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T5_TRGO;
 8001c0c:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
 8001c10:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001c1e:	463b      	mov	r3, r7
 8001c20:	4619      	mov	r1, r3
 8001c22:	4814      	ldr	r0, [pc, #80]	; (8001c74 <MX_ADC1_Init+0x11c>)
 8001c24:	f000 ffb2 	bl	8002b8c <HAL_ADCEx_InjectedConfigChannel>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8001c2e:	f000 f92f 	bl	8001e90 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8001c32:	2304      	movs	r3, #4
 8001c34:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8001c36:	2302      	movs	r3, #2
 8001c38:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	480d      	ldr	r0, [pc, #52]	; (8001c74 <MX_ADC1_Init+0x11c>)
 8001c40:	f000 ffa4 	bl	8002b8c <HAL_ADCEx_InjectedConfigChannel>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8001c4a:	f000 f921 	bl	8001e90 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8001c4e:	2305      	movs	r3, #5
 8001c50:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8001c52:	2303      	movs	r3, #3
 8001c54:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001c56:	463b      	mov	r3, r7
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4806      	ldr	r0, [pc, #24]	; (8001c74 <MX_ADC1_Init+0x11c>)
 8001c5c:	f000 ff96 	bl	8002b8c <HAL_ADCEx_InjectedConfigChannel>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8001c66:	f000 f913 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	3730      	adds	r7, #48	; 0x30
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000268 	.word	0x20000268
 8001c78:	40012000 	.word	0x40012000
 8001c7c:	0f000001 	.word	0x0f000001

08001c80 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001c84:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <MX_CAN1_Init+0x64>)
 8001c86:	4a18      	ldr	r2, [pc, #96]	; (8001ce8 <MX_CAN1_Init+0x68>)
 8001c88:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <MX_CAN1_Init+0x64>)
 8001c8c:	2210      	movs	r2, #16
 8001c8e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <MX_CAN1_Init+0x64>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c96:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <MX_CAN1_Init+0x64>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <MX_CAN1_Init+0x64>)
 8001c9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ca2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <MX_CAN1_Init+0x64>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <MX_CAN1_Init+0x64>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <MX_CAN1_Init+0x64>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <MX_CAN1_Init+0x64>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <MX_CAN1_Init+0x64>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <MX_CAN1_Init+0x64>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <MX_CAN1_Init+0x64>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001cce:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <MX_CAN1_Init+0x64>)
 8001cd0:	f001 f8f6 	bl	8002ec0 <HAL_CAN_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001cda:	f000 f8d9 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200002b0 	.word	0x200002b0
 8001ce8:	40006400 	.word	0x40006400

08001cec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cf2:	f107 0308 	add.w	r3, r7, #8
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d00:	463b      	mov	r3, r7
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d08:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <MX_TIM5_Init+0x94>)
 8001d0a:	4a1e      	ldr	r2, [pc, #120]	; (8001d84 <MX_TIM5_Init+0x98>)
 8001d0c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 159;
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <MX_TIM5_Init+0x94>)
 8001d10:	229f      	movs	r2, #159	; 0x9f
 8001d12:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d14:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <MX_TIM5_Init+0x94>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001d1a:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <MX_TIM5_Init+0x94>)
 8001d1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d20:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d22:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <MX_TIM5_Init+0x94>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d28:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <MX_TIM5_Init+0x94>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001d2e:	4814      	ldr	r0, [pc, #80]	; (8001d80 <MX_TIM5_Init+0x94>)
 8001d30:	f002 ffe2 	bl	8004cf8 <HAL_TIM_Base_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001d3a:	f000 f8a9 	bl	8001e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001d44:	f107 0308 	add.w	r3, r7, #8
 8001d48:	4619      	mov	r1, r3
 8001d4a:	480d      	ldr	r0, [pc, #52]	; (8001d80 <MX_TIM5_Init+0x94>)
 8001d4c:	f003 f88c 	bl	8004e68 <HAL_TIM_ConfigClockSource>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001d56:	f000 f89b 	bl	8001e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d5a:	2320      	movs	r3, #32
 8001d5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d62:	463b      	mov	r3, r7
 8001d64:	4619      	mov	r1, r3
 8001d66:	4806      	ldr	r0, [pc, #24]	; (8001d80 <MX_TIM5_Init+0x94>)
 8001d68:	f003 fa80 	bl	800526c <HAL_TIMEx_MasterConfigSynchronization>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001d72:	f000 f88d 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001d76:	bf00      	nop
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200002d8 	.word	0x200002d8
 8001d84:	40000c00 	.word	0x40000c00

08001d88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <MX_USART2_UART_Init+0x4c>)
 8001d8e:	4a12      	ldr	r2, [pc, #72]	; (8001dd8 <MX_USART2_UART_Init+0x50>)
 8001d90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <MX_USART2_UART_Init+0x4c>)
 8001d94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <MX_USART2_UART_Init+0x4c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <MX_USART2_UART_Init+0x4c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <MX_USART2_UART_Init+0x4c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <MX_USART2_UART_Init+0x4c>)
 8001dae:	220c      	movs	r2, #12
 8001db0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001db2:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <MX_USART2_UART_Init+0x4c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <MX_USART2_UART_Init+0x4c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dbe:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <MX_USART2_UART_Init+0x4c>)
 8001dc0:	f003 fad0 	bl	8005364 <HAL_UART_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dca:	f000 f861 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000320 	.word	0x20000320
 8001dd8:	40004400 	.word	0x40004400

08001ddc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]
 8001dee:	60da      	str	r2, [r3, #12]
 8001df0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <MX_GPIO_Init+0xac>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a23      	ldr	r2, [pc, #140]	; (8001e88 <MX_GPIO_Init+0xac>)
 8001dfc:	f043 0304 	orr.w	r3, r3, #4
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <MX_GPIO_Init+0xac>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <MX_GPIO_Init+0xac>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a1c      	ldr	r2, [pc, #112]	; (8001e88 <MX_GPIO_Init+0xac>)
 8001e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <MX_GPIO_Init+0xac>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <MX_GPIO_Init+0xac>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a15      	ldr	r2, [pc, #84]	; (8001e88 <MX_GPIO_Init+0xac>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <MX_GPIO_Init+0xac>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]
 8001e4a:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <MX_GPIO_Init+0xac>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a0e      	ldr	r2, [pc, #56]	; (8001e88 <MX_GPIO_Init+0xac>)
 8001e50:	f043 0302 	orr.w	r3, r3, #2
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <MX_GPIO_Init+0xac>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e68:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4619      	mov	r1, r3
 8001e78:	4804      	ldr	r0, [pc, #16]	; (8001e8c <MX_GPIO_Init+0xb0>)
 8001e7a:	f001 ffc1 	bl	8003e00 <HAL_GPIO_Init>

}
 8001e7e:	bf00      	nop
 8001e80:	3728      	adds	r7, #40	; 0x28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40020800 	.word	0x40020800

08001e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e94:	b672      	cpsid	i
}
 8001e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e98:	e7fe      	b.n	8001e98 <Error_Handler+0x8>
	...

08001e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	607b      	str	r3, [r7, #4]
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_MspInit+0x4c>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	4a0f      	ldr	r2, [pc, #60]	; (8001ee8 <HAL_MspInit+0x4c>)
 8001eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <HAL_MspInit+0x4c>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eba:	607b      	str	r3, [r7, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	603b      	str	r3, [r7, #0]
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <HAL_MspInit+0x4c>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	4a08      	ldr	r2, [pc, #32]	; (8001ee8 <HAL_MspInit+0x4c>)
 8001ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <HAL_MspInit+0x4c>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	603b      	str	r3, [r7, #0]
 8001ed8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001eda:	2007      	movs	r0, #7
 8001edc:	f001 ff4e 	bl	8003d7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40023800 	.word	0x40023800

08001eec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	; 0x28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a17      	ldr	r2, [pc, #92]	; (8001f68 <HAL_ADC_MspInit+0x7c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d127      	bne.n	8001f5e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <HAL_ADC_MspInit+0x80>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	4a15      	ldr	r2, [pc, #84]	; (8001f6c <HAL_ADC_MspInit+0x80>)
 8001f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1e:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <HAL_ADC_MspInit+0x80>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <HAL_ADC_MspInit+0x80>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a0e      	ldr	r2, [pc, #56]	; (8001f6c <HAL_ADC_MspInit+0x80>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <HAL_ADC_MspInit+0x80>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001f46:	23f3      	movs	r3, #243	; 0xf3
 8001f48:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	4619      	mov	r1, r3
 8001f58:	4805      	ldr	r0, [pc, #20]	; (8001f70 <HAL_ADC_MspInit+0x84>)
 8001f5a:	f001 ff51 	bl	8003e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f5e:	bf00      	nop
 8001f60:	3728      	adds	r7, #40	; 0x28
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40012000 	.word	0x40012000
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40020000 	.word	0x40020000

08001f74 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a21      	ldr	r2, [pc, #132]	; (8002018 <HAL_CAN_MspInit+0xa4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d13c      	bne.n	8002010 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	4b20      	ldr	r3, [pc, #128]	; (800201c <HAL_CAN_MspInit+0xa8>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	4a1f      	ldr	r2, [pc, #124]	; (800201c <HAL_CAN_MspInit+0xa8>)
 8001fa0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa6:	4b1d      	ldr	r3, [pc, #116]	; (800201c <HAL_CAN_MspInit+0xa8>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b19      	ldr	r3, [pc, #100]	; (800201c <HAL_CAN_MspInit+0xa8>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a18      	ldr	r2, [pc, #96]	; (800201c <HAL_CAN_MspInit+0xa8>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b16      	ldr	r3, [pc, #88]	; (800201c <HAL_CAN_MspInit+0xa8>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001fce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001fe0:	2309      	movs	r3, #9
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	4619      	mov	r1, r3
 8001fea:	480d      	ldr	r0, [pc, #52]	; (8002020 <HAL_CAN_MspInit+0xac>)
 8001fec:	f001 ff08 	bl	8003e00 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	2014      	movs	r0, #20
 8001ff6:	f001 fecc 	bl	8003d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001ffa:	2014      	movs	r0, #20
 8001ffc:	f001 fee5 	bl	8003dca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002000:	2200      	movs	r2, #0
 8002002:	2100      	movs	r1, #0
 8002004:	2015      	movs	r0, #21
 8002006:	f001 fec4 	bl	8003d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800200a:	2015      	movs	r0, #21
 800200c:	f001 fedd 	bl	8003dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002010:	bf00      	nop
 8002012:	3728      	adds	r7, #40	; 0x28
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40006400 	.word	0x40006400
 800201c:	40023800 	.word	0x40023800
 8002020:	40020000 	.word	0x40020000

08002024 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <HAL_TIM_Base_MspInit+0x3c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d10d      	bne.n	8002052 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <HAL_TIM_Base_MspInit+0x40>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	4a09      	ldr	r2, [pc, #36]	; (8002064 <HAL_TIM_Base_MspInit+0x40>)
 8002040:	f043 0308 	orr.w	r3, r3, #8
 8002044:	6413      	str	r3, [r2, #64]	; 0x40
 8002046:	4b07      	ldr	r3, [pc, #28]	; (8002064 <HAL_TIM_Base_MspInit+0x40>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002052:	bf00      	nop
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40000c00 	.word	0x40000c00
 8002064:	40023800 	.word	0x40023800

08002068 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08a      	sub	sp, #40	; 0x28
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
 800207e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a19      	ldr	r2, [pc, #100]	; (80020ec <HAL_UART_MspInit+0x84>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d12b      	bne.n	80020e2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	4b18      	ldr	r3, [pc, #96]	; (80020f0 <HAL_UART_MspInit+0x88>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	4a17      	ldr	r2, [pc, #92]	; (80020f0 <HAL_UART_MspInit+0x88>)
 8002094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002098:	6413      	str	r3, [r2, #64]	; 0x40
 800209a:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <HAL_UART_MspInit+0x88>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <HAL_UART_MspInit+0x88>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a10      	ldr	r2, [pc, #64]	; (80020f0 <HAL_UART_MspInit+0x88>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <HAL_UART_MspInit+0x88>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020c2:	230c      	movs	r3, #12
 80020c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ce:	2303      	movs	r3, #3
 80020d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020d2:	2307      	movs	r3, #7
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d6:	f107 0314 	add.w	r3, r7, #20
 80020da:	4619      	mov	r1, r3
 80020dc:	4805      	ldr	r0, [pc, #20]	; (80020f4 <HAL_UART_MspInit+0x8c>)
 80020de:	f001 fe8f 	bl	8003e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020e2:	bf00      	nop
 80020e4:	3728      	adds	r7, #40	; 0x28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40004400 	.word	0x40004400
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40020000 	.word	0x40020000

080020f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020fc:	e7fe      	b.n	80020fc <NMI_Handler+0x4>

080020fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002102:	e7fe      	b.n	8002102 <HardFault_Handler+0x4>

08002104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002108:	e7fe      	b.n	8002108 <MemManage_Handler+0x4>

0800210a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800210e:	e7fe      	b.n	800210e <BusFault_Handler+0x4>

08002110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002114:	e7fe      	b.n	8002114 <UsageFault_Handler+0x4>

08002116 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002144:	f000 f96a 	bl	800241c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}

0800214c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <CAN1_RX0_IRQHandler+0x10>)
 8002152:	f001 fb1d 	bl	8003790 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200002b0 	.word	0x200002b0

08002160 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002164:	4802      	ldr	r0, [pc, #8]	; (8002170 <CAN1_RX1_IRQHandler+0x10>)
 8002166:	f001 fb13 	bl	8003790 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200002b0 	.word	0x200002b0

08002174 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
	return 1;
 8002178:	2301      	movs	r3, #1
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <_kill>:

int _kill(int pid, int sig)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800218e:	f003 fcab 	bl	8005ae8 <__errno>
 8002192:	4603      	mov	r3, r0
 8002194:	2216      	movs	r2, #22
 8002196:	601a      	str	r2, [r3, #0]
	return -1;
 8002198:	f04f 33ff 	mov.w	r3, #4294967295
}
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <_exit>:

void _exit (int status)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021ac:	f04f 31ff 	mov.w	r1, #4294967295
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ffe7 	bl	8002184 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021b6:	e7fe      	b.n	80021b6 <_exit+0x12>

080021b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	e00a      	b.n	80021e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021ca:	f3af 8000 	nop.w
 80021ce:	4601      	mov	r1, r0
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	60ba      	str	r2, [r7, #8]
 80021d6:	b2ca      	uxtb	r2, r1
 80021d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	3301      	adds	r3, #1
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	dbf0      	blt.n	80021ca <_read+0x12>
	}

return len;
 80021e8:	687b      	ldr	r3, [r7, #4]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b086      	sub	sp, #24
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	60f8      	str	r0, [r7, #12]
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	e009      	b.n	8002218 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	60ba      	str	r2, [r7, #8]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	3301      	adds	r3, #1
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	429a      	cmp	r2, r3
 800221e:	dbf1      	blt.n	8002204 <_write+0x12>
	}
	return len;
 8002220:	687b      	ldr	r3, [r7, #4]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <_close>:

int _close(int file)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
	return -1;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002252:	605a      	str	r2, [r3, #4]
	return 0;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <_isatty>:

int _isatty(int file)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
	return 1;
 800226a:	2301      	movs	r3, #1
}
 800226c:	4618      	mov	r0, r3
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
	return 0;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
	...

08002294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800229c:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <_sbrk+0x5c>)
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <_sbrk+0x60>)
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <_sbrk+0x64>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d102      	bne.n	80022b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <_sbrk+0x64>)
 80022b2:	4a12      	ldr	r2, [pc, #72]	; (80022fc <_sbrk+0x68>)
 80022b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <_sbrk+0x64>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d207      	bcs.n	80022d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022c4:	f003 fc10 	bl	8005ae8 <__errno>
 80022c8:	4603      	mov	r3, r0
 80022ca:	220c      	movs	r2, #12
 80022cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ce:	f04f 33ff 	mov.w	r3, #4294967295
 80022d2:	e009      	b.n	80022e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <_sbrk+0x64>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <_sbrk+0x64>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	4a05      	ldr	r2, [pc, #20]	; (80022f8 <_sbrk+0x64>)
 80022e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022e6:	68fb      	ldr	r3, [r7, #12]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20020000 	.word	0x20020000
 80022f4:	00000400 	.word	0x00000400
 80022f8:	20000374 	.word	0x20000374
 80022fc:	20000390 	.word	0x20000390

08002300 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <SystemInit+0x20>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230a:	4a05      	ldr	r2, [pc, #20]	; (8002320 <SystemInit+0x20>)
 800230c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002324:	f8df d034 	ldr.w	sp, [pc, #52]	; 800235c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002328:	480d      	ldr	r0, [pc, #52]	; (8002360 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800232a:	490e      	ldr	r1, [pc, #56]	; (8002364 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800232c:	4a0e      	ldr	r2, [pc, #56]	; (8002368 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800232e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002330:	e002      	b.n	8002338 <LoopCopyDataInit>

08002332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002336:	3304      	adds	r3, #4

08002338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800233a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800233c:	d3f9      	bcc.n	8002332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800233e:	4a0b      	ldr	r2, [pc, #44]	; (800236c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002340:	4c0b      	ldr	r4, [pc, #44]	; (8002370 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002344:	e001      	b.n	800234a <LoopFillZerobss>

08002346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002348:	3204      	adds	r2, #4

0800234a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800234a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800234c:	d3fb      	bcc.n	8002346 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800234e:	f7ff ffd7 	bl	8002300 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002352:	f003 fbcf 	bl	8005af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002356:	f7ff faeb 	bl	8001930 <main>
  bx  lr    
 800235a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800235c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002364:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002368:	08008dac 	.word	0x08008dac
  ldr r2, =_sbss
 800236c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002370:	2000038c 	.word	0x2000038c

08002374 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002374:	e7fe      	b.n	8002374 <ADC_IRQHandler>
	...

08002378 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800237c:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <HAL_Init+0x40>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a0d      	ldr	r2, [pc, #52]	; (80023b8 <HAL_Init+0x40>)
 8002382:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002386:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_Init+0x40>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <HAL_Init+0x40>)
 800238e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002392:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <HAL_Init+0x40>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a07      	ldr	r2, [pc, #28]	; (80023b8 <HAL_Init+0x40>)
 800239a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a0:	2003      	movs	r0, #3
 80023a2:	f001 fceb 	bl	8003d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023a6:	2000      	movs	r0, #0
 80023a8:	f000 f808 	bl	80023bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023ac:	f7ff fd76 	bl	8001e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40023c00 	.word	0x40023c00

080023bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <HAL_InitTick+0x54>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_InitTick+0x58>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	4619      	mov	r1, r3
 80023ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023da:	4618      	mov	r0, r3
 80023dc:	f001 fd03 	bl	8003de6 <HAL_SYSTICK_Config>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e00e      	b.n	8002408 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b0f      	cmp	r3, #15
 80023ee:	d80a      	bhi.n	8002406 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f0:	2200      	movs	r2, #0
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295
 80023f8:	f001 fccb 	bl	8003d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023fc:	4a06      	ldr	r2, [pc, #24]	; (8002418 <HAL_InitTick+0x5c>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	e000      	b.n	8002408 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
}
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000004 	.word	0x20000004
 8002414:	2000000c 	.word	0x2000000c
 8002418:	20000008 	.word	0x20000008

0800241c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <HAL_IncTick+0x20>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_IncTick+0x24>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4413      	add	r3, r2
 800242c:	4a04      	ldr	r2, [pc, #16]	; (8002440 <HAL_IncTick+0x24>)
 800242e:	6013      	str	r3, [r2, #0]
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	2000000c 	.word	0x2000000c
 8002440:	20000378 	.word	0x20000378

08002444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return uwTick;
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <HAL_GetTick+0x14>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20000378 	.word	0x20000378

0800245c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002464:	f7ff ffee 	bl	8002444 <HAL_GetTick>
 8002468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002474:	d005      	beq.n	8002482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002476:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <HAL_Delay+0x44>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4413      	add	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002482:	bf00      	nop
 8002484:	f7ff ffde 	bl	8002444 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	429a      	cmp	r2, r3
 8002492:	d8f7      	bhi.n	8002484 <HAL_Delay+0x28>
  {
  }
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	2000000c 	.word	0x2000000c

080024a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e033      	b.n	8002522 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff fd12 	bl	8001eec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d118      	bne.n	8002514 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024ea:	f023 0302 	bic.w	r3, r3, #2
 80024ee:	f043 0202 	orr.w	r2, r3, #2
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f94a 	bl	8002790 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f023 0303 	bic.w	r3, r3, #3
 800250a:	f043 0201 	orr.w	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	641a      	str	r2, [r3, #64]	; 0x40
 8002512:	e001      	b.n	8002518 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002520:	7bfb      	ldrb	r3, [r7, #15]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x1c>
 8002544:	2302      	movs	r3, #2
 8002546:	e113      	b.n	8002770 <HAL_ADC_ConfigChannel+0x244>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b09      	cmp	r3, #9
 8002556:	d925      	bls.n	80025a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68d9      	ldr	r1, [r3, #12]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	b29b      	uxth	r3, r3
 8002564:	461a      	mov	r2, r3
 8002566:	4613      	mov	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	3b1e      	subs	r3, #30
 800256e:	2207      	movs	r2, #7
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43da      	mvns	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	400a      	ands	r2, r1
 800257c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68d9      	ldr	r1, [r3, #12]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	b29b      	uxth	r3, r3
 800258e:	4618      	mov	r0, r3
 8002590:	4603      	mov	r3, r0
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4403      	add	r3, r0
 8002596:	3b1e      	subs	r3, #30
 8002598:	409a      	lsls	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	e022      	b.n	80025ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6919      	ldr	r1, [r3, #16]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	461a      	mov	r2, r3
 80025b2:	4613      	mov	r3, r2
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	4413      	add	r3, r2
 80025b8:	2207      	movs	r2, #7
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43da      	mvns	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	400a      	ands	r2, r1
 80025c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6919      	ldr	r1, [r3, #16]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	4618      	mov	r0, r3
 80025da:	4603      	mov	r3, r0
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	4403      	add	r3, r0
 80025e0:	409a      	lsls	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b06      	cmp	r3, #6
 80025f0:	d824      	bhi.n	800263c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	3b05      	subs	r3, #5
 8002604:	221f      	movs	r2, #31
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43da      	mvns	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	400a      	ands	r2, r1
 8002612:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	b29b      	uxth	r3, r3
 8002620:	4618      	mov	r0, r3
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	3b05      	subs	r3, #5
 800262e:	fa00 f203 	lsl.w	r2, r0, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	635a      	str	r2, [r3, #52]	; 0x34
 800263a:	e04c      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b0c      	cmp	r3, #12
 8002642:	d824      	bhi.n	800268e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	3b23      	subs	r3, #35	; 0x23
 8002656:	221f      	movs	r2, #31
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43da      	mvns	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	400a      	ands	r2, r1
 8002664:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	b29b      	uxth	r3, r3
 8002672:	4618      	mov	r0, r3
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	3b23      	subs	r3, #35	; 0x23
 8002680:	fa00 f203 	lsl.w	r2, r0, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	631a      	str	r2, [r3, #48]	; 0x30
 800268c:	e023      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	3b41      	subs	r3, #65	; 0x41
 80026a0:	221f      	movs	r2, #31
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43da      	mvns	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	400a      	ands	r2, r1
 80026ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	4618      	mov	r0, r3
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	3b41      	subs	r3, #65	; 0x41
 80026ca:	fa00 f203 	lsl.w	r2, r0, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026d6:	4b29      	ldr	r3, [pc, #164]	; (800277c <HAL_ADC_ConfigChannel+0x250>)
 80026d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a28      	ldr	r2, [pc, #160]	; (8002780 <HAL_ADC_ConfigChannel+0x254>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d10f      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x1d8>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b12      	cmp	r3, #18
 80026ea:	d10b      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a1d      	ldr	r2, [pc, #116]	; (8002780 <HAL_ADC_ConfigChannel+0x254>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d12b      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x23a>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a1c      	ldr	r2, [pc, #112]	; (8002784 <HAL_ADC_ConfigChannel+0x258>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d003      	beq.n	8002720 <HAL_ADC_ConfigChannel+0x1f4>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b11      	cmp	r3, #17
 800271e:	d122      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a11      	ldr	r2, [pc, #68]	; (8002784 <HAL_ADC_ConfigChannel+0x258>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d111      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002742:	4b11      	ldr	r3, [pc, #68]	; (8002788 <HAL_ADC_ConfigChannel+0x25c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a11      	ldr	r2, [pc, #68]	; (800278c <HAL_ADC_ConfigChannel+0x260>)
 8002748:	fba2 2303 	umull	r2, r3, r2, r3
 800274c:	0c9a      	lsrs	r2, r3, #18
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002758:	e002      	b.n	8002760 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	3b01      	subs	r3, #1
 800275e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f9      	bne.n	800275a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	40012300 	.word	0x40012300
 8002780:	40012000 	.word	0x40012000
 8002784:	10000012 	.word	0x10000012
 8002788:	20000004 	.word	0x20000004
 800278c:	431bde83 	.word	0x431bde83

08002790 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002798:	4b79      	ldr	r3, [pc, #484]	; (8002980 <ADC_Init+0x1f0>)
 800279a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	431a      	orrs	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6859      	ldr	r1, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	021a      	lsls	r2, r3, #8
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80027e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6859      	ldr	r1, [r3, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800280a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6899      	ldr	r1, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002822:	4a58      	ldr	r2, [pc, #352]	; (8002984 <ADC_Init+0x1f4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d022      	beq.n	800286e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002836:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6899      	ldr	r1, [r3, #8]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002858:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6899      	ldr	r1, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	e00f      	b.n	800288e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800287c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800288c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0202 	bic.w	r2, r2, #2
 800289c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6899      	ldr	r1, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	7e1b      	ldrb	r3, [r3, #24]
 80028a8:	005a      	lsls	r2, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d01b      	beq.n	80028f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80028da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6859      	ldr	r1, [r3, #4]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	3b01      	subs	r3, #1
 80028e8:	035a      	lsls	r2, r3, #13
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	e007      	b.n	8002904 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002902:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002912:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	3b01      	subs	r3, #1
 8002920:	051a      	lsls	r2, r3, #20
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002938:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6899      	ldr	r1, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002946:	025a      	lsls	r2, r3, #9
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800295e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6899      	ldr	r1, [r3, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	029a      	lsls	r2, r3, #10
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	609a      	str	r2, [r3, #8]
}
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	40012300 	.word	0x40012300
 8002984:	0f000001 	.word	0x0f000001

08002988 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8002988:	b480      	push	{r7}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	2300      	movs	r3, #0
 800299a:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_ADCEx_InjectedStart+0x22>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e0aa      	b.n	8002b00 <HAL_ADCEx_InjectedStart+0x178>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d018      	beq.n	80029f2 <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029d0:	4b4e      	ldr	r3, [pc, #312]	; (8002b0c <HAL_ADCEx_InjectedStart+0x184>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a4e      	ldr	r2, [pc, #312]	; (8002b10 <HAL_ADCEx_InjectedStart+0x188>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	0c9a      	lsrs	r2, r3, #18
 80029dc:	4613      	mov	r3, r2
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	4413      	add	r3, r2
 80029e2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80029e4:	e002      	b.n	80029ec <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f9      	bne.n	80029e6 <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d172      	bne.n	8002ae6 <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d102      	bne.n	8002a26 <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f06f 0204 	mvn.w	r2, #4
 8002a36:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a38:	4b36      	ldr	r3, [pc, #216]	; (8002b14 <HAL_ADCEx_InjectedStart+0x18c>)
 8002a3a:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d124      	bne.n	8002a92 <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	bf0c      	ite	eq
 8002a56:	2301      	moveq	r3, #1
 8002a58:	2300      	movne	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	bf0c      	ite	eq
 8002a6c:	2301      	moveq	r3, #1
 8002a6e:	2300      	movne	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d041      	beq.n	8002afe <HAL_ADCEx_InjectedStart+0x176>
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d03e      	beq.n	8002afe <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	e035      	b.n	8002afe <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bf0c      	ite	eq
 8002aa0:	2301      	moveq	r3, #1
 8002aa2:	2300      	movne	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	bf0c      	ite	eq
 8002ab6:	2301      	moveq	r3, #1
 8002ab8:	2300      	movne	r3, #0
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a15      	ldr	r2, [pc, #84]	; (8002b18 <HAL_ADCEx_InjectedStart+0x190>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d11a      	bne.n	8002afe <HAL_ADCEx_InjectedStart+0x176>
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d017      	beq.n	8002afe <HAL_ADCEx_InjectedStart+0x176>
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d014      	beq.n	8002afe <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	e00b      	b.n	8002afe <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f043 0210 	orr.w	r2, r3, #16
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	f043 0201 	orr.w	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	20000004 	.word	0x20000004
 8002b10:	431bde83 	.word	0x431bde83
 8002b14:	40012300 	.word	0x40012300
 8002b18:	40012000 	.word	0x40012000

08002b1c <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f06f 0204 	mvn.w	r2, #4
 8002b32:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d81f      	bhi.n	8002b7c <HAL_ADCEx_InjectedGetValue+0x60>
 8002b3c:	a201      	add	r2, pc, #4	; (adr r2, 8002b44 <HAL_ADCEx_InjectedGetValue+0x28>)
 8002b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b42:	bf00      	nop
 8002b44:	08002b73 	.word	0x08002b73
 8002b48:	08002b69 	.word	0x08002b69
 8002b4c:	08002b5f 	.word	0x08002b5f
 8002b50:	08002b55 	.word	0x08002b55
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b5a:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8002b5c:	e00f      	b.n	8002b7e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b64:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8002b66:	e00a      	b.n	8002b7e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	60fb      	str	r3, [r7, #12]
    }
    break;
 8002b70:	e005      	b.n	8002b7e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b78:	60fb      	str	r3, [r7, #12]
    }
    break;
 8002b7a:	e000      	b.n	8002b7e <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8002b7c:	bf00      	nop
  }
  return tmp;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e17e      	b.n	8002ea2 <HAL_ADCEx_InjectedConfigChannel+0x316>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b09      	cmp	r3, #9
 8002bb2:	d925      	bls.n	8002c00 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68d9      	ldr	r1, [r3, #12]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3b1e      	subs	r3, #30
 8002bca:	2207      	movs	r2, #7
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43da      	mvns	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	400a      	ands	r2, r1
 8002bd8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68d9      	ldr	r1, [r3, #12]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	4618      	mov	r0, r3
 8002bec:	4603      	mov	r3, r0
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	4403      	add	r3, r0
 8002bf2:	3b1e      	subs	r3, #30
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	e022      	b.n	8002c46 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6919      	ldr	r1, [r3, #16]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4613      	mov	r3, r2
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	4413      	add	r3, r2
 8002c14:	2207      	movs	r2, #7
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43da      	mvns	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	400a      	ands	r2, r1
 8002c22:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6919      	ldr	r1, [r3, #16]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	4618      	mov	r0, r3
 8002c36:	4603      	mov	r3, r0
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	4403      	add	r3, r0
 8002c3c:	409a      	lsls	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002c54:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	051a      	lsls	r2, r3, #20
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	3303      	adds	r3, #3
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	221f      	movs	r2, #31
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43da      	mvns	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	400a      	ands	r2, r1
 8002c9c:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	4618      	mov	r0, r3
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	3303      	adds	r3, #3
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	4a75      	ldr	r2, [pc, #468]	; (8002eb0 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d022      	beq.n	8002d24 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002cec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6899      	ldr	r1, [r3, #8]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	699a      	ldr	r2, [r3, #24]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002d0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6899      	ldr	r1, [r3, #8]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	69da      	ldr	r2, [r3, #28]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	609a      	str	r2, [r3, #8]
 8002d22:	e00f      	b.n	8002d44 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002d32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002d42:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	7d5b      	ldrb	r3, [r3, #21]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d5a:	605a      	str	r2, [r3, #4]
 8002d5c:	e007      	b.n	8002d6e <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d6c:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	7d1b      	ldrb	r3, [r3, #20]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d008      	beq.n	8002d88 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d84:	605a      	str	r2, [r3, #4]
 8002d86:	e007      	b.n	8002d98 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d96:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d02e      	beq.n	8002dfe <HAL_ADCEx_InjectedConfigChannel+0x272>
 8002da0:	2b03      	cmp	r3, #3
 8002da2:	d840      	bhi.n	8002e26 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d002      	beq.n	8002dae <HAL_ADCEx_InjectedConfigChannel+0x222>
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d014      	beq.n	8002dd6 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8002dac:	e03b      	b.n	8002e26 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6812      	ldr	r2, [r2, #0]
 8002db8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002dbc:	f023 030f 	bic.w	r3, r3, #15
 8002dc0:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6959      	ldr	r1, [r3, #20]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	615a      	str	r2, [r3, #20]
      break;
 8002dd4:	e03b      	b.n	8002e4e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002de4:	f023 030f 	bic.w	r3, r3, #15
 8002de8:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6999      	ldr	r1, [r3, #24]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	619a      	str	r2, [r3, #24]
      break;
 8002dfc:	e027      	b.n	8002e4e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002e0c:	f023 030f 	bic.w	r3, r3, #15
 8002e10:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69d9      	ldr	r1, [r3, #28]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	61da      	str	r2, [r3, #28]
      break;
 8002e24:	e013      	b.n	8002e4e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002e34:	f023 030f 	bic.w	r3, r3, #15
 8002e38:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6a19      	ldr	r1, [r3, #32]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	621a      	str	r2, [r3, #32]
      break;
 8002e4c:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e4e:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8002e50:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a18      	ldr	r2, [pc, #96]	; (8002eb8 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d109      	bne.n	8002e70 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b12      	cmp	r3, #18
 8002e62:	d105      	bne.n	8002e70 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a10      	ldr	r2, [pc, #64]	; (8002eb8 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d10e      	bne.n	8002e98 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a0f      	ldr	r2, [pc, #60]	; (8002ebc <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d003      	beq.n	8002e8c <HAL_ADCEx_InjectedConfigChannel+0x300>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b11      	cmp	r3, #17
 8002e8a:	d105      	bne.n	8002e98 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	000f0001 	.word	0x000f0001
 8002eb4:	40012300 	.word	0x40012300
 8002eb8:	40012000 	.word	0x40012000
 8002ebc:	10000012 	.word	0x10000012

08002ec0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e0ed      	b.n	80030ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d102      	bne.n	8002ee4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff f848 	bl	8001f74 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ef4:	f7ff faa6 	bl	8002444 <HAL_GetTick>
 8002ef8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002efa:	e012      	b.n	8002f22 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002efc:	f7ff faa2 	bl	8002444 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b0a      	cmp	r3, #10
 8002f08:	d90b      	bls.n	8002f22 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2205      	movs	r2, #5
 8002f1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e0c5      	b.n	80030ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0e5      	beq.n	8002efc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0202 	bic.w	r2, r2, #2
 8002f3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f40:	f7ff fa80 	bl	8002444 <HAL_GetTick>
 8002f44:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f46:	e012      	b.n	8002f6e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f48:	f7ff fa7c 	bl	8002444 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b0a      	cmp	r3, #10
 8002f54:	d90b      	bls.n	8002f6e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2205      	movs	r2, #5
 8002f66:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e09f      	b.n	80030ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1e5      	bne.n	8002f48 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	7e1b      	ldrb	r3, [r3, #24]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d108      	bne.n	8002f96 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	e007      	b.n	8002fa6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fa4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	7e5b      	ldrb	r3, [r3, #25]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d108      	bne.n	8002fc0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	e007      	b.n	8002fd0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	7e9b      	ldrb	r3, [r3, #26]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d108      	bne.n	8002fea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0220 	orr.w	r2, r2, #32
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	e007      	b.n	8002ffa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0220 	bic.w	r2, r2, #32
 8002ff8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	7edb      	ldrb	r3, [r3, #27]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d108      	bne.n	8003014 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0210 	bic.w	r2, r2, #16
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	e007      	b.n	8003024 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0210 	orr.w	r2, r2, #16
 8003022:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	7f1b      	ldrb	r3, [r3, #28]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d108      	bne.n	800303e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0208 	orr.w	r2, r2, #8
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	e007      	b.n	800304e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0208 	bic.w	r2, r2, #8
 800304c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	7f5b      	ldrb	r3, [r3, #29]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d108      	bne.n	8003068 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f042 0204 	orr.w	r2, r2, #4
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	e007      	b.n	8003078 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0204 	bic.w	r2, r2, #4
 8003076:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	ea42 0103 	orr.w	r1, r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	1e5a      	subs	r2, r3, #1
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030ce:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80030d0:	7cfb      	ldrb	r3, [r7, #19]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d003      	beq.n	80030de <HAL_CAN_ConfigFilter+0x26>
 80030d6:	7cfb      	ldrb	r3, [r7, #19]
 80030d8:	2b02      	cmp	r3, #2
 80030da:	f040 80be 	bne.w	800325a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80030de:	4b65      	ldr	r3, [pc, #404]	; (8003274 <HAL_CAN_ConfigFilter+0x1bc>)
 80030e0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80030e8:	f043 0201 	orr.w	r2, r3, #1
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80030f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	021b      	lsls	r3, r3, #8
 800310e:	431a      	orrs	r2, r3
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f003 031f 	and.w	r3, r3, #31
 800311e:	2201      	movs	r2, #1
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	43db      	mvns	r3, r3
 8003130:	401a      	ands	r2, r3
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d123      	bne.n	8003188 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	43db      	mvns	r3, r3
 800314a:	401a      	ands	r2, r3
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003162:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	3248      	adds	r2, #72	; 0x48
 8003168:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800317c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800317e:	6979      	ldr	r1, [r7, #20]
 8003180:	3348      	adds	r3, #72	; 0x48
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	440b      	add	r3, r1
 8003186:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d122      	bne.n	80031d6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	431a      	orrs	r2, r3
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	3248      	adds	r2, #72	; 0x48
 80031b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031cc:	6979      	ldr	r1, [r7, #20]
 80031ce:	3348      	adds	r3, #72	; 0x48
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	440b      	add	r3, r1
 80031d4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d109      	bne.n	80031f2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	43db      	mvns	r3, r3
 80031e8:	401a      	ands	r2, r3
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80031f0:	e007      	b.n	8003202 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	431a      	orrs	r2, r3
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d109      	bne.n	800321e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	43db      	mvns	r3, r3
 8003214:	401a      	ands	r2, r3
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800321c:	e007      	b.n	800322e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	431a      	orrs	r2, r3
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d107      	bne.n	8003246 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	431a      	orrs	r2, r3
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800324c:	f023 0201 	bic.w	r2, r3, #1
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	e006      	b.n	8003268 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
  }
}
 8003268:	4618      	mov	r0, r3
 800326a:	371c      	adds	r7, #28
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	40006400 	.word	0x40006400

08003278 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b01      	cmp	r3, #1
 800328a:	d12e      	bne.n	80032ea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0201 	bic.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032a4:	f7ff f8ce 	bl	8002444 <HAL_GetTick>
 80032a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032aa:	e012      	b.n	80032d2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032ac:	f7ff f8ca 	bl	8002444 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b0a      	cmp	r3, #10
 80032b8:	d90b      	bls.n	80032d2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2205      	movs	r2, #5
 80032ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e012      	b.n	80032f8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1e5      	bne.n	80032ac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	e006      	b.n	80032f8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
  }
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003300:	b480      	push	{r7}
 8003302:	b089      	sub	sp, #36	; 0x24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003314:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800331e:	7ffb      	ldrb	r3, [r7, #31]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d003      	beq.n	800332c <HAL_CAN_AddTxMessage+0x2c>
 8003324:	7ffb      	ldrb	r3, [r7, #31]
 8003326:	2b02      	cmp	r3, #2
 8003328:	f040 80b8 	bne.w	800349c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10a      	bne.n	800334c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800333c:	2b00      	cmp	r3, #0
 800333e:	d105      	bne.n	800334c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 80a0 	beq.w	800348c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	0e1b      	lsrs	r3, r3, #24
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2b02      	cmp	r3, #2
 800335a:	d907      	bls.n	800336c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e09e      	b.n	80034aa <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800336c:	2201      	movs	r2, #1
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	409a      	lsls	r2, r3
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10d      	bne.n	800339a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003388:	68f9      	ldr	r1, [r7, #12]
 800338a:	6809      	ldr	r1, [r1, #0]
 800338c:	431a      	orrs	r2, r3
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	3318      	adds	r3, #24
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	440b      	add	r3, r1
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	e00f      	b.n	80033ba <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033a4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033aa:	68f9      	ldr	r1, [r7, #12]
 80033ac:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80033ae:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	3318      	adds	r3, #24
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	440b      	add	r3, r1
 80033b8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6819      	ldr	r1, [r3, #0]
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	691a      	ldr	r2, [r3, #16]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	3318      	adds	r3, #24
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	440b      	add	r3, r1
 80033ca:	3304      	adds	r3, #4
 80033cc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	7d1b      	ldrb	r3, [r3, #20]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d111      	bne.n	80033fa <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	3318      	adds	r3, #24
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	4413      	add	r3, r2
 80033e2:	3304      	adds	r3, #4
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	6811      	ldr	r1, [r2, #0]
 80033ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	3318      	adds	r3, #24
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	440b      	add	r3, r1
 80033f6:	3304      	adds	r3, #4
 80033f8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	3307      	adds	r3, #7
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	061a      	lsls	r2, r3, #24
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3306      	adds	r3, #6
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	041b      	lsls	r3, r3, #16
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3305      	adds	r3, #5
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	021b      	lsls	r3, r3, #8
 8003414:	4313      	orrs	r3, r2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	3204      	adds	r2, #4
 800341a:	7812      	ldrb	r2, [r2, #0]
 800341c:	4610      	mov	r0, r2
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	6811      	ldr	r1, [r2, #0]
 8003422:	ea43 0200 	orr.w	r2, r3, r0
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	440b      	add	r3, r1
 800342c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003430:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3303      	adds	r3, #3
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	061a      	lsls	r2, r3, #24
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3302      	adds	r3, #2
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	041b      	lsls	r3, r3, #16
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3301      	adds	r3, #1
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	021b      	lsls	r3, r3, #8
 800344c:	4313      	orrs	r3, r2
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	7812      	ldrb	r2, [r2, #0]
 8003452:	4610      	mov	r0, r2
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	6811      	ldr	r1, [r2, #0]
 8003458:	ea43 0200 	orr.w	r2, r3, r0
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	440b      	add	r3, r1
 8003462:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003466:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	3318      	adds	r3, #24
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	4413      	add	r3, r2
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	6811      	ldr	r1, [r2, #0]
 800347a:	f043 0201 	orr.w	r2, r3, #1
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	3318      	adds	r3, #24
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	440b      	add	r3, r1
 8003486:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	e00e      	b.n	80034aa <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e006      	b.n	80034aa <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
  }
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3724      	adds	r7, #36	; 0x24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b085      	sub	sp, #20
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034c8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80034ca:	7afb      	ldrb	r3, [r7, #11]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d002      	beq.n	80034d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80034d0:	7afb      	ldrb	r3, [r7, #11]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d11d      	bne.n	8003512 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	3301      	adds	r3, #1
 80034e8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	3301      	adds	r3, #1
 80034fc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	3301      	adds	r3, #1
 8003510:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003512:	68fb      	ldr	r3, [r7, #12]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003520:	b480      	push	{r7}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003534:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003536:	7dfb      	ldrb	r3, [r7, #23]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d003      	beq.n	8003544 <HAL_CAN_GetRxMessage+0x24>
 800353c:	7dfb      	ldrb	r3, [r7, #23]
 800353e:	2b02      	cmp	r3, #2
 8003540:	f040 80f3 	bne.w	800372a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10e      	bne.n	8003568 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0303 	and.w	r3, r3, #3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d116      	bne.n	8003586 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e0e7      	b.n	8003738 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d107      	bne.n	8003586 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e0d8      	b.n	8003738 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	331b      	adds	r3, #27
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	4413      	add	r3, r2
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0204 	and.w	r2, r3, #4
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10c      	bne.n	80035be <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	331b      	adds	r3, #27
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	4413      	add	r3, r2
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	0d5b      	lsrs	r3, r3, #21
 80035b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	e00b      	b.n	80035d6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	331b      	adds	r3, #27
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	4413      	add	r3, r2
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	08db      	lsrs	r3, r3, #3
 80035ce:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	331b      	adds	r3, #27
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	4413      	add	r3, r2
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0202 	and.w	r2, r3, #2
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	331b      	adds	r3, #27
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	4413      	add	r3, r2
 80035f8:	3304      	adds	r3, #4
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 020f 	and.w	r2, r3, #15
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	331b      	adds	r3, #27
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	4413      	add	r3, r2
 8003610:	3304      	adds	r3, #4
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	0a1b      	lsrs	r3, r3, #8
 8003616:	b2da      	uxtb	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	331b      	adds	r3, #27
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	4413      	add	r3, r2
 8003628:	3304      	adds	r3, #4
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	0c1b      	lsrs	r3, r3, #16
 800362e:	b29a      	uxth	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	4413      	add	r3, r2
 800363e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	b2da      	uxtb	r2, r3
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	4413      	add	r3, r2
 8003654:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	0a1a      	lsrs	r2, r3, #8
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	3301      	adds	r3, #1
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	4413      	add	r3, r2
 800366e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	0c1a      	lsrs	r2, r3, #16
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	3302      	adds	r3, #2
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	4413      	add	r3, r2
 8003688:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	0e1a      	lsrs	r2, r3, #24
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	3303      	adds	r3, #3
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	3304      	adds	r3, #4
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	0a1a      	lsrs	r2, r3, #8
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	3305      	adds	r3, #5
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	0c1a      	lsrs	r2, r3, #16
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	3306      	adds	r3, #6
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	0e1a      	lsrs	r2, r3, #24
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	3307      	adds	r3, #7
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d108      	bne.n	8003716 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0220 	orr.w	r2, r2, #32
 8003712:	60da      	str	r2, [r3, #12]
 8003714:	e007      	b.n	8003726 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f042 0220 	orr.w	r2, r2, #32
 8003724:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	e006      	b.n	8003738 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
  }
}
 8003738:	4618      	mov	r0, r3
 800373a:	371c      	adds	r7, #28
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003754:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d002      	beq.n	8003762 <HAL_CAN_ActivateNotification+0x1e>
 800375c:	7bfb      	ldrb	r3, [r7, #15]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d109      	bne.n	8003776 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6959      	ldr	r1, [r3, #20]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	e006      	b.n	8003784 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
  }
}
 8003784:	4618      	mov	r0, r3
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08a      	sub	sp, #40	; 0x28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003798:	2300      	movs	r3, #0
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d07c      	beq.n	80038d0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d023      	beq.n	8003828 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2201      	movs	r2, #1
 80037e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f983 	bl	8003afe <HAL_CAN_TxMailbox0CompleteCallback>
 80037f8:	e016      	b.n	8003828 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d004      	beq.n	800380e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
 800380c:	e00c      	b.n	8003828 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b00      	cmp	r3, #0
 8003816:	d004      	beq.n	8003822 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
 8003820:	e002      	b.n	8003828 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f989 	bl	8003b3a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382e:	2b00      	cmp	r3, #0
 8003830:	d024      	beq.n	800387c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f44f 7280 	mov.w	r2, #256	; 0x100
 800383a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f963 	bl	8003b12 <HAL_CAN_TxMailbox1CompleteCallback>
 800384c:	e016      	b.n	800387c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003854:	2b00      	cmp	r3, #0
 8003856:	d004      	beq.n	8003862 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
 8003860:	e00c      	b.n	800387c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003868:	2b00      	cmp	r3, #0
 800386a:	d004      	beq.n	8003876 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
 8003874:	e002      	b.n	800387c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f969 	bl	8003b4e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d024      	beq.n	80038d0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800388e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f943 	bl	8003b26 <HAL_CAN_TxMailbox2CompleteCallback>
 80038a0:	e016      	b.n	80038d0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d004      	beq.n	80038b6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
 80038b4:	e00c      	b.n	80038d0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d004      	beq.n	80038ca <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24
 80038c8:	e002      	b.n	80038d0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f949 	bl	8003b62 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00c      	beq.n	80038f4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f003 0310 	and.w	r3, r3, #16
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d007      	beq.n	80038f4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2210      	movs	r2, #16
 80038f2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00b      	beq.n	8003916 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b00      	cmp	r3, #0
 8003906:	d006      	beq.n	8003916 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2208      	movs	r2, #8
 800390e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f930 	bl	8003b76 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d009      	beq.n	8003934 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fd fd7a 	bl	8001428 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00c      	beq.n	8003958 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f003 0310 	and.w	r3, r3, #16
 8003944:	2b00      	cmp	r3, #0
 8003946:	d007      	beq.n	8003958 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800394e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2210      	movs	r2, #16
 8003956:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	f003 0320 	and.w	r3, r3, #32
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00b      	beq.n	800397a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f003 0308 	and.w	r3, r3, #8
 8003968:	2b00      	cmp	r3, #0
 800396a:	d006      	beq.n	800397a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2208      	movs	r2, #8
 8003972:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f908 	bl	8003b8a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	f003 0310 	and.w	r3, r3, #16
 8003980:	2b00      	cmp	r3, #0
 8003982:	d009      	beq.n	8003998 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fd fd54 	bl	8001440 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00b      	beq.n	80039ba <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d006      	beq.n	80039ba <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2210      	movs	r2, #16
 80039b2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f8f2 	bl	8003b9e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00b      	beq.n	80039dc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d006      	beq.n	80039dc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2208      	movs	r2, #8
 80039d4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f8eb 	bl	8003bb2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d07b      	beq.n	8003ade <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d072      	beq.n	8003ad6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d008      	beq.n	8003a0c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	f043 0301 	orr.w	r3, r3, #1
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d008      	beq.n	8003a28 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	f043 0302 	orr.w	r3, r3, #2
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d008      	beq.n	8003a44 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	f043 0304 	orr.w	r3, r3, #4
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d043      	beq.n	8003ad6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d03e      	beq.n	8003ad6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a5e:	2b60      	cmp	r3, #96	; 0x60
 8003a60:	d02b      	beq.n	8003aba <HAL_CAN_IRQHandler+0x32a>
 8003a62:	2b60      	cmp	r3, #96	; 0x60
 8003a64:	d82e      	bhi.n	8003ac4 <HAL_CAN_IRQHandler+0x334>
 8003a66:	2b50      	cmp	r3, #80	; 0x50
 8003a68:	d022      	beq.n	8003ab0 <HAL_CAN_IRQHandler+0x320>
 8003a6a:	2b50      	cmp	r3, #80	; 0x50
 8003a6c:	d82a      	bhi.n	8003ac4 <HAL_CAN_IRQHandler+0x334>
 8003a6e:	2b40      	cmp	r3, #64	; 0x40
 8003a70:	d019      	beq.n	8003aa6 <HAL_CAN_IRQHandler+0x316>
 8003a72:	2b40      	cmp	r3, #64	; 0x40
 8003a74:	d826      	bhi.n	8003ac4 <HAL_CAN_IRQHandler+0x334>
 8003a76:	2b30      	cmp	r3, #48	; 0x30
 8003a78:	d010      	beq.n	8003a9c <HAL_CAN_IRQHandler+0x30c>
 8003a7a:	2b30      	cmp	r3, #48	; 0x30
 8003a7c:	d822      	bhi.n	8003ac4 <HAL_CAN_IRQHandler+0x334>
 8003a7e:	2b10      	cmp	r3, #16
 8003a80:	d002      	beq.n	8003a88 <HAL_CAN_IRQHandler+0x2f8>
 8003a82:	2b20      	cmp	r3, #32
 8003a84:	d005      	beq.n	8003a92 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003a86:	e01d      	b.n	8003ac4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	f043 0308 	orr.w	r3, r3, #8
 8003a8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a90:	e019      	b.n	8003ac6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	f043 0310 	orr.w	r3, r3, #16
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a9a:	e014      	b.n	8003ac6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	f043 0320 	orr.w	r3, r3, #32
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003aa4:	e00f      	b.n	8003ac6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003aae:	e00a      	b.n	8003ac6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ab8:	e005      	b.n	8003ac6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ac2:	e000      	b.n	8003ac6 <HAL_CAN_IRQHandler+0x336>
            break;
 8003ac4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699a      	ldr	r2, [r3, #24]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ad4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2204      	movs	r2, #4
 8003adc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f868 	bl	8003bc6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003af6:	bf00      	nop
 8003af8:	3728      	adds	r7, #40	; 0x28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
	...

08003bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bec:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <__NVIC_SetPriorityGrouping+0x44>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c0e:	4a04      	ldr	r2, [pc, #16]	; (8003c20 <__NVIC_SetPriorityGrouping+0x44>)
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	60d3      	str	r3, [r2, #12]
}
 8003c14:	bf00      	nop
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	e000ed00 	.word	0xe000ed00

08003c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c28:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <__NVIC_GetPriorityGrouping+0x18>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	0a1b      	lsrs	r3, r3, #8
 8003c2e:	f003 0307 	and.w	r3, r3, #7
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	e000ed00 	.word	0xe000ed00

08003c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	4603      	mov	r3, r0
 8003c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	db0b      	blt.n	8003c6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	f003 021f 	and.w	r2, r3, #31
 8003c58:	4907      	ldr	r1, [pc, #28]	; (8003c78 <__NVIC_EnableIRQ+0x38>)
 8003c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	2001      	movs	r0, #1
 8003c62:	fa00 f202 	lsl.w	r2, r0, r2
 8003c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	e000e100 	.word	0xe000e100

08003c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	6039      	str	r1, [r7, #0]
 8003c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	db0a      	blt.n	8003ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	490c      	ldr	r1, [pc, #48]	; (8003cc8 <__NVIC_SetPriority+0x4c>)
 8003c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9a:	0112      	lsls	r2, r2, #4
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ca4:	e00a      	b.n	8003cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	4908      	ldr	r1, [pc, #32]	; (8003ccc <__NVIC_SetPriority+0x50>)
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	3b04      	subs	r3, #4
 8003cb4:	0112      	lsls	r2, r2, #4
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	440b      	add	r3, r1
 8003cba:	761a      	strb	r2, [r3, #24]
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	e000e100 	.word	0xe000e100
 8003ccc:	e000ed00 	.word	0xe000ed00

08003cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b089      	sub	sp, #36	; 0x24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f1c3 0307 	rsb	r3, r3, #7
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	bf28      	it	cs
 8003cee:	2304      	movcs	r3, #4
 8003cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	2b06      	cmp	r3, #6
 8003cf8:	d902      	bls.n	8003d00 <NVIC_EncodePriority+0x30>
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	3b03      	subs	r3, #3
 8003cfe:	e000      	b.n	8003d02 <NVIC_EncodePriority+0x32>
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d04:	f04f 32ff 	mov.w	r2, #4294967295
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43da      	mvns	r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	401a      	ands	r2, r3
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d18:	f04f 31ff 	mov.w	r1, #4294967295
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d22:	43d9      	mvns	r1, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d28:	4313      	orrs	r3, r2
         );
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3724      	adds	r7, #36	; 0x24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
	...

08003d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d48:	d301      	bcc.n	8003d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e00f      	b.n	8003d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d4e:	4a0a      	ldr	r2, [pc, #40]	; (8003d78 <SysTick_Config+0x40>)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d56:	210f      	movs	r1, #15
 8003d58:	f04f 30ff 	mov.w	r0, #4294967295
 8003d5c:	f7ff ff8e 	bl	8003c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d60:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <SysTick_Config+0x40>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d66:	4b04      	ldr	r3, [pc, #16]	; (8003d78 <SysTick_Config+0x40>)
 8003d68:	2207      	movs	r2, #7
 8003d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	e000e010 	.word	0xe000e010

08003d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff ff29 	bl	8003bdc <__NVIC_SetPriorityGrouping>
}
 8003d8a:	bf00      	nop
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b086      	sub	sp, #24
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	4603      	mov	r3, r0
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	607a      	str	r2, [r7, #4]
 8003d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003da4:	f7ff ff3e 	bl	8003c24 <__NVIC_GetPriorityGrouping>
 8003da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	68b9      	ldr	r1, [r7, #8]
 8003dae:	6978      	ldr	r0, [r7, #20]
 8003db0:	f7ff ff8e 	bl	8003cd0 <NVIC_EncodePriority>
 8003db4:	4602      	mov	r2, r0
 8003db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dba:	4611      	mov	r1, r2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff ff5d 	bl	8003c7c <__NVIC_SetPriority>
}
 8003dc2:	bf00      	nop
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff ff31 	bl	8003c40 <__NVIC_EnableIRQ>
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff ffa2 	bl	8003d38 <SysTick_Config>
 8003df4:	4603      	mov	r3, r0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
	...

08003e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b089      	sub	sp, #36	; 0x24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e16:	2300      	movs	r3, #0
 8003e18:	61fb      	str	r3, [r7, #28]
 8003e1a:	e165      	b.n	80040e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	f040 8154 	bne.w	80040e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d005      	beq.n	8003e52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d130      	bne.n	8003eb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	43db      	mvns	r3, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4013      	ands	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e88:	2201      	movs	r2, #1
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	43db      	mvns	r3, r3
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	4013      	ands	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	091b      	lsrs	r3, r3, #4
 8003e9e:	f003 0201 	and.w	r2, r3, #1
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 0303 	and.w	r3, r3, #3
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d017      	beq.n	8003ef0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	2203      	movs	r2, #3
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f003 0303 	and.w	r3, r3, #3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d123      	bne.n	8003f44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	08da      	lsrs	r2, r3, #3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3208      	adds	r2, #8
 8003f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	220f      	movs	r2, #15
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	08da      	lsrs	r2, r3, #3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3208      	adds	r2, #8
 8003f3e:	69b9      	ldr	r1, [r7, #24]
 8003f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	2203      	movs	r2, #3
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	43db      	mvns	r3, r3
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f003 0203 	and.w	r2, r3, #3
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 80ae 	beq.w	80040e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	4b5d      	ldr	r3, [pc, #372]	; (8004100 <HAL_GPIO_Init+0x300>)
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	4a5c      	ldr	r2, [pc, #368]	; (8004100 <HAL_GPIO_Init+0x300>)
 8003f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f94:	6453      	str	r3, [r2, #68]	; 0x44
 8003f96:	4b5a      	ldr	r3, [pc, #360]	; (8004100 <HAL_GPIO_Init+0x300>)
 8003f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fa2:	4a58      	ldr	r2, [pc, #352]	; (8004104 <HAL_GPIO_Init+0x304>)
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	089b      	lsrs	r3, r3, #2
 8003fa8:	3302      	adds	r3, #2
 8003faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	220f      	movs	r2, #15
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a4f      	ldr	r2, [pc, #316]	; (8004108 <HAL_GPIO_Init+0x308>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d025      	beq.n	800401a <HAL_GPIO_Init+0x21a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a4e      	ldr	r2, [pc, #312]	; (800410c <HAL_GPIO_Init+0x30c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d01f      	beq.n	8004016 <HAL_GPIO_Init+0x216>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a4d      	ldr	r2, [pc, #308]	; (8004110 <HAL_GPIO_Init+0x310>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d019      	beq.n	8004012 <HAL_GPIO_Init+0x212>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a4c      	ldr	r2, [pc, #304]	; (8004114 <HAL_GPIO_Init+0x314>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d013      	beq.n	800400e <HAL_GPIO_Init+0x20e>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a4b      	ldr	r2, [pc, #300]	; (8004118 <HAL_GPIO_Init+0x318>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d00d      	beq.n	800400a <HAL_GPIO_Init+0x20a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a4a      	ldr	r2, [pc, #296]	; (800411c <HAL_GPIO_Init+0x31c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d007      	beq.n	8004006 <HAL_GPIO_Init+0x206>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a49      	ldr	r2, [pc, #292]	; (8004120 <HAL_GPIO_Init+0x320>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d101      	bne.n	8004002 <HAL_GPIO_Init+0x202>
 8003ffe:	2306      	movs	r3, #6
 8004000:	e00c      	b.n	800401c <HAL_GPIO_Init+0x21c>
 8004002:	2307      	movs	r3, #7
 8004004:	e00a      	b.n	800401c <HAL_GPIO_Init+0x21c>
 8004006:	2305      	movs	r3, #5
 8004008:	e008      	b.n	800401c <HAL_GPIO_Init+0x21c>
 800400a:	2304      	movs	r3, #4
 800400c:	e006      	b.n	800401c <HAL_GPIO_Init+0x21c>
 800400e:	2303      	movs	r3, #3
 8004010:	e004      	b.n	800401c <HAL_GPIO_Init+0x21c>
 8004012:	2302      	movs	r3, #2
 8004014:	e002      	b.n	800401c <HAL_GPIO_Init+0x21c>
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <HAL_GPIO_Init+0x21c>
 800401a:	2300      	movs	r3, #0
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	f002 0203 	and.w	r2, r2, #3
 8004022:	0092      	lsls	r2, r2, #2
 8004024:	4093      	lsls	r3, r2
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4313      	orrs	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800402c:	4935      	ldr	r1, [pc, #212]	; (8004104 <HAL_GPIO_Init+0x304>)
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	089b      	lsrs	r3, r3, #2
 8004032:	3302      	adds	r3, #2
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800403a:	4b3a      	ldr	r3, [pc, #232]	; (8004124 <HAL_GPIO_Init+0x324>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	43db      	mvns	r3, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4013      	ands	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800405e:	4a31      	ldr	r2, [pc, #196]	; (8004124 <HAL_GPIO_Init+0x324>)
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004064:	4b2f      	ldr	r3, [pc, #188]	; (8004124 <HAL_GPIO_Init+0x324>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	43db      	mvns	r3, r3
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	4013      	ands	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004088:	4a26      	ldr	r2, [pc, #152]	; (8004124 <HAL_GPIO_Init+0x324>)
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800408e:	4b25      	ldr	r3, [pc, #148]	; (8004124 <HAL_GPIO_Init+0x324>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	43db      	mvns	r3, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4013      	ands	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040b2:	4a1c      	ldr	r2, [pc, #112]	; (8004124 <HAL_GPIO_Init+0x324>)
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040b8:	4b1a      	ldr	r3, [pc, #104]	; (8004124 <HAL_GPIO_Init+0x324>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	43db      	mvns	r3, r3
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	4013      	ands	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040dc:	4a11      	ldr	r2, [pc, #68]	; (8004124 <HAL_GPIO_Init+0x324>)
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	3301      	adds	r3, #1
 80040e6:	61fb      	str	r3, [r7, #28]
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	2b0f      	cmp	r3, #15
 80040ec:	f67f ae96 	bls.w	8003e1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040f0:	bf00      	nop
 80040f2:	bf00      	nop
 80040f4:	3724      	adds	r7, #36	; 0x24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40023800 	.word	0x40023800
 8004104:	40013800 	.word	0x40013800
 8004108:	40020000 	.word	0x40020000
 800410c:	40020400 	.word	0x40020400
 8004110:	40020800 	.word	0x40020800
 8004114:	40020c00 	.word	0x40020c00
 8004118:	40021000 	.word	0x40021000
 800411c:	40021400 	.word	0x40021400
 8004120:	40021800 	.word	0x40021800
 8004124:	40013c00 	.word	0x40013c00

08004128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0cc      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800413c:	4b68      	ldr	r3, [pc, #416]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d90c      	bls.n	8004164 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414a:	4b65      	ldr	r3, [pc, #404]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004152:	4b63      	ldr	r3, [pc, #396]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d001      	beq.n	8004164 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0b8      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d020      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	d005      	beq.n	8004188 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800417c:	4b59      	ldr	r3, [pc, #356]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	4a58      	ldr	r2, [pc, #352]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004186:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004194:	4b53      	ldr	r3, [pc, #332]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	4a52      	ldr	r2, [pc, #328]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800419e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a0:	4b50      	ldr	r3, [pc, #320]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	494d      	ldr	r1, [pc, #308]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d044      	beq.n	8004248 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d107      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c6:	4b47      	ldr	r3, [pc, #284]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d119      	bne.n	8004206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e07f      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d003      	beq.n	80041e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d107      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e6:	4b3f      	ldr	r3, [pc, #252]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e06f      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f6:	4b3b      	ldr	r3, [pc, #236]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e067      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004206:	4b37      	ldr	r3, [pc, #220]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f023 0203 	bic.w	r2, r3, #3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	4934      	ldr	r1, [pc, #208]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	4313      	orrs	r3, r2
 8004216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004218:	f7fe f914 	bl	8002444 <HAL_GetTick>
 800421c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421e:	e00a      	b.n	8004236 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004220:	f7fe f910 	bl	8002444 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	f241 3288 	movw	r2, #5000	; 0x1388
 800422e:	4293      	cmp	r3, r2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e04f      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004236:	4b2b      	ldr	r3, [pc, #172]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 020c 	and.w	r2, r3, #12
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	429a      	cmp	r2, r3
 8004246:	d1eb      	bne.n	8004220 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004248:	4b25      	ldr	r3, [pc, #148]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	429a      	cmp	r2, r3
 8004254:	d20c      	bcs.n	8004270 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004256:	4b22      	ldr	r3, [pc, #136]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800425e:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d001      	beq.n	8004270 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e032      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800427c:	4b19      	ldr	r3, [pc, #100]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4916      	ldr	r1, [pc, #88]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	4313      	orrs	r3, r2
 800428c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d009      	beq.n	80042ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800429a:	4b12      	ldr	r3, [pc, #72]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	490e      	ldr	r1, [pc, #56]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042ae:	f000 f855 	bl	800435c <HAL_RCC_GetSysClockFreq>
 80042b2:	4602      	mov	r2, r0
 80042b4:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	091b      	lsrs	r3, r3, #4
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	490a      	ldr	r1, [pc, #40]	; (80042e8 <HAL_RCC_ClockConfig+0x1c0>)
 80042c0:	5ccb      	ldrb	r3, [r1, r3]
 80042c2:	fa22 f303 	lsr.w	r3, r2, r3
 80042c6:	4a09      	ldr	r2, [pc, #36]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 80042c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042ca:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fe f874 	bl	80023bc <HAL_InitTick>

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40023c00 	.word	0x40023c00
 80042e4:	40023800 	.word	0x40023800
 80042e8:	080089ac 	.word	0x080089ac
 80042ec:	20000004 	.word	0x20000004
 80042f0:	20000008 	.word	0x20000008

080042f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f8:	4b03      	ldr	r3, [pc, #12]	; (8004308 <HAL_RCC_GetHCLKFreq+0x14>)
 80042fa:	681b      	ldr	r3, [r3, #0]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	20000004 	.word	0x20000004

0800430c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004310:	f7ff fff0 	bl	80042f4 <HAL_RCC_GetHCLKFreq>
 8004314:	4602      	mov	r2, r0
 8004316:	4b05      	ldr	r3, [pc, #20]	; (800432c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	0a9b      	lsrs	r3, r3, #10
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	4903      	ldr	r1, [pc, #12]	; (8004330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004322:	5ccb      	ldrb	r3, [r1, r3]
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004328:	4618      	mov	r0, r3
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40023800 	.word	0x40023800
 8004330:	080089bc 	.word	0x080089bc

08004334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004338:	f7ff ffdc 	bl	80042f4 <HAL_RCC_GetHCLKFreq>
 800433c:	4602      	mov	r2, r0
 800433e:	4b05      	ldr	r3, [pc, #20]	; (8004354 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	0b5b      	lsrs	r3, r3, #13
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	4903      	ldr	r1, [pc, #12]	; (8004358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800434a:	5ccb      	ldrb	r3, [r1, r3]
 800434c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004350:	4618      	mov	r0, r3
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40023800 	.word	0x40023800
 8004358:	080089bc 	.word	0x080089bc

0800435c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800435c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004360:	b0ae      	sub	sp, #184	; 0xb8
 8004362:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800436a:	2300      	movs	r3, #0
 800436c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004376:	2300      	movs	r3, #0
 8004378:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004382:	4bcb      	ldr	r3, [pc, #812]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 030c 	and.w	r3, r3, #12
 800438a:	2b0c      	cmp	r3, #12
 800438c:	f200 8206 	bhi.w	800479c <HAL_RCC_GetSysClockFreq+0x440>
 8004390:	a201      	add	r2, pc, #4	; (adr r2, 8004398 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004396:	bf00      	nop
 8004398:	080043cd 	.word	0x080043cd
 800439c:	0800479d 	.word	0x0800479d
 80043a0:	0800479d 	.word	0x0800479d
 80043a4:	0800479d 	.word	0x0800479d
 80043a8:	080043d5 	.word	0x080043d5
 80043ac:	0800479d 	.word	0x0800479d
 80043b0:	0800479d 	.word	0x0800479d
 80043b4:	0800479d 	.word	0x0800479d
 80043b8:	080043dd 	.word	0x080043dd
 80043bc:	0800479d 	.word	0x0800479d
 80043c0:	0800479d 	.word	0x0800479d
 80043c4:	0800479d 	.word	0x0800479d
 80043c8:	080045cd 	.word	0x080045cd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043cc:	4bb9      	ldr	r3, [pc, #740]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x358>)
 80043ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80043d2:	e1e7      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043d4:	4bb8      	ldr	r3, [pc, #736]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80043d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80043da:	e1e3      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043dc:	4bb4      	ldr	r3, [pc, #720]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043e8:	4bb1      	ldr	r3, [pc, #708]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d071      	beq.n	80044d8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043f4:	4bae      	ldr	r3, [pc, #696]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	099b      	lsrs	r3, r3, #6
 80043fa:	2200      	movs	r2, #0
 80043fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004400:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004404:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800440c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004410:	2300      	movs	r3, #0
 8004412:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004416:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800441a:	4622      	mov	r2, r4
 800441c:	462b      	mov	r3, r5
 800441e:	f04f 0000 	mov.w	r0, #0
 8004422:	f04f 0100 	mov.w	r1, #0
 8004426:	0159      	lsls	r1, r3, #5
 8004428:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800442c:	0150      	lsls	r0, r2, #5
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	4621      	mov	r1, r4
 8004434:	1a51      	subs	r1, r2, r1
 8004436:	6439      	str	r1, [r7, #64]	; 0x40
 8004438:	4629      	mov	r1, r5
 800443a:	eb63 0301 	sbc.w	r3, r3, r1
 800443e:	647b      	str	r3, [r7, #68]	; 0x44
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800444c:	4649      	mov	r1, r9
 800444e:	018b      	lsls	r3, r1, #6
 8004450:	4641      	mov	r1, r8
 8004452:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004456:	4641      	mov	r1, r8
 8004458:	018a      	lsls	r2, r1, #6
 800445a:	4641      	mov	r1, r8
 800445c:	1a51      	subs	r1, r2, r1
 800445e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004460:	4649      	mov	r1, r9
 8004462:	eb63 0301 	sbc.w	r3, r3, r1
 8004466:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004468:	f04f 0200 	mov.w	r2, #0
 800446c:	f04f 0300 	mov.w	r3, #0
 8004470:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004474:	4649      	mov	r1, r9
 8004476:	00cb      	lsls	r3, r1, #3
 8004478:	4641      	mov	r1, r8
 800447a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800447e:	4641      	mov	r1, r8
 8004480:	00ca      	lsls	r2, r1, #3
 8004482:	4610      	mov	r0, r2
 8004484:	4619      	mov	r1, r3
 8004486:	4603      	mov	r3, r0
 8004488:	4622      	mov	r2, r4
 800448a:	189b      	adds	r3, r3, r2
 800448c:	633b      	str	r3, [r7, #48]	; 0x30
 800448e:	462b      	mov	r3, r5
 8004490:	460a      	mov	r2, r1
 8004492:	eb42 0303 	adc.w	r3, r2, r3
 8004496:	637b      	str	r3, [r7, #52]	; 0x34
 8004498:	f04f 0200 	mov.w	r2, #0
 800449c:	f04f 0300 	mov.w	r3, #0
 80044a0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80044a4:	4629      	mov	r1, r5
 80044a6:	024b      	lsls	r3, r1, #9
 80044a8:	4621      	mov	r1, r4
 80044aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044ae:	4621      	mov	r1, r4
 80044b0:	024a      	lsls	r2, r1, #9
 80044b2:	4610      	mov	r0, r2
 80044b4:	4619      	mov	r1, r3
 80044b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044c4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80044c8:	f7fc fbde 	bl	8000c88 <__aeabi_uldivmod>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4613      	mov	r3, r2
 80044d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044d6:	e067      	b.n	80045a8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044d8:	4b75      	ldr	r3, [pc, #468]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	099b      	lsrs	r3, r3, #6
 80044de:	2200      	movs	r2, #0
 80044e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044e4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80044e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80044f2:	2300      	movs	r3, #0
 80044f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80044f6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80044fa:	4622      	mov	r2, r4
 80044fc:	462b      	mov	r3, r5
 80044fe:	f04f 0000 	mov.w	r0, #0
 8004502:	f04f 0100 	mov.w	r1, #0
 8004506:	0159      	lsls	r1, r3, #5
 8004508:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800450c:	0150      	lsls	r0, r2, #5
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
 8004512:	4621      	mov	r1, r4
 8004514:	1a51      	subs	r1, r2, r1
 8004516:	62b9      	str	r1, [r7, #40]	; 0x28
 8004518:	4629      	mov	r1, r5
 800451a:	eb63 0301 	sbc.w	r3, r3, r1
 800451e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	f04f 0300 	mov.w	r3, #0
 8004528:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800452c:	4649      	mov	r1, r9
 800452e:	018b      	lsls	r3, r1, #6
 8004530:	4641      	mov	r1, r8
 8004532:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004536:	4641      	mov	r1, r8
 8004538:	018a      	lsls	r2, r1, #6
 800453a:	4641      	mov	r1, r8
 800453c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004540:	4649      	mov	r1, r9
 8004542:	eb63 0b01 	sbc.w	fp, r3, r1
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	f04f 0300 	mov.w	r3, #0
 800454e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004552:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004556:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800455a:	4692      	mov	sl, r2
 800455c:	469b      	mov	fp, r3
 800455e:	4623      	mov	r3, r4
 8004560:	eb1a 0303 	adds.w	r3, sl, r3
 8004564:	623b      	str	r3, [r7, #32]
 8004566:	462b      	mov	r3, r5
 8004568:	eb4b 0303 	adc.w	r3, fp, r3
 800456c:	627b      	str	r3, [r7, #36]	; 0x24
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	f04f 0300 	mov.w	r3, #0
 8004576:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800457a:	4629      	mov	r1, r5
 800457c:	028b      	lsls	r3, r1, #10
 800457e:	4621      	mov	r1, r4
 8004580:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004584:	4621      	mov	r1, r4
 8004586:	028a      	lsls	r2, r1, #10
 8004588:	4610      	mov	r0, r2
 800458a:	4619      	mov	r1, r3
 800458c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004590:	2200      	movs	r2, #0
 8004592:	673b      	str	r3, [r7, #112]	; 0x70
 8004594:	677a      	str	r2, [r7, #116]	; 0x74
 8004596:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800459a:	f7fc fb75 	bl	8000c88 <__aeabi_uldivmod>
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	4613      	mov	r3, r2
 80045a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045a8:	4b41      	ldr	r3, [pc, #260]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	0c1b      	lsrs	r3, r3, #16
 80045ae:	f003 0303 	and.w	r3, r3, #3
 80045b2:	3301      	adds	r3, #1
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80045ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80045ca:	e0eb      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045cc:	4b38      	ldr	r3, [pc, #224]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045d8:	4b35      	ldr	r3, [pc, #212]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d06b      	beq.n	80046bc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045e4:	4b32      	ldr	r3, [pc, #200]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	099b      	lsrs	r3, r3, #6
 80045ea:	2200      	movs	r2, #0
 80045ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80045ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f6:	663b      	str	r3, [r7, #96]	; 0x60
 80045f8:	2300      	movs	r3, #0
 80045fa:	667b      	str	r3, [r7, #100]	; 0x64
 80045fc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004600:	4622      	mov	r2, r4
 8004602:	462b      	mov	r3, r5
 8004604:	f04f 0000 	mov.w	r0, #0
 8004608:	f04f 0100 	mov.w	r1, #0
 800460c:	0159      	lsls	r1, r3, #5
 800460e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004612:	0150      	lsls	r0, r2, #5
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	4621      	mov	r1, r4
 800461a:	1a51      	subs	r1, r2, r1
 800461c:	61b9      	str	r1, [r7, #24]
 800461e:	4629      	mov	r1, r5
 8004620:	eb63 0301 	sbc.w	r3, r3, r1
 8004624:	61fb      	str	r3, [r7, #28]
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004632:	4659      	mov	r1, fp
 8004634:	018b      	lsls	r3, r1, #6
 8004636:	4651      	mov	r1, sl
 8004638:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800463c:	4651      	mov	r1, sl
 800463e:	018a      	lsls	r2, r1, #6
 8004640:	4651      	mov	r1, sl
 8004642:	ebb2 0801 	subs.w	r8, r2, r1
 8004646:	4659      	mov	r1, fp
 8004648:	eb63 0901 	sbc.w	r9, r3, r1
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004658:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800465c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004660:	4690      	mov	r8, r2
 8004662:	4699      	mov	r9, r3
 8004664:	4623      	mov	r3, r4
 8004666:	eb18 0303 	adds.w	r3, r8, r3
 800466a:	613b      	str	r3, [r7, #16]
 800466c:	462b      	mov	r3, r5
 800466e:	eb49 0303 	adc.w	r3, r9, r3
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	f04f 0300 	mov.w	r3, #0
 800467c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004680:	4629      	mov	r1, r5
 8004682:	024b      	lsls	r3, r1, #9
 8004684:	4621      	mov	r1, r4
 8004686:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800468a:	4621      	mov	r1, r4
 800468c:	024a      	lsls	r2, r1, #9
 800468e:	4610      	mov	r0, r2
 8004690:	4619      	mov	r1, r3
 8004692:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004696:	2200      	movs	r2, #0
 8004698:	65bb      	str	r3, [r7, #88]	; 0x58
 800469a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800469c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80046a0:	f7fc faf2 	bl	8000c88 <__aeabi_uldivmod>
 80046a4:	4602      	mov	r2, r0
 80046a6:	460b      	mov	r3, r1
 80046a8:	4613      	mov	r3, r2
 80046aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046ae:	e065      	b.n	800477c <HAL_RCC_GetSysClockFreq+0x420>
 80046b0:	40023800 	.word	0x40023800
 80046b4:	00f42400 	.word	0x00f42400
 80046b8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046bc:	4b3d      	ldr	r3, [pc, #244]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x458>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	099b      	lsrs	r3, r3, #6
 80046c2:	2200      	movs	r2, #0
 80046c4:	4618      	mov	r0, r3
 80046c6:	4611      	mov	r1, r2
 80046c8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046cc:	653b      	str	r3, [r7, #80]	; 0x50
 80046ce:	2300      	movs	r3, #0
 80046d0:	657b      	str	r3, [r7, #84]	; 0x54
 80046d2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80046d6:	4642      	mov	r2, r8
 80046d8:	464b      	mov	r3, r9
 80046da:	f04f 0000 	mov.w	r0, #0
 80046de:	f04f 0100 	mov.w	r1, #0
 80046e2:	0159      	lsls	r1, r3, #5
 80046e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046e8:	0150      	lsls	r0, r2, #5
 80046ea:	4602      	mov	r2, r0
 80046ec:	460b      	mov	r3, r1
 80046ee:	4641      	mov	r1, r8
 80046f0:	1a51      	subs	r1, r2, r1
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	4649      	mov	r1, r9
 80046f6:	eb63 0301 	sbc.w	r3, r3, r1
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004708:	4659      	mov	r1, fp
 800470a:	018b      	lsls	r3, r1, #6
 800470c:	4651      	mov	r1, sl
 800470e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004712:	4651      	mov	r1, sl
 8004714:	018a      	lsls	r2, r1, #6
 8004716:	4651      	mov	r1, sl
 8004718:	1a54      	subs	r4, r2, r1
 800471a:	4659      	mov	r1, fp
 800471c:	eb63 0501 	sbc.w	r5, r3, r1
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	f04f 0300 	mov.w	r3, #0
 8004728:	00eb      	lsls	r3, r5, #3
 800472a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800472e:	00e2      	lsls	r2, r4, #3
 8004730:	4614      	mov	r4, r2
 8004732:	461d      	mov	r5, r3
 8004734:	4643      	mov	r3, r8
 8004736:	18e3      	adds	r3, r4, r3
 8004738:	603b      	str	r3, [r7, #0]
 800473a:	464b      	mov	r3, r9
 800473c:	eb45 0303 	adc.w	r3, r5, r3
 8004740:	607b      	str	r3, [r7, #4]
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800474e:	4629      	mov	r1, r5
 8004750:	028b      	lsls	r3, r1, #10
 8004752:	4621      	mov	r1, r4
 8004754:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004758:	4621      	mov	r1, r4
 800475a:	028a      	lsls	r2, r1, #10
 800475c:	4610      	mov	r0, r2
 800475e:	4619      	mov	r1, r3
 8004760:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004764:	2200      	movs	r2, #0
 8004766:	64bb      	str	r3, [r7, #72]	; 0x48
 8004768:	64fa      	str	r2, [r7, #76]	; 0x4c
 800476a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800476e:	f7fc fa8b 	bl	8000c88 <__aeabi_uldivmod>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	4613      	mov	r3, r2
 8004778:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800477c:	4b0d      	ldr	r3, [pc, #52]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x458>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	0f1b      	lsrs	r3, r3, #28
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800478a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800478e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004792:	fbb2 f3f3 	udiv	r3, r2, r3
 8004796:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800479a:	e003      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800479c:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800479e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80047a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	37b8      	adds	r7, #184	; 0xb8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047b2:	bf00      	nop
 80047b4:	40023800 	.word	0x40023800
 80047b8:	00f42400 	.word	0x00f42400

080047bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e28d      	b.n	8004cea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 8083 	beq.w	80048e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80047dc:	4b94      	ldr	r3, [pc, #592]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 030c 	and.w	r3, r3, #12
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d019      	beq.n	800481c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80047e8:	4b91      	ldr	r3, [pc, #580]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d106      	bne.n	8004802 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80047f4:	4b8e      	ldr	r3, [pc, #568]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004800:	d00c      	beq.n	800481c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004802:	4b8b      	ldr	r3, [pc, #556]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800480a:	2b0c      	cmp	r3, #12
 800480c:	d112      	bne.n	8004834 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800480e:	4b88      	ldr	r3, [pc, #544]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800481a:	d10b      	bne.n	8004834 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800481c:	4b84      	ldr	r3, [pc, #528]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d05b      	beq.n	80048e0 <HAL_RCC_OscConfig+0x124>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d157      	bne.n	80048e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e25a      	b.n	8004cea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800483c:	d106      	bne.n	800484c <HAL_RCC_OscConfig+0x90>
 800483e:	4b7c      	ldr	r3, [pc, #496]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a7b      	ldr	r2, [pc, #492]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 8004844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	e01d      	b.n	8004888 <HAL_RCC_OscConfig+0xcc>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004854:	d10c      	bne.n	8004870 <HAL_RCC_OscConfig+0xb4>
 8004856:	4b76      	ldr	r3, [pc, #472]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a75      	ldr	r2, [pc, #468]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 800485c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	4b73      	ldr	r3, [pc, #460]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a72      	ldr	r2, [pc, #456]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 8004868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	e00b      	b.n	8004888 <HAL_RCC_OscConfig+0xcc>
 8004870:	4b6f      	ldr	r3, [pc, #444]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a6e      	ldr	r2, [pc, #440]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 8004876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800487a:	6013      	str	r3, [r2, #0]
 800487c:	4b6c      	ldr	r3, [pc, #432]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a6b      	ldr	r2, [pc, #428]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 8004882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d013      	beq.n	80048b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004890:	f7fd fdd8 	bl	8002444 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004898:	f7fd fdd4 	bl	8002444 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b64      	cmp	r3, #100	; 0x64
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e21f      	b.n	8004cea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048aa:	4b61      	ldr	r3, [pc, #388]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f0      	beq.n	8004898 <HAL_RCC_OscConfig+0xdc>
 80048b6:	e014      	b.n	80048e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b8:	f7fd fdc4 	bl	8002444 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048c0:	f7fd fdc0 	bl	8002444 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b64      	cmp	r3, #100	; 0x64
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e20b      	b.n	8004cea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048d2:	4b57      	ldr	r3, [pc, #348]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1f0      	bne.n	80048c0 <HAL_RCC_OscConfig+0x104>
 80048de:	e000      	b.n	80048e2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d06f      	beq.n	80049ce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80048ee:	4b50      	ldr	r3, [pc, #320]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 030c 	and.w	r3, r3, #12
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d017      	beq.n	800492a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80048fa:	4b4d      	ldr	r3, [pc, #308]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004902:	2b08      	cmp	r3, #8
 8004904:	d105      	bne.n	8004912 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004906:	4b4a      	ldr	r3, [pc, #296]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00b      	beq.n	800492a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004912:	4b47      	ldr	r3, [pc, #284]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800491a:	2b0c      	cmp	r3, #12
 800491c:	d11c      	bne.n	8004958 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800491e:	4b44      	ldr	r3, [pc, #272]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d116      	bne.n	8004958 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800492a:	4b41      	ldr	r3, [pc, #260]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d005      	beq.n	8004942 <HAL_RCC_OscConfig+0x186>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d001      	beq.n	8004942 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e1d3      	b.n	8004cea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004942:	4b3b      	ldr	r3, [pc, #236]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	4937      	ldr	r1, [pc, #220]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 8004952:	4313      	orrs	r3, r2
 8004954:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004956:	e03a      	b.n	80049ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d020      	beq.n	80049a2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004960:	4b34      	ldr	r3, [pc, #208]	; (8004a34 <HAL_RCC_OscConfig+0x278>)
 8004962:	2201      	movs	r2, #1
 8004964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004966:	f7fd fd6d 	bl	8002444 <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800496e:	f7fd fd69 	bl	8002444 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e1b4      	b.n	8004cea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004980:	4b2b      	ldr	r3, [pc, #172]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0f0      	beq.n	800496e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800498c:	4b28      	ldr	r3, [pc, #160]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	4925      	ldr	r1, [pc, #148]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 800499c:	4313      	orrs	r3, r2
 800499e:	600b      	str	r3, [r1, #0]
 80049a0:	e015      	b.n	80049ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049a2:	4b24      	ldr	r3, [pc, #144]	; (8004a34 <HAL_RCC_OscConfig+0x278>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a8:	f7fd fd4c 	bl	8002444 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049b0:	f7fd fd48 	bl	8002444 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e193      	b.n	8004cea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049c2:	4b1b      	ldr	r3, [pc, #108]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f0      	bne.n	80049b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d036      	beq.n	8004a48 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d016      	beq.n	8004a10 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049e2:	4b15      	ldr	r3, [pc, #84]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 80049e4:	2201      	movs	r2, #1
 80049e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e8:	f7fd fd2c 	bl	8002444 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049f0:	f7fd fd28 	bl	8002444 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e173      	b.n	8004cea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a02:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <HAL_RCC_OscConfig+0x274>)
 8004a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCC_OscConfig+0x234>
 8004a0e:	e01b      	b.n	8004a48 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a10:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <HAL_RCC_OscConfig+0x27c>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a16:	f7fd fd15 	bl	8002444 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a1c:	e00e      	b.n	8004a3c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a1e:	f7fd fd11 	bl	8002444 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d907      	bls.n	8004a3c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e15c      	b.n	8004cea <HAL_RCC_OscConfig+0x52e>
 8004a30:	40023800 	.word	0x40023800
 8004a34:	42470000 	.word	0x42470000
 8004a38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a3c:	4b8a      	ldr	r3, [pc, #552]	; (8004c68 <HAL_RCC_OscConfig+0x4ac>)
 8004a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1ea      	bne.n	8004a1e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 8097 	beq.w	8004b84 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a56:	2300      	movs	r3, #0
 8004a58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a5a:	4b83      	ldr	r3, [pc, #524]	; (8004c68 <HAL_RCC_OscConfig+0x4ac>)
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10f      	bne.n	8004a86 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a66:	2300      	movs	r3, #0
 8004a68:	60bb      	str	r3, [r7, #8]
 8004a6a:	4b7f      	ldr	r3, [pc, #508]	; (8004c68 <HAL_RCC_OscConfig+0x4ac>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	4a7e      	ldr	r2, [pc, #504]	; (8004c68 <HAL_RCC_OscConfig+0x4ac>)
 8004a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a74:	6413      	str	r3, [r2, #64]	; 0x40
 8004a76:	4b7c      	ldr	r3, [pc, #496]	; (8004c68 <HAL_RCC_OscConfig+0x4ac>)
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	60bb      	str	r3, [r7, #8]
 8004a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a82:	2301      	movs	r3, #1
 8004a84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a86:	4b79      	ldr	r3, [pc, #484]	; (8004c6c <HAL_RCC_OscConfig+0x4b0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d118      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a92:	4b76      	ldr	r3, [pc, #472]	; (8004c6c <HAL_RCC_OscConfig+0x4b0>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a75      	ldr	r2, [pc, #468]	; (8004c6c <HAL_RCC_OscConfig+0x4b0>)
 8004a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a9e:	f7fd fcd1 	bl	8002444 <HAL_GetTick>
 8004aa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aa6:	f7fd fccd 	bl	8002444 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e118      	b.n	8004cea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab8:	4b6c      	ldr	r3, [pc, #432]	; (8004c6c <HAL_RCC_OscConfig+0x4b0>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0f0      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d106      	bne.n	8004ada <HAL_RCC_OscConfig+0x31e>
 8004acc:	4b66      	ldr	r3, [pc, #408]	; (8004c68 <HAL_RCC_OscConfig+0x4ac>)
 8004ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad0:	4a65      	ldr	r2, [pc, #404]	; (8004c68 <HAL_RCC_OscConfig+0x4ac>)
 8004ad2:	f043 0301 	orr.w	r3, r3, #1
 8004ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ad8:	e01c      	b.n	8004b14 <HAL_RCC_OscConfig+0x358>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	2b05      	cmp	r3, #5
 8004ae0:	d10c      	bne.n	8004afc <HAL_RCC_OscConfig+0x340>
 8004ae2:	4b61      	ldr	r3, [pc, #388]	; (8004c68 <HAL_RCC_OscConfig+0x4ac>)
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae6:	4a60      	ldr	r2, [pc, #384]	; (8004c68 <HAL_RCC_OscConfig+0x4ac>)
 8004ae8:	f043 0304 	orr.w	r3, r3, #4
 8004aec:	6713      	str	r3, [r2, #112]	; 0x70
 8004aee:	4b5e      	ldr	r3, [pc, #376]	; (8004c68 <HAL_RCC_OscConfig+0x4ac>)
 8004af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af2:	4a5d      	ldr	r2, [pc, #372]	; (8004c68 <HAL_RCC_OscConfig+0x4ac>)
 8004af4:	f043 0301 	orr.w	r3, r3, #1
 8004af8:	6713      	str	r3, [r2, #112]	; 0x70
 8004afa:	e00b      	b.n	8004b14 <HAL_RCC_OscConfig+0x358>
 8004afc:	4b5a      	ldr	r3, [pc, #360]	; (8004c68 <HAL_RCC_OscConfig+0x4ac>)
 8004afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b00:	4a59      	ldr	r2, [pc, #356]	; (8004c68 <HAL_RCC_OscConfig+0x4ac>)
 8004b02:	f023 0301 	bic.w	r3, r3, #1
 8004b06:	6713      	str	r3, [r2, #112]	; 0x70
 8004b08:	4b57      	ldr	r3, [pc, #348]	; (8004c68 <HAL_RCC_OscConfig+0x4ac>)
 8004b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0c:	4a56      	ldr	r2, [pc, #344]	; (8004c68 <HAL_RCC_OscConfig+0x4ac>)
 8004b0e:	f023 0304 	bic.w	r3, r3, #4
 8004b12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d015      	beq.n	8004b48 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1c:	f7fd fc92 	bl	8002444 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b22:	e00a      	b.n	8004b3a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b24:	f7fd fc8e 	bl	8002444 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e0d7      	b.n	8004cea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b3a:	4b4b      	ldr	r3, [pc, #300]	; (8004c68 <HAL_RCC_OscConfig+0x4ac>)
 8004b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0ee      	beq.n	8004b24 <HAL_RCC_OscConfig+0x368>
 8004b46:	e014      	b.n	8004b72 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b48:	f7fd fc7c 	bl	8002444 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b4e:	e00a      	b.n	8004b66 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b50:	f7fd fc78 	bl	8002444 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e0c1      	b.n	8004cea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b66:	4b40      	ldr	r3, [pc, #256]	; (8004c68 <HAL_RCC_OscConfig+0x4ac>)
 8004b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1ee      	bne.n	8004b50 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b72:	7dfb      	ldrb	r3, [r7, #23]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d105      	bne.n	8004b84 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b78:	4b3b      	ldr	r3, [pc, #236]	; (8004c68 <HAL_RCC_OscConfig+0x4ac>)
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	4a3a      	ldr	r2, [pc, #232]	; (8004c68 <HAL_RCC_OscConfig+0x4ac>)
 8004b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 80ad 	beq.w	8004ce8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b8e:	4b36      	ldr	r3, [pc, #216]	; (8004c68 <HAL_RCC_OscConfig+0x4ac>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 030c 	and.w	r3, r3, #12
 8004b96:	2b08      	cmp	r3, #8
 8004b98:	d060      	beq.n	8004c5c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d145      	bne.n	8004c2e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ba2:	4b33      	ldr	r3, [pc, #204]	; (8004c70 <HAL_RCC_OscConfig+0x4b4>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba8:	f7fd fc4c 	bl	8002444 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bb0:	f7fd fc48 	bl	8002444 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e093      	b.n	8004cea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc2:	4b29      	ldr	r3, [pc, #164]	; (8004c68 <HAL_RCC_OscConfig+0x4ac>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f0      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	69da      	ldr	r2, [r3, #28]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	019b      	lsls	r3, r3, #6
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be4:	085b      	lsrs	r3, r3, #1
 8004be6:	3b01      	subs	r3, #1
 8004be8:	041b      	lsls	r3, r3, #16
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	061b      	lsls	r3, r3, #24
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf8:	071b      	lsls	r3, r3, #28
 8004bfa:	491b      	ldr	r1, [pc, #108]	; (8004c68 <HAL_RCC_OscConfig+0x4ac>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c00:	4b1b      	ldr	r3, [pc, #108]	; (8004c70 <HAL_RCC_OscConfig+0x4b4>)
 8004c02:	2201      	movs	r2, #1
 8004c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c06:	f7fd fc1d 	bl	8002444 <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c0c:	e008      	b.n	8004c20 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c0e:	f7fd fc19 	bl	8002444 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e064      	b.n	8004cea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c20:	4b11      	ldr	r3, [pc, #68]	; (8004c68 <HAL_RCC_OscConfig+0x4ac>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d0f0      	beq.n	8004c0e <HAL_RCC_OscConfig+0x452>
 8004c2c:	e05c      	b.n	8004ce8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c2e:	4b10      	ldr	r3, [pc, #64]	; (8004c70 <HAL_RCC_OscConfig+0x4b4>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c34:	f7fd fc06 	bl	8002444 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c3c:	f7fd fc02 	bl	8002444 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e04d      	b.n	8004cea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c4e:	4b06      	ldr	r3, [pc, #24]	; (8004c68 <HAL_RCC_OscConfig+0x4ac>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1f0      	bne.n	8004c3c <HAL_RCC_OscConfig+0x480>
 8004c5a:	e045      	b.n	8004ce8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d107      	bne.n	8004c74 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e040      	b.n	8004cea <HAL_RCC_OscConfig+0x52e>
 8004c68:	40023800 	.word	0x40023800
 8004c6c:	40007000 	.word	0x40007000
 8004c70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c74:	4b1f      	ldr	r3, [pc, #124]	; (8004cf4 <HAL_RCC_OscConfig+0x538>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d030      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d129      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d122      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004caa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d119      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cba:	085b      	lsrs	r3, r3, #1
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d10f      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d107      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d001      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40023800 	.word	0x40023800

08004cf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e041      	b.n	8004d8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d106      	bne.n	8004d24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7fd f980 	bl	8002024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3304      	adds	r3, #4
 8004d34:	4619      	mov	r1, r3
 8004d36:	4610      	mov	r0, r2
 8004d38:	f000 f95e 	bl	8004ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
	...

08004d98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d001      	beq.n	8004db0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e046      	b.n	8004e3e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a23      	ldr	r2, [pc, #140]	; (8004e4c <HAL_TIM_Base_Start+0xb4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d022      	beq.n	8004e08 <HAL_TIM_Base_Start+0x70>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dca:	d01d      	beq.n	8004e08 <HAL_TIM_Base_Start+0x70>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a1f      	ldr	r2, [pc, #124]	; (8004e50 <HAL_TIM_Base_Start+0xb8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d018      	beq.n	8004e08 <HAL_TIM_Base_Start+0x70>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a1e      	ldr	r2, [pc, #120]	; (8004e54 <HAL_TIM_Base_Start+0xbc>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d013      	beq.n	8004e08 <HAL_TIM_Base_Start+0x70>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a1c      	ldr	r2, [pc, #112]	; (8004e58 <HAL_TIM_Base_Start+0xc0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d00e      	beq.n	8004e08 <HAL_TIM_Base_Start+0x70>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a1b      	ldr	r2, [pc, #108]	; (8004e5c <HAL_TIM_Base_Start+0xc4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d009      	beq.n	8004e08 <HAL_TIM_Base_Start+0x70>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a19      	ldr	r2, [pc, #100]	; (8004e60 <HAL_TIM_Base_Start+0xc8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d004      	beq.n	8004e08 <HAL_TIM_Base_Start+0x70>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a18      	ldr	r2, [pc, #96]	; (8004e64 <HAL_TIM_Base_Start+0xcc>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d111      	bne.n	8004e2c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b06      	cmp	r3, #6
 8004e18:	d010      	beq.n	8004e3c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f042 0201 	orr.w	r2, r2, #1
 8004e28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e2a:	e007      	b.n	8004e3c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40010000 	.word	0x40010000
 8004e50:	40000400 	.word	0x40000400
 8004e54:	40000800 	.word	0x40000800
 8004e58:	40000c00 	.word	0x40000c00
 8004e5c:	40010400 	.word	0x40010400
 8004e60:	40014000 	.word	0x40014000
 8004e64:	40001800 	.word	0x40001800

08004e68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_TIM_ConfigClockSource+0x1c>
 8004e80:	2302      	movs	r3, #2
 8004e82:	e0b4      	b.n	8004fee <HAL_TIM_ConfigClockSource+0x186>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ebc:	d03e      	beq.n	8004f3c <HAL_TIM_ConfigClockSource+0xd4>
 8004ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ec2:	f200 8087 	bhi.w	8004fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eca:	f000 8086 	beq.w	8004fda <HAL_TIM_ConfigClockSource+0x172>
 8004ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed2:	d87f      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ed4:	2b70      	cmp	r3, #112	; 0x70
 8004ed6:	d01a      	beq.n	8004f0e <HAL_TIM_ConfigClockSource+0xa6>
 8004ed8:	2b70      	cmp	r3, #112	; 0x70
 8004eda:	d87b      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004edc:	2b60      	cmp	r3, #96	; 0x60
 8004ede:	d050      	beq.n	8004f82 <HAL_TIM_ConfigClockSource+0x11a>
 8004ee0:	2b60      	cmp	r3, #96	; 0x60
 8004ee2:	d877      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee4:	2b50      	cmp	r3, #80	; 0x50
 8004ee6:	d03c      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0xfa>
 8004ee8:	2b50      	cmp	r3, #80	; 0x50
 8004eea:	d873      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004eec:	2b40      	cmp	r3, #64	; 0x40
 8004eee:	d058      	beq.n	8004fa2 <HAL_TIM_ConfigClockSource+0x13a>
 8004ef0:	2b40      	cmp	r3, #64	; 0x40
 8004ef2:	d86f      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef4:	2b30      	cmp	r3, #48	; 0x30
 8004ef6:	d064      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8004ef8:	2b30      	cmp	r3, #48	; 0x30
 8004efa:	d86b      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004efc:	2b20      	cmp	r3, #32
 8004efe:	d060      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8004f00:	2b20      	cmp	r3, #32
 8004f02:	d867      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d05c      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8004f08:	2b10      	cmp	r3, #16
 8004f0a:	d05a      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8004f0c:	e062      	b.n	8004fd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6818      	ldr	r0, [r3, #0]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	6899      	ldr	r1, [r3, #8]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f000 f985 	bl	800522c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	609a      	str	r2, [r3, #8]
      break;
 8004f3a:	e04f      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6818      	ldr	r0, [r3, #0]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	6899      	ldr	r1, [r3, #8]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f000 f96e 	bl	800522c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f5e:	609a      	str	r2, [r3, #8]
      break;
 8004f60:	e03c      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6818      	ldr	r0, [r3, #0]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	6859      	ldr	r1, [r3, #4]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	f000 f8e2 	bl	8005138 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2150      	movs	r1, #80	; 0x50
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 f93b 	bl	80051f6 <TIM_ITRx_SetConfig>
      break;
 8004f80:	e02c      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	6859      	ldr	r1, [r3, #4]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	f000 f901 	bl	8005196 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2160      	movs	r1, #96	; 0x60
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 f92b 	bl	80051f6 <TIM_ITRx_SetConfig>
      break;
 8004fa0:	e01c      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6818      	ldr	r0, [r3, #0]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	6859      	ldr	r1, [r3, #4]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f000 f8c2 	bl	8005138 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2140      	movs	r1, #64	; 0x40
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 f91b 	bl	80051f6 <TIM_ITRx_SetConfig>
      break;
 8004fc0:	e00c      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4610      	mov	r0, r2
 8004fce:	f000 f912 	bl	80051f6 <TIM_ITRx_SetConfig>
      break;
 8004fd2:	e003      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fd8:	e000      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
	...

08004ff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a40      	ldr	r2, [pc, #256]	; (800510c <TIM_Base_SetConfig+0x114>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d013      	beq.n	8005038 <TIM_Base_SetConfig+0x40>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005016:	d00f      	beq.n	8005038 <TIM_Base_SetConfig+0x40>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a3d      	ldr	r2, [pc, #244]	; (8005110 <TIM_Base_SetConfig+0x118>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d00b      	beq.n	8005038 <TIM_Base_SetConfig+0x40>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a3c      	ldr	r2, [pc, #240]	; (8005114 <TIM_Base_SetConfig+0x11c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d007      	beq.n	8005038 <TIM_Base_SetConfig+0x40>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a3b      	ldr	r2, [pc, #236]	; (8005118 <TIM_Base_SetConfig+0x120>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d003      	beq.n	8005038 <TIM_Base_SetConfig+0x40>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a3a      	ldr	r2, [pc, #232]	; (800511c <TIM_Base_SetConfig+0x124>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d108      	bne.n	800504a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4313      	orrs	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a2f      	ldr	r2, [pc, #188]	; (800510c <TIM_Base_SetConfig+0x114>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d02b      	beq.n	80050aa <TIM_Base_SetConfig+0xb2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005058:	d027      	beq.n	80050aa <TIM_Base_SetConfig+0xb2>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a2c      	ldr	r2, [pc, #176]	; (8005110 <TIM_Base_SetConfig+0x118>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d023      	beq.n	80050aa <TIM_Base_SetConfig+0xb2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a2b      	ldr	r2, [pc, #172]	; (8005114 <TIM_Base_SetConfig+0x11c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d01f      	beq.n	80050aa <TIM_Base_SetConfig+0xb2>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a2a      	ldr	r2, [pc, #168]	; (8005118 <TIM_Base_SetConfig+0x120>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d01b      	beq.n	80050aa <TIM_Base_SetConfig+0xb2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a29      	ldr	r2, [pc, #164]	; (800511c <TIM_Base_SetConfig+0x124>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d017      	beq.n	80050aa <TIM_Base_SetConfig+0xb2>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a28      	ldr	r2, [pc, #160]	; (8005120 <TIM_Base_SetConfig+0x128>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d013      	beq.n	80050aa <TIM_Base_SetConfig+0xb2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a27      	ldr	r2, [pc, #156]	; (8005124 <TIM_Base_SetConfig+0x12c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d00f      	beq.n	80050aa <TIM_Base_SetConfig+0xb2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a26      	ldr	r2, [pc, #152]	; (8005128 <TIM_Base_SetConfig+0x130>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00b      	beq.n	80050aa <TIM_Base_SetConfig+0xb2>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a25      	ldr	r2, [pc, #148]	; (800512c <TIM_Base_SetConfig+0x134>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d007      	beq.n	80050aa <TIM_Base_SetConfig+0xb2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a24      	ldr	r2, [pc, #144]	; (8005130 <TIM_Base_SetConfig+0x138>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d003      	beq.n	80050aa <TIM_Base_SetConfig+0xb2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a23      	ldr	r2, [pc, #140]	; (8005134 <TIM_Base_SetConfig+0x13c>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d108      	bne.n	80050bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a0a      	ldr	r2, [pc, #40]	; (800510c <TIM_Base_SetConfig+0x114>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d003      	beq.n	80050f0 <TIM_Base_SetConfig+0xf8>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a0c      	ldr	r2, [pc, #48]	; (800511c <TIM_Base_SetConfig+0x124>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d103      	bne.n	80050f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	691a      	ldr	r2, [r3, #16]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	615a      	str	r2, [r3, #20]
}
 80050fe:	bf00      	nop
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40010000 	.word	0x40010000
 8005110:	40000400 	.word	0x40000400
 8005114:	40000800 	.word	0x40000800
 8005118:	40000c00 	.word	0x40000c00
 800511c:	40010400 	.word	0x40010400
 8005120:	40014000 	.word	0x40014000
 8005124:	40014400 	.word	0x40014400
 8005128:	40014800 	.word	0x40014800
 800512c:	40001800 	.word	0x40001800
 8005130:	40001c00 	.word	0x40001c00
 8005134:	40002000 	.word	0x40002000

08005138 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	f023 0201 	bic.w	r2, r3, #1
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f023 030a 	bic.w	r3, r3, #10
 8005174:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	621a      	str	r2, [r3, #32]
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005196:	b480      	push	{r7}
 8005198:	b087      	sub	sp, #28
 800519a:	af00      	add	r7, sp, #0
 800519c:	60f8      	str	r0, [r7, #12]
 800519e:	60b9      	str	r1, [r7, #8]
 80051a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	f023 0210 	bic.w	r2, r3, #16
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	031b      	lsls	r3, r3, #12
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	011b      	lsls	r3, r3, #4
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	4313      	orrs	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	621a      	str	r2, [r3, #32]
}
 80051ea:	bf00      	nop
 80051ec:	371c      	adds	r7, #28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b085      	sub	sp, #20
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4313      	orrs	r3, r2
 8005214:	f043 0307 	orr.w	r3, r3, #7
 8005218:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	609a      	str	r2, [r3, #8]
}
 8005220:	bf00      	nop
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005246:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	021a      	lsls	r2, r3, #8
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	431a      	orrs	r2, r3
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	4313      	orrs	r3, r2
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	609a      	str	r2, [r3, #8]
}
 8005260:	bf00      	nop
 8005262:	371c      	adds	r7, #28
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800527c:	2b01      	cmp	r3, #1
 800527e:	d101      	bne.n	8005284 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005280:	2302      	movs	r3, #2
 8005282:	e05a      	b.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a21      	ldr	r2, [pc, #132]	; (8005348 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d022      	beq.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d0:	d01d      	beq.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a1d      	ldr	r2, [pc, #116]	; (800534c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d018      	beq.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a1b      	ldr	r2, [pc, #108]	; (8005350 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d013      	beq.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a1a      	ldr	r2, [pc, #104]	; (8005354 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d00e      	beq.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a18      	ldr	r2, [pc, #96]	; (8005358 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d009      	beq.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a17      	ldr	r2, [pc, #92]	; (800535c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d004      	beq.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a15      	ldr	r2, [pc, #84]	; (8005360 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d10c      	bne.n	8005328 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005314:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	4313      	orrs	r3, r2
 800531e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	40010000 	.word	0x40010000
 800534c:	40000400 	.word	0x40000400
 8005350:	40000800 	.word	0x40000800
 8005354:	40000c00 	.word	0x40000c00
 8005358:	40010400 	.word	0x40010400
 800535c:	40014000 	.word	0x40014000
 8005360:	40001800 	.word	0x40001800

08005364 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e03f      	b.n	80053f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d106      	bne.n	8005390 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7fc fe6c 	bl	8002068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2224      	movs	r2, #36	; 0x24
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68da      	ldr	r2, [r3, #12]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f929 	bl	8005600 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695a      	ldr	r2, [r3, #20]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b08a      	sub	sp, #40	; 0x28
 8005402:	af02      	add	r7, sp, #8
 8005404:	60f8      	str	r0, [r7, #12]
 8005406:	60b9      	str	r1, [r7, #8]
 8005408:	603b      	str	r3, [r7, #0]
 800540a:	4613      	mov	r3, r2
 800540c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800540e:	2300      	movs	r3, #0
 8005410:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b20      	cmp	r3, #32
 800541c:	d17c      	bne.n	8005518 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <HAL_UART_Transmit+0x2c>
 8005424:	88fb      	ldrh	r3, [r7, #6]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e075      	b.n	800551a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_UART_Transmit+0x3e>
 8005438:	2302      	movs	r3, #2
 800543a:	e06e      	b.n	800551a <HAL_UART_Transmit+0x11c>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2221      	movs	r2, #33	; 0x21
 800544e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005452:	f7fc fff7 	bl	8002444 <HAL_GetTick>
 8005456:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	88fa      	ldrh	r2, [r7, #6]
 800545c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	88fa      	ldrh	r2, [r7, #6]
 8005462:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546c:	d108      	bne.n	8005480 <HAL_UART_Transmit+0x82>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d104      	bne.n	8005480 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005476:	2300      	movs	r3, #0
 8005478:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	61bb      	str	r3, [r7, #24]
 800547e:	e003      	b.n	8005488 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005484:	2300      	movs	r3, #0
 8005486:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005490:	e02a      	b.n	80054e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2200      	movs	r2, #0
 800549a:	2180      	movs	r1, #128	; 0x80
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 f840 	bl	8005522 <UART_WaitOnFlagUntilTimeout>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e036      	b.n	800551a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10b      	bne.n	80054ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	3302      	adds	r3, #2
 80054c6:	61bb      	str	r3, [r7, #24]
 80054c8:	e007      	b.n	80054da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	781a      	ldrb	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	3301      	adds	r3, #1
 80054d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054de:	b29b      	uxth	r3, r3
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1cf      	bne.n	8005492 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2200      	movs	r2, #0
 80054fa:	2140      	movs	r1, #64	; 0x40
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 f810 	bl	8005522 <UART_WaitOnFlagUntilTimeout>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e006      	b.n	800551a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	e000      	b.n	800551a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005518:	2302      	movs	r3, #2
  }
}
 800551a:	4618      	mov	r0, r3
 800551c:	3720      	adds	r7, #32
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b090      	sub	sp, #64	; 0x40
 8005526:	af00      	add	r7, sp, #0
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	603b      	str	r3, [r7, #0]
 800552e:	4613      	mov	r3, r2
 8005530:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005532:	e050      	b.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553a:	d04c      	beq.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800553c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800553e:	2b00      	cmp	r3, #0
 8005540:	d007      	beq.n	8005552 <UART_WaitOnFlagUntilTimeout+0x30>
 8005542:	f7fc ff7f 	bl	8002444 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800554e:	429a      	cmp	r2, r3
 8005550:	d241      	bcs.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	330c      	adds	r3, #12
 8005558:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	e853 3f00 	ldrex	r3, [r3]
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005568:	63fb      	str	r3, [r7, #60]	; 0x3c
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	330c      	adds	r3, #12
 8005570:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005572:	637a      	str	r2, [r7, #52]	; 0x34
 8005574:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005576:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005578:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800557a:	e841 2300 	strex	r3, r2, [r1]
 800557e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1e5      	bne.n	8005552 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3314      	adds	r3, #20
 800558c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	e853 3f00 	ldrex	r3, [r3]
 8005594:	613b      	str	r3, [r7, #16]
   return(result);
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f023 0301 	bic.w	r3, r3, #1
 800559c:	63bb      	str	r3, [r7, #56]	; 0x38
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3314      	adds	r3, #20
 80055a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055a6:	623a      	str	r2, [r7, #32]
 80055a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055aa:	69f9      	ldr	r1, [r7, #28]
 80055ac:	6a3a      	ldr	r2, [r7, #32]
 80055ae:	e841 2300 	strex	r3, r2, [r1]
 80055b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1e5      	bne.n	8005586 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2220      	movs	r2, #32
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e00f      	b.n	80055f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	4013      	ands	r3, r2
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	bf0c      	ite	eq
 80055e6:	2301      	moveq	r3, #1
 80055e8:	2300      	movne	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	79fb      	ldrb	r3, [r7, #7]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d09f      	beq.n	8005534 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3740      	adds	r7, #64	; 0x40
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005604:	b0c0      	sub	sp, #256	; 0x100
 8005606:	af00      	add	r7, sp, #0
 8005608:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800560c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561c:	68d9      	ldr	r1, [r3, #12]
 800561e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	ea40 0301 	orr.w	r3, r0, r1
 8005628:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800562a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	431a      	orrs	r2, r3
 8005638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	431a      	orrs	r2, r3
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	4313      	orrs	r3, r2
 8005648:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800564c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005658:	f021 010c 	bic.w	r1, r1, #12
 800565c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005666:	430b      	orrs	r3, r1
 8005668:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800566a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567a:	6999      	ldr	r1, [r3, #24]
 800567c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	ea40 0301 	orr.w	r3, r0, r1
 8005686:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	4b8f      	ldr	r3, [pc, #572]	; (80058cc <UART_SetConfig+0x2cc>)
 8005690:	429a      	cmp	r2, r3
 8005692:	d005      	beq.n	80056a0 <UART_SetConfig+0xa0>
 8005694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	4b8d      	ldr	r3, [pc, #564]	; (80058d0 <UART_SetConfig+0x2d0>)
 800569c:	429a      	cmp	r2, r3
 800569e:	d104      	bne.n	80056aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056a0:	f7fe fe48 	bl	8004334 <HAL_RCC_GetPCLK2Freq>
 80056a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80056a8:	e003      	b.n	80056b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056aa:	f7fe fe2f 	bl	800430c <HAL_RCC_GetPCLK1Freq>
 80056ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056bc:	f040 810c 	bne.w	80058d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056c4:	2200      	movs	r2, #0
 80056c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80056ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80056d2:	4622      	mov	r2, r4
 80056d4:	462b      	mov	r3, r5
 80056d6:	1891      	adds	r1, r2, r2
 80056d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80056da:	415b      	adcs	r3, r3
 80056dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056e2:	4621      	mov	r1, r4
 80056e4:	eb12 0801 	adds.w	r8, r2, r1
 80056e8:	4629      	mov	r1, r5
 80056ea:	eb43 0901 	adc.w	r9, r3, r1
 80056ee:	f04f 0200 	mov.w	r2, #0
 80056f2:	f04f 0300 	mov.w	r3, #0
 80056f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005702:	4690      	mov	r8, r2
 8005704:	4699      	mov	r9, r3
 8005706:	4623      	mov	r3, r4
 8005708:	eb18 0303 	adds.w	r3, r8, r3
 800570c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005710:	462b      	mov	r3, r5
 8005712:	eb49 0303 	adc.w	r3, r9, r3
 8005716:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800571a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005726:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800572a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800572e:	460b      	mov	r3, r1
 8005730:	18db      	adds	r3, r3, r3
 8005732:	653b      	str	r3, [r7, #80]	; 0x50
 8005734:	4613      	mov	r3, r2
 8005736:	eb42 0303 	adc.w	r3, r2, r3
 800573a:	657b      	str	r3, [r7, #84]	; 0x54
 800573c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005740:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005744:	f7fb faa0 	bl	8000c88 <__aeabi_uldivmod>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	4b61      	ldr	r3, [pc, #388]	; (80058d4 <UART_SetConfig+0x2d4>)
 800574e:	fba3 2302 	umull	r2, r3, r3, r2
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	011c      	lsls	r4, r3, #4
 8005756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800575a:	2200      	movs	r2, #0
 800575c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005760:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005764:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005768:	4642      	mov	r2, r8
 800576a:	464b      	mov	r3, r9
 800576c:	1891      	adds	r1, r2, r2
 800576e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005770:	415b      	adcs	r3, r3
 8005772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005774:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005778:	4641      	mov	r1, r8
 800577a:	eb12 0a01 	adds.w	sl, r2, r1
 800577e:	4649      	mov	r1, r9
 8005780:	eb43 0b01 	adc.w	fp, r3, r1
 8005784:	f04f 0200 	mov.w	r2, #0
 8005788:	f04f 0300 	mov.w	r3, #0
 800578c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005790:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005794:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005798:	4692      	mov	sl, r2
 800579a:	469b      	mov	fp, r3
 800579c:	4643      	mov	r3, r8
 800579e:	eb1a 0303 	adds.w	r3, sl, r3
 80057a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057a6:	464b      	mov	r3, r9
 80057a8:	eb4b 0303 	adc.w	r3, fp, r3
 80057ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80057c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80057c4:	460b      	mov	r3, r1
 80057c6:	18db      	adds	r3, r3, r3
 80057c8:	643b      	str	r3, [r7, #64]	; 0x40
 80057ca:	4613      	mov	r3, r2
 80057cc:	eb42 0303 	adc.w	r3, r2, r3
 80057d0:	647b      	str	r3, [r7, #68]	; 0x44
 80057d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80057da:	f7fb fa55 	bl	8000c88 <__aeabi_uldivmod>
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	4611      	mov	r1, r2
 80057e4:	4b3b      	ldr	r3, [pc, #236]	; (80058d4 <UART_SetConfig+0x2d4>)
 80057e6:	fba3 2301 	umull	r2, r3, r3, r1
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	2264      	movs	r2, #100	; 0x64
 80057ee:	fb02 f303 	mul.w	r3, r2, r3
 80057f2:	1acb      	subs	r3, r1, r3
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80057fa:	4b36      	ldr	r3, [pc, #216]	; (80058d4 <UART_SetConfig+0x2d4>)
 80057fc:	fba3 2302 	umull	r2, r3, r3, r2
 8005800:	095b      	lsrs	r3, r3, #5
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005808:	441c      	add	r4, r3
 800580a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800580e:	2200      	movs	r2, #0
 8005810:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005814:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005818:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800581c:	4642      	mov	r2, r8
 800581e:	464b      	mov	r3, r9
 8005820:	1891      	adds	r1, r2, r2
 8005822:	63b9      	str	r1, [r7, #56]	; 0x38
 8005824:	415b      	adcs	r3, r3
 8005826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005828:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800582c:	4641      	mov	r1, r8
 800582e:	1851      	adds	r1, r2, r1
 8005830:	6339      	str	r1, [r7, #48]	; 0x30
 8005832:	4649      	mov	r1, r9
 8005834:	414b      	adcs	r3, r1
 8005836:	637b      	str	r3, [r7, #52]	; 0x34
 8005838:	f04f 0200 	mov.w	r2, #0
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005844:	4659      	mov	r1, fp
 8005846:	00cb      	lsls	r3, r1, #3
 8005848:	4651      	mov	r1, sl
 800584a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800584e:	4651      	mov	r1, sl
 8005850:	00ca      	lsls	r2, r1, #3
 8005852:	4610      	mov	r0, r2
 8005854:	4619      	mov	r1, r3
 8005856:	4603      	mov	r3, r0
 8005858:	4642      	mov	r2, r8
 800585a:	189b      	adds	r3, r3, r2
 800585c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005860:	464b      	mov	r3, r9
 8005862:	460a      	mov	r2, r1
 8005864:	eb42 0303 	adc.w	r3, r2, r3
 8005868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800586c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005878:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800587c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005880:	460b      	mov	r3, r1
 8005882:	18db      	adds	r3, r3, r3
 8005884:	62bb      	str	r3, [r7, #40]	; 0x28
 8005886:	4613      	mov	r3, r2
 8005888:	eb42 0303 	adc.w	r3, r2, r3
 800588c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800588e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005892:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005896:	f7fb f9f7 	bl	8000c88 <__aeabi_uldivmod>
 800589a:	4602      	mov	r2, r0
 800589c:	460b      	mov	r3, r1
 800589e:	4b0d      	ldr	r3, [pc, #52]	; (80058d4 <UART_SetConfig+0x2d4>)
 80058a0:	fba3 1302 	umull	r1, r3, r3, r2
 80058a4:	095b      	lsrs	r3, r3, #5
 80058a6:	2164      	movs	r1, #100	; 0x64
 80058a8:	fb01 f303 	mul.w	r3, r1, r3
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	3332      	adds	r3, #50	; 0x32
 80058b2:	4a08      	ldr	r2, [pc, #32]	; (80058d4 <UART_SetConfig+0x2d4>)
 80058b4:	fba2 2303 	umull	r2, r3, r2, r3
 80058b8:	095b      	lsrs	r3, r3, #5
 80058ba:	f003 0207 	and.w	r2, r3, #7
 80058be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4422      	add	r2, r4
 80058c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058c8:	e105      	b.n	8005ad6 <UART_SetConfig+0x4d6>
 80058ca:	bf00      	nop
 80058cc:	40011000 	.word	0x40011000
 80058d0:	40011400 	.word	0x40011400
 80058d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058dc:	2200      	movs	r2, #0
 80058de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80058e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80058ea:	4642      	mov	r2, r8
 80058ec:	464b      	mov	r3, r9
 80058ee:	1891      	adds	r1, r2, r2
 80058f0:	6239      	str	r1, [r7, #32]
 80058f2:	415b      	adcs	r3, r3
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
 80058f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058fa:	4641      	mov	r1, r8
 80058fc:	1854      	adds	r4, r2, r1
 80058fe:	4649      	mov	r1, r9
 8005900:	eb43 0501 	adc.w	r5, r3, r1
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	00eb      	lsls	r3, r5, #3
 800590e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005912:	00e2      	lsls	r2, r4, #3
 8005914:	4614      	mov	r4, r2
 8005916:	461d      	mov	r5, r3
 8005918:	4643      	mov	r3, r8
 800591a:	18e3      	adds	r3, r4, r3
 800591c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005920:	464b      	mov	r3, r9
 8005922:	eb45 0303 	adc.w	r3, r5, r3
 8005926:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800592a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005936:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800593a:	f04f 0200 	mov.w	r2, #0
 800593e:	f04f 0300 	mov.w	r3, #0
 8005942:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005946:	4629      	mov	r1, r5
 8005948:	008b      	lsls	r3, r1, #2
 800594a:	4621      	mov	r1, r4
 800594c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005950:	4621      	mov	r1, r4
 8005952:	008a      	lsls	r2, r1, #2
 8005954:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005958:	f7fb f996 	bl	8000c88 <__aeabi_uldivmod>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4b60      	ldr	r3, [pc, #384]	; (8005ae4 <UART_SetConfig+0x4e4>)
 8005962:	fba3 2302 	umull	r2, r3, r3, r2
 8005966:	095b      	lsrs	r3, r3, #5
 8005968:	011c      	lsls	r4, r3, #4
 800596a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800596e:	2200      	movs	r2, #0
 8005970:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005974:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005978:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800597c:	4642      	mov	r2, r8
 800597e:	464b      	mov	r3, r9
 8005980:	1891      	adds	r1, r2, r2
 8005982:	61b9      	str	r1, [r7, #24]
 8005984:	415b      	adcs	r3, r3
 8005986:	61fb      	str	r3, [r7, #28]
 8005988:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800598c:	4641      	mov	r1, r8
 800598e:	1851      	adds	r1, r2, r1
 8005990:	6139      	str	r1, [r7, #16]
 8005992:	4649      	mov	r1, r9
 8005994:	414b      	adcs	r3, r1
 8005996:	617b      	str	r3, [r7, #20]
 8005998:	f04f 0200 	mov.w	r2, #0
 800599c:	f04f 0300 	mov.w	r3, #0
 80059a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059a4:	4659      	mov	r1, fp
 80059a6:	00cb      	lsls	r3, r1, #3
 80059a8:	4651      	mov	r1, sl
 80059aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059ae:	4651      	mov	r1, sl
 80059b0:	00ca      	lsls	r2, r1, #3
 80059b2:	4610      	mov	r0, r2
 80059b4:	4619      	mov	r1, r3
 80059b6:	4603      	mov	r3, r0
 80059b8:	4642      	mov	r2, r8
 80059ba:	189b      	adds	r3, r3, r2
 80059bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059c0:	464b      	mov	r3, r9
 80059c2:	460a      	mov	r2, r1
 80059c4:	eb42 0303 	adc.w	r3, r2, r3
 80059c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80059d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80059e4:	4649      	mov	r1, r9
 80059e6:	008b      	lsls	r3, r1, #2
 80059e8:	4641      	mov	r1, r8
 80059ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059ee:	4641      	mov	r1, r8
 80059f0:	008a      	lsls	r2, r1, #2
 80059f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80059f6:	f7fb f947 	bl	8000c88 <__aeabi_uldivmod>
 80059fa:	4602      	mov	r2, r0
 80059fc:	460b      	mov	r3, r1
 80059fe:	4b39      	ldr	r3, [pc, #228]	; (8005ae4 <UART_SetConfig+0x4e4>)
 8005a00:	fba3 1302 	umull	r1, r3, r3, r2
 8005a04:	095b      	lsrs	r3, r3, #5
 8005a06:	2164      	movs	r1, #100	; 0x64
 8005a08:	fb01 f303 	mul.w	r3, r1, r3
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	011b      	lsls	r3, r3, #4
 8005a10:	3332      	adds	r3, #50	; 0x32
 8005a12:	4a34      	ldr	r2, [pc, #208]	; (8005ae4 <UART_SetConfig+0x4e4>)
 8005a14:	fba2 2303 	umull	r2, r3, r2, r3
 8005a18:	095b      	lsrs	r3, r3, #5
 8005a1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a1e:	441c      	add	r4, r3
 8005a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a24:	2200      	movs	r2, #0
 8005a26:	673b      	str	r3, [r7, #112]	; 0x70
 8005a28:	677a      	str	r2, [r7, #116]	; 0x74
 8005a2a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a2e:	4642      	mov	r2, r8
 8005a30:	464b      	mov	r3, r9
 8005a32:	1891      	adds	r1, r2, r2
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	415b      	adcs	r3, r3
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a3e:	4641      	mov	r1, r8
 8005a40:	1851      	adds	r1, r2, r1
 8005a42:	6039      	str	r1, [r7, #0]
 8005a44:	4649      	mov	r1, r9
 8005a46:	414b      	adcs	r3, r1
 8005a48:	607b      	str	r3, [r7, #4]
 8005a4a:	f04f 0200 	mov.w	r2, #0
 8005a4e:	f04f 0300 	mov.w	r3, #0
 8005a52:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a56:	4659      	mov	r1, fp
 8005a58:	00cb      	lsls	r3, r1, #3
 8005a5a:	4651      	mov	r1, sl
 8005a5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a60:	4651      	mov	r1, sl
 8005a62:	00ca      	lsls	r2, r1, #3
 8005a64:	4610      	mov	r0, r2
 8005a66:	4619      	mov	r1, r3
 8005a68:	4603      	mov	r3, r0
 8005a6a:	4642      	mov	r2, r8
 8005a6c:	189b      	adds	r3, r3, r2
 8005a6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a70:	464b      	mov	r3, r9
 8005a72:	460a      	mov	r2, r1
 8005a74:	eb42 0303 	adc.w	r3, r2, r3
 8005a78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	663b      	str	r3, [r7, #96]	; 0x60
 8005a84:	667a      	str	r2, [r7, #100]	; 0x64
 8005a86:	f04f 0200 	mov.w	r2, #0
 8005a8a:	f04f 0300 	mov.w	r3, #0
 8005a8e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a92:	4649      	mov	r1, r9
 8005a94:	008b      	lsls	r3, r1, #2
 8005a96:	4641      	mov	r1, r8
 8005a98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a9c:	4641      	mov	r1, r8
 8005a9e:	008a      	lsls	r2, r1, #2
 8005aa0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005aa4:	f7fb f8f0 	bl	8000c88 <__aeabi_uldivmod>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	460b      	mov	r3, r1
 8005aac:	4b0d      	ldr	r3, [pc, #52]	; (8005ae4 <UART_SetConfig+0x4e4>)
 8005aae:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab2:	095b      	lsrs	r3, r3, #5
 8005ab4:	2164      	movs	r1, #100	; 0x64
 8005ab6:	fb01 f303 	mul.w	r3, r1, r3
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	3332      	adds	r3, #50	; 0x32
 8005ac0:	4a08      	ldr	r2, [pc, #32]	; (8005ae4 <UART_SetConfig+0x4e4>)
 8005ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac6:	095b      	lsrs	r3, r3, #5
 8005ac8:	f003 020f 	and.w	r2, r3, #15
 8005acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4422      	add	r2, r4
 8005ad4:	609a      	str	r2, [r3, #8]
}
 8005ad6:	bf00      	nop
 8005ad8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005adc:	46bd      	mov	sp, r7
 8005ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ae2:	bf00      	nop
 8005ae4:	51eb851f 	.word	0x51eb851f

08005ae8 <__errno>:
 8005ae8:	4b01      	ldr	r3, [pc, #4]	; (8005af0 <__errno+0x8>)
 8005aea:	6818      	ldr	r0, [r3, #0]
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	20000010 	.word	0x20000010

08005af4 <__libc_init_array>:
 8005af4:	b570      	push	{r4, r5, r6, lr}
 8005af6:	4d0d      	ldr	r5, [pc, #52]	; (8005b2c <__libc_init_array+0x38>)
 8005af8:	4c0d      	ldr	r4, [pc, #52]	; (8005b30 <__libc_init_array+0x3c>)
 8005afa:	1b64      	subs	r4, r4, r5
 8005afc:	10a4      	asrs	r4, r4, #2
 8005afe:	2600      	movs	r6, #0
 8005b00:	42a6      	cmp	r6, r4
 8005b02:	d109      	bne.n	8005b18 <__libc_init_array+0x24>
 8005b04:	4d0b      	ldr	r5, [pc, #44]	; (8005b34 <__libc_init_array+0x40>)
 8005b06:	4c0c      	ldr	r4, [pc, #48]	; (8005b38 <__libc_init_array+0x44>)
 8005b08:	f002 ff04 	bl	8008914 <_init>
 8005b0c:	1b64      	subs	r4, r4, r5
 8005b0e:	10a4      	asrs	r4, r4, #2
 8005b10:	2600      	movs	r6, #0
 8005b12:	42a6      	cmp	r6, r4
 8005b14:	d105      	bne.n	8005b22 <__libc_init_array+0x2e>
 8005b16:	bd70      	pop	{r4, r5, r6, pc}
 8005b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b1c:	4798      	blx	r3
 8005b1e:	3601      	adds	r6, #1
 8005b20:	e7ee      	b.n	8005b00 <__libc_init_array+0xc>
 8005b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b26:	4798      	blx	r3
 8005b28:	3601      	adds	r6, #1
 8005b2a:	e7f2      	b.n	8005b12 <__libc_init_array+0x1e>
 8005b2c:	08008da4 	.word	0x08008da4
 8005b30:	08008da4 	.word	0x08008da4
 8005b34:	08008da4 	.word	0x08008da4
 8005b38:	08008da8 	.word	0x08008da8

08005b3c <memcpy>:
 8005b3c:	440a      	add	r2, r1
 8005b3e:	4291      	cmp	r1, r2
 8005b40:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b44:	d100      	bne.n	8005b48 <memcpy+0xc>
 8005b46:	4770      	bx	lr
 8005b48:	b510      	push	{r4, lr}
 8005b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b52:	4291      	cmp	r1, r2
 8005b54:	d1f9      	bne.n	8005b4a <memcpy+0xe>
 8005b56:	bd10      	pop	{r4, pc}

08005b58 <memset>:
 8005b58:	4402      	add	r2, r0
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d100      	bne.n	8005b62 <memset+0xa>
 8005b60:	4770      	bx	lr
 8005b62:	f803 1b01 	strb.w	r1, [r3], #1
 8005b66:	e7f9      	b.n	8005b5c <memset+0x4>

08005b68 <__cvt>:
 8005b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b6c:	ec55 4b10 	vmov	r4, r5, d0
 8005b70:	2d00      	cmp	r5, #0
 8005b72:	460e      	mov	r6, r1
 8005b74:	4619      	mov	r1, r3
 8005b76:	462b      	mov	r3, r5
 8005b78:	bfbb      	ittet	lt
 8005b7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005b7e:	461d      	movlt	r5, r3
 8005b80:	2300      	movge	r3, #0
 8005b82:	232d      	movlt	r3, #45	; 0x2d
 8005b84:	700b      	strb	r3, [r1, #0]
 8005b86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b88:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005b8c:	4691      	mov	r9, r2
 8005b8e:	f023 0820 	bic.w	r8, r3, #32
 8005b92:	bfbc      	itt	lt
 8005b94:	4622      	movlt	r2, r4
 8005b96:	4614      	movlt	r4, r2
 8005b98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b9c:	d005      	beq.n	8005baa <__cvt+0x42>
 8005b9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005ba2:	d100      	bne.n	8005ba6 <__cvt+0x3e>
 8005ba4:	3601      	adds	r6, #1
 8005ba6:	2102      	movs	r1, #2
 8005ba8:	e000      	b.n	8005bac <__cvt+0x44>
 8005baa:	2103      	movs	r1, #3
 8005bac:	ab03      	add	r3, sp, #12
 8005bae:	9301      	str	r3, [sp, #4]
 8005bb0:	ab02      	add	r3, sp, #8
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	ec45 4b10 	vmov	d0, r4, r5
 8005bb8:	4653      	mov	r3, sl
 8005bba:	4632      	mov	r2, r6
 8005bbc:	f000 fcec 	bl	8006598 <_dtoa_r>
 8005bc0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005bc4:	4607      	mov	r7, r0
 8005bc6:	d102      	bne.n	8005bce <__cvt+0x66>
 8005bc8:	f019 0f01 	tst.w	r9, #1
 8005bcc:	d022      	beq.n	8005c14 <__cvt+0xac>
 8005bce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005bd2:	eb07 0906 	add.w	r9, r7, r6
 8005bd6:	d110      	bne.n	8005bfa <__cvt+0x92>
 8005bd8:	783b      	ldrb	r3, [r7, #0]
 8005bda:	2b30      	cmp	r3, #48	; 0x30
 8005bdc:	d10a      	bne.n	8005bf4 <__cvt+0x8c>
 8005bde:	2200      	movs	r2, #0
 8005be0:	2300      	movs	r3, #0
 8005be2:	4620      	mov	r0, r4
 8005be4:	4629      	mov	r1, r5
 8005be6:	f7fa ff8f 	bl	8000b08 <__aeabi_dcmpeq>
 8005bea:	b918      	cbnz	r0, 8005bf4 <__cvt+0x8c>
 8005bec:	f1c6 0601 	rsb	r6, r6, #1
 8005bf0:	f8ca 6000 	str.w	r6, [sl]
 8005bf4:	f8da 3000 	ldr.w	r3, [sl]
 8005bf8:	4499      	add	r9, r3
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	4620      	mov	r0, r4
 8005c00:	4629      	mov	r1, r5
 8005c02:	f7fa ff81 	bl	8000b08 <__aeabi_dcmpeq>
 8005c06:	b108      	cbz	r0, 8005c0c <__cvt+0xa4>
 8005c08:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c0c:	2230      	movs	r2, #48	; 0x30
 8005c0e:	9b03      	ldr	r3, [sp, #12]
 8005c10:	454b      	cmp	r3, r9
 8005c12:	d307      	bcc.n	8005c24 <__cvt+0xbc>
 8005c14:	9b03      	ldr	r3, [sp, #12]
 8005c16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c18:	1bdb      	subs	r3, r3, r7
 8005c1a:	4638      	mov	r0, r7
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	b004      	add	sp, #16
 8005c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c24:	1c59      	adds	r1, r3, #1
 8005c26:	9103      	str	r1, [sp, #12]
 8005c28:	701a      	strb	r2, [r3, #0]
 8005c2a:	e7f0      	b.n	8005c0e <__cvt+0xa6>

08005c2c <__exponent>:
 8005c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2900      	cmp	r1, #0
 8005c32:	bfb8      	it	lt
 8005c34:	4249      	neglt	r1, r1
 8005c36:	f803 2b02 	strb.w	r2, [r3], #2
 8005c3a:	bfb4      	ite	lt
 8005c3c:	222d      	movlt	r2, #45	; 0x2d
 8005c3e:	222b      	movge	r2, #43	; 0x2b
 8005c40:	2909      	cmp	r1, #9
 8005c42:	7042      	strb	r2, [r0, #1]
 8005c44:	dd2a      	ble.n	8005c9c <__exponent+0x70>
 8005c46:	f10d 0407 	add.w	r4, sp, #7
 8005c4a:	46a4      	mov	ip, r4
 8005c4c:	270a      	movs	r7, #10
 8005c4e:	46a6      	mov	lr, r4
 8005c50:	460a      	mov	r2, r1
 8005c52:	fb91 f6f7 	sdiv	r6, r1, r7
 8005c56:	fb07 1516 	mls	r5, r7, r6, r1
 8005c5a:	3530      	adds	r5, #48	; 0x30
 8005c5c:	2a63      	cmp	r2, #99	; 0x63
 8005c5e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005c62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005c66:	4631      	mov	r1, r6
 8005c68:	dcf1      	bgt.n	8005c4e <__exponent+0x22>
 8005c6a:	3130      	adds	r1, #48	; 0x30
 8005c6c:	f1ae 0502 	sub.w	r5, lr, #2
 8005c70:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005c74:	1c44      	adds	r4, r0, #1
 8005c76:	4629      	mov	r1, r5
 8005c78:	4561      	cmp	r1, ip
 8005c7a:	d30a      	bcc.n	8005c92 <__exponent+0x66>
 8005c7c:	f10d 0209 	add.w	r2, sp, #9
 8005c80:	eba2 020e 	sub.w	r2, r2, lr
 8005c84:	4565      	cmp	r5, ip
 8005c86:	bf88      	it	hi
 8005c88:	2200      	movhi	r2, #0
 8005c8a:	4413      	add	r3, r2
 8005c8c:	1a18      	subs	r0, r3, r0
 8005c8e:	b003      	add	sp, #12
 8005c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c96:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005c9a:	e7ed      	b.n	8005c78 <__exponent+0x4c>
 8005c9c:	2330      	movs	r3, #48	; 0x30
 8005c9e:	3130      	adds	r1, #48	; 0x30
 8005ca0:	7083      	strb	r3, [r0, #2]
 8005ca2:	70c1      	strb	r1, [r0, #3]
 8005ca4:	1d03      	adds	r3, r0, #4
 8005ca6:	e7f1      	b.n	8005c8c <__exponent+0x60>

08005ca8 <_printf_float>:
 8005ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cac:	ed2d 8b02 	vpush	{d8}
 8005cb0:	b08d      	sub	sp, #52	; 0x34
 8005cb2:	460c      	mov	r4, r1
 8005cb4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005cb8:	4616      	mov	r6, r2
 8005cba:	461f      	mov	r7, r3
 8005cbc:	4605      	mov	r5, r0
 8005cbe:	f001 fa59 	bl	8007174 <_localeconv_r>
 8005cc2:	f8d0 a000 	ldr.w	sl, [r0]
 8005cc6:	4650      	mov	r0, sl
 8005cc8:	f7fa faa2 	bl	8000210 <strlen>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	930a      	str	r3, [sp, #40]	; 0x28
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	9305      	str	r3, [sp, #20]
 8005cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8005cd8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005cdc:	3307      	adds	r3, #7
 8005cde:	f023 0307 	bic.w	r3, r3, #7
 8005ce2:	f103 0208 	add.w	r2, r3, #8
 8005ce6:	f8c8 2000 	str.w	r2, [r8]
 8005cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005cf2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005cf6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005cfa:	9307      	str	r3, [sp, #28]
 8005cfc:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d00:	ee08 0a10 	vmov	s16, r0
 8005d04:	4b9f      	ldr	r3, [pc, #636]	; (8005f84 <_printf_float+0x2dc>)
 8005d06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d0e:	f7fa ff2d 	bl	8000b6c <__aeabi_dcmpun>
 8005d12:	bb88      	cbnz	r0, 8005d78 <_printf_float+0xd0>
 8005d14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d18:	4b9a      	ldr	r3, [pc, #616]	; (8005f84 <_printf_float+0x2dc>)
 8005d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d1e:	f7fa ff07 	bl	8000b30 <__aeabi_dcmple>
 8005d22:	bb48      	cbnz	r0, 8005d78 <_printf_float+0xd0>
 8005d24:	2200      	movs	r2, #0
 8005d26:	2300      	movs	r3, #0
 8005d28:	4640      	mov	r0, r8
 8005d2a:	4649      	mov	r1, r9
 8005d2c:	f7fa fef6 	bl	8000b1c <__aeabi_dcmplt>
 8005d30:	b110      	cbz	r0, 8005d38 <_printf_float+0x90>
 8005d32:	232d      	movs	r3, #45	; 0x2d
 8005d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d38:	4b93      	ldr	r3, [pc, #588]	; (8005f88 <_printf_float+0x2e0>)
 8005d3a:	4894      	ldr	r0, [pc, #592]	; (8005f8c <_printf_float+0x2e4>)
 8005d3c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005d40:	bf94      	ite	ls
 8005d42:	4698      	movls	r8, r3
 8005d44:	4680      	movhi	r8, r0
 8005d46:	2303      	movs	r3, #3
 8005d48:	6123      	str	r3, [r4, #16]
 8005d4a:	9b05      	ldr	r3, [sp, #20]
 8005d4c:	f023 0204 	bic.w	r2, r3, #4
 8005d50:	6022      	str	r2, [r4, #0]
 8005d52:	f04f 0900 	mov.w	r9, #0
 8005d56:	9700      	str	r7, [sp, #0]
 8005d58:	4633      	mov	r3, r6
 8005d5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005d5c:	4621      	mov	r1, r4
 8005d5e:	4628      	mov	r0, r5
 8005d60:	f000 f9d8 	bl	8006114 <_printf_common>
 8005d64:	3001      	adds	r0, #1
 8005d66:	f040 8090 	bne.w	8005e8a <_printf_float+0x1e2>
 8005d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d6e:	b00d      	add	sp, #52	; 0x34
 8005d70:	ecbd 8b02 	vpop	{d8}
 8005d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d78:	4642      	mov	r2, r8
 8005d7a:	464b      	mov	r3, r9
 8005d7c:	4640      	mov	r0, r8
 8005d7e:	4649      	mov	r1, r9
 8005d80:	f7fa fef4 	bl	8000b6c <__aeabi_dcmpun>
 8005d84:	b140      	cbz	r0, 8005d98 <_printf_float+0xf0>
 8005d86:	464b      	mov	r3, r9
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	bfbc      	itt	lt
 8005d8c:	232d      	movlt	r3, #45	; 0x2d
 8005d8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d92:	487f      	ldr	r0, [pc, #508]	; (8005f90 <_printf_float+0x2e8>)
 8005d94:	4b7f      	ldr	r3, [pc, #508]	; (8005f94 <_printf_float+0x2ec>)
 8005d96:	e7d1      	b.n	8005d3c <_printf_float+0x94>
 8005d98:	6863      	ldr	r3, [r4, #4]
 8005d9a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005d9e:	9206      	str	r2, [sp, #24]
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	d13f      	bne.n	8005e24 <_printf_float+0x17c>
 8005da4:	2306      	movs	r3, #6
 8005da6:	6063      	str	r3, [r4, #4]
 8005da8:	9b05      	ldr	r3, [sp, #20]
 8005daa:	6861      	ldr	r1, [r4, #4]
 8005dac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005db0:	2300      	movs	r3, #0
 8005db2:	9303      	str	r3, [sp, #12]
 8005db4:	ab0a      	add	r3, sp, #40	; 0x28
 8005db6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005dba:	ab09      	add	r3, sp, #36	; 0x24
 8005dbc:	ec49 8b10 	vmov	d0, r8, r9
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	6022      	str	r2, [r4, #0]
 8005dc4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005dc8:	4628      	mov	r0, r5
 8005dca:	f7ff fecd 	bl	8005b68 <__cvt>
 8005dce:	9b06      	ldr	r3, [sp, #24]
 8005dd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005dd2:	2b47      	cmp	r3, #71	; 0x47
 8005dd4:	4680      	mov	r8, r0
 8005dd6:	d108      	bne.n	8005dea <_printf_float+0x142>
 8005dd8:	1cc8      	adds	r0, r1, #3
 8005dda:	db02      	blt.n	8005de2 <_printf_float+0x13a>
 8005ddc:	6863      	ldr	r3, [r4, #4]
 8005dde:	4299      	cmp	r1, r3
 8005de0:	dd41      	ble.n	8005e66 <_printf_float+0x1be>
 8005de2:	f1ab 0b02 	sub.w	fp, fp, #2
 8005de6:	fa5f fb8b 	uxtb.w	fp, fp
 8005dea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005dee:	d820      	bhi.n	8005e32 <_printf_float+0x18a>
 8005df0:	3901      	subs	r1, #1
 8005df2:	465a      	mov	r2, fp
 8005df4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005df8:	9109      	str	r1, [sp, #36]	; 0x24
 8005dfa:	f7ff ff17 	bl	8005c2c <__exponent>
 8005dfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e00:	1813      	adds	r3, r2, r0
 8005e02:	2a01      	cmp	r2, #1
 8005e04:	4681      	mov	r9, r0
 8005e06:	6123      	str	r3, [r4, #16]
 8005e08:	dc02      	bgt.n	8005e10 <_printf_float+0x168>
 8005e0a:	6822      	ldr	r2, [r4, #0]
 8005e0c:	07d2      	lsls	r2, r2, #31
 8005e0e:	d501      	bpl.n	8005e14 <_printf_float+0x16c>
 8005e10:	3301      	adds	r3, #1
 8005e12:	6123      	str	r3, [r4, #16]
 8005e14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d09c      	beq.n	8005d56 <_printf_float+0xae>
 8005e1c:	232d      	movs	r3, #45	; 0x2d
 8005e1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e22:	e798      	b.n	8005d56 <_printf_float+0xae>
 8005e24:	9a06      	ldr	r2, [sp, #24]
 8005e26:	2a47      	cmp	r2, #71	; 0x47
 8005e28:	d1be      	bne.n	8005da8 <_printf_float+0x100>
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1bc      	bne.n	8005da8 <_printf_float+0x100>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e7b9      	b.n	8005da6 <_printf_float+0xfe>
 8005e32:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005e36:	d118      	bne.n	8005e6a <_printf_float+0x1c2>
 8005e38:	2900      	cmp	r1, #0
 8005e3a:	6863      	ldr	r3, [r4, #4]
 8005e3c:	dd0b      	ble.n	8005e56 <_printf_float+0x1ae>
 8005e3e:	6121      	str	r1, [r4, #16]
 8005e40:	b913      	cbnz	r3, 8005e48 <_printf_float+0x1a0>
 8005e42:	6822      	ldr	r2, [r4, #0]
 8005e44:	07d0      	lsls	r0, r2, #31
 8005e46:	d502      	bpl.n	8005e4e <_printf_float+0x1a6>
 8005e48:	3301      	adds	r3, #1
 8005e4a:	440b      	add	r3, r1
 8005e4c:	6123      	str	r3, [r4, #16]
 8005e4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005e50:	f04f 0900 	mov.w	r9, #0
 8005e54:	e7de      	b.n	8005e14 <_printf_float+0x16c>
 8005e56:	b913      	cbnz	r3, 8005e5e <_printf_float+0x1b6>
 8005e58:	6822      	ldr	r2, [r4, #0]
 8005e5a:	07d2      	lsls	r2, r2, #31
 8005e5c:	d501      	bpl.n	8005e62 <_printf_float+0x1ba>
 8005e5e:	3302      	adds	r3, #2
 8005e60:	e7f4      	b.n	8005e4c <_printf_float+0x1a4>
 8005e62:	2301      	movs	r3, #1
 8005e64:	e7f2      	b.n	8005e4c <_printf_float+0x1a4>
 8005e66:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e6c:	4299      	cmp	r1, r3
 8005e6e:	db05      	blt.n	8005e7c <_printf_float+0x1d4>
 8005e70:	6823      	ldr	r3, [r4, #0]
 8005e72:	6121      	str	r1, [r4, #16]
 8005e74:	07d8      	lsls	r0, r3, #31
 8005e76:	d5ea      	bpl.n	8005e4e <_printf_float+0x1a6>
 8005e78:	1c4b      	adds	r3, r1, #1
 8005e7a:	e7e7      	b.n	8005e4c <_printf_float+0x1a4>
 8005e7c:	2900      	cmp	r1, #0
 8005e7e:	bfd4      	ite	le
 8005e80:	f1c1 0202 	rsble	r2, r1, #2
 8005e84:	2201      	movgt	r2, #1
 8005e86:	4413      	add	r3, r2
 8005e88:	e7e0      	b.n	8005e4c <_printf_float+0x1a4>
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	055a      	lsls	r2, r3, #21
 8005e8e:	d407      	bmi.n	8005ea0 <_printf_float+0x1f8>
 8005e90:	6923      	ldr	r3, [r4, #16]
 8005e92:	4642      	mov	r2, r8
 8005e94:	4631      	mov	r1, r6
 8005e96:	4628      	mov	r0, r5
 8005e98:	47b8      	blx	r7
 8005e9a:	3001      	adds	r0, #1
 8005e9c:	d12c      	bne.n	8005ef8 <_printf_float+0x250>
 8005e9e:	e764      	b.n	8005d6a <_printf_float+0xc2>
 8005ea0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ea4:	f240 80e0 	bls.w	8006068 <_printf_float+0x3c0>
 8005ea8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005eac:	2200      	movs	r2, #0
 8005eae:	2300      	movs	r3, #0
 8005eb0:	f7fa fe2a 	bl	8000b08 <__aeabi_dcmpeq>
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	d034      	beq.n	8005f22 <_printf_float+0x27a>
 8005eb8:	4a37      	ldr	r2, [pc, #220]	; (8005f98 <_printf_float+0x2f0>)
 8005eba:	2301      	movs	r3, #1
 8005ebc:	4631      	mov	r1, r6
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	47b8      	blx	r7
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	f43f af51 	beq.w	8005d6a <_printf_float+0xc2>
 8005ec8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	db02      	blt.n	8005ed6 <_printf_float+0x22e>
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	07d8      	lsls	r0, r3, #31
 8005ed4:	d510      	bpl.n	8005ef8 <_printf_float+0x250>
 8005ed6:	ee18 3a10 	vmov	r3, s16
 8005eda:	4652      	mov	r2, sl
 8005edc:	4631      	mov	r1, r6
 8005ede:	4628      	mov	r0, r5
 8005ee0:	47b8      	blx	r7
 8005ee2:	3001      	adds	r0, #1
 8005ee4:	f43f af41 	beq.w	8005d6a <_printf_float+0xc2>
 8005ee8:	f04f 0800 	mov.w	r8, #0
 8005eec:	f104 091a 	add.w	r9, r4, #26
 8005ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	4543      	cmp	r3, r8
 8005ef6:	dc09      	bgt.n	8005f0c <_printf_float+0x264>
 8005ef8:	6823      	ldr	r3, [r4, #0]
 8005efa:	079b      	lsls	r3, r3, #30
 8005efc:	f100 8105 	bmi.w	800610a <_printf_float+0x462>
 8005f00:	68e0      	ldr	r0, [r4, #12]
 8005f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f04:	4298      	cmp	r0, r3
 8005f06:	bfb8      	it	lt
 8005f08:	4618      	movlt	r0, r3
 8005f0a:	e730      	b.n	8005d6e <_printf_float+0xc6>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	464a      	mov	r2, r9
 8005f10:	4631      	mov	r1, r6
 8005f12:	4628      	mov	r0, r5
 8005f14:	47b8      	blx	r7
 8005f16:	3001      	adds	r0, #1
 8005f18:	f43f af27 	beq.w	8005d6a <_printf_float+0xc2>
 8005f1c:	f108 0801 	add.w	r8, r8, #1
 8005f20:	e7e6      	b.n	8005ef0 <_printf_float+0x248>
 8005f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	dc39      	bgt.n	8005f9c <_printf_float+0x2f4>
 8005f28:	4a1b      	ldr	r2, [pc, #108]	; (8005f98 <_printf_float+0x2f0>)
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	4631      	mov	r1, r6
 8005f2e:	4628      	mov	r0, r5
 8005f30:	47b8      	blx	r7
 8005f32:	3001      	adds	r0, #1
 8005f34:	f43f af19 	beq.w	8005d6a <_printf_float+0xc2>
 8005f38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	d102      	bne.n	8005f46 <_printf_float+0x29e>
 8005f40:	6823      	ldr	r3, [r4, #0]
 8005f42:	07d9      	lsls	r1, r3, #31
 8005f44:	d5d8      	bpl.n	8005ef8 <_printf_float+0x250>
 8005f46:	ee18 3a10 	vmov	r3, s16
 8005f4a:	4652      	mov	r2, sl
 8005f4c:	4631      	mov	r1, r6
 8005f4e:	4628      	mov	r0, r5
 8005f50:	47b8      	blx	r7
 8005f52:	3001      	adds	r0, #1
 8005f54:	f43f af09 	beq.w	8005d6a <_printf_float+0xc2>
 8005f58:	f04f 0900 	mov.w	r9, #0
 8005f5c:	f104 0a1a 	add.w	sl, r4, #26
 8005f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f62:	425b      	negs	r3, r3
 8005f64:	454b      	cmp	r3, r9
 8005f66:	dc01      	bgt.n	8005f6c <_printf_float+0x2c4>
 8005f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f6a:	e792      	b.n	8005e92 <_printf_float+0x1ea>
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	4652      	mov	r2, sl
 8005f70:	4631      	mov	r1, r6
 8005f72:	4628      	mov	r0, r5
 8005f74:	47b8      	blx	r7
 8005f76:	3001      	adds	r0, #1
 8005f78:	f43f aef7 	beq.w	8005d6a <_printf_float+0xc2>
 8005f7c:	f109 0901 	add.w	r9, r9, #1
 8005f80:	e7ee      	b.n	8005f60 <_printf_float+0x2b8>
 8005f82:	bf00      	nop
 8005f84:	7fefffff 	.word	0x7fefffff
 8005f88:	080089c8 	.word	0x080089c8
 8005f8c:	080089cc 	.word	0x080089cc
 8005f90:	080089d4 	.word	0x080089d4
 8005f94:	080089d0 	.word	0x080089d0
 8005f98:	080089d8 	.word	0x080089d8
 8005f9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	bfa8      	it	ge
 8005fa4:	461a      	movge	r2, r3
 8005fa6:	2a00      	cmp	r2, #0
 8005fa8:	4691      	mov	r9, r2
 8005faa:	dc37      	bgt.n	800601c <_printf_float+0x374>
 8005fac:	f04f 0b00 	mov.w	fp, #0
 8005fb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fb4:	f104 021a 	add.w	r2, r4, #26
 8005fb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fba:	9305      	str	r3, [sp, #20]
 8005fbc:	eba3 0309 	sub.w	r3, r3, r9
 8005fc0:	455b      	cmp	r3, fp
 8005fc2:	dc33      	bgt.n	800602c <_printf_float+0x384>
 8005fc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	db3b      	blt.n	8006044 <_printf_float+0x39c>
 8005fcc:	6823      	ldr	r3, [r4, #0]
 8005fce:	07da      	lsls	r2, r3, #31
 8005fd0:	d438      	bmi.n	8006044 <_printf_float+0x39c>
 8005fd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fd4:	9a05      	ldr	r2, [sp, #20]
 8005fd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fd8:	1a9a      	subs	r2, r3, r2
 8005fda:	eba3 0901 	sub.w	r9, r3, r1
 8005fde:	4591      	cmp	r9, r2
 8005fe0:	bfa8      	it	ge
 8005fe2:	4691      	movge	r9, r2
 8005fe4:	f1b9 0f00 	cmp.w	r9, #0
 8005fe8:	dc35      	bgt.n	8006056 <_printf_float+0x3ae>
 8005fea:	f04f 0800 	mov.w	r8, #0
 8005fee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ff2:	f104 0a1a 	add.w	sl, r4, #26
 8005ff6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ffa:	1a9b      	subs	r3, r3, r2
 8005ffc:	eba3 0309 	sub.w	r3, r3, r9
 8006000:	4543      	cmp	r3, r8
 8006002:	f77f af79 	ble.w	8005ef8 <_printf_float+0x250>
 8006006:	2301      	movs	r3, #1
 8006008:	4652      	mov	r2, sl
 800600a:	4631      	mov	r1, r6
 800600c:	4628      	mov	r0, r5
 800600e:	47b8      	blx	r7
 8006010:	3001      	adds	r0, #1
 8006012:	f43f aeaa 	beq.w	8005d6a <_printf_float+0xc2>
 8006016:	f108 0801 	add.w	r8, r8, #1
 800601a:	e7ec      	b.n	8005ff6 <_printf_float+0x34e>
 800601c:	4613      	mov	r3, r2
 800601e:	4631      	mov	r1, r6
 8006020:	4642      	mov	r2, r8
 8006022:	4628      	mov	r0, r5
 8006024:	47b8      	blx	r7
 8006026:	3001      	adds	r0, #1
 8006028:	d1c0      	bne.n	8005fac <_printf_float+0x304>
 800602a:	e69e      	b.n	8005d6a <_printf_float+0xc2>
 800602c:	2301      	movs	r3, #1
 800602e:	4631      	mov	r1, r6
 8006030:	4628      	mov	r0, r5
 8006032:	9205      	str	r2, [sp, #20]
 8006034:	47b8      	blx	r7
 8006036:	3001      	adds	r0, #1
 8006038:	f43f ae97 	beq.w	8005d6a <_printf_float+0xc2>
 800603c:	9a05      	ldr	r2, [sp, #20]
 800603e:	f10b 0b01 	add.w	fp, fp, #1
 8006042:	e7b9      	b.n	8005fb8 <_printf_float+0x310>
 8006044:	ee18 3a10 	vmov	r3, s16
 8006048:	4652      	mov	r2, sl
 800604a:	4631      	mov	r1, r6
 800604c:	4628      	mov	r0, r5
 800604e:	47b8      	blx	r7
 8006050:	3001      	adds	r0, #1
 8006052:	d1be      	bne.n	8005fd2 <_printf_float+0x32a>
 8006054:	e689      	b.n	8005d6a <_printf_float+0xc2>
 8006056:	9a05      	ldr	r2, [sp, #20]
 8006058:	464b      	mov	r3, r9
 800605a:	4442      	add	r2, r8
 800605c:	4631      	mov	r1, r6
 800605e:	4628      	mov	r0, r5
 8006060:	47b8      	blx	r7
 8006062:	3001      	adds	r0, #1
 8006064:	d1c1      	bne.n	8005fea <_printf_float+0x342>
 8006066:	e680      	b.n	8005d6a <_printf_float+0xc2>
 8006068:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800606a:	2a01      	cmp	r2, #1
 800606c:	dc01      	bgt.n	8006072 <_printf_float+0x3ca>
 800606e:	07db      	lsls	r3, r3, #31
 8006070:	d538      	bpl.n	80060e4 <_printf_float+0x43c>
 8006072:	2301      	movs	r3, #1
 8006074:	4642      	mov	r2, r8
 8006076:	4631      	mov	r1, r6
 8006078:	4628      	mov	r0, r5
 800607a:	47b8      	blx	r7
 800607c:	3001      	adds	r0, #1
 800607e:	f43f ae74 	beq.w	8005d6a <_printf_float+0xc2>
 8006082:	ee18 3a10 	vmov	r3, s16
 8006086:	4652      	mov	r2, sl
 8006088:	4631      	mov	r1, r6
 800608a:	4628      	mov	r0, r5
 800608c:	47b8      	blx	r7
 800608e:	3001      	adds	r0, #1
 8006090:	f43f ae6b 	beq.w	8005d6a <_printf_float+0xc2>
 8006094:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006098:	2200      	movs	r2, #0
 800609a:	2300      	movs	r3, #0
 800609c:	f7fa fd34 	bl	8000b08 <__aeabi_dcmpeq>
 80060a0:	b9d8      	cbnz	r0, 80060da <_printf_float+0x432>
 80060a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060a4:	f108 0201 	add.w	r2, r8, #1
 80060a8:	3b01      	subs	r3, #1
 80060aa:	4631      	mov	r1, r6
 80060ac:	4628      	mov	r0, r5
 80060ae:	47b8      	blx	r7
 80060b0:	3001      	adds	r0, #1
 80060b2:	d10e      	bne.n	80060d2 <_printf_float+0x42a>
 80060b4:	e659      	b.n	8005d6a <_printf_float+0xc2>
 80060b6:	2301      	movs	r3, #1
 80060b8:	4652      	mov	r2, sl
 80060ba:	4631      	mov	r1, r6
 80060bc:	4628      	mov	r0, r5
 80060be:	47b8      	blx	r7
 80060c0:	3001      	adds	r0, #1
 80060c2:	f43f ae52 	beq.w	8005d6a <_printf_float+0xc2>
 80060c6:	f108 0801 	add.w	r8, r8, #1
 80060ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060cc:	3b01      	subs	r3, #1
 80060ce:	4543      	cmp	r3, r8
 80060d0:	dcf1      	bgt.n	80060b6 <_printf_float+0x40e>
 80060d2:	464b      	mov	r3, r9
 80060d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80060d8:	e6dc      	b.n	8005e94 <_printf_float+0x1ec>
 80060da:	f04f 0800 	mov.w	r8, #0
 80060de:	f104 0a1a 	add.w	sl, r4, #26
 80060e2:	e7f2      	b.n	80060ca <_printf_float+0x422>
 80060e4:	2301      	movs	r3, #1
 80060e6:	4642      	mov	r2, r8
 80060e8:	e7df      	b.n	80060aa <_printf_float+0x402>
 80060ea:	2301      	movs	r3, #1
 80060ec:	464a      	mov	r2, r9
 80060ee:	4631      	mov	r1, r6
 80060f0:	4628      	mov	r0, r5
 80060f2:	47b8      	blx	r7
 80060f4:	3001      	adds	r0, #1
 80060f6:	f43f ae38 	beq.w	8005d6a <_printf_float+0xc2>
 80060fa:	f108 0801 	add.w	r8, r8, #1
 80060fe:	68e3      	ldr	r3, [r4, #12]
 8006100:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006102:	1a5b      	subs	r3, r3, r1
 8006104:	4543      	cmp	r3, r8
 8006106:	dcf0      	bgt.n	80060ea <_printf_float+0x442>
 8006108:	e6fa      	b.n	8005f00 <_printf_float+0x258>
 800610a:	f04f 0800 	mov.w	r8, #0
 800610e:	f104 0919 	add.w	r9, r4, #25
 8006112:	e7f4      	b.n	80060fe <_printf_float+0x456>

08006114 <_printf_common>:
 8006114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006118:	4616      	mov	r6, r2
 800611a:	4699      	mov	r9, r3
 800611c:	688a      	ldr	r2, [r1, #8]
 800611e:	690b      	ldr	r3, [r1, #16]
 8006120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006124:	4293      	cmp	r3, r2
 8006126:	bfb8      	it	lt
 8006128:	4613      	movlt	r3, r2
 800612a:	6033      	str	r3, [r6, #0]
 800612c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006130:	4607      	mov	r7, r0
 8006132:	460c      	mov	r4, r1
 8006134:	b10a      	cbz	r2, 800613a <_printf_common+0x26>
 8006136:	3301      	adds	r3, #1
 8006138:	6033      	str	r3, [r6, #0]
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	0699      	lsls	r1, r3, #26
 800613e:	bf42      	ittt	mi
 8006140:	6833      	ldrmi	r3, [r6, #0]
 8006142:	3302      	addmi	r3, #2
 8006144:	6033      	strmi	r3, [r6, #0]
 8006146:	6825      	ldr	r5, [r4, #0]
 8006148:	f015 0506 	ands.w	r5, r5, #6
 800614c:	d106      	bne.n	800615c <_printf_common+0x48>
 800614e:	f104 0a19 	add.w	sl, r4, #25
 8006152:	68e3      	ldr	r3, [r4, #12]
 8006154:	6832      	ldr	r2, [r6, #0]
 8006156:	1a9b      	subs	r3, r3, r2
 8006158:	42ab      	cmp	r3, r5
 800615a:	dc26      	bgt.n	80061aa <_printf_common+0x96>
 800615c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006160:	1e13      	subs	r3, r2, #0
 8006162:	6822      	ldr	r2, [r4, #0]
 8006164:	bf18      	it	ne
 8006166:	2301      	movne	r3, #1
 8006168:	0692      	lsls	r2, r2, #26
 800616a:	d42b      	bmi.n	80061c4 <_printf_common+0xb0>
 800616c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006170:	4649      	mov	r1, r9
 8006172:	4638      	mov	r0, r7
 8006174:	47c0      	blx	r8
 8006176:	3001      	adds	r0, #1
 8006178:	d01e      	beq.n	80061b8 <_printf_common+0xa4>
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	68e5      	ldr	r5, [r4, #12]
 800617e:	6832      	ldr	r2, [r6, #0]
 8006180:	f003 0306 	and.w	r3, r3, #6
 8006184:	2b04      	cmp	r3, #4
 8006186:	bf08      	it	eq
 8006188:	1aad      	subeq	r5, r5, r2
 800618a:	68a3      	ldr	r3, [r4, #8]
 800618c:	6922      	ldr	r2, [r4, #16]
 800618e:	bf0c      	ite	eq
 8006190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006194:	2500      	movne	r5, #0
 8006196:	4293      	cmp	r3, r2
 8006198:	bfc4      	itt	gt
 800619a:	1a9b      	subgt	r3, r3, r2
 800619c:	18ed      	addgt	r5, r5, r3
 800619e:	2600      	movs	r6, #0
 80061a0:	341a      	adds	r4, #26
 80061a2:	42b5      	cmp	r5, r6
 80061a4:	d11a      	bne.n	80061dc <_printf_common+0xc8>
 80061a6:	2000      	movs	r0, #0
 80061a8:	e008      	b.n	80061bc <_printf_common+0xa8>
 80061aa:	2301      	movs	r3, #1
 80061ac:	4652      	mov	r2, sl
 80061ae:	4649      	mov	r1, r9
 80061b0:	4638      	mov	r0, r7
 80061b2:	47c0      	blx	r8
 80061b4:	3001      	adds	r0, #1
 80061b6:	d103      	bne.n	80061c0 <_printf_common+0xac>
 80061b8:	f04f 30ff 	mov.w	r0, #4294967295
 80061bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c0:	3501      	adds	r5, #1
 80061c2:	e7c6      	b.n	8006152 <_printf_common+0x3e>
 80061c4:	18e1      	adds	r1, r4, r3
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	2030      	movs	r0, #48	; 0x30
 80061ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061ce:	4422      	add	r2, r4
 80061d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061d8:	3302      	adds	r3, #2
 80061da:	e7c7      	b.n	800616c <_printf_common+0x58>
 80061dc:	2301      	movs	r3, #1
 80061de:	4622      	mov	r2, r4
 80061e0:	4649      	mov	r1, r9
 80061e2:	4638      	mov	r0, r7
 80061e4:	47c0      	blx	r8
 80061e6:	3001      	adds	r0, #1
 80061e8:	d0e6      	beq.n	80061b8 <_printf_common+0xa4>
 80061ea:	3601      	adds	r6, #1
 80061ec:	e7d9      	b.n	80061a2 <_printf_common+0x8e>
	...

080061f0 <_printf_i>:
 80061f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061f4:	7e0f      	ldrb	r7, [r1, #24]
 80061f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061f8:	2f78      	cmp	r7, #120	; 0x78
 80061fa:	4691      	mov	r9, r2
 80061fc:	4680      	mov	r8, r0
 80061fe:	460c      	mov	r4, r1
 8006200:	469a      	mov	sl, r3
 8006202:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006206:	d807      	bhi.n	8006218 <_printf_i+0x28>
 8006208:	2f62      	cmp	r7, #98	; 0x62
 800620a:	d80a      	bhi.n	8006222 <_printf_i+0x32>
 800620c:	2f00      	cmp	r7, #0
 800620e:	f000 80d8 	beq.w	80063c2 <_printf_i+0x1d2>
 8006212:	2f58      	cmp	r7, #88	; 0x58
 8006214:	f000 80a3 	beq.w	800635e <_printf_i+0x16e>
 8006218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800621c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006220:	e03a      	b.n	8006298 <_printf_i+0xa8>
 8006222:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006226:	2b15      	cmp	r3, #21
 8006228:	d8f6      	bhi.n	8006218 <_printf_i+0x28>
 800622a:	a101      	add	r1, pc, #4	; (adr r1, 8006230 <_printf_i+0x40>)
 800622c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006230:	08006289 	.word	0x08006289
 8006234:	0800629d 	.word	0x0800629d
 8006238:	08006219 	.word	0x08006219
 800623c:	08006219 	.word	0x08006219
 8006240:	08006219 	.word	0x08006219
 8006244:	08006219 	.word	0x08006219
 8006248:	0800629d 	.word	0x0800629d
 800624c:	08006219 	.word	0x08006219
 8006250:	08006219 	.word	0x08006219
 8006254:	08006219 	.word	0x08006219
 8006258:	08006219 	.word	0x08006219
 800625c:	080063a9 	.word	0x080063a9
 8006260:	080062cd 	.word	0x080062cd
 8006264:	0800638b 	.word	0x0800638b
 8006268:	08006219 	.word	0x08006219
 800626c:	08006219 	.word	0x08006219
 8006270:	080063cb 	.word	0x080063cb
 8006274:	08006219 	.word	0x08006219
 8006278:	080062cd 	.word	0x080062cd
 800627c:	08006219 	.word	0x08006219
 8006280:	08006219 	.word	0x08006219
 8006284:	08006393 	.word	0x08006393
 8006288:	682b      	ldr	r3, [r5, #0]
 800628a:	1d1a      	adds	r2, r3, #4
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	602a      	str	r2, [r5, #0]
 8006290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006298:	2301      	movs	r3, #1
 800629a:	e0a3      	b.n	80063e4 <_printf_i+0x1f4>
 800629c:	6820      	ldr	r0, [r4, #0]
 800629e:	6829      	ldr	r1, [r5, #0]
 80062a0:	0606      	lsls	r6, r0, #24
 80062a2:	f101 0304 	add.w	r3, r1, #4
 80062a6:	d50a      	bpl.n	80062be <_printf_i+0xce>
 80062a8:	680e      	ldr	r6, [r1, #0]
 80062aa:	602b      	str	r3, [r5, #0]
 80062ac:	2e00      	cmp	r6, #0
 80062ae:	da03      	bge.n	80062b8 <_printf_i+0xc8>
 80062b0:	232d      	movs	r3, #45	; 0x2d
 80062b2:	4276      	negs	r6, r6
 80062b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062b8:	485e      	ldr	r0, [pc, #376]	; (8006434 <_printf_i+0x244>)
 80062ba:	230a      	movs	r3, #10
 80062bc:	e019      	b.n	80062f2 <_printf_i+0x102>
 80062be:	680e      	ldr	r6, [r1, #0]
 80062c0:	602b      	str	r3, [r5, #0]
 80062c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062c6:	bf18      	it	ne
 80062c8:	b236      	sxthne	r6, r6
 80062ca:	e7ef      	b.n	80062ac <_printf_i+0xbc>
 80062cc:	682b      	ldr	r3, [r5, #0]
 80062ce:	6820      	ldr	r0, [r4, #0]
 80062d0:	1d19      	adds	r1, r3, #4
 80062d2:	6029      	str	r1, [r5, #0]
 80062d4:	0601      	lsls	r1, r0, #24
 80062d6:	d501      	bpl.n	80062dc <_printf_i+0xec>
 80062d8:	681e      	ldr	r6, [r3, #0]
 80062da:	e002      	b.n	80062e2 <_printf_i+0xf2>
 80062dc:	0646      	lsls	r6, r0, #25
 80062de:	d5fb      	bpl.n	80062d8 <_printf_i+0xe8>
 80062e0:	881e      	ldrh	r6, [r3, #0]
 80062e2:	4854      	ldr	r0, [pc, #336]	; (8006434 <_printf_i+0x244>)
 80062e4:	2f6f      	cmp	r7, #111	; 0x6f
 80062e6:	bf0c      	ite	eq
 80062e8:	2308      	moveq	r3, #8
 80062ea:	230a      	movne	r3, #10
 80062ec:	2100      	movs	r1, #0
 80062ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062f2:	6865      	ldr	r5, [r4, #4]
 80062f4:	60a5      	str	r5, [r4, #8]
 80062f6:	2d00      	cmp	r5, #0
 80062f8:	bfa2      	ittt	ge
 80062fa:	6821      	ldrge	r1, [r4, #0]
 80062fc:	f021 0104 	bicge.w	r1, r1, #4
 8006300:	6021      	strge	r1, [r4, #0]
 8006302:	b90e      	cbnz	r6, 8006308 <_printf_i+0x118>
 8006304:	2d00      	cmp	r5, #0
 8006306:	d04d      	beq.n	80063a4 <_printf_i+0x1b4>
 8006308:	4615      	mov	r5, r2
 800630a:	fbb6 f1f3 	udiv	r1, r6, r3
 800630e:	fb03 6711 	mls	r7, r3, r1, r6
 8006312:	5dc7      	ldrb	r7, [r0, r7]
 8006314:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006318:	4637      	mov	r7, r6
 800631a:	42bb      	cmp	r3, r7
 800631c:	460e      	mov	r6, r1
 800631e:	d9f4      	bls.n	800630a <_printf_i+0x11a>
 8006320:	2b08      	cmp	r3, #8
 8006322:	d10b      	bne.n	800633c <_printf_i+0x14c>
 8006324:	6823      	ldr	r3, [r4, #0]
 8006326:	07de      	lsls	r6, r3, #31
 8006328:	d508      	bpl.n	800633c <_printf_i+0x14c>
 800632a:	6923      	ldr	r3, [r4, #16]
 800632c:	6861      	ldr	r1, [r4, #4]
 800632e:	4299      	cmp	r1, r3
 8006330:	bfde      	ittt	le
 8006332:	2330      	movle	r3, #48	; 0x30
 8006334:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006338:	f105 35ff 	addle.w	r5, r5, #4294967295
 800633c:	1b52      	subs	r2, r2, r5
 800633e:	6122      	str	r2, [r4, #16]
 8006340:	f8cd a000 	str.w	sl, [sp]
 8006344:	464b      	mov	r3, r9
 8006346:	aa03      	add	r2, sp, #12
 8006348:	4621      	mov	r1, r4
 800634a:	4640      	mov	r0, r8
 800634c:	f7ff fee2 	bl	8006114 <_printf_common>
 8006350:	3001      	adds	r0, #1
 8006352:	d14c      	bne.n	80063ee <_printf_i+0x1fe>
 8006354:	f04f 30ff 	mov.w	r0, #4294967295
 8006358:	b004      	add	sp, #16
 800635a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800635e:	4835      	ldr	r0, [pc, #212]	; (8006434 <_printf_i+0x244>)
 8006360:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006364:	6829      	ldr	r1, [r5, #0]
 8006366:	6823      	ldr	r3, [r4, #0]
 8006368:	f851 6b04 	ldr.w	r6, [r1], #4
 800636c:	6029      	str	r1, [r5, #0]
 800636e:	061d      	lsls	r5, r3, #24
 8006370:	d514      	bpl.n	800639c <_printf_i+0x1ac>
 8006372:	07df      	lsls	r7, r3, #31
 8006374:	bf44      	itt	mi
 8006376:	f043 0320 	orrmi.w	r3, r3, #32
 800637a:	6023      	strmi	r3, [r4, #0]
 800637c:	b91e      	cbnz	r6, 8006386 <_printf_i+0x196>
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	f023 0320 	bic.w	r3, r3, #32
 8006384:	6023      	str	r3, [r4, #0]
 8006386:	2310      	movs	r3, #16
 8006388:	e7b0      	b.n	80062ec <_printf_i+0xfc>
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	f043 0320 	orr.w	r3, r3, #32
 8006390:	6023      	str	r3, [r4, #0]
 8006392:	2378      	movs	r3, #120	; 0x78
 8006394:	4828      	ldr	r0, [pc, #160]	; (8006438 <_printf_i+0x248>)
 8006396:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800639a:	e7e3      	b.n	8006364 <_printf_i+0x174>
 800639c:	0659      	lsls	r1, r3, #25
 800639e:	bf48      	it	mi
 80063a0:	b2b6      	uxthmi	r6, r6
 80063a2:	e7e6      	b.n	8006372 <_printf_i+0x182>
 80063a4:	4615      	mov	r5, r2
 80063a6:	e7bb      	b.n	8006320 <_printf_i+0x130>
 80063a8:	682b      	ldr	r3, [r5, #0]
 80063aa:	6826      	ldr	r6, [r4, #0]
 80063ac:	6961      	ldr	r1, [r4, #20]
 80063ae:	1d18      	adds	r0, r3, #4
 80063b0:	6028      	str	r0, [r5, #0]
 80063b2:	0635      	lsls	r5, r6, #24
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	d501      	bpl.n	80063bc <_printf_i+0x1cc>
 80063b8:	6019      	str	r1, [r3, #0]
 80063ba:	e002      	b.n	80063c2 <_printf_i+0x1d2>
 80063bc:	0670      	lsls	r0, r6, #25
 80063be:	d5fb      	bpl.n	80063b8 <_printf_i+0x1c8>
 80063c0:	8019      	strh	r1, [r3, #0]
 80063c2:	2300      	movs	r3, #0
 80063c4:	6123      	str	r3, [r4, #16]
 80063c6:	4615      	mov	r5, r2
 80063c8:	e7ba      	b.n	8006340 <_printf_i+0x150>
 80063ca:	682b      	ldr	r3, [r5, #0]
 80063cc:	1d1a      	adds	r2, r3, #4
 80063ce:	602a      	str	r2, [r5, #0]
 80063d0:	681d      	ldr	r5, [r3, #0]
 80063d2:	6862      	ldr	r2, [r4, #4]
 80063d4:	2100      	movs	r1, #0
 80063d6:	4628      	mov	r0, r5
 80063d8:	f7f9 ff22 	bl	8000220 <memchr>
 80063dc:	b108      	cbz	r0, 80063e2 <_printf_i+0x1f2>
 80063de:	1b40      	subs	r0, r0, r5
 80063e0:	6060      	str	r0, [r4, #4]
 80063e2:	6863      	ldr	r3, [r4, #4]
 80063e4:	6123      	str	r3, [r4, #16]
 80063e6:	2300      	movs	r3, #0
 80063e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063ec:	e7a8      	b.n	8006340 <_printf_i+0x150>
 80063ee:	6923      	ldr	r3, [r4, #16]
 80063f0:	462a      	mov	r2, r5
 80063f2:	4649      	mov	r1, r9
 80063f4:	4640      	mov	r0, r8
 80063f6:	47d0      	blx	sl
 80063f8:	3001      	adds	r0, #1
 80063fa:	d0ab      	beq.n	8006354 <_printf_i+0x164>
 80063fc:	6823      	ldr	r3, [r4, #0]
 80063fe:	079b      	lsls	r3, r3, #30
 8006400:	d413      	bmi.n	800642a <_printf_i+0x23a>
 8006402:	68e0      	ldr	r0, [r4, #12]
 8006404:	9b03      	ldr	r3, [sp, #12]
 8006406:	4298      	cmp	r0, r3
 8006408:	bfb8      	it	lt
 800640a:	4618      	movlt	r0, r3
 800640c:	e7a4      	b.n	8006358 <_printf_i+0x168>
 800640e:	2301      	movs	r3, #1
 8006410:	4632      	mov	r2, r6
 8006412:	4649      	mov	r1, r9
 8006414:	4640      	mov	r0, r8
 8006416:	47d0      	blx	sl
 8006418:	3001      	adds	r0, #1
 800641a:	d09b      	beq.n	8006354 <_printf_i+0x164>
 800641c:	3501      	adds	r5, #1
 800641e:	68e3      	ldr	r3, [r4, #12]
 8006420:	9903      	ldr	r1, [sp, #12]
 8006422:	1a5b      	subs	r3, r3, r1
 8006424:	42ab      	cmp	r3, r5
 8006426:	dcf2      	bgt.n	800640e <_printf_i+0x21e>
 8006428:	e7eb      	b.n	8006402 <_printf_i+0x212>
 800642a:	2500      	movs	r5, #0
 800642c:	f104 0619 	add.w	r6, r4, #25
 8006430:	e7f5      	b.n	800641e <_printf_i+0x22e>
 8006432:	bf00      	nop
 8006434:	080089da 	.word	0x080089da
 8006438:	080089eb 	.word	0x080089eb

0800643c <siprintf>:
 800643c:	b40e      	push	{r1, r2, r3}
 800643e:	b500      	push	{lr}
 8006440:	b09c      	sub	sp, #112	; 0x70
 8006442:	ab1d      	add	r3, sp, #116	; 0x74
 8006444:	9002      	str	r0, [sp, #8]
 8006446:	9006      	str	r0, [sp, #24]
 8006448:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800644c:	4809      	ldr	r0, [pc, #36]	; (8006474 <siprintf+0x38>)
 800644e:	9107      	str	r1, [sp, #28]
 8006450:	9104      	str	r1, [sp, #16]
 8006452:	4909      	ldr	r1, [pc, #36]	; (8006478 <siprintf+0x3c>)
 8006454:	f853 2b04 	ldr.w	r2, [r3], #4
 8006458:	9105      	str	r1, [sp, #20]
 800645a:	6800      	ldr	r0, [r0, #0]
 800645c:	9301      	str	r3, [sp, #4]
 800645e:	a902      	add	r1, sp, #8
 8006460:	f001 fb6a 	bl	8007b38 <_svfiprintf_r>
 8006464:	9b02      	ldr	r3, [sp, #8]
 8006466:	2200      	movs	r2, #0
 8006468:	701a      	strb	r2, [r3, #0]
 800646a:	b01c      	add	sp, #112	; 0x70
 800646c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006470:	b003      	add	sp, #12
 8006472:	4770      	bx	lr
 8006474:	20000010 	.word	0x20000010
 8006478:	ffff0208 	.word	0xffff0208

0800647c <quorem>:
 800647c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006480:	6903      	ldr	r3, [r0, #16]
 8006482:	690c      	ldr	r4, [r1, #16]
 8006484:	42a3      	cmp	r3, r4
 8006486:	4607      	mov	r7, r0
 8006488:	f2c0 8081 	blt.w	800658e <quorem+0x112>
 800648c:	3c01      	subs	r4, #1
 800648e:	f101 0814 	add.w	r8, r1, #20
 8006492:	f100 0514 	add.w	r5, r0, #20
 8006496:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800649a:	9301      	str	r3, [sp, #4]
 800649c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80064a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064a4:	3301      	adds	r3, #1
 80064a6:	429a      	cmp	r2, r3
 80064a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80064ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80064b4:	d331      	bcc.n	800651a <quorem+0x9e>
 80064b6:	f04f 0e00 	mov.w	lr, #0
 80064ba:	4640      	mov	r0, r8
 80064bc:	46ac      	mov	ip, r5
 80064be:	46f2      	mov	sl, lr
 80064c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80064c4:	b293      	uxth	r3, r2
 80064c6:	fb06 e303 	mla	r3, r6, r3, lr
 80064ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	ebaa 0303 	sub.w	r3, sl, r3
 80064d4:	f8dc a000 	ldr.w	sl, [ip]
 80064d8:	0c12      	lsrs	r2, r2, #16
 80064da:	fa13 f38a 	uxtah	r3, r3, sl
 80064de:	fb06 e202 	mla	r2, r6, r2, lr
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	9b00      	ldr	r3, [sp, #0]
 80064e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064ea:	b292      	uxth	r2, r2
 80064ec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80064f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064f4:	f8bd 3000 	ldrh.w	r3, [sp]
 80064f8:	4581      	cmp	r9, r0
 80064fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064fe:	f84c 3b04 	str.w	r3, [ip], #4
 8006502:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006506:	d2db      	bcs.n	80064c0 <quorem+0x44>
 8006508:	f855 300b 	ldr.w	r3, [r5, fp]
 800650c:	b92b      	cbnz	r3, 800651a <quorem+0x9e>
 800650e:	9b01      	ldr	r3, [sp, #4]
 8006510:	3b04      	subs	r3, #4
 8006512:	429d      	cmp	r5, r3
 8006514:	461a      	mov	r2, r3
 8006516:	d32e      	bcc.n	8006576 <quorem+0xfa>
 8006518:	613c      	str	r4, [r7, #16]
 800651a:	4638      	mov	r0, r7
 800651c:	f001 f8b8 	bl	8007690 <__mcmp>
 8006520:	2800      	cmp	r0, #0
 8006522:	db24      	blt.n	800656e <quorem+0xf2>
 8006524:	3601      	adds	r6, #1
 8006526:	4628      	mov	r0, r5
 8006528:	f04f 0c00 	mov.w	ip, #0
 800652c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006530:	f8d0 e000 	ldr.w	lr, [r0]
 8006534:	b293      	uxth	r3, r2
 8006536:	ebac 0303 	sub.w	r3, ip, r3
 800653a:	0c12      	lsrs	r2, r2, #16
 800653c:	fa13 f38e 	uxtah	r3, r3, lr
 8006540:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006544:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006548:	b29b      	uxth	r3, r3
 800654a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800654e:	45c1      	cmp	r9, r8
 8006550:	f840 3b04 	str.w	r3, [r0], #4
 8006554:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006558:	d2e8      	bcs.n	800652c <quorem+0xb0>
 800655a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800655e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006562:	b922      	cbnz	r2, 800656e <quorem+0xf2>
 8006564:	3b04      	subs	r3, #4
 8006566:	429d      	cmp	r5, r3
 8006568:	461a      	mov	r2, r3
 800656a:	d30a      	bcc.n	8006582 <quorem+0x106>
 800656c:	613c      	str	r4, [r7, #16]
 800656e:	4630      	mov	r0, r6
 8006570:	b003      	add	sp, #12
 8006572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006576:	6812      	ldr	r2, [r2, #0]
 8006578:	3b04      	subs	r3, #4
 800657a:	2a00      	cmp	r2, #0
 800657c:	d1cc      	bne.n	8006518 <quorem+0x9c>
 800657e:	3c01      	subs	r4, #1
 8006580:	e7c7      	b.n	8006512 <quorem+0x96>
 8006582:	6812      	ldr	r2, [r2, #0]
 8006584:	3b04      	subs	r3, #4
 8006586:	2a00      	cmp	r2, #0
 8006588:	d1f0      	bne.n	800656c <quorem+0xf0>
 800658a:	3c01      	subs	r4, #1
 800658c:	e7eb      	b.n	8006566 <quorem+0xea>
 800658e:	2000      	movs	r0, #0
 8006590:	e7ee      	b.n	8006570 <quorem+0xf4>
 8006592:	0000      	movs	r0, r0
 8006594:	0000      	movs	r0, r0
	...

08006598 <_dtoa_r>:
 8006598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800659c:	ed2d 8b04 	vpush	{d8-d9}
 80065a0:	ec57 6b10 	vmov	r6, r7, d0
 80065a4:	b093      	sub	sp, #76	; 0x4c
 80065a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80065a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80065ac:	9106      	str	r1, [sp, #24]
 80065ae:	ee10 aa10 	vmov	sl, s0
 80065b2:	4604      	mov	r4, r0
 80065b4:	9209      	str	r2, [sp, #36]	; 0x24
 80065b6:	930c      	str	r3, [sp, #48]	; 0x30
 80065b8:	46bb      	mov	fp, r7
 80065ba:	b975      	cbnz	r5, 80065da <_dtoa_r+0x42>
 80065bc:	2010      	movs	r0, #16
 80065be:	f000 fddd 	bl	800717c <malloc>
 80065c2:	4602      	mov	r2, r0
 80065c4:	6260      	str	r0, [r4, #36]	; 0x24
 80065c6:	b920      	cbnz	r0, 80065d2 <_dtoa_r+0x3a>
 80065c8:	4ba7      	ldr	r3, [pc, #668]	; (8006868 <_dtoa_r+0x2d0>)
 80065ca:	21ea      	movs	r1, #234	; 0xea
 80065cc:	48a7      	ldr	r0, [pc, #668]	; (800686c <_dtoa_r+0x2d4>)
 80065ce:	f001 fbc3 	bl	8007d58 <__assert_func>
 80065d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80065d6:	6005      	str	r5, [r0, #0]
 80065d8:	60c5      	str	r5, [r0, #12]
 80065da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065dc:	6819      	ldr	r1, [r3, #0]
 80065de:	b151      	cbz	r1, 80065f6 <_dtoa_r+0x5e>
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	604a      	str	r2, [r1, #4]
 80065e4:	2301      	movs	r3, #1
 80065e6:	4093      	lsls	r3, r2
 80065e8:	608b      	str	r3, [r1, #8]
 80065ea:	4620      	mov	r0, r4
 80065ec:	f000 fe0e 	bl	800720c <_Bfree>
 80065f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	1e3b      	subs	r3, r7, #0
 80065f8:	bfaa      	itet	ge
 80065fa:	2300      	movge	r3, #0
 80065fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006600:	f8c8 3000 	strge.w	r3, [r8]
 8006604:	4b9a      	ldr	r3, [pc, #616]	; (8006870 <_dtoa_r+0x2d8>)
 8006606:	bfbc      	itt	lt
 8006608:	2201      	movlt	r2, #1
 800660a:	f8c8 2000 	strlt.w	r2, [r8]
 800660e:	ea33 030b 	bics.w	r3, r3, fp
 8006612:	d11b      	bne.n	800664c <_dtoa_r+0xb4>
 8006614:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006616:	f242 730f 	movw	r3, #9999	; 0x270f
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006620:	4333      	orrs	r3, r6
 8006622:	f000 8592 	beq.w	800714a <_dtoa_r+0xbb2>
 8006626:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006628:	b963      	cbnz	r3, 8006644 <_dtoa_r+0xac>
 800662a:	4b92      	ldr	r3, [pc, #584]	; (8006874 <_dtoa_r+0x2dc>)
 800662c:	e022      	b.n	8006674 <_dtoa_r+0xdc>
 800662e:	4b92      	ldr	r3, [pc, #584]	; (8006878 <_dtoa_r+0x2e0>)
 8006630:	9301      	str	r3, [sp, #4]
 8006632:	3308      	adds	r3, #8
 8006634:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006636:	6013      	str	r3, [r2, #0]
 8006638:	9801      	ldr	r0, [sp, #4]
 800663a:	b013      	add	sp, #76	; 0x4c
 800663c:	ecbd 8b04 	vpop	{d8-d9}
 8006640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006644:	4b8b      	ldr	r3, [pc, #556]	; (8006874 <_dtoa_r+0x2dc>)
 8006646:	9301      	str	r3, [sp, #4]
 8006648:	3303      	adds	r3, #3
 800664a:	e7f3      	b.n	8006634 <_dtoa_r+0x9c>
 800664c:	2200      	movs	r2, #0
 800664e:	2300      	movs	r3, #0
 8006650:	4650      	mov	r0, sl
 8006652:	4659      	mov	r1, fp
 8006654:	f7fa fa58 	bl	8000b08 <__aeabi_dcmpeq>
 8006658:	ec4b ab19 	vmov	d9, sl, fp
 800665c:	4680      	mov	r8, r0
 800665e:	b158      	cbz	r0, 8006678 <_dtoa_r+0xe0>
 8006660:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006662:	2301      	movs	r3, #1
 8006664:	6013      	str	r3, [r2, #0]
 8006666:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006668:	2b00      	cmp	r3, #0
 800666a:	f000 856b 	beq.w	8007144 <_dtoa_r+0xbac>
 800666e:	4883      	ldr	r0, [pc, #524]	; (800687c <_dtoa_r+0x2e4>)
 8006670:	6018      	str	r0, [r3, #0]
 8006672:	1e43      	subs	r3, r0, #1
 8006674:	9301      	str	r3, [sp, #4]
 8006676:	e7df      	b.n	8006638 <_dtoa_r+0xa0>
 8006678:	ec4b ab10 	vmov	d0, sl, fp
 800667c:	aa10      	add	r2, sp, #64	; 0x40
 800667e:	a911      	add	r1, sp, #68	; 0x44
 8006680:	4620      	mov	r0, r4
 8006682:	f001 f8ab 	bl	80077dc <__d2b>
 8006686:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800668a:	ee08 0a10 	vmov	s16, r0
 800668e:	2d00      	cmp	r5, #0
 8006690:	f000 8084 	beq.w	800679c <_dtoa_r+0x204>
 8006694:	ee19 3a90 	vmov	r3, s19
 8006698:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800669c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80066a0:	4656      	mov	r6, sl
 80066a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80066a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80066aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80066ae:	4b74      	ldr	r3, [pc, #464]	; (8006880 <_dtoa_r+0x2e8>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	4630      	mov	r0, r6
 80066b4:	4639      	mov	r1, r7
 80066b6:	f7f9 fe07 	bl	80002c8 <__aeabi_dsub>
 80066ba:	a365      	add	r3, pc, #404	; (adr r3, 8006850 <_dtoa_r+0x2b8>)
 80066bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c0:	f7f9 ffba 	bl	8000638 <__aeabi_dmul>
 80066c4:	a364      	add	r3, pc, #400	; (adr r3, 8006858 <_dtoa_r+0x2c0>)
 80066c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ca:	f7f9 fdff 	bl	80002cc <__adddf3>
 80066ce:	4606      	mov	r6, r0
 80066d0:	4628      	mov	r0, r5
 80066d2:	460f      	mov	r7, r1
 80066d4:	f7f9 ff46 	bl	8000564 <__aeabi_i2d>
 80066d8:	a361      	add	r3, pc, #388	; (adr r3, 8006860 <_dtoa_r+0x2c8>)
 80066da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066de:	f7f9 ffab 	bl	8000638 <__aeabi_dmul>
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	4630      	mov	r0, r6
 80066e8:	4639      	mov	r1, r7
 80066ea:	f7f9 fdef 	bl	80002cc <__adddf3>
 80066ee:	4606      	mov	r6, r0
 80066f0:	460f      	mov	r7, r1
 80066f2:	f7fa fa51 	bl	8000b98 <__aeabi_d2iz>
 80066f6:	2200      	movs	r2, #0
 80066f8:	9000      	str	r0, [sp, #0]
 80066fa:	2300      	movs	r3, #0
 80066fc:	4630      	mov	r0, r6
 80066fe:	4639      	mov	r1, r7
 8006700:	f7fa fa0c 	bl	8000b1c <__aeabi_dcmplt>
 8006704:	b150      	cbz	r0, 800671c <_dtoa_r+0x184>
 8006706:	9800      	ldr	r0, [sp, #0]
 8006708:	f7f9 ff2c 	bl	8000564 <__aeabi_i2d>
 800670c:	4632      	mov	r2, r6
 800670e:	463b      	mov	r3, r7
 8006710:	f7fa f9fa 	bl	8000b08 <__aeabi_dcmpeq>
 8006714:	b910      	cbnz	r0, 800671c <_dtoa_r+0x184>
 8006716:	9b00      	ldr	r3, [sp, #0]
 8006718:	3b01      	subs	r3, #1
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	9b00      	ldr	r3, [sp, #0]
 800671e:	2b16      	cmp	r3, #22
 8006720:	d85a      	bhi.n	80067d8 <_dtoa_r+0x240>
 8006722:	9a00      	ldr	r2, [sp, #0]
 8006724:	4b57      	ldr	r3, [pc, #348]	; (8006884 <_dtoa_r+0x2ec>)
 8006726:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672e:	ec51 0b19 	vmov	r0, r1, d9
 8006732:	f7fa f9f3 	bl	8000b1c <__aeabi_dcmplt>
 8006736:	2800      	cmp	r0, #0
 8006738:	d050      	beq.n	80067dc <_dtoa_r+0x244>
 800673a:	9b00      	ldr	r3, [sp, #0]
 800673c:	3b01      	subs	r3, #1
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	2300      	movs	r3, #0
 8006742:	930b      	str	r3, [sp, #44]	; 0x2c
 8006744:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006746:	1b5d      	subs	r5, r3, r5
 8006748:	1e6b      	subs	r3, r5, #1
 800674a:	9305      	str	r3, [sp, #20]
 800674c:	bf45      	ittet	mi
 800674e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006752:	9304      	strmi	r3, [sp, #16]
 8006754:	2300      	movpl	r3, #0
 8006756:	2300      	movmi	r3, #0
 8006758:	bf4c      	ite	mi
 800675a:	9305      	strmi	r3, [sp, #20]
 800675c:	9304      	strpl	r3, [sp, #16]
 800675e:	9b00      	ldr	r3, [sp, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	db3d      	blt.n	80067e0 <_dtoa_r+0x248>
 8006764:	9b05      	ldr	r3, [sp, #20]
 8006766:	9a00      	ldr	r2, [sp, #0]
 8006768:	920a      	str	r2, [sp, #40]	; 0x28
 800676a:	4413      	add	r3, r2
 800676c:	9305      	str	r3, [sp, #20]
 800676e:	2300      	movs	r3, #0
 8006770:	9307      	str	r3, [sp, #28]
 8006772:	9b06      	ldr	r3, [sp, #24]
 8006774:	2b09      	cmp	r3, #9
 8006776:	f200 8089 	bhi.w	800688c <_dtoa_r+0x2f4>
 800677a:	2b05      	cmp	r3, #5
 800677c:	bfc4      	itt	gt
 800677e:	3b04      	subgt	r3, #4
 8006780:	9306      	strgt	r3, [sp, #24]
 8006782:	9b06      	ldr	r3, [sp, #24]
 8006784:	f1a3 0302 	sub.w	r3, r3, #2
 8006788:	bfcc      	ite	gt
 800678a:	2500      	movgt	r5, #0
 800678c:	2501      	movle	r5, #1
 800678e:	2b03      	cmp	r3, #3
 8006790:	f200 8087 	bhi.w	80068a2 <_dtoa_r+0x30a>
 8006794:	e8df f003 	tbb	[pc, r3]
 8006798:	59383a2d 	.word	0x59383a2d
 800679c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80067a0:	441d      	add	r5, r3
 80067a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80067a6:	2b20      	cmp	r3, #32
 80067a8:	bfc1      	itttt	gt
 80067aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80067ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80067b2:	fa0b f303 	lslgt.w	r3, fp, r3
 80067b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80067ba:	bfda      	itte	le
 80067bc:	f1c3 0320 	rsble	r3, r3, #32
 80067c0:	fa06 f003 	lslle.w	r0, r6, r3
 80067c4:	4318      	orrgt	r0, r3
 80067c6:	f7f9 febd 	bl	8000544 <__aeabi_ui2d>
 80067ca:	2301      	movs	r3, #1
 80067cc:	4606      	mov	r6, r0
 80067ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80067d2:	3d01      	subs	r5, #1
 80067d4:	930e      	str	r3, [sp, #56]	; 0x38
 80067d6:	e76a      	b.n	80066ae <_dtoa_r+0x116>
 80067d8:	2301      	movs	r3, #1
 80067da:	e7b2      	b.n	8006742 <_dtoa_r+0x1aa>
 80067dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80067de:	e7b1      	b.n	8006744 <_dtoa_r+0x1ac>
 80067e0:	9b04      	ldr	r3, [sp, #16]
 80067e2:	9a00      	ldr	r2, [sp, #0]
 80067e4:	1a9b      	subs	r3, r3, r2
 80067e6:	9304      	str	r3, [sp, #16]
 80067e8:	4253      	negs	r3, r2
 80067ea:	9307      	str	r3, [sp, #28]
 80067ec:	2300      	movs	r3, #0
 80067ee:	930a      	str	r3, [sp, #40]	; 0x28
 80067f0:	e7bf      	b.n	8006772 <_dtoa_r+0x1da>
 80067f2:	2300      	movs	r3, #0
 80067f4:	9308      	str	r3, [sp, #32]
 80067f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	dc55      	bgt.n	80068a8 <_dtoa_r+0x310>
 80067fc:	2301      	movs	r3, #1
 80067fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006802:	461a      	mov	r2, r3
 8006804:	9209      	str	r2, [sp, #36]	; 0x24
 8006806:	e00c      	b.n	8006822 <_dtoa_r+0x28a>
 8006808:	2301      	movs	r3, #1
 800680a:	e7f3      	b.n	80067f4 <_dtoa_r+0x25c>
 800680c:	2300      	movs	r3, #0
 800680e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006810:	9308      	str	r3, [sp, #32]
 8006812:	9b00      	ldr	r3, [sp, #0]
 8006814:	4413      	add	r3, r2
 8006816:	9302      	str	r3, [sp, #8]
 8006818:	3301      	adds	r3, #1
 800681a:	2b01      	cmp	r3, #1
 800681c:	9303      	str	r3, [sp, #12]
 800681e:	bfb8      	it	lt
 8006820:	2301      	movlt	r3, #1
 8006822:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006824:	2200      	movs	r2, #0
 8006826:	6042      	str	r2, [r0, #4]
 8006828:	2204      	movs	r2, #4
 800682a:	f102 0614 	add.w	r6, r2, #20
 800682e:	429e      	cmp	r6, r3
 8006830:	6841      	ldr	r1, [r0, #4]
 8006832:	d93d      	bls.n	80068b0 <_dtoa_r+0x318>
 8006834:	4620      	mov	r0, r4
 8006836:	f000 fca9 	bl	800718c <_Balloc>
 800683a:	9001      	str	r0, [sp, #4]
 800683c:	2800      	cmp	r0, #0
 800683e:	d13b      	bne.n	80068b8 <_dtoa_r+0x320>
 8006840:	4b11      	ldr	r3, [pc, #68]	; (8006888 <_dtoa_r+0x2f0>)
 8006842:	4602      	mov	r2, r0
 8006844:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006848:	e6c0      	b.n	80065cc <_dtoa_r+0x34>
 800684a:	2301      	movs	r3, #1
 800684c:	e7df      	b.n	800680e <_dtoa_r+0x276>
 800684e:	bf00      	nop
 8006850:	636f4361 	.word	0x636f4361
 8006854:	3fd287a7 	.word	0x3fd287a7
 8006858:	8b60c8b3 	.word	0x8b60c8b3
 800685c:	3fc68a28 	.word	0x3fc68a28
 8006860:	509f79fb 	.word	0x509f79fb
 8006864:	3fd34413 	.word	0x3fd34413
 8006868:	08008a09 	.word	0x08008a09
 800686c:	08008a20 	.word	0x08008a20
 8006870:	7ff00000 	.word	0x7ff00000
 8006874:	08008a05 	.word	0x08008a05
 8006878:	080089fc 	.word	0x080089fc
 800687c:	080089d9 	.word	0x080089d9
 8006880:	3ff80000 	.word	0x3ff80000
 8006884:	08008b10 	.word	0x08008b10
 8006888:	08008a7b 	.word	0x08008a7b
 800688c:	2501      	movs	r5, #1
 800688e:	2300      	movs	r3, #0
 8006890:	9306      	str	r3, [sp, #24]
 8006892:	9508      	str	r5, [sp, #32]
 8006894:	f04f 33ff 	mov.w	r3, #4294967295
 8006898:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800689c:	2200      	movs	r2, #0
 800689e:	2312      	movs	r3, #18
 80068a0:	e7b0      	b.n	8006804 <_dtoa_r+0x26c>
 80068a2:	2301      	movs	r3, #1
 80068a4:	9308      	str	r3, [sp, #32]
 80068a6:	e7f5      	b.n	8006894 <_dtoa_r+0x2fc>
 80068a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80068ae:	e7b8      	b.n	8006822 <_dtoa_r+0x28a>
 80068b0:	3101      	adds	r1, #1
 80068b2:	6041      	str	r1, [r0, #4]
 80068b4:	0052      	lsls	r2, r2, #1
 80068b6:	e7b8      	b.n	800682a <_dtoa_r+0x292>
 80068b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068ba:	9a01      	ldr	r2, [sp, #4]
 80068bc:	601a      	str	r2, [r3, #0]
 80068be:	9b03      	ldr	r3, [sp, #12]
 80068c0:	2b0e      	cmp	r3, #14
 80068c2:	f200 809d 	bhi.w	8006a00 <_dtoa_r+0x468>
 80068c6:	2d00      	cmp	r5, #0
 80068c8:	f000 809a 	beq.w	8006a00 <_dtoa_r+0x468>
 80068cc:	9b00      	ldr	r3, [sp, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	dd32      	ble.n	8006938 <_dtoa_r+0x3a0>
 80068d2:	4ab7      	ldr	r2, [pc, #732]	; (8006bb0 <_dtoa_r+0x618>)
 80068d4:	f003 030f 	and.w	r3, r3, #15
 80068d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80068dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068e0:	9b00      	ldr	r3, [sp, #0]
 80068e2:	05d8      	lsls	r0, r3, #23
 80068e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80068e8:	d516      	bpl.n	8006918 <_dtoa_r+0x380>
 80068ea:	4bb2      	ldr	r3, [pc, #712]	; (8006bb4 <_dtoa_r+0x61c>)
 80068ec:	ec51 0b19 	vmov	r0, r1, d9
 80068f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068f4:	f7f9 ffca 	bl	800088c <__aeabi_ddiv>
 80068f8:	f007 070f 	and.w	r7, r7, #15
 80068fc:	4682      	mov	sl, r0
 80068fe:	468b      	mov	fp, r1
 8006900:	2503      	movs	r5, #3
 8006902:	4eac      	ldr	r6, [pc, #688]	; (8006bb4 <_dtoa_r+0x61c>)
 8006904:	b957      	cbnz	r7, 800691c <_dtoa_r+0x384>
 8006906:	4642      	mov	r2, r8
 8006908:	464b      	mov	r3, r9
 800690a:	4650      	mov	r0, sl
 800690c:	4659      	mov	r1, fp
 800690e:	f7f9 ffbd 	bl	800088c <__aeabi_ddiv>
 8006912:	4682      	mov	sl, r0
 8006914:	468b      	mov	fp, r1
 8006916:	e028      	b.n	800696a <_dtoa_r+0x3d2>
 8006918:	2502      	movs	r5, #2
 800691a:	e7f2      	b.n	8006902 <_dtoa_r+0x36a>
 800691c:	07f9      	lsls	r1, r7, #31
 800691e:	d508      	bpl.n	8006932 <_dtoa_r+0x39a>
 8006920:	4640      	mov	r0, r8
 8006922:	4649      	mov	r1, r9
 8006924:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006928:	f7f9 fe86 	bl	8000638 <__aeabi_dmul>
 800692c:	3501      	adds	r5, #1
 800692e:	4680      	mov	r8, r0
 8006930:	4689      	mov	r9, r1
 8006932:	107f      	asrs	r7, r7, #1
 8006934:	3608      	adds	r6, #8
 8006936:	e7e5      	b.n	8006904 <_dtoa_r+0x36c>
 8006938:	f000 809b 	beq.w	8006a72 <_dtoa_r+0x4da>
 800693c:	9b00      	ldr	r3, [sp, #0]
 800693e:	4f9d      	ldr	r7, [pc, #628]	; (8006bb4 <_dtoa_r+0x61c>)
 8006940:	425e      	negs	r6, r3
 8006942:	4b9b      	ldr	r3, [pc, #620]	; (8006bb0 <_dtoa_r+0x618>)
 8006944:	f006 020f 	and.w	r2, r6, #15
 8006948:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800694c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006950:	ec51 0b19 	vmov	r0, r1, d9
 8006954:	f7f9 fe70 	bl	8000638 <__aeabi_dmul>
 8006958:	1136      	asrs	r6, r6, #4
 800695a:	4682      	mov	sl, r0
 800695c:	468b      	mov	fp, r1
 800695e:	2300      	movs	r3, #0
 8006960:	2502      	movs	r5, #2
 8006962:	2e00      	cmp	r6, #0
 8006964:	d17a      	bne.n	8006a5c <_dtoa_r+0x4c4>
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1d3      	bne.n	8006912 <_dtoa_r+0x37a>
 800696a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 8082 	beq.w	8006a76 <_dtoa_r+0x4de>
 8006972:	4b91      	ldr	r3, [pc, #580]	; (8006bb8 <_dtoa_r+0x620>)
 8006974:	2200      	movs	r2, #0
 8006976:	4650      	mov	r0, sl
 8006978:	4659      	mov	r1, fp
 800697a:	f7fa f8cf 	bl	8000b1c <__aeabi_dcmplt>
 800697e:	2800      	cmp	r0, #0
 8006980:	d079      	beq.n	8006a76 <_dtoa_r+0x4de>
 8006982:	9b03      	ldr	r3, [sp, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d076      	beq.n	8006a76 <_dtoa_r+0x4de>
 8006988:	9b02      	ldr	r3, [sp, #8]
 800698a:	2b00      	cmp	r3, #0
 800698c:	dd36      	ble.n	80069fc <_dtoa_r+0x464>
 800698e:	9b00      	ldr	r3, [sp, #0]
 8006990:	4650      	mov	r0, sl
 8006992:	4659      	mov	r1, fp
 8006994:	1e5f      	subs	r7, r3, #1
 8006996:	2200      	movs	r2, #0
 8006998:	4b88      	ldr	r3, [pc, #544]	; (8006bbc <_dtoa_r+0x624>)
 800699a:	f7f9 fe4d 	bl	8000638 <__aeabi_dmul>
 800699e:	9e02      	ldr	r6, [sp, #8]
 80069a0:	4682      	mov	sl, r0
 80069a2:	468b      	mov	fp, r1
 80069a4:	3501      	adds	r5, #1
 80069a6:	4628      	mov	r0, r5
 80069a8:	f7f9 fddc 	bl	8000564 <__aeabi_i2d>
 80069ac:	4652      	mov	r2, sl
 80069ae:	465b      	mov	r3, fp
 80069b0:	f7f9 fe42 	bl	8000638 <__aeabi_dmul>
 80069b4:	4b82      	ldr	r3, [pc, #520]	; (8006bc0 <_dtoa_r+0x628>)
 80069b6:	2200      	movs	r2, #0
 80069b8:	f7f9 fc88 	bl	80002cc <__adddf3>
 80069bc:	46d0      	mov	r8, sl
 80069be:	46d9      	mov	r9, fp
 80069c0:	4682      	mov	sl, r0
 80069c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80069c6:	2e00      	cmp	r6, #0
 80069c8:	d158      	bne.n	8006a7c <_dtoa_r+0x4e4>
 80069ca:	4b7e      	ldr	r3, [pc, #504]	; (8006bc4 <_dtoa_r+0x62c>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	4640      	mov	r0, r8
 80069d0:	4649      	mov	r1, r9
 80069d2:	f7f9 fc79 	bl	80002c8 <__aeabi_dsub>
 80069d6:	4652      	mov	r2, sl
 80069d8:	465b      	mov	r3, fp
 80069da:	4680      	mov	r8, r0
 80069dc:	4689      	mov	r9, r1
 80069de:	f7fa f8bb 	bl	8000b58 <__aeabi_dcmpgt>
 80069e2:	2800      	cmp	r0, #0
 80069e4:	f040 8295 	bne.w	8006f12 <_dtoa_r+0x97a>
 80069e8:	4652      	mov	r2, sl
 80069ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80069ee:	4640      	mov	r0, r8
 80069f0:	4649      	mov	r1, r9
 80069f2:	f7fa f893 	bl	8000b1c <__aeabi_dcmplt>
 80069f6:	2800      	cmp	r0, #0
 80069f8:	f040 8289 	bne.w	8006f0e <_dtoa_r+0x976>
 80069fc:	ec5b ab19 	vmov	sl, fp, d9
 8006a00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f2c0 8148 	blt.w	8006c98 <_dtoa_r+0x700>
 8006a08:	9a00      	ldr	r2, [sp, #0]
 8006a0a:	2a0e      	cmp	r2, #14
 8006a0c:	f300 8144 	bgt.w	8006c98 <_dtoa_r+0x700>
 8006a10:	4b67      	ldr	r3, [pc, #412]	; (8006bb0 <_dtoa_r+0x618>)
 8006a12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a16:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f280 80d5 	bge.w	8006bcc <_dtoa_r+0x634>
 8006a22:	9b03      	ldr	r3, [sp, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f300 80d1 	bgt.w	8006bcc <_dtoa_r+0x634>
 8006a2a:	f040 826f 	bne.w	8006f0c <_dtoa_r+0x974>
 8006a2e:	4b65      	ldr	r3, [pc, #404]	; (8006bc4 <_dtoa_r+0x62c>)
 8006a30:	2200      	movs	r2, #0
 8006a32:	4640      	mov	r0, r8
 8006a34:	4649      	mov	r1, r9
 8006a36:	f7f9 fdff 	bl	8000638 <__aeabi_dmul>
 8006a3a:	4652      	mov	r2, sl
 8006a3c:	465b      	mov	r3, fp
 8006a3e:	f7fa f881 	bl	8000b44 <__aeabi_dcmpge>
 8006a42:	9e03      	ldr	r6, [sp, #12]
 8006a44:	4637      	mov	r7, r6
 8006a46:	2800      	cmp	r0, #0
 8006a48:	f040 8245 	bne.w	8006ed6 <_dtoa_r+0x93e>
 8006a4c:	9d01      	ldr	r5, [sp, #4]
 8006a4e:	2331      	movs	r3, #49	; 0x31
 8006a50:	f805 3b01 	strb.w	r3, [r5], #1
 8006a54:	9b00      	ldr	r3, [sp, #0]
 8006a56:	3301      	adds	r3, #1
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	e240      	b.n	8006ede <_dtoa_r+0x946>
 8006a5c:	07f2      	lsls	r2, r6, #31
 8006a5e:	d505      	bpl.n	8006a6c <_dtoa_r+0x4d4>
 8006a60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a64:	f7f9 fde8 	bl	8000638 <__aeabi_dmul>
 8006a68:	3501      	adds	r5, #1
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	1076      	asrs	r6, r6, #1
 8006a6e:	3708      	adds	r7, #8
 8006a70:	e777      	b.n	8006962 <_dtoa_r+0x3ca>
 8006a72:	2502      	movs	r5, #2
 8006a74:	e779      	b.n	800696a <_dtoa_r+0x3d2>
 8006a76:	9f00      	ldr	r7, [sp, #0]
 8006a78:	9e03      	ldr	r6, [sp, #12]
 8006a7a:	e794      	b.n	80069a6 <_dtoa_r+0x40e>
 8006a7c:	9901      	ldr	r1, [sp, #4]
 8006a7e:	4b4c      	ldr	r3, [pc, #304]	; (8006bb0 <_dtoa_r+0x618>)
 8006a80:	4431      	add	r1, r6
 8006a82:	910d      	str	r1, [sp, #52]	; 0x34
 8006a84:	9908      	ldr	r1, [sp, #32]
 8006a86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006a8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a8e:	2900      	cmp	r1, #0
 8006a90:	d043      	beq.n	8006b1a <_dtoa_r+0x582>
 8006a92:	494d      	ldr	r1, [pc, #308]	; (8006bc8 <_dtoa_r+0x630>)
 8006a94:	2000      	movs	r0, #0
 8006a96:	f7f9 fef9 	bl	800088c <__aeabi_ddiv>
 8006a9a:	4652      	mov	r2, sl
 8006a9c:	465b      	mov	r3, fp
 8006a9e:	f7f9 fc13 	bl	80002c8 <__aeabi_dsub>
 8006aa2:	9d01      	ldr	r5, [sp, #4]
 8006aa4:	4682      	mov	sl, r0
 8006aa6:	468b      	mov	fp, r1
 8006aa8:	4649      	mov	r1, r9
 8006aaa:	4640      	mov	r0, r8
 8006aac:	f7fa f874 	bl	8000b98 <__aeabi_d2iz>
 8006ab0:	4606      	mov	r6, r0
 8006ab2:	f7f9 fd57 	bl	8000564 <__aeabi_i2d>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	4640      	mov	r0, r8
 8006abc:	4649      	mov	r1, r9
 8006abe:	f7f9 fc03 	bl	80002c8 <__aeabi_dsub>
 8006ac2:	3630      	adds	r6, #48	; 0x30
 8006ac4:	f805 6b01 	strb.w	r6, [r5], #1
 8006ac8:	4652      	mov	r2, sl
 8006aca:	465b      	mov	r3, fp
 8006acc:	4680      	mov	r8, r0
 8006ace:	4689      	mov	r9, r1
 8006ad0:	f7fa f824 	bl	8000b1c <__aeabi_dcmplt>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	d163      	bne.n	8006ba0 <_dtoa_r+0x608>
 8006ad8:	4642      	mov	r2, r8
 8006ada:	464b      	mov	r3, r9
 8006adc:	4936      	ldr	r1, [pc, #216]	; (8006bb8 <_dtoa_r+0x620>)
 8006ade:	2000      	movs	r0, #0
 8006ae0:	f7f9 fbf2 	bl	80002c8 <__aeabi_dsub>
 8006ae4:	4652      	mov	r2, sl
 8006ae6:	465b      	mov	r3, fp
 8006ae8:	f7fa f818 	bl	8000b1c <__aeabi_dcmplt>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	f040 80b5 	bne.w	8006c5c <_dtoa_r+0x6c4>
 8006af2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006af4:	429d      	cmp	r5, r3
 8006af6:	d081      	beq.n	80069fc <_dtoa_r+0x464>
 8006af8:	4b30      	ldr	r3, [pc, #192]	; (8006bbc <_dtoa_r+0x624>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	4650      	mov	r0, sl
 8006afe:	4659      	mov	r1, fp
 8006b00:	f7f9 fd9a 	bl	8000638 <__aeabi_dmul>
 8006b04:	4b2d      	ldr	r3, [pc, #180]	; (8006bbc <_dtoa_r+0x624>)
 8006b06:	4682      	mov	sl, r0
 8006b08:	468b      	mov	fp, r1
 8006b0a:	4640      	mov	r0, r8
 8006b0c:	4649      	mov	r1, r9
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f7f9 fd92 	bl	8000638 <__aeabi_dmul>
 8006b14:	4680      	mov	r8, r0
 8006b16:	4689      	mov	r9, r1
 8006b18:	e7c6      	b.n	8006aa8 <_dtoa_r+0x510>
 8006b1a:	4650      	mov	r0, sl
 8006b1c:	4659      	mov	r1, fp
 8006b1e:	f7f9 fd8b 	bl	8000638 <__aeabi_dmul>
 8006b22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b24:	9d01      	ldr	r5, [sp, #4]
 8006b26:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b28:	4682      	mov	sl, r0
 8006b2a:	468b      	mov	fp, r1
 8006b2c:	4649      	mov	r1, r9
 8006b2e:	4640      	mov	r0, r8
 8006b30:	f7fa f832 	bl	8000b98 <__aeabi_d2iz>
 8006b34:	4606      	mov	r6, r0
 8006b36:	f7f9 fd15 	bl	8000564 <__aeabi_i2d>
 8006b3a:	3630      	adds	r6, #48	; 0x30
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4640      	mov	r0, r8
 8006b42:	4649      	mov	r1, r9
 8006b44:	f7f9 fbc0 	bl	80002c8 <__aeabi_dsub>
 8006b48:	f805 6b01 	strb.w	r6, [r5], #1
 8006b4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b4e:	429d      	cmp	r5, r3
 8006b50:	4680      	mov	r8, r0
 8006b52:	4689      	mov	r9, r1
 8006b54:	f04f 0200 	mov.w	r2, #0
 8006b58:	d124      	bne.n	8006ba4 <_dtoa_r+0x60c>
 8006b5a:	4b1b      	ldr	r3, [pc, #108]	; (8006bc8 <_dtoa_r+0x630>)
 8006b5c:	4650      	mov	r0, sl
 8006b5e:	4659      	mov	r1, fp
 8006b60:	f7f9 fbb4 	bl	80002cc <__adddf3>
 8006b64:	4602      	mov	r2, r0
 8006b66:	460b      	mov	r3, r1
 8006b68:	4640      	mov	r0, r8
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	f7f9 fff4 	bl	8000b58 <__aeabi_dcmpgt>
 8006b70:	2800      	cmp	r0, #0
 8006b72:	d173      	bne.n	8006c5c <_dtoa_r+0x6c4>
 8006b74:	4652      	mov	r2, sl
 8006b76:	465b      	mov	r3, fp
 8006b78:	4913      	ldr	r1, [pc, #76]	; (8006bc8 <_dtoa_r+0x630>)
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	f7f9 fba4 	bl	80002c8 <__aeabi_dsub>
 8006b80:	4602      	mov	r2, r0
 8006b82:	460b      	mov	r3, r1
 8006b84:	4640      	mov	r0, r8
 8006b86:	4649      	mov	r1, r9
 8006b88:	f7f9 ffc8 	bl	8000b1c <__aeabi_dcmplt>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	f43f af35 	beq.w	80069fc <_dtoa_r+0x464>
 8006b92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006b94:	1e6b      	subs	r3, r5, #1
 8006b96:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b98:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b9c:	2b30      	cmp	r3, #48	; 0x30
 8006b9e:	d0f8      	beq.n	8006b92 <_dtoa_r+0x5fa>
 8006ba0:	9700      	str	r7, [sp, #0]
 8006ba2:	e049      	b.n	8006c38 <_dtoa_r+0x6a0>
 8006ba4:	4b05      	ldr	r3, [pc, #20]	; (8006bbc <_dtoa_r+0x624>)
 8006ba6:	f7f9 fd47 	bl	8000638 <__aeabi_dmul>
 8006baa:	4680      	mov	r8, r0
 8006bac:	4689      	mov	r9, r1
 8006bae:	e7bd      	b.n	8006b2c <_dtoa_r+0x594>
 8006bb0:	08008b10 	.word	0x08008b10
 8006bb4:	08008ae8 	.word	0x08008ae8
 8006bb8:	3ff00000 	.word	0x3ff00000
 8006bbc:	40240000 	.word	0x40240000
 8006bc0:	401c0000 	.word	0x401c0000
 8006bc4:	40140000 	.word	0x40140000
 8006bc8:	3fe00000 	.word	0x3fe00000
 8006bcc:	9d01      	ldr	r5, [sp, #4]
 8006bce:	4656      	mov	r6, sl
 8006bd0:	465f      	mov	r7, fp
 8006bd2:	4642      	mov	r2, r8
 8006bd4:	464b      	mov	r3, r9
 8006bd6:	4630      	mov	r0, r6
 8006bd8:	4639      	mov	r1, r7
 8006bda:	f7f9 fe57 	bl	800088c <__aeabi_ddiv>
 8006bde:	f7f9 ffdb 	bl	8000b98 <__aeabi_d2iz>
 8006be2:	4682      	mov	sl, r0
 8006be4:	f7f9 fcbe 	bl	8000564 <__aeabi_i2d>
 8006be8:	4642      	mov	r2, r8
 8006bea:	464b      	mov	r3, r9
 8006bec:	f7f9 fd24 	bl	8000638 <__aeabi_dmul>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	4630      	mov	r0, r6
 8006bf6:	4639      	mov	r1, r7
 8006bf8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006bfc:	f7f9 fb64 	bl	80002c8 <__aeabi_dsub>
 8006c00:	f805 6b01 	strb.w	r6, [r5], #1
 8006c04:	9e01      	ldr	r6, [sp, #4]
 8006c06:	9f03      	ldr	r7, [sp, #12]
 8006c08:	1bae      	subs	r6, r5, r6
 8006c0a:	42b7      	cmp	r7, r6
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	d135      	bne.n	8006c7e <_dtoa_r+0x6e6>
 8006c12:	f7f9 fb5b 	bl	80002cc <__adddf3>
 8006c16:	4642      	mov	r2, r8
 8006c18:	464b      	mov	r3, r9
 8006c1a:	4606      	mov	r6, r0
 8006c1c:	460f      	mov	r7, r1
 8006c1e:	f7f9 ff9b 	bl	8000b58 <__aeabi_dcmpgt>
 8006c22:	b9d0      	cbnz	r0, 8006c5a <_dtoa_r+0x6c2>
 8006c24:	4642      	mov	r2, r8
 8006c26:	464b      	mov	r3, r9
 8006c28:	4630      	mov	r0, r6
 8006c2a:	4639      	mov	r1, r7
 8006c2c:	f7f9 ff6c 	bl	8000b08 <__aeabi_dcmpeq>
 8006c30:	b110      	cbz	r0, 8006c38 <_dtoa_r+0x6a0>
 8006c32:	f01a 0f01 	tst.w	sl, #1
 8006c36:	d110      	bne.n	8006c5a <_dtoa_r+0x6c2>
 8006c38:	4620      	mov	r0, r4
 8006c3a:	ee18 1a10 	vmov	r1, s16
 8006c3e:	f000 fae5 	bl	800720c <_Bfree>
 8006c42:	2300      	movs	r3, #0
 8006c44:	9800      	ldr	r0, [sp, #0]
 8006c46:	702b      	strb	r3, [r5, #0]
 8006c48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c4a:	3001      	adds	r0, #1
 8006c4c:	6018      	str	r0, [r3, #0]
 8006c4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f43f acf1 	beq.w	8006638 <_dtoa_r+0xa0>
 8006c56:	601d      	str	r5, [r3, #0]
 8006c58:	e4ee      	b.n	8006638 <_dtoa_r+0xa0>
 8006c5a:	9f00      	ldr	r7, [sp, #0]
 8006c5c:	462b      	mov	r3, r5
 8006c5e:	461d      	mov	r5, r3
 8006c60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c64:	2a39      	cmp	r2, #57	; 0x39
 8006c66:	d106      	bne.n	8006c76 <_dtoa_r+0x6de>
 8006c68:	9a01      	ldr	r2, [sp, #4]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d1f7      	bne.n	8006c5e <_dtoa_r+0x6c6>
 8006c6e:	9901      	ldr	r1, [sp, #4]
 8006c70:	2230      	movs	r2, #48	; 0x30
 8006c72:	3701      	adds	r7, #1
 8006c74:	700a      	strb	r2, [r1, #0]
 8006c76:	781a      	ldrb	r2, [r3, #0]
 8006c78:	3201      	adds	r2, #1
 8006c7a:	701a      	strb	r2, [r3, #0]
 8006c7c:	e790      	b.n	8006ba0 <_dtoa_r+0x608>
 8006c7e:	4ba6      	ldr	r3, [pc, #664]	; (8006f18 <_dtoa_r+0x980>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	f7f9 fcd9 	bl	8000638 <__aeabi_dmul>
 8006c86:	2200      	movs	r2, #0
 8006c88:	2300      	movs	r3, #0
 8006c8a:	4606      	mov	r6, r0
 8006c8c:	460f      	mov	r7, r1
 8006c8e:	f7f9 ff3b 	bl	8000b08 <__aeabi_dcmpeq>
 8006c92:	2800      	cmp	r0, #0
 8006c94:	d09d      	beq.n	8006bd2 <_dtoa_r+0x63a>
 8006c96:	e7cf      	b.n	8006c38 <_dtoa_r+0x6a0>
 8006c98:	9a08      	ldr	r2, [sp, #32]
 8006c9a:	2a00      	cmp	r2, #0
 8006c9c:	f000 80d7 	beq.w	8006e4e <_dtoa_r+0x8b6>
 8006ca0:	9a06      	ldr	r2, [sp, #24]
 8006ca2:	2a01      	cmp	r2, #1
 8006ca4:	f300 80ba 	bgt.w	8006e1c <_dtoa_r+0x884>
 8006ca8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006caa:	2a00      	cmp	r2, #0
 8006cac:	f000 80b2 	beq.w	8006e14 <_dtoa_r+0x87c>
 8006cb0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006cb4:	9e07      	ldr	r6, [sp, #28]
 8006cb6:	9d04      	ldr	r5, [sp, #16]
 8006cb8:	9a04      	ldr	r2, [sp, #16]
 8006cba:	441a      	add	r2, r3
 8006cbc:	9204      	str	r2, [sp, #16]
 8006cbe:	9a05      	ldr	r2, [sp, #20]
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	441a      	add	r2, r3
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	9205      	str	r2, [sp, #20]
 8006cc8:	f000 fb58 	bl	800737c <__i2b>
 8006ccc:	4607      	mov	r7, r0
 8006cce:	2d00      	cmp	r5, #0
 8006cd0:	dd0c      	ble.n	8006cec <_dtoa_r+0x754>
 8006cd2:	9b05      	ldr	r3, [sp, #20]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	dd09      	ble.n	8006cec <_dtoa_r+0x754>
 8006cd8:	42ab      	cmp	r3, r5
 8006cda:	9a04      	ldr	r2, [sp, #16]
 8006cdc:	bfa8      	it	ge
 8006cde:	462b      	movge	r3, r5
 8006ce0:	1ad2      	subs	r2, r2, r3
 8006ce2:	9204      	str	r2, [sp, #16]
 8006ce4:	9a05      	ldr	r2, [sp, #20]
 8006ce6:	1aed      	subs	r5, r5, r3
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	9305      	str	r3, [sp, #20]
 8006cec:	9b07      	ldr	r3, [sp, #28]
 8006cee:	b31b      	cbz	r3, 8006d38 <_dtoa_r+0x7a0>
 8006cf0:	9b08      	ldr	r3, [sp, #32]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 80af 	beq.w	8006e56 <_dtoa_r+0x8be>
 8006cf8:	2e00      	cmp	r6, #0
 8006cfa:	dd13      	ble.n	8006d24 <_dtoa_r+0x78c>
 8006cfc:	4639      	mov	r1, r7
 8006cfe:	4632      	mov	r2, r6
 8006d00:	4620      	mov	r0, r4
 8006d02:	f000 fbfb 	bl	80074fc <__pow5mult>
 8006d06:	ee18 2a10 	vmov	r2, s16
 8006d0a:	4601      	mov	r1, r0
 8006d0c:	4607      	mov	r7, r0
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f000 fb4a 	bl	80073a8 <__multiply>
 8006d14:	ee18 1a10 	vmov	r1, s16
 8006d18:	4680      	mov	r8, r0
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	f000 fa76 	bl	800720c <_Bfree>
 8006d20:	ee08 8a10 	vmov	s16, r8
 8006d24:	9b07      	ldr	r3, [sp, #28]
 8006d26:	1b9a      	subs	r2, r3, r6
 8006d28:	d006      	beq.n	8006d38 <_dtoa_r+0x7a0>
 8006d2a:	ee18 1a10 	vmov	r1, s16
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f000 fbe4 	bl	80074fc <__pow5mult>
 8006d34:	ee08 0a10 	vmov	s16, r0
 8006d38:	2101      	movs	r1, #1
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f000 fb1e 	bl	800737c <__i2b>
 8006d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	4606      	mov	r6, r0
 8006d46:	f340 8088 	ble.w	8006e5a <_dtoa_r+0x8c2>
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	4601      	mov	r1, r0
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f000 fbd4 	bl	80074fc <__pow5mult>
 8006d54:	9b06      	ldr	r3, [sp, #24]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	4606      	mov	r6, r0
 8006d5a:	f340 8081 	ble.w	8006e60 <_dtoa_r+0x8c8>
 8006d5e:	f04f 0800 	mov.w	r8, #0
 8006d62:	6933      	ldr	r3, [r6, #16]
 8006d64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006d68:	6918      	ldr	r0, [r3, #16]
 8006d6a:	f000 fab7 	bl	80072dc <__hi0bits>
 8006d6e:	f1c0 0020 	rsb	r0, r0, #32
 8006d72:	9b05      	ldr	r3, [sp, #20]
 8006d74:	4418      	add	r0, r3
 8006d76:	f010 001f 	ands.w	r0, r0, #31
 8006d7a:	f000 8092 	beq.w	8006ea2 <_dtoa_r+0x90a>
 8006d7e:	f1c0 0320 	rsb	r3, r0, #32
 8006d82:	2b04      	cmp	r3, #4
 8006d84:	f340 808a 	ble.w	8006e9c <_dtoa_r+0x904>
 8006d88:	f1c0 001c 	rsb	r0, r0, #28
 8006d8c:	9b04      	ldr	r3, [sp, #16]
 8006d8e:	4403      	add	r3, r0
 8006d90:	9304      	str	r3, [sp, #16]
 8006d92:	9b05      	ldr	r3, [sp, #20]
 8006d94:	4403      	add	r3, r0
 8006d96:	4405      	add	r5, r0
 8006d98:	9305      	str	r3, [sp, #20]
 8006d9a:	9b04      	ldr	r3, [sp, #16]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	dd07      	ble.n	8006db0 <_dtoa_r+0x818>
 8006da0:	ee18 1a10 	vmov	r1, s16
 8006da4:	461a      	mov	r2, r3
 8006da6:	4620      	mov	r0, r4
 8006da8:	f000 fc02 	bl	80075b0 <__lshift>
 8006dac:	ee08 0a10 	vmov	s16, r0
 8006db0:	9b05      	ldr	r3, [sp, #20]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	dd05      	ble.n	8006dc2 <_dtoa_r+0x82a>
 8006db6:	4631      	mov	r1, r6
 8006db8:	461a      	mov	r2, r3
 8006dba:	4620      	mov	r0, r4
 8006dbc:	f000 fbf8 	bl	80075b0 <__lshift>
 8006dc0:	4606      	mov	r6, r0
 8006dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d06e      	beq.n	8006ea6 <_dtoa_r+0x90e>
 8006dc8:	ee18 0a10 	vmov	r0, s16
 8006dcc:	4631      	mov	r1, r6
 8006dce:	f000 fc5f 	bl	8007690 <__mcmp>
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	da67      	bge.n	8006ea6 <_dtoa_r+0x90e>
 8006dd6:	9b00      	ldr	r3, [sp, #0]
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	ee18 1a10 	vmov	r1, s16
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	220a      	movs	r2, #10
 8006de2:	2300      	movs	r3, #0
 8006de4:	4620      	mov	r0, r4
 8006de6:	f000 fa33 	bl	8007250 <__multadd>
 8006dea:	9b08      	ldr	r3, [sp, #32]
 8006dec:	ee08 0a10 	vmov	s16, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 81b1 	beq.w	8007158 <_dtoa_r+0xbc0>
 8006df6:	2300      	movs	r3, #0
 8006df8:	4639      	mov	r1, r7
 8006dfa:	220a      	movs	r2, #10
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f000 fa27 	bl	8007250 <__multadd>
 8006e02:	9b02      	ldr	r3, [sp, #8]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	4607      	mov	r7, r0
 8006e08:	f300 808e 	bgt.w	8006f28 <_dtoa_r+0x990>
 8006e0c:	9b06      	ldr	r3, [sp, #24]
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	dc51      	bgt.n	8006eb6 <_dtoa_r+0x91e>
 8006e12:	e089      	b.n	8006f28 <_dtoa_r+0x990>
 8006e14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e1a:	e74b      	b.n	8006cb4 <_dtoa_r+0x71c>
 8006e1c:	9b03      	ldr	r3, [sp, #12]
 8006e1e:	1e5e      	subs	r6, r3, #1
 8006e20:	9b07      	ldr	r3, [sp, #28]
 8006e22:	42b3      	cmp	r3, r6
 8006e24:	bfbf      	itttt	lt
 8006e26:	9b07      	ldrlt	r3, [sp, #28]
 8006e28:	9607      	strlt	r6, [sp, #28]
 8006e2a:	1af2      	sublt	r2, r6, r3
 8006e2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006e2e:	bfb6      	itet	lt
 8006e30:	189b      	addlt	r3, r3, r2
 8006e32:	1b9e      	subge	r6, r3, r6
 8006e34:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006e36:	9b03      	ldr	r3, [sp, #12]
 8006e38:	bfb8      	it	lt
 8006e3a:	2600      	movlt	r6, #0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	bfb7      	itett	lt
 8006e40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006e44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006e48:	1a9d      	sublt	r5, r3, r2
 8006e4a:	2300      	movlt	r3, #0
 8006e4c:	e734      	b.n	8006cb8 <_dtoa_r+0x720>
 8006e4e:	9e07      	ldr	r6, [sp, #28]
 8006e50:	9d04      	ldr	r5, [sp, #16]
 8006e52:	9f08      	ldr	r7, [sp, #32]
 8006e54:	e73b      	b.n	8006cce <_dtoa_r+0x736>
 8006e56:	9a07      	ldr	r2, [sp, #28]
 8006e58:	e767      	b.n	8006d2a <_dtoa_r+0x792>
 8006e5a:	9b06      	ldr	r3, [sp, #24]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	dc18      	bgt.n	8006e92 <_dtoa_r+0x8fa>
 8006e60:	f1ba 0f00 	cmp.w	sl, #0
 8006e64:	d115      	bne.n	8006e92 <_dtoa_r+0x8fa>
 8006e66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e6a:	b993      	cbnz	r3, 8006e92 <_dtoa_r+0x8fa>
 8006e6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006e70:	0d1b      	lsrs	r3, r3, #20
 8006e72:	051b      	lsls	r3, r3, #20
 8006e74:	b183      	cbz	r3, 8006e98 <_dtoa_r+0x900>
 8006e76:	9b04      	ldr	r3, [sp, #16]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	9304      	str	r3, [sp, #16]
 8006e7c:	9b05      	ldr	r3, [sp, #20]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	9305      	str	r3, [sp, #20]
 8006e82:	f04f 0801 	mov.w	r8, #1
 8006e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f47f af6a 	bne.w	8006d62 <_dtoa_r+0x7ca>
 8006e8e:	2001      	movs	r0, #1
 8006e90:	e76f      	b.n	8006d72 <_dtoa_r+0x7da>
 8006e92:	f04f 0800 	mov.w	r8, #0
 8006e96:	e7f6      	b.n	8006e86 <_dtoa_r+0x8ee>
 8006e98:	4698      	mov	r8, r3
 8006e9a:	e7f4      	b.n	8006e86 <_dtoa_r+0x8ee>
 8006e9c:	f43f af7d 	beq.w	8006d9a <_dtoa_r+0x802>
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	301c      	adds	r0, #28
 8006ea4:	e772      	b.n	8006d8c <_dtoa_r+0x7f4>
 8006ea6:	9b03      	ldr	r3, [sp, #12]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	dc37      	bgt.n	8006f1c <_dtoa_r+0x984>
 8006eac:	9b06      	ldr	r3, [sp, #24]
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	dd34      	ble.n	8006f1c <_dtoa_r+0x984>
 8006eb2:	9b03      	ldr	r3, [sp, #12]
 8006eb4:	9302      	str	r3, [sp, #8]
 8006eb6:	9b02      	ldr	r3, [sp, #8]
 8006eb8:	b96b      	cbnz	r3, 8006ed6 <_dtoa_r+0x93e>
 8006eba:	4631      	mov	r1, r6
 8006ebc:	2205      	movs	r2, #5
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f000 f9c6 	bl	8007250 <__multadd>
 8006ec4:	4601      	mov	r1, r0
 8006ec6:	4606      	mov	r6, r0
 8006ec8:	ee18 0a10 	vmov	r0, s16
 8006ecc:	f000 fbe0 	bl	8007690 <__mcmp>
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	f73f adbb 	bgt.w	8006a4c <_dtoa_r+0x4b4>
 8006ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ed8:	9d01      	ldr	r5, [sp, #4]
 8006eda:	43db      	mvns	r3, r3
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	f04f 0800 	mov.w	r8, #0
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	f000 f991 	bl	800720c <_Bfree>
 8006eea:	2f00      	cmp	r7, #0
 8006eec:	f43f aea4 	beq.w	8006c38 <_dtoa_r+0x6a0>
 8006ef0:	f1b8 0f00 	cmp.w	r8, #0
 8006ef4:	d005      	beq.n	8006f02 <_dtoa_r+0x96a>
 8006ef6:	45b8      	cmp	r8, r7
 8006ef8:	d003      	beq.n	8006f02 <_dtoa_r+0x96a>
 8006efa:	4641      	mov	r1, r8
 8006efc:	4620      	mov	r0, r4
 8006efe:	f000 f985 	bl	800720c <_Bfree>
 8006f02:	4639      	mov	r1, r7
 8006f04:	4620      	mov	r0, r4
 8006f06:	f000 f981 	bl	800720c <_Bfree>
 8006f0a:	e695      	b.n	8006c38 <_dtoa_r+0x6a0>
 8006f0c:	2600      	movs	r6, #0
 8006f0e:	4637      	mov	r7, r6
 8006f10:	e7e1      	b.n	8006ed6 <_dtoa_r+0x93e>
 8006f12:	9700      	str	r7, [sp, #0]
 8006f14:	4637      	mov	r7, r6
 8006f16:	e599      	b.n	8006a4c <_dtoa_r+0x4b4>
 8006f18:	40240000 	.word	0x40240000
 8006f1c:	9b08      	ldr	r3, [sp, #32]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f000 80ca 	beq.w	80070b8 <_dtoa_r+0xb20>
 8006f24:	9b03      	ldr	r3, [sp, #12]
 8006f26:	9302      	str	r3, [sp, #8]
 8006f28:	2d00      	cmp	r5, #0
 8006f2a:	dd05      	ble.n	8006f38 <_dtoa_r+0x9a0>
 8006f2c:	4639      	mov	r1, r7
 8006f2e:	462a      	mov	r2, r5
 8006f30:	4620      	mov	r0, r4
 8006f32:	f000 fb3d 	bl	80075b0 <__lshift>
 8006f36:	4607      	mov	r7, r0
 8006f38:	f1b8 0f00 	cmp.w	r8, #0
 8006f3c:	d05b      	beq.n	8006ff6 <_dtoa_r+0xa5e>
 8006f3e:	6879      	ldr	r1, [r7, #4]
 8006f40:	4620      	mov	r0, r4
 8006f42:	f000 f923 	bl	800718c <_Balloc>
 8006f46:	4605      	mov	r5, r0
 8006f48:	b928      	cbnz	r0, 8006f56 <_dtoa_r+0x9be>
 8006f4a:	4b87      	ldr	r3, [pc, #540]	; (8007168 <_dtoa_r+0xbd0>)
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006f52:	f7ff bb3b 	b.w	80065cc <_dtoa_r+0x34>
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	3202      	adds	r2, #2
 8006f5a:	0092      	lsls	r2, r2, #2
 8006f5c:	f107 010c 	add.w	r1, r7, #12
 8006f60:	300c      	adds	r0, #12
 8006f62:	f7fe fdeb 	bl	8005b3c <memcpy>
 8006f66:	2201      	movs	r2, #1
 8006f68:	4629      	mov	r1, r5
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f000 fb20 	bl	80075b0 <__lshift>
 8006f70:	9b01      	ldr	r3, [sp, #4]
 8006f72:	f103 0901 	add.w	r9, r3, #1
 8006f76:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	9305      	str	r3, [sp, #20]
 8006f7e:	f00a 0301 	and.w	r3, sl, #1
 8006f82:	46b8      	mov	r8, r7
 8006f84:	9304      	str	r3, [sp, #16]
 8006f86:	4607      	mov	r7, r0
 8006f88:	4631      	mov	r1, r6
 8006f8a:	ee18 0a10 	vmov	r0, s16
 8006f8e:	f7ff fa75 	bl	800647c <quorem>
 8006f92:	4641      	mov	r1, r8
 8006f94:	9002      	str	r0, [sp, #8]
 8006f96:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006f9a:	ee18 0a10 	vmov	r0, s16
 8006f9e:	f000 fb77 	bl	8007690 <__mcmp>
 8006fa2:	463a      	mov	r2, r7
 8006fa4:	9003      	str	r0, [sp, #12]
 8006fa6:	4631      	mov	r1, r6
 8006fa8:	4620      	mov	r0, r4
 8006faa:	f000 fb8d 	bl	80076c8 <__mdiff>
 8006fae:	68c2      	ldr	r2, [r0, #12]
 8006fb0:	f109 3bff 	add.w	fp, r9, #4294967295
 8006fb4:	4605      	mov	r5, r0
 8006fb6:	bb02      	cbnz	r2, 8006ffa <_dtoa_r+0xa62>
 8006fb8:	4601      	mov	r1, r0
 8006fba:	ee18 0a10 	vmov	r0, s16
 8006fbe:	f000 fb67 	bl	8007690 <__mcmp>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	4629      	mov	r1, r5
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	9207      	str	r2, [sp, #28]
 8006fca:	f000 f91f 	bl	800720c <_Bfree>
 8006fce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006fd2:	ea43 0102 	orr.w	r1, r3, r2
 8006fd6:	9b04      	ldr	r3, [sp, #16]
 8006fd8:	430b      	orrs	r3, r1
 8006fda:	464d      	mov	r5, r9
 8006fdc:	d10f      	bne.n	8006ffe <_dtoa_r+0xa66>
 8006fde:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006fe2:	d02a      	beq.n	800703a <_dtoa_r+0xaa2>
 8006fe4:	9b03      	ldr	r3, [sp, #12]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	dd02      	ble.n	8006ff0 <_dtoa_r+0xa58>
 8006fea:	9b02      	ldr	r3, [sp, #8]
 8006fec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006ff0:	f88b a000 	strb.w	sl, [fp]
 8006ff4:	e775      	b.n	8006ee2 <_dtoa_r+0x94a>
 8006ff6:	4638      	mov	r0, r7
 8006ff8:	e7ba      	b.n	8006f70 <_dtoa_r+0x9d8>
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	e7e2      	b.n	8006fc4 <_dtoa_r+0xa2c>
 8006ffe:	9b03      	ldr	r3, [sp, #12]
 8007000:	2b00      	cmp	r3, #0
 8007002:	db04      	blt.n	800700e <_dtoa_r+0xa76>
 8007004:	9906      	ldr	r1, [sp, #24]
 8007006:	430b      	orrs	r3, r1
 8007008:	9904      	ldr	r1, [sp, #16]
 800700a:	430b      	orrs	r3, r1
 800700c:	d122      	bne.n	8007054 <_dtoa_r+0xabc>
 800700e:	2a00      	cmp	r2, #0
 8007010:	ddee      	ble.n	8006ff0 <_dtoa_r+0xa58>
 8007012:	ee18 1a10 	vmov	r1, s16
 8007016:	2201      	movs	r2, #1
 8007018:	4620      	mov	r0, r4
 800701a:	f000 fac9 	bl	80075b0 <__lshift>
 800701e:	4631      	mov	r1, r6
 8007020:	ee08 0a10 	vmov	s16, r0
 8007024:	f000 fb34 	bl	8007690 <__mcmp>
 8007028:	2800      	cmp	r0, #0
 800702a:	dc03      	bgt.n	8007034 <_dtoa_r+0xa9c>
 800702c:	d1e0      	bne.n	8006ff0 <_dtoa_r+0xa58>
 800702e:	f01a 0f01 	tst.w	sl, #1
 8007032:	d0dd      	beq.n	8006ff0 <_dtoa_r+0xa58>
 8007034:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007038:	d1d7      	bne.n	8006fea <_dtoa_r+0xa52>
 800703a:	2339      	movs	r3, #57	; 0x39
 800703c:	f88b 3000 	strb.w	r3, [fp]
 8007040:	462b      	mov	r3, r5
 8007042:	461d      	mov	r5, r3
 8007044:	3b01      	subs	r3, #1
 8007046:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800704a:	2a39      	cmp	r2, #57	; 0x39
 800704c:	d071      	beq.n	8007132 <_dtoa_r+0xb9a>
 800704e:	3201      	adds	r2, #1
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	e746      	b.n	8006ee2 <_dtoa_r+0x94a>
 8007054:	2a00      	cmp	r2, #0
 8007056:	dd07      	ble.n	8007068 <_dtoa_r+0xad0>
 8007058:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800705c:	d0ed      	beq.n	800703a <_dtoa_r+0xaa2>
 800705e:	f10a 0301 	add.w	r3, sl, #1
 8007062:	f88b 3000 	strb.w	r3, [fp]
 8007066:	e73c      	b.n	8006ee2 <_dtoa_r+0x94a>
 8007068:	9b05      	ldr	r3, [sp, #20]
 800706a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800706e:	4599      	cmp	r9, r3
 8007070:	d047      	beq.n	8007102 <_dtoa_r+0xb6a>
 8007072:	ee18 1a10 	vmov	r1, s16
 8007076:	2300      	movs	r3, #0
 8007078:	220a      	movs	r2, #10
 800707a:	4620      	mov	r0, r4
 800707c:	f000 f8e8 	bl	8007250 <__multadd>
 8007080:	45b8      	cmp	r8, r7
 8007082:	ee08 0a10 	vmov	s16, r0
 8007086:	f04f 0300 	mov.w	r3, #0
 800708a:	f04f 020a 	mov.w	r2, #10
 800708e:	4641      	mov	r1, r8
 8007090:	4620      	mov	r0, r4
 8007092:	d106      	bne.n	80070a2 <_dtoa_r+0xb0a>
 8007094:	f000 f8dc 	bl	8007250 <__multadd>
 8007098:	4680      	mov	r8, r0
 800709a:	4607      	mov	r7, r0
 800709c:	f109 0901 	add.w	r9, r9, #1
 80070a0:	e772      	b.n	8006f88 <_dtoa_r+0x9f0>
 80070a2:	f000 f8d5 	bl	8007250 <__multadd>
 80070a6:	4639      	mov	r1, r7
 80070a8:	4680      	mov	r8, r0
 80070aa:	2300      	movs	r3, #0
 80070ac:	220a      	movs	r2, #10
 80070ae:	4620      	mov	r0, r4
 80070b0:	f000 f8ce 	bl	8007250 <__multadd>
 80070b4:	4607      	mov	r7, r0
 80070b6:	e7f1      	b.n	800709c <_dtoa_r+0xb04>
 80070b8:	9b03      	ldr	r3, [sp, #12]
 80070ba:	9302      	str	r3, [sp, #8]
 80070bc:	9d01      	ldr	r5, [sp, #4]
 80070be:	ee18 0a10 	vmov	r0, s16
 80070c2:	4631      	mov	r1, r6
 80070c4:	f7ff f9da 	bl	800647c <quorem>
 80070c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80070cc:	9b01      	ldr	r3, [sp, #4]
 80070ce:	f805 ab01 	strb.w	sl, [r5], #1
 80070d2:	1aea      	subs	r2, r5, r3
 80070d4:	9b02      	ldr	r3, [sp, #8]
 80070d6:	4293      	cmp	r3, r2
 80070d8:	dd09      	ble.n	80070ee <_dtoa_r+0xb56>
 80070da:	ee18 1a10 	vmov	r1, s16
 80070de:	2300      	movs	r3, #0
 80070e0:	220a      	movs	r2, #10
 80070e2:	4620      	mov	r0, r4
 80070e4:	f000 f8b4 	bl	8007250 <__multadd>
 80070e8:	ee08 0a10 	vmov	s16, r0
 80070ec:	e7e7      	b.n	80070be <_dtoa_r+0xb26>
 80070ee:	9b02      	ldr	r3, [sp, #8]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	bfc8      	it	gt
 80070f4:	461d      	movgt	r5, r3
 80070f6:	9b01      	ldr	r3, [sp, #4]
 80070f8:	bfd8      	it	le
 80070fa:	2501      	movle	r5, #1
 80070fc:	441d      	add	r5, r3
 80070fe:	f04f 0800 	mov.w	r8, #0
 8007102:	ee18 1a10 	vmov	r1, s16
 8007106:	2201      	movs	r2, #1
 8007108:	4620      	mov	r0, r4
 800710a:	f000 fa51 	bl	80075b0 <__lshift>
 800710e:	4631      	mov	r1, r6
 8007110:	ee08 0a10 	vmov	s16, r0
 8007114:	f000 fabc 	bl	8007690 <__mcmp>
 8007118:	2800      	cmp	r0, #0
 800711a:	dc91      	bgt.n	8007040 <_dtoa_r+0xaa8>
 800711c:	d102      	bne.n	8007124 <_dtoa_r+0xb8c>
 800711e:	f01a 0f01 	tst.w	sl, #1
 8007122:	d18d      	bne.n	8007040 <_dtoa_r+0xaa8>
 8007124:	462b      	mov	r3, r5
 8007126:	461d      	mov	r5, r3
 8007128:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800712c:	2a30      	cmp	r2, #48	; 0x30
 800712e:	d0fa      	beq.n	8007126 <_dtoa_r+0xb8e>
 8007130:	e6d7      	b.n	8006ee2 <_dtoa_r+0x94a>
 8007132:	9a01      	ldr	r2, [sp, #4]
 8007134:	429a      	cmp	r2, r3
 8007136:	d184      	bne.n	8007042 <_dtoa_r+0xaaa>
 8007138:	9b00      	ldr	r3, [sp, #0]
 800713a:	3301      	adds	r3, #1
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	2331      	movs	r3, #49	; 0x31
 8007140:	7013      	strb	r3, [r2, #0]
 8007142:	e6ce      	b.n	8006ee2 <_dtoa_r+0x94a>
 8007144:	4b09      	ldr	r3, [pc, #36]	; (800716c <_dtoa_r+0xbd4>)
 8007146:	f7ff ba95 	b.w	8006674 <_dtoa_r+0xdc>
 800714a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800714c:	2b00      	cmp	r3, #0
 800714e:	f47f aa6e 	bne.w	800662e <_dtoa_r+0x96>
 8007152:	4b07      	ldr	r3, [pc, #28]	; (8007170 <_dtoa_r+0xbd8>)
 8007154:	f7ff ba8e 	b.w	8006674 <_dtoa_r+0xdc>
 8007158:	9b02      	ldr	r3, [sp, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	dcae      	bgt.n	80070bc <_dtoa_r+0xb24>
 800715e:	9b06      	ldr	r3, [sp, #24]
 8007160:	2b02      	cmp	r3, #2
 8007162:	f73f aea8 	bgt.w	8006eb6 <_dtoa_r+0x91e>
 8007166:	e7a9      	b.n	80070bc <_dtoa_r+0xb24>
 8007168:	08008a7b 	.word	0x08008a7b
 800716c:	080089d8 	.word	0x080089d8
 8007170:	080089fc 	.word	0x080089fc

08007174 <_localeconv_r>:
 8007174:	4800      	ldr	r0, [pc, #0]	; (8007178 <_localeconv_r+0x4>)
 8007176:	4770      	bx	lr
 8007178:	20000164 	.word	0x20000164

0800717c <malloc>:
 800717c:	4b02      	ldr	r3, [pc, #8]	; (8007188 <malloc+0xc>)
 800717e:	4601      	mov	r1, r0
 8007180:	6818      	ldr	r0, [r3, #0]
 8007182:	f000 bc09 	b.w	8007998 <_malloc_r>
 8007186:	bf00      	nop
 8007188:	20000010 	.word	0x20000010

0800718c <_Balloc>:
 800718c:	b570      	push	{r4, r5, r6, lr}
 800718e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007190:	4604      	mov	r4, r0
 8007192:	460d      	mov	r5, r1
 8007194:	b976      	cbnz	r6, 80071b4 <_Balloc+0x28>
 8007196:	2010      	movs	r0, #16
 8007198:	f7ff fff0 	bl	800717c <malloc>
 800719c:	4602      	mov	r2, r0
 800719e:	6260      	str	r0, [r4, #36]	; 0x24
 80071a0:	b920      	cbnz	r0, 80071ac <_Balloc+0x20>
 80071a2:	4b18      	ldr	r3, [pc, #96]	; (8007204 <_Balloc+0x78>)
 80071a4:	4818      	ldr	r0, [pc, #96]	; (8007208 <_Balloc+0x7c>)
 80071a6:	2166      	movs	r1, #102	; 0x66
 80071a8:	f000 fdd6 	bl	8007d58 <__assert_func>
 80071ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071b0:	6006      	str	r6, [r0, #0]
 80071b2:	60c6      	str	r6, [r0, #12]
 80071b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071b6:	68f3      	ldr	r3, [r6, #12]
 80071b8:	b183      	cbz	r3, 80071dc <_Balloc+0x50>
 80071ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071c2:	b9b8      	cbnz	r0, 80071f4 <_Balloc+0x68>
 80071c4:	2101      	movs	r1, #1
 80071c6:	fa01 f605 	lsl.w	r6, r1, r5
 80071ca:	1d72      	adds	r2, r6, #5
 80071cc:	0092      	lsls	r2, r2, #2
 80071ce:	4620      	mov	r0, r4
 80071d0:	f000 fb60 	bl	8007894 <_calloc_r>
 80071d4:	b160      	cbz	r0, 80071f0 <_Balloc+0x64>
 80071d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071da:	e00e      	b.n	80071fa <_Balloc+0x6e>
 80071dc:	2221      	movs	r2, #33	; 0x21
 80071de:	2104      	movs	r1, #4
 80071e0:	4620      	mov	r0, r4
 80071e2:	f000 fb57 	bl	8007894 <_calloc_r>
 80071e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071e8:	60f0      	str	r0, [r6, #12]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1e4      	bne.n	80071ba <_Balloc+0x2e>
 80071f0:	2000      	movs	r0, #0
 80071f2:	bd70      	pop	{r4, r5, r6, pc}
 80071f4:	6802      	ldr	r2, [r0, #0]
 80071f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071fa:	2300      	movs	r3, #0
 80071fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007200:	e7f7      	b.n	80071f2 <_Balloc+0x66>
 8007202:	bf00      	nop
 8007204:	08008a09 	.word	0x08008a09
 8007208:	08008a8c 	.word	0x08008a8c

0800720c <_Bfree>:
 800720c:	b570      	push	{r4, r5, r6, lr}
 800720e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007210:	4605      	mov	r5, r0
 8007212:	460c      	mov	r4, r1
 8007214:	b976      	cbnz	r6, 8007234 <_Bfree+0x28>
 8007216:	2010      	movs	r0, #16
 8007218:	f7ff ffb0 	bl	800717c <malloc>
 800721c:	4602      	mov	r2, r0
 800721e:	6268      	str	r0, [r5, #36]	; 0x24
 8007220:	b920      	cbnz	r0, 800722c <_Bfree+0x20>
 8007222:	4b09      	ldr	r3, [pc, #36]	; (8007248 <_Bfree+0x3c>)
 8007224:	4809      	ldr	r0, [pc, #36]	; (800724c <_Bfree+0x40>)
 8007226:	218a      	movs	r1, #138	; 0x8a
 8007228:	f000 fd96 	bl	8007d58 <__assert_func>
 800722c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007230:	6006      	str	r6, [r0, #0]
 8007232:	60c6      	str	r6, [r0, #12]
 8007234:	b13c      	cbz	r4, 8007246 <_Bfree+0x3a>
 8007236:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007238:	6862      	ldr	r2, [r4, #4]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007240:	6021      	str	r1, [r4, #0]
 8007242:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007246:	bd70      	pop	{r4, r5, r6, pc}
 8007248:	08008a09 	.word	0x08008a09
 800724c:	08008a8c 	.word	0x08008a8c

08007250 <__multadd>:
 8007250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007254:	690d      	ldr	r5, [r1, #16]
 8007256:	4607      	mov	r7, r0
 8007258:	460c      	mov	r4, r1
 800725a:	461e      	mov	r6, r3
 800725c:	f101 0c14 	add.w	ip, r1, #20
 8007260:	2000      	movs	r0, #0
 8007262:	f8dc 3000 	ldr.w	r3, [ip]
 8007266:	b299      	uxth	r1, r3
 8007268:	fb02 6101 	mla	r1, r2, r1, r6
 800726c:	0c1e      	lsrs	r6, r3, #16
 800726e:	0c0b      	lsrs	r3, r1, #16
 8007270:	fb02 3306 	mla	r3, r2, r6, r3
 8007274:	b289      	uxth	r1, r1
 8007276:	3001      	adds	r0, #1
 8007278:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800727c:	4285      	cmp	r5, r0
 800727e:	f84c 1b04 	str.w	r1, [ip], #4
 8007282:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007286:	dcec      	bgt.n	8007262 <__multadd+0x12>
 8007288:	b30e      	cbz	r6, 80072ce <__multadd+0x7e>
 800728a:	68a3      	ldr	r3, [r4, #8]
 800728c:	42ab      	cmp	r3, r5
 800728e:	dc19      	bgt.n	80072c4 <__multadd+0x74>
 8007290:	6861      	ldr	r1, [r4, #4]
 8007292:	4638      	mov	r0, r7
 8007294:	3101      	adds	r1, #1
 8007296:	f7ff ff79 	bl	800718c <_Balloc>
 800729a:	4680      	mov	r8, r0
 800729c:	b928      	cbnz	r0, 80072aa <__multadd+0x5a>
 800729e:	4602      	mov	r2, r0
 80072a0:	4b0c      	ldr	r3, [pc, #48]	; (80072d4 <__multadd+0x84>)
 80072a2:	480d      	ldr	r0, [pc, #52]	; (80072d8 <__multadd+0x88>)
 80072a4:	21b5      	movs	r1, #181	; 0xb5
 80072a6:	f000 fd57 	bl	8007d58 <__assert_func>
 80072aa:	6922      	ldr	r2, [r4, #16]
 80072ac:	3202      	adds	r2, #2
 80072ae:	f104 010c 	add.w	r1, r4, #12
 80072b2:	0092      	lsls	r2, r2, #2
 80072b4:	300c      	adds	r0, #12
 80072b6:	f7fe fc41 	bl	8005b3c <memcpy>
 80072ba:	4621      	mov	r1, r4
 80072bc:	4638      	mov	r0, r7
 80072be:	f7ff ffa5 	bl	800720c <_Bfree>
 80072c2:	4644      	mov	r4, r8
 80072c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072c8:	3501      	adds	r5, #1
 80072ca:	615e      	str	r6, [r3, #20]
 80072cc:	6125      	str	r5, [r4, #16]
 80072ce:	4620      	mov	r0, r4
 80072d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072d4:	08008a7b 	.word	0x08008a7b
 80072d8:	08008a8c 	.word	0x08008a8c

080072dc <__hi0bits>:
 80072dc:	0c03      	lsrs	r3, r0, #16
 80072de:	041b      	lsls	r3, r3, #16
 80072e0:	b9d3      	cbnz	r3, 8007318 <__hi0bits+0x3c>
 80072e2:	0400      	lsls	r0, r0, #16
 80072e4:	2310      	movs	r3, #16
 80072e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80072ea:	bf04      	itt	eq
 80072ec:	0200      	lsleq	r0, r0, #8
 80072ee:	3308      	addeq	r3, #8
 80072f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80072f4:	bf04      	itt	eq
 80072f6:	0100      	lsleq	r0, r0, #4
 80072f8:	3304      	addeq	r3, #4
 80072fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80072fe:	bf04      	itt	eq
 8007300:	0080      	lsleq	r0, r0, #2
 8007302:	3302      	addeq	r3, #2
 8007304:	2800      	cmp	r0, #0
 8007306:	db05      	blt.n	8007314 <__hi0bits+0x38>
 8007308:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800730c:	f103 0301 	add.w	r3, r3, #1
 8007310:	bf08      	it	eq
 8007312:	2320      	moveq	r3, #32
 8007314:	4618      	mov	r0, r3
 8007316:	4770      	bx	lr
 8007318:	2300      	movs	r3, #0
 800731a:	e7e4      	b.n	80072e6 <__hi0bits+0xa>

0800731c <__lo0bits>:
 800731c:	6803      	ldr	r3, [r0, #0]
 800731e:	f013 0207 	ands.w	r2, r3, #7
 8007322:	4601      	mov	r1, r0
 8007324:	d00b      	beq.n	800733e <__lo0bits+0x22>
 8007326:	07da      	lsls	r2, r3, #31
 8007328:	d423      	bmi.n	8007372 <__lo0bits+0x56>
 800732a:	0798      	lsls	r0, r3, #30
 800732c:	bf49      	itett	mi
 800732e:	085b      	lsrmi	r3, r3, #1
 8007330:	089b      	lsrpl	r3, r3, #2
 8007332:	2001      	movmi	r0, #1
 8007334:	600b      	strmi	r3, [r1, #0]
 8007336:	bf5c      	itt	pl
 8007338:	600b      	strpl	r3, [r1, #0]
 800733a:	2002      	movpl	r0, #2
 800733c:	4770      	bx	lr
 800733e:	b298      	uxth	r0, r3
 8007340:	b9a8      	cbnz	r0, 800736e <__lo0bits+0x52>
 8007342:	0c1b      	lsrs	r3, r3, #16
 8007344:	2010      	movs	r0, #16
 8007346:	b2da      	uxtb	r2, r3
 8007348:	b90a      	cbnz	r2, 800734e <__lo0bits+0x32>
 800734a:	3008      	adds	r0, #8
 800734c:	0a1b      	lsrs	r3, r3, #8
 800734e:	071a      	lsls	r2, r3, #28
 8007350:	bf04      	itt	eq
 8007352:	091b      	lsreq	r3, r3, #4
 8007354:	3004      	addeq	r0, #4
 8007356:	079a      	lsls	r2, r3, #30
 8007358:	bf04      	itt	eq
 800735a:	089b      	lsreq	r3, r3, #2
 800735c:	3002      	addeq	r0, #2
 800735e:	07da      	lsls	r2, r3, #31
 8007360:	d403      	bmi.n	800736a <__lo0bits+0x4e>
 8007362:	085b      	lsrs	r3, r3, #1
 8007364:	f100 0001 	add.w	r0, r0, #1
 8007368:	d005      	beq.n	8007376 <__lo0bits+0x5a>
 800736a:	600b      	str	r3, [r1, #0]
 800736c:	4770      	bx	lr
 800736e:	4610      	mov	r0, r2
 8007370:	e7e9      	b.n	8007346 <__lo0bits+0x2a>
 8007372:	2000      	movs	r0, #0
 8007374:	4770      	bx	lr
 8007376:	2020      	movs	r0, #32
 8007378:	4770      	bx	lr
	...

0800737c <__i2b>:
 800737c:	b510      	push	{r4, lr}
 800737e:	460c      	mov	r4, r1
 8007380:	2101      	movs	r1, #1
 8007382:	f7ff ff03 	bl	800718c <_Balloc>
 8007386:	4602      	mov	r2, r0
 8007388:	b928      	cbnz	r0, 8007396 <__i2b+0x1a>
 800738a:	4b05      	ldr	r3, [pc, #20]	; (80073a0 <__i2b+0x24>)
 800738c:	4805      	ldr	r0, [pc, #20]	; (80073a4 <__i2b+0x28>)
 800738e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007392:	f000 fce1 	bl	8007d58 <__assert_func>
 8007396:	2301      	movs	r3, #1
 8007398:	6144      	str	r4, [r0, #20]
 800739a:	6103      	str	r3, [r0, #16]
 800739c:	bd10      	pop	{r4, pc}
 800739e:	bf00      	nop
 80073a0:	08008a7b 	.word	0x08008a7b
 80073a4:	08008a8c 	.word	0x08008a8c

080073a8 <__multiply>:
 80073a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ac:	4691      	mov	r9, r2
 80073ae:	690a      	ldr	r2, [r1, #16]
 80073b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	bfb8      	it	lt
 80073b8:	460b      	movlt	r3, r1
 80073ba:	460c      	mov	r4, r1
 80073bc:	bfbc      	itt	lt
 80073be:	464c      	movlt	r4, r9
 80073c0:	4699      	movlt	r9, r3
 80073c2:	6927      	ldr	r7, [r4, #16]
 80073c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80073c8:	68a3      	ldr	r3, [r4, #8]
 80073ca:	6861      	ldr	r1, [r4, #4]
 80073cc:	eb07 060a 	add.w	r6, r7, sl
 80073d0:	42b3      	cmp	r3, r6
 80073d2:	b085      	sub	sp, #20
 80073d4:	bfb8      	it	lt
 80073d6:	3101      	addlt	r1, #1
 80073d8:	f7ff fed8 	bl	800718c <_Balloc>
 80073dc:	b930      	cbnz	r0, 80073ec <__multiply+0x44>
 80073de:	4602      	mov	r2, r0
 80073e0:	4b44      	ldr	r3, [pc, #272]	; (80074f4 <__multiply+0x14c>)
 80073e2:	4845      	ldr	r0, [pc, #276]	; (80074f8 <__multiply+0x150>)
 80073e4:	f240 115d 	movw	r1, #349	; 0x15d
 80073e8:	f000 fcb6 	bl	8007d58 <__assert_func>
 80073ec:	f100 0514 	add.w	r5, r0, #20
 80073f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80073f4:	462b      	mov	r3, r5
 80073f6:	2200      	movs	r2, #0
 80073f8:	4543      	cmp	r3, r8
 80073fa:	d321      	bcc.n	8007440 <__multiply+0x98>
 80073fc:	f104 0314 	add.w	r3, r4, #20
 8007400:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007404:	f109 0314 	add.w	r3, r9, #20
 8007408:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800740c:	9202      	str	r2, [sp, #8]
 800740e:	1b3a      	subs	r2, r7, r4
 8007410:	3a15      	subs	r2, #21
 8007412:	f022 0203 	bic.w	r2, r2, #3
 8007416:	3204      	adds	r2, #4
 8007418:	f104 0115 	add.w	r1, r4, #21
 800741c:	428f      	cmp	r7, r1
 800741e:	bf38      	it	cc
 8007420:	2204      	movcc	r2, #4
 8007422:	9201      	str	r2, [sp, #4]
 8007424:	9a02      	ldr	r2, [sp, #8]
 8007426:	9303      	str	r3, [sp, #12]
 8007428:	429a      	cmp	r2, r3
 800742a:	d80c      	bhi.n	8007446 <__multiply+0x9e>
 800742c:	2e00      	cmp	r6, #0
 800742e:	dd03      	ble.n	8007438 <__multiply+0x90>
 8007430:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007434:	2b00      	cmp	r3, #0
 8007436:	d05a      	beq.n	80074ee <__multiply+0x146>
 8007438:	6106      	str	r6, [r0, #16]
 800743a:	b005      	add	sp, #20
 800743c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007440:	f843 2b04 	str.w	r2, [r3], #4
 8007444:	e7d8      	b.n	80073f8 <__multiply+0x50>
 8007446:	f8b3 a000 	ldrh.w	sl, [r3]
 800744a:	f1ba 0f00 	cmp.w	sl, #0
 800744e:	d024      	beq.n	800749a <__multiply+0xf2>
 8007450:	f104 0e14 	add.w	lr, r4, #20
 8007454:	46a9      	mov	r9, r5
 8007456:	f04f 0c00 	mov.w	ip, #0
 800745a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800745e:	f8d9 1000 	ldr.w	r1, [r9]
 8007462:	fa1f fb82 	uxth.w	fp, r2
 8007466:	b289      	uxth	r1, r1
 8007468:	fb0a 110b 	mla	r1, sl, fp, r1
 800746c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007470:	f8d9 2000 	ldr.w	r2, [r9]
 8007474:	4461      	add	r1, ip
 8007476:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800747a:	fb0a c20b 	mla	r2, sl, fp, ip
 800747e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007482:	b289      	uxth	r1, r1
 8007484:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007488:	4577      	cmp	r7, lr
 800748a:	f849 1b04 	str.w	r1, [r9], #4
 800748e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007492:	d8e2      	bhi.n	800745a <__multiply+0xb2>
 8007494:	9a01      	ldr	r2, [sp, #4]
 8007496:	f845 c002 	str.w	ip, [r5, r2]
 800749a:	9a03      	ldr	r2, [sp, #12]
 800749c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80074a0:	3304      	adds	r3, #4
 80074a2:	f1b9 0f00 	cmp.w	r9, #0
 80074a6:	d020      	beq.n	80074ea <__multiply+0x142>
 80074a8:	6829      	ldr	r1, [r5, #0]
 80074aa:	f104 0c14 	add.w	ip, r4, #20
 80074ae:	46ae      	mov	lr, r5
 80074b0:	f04f 0a00 	mov.w	sl, #0
 80074b4:	f8bc b000 	ldrh.w	fp, [ip]
 80074b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80074bc:	fb09 220b 	mla	r2, r9, fp, r2
 80074c0:	4492      	add	sl, r2
 80074c2:	b289      	uxth	r1, r1
 80074c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80074c8:	f84e 1b04 	str.w	r1, [lr], #4
 80074cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80074d0:	f8be 1000 	ldrh.w	r1, [lr]
 80074d4:	0c12      	lsrs	r2, r2, #16
 80074d6:	fb09 1102 	mla	r1, r9, r2, r1
 80074da:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80074de:	4567      	cmp	r7, ip
 80074e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80074e4:	d8e6      	bhi.n	80074b4 <__multiply+0x10c>
 80074e6:	9a01      	ldr	r2, [sp, #4]
 80074e8:	50a9      	str	r1, [r5, r2]
 80074ea:	3504      	adds	r5, #4
 80074ec:	e79a      	b.n	8007424 <__multiply+0x7c>
 80074ee:	3e01      	subs	r6, #1
 80074f0:	e79c      	b.n	800742c <__multiply+0x84>
 80074f2:	bf00      	nop
 80074f4:	08008a7b 	.word	0x08008a7b
 80074f8:	08008a8c 	.word	0x08008a8c

080074fc <__pow5mult>:
 80074fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007500:	4615      	mov	r5, r2
 8007502:	f012 0203 	ands.w	r2, r2, #3
 8007506:	4606      	mov	r6, r0
 8007508:	460f      	mov	r7, r1
 800750a:	d007      	beq.n	800751c <__pow5mult+0x20>
 800750c:	4c25      	ldr	r4, [pc, #148]	; (80075a4 <__pow5mult+0xa8>)
 800750e:	3a01      	subs	r2, #1
 8007510:	2300      	movs	r3, #0
 8007512:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007516:	f7ff fe9b 	bl	8007250 <__multadd>
 800751a:	4607      	mov	r7, r0
 800751c:	10ad      	asrs	r5, r5, #2
 800751e:	d03d      	beq.n	800759c <__pow5mult+0xa0>
 8007520:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007522:	b97c      	cbnz	r4, 8007544 <__pow5mult+0x48>
 8007524:	2010      	movs	r0, #16
 8007526:	f7ff fe29 	bl	800717c <malloc>
 800752a:	4602      	mov	r2, r0
 800752c:	6270      	str	r0, [r6, #36]	; 0x24
 800752e:	b928      	cbnz	r0, 800753c <__pow5mult+0x40>
 8007530:	4b1d      	ldr	r3, [pc, #116]	; (80075a8 <__pow5mult+0xac>)
 8007532:	481e      	ldr	r0, [pc, #120]	; (80075ac <__pow5mult+0xb0>)
 8007534:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007538:	f000 fc0e 	bl	8007d58 <__assert_func>
 800753c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007540:	6004      	str	r4, [r0, #0]
 8007542:	60c4      	str	r4, [r0, #12]
 8007544:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007548:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800754c:	b94c      	cbnz	r4, 8007562 <__pow5mult+0x66>
 800754e:	f240 2171 	movw	r1, #625	; 0x271
 8007552:	4630      	mov	r0, r6
 8007554:	f7ff ff12 	bl	800737c <__i2b>
 8007558:	2300      	movs	r3, #0
 800755a:	f8c8 0008 	str.w	r0, [r8, #8]
 800755e:	4604      	mov	r4, r0
 8007560:	6003      	str	r3, [r0, #0]
 8007562:	f04f 0900 	mov.w	r9, #0
 8007566:	07eb      	lsls	r3, r5, #31
 8007568:	d50a      	bpl.n	8007580 <__pow5mult+0x84>
 800756a:	4639      	mov	r1, r7
 800756c:	4622      	mov	r2, r4
 800756e:	4630      	mov	r0, r6
 8007570:	f7ff ff1a 	bl	80073a8 <__multiply>
 8007574:	4639      	mov	r1, r7
 8007576:	4680      	mov	r8, r0
 8007578:	4630      	mov	r0, r6
 800757a:	f7ff fe47 	bl	800720c <_Bfree>
 800757e:	4647      	mov	r7, r8
 8007580:	106d      	asrs	r5, r5, #1
 8007582:	d00b      	beq.n	800759c <__pow5mult+0xa0>
 8007584:	6820      	ldr	r0, [r4, #0]
 8007586:	b938      	cbnz	r0, 8007598 <__pow5mult+0x9c>
 8007588:	4622      	mov	r2, r4
 800758a:	4621      	mov	r1, r4
 800758c:	4630      	mov	r0, r6
 800758e:	f7ff ff0b 	bl	80073a8 <__multiply>
 8007592:	6020      	str	r0, [r4, #0]
 8007594:	f8c0 9000 	str.w	r9, [r0]
 8007598:	4604      	mov	r4, r0
 800759a:	e7e4      	b.n	8007566 <__pow5mult+0x6a>
 800759c:	4638      	mov	r0, r7
 800759e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075a2:	bf00      	nop
 80075a4:	08008bd8 	.word	0x08008bd8
 80075a8:	08008a09 	.word	0x08008a09
 80075ac:	08008a8c 	.word	0x08008a8c

080075b0 <__lshift>:
 80075b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075b4:	460c      	mov	r4, r1
 80075b6:	6849      	ldr	r1, [r1, #4]
 80075b8:	6923      	ldr	r3, [r4, #16]
 80075ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075be:	68a3      	ldr	r3, [r4, #8]
 80075c0:	4607      	mov	r7, r0
 80075c2:	4691      	mov	r9, r2
 80075c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075c8:	f108 0601 	add.w	r6, r8, #1
 80075cc:	42b3      	cmp	r3, r6
 80075ce:	db0b      	blt.n	80075e8 <__lshift+0x38>
 80075d0:	4638      	mov	r0, r7
 80075d2:	f7ff fddb 	bl	800718c <_Balloc>
 80075d6:	4605      	mov	r5, r0
 80075d8:	b948      	cbnz	r0, 80075ee <__lshift+0x3e>
 80075da:	4602      	mov	r2, r0
 80075dc:	4b2a      	ldr	r3, [pc, #168]	; (8007688 <__lshift+0xd8>)
 80075de:	482b      	ldr	r0, [pc, #172]	; (800768c <__lshift+0xdc>)
 80075e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80075e4:	f000 fbb8 	bl	8007d58 <__assert_func>
 80075e8:	3101      	adds	r1, #1
 80075ea:	005b      	lsls	r3, r3, #1
 80075ec:	e7ee      	b.n	80075cc <__lshift+0x1c>
 80075ee:	2300      	movs	r3, #0
 80075f0:	f100 0114 	add.w	r1, r0, #20
 80075f4:	f100 0210 	add.w	r2, r0, #16
 80075f8:	4618      	mov	r0, r3
 80075fa:	4553      	cmp	r3, sl
 80075fc:	db37      	blt.n	800766e <__lshift+0xbe>
 80075fe:	6920      	ldr	r0, [r4, #16]
 8007600:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007604:	f104 0314 	add.w	r3, r4, #20
 8007608:	f019 091f 	ands.w	r9, r9, #31
 800760c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007610:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007614:	d02f      	beq.n	8007676 <__lshift+0xc6>
 8007616:	f1c9 0e20 	rsb	lr, r9, #32
 800761a:	468a      	mov	sl, r1
 800761c:	f04f 0c00 	mov.w	ip, #0
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	fa02 f209 	lsl.w	r2, r2, r9
 8007626:	ea42 020c 	orr.w	r2, r2, ip
 800762a:	f84a 2b04 	str.w	r2, [sl], #4
 800762e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007632:	4298      	cmp	r0, r3
 8007634:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007638:	d8f2      	bhi.n	8007620 <__lshift+0x70>
 800763a:	1b03      	subs	r3, r0, r4
 800763c:	3b15      	subs	r3, #21
 800763e:	f023 0303 	bic.w	r3, r3, #3
 8007642:	3304      	adds	r3, #4
 8007644:	f104 0215 	add.w	r2, r4, #21
 8007648:	4290      	cmp	r0, r2
 800764a:	bf38      	it	cc
 800764c:	2304      	movcc	r3, #4
 800764e:	f841 c003 	str.w	ip, [r1, r3]
 8007652:	f1bc 0f00 	cmp.w	ip, #0
 8007656:	d001      	beq.n	800765c <__lshift+0xac>
 8007658:	f108 0602 	add.w	r6, r8, #2
 800765c:	3e01      	subs	r6, #1
 800765e:	4638      	mov	r0, r7
 8007660:	612e      	str	r6, [r5, #16]
 8007662:	4621      	mov	r1, r4
 8007664:	f7ff fdd2 	bl	800720c <_Bfree>
 8007668:	4628      	mov	r0, r5
 800766a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800766e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007672:	3301      	adds	r3, #1
 8007674:	e7c1      	b.n	80075fa <__lshift+0x4a>
 8007676:	3904      	subs	r1, #4
 8007678:	f853 2b04 	ldr.w	r2, [r3], #4
 800767c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007680:	4298      	cmp	r0, r3
 8007682:	d8f9      	bhi.n	8007678 <__lshift+0xc8>
 8007684:	e7ea      	b.n	800765c <__lshift+0xac>
 8007686:	bf00      	nop
 8007688:	08008a7b 	.word	0x08008a7b
 800768c:	08008a8c 	.word	0x08008a8c

08007690 <__mcmp>:
 8007690:	b530      	push	{r4, r5, lr}
 8007692:	6902      	ldr	r2, [r0, #16]
 8007694:	690c      	ldr	r4, [r1, #16]
 8007696:	1b12      	subs	r2, r2, r4
 8007698:	d10e      	bne.n	80076b8 <__mcmp+0x28>
 800769a:	f100 0314 	add.w	r3, r0, #20
 800769e:	3114      	adds	r1, #20
 80076a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80076a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80076a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80076ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80076b0:	42a5      	cmp	r5, r4
 80076b2:	d003      	beq.n	80076bc <__mcmp+0x2c>
 80076b4:	d305      	bcc.n	80076c2 <__mcmp+0x32>
 80076b6:	2201      	movs	r2, #1
 80076b8:	4610      	mov	r0, r2
 80076ba:	bd30      	pop	{r4, r5, pc}
 80076bc:	4283      	cmp	r3, r0
 80076be:	d3f3      	bcc.n	80076a8 <__mcmp+0x18>
 80076c0:	e7fa      	b.n	80076b8 <__mcmp+0x28>
 80076c2:	f04f 32ff 	mov.w	r2, #4294967295
 80076c6:	e7f7      	b.n	80076b8 <__mcmp+0x28>

080076c8 <__mdiff>:
 80076c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076cc:	460c      	mov	r4, r1
 80076ce:	4606      	mov	r6, r0
 80076d0:	4611      	mov	r1, r2
 80076d2:	4620      	mov	r0, r4
 80076d4:	4690      	mov	r8, r2
 80076d6:	f7ff ffdb 	bl	8007690 <__mcmp>
 80076da:	1e05      	subs	r5, r0, #0
 80076dc:	d110      	bne.n	8007700 <__mdiff+0x38>
 80076de:	4629      	mov	r1, r5
 80076e0:	4630      	mov	r0, r6
 80076e2:	f7ff fd53 	bl	800718c <_Balloc>
 80076e6:	b930      	cbnz	r0, 80076f6 <__mdiff+0x2e>
 80076e8:	4b3a      	ldr	r3, [pc, #232]	; (80077d4 <__mdiff+0x10c>)
 80076ea:	4602      	mov	r2, r0
 80076ec:	f240 2132 	movw	r1, #562	; 0x232
 80076f0:	4839      	ldr	r0, [pc, #228]	; (80077d8 <__mdiff+0x110>)
 80076f2:	f000 fb31 	bl	8007d58 <__assert_func>
 80076f6:	2301      	movs	r3, #1
 80076f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80076fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007700:	bfa4      	itt	ge
 8007702:	4643      	movge	r3, r8
 8007704:	46a0      	movge	r8, r4
 8007706:	4630      	mov	r0, r6
 8007708:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800770c:	bfa6      	itte	ge
 800770e:	461c      	movge	r4, r3
 8007710:	2500      	movge	r5, #0
 8007712:	2501      	movlt	r5, #1
 8007714:	f7ff fd3a 	bl	800718c <_Balloc>
 8007718:	b920      	cbnz	r0, 8007724 <__mdiff+0x5c>
 800771a:	4b2e      	ldr	r3, [pc, #184]	; (80077d4 <__mdiff+0x10c>)
 800771c:	4602      	mov	r2, r0
 800771e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007722:	e7e5      	b.n	80076f0 <__mdiff+0x28>
 8007724:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007728:	6926      	ldr	r6, [r4, #16]
 800772a:	60c5      	str	r5, [r0, #12]
 800772c:	f104 0914 	add.w	r9, r4, #20
 8007730:	f108 0514 	add.w	r5, r8, #20
 8007734:	f100 0e14 	add.w	lr, r0, #20
 8007738:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800773c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007740:	f108 0210 	add.w	r2, r8, #16
 8007744:	46f2      	mov	sl, lr
 8007746:	2100      	movs	r1, #0
 8007748:	f859 3b04 	ldr.w	r3, [r9], #4
 800774c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007750:	fa1f f883 	uxth.w	r8, r3
 8007754:	fa11 f18b 	uxtah	r1, r1, fp
 8007758:	0c1b      	lsrs	r3, r3, #16
 800775a:	eba1 0808 	sub.w	r8, r1, r8
 800775e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007762:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007766:	fa1f f888 	uxth.w	r8, r8
 800776a:	1419      	asrs	r1, r3, #16
 800776c:	454e      	cmp	r6, r9
 800776e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007772:	f84a 3b04 	str.w	r3, [sl], #4
 8007776:	d8e7      	bhi.n	8007748 <__mdiff+0x80>
 8007778:	1b33      	subs	r3, r6, r4
 800777a:	3b15      	subs	r3, #21
 800777c:	f023 0303 	bic.w	r3, r3, #3
 8007780:	3304      	adds	r3, #4
 8007782:	3415      	adds	r4, #21
 8007784:	42a6      	cmp	r6, r4
 8007786:	bf38      	it	cc
 8007788:	2304      	movcc	r3, #4
 800778a:	441d      	add	r5, r3
 800778c:	4473      	add	r3, lr
 800778e:	469e      	mov	lr, r3
 8007790:	462e      	mov	r6, r5
 8007792:	4566      	cmp	r6, ip
 8007794:	d30e      	bcc.n	80077b4 <__mdiff+0xec>
 8007796:	f10c 0203 	add.w	r2, ip, #3
 800779a:	1b52      	subs	r2, r2, r5
 800779c:	f022 0203 	bic.w	r2, r2, #3
 80077a0:	3d03      	subs	r5, #3
 80077a2:	45ac      	cmp	ip, r5
 80077a4:	bf38      	it	cc
 80077a6:	2200      	movcc	r2, #0
 80077a8:	441a      	add	r2, r3
 80077aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80077ae:	b17b      	cbz	r3, 80077d0 <__mdiff+0x108>
 80077b0:	6107      	str	r7, [r0, #16]
 80077b2:	e7a3      	b.n	80076fc <__mdiff+0x34>
 80077b4:	f856 8b04 	ldr.w	r8, [r6], #4
 80077b8:	fa11 f288 	uxtah	r2, r1, r8
 80077bc:	1414      	asrs	r4, r2, #16
 80077be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80077c2:	b292      	uxth	r2, r2
 80077c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80077c8:	f84e 2b04 	str.w	r2, [lr], #4
 80077cc:	1421      	asrs	r1, r4, #16
 80077ce:	e7e0      	b.n	8007792 <__mdiff+0xca>
 80077d0:	3f01      	subs	r7, #1
 80077d2:	e7ea      	b.n	80077aa <__mdiff+0xe2>
 80077d4:	08008a7b 	.word	0x08008a7b
 80077d8:	08008a8c 	.word	0x08008a8c

080077dc <__d2b>:
 80077dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077e0:	4689      	mov	r9, r1
 80077e2:	2101      	movs	r1, #1
 80077e4:	ec57 6b10 	vmov	r6, r7, d0
 80077e8:	4690      	mov	r8, r2
 80077ea:	f7ff fccf 	bl	800718c <_Balloc>
 80077ee:	4604      	mov	r4, r0
 80077f0:	b930      	cbnz	r0, 8007800 <__d2b+0x24>
 80077f2:	4602      	mov	r2, r0
 80077f4:	4b25      	ldr	r3, [pc, #148]	; (800788c <__d2b+0xb0>)
 80077f6:	4826      	ldr	r0, [pc, #152]	; (8007890 <__d2b+0xb4>)
 80077f8:	f240 310a 	movw	r1, #778	; 0x30a
 80077fc:	f000 faac 	bl	8007d58 <__assert_func>
 8007800:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007804:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007808:	bb35      	cbnz	r5, 8007858 <__d2b+0x7c>
 800780a:	2e00      	cmp	r6, #0
 800780c:	9301      	str	r3, [sp, #4]
 800780e:	d028      	beq.n	8007862 <__d2b+0x86>
 8007810:	4668      	mov	r0, sp
 8007812:	9600      	str	r6, [sp, #0]
 8007814:	f7ff fd82 	bl	800731c <__lo0bits>
 8007818:	9900      	ldr	r1, [sp, #0]
 800781a:	b300      	cbz	r0, 800785e <__d2b+0x82>
 800781c:	9a01      	ldr	r2, [sp, #4]
 800781e:	f1c0 0320 	rsb	r3, r0, #32
 8007822:	fa02 f303 	lsl.w	r3, r2, r3
 8007826:	430b      	orrs	r3, r1
 8007828:	40c2      	lsrs	r2, r0
 800782a:	6163      	str	r3, [r4, #20]
 800782c:	9201      	str	r2, [sp, #4]
 800782e:	9b01      	ldr	r3, [sp, #4]
 8007830:	61a3      	str	r3, [r4, #24]
 8007832:	2b00      	cmp	r3, #0
 8007834:	bf14      	ite	ne
 8007836:	2202      	movne	r2, #2
 8007838:	2201      	moveq	r2, #1
 800783a:	6122      	str	r2, [r4, #16]
 800783c:	b1d5      	cbz	r5, 8007874 <__d2b+0x98>
 800783e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007842:	4405      	add	r5, r0
 8007844:	f8c9 5000 	str.w	r5, [r9]
 8007848:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800784c:	f8c8 0000 	str.w	r0, [r8]
 8007850:	4620      	mov	r0, r4
 8007852:	b003      	add	sp, #12
 8007854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007858:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800785c:	e7d5      	b.n	800780a <__d2b+0x2e>
 800785e:	6161      	str	r1, [r4, #20]
 8007860:	e7e5      	b.n	800782e <__d2b+0x52>
 8007862:	a801      	add	r0, sp, #4
 8007864:	f7ff fd5a 	bl	800731c <__lo0bits>
 8007868:	9b01      	ldr	r3, [sp, #4]
 800786a:	6163      	str	r3, [r4, #20]
 800786c:	2201      	movs	r2, #1
 800786e:	6122      	str	r2, [r4, #16]
 8007870:	3020      	adds	r0, #32
 8007872:	e7e3      	b.n	800783c <__d2b+0x60>
 8007874:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007878:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800787c:	f8c9 0000 	str.w	r0, [r9]
 8007880:	6918      	ldr	r0, [r3, #16]
 8007882:	f7ff fd2b 	bl	80072dc <__hi0bits>
 8007886:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800788a:	e7df      	b.n	800784c <__d2b+0x70>
 800788c:	08008a7b 	.word	0x08008a7b
 8007890:	08008a8c 	.word	0x08008a8c

08007894 <_calloc_r>:
 8007894:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007896:	fba1 2402 	umull	r2, r4, r1, r2
 800789a:	b94c      	cbnz	r4, 80078b0 <_calloc_r+0x1c>
 800789c:	4611      	mov	r1, r2
 800789e:	9201      	str	r2, [sp, #4]
 80078a0:	f000 f87a 	bl	8007998 <_malloc_r>
 80078a4:	9a01      	ldr	r2, [sp, #4]
 80078a6:	4605      	mov	r5, r0
 80078a8:	b930      	cbnz	r0, 80078b8 <_calloc_r+0x24>
 80078aa:	4628      	mov	r0, r5
 80078ac:	b003      	add	sp, #12
 80078ae:	bd30      	pop	{r4, r5, pc}
 80078b0:	220c      	movs	r2, #12
 80078b2:	6002      	str	r2, [r0, #0]
 80078b4:	2500      	movs	r5, #0
 80078b6:	e7f8      	b.n	80078aa <_calloc_r+0x16>
 80078b8:	4621      	mov	r1, r4
 80078ba:	f7fe f94d 	bl	8005b58 <memset>
 80078be:	e7f4      	b.n	80078aa <_calloc_r+0x16>

080078c0 <_free_r>:
 80078c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078c2:	2900      	cmp	r1, #0
 80078c4:	d044      	beq.n	8007950 <_free_r+0x90>
 80078c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078ca:	9001      	str	r0, [sp, #4]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f1a1 0404 	sub.w	r4, r1, #4
 80078d2:	bfb8      	it	lt
 80078d4:	18e4      	addlt	r4, r4, r3
 80078d6:	f000 fa9b 	bl	8007e10 <__malloc_lock>
 80078da:	4a1e      	ldr	r2, [pc, #120]	; (8007954 <_free_r+0x94>)
 80078dc:	9801      	ldr	r0, [sp, #4]
 80078de:	6813      	ldr	r3, [r2, #0]
 80078e0:	b933      	cbnz	r3, 80078f0 <_free_r+0x30>
 80078e2:	6063      	str	r3, [r4, #4]
 80078e4:	6014      	str	r4, [r2, #0]
 80078e6:	b003      	add	sp, #12
 80078e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078ec:	f000 ba96 	b.w	8007e1c <__malloc_unlock>
 80078f0:	42a3      	cmp	r3, r4
 80078f2:	d908      	bls.n	8007906 <_free_r+0x46>
 80078f4:	6825      	ldr	r5, [r4, #0]
 80078f6:	1961      	adds	r1, r4, r5
 80078f8:	428b      	cmp	r3, r1
 80078fa:	bf01      	itttt	eq
 80078fc:	6819      	ldreq	r1, [r3, #0]
 80078fe:	685b      	ldreq	r3, [r3, #4]
 8007900:	1949      	addeq	r1, r1, r5
 8007902:	6021      	streq	r1, [r4, #0]
 8007904:	e7ed      	b.n	80078e2 <_free_r+0x22>
 8007906:	461a      	mov	r2, r3
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	b10b      	cbz	r3, 8007910 <_free_r+0x50>
 800790c:	42a3      	cmp	r3, r4
 800790e:	d9fa      	bls.n	8007906 <_free_r+0x46>
 8007910:	6811      	ldr	r1, [r2, #0]
 8007912:	1855      	adds	r5, r2, r1
 8007914:	42a5      	cmp	r5, r4
 8007916:	d10b      	bne.n	8007930 <_free_r+0x70>
 8007918:	6824      	ldr	r4, [r4, #0]
 800791a:	4421      	add	r1, r4
 800791c:	1854      	adds	r4, r2, r1
 800791e:	42a3      	cmp	r3, r4
 8007920:	6011      	str	r1, [r2, #0]
 8007922:	d1e0      	bne.n	80078e6 <_free_r+0x26>
 8007924:	681c      	ldr	r4, [r3, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	6053      	str	r3, [r2, #4]
 800792a:	4421      	add	r1, r4
 800792c:	6011      	str	r1, [r2, #0]
 800792e:	e7da      	b.n	80078e6 <_free_r+0x26>
 8007930:	d902      	bls.n	8007938 <_free_r+0x78>
 8007932:	230c      	movs	r3, #12
 8007934:	6003      	str	r3, [r0, #0]
 8007936:	e7d6      	b.n	80078e6 <_free_r+0x26>
 8007938:	6825      	ldr	r5, [r4, #0]
 800793a:	1961      	adds	r1, r4, r5
 800793c:	428b      	cmp	r3, r1
 800793e:	bf04      	itt	eq
 8007940:	6819      	ldreq	r1, [r3, #0]
 8007942:	685b      	ldreq	r3, [r3, #4]
 8007944:	6063      	str	r3, [r4, #4]
 8007946:	bf04      	itt	eq
 8007948:	1949      	addeq	r1, r1, r5
 800794a:	6021      	streq	r1, [r4, #0]
 800794c:	6054      	str	r4, [r2, #4]
 800794e:	e7ca      	b.n	80078e6 <_free_r+0x26>
 8007950:	b003      	add	sp, #12
 8007952:	bd30      	pop	{r4, r5, pc}
 8007954:	2000037c 	.word	0x2000037c

08007958 <sbrk_aligned>:
 8007958:	b570      	push	{r4, r5, r6, lr}
 800795a:	4e0e      	ldr	r6, [pc, #56]	; (8007994 <sbrk_aligned+0x3c>)
 800795c:	460c      	mov	r4, r1
 800795e:	6831      	ldr	r1, [r6, #0]
 8007960:	4605      	mov	r5, r0
 8007962:	b911      	cbnz	r1, 800796a <sbrk_aligned+0x12>
 8007964:	f000 f9e8 	bl	8007d38 <_sbrk_r>
 8007968:	6030      	str	r0, [r6, #0]
 800796a:	4621      	mov	r1, r4
 800796c:	4628      	mov	r0, r5
 800796e:	f000 f9e3 	bl	8007d38 <_sbrk_r>
 8007972:	1c43      	adds	r3, r0, #1
 8007974:	d00a      	beq.n	800798c <sbrk_aligned+0x34>
 8007976:	1cc4      	adds	r4, r0, #3
 8007978:	f024 0403 	bic.w	r4, r4, #3
 800797c:	42a0      	cmp	r0, r4
 800797e:	d007      	beq.n	8007990 <sbrk_aligned+0x38>
 8007980:	1a21      	subs	r1, r4, r0
 8007982:	4628      	mov	r0, r5
 8007984:	f000 f9d8 	bl	8007d38 <_sbrk_r>
 8007988:	3001      	adds	r0, #1
 800798a:	d101      	bne.n	8007990 <sbrk_aligned+0x38>
 800798c:	f04f 34ff 	mov.w	r4, #4294967295
 8007990:	4620      	mov	r0, r4
 8007992:	bd70      	pop	{r4, r5, r6, pc}
 8007994:	20000380 	.word	0x20000380

08007998 <_malloc_r>:
 8007998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800799c:	1ccd      	adds	r5, r1, #3
 800799e:	f025 0503 	bic.w	r5, r5, #3
 80079a2:	3508      	adds	r5, #8
 80079a4:	2d0c      	cmp	r5, #12
 80079a6:	bf38      	it	cc
 80079a8:	250c      	movcc	r5, #12
 80079aa:	2d00      	cmp	r5, #0
 80079ac:	4607      	mov	r7, r0
 80079ae:	db01      	blt.n	80079b4 <_malloc_r+0x1c>
 80079b0:	42a9      	cmp	r1, r5
 80079b2:	d905      	bls.n	80079c0 <_malloc_r+0x28>
 80079b4:	230c      	movs	r3, #12
 80079b6:	603b      	str	r3, [r7, #0]
 80079b8:	2600      	movs	r6, #0
 80079ba:	4630      	mov	r0, r6
 80079bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079c0:	4e2e      	ldr	r6, [pc, #184]	; (8007a7c <_malloc_r+0xe4>)
 80079c2:	f000 fa25 	bl	8007e10 <__malloc_lock>
 80079c6:	6833      	ldr	r3, [r6, #0]
 80079c8:	461c      	mov	r4, r3
 80079ca:	bb34      	cbnz	r4, 8007a1a <_malloc_r+0x82>
 80079cc:	4629      	mov	r1, r5
 80079ce:	4638      	mov	r0, r7
 80079d0:	f7ff ffc2 	bl	8007958 <sbrk_aligned>
 80079d4:	1c43      	adds	r3, r0, #1
 80079d6:	4604      	mov	r4, r0
 80079d8:	d14d      	bne.n	8007a76 <_malloc_r+0xde>
 80079da:	6834      	ldr	r4, [r6, #0]
 80079dc:	4626      	mov	r6, r4
 80079de:	2e00      	cmp	r6, #0
 80079e0:	d140      	bne.n	8007a64 <_malloc_r+0xcc>
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	4631      	mov	r1, r6
 80079e6:	4638      	mov	r0, r7
 80079e8:	eb04 0803 	add.w	r8, r4, r3
 80079ec:	f000 f9a4 	bl	8007d38 <_sbrk_r>
 80079f0:	4580      	cmp	r8, r0
 80079f2:	d13a      	bne.n	8007a6a <_malloc_r+0xd2>
 80079f4:	6821      	ldr	r1, [r4, #0]
 80079f6:	3503      	adds	r5, #3
 80079f8:	1a6d      	subs	r5, r5, r1
 80079fa:	f025 0503 	bic.w	r5, r5, #3
 80079fe:	3508      	adds	r5, #8
 8007a00:	2d0c      	cmp	r5, #12
 8007a02:	bf38      	it	cc
 8007a04:	250c      	movcc	r5, #12
 8007a06:	4629      	mov	r1, r5
 8007a08:	4638      	mov	r0, r7
 8007a0a:	f7ff ffa5 	bl	8007958 <sbrk_aligned>
 8007a0e:	3001      	adds	r0, #1
 8007a10:	d02b      	beq.n	8007a6a <_malloc_r+0xd2>
 8007a12:	6823      	ldr	r3, [r4, #0]
 8007a14:	442b      	add	r3, r5
 8007a16:	6023      	str	r3, [r4, #0]
 8007a18:	e00e      	b.n	8007a38 <_malloc_r+0xa0>
 8007a1a:	6822      	ldr	r2, [r4, #0]
 8007a1c:	1b52      	subs	r2, r2, r5
 8007a1e:	d41e      	bmi.n	8007a5e <_malloc_r+0xc6>
 8007a20:	2a0b      	cmp	r2, #11
 8007a22:	d916      	bls.n	8007a52 <_malloc_r+0xba>
 8007a24:	1961      	adds	r1, r4, r5
 8007a26:	42a3      	cmp	r3, r4
 8007a28:	6025      	str	r5, [r4, #0]
 8007a2a:	bf18      	it	ne
 8007a2c:	6059      	strne	r1, [r3, #4]
 8007a2e:	6863      	ldr	r3, [r4, #4]
 8007a30:	bf08      	it	eq
 8007a32:	6031      	streq	r1, [r6, #0]
 8007a34:	5162      	str	r2, [r4, r5]
 8007a36:	604b      	str	r3, [r1, #4]
 8007a38:	4638      	mov	r0, r7
 8007a3a:	f104 060b 	add.w	r6, r4, #11
 8007a3e:	f000 f9ed 	bl	8007e1c <__malloc_unlock>
 8007a42:	f026 0607 	bic.w	r6, r6, #7
 8007a46:	1d23      	adds	r3, r4, #4
 8007a48:	1af2      	subs	r2, r6, r3
 8007a4a:	d0b6      	beq.n	80079ba <_malloc_r+0x22>
 8007a4c:	1b9b      	subs	r3, r3, r6
 8007a4e:	50a3      	str	r3, [r4, r2]
 8007a50:	e7b3      	b.n	80079ba <_malloc_r+0x22>
 8007a52:	6862      	ldr	r2, [r4, #4]
 8007a54:	42a3      	cmp	r3, r4
 8007a56:	bf0c      	ite	eq
 8007a58:	6032      	streq	r2, [r6, #0]
 8007a5a:	605a      	strne	r2, [r3, #4]
 8007a5c:	e7ec      	b.n	8007a38 <_malloc_r+0xa0>
 8007a5e:	4623      	mov	r3, r4
 8007a60:	6864      	ldr	r4, [r4, #4]
 8007a62:	e7b2      	b.n	80079ca <_malloc_r+0x32>
 8007a64:	4634      	mov	r4, r6
 8007a66:	6876      	ldr	r6, [r6, #4]
 8007a68:	e7b9      	b.n	80079de <_malloc_r+0x46>
 8007a6a:	230c      	movs	r3, #12
 8007a6c:	603b      	str	r3, [r7, #0]
 8007a6e:	4638      	mov	r0, r7
 8007a70:	f000 f9d4 	bl	8007e1c <__malloc_unlock>
 8007a74:	e7a1      	b.n	80079ba <_malloc_r+0x22>
 8007a76:	6025      	str	r5, [r4, #0]
 8007a78:	e7de      	b.n	8007a38 <_malloc_r+0xa0>
 8007a7a:	bf00      	nop
 8007a7c:	2000037c 	.word	0x2000037c

08007a80 <__ssputs_r>:
 8007a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a84:	688e      	ldr	r6, [r1, #8]
 8007a86:	429e      	cmp	r6, r3
 8007a88:	4682      	mov	sl, r0
 8007a8a:	460c      	mov	r4, r1
 8007a8c:	4690      	mov	r8, r2
 8007a8e:	461f      	mov	r7, r3
 8007a90:	d838      	bhi.n	8007b04 <__ssputs_r+0x84>
 8007a92:	898a      	ldrh	r2, [r1, #12]
 8007a94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a98:	d032      	beq.n	8007b00 <__ssputs_r+0x80>
 8007a9a:	6825      	ldr	r5, [r4, #0]
 8007a9c:	6909      	ldr	r1, [r1, #16]
 8007a9e:	eba5 0901 	sub.w	r9, r5, r1
 8007aa2:	6965      	ldr	r5, [r4, #20]
 8007aa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007aa8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007aac:	3301      	adds	r3, #1
 8007aae:	444b      	add	r3, r9
 8007ab0:	106d      	asrs	r5, r5, #1
 8007ab2:	429d      	cmp	r5, r3
 8007ab4:	bf38      	it	cc
 8007ab6:	461d      	movcc	r5, r3
 8007ab8:	0553      	lsls	r3, r2, #21
 8007aba:	d531      	bpl.n	8007b20 <__ssputs_r+0xa0>
 8007abc:	4629      	mov	r1, r5
 8007abe:	f7ff ff6b 	bl	8007998 <_malloc_r>
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	b950      	cbnz	r0, 8007adc <__ssputs_r+0x5c>
 8007ac6:	230c      	movs	r3, #12
 8007ac8:	f8ca 3000 	str.w	r3, [sl]
 8007acc:	89a3      	ldrh	r3, [r4, #12]
 8007ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ad2:	81a3      	strh	r3, [r4, #12]
 8007ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007adc:	6921      	ldr	r1, [r4, #16]
 8007ade:	464a      	mov	r2, r9
 8007ae0:	f7fe f82c 	bl	8005b3c <memcpy>
 8007ae4:	89a3      	ldrh	r3, [r4, #12]
 8007ae6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aee:	81a3      	strh	r3, [r4, #12]
 8007af0:	6126      	str	r6, [r4, #16]
 8007af2:	6165      	str	r5, [r4, #20]
 8007af4:	444e      	add	r6, r9
 8007af6:	eba5 0509 	sub.w	r5, r5, r9
 8007afa:	6026      	str	r6, [r4, #0]
 8007afc:	60a5      	str	r5, [r4, #8]
 8007afe:	463e      	mov	r6, r7
 8007b00:	42be      	cmp	r6, r7
 8007b02:	d900      	bls.n	8007b06 <__ssputs_r+0x86>
 8007b04:	463e      	mov	r6, r7
 8007b06:	6820      	ldr	r0, [r4, #0]
 8007b08:	4632      	mov	r2, r6
 8007b0a:	4641      	mov	r1, r8
 8007b0c:	f000 f966 	bl	8007ddc <memmove>
 8007b10:	68a3      	ldr	r3, [r4, #8]
 8007b12:	1b9b      	subs	r3, r3, r6
 8007b14:	60a3      	str	r3, [r4, #8]
 8007b16:	6823      	ldr	r3, [r4, #0]
 8007b18:	4433      	add	r3, r6
 8007b1a:	6023      	str	r3, [r4, #0]
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	e7db      	b.n	8007ad8 <__ssputs_r+0x58>
 8007b20:	462a      	mov	r2, r5
 8007b22:	f000 f981 	bl	8007e28 <_realloc_r>
 8007b26:	4606      	mov	r6, r0
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	d1e1      	bne.n	8007af0 <__ssputs_r+0x70>
 8007b2c:	6921      	ldr	r1, [r4, #16]
 8007b2e:	4650      	mov	r0, sl
 8007b30:	f7ff fec6 	bl	80078c0 <_free_r>
 8007b34:	e7c7      	b.n	8007ac6 <__ssputs_r+0x46>
	...

08007b38 <_svfiprintf_r>:
 8007b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3c:	4698      	mov	r8, r3
 8007b3e:	898b      	ldrh	r3, [r1, #12]
 8007b40:	061b      	lsls	r3, r3, #24
 8007b42:	b09d      	sub	sp, #116	; 0x74
 8007b44:	4607      	mov	r7, r0
 8007b46:	460d      	mov	r5, r1
 8007b48:	4614      	mov	r4, r2
 8007b4a:	d50e      	bpl.n	8007b6a <_svfiprintf_r+0x32>
 8007b4c:	690b      	ldr	r3, [r1, #16]
 8007b4e:	b963      	cbnz	r3, 8007b6a <_svfiprintf_r+0x32>
 8007b50:	2140      	movs	r1, #64	; 0x40
 8007b52:	f7ff ff21 	bl	8007998 <_malloc_r>
 8007b56:	6028      	str	r0, [r5, #0]
 8007b58:	6128      	str	r0, [r5, #16]
 8007b5a:	b920      	cbnz	r0, 8007b66 <_svfiprintf_r+0x2e>
 8007b5c:	230c      	movs	r3, #12
 8007b5e:	603b      	str	r3, [r7, #0]
 8007b60:	f04f 30ff 	mov.w	r0, #4294967295
 8007b64:	e0d1      	b.n	8007d0a <_svfiprintf_r+0x1d2>
 8007b66:	2340      	movs	r3, #64	; 0x40
 8007b68:	616b      	str	r3, [r5, #20]
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b6e:	2320      	movs	r3, #32
 8007b70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b74:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b78:	2330      	movs	r3, #48	; 0x30
 8007b7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007d24 <_svfiprintf_r+0x1ec>
 8007b7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b82:	f04f 0901 	mov.w	r9, #1
 8007b86:	4623      	mov	r3, r4
 8007b88:	469a      	mov	sl, r3
 8007b8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b8e:	b10a      	cbz	r2, 8007b94 <_svfiprintf_r+0x5c>
 8007b90:	2a25      	cmp	r2, #37	; 0x25
 8007b92:	d1f9      	bne.n	8007b88 <_svfiprintf_r+0x50>
 8007b94:	ebba 0b04 	subs.w	fp, sl, r4
 8007b98:	d00b      	beq.n	8007bb2 <_svfiprintf_r+0x7a>
 8007b9a:	465b      	mov	r3, fp
 8007b9c:	4622      	mov	r2, r4
 8007b9e:	4629      	mov	r1, r5
 8007ba0:	4638      	mov	r0, r7
 8007ba2:	f7ff ff6d 	bl	8007a80 <__ssputs_r>
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	f000 80aa 	beq.w	8007d00 <_svfiprintf_r+0x1c8>
 8007bac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bae:	445a      	add	r2, fp
 8007bb0:	9209      	str	r2, [sp, #36]	; 0x24
 8007bb2:	f89a 3000 	ldrb.w	r3, [sl]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	f000 80a2 	beq.w	8007d00 <_svfiprintf_r+0x1c8>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bc6:	f10a 0a01 	add.w	sl, sl, #1
 8007bca:	9304      	str	r3, [sp, #16]
 8007bcc:	9307      	str	r3, [sp, #28]
 8007bce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bd2:	931a      	str	r3, [sp, #104]	; 0x68
 8007bd4:	4654      	mov	r4, sl
 8007bd6:	2205      	movs	r2, #5
 8007bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bdc:	4851      	ldr	r0, [pc, #324]	; (8007d24 <_svfiprintf_r+0x1ec>)
 8007bde:	f7f8 fb1f 	bl	8000220 <memchr>
 8007be2:	9a04      	ldr	r2, [sp, #16]
 8007be4:	b9d8      	cbnz	r0, 8007c1e <_svfiprintf_r+0xe6>
 8007be6:	06d0      	lsls	r0, r2, #27
 8007be8:	bf44      	itt	mi
 8007bea:	2320      	movmi	r3, #32
 8007bec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bf0:	0711      	lsls	r1, r2, #28
 8007bf2:	bf44      	itt	mi
 8007bf4:	232b      	movmi	r3, #43	; 0x2b
 8007bf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8007bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8007c00:	d015      	beq.n	8007c2e <_svfiprintf_r+0xf6>
 8007c02:	9a07      	ldr	r2, [sp, #28]
 8007c04:	4654      	mov	r4, sl
 8007c06:	2000      	movs	r0, #0
 8007c08:	f04f 0c0a 	mov.w	ip, #10
 8007c0c:	4621      	mov	r1, r4
 8007c0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c12:	3b30      	subs	r3, #48	; 0x30
 8007c14:	2b09      	cmp	r3, #9
 8007c16:	d94e      	bls.n	8007cb6 <_svfiprintf_r+0x17e>
 8007c18:	b1b0      	cbz	r0, 8007c48 <_svfiprintf_r+0x110>
 8007c1a:	9207      	str	r2, [sp, #28]
 8007c1c:	e014      	b.n	8007c48 <_svfiprintf_r+0x110>
 8007c1e:	eba0 0308 	sub.w	r3, r0, r8
 8007c22:	fa09 f303 	lsl.w	r3, r9, r3
 8007c26:	4313      	orrs	r3, r2
 8007c28:	9304      	str	r3, [sp, #16]
 8007c2a:	46a2      	mov	sl, r4
 8007c2c:	e7d2      	b.n	8007bd4 <_svfiprintf_r+0x9c>
 8007c2e:	9b03      	ldr	r3, [sp, #12]
 8007c30:	1d19      	adds	r1, r3, #4
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	9103      	str	r1, [sp, #12]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	bfbb      	ittet	lt
 8007c3a:	425b      	neglt	r3, r3
 8007c3c:	f042 0202 	orrlt.w	r2, r2, #2
 8007c40:	9307      	strge	r3, [sp, #28]
 8007c42:	9307      	strlt	r3, [sp, #28]
 8007c44:	bfb8      	it	lt
 8007c46:	9204      	strlt	r2, [sp, #16]
 8007c48:	7823      	ldrb	r3, [r4, #0]
 8007c4a:	2b2e      	cmp	r3, #46	; 0x2e
 8007c4c:	d10c      	bne.n	8007c68 <_svfiprintf_r+0x130>
 8007c4e:	7863      	ldrb	r3, [r4, #1]
 8007c50:	2b2a      	cmp	r3, #42	; 0x2a
 8007c52:	d135      	bne.n	8007cc0 <_svfiprintf_r+0x188>
 8007c54:	9b03      	ldr	r3, [sp, #12]
 8007c56:	1d1a      	adds	r2, r3, #4
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	9203      	str	r2, [sp, #12]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	bfb8      	it	lt
 8007c60:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c64:	3402      	adds	r4, #2
 8007c66:	9305      	str	r3, [sp, #20]
 8007c68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007d34 <_svfiprintf_r+0x1fc>
 8007c6c:	7821      	ldrb	r1, [r4, #0]
 8007c6e:	2203      	movs	r2, #3
 8007c70:	4650      	mov	r0, sl
 8007c72:	f7f8 fad5 	bl	8000220 <memchr>
 8007c76:	b140      	cbz	r0, 8007c8a <_svfiprintf_r+0x152>
 8007c78:	2340      	movs	r3, #64	; 0x40
 8007c7a:	eba0 000a 	sub.w	r0, r0, sl
 8007c7e:	fa03 f000 	lsl.w	r0, r3, r0
 8007c82:	9b04      	ldr	r3, [sp, #16]
 8007c84:	4303      	orrs	r3, r0
 8007c86:	3401      	adds	r4, #1
 8007c88:	9304      	str	r3, [sp, #16]
 8007c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c8e:	4826      	ldr	r0, [pc, #152]	; (8007d28 <_svfiprintf_r+0x1f0>)
 8007c90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c94:	2206      	movs	r2, #6
 8007c96:	f7f8 fac3 	bl	8000220 <memchr>
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	d038      	beq.n	8007d10 <_svfiprintf_r+0x1d8>
 8007c9e:	4b23      	ldr	r3, [pc, #140]	; (8007d2c <_svfiprintf_r+0x1f4>)
 8007ca0:	bb1b      	cbnz	r3, 8007cea <_svfiprintf_r+0x1b2>
 8007ca2:	9b03      	ldr	r3, [sp, #12]
 8007ca4:	3307      	adds	r3, #7
 8007ca6:	f023 0307 	bic.w	r3, r3, #7
 8007caa:	3308      	adds	r3, #8
 8007cac:	9303      	str	r3, [sp, #12]
 8007cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cb0:	4433      	add	r3, r6
 8007cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8007cb4:	e767      	b.n	8007b86 <_svfiprintf_r+0x4e>
 8007cb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cba:	460c      	mov	r4, r1
 8007cbc:	2001      	movs	r0, #1
 8007cbe:	e7a5      	b.n	8007c0c <_svfiprintf_r+0xd4>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	3401      	adds	r4, #1
 8007cc4:	9305      	str	r3, [sp, #20]
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	f04f 0c0a 	mov.w	ip, #10
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cd2:	3a30      	subs	r2, #48	; 0x30
 8007cd4:	2a09      	cmp	r2, #9
 8007cd6:	d903      	bls.n	8007ce0 <_svfiprintf_r+0x1a8>
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d0c5      	beq.n	8007c68 <_svfiprintf_r+0x130>
 8007cdc:	9105      	str	r1, [sp, #20]
 8007cde:	e7c3      	b.n	8007c68 <_svfiprintf_r+0x130>
 8007ce0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e7f0      	b.n	8007ccc <_svfiprintf_r+0x194>
 8007cea:	ab03      	add	r3, sp, #12
 8007cec:	9300      	str	r3, [sp, #0]
 8007cee:	462a      	mov	r2, r5
 8007cf0:	4b0f      	ldr	r3, [pc, #60]	; (8007d30 <_svfiprintf_r+0x1f8>)
 8007cf2:	a904      	add	r1, sp, #16
 8007cf4:	4638      	mov	r0, r7
 8007cf6:	f7fd ffd7 	bl	8005ca8 <_printf_float>
 8007cfa:	1c42      	adds	r2, r0, #1
 8007cfc:	4606      	mov	r6, r0
 8007cfe:	d1d6      	bne.n	8007cae <_svfiprintf_r+0x176>
 8007d00:	89ab      	ldrh	r3, [r5, #12]
 8007d02:	065b      	lsls	r3, r3, #25
 8007d04:	f53f af2c 	bmi.w	8007b60 <_svfiprintf_r+0x28>
 8007d08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d0a:	b01d      	add	sp, #116	; 0x74
 8007d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d10:	ab03      	add	r3, sp, #12
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	462a      	mov	r2, r5
 8007d16:	4b06      	ldr	r3, [pc, #24]	; (8007d30 <_svfiprintf_r+0x1f8>)
 8007d18:	a904      	add	r1, sp, #16
 8007d1a:	4638      	mov	r0, r7
 8007d1c:	f7fe fa68 	bl	80061f0 <_printf_i>
 8007d20:	e7eb      	b.n	8007cfa <_svfiprintf_r+0x1c2>
 8007d22:	bf00      	nop
 8007d24:	08008be4 	.word	0x08008be4
 8007d28:	08008bee 	.word	0x08008bee
 8007d2c:	08005ca9 	.word	0x08005ca9
 8007d30:	08007a81 	.word	0x08007a81
 8007d34:	08008bea 	.word	0x08008bea

08007d38 <_sbrk_r>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	4d06      	ldr	r5, [pc, #24]	; (8007d54 <_sbrk_r+0x1c>)
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	4604      	mov	r4, r0
 8007d40:	4608      	mov	r0, r1
 8007d42:	602b      	str	r3, [r5, #0]
 8007d44:	f7fa faa6 	bl	8002294 <_sbrk>
 8007d48:	1c43      	adds	r3, r0, #1
 8007d4a:	d102      	bne.n	8007d52 <_sbrk_r+0x1a>
 8007d4c:	682b      	ldr	r3, [r5, #0]
 8007d4e:	b103      	cbz	r3, 8007d52 <_sbrk_r+0x1a>
 8007d50:	6023      	str	r3, [r4, #0]
 8007d52:	bd38      	pop	{r3, r4, r5, pc}
 8007d54:	20000384 	.word	0x20000384

08007d58 <__assert_func>:
 8007d58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d5a:	4614      	mov	r4, r2
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	4b09      	ldr	r3, [pc, #36]	; (8007d84 <__assert_func+0x2c>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4605      	mov	r5, r0
 8007d64:	68d8      	ldr	r0, [r3, #12]
 8007d66:	b14c      	cbz	r4, 8007d7c <__assert_func+0x24>
 8007d68:	4b07      	ldr	r3, [pc, #28]	; (8007d88 <__assert_func+0x30>)
 8007d6a:	9100      	str	r1, [sp, #0]
 8007d6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d70:	4906      	ldr	r1, [pc, #24]	; (8007d8c <__assert_func+0x34>)
 8007d72:	462b      	mov	r3, r5
 8007d74:	f000 f80e 	bl	8007d94 <fiprintf>
 8007d78:	f000 faac 	bl	80082d4 <abort>
 8007d7c:	4b04      	ldr	r3, [pc, #16]	; (8007d90 <__assert_func+0x38>)
 8007d7e:	461c      	mov	r4, r3
 8007d80:	e7f3      	b.n	8007d6a <__assert_func+0x12>
 8007d82:	bf00      	nop
 8007d84:	20000010 	.word	0x20000010
 8007d88:	08008bf5 	.word	0x08008bf5
 8007d8c:	08008c02 	.word	0x08008c02
 8007d90:	08008c30 	.word	0x08008c30

08007d94 <fiprintf>:
 8007d94:	b40e      	push	{r1, r2, r3}
 8007d96:	b503      	push	{r0, r1, lr}
 8007d98:	4601      	mov	r1, r0
 8007d9a:	ab03      	add	r3, sp, #12
 8007d9c:	4805      	ldr	r0, [pc, #20]	; (8007db4 <fiprintf+0x20>)
 8007d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007da2:	6800      	ldr	r0, [r0, #0]
 8007da4:	9301      	str	r3, [sp, #4]
 8007da6:	f000 f897 	bl	8007ed8 <_vfiprintf_r>
 8007daa:	b002      	add	sp, #8
 8007dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8007db0:	b003      	add	sp, #12
 8007db2:	4770      	bx	lr
 8007db4:	20000010 	.word	0x20000010

08007db8 <__ascii_mbtowc>:
 8007db8:	b082      	sub	sp, #8
 8007dba:	b901      	cbnz	r1, 8007dbe <__ascii_mbtowc+0x6>
 8007dbc:	a901      	add	r1, sp, #4
 8007dbe:	b142      	cbz	r2, 8007dd2 <__ascii_mbtowc+0x1a>
 8007dc0:	b14b      	cbz	r3, 8007dd6 <__ascii_mbtowc+0x1e>
 8007dc2:	7813      	ldrb	r3, [r2, #0]
 8007dc4:	600b      	str	r3, [r1, #0]
 8007dc6:	7812      	ldrb	r2, [r2, #0]
 8007dc8:	1e10      	subs	r0, r2, #0
 8007dca:	bf18      	it	ne
 8007dcc:	2001      	movne	r0, #1
 8007dce:	b002      	add	sp, #8
 8007dd0:	4770      	bx	lr
 8007dd2:	4610      	mov	r0, r2
 8007dd4:	e7fb      	b.n	8007dce <__ascii_mbtowc+0x16>
 8007dd6:	f06f 0001 	mvn.w	r0, #1
 8007dda:	e7f8      	b.n	8007dce <__ascii_mbtowc+0x16>

08007ddc <memmove>:
 8007ddc:	4288      	cmp	r0, r1
 8007dde:	b510      	push	{r4, lr}
 8007de0:	eb01 0402 	add.w	r4, r1, r2
 8007de4:	d902      	bls.n	8007dec <memmove+0x10>
 8007de6:	4284      	cmp	r4, r0
 8007de8:	4623      	mov	r3, r4
 8007dea:	d807      	bhi.n	8007dfc <memmove+0x20>
 8007dec:	1e43      	subs	r3, r0, #1
 8007dee:	42a1      	cmp	r1, r4
 8007df0:	d008      	beq.n	8007e04 <memmove+0x28>
 8007df2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007df6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dfa:	e7f8      	b.n	8007dee <memmove+0x12>
 8007dfc:	4402      	add	r2, r0
 8007dfe:	4601      	mov	r1, r0
 8007e00:	428a      	cmp	r2, r1
 8007e02:	d100      	bne.n	8007e06 <memmove+0x2a>
 8007e04:	bd10      	pop	{r4, pc}
 8007e06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e0e:	e7f7      	b.n	8007e00 <memmove+0x24>

08007e10 <__malloc_lock>:
 8007e10:	4801      	ldr	r0, [pc, #4]	; (8007e18 <__malloc_lock+0x8>)
 8007e12:	f000 bc1f 	b.w	8008654 <__retarget_lock_acquire_recursive>
 8007e16:	bf00      	nop
 8007e18:	20000388 	.word	0x20000388

08007e1c <__malloc_unlock>:
 8007e1c:	4801      	ldr	r0, [pc, #4]	; (8007e24 <__malloc_unlock+0x8>)
 8007e1e:	f000 bc1a 	b.w	8008656 <__retarget_lock_release_recursive>
 8007e22:	bf00      	nop
 8007e24:	20000388 	.word	0x20000388

08007e28 <_realloc_r>:
 8007e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e2c:	4680      	mov	r8, r0
 8007e2e:	4614      	mov	r4, r2
 8007e30:	460e      	mov	r6, r1
 8007e32:	b921      	cbnz	r1, 8007e3e <_realloc_r+0x16>
 8007e34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e38:	4611      	mov	r1, r2
 8007e3a:	f7ff bdad 	b.w	8007998 <_malloc_r>
 8007e3e:	b92a      	cbnz	r2, 8007e4c <_realloc_r+0x24>
 8007e40:	f7ff fd3e 	bl	80078c0 <_free_r>
 8007e44:	4625      	mov	r5, r4
 8007e46:	4628      	mov	r0, r5
 8007e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e4c:	f000 fc6a 	bl	8008724 <_malloc_usable_size_r>
 8007e50:	4284      	cmp	r4, r0
 8007e52:	4607      	mov	r7, r0
 8007e54:	d802      	bhi.n	8007e5c <_realloc_r+0x34>
 8007e56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e5a:	d812      	bhi.n	8007e82 <_realloc_r+0x5a>
 8007e5c:	4621      	mov	r1, r4
 8007e5e:	4640      	mov	r0, r8
 8007e60:	f7ff fd9a 	bl	8007998 <_malloc_r>
 8007e64:	4605      	mov	r5, r0
 8007e66:	2800      	cmp	r0, #0
 8007e68:	d0ed      	beq.n	8007e46 <_realloc_r+0x1e>
 8007e6a:	42bc      	cmp	r4, r7
 8007e6c:	4622      	mov	r2, r4
 8007e6e:	4631      	mov	r1, r6
 8007e70:	bf28      	it	cs
 8007e72:	463a      	movcs	r2, r7
 8007e74:	f7fd fe62 	bl	8005b3c <memcpy>
 8007e78:	4631      	mov	r1, r6
 8007e7a:	4640      	mov	r0, r8
 8007e7c:	f7ff fd20 	bl	80078c0 <_free_r>
 8007e80:	e7e1      	b.n	8007e46 <_realloc_r+0x1e>
 8007e82:	4635      	mov	r5, r6
 8007e84:	e7df      	b.n	8007e46 <_realloc_r+0x1e>

08007e86 <__sfputc_r>:
 8007e86:	6893      	ldr	r3, [r2, #8]
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	b410      	push	{r4}
 8007e8e:	6093      	str	r3, [r2, #8]
 8007e90:	da08      	bge.n	8007ea4 <__sfputc_r+0x1e>
 8007e92:	6994      	ldr	r4, [r2, #24]
 8007e94:	42a3      	cmp	r3, r4
 8007e96:	db01      	blt.n	8007e9c <__sfputc_r+0x16>
 8007e98:	290a      	cmp	r1, #10
 8007e9a:	d103      	bne.n	8007ea4 <__sfputc_r+0x1e>
 8007e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ea0:	f000 b94a 	b.w	8008138 <__swbuf_r>
 8007ea4:	6813      	ldr	r3, [r2, #0]
 8007ea6:	1c58      	adds	r0, r3, #1
 8007ea8:	6010      	str	r0, [r2, #0]
 8007eaa:	7019      	strb	r1, [r3, #0]
 8007eac:	4608      	mov	r0, r1
 8007eae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <__sfputs_r>:
 8007eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	460f      	mov	r7, r1
 8007eba:	4614      	mov	r4, r2
 8007ebc:	18d5      	adds	r5, r2, r3
 8007ebe:	42ac      	cmp	r4, r5
 8007ec0:	d101      	bne.n	8007ec6 <__sfputs_r+0x12>
 8007ec2:	2000      	movs	r0, #0
 8007ec4:	e007      	b.n	8007ed6 <__sfputs_r+0x22>
 8007ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eca:	463a      	mov	r2, r7
 8007ecc:	4630      	mov	r0, r6
 8007ece:	f7ff ffda 	bl	8007e86 <__sfputc_r>
 8007ed2:	1c43      	adds	r3, r0, #1
 8007ed4:	d1f3      	bne.n	8007ebe <__sfputs_r+0xa>
 8007ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ed8 <_vfiprintf_r>:
 8007ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007edc:	460d      	mov	r5, r1
 8007ede:	b09d      	sub	sp, #116	; 0x74
 8007ee0:	4614      	mov	r4, r2
 8007ee2:	4698      	mov	r8, r3
 8007ee4:	4606      	mov	r6, r0
 8007ee6:	b118      	cbz	r0, 8007ef0 <_vfiprintf_r+0x18>
 8007ee8:	6983      	ldr	r3, [r0, #24]
 8007eea:	b90b      	cbnz	r3, 8007ef0 <_vfiprintf_r+0x18>
 8007eec:	f000 fb14 	bl	8008518 <__sinit>
 8007ef0:	4b89      	ldr	r3, [pc, #548]	; (8008118 <_vfiprintf_r+0x240>)
 8007ef2:	429d      	cmp	r5, r3
 8007ef4:	d11b      	bne.n	8007f2e <_vfiprintf_r+0x56>
 8007ef6:	6875      	ldr	r5, [r6, #4]
 8007ef8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007efa:	07d9      	lsls	r1, r3, #31
 8007efc:	d405      	bmi.n	8007f0a <_vfiprintf_r+0x32>
 8007efe:	89ab      	ldrh	r3, [r5, #12]
 8007f00:	059a      	lsls	r2, r3, #22
 8007f02:	d402      	bmi.n	8007f0a <_vfiprintf_r+0x32>
 8007f04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f06:	f000 fba5 	bl	8008654 <__retarget_lock_acquire_recursive>
 8007f0a:	89ab      	ldrh	r3, [r5, #12]
 8007f0c:	071b      	lsls	r3, r3, #28
 8007f0e:	d501      	bpl.n	8007f14 <_vfiprintf_r+0x3c>
 8007f10:	692b      	ldr	r3, [r5, #16]
 8007f12:	b9eb      	cbnz	r3, 8007f50 <_vfiprintf_r+0x78>
 8007f14:	4629      	mov	r1, r5
 8007f16:	4630      	mov	r0, r6
 8007f18:	f000 f96e 	bl	80081f8 <__swsetup_r>
 8007f1c:	b1c0      	cbz	r0, 8007f50 <_vfiprintf_r+0x78>
 8007f1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f20:	07dc      	lsls	r4, r3, #31
 8007f22:	d50e      	bpl.n	8007f42 <_vfiprintf_r+0x6a>
 8007f24:	f04f 30ff 	mov.w	r0, #4294967295
 8007f28:	b01d      	add	sp, #116	; 0x74
 8007f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f2e:	4b7b      	ldr	r3, [pc, #492]	; (800811c <_vfiprintf_r+0x244>)
 8007f30:	429d      	cmp	r5, r3
 8007f32:	d101      	bne.n	8007f38 <_vfiprintf_r+0x60>
 8007f34:	68b5      	ldr	r5, [r6, #8]
 8007f36:	e7df      	b.n	8007ef8 <_vfiprintf_r+0x20>
 8007f38:	4b79      	ldr	r3, [pc, #484]	; (8008120 <_vfiprintf_r+0x248>)
 8007f3a:	429d      	cmp	r5, r3
 8007f3c:	bf08      	it	eq
 8007f3e:	68f5      	ldreq	r5, [r6, #12]
 8007f40:	e7da      	b.n	8007ef8 <_vfiprintf_r+0x20>
 8007f42:	89ab      	ldrh	r3, [r5, #12]
 8007f44:	0598      	lsls	r0, r3, #22
 8007f46:	d4ed      	bmi.n	8007f24 <_vfiprintf_r+0x4c>
 8007f48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f4a:	f000 fb84 	bl	8008656 <__retarget_lock_release_recursive>
 8007f4e:	e7e9      	b.n	8007f24 <_vfiprintf_r+0x4c>
 8007f50:	2300      	movs	r3, #0
 8007f52:	9309      	str	r3, [sp, #36]	; 0x24
 8007f54:	2320      	movs	r3, #32
 8007f56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f5e:	2330      	movs	r3, #48	; 0x30
 8007f60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008124 <_vfiprintf_r+0x24c>
 8007f64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f68:	f04f 0901 	mov.w	r9, #1
 8007f6c:	4623      	mov	r3, r4
 8007f6e:	469a      	mov	sl, r3
 8007f70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f74:	b10a      	cbz	r2, 8007f7a <_vfiprintf_r+0xa2>
 8007f76:	2a25      	cmp	r2, #37	; 0x25
 8007f78:	d1f9      	bne.n	8007f6e <_vfiprintf_r+0x96>
 8007f7a:	ebba 0b04 	subs.w	fp, sl, r4
 8007f7e:	d00b      	beq.n	8007f98 <_vfiprintf_r+0xc0>
 8007f80:	465b      	mov	r3, fp
 8007f82:	4622      	mov	r2, r4
 8007f84:	4629      	mov	r1, r5
 8007f86:	4630      	mov	r0, r6
 8007f88:	f7ff ff94 	bl	8007eb4 <__sfputs_r>
 8007f8c:	3001      	adds	r0, #1
 8007f8e:	f000 80aa 	beq.w	80080e6 <_vfiprintf_r+0x20e>
 8007f92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f94:	445a      	add	r2, fp
 8007f96:	9209      	str	r2, [sp, #36]	; 0x24
 8007f98:	f89a 3000 	ldrb.w	r3, [sl]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f000 80a2 	beq.w	80080e6 <_vfiprintf_r+0x20e>
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fac:	f10a 0a01 	add.w	sl, sl, #1
 8007fb0:	9304      	str	r3, [sp, #16]
 8007fb2:	9307      	str	r3, [sp, #28]
 8007fb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fb8:	931a      	str	r3, [sp, #104]	; 0x68
 8007fba:	4654      	mov	r4, sl
 8007fbc:	2205      	movs	r2, #5
 8007fbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fc2:	4858      	ldr	r0, [pc, #352]	; (8008124 <_vfiprintf_r+0x24c>)
 8007fc4:	f7f8 f92c 	bl	8000220 <memchr>
 8007fc8:	9a04      	ldr	r2, [sp, #16]
 8007fca:	b9d8      	cbnz	r0, 8008004 <_vfiprintf_r+0x12c>
 8007fcc:	06d1      	lsls	r1, r2, #27
 8007fce:	bf44      	itt	mi
 8007fd0:	2320      	movmi	r3, #32
 8007fd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fd6:	0713      	lsls	r3, r2, #28
 8007fd8:	bf44      	itt	mi
 8007fda:	232b      	movmi	r3, #43	; 0x2b
 8007fdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fe0:	f89a 3000 	ldrb.w	r3, [sl]
 8007fe4:	2b2a      	cmp	r3, #42	; 0x2a
 8007fe6:	d015      	beq.n	8008014 <_vfiprintf_r+0x13c>
 8007fe8:	9a07      	ldr	r2, [sp, #28]
 8007fea:	4654      	mov	r4, sl
 8007fec:	2000      	movs	r0, #0
 8007fee:	f04f 0c0a 	mov.w	ip, #10
 8007ff2:	4621      	mov	r1, r4
 8007ff4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ff8:	3b30      	subs	r3, #48	; 0x30
 8007ffa:	2b09      	cmp	r3, #9
 8007ffc:	d94e      	bls.n	800809c <_vfiprintf_r+0x1c4>
 8007ffe:	b1b0      	cbz	r0, 800802e <_vfiprintf_r+0x156>
 8008000:	9207      	str	r2, [sp, #28]
 8008002:	e014      	b.n	800802e <_vfiprintf_r+0x156>
 8008004:	eba0 0308 	sub.w	r3, r0, r8
 8008008:	fa09 f303 	lsl.w	r3, r9, r3
 800800c:	4313      	orrs	r3, r2
 800800e:	9304      	str	r3, [sp, #16]
 8008010:	46a2      	mov	sl, r4
 8008012:	e7d2      	b.n	8007fba <_vfiprintf_r+0xe2>
 8008014:	9b03      	ldr	r3, [sp, #12]
 8008016:	1d19      	adds	r1, r3, #4
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	9103      	str	r1, [sp, #12]
 800801c:	2b00      	cmp	r3, #0
 800801e:	bfbb      	ittet	lt
 8008020:	425b      	neglt	r3, r3
 8008022:	f042 0202 	orrlt.w	r2, r2, #2
 8008026:	9307      	strge	r3, [sp, #28]
 8008028:	9307      	strlt	r3, [sp, #28]
 800802a:	bfb8      	it	lt
 800802c:	9204      	strlt	r2, [sp, #16]
 800802e:	7823      	ldrb	r3, [r4, #0]
 8008030:	2b2e      	cmp	r3, #46	; 0x2e
 8008032:	d10c      	bne.n	800804e <_vfiprintf_r+0x176>
 8008034:	7863      	ldrb	r3, [r4, #1]
 8008036:	2b2a      	cmp	r3, #42	; 0x2a
 8008038:	d135      	bne.n	80080a6 <_vfiprintf_r+0x1ce>
 800803a:	9b03      	ldr	r3, [sp, #12]
 800803c:	1d1a      	adds	r2, r3, #4
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	9203      	str	r2, [sp, #12]
 8008042:	2b00      	cmp	r3, #0
 8008044:	bfb8      	it	lt
 8008046:	f04f 33ff 	movlt.w	r3, #4294967295
 800804a:	3402      	adds	r4, #2
 800804c:	9305      	str	r3, [sp, #20]
 800804e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008134 <_vfiprintf_r+0x25c>
 8008052:	7821      	ldrb	r1, [r4, #0]
 8008054:	2203      	movs	r2, #3
 8008056:	4650      	mov	r0, sl
 8008058:	f7f8 f8e2 	bl	8000220 <memchr>
 800805c:	b140      	cbz	r0, 8008070 <_vfiprintf_r+0x198>
 800805e:	2340      	movs	r3, #64	; 0x40
 8008060:	eba0 000a 	sub.w	r0, r0, sl
 8008064:	fa03 f000 	lsl.w	r0, r3, r0
 8008068:	9b04      	ldr	r3, [sp, #16]
 800806a:	4303      	orrs	r3, r0
 800806c:	3401      	adds	r4, #1
 800806e:	9304      	str	r3, [sp, #16]
 8008070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008074:	482c      	ldr	r0, [pc, #176]	; (8008128 <_vfiprintf_r+0x250>)
 8008076:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800807a:	2206      	movs	r2, #6
 800807c:	f7f8 f8d0 	bl	8000220 <memchr>
 8008080:	2800      	cmp	r0, #0
 8008082:	d03f      	beq.n	8008104 <_vfiprintf_r+0x22c>
 8008084:	4b29      	ldr	r3, [pc, #164]	; (800812c <_vfiprintf_r+0x254>)
 8008086:	bb1b      	cbnz	r3, 80080d0 <_vfiprintf_r+0x1f8>
 8008088:	9b03      	ldr	r3, [sp, #12]
 800808a:	3307      	adds	r3, #7
 800808c:	f023 0307 	bic.w	r3, r3, #7
 8008090:	3308      	adds	r3, #8
 8008092:	9303      	str	r3, [sp, #12]
 8008094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008096:	443b      	add	r3, r7
 8008098:	9309      	str	r3, [sp, #36]	; 0x24
 800809a:	e767      	b.n	8007f6c <_vfiprintf_r+0x94>
 800809c:	fb0c 3202 	mla	r2, ip, r2, r3
 80080a0:	460c      	mov	r4, r1
 80080a2:	2001      	movs	r0, #1
 80080a4:	e7a5      	b.n	8007ff2 <_vfiprintf_r+0x11a>
 80080a6:	2300      	movs	r3, #0
 80080a8:	3401      	adds	r4, #1
 80080aa:	9305      	str	r3, [sp, #20]
 80080ac:	4619      	mov	r1, r3
 80080ae:	f04f 0c0a 	mov.w	ip, #10
 80080b2:	4620      	mov	r0, r4
 80080b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080b8:	3a30      	subs	r2, #48	; 0x30
 80080ba:	2a09      	cmp	r2, #9
 80080bc:	d903      	bls.n	80080c6 <_vfiprintf_r+0x1ee>
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d0c5      	beq.n	800804e <_vfiprintf_r+0x176>
 80080c2:	9105      	str	r1, [sp, #20]
 80080c4:	e7c3      	b.n	800804e <_vfiprintf_r+0x176>
 80080c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80080ca:	4604      	mov	r4, r0
 80080cc:	2301      	movs	r3, #1
 80080ce:	e7f0      	b.n	80080b2 <_vfiprintf_r+0x1da>
 80080d0:	ab03      	add	r3, sp, #12
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	462a      	mov	r2, r5
 80080d6:	4b16      	ldr	r3, [pc, #88]	; (8008130 <_vfiprintf_r+0x258>)
 80080d8:	a904      	add	r1, sp, #16
 80080da:	4630      	mov	r0, r6
 80080dc:	f7fd fde4 	bl	8005ca8 <_printf_float>
 80080e0:	4607      	mov	r7, r0
 80080e2:	1c78      	adds	r0, r7, #1
 80080e4:	d1d6      	bne.n	8008094 <_vfiprintf_r+0x1bc>
 80080e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080e8:	07d9      	lsls	r1, r3, #31
 80080ea:	d405      	bmi.n	80080f8 <_vfiprintf_r+0x220>
 80080ec:	89ab      	ldrh	r3, [r5, #12]
 80080ee:	059a      	lsls	r2, r3, #22
 80080f0:	d402      	bmi.n	80080f8 <_vfiprintf_r+0x220>
 80080f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080f4:	f000 faaf 	bl	8008656 <__retarget_lock_release_recursive>
 80080f8:	89ab      	ldrh	r3, [r5, #12]
 80080fa:	065b      	lsls	r3, r3, #25
 80080fc:	f53f af12 	bmi.w	8007f24 <_vfiprintf_r+0x4c>
 8008100:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008102:	e711      	b.n	8007f28 <_vfiprintf_r+0x50>
 8008104:	ab03      	add	r3, sp, #12
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	462a      	mov	r2, r5
 800810a:	4b09      	ldr	r3, [pc, #36]	; (8008130 <_vfiprintf_r+0x258>)
 800810c:	a904      	add	r1, sp, #16
 800810e:	4630      	mov	r0, r6
 8008110:	f7fe f86e 	bl	80061f0 <_printf_i>
 8008114:	e7e4      	b.n	80080e0 <_vfiprintf_r+0x208>
 8008116:	bf00      	nop
 8008118:	08008d5c 	.word	0x08008d5c
 800811c:	08008d7c 	.word	0x08008d7c
 8008120:	08008d3c 	.word	0x08008d3c
 8008124:	08008be4 	.word	0x08008be4
 8008128:	08008bee 	.word	0x08008bee
 800812c:	08005ca9 	.word	0x08005ca9
 8008130:	08007eb5 	.word	0x08007eb5
 8008134:	08008bea 	.word	0x08008bea

08008138 <__swbuf_r>:
 8008138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813a:	460e      	mov	r6, r1
 800813c:	4614      	mov	r4, r2
 800813e:	4605      	mov	r5, r0
 8008140:	b118      	cbz	r0, 800814a <__swbuf_r+0x12>
 8008142:	6983      	ldr	r3, [r0, #24]
 8008144:	b90b      	cbnz	r3, 800814a <__swbuf_r+0x12>
 8008146:	f000 f9e7 	bl	8008518 <__sinit>
 800814a:	4b21      	ldr	r3, [pc, #132]	; (80081d0 <__swbuf_r+0x98>)
 800814c:	429c      	cmp	r4, r3
 800814e:	d12b      	bne.n	80081a8 <__swbuf_r+0x70>
 8008150:	686c      	ldr	r4, [r5, #4]
 8008152:	69a3      	ldr	r3, [r4, #24]
 8008154:	60a3      	str	r3, [r4, #8]
 8008156:	89a3      	ldrh	r3, [r4, #12]
 8008158:	071a      	lsls	r2, r3, #28
 800815a:	d52f      	bpl.n	80081bc <__swbuf_r+0x84>
 800815c:	6923      	ldr	r3, [r4, #16]
 800815e:	b36b      	cbz	r3, 80081bc <__swbuf_r+0x84>
 8008160:	6923      	ldr	r3, [r4, #16]
 8008162:	6820      	ldr	r0, [r4, #0]
 8008164:	1ac0      	subs	r0, r0, r3
 8008166:	6963      	ldr	r3, [r4, #20]
 8008168:	b2f6      	uxtb	r6, r6
 800816a:	4283      	cmp	r3, r0
 800816c:	4637      	mov	r7, r6
 800816e:	dc04      	bgt.n	800817a <__swbuf_r+0x42>
 8008170:	4621      	mov	r1, r4
 8008172:	4628      	mov	r0, r5
 8008174:	f000 f93c 	bl	80083f0 <_fflush_r>
 8008178:	bb30      	cbnz	r0, 80081c8 <__swbuf_r+0x90>
 800817a:	68a3      	ldr	r3, [r4, #8]
 800817c:	3b01      	subs	r3, #1
 800817e:	60a3      	str	r3, [r4, #8]
 8008180:	6823      	ldr	r3, [r4, #0]
 8008182:	1c5a      	adds	r2, r3, #1
 8008184:	6022      	str	r2, [r4, #0]
 8008186:	701e      	strb	r6, [r3, #0]
 8008188:	6963      	ldr	r3, [r4, #20]
 800818a:	3001      	adds	r0, #1
 800818c:	4283      	cmp	r3, r0
 800818e:	d004      	beq.n	800819a <__swbuf_r+0x62>
 8008190:	89a3      	ldrh	r3, [r4, #12]
 8008192:	07db      	lsls	r3, r3, #31
 8008194:	d506      	bpl.n	80081a4 <__swbuf_r+0x6c>
 8008196:	2e0a      	cmp	r6, #10
 8008198:	d104      	bne.n	80081a4 <__swbuf_r+0x6c>
 800819a:	4621      	mov	r1, r4
 800819c:	4628      	mov	r0, r5
 800819e:	f000 f927 	bl	80083f0 <_fflush_r>
 80081a2:	b988      	cbnz	r0, 80081c8 <__swbuf_r+0x90>
 80081a4:	4638      	mov	r0, r7
 80081a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081a8:	4b0a      	ldr	r3, [pc, #40]	; (80081d4 <__swbuf_r+0x9c>)
 80081aa:	429c      	cmp	r4, r3
 80081ac:	d101      	bne.n	80081b2 <__swbuf_r+0x7a>
 80081ae:	68ac      	ldr	r4, [r5, #8]
 80081b0:	e7cf      	b.n	8008152 <__swbuf_r+0x1a>
 80081b2:	4b09      	ldr	r3, [pc, #36]	; (80081d8 <__swbuf_r+0xa0>)
 80081b4:	429c      	cmp	r4, r3
 80081b6:	bf08      	it	eq
 80081b8:	68ec      	ldreq	r4, [r5, #12]
 80081ba:	e7ca      	b.n	8008152 <__swbuf_r+0x1a>
 80081bc:	4621      	mov	r1, r4
 80081be:	4628      	mov	r0, r5
 80081c0:	f000 f81a 	bl	80081f8 <__swsetup_r>
 80081c4:	2800      	cmp	r0, #0
 80081c6:	d0cb      	beq.n	8008160 <__swbuf_r+0x28>
 80081c8:	f04f 37ff 	mov.w	r7, #4294967295
 80081cc:	e7ea      	b.n	80081a4 <__swbuf_r+0x6c>
 80081ce:	bf00      	nop
 80081d0:	08008d5c 	.word	0x08008d5c
 80081d4:	08008d7c 	.word	0x08008d7c
 80081d8:	08008d3c 	.word	0x08008d3c

080081dc <__ascii_wctomb>:
 80081dc:	b149      	cbz	r1, 80081f2 <__ascii_wctomb+0x16>
 80081de:	2aff      	cmp	r2, #255	; 0xff
 80081e0:	bf85      	ittet	hi
 80081e2:	238a      	movhi	r3, #138	; 0x8a
 80081e4:	6003      	strhi	r3, [r0, #0]
 80081e6:	700a      	strbls	r2, [r1, #0]
 80081e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80081ec:	bf98      	it	ls
 80081ee:	2001      	movls	r0, #1
 80081f0:	4770      	bx	lr
 80081f2:	4608      	mov	r0, r1
 80081f4:	4770      	bx	lr
	...

080081f8 <__swsetup_r>:
 80081f8:	4b32      	ldr	r3, [pc, #200]	; (80082c4 <__swsetup_r+0xcc>)
 80081fa:	b570      	push	{r4, r5, r6, lr}
 80081fc:	681d      	ldr	r5, [r3, #0]
 80081fe:	4606      	mov	r6, r0
 8008200:	460c      	mov	r4, r1
 8008202:	b125      	cbz	r5, 800820e <__swsetup_r+0x16>
 8008204:	69ab      	ldr	r3, [r5, #24]
 8008206:	b913      	cbnz	r3, 800820e <__swsetup_r+0x16>
 8008208:	4628      	mov	r0, r5
 800820a:	f000 f985 	bl	8008518 <__sinit>
 800820e:	4b2e      	ldr	r3, [pc, #184]	; (80082c8 <__swsetup_r+0xd0>)
 8008210:	429c      	cmp	r4, r3
 8008212:	d10f      	bne.n	8008234 <__swsetup_r+0x3c>
 8008214:	686c      	ldr	r4, [r5, #4]
 8008216:	89a3      	ldrh	r3, [r4, #12]
 8008218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800821c:	0719      	lsls	r1, r3, #28
 800821e:	d42c      	bmi.n	800827a <__swsetup_r+0x82>
 8008220:	06dd      	lsls	r5, r3, #27
 8008222:	d411      	bmi.n	8008248 <__swsetup_r+0x50>
 8008224:	2309      	movs	r3, #9
 8008226:	6033      	str	r3, [r6, #0]
 8008228:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800822c:	81a3      	strh	r3, [r4, #12]
 800822e:	f04f 30ff 	mov.w	r0, #4294967295
 8008232:	e03e      	b.n	80082b2 <__swsetup_r+0xba>
 8008234:	4b25      	ldr	r3, [pc, #148]	; (80082cc <__swsetup_r+0xd4>)
 8008236:	429c      	cmp	r4, r3
 8008238:	d101      	bne.n	800823e <__swsetup_r+0x46>
 800823a:	68ac      	ldr	r4, [r5, #8]
 800823c:	e7eb      	b.n	8008216 <__swsetup_r+0x1e>
 800823e:	4b24      	ldr	r3, [pc, #144]	; (80082d0 <__swsetup_r+0xd8>)
 8008240:	429c      	cmp	r4, r3
 8008242:	bf08      	it	eq
 8008244:	68ec      	ldreq	r4, [r5, #12]
 8008246:	e7e6      	b.n	8008216 <__swsetup_r+0x1e>
 8008248:	0758      	lsls	r0, r3, #29
 800824a:	d512      	bpl.n	8008272 <__swsetup_r+0x7a>
 800824c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800824e:	b141      	cbz	r1, 8008262 <__swsetup_r+0x6a>
 8008250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008254:	4299      	cmp	r1, r3
 8008256:	d002      	beq.n	800825e <__swsetup_r+0x66>
 8008258:	4630      	mov	r0, r6
 800825a:	f7ff fb31 	bl	80078c0 <_free_r>
 800825e:	2300      	movs	r3, #0
 8008260:	6363      	str	r3, [r4, #52]	; 0x34
 8008262:	89a3      	ldrh	r3, [r4, #12]
 8008264:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008268:	81a3      	strh	r3, [r4, #12]
 800826a:	2300      	movs	r3, #0
 800826c:	6063      	str	r3, [r4, #4]
 800826e:	6923      	ldr	r3, [r4, #16]
 8008270:	6023      	str	r3, [r4, #0]
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	f043 0308 	orr.w	r3, r3, #8
 8008278:	81a3      	strh	r3, [r4, #12]
 800827a:	6923      	ldr	r3, [r4, #16]
 800827c:	b94b      	cbnz	r3, 8008292 <__swsetup_r+0x9a>
 800827e:	89a3      	ldrh	r3, [r4, #12]
 8008280:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008288:	d003      	beq.n	8008292 <__swsetup_r+0x9a>
 800828a:	4621      	mov	r1, r4
 800828c:	4630      	mov	r0, r6
 800828e:	f000 fa09 	bl	80086a4 <__smakebuf_r>
 8008292:	89a0      	ldrh	r0, [r4, #12]
 8008294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008298:	f010 0301 	ands.w	r3, r0, #1
 800829c:	d00a      	beq.n	80082b4 <__swsetup_r+0xbc>
 800829e:	2300      	movs	r3, #0
 80082a0:	60a3      	str	r3, [r4, #8]
 80082a2:	6963      	ldr	r3, [r4, #20]
 80082a4:	425b      	negs	r3, r3
 80082a6:	61a3      	str	r3, [r4, #24]
 80082a8:	6923      	ldr	r3, [r4, #16]
 80082aa:	b943      	cbnz	r3, 80082be <__swsetup_r+0xc6>
 80082ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80082b0:	d1ba      	bne.n	8008228 <__swsetup_r+0x30>
 80082b2:	bd70      	pop	{r4, r5, r6, pc}
 80082b4:	0781      	lsls	r1, r0, #30
 80082b6:	bf58      	it	pl
 80082b8:	6963      	ldrpl	r3, [r4, #20]
 80082ba:	60a3      	str	r3, [r4, #8]
 80082bc:	e7f4      	b.n	80082a8 <__swsetup_r+0xb0>
 80082be:	2000      	movs	r0, #0
 80082c0:	e7f7      	b.n	80082b2 <__swsetup_r+0xba>
 80082c2:	bf00      	nop
 80082c4:	20000010 	.word	0x20000010
 80082c8:	08008d5c 	.word	0x08008d5c
 80082cc:	08008d7c 	.word	0x08008d7c
 80082d0:	08008d3c 	.word	0x08008d3c

080082d4 <abort>:
 80082d4:	b508      	push	{r3, lr}
 80082d6:	2006      	movs	r0, #6
 80082d8:	f000 fa54 	bl	8008784 <raise>
 80082dc:	2001      	movs	r0, #1
 80082de:	f7f9 ff61 	bl	80021a4 <_exit>
	...

080082e4 <__sflush_r>:
 80082e4:	898a      	ldrh	r2, [r1, #12]
 80082e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ea:	4605      	mov	r5, r0
 80082ec:	0710      	lsls	r0, r2, #28
 80082ee:	460c      	mov	r4, r1
 80082f0:	d458      	bmi.n	80083a4 <__sflush_r+0xc0>
 80082f2:	684b      	ldr	r3, [r1, #4]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	dc05      	bgt.n	8008304 <__sflush_r+0x20>
 80082f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	dc02      	bgt.n	8008304 <__sflush_r+0x20>
 80082fe:	2000      	movs	r0, #0
 8008300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008304:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008306:	2e00      	cmp	r6, #0
 8008308:	d0f9      	beq.n	80082fe <__sflush_r+0x1a>
 800830a:	2300      	movs	r3, #0
 800830c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008310:	682f      	ldr	r7, [r5, #0]
 8008312:	602b      	str	r3, [r5, #0]
 8008314:	d032      	beq.n	800837c <__sflush_r+0x98>
 8008316:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008318:	89a3      	ldrh	r3, [r4, #12]
 800831a:	075a      	lsls	r2, r3, #29
 800831c:	d505      	bpl.n	800832a <__sflush_r+0x46>
 800831e:	6863      	ldr	r3, [r4, #4]
 8008320:	1ac0      	subs	r0, r0, r3
 8008322:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008324:	b10b      	cbz	r3, 800832a <__sflush_r+0x46>
 8008326:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008328:	1ac0      	subs	r0, r0, r3
 800832a:	2300      	movs	r3, #0
 800832c:	4602      	mov	r2, r0
 800832e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008330:	6a21      	ldr	r1, [r4, #32]
 8008332:	4628      	mov	r0, r5
 8008334:	47b0      	blx	r6
 8008336:	1c43      	adds	r3, r0, #1
 8008338:	89a3      	ldrh	r3, [r4, #12]
 800833a:	d106      	bne.n	800834a <__sflush_r+0x66>
 800833c:	6829      	ldr	r1, [r5, #0]
 800833e:	291d      	cmp	r1, #29
 8008340:	d82c      	bhi.n	800839c <__sflush_r+0xb8>
 8008342:	4a2a      	ldr	r2, [pc, #168]	; (80083ec <__sflush_r+0x108>)
 8008344:	40ca      	lsrs	r2, r1
 8008346:	07d6      	lsls	r6, r2, #31
 8008348:	d528      	bpl.n	800839c <__sflush_r+0xb8>
 800834a:	2200      	movs	r2, #0
 800834c:	6062      	str	r2, [r4, #4]
 800834e:	04d9      	lsls	r1, r3, #19
 8008350:	6922      	ldr	r2, [r4, #16]
 8008352:	6022      	str	r2, [r4, #0]
 8008354:	d504      	bpl.n	8008360 <__sflush_r+0x7c>
 8008356:	1c42      	adds	r2, r0, #1
 8008358:	d101      	bne.n	800835e <__sflush_r+0x7a>
 800835a:	682b      	ldr	r3, [r5, #0]
 800835c:	b903      	cbnz	r3, 8008360 <__sflush_r+0x7c>
 800835e:	6560      	str	r0, [r4, #84]	; 0x54
 8008360:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008362:	602f      	str	r7, [r5, #0]
 8008364:	2900      	cmp	r1, #0
 8008366:	d0ca      	beq.n	80082fe <__sflush_r+0x1a>
 8008368:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800836c:	4299      	cmp	r1, r3
 800836e:	d002      	beq.n	8008376 <__sflush_r+0x92>
 8008370:	4628      	mov	r0, r5
 8008372:	f7ff faa5 	bl	80078c0 <_free_r>
 8008376:	2000      	movs	r0, #0
 8008378:	6360      	str	r0, [r4, #52]	; 0x34
 800837a:	e7c1      	b.n	8008300 <__sflush_r+0x1c>
 800837c:	6a21      	ldr	r1, [r4, #32]
 800837e:	2301      	movs	r3, #1
 8008380:	4628      	mov	r0, r5
 8008382:	47b0      	blx	r6
 8008384:	1c41      	adds	r1, r0, #1
 8008386:	d1c7      	bne.n	8008318 <__sflush_r+0x34>
 8008388:	682b      	ldr	r3, [r5, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d0c4      	beq.n	8008318 <__sflush_r+0x34>
 800838e:	2b1d      	cmp	r3, #29
 8008390:	d001      	beq.n	8008396 <__sflush_r+0xb2>
 8008392:	2b16      	cmp	r3, #22
 8008394:	d101      	bne.n	800839a <__sflush_r+0xb6>
 8008396:	602f      	str	r7, [r5, #0]
 8008398:	e7b1      	b.n	80082fe <__sflush_r+0x1a>
 800839a:	89a3      	ldrh	r3, [r4, #12]
 800839c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083a0:	81a3      	strh	r3, [r4, #12]
 80083a2:	e7ad      	b.n	8008300 <__sflush_r+0x1c>
 80083a4:	690f      	ldr	r7, [r1, #16]
 80083a6:	2f00      	cmp	r7, #0
 80083a8:	d0a9      	beq.n	80082fe <__sflush_r+0x1a>
 80083aa:	0793      	lsls	r3, r2, #30
 80083ac:	680e      	ldr	r6, [r1, #0]
 80083ae:	bf08      	it	eq
 80083b0:	694b      	ldreq	r3, [r1, #20]
 80083b2:	600f      	str	r7, [r1, #0]
 80083b4:	bf18      	it	ne
 80083b6:	2300      	movne	r3, #0
 80083b8:	eba6 0807 	sub.w	r8, r6, r7
 80083bc:	608b      	str	r3, [r1, #8]
 80083be:	f1b8 0f00 	cmp.w	r8, #0
 80083c2:	dd9c      	ble.n	80082fe <__sflush_r+0x1a>
 80083c4:	6a21      	ldr	r1, [r4, #32]
 80083c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083c8:	4643      	mov	r3, r8
 80083ca:	463a      	mov	r2, r7
 80083cc:	4628      	mov	r0, r5
 80083ce:	47b0      	blx	r6
 80083d0:	2800      	cmp	r0, #0
 80083d2:	dc06      	bgt.n	80083e2 <__sflush_r+0xfe>
 80083d4:	89a3      	ldrh	r3, [r4, #12]
 80083d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083da:	81a3      	strh	r3, [r4, #12]
 80083dc:	f04f 30ff 	mov.w	r0, #4294967295
 80083e0:	e78e      	b.n	8008300 <__sflush_r+0x1c>
 80083e2:	4407      	add	r7, r0
 80083e4:	eba8 0800 	sub.w	r8, r8, r0
 80083e8:	e7e9      	b.n	80083be <__sflush_r+0xda>
 80083ea:	bf00      	nop
 80083ec:	20400001 	.word	0x20400001

080083f0 <_fflush_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	690b      	ldr	r3, [r1, #16]
 80083f4:	4605      	mov	r5, r0
 80083f6:	460c      	mov	r4, r1
 80083f8:	b913      	cbnz	r3, 8008400 <_fflush_r+0x10>
 80083fa:	2500      	movs	r5, #0
 80083fc:	4628      	mov	r0, r5
 80083fe:	bd38      	pop	{r3, r4, r5, pc}
 8008400:	b118      	cbz	r0, 800840a <_fflush_r+0x1a>
 8008402:	6983      	ldr	r3, [r0, #24]
 8008404:	b90b      	cbnz	r3, 800840a <_fflush_r+0x1a>
 8008406:	f000 f887 	bl	8008518 <__sinit>
 800840a:	4b14      	ldr	r3, [pc, #80]	; (800845c <_fflush_r+0x6c>)
 800840c:	429c      	cmp	r4, r3
 800840e:	d11b      	bne.n	8008448 <_fflush_r+0x58>
 8008410:	686c      	ldr	r4, [r5, #4]
 8008412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d0ef      	beq.n	80083fa <_fflush_r+0xa>
 800841a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800841c:	07d0      	lsls	r0, r2, #31
 800841e:	d404      	bmi.n	800842a <_fflush_r+0x3a>
 8008420:	0599      	lsls	r1, r3, #22
 8008422:	d402      	bmi.n	800842a <_fflush_r+0x3a>
 8008424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008426:	f000 f915 	bl	8008654 <__retarget_lock_acquire_recursive>
 800842a:	4628      	mov	r0, r5
 800842c:	4621      	mov	r1, r4
 800842e:	f7ff ff59 	bl	80082e4 <__sflush_r>
 8008432:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008434:	07da      	lsls	r2, r3, #31
 8008436:	4605      	mov	r5, r0
 8008438:	d4e0      	bmi.n	80083fc <_fflush_r+0xc>
 800843a:	89a3      	ldrh	r3, [r4, #12]
 800843c:	059b      	lsls	r3, r3, #22
 800843e:	d4dd      	bmi.n	80083fc <_fflush_r+0xc>
 8008440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008442:	f000 f908 	bl	8008656 <__retarget_lock_release_recursive>
 8008446:	e7d9      	b.n	80083fc <_fflush_r+0xc>
 8008448:	4b05      	ldr	r3, [pc, #20]	; (8008460 <_fflush_r+0x70>)
 800844a:	429c      	cmp	r4, r3
 800844c:	d101      	bne.n	8008452 <_fflush_r+0x62>
 800844e:	68ac      	ldr	r4, [r5, #8]
 8008450:	e7df      	b.n	8008412 <_fflush_r+0x22>
 8008452:	4b04      	ldr	r3, [pc, #16]	; (8008464 <_fflush_r+0x74>)
 8008454:	429c      	cmp	r4, r3
 8008456:	bf08      	it	eq
 8008458:	68ec      	ldreq	r4, [r5, #12]
 800845a:	e7da      	b.n	8008412 <_fflush_r+0x22>
 800845c:	08008d5c 	.word	0x08008d5c
 8008460:	08008d7c 	.word	0x08008d7c
 8008464:	08008d3c 	.word	0x08008d3c

08008468 <std>:
 8008468:	2300      	movs	r3, #0
 800846a:	b510      	push	{r4, lr}
 800846c:	4604      	mov	r4, r0
 800846e:	e9c0 3300 	strd	r3, r3, [r0]
 8008472:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008476:	6083      	str	r3, [r0, #8]
 8008478:	8181      	strh	r1, [r0, #12]
 800847a:	6643      	str	r3, [r0, #100]	; 0x64
 800847c:	81c2      	strh	r2, [r0, #14]
 800847e:	6183      	str	r3, [r0, #24]
 8008480:	4619      	mov	r1, r3
 8008482:	2208      	movs	r2, #8
 8008484:	305c      	adds	r0, #92	; 0x5c
 8008486:	f7fd fb67 	bl	8005b58 <memset>
 800848a:	4b05      	ldr	r3, [pc, #20]	; (80084a0 <std+0x38>)
 800848c:	6263      	str	r3, [r4, #36]	; 0x24
 800848e:	4b05      	ldr	r3, [pc, #20]	; (80084a4 <std+0x3c>)
 8008490:	62a3      	str	r3, [r4, #40]	; 0x28
 8008492:	4b05      	ldr	r3, [pc, #20]	; (80084a8 <std+0x40>)
 8008494:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008496:	4b05      	ldr	r3, [pc, #20]	; (80084ac <std+0x44>)
 8008498:	6224      	str	r4, [r4, #32]
 800849a:	6323      	str	r3, [r4, #48]	; 0x30
 800849c:	bd10      	pop	{r4, pc}
 800849e:	bf00      	nop
 80084a0:	080087bd 	.word	0x080087bd
 80084a4:	080087df 	.word	0x080087df
 80084a8:	08008817 	.word	0x08008817
 80084ac:	0800883b 	.word	0x0800883b

080084b0 <_cleanup_r>:
 80084b0:	4901      	ldr	r1, [pc, #4]	; (80084b8 <_cleanup_r+0x8>)
 80084b2:	f000 b8af 	b.w	8008614 <_fwalk_reent>
 80084b6:	bf00      	nop
 80084b8:	080083f1 	.word	0x080083f1

080084bc <__sfmoreglue>:
 80084bc:	b570      	push	{r4, r5, r6, lr}
 80084be:	2268      	movs	r2, #104	; 0x68
 80084c0:	1e4d      	subs	r5, r1, #1
 80084c2:	4355      	muls	r5, r2
 80084c4:	460e      	mov	r6, r1
 80084c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80084ca:	f7ff fa65 	bl	8007998 <_malloc_r>
 80084ce:	4604      	mov	r4, r0
 80084d0:	b140      	cbz	r0, 80084e4 <__sfmoreglue+0x28>
 80084d2:	2100      	movs	r1, #0
 80084d4:	e9c0 1600 	strd	r1, r6, [r0]
 80084d8:	300c      	adds	r0, #12
 80084da:	60a0      	str	r0, [r4, #8]
 80084dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80084e0:	f7fd fb3a 	bl	8005b58 <memset>
 80084e4:	4620      	mov	r0, r4
 80084e6:	bd70      	pop	{r4, r5, r6, pc}

080084e8 <__sfp_lock_acquire>:
 80084e8:	4801      	ldr	r0, [pc, #4]	; (80084f0 <__sfp_lock_acquire+0x8>)
 80084ea:	f000 b8b3 	b.w	8008654 <__retarget_lock_acquire_recursive>
 80084ee:	bf00      	nop
 80084f0:	20000389 	.word	0x20000389

080084f4 <__sfp_lock_release>:
 80084f4:	4801      	ldr	r0, [pc, #4]	; (80084fc <__sfp_lock_release+0x8>)
 80084f6:	f000 b8ae 	b.w	8008656 <__retarget_lock_release_recursive>
 80084fa:	bf00      	nop
 80084fc:	20000389 	.word	0x20000389

08008500 <__sinit_lock_acquire>:
 8008500:	4801      	ldr	r0, [pc, #4]	; (8008508 <__sinit_lock_acquire+0x8>)
 8008502:	f000 b8a7 	b.w	8008654 <__retarget_lock_acquire_recursive>
 8008506:	bf00      	nop
 8008508:	2000038a 	.word	0x2000038a

0800850c <__sinit_lock_release>:
 800850c:	4801      	ldr	r0, [pc, #4]	; (8008514 <__sinit_lock_release+0x8>)
 800850e:	f000 b8a2 	b.w	8008656 <__retarget_lock_release_recursive>
 8008512:	bf00      	nop
 8008514:	2000038a 	.word	0x2000038a

08008518 <__sinit>:
 8008518:	b510      	push	{r4, lr}
 800851a:	4604      	mov	r4, r0
 800851c:	f7ff fff0 	bl	8008500 <__sinit_lock_acquire>
 8008520:	69a3      	ldr	r3, [r4, #24]
 8008522:	b11b      	cbz	r3, 800852c <__sinit+0x14>
 8008524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008528:	f7ff bff0 	b.w	800850c <__sinit_lock_release>
 800852c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008530:	6523      	str	r3, [r4, #80]	; 0x50
 8008532:	4b13      	ldr	r3, [pc, #76]	; (8008580 <__sinit+0x68>)
 8008534:	4a13      	ldr	r2, [pc, #76]	; (8008584 <__sinit+0x6c>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	62a2      	str	r2, [r4, #40]	; 0x28
 800853a:	42a3      	cmp	r3, r4
 800853c:	bf04      	itt	eq
 800853e:	2301      	moveq	r3, #1
 8008540:	61a3      	streq	r3, [r4, #24]
 8008542:	4620      	mov	r0, r4
 8008544:	f000 f820 	bl	8008588 <__sfp>
 8008548:	6060      	str	r0, [r4, #4]
 800854a:	4620      	mov	r0, r4
 800854c:	f000 f81c 	bl	8008588 <__sfp>
 8008550:	60a0      	str	r0, [r4, #8]
 8008552:	4620      	mov	r0, r4
 8008554:	f000 f818 	bl	8008588 <__sfp>
 8008558:	2200      	movs	r2, #0
 800855a:	60e0      	str	r0, [r4, #12]
 800855c:	2104      	movs	r1, #4
 800855e:	6860      	ldr	r0, [r4, #4]
 8008560:	f7ff ff82 	bl	8008468 <std>
 8008564:	68a0      	ldr	r0, [r4, #8]
 8008566:	2201      	movs	r2, #1
 8008568:	2109      	movs	r1, #9
 800856a:	f7ff ff7d 	bl	8008468 <std>
 800856e:	68e0      	ldr	r0, [r4, #12]
 8008570:	2202      	movs	r2, #2
 8008572:	2112      	movs	r1, #18
 8008574:	f7ff ff78 	bl	8008468 <std>
 8008578:	2301      	movs	r3, #1
 800857a:	61a3      	str	r3, [r4, #24]
 800857c:	e7d2      	b.n	8008524 <__sinit+0xc>
 800857e:	bf00      	nop
 8008580:	080089c4 	.word	0x080089c4
 8008584:	080084b1 	.word	0x080084b1

08008588 <__sfp>:
 8008588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800858a:	4607      	mov	r7, r0
 800858c:	f7ff ffac 	bl	80084e8 <__sfp_lock_acquire>
 8008590:	4b1e      	ldr	r3, [pc, #120]	; (800860c <__sfp+0x84>)
 8008592:	681e      	ldr	r6, [r3, #0]
 8008594:	69b3      	ldr	r3, [r6, #24]
 8008596:	b913      	cbnz	r3, 800859e <__sfp+0x16>
 8008598:	4630      	mov	r0, r6
 800859a:	f7ff ffbd 	bl	8008518 <__sinit>
 800859e:	3648      	adds	r6, #72	; 0x48
 80085a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80085a4:	3b01      	subs	r3, #1
 80085a6:	d503      	bpl.n	80085b0 <__sfp+0x28>
 80085a8:	6833      	ldr	r3, [r6, #0]
 80085aa:	b30b      	cbz	r3, 80085f0 <__sfp+0x68>
 80085ac:	6836      	ldr	r6, [r6, #0]
 80085ae:	e7f7      	b.n	80085a0 <__sfp+0x18>
 80085b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80085b4:	b9d5      	cbnz	r5, 80085ec <__sfp+0x64>
 80085b6:	4b16      	ldr	r3, [pc, #88]	; (8008610 <__sfp+0x88>)
 80085b8:	60e3      	str	r3, [r4, #12]
 80085ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80085be:	6665      	str	r5, [r4, #100]	; 0x64
 80085c0:	f000 f847 	bl	8008652 <__retarget_lock_init_recursive>
 80085c4:	f7ff ff96 	bl	80084f4 <__sfp_lock_release>
 80085c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80085cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80085d0:	6025      	str	r5, [r4, #0]
 80085d2:	61a5      	str	r5, [r4, #24]
 80085d4:	2208      	movs	r2, #8
 80085d6:	4629      	mov	r1, r5
 80085d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80085dc:	f7fd fabc 	bl	8005b58 <memset>
 80085e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80085e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80085e8:	4620      	mov	r0, r4
 80085ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085ec:	3468      	adds	r4, #104	; 0x68
 80085ee:	e7d9      	b.n	80085a4 <__sfp+0x1c>
 80085f0:	2104      	movs	r1, #4
 80085f2:	4638      	mov	r0, r7
 80085f4:	f7ff ff62 	bl	80084bc <__sfmoreglue>
 80085f8:	4604      	mov	r4, r0
 80085fa:	6030      	str	r0, [r6, #0]
 80085fc:	2800      	cmp	r0, #0
 80085fe:	d1d5      	bne.n	80085ac <__sfp+0x24>
 8008600:	f7ff ff78 	bl	80084f4 <__sfp_lock_release>
 8008604:	230c      	movs	r3, #12
 8008606:	603b      	str	r3, [r7, #0]
 8008608:	e7ee      	b.n	80085e8 <__sfp+0x60>
 800860a:	bf00      	nop
 800860c:	080089c4 	.word	0x080089c4
 8008610:	ffff0001 	.word	0xffff0001

08008614 <_fwalk_reent>:
 8008614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008618:	4606      	mov	r6, r0
 800861a:	4688      	mov	r8, r1
 800861c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008620:	2700      	movs	r7, #0
 8008622:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008626:	f1b9 0901 	subs.w	r9, r9, #1
 800862a:	d505      	bpl.n	8008638 <_fwalk_reent+0x24>
 800862c:	6824      	ldr	r4, [r4, #0]
 800862e:	2c00      	cmp	r4, #0
 8008630:	d1f7      	bne.n	8008622 <_fwalk_reent+0xe>
 8008632:	4638      	mov	r0, r7
 8008634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008638:	89ab      	ldrh	r3, [r5, #12]
 800863a:	2b01      	cmp	r3, #1
 800863c:	d907      	bls.n	800864e <_fwalk_reent+0x3a>
 800863e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008642:	3301      	adds	r3, #1
 8008644:	d003      	beq.n	800864e <_fwalk_reent+0x3a>
 8008646:	4629      	mov	r1, r5
 8008648:	4630      	mov	r0, r6
 800864a:	47c0      	blx	r8
 800864c:	4307      	orrs	r7, r0
 800864e:	3568      	adds	r5, #104	; 0x68
 8008650:	e7e9      	b.n	8008626 <_fwalk_reent+0x12>

08008652 <__retarget_lock_init_recursive>:
 8008652:	4770      	bx	lr

08008654 <__retarget_lock_acquire_recursive>:
 8008654:	4770      	bx	lr

08008656 <__retarget_lock_release_recursive>:
 8008656:	4770      	bx	lr

08008658 <__swhatbuf_r>:
 8008658:	b570      	push	{r4, r5, r6, lr}
 800865a:	460e      	mov	r6, r1
 800865c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008660:	2900      	cmp	r1, #0
 8008662:	b096      	sub	sp, #88	; 0x58
 8008664:	4614      	mov	r4, r2
 8008666:	461d      	mov	r5, r3
 8008668:	da08      	bge.n	800867c <__swhatbuf_r+0x24>
 800866a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	602a      	str	r2, [r5, #0]
 8008672:	061a      	lsls	r2, r3, #24
 8008674:	d410      	bmi.n	8008698 <__swhatbuf_r+0x40>
 8008676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800867a:	e00e      	b.n	800869a <__swhatbuf_r+0x42>
 800867c:	466a      	mov	r2, sp
 800867e:	f000 f903 	bl	8008888 <_fstat_r>
 8008682:	2800      	cmp	r0, #0
 8008684:	dbf1      	blt.n	800866a <__swhatbuf_r+0x12>
 8008686:	9a01      	ldr	r2, [sp, #4]
 8008688:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800868c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008690:	425a      	negs	r2, r3
 8008692:	415a      	adcs	r2, r3
 8008694:	602a      	str	r2, [r5, #0]
 8008696:	e7ee      	b.n	8008676 <__swhatbuf_r+0x1e>
 8008698:	2340      	movs	r3, #64	; 0x40
 800869a:	2000      	movs	r0, #0
 800869c:	6023      	str	r3, [r4, #0]
 800869e:	b016      	add	sp, #88	; 0x58
 80086a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080086a4 <__smakebuf_r>:
 80086a4:	898b      	ldrh	r3, [r1, #12]
 80086a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80086a8:	079d      	lsls	r5, r3, #30
 80086aa:	4606      	mov	r6, r0
 80086ac:	460c      	mov	r4, r1
 80086ae:	d507      	bpl.n	80086c0 <__smakebuf_r+0x1c>
 80086b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80086b4:	6023      	str	r3, [r4, #0]
 80086b6:	6123      	str	r3, [r4, #16]
 80086b8:	2301      	movs	r3, #1
 80086ba:	6163      	str	r3, [r4, #20]
 80086bc:	b002      	add	sp, #8
 80086be:	bd70      	pop	{r4, r5, r6, pc}
 80086c0:	ab01      	add	r3, sp, #4
 80086c2:	466a      	mov	r2, sp
 80086c4:	f7ff ffc8 	bl	8008658 <__swhatbuf_r>
 80086c8:	9900      	ldr	r1, [sp, #0]
 80086ca:	4605      	mov	r5, r0
 80086cc:	4630      	mov	r0, r6
 80086ce:	f7ff f963 	bl	8007998 <_malloc_r>
 80086d2:	b948      	cbnz	r0, 80086e8 <__smakebuf_r+0x44>
 80086d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086d8:	059a      	lsls	r2, r3, #22
 80086da:	d4ef      	bmi.n	80086bc <__smakebuf_r+0x18>
 80086dc:	f023 0303 	bic.w	r3, r3, #3
 80086e0:	f043 0302 	orr.w	r3, r3, #2
 80086e4:	81a3      	strh	r3, [r4, #12]
 80086e6:	e7e3      	b.n	80086b0 <__smakebuf_r+0xc>
 80086e8:	4b0d      	ldr	r3, [pc, #52]	; (8008720 <__smakebuf_r+0x7c>)
 80086ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80086ec:	89a3      	ldrh	r3, [r4, #12]
 80086ee:	6020      	str	r0, [r4, #0]
 80086f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086f4:	81a3      	strh	r3, [r4, #12]
 80086f6:	9b00      	ldr	r3, [sp, #0]
 80086f8:	6163      	str	r3, [r4, #20]
 80086fa:	9b01      	ldr	r3, [sp, #4]
 80086fc:	6120      	str	r0, [r4, #16]
 80086fe:	b15b      	cbz	r3, 8008718 <__smakebuf_r+0x74>
 8008700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008704:	4630      	mov	r0, r6
 8008706:	f000 f8d1 	bl	80088ac <_isatty_r>
 800870a:	b128      	cbz	r0, 8008718 <__smakebuf_r+0x74>
 800870c:	89a3      	ldrh	r3, [r4, #12]
 800870e:	f023 0303 	bic.w	r3, r3, #3
 8008712:	f043 0301 	orr.w	r3, r3, #1
 8008716:	81a3      	strh	r3, [r4, #12]
 8008718:	89a0      	ldrh	r0, [r4, #12]
 800871a:	4305      	orrs	r5, r0
 800871c:	81a5      	strh	r5, [r4, #12]
 800871e:	e7cd      	b.n	80086bc <__smakebuf_r+0x18>
 8008720:	080084b1 	.word	0x080084b1

08008724 <_malloc_usable_size_r>:
 8008724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008728:	1f18      	subs	r0, r3, #4
 800872a:	2b00      	cmp	r3, #0
 800872c:	bfbc      	itt	lt
 800872e:	580b      	ldrlt	r3, [r1, r0]
 8008730:	18c0      	addlt	r0, r0, r3
 8008732:	4770      	bx	lr

08008734 <_raise_r>:
 8008734:	291f      	cmp	r1, #31
 8008736:	b538      	push	{r3, r4, r5, lr}
 8008738:	4604      	mov	r4, r0
 800873a:	460d      	mov	r5, r1
 800873c:	d904      	bls.n	8008748 <_raise_r+0x14>
 800873e:	2316      	movs	r3, #22
 8008740:	6003      	str	r3, [r0, #0]
 8008742:	f04f 30ff 	mov.w	r0, #4294967295
 8008746:	bd38      	pop	{r3, r4, r5, pc}
 8008748:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800874a:	b112      	cbz	r2, 8008752 <_raise_r+0x1e>
 800874c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008750:	b94b      	cbnz	r3, 8008766 <_raise_r+0x32>
 8008752:	4620      	mov	r0, r4
 8008754:	f000 f830 	bl	80087b8 <_getpid_r>
 8008758:	462a      	mov	r2, r5
 800875a:	4601      	mov	r1, r0
 800875c:	4620      	mov	r0, r4
 800875e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008762:	f000 b817 	b.w	8008794 <_kill_r>
 8008766:	2b01      	cmp	r3, #1
 8008768:	d00a      	beq.n	8008780 <_raise_r+0x4c>
 800876a:	1c59      	adds	r1, r3, #1
 800876c:	d103      	bne.n	8008776 <_raise_r+0x42>
 800876e:	2316      	movs	r3, #22
 8008770:	6003      	str	r3, [r0, #0]
 8008772:	2001      	movs	r0, #1
 8008774:	e7e7      	b.n	8008746 <_raise_r+0x12>
 8008776:	2400      	movs	r4, #0
 8008778:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800877c:	4628      	mov	r0, r5
 800877e:	4798      	blx	r3
 8008780:	2000      	movs	r0, #0
 8008782:	e7e0      	b.n	8008746 <_raise_r+0x12>

08008784 <raise>:
 8008784:	4b02      	ldr	r3, [pc, #8]	; (8008790 <raise+0xc>)
 8008786:	4601      	mov	r1, r0
 8008788:	6818      	ldr	r0, [r3, #0]
 800878a:	f7ff bfd3 	b.w	8008734 <_raise_r>
 800878e:	bf00      	nop
 8008790:	20000010 	.word	0x20000010

08008794 <_kill_r>:
 8008794:	b538      	push	{r3, r4, r5, lr}
 8008796:	4d07      	ldr	r5, [pc, #28]	; (80087b4 <_kill_r+0x20>)
 8008798:	2300      	movs	r3, #0
 800879a:	4604      	mov	r4, r0
 800879c:	4608      	mov	r0, r1
 800879e:	4611      	mov	r1, r2
 80087a0:	602b      	str	r3, [r5, #0]
 80087a2:	f7f9 fcef 	bl	8002184 <_kill>
 80087a6:	1c43      	adds	r3, r0, #1
 80087a8:	d102      	bne.n	80087b0 <_kill_r+0x1c>
 80087aa:	682b      	ldr	r3, [r5, #0]
 80087ac:	b103      	cbz	r3, 80087b0 <_kill_r+0x1c>
 80087ae:	6023      	str	r3, [r4, #0]
 80087b0:	bd38      	pop	{r3, r4, r5, pc}
 80087b2:	bf00      	nop
 80087b4:	20000384 	.word	0x20000384

080087b8 <_getpid_r>:
 80087b8:	f7f9 bcdc 	b.w	8002174 <_getpid>

080087bc <__sread>:
 80087bc:	b510      	push	{r4, lr}
 80087be:	460c      	mov	r4, r1
 80087c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087c4:	f000 f894 	bl	80088f0 <_read_r>
 80087c8:	2800      	cmp	r0, #0
 80087ca:	bfab      	itete	ge
 80087cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80087ce:	89a3      	ldrhlt	r3, [r4, #12]
 80087d0:	181b      	addge	r3, r3, r0
 80087d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80087d6:	bfac      	ite	ge
 80087d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80087da:	81a3      	strhlt	r3, [r4, #12]
 80087dc:	bd10      	pop	{r4, pc}

080087de <__swrite>:
 80087de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087e2:	461f      	mov	r7, r3
 80087e4:	898b      	ldrh	r3, [r1, #12]
 80087e6:	05db      	lsls	r3, r3, #23
 80087e8:	4605      	mov	r5, r0
 80087ea:	460c      	mov	r4, r1
 80087ec:	4616      	mov	r6, r2
 80087ee:	d505      	bpl.n	80087fc <__swrite+0x1e>
 80087f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087f4:	2302      	movs	r3, #2
 80087f6:	2200      	movs	r2, #0
 80087f8:	f000 f868 	bl	80088cc <_lseek_r>
 80087fc:	89a3      	ldrh	r3, [r4, #12]
 80087fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008802:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008806:	81a3      	strh	r3, [r4, #12]
 8008808:	4632      	mov	r2, r6
 800880a:	463b      	mov	r3, r7
 800880c:	4628      	mov	r0, r5
 800880e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008812:	f000 b817 	b.w	8008844 <_write_r>

08008816 <__sseek>:
 8008816:	b510      	push	{r4, lr}
 8008818:	460c      	mov	r4, r1
 800881a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800881e:	f000 f855 	bl	80088cc <_lseek_r>
 8008822:	1c43      	adds	r3, r0, #1
 8008824:	89a3      	ldrh	r3, [r4, #12]
 8008826:	bf15      	itete	ne
 8008828:	6560      	strne	r0, [r4, #84]	; 0x54
 800882a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800882e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008832:	81a3      	strheq	r3, [r4, #12]
 8008834:	bf18      	it	ne
 8008836:	81a3      	strhne	r3, [r4, #12]
 8008838:	bd10      	pop	{r4, pc}

0800883a <__sclose>:
 800883a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800883e:	f000 b813 	b.w	8008868 <_close_r>
	...

08008844 <_write_r>:
 8008844:	b538      	push	{r3, r4, r5, lr}
 8008846:	4d07      	ldr	r5, [pc, #28]	; (8008864 <_write_r+0x20>)
 8008848:	4604      	mov	r4, r0
 800884a:	4608      	mov	r0, r1
 800884c:	4611      	mov	r1, r2
 800884e:	2200      	movs	r2, #0
 8008850:	602a      	str	r2, [r5, #0]
 8008852:	461a      	mov	r2, r3
 8008854:	f7f9 fccd 	bl	80021f2 <_write>
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	d102      	bne.n	8008862 <_write_r+0x1e>
 800885c:	682b      	ldr	r3, [r5, #0]
 800885e:	b103      	cbz	r3, 8008862 <_write_r+0x1e>
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	bd38      	pop	{r3, r4, r5, pc}
 8008864:	20000384 	.word	0x20000384

08008868 <_close_r>:
 8008868:	b538      	push	{r3, r4, r5, lr}
 800886a:	4d06      	ldr	r5, [pc, #24]	; (8008884 <_close_r+0x1c>)
 800886c:	2300      	movs	r3, #0
 800886e:	4604      	mov	r4, r0
 8008870:	4608      	mov	r0, r1
 8008872:	602b      	str	r3, [r5, #0]
 8008874:	f7f9 fcd9 	bl	800222a <_close>
 8008878:	1c43      	adds	r3, r0, #1
 800887a:	d102      	bne.n	8008882 <_close_r+0x1a>
 800887c:	682b      	ldr	r3, [r5, #0]
 800887e:	b103      	cbz	r3, 8008882 <_close_r+0x1a>
 8008880:	6023      	str	r3, [r4, #0]
 8008882:	bd38      	pop	{r3, r4, r5, pc}
 8008884:	20000384 	.word	0x20000384

08008888 <_fstat_r>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	4d07      	ldr	r5, [pc, #28]	; (80088a8 <_fstat_r+0x20>)
 800888c:	2300      	movs	r3, #0
 800888e:	4604      	mov	r4, r0
 8008890:	4608      	mov	r0, r1
 8008892:	4611      	mov	r1, r2
 8008894:	602b      	str	r3, [r5, #0]
 8008896:	f7f9 fcd4 	bl	8002242 <_fstat>
 800889a:	1c43      	adds	r3, r0, #1
 800889c:	d102      	bne.n	80088a4 <_fstat_r+0x1c>
 800889e:	682b      	ldr	r3, [r5, #0]
 80088a0:	b103      	cbz	r3, 80088a4 <_fstat_r+0x1c>
 80088a2:	6023      	str	r3, [r4, #0]
 80088a4:	bd38      	pop	{r3, r4, r5, pc}
 80088a6:	bf00      	nop
 80088a8:	20000384 	.word	0x20000384

080088ac <_isatty_r>:
 80088ac:	b538      	push	{r3, r4, r5, lr}
 80088ae:	4d06      	ldr	r5, [pc, #24]	; (80088c8 <_isatty_r+0x1c>)
 80088b0:	2300      	movs	r3, #0
 80088b2:	4604      	mov	r4, r0
 80088b4:	4608      	mov	r0, r1
 80088b6:	602b      	str	r3, [r5, #0]
 80088b8:	f7f9 fcd3 	bl	8002262 <_isatty>
 80088bc:	1c43      	adds	r3, r0, #1
 80088be:	d102      	bne.n	80088c6 <_isatty_r+0x1a>
 80088c0:	682b      	ldr	r3, [r5, #0]
 80088c2:	b103      	cbz	r3, 80088c6 <_isatty_r+0x1a>
 80088c4:	6023      	str	r3, [r4, #0]
 80088c6:	bd38      	pop	{r3, r4, r5, pc}
 80088c8:	20000384 	.word	0x20000384

080088cc <_lseek_r>:
 80088cc:	b538      	push	{r3, r4, r5, lr}
 80088ce:	4d07      	ldr	r5, [pc, #28]	; (80088ec <_lseek_r+0x20>)
 80088d0:	4604      	mov	r4, r0
 80088d2:	4608      	mov	r0, r1
 80088d4:	4611      	mov	r1, r2
 80088d6:	2200      	movs	r2, #0
 80088d8:	602a      	str	r2, [r5, #0]
 80088da:	461a      	mov	r2, r3
 80088dc:	f7f9 fccc 	bl	8002278 <_lseek>
 80088e0:	1c43      	adds	r3, r0, #1
 80088e2:	d102      	bne.n	80088ea <_lseek_r+0x1e>
 80088e4:	682b      	ldr	r3, [r5, #0]
 80088e6:	b103      	cbz	r3, 80088ea <_lseek_r+0x1e>
 80088e8:	6023      	str	r3, [r4, #0]
 80088ea:	bd38      	pop	{r3, r4, r5, pc}
 80088ec:	20000384 	.word	0x20000384

080088f0 <_read_r>:
 80088f0:	b538      	push	{r3, r4, r5, lr}
 80088f2:	4d07      	ldr	r5, [pc, #28]	; (8008910 <_read_r+0x20>)
 80088f4:	4604      	mov	r4, r0
 80088f6:	4608      	mov	r0, r1
 80088f8:	4611      	mov	r1, r2
 80088fa:	2200      	movs	r2, #0
 80088fc:	602a      	str	r2, [r5, #0]
 80088fe:	461a      	mov	r2, r3
 8008900:	f7f9 fc5a 	bl	80021b8 <_read>
 8008904:	1c43      	adds	r3, r0, #1
 8008906:	d102      	bne.n	800890e <_read_r+0x1e>
 8008908:	682b      	ldr	r3, [r5, #0]
 800890a:	b103      	cbz	r3, 800890e <_read_r+0x1e>
 800890c:	6023      	str	r3, [r4, #0]
 800890e:	bd38      	pop	{r3, r4, r5, pc}
 8008910:	20000384 	.word	0x20000384

08008914 <_init>:
 8008914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008916:	bf00      	nop
 8008918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800891a:	bc08      	pop	{r3}
 800891c:	469e      	mov	lr, r3
 800891e:	4770      	bx	lr

08008920 <_fini>:
 8008920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008922:	bf00      	nop
 8008924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008926:	bc08      	pop	{r3}
 8008928:	469e      	mov	lr, r3
 800892a:	4770      	bx	lr
